///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              20/Jul/2020  15:18:11
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\Source\user_printf.c
//    Command line       =  
//        -f C:\Users\sunli\AppData\Local\Temp\EWE7D9.tmp ("D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\Source\user_printf.c"
//        -D ZCL_REPORT_DESTINATION_DEVICE -D BDB_REPORTING -D SECURE=1 -D
//        TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D
//        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_APP_CNF_FUNC -D
//        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
//        -D ZCL_HVAC_CLUSTER -D ZCL_GROUPS -D ZCL_REPORTING_DEVICE -D
//        ZCL_TEMPERATURE_MEASUREMENT -lC "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\List"
//        -lA "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\" -I
//        "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\Source\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\Source\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\List\user_printf.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME user_printf

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_DIV_MOD
        EXTERN ?VB
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8

        FUNCTION `??print::?relay`,0203H
        FUNCTION `??printchar::?relay`,0203H
        PUBLIC `??printf::?relay`
        FUNCTION `??printf::?relay`,0203H
        FUNCTION `??printi::?relay`,0203H
        FUNCTION `??prints::?relay`,0203H
        PUBLIC `??putchar::?relay`
        FUNCTION `??putchar::?relay`,0203H
        PUBLIC `??sprintf::?relay`
        FUNCTION `??sprintf::?relay`,0203H
        FUNCTION print,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 30, STACK
        FUNCTION printchar,021203H
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        PUBLIC printf
        FUNCTION printf,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION printi,0a1203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 32, STACK
        FUNCTION prints,0a1203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC putchar
        FUNCTION putchar,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC sprintf
        FUNCTION sprintf,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalUARTWrite        SYMBOL "HalUARTWrite"
`??HalUARTWrite::?relay` SYMBOL "?relay", HalUARTWrite
printf              SYMBOL "printf"
`??printf::?relay`  SYMBOL "?relay", printf
putchar             SYMBOL "putchar"
`??putchar::?relay` SYMBOL "?relay", putchar
sprintf             SYMBOL "sprintf"
`??sprintf::?relay` SYMBOL "?relay", sprintf

        EXTERN `??HalUARTWrite::?relay`
        FUNCTION `??HalUARTWrite::?relay`,00H
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\AA\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\Source\user_printf.c
//    1 /*
//    2 	Copyright 2001, 2002 Georges Menie (www.menie.org)
//    3 	stdarg version contributed by Christian Ettinger
//    4 
//    5     This program is free software; you can redistribute it and/or modify
//    6     it under the terms of the GNU Lesser General Public License as published by
//    7     the Free Software Foundation; either version 2 of the License, or
//    8     (at your option) any later version.
//    9 
//   10     This program is distributed in the hope that it will be useful,
//   11     but WITHOUT ANY WARRANTY; without even the implied warranty of
//   12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   13     GNU Lesser General Public License for more details.
//   14 
//   15     You should have received a copy of the GNU Lesser General Public License
//   16     along with this program; if not, write to the Free Software
//   17     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//   18 */
//   19 
//   20 /*
//   21 	putchar is the only external dependency for this file,
//   22 	if you have a working putchar, leave it commented out.
//   23 	If not, uncomment the define below and
//   24 	replace outbyte(c) by your own function call.
//   25 
//   26 #define putchar(c) outbyte(c)
//   27 */
//   28 
//   29 #include "stdarg.h"
//   30 #include "user_printf.h"
//   31 #include "hal_uart.h"
//   32 
//   33 void putchar(char c);

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   34 void putchar(char c){
putchar:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function putchar
        CODE
        FUNCALL putchar, HalUARTWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 1)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
//   35   HalUARTWrite(HAL_UART_PORT_0,(uint8*)&c,1);
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0x1
        MOV       R5,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//   36 }
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock1
//   37 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   38 static void printchar(char **str, int c)
printchar:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function printchar
        CODE
//   39 {
        FUNCALL printchar, putchar
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   40 	extern void putchar(char c);
//   41 	
//   42 	if (str) {
        MOV       A,R2
        ORL       A,R3
        JZ        ??printchar_0
//   43 		**str = c;
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV       A,R4
        MOVX      @DPTR,A
//   44 		++(*str);
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R1,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        SJMP      ??printchar_1
//   45 	}
//   46 	else (void)putchar((char)c);
??printchar_0:
        ; Setup parameters for call to function putchar
        MOV       A,R4
        MOV       R1,A
        LCALL     `??putchar::?relay`; Banked call to: putchar
//   47 }
??printchar_1:
        SJMP      ?Subroutine0
          CFI EndBlock cfiBlock2
//   48 
//   49 #define PAD_RIGHT 1
//   50 #define PAD_ZERO 2
//   51 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   52 static int prints(char **out, const char *string, int width, int pad)
prints:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function prints
        CODE
//   53 {
        FUNCALL prints, printchar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prints, printchar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prints, printchar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV       ?V6,R2
        MOV       ?V7,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
//   54 	register int pc = 0, padchar = ' ';
        MOV       R6,#0x0
        MOV       R7,#0x0
        MOV       ?V4,#0x20
        MOV       ?V5,R6
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
//   55 
//   56 	if (width > 0) {
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_4:
        JC        ??prints_0
//   57 		register int len = 0;
        MOV       R2,#0x0
        MOV       R3,#0x0
//   58 		register const char *ptr;
//   59 		for (ptr = string; *ptr; ++ptr) ++len;
        MOV       DPL,R4
        MOV       DPH,R5
        SJMP      ??prints_1
??prints_2:
        INC       R2
        MOV       A,R2
        JNZ       ??prints_3
        INC       R3
??prints_3:
        INC       DPTR
??prints_1:
        MOVX      A,@DPTR
        JNZ       ??prints_2
//   60 		if (len >= width) width = 0;
        CLR       C
        MOV       A,R2
        SUBB      A,?V0
        MOV       A,R3
        SUBB      A,?V1
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        JC        ??prints_4
        MOV       ?V0,R6
        MOV       ?V1,R6
        SJMP      ??prints_5
//   61 		else width -= len;
??prints_4:
        CLR       C
        MOV       A,?V0
        SUBB      A,R2
        MOV       ?V0,A
        MOV       A,?V1
        SUBB      A,R3
        MOV       ?V1,A
//   62 		if (pad & PAD_ZERO) padchar = '0';
??prints_5:
        MOV       A,R0
        ANL       A,#0x2
        JZ        ??prints_0
        MOV       ?V4,#0x30
//   63 	}
//   64 	if (!(pad & PAD_RIGHT)) {
??prints_0:
        MOV       A,R0
        MOV       C,0xE0 /* A   */.0
        JC        ??prints_6
        SJMP      ??CrossCallReturnLabel_12
//   65 		for ( ; width > 0; --width) {
//   66 			printchar (out, padchar);
??prints_7:
        ; Setup parameters for call to function printchar
        MOV       R4,?V4
        MOV       R5,?V5
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??printchar::?relay`; Banked call to: printchar
//   67 			++pc;
        INC       R6
        MOV       A,R6
        JNZ       ??prints_8
        INC       R7
//   68 		}
??prints_8:
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL     ?Subroutine4 & 0xFFFF
//   69 	}
??CrossCallReturnLabel_5:
        JNC       ??prints_7
//   70 	for ( ; *string ; ++string) {
??prints_6:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        JZ        ??CrossCallReturnLabel_13
//   71 		printchar (out, *string);
        ; Setup parameters for call to function printchar
        MOV       R4,A
        MOV       R5,#0x0
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??printchar::?relay`; Banked call to: printchar
//   72 		++pc;
        INC       R6
        MOV       A,R6
        JNZ       ??prints_9
        INC       R7
//   73 	}
??prints_9:
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        MOV       ?V2,DPL
        MOV       ?V3,DPH
        SJMP      ??prints_6
//   74 	for ( ; width > 0; --width) {
//   75 		printchar (out, padchar);
??prints_10:
        ; Setup parameters for call to function printchar
        MOV       R4,?V4
        MOV       R5,?V5
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??printchar::?relay`; Banked call to: printchar
//   76 		++pc;
        INC       R6
        MOV       A,R6
        JNZ       ??prints_11
        INC       R7
//   77 	}
??prints_11:
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_13:
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_6:
        JNC       ??prints_10
//   78 
//   79 	return pc;
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
//   80 }
          CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function prints
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function prints
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond5) CFA_SP SP+-2
          CFI (cfiCond5) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function prints
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker7 Using cfiCommon1
          CFI (cfiPicker7) NoFunction
          CFI (cfiPicker7) Picker
        CLR       C
        MOV       A,?V0
        SUBB      A,#0x1
        MOV       A,?V1
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_19:
        RET
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiPicker7

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond8 Using cfiCommon0
          CFI Function prints
          CFI Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function prints
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_5
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-4
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function prints
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_6
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-4
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function printi
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond11) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function printi
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond12) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker13 Using cfiCommon1
          CFI (cfiPicker13) NoFunction
          CFI (cfiPicker13) Picker
        SUBB      A,#0x0
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        RET
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiPicker13
//   81 
//   82 /* the following should be enough for 16 bit int */
//   83 #define PRINT_BUF_LEN 6
//   84 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   85 static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
printi:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function printi
        CODE
//   86 {
        FUNCALL printi, prints
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL printi, printchar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL printi, prints
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV       A,#-0x16
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 6
        MOV       A,#-0x6
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V6,R2
        MOV       ?V7,R3
        MOV       A,R4
        MOV       R0,A
        MOV       A,R5
        MOV       R1,A
//   87 	char print_buf[PRINT_BUF_LEN];
//   88 	register char *s;
//   89 	register int t, neg = 0, pc = 0;
        CLR       ?VB.0
        MOV       ?V4,#0x0
//   90 	register unsigned int u = i;
        MOV       A,#0x20
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       A,#0x22
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
//   91 
//   92 	if (i == 0) {
        MOV       A,R4
        ORL       A,R1
        JNZ       ??printi_0
//   93 		print_buf[0] = '0';
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x30
        MOVX      @DPTR,A
//   94 		print_buf[1] = '\0';
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
//   95 		return prints (out, print_buf, width, pad);
        ; Setup parameters for call to function prints
        MOV       ?V2,R6
        MOV       ?V3,R7
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP102_8
        LCALL     `??prints::?relay`; Banked call to: prints
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        LJMP      ??printi_1 & 0xFFFF
//   96 	}
??printi_0:
        MOV       A,#0x1c
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V8,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V9,A
//   97 
//   98 	if (sg && b == 10 && i < 0) {
        MOV       A,#0x1e
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        ORL       A,R3
        JZ        ??printi_2
        MOV       A,#0xa
        XRL       A,?V8
        ORL       A,?V9
        JNZ       ??printi_2
        CLR       C
        MOV       A,R5
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_17:
        JNC       ??printi_2
//   99 		neg = 1;
        SETB      ?VB.0
//  100 		u = -i;
        CLR       C
        CLR       A
        SUBB      A,R0
        MOV       R4,A
        CLR       A
        SUBB      A,R1
        MOV       R5,A
//  101 	}
//  102 
//  103 	s = print_buf + PRINT_BUF_LEN-1;
??printi_2:
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       ?V2,DPL
        MOV       ?V3,DPH
//  104 	*s = '\0';
        CLR       A
        MOVX      @DPTR,A
        MOV       A,#0x24
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V12,A
        SJMP      ??printi_3
//  105 
//  106 	while (u) {
//  107 		t = u % b;
??printi_4:
        MOV       A,R4
        MOV       R0,A
        MOV       A,R5
        MOV       R1,A
        MOV       R2,?V8
        MOV       R3,?V9
        LCALL     ?US_DIV_MOD
        MOV       ?V2,R2
        MOV       R0,?V2
//  108 		if( t >= 10 )
        MOV       A,R2
        SUBB      A,#0xa
        MOV       A,R3
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_18:
        JC        ??printi_5
//  109 			t += letbase - '0' - 10;
        MOV       A,?V12
        ADD       A,#-0x3a
        MOV       R2,A
        MOV       A,R0
        ADD       A,R2
        MOV       R0,A
//  110 		*--s = t + '0';
??printi_5:
        MOV       ?V2,DPL
        MOV       ?V3,DPH
        MOV       A,R0
        ADD       A,#0x30
        MOVX      @DPTR,A
//  111 		u /= b;
        MOV       A,R4
        MOV       R0,A
        MOV       A,R5
        MOV       R1,A
        MOV       R2,?V8
        MOV       R3,?V9
        LCALL     ?US_DIV_MOD
        MOV       ?V10,R0
        MOV       ?V11,R1
        MOV       R4,?V10
        MOV       R5,?V11
//  112 	}
??printi_3:
        MOV       A,?V2
        ADD       A,#-0x1
        MOV       DPL,A
        MOV       A,?V3
        ADDC      A,#-0x1
        MOV       DPH,A
        MOV       A,R4
        ORL       A,R5
        JNZ       ??printi_4
//  113 
//  114 	if (neg) {
        MOV       C,?VB.0
        JNC       ??printi_6
//  115 		if( width && (pad & PAD_ZERO) ) {
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??printi_7
        MOV       A,R6
        ANL       A,#0x2
        JZ        ??printi_7
//  116 			printchar (out, '-');
        ; Setup parameters for call to function printchar
        MOV       R4,#0x2d
        MOV       R5,#0x0
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??printchar::?relay`; Banked call to: printchar
//  117 			++pc;
        MOV       ?V4,#0x1
//  118 			--width;
        LCALL     ?Subroutine7 & 0xFFFF
//  119 		}
??CrossCallReturnLabel_14:
        SJMP      ??printi_6
//  120 		else {
//  121 			*--s = '-';
??printi_7:
        MOV       ?V2,DPL
        MOV       ?V3,DPH
        MOV       A,#0x2d
        MOVX      @DPTR,A
//  122 		}
//  123 	}
//  124 
//  125 	return pc + prints (out, s, width, pad);
??printi_6:
        ; Setup parameters for call to function prints
        MOV       ?V8,R6
        MOV       ?V9,R7
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       R4,?V2
        MOV       R5,?V3
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??prints::?relay`; Banked call to: prints
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V1,R3
        MOV       A,?V4
        ADD       A,R2
        MOV       R2,A
        CLR       A
        ADDC      A,?V1
        MOV       R3,A
??printi_1:
        MOV       A,#0x6
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R7,#0xe
        LJMP      ?BANKED_LEAVE_XDATA
//  126 }
          CFI EndBlock cfiBlock14

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond15 Using cfiCommon0
          CFI Function prints
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function prints
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function printi
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond17) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker18 Using cfiCommon1
          CFI (cfiPicker18) NoFunction
          CFI (cfiPicker18) Picker
        MOV       A,?V0
        ADD       A,#-0x1
        MOV       ?V0,A
        MOV       A,?V1
        ADDC      A,#-0x1
        MOV       ?V1,A
        RET
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiPicker18
//  127 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  128 static int print(char **out, const char *format, va_list args )
print:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function print
        CODE
//  129 {
        FUNCALL print, printchar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL print, prints
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL print, printi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL print, printi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL print, printi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL print, printi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL print, prints
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV       A,#-0x12
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
//  130 	register int width, pad;
//  131 	register int pc = 0;
        MOV       ?V2,#0x0
        MOV       ?V3,#0x0
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V5,A
        SJMP      ??print_0
//  132 	char scr[2];
//  133 
//  134 	for (; *format != 0; ++format) {
//  135 		if (*format == '%') {
//  136 			++format;
//  137 			width = pad = 0;
//  138 			if (*format == '\0') break;
//  139 			if (*format == '%') goto out;
//  140 			if (*format == '-') {
//  141 				++format;
//  142 				pad = PAD_RIGHT;
//  143 			}
//  144 			while (*format == '0') {
//  145 				++format;
//  146 				pad |= PAD_ZERO;
//  147 			}
//  148 			for ( ; *format >= '0' && *format <= '9'; ++format) {
//  149 				width *= 10;
//  150 				width += *format - '0';
//  151 			}
//  152 			if( *format == 's' ) {
//  153 				register char *s = (char *)va_arg( args, int );
//  154 				pc += prints (out, s?s:"(null)", width, pad);
//  155 				continue;
//  156 			}
//  157 			if( *format == 'd' ) {
//  158 				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
//  159 				continue;
//  160 			}
//  161 			if( *format == 'x' ) {
//  162 				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
//  163 				continue;
//  164 			}
//  165 			if( *format == 'X' ) {
//  166 				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
//  167 				continue;
//  168 			}
//  169 			if( *format == 'u' ) {
//  170 				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
//  171 				continue;
//  172 			}
//  173 			if( *format == 'c' ) {
//  174 				/* char are converted to int then pushed on the stack */
//  175 				scr[0] = (char)va_arg( args, int );
//  176 				scr[1] = '\0';
//  177 				pc += prints (out, scr, width, pad);
//  178 				continue;
//  179 			}
//  180 		}
//  181 		else {
//  182 		out:
//  183 			printchar (out, *format);
??print_1:
        ; Setup parameters for call to function printchar
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??printchar::?relay`; Banked call to: printchar
//  184 			++pc;
        INC       ?V2
        MOV       A,?V2
        JNZ       ??print_2
        INC       ?V3
//  185 		}
??print_2:
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        MOV       ?V0,DPL
        MOV       ?V1,DPH
??print_0:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R0,A
        JNZ       $+5
        LJMP      ??print_3 & 0xFFFF
        MOV       A,#0x25
        XRL       A,R0
        JNZ       ??print_1
        INC       DPTR
        MOV       ?V0,DPL
        MOV       ?V1,DPH
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOVX      A,@DPTR
        MOV       R0,A
        JNZ       $+5
        LJMP      ??print_3 & 0xFFFF
        MOV       A,#0x25
        XRL       A,R0
        JZ        ??print_1
        MOV       A,#0x2d
        XRL       A,R0
        JNZ       ??print_4
        INC       DPTR
        MOV       ?V0,DPL
        MOV       ?V1,DPH
        INC       R4
        SJMP      ??print_4
??print_5:
        INC       DPTR
        MOV       ?V0,DPL
        MOV       ?V1,DPH
        MOV       A,#0x2
        ORL       A,R4
        MOV       R4,A
??print_4:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        XRL       A,#0x30
        JZ        ??print_5
??print_6:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#-0x30
        ADD       A,R0
        CLR       C
        SUBB      A,#0xa
        JNC       ??print_7
        MOV       A,R2
        MOV       B,#0xa
        MUL       AB
        MOV       R2,A
        MOV       R1,B
        MOV       B,#0xa
        MOV       A,R3
        MUL       AB
        ADD       A,R1
        MOV       R3,A
        MOV       A,R2
        ADD       A,R0
        MOV       R0,A
        CLR       A
        ADDC      A,R3
        MOV       R1,A
        MOV       A,R0
        ADD       A,#-0x30
        MOV       R2,A
        MOV       A,R1
        ADDC      A,#-0x1
        MOV       R3,A
        INC       DPTR
        MOV       ?V0,DPL
        MOV       ?V1,DPH
        SJMP      ??print_6
??print_7:
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x73
        XRL       A,R0
        JNZ       ??print_8
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V7,A
        MOV       A,R0
        ADD       A,#0x2
        JNC       ??print_9
        INC       R1
??print_9:
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        MOV       A,?V6
        ORL       A,?V7
        JNZ       ??print_10
        MOV       ?V6,#`?<Constant "(null)">` & 0xff
        MOV       ?V7,#(`?<Constant "(null)">` >> 8) & 0xff
??print_10:
        ; Setup parameters for call to function prints
        MOV       ?V8,R4
        MOV       ?V9,R5
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R4,?V6
        MOV       R5,?V7
??print_11:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??prints::?relay`; Banked call to: prints
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
??print_12:
        MOV       ?V7,R3
        MOV       A,?V2
        ADD       A,R2
        MOV       ?V2,A
        MOV       A,?V3
        ADDC      A,?V7
        MOV       ?V3,A
        LJMP      ??print_2 & 0xFFFF
??print_8:
        MOV       A,#0x64
        XRL       A,R0
        JNZ       ??print_13
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V8,R4
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       ?V8,#0x1
        MOV       ?V9,R5
??print_14:
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V8,#0xa
??print_15:
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??printi::?relay`; Banked call to: printi
        MOV       A,#0xa
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        SJMP      ??print_12
??print_13:
        MOV       A,#0x78
        XRL       A,R0
        JNZ       ??print_16
        LCALL     ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_2:
        ; Setup parameters for call to function printi
        MOV       ?V8,#0x61
??print_17:
        MOV       ?V9,R5
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V8,R4
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        CLR       A
        MOV       ?V8,A
        MOV       ?V9,A
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V8,#0x10
        SJMP      ??print_15
          CFI CFA_XSP16 add(XSP16, 20)
??print_16:
        MOV       A,#0x58
        XRL       A,R0
        JNZ       ??print_18
        LCALL     ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_3:
        ; Setup parameters for call to function printi
        MOV       ?V8,#0x41
        SJMP      ??print_17
??print_18:
        MOV       A,#0x75
        XRL       A,R0
        JNZ       ??print_19
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V8,R4
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        CLR       A
        MOV       ?V8,A
        MOV       ?V9,A
        LJMP      ??print_14 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 20)
??print_19:
        MOV       A,#0x63
        XRL       A,R0
        JZ        $+5
        LJMP      ??print_2 & 0xFFFF
        MOV       DPL,?V4
        MOV       DPH,?V5
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_10:
        MOVX      A,@DPTR
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        ADD       A,#0x2
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R1,A
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        ; Setup parameters for call to function prints
        MOV       ?V6,R4
        MOV       ?V7,R5
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V6,R2
        MOV       ?V7,R3
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP102_8
        LJMP      ??print_11 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 20)
//  186 	}
//  187 	if (out) **out = '\0';
??print_3:
        MOV       A,R6
        ORL       A,R7
        JZ        ??print_20
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_11:
        CLR       A
        MOVX      @DPTR,A
//  188 	va_end( args );
//  189 	return pc;
??print_20:
        MOV       R2,?V2
        MOV       R3,?V3
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R7,#0xa
        LJMP      ?BANKED_LEAVE_XDATA
//  190 }
          CFI EndBlock cfiBlock19

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond20 Using cfiCommon0
          CFI Function printchar
          CFI Conditional ??CrossCallReturnLabel_9
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function print
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function print
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker23 Using cfiCommon1
          CFI (cfiPicker23) NoFunction
          CFI (cfiPicker23) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiPicker23

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond24 Using cfiCommon0
          CFI Function print
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function print
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker26 Using cfiCommon1
          CFI (cfiPicker26) NoFunction
          CFI (cfiPicker26) Picker
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_16:
        RET
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiPicker26

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond27 Using cfiCommon0
          CFI Function print
          CFI Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function print
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_3
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-4
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function print
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_0
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-4
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function print
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_1
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-4
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker31 Using cfiCommon1
          CFI (cfiPicker31) NoFunction
          CFI (cfiPicker31) Picker
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V6,R0
        MOV       ?V7,A
        MOV       A,R0
        ADD       A,#0x2
        MOV       R0,A
        CLR       A
        ADDC      A,?V7
        MOV       R1,A
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiPicker31

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond32 Using cfiCommon0
          CFI Function print
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function print
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker34 Using cfiCommon1
          CFI (cfiPicker34) NoFunction
          CFI (cfiPicker34) Picker
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_15:
        ; Setup parameters for call to function printi
        ; Setup parameters for call to function printi
        MOV       ?V8,#0x61
        MOV       ?V9,R5
        MOV       R0,#?V8
        RET
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiPicker34
//  191 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  192 int printf(const char *format, ...)
printf:
          CFI Block cfiBlock35 Using cfiCommon0
          CFI Function printf
        CODE
//  193 {
        FUNCALL printf, print
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  194         va_list args;
//  195         
//  196         va_start( args, format );
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP100_8
        LCALL     ?Subroutine5 & 0xFFFF
//  197         return print( 0, format, args );
??CrossCallReturnLabel_7:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R2
        MOV       R4,A
        MOV       A,R3
        MOV       R5,A
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??print::?relay`; Banked call to: print
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,#0x2
          CFI EndBlock cfiBlock35
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  198 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock36 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Valid
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock36
//  199 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  200 int sprintf(char *out, const char *format, ...)
sprintf:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function sprintf
        CODE
//  201 {
        FUNCALL sprintf, print
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 4
        MOV       A,#-0x4
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  202         va_list args;
//  203         
//  204         va_start( args, format );
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP100_8
        LCALL     ?Subroutine5 & 0xFFFF
//  205         return print( &out, format, args );
??CrossCallReturnLabel_8:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??print::?relay`; Banked call to: print
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,#0x4
        SJMP      ?Subroutine1
//  206 }
          CFI EndBlock cfiBlock37

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond38 Using cfiCommon0
          CFI Function printf
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function sprintf
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker40 Using cfiCommon1
          CFI (cfiPicker40) NoFunction
          CFI (cfiPicker40) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        ; Setup parameters for call to function print
        ; Setup parameters for call to function print
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiPicker40

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??putchar::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    putchar

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??printchar::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    printchar

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??prints::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    prints

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??printi::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    printi

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??print::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    print

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??printf::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    printf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??sprintf::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    sprintf

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "(null)">`:
        DB "(null)"

        END
//  207 
//  208 #ifdef TEST_PRINTF
//  209 int main(void)
//  210 {
//  211 	char *ptr = "Hello world!";
//  212 	char *np = 0;
//  213 	int i = 5;
//  214 	unsigned int bs = sizeof(int)*8;
//  215 	int mi;
//  216 	//char buf[80];
//  217 
//  218 	mi = (1 << (bs-1)) + 1;
//  219 	printf("%s\n", ptr);
//  220 	printf("printf test\n");
//  221 	printf("%s is null pointer\n", np);
//  222 	printf("%d = 5\n", i);
//  223 	printf("%d = - max int\n", mi);
//  224 	printf("char %c = 'a'\n", 'a');
//  225 	printf("hex %x = ff\n", 0xff);
//  226 	printf("hex %02x = 00\n", 0);
//  227 	printf("signed %d = unsigned %u = hex %x\n", -3, -3, -3);
//  228 	printf("%d %s(s)%", 0, "message");
//  229 	printf("\n");
//  230 	printf("%d %s(s) with %%\n", 0, "message");
//  231 	sprintf(buf, "justif: \"%-10s\"\n", "left"); printf("%s", buf);
//  232 	sprintf(buf, "justif: \"%10s\"\n", "right"); printf("%s", buf);
//  233 	sprintf(buf, " 3: %04d zero padded\n", 3); printf("%s", buf);
//  234 	sprintf(buf, " 3: %-4d left justif.\n", 3); printf("%s", buf);
//  235 	sprintf(buf, " 3: %4d right justif.\n", 3); printf("%s", buf);
//  236 	sprintf(buf, "-3: %04d zero padded\n", -3); printf("%s", buf);
//  237 	sprintf(buf, "-3: %-4d left justif.\n", -3); printf("%s", buf);
//  238 	sprintf(buf, "-3: %4d right justif.\n", -3); printf("%s", buf);
//  239 
//  240 	return 0;
//  241 }
//  242 
//  243 /*
//  244  * if you compile this file with
//  245  *   gcc -Wall $(YOUR_C_OPTIONS) -DTEST_PRINTF -c printf.c
//  246  * you will get a normal warning:
//  247  *   printf.c:214: warning: spurious trailing `%' in format
//  248  * this line is testing an invalid % at the end of the format string.
//  249  *
//  250  * this should display (on 32bit int machine) :
//  251  *
//  252  * Hello world!
//  253  * printf test
//  254  * (null) is null pointer
//  255  * 5 = 5
//  256  * -2147483647 = - max int
//  257  * char a = 'a'
//  258  * hex ff = ff
//  259  * hex 00 = 00
//  260  * signed -3 = unsigned 4294967293 = hex fffffffd
//  261  * 0 message(s)
//  262  * 0 message(s) with %
//  263  * justif: "left      "
//  264  * justif: "     right"
//  265  *  3: 0003 zero padded
//  266  *  3: 3    left justif.
//  267  *  3:    3 right justif.
//  268  * -3: -003 zero padded
//  269  * -3: -3   left justif.
//  270  * -3:   -3 right justif.
//  271  */
//  272 
//  273 #endif
// 
// 1 439 bytes in segment BANKED_CODE
//    42 bytes in segment BANK_RELAYS
//     7 bytes in segment XDATA_ROM_C
// 
//    42 bytes of CODE     memory
//     7 bytes of CONST    memory
// 1 439 bytes of HUGECODE memory
//
//Errors: none
//Warnings: none
