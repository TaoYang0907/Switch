///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              21/Jul/2020  00:38:08
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\AA\Z-Stack 3.0.2\Components\stack\zcl\zcl_general.c
//    Command line       =  
//        -f C:\Users\sunli\AppData\Local\Temp\EW8922.tmp ("D:\AA\Z-Stack
//        3.0.2\Components\stack\zcl\zcl_general.c" -D
//        ZCL_REPORT_DESTINATION_DEVICE -D BDB_REPORTING -D SECURE=1 -D
//        TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D
//        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_APP_CNF_FUNC -D
//        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
//        -D ZCL_HVAC_CLUSTER -D ZCL_GROUPS -D ZCL_REPORTING_DEVICE -D
//        ZCL_TEMPERATURE_MEASUREMENT -lC "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\List"
//        -lA "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\" -I
//        "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\Source\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\Source\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\List\zcl_general.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_general

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V1
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_Z

        FUNCTION `??zclGeneral_AddGroup::?relay`,0203H
        FUNCTION `??zclGeneral_HdlInSpecificCommands::?relay`,0203H
        FUNCTION `??zclGeneral_HdlIncoming::?relay`,0203H
        FUNCTION `??zclGeneral_ProcessInGroupsClient::?relay`,0203H
        FUNCTION `??zclGeneral_ProcessInGroupsServer::?relay`,0203H
        FUNCTION `??zclGeneral_ProcessInIdentity::?relay`,0203H
        PUBLIC `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,0203H
        PUBLIC `??zclGeneral_SendAddGroupRequest::?relay`
        FUNCTION `??zclGeneral_SendAddGroupRequest::?relay`,0203H
        PUBLIC `??zclGeneral_SendGroupGetMembershipRequest::?re`
        FUNCTION `??zclGeneral_SendGroupGetMembershipRequest::?re`,0203H
        PUBLIC `??zclGeneral_SendGroupRequest::?relay`
        FUNCTION `??zclGeneral_SendGroupRequest::?relay`,0203H
        PUBLIC `??zclGeneral_SendGroupResponse::?relay`
        FUNCTION `??zclGeneral_SendGroupResponse::?relay`,0203H
        PUBLIC `??zclGeneral_SendGroupViewResponse::?relay`
        FUNCTION `??zclGeneral_SendGroupViewResponse::?relay`,0203H
        PUBLIC `??zclGeneral_SendIdentify::?relay`
        FUNCTION `??zclGeneral_SendIdentify::?relay`,0203H
        PUBLIC `??zclGeneral_SendIdentifyEZModeInvoke::?relay`
        FUNCTION `??zclGeneral_SendIdentifyEZModeInvoke::?relay`,0203H
        PUBLIC `??zclGeneral_SendIdentifyQueryResponse::?relay`
        FUNCTION `??zclGeneral_SendIdentifyQueryResponse::?relay`,0203H
        PUBLIC `??zclGeneral_SendIdentifyUpdateCommState::?rela`
        FUNCTION `??zclGeneral_SendIdentifyUpdateCommState::?rela`,0203H
        FUNCTION zclGeneral_AddGroup,0a1203H
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        FUNCTION zclGeneral_HdlInSpecificCommands,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION zclGeneral_HdlIncoming,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclGeneral_ProcessInGroupsClient,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 53, STACK
        FUNCTION zclGeneral_ProcessInGroupsServer,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 81, STACK
        FUNCTION zclGeneral_ProcessInIdentity,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC zclGeneral_SendAddGroupRequest
        FUNCTION zclGeneral_SendAddGroupRequest,0a1203H
        ARGFRAME XSTACK, 5, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 32, STACK
        PUBLIC zclGeneral_SendGroupGetMembershipRequest
        FUNCTION zclGeneral_SendGroupGetMembershipRequest,0a1203H
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC zclGeneral_SendGroupRequest
        FUNCTION zclGeneral_SendGroupRequest,0a1203H
        ARGFRAME XSTACK, 3, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC zclGeneral_SendGroupResponse
        FUNCTION zclGeneral_SendGroupResponse,0a1203H
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC zclGeneral_SendGroupViewResponse
        FUNCTION zclGeneral_SendGroupViewResponse,0a1203H
        ARGFRAME XSTACK, 77, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC zclGeneral_SendIdentify
        FUNCTION zclGeneral_SendIdentify,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC zclGeneral_SendIdentifyEZModeInvoke
        FUNCTION zclGeneral_SendIdentifyEZModeInvoke,0a1203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC zclGeneral_SendIdentifyQueryResponse
        FUNCTION zclGeneral_SendIdentifyQueryResponse,0a1203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC zclGeneral_SendIdentifyUpdateCommState
        FUNCTION zclGeneral_SendIdentifyUpdateCommState,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
aps_AddGroup        SYMBOL "aps_AddGroup"
`??aps_AddGroup::?relay` SYMBOL "?relay", aps_AddGroup
aps_CountAllGroups  SYMBOL "aps_CountAllGroups"
`??aps_CountAllGroups::?relay` SYMBOL "?relay", aps_CountAllGroups
aps_FindAllGroupsForEndpoint SYMBOL "aps_FindAllGroupsForEndpoint"
`??aps_FindAllGroupsForEndpoint::?relay` SYMBOL "?relay", aps_FindAllGroupsForEndpoint
aps_FindGroup       SYMBOL "aps_FindGroup"
`??aps_FindGroup::?relay` SYMBOL "?relay", aps_FindGroup
aps_RemoveAllGroup  SYMBOL "aps_RemoveAllGroup"
`??aps_RemoveAllGroup::?relay` SYMBOL "?relay", aps_RemoveAllGroup
aps_RemoveGroup     SYMBOL "aps_RemoveGroup"
`??aps_RemoveGroup::?relay` SYMBOL "?relay", aps_RemoveGroup
bdb_ZclIdentifyCmdInd SYMBOL "bdb_ZclIdentifyCmdInd"
`??bdb_ZclIdentifyCmdInd::?relay` SYMBOL "?relay", bdb_ZclIdentifyCmdInd
bdb_ZclIdentifyQueryCmdInd SYMBOL "bdb_ZclIdentifyQueryCmdInd"
`??bdb_ZclIdentifyQueryCmdInd::?relay` SYMBOL "?relay", bdb_ZclIdentifyQueryCmdInd
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
zcl_ReadAttrData    SYMBOL "zcl_ReadAttrData"
`??zcl_ReadAttrData::?relay` SYMBOL "?relay", zcl_ReadAttrData
zcl_SendCommand     SYMBOL "zcl_SendCommand"
`??zcl_SendCommand::?relay` SYMBOL "?relay", zcl_SendCommand
zcl_SendDefaultRspCmd SYMBOL "zcl_SendDefaultRspCmd"
`??zcl_SendDefaultRspCmd::?relay` SYMBOL "?relay", zcl_SendDefaultRspCmd
zcl_registerPlugin  SYMBOL "zcl_registerPlugin"
`??zcl_registerPlugin::?relay` SYMBOL "?relay", zcl_registerPlugin
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclGeneral_SendAddGroupRequest SYMBOL "zclGeneral_SendAddGroupRequest"
`??zclGeneral_SendAddGroupRequest::?relay` SYMBOL "?relay", zclGeneral_SendAddGroupRequest
zclGeneral_SendGroupGetMembershipRequest SYMBOL "zclGeneral_SendGroupGetMembershipRequest"
`??zclGeneral_SendGroupGetMembershipRequest::?re` SYMBOL "?relay", zclGeneral_SendGroupGetMembershipRequest
zclGeneral_SendGroupRequest SYMBOL "zclGeneral_SendGroupRequest"
`??zclGeneral_SendGroupRequest::?relay` SYMBOL "?relay", zclGeneral_SendGroupRequest
zclGeneral_SendGroupResponse SYMBOL "zclGeneral_SendGroupResponse"
`??zclGeneral_SendGroupResponse::?relay` SYMBOL "?relay", zclGeneral_SendGroupResponse
zclGeneral_SendGroupViewResponse SYMBOL "zclGeneral_SendGroupViewResponse"
`??zclGeneral_SendGroupViewResponse::?relay` SYMBOL "?relay", zclGeneral_SendGroupViewResponse
zclGeneral_SendIdentify SYMBOL "zclGeneral_SendIdentify"
`??zclGeneral_SendIdentify::?relay` SYMBOL "?relay", zclGeneral_SendIdentify
zclGeneral_SendIdentifyEZModeInvoke SYMBOL "zclGeneral_SendIdentifyEZModeInvoke"
`??zclGeneral_SendIdentifyEZModeInvoke::?relay` SYMBOL "?relay", zclGeneral_SendIdentifyEZModeInvoke
zclGeneral_SendIdentifyQueryResponse SYMBOL "zclGeneral_SendIdentifyQueryResponse"
`??zclGeneral_SendIdentifyQueryResponse::?relay` SYMBOL "?relay", zclGeneral_SendIdentifyQueryResponse
zclGeneral_SendIdentifyUpdateCommState SYMBOL "zclGeneral_SendIdentifyUpdateCommState"
`??zclGeneral_SendIdentifyUpdateCommState::?rela` SYMBOL "?relay", zclGeneral_SendIdentifyUpdateCommState

        EXTERN `??aps_AddGroup::?relay`
        FUNCTION `??aps_AddGroup::?relay`,00H
        EXTERN `??aps_CountAllGroups::?relay`
        FUNCTION `??aps_CountAllGroups::?relay`,00H
        EXTERN `??aps_FindAllGroupsForEndpoint::?relay`
        FUNCTION `??aps_FindAllGroupsForEndpoint::?relay`,00H
        EXTERN `??aps_FindGroup::?relay`
        FUNCTION `??aps_FindGroup::?relay`,00H
        EXTERN `??aps_RemoveAllGroup::?relay`
        FUNCTION `??aps_RemoveAllGroup::?relay`,00H
        EXTERN `??aps_RemoveGroup::?relay`
        FUNCTION `??aps_RemoveGroup::?relay`,00H
        EXTERN `??bdb_ZclIdentifyCmdInd::?relay`
        FUNCTION `??bdb_ZclIdentifyCmdInd::?relay`,00H
        EXTERN `??bdb_ZclIdentifyQueryCmdInd::?relay`
        FUNCTION `??bdb_ZclIdentifyQueryCmdInd::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??zcl_ReadAttrData::?relay`
        FUNCTION `??zcl_ReadAttrData::?relay`,00H
        EXTERN `??zcl_SendCommand::?relay`
        FUNCTION `??zcl_SendCommand::?relay`,00H
        EXTERN `??zcl_SendDefaultRspCmd::?relay`
        FUNCTION `??zcl_SendDefaultRspCmd::?relay`,00H
        EXTERN `??zcl_registerPlugin::?relay`
        FUNCTION `??zcl_registerPlugin::?relay`,00H
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_CountAllGroups
        FUNCTION aps_CountAllGroups,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_FindAllGroupsForEndpoint
        FUNCTION aps_FindAllGroupsForEndpoint,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_FindGroup
        FUNCTION aps_FindGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_RemoveAllGroup
        FUNCTION aps_RemoveAllGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_RemoveGroup
        FUNCTION aps_RemoveGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_ZclIdentifyCmdInd
        FUNCTION bdb_ZclIdentifyCmdInd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_ZclIdentifyQueryCmdInd
        FUNCTION bdb_ZclIdentifyQueryCmdInd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_ReadAttrData
        FUNCTION zcl_ReadAttrData,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendCommand
        FUNCTION zcl_SendCommand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendDefaultRspCmd
        FUNCTION zcl_SendDefaultRspCmd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerPlugin
        FUNCTION zcl_registerPlugin,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\AA\Z-Stack 3.0.2\Components\stack\zcl\zcl_general.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_general.c
//    3   Revised:        $Date: 2015-09-10 09:36:48 -0700 (Thu, 10 Sep 2015) $
//    4   Revision:       $Revision: 44493 $
//    5 
//    6   Description:    Zigbee Cluster Library - General.  This application receives all
//    7                   ZCL messages and initially parses them before passing to application.
//    8 
//    9 
//   10   Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License"). You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product. Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42  * INCLUDES
//   43  */
//   44 #include "ZComDef.h"
//   45 #include "zcl.h"
//   46 #include "zcl_general.h"
//   47 //#include "ZDApp.h"
//   48 
//   49 #if defined ( INTER_PAN )
//   50   #include "stub_aps.h"
//   51 #endif
//   52 #include "bdb.h"
//   53 
//   54 /*********************************************************************
//   55  * MACROS
//   56  */
//   57 #define locationTypeAbsolute( a )          ( (a) & LOCATION_TYPE_ABSOLUTE )
//   58 #define locationType2D( a )                ( (a) & LOCATION_TYPE_2_D )
//   59 #define locationTypeCoordinateSystem( a )  ( (a) & LOCATION_TYPE_COORDINATE_SYSTEM )
//   60 
//   61 #ifdef ZCL_SCENES
//   62 #define zclGeneral_ScenesRemaingCapacity() ( ZCL_GEN_MAX_SCENES - zclGeneral_CountAllScenes() )
//   63 #endif // ZCL_SCENES
//   64 
//   65 /*********************************************************************
//   66  * CONSTANTS
//   67  */
//   68 
//   69 /*********************************************************************
//   70  * TYPEDEFS
//   71  */
//   72 typedef struct zclGenCBRec
//   73 {
//   74   struct zclGenCBRec        *next;
//   75   uint8                     endpoint; // Used to link it into the endpoint descriptor
//   76   zclGeneral_AppCallbacks_t *CBs;     // Pointer to Callback function
//   77 } zclGenCBRec_t;
//   78 
//   79 typedef struct zclGenSceneItem
//   80 {
//   81   struct zclGenSceneItem    *next;
//   82   uint8                     endpoint; // Used to link it into the endpoint descriptor
//   83   zclGeneral_Scene_t        scene;    // Scene info
//   84 } zclGenSceneItem_t;
//   85 
//   86 typedef struct zclGenAlarmItem
//   87 {
//   88   struct zclGenAlarmItem    *next;
//   89   uint8                     endpoint; // Used to link it into the endpoint descriptor
//   90   zclGeneral_Alarm_t        alarm;    // Alarm info
//   91 } zclGenAlarmItem_t;
//   92 
//   93 // Scene NV types
//   94 typedef struct
//   95 {
//   96   uint16                    numRecs;
//   97 } nvGenScenesHdr_t;
//   98 
//   99 typedef struct zclGenSceneNVItem
//  100 {
//  101   uint8                     endpoint;
//  102   zclGeneral_Scene_t        scene;
//  103 } zclGenSceneNVItem_t;
//  104 
//  105 /*********************************************************************
//  106  * GLOBAL VARIABLES
//  107  */
//  108 
//  109 /*********************************************************************
//  110  * GLOBAL FUNCTIONS
//  111  */
//  112 
//  113 /*********************************************************************
//  114  * LOCAL VARIABLES
//  115  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  116 static zclGenCBRec_t *zclGenCBs = (zclGenCBRec_t *)NULL;
zclGenCBs:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  117 static uint8 zclGenPluginRegisted = FALSE;
zclGenPluginRegisted:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  118 
//  119 #if defined( ZCL_SCENES )
//  120   #if !defined ( ZCL_STANDALONE )
//  121     static zclGenSceneItem_t *zclGenSceneTable = (zclGenSceneItem_t *)NULL;
//  122   #endif
//  123 #endif // ZCL_SCENES
//  124 
//  125 #ifdef ZCL_ALARMS
//  126 static zclGenAlarmItem_t *zclGenAlarmTable = (zclGenAlarmItem_t *)NULL;
//  127 #endif // ZCL_ALARMS
//  128 
//  129 /*********************************************************************
//  130  * LOCAL FUNCTIONS
//  131  */
//  132 static ZStatus_t zclGeneral_HdlIncoming( zclIncoming_t *pInMsg );
//  133 static ZStatus_t zclGeneral_HdlInSpecificCommands( zclIncoming_t *pInMsg );
//  134 static zclGeneral_AppCallbacks_t *zclGeneral_FindCallbacks( uint8 endpoint );
//  135 
//  136 // Device Configuration and Installation clusters
//  137 #ifdef ZCL_BASIC
//  138 static ZStatus_t zclGeneral_ProcessInBasic( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  139 #endif // ZCL_BASIC
//  140 
//  141 #ifdef ZCL_IDENTIFY
//  142 static ZStatus_t zclGeneral_ProcessInIdentity( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  143 #endif // ZCL_IDENTIFY
//  144 
//  145 // Groups and Scenes clusters
//  146 #ifdef ZCL_GROUPS
//  147 static ZStatus_t zclGeneral_ProcessInGroupsServer( zclIncoming_t *pInMsg );
//  148 static ZStatus_t zclGeneral_ProcessInGroupsClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  149 static ZStatus_t zclGeneral_AddGroup( uint8 endPoint, aps_Group_t *group, uint8 *pData );
//  150 #endif // ZCL_GROUPS
//  151 
//  152 #ifdef ZCL_SCENES
//  153 static ZStatus_t zclGeneral_ProcessInScenesServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  154 static ZStatus_t zclGeneral_ProcessInScenesClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  155 #endif // ZCL_SCENES
//  156 
//  157 // On/Off and Level Control Configuration clusters
//  158 #ifdef ZCL_ON_OFF
//  159 static ZStatus_t zclGeneral_ProcessInOnOff( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  160 //static ZStatus_t zclGeneral_ProcessInOnOffTest( zclIncoming_t *pInMsg );
//  161 #endif // ZCL_ONOFF
//  162 
//  163 #ifdef ZCL_LEVEL_CTRL
//  164 static ZStatus_t zclGeneral_ProcessInLevelControl( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  165 #endif // ZCL_LEVEL_CTRL
//  166 
//  167 // Alarms cluster
//  168 #ifdef ZCL_ALARMS
//  169 static ZStatus_t zclGeneral_ProcessInAlarmsServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  170 static ZStatus_t zclGeneral_ProcessInAlarmsClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  171 #endif // ZCL_ALARMS
//  172 
//  173 // Location cluster
//  174 #ifdef ZCL_LOCATION
//  175 static ZStatus_t zclGeneral_ProcessInLocationServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  176 static ZStatus_t zclGeneral_ProcessInLocationClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  177 #endif // ZCL_LOCATION
//  178 
//  179 #ifdef ZCL_SCENES
//  180   #if !defined ( ZCL_STANDALONE )
//  181     static uint8 zclGeneral_ScenesInitNV( void );
//  182     static void zclGeneral_ScenesSetDefaultNV( void );
//  183     static void zclGeneral_ScenesWriteNV( void );
//  184     static uint16 zclGeneral_ScenesRestoreFromNV( void );
//  185   #endif
//  186 #endif // ZCL_SCENES
//  187 
//  188 /*********************************************************************
//  189  * @fn      zclGeneral_RegisterCmdCallbacks
//  190  *
//  191  * @brief   Register an applications command callbacks
//  192  *
//  193  * @param   endpoint - application's endpoint
//  194  * @param   callbacks - pointer to the callback record.
//  195  *
//  196  * @return  ZMemError if not able to allocate
//  197  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  198 ZStatus_t zclGeneral_RegisterCmdCallbacks( uint8 endpoint, zclGeneral_AppCallbacks_t *callbacks )
zclGeneral_RegisterCmdCallbacks:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclGeneral_RegisterCmdCallbacks
        CODE
//  199 {
        FUNCALL zclGeneral_RegisterCmdCallbacks, zcl_registerPlugin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_RegisterCmdCallbacks, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R1
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  200   zclGenCBRec_t *pNewItem;
//  201   zclGenCBRec_t *pLoop;
//  202 
//  203   // Register as a ZCL Plugin
//  204   if ( zclGenPluginRegisted == FALSE )
        MOV       DPTR,#zclGenPluginRegisted
        MOVX      A,@DPTR
        JNZ       ??zclGeneral_RegisterCmdCallbacks_0
//  205   {
//  206     zcl_registerPlugin( ZCL_CLUSTER_ID_GEN_BASIC,
//  207                         ZCL_CLUSTER_ID_GEN_MULTISTATE_VALUE_BASIC,
//  208                         zclGeneral_HdlIncoming );
        ; Setup parameters for call to function zcl_registerPlugin
        MOV       ?V2,#`??zclGeneral_HdlIncoming::?relay` & 0xff
        MOV       ?V3,#(`??zclGeneral_HdlIncoming::?relay` >> 8) & 0xff
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x14
        MOV       R5,#0x0
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??zcl_registerPlugin::?relay`; Banked call to: zcl_registerPlugin
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  209 
//  210 #ifdef ZCL_SCENES
//  211     // Initialize the Scenes Table
//  212     zclGeneral_ScenesInit();
//  213 #endif // ZCL_SCENES
//  214 
//  215     zclGenPluginRegisted = TRUE;
        MOV       DPTR,#zclGenPluginRegisted
        MOV       A,#0x1
        MOVX      @DPTR,A
//  216   }
//  217 
//  218   // Fill in the new profile list
//  219   pNewItem = zcl_mem_alloc( sizeof( zclGenCBRec_t ) );
??zclGeneral_RegisterCmdCallbacks_0:
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x5
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,?V2
        MOV       R1,?V3
//  220   if ( pNewItem == NULL )
        MOV       A,R2
        ORL       A,R1
        JNZ       ??zclGeneral_RegisterCmdCallbacks_1
//  221     return (ZMemError);
        MOV       R1,#0x10
        SJMP      ??zclGeneral_RegisterCmdCallbacks_2
//  222 
//  223   pNewItem->next = (zclGenCBRec_t *)NULL;
??zclGeneral_RegisterCmdCallbacks_1:
        MOV       DPL,R2
        MOV       DPH,R3
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  224   pNewItem->endpoint = endpoint;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOV       A,?V0
        MOVX      @DPTR,A
//  225   pNewItem->CBs = callbacks;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
//  226 
//  227   // Find spot in list
//  228   if (  zclGenCBs == NULL )
        MOV       DPTR,#zclGenCBs
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV       A,R2
        ORL       A,R3
        MOV       DPTR,#zclGenCBs
        JZ        ??zclGeneral_RegisterCmdCallbacks_3
//  229   {
//  230     zclGenCBs = pNewItem;
//  231   }
//  232   else
//  233   {
//  234     // Look for end of list
//  235     pLoop = zclGenCBs;
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_53:
        SJMP      ??zclGeneral_RegisterCmdCallbacks_4
//  236     while ( pLoop->next != NULL )
//  237       pLoop = pLoop->next;
??zclGeneral_RegisterCmdCallbacks_5:
        MOV       A,R2
        MOV       R4,A
        MOV       A,R3
??zclGeneral_RegisterCmdCallbacks_4:
        MOV       R5,A
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_27:
        MOV       A,R2
        ORL       A,R3
        JNZ       ??zclGeneral_RegisterCmdCallbacks_5
//  238 
//  239     // Put new item at end of list
//  240     pLoop->next = pNewItem;
        MOV       DPL,R4
        MOV       DPH,R5
//  241   }
??zclGeneral_RegisterCmdCallbacks_3:
        LCALL     ?Subroutine24 & 0xFFFF
//  242 
//  243   return ( ZSuccess );
??CrossCallReturnLabel_108:
        MOV       R1,#0x0
??zclGeneral_RegisterCmdCallbacks_2:
        LJMP      ??Subroutine44_0 & 0xFFFF
//  244 }
          CFI EndBlock cfiBlock0
//  245 
//  246 #ifdef ZCL_IDENTIFY
//  247 /*********************************************************************
//  248  * @fn      zclGeneral_SendIdentify
//  249  *
//  250  * @brief   Call to send out an Identify Command
//  251  *
//  252  * @param   srcEP - Sending application's endpoint
//  253  * @param   dstAddr - where you want the message to go
//  254  * @param   identifyTime - how long the device will continue to identify itself (in seconds)
//  255  * @param   seqNum - identification number for the transaction
//  256  *
//  257  * @return  ZStatus_t
//  258  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  259 ZStatus_t zclGeneral_SendIdentify( uint8 srcEP, afAddrType_t *dstAddr,
zclGeneral_SendIdentify:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function zclGeneral_SendIdentify
        CODE
//  260                                    uint16 identifyTime, uint8 disableDefaultRsp, uint8 seqNum )
//  261 {
        FUNCALL zclGeneral_SendIdentify, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,R1
        MOV       R6,A
//  262   uint8 buf[2];
//  263 
//  264   buf[0] = LO_UINT16( identifyTime );
        MOV       A,R4
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
//  265   buf[1] = HI_UINT16( identifyTime );
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
//  266 
//  267   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
//  268                           COMMAND_IDENTIFY, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  269                           disableDefaultRsp, 0, seqNum, 2, buf );
??CrossCallReturnLabel_43:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_31:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        CLR       A
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_32:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       ?V0,#0x1
          CFI EndBlock cfiBlock1
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  270 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 21)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_73:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock2
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine37_0:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3
//  271 
//  272 /*********************************************************************
//  273  * @fn      zclGeneral_SendIdentifyEZModeInvoke
//  274  *
//  275  * @brief   Call to send out an Identify EZ-Mode Invoke Command
//  276  *
//  277  * @param   srcEP - Sending application's endpoint
//  278  * @param   dstAddr - where you want the message to go
//  279  * @param   action - describes the EZ-Mode action to be performed
//  280  * @param   seqNum - identification number for the transaction
//  281  *
//  282  * @return  ZStatus_t
//  283  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  284 ZStatus_t zclGeneral_SendIdentifyEZModeInvoke( uint8 srcEP, afAddrType_t *dstAddr,
zclGeneral_SendIdentifyEZModeInvoke:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function zclGeneral_SendIdentifyEZModeInvoke
        CODE
//  285                                                uint8 action, uint8 disableDefaultRsp, uint8 seqNum )
//  286 {
        FUNCALL zclGeneral_SendIdentifyEZModeInvoke, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       A,R1
        MOV       R6,A
        MOV       A,R4
//  287   uint8 buf[1];
//  288 
//  289   buf[0] = action;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ??Subroutine38_0 & 0xFFFF
//  290 
//  291   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
//  292                           COMMAND_IDENTIFY_EZMODE_INVOKE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  293                           disableDefaultRsp, 0, seqNum, 1, buf );
??CrossCallReturnLabel_64:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       ?V2,#0x1
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 18)
        CLR       A
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R5
        MOV       ?V1,A
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       ?V1,#0x0
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V1,#0x1
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       ?V1,#0x2
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_74:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       A,#0x1
        LJMP      ??Subroutine43_0 & 0xFFFF
//  294 }
          CFI EndBlock cfiBlock4
//  295 
//  296 /*********************************************************************
//  297  * @fn      zclGeneral_SendIdentifyUpdateCommState
//  298  *
//  299  * @brief   Call to send out an Identify Update Commission State Command
//  300  *
//  301  * @param   srcEP - Sending application's endpoint
//  302  * @param   dstAddr - where you want the message to go
//  303  * @param   action - describes the EZ-Mode action to be performed
//  304  * @param   commissionStateMask - updates the device's commission state
//  305  * @param   seqNum - identification number for the transaction
//  306  *
//  307  * @return  ZStatus_t
//  308  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  309 ZStatus_t zclGeneral_SendIdentifyUpdateCommState( uint8 srcEP, afAddrType_t *dstAddr,
zclGeneral_SendIdentifyUpdateCommState:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function zclGeneral_SendIdentifyUpdateCommState
        CODE
//  310                                                   uint8 action, uint8 commissionStateMask,
//  311                                                   uint8 disableDefaultRsp, uint8 seqNum )
//  312 {
        FUNCALL zclGeneral_SendIdentifyUpdateCommState, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R1
        MOV       R6,A
        MOV       A,R4
//  313   uint8 buf[2];
//  314 
//  315   buf[0] = action;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
//  316   buf[1] = commissionStateMask;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R5
        LCALL     ??Subroutine38_0 & 0xFFFF
//  317 
//  318   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
//  319                           COMMAND_IDENTIFY_UPDATE_COMMISSION_STATE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  320                           disableDefaultRsp, 0, seqNum, 2, buf );
??CrossCallReturnLabel_65:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       ?V2,#0x2
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        CLR       A
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V1,#0x0
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       ?V1,#0x1
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V1,#0x3
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R4,#0x3
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R1,A
        LJMP      ?Subroutine0 & 0xFFFF
//  321 }
          CFI EndBlock cfiBlock5
//  322 
//  323 #ifdef ZCL_LIGHT_LINK_ENHANCE
//  324 /*********************************************************************
//  325  * @fn      zclGeneral_SendIdentifyTriggerEffect
//  326  *
//  327  * @brief   Call to send out a Trigger Effect Command
//  328  *
//  329  * @param   srcEP - Sending application's endpoint
//  330  * @param   dstAddr - where you want the message to go
//  331  * @param   effectId - identify effect to use
//  332  * @param   effectVariant - which variant of effect to be triggered
//  333  * @param   disableDefaultRsp - whether to disable the Default Response command
//  334  * @param   seqNum - identification number for the transaction
//  335  *
//  336  * @return  ZStatus_t
//  337  */
//  338 ZStatus_t zclGeneral_SendIdentifyTriggerEffect( uint8 srcEP, afAddrType_t *dstAddr,
//  339                                                 uint8 effectId, uint8 effectVariant,
//  340                                                 uint8 disableDefaultRsp, uint8 seqNum )
//  341 {
//  342   uint8 buf[2];
//  343 
//  344   buf[0] = effectId;
//  345   buf[1] = effectVariant;
//  346 
//  347   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
//  348                           COMMAND_IDENTIFY_TRIGGER_EFFECT, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  349                           disableDefaultRsp, 0, seqNum, 2, buf );
//  350 }
//  351 #endif // ZCL_LIGHT_LINK_ENHANCE
//  352 
//  353 /*********************************************************************
//  354  * @fn      zclGeneral_SendIdentifyQueryResponse
//  355  *
//  356  * @brief   Call to send out an Identify Query Response Command
//  357  *
//  358  * @param   srcEP - Sending application's endpoint
//  359  * @param   dstAddr - where you want the message to go
//  360  * @param   timeout - how long the device will continue to identify itself (in seconds)
//  361  * @param   seqNum - identification number for the transaction
//  362  *
//  363  * @return  ZStatus_t
//  364  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  365 ZStatus_t zclGeneral_SendIdentifyQueryResponse( uint8 srcEP, afAddrType_t *dstAddr,
zclGeneral_SendIdentifyQueryResponse:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function zclGeneral_SendIdentifyQueryResponse
        CODE
//  366                                                 uint16 timeout, uint8 disableDefaultRsp, uint8 seqNum )
//  367 {
        FUNCALL zclGeneral_SendIdentifyQueryResponse, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,R1
        MOV       R6,A
//  368   uint8 buf[2];
//  369 
//  370   buf[0] = LO_UINT16( timeout );
        MOV       A,R4
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
//  371   buf[1] = HI_UINT16( timeout );
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
//  372 
//  373   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
//  374                           COMMAND_IDENTIFY_QUERY_RSP, TRUE,
//  375                           ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, 2, buf );
??CrossCallReturnLabel_44:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_33:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        CLR       A
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_34:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        LJMP      ?Subroutine1 & 0xFFFF
//  376 }
          CFI EndBlock cfiBlock6

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond7 Using cfiCommon0
          CFI Function zclGeneral_SendIdentify
          CFI Conditional ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function zclGeneral_SendIdentifyQueryResponse
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker9 Using cfiCommon1
          CFI (cfiPicker9) NoFunction
          CFI (cfiPicker9) Picker
        MOV       A,R5
        MOVX      @DPTR,A
        ; Setup parameters for call to function zcl_SendCommand
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function zclGeneral_SendIdentify
          CFI Conditional ??CrossCallReturnLabel_31
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function zclGeneral_SendIdentify
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function zclGeneral_SendIdentifyQueryResponse
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function zclGeneral_SendIdentifyQueryResponse
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker15 Using cfiCommon1
          CFI (cfiPicker15) NoFunction
          CFI (cfiPicker15) Picker
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiPicker15
//  377 #endif // ZCL_IDENTIFY
//  378 
//  379 #ifdef ZCL_GROUPS
//  380 /*********************************************************************
//  381  * @fn      zclGeneral_SendGroupRequest
//  382  *
//  383  * @brief   Send a Group Request to a device.  You can also use the
//  384  *          appropriate macro.
//  385  *
//  386  * @param   srcEP - Sending Apps endpoint
//  387  * @param   dstAddr - where to send the request
//  388  * @param   cmd - one of the following:
//  389  *              COMMAND_GROUP_VIEW
//  390  *              COMMAND_GROUP_REMOVE
//  391  * @param   groupID -
//  392  *
//  393  * @return  ZStatus_t
//  394  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  395 ZStatus_t zclGeneral_SendGroupRequest( uint8 srcEP, afAddrType_t *dstAddr,
zclGeneral_SendGroupRequest:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function zclGeneral_SendGroupRequest
        CODE
//  396                                        uint8 cmd, uint16 groupID, uint8 disableDefaultRsp, uint8 seqNum )
//  397 {
        FUNCALL zclGeneral_SendGroupRequest, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       ?V0,R1
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine13 & 0xFFFF
//  398   uint8 buf[2];
//  399 
//  400   buf[0] = LO_UINT16( groupID );
??CrossCallReturnLabel_20:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
//  401   buf[1] = HI_UINT16( groupID );
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine20 & 0xFFFF
//  402 
//  403   return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
//  404                             cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  405                             disableDefaultRsp, 0, seqNum, 2, buf ) );
??CrossCallReturnLabel_62:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       ?V2,#0x2
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        CLR       A
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,R5
        MOV       ?V1,A
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V1,#0x0
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       ?V1,#0x1
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,R4
        MOV       ?V1,A
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       R1,?V0
        LJMP      ?Subroutine0 & 0xFFFF
//  406 }
          CFI EndBlock cfiBlock16

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function zclGeneral_SendGroupRequest
          CFI Conditional ??CrossCallReturnLabel_62
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function zclGeneral_SendGroupResponse
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker19 Using cfiCommon1
          CFI (cfiPicker19) NoFunction
          CFI (cfiPicker19) Picker
        MOV       A,R1
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiPicker19
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine38_0:
          CFI Block cfiCond20 Using cfiCommon0
          CFI Function zclGeneral_SendIdentifyEZModeInvoke
          CFI Conditional ??CrossCallReturnLabel_64
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function zclGeneral_SendIdentifyUpdateCommState
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function zclGeneral_SendGroupRequest
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function zclGeneral_SendGroupResponse
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker24 Using cfiCommon1
          CFI (cfiPicker24) NoFunction
          CFI (cfiPicker24) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function zcl_SendCommand
        ; Setup parameters for call to function zcl_SendCommand
        ; Setup parameters for call to function zcl_SendCommand
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        RET
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiPicker24

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond25 Using cfiCommon0
          CFI Function zclGeneral_SendIdentifyEZModeInvoke
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function zclGeneral_SendIdentifyUpdateCommState
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function zclGeneral_SendIdentifyUpdateCommState
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function zclGeneral_SendGroupRequest
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function zclGeneral_SendGroupResponse
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function zclGeneral_SendGroupResponse
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker31 Using cfiCommon1
          CFI (cfiPicker31) NoFunction
          CFI (cfiPicker31) Picker
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       R0,#?V1
        RET
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiPicker31
//  407 
//  408 /*********************************************************************
//  409  * @fn      zclGeneral_SendAddGroupRequest
//  410  *
//  411  * @brief   Send the Add Group Request to a device
//  412  *
//  413  * @param   srcEP - Sending Apps endpoint
//  414  * @param   dstAddr - where to send the request
//  415  * @param   cmd - one of the following:
//  416  *                COMMAND_GROUP_ADD
//  417  *                COMMAND_GROUP_ADD_IF_IDENTIFYING
//  418  * @param   groupID - pointer to the group structure
//  419  * @param   groupName - pointer to Group Name.  This is a Zigbee
//  420  *          string data type, so the first byte is the length of the
//  421  *          name (in bytes), then the name.
//  422  *
//  423  * @return  ZStatus_t
//  424  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  425 ZStatus_t zclGeneral_SendAddGroupRequest( uint8 srcEP, afAddrType_t *dstAddr,
zclGeneral_SendAddGroupRequest:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI Function zclGeneral_SendAddGroupRequest
        CODE
//  426                                           uint8 cmd, uint16 groupID, uint8 *groupName,
//  427                                           uint8 disableDefaultRsp, uint8 seqNum )
//  428 {
        FUNCALL zclGeneral_SendAddGroupRequest, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_SendAddGroupRequest, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_SendAddGroupRequest, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_SendAddGroupRequest, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV       A,#-0x14
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       ?V7,R1
        MOV       ?V10,R2
        MOV       ?V11,R3
        MOV       ?V9,R4
        MOV       ?V8,R5
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine14 & 0xFFFF
//  429   uint8 *buf;
//  430   uint8 *pBuf;
//  431   uint8 len;
//  432   ZStatus_t status;
//  433 
//  434   len = 2;    // Group ID
//  435   len += groupName[0] + 1;  // String + 1 for length
??CrossCallReturnLabel_24:
        MOVX      A,@DPTR
        ADD       A,#0x3
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
//  436 
//  437   buf = zcl_mem_alloc( len );
        LCALL     ?Subroutine21 & 0xFFFF
//  438   if ( buf )
??CrossCallReturnLabel_70:
        JNZ       $+5
        LJMP      ??zclGeneral_SendAddGroupRequest_0 & 0xFFFF
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine13 & 0xFFFF
//  439   {
//  440     pBuf = buf;
//  441     *pBuf++ = LO_UINT16( groupID );
??CrossCallReturnLabel_21:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
//  442     *pBuf++ = HI_UINT16( groupID );
        MOV       A,R1
        INC       DPTR
        LCALL     ?Subroutine33 & 0xFFFF
//  443     *pBuf++ = groupName[0]; // string length
??CrossCallReturnLabel_59:
        LCALL     ?Subroutine18 & 0xFFFF
//  444     zcl_memcpy( pBuf, &(groupName[1]), groupName[0] );
??CrossCallReturnLabel_39:
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,?V0
        ADD       A,#0x3
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_66:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
//  445 
//  446     status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
//  447                               cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  448                               disableDefaultRsp, 0, seqNum, len, buf );
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       ?V2,R6
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,#0x1d
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        CLR       A
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,?V8
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       ?V2,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       ?V2,#0x1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       A,?V9
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       R2,?V10
        MOV       R3,?V11
        MOV       R1,?V7
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_76:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,R1
        MOV       R6,A
//  449     zcl_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??zclGeneral_SendAddGroupRequest_1
//  450   }
//  451   else
//  452     status = ZMemError;
??zclGeneral_SendAddGroupRequest_0:
        MOV       R6,#0x10
//  453 
//  454   return ( status );
??zclGeneral_SendAddGroupRequest_1:
        MOV       A,R6
        MOV       R1,A
        MOV       A,#0x1
          CFI EndBlock cfiBlock32
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  455 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 21)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock33
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine39_0:
          CFI Block cfiBlock34 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0xc
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock34

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond35 Using cfiCommon0
          CFI Function zclGeneral_SendAddGroupRequest
          CFI Conditional ??CrossCallReturnLabel_66
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function zclGeneral_SendGroupViewResponse
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker37 Using cfiCommon1
          CFI (cfiPicker37) NoFunction
          CFI (cfiPicker37) Picker
        MOV       R2,A
        CLR       A
        ADDC      A,?V1
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiPicker37
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine40_0:
          CFI Block cfiCond38 Using cfiCommon0
          CFI Function zclGeneral_AddGroup
          CFI Conditional ??CrossCallReturnLabel_68
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function zclGeneral_SendAddGroupRequest
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function zclGeneral_SendGroupViewResponse
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond40) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker41 Using cfiCommon1
          CFI (cfiPicker41) NoFunction
          CFI (cfiPicker41) Picker
        MOV       R3,A
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiPicker41
        REQUIRE ??Subroutine41_0
        ; // Fall through to label ??Subroutine41_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine41_0:
          CFI Block cfiCond42 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsClient
          CFI Conditional ??CrossCallReturnLabel_69
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function zclGeneral_AddGroup
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function zclGeneral_SendAddGroupRequest
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-2
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function zclGeneral_SendGroupViewResponse
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond45) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker46 Using cfiCommon1
          CFI (cfiPicker46) NoFunction
          CFI (cfiPicker46) Picker
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        RET
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiPicker46

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond47 Using cfiCommon0
          CFI Function zclGeneral_SendAddGroupRequest
          CFI Conditional ??CrossCallReturnLabel_70
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function zclGeneral_SendGroupViewResponse
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond48) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-2
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker49 Using cfiCommon1
          CFI (cfiPicker49) NoFunction
          CFI (cfiPicker49) Picker
        MOV       R6,A
        ; Setup parameters for call to function osal_mem_alloc
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,A
        MOV       R3,#0x0
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiPicker49
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine42_0:
          CFI Block cfiCond50 Using cfiCommon0
          CFI Function zclGeneral_SendGroupGetMembershipRequest
          CFI Conditional ??CrossCallReturnLabel_72
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function zclGeneral_SendAddGroupRequest
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function zclGeneral_SendGroupViewResponse
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond52) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond52) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond52) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond52) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-2
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker53 Using cfiCommon1
          CFI (cfiPicker53) NoFunction
          CFI (cfiPicker53) Picker
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,R3
        RET
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiPicker53

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond54 Using cfiCommon0
          CFI Function zclGeneral_SendGroupRequest
          CFI Conditional ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function zclGeneral_SendAddGroupRequest
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond55) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-2
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-2
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-2
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker58 Using cfiCommon1
          CFI (cfiPicker58) NoFunction
          CFI (cfiPicker58) Picker
        LCALL     ??Subroutine50_0 & 0xFFFF
??CrossCallReturnLabel_101:
        MOV       R1,A
        MOV       A,R0
        RET
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiPicker58
//  456 
//  457 /*********************************************************************
//  458  * @fn      zclGeneral_SendGroupGetMembershipRequest
//  459  *
//  460  * @brief   Send a Get Group Membership (Resposne) Command to a device
//  461  *
//  462  * @param   srcEP - Sending Apps endpoint
//  463  * @param   dstAddr - where to send the request
//  464  * @param   cmd - one of the following:
//  465  *                COMMAND_GROUP_GET_MEMBERSHIP
//  466  *                COMMAND_GROUP_GET_MEMBERSHIP_RSP
//  467  * @param   groupID - pointer to the group structure
//  468  * @param   groupName - pointer to Group Name.  This is a Zigbee
//  469  *          string data type, so the first byte is the length of the
//  470  *          name (in bytes), then the name.
//  471  *
//  472  * @return  ZStatus_t
//  473  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  474 ZStatus_t zclGeneral_SendGroupGetMembershipRequest( uint8 srcEP, afAddrType_t *dstAddr,
zclGeneral_SendGroupGetMembershipRequest:
          CFI Block cfiBlock59 Using cfiCommon0
          CFI Function zclGeneral_SendGroupGetMembershipRequest
        CODE
//  475                                                     uint8 cmd, uint8 rspCmd, uint8 direction, uint8 capacity,
//  476                                                     uint8 grpCnt, uint16 *grpList, uint8 disableDefaultRsp, uint8 seqNum )
//  477 {
        FUNCALL zclGeneral_SendGroupGetMembershipRequest, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_SendGroupGetMembershipRequest, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_SendGroupGetMembershipRequest, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV       A,#-0x14
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV       ?V2,R1
        MOV       ?V6,R2
        MOV       ?V7,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
//  478   uint8 *buf;
//  479   uint8 *pBuf;
//  480   uint8 len = 0;
        MOV       R0,#0x0
//  481   uint8 i;
//  482   ZStatus_t status;
//  483 
//  484   if ( rspCmd )
        JZ        ??zclGeneral_SendGroupGetMembershipRequest_0
//  485     len++;  // Capacity
        MOV       R0,#0x1
??zclGeneral_SendGroupGetMembershipRequest_0:
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V3,A
//  486 
//  487   len++;  // Group Count
//  488   len += sizeof ( uint16 ) * grpCnt;  // Group List
        CLR       C
        RLC       A
        INC       A
        ADD       A,R0
//  489 
//  490   buf = zcl_mem_alloc( len );
        MOV       ?V4,A
        MOV       ?V5,#0x0
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,A
        MOV       R3,?V5
        LCALL     ??Subroutine42_0 & 0xFFFF
//  491   if ( buf )
??CrossCallReturnLabel_72:
        JNZ       $+5
        LJMP      ??zclGeneral_SendGroupGetMembershipRequest_1 & 0xFFFF
//  492   {
//  493     pBuf = buf;
        MOV       R0,?V0
        MOV       R1,?V1
//  494     if ( rspCmd )
        MOV       A,R7
        JZ        ??zclGeneral_SendGroupGetMembershipRequest_2
//  495       *pBuf++ = capacity;
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
        INC       DPTR
        MOV       R0,DPL
        MOV       R1,DPH
//  496 
//  497     *pBuf++ = grpCnt;
??zclGeneral_SendGroupGetMembershipRequest_2:
        MOV       DPL,R0
        MOV       DPH,R1
        MOV       A,?V3
        MOVX      @DPTR,A
        INC       DPTR
        MOV       R0,DPL
        MOV       R1,DPH
//  498     for ( i = 0; i < grpCnt; i++ )
        MOV       R4,#0x0
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_28:
        SJMP      ??zclGeneral_SendGroupGetMembershipRequest_3
//  499     {
//  500       *pBuf++ = LO_UINT16( grpList[i] );
??zclGeneral_SendGroupGetMembershipRequest_4:
        MOV       A,R4
        ADD       A,0xE0 /* A   */
        MOV       ?V8,A
        CLR       A
        RLC       A
        MOV       ?V9,A
        MOV       A,R2
        ADD       A,?V8
        MOV       ?V8,A
        MOV       A,R3
        ADDC      A,?V9
        MOV       ?V9,A
        MOV       DPL,?V8
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      @DPTR,A
//  501       *pBuf++ = HI_UINT16( grpList[i] );
        MOV       DPL,?V8
        MOV       DPH,?V9
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      @DPTR,A
        MOV       A,R0
        ADD       A,#0x2
        MOV       R0,A
        JNC       ??zclGeneral_SendGroupGetMembershipRequest_5
        INC       R1
//  502     }
??zclGeneral_SendGroupGetMembershipRequest_5:
        INC       R4
??zclGeneral_SendGroupGetMembershipRequest_3:
        MOV       A,R4
        CLR       C
        SUBB      A,?V3
        JC        ??zclGeneral_SendGroupGetMembershipRequest_4
//  503 
//  504     status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
//  505                               cmd, TRUE, direction,
//  506                               disableDefaultRsp, 0, seqNum, len, buf );
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,#0x1e
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       R0,#?V3
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        CLR       A
        MOV       ?V4,A
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,#0x20
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       R0,#?V3
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,#0x1c
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       R0,#?V3
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       ?V3,#0x1
        MOV       R0,#?V3
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R6
        MOV       ?V3,A
        MOV       R0,#?V3
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       R2,?V6
        MOV       R3,?V7
        MOV       R1,?V2
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_77:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R1
        MOV       ?V3,A
//  507     zcl_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??zclGeneral_SendGroupGetMembershipRequest_6
//  508   }
//  509   else
//  510     status = ZMemError;
??zclGeneral_SendGroupGetMembershipRequest_1:
        MOV       ?V3,#0x10
//  511 
//  512   return ( status );
??zclGeneral_SendGroupGetMembershipRequest_6:
        MOV       R1,?V3
        LJMP      ??Subroutine39_0 & 0xFFFF
//  513 }
          CFI EndBlock cfiBlock59
//  514 
//  515 /*********************************************************************
//  516  * @fn      zclGeneral_SendGroupResponse
//  517  *
//  518  * @brief   Send Group Response (not Group View Response)
//  519  *
//  520  * @param   srcEP - Sending application's endpoint
//  521  * @param   dstAddr - where you want the message to go
//  522  * @param   cmd - either COMMAND_GROUP_ADD_RSP or COMMAND_GROUP_REMOVE_RSP
//  523  * @param   status - group command status
//  524  * @param   groupID - what group
//  525  *
//  526  * @return  ZStatus_t
//  527  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  528 ZStatus_t zclGeneral_SendGroupResponse( uint8 srcEP, afAddrType_t *dstAddr,
zclGeneral_SendGroupResponse:
          CFI Block cfiBlock60 Using cfiCommon0
          CFI Function zclGeneral_SendGroupResponse
        CODE
//  529                                         uint8 cmd, uint8 status, uint16 groupID,
//  530                                         uint8 disableDefaultRsp, uint8 seqNum )
//  531 {
        FUNCALL zclGeneral_SendGroupResponse, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 3
        MOV       A,#-0x3
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       A,R1
        MOV       R6,A
//  532   uint8 buf[3];
//  533 
//  534   buf[0] = status;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R5
        MOVX      @DPTR,A
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine50_0 & 0xFFFF
??CrossCallReturnLabel_99:
        MOV       R1,A
//  535   buf[1] = LO_UINT16( groupID );
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
//  536   buf[2] = HI_UINT16( groupID );
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine20 & 0xFFFF
//  537 
//  538   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
//  539                           cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
//  540                           disableDefaultRsp, 0, seqNum, 3, buf );
??CrossCallReturnLabel_63:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       ?V2,#0x3
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_18:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        CLR       A
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,#0x18
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_19:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       ?V1,#0x1
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,R4
        MOV       ?V1,A
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R4,#0x4
        LCALL     ??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_75:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       A,#0x3
        SJMP      ??Subroutine43_0
//  541 }
          CFI EndBlock cfiBlock60

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock61 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 25)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_78:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,#0x2
          CFI EndBlock cfiBlock61
        REQUIRE ??Subroutine43_0
        ; // Fall through to label ??Subroutine43_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine43_0:
          CFI Block cfiBlock62 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock62
        REQUIRE ??Subroutine44_0
        ; // Fall through to label ??Subroutine44_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine44_0:
          CFI Block cfiBlock63 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock63
//  542 
//  543 /*********************************************************************
//  544  * @fn      zclGeneral_SendGroupViewResponse
//  545  *
//  546  * @brief   Call to send Group Response Command
//  547  *
//  548  * @param   srcEP - Sending application's endpoint
//  549  * @param   dstAddr - where you want the message to go
//  550  * @param   cmd - either COMMAND_GROUP_ADD_RSP or COMMAND_GROUP_REMOVE_RSP
//  551  * @param   status - group command status
//  552  * @param   grp - group info
//  553  *
//  554  * @return  ZStatus_t
//  555  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  556 ZStatus_t zclGeneral_SendGroupViewResponse( uint8 srcEP, afAddrType_t *dstAddr,
zclGeneral_SendGroupViewResponse:
          CFI Block cfiBlock64 Using cfiCommon0
          CFI Function zclGeneral_SendGroupViewResponse
        CODE
//  557                                             uint8 status, aps_Group_t *grp, uint8 disableDefaultRsp, uint8 seqNum )
//  558 {
        FUNCALL zclGeneral_SendGroupViewResponse, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_SendGroupViewResponse, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_SendGroupViewResponse, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_SendGroupViewResponse, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV       A,#-0x16
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 0
        MOV       ?V8,R1
        MOV       ?V12,R2
        MOV       ?V13,R3
        MOV       ?V7,R4
        MOV       ?V9,R5
//  559   uint8 *buf;
//  560   uint8 len;
//  561   ZStatus_t stat;
//  562 
//  563   len = 1 + 2 + 1; // Status + Group ID + name length
        MOV       R0,#0x4
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V5,A
//  564 
//  565   if ( status == ZCL_STATUS_SUCCESS )
        MOV       A,?V4
        ADD       A,#0x2
        MOV       ?V2,A
        CLR       A
        ADDC      A,?V5
        MOV       ?V3,A
        MOV       A,R4
        JNZ       ??zclGeneral_SendGroupViewResponse_0
//  566   {
//  567     len += grp->name[0];  // String length
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R0,A
//  568   }
//  569 
//  570   buf = zcl_mem_alloc( len );
??zclGeneral_SendGroupViewResponse_0:
        MOV       A,R0
        LCALL     ?Subroutine21 & 0xFFFF
//  571   if ( buf )
??CrossCallReturnLabel_71:
        JNZ       $+5
        LJMP      ??zclGeneral_SendGroupViewResponse_1 & 0xFFFF
//  572   {
//  573     buf[0] = status;
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,?V7
        MOVX      @DPTR,A
//  574     buf[1] = LO_UINT16( grp->ID );
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        LCALL     ?Subroutine26 & 0xFFFF
//  575     buf[2] = HI_UINT16( grp->ID );
??CrossCallReturnLabel_47:
        LCALL     ?Subroutine18 & 0xFFFF
//  576 
//  577     if ( status == ZCL_STATUS_SUCCESS )
??CrossCallReturnLabel_40:
        MOV       A,R2
        ADD       A,#0x3
        MOV       R0,A
        CLR       A
        ADDC      A,?V1
        MOV       R1,A
        MOV       A,?V7
        JNZ       ??zclGeneral_SendGroupViewResponse_2
//  578     {
//  579       buf[3] = grp->name[0]; // string length
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?Subroutine26 & 0xFFFF
//  580       zcl_memcpy( &buf[4], (&grp->name[1]), grp->name[0] );
//  581     }
??CrossCallReturnLabel_48:
        INC       DPTR
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,?V0
        ADD       A,#0x4
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_67:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        SJMP      ??zclGeneral_SendGroupViewResponse_3
//  582     else //ZCL_STATUS_NOT_FOUND
//  583     {
//  584       buf[3] = 0;
??zclGeneral_SendGroupViewResponse_2:
        MOV       DPL,R0
        MOV       DPH,R1
        CLR       A
        MOVX      @DPTR,A
//  585     }
//  586 
//  587     stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
//  588                             COMMAND_GROUP_VIEW_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
//  589                             disableDefaultRsp, 0, seqNum, len, buf );
??zclGeneral_SendGroupViewResponse_3:
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V2,R6
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       A,#0x1c
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 27)
        CLR       A
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       A,?V9
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       ?V2,#0x1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       R2,?V12
        MOV       R3,?V13
        MOV       R1,?V8
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_79:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R1
        MOV       R6,A
//  590     zcl_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??zclGeneral_SendGroupViewResponse_4
//  591   }
//  592   else
//  593   {
//  594     stat = ZMemError;
??zclGeneral_SendGroupViewResponse_1:
        MOV       R6,#0x10
//  595   }
//  596 
//  597   return ( stat );
??zclGeneral_SendGroupViewResponse_4:
        MOV       A,R6
        MOV       R1,A
          CFI EndBlock cfiBlock64
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
//  598 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock65 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0xe
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock65

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond66 Using cfiCommon0
          CFI Function zclGeneral_SendGroupViewResponse
          CFI Conditional ??CrossCallReturnLabel_47
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function zclGeneral_SendGroupViewResponse
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond67) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond67) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond67) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond67) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-2
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker68 Using cfiCommon1
          CFI (cfiPicker68) NoFunction
          CFI (cfiPicker68) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        RET
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiPicker68

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond69 Using cfiCommon0
          CFI Function zclGeneral_SendIdentify
          CFI Conditional ??CrossCallReturnLabel_73
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function zclGeneral_SendIdentifyQueryResponse
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-2
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function zclGeneral_SendIdentifyEZModeInvoke
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-2
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker72 Using cfiCommon1
          CFI (cfiPicker72) NoFunction
          CFI (cfiPicker72) Picker
        MOV       R4,#0x3
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiPicker72
        REQUIRE ??Subroutine45_0
        ; // Fall through to label ??Subroutine45_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine45_0:
          CFI Block cfiCond73 Using cfiCommon0
          CFI Function zclGeneral_SendGroupResponse
          CFI Conditional ??CrossCallReturnLabel_75
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function zclGeneral_SendIdentify
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-2
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function zclGeneral_SendIdentifyQueryResponse
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-2
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function zclGeneral_SendIdentifyEZModeInvoke
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-2
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker77 Using cfiCommon1
          CFI (cfiPicker77) NoFunction
          CFI (cfiPicker77) Picker
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R1,A
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiPicker77
        REQUIRE ??Subroutine46_0
        ; // Fall through to label ??Subroutine46_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine46_0:
          CFI Block cfiCond78 Using cfiCommon0
          CFI Function zclGeneral_SendAddGroupRequest
          CFI Conditional ??CrossCallReturnLabel_76
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function zclGeneral_SendGroupGetMembershipRequest
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond79) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-2
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function zclGeneral_SendIdentifyUpdateCommState
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+-2
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function zclGeneral_SendGroupRequest
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-2
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function zclGeneral_SendGroupViewResponse
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond82) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond82) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond82) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-2
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function zclGeneral_SendGroupResponse
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond83) CFA_SP SP+-2
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function zclGeneral_SendIdentify
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-2
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function zclGeneral_SendIdentifyQueryResponse
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-2
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function zclGeneral_SendIdentifyEZModeInvoke
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-2
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker87 Using cfiCommon1
          CFI (cfiPicker87) NoFunction
          CFI (cfiPicker87) Picker
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        RET
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiPicker87

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond88 Using cfiCommon0
          CFI Function zclGeneral_SendAddGroupRequest
          CFI Conditional ??CrossCallReturnLabel_39
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function zclGeneral_SendGroupViewResponse
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond89) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond89) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond89) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond89) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-2
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker90 Using cfiCommon1
          CFI (cfiPicker90) NoFunction
          CFI (cfiPicker90) Picker
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiPicker90
//  599 #endif // ZCL_GROUPS
//  600 
//  601 #ifdef ZCL_SCENES
//  602 /*********************************************************************
//  603  * @fn      zclGeneral_SendAddSceneRequest
//  604  *
//  605  * @brief   Send the (Enhanced) Add Scene Request to a device. You can
//  606  *           also use the appropriate macro.
//  607  *
//  608  * @param   srcEP - Sending Apps endpoint
//  609  * @param   dstAddr - where to send the request
//  610  * @param   scene - pointer to the scene structure
//  611  * @param  cmd - COMMAND_SCENE_ADD or COMMAND_SCENE_ENHANCED_ADD
//  612  * @param   disableDefaultRsp - whether to disable the Default Response command
//  613  * @param   seqNum - sequence number
//  614  *
//  615  * @return  ZStatus_t
//  616  */
//  617 ZStatus_t zclGeneral_SendAddSceneRequest( uint8 srcEP, afAddrType_t *dstAddr,
//  618                                           uint8 cmd, zclGeneral_Scene_t *scene,
//  619                                           uint8 disableDefaultRsp, uint8 seqNum )
//  620 {
//  621   uint8 *buf;
//  622   uint8 *pBuf;
//  623   uint8 len;
//  624   ZStatus_t status;
//  625 
//  626   len = 2 + 1 + 2;    // Group ID + Scene ID + transition time
//  627   len += scene->name[0] + 1; // String + 1 for length
//  628 
//  629   // Add something for the extension field length
//  630   len += scene->extLen;
//  631 
//  632   buf = zcl_mem_alloc( len );
//  633   if ( buf )
//  634   {
//  635     pBuf = buf;
//  636     *pBuf++ = LO_UINT16( scene->groupID );
//  637     *pBuf++ = HI_UINT16( scene->groupID );
//  638     *pBuf++ = scene->ID;
//  639     *pBuf++ = LO_UINT16( scene->transTime );
//  640     *pBuf++ = HI_UINT16( scene->transTime );
//  641     *pBuf++ = scene->name[0]; // string length
//  642     zcl_memcpy( pBuf, &(scene->name[1]), scene->name[0] );
//  643     pBuf += scene->name[0]; // move pass name
//  644 
//  645     // Add the extension fields
//  646     if ( scene->extLen > 0 )
//  647       zcl_memcpy( pBuf, scene->extField, scene->extLen );
//  648 
//  649     status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  650                               cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  651                               disableDefaultRsp, 0, seqNum, len, buf );
//  652     zcl_mem_free( buf );
//  653   }
//  654   else
//  655     status = ZMemError;
//  656 
//  657   return ( status );
//  658 }
//  659 
//  660 /*********************************************************************
//  661  * @fn      zclGeneral_SendSceneRequest
//  662  *
//  663  * @brief   Send a Scene Request to a device.  You can also use the
//  664  *          appropriate macro.
//  665  *
//  666  * @param   srcEP - Sending Apps endpoint
//  667  * @param   dstAddr - where to send the request
//  668  * @param   cmd - one of the following:
//  669  *              COMMAND_SCENE_VIEW
//  670  *              COMMAND_SCENE_REMOVE
//  671  *              COMMAND_SCENE_REMOVE_ALL
//  672  *              COMMAND_SCENE_STORE
//  673  *              COMMAND_SCENE_RECALL
//  674  *              COMMAND_SCENE_GET_MEMBERSHIP
//  675  *              COMMAND_SCENE_ENHANCED_VIEW
//  676  * @param   groupID - group ID
//  677  * @param   sceneID - scene ID (not applicable to COMMAND_SCENE_REMOVE_ALL and
//  678  *                    COMMAND_SCENE_GET_MEMBERSHIP)
//  679  * @param   disableDefaultRsp - whether to disable the Default Response command
//  680  * @param   seqNum - sequence number
//  681  * @return  ZStatus_t
//  682  */
//  683 ZStatus_t zclGeneral_SendSceneRequest( uint8 srcEP, afAddrType_t *dstAddr,
//  684                                        uint8 cmd, uint16 groupID, uint8 sceneID,
//  685                                        uint8 disableDefaultRsp, uint8 seqNum )
//  686 {
//  687   uint8 buf[3];
//  688   uint8 len = 2;
//  689 
//  690   buf[0] = LO_UINT16( groupID );
//  691   buf[1] = HI_UINT16( groupID );
//  692 
//  693   if ( cmd != COMMAND_SCENE_REMOVE_ALL && cmd != COMMAND_SCENE_GET_MEMBERSHIP )
//  694   {
//  695     buf[2] = sceneID;
//  696     len++;
//  697   }
//  698 
//  699   return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  700                             cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  701                             disableDefaultRsp, 0, seqNum, len, buf ) );
//  702 }
//  703 
//  704 /*********************************************************************
//  705  * @fn      zclGeneral_SendSceneResponse
//  706  *
//  707  * @brief   Send Group Response (not Group View Response)
//  708  *
//  709  * @param   srcEP - Sending application's endpoint
//  710  * @param   dstAddr - where you want the message to go
//  711  * @param   cmd - either COMMAND_SCENE_ADD_RSP, COMMAND_SCENE_REMOVE_RSP
//  712  *                COMMAND_SCENE_STORE_RSP, or COMMAND_SCENE_REMOVE_ALL_RSP
//  713  * @param   status - scene command status
//  714  * @param   groupID - what group
//  715  * @param   sceneID - what scene (not applicable to COMMAND_SCENE_REMOVE_ALL_RSP)
//  716  *
//  717  * @return  ZStatus_t
//  718  */
//  719 ZStatus_t zclGeneral_SendSceneResponse( uint8 srcEP, afAddrType_t *dstAddr,
//  720                                         uint8 cmd, uint8 status, uint16 groupID,
//  721                                         uint8 sceneID, uint8 disableDefaultRsp, uint8 seqNum )
//  722 {
//  723   uint8 buf[4];
//  724   uint8 len = 1 + 2; // Status + Group ID
//  725 
//  726   buf[0] = status;
//  727   buf[1] = LO_UINT16( groupID );
//  728   buf[2] = HI_UINT16( groupID );
//  729 
//  730   if ( cmd != COMMAND_SCENE_REMOVE_ALL_RSP )
//  731   {
//  732     buf[3] = sceneID;
//  733     len++;
//  734   }
//  735 
//  736   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  737                           cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
//  738                           disableDefaultRsp, 0, seqNum, len, buf );
//  739 }
//  740 
//  741 /*********************************************************************
//  742  * @fn      zclGeneral_SendSceneViewResponse
//  743  *
//  744  * @brief   Call to send Scene (Enahced) View Response Command. You can
//  745  *           also use the appropriate macro.
//  746  *
//  747  * @param   srcEP - Sending application's endpoint
//  748  * @param   dstAddr - where you want the message to go
//  749  * @param   cmd - either COMMAND_SCENE_VIEW_RSP or COMMAND_SCENE_ENHANCED_VIEW_RSP
//  750  * @param   status - scene command status
//  751  * @param   scene - scene info
//  752  *
//  753  * @return  ZStatus_t
//  754  */
//  755 ZStatus_t zclGeneral_SendSceneViewRsp( uint8 srcEP, afAddrType_t *dstAddr,
//  756                                        uint8 cmd, uint8 status, zclGeneral_Scene_t *scene,
//  757                                        uint8 disableDefaultRsp, uint8 seqNum )
//  758 {
//  759   uint8 *buf;
//  760   uint8 *pBuf;
//  761   uint8 len = 1 + 2 + 1; // Status + Group ID + Scene ID
//  762   ZStatus_t stat;
//  763 
//  764   if ( status == ZCL_STATUS_SUCCESS )
//  765   {
//  766     len += 2; // Transition Time
//  767     len += scene->name[0] + 1; // string + 1 for length
//  768 
//  769     // Add something for the extension field length
//  770     len += scene->extLen;
//  771   }
//  772 
//  773   buf = zcl_mem_alloc( len );
//  774   if ( buf )
//  775   {
//  776     pBuf = buf;
//  777     *pBuf++ = status;
//  778     *pBuf++ = LO_UINT16( scene->groupID );
//  779     *pBuf++ = HI_UINT16( scene->groupID );
//  780     *pBuf++ = scene->ID;
//  781     if ( status == ZCL_STATUS_SUCCESS )
//  782     {
//  783       uint16 transTime = scene->transTime;
//  784       if ( cmd == COMMAND_SCENE_ENHANCED_VIEW_RSP )
//  785       {
//  786         // Transition time is in 1/10s
//  787         transTime *= 10;
//  788         transTime += scene->transTime100ms;
//  789       }
//  790 
//  791       *pBuf++ = LO_UINT16( transTime );
//  792       *pBuf++ = HI_UINT16( transTime );
//  793       *pBuf++ = scene->name[0]; // string length
//  794       if ( scene->name[0] != 0 )
//  795       {
//  796         zcl_memcpy( pBuf, &(scene->name[1]), scene->name[0] );
//  797         pBuf += scene->name[0]; // move pass name
//  798       }
//  799 
//  800       // Add the extension fields
//  801       if ( scene->extLen > 0 )
//  802         zcl_memcpy( pBuf, scene->extField, scene->extLen );
//  803     }
//  804 
//  805     stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  806                             cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
//  807                             disableDefaultRsp, 0, seqNum, len, buf );
//  808     zcl_mem_free( buf );
//  809   }
//  810   else
//  811     stat = ZMemError;
//  812 
//  813   return ( stat );
//  814 }
//  815 
//  816 /*********************************************************************
//  817  * @fn      zclGeneral_SendSceneGetMembershipResponse
//  818  *
//  819  * @brief   Call to send Scene Get Membership Response Command
//  820  *
//  821  * @param   srcEP - Sending application's endpoint
//  822  * @param   dstAddr - where you want the message to go
//  823  * @param   status - scene command status
//  824  * @param   capacity - remaining capacity of the scene table
//  825  * @param   sceneCnt - number of scenes in the scene list
//  826  * @param   sceneList - list of scene IDs
//  827  * @param   groupID - group ID that scene belongs to
//  828  * @param   seqNum - sequence number
//  829  *
//  830  * @return  ZStatus_t
//  831  */
//  832 ZStatus_t zclGeneral_SendSceneGetMembershipResponse( uint8 srcEP, afAddrType_t *dstAddr,
//  833                                                      uint8 status, uint8 capacity, uint8 sceneCnt, uint8 *sceneList,
//  834                                                      uint16 groupID, uint8 disableDefaultRsp, uint8 seqNum )
//  835 {
//  836   uint8 *buf;
//  837   uint8 *pBuf;
//  838   uint8 len = 1 + 1 + 2; // Status + Capacity + Group ID;
//  839   uint8 i;
//  840   ZStatus_t stat;
//  841 
//  842   if ( status == ZCL_STATUS_SUCCESS )
//  843   {
//  844     len++; // Scene Count
//  845     len += sceneCnt; // Scene List (Scene ID is a single octet)
//  846   }
//  847 
//  848   buf = zcl_mem_alloc( len );
//  849   if ( buf )
//  850   {
//  851     pBuf = buf;
//  852     *pBuf++ = status;
//  853     *pBuf++ = capacity;
//  854     *pBuf++ = LO_UINT16( groupID );
//  855     *pBuf++ = HI_UINT16( groupID );
//  856     if ( status == ZCL_STATUS_SUCCESS )
//  857     {
//  858       *pBuf++ = sceneCnt;
//  859       for ( i = 0; i < sceneCnt; i++ )
//  860         *pBuf++ = sceneList[i];
//  861     }
//  862 
//  863     stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  864                             COMMAND_SCENE_GET_MEMBERSHIP_RSP, TRUE,
//  865                             ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, len, buf );
//  866     zcl_mem_free( buf );
//  867   }
//  868   else
//  869     stat = ZMemError;
//  870 
//  871   return ( stat );
//  872 }
//  873 
//  874 #ifdef ZCL_LIGHT_LINK_ENHANCE
//  875 /*********************************************************************
//  876  * @fn      zclGeneral_SendSceneCopy
//  877  *
//  878  * @brief   Send Scene Copy Request to a device
//  879  *
//  880  * @param   srcEP - sending application's endpoint
//  881  * @param   dstAddr - where to send the request
//  882  * @param   mode - how scene copy is to proceed
//  883  * @param   groupIDFrom - group from which scene to be copied
//  884  * @param   sceneIDFrom - scene from which scene to be copied
//  885  * @param   groupIDTo - group to which scene to be copied
//  886  * @param   sceneIDTo - scene to which scene to be copied
//  887  * @param   disableDefaultRsp - disable Default Response command
//  888  * @param   seqNum - the identification number for the transaction
//  889  *
//  890  * @return  ZStatus_t
//  891  */
//  892 ZStatus_t zclGeneral_SendSceneCopy( uint8 srcEP, afAddrType_t *dstAddr,
//  893                                     uint8 mode, uint16 groupIDFrom, uint8 sceneIDFrom,
//  894                                     uint16 groupIDTo, uint8 sceneIDTo,
//  895                                     uint8 disableDefaultRsp, uint8 seqNum )
//  896 {
//  897   uint8 buf[7];
//  898 
//  899   buf[0] = mode;
//  900   buf[1] = LO_UINT16( groupIDFrom );
//  901   buf[2] = HI_UINT16( groupIDFrom );
//  902   buf[3] = sceneIDFrom;
//  903   buf[4] = LO_UINT16( groupIDTo );
//  904   buf[5] = HI_UINT16( groupIDTo );
//  905   buf[6] = sceneIDTo;
//  906 
//  907   return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  908                             COMMAND_SCENE_COPY, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  909                             disableDefaultRsp, 0, seqNum, 7, buf ) );
//  910 }
//  911 
//  912 /*********************************************************************
//  913  * @fn      zclGeneral_SendSceneCopyResponse
//  914  *
//  915  * @brief   Send Scene Copy Response to a device
//  916  *
//  917  * @param   srcEP - sending application's endpoint
//  918  * @param   dstAddr - where to send the request
//  919  * @param   status - status of copy scene attemp
//  920  * @param   groupIDFrom - group from which scene was copied
//  921  * @param   sceneIDFrom - scene from which scene was copied
//  922  * @param   disableDefaultRsp - disable Default Response command
//  923  * @param   seqNum - the identification number for the transaction
//  924  *
//  925  * @return  ZStatus_t
//  926  */
//  927 ZStatus_t zclGeneral_SendSceneCopyResponse( uint8 srcEP, afAddrType_t *dstAddr,
//  928                                             uint8 status, uint16 groupIDFrom, uint8 sceneIDFrom,
//  929                                             uint8 disableDefaultRsp, uint8 seqNum )
//  930 {
//  931   uint8 buf[4];
//  932 
//  933   buf[0] = status;
//  934   buf[1] = LO_UINT16( groupIDFrom );
//  935   buf[2] = HI_UINT16( groupIDFrom );
//  936   buf[3] = sceneIDFrom;
//  937 
//  938   return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  939                             COMMAND_SCENE_COPY_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
//  940                             disableDefaultRsp, 0, seqNum, 4, buf ) );
//  941 }
//  942 #endif // ZCL_LIGHT_LINK_ENHANCE
//  943 #endif // ZCL_SCENES
//  944 
//  945 #ifdef ZCL_ON_OFF
//  946 #ifdef ZCL_LIGHT_LINK_ENHANCE
//  947 /*********************************************************************
//  948  * @fn      zclGeneral_SendOnOff_CmdOffWithEffect
//  949  *
//  950  * @brief   Call to send out an Off with Effect Command.
//  951  *
//  952  * @param   srcEP - Sending application's endpoint
//  953  * @param   dstAddr - where you want the message to go
//  954  * @param   effectId - fading effect to use when switching light off
//  955  * @param   effectVariant - which variant of effect to be triggered
//  956  * @param   disableDefaultRsp - whether to disable the Default Response command
//  957  * @param   seqNum - sequence number
//  958  *
//  959  * @return  ZStatus_t
//  960  */
//  961 ZStatus_t zclGeneral_SendOnOff_CmdOffWithEffect( uint8 srcEP, afAddrType_t *dstAddr,
//  962                                                  uint8 effectId, uint8 effectVariant,
//  963                                                  uint8 disableDefaultRsp, uint8 seqNum )
//  964 {
//  965   uint8 buf[2];
//  966 
//  967   buf[0] = effectId;
//  968   buf[1] = effectVariant;
//  969 
//  970   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF,
//  971                           COMMAND_OFF_WITH_EFFECT, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  972                           disableDefaultRsp, 0, seqNum, 2, buf );
//  973 }
//  974 
//  975 /*********************************************************************
//  976  * @fn      zclGeneral_SendOnOff_CmdOnWithTimedOff
//  977  *
//  978  * @brief   Call to send out an On with Timed Off Command.
//  979  *
//  980  * @param   srcEP - Sending application's endpoint
//  981  * @param   dstAddr - where you want the message to go
//  982  * @param   onOffCtrl - how the lamp is to be operated
//  983  * @param   onTime - the length of time (in 1/10ths second) that the lamp is to remain on, before automatically turning off
//  984  * @param   offWaitTime - the length of time (in 1/10ths second) that the lamp shall remain off, and guarded to prevent an on command turning the light back on.
//  985  * @param   disableDefaultRsp - whether to disable the Default Response command
//  986  * @param   seqNum - sequence number
//  987  *
//  988  * @return  ZStatus_t
//  989  */
//  990 ZStatus_t zclGeneral_SendOnOff_CmdOnWithTimedOff ( uint8 srcEP, afAddrType_t *dstAddr,
//  991                                                    zclOnOffCtrl_t onOffCtrl, uint16 onTime, uint16 offWaitTime,
//  992                                                    uint8 disableDefaultRsp, uint8 seqNum )
//  993 {
//  994   uint8 buf[5];
//  995 
//  996   buf[0] = onOffCtrl.byte;
//  997   buf[1] = LO_UINT16( onTime );
//  998   buf[2] = HI_UINT16( onTime );
//  999   buf[3] = LO_UINT16( offWaitTime );
// 1000   buf[4] = HI_UINT16( offWaitTime );
// 1001 
// 1002   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF,
// 1003                           COMMAND_ON_WITH_TIMED_OFF, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1004                           disableDefaultRsp, 0, seqNum, 5, buf );
// 1005 }
// 1006 #endif // ZCL_LIGHT_LINK_ENHANCE
// 1007 #endif // ZCL_ON_OFF
// 1008 
// 1009 #ifdef ZCL_LEVEL_CTRL
// 1010 /*********************************************************************
// 1011  * @fn      zclGeneral_SendLevelControlMoveToLevelRequest
// 1012  *
// 1013  * @brief   Call to send out a Level Control Request. You can also use
// 1014  *          the appropriate macro.
// 1015  *
// 1016  * @param   srcEP - Sending application's endpoint
// 1017  * @param   dstAddr - where you want the message to go
// 1018  * @param   cmd - one of the following:
// 1019  *              COMMAND_LEVEL_MOVE_TO_LEVEL or
// 1020  *              COMMAND_LEVEL_MOVE_TO_LEVEL_WITH_ON_OFF
// 1021  * @param   level - what level to move to
// 1022  * @param   transitionTime - how long to take to get to the level (in seconds)
// 1023  *
// 1024  * @return  ZStatus_t
// 1025  */
// 1026 ZStatus_t zclGeneral_SendLevelControlMoveToLevelRequest( uint8 srcEP, afAddrType_t *dstAddr,
// 1027                                                          uint8 cmd, uint8 level, uint16 transTime,
// 1028                                                          uint8 disableDefaultRsp, uint8 seqNum )
// 1029 {
// 1030   uint8 buf[3];
// 1031 
// 1032   buf[0] = level;
// 1033   buf[1] = LO_UINT16( transTime );
// 1034   buf[2] = HI_UINT16( transTime );
// 1035 
// 1036   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
// 1037                           cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1038                           disableDefaultRsp, 0, seqNum, 3, buf );
// 1039 }
// 1040 
// 1041 /*********************************************************************
// 1042  * @fn      zclGeneral_SendLevelControlMoveRequest
// 1043  *
// 1044  * @brief   Call to send out a Level Control Request. You can also use
// 1045  *          the appropriate macro.
// 1046  *
// 1047  * @param   srcEP - Sending application's endpoint
// 1048  * @param   dstAddr - where you want the message to go
// 1049  * @param   cmd - one of the following:
// 1050  *              COMMAND_LEVEL_MOVE or
// 1051  *              COMMAND_LEVEL_MOVE_WITH_ON_OFF
// 1052  * @param   moveMode - LEVEL_MOVE_UP or
// 1053  *                     LEVEL_MOVE_DOWN
// 1054  * @param   rate - number of steps to take per second
// 1055  *
// 1056  * @return  ZStatus_t
// 1057  */
// 1058 ZStatus_t zclGeneral_SendLevelControlMoveRequest( uint8 srcEP, afAddrType_t *dstAddr,
// 1059                                                   uint8 cmd, uint8 moveMode, uint8 rate,
// 1060                                                   uint8 disableDefaultRsp, uint8 seqNum )
// 1061 {
// 1062   uint8 buf[2];
// 1063 
// 1064   buf[0] = moveMode;
// 1065   buf[1] = rate;
// 1066 
// 1067   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
// 1068                           cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1069                           disableDefaultRsp, 0, seqNum, 2, buf );
// 1070 }
// 1071 
// 1072 /*********************************************************************
// 1073  * @fn      zclGeneral_SendLevelControlStepRequest
// 1074  *
// 1075  * @brief   Call to send out a Level Control Request. You can also use
// 1076  *          the appropriate macro.
// 1077  *
// 1078  * @param   srcEP - Sending application's endpoint
// 1079  * @param   dstAddr - where you want the message to go
// 1080  * @param   cmd - one of the following:
// 1081  *              COMMAND_LEVEL_STEP
// 1082  *              COMMAND_LEVEL_STEP_WITH_ON_OFF
// 1083  * @param   stepMode - LEVEL_STEP_UP or
// 1084  *                     LEVEL_STEP_DOWN
// 1085  * @param   amount - number of levels to step
// 1086  * @param   transitionTime - time, in 1/10ths of a second, to take to perform the step
// 1087  *
// 1088  * @return  ZStatus_t
// 1089  */
// 1090 ZStatus_t zclGeneral_SendLevelControlStepRequest( uint8 srcEP, afAddrType_t *dstAddr,
// 1091                                                   uint8 cmd, uint8 stepMode, uint8 stepSize, uint16 transTime,
// 1092                                                   uint8 disableDefaultRsp, uint8 seqNum )
// 1093 {
// 1094   uint8 buf[4];
// 1095 
// 1096   buf[0] = stepMode;
// 1097   buf[1] = stepSize;
// 1098   buf[2] = LO_UINT16( transTime );
// 1099   buf[3] = HI_UINT16( transTime );
// 1100 
// 1101   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
// 1102                           cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1103                           disableDefaultRsp, 0, seqNum, 4, buf );
// 1104 }
// 1105 
// 1106 /*********************************************************************
// 1107  * @fn      zclGeneral_SendLevelControlStepRequest
// 1108  *
// 1109  * @brief   Call to send out a Level Control Request. You can also use
// 1110  *          the appropriate macro.
// 1111  *
// 1112  * @param   srcEP - Sending application's endpoint
// 1113  * @param   dstAddr - where you want the message to go
// 1114  * @param   cmd - one of the following:
// 1115  *              COMMAND_LEVEL_STOP
// 1116  *              COMMAND_LEVEL_STOP_WITH_ON_OFF
// 1117  *
// 1118  * @return  ZStatus_t
// 1119  */
// 1120 ZStatus_t zclGeneral_SendLevelControlStopRequest( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
// 1121                                                   uint8 disableDefaultRsp, uint8 seqNum )
// 1122 {
// 1123   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
// 1124                           cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1125                           disableDefaultRsp, 0, seqNum, 0, NULL );
// 1126 }
// 1127 #endif // ZCL_LEVEL_CTRL
// 1128 
// 1129 #ifdef ZCL_ALARMS
// 1130 /*********************************************************************
// 1131  * @fn      zclGeneral_SendAlarm
// 1132  *
// 1133  * @brief   Call to send out an Alarm Request Command
// 1134  *
// 1135  * @param   srcEP - Sending application's endpoint
// 1136  * @param   dstAddr - where you want the message to go
// 1137  * @param   cmd - COMMAND_ALARMS_ALARM
// 1138  * @param   alarmCode - code for the cause of the alarm
// 1139  * @param   clusterID - cluster whose attribute generate the alarm
// 1140  *
// 1141  * @return  ZStatus_t
// 1142  */
// 1143 ZStatus_t zclGeneral_SendAlarm( uint8 srcEP, afAddrType_t *dstAddr,
// 1144                                 uint8 alarmCode, uint16 clusterID,
// 1145                                 uint8 disableDefaultRsp, uint8 seqNum )
// 1146 {
// 1147   uint8 buf[3];
// 1148 
// 1149   buf[0] = alarmCode;
// 1150   buf[1] = LO_UINT16( clusterID );
// 1151   buf[2] = HI_UINT16( clusterID );
// 1152 
// 1153   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
// 1154                           COMMAND_ALARMS_ALARM, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
// 1155                           disableDefaultRsp, 0, seqNum, 3, buf );
// 1156 }
// 1157 
// 1158 /*********************************************************************
// 1159  * @fn      zclGeneral_SendAlarmReset
// 1160  *
// 1161  * @brief   Call to send out an Alarm Reset Command
// 1162  *
// 1163  * @param   srcEP - Sending application's endpoint
// 1164  * @param   dstAddr - where you want the message to go
// 1165  * @param   alarmCode - code for the cause of the alarm
// 1166  * @param   clusterID - cluster whose attribute generate the alarm
// 1167  *
// 1168  * @return  ZStatus_t
// 1169 */
// 1170 ZStatus_t zclGeneral_SendAlarmReset( uint8 srcEP, afAddrType_t *dstAddr,
// 1171                                      uint8 alarmCode, uint16 clusterID,
// 1172                                      uint8 disableDefaultRsp, uint8 seqNum )
// 1173 {
// 1174   uint8 buf[3];
// 1175 
// 1176   buf[0] = alarmCode;
// 1177   buf[1] = LO_UINT16( clusterID );
// 1178   buf[2] = HI_UINT16( clusterID );
// 1179 
// 1180   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
// 1181                           COMMAND_ALARMS_RESET, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1182                           disableDefaultRsp, 0, seqNum, 3, buf );
// 1183 }
// 1184 
// 1185 /*********************************************************************
// 1186  * @fn      zclGeneral_SendAlarmGetResponse
// 1187  *
// 1188  * @brief   Call to send out an Alarm Get Response Command
// 1189  *
// 1190  * @param   srcEP - Sending application's endpoint
// 1191  * @param   dstAddr - where you want the message to go
// 1192  * @param   status - SUCCESS or NOT_FOUND
// 1193  * @param   alarmCode - code for the cause of the alarm
// 1194  * @param   clusterID - cluster whose attribute generate the alarm
// 1195  * @param   timeStamp - time at which the alarm occured
// 1196  *
// 1197  * @return  ZStatus_t
// 1198  */
// 1199 ZStatus_t zclGeneral_SendAlarmGetResponse( uint8 srcEP, afAddrType_t *dstAddr,
// 1200                                            uint8 status, uint8 alarmCode, uint16 clusterID,
// 1201                                            uint32 timeStamp, uint8 disableDefaultRsp, uint8 seqNum )
// 1202 {
// 1203   uint8 buf[8];
// 1204   uint8 len = 1; // Status
// 1205 
// 1206   buf[0] = status;
// 1207   if ( status == ZCL_STATUS_SUCCESS )
// 1208   {
// 1209     len += 1 + 2 + 4; // Alarm code + Cluster ID + Time stamp
// 1210     buf[1] = alarmCode;
// 1211     buf[2] = LO_UINT16( clusterID );
// 1212     buf[3] = HI_UINT16( clusterID );
// 1213     zcl_buffer_uint32( &buf[4], timeStamp );
// 1214   }
// 1215 
// 1216   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
// 1217                           COMMAND_ALARMS_GET_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
// 1218                           disableDefaultRsp, 0, seqNum, len, buf );
// 1219 }
// 1220 
// 1221 #ifdef SE_UK_EXT
// 1222 /*********************************************************************
// 1223  * @fn      zclGeneral_SendAlarmGetEventLog
// 1224  *
// 1225  * @brief   Call to send out an Alarm Get Event Log Command
// 1226  *
// 1227  * @param   srcEP - Sending application's endpoint
// 1228  * @param   dstAddr - where you want the message to go
// 1229  * @param   pEventLog - pointer to Get Event Log Command
// 1230  * @param   disableDefaultRsp - disable default response
// 1231  * @param   seqNum - ZCL sequence number
// 1232  *
// 1233  * @return  ZStatus_t
// 1234  */
// 1235 ZStatus_t zclGeneral_SendAlarmGetEventLog( uint8 srcEP, afAddrType_t *dstAddr,
// 1236                                            zclGetEventLog_t *pEventLog,
// 1237                                            uint8 disableDefaultRsp, uint8 seqNum )
// 1238 {
// 1239   uint8 buf[10];
// 1240 
// 1241   buf[0] = pEventLog->logID;
// 1242   zcl_buffer_uint32( &buf[1], pEventLog->startTime );
// 1243   zcl_buffer_uint32( &buf[5], pEventLog->endTime );
// 1244   buf[9] = pEventLog->numEvents;
// 1245 
// 1246   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
// 1247                           COMMAND_ALARMS_GET_EVENT_LOG, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
// 1248                           disableDefaultRsp, 0, seqNum, 10, buf );
// 1249 }
// 1250 
// 1251 /*********************************************************************
// 1252  * @fn      zclGeneral_SendAlarmPublishEventLog
// 1253  *
// 1254  * @brief   Call to send out an Alarm Publish Event Log Command
// 1255  *
// 1256  * @param   srcEP - Sending application's endpoint
// 1257  * @param   dstAddr - where you want the message to go
// 1258  * @param   pEventLog - pointer to Publish Event Log Command
// 1259  * @param   disableDefaultRsp - disable default response
// 1260  * @param   seqNum - ZCL sequence number
// 1261  *
// 1262  * @return  ZStatus_t
// 1263  */
// 1264 ZStatus_t zclGeneral_SendAlarmPublishEventLog( uint8 srcEP, afAddrType_t *dstAddr,
// 1265                                                zclPublishEventLog_t *pEventLog,
// 1266                                                uint8 disableDefaultRsp, uint8 seqNum )
// 1267 {
// 1268   uint8 *buf;
// 1269   uint8 *pBuf;
// 1270   uint8 bufLen;
// 1271 
// 1272   // Log ID + Command Index + Total Commands + (numSubLogs * ( Event ID + Event Time))
// 1273   bufLen = 1 + 1 + 1 + (pEventLog->numSubLogs * (1 + 4));
// 1274 
// 1275   buf = zcl_mem_alloc( bufLen );
// 1276   if ( buf == NULL )
// 1277   {
// 1278     return (ZMemError);
// 1279   }
// 1280 
// 1281   pBuf = buf;
// 1282   *pBuf++ = pEventLog->logID;
// 1283   *pBuf++ = pEventLog->cmdIndex;
// 1284   *pBuf++ = pEventLog->totalCmds;
// 1285 
// 1286   for ( uint8 i = 0; i < pEventLog->numSubLogs; i++ )
// 1287   {
// 1288     zclEventLogPayload_t *pLogs = &(pEventLog->pLogs[i]);
// 1289 
// 1290     *pBuf++ = pLogs->eventId;
// 1291     pBuf = zcl_buffer_uint32( pBuf, pLogs->eventTime );
// 1292   }
// 1293 
// 1294   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
// 1295                           COMMAND_ALARMS_PUBLISH_EVENT_LOG, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1296                           disableDefaultRsp, 0, seqNum, bufLen, buf );
// 1297 }
// 1298 #endif // SE_UK_EXT
// 1299 #endif // ZCL_ALARMS
// 1300 
// 1301 #ifdef ZCL_LOCATION
// 1302 /*********************************************************************
// 1303  * @fn      zclGeneral_SendLocationSetAbsolute
// 1304  *
// 1305  * @brief   Call to send out a Set Absolute Location Command
// 1306  *
// 1307  * @param   srcEP - Sending application's endpoint
// 1308  * @param   dstAddr - where you want the message to go
// 1309  * @param   absLoc - absolute location info
// 1310  *
// 1311  * @return  ZStatus_t
// 1312  */
// 1313 ZStatus_t zclGeneral_SendLocationSetAbsolute( uint8 srcEP, afAddrType_t *dstAddr,
// 1314                                               zclLocationAbsolute_t *absLoc,
// 1315                                               uint8 disableDefaultRsp, uint8 seqNum )
// 1316 {
// 1317    uint8 buf[10]; // 5 fields (2 octects each)
// 1318 
// 1319    buf[0] = LO_UINT16( absLoc->coordinate1 );
// 1320    buf[1] = HI_UINT16( absLoc->coordinate1 );
// 1321    buf[2] = LO_UINT16( absLoc->coordinate2 );
// 1322    buf[3] = HI_UINT16( absLoc->coordinate2 );
// 1323    buf[4] = LO_UINT16( absLoc->coordinate3 );
// 1324    buf[5] = HI_UINT16( absLoc->coordinate3 );
// 1325    buf[6] = LO_UINT16( absLoc->power );
// 1326    buf[7] = HI_UINT16( absLoc->power );
// 1327    buf[8] = LO_UINT16( absLoc->pathLossExponent );
// 1328    buf[9] = HI_UINT16( absLoc->pathLossExponent );
// 1329 
// 1330    return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
// 1331                            COMMAND_LOCATION_SET_ABSOLUTE, TRUE,
// 1332                            ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 10, buf );
// 1333 }
// 1334 
// 1335 /*********************************************************************
// 1336  * @fn      zclGeneral_SendLocationSetDevCfg
// 1337  *
// 1338  * @brief   Call to send out a Set Device Configuration Command
// 1339  *
// 1340  * @param   srcEP - Sending application's endpoint
// 1341  * @param   dstAddr - where you want the message to go
// 1342  * @param   devCfg - device configuration info
// 1343  *
// 1344  * @return  ZStatus_t
// 1345  */
// 1346 ZStatus_t zclGeneral_SendLocationSetDevCfg( uint8 srcEP, afAddrType_t *dstAddr,
// 1347                                             zclLocationDevCfg_t *devCfg,
// 1348                                             uint8 disableDefaultRsp, uint8 seqNum )
// 1349 {
// 1350    uint8 buf[9];  // 4 fields (2 octects each) + 1 field with 1 octect
// 1351 
// 1352    buf[0] = LO_UINT16( devCfg->power );
// 1353    buf[1] = HI_UINT16( devCfg->power );
// 1354    buf[2] = LO_UINT16( devCfg->pathLossExponent );
// 1355    buf[3] = HI_UINT16( devCfg->pathLossExponent );
// 1356    buf[4] = LO_UINT16( devCfg->calcPeriod );
// 1357    buf[5] = HI_UINT16( devCfg->calcPeriod );
// 1358    buf[6] = devCfg->numMeasurements;
// 1359    buf[7] = LO_UINT16( devCfg->reportPeriod );
// 1360    buf[8] = HI_UINT16( devCfg->reportPeriod );
// 1361 
// 1362    return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
// 1363                            COMMAND_LOCATION_SET_DEV_CFG, TRUE,
// 1364                            ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 9, buf );
// 1365 }
// 1366 
// 1367 /*********************************************************************
// 1368  * @fn      zclGeneral_SendLocationGetDevCfg
// 1369  *
// 1370  * @brief   Call to send out a Get Device Configuration Command
// 1371  *
// 1372  * @param   srcEP - Sending application's endpoint
// 1373  * @param   dstAddr - where you want the message to go
// 1374  * @param   targetAddr - device for which location parameters are being requested
// 1375  *
// 1376  * @return  ZStatus_t
// 1377  */
// 1378 ZStatus_t zclGeneral_SendLocationGetDevCfg( uint8 srcEP, afAddrType_t *dstAddr,
// 1379                                             uint8 *targetAddr, uint8 disableDefaultRsp, uint8 seqNum )
// 1380 {
// 1381   uint8 buf[8];
// 1382 
// 1383   zcl_memcpy( buf, targetAddr, 8 );
// 1384 
// 1385   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
// 1386                           COMMAND_LOCATION_GET_DEV_CFG, TRUE,
// 1387                           ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 8, buf );
// 1388 }
// 1389 
// 1390 /*********************************************************************
// 1391  * @fn      zclGeneral_SendLocationGetData
// 1392  *
// 1393  * @brief   Call to send out a Get Location Data Command
// 1394  *
// 1395  * @param   srcEP - Sending application's endpoint
// 1396  * @param   dstAddr - where you want the message to go
// 1397  * @param   locaData - location information and channel parameters that are requested.
// 1398  *
// 1399  * @return  ZStatus_t
// 1400  */
// 1401 ZStatus_t zclGeneral_SendLocationGetData( uint8 srcEP, afAddrType_t *dstAddr,
// 1402                                           zclLocationGetData_t *locData,
// 1403                                           uint8 disableDefaultRsp, uint8 seqNum )
// 1404 {
// 1405   uint8 buf[10]; // bitmap (1) + number responses (1) + IEEE Address (8)
// 1406   uint8 *pBuf = buf;
// 1407   uint8 len = 2; // bitmap + number responses
// 1408 
// 1409   *pBuf  = locData->absoluteOnly;
// 1410   *pBuf |= locData->recalculate << 1;
// 1411   *pBuf |= locData->brdcastIndicator << 2;
// 1412   *pBuf |= locData->brdcastResponse << 3;
// 1413   *pBuf |= locData->compactResponse << 4;
// 1414   pBuf++;  // move past the bitmap field
// 1415 
// 1416   *pBuf++ = locData->numResponses;
// 1417 
// 1418   if ( locData->brdcastIndicator == 0 )
// 1419   {
// 1420     zcl_memcpy( pBuf, locData->targetAddr, 8 );
// 1421     len += 8; // ieee addr
// 1422   }
// 1423 
// 1424   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
// 1425                           COMMAND_LOCATION_GET_DATA, TRUE,
// 1426                           ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, len, buf );
// 1427 }
// 1428 
// 1429 /*********************************************************************
// 1430  * @fn      zclGeneral_SendLocationDevCfgResponse
// 1431  *
// 1432  * @brief   Call to send out a Device Configuration Response Command
// 1433  *
// 1434  * @param   srcEP - Sending application's endpoint
// 1435  * @param   dstAddr - where you want the message to go
// 1436  * @param   devCfg - device's location parameters that are requested
// 1437  *
// 1438  * @return  ZStatus_t
// 1439  */
// 1440 ZStatus_t zclGeneral_SendLocationDevCfgResponse( uint8 srcEP, afAddrType_t *dstAddr,
// 1441                                                  zclLocationDevCfgRsp_t *devCfg,
// 1442                                                  uint8 disableDefaultRsp, uint8 seqNum )
// 1443 {
// 1444   uint8 buf[10]; // 4 fields (2 octects each) + 2 fields (1 octect each)
// 1445   uint8 len = 1; // Status
// 1446 
// 1447   buf[0] = devCfg->status;
// 1448   if ( devCfg->status == ZCL_STATUS_SUCCESS )
// 1449   {
// 1450     buf[1] = LO_UINT16( devCfg->data.power );
// 1451     buf[2] = HI_UINT16( devCfg->data.power );
// 1452     buf[3] = LO_UINT16( devCfg->data.pathLossExponent );
// 1453     buf[4] = HI_UINT16( devCfg->data.pathLossExponent );
// 1454     buf[5] = LO_UINT16( devCfg->data.calcPeriod );
// 1455     buf[6] = HI_UINT16( devCfg->data.calcPeriod );
// 1456     buf[7] = devCfg->data.numMeasurements;
// 1457     buf[8] = LO_UINT16( devCfg->data.reportPeriod );
// 1458     buf[9] = HI_UINT16( devCfg->data.reportPeriod );
// 1459     len += 9;
// 1460   }
// 1461 
// 1462   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
// 1463                           COMMAND_LOCATION_DEV_CFG_RSP, TRUE,
// 1464                           ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, len, buf );
// 1465 }
// 1466 
// 1467 /*********************************************************************
// 1468  * @fn      zclGeneral_SendLocationData
// 1469  *
// 1470  * @brief   Call to send out location data
// 1471  *
// 1472  * @param   srcEP - Sending application's endpoint
// 1473  * @param   dstAddr - where you want the message to go
// 1474  * @param   status - indicates whether response to request was successful or not
// 1475  * @param   locData - location information and channel parameters being sent
// 1476  *
// 1477  * @return  ZStatus_t
// 1478  */
// 1479 ZStatus_t zclGeneral_SendLocationData( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
// 1480                                        uint8 status, zclLocationData_t *locData,
// 1481                                        uint8 disableDefaultRsp, uint8 seqNum )
// 1482 {
// 1483   uint8 buf[16];
// 1484   uint8 *pBuf = buf;
// 1485   uint8 len = 0;
// 1486 
// 1487   if ( cmd == COMMAND_LOCATION_DATA_RSP )
// 1488   {
// 1489     // Only response command includes a status field
// 1490     *pBuf++ = status;
// 1491     len++;
// 1492   }
// 1493 
// 1494   if ( cmd != COMMAND_LOCATION_DATA_RSP || status == ZCL_STATUS_SUCCESS )
// 1495   {
// 1496     // Notification or Response with successful status
// 1497     *pBuf++ = locData->type;
// 1498     *pBuf++ = LO_UINT16( locData->absLoc.coordinate1 );
// 1499     *pBuf++ = HI_UINT16( locData->absLoc.coordinate1 );
// 1500     *pBuf++ = LO_UINT16( locData->absLoc.coordinate2 );
// 1501     *pBuf++ = HI_UINT16( locData->absLoc.coordinate2 );
// 1502     len += 5;
// 1503 
// 1504     if ( locationType2D(locData->type) == 0 )
// 1505     {
// 1506       // 2D location doesn't have coordinate 3
// 1507       *pBuf++ = LO_UINT16( locData->absLoc.coordinate3 );
// 1508       *pBuf++ = HI_UINT16( locData->absLoc.coordinate3 );
// 1509       len += 2;
// 1510     }
// 1511 
// 1512     if ( cmd != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
// 1513     {
// 1514       // Compact notification doesn't include these fields
// 1515       *pBuf++ = LO_UINT16( locData->absLoc.power );
// 1516       *pBuf++ = HI_UINT16( locData->absLoc.power );
// 1517       *pBuf++ = LO_UINT16( locData->absLoc.pathLossExponent );
// 1518       *pBuf++ = HI_UINT16( locData->absLoc.pathLossExponent );
// 1519       len += 4;
// 1520     }
// 1521 
// 1522     if ( locationTypeAbsolute(locData->type) == 0 )
// 1523     {
// 1524       // Absolute location doesn't include these fields
// 1525       if ( cmd != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
// 1526       {
// 1527         // Compact notification doesn't include this field
// 1528         *pBuf++ = locData->calcLoc.locationMethod;
// 1529         len++;
// 1530       }
// 1531 
// 1532       *pBuf++ = locData->calcLoc.qualityMeasure;
// 1533       *pBuf++ = LO_UINT16( locData->calcLoc.locationAge );
// 1534       *pBuf++ = HI_UINT16( locData->calcLoc.locationAge );
// 1535       len += 3;
// 1536     }
// 1537   }
// 1538 
// 1539   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
// 1540                           cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
// 1541                           disableDefaultRsp, 0, seqNum, len, buf );
// 1542 }
// 1543 #endif // ZCL_LOCATION
// 1544 
// 1545 /*********************************************************************
// 1546  * @fn      zclGeneral_FindCallbacks
// 1547  *
// 1548  * @brief   Find the callbacks for an endpoint
// 1549  *
// 1550  * @param   endpoint - endpoint to find the application callbacks for
// 1551  *
// 1552  * @return  pointer to the callbacks
// 1553  */
// 1554 static zclGeneral_AppCallbacks_t *zclGeneral_FindCallbacks( uint8 endpoint )
// 1555 {
// 1556   zclGenCBRec_t *pCBs;
// 1557 
// 1558   pCBs = zclGenCBs;
// 1559   while ( pCBs )
// 1560   {
// 1561     if ( pCBs->endpoint == endpoint )
// 1562       return ( pCBs->CBs );
// 1563     pCBs = pCBs->next;
// 1564   }
// 1565   return ( (zclGeneral_AppCallbacks_t *)NULL );
// 1566 }
// 1567 
// 1568 /*********************************************************************
// 1569  * @fn      zclGeneral_HdlIncoming
// 1570  *
// 1571  * @brief   Callback from ZCL to process incoming Commands specific
// 1572  *          to this cluster library or Profile commands for attributes
// 1573  *          that aren't in the attribute list
// 1574  *
// 1575  *
// 1576  * @param   pInMsg - pointer to the incoming message
// 1577  *
// 1578  * @return  ZStatus_t
// 1579  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1580 static ZStatus_t zclGeneral_HdlIncoming( zclIncoming_t *pInMsg )
zclGeneral_HdlIncoming:
          CFI Block cfiBlock91 Using cfiCommon0
          CFI Function zclGeneral_HdlIncoming
        CODE
// 1581 {
        FUNCALL zclGeneral_HdlIncoming, zclGeneral_HdlInSpecificCommands
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1582   ZStatus_t stat = ZSuccess;
// 1583 
// 1584 #if defined ( INTER_PAN )
// 1585   if ( StubAPS_InterPan( pInMsg->msg->srcAddr.panId, pInMsg->msg->srcAddr.endPoint ) )
// 1586     return ( stat ); // Cluster not supported thru Inter-PAN
// 1587 #endif
// 1588   if ( zcl_ClusterCmd( pInMsg->hdr.fc.type ) )
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,#0x7
        XRL       A,#0x1
        JNZ       ??zclGeneral_HdlIncoming_0
// 1589   {
// 1590     // Is this a manufacturer specific command?
// 1591     if ( pInMsg->hdr.fc.manuSpecific == 0 )
// 1592     {
// 1593       stat = zclGeneral_HdlInSpecificCommands( pInMsg );
        ; Setup parameters for call to function zclGeneral_HdlInSpecificCommands
        LCALL     `??zclGeneral_HdlInSpecificCommands::?relay`; Banked call to: zclGeneral_HdlInSpecificCommands
        MOV       A,R1
        MOV       R1,A
        SJMP      ??zclGeneral_HdlIncoming_1
// 1594     }
// 1595     else
// 1596     {
// 1597       // We don't support any manufacturer specific command.
// 1598       stat = ZFailure;
// 1599     }
// 1600   }
// 1601   else
// 1602   {
// 1603     // Handle all the normal (Read, Write...) commands -- should never get here
// 1604     stat = ZFailure;
??zclGeneral_HdlIncoming_0:
        MOV       R1,#0x1
// 1605   }
// 1606   return ( stat );
??zclGeneral_HdlIncoming_1:
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
// 1607 }
          CFI EndBlock cfiBlock91
// 1608 
// 1609 /*********************************************************************
// 1610  * @fn      zclGeneral_HdlInSpecificCommands
// 1611  *
// 1612  * @brief   Callback from ZCL to process incoming Commands specific
// 1613  *          to this cluster library
// 1614 
// 1615  * @param   pInMsg - pointer to the incoming message
// 1616  *
// 1617  * @return  ZStatus_t
// 1618  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1619 static ZStatus_t zclGeneral_HdlInSpecificCommands( zclIncoming_t *pInMsg )
zclGeneral_HdlInSpecificCommands:
          CFI Block cfiBlock92 Using cfiCommon0
          CFI Function zclGeneral_HdlInSpecificCommands
        CODE
// 1620 {
        FUNCALL zclGeneral_HdlInSpecificCommands, zclGeneral_ProcessInIdentity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_HdlInSpecificCommands, zclGeneral_ProcessInGroupsServer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_HdlInSpecificCommands, zclGeneral_ProcessInGroupsClient
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1621   ZStatus_t stat;
// 1622   zclGeneral_AppCallbacks_t *pCBs;
// 1623 
// 1624   // make sure endpoint exists
// 1625   pCBs = zclGeneral_FindCallbacks( pInMsg->msg->endPoint );
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_38:
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
        MOV       A,R4
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_93:
        MOV       R0,A
        MOV       DPTR,#zclGenCBs
??zclGeneral_HdlInSpecificCommands_0:
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_36:
        ORL       A,R5
        JZ        ??zclGeneral_HdlInSpecificCommands_1
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R0
        MOV       DPL,R4
        MOV       DPH,R5
        JNZ       ??zclGeneral_HdlInSpecificCommands_0
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine17 & 0xFFFF
// 1626   if ( pCBs == NULL )
??CrossCallReturnLabel_37:
        ORL       A,R5
        JZ        ??zclGeneral_HdlInSpecificCommands_1
// 1627     return ( ZFailure );
// 1628 
// 1629   switch ( pInMsg->msg->clusterId )
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?US_SWITCH_DENSE
`?<Jumptable for zclGeneral_HdlInSpecificComman_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA8
        DATA
        DATA8
        DB        6
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclGeneral_HdlInSpecificCommands_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclGeneral_HdlInSpecificCommands_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclGeneral_HdlInSpecificCommands_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclGeneral_HdlInSpecificCommands_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclGeneral_HdlInSpecificCommands_3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclGeneral_HdlInSpecificCommands_4
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclGeneral_HdlInSpecificCommands_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclGeneral_HdlInSpecificCommands_5
        CODE
// 1630   {
// 1631 #ifdef ZCL_BASIC
// 1632     case ZCL_CLUSTER_ID_GEN_BASIC:
// 1633       stat = zclGeneral_ProcessInBasic( pInMsg, pCBs );
??zclGeneral_HdlInSpecificCommands_2:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,#0x8
        JNZ       ??zclGeneral_HdlInSpecificCommands_6
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JZ        ??zclGeneral_HdlInSpecificCommands_7
??zclGeneral_HdlInSpecificCommands_1:
        MOV       R1,#0x1
        SJMP      ??zclGeneral_HdlInSpecificCommands_5
??zclGeneral_HdlInSpecificCommands_7:
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ??Subroutine50_0 & 0xFFFF
??CrossCallReturnLabel_100:
        MOV       DPL,R0
        MOV       DPH,A
        MOV       A,DPL
        ORL       A,DPH
        JZ        ??zclGeneral_HdlInSpecificCommands_6
        ; Setup parameters for indirect call
        LCALL     ?CALL_IND
??zclGeneral_HdlInSpecificCommands_6:
        MOV       R1,#0x0
        SJMP      ??zclGeneral_HdlInSpecificCommands_5
// 1634       break;
// 1635 #endif // ZCL_BASIC
// 1636 
// 1637 #ifdef ZCL_IDENTIFY
// 1638     case ZCL_CLUSTER_ID_GEN_IDENTIFY:
// 1639       stat = zclGeneral_ProcessInIdentity( pInMsg, pCBs );
??zclGeneral_HdlInSpecificCommands_3:
        ; Setup parameters for call to function zclGeneral_ProcessInIdentity
        LCALL     `??zclGeneral_ProcessInIdentity::?relay`; Banked call to: zclGeneral_ProcessInIdentity
        SJMP      ??zclGeneral_HdlInSpecificCommands_8
// 1640       break;
// 1641 #endif // ZCL_IDENTIFY
// 1642 
// 1643 #ifdef ZCL_GROUPS
// 1644     case ZCL_CLUSTER_ID_GEN_GROUPS:
// 1645       if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
??zclGeneral_HdlInSpecificCommands_4:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,#0x8
        JNZ       ??zclGeneral_HdlInSpecificCommands_9
// 1646         stat = zclGeneral_ProcessInGroupsServer( pInMsg );
        ; Setup parameters for call to function zclGeneral_ProcessInGroupsServer
        LCALL     `??zclGeneral_ProcessInGroupsServer::?relay`; Banked call to: zclGeneral_ProcessInGroupsServer
        SJMP      ??zclGeneral_HdlInSpecificCommands_8
// 1647       else
// 1648         stat = zclGeneral_ProcessInGroupsClient( pInMsg, pCBs );
??zclGeneral_HdlInSpecificCommands_9:
        ; Setup parameters for call to function zclGeneral_ProcessInGroupsClient
        LCALL     `??zclGeneral_ProcessInGroupsClient::?relay`; Banked call to: zclGeneral_ProcessInGroupsClient
??zclGeneral_HdlInSpecificCommands_8:
        MOV       A,R1
        MOV       R1,A
// 1649       break;
// 1650 #endif // ZCL_GROUPS
// 1651 
// 1652 #ifdef ZCL_SCENES
// 1653     case ZCL_CLUSTER_ID_GEN_SCENES:
// 1654       if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
// 1655         stat = zclGeneral_ProcessInScenesServer( pInMsg, pCBs );
// 1656       else
// 1657         stat = zclGeneral_ProcessInScenesClient( pInMsg, pCBs );
// 1658       break;
// 1659 #endif // ZCL_SCENES
// 1660 
// 1661 #ifdef ZCL_ON_OFF
// 1662     case ZCL_CLUSTER_ID_GEN_ON_OFF:
// 1663       //stat = zclGeneral_ProcessInOnOff( pInMsg, pCBs );
// 1664       //stat = zclGeneral_ProcessInOnOffTest( pInMsg );
// 1665       break;
// 1666 #endif // ZCL_ON_OFF
// 1667 
// 1668 #ifdef ZCL_LEVEL_CTRL
// 1669     case ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL:
// 1670       stat = zclGeneral_ProcessInLevelControl( pInMsg, pCBs );
// 1671       break;
// 1672 #endif // ZCL_LEVEL_CTRL
// 1673 
// 1674 #ifdef ZCL_ALARMS
// 1675     case ZCL_CLUSTER_ID_GEN_ALARMS:
// 1676       if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
// 1677         stat = zclGeneral_ProcessInAlarmsServer( pInMsg, pCBs );
// 1678       else
// 1679         stat = zclGeneral_ProcessInAlarmsClient( pInMsg, pCBs );
// 1680       break;
// 1681 #endif // ZCL_ALARMS
// 1682 
// 1683 #ifdef ZCL_LOCATION
// 1684     case ZCL_CLUSTER_ID_GEN_LOCATION:
// 1685       if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
// 1686         stat = zclGeneral_ProcessInLocationServer( pInMsg, pCBs );
// 1687       else
// 1688         stat = zclGeneral_ProcessInLocationClient( pInMsg, pCBs );
// 1689       break;
// 1690 #endif // ZCL_LOCATION
// 1691 
// 1692     case ZCL_CLUSTER_ID_GEN_POWER_CFG:
// 1693     case ZCL_CLUSTER_ID_GEN_DEVICE_TEMP_CONFIG:
// 1694     case ZCL_CLUSTER_ID_GEN_ON_OFF_SWITCH_CONFIG:
// 1695     case ZCL_CLUSTER_ID_GEN_TIME:
// 1696     default:
// 1697       stat = ZFailure;
// 1698       break;
// 1699   }
// 1700 
// 1701   return ( stat );
??zclGeneral_HdlInSpecificCommands_5:
        LJMP      ??Subroutine37_0 & 0xFFFF
// 1702 }
          CFI EndBlock cfiBlock92

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond93 Using cfiCommon0
          CFI Function zclGeneral_HdlInSpecificCommands
          CFI Conditional ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function zclGeneral_HdlInSpecificCommands
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-2
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function zclGeneral_HdlInSpecificCommands
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-2
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker96 Using cfiCommon1
          CFI (cfiPicker96) NoFunction
          CFI (cfiPicker96) Picker
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_58:
        MOV       R5,A
        MOV       A,R4
        RET
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiPicker96
// 1703 
// 1704 #ifdef ZCL_BASIC
// 1705 /*********************************************************************
// 1706  * @fn      zclGeneral_ProcessInBasic
// 1707  *
// 1708  * @brief   Process in the received Basic Command.
// 1709  *
// 1710  * @param   pInMsg - pointer to the incoming message
// 1711  *
// 1712  * @return  ZStatus_t
// 1713  */
// 1714 static ZStatus_t zclGeneral_ProcessInBasic( zclIncoming_t *pInMsg,
// 1715                                             zclGeneral_AppCallbacks_t *pCBs )
// 1716 {
// 1717   if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
// 1718   {
// 1719     if ( pInMsg->hdr.commandID > COMMAND_BASIC_RESET_FACT_DEFAULT )
// 1720       return ( ZFailure );   // Error ignore the command
// 1721 
// 1722     if ( pCBs->pfnBasicReset )
// 1723       pCBs->pfnBasicReset();
// 1724   }
// 1725   // no Client command
// 1726 
// 1727   return ( ZSuccess );
// 1728 }
// 1729 #endif // ZCL_BASIC
// 1730 
// 1731 #ifdef ZCL_IDENTIFY
// 1732 /*********************************************************************
// 1733  * @fn      zclGeneral_ProcessInIdentity
// 1734  *
// 1735  * @brief   Process in the received Identity Command.
// 1736  *
// 1737  * @param   pInMsg - pointer to the incoming message
// 1738  *
// 1739  * @return  ZStatus_t
// 1740  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1741 static ZStatus_t zclGeneral_ProcessInIdentity( zclIncoming_t *pInMsg,
zclGeneral_ProcessInIdentity:
          CFI Block cfiBlock97 Using cfiCommon0
          CFI Function zclGeneral_ProcessInIdentity
        CODE
// 1742                                                zclGeneral_AppCallbacks_t *pCBs )
// 1743 {
        FUNCALL zclGeneral_ProcessInIdentity, bdb_ZclIdentifyCmdInd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInIdentity, zcl_ReadAttrData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInIdentity, zclGeneral_SendIdentifyQueryResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInIdentity, bdb_ZclIdentifyQueryCmdInd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 6
        MOV       A,#-0x6
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       ?V0,R2
        MOV       ?V1,R3
// 1744   if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,#0x8
        JZ        $+5
        LJMP      ??zclGeneral_ProcessInIdentity_0 & 0xFFFF
// 1745   {
// 1746     if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY )
        MOV       A,R0
        JNZ       ??zclGeneral_ProcessInIdentity_1
// 1747     {
// 1748       uint16 identifyTime;
// 1749       
// 1750       identifyTime = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
// 1751       
// 1752       bdb_ZclIdentifyCmdInd( identifyTime, pInMsg->msg->endPoint);
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine13 & 0xFFFF
// 1753     }
??CrossCallReturnLabel_22:
        MOV       R2,A
        MOV       A,R1
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_82:
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_54:
        MOV       R3,A
        MOV       A,R4
        MOV       R2,A
        LCALL     `??bdb_ZclIdentifyCmdInd::?relay`; Banked call to: bdb_ZclIdentifyCmdInd
        LJMP      ??zclGeneral_ProcessInIdentity_2 & 0xFFFF
// 1754     else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_QUERY )
??zclGeneral_ProcessInIdentity_1:
        MOV       A,#0x1
        XRL       A,R0
        JZ        $+5
        LJMP      ??zclGeneral_ProcessInIdentity_3 & 0xFFFF
// 1755     {
// 1756       uint16 identifyTime = 0;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1757 
// 1758       // Retrieve Identify Time
// 1759       zcl_ReadAttrData( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 1760                         ATTRID_IDENTIFY_TIME, (uint8 *)&identifyTime, NULL );
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
        ; Setup parameters for call to function zcl_ReadAttrData
        CLR       A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_29:
        LCALL     ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_88:
        LCALL     `??zcl_ReadAttrData::?relay`; Banked call to: zcl_ReadAttrData
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 1761 
// 1762       // Is device identifying itself?
// 1763       if ( identifyTime > 0 )
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_95:
        JZ        ??zclGeneral_ProcessInIdentity_2
// 1764       {
// 1765         zclGeneral_SendIdentifyQueryResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 1766                                               identifyTime, true, pInMsg->hdr.transSeqNum );
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        ; Setup parameters for call to function zclGeneral_SendIdentifyQueryResponse
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_35:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL     `??zclGeneral_SendIdentifyQueryResponse::?relay`; Banked call to: zclGeneral_SendIdentifyQueryResponse
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 1767         return ( ZCL_STATUS_CMD_HAS_RSP );
        MOV       R1,#-0x1
        SJMP      ??zclGeneral_ProcessInIdentity_4
// 1768       }
// 1769     }
// 1770 
// 1771 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 1772     else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_TRIGGER_EFFECT )
// 1773     {
// 1774       if ( pCBs->pfnIdentifyTriggerEffect )
// 1775       {
// 1776         zclIdentifyTriggerEffect_t cmd;
// 1777 
// 1778         cmd.srcAddr = &(pInMsg->msg->srcAddr);
// 1779         cmd.effectId = pInMsg->pData[0];
// 1780         cmd.effectVariant = pInMsg->pData[1];
// 1781 
// 1782         pCBs->pfnIdentifyTriggerEffect( &cmd );
// 1783       }
// 1784     }
// 1785 #endif //ZCL_LIGHT_LINK_ENHANCE
// 1786     else
// 1787     {
// 1788       return ( ZFailure );   // Error ignore the command
// 1789     }
// 1790   }
// 1791   else // Client Command
// 1792   {
// 1793     if ( pInMsg->hdr.commandID > COMMAND_IDENTIFY_QUERY_RSP )
??zclGeneral_ProcessInIdentity_0:
        MOV       A,R0
        JZ        ??zclGeneral_ProcessInIdentity_5
// 1794       return ( ZFailure );   // Error ignore the command
??zclGeneral_ProcessInIdentity_3:
        MOV       R1,#0x1
        SJMP      ??zclGeneral_ProcessInIdentity_4
// 1795 
// 1796     zclIdentifyQueryRsp_t rsp;
// 1797     
// 1798     rsp.srcAddr = &(pInMsg->msg->srcAddr);
??zclGeneral_ProcessInIdentity_5:
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_51:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine24 & 0xFFFF
// 1799     rsp.timeout = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
??CrossCallReturnLabel_109:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,A
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_55:
        MOV       R1,A
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R4
        LCALL     ??Subroutine51_0 & 0xFFFF
// 1800     
// 1801     bdb_ZclIdentifyQueryCmdInd( &rsp );
??CrossCallReturnLabel_105:
        ; Setup parameters for call to function bdb_ZclIdentifyQueryCmdInd
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??bdb_ZclIdentifyQueryCmdInd::?relay`; Banked call to: bdb_ZclIdentifyQueryCmdInd
// 1802   }
// 1803   return ( ZSuccess );
??zclGeneral_ProcessInIdentity_2:
        MOV       R1,#0x0
??zclGeneral_ProcessInIdentity_4:
        MOV       A,#0x6
        LJMP      ??Subroutine43_0 & 0xFFFF
// 1804 }
          CFI EndBlock cfiBlock97

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond98 Using cfiCommon0
          CFI Function zclGeneral_RegisterCmdCallbacks
          CFI Conditional ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function zclGeneral_HdlInSpecificCommands
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_38
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+-4
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function zclGeneral_HdlInSpecificCommands
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_36
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-4
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function zclGeneral_HdlInSpecificCommands
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_37
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-4
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+-2
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_8
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-4
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_9
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond105) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-4
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond106) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond106) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond106) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-2
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 50)
          CFI Block cfiPicker107 Using cfiCommon1
          CFI (cfiPicker107) NoFunction
          CFI (cfiPicker107) Picker
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiPicker107

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond108 Using cfiCommon0
          CFI Function zclGeneral_RegisterCmdCallbacks
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function zclGeneral_RegisterCmdCallbacks
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-2
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function zclGeneral_SendGroupGetMembershipRequest
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond110) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond110) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond110) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond110) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond110) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond110) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+-2
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-2
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond112) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond112) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond112) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-2
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiPicker113 Using cfiCommon1
          CFI (cfiPicker113) NoFunction
          CFI (cfiPicker113) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        RET
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiPicker113

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond114 Using cfiCommon0
          CFI Function zclGeneral_ProcessInIdentity
          CFI Conditional ??CrossCallReturnLabel_82
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond115) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond115) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond115) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond115) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-2
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiPicker116 Using cfiCommon1
          CFI (cfiPicker116) NoFunction
          CFI (cfiPicker116) Picker
        MOV       R3,A
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiPicker116
        ; Setup parameters for call to function bdb_ZclIdentifyCmdInd
        REQUIRE ??Subroutine47_0
        ; // Fall through to label ??Subroutine47_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine47_0:
          CFI Block cfiCond117 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsServer
          CFI Conditional ??CrossCallReturnLabel_80
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-2
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-2
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond120) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond120) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond120) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond120) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond120) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond120) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond120) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond120) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond120) CFA_SP SP+-2
          CFI (cfiCond120) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiPicker121 Using cfiCommon1
          CFI (cfiPicker121) NoFunction
          CFI (cfiPicker121) Picker
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_87:
        RET
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiPicker121
// 1805 #endif // ZCL_IDENTIFY
// 1806 
// 1807 #ifdef ZCL_GROUPS
// 1808 
// 1809 /*********************************************************************
// 1810  * @fn      zclGeneral_AddGroup
// 1811  *
// 1812  * @brief   Add a Group.
// 1813  *
// 1814  * @param   endPoint - application endpoint
// 1815  * @param   group - group to be added
// 1816  * @param   pData - pointer to the group info
// 1817  *
// 1818  * @return  ZStatus_t
// 1819  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1820 static ZStatus_t zclGeneral_AddGroup( uint8 endPoint, aps_Group_t *group, uint8 *pData )
zclGeneral_AddGroup:
          CFI Block cfiBlock122 Using cfiCommon0
          CFI Function zclGeneral_AddGroup
        CODE
// 1821 {
        FUNCALL zclGeneral_AddGroup, zcl_ReadAttrData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_AddGroup, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_AddGroup, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       ?V1,R1
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V2,R4
        MOV       ?V3,R5
// 1822   uint8 nameLen;
// 1823   uint8 nameSupport = FALSE;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
// 1824 
// 1825   pData += 2;   // Move past group ID
// 1826   nameLen = *pData++;
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V0,A
// 1827 
// 1828   // Retrieve Name Support attribute
// 1829   zcl_ReadAttrData( endPoint, ZCL_CLUSTER_ID_GEN_GROUPS,
// 1830                     ATTRID_GROUP_NAME_SUPPORT, &nameSupport, NULL );
        ; Setup parameters for call to function zcl_ReadAttrData
        CLR       A
        MOV       ?V4,A
        MOV       ?V5,A
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       R1,?V1
        LCALL     `??zcl_ReadAttrData::?relay`; Banked call to: zcl_ReadAttrData
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 1831 
// 1832   if ( nameSupport )
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        JZ        ??zclGeneral_AddGroup_0
// 1833   {
// 1834     if ( nameLen > (APS_GROUP_NAME_LEN-1) )
        MOV       A,?V0
        CLR       C
        SUBB      A,#0x10
        JC        ??zclGeneral_AddGroup_1
// 1835        nameLen = (APS_GROUP_NAME_LEN-1);
        MOV       ?V0,#0xf
// 1836     group->name[0] = nameLen;
??zclGeneral_AddGroup_1:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOV       A,?V0
        LCALL     ?Subroutine33 & 0xFFFF
// 1837     zcl_memcpy( &(group->name[1]), pData, nameLen );
// 1838   }
??CrossCallReturnLabel_60:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R4,?V0
        MOV       R5,#0x0
        MOV       A,R6
        ADD       A,#0x3
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        LCALL     ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_68:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 1839 
// 1840   return ( aps_AddGroup( endPoint, group ) );
??zclGeneral_AddGroup_0:
        ; Setup parameters for call to function aps_AddGroup
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       R1,?V1
        LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       R7,#0x7
        LJMP      ?BANKED_LEAVE_XDATA
// 1841 }
          CFI EndBlock cfiBlock122

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond123 Using cfiCommon0
          CFI Function zclGeneral_SendAddGroupRequest
          CFI Conditional ??CrossCallReturnLabel_59
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function zclGeneral_AddGroup
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond124) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-2
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_4
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond125) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond125) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond125) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond125) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond125) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-4
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 50)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_5
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond126) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond126) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-4
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 50)
          CFI Block cfiPicker127 Using cfiCommon1
          CFI (cfiPicker127) NoFunction
          CFI (cfiPicker127) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,?V2
        MOV       DPH,?V3
        RET
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiPicker127
// 1842 
// 1843 /*********************************************************************
// 1844  * @fn      zclGeneral_ProcessInGroupsServer
// 1845  *
// 1846  * @brief   Process in the received Groups Command.
// 1847  *
// 1848  * @param   pInMsg - pointer to the incoming message
// 1849  *
// 1850  * @return  ZStatus_t
// 1851  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1852 static ZStatus_t zclGeneral_ProcessInGroupsServer( zclIncoming_t *pInMsg )
zclGeneral_ProcessInGroupsServer:
          CFI Block cfiBlock128 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsServer
        CODE
// 1853 {
        FUNCALL zclGeneral_ProcessInGroupsServer, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 74, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, zclGeneral_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 74, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, zclGeneral_SendGroupResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, aps_FindGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 74, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, zclGeneral_SendGroupViewResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 77, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 77, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 74, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, aps_FindAllGroupsForEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 74, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, aps_FindGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 74, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, aps_CountAllGroups
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 74, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, zclGeneral_SendGroupGetMembershipRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 74, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, zcl_SendDefaultRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, aps_RemoveGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 74, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, zclGeneral_SendGroupResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, aps_FindAllGroupsForEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 74, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, aps_RemoveAllGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 74, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, zcl_ReadAttrData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsServer, zclGeneral_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 74, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV       A,#-0x14
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 54
        MOV       A,#-0x36
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 74)
        MOV       ?V0,R2
        MOV       ?V1,R3
// 1854   aps_Group_t group;
// 1855   aps_Group_t *pGroup;
// 1856   uint8 *pData;
// 1857   uint8 status;
// 1858   uint8 grpCnt;
// 1859   uint8 grpRspCnt = 0;
        MOV       R7,#0x0
// 1860   uint16 *grpList;
// 1861   uint16 identifyTime = 0;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1862   uint8 i;
// 1863   ZStatus_t stat = ZSuccess;
        MOV       R6,#0x0
// 1864 
// 1865   zcl_memset( (uint8*)&group, 0, sizeof( aps_Group_t ) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x12
        MOV       R5,A
        MOV       R1,A
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 1866 
// 1867   pData = pInMsg->pData;
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine14 & 0xFFFF
// 1868   group.ID = BUILD_UINT16( pData[0], pData[1] );
??CrossCallReturnLabel_25:
        INC       DPTR
        MOV       R0,DPL
        MOV       R1,DPH
        MOV       DPL,?V2
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 1869   switch ( pInMsg->hdr.commandID )
        MOV       A,?V0
        ADD       A,#0x6
        MOV       ?V8,A
        CLR       A
        ADDC      A,?V1
        MOV       ?V9,A
        MOV       A,?V0
        ADD       A,#0x7
        MOV       ?V6,A
        CLR       A
        ADDC      A,?V1
        MOV       ?V7,A
        MOV       DPL,?V6
        MOV       DPH,A
        MOVX      A,@DPTR
        JZ        ??zclGeneral_ProcessInGroupsServer_0
        DEC       A
        JZ        ??zclGeneral_ProcessInGroupsServer_1
        DEC       A
        JNZ       $+5
        LJMP      ??zclGeneral_ProcessInGroupsServer_2 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??zclGeneral_ProcessInGroupsServer_3 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??zclGeneral_ProcessInGroupsServer_4 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??zclGeneral_ProcessInGroupsServer_5 & 0xFFFF
        LJMP      ??zclGeneral_ProcessInGroupsServer_6 & 0xFFFF
// 1870   {
// 1871     case COMMAND_GROUP_ADD:
// 1872       status = zclGeneral_AddGroup( pInMsg->msg->endPoint, &group, pData );
??zclGeneral_ProcessInGroupsServer_0:
        ; Setup parameters for call to function zclGeneral_AddGroup
        MOV       R4,?V2
        MOV       R5,?V3
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP101_8
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV       A,R1
        MOV       R4,A
// 1873       if ( status != ZSuccess )
        JZ        ??zclGeneral_ProcessInGroupsServer_7
// 1874       {
// 1875         if ( status == ZApsDuplicateEntry )
        MOV       A,#-0x48
        XRL       A,R4
        JNZ       ??zclGeneral_ProcessInGroupsServer_8
// 1876         {
// 1877           status = ZCL_STATUS_DUPLICATE_EXISTS;
        MOV       R4,#-0x76
        SJMP      ??zclGeneral_ProcessInGroupsServer_7
// 1878         }
// 1879         else
// 1880         {
// 1881           status = ZCL_STATUS_INSUFFICIENT_SPACE;
??zclGeneral_ProcessInGroupsServer_8:
        MOV       R4,#-0x77
// 1882         }
// 1883       }
// 1884 #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
// 1885       if ( UNICAST_MSG( pInMsg->msg ) )
// 1886 #endif
// 1887       {
// 1888         zclGeneral_SendGroupAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 1889                                          status, group.ID, true, pInMsg->hdr.transSeqNum );
??zclGeneral_ProcessInGroupsServer_7:
        LCALL     ?Subroutine4 & 0xFFFF
// 1890         stat = ZCL_STATUS_CMD_HAS_RSP;
// 1891       }
??CrossCallReturnLabel_0:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 75)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 76)
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       A,R4
        MOV       R5,A
        MOV       R4,#0x0
        LJMP      ??zclGeneral_ProcessInGroupsServer_9 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 74)
// 1892       break;
// 1893 
// 1894     case COMMAND_GROUP_VIEW:
// 1895 #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
// 1896       if ( UNICAST_MSG( pInMsg->msg ) )
// 1897 #endif
// 1898       {
// 1899         pGroup = aps_FindGroup( pInMsg->msg->endPoint, group.ID );
??zclGeneral_ProcessInGroupsServer_1:
        ; Setup parameters for call to function aps_FindGroup
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL     `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
        MOV       ?V2,R2
        MOV       ?V3,R3
// 1900         if ( pGroup )
        MOV       A,R2
        ORL       A,R3
        JZ        ??zclGeneral_ProcessInGroupsServer_10
// 1901         {
// 1902           status = ZCL_STATUS_SUCCESS;
        MOV       R4,#0x0
        SJMP      ??zclGeneral_ProcessInGroupsServer_11
// 1903         }
// 1904         else
// 1905         {
// 1906           // Group not found
// 1907           status = ZCL_STATUS_NOT_FOUND;
??zclGeneral_ProcessInGroupsServer_10:
        MOV       R4,#-0x75
// 1908           pGroup = &group;
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
// 1909         }
// 1910         zclGeneral_SendGroupViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 1911                                           status, pGroup, true, pInMsg->hdr.transSeqNum );
??zclGeneral_ProcessInGroupsServer_11:
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 75)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 77)
        MOV       R5,#0x1
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_89:
        LCALL     `??zclGeneral_SendGroupViewResponse::?relay`; Banked call to: zclGeneral_SendGroupViewResponse
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 74)
// 1912         stat = ZCL_STATUS_CMD_HAS_RSP;
        LJMP      ??zclGeneral_ProcessInGroupsServer_12 & 0xFFFF
// 1913       }
// 1914       break;
// 1915 
// 1916     case COMMAND_GROUP_GET_MEMBERSHIP:
// 1917 #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
// 1918       if ( UNICAST_MSG( pInMsg->msg ) )
// 1919 #endif
// 1920       {
// 1921         grpCnt = *pData++;
??zclGeneral_ProcessInGroupsServer_2:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R6,A
        MOV       ?V2,R0
        MOV       ?V3,R1
// 1922 
// 1923         // Allocate space for the group list
// 1924         grpList = zcl_mem_alloc( sizeof( uint16 ) * APS_MAX_GROUPS );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x20
        MOV       R3,#0x0
        LCALL     ?Subroutine25 & 0xFFFF
// 1925         if ( grpList != NULL )
??CrossCallReturnLabel_45:
        JNZ       $+5
        LJMP      ??zclGeneral_ProcessInGroupsServer_13 & 0xFFFF
// 1926         {
// 1927           if ( grpCnt == 0 )
        MOV       A,R6
        JNZ       ??zclGeneral_ProcessInGroupsServer_14
// 1928           {
// 1929             // Find out all the groups of which the endpoint is a member.
// 1930             grpRspCnt = aps_FindAllGroupsForEndpoint( pInMsg->msg->endPoint, grpList );
        ; Setup parameters for call to function aps_FindAllGroupsForEndpoint
        LCALL     ?Subroutine9 & 0xFFFF
// 1931           }
??CrossCallReturnLabel_12:
        MOV       R7,A
        SJMP      ??zclGeneral_ProcessInGroupsServer_15
// 1932           else
// 1933           {
// 1934             // Find out the groups (in the list) of which the endpoint is a member.
// 1935             for ( i = 0; i < grpCnt; i++ )
??zclGeneral_ProcessInGroupsServer_14:
        MOV       ?V10,R6
// 1936             {
// 1937               group.ID = BUILD_UINT16( pData[0], pData[1] );
??zclGeneral_ProcessInGroupsServer_16:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        LCALL     ??Subroutine51_0 & 0xFFFF
// 1938               pData += 2;
??CrossCallReturnLabel_106:
        MOV       A,?V2
        ADD       A,#0x2
        MOV       ?V2,A
        JNC       ??zclGeneral_ProcessInGroupsServer_17
        INC       ?V3
// 1939 
// 1940               if ( aps_FindGroup( pInMsg->msg->endPoint, group.ID ) )
??zclGeneral_ProcessInGroupsServer_17:
        ; Setup parameters for call to function aps_FindGroup
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_83:
        LCALL     `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
        MOV       A,R2
        ORL       A,R3
        JZ        ??zclGeneral_ProcessInGroupsServer_18
// 1941                 grpList[grpRspCnt++] = group.ID;
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine15 & 0xFFFF
// 1942             }
??CrossCallReturnLabel_30:
        MOV       A,R7
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_49:
        MOV       A,?V5
        ADDC      A,R1
        MOV       DPH,A
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        INC       R7
??zclGeneral_ProcessInGroupsServer_18:
        DEC       ?V10
        MOV       A,?V10
        JNZ       ??zclGeneral_ProcessInGroupsServer_16
        MOV       A,R7
        JZ        ??zclGeneral_ProcessInGroupsServer_19
// 1943           }
// 1944 
// 1945           if ( grpCnt == 0 ||  grpRspCnt != 0 )
// 1946           {
// 1947             zclGeneral_SendGroupGetMembershipResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 1948                                                        aps_GroupsRemaingCapacity(), grpRspCnt,
// 1949                                                        grpList, true, pInMsg->hdr.transSeqNum );
??zclGeneral_ProcessInGroupsServer_15:
        ; Setup parameters for call to function aps_CountAllGroups
        LCALL     `??aps_CountAllGroups::?relay`; Banked call to: aps_CountAllGroups
        MOV       A,R1
        MOV       R1,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        ; Setup parameters for call to function zclGeneral_SendGroupGetMembershipRequest
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOVX      A,@DPTR
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 75)
        MOV       ?V2,#0x1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 76)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       A,R7
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       A,#0x10
        CLR       C
        SUBB      A,R1
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 80)
        MOV       ?V2,#0x1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       R5,#0x1
        MOV       R4,#0x2
        MOV       A,?V0
        ADD       A,#0x6
        MOV       R2,A
        CLR       A
        ADDC      A,?V1
        MOV       R3,A
        MOV       A,?V0
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclGeneral_SendGroupGetMembershipRequest::?re`; Banked call to: zclGeneral_SendGroupGetMembershipRequest
        MOV       A,#0x7
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 74)
// 1950           }
// 1951 
// 1952           zcl_mem_free( grpList );
??zclGeneral_ProcessInGroupsServer_19:
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V4
        MOV       R3,?V5
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??zclGeneral_ProcessInGroupsServer_20
// 1953         }
// 1954         else
// 1955         {
// 1956           // Couldn't allocate space for the group list -- send a Default Response command back.
// 1957           zclDefaultRspCmd_t defaultRspCmd;
// 1958 
// 1959           defaultRspCmd.commandID = pInMsg->hdr.commandID;
??zclGeneral_ProcessInGroupsServer_13:
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 1960           defaultRspCmd.statusCode = ZCL_STATUS_INSUFFICIENT_SPACE;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x77
        MOVX      @DPTR,A
// 1961           zcl_SendDefaultRspCmd( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 1962                                  pInMsg->msg->clusterId, &defaultRspCmd,
// 1963                                  ZCL_FRAME_SERVER_CLIENT_DIR, true, 0, pInMsg->hdr.transSeqNum );
        LCALL     ?Subroutine4 & 0xFFFF
// 1964         }
??CrossCallReturnLabel_2:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 75)
        CLR       A
        MOV       ?V0,A
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 77)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
        MOV       A,#0x7
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 74)
// 1965 
// 1966         stat = ZCL_STATUS_CMD_HAS_RSP;
??zclGeneral_ProcessInGroupsServer_20:
        SJMP      ??zclGeneral_ProcessInGroupsServer_12
// 1967       }
// 1968       break;
// 1969 
// 1970     case COMMAND_GROUP_REMOVE:
// 1971 #if defined ( ZCL_SCENES )
// 1972       zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, group.ID );
// 1973 #endif
// 1974       if ( aps_RemoveGroup( pInMsg->msg->endPoint, group.ID ) )
??zclGeneral_ProcessInGroupsServer_3:
        ; Setup parameters for call to function aps_RemoveGroup
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL     `??aps_RemoveGroup::?relay`; Banked call to: aps_RemoveGroup
        MOV       A,R1
        JZ        ??zclGeneral_ProcessInGroupsServer_21
// 1975       {
// 1976         status = ZCL_STATUS_SUCCESS;
        MOV       R4,#0x0
        SJMP      ??zclGeneral_ProcessInGroupsServer_22
// 1977       }
// 1978       else
// 1979       {
// 1980         status = ZCL_STATUS_NOT_FOUND;
??zclGeneral_ProcessInGroupsServer_21:
        MOV       R4,#-0x75
// 1981       }
// 1982 
// 1983 #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
// 1984       if ( UNICAST_MSG( pInMsg->msg ) )
// 1985 #endif
// 1986       {
// 1987         zclGeneral_SendGroupRemoveResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 1988                                             status, group.ID, true, pInMsg->hdr.transSeqNum );
??zclGeneral_ProcessInGroupsServer_22:
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 75)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 76)
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       A,R4
        MOV       R5,A
        MOV       R4,#0x3
??zclGeneral_ProcessInGroupsServer_9:
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_90:
        LCALL     `??zclGeneral_SendGroupResponse::?relay`; Banked call to: zclGeneral_SendGroupResponse
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 74)
// 1989         stat = ZCL_STATUS_CMD_HAS_RSP;
??zclGeneral_ProcessInGroupsServer_12:
        MOV       R6,#-0x1
// 1990       }
// 1991       break;
        SJMP      ??zclGeneral_ProcessInGroupsServer_23
// 1992 
// 1993     case COMMAND_GROUP_REMOVE_ALL:
// 1994       {
// 1995         uint8 numGroups;
// 1996         uint16 groupList[APS_MAX_GROUPS];
// 1997 
// 1998         if ( numGroups = aps_FindAllGroupsForEndpoint( pInMsg->msg->endPoint, groupList ) )
??zclGeneral_ProcessInGroupsServer_4:
        ; Setup parameters for call to function aps_FindAllGroupsForEndpoint
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP101_8
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_13:
        JZ        ??zclGeneral_ProcessInGroupsServer_23
// 1999         {
// 2000           for ( i = 0; i < numGroups; i++ )
// 2001           {
// 2002 #if defined ( ZCL_SCENES )
// 2003             zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, groupList[i] );
// 2004 #endif
// 2005           }
// 2006 
// 2007           aps_RemoveAllGroup( pInMsg->msg->endPoint );
        ; Setup parameters for call to function aps_RemoveAllGroup
        LCALL     ??Subroutine47_0 & 0xFFFF
// 2008         }
// 2009       }
??CrossCallReturnLabel_80:
        LCALL     `??aps_RemoveAllGroup::?relay`; Banked call to: aps_RemoveAllGroup
        SJMP      ??zclGeneral_ProcessInGroupsServer_23
// 2010       break;
// 2011 
// 2012     case COMMAND_GROUP_ADD_IF_IDENTIFYING:
// 2013       // Retrieve Identify Time
// 2014       zcl_ReadAttrData( pInMsg->msg->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
// 2015                         ATTRID_IDENTIFY_TIME, (uint8 *)&identifyTime, NULL );
??zclGeneral_ProcessInGroupsServer_5:
        ; Setup parameters for call to function zcl_ReadAttrData
        CLR       A
        MOV       ?V4,A
        MOV       ?V5,A
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 76)
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x3
        MOV       R3,#0x0
        LCALL     ??Subroutine47_0 & 0xFFFF
??CrossCallReturnLabel_81:
        LCALL     `??zcl_ReadAttrData::?relay`; Banked call to: zcl_ReadAttrData
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 74)
// 2016 
// 2017       // Is device identifying itself?
// 2018       if ( identifyTime > 0 )
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_96:
        JZ        ??zclGeneral_ProcessInGroupsServer_23
// 2019       {
// 2020         zclGeneral_AddGroup( pInMsg->msg->endPoint, &group, pData );
        ; Setup parameters for call to function zclGeneral_AddGroup
        MOV       R4,?V2
        MOV       R5,?V3
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP101_8
        LCALL     ?Subroutine8 & 0xFFFF
// 2021       }
??CrossCallReturnLabel_11:
        SJMP      ??zclGeneral_ProcessInGroupsServer_23
// 2022       break;
// 2023 
// 2024     default:
// 2025       stat = ZFailure;
??zclGeneral_ProcessInGroupsServer_6:
        MOV       R6,#0x1
// 2026       break;
// 2027   }
// 2028 
// 2029   return ( stat );
??zclGeneral_ProcessInGroupsServer_23:
        MOV       A,R6
        MOV       R1,A
        MOV       A,#0x36
        LJMP      ?Subroutine2 & 0xFFFF
// 2030 }
          CFI EndBlock cfiBlock128

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond129 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsServer
          CFI Conditional ??CrossCallReturnLabel_89
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-2
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiPicker131 Using cfiCommon1
          CFI (cfiPicker131) NoFunction
          CFI (cfiPicker131) Picker
        MOV       A,R6
        ADD       A,#0x6
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiPicker131
        REQUIRE ??Subroutine48_0
        ; // Fall through to label ??Subroutine48_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine48_0:
          CFI Block cfiCond132 Using cfiCommon0
          CFI Function zclGeneral_ProcessInIdentity
          CFI Conditional ??CrossCallReturnLabel_88
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond133) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond133) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond133) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-2
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond134) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-2
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiPicker135 Using cfiCommon1
          CFI (cfiPicker135) NoFunction
          CFI (cfiPicker135) Picker
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_92:
        RET
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiPicker135

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond136 Using cfiCommon0
          CFI Function zclGeneral_SendAddGroupRequest
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-2
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiPicker138 Using cfiCommon1
          CFI (cfiPicker138) NoFunction
          CFI (cfiPicker138) Picker
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       DPL,?V2
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiPicker138
// 2031 
// 2032 /*********************************************************************
// 2033  * @fn      zclGeneral_ProcessInGroupsClient
// 2034  *
// 2035  * @brief   Process in the received Groups Command.
// 2036  *
// 2037  * @param   pInMsg - pointer to the incoming message
// 2038  *
// 2039  * @return  ZStatus_t
// 2040  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond139 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsClient
          CFI Conditional ??CrossCallReturnLabel_97
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 50)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond140) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond140) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond140) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond140) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-2
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 50)
          CFI Block cfiPicker141 Using cfiCommon1
          CFI (cfiPicker141) NoFunction
          CFI (cfiPicker141) Picker
        MOV       DPL,?V0
        MOV       DPH,?V1
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiPicker141
        REQUIRE ??Subroutine49_0
        ; // Fall through to label ??Subroutine49_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine49_0:
          CFI Block cfiCond142 Using cfiCommon0
          CFI Function zclGeneral_ProcessInIdentity
          CFI Conditional ??CrossCallReturnLabel_95
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond143) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond143) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-2
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond144) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond144) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond144) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond144) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond144) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+-2
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 50)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond145) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond145) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-2
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 50)
          CFI Block cfiPicker146 Using cfiCommon1
          CFI (cfiPicker146) NoFunction
          CFI (cfiPicker146) Picker
        LCALL     ??Subroutine50_0 & 0xFFFF
??CrossCallReturnLabel_104:
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiPicker146

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond147 Using cfiCommon0
          CFI Function zclGeneral_ProcessInIdentity
          CFI Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_82
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_83
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond148) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond148) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond148) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-6
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_80
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond149) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond149) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond149) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-6
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_81
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond150) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond150) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond150) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+-6
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_12
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond151) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond151) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond151) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond151) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-6
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond152 Using cfiCommon0
          CFI (cfiCond152) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond152) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_13
          CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond152) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond152) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond152) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond152) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond152) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond152) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond152) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond152) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond152) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond152) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond152) CFA_SP SP+-6
          CFI (cfiCond152) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_10
          CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond153) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond153) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond153) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond153) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond153) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond153) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond153) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond153) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond153) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond153) CFA_SP SP+-6
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_11
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond154) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond154) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond154) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+-6
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_6
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond155) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-6
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_7
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond156) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond156) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond156) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond156) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond156) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-6
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_41
          CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond157) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond157) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond157) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond157) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond157) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond157) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond157) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond157) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond157) CFA_SP SP+-4
          CFI (cfiCond157) CFA_XSP16 add(XSP16, 50)
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_42
          CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond158) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond158) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond158) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond158) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond158) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond158) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond158) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond158) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond158) CFA_SP SP+-4
          CFI (cfiCond158) CFA_XSP16 add(XSP16, 50)
          CFI Block cfiPicker159 Using cfiCommon1
          CFI (cfiPicker159) NoFunction
          CFI (cfiPicker159) Picker
        MOV       DPL,?V0
        MOV       DPH,?V1
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiPicker159
        REQUIRE ??Subroutine50_0
        ; // Fall through to label ??Subroutine50_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine50_0:
          CFI Block cfiCond160 Using cfiCommon0
          CFI Function zclGeneral_SendGroupRequest
          CFI Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function zclGeneral_SendAddGroupRequest
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_21
          CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond161) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond161) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond161) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond161) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond161) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond161) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond161) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond161) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond161) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond161) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond161) CFA_SP SP+-4
          CFI (cfiCond161) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_22
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+-4
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_23
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-4
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function zclGeneral_SendGroupResponse
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+-2
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function zclGeneral_HdlInSpecificCommands
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-2
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_97
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond166) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond166) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond166) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond166) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond166) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-4
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 50)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_98
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond167) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond167) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond167) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond167) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond167) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond167) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond167) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond167) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+-4
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 50)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_95
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+-4
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_96
          CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond169) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond169) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond169) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond169) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond169) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond169) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond169) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond169) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond169) CFA_SP SP+-4
          CFI (cfiCond169) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_82
          CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond170) CFA_SP SP+-6
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_83
          CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond171) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond171) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond171) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond171) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond171) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond171) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond171) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond171) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond171) CFA_SP SP+-6
          CFI (cfiCond171) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_80
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond172) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond172) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond172) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond172) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond172) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-6
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_81
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond173) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond173) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond173) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond173) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond173) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond173) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+-6
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_12
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond174) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond174) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond174) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond174) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond174) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-6
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_13
          CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond175) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond175) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond175) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond175) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond175) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond175) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond175) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond175) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond175) CFA_SP SP+-6
          CFI (cfiCond175) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_10
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond176) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond176) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond176) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond176) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond176) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond176) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+-6
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_11
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond177) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond177) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond177) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond177) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond177) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond177) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+-6
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_6
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond178) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond178) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond178) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond178) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond178) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond178) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond178) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond178) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+-6
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_7
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond179) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond179) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond179) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond179) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond179) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-6
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_41
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond180) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond180) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond180) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond180) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond180) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+-4
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 50)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_42
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond181) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond181) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond181) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond181) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond181) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond181) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+-4
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 50)
          CFI Block cfiPicker182 Using cfiCommon1
          CFI (cfiPicker182) NoFunction
          CFI (cfiPicker182) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiPicker182

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond183 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsServer
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond184 Using cfiCommon0
          CFI (cfiCond184) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond184) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond184) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond184) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond184) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond184) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond184) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond184) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond184) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond184) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond184) CFA_SP SP+-2
          CFI (cfiCond184) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiPicker185 Using cfiCommon1
          CFI (cfiPicker185) NoFunction
          CFI (cfiPicker185) Picker
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_86:
        LCALL     `??aps_FindAllGroupsForEndpoint::?relay`; Banked call to: aps_FindAllGroupsForEndpoint
        MOV       A,R1
        RET
          CFI EndBlock cfiCond183
          CFI EndBlock cfiCond184
          CFI EndBlock cfiPicker185

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond186 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsServer
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond187) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond187) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond187) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond187) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond187) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond187) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond187) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond187) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond187) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond187) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond187) CFA_SP SP+-2
          CFI (cfiCond187) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiPicker188 Using cfiCommon1
          CFI (cfiPicker188) NoFunction
          CFI (cfiPicker188) Picker
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_85:
        LCALL     `??zclGeneral_AddGroup::?relay`; Banked call to: zclGeneral_AddGroup
        RET
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiPicker188

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond189 Using cfiCommon0
          CFI Function zclGeneral_ProcessInIdentity
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond190) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond190) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond190) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond190) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond190) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond190) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond190) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond190) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+-2
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker191 Using cfiCommon1
          CFI (cfiPicker191) NoFunction
          CFI (cfiPicker191) Picker
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_57:
        MOV       R5,A
        MOV       A,R6
        ADD       A,#0x6
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_91:
        RET
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiPicker191

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond192 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsServer
          CFI Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_89
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_90
          CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond193) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond193) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond193) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond193) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond193) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond193) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond193) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond193) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond193) CFA_SP SP+-4
          CFI (cfiCond193) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_88
          CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond194) CFA_SP SP+-4
          CFI (cfiCond194) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond195 Using cfiCommon0
          CFI (cfiCond195) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond195) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_8
          CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond195) CFA_SP SP+-4
          CFI (cfiCond195) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_9
          CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond196) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond196) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond196) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond196) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond196) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond196) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond196) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond196) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond196) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond196) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond196) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond196) CFA_SP SP+-4
          CFI (cfiCond196) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker197 Using cfiCommon1
          CFI (cfiPicker197) NoFunction
          CFI (cfiPicker197) Picker
        MOV       A,R6
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_94:
        MOV       R1,A
        RET
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiPicker197

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond198 Using cfiCommon0
          CFI Function zclGeneral_HdlInSpecificCommands
          CFI Conditional ??CrossCallReturnLabel_93
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond199 Using cfiCommon0
          CFI (cfiCond199) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond199) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_89
          CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond199) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond199) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond199) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond199) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond199) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond199) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond199) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond199) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond199) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond199) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond199) CFA_SP SP+-6
          CFI (cfiCond199) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond200 Using cfiCommon0
          CFI (cfiCond200) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond200) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_90
          CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond200) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond200) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond200) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond200) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond200) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond200) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond200) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond200) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond200) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond200) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond200) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond200) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond200) CFA_SP SP+-6
          CFI (cfiCond200) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond201 Using cfiCommon0
          CFI (cfiCond201) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond201) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_88
          CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond201) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond201) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond201) CFA_SP SP+-6
          CFI (cfiCond201) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_8
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+-6
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_9
          CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond203) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond203) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond203) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond203) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond203) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond203) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond203) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond203) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond203) CFA_SP SP+-6
          CFI (cfiCond203) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker204 Using cfiCommon1
          CFI (cfiPicker204) NoFunction
          CFI (cfiPicker204) Picker
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond198
          CFI EndBlock cfiCond199
          CFI EndBlock cfiCond200
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiPicker204

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond205 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsServer
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond206 Using cfiCommon0
          CFI (cfiCond206) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond206) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond206) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond206) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond206) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond206) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond206) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond206) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond206) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond206) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond206) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond206) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond206) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond206) CFA_SP SP+-2
          CFI (cfiCond206) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiPicker207 Using cfiCommon1
          CFI (cfiPicker207) NoFunction
          CFI (cfiPicker207) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_84:
        RET
          CFI EndBlock cfiCond205
          CFI EndBlock cfiCond206
          CFI EndBlock cfiPicker207

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond208 Using cfiCommon0
          CFI Function zclGeneral_ProcessInIdentity
          CFI Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_82
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond209 Using cfiCommon0
          CFI (cfiCond209) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond209) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_83
          CFI (cfiCond209) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond209) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond209) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond209) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond209) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond209) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond209) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond209) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond209) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond209) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond209) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond209) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond209) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond209) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond209) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond209) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond209) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond209) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond209) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond209) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond209) CFA_SP SP+-4
          CFI (cfiCond209) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond210 Using cfiCommon0
          CFI (cfiCond210) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond210) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_80
          CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond210) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond210) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond210) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond210) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond210) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond210) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond210) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond210) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond210) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond210) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond210) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond210) CFA_SP SP+-4
          CFI (cfiCond210) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond211 Using cfiCommon0
          CFI (cfiCond211) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond211) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_81
          CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond211) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond211) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond211) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond211) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond211) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond211) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond211) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond211) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond211) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond211) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond211) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond211) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond211) CFA_SP SP+-4
          CFI (cfiCond211) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond212 Using cfiCommon0
          CFI (cfiCond212) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond212) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_12
          CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond212) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond212) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond212) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond212) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond212) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond212) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond212) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond212) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond212) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond212) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond212) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond212) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond212) CFA_SP SP+-4
          CFI (cfiCond212) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond213 Using cfiCommon0
          CFI (cfiCond213) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond213) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_13
          CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond213) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond213) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond213) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond213) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond213) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond213) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond213) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond213) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond213) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond213) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond213) CFA_SP SP+-4
          CFI (cfiCond213) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond214 Using cfiCommon0
          CFI (cfiCond214) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond214) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_10
          CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond214) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond214) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond214) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond214) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond214) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond214) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond214) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond214) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond214) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond214) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond214) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond214) CFA_SP SP+-4
          CFI (cfiCond214) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond215 Using cfiCommon0
          CFI (cfiCond215) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond215) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_11
          CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond215) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond215) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond215) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond215) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond215) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond215) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond215) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond215) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond215) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond215) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond215) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond215) CFA_SP SP+-4
          CFI (cfiCond215) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_6
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond216) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond216) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond216) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond216) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond216) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond216) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond216) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond216) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+-4
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond217 Using cfiCommon0
          CFI (cfiCond217) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond217) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_7
          CFI (cfiCond217) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond217) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond217) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond217) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond217) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond217) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond217) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond217) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond217) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond217) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond217) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond217) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond217) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond217) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond217) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond217) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond217) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond217) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond217) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond217) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond217) CFA_SP SP+-4
          CFI (cfiCond217) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiPicker218 Using cfiCommon1
          CFI (cfiPicker218) NoFunction
          CFI (cfiPicker218) Picker
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_103:
        XCH       A,R0
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond208
          CFI EndBlock cfiCond209
          CFI EndBlock cfiCond210
          CFI EndBlock cfiCond211
          CFI EndBlock cfiCond212
          CFI EndBlock cfiCond213
          CFI EndBlock cfiCond214
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiCond217
          CFI EndBlock cfiPicker218

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond219 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsServer
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond220 Using cfiCommon0
          CFI (cfiCond220) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond220) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond220) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond220) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond220) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond220) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond220) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond220) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond220) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond220) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond220) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond220) CFA_SP SP+-2
          CFI (cfiCond220) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond221 Using cfiCommon0
          CFI (cfiCond221) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond221) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond221) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond221) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond221) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond221) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond221) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond221) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond221) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond221) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond221) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond221) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond221) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond221) CFA_SP SP+-2
          CFI (cfiCond221) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond222 Using cfiCommon0
          CFI (cfiCond222) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond222) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond222) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond222) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond222) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond222) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond222) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond222) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond222) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond222) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond222) CFA_SP SP+-2
          CFI (cfiCond222) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiPicker223 Using cfiCommon1
          CFI (cfiPicker223) NoFunction
          CFI (cfiPicker223) Picker
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        ; Setup parameters for call to function zclGeneral_SendGroupResponse
        ; Setup parameters for call to function zclGeneral_SendGroupViewResponse
        ; Setup parameters for call to function zcl_SendDefaultRspCmd
        ; Setup parameters for call to function zclGeneral_SendGroupResponse
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond219
          CFI EndBlock cfiCond220
          CFI EndBlock cfiCond221
          CFI EndBlock cfiCond222
          CFI EndBlock cfiPicker223

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2041 static ZStatus_t zclGeneral_ProcessInGroupsClient( zclIncoming_t *pInMsg,
zclGeneral_ProcessInGroupsClient:
          CFI Block cfiBlock224 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsClient
        CODE
// 2042                                                    zclGeneral_AppCallbacks_t *pCBs )
// 2043 {
        FUNCALL zclGeneral_ProcessInGroupsClient, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 50, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsClient, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 50, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsClient, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsClient, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 50, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsClient, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 50, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV       A,#-0x16
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 28
        MOV       A,#-0x1c
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 50)
        MOV       ?V6,R2
        MOV       ?V7,R3
        MOV       ?V0,R4
        MOV       ?V1,R5
// 2044   aps_Group_t group;
// 2045   uint8 *pData = pInMsg->pData;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
// 2046   uint8 grpCnt;
// 2047   uint8 nameLen;
// 2048   zclGroupRsp_t rsp;
// 2049   uint8 i;
// 2050   ZStatus_t stat = ZSuccess;
        MOV       ?V11,#0x0
// 2051 
// 2052   zcl_memset( (uint8*)&group, 0, sizeof( aps_Group_t ) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x12
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2053   zcl_memset( (uint8*)&rsp, 0, sizeof( zclGroupRsp_t ) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0xa
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2054 
// 2055   switch ( pInMsg->hdr.commandID )
        MOV       A,R6
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        MOV       A,?V0
        ADD       A,#0xc
        MOV       ?V0,A
        JNC       ??zclGeneral_ProcessInGroupsClient_0
        INC       ?V1
??zclGeneral_ProcessInGroupsClient_0:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R0,DPL
        MOV       R1,DPH
        MOV       A,?V6
        ADD       A,#0x7
        MOV       ?V2,A
        CLR       A
        ADDC      A,?V7
        MOV       ?V3,A
        MOV       DPL,?V2
        MOV       DPH,A
        MOVX      A,@DPTR
        JZ        ??zclGeneral_ProcessInGroupsClient_1
        DEC       A
        JZ        ??zclGeneral_ProcessInGroupsClient_1
        DEC       A
        JNZ       $+5
        LJMP      ??zclGeneral_ProcessInGroupsClient_2 & 0xFFFF
        DEC       A
        JZ        $+5
        LJMP      ??zclGeneral_ProcessInGroupsClient_3 & 0xFFFF
// 2056   {
// 2057     case COMMAND_GROUP_ADD_RSP:
// 2058     case COMMAND_GROUP_VIEW_RSP:
// 2059     case COMMAND_GROUP_REMOVE_RSP:
// 2060       rsp.status = *pData++;
??zclGeneral_ProcessInGroupsClient_1:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R4
        MOVX      @DPTR,A
        MOV       A,R1
        MOV       R7,A
// 2061       group.ID = BUILD_UINT16( pData[0], pData[1] );
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V4,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V4
        LCALL     ??Subroutine51_0 & 0xFFFF
// 2062 
// 2063       if ( rsp.status == ZCL_STATUS_SUCCESS && pInMsg->hdr.commandID == COMMAND_GROUP_VIEW_RSP )
??CrossCallReturnLabel_107:
        MOV       A,R4
        JNZ       ??CrossCallReturnLabel_110
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??CrossCallReturnLabel_110
// 2064       {
// 2065         pData += 2;   // Move past ID
// 2066         nameLen = *pData++;
        MOV       DPL,R0
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ADD       A,#0x3
        MOV       R6,A
        JNC       ??zclGeneral_ProcessInGroupsClient_4
        INC       R7
// 2067         if ( nameLen > (APS_GROUP_NAME_LEN-1) )
??zclGeneral_ProcessInGroupsClient_4:
        MOV       A,R1
        CLR       C
        SUBB      A,#0x10
        JC        ??zclGeneral_ProcessInGroupsClient_5
// 2068           nameLen = (APS_GROUP_NAME_LEN-1);
        MOV       R1,#0xf
// 2069         group.name[0] = nameLen;
??zclGeneral_ProcessInGroupsClient_5:
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
// 2070         zcl_memcpy( &(group.name[1]), pData, nameLen );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V8,R6
        MOV       ?V9,R7
        MOV       ?V10,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 53)
        MOV       A,R1
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     ??Subroutine41_0 & 0xFFFF
??CrossCallReturnLabel_69:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 50)
// 2071         rsp.grpName = group.name;
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,DPL
        MOV       R1,DPH
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine24 & 0xFFFF
// 2072       }
// 2073 
// 2074       if ( pCBs->pfnGroupRsp )
??CrossCallReturnLabel_110:
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_97:
        JNZ       $+5
        LJMP      ??zclGeneral_ProcessInGroupsClient_6 & 0xFFFF
// 2075       {
// 2076         rsp.srcAddr = &(pInMsg->msg->srcAddr);
        LCALL     ?Subroutine5 & 0xFFFF
// 2077         rsp.cmdID = pInMsg->hdr.commandID;
??CrossCallReturnLabel_4:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2078         rsp.grpCnt = 1;
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
// 2079         rsp.grpList = &group.ID;
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP100_8
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine24 & 0xFFFF
// 2080         rsp.capacity = 0;
??CrossCallReturnLabel_111:
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        LCALL     ?Subroutine19 & 0xFFFF
// 2081 
// 2082         pCBs->pfnGroupRsp( &rsp );
// 2083       }
??CrossCallReturnLabel_41:
        LCALL     ?CALL_IND
        LJMP      ??zclGeneral_ProcessInGroupsClient_6 & 0xFFFF
// 2084       break;
// 2085 
// 2086     case COMMAND_GROUP_GET_MEMBERSHIP_RSP:
// 2087       {
// 2088         uint16 *grpList = NULL;
??zclGeneral_ProcessInGroupsClient_2:
        MOV       ?V4,#0x0
        MOV       ?V5,#0x0
// 2089         rsp.capacity = *pData++;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2090         grpCnt = *pData++;
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       ?V8,A
        INC       R6
        INC       R6
        MOV       A,R3
        MOV       R7,A
// 2091 
// 2092         if ( grpCnt > 0 )
        MOV       A,?V8
        JZ        ??zclGeneral_ProcessInGroupsClient_7
// 2093         {
// 2094           // Allocate space for the group list
// 2095           grpList = zcl_mem_alloc( sizeof( uint16 ) * grpCnt );
        ; Setup parameters for call to function osal_mem_alloc
        ADD       A,0xE0 /* A   */
        MOV       R2,A
        CLR       A
        RLC       A
        MOV       R3,A
        LCALL     ?Subroutine25 & 0xFFFF
// 2096           if ( grpList != NULL )
??CrossCallReturnLabel_46:
        JZ        ??zclGeneral_ProcessInGroupsClient_7
// 2097           {
// 2098             rsp.grpCnt = grpCnt;
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V8
        MOVX      @DPTR,A
// 2099             for ( i = 0; i < grpCnt; i++ )
        MOV       R2,#0x0
        SJMP      ??zclGeneral_ProcessInGroupsClient_8
// 2100             {
// 2101               grpList[i] = BUILD_UINT16( pData[0], pData[1] );
??zclGeneral_ProcessInGroupsClient_9:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_56:
        MOV       R0,A
        CLR       A
        XCH       A,R0
        MOV       R1,A
        MOV       A,R4
        ADD       A,R0
        CLR       A
        ADDC      A,R1
        MOV       R5,A
        MOV       A,R2
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_50:
        MOV       A,R3
        ADDC      A,R1
        MOV       DPH,A
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
// 2102               pData += 2;
        MOV       A,R6
        ADD       A,#0x2
        MOV       R6,A
        JNC       ??zclGeneral_ProcessInGroupsClient_10
        INC       R7
// 2103             }
??zclGeneral_ProcessInGroupsClient_10:
        INC       R2
??zclGeneral_ProcessInGroupsClient_8:
        MOV       A,R2
        CLR       C
        SUBB      A,?V8
        JC        ??zclGeneral_ProcessInGroupsClient_9
// 2104           }
// 2105         }
// 2106 
// 2107         if ( pCBs->pfnGroupRsp )
??zclGeneral_ProcessInGroupsClient_7:
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_98:
        JZ        ??zclGeneral_ProcessInGroupsClient_11
// 2108         {
// 2109           rsp.srcAddr = &(pInMsg->msg->srcAddr);
        LCALL     ?Subroutine5 & 0xFFFF
// 2110           rsp.cmdID = pInMsg->hdr.commandID;
??CrossCallReturnLabel_5:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2111           rsp.grpList = grpList;
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V5
        LCALL     ?Subroutine19 & 0xFFFF
// 2112 
// 2113           pCBs->pfnGroupRsp( &rsp );
// 2114         }
??CrossCallReturnLabel_42:
        LCALL     ?CALL_IND
// 2115 
// 2116         if ( grpList != NULL )
??zclGeneral_ProcessInGroupsClient_11:
        MOV       A,?V4
        ORL       A,?V5
        JZ        ??zclGeneral_ProcessInGroupsClient_6
// 2117         {
// 2118           zcl_mem_free( grpList );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V4
        MOV       R3,?V5
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??zclGeneral_ProcessInGroupsClient_6
// 2119         }
// 2120       }
// 2121       break;
// 2122 
// 2123     default:
// 2124       stat = ZFailure;
??zclGeneral_ProcessInGroupsClient_3:
        MOV       ?V11,#0x1
// 2125       break;
// 2126   }
// 2127 
// 2128   return ( stat );
??zclGeneral_ProcessInGroupsClient_6:
        MOV       R1,?V11
        MOV       A,#0x1c
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        LJMP      ?Subroutine3 & 0xFFFF
// 2129 }
          CFI EndBlock cfiBlock224

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond225 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsServer
          CFI Conditional ??CrossCallReturnLabel_49
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond226 Using cfiCommon0
          CFI (cfiCond226) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond226) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond226) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond226) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond226) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond226) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond226) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond226) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond226) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond226) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond226) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond226) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond226) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond226) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond226) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond226) CFA_SP SP+-2
          CFI (cfiCond226) CFA_XSP16 add(XSP16, 50)
          CFI Block cfiPicker227 Using cfiCommon1
          CFI (cfiPicker227) NoFunction
          CFI (cfiPicker227) Picker
        ADD       A,0xE0 /* A   */
        MOV       R0,A
        CLR       A
        RLC       A
        MOV       R1,A
        MOV       A,?V4
        ADD       A,R0
        MOV       DPL,A
        RET
          CFI EndBlock cfiCond225
          CFI EndBlock cfiCond226
          CFI EndBlock cfiPicker227

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond228 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsServer
          CFI Conditional ??CrossCallReturnLabel_45
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond229 Using cfiCommon0
          CFI (cfiCond229) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond229) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond229) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond229) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond229) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond229) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond229) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond229) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond229) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond229) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond229) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond229) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond229) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond229) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond229) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond229) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond229) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond229) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond229) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond229) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond229) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond229) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond229) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond229) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond229) CFA_SP SP+-2
          CFI (cfiCond229) CFA_XSP16 add(XSP16, 50)
          CFI Block cfiPicker230 Using cfiCommon1
          CFI (cfiPicker230) NoFunction
          CFI (cfiPicker230) Picker
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       A,R2
        ORL       A,R3
        RET
          CFI EndBlock cfiCond228
          CFI EndBlock cfiCond229
          CFI EndBlock cfiPicker230

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond231 Using cfiCommon0
          CFI Function zclGeneral_RegisterCmdCallbacks
          CFI Conditional ??CrossCallReturnLabel_108
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond232 Using cfiCommon0
          CFI (cfiCond232) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond232) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond232) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond232) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond232) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond232) CFA_SP SP+-2
          CFI (cfiCond232) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond233 Using cfiCommon0
          CFI (cfiCond233) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond233) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond233) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond233) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond233) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond233) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond233) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond233) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond233) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond233) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond233) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond233) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond233) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond233) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond233) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond233) CFA_SP SP+-2
          CFI (cfiCond233) CFA_XSP16 add(XSP16, 50)
          CFI Block cfiCond234 Using cfiCommon0
          CFI (cfiCond234) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond234) Conditional ??CrossCallReturnLabel_111
          CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond234) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond234) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond234) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond234) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond234) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond234) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond234) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond234) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond234) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond234) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond234) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond234) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond234) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond234) CFA_SP SP+-2
          CFI (cfiCond234) CFA_XSP16 add(XSP16, 50)
          CFI Block cfiPicker235 Using cfiCommon1
          CFI (cfiPicker235) NoFunction
          CFI (cfiPicker235) Picker
        MOV       A,R0
          CFI EndBlock cfiCond231
          CFI EndBlock cfiCond232
          CFI EndBlock cfiCond233
          CFI EndBlock cfiCond234
          CFI EndBlock cfiPicker235
        REQUIRE ??Subroutine51_0
        ; // Fall through to label ??Subroutine51_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine51_0:
          CFI Block cfiCond236 Using cfiCommon0
          CFI Function zclGeneral_ProcessInIdentity
          CFI Conditional ??CrossCallReturnLabel_105
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond237 Using cfiCommon0
          CFI (cfiCond237) Function zclGeneral_ProcessInGroupsServer
          CFI (cfiCond237) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond237) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond237) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond237) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond237) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond237) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond237) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond237) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond237) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond237) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond237) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond237) CFA_SP SP+-2
          CFI (cfiCond237) CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond238 Using cfiCommon0
          CFI (cfiCond238) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond238) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond238) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond238) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond238) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond238) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond238) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond238) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond238) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond238) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond238) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond238) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond238) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond238) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond238) CFA_SP SP+-2
          CFI (cfiCond238) CFA_XSP16 add(XSP16, 50)
          CFI Block cfiCond239 Using cfiCommon0
          CFI (cfiCond239) Function zclGeneral_RegisterCmdCallbacks
          CFI (cfiCond239) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond239) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond239) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond239) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond239) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond239) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond239) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond239) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond239) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond239) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond239) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond239) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond239) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond239) CFA_SP SP+-2
          CFI (cfiCond239) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond240 Using cfiCommon0
          CFI (cfiCond240) Function zclGeneral_ProcessInIdentity
          CFI (cfiCond240) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond240) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond240) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond240) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond240) CFA_SP SP+-2
          CFI (cfiCond240) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond241 Using cfiCommon0
          CFI (cfiCond241) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond241) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond241) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond241) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond241) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond241) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond241) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond241) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond241) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond241) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond241) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond241) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond241) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond241) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond241) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond241) CFA_SP SP+-2
          CFI (cfiCond241) CFA_XSP16 add(XSP16, 50)
          CFI Block cfiCond242 Using cfiCommon0
          CFI (cfiCond242) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond242) Conditional ??CrossCallReturnLabel_111
          CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond242) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond242) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond242) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond242) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond242) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond242) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond242) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond242) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond242) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond242) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond242) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond242) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond242) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond242) CFA_SP SP+-2
          CFI (cfiCond242) CFA_XSP16 add(XSP16, 50)
          CFI Block cfiPicker243 Using cfiCommon1
          CFI (cfiPicker243) NoFunction
          CFI (cfiPicker243) Picker
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond236
          CFI EndBlock cfiCond237
          CFI EndBlock cfiCond238
          CFI EndBlock cfiCond239
          CFI EndBlock cfiCond240
          CFI EndBlock cfiCond241
          CFI EndBlock cfiCond242
          CFI EndBlock cfiPicker243

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond244 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsClient
          CFI Conditional ??CrossCallReturnLabel_41
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 50)
          CFI Block cfiCond245 Using cfiCommon0
          CFI (cfiCond245) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond245) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond245) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond245) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond245) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond245) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond245) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond245) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond245) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond245) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond245) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond245) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond245) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond245) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond245) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond245) CFA_SP SP+-2
          CFI (cfiCond245) CFA_XSP16 add(XSP16, 50)
          CFI Block cfiPicker246 Using cfiCommon1
          CFI (cfiPicker246) NoFunction
          CFI (cfiPicker246) Picker
        MOVX      @DPTR,A
        ; Setup parameters for indirect call
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_102:
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond244
          CFI EndBlock cfiCond245
          CFI EndBlock cfiPicker246

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond247 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsClient
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 50)
          CFI Block cfiCond248 Using cfiCommon0
          CFI (cfiCond248) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond248) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond248) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond248) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond248) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond248) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond248) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond248) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond248) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond248) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond248) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond248) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond248) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond248) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond248) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond248) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond248) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond248) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond248) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond248) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond248) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond248) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond248) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond248) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond248) CFA_SP SP+-2
          CFI (cfiCond248) CFA_XSP16 add(XSP16, 50)
          CFI Block cfiPicker249 Using cfiCommon1
          CFI (cfiPicker249) NoFunction
          CFI (cfiPicker249) Picker
        MOV       DPL,?V6
        MOV       DPH,?V7
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_52:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_61:
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond247
          CFI EndBlock cfiCond248
          CFI EndBlock cfiPicker249

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond250 Using cfiCommon0
          CFI Function zclGeneral_ProcessInIdentity
          CFI Conditional ??CrossCallReturnLabel_51
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond251 Using cfiCommon0
          CFI (cfiCond251) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond251) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_4
          CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond251) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond251) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond251) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond251) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond251) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond251) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond251) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond251) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond251) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond251) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond251) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond251) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond251) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond251) CFA_SP SP+-4
          CFI (cfiCond251) CFA_XSP16 add(XSP16, 50)
          CFI Block cfiCond252 Using cfiCommon0
          CFI (cfiCond252) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond252) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_5
          CFI (cfiCond252) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond252) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond252) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond252) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond252) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond252) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond252) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond252) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond252) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond252) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond252) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond252) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond252) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond252) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond252) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond252) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond252) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond252) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond252) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond252) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond252) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond252) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond252) CFA_SP SP+-4
          CFI (cfiCond252) CFA_XSP16 add(XSP16, 50)
          CFI Block cfiPicker253 Using cfiCommon1
          CFI (cfiPicker253) NoFunction
          CFI (cfiPicker253) Picker
        MOVX      A,@DPTR
        ADD       A,#0x6
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R1,A
        RET
          CFI EndBlock cfiCond250
          CFI EndBlock cfiCond251
          CFI EndBlock cfiCond252
          CFI EndBlock cfiPicker253

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_RegisterCmdCallbacks::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_RegisterCmdCallbacks

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_SendIdentify::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_SendIdentify

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_SendIdentifyEZModeInvoke::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_SendIdentifyEZModeInvoke

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_SendIdentifyUpdateCommState::?rela`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_SendIdentifyUpdateCommState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_SendIdentifyQueryResponse::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_SendIdentifyQueryResponse

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_SendGroupRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_SendGroupRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_SendAddGroupRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_SendAddGroupRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_SendGroupGetMembershipRequest::?re`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_SendGroupGetMembershipRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_SendGroupResponse::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_SendGroupResponse

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_SendGroupViewResponse::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_SendGroupViewResponse

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_HdlIncoming::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_HdlIncoming

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_HdlInSpecificCommands::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_HdlInSpecificCommands

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_ProcessInIdentity::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_ProcessInIdentity

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_AddGroup::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_AddGroup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_ProcessInGroupsServer::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_ProcessInGroupsServer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_ProcessInGroupsClient::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_ProcessInGroupsClient

        END
// 2130 #endif // ZCL_GROUPS
// 2131 
// 2132 #if defined( ZCL_SCENES )
// 2133 #if !defined ( ZCL_STANDALONE )
// 2134 /*********************************************************************
// 2135  * @fn      zclGeneral_AddScene
// 2136  *
// 2137  * @brief   Add a scene for an endpoint
// 2138  *
// 2139  * @param   endpoint -
// 2140  * @param   scene - new scene item
// 2141  *
// 2142  * @return  ZStatus_t
// 2143  */
// 2144 ZStatus_t zclGeneral_AddScene( uint8 endpoint, zclGeneral_Scene_t *scene )
// 2145 {
// 2146   zclGenSceneItem_t *pNewItem;
// 2147   zclGenSceneItem_t *pLoop;
// 2148 
// 2149   // Fill in the new profile list
// 2150   pNewItem = zcl_mem_alloc( sizeof( zclGenSceneItem_t ) );
// 2151   if ( pNewItem == NULL )
// 2152     return ( ZMemError );
// 2153 
// 2154   // Fill in the plugin record.
// 2155   pNewItem->next = (zclGenSceneItem_t *)NULL;
// 2156   pNewItem->endpoint = endpoint;
// 2157   zcl_memcpy( (uint8*)&(pNewItem->scene), (uint8*)scene, sizeof ( zclGeneral_Scene_t ));
// 2158 
// 2159   // Find spot in list
// 2160   if (  zclGenSceneTable == NULL )
// 2161   {
// 2162     zclGenSceneTable = pNewItem;
// 2163   }
// 2164   else
// 2165   {
// 2166     // Look for end of list
// 2167     pLoop = zclGenSceneTable;
// 2168     while ( pLoop->next != NULL )
// 2169       pLoop = pLoop->next;
// 2170 
// 2171     // Put new item at end of list
// 2172     pLoop->next = pNewItem;
// 2173   }
// 2174 
// 2175   // Update NV
// 2176   zclGeneral_ScenesWriteNV();
// 2177 
// 2178   return ( ZSuccess );
// 2179 }
// 2180 #endif // ZCL_STANDALONE
// 2181 
// 2182 #if !defined ( ZCL_STANDALONE )
// 2183 /*********************************************************************
// 2184  * @fn      zclGeneral_FindScene
// 2185  *
// 2186  * @brief   Find a scene with endpoint and sceneID
// 2187  *
// 2188  * @param   endpoint -
// 2189  * @param   groupID - what group the scene belongs to
// 2190  * @param   sceneID - ID to look for scene
// 2191  *
// 2192  * @return  a pointer to the scene information, NULL if not found
// 2193  */
// 2194 zclGeneral_Scene_t *zclGeneral_FindScene( uint8 endpoint, uint16 groupID, uint8 sceneID )
// 2195 {
// 2196   zclGenSceneItem_t *pLoop;
// 2197 
// 2198   // Look for end of list
// 2199   pLoop = zclGenSceneTable;
// 2200   while ( pLoop )
// 2201   {
// 2202     if ( (pLoop->endpoint == endpoint || endpoint == 0xFF)
// 2203         && pLoop->scene.groupID == groupID && pLoop->scene.ID == sceneID )
// 2204     {
// 2205       return ( &(pLoop->scene) );
// 2206     }
// 2207     pLoop = pLoop->next;
// 2208   }
// 2209 
// 2210   return ( (zclGeneral_Scene_t *)NULL );
// 2211 }
// 2212 #endif // ZCL_STANDALONE
// 2213 
// 2214 #if !defined ( ZCL_STANDALONE )
// 2215 /*********************************************************************
// 2216  * @fn      zclGeneral_FindAllScenesForGroup
// 2217  *
// 2218  * @brief   Find all the scenes with groupID
// 2219  *
// 2220  * @param   endpoint - endpoint to look for
// 2221  * @param   sceneList - List to hold scene IDs (should hold APS_MAX_SCENES entries)
// 2222  *
// 2223  * @return  number of scenes copied to sceneList
// 2224  */
// 2225 uint8 zclGeneral_FindAllScenesForGroup( uint8 endpoint, uint16 groupID, uint8 *sceneList )
// 2226 {
// 2227   zclGenSceneItem_t *pLoop;
// 2228   uint8 cnt = 0;
// 2229 
// 2230   // Look for end of list
// 2231   pLoop = zclGenSceneTable;
// 2232   while ( pLoop )
// 2233   {
// 2234     if ( pLoop->endpoint == endpoint && pLoop->scene.groupID == groupID )
// 2235       sceneList[cnt++] = pLoop->scene.ID;
// 2236     pLoop = pLoop->next;
// 2237   }
// 2238   return ( cnt );
// 2239 }
// 2240 #endif // ZCL_STANDALONE
// 2241 
// 2242 #if !defined ( ZCL_STANDALONE )
// 2243 /*********************************************************************
// 2244  * @fn      zclGeneral_RemoveScene
// 2245  *
// 2246  * @brief   Remove a scene with endpoint and sceneID
// 2247  *
// 2248  * @param   endpoint -
// 2249  * @param   groupID - what group the scene belongs to
// 2250  * @param   sceneID - ID to look for scene
// 2251  *
// 2252  * @return  TRUE if removed, FALSE if not found
// 2253  */
// 2254 uint8 zclGeneral_RemoveScene( uint8 endpoint, uint16 groupID, uint8 sceneID )
// 2255 {
// 2256   zclGenSceneItem_t *pLoop;
// 2257   zclGenSceneItem_t *pPrev;
// 2258 
// 2259   // Look for end of list
// 2260   pLoop = zclGenSceneTable;
// 2261   pPrev = NULL;
// 2262   while ( pLoop )
// 2263   {
// 2264     if ( pLoop->endpoint == endpoint
// 2265         && pLoop->scene.groupID == groupID && pLoop->scene.ID == sceneID )
// 2266     {
// 2267       if ( pPrev == NULL )
// 2268         zclGenSceneTable = pLoop->next;
// 2269       else
// 2270         pPrev->next = pLoop->next;
// 2271 
// 2272       // Free the memory
// 2273       zcl_mem_free( pLoop );
// 2274 
// 2275       // Update NV
// 2276       zclGeneral_ScenesWriteNV();
// 2277 
// 2278       return ( TRUE );
// 2279     }
// 2280     pPrev = pLoop;
// 2281     pLoop = pLoop->next;
// 2282   }
// 2283 
// 2284   return ( FALSE );
// 2285 }
// 2286 #endif // ZCL_STANDALONE
// 2287 
// 2288 #if !defined ( ZCL_STANDALONE )
// 2289 /*********************************************************************
// 2290  * @fn      zclGeneral_RemoveAllScenes
// 2291  *
// 2292  * @brief   Remove all scenes with endpoint and group Id
// 2293  *
// 2294  * @param   endpoint -
// 2295  * @param   groupID - ID to look for group
// 2296  *
// 2297  * @return  none
// 2298  */
// 2299 void zclGeneral_RemoveAllScenes( uint8 endpoint, uint16 groupID )
// 2300 {
// 2301   zclGenSceneItem_t *pLoop;
// 2302   zclGenSceneItem_t *pPrev;
// 2303   zclGenSceneItem_t *pNext;
// 2304 
// 2305   // Look for end of list
// 2306   pLoop = zclGenSceneTable;
// 2307   pPrev = NULL;
// 2308   while ( pLoop )
// 2309   {
// 2310     if ( pLoop->endpoint == endpoint && pLoop->scene.groupID == groupID )
// 2311     {
// 2312       if ( pPrev == NULL )
// 2313         zclGenSceneTable = pLoop->next;
// 2314       else
// 2315         pPrev->next = pLoop->next;
// 2316       pNext = pLoop->next;
// 2317 
// 2318       // Free the memory
// 2319       zcl_mem_free( pLoop );
// 2320       pLoop = pNext;
// 2321     }
// 2322     else
// 2323     {
// 2324       pPrev = pLoop;
// 2325       pLoop = pLoop->next;
// 2326     }
// 2327   }
// 2328 
// 2329   // Update NV
// 2330   zclGeneral_ScenesWriteNV();
// 2331 }
// 2332 #endif // ZCL_STANDALONE
// 2333 
// 2334 #if !defined ( ZCL_STANDALONE )
// 2335 /*********************************************************************
// 2336  * @fn      zclGeneral_CountScenes
// 2337  *
// 2338  * @brief   Count the number of scenes for an endpoint
// 2339  *
// 2340  * @param   endpoint -
// 2341  *
// 2342  * @return  number of scenes assigned to an endpoint
// 2343  */
// 2344 uint8 zclGeneral_CountScenes( uint8 endpoint )
// 2345 {
// 2346   zclGenSceneItem_t *pLoop;
// 2347   uint8 cnt = 0;
// 2348 
// 2349   // Look for end of list
// 2350   pLoop = zclGenSceneTable;
// 2351   while ( pLoop )
// 2352   {
// 2353     if ( pLoop->endpoint == endpoint  )
// 2354       cnt++;
// 2355     pLoop = pLoop->next;
// 2356   }
// 2357   return ( cnt );
// 2358 }
// 2359 #endif
// 2360 
// 2361 #if !defined ( ZCL_STANDALONE )
// 2362 /*********************************************************************
// 2363  * @fn      zclGeneral_CountAllScenes
// 2364  *
// 2365  * @brief   Count the total number of scenes
// 2366  *
// 2367  * @param   none
// 2368  *
// 2369  * @return  number of scenes
// 2370  */
// 2371 uint8 zclGeneral_CountAllScenes( void )
// 2372 {
// 2373   zclGenSceneItem_t *pLoop;
// 2374   uint8 cnt = 0;
// 2375 
// 2376   // Look for end of list
// 2377   pLoop = zclGenSceneTable;
// 2378   while ( pLoop )
// 2379   {
// 2380     cnt++;
// 2381     pLoop = pLoop->next;
// 2382   }
// 2383   return ( cnt );
// 2384 }
// 2385 #endif // ZCL_STANDALONE
// 2386 
// 2387 /*********************************************************************
// 2388  * @fn      zclGeneral_ReadSceneCountCB
// 2389  *
// 2390  * @brief   Read the number of scenes currently in the device's
// 2391  *          scene table (i.e., the Scene Count attribute).
// 2392  *
// 2393  *          Note: This function gets called only when the pointer
// 2394  *                'dataPtr' to the Scene Count attribute value is
// 2395  *                NULL in the attribute database registered with
// 2396  *                the ZCL.
// 2397  *
// 2398  * @param   clusterId - cluster that attribute belongs to
// 2399  * @param   attrId - attribute to be read or written
// 2400  * @param   oper - ZCL_OPER_LEN, ZCL_OPER_READ, or ZCL_OPER_WRITE
// 2401  * @param   pValue - pointer to attribute value
// 2402  * @param   pLen - pointer to length of attribute value read
// 2403  *
// 2404  * @return  status
// 2405  */
// 2406 ZStatus_t zclGeneral_ReadSceneCountCB( uint16 clusterId, uint16 attrId,
// 2407                                        uint8 oper, uint8 *pValue, uint16 *pLen )
// 2408 {
// 2409   ZStatus_t status = ZCL_STATUS_SUCCESS;
// 2410 
// 2411   // This callback function should only be called for the Scene Count attribute
// 2412   switch ( oper )
// 2413   {
// 2414     case ZCL_OPER_LEN:
// 2415       *pLen = 1; // uint8
// 2416       break;
// 2417 
// 2418     case ZCL_OPER_READ:
// 2419       *pValue = zclGeneral_CountAllScenes();
// 2420 
// 2421       if ( pLen != NULL )
// 2422       {
// 2423         *pLen = 1;
// 2424       }
// 2425       break;
// 2426 
// 2427     case ZCL_OPER_WRITE:
// 2428       // Fall through
// 2429 
// 2430     default:
// 2431       status = ZCL_STATUS_SOFTWARE_FAILURE; // should never get here!
// 2432       break;
// 2433   }
// 2434 
// 2435   return ( status );
// 2436 }
// 2437 
// 2438 /*********************************************************************
// 2439  * @fn      zclGeneral_ProcessInScenesServer
// 2440  *
// 2441  * @brief   Process in the received Scenes Command.
// 2442  *
// 2443  * @param   pInMsg - pointer to the incoming message
// 2444  *
// 2445  * @return  ZStatus_t
// 2446  */
// 2447 static ZStatus_t zclGeneral_ProcessInScenesServer( zclIncoming_t *pInMsg,
// 2448                                                    zclGeneral_AppCallbacks_t *pCBs )
// 2449 {
// 2450   zclGeneral_Scene_t scene;
// 2451   zclGeneral_Scene_t *pScene;
// 2452   uint8 *pData = pInMsg->pData;
// 2453   uint8 nameLen;
// 2454   uint8 status;
// 2455   uint8 sceneCnt = 0;
// 2456   uint8 *sceneList = NULL;
// 2457   uint8 sendRsp = TRUE;
// 2458   uint8 nameSupport = FALSE;
// 2459   ZStatus_t stat = ZSuccess;
// 2460 
// 2461   zcl_memset( (uint8*)&scene, 0, sizeof( zclGeneral_Scene_t ) );
// 2462 
// 2463   scene.groupID = BUILD_UINT16( pData[0], pData[1] );
// 2464   pData += 2;   // Move past group ID
// 2465   scene.ID = *pData++;
// 2466 
// 2467   switch ( pInMsg->hdr.commandID )
// 2468   {
// 2469     case COMMAND_SCENE_ADD:
// 2470 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 2471     case COMMAND_SCENE_ENHANCED_ADD:
// 2472 #endif // ZCL_LIGHT_LINK_ENHANCE
// 2473       // Parse the rest of the incoming message
// 2474       scene.transTime = BUILD_UINT16( pData[0], pData[1] );
// 2475       pData += 2;
// 2476 
// 2477       if ( pInMsg->hdr.commandID == COMMAND_SCENE_ENHANCED_ADD )
// 2478       {
// 2479         // Received transition time is in 1/10 second
// 2480         scene.transTime100ms = scene.transTime % 10;
// 2481         scene.transTime /= 10;
// 2482       }
// 2483 
// 2484       nameLen= *pData++; // Name length
// 2485 
// 2486       // Retrieve Name Support attribute
// 2487       zcl_ReadAttrData( pInMsg->msg->endPoint, ZCL_CLUSTER_ID_GEN_SCENES,
// 2488                         ATTRID_SCENES_NAME_SUPPORT, &nameSupport, NULL );
// 2489 
// 2490       if ( nameSupport )
// 2491       {
// 2492         if ( nameLen > (ZCL_GEN_SCENE_NAME_LEN-1) )
// 2493           nameLen = (ZCL_GEN_SCENE_NAME_LEN-1);
// 2494         scene.name[0] = nameLen;
// 2495         zcl_memcpy( &(scene.name[1]), pData, nameLen );
// 2496       }
// 2497 
// 2498       pData += nameLen; // move past name, use original length
// 2499 
// 2500       scene.extLen = pInMsg->pDataLen - ( (uint16)( pData - pInMsg->pData ) );
// 2501       if ( scene.extLen > 0 )
// 2502       {
// 2503         // Copy the extention field(s)
// 2504         if ( scene.extLen > ZCL_GEN_SCENE_EXT_LEN )
// 2505         {
// 2506           scene.extLen = ZCL_GEN_SCENE_EXT_LEN;
// 2507         }
// 2508         zcl_memcpy( scene.extField, pData, scene.extLen );
// 2509       }
// 2510 
// 2511       if ( scene.groupID == 0x0000 ||
// 2512            aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
// 2513       {
// 2514         // Either the Scene doesn't belong to a Group (Group ID = 0x0000) or it
// 2515         // does and the corresponding Group exits
// 2516         pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
// 2517         if ( pScene || ( zclGeneral_CountAllScenes() < ZCL_GEN_MAX_SCENES ) )
// 2518         {
// 2519           status = ZCL_STATUS_SUCCESS;
// 2520           if ( pScene != NULL )
// 2521           {
// 2522             // The Scene already exists so update it
// 2523             pScene->transTime = scene.transTime;
// 2524             zcl_memcpy( pScene->name, scene.name, ZCL_GEN_SCENE_NAME_LEN );
// 2525 
// 2526             // Use the new extention field(s)
// 2527             zcl_memcpy( pScene->extField, scene.extField, scene.extLen );
// 2528             pScene->extLen = scene.extLen;
// 2529 
// 2530             // Save Scenes
// 2531             zclGeneral_ScenesSave();
// 2532           }
// 2533           else
// 2534           {
// 2535             // The Scene doesn't exist so add it
// 2536             zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
// 2537           }
// 2538         }
// 2539         else
// 2540         {
// 2541           status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
// 2542         }
// 2543       }
// 2544       else
// 2545       {
// 2546         status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
// 2547       }
// 2548 
// 2549       if ( UNICAST_MSG( pInMsg->msg ) )
// 2550       {
// 2551         if ( pInMsg->hdr.commandID == COMMAND_SCENE_ADD )
// 2552         {
// 2553           zclGeneral_SendSceneAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2554                                           status, scene.groupID, scene.ID,
// 2555                                           true, pInMsg->hdr.transSeqNum );
// 2556         }
// 2557 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 2558         else // COMMAND_SCENE_ENHANCED_ADD
// 2559         {
// 2560           zclGeneral_SendSceneEnhancedAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2561                                                   status, scene.groupID, scene.ID,
// 2562                                                   true, pInMsg->hdr.transSeqNum );
// 2563         }
// 2564 #endif // ZCL_LIGHT_LINK_ENHANCE
// 2565       }
// 2566       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2567 
// 2568       break;
// 2569 
// 2570     case COMMAND_SCENE_VIEW:
// 2571 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 2572     case COMMAND_SCENE_ENHANCED_VIEW:
// 2573 #endif // ZCL_LIGHT_LINK_ENHANCE
// 2574       pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
// 2575       if ( pScene != NULL )
// 2576       {
// 2577         status = ZCL_STATUS_SUCCESS;
// 2578       }
// 2579       else
// 2580       {
// 2581         // Scene not found
// 2582         if ( scene.groupID != 0x0000 &&
// 2583              aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) == NULL )
// 2584         {
// 2585           status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
// 2586         }
// 2587         else
// 2588         {
// 2589           status = ZCL_STATUS_NOT_FOUND;
// 2590         }
// 2591         pScene = &scene;
// 2592       }
// 2593 
// 2594       if ( UNICAST_MSG( pInMsg->msg ) )
// 2595       {
// 2596         if ( pInMsg->hdr.commandID == COMMAND_SCENE_VIEW )
// 2597         {
// 2598           zclGeneral_SendSceneViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2599                                            status, pScene, true, pInMsg->hdr.transSeqNum );
// 2600         }
// 2601 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 2602         else
// 2603         {
// 2604           zclGeneral_SendSceneEnhancedViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2605                                                    status, pScene, true, pInMsg->hdr.transSeqNum );
// 2606         }
// 2607 #endif // ZCL_LIGHT_LINK_ENHANCE
// 2608       }
// 2609       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2610       break;
// 2611 
// 2612     case COMMAND_SCENE_REMOVE:
// 2613       if ( zclGeneral_RemoveScene( pInMsg->msg->endPoint, scene.groupID, scene.ID ) )
// 2614       {
// 2615         status = ZCL_STATUS_SUCCESS;
// 2616       }
// 2617       else
// 2618       {
// 2619         // Scene not found
// 2620         if ( aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) == NULL )
// 2621         {
// 2622           // The Group is not in the Group Table
// 2623           status = ZCL_STATUS_INVALID_FIELD;
// 2624         }
// 2625         else
// 2626         {
// 2627           status = ZCL_STATUS_NOT_FOUND;
// 2628         }
// 2629       }
// 2630 
// 2631       if ( UNICAST_MSG( pInMsg->msg ) )
// 2632       {
// 2633         // Addressed to this device (not to a group) - send a response back
// 2634         zclGeneral_SendSceneRemoveResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2635                                             status, scene.groupID,
// 2636                                             scene.ID, true, pInMsg->hdr.transSeqNum );
// 2637       }
// 2638       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2639       break;
// 2640 
// 2641     case COMMAND_SCENE_REMOVE_ALL:
// 2642       if ( scene.groupID == 0x0000 ||
// 2643            aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
// 2644       {
// 2645         zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, scene.groupID );
// 2646         status = ZCL_STATUS_SUCCESS;
// 2647       }
// 2648       else
// 2649       {
// 2650         status = ZCL_STATUS_INVALID_FIELD;
// 2651       }
// 2652 
// 2653       if ( UNICAST_MSG( pInMsg->msg ) )
// 2654       {
// 2655         // Addressed to this device (not to a group) - send a response back
// 2656         zclGeneral_SendSceneRemoveAllResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2657                                                status, scene.groupID, true, pInMsg->hdr.transSeqNum );
// 2658       }
// 2659       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2660       break;
// 2661 
// 2662     case COMMAND_SCENE_STORE:
// 2663       if ( scene.groupID == 0x0000 ||
// 2664            aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
// 2665       {
// 2666         // Either the Scene doesn't belong to a Group (Group ID = 0x0000) or it
// 2667         // does and the corresponding Group exits
// 2668         pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
// 2669         if ( pScene || ( zclGeneral_CountAllScenes() < ZCL_GEN_MAX_SCENES ) )
// 2670         {
// 2671           uint8 sceneChanged = FALSE;
// 2672 
// 2673           status = ZCL_STATUS_SUCCESS;
// 2674           if ( pScene == NULL )
// 2675           {
// 2676             // Haven't been added yet
// 2677             pScene = &scene;
// 2678           }
// 2679 
// 2680           if ( pCBs->pfnSceneStoreReq )
// 2681           {
// 2682             zclSceneReq_t req;
// 2683 
// 2684             req.srcAddr = &(pInMsg->msg->srcAddr);
// 2685             req.scene = pScene;
// 2686 
// 2687             // Get the latest Scene info
// 2688             if ( pCBs->pfnSceneStoreReq( &req ) )
// 2689             {
// 2690               sceneChanged = TRUE;
// 2691             }
// 2692           }
// 2693 
// 2694           if ( pScene == &scene )
// 2695           {
// 2696             // The Scene doesn't exist so add it
// 2697             zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
// 2698           }
// 2699           else if ( sceneChanged )
// 2700           {
// 2701             // The Scene already exists so update only NV
// 2702             zclGeneral_ScenesSave();
// 2703           }
// 2704         }
// 2705         else
// 2706         {
// 2707           status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
// 2708         }
// 2709       }
// 2710       else
// 2711       {
// 2712         status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
// 2713       }
// 2714 
// 2715       if ( UNICAST_MSG( pInMsg->msg ) )
// 2716       {
// 2717         // Addressed to this device (not to a group) - send a response back
// 2718         zclGeneral_SendSceneStoreResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2719                                            status, scene.groupID, scene.ID,
// 2720                                            true, pInMsg->hdr.transSeqNum );
// 2721       }
// 2722       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2723       break;
// 2724 
// 2725     case COMMAND_SCENE_RECALL:
// 2726       pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
// 2727       if ( pScene && pCBs->pfnSceneRecallReq )
// 2728       {
// 2729         zclSceneReq_t req;
// 2730 
// 2731         req.srcAddr = &(pInMsg->msg->srcAddr);
// 2732         req.scene = pScene;
// 2733 
// 2734         pCBs->pfnSceneRecallReq( &req );
// 2735       }
// 2736       // No response
// 2737       break;
// 2738 
// 2739     case COMMAND_SCENE_GET_MEMBERSHIP:
// 2740       // Find all the Scenes corresponding to the Group ID
// 2741       if ( scene.groupID == 0x0000 ||
// 2742            aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
// 2743       {
// 2744         // Allocate space for the scene list
// 2745         sceneList = zcl_mem_alloc( ZCL_GEN_MAX_SCENES );
// 2746         if ( sceneList != NULL )
// 2747         {
// 2748           sceneCnt = zclGeneral_FindAllScenesForGroup( pInMsg->msg->endPoint,
// 2749                                                        scene.groupID, sceneList );
// 2750           status = ZCL_STATUS_SUCCESS;
// 2751           if ( ! UNICAST_MSG( pInMsg->msg ) )
// 2752           {
// 2753             // Addressed to the Group - ONLY send a response if an entry within the
// 2754             // Scene Table corresponds to the Group ID
// 2755             if ( sceneCnt == 0 )
// 2756             {
// 2757               sendRsp = FALSE;
// 2758             }
// 2759           }
// 2760         }
// 2761         else
// 2762         {
// 2763           // Couldn't allocate space for the scene list!
// 2764           status = ZCL_STATUS_INSUFFICIENT_SPACE;
// 2765         }
// 2766       }
// 2767       else
// 2768       {
// 2769         // The Group is not in the Group Table - send a response back
// 2770         status = ZCL_STATUS_INVALID_FIELD;
// 2771       }
// 2772 
// 2773 #ifdef ZCL_LIGHT_LINK_ENHANCE //ZLL allows response to unicast only
// 2774       if ( sendRsp && UNICAST_MSG( pInMsg->msg ) )
// 2775 #else
// 2776       if ( sendRsp )
// 2777 #endif //ZCL_LIGHT_LINK_ENHANCE
// 2778       {
// 2779         zclGeneral_SendSceneGetMembershipResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2780                                     status, zclGeneral_ScenesRemaingCapacity(), sceneCnt, sceneList,
// 2781                                     scene.groupID, true, pInMsg->hdr.transSeqNum );
// 2782       }
// 2783 
// 2784       if ( sceneList != NULL )
// 2785         zcl_mem_free( sceneList );
// 2786 
// 2787       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2788       break;
// 2789 
// 2790 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 2791     case COMMAND_SCENE_COPY:
// 2792       {
// 2793         uint8 mode;
// 2794         uint16 groupIDFrom, groupIDTo;
// 2795         uint8 sceneIDFrom, sceneIDTo;
// 2796 
// 2797         pData = pInMsg->pData; // different payload format
// 2798 
// 2799         mode = *pData++;
// 2800         groupIDFrom = BUILD_UINT16( pData[0], pData[1] ); // from group ID
// 2801         pData += 2;
// 2802         sceneIDFrom = *pData++; // from scene ID
// 2803         groupIDTo = BUILD_UINT16( pData[0], pData[1] ); // to group ID
// 2804         pData += 2;
// 2805         if ( (mode & SCENE_COPY_MODE_ALL_BIT) == 0 )
// 2806         {
// 2807           sceneIDTo = *pData++; // to scene ID
// 2808         }
// 2809 
// 2810         // Make sure the groups exist
// 2811         if ( ( aps_FindGroup( pInMsg->msg->endPoint, groupIDFrom ) != NULL ) &&
// 2812              ( aps_FindGroup( pInMsg->msg->endPoint, groupIDTo ) != NULL ) )
// 2813         {
// 2814           // Allocate space for the scene list
// 2815           sceneList = zcl_mem_alloc( (mode & SCENE_COPY_MODE_ALL_BIT) ? ZCL_GEN_MAX_SCENES : 1 );
// 2816           if ( sceneList == NULL )
// 2817           {
// 2818             status = ZCL_STATUS_INSUFFICIENT_SPACE; // Couldn't allocate space for the scene list!
// 2819           }
// 2820           else
// 2821           {
// 2822             status = ZCL_STATUS_SUCCESS;
// 2823             if ( mode & SCENE_COPY_MODE_ALL_BIT ) // Copy all scenes
// 2824             {
// 2825               sceneCnt = zclGeneral_FindAllScenesForGroup( pInMsg->msg->endPoint,
// 2826                                                            groupIDFrom, sceneList );
// 2827             }
// 2828             else // Copy single scene
// 2829             {
// 2830               // Make sure the scene exists
// 2831               pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDFrom, sceneIDFrom );
// 2832               if ( pScene != NULL )
// 2833               {
// 2834                 sceneList[0] = sceneIDFrom;
// 2835                 sceneCnt = 1;
// 2836               }
// 2837               else
// 2838               {
// 2839                 status = ZCL_STATUS_INVALID_FIELD; // Scene not found
// 2840               }
// 2841             }
// 2842           }
// 2843 
// 2844           if ( status == ZCL_STATUS_SUCCESS )
// 2845           {
// 2846             uint8 numScenesToAdd = 0;
// 2847             uint8 i;
// 2848             for ( i = 0; i < sceneCnt; i++ )
// 2849             {
// 2850               if ( zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDTo, sceneList[i] ) == NULL )
// 2851               {
// 2852                 numScenesToAdd++;
// 2853               }
// 2854             }
// 2855             if ( zclGeneral_ScenesRemaingCapacity() >= numScenesToAdd )
// 2856             {
// 2857               // Copy the scenes
// 2858               for ( i = 0; i < sceneCnt; i++ )
// 2859               {
// 2860                 // Ignore scene ID from and scene ID to fields
// 2861                 pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDFrom, sceneList[i] );
// 2862                 if ( pScene != NULL )
// 2863                 {
// 2864                   zclGeneral_Scene_t *pToScene;
// 2865                   scene = *pScene;
// 2866                   scene.groupID = groupIDTo;
// 2867                   scene.ID = ( (mode & SCENE_COPY_MODE_ALL_BIT) ? sceneList[i] : sceneIDTo );
// 2868 
// 2869                   pToScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDTo, scene.ID );
// 2870                   if( pToScene != NULL )
// 2871                   {
// 2872                     zclGeneral_RemoveScene( pInMsg->msg->endPoint, groupIDTo, scene.ID );
// 2873                   }
// 2874                   // Add the scene
// 2875                   zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
// 2876                 }
// 2877               }
// 2878             }
// 2879             else
// 2880             {
// 2881               status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
// 2882             }
// 2883           }
// 2884         }
// 2885         else
// 2886         {
// 2887           status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
// 2888         }
// 2889 
// 2890         if ( UNICAST_MSG( pInMsg->msg ) )
// 2891         {
// 2892           if ( pScene == NULL )
// 2893           {
// 2894             pScene = &scene;
// 2895           }
// 2896           // Addressed to this device (not to a group) - send a response back
// 2897           zclGeneral_SendSceneCopyResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2898                                             status, pScene->groupID, pScene->ID,
// 2899                                             true, pInMsg->hdr.transSeqNum );
// 2900         }
// 2901 
// 2902         if ( sceneList != NULL )
// 2903         {
// 2904           zcl_mem_free( sceneList );
// 2905         }
// 2906       }
// 2907 
// 2908       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2909       break;
// 2910 #endif // ZCL_LIGHT_LINK_ENHANCE
// 2911 
// 2912     default:
// 2913       stat = ZFailure;
// 2914     break;
// 2915   }
// 2916 
// 2917   return ( stat );
// 2918 }
// 2919 
// 2920 /*********************************************************************
// 2921  * @fn      zclGeneral_ProcessInScenesClient
// 2922  *
// 2923  * @brief   Process in the received Scenes Command.
// 2924  *
// 2925  * @param   pInMsg - pointer to the incoming message
// 2926  *
// 2927  * @return  ZStatus_t
// 2928  */
// 2929 static ZStatus_t zclGeneral_ProcessInScenesClient( zclIncoming_t *pInMsg,
// 2930                                                    zclGeneral_AppCallbacks_t *pCBs )
// 2931 {
// 2932   zclGeneral_Scene_t scene;
// 2933   uint8 *pData = pInMsg->pData;
// 2934   uint8 nameLen;
// 2935   zclSceneRsp_t rsp;
// 2936   uint8 i;
// 2937   ZStatus_t stat = ZSuccess;
// 2938 
// 2939   zcl_memset( (uint8*)&scene, 0, sizeof( zclGeneral_Scene_t ) );
// 2940   zcl_memset( (uint8*)&rsp, 0, sizeof( zclSceneRsp_t ) );
// 2941 
// 2942   // Get the status field first
// 2943   rsp.status = *pData++;
// 2944 
// 2945   if ( pInMsg->hdr.commandID == COMMAND_SCENE_GET_MEMBERSHIP_RSP )
// 2946   {
// 2947     rsp.capacity = *pData++;
// 2948   }
// 2949 
// 2950   scene.groupID = BUILD_UINT16( pData[0], pData[1] );
// 2951   pData += 2;   // Move past group ID
// 2952 
// 2953   switch ( pInMsg->hdr.commandID )
// 2954   {
// 2955     case COMMAND_SCENE_VIEW_RSP:
// 2956       // Parse the rest of the incoming message
// 2957       scene.ID = *pData++; // Not applicable to Remove All Response command
// 2958       scene.transTime = BUILD_UINT16( pData[0], pData[1] );
// 2959       pData += 2;
// 2960       nameLen = *pData++; // Name length
// 2961       if ( nameLen > (ZCL_GEN_SCENE_NAME_LEN-1) )
// 2962         nameLen = (ZCL_GEN_SCENE_NAME_LEN-1);
// 2963 
// 2964       scene.name[0] = nameLen;
// 2965       zcl_memcpy( &(scene.name[1]), pData, nameLen );
// 2966 
// 2967       pData += nameLen; // move past name, use original length
// 2968 
// 2969       //*** Do something with the extension field(s)
// 2970 
// 2971       // Fall through to callback - break is left off intentionally
// 2972 
// 2973     case COMMAND_SCENE_ADD_RSP:
// 2974     case COMMAND_SCENE_REMOVE_RSP:
// 2975     case COMMAND_SCENE_REMOVE_ALL_RSP:
// 2976     case COMMAND_SCENE_STORE_RSP:
// 2977       if ( pCBs->pfnSceneRsp )
// 2978       {
// 2979         if ( pInMsg->hdr.commandID != COMMAND_SCENE_REMOVE_ALL_RSP )
// 2980         {
// 2981           scene.ID = *pData++;
// 2982         }
// 2983         rsp.srcAddr = &(pInMsg->msg->srcAddr);
// 2984         rsp.cmdID = pInMsg->hdr.commandID;
// 2985         rsp.scene = &scene;
// 2986 
// 2987         pCBs->pfnSceneRsp( &rsp );
// 2988       }
// 2989       break;
// 2990 
// 2991     case COMMAND_SCENE_GET_MEMBERSHIP_RSP:
// 2992       {
// 2993         uint8 *sceneList = NULL;
// 2994 
// 2995         if ( rsp.status == ZCL_STATUS_SUCCESS )
// 2996         {
// 2997           uint8 sceneCnt = *pData++;
// 2998 
// 2999           if ( sceneCnt > 0 )
// 3000           {
// 3001             // Allocate space for the scene list
// 3002             sceneList = zcl_mem_alloc( sceneCnt );
// 3003             if ( sceneList != NULL )
// 3004             {
// 3005               rsp.sceneCnt = sceneCnt;
// 3006               for ( i = 0; i < sceneCnt; i++ )
// 3007                 sceneList[i] = *pData++;
// 3008             }
// 3009           }
// 3010         }
// 3011 
// 3012         if ( pCBs->pfnSceneRsp )
// 3013         {
// 3014           rsp.srcAddr = &(pInMsg->msg->srcAddr);
// 3015           rsp.cmdID = pInMsg->hdr.commandID;
// 3016           rsp.sceneList = sceneList;
// 3017           rsp.scene = &scene;
// 3018 
// 3019           pCBs->pfnSceneRsp( &rsp);
// 3020         }
// 3021 
// 3022         if ( sceneList != NULL )
// 3023         {
// 3024           zcl_mem_free( sceneList );
// 3025         }
// 3026       }
// 3027       break;
// 3028 
// 3029     default:
// 3030       stat = ZFailure;
// 3031       break;
// 3032   }
// 3033 
// 3034   return ( stat );
// 3035 }
// 3036 #endif // ZCL_SCENES
// 3037 
// 3038 #ifdef ZCL_ON_OFF
// 3039 /*********************************************************************
// 3040  * @fn      zclGeneral_ProcessInCmdOnOff
// 3041  *
// 3042  * @brief   Process in the received On/Off Command.
// 3043  *
// 3044  * @param   pInMsg - pointer to the incoming message
// 3045  *
// 3046  * @return  ZStatus_t
// 3047  */
// 3048 static ZStatus_t zclGeneral_ProcessInOnOff( zclIncoming_t *pInMsg,
// 3049                                             zclGeneral_AppCallbacks_t *pCBs )
// 3050 {
// 3051   ZStatus_t stat = ZSuccess;
// 3052 
// 3053   if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
// 3054   {
// 3055     switch ( pInMsg->hdr.commandID )
// 3056     {
// 3057       case COMMAND_OFF:
// 3058       case COMMAND_ON:
// 3059       case COMMAND_TOGGLE:
// 3060         if ( pCBs->pfnOnOff )
// 3061         {
// 3062           pCBs->pfnOnOff( pInMsg->hdr.commandID );
// 3063         }
// 3064         break;
// 3065 
// 3066 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 3067       case COMMAND_OFF_WITH_EFFECT:
// 3068         if ( pCBs->pfnOnOff_OffWithEffect )
// 3069         {
// 3070           zclOffWithEffect_t cmd;
// 3071 
// 3072           cmd.srcAddr = &(pInMsg->msg->srcAddr);
// 3073           cmd.effectId = pInMsg->pData[0];
// 3074           cmd.effectVariant = pInMsg->pData[1];
// 3075 
// 3076           pCBs->pfnOnOff_OffWithEffect( &cmd );
// 3077         }
// 3078         break;
// 3079 
// 3080       case COMMAND_ON_WITH_RECALL_GLOBAL_SCENE:
// 3081         if ( pCBs->pfnOnOff_OnWithRecallGlobalScene )
// 3082         {
// 3083           pCBs->pfnOnOff_OnWithRecallGlobalScene();
// 3084         }
// 3085         break;
// 3086 
// 3087       case COMMAND_ON_WITH_TIMED_OFF:
// 3088         if ( pCBs->pfnOnOff_OnWithTimedOff )
// 3089         {
// 3090           zclOnWithTimedOff_t cmd;
// 3091 
// 3092           cmd.onOffCtrl.byte = pInMsg->pData[0];
// 3093           cmd.onTime = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
// 3094           cmd.offWaitTime = BUILD_UINT16( pInMsg->pData[3], pInMsg->pData[4] );
// 3095           pCBs->pfnOnOff_OnWithTimedOff( &cmd );
// 3096         }
// 3097         break;
// 3098 #endif // ZCL_LIGHT_LINK_ENHANCE
// 3099 
// 3100       default:
// 3101         stat = ZFailure;
// 3102         break;
// 3103     }
// 3104   }
// 3105   // no Client command
// 3106 
// 3107   return ( stat );
// 3108 }
// 3109 
// 3110 //static ZStatus_t zclGeneral_ProcessInOnOffTest( zclIncoming_t *pInMsg )
// 3111 //{
// 3112 //  ZStatus_t stat = ZSuccess;
// 3113 //  int8 cmdID;
// 3114 //
// 3115 //  cmdID = pInMsg->hdr.commandID;
// 3116 //  
// 3117 //  switch ( cmdID )				
// 3118 //  {
// 3119 //
// 3120 //    default:
// 3121 //      stat = ZFailure;
// 3122 //      break;
// 3123 //  }
// 3124 //  // no Client command
// 3125 //
// 3126 //  return ( stat );
// 3127 //}
// 3128 #endif // ZCL_ON_OFF
// 3129 
// 3130 #ifdef ZCL_LEVEL_CTRL
// 3131 /*********************************************************************
// 3132  * @fn      zclGeneral_ProcessInLevelControl
// 3133  *
// 3134  * @brief   Process in the received Level Control Command.
// 3135  *
// 3136  * @param   pInMsg - pointer to the incoming message
// 3137  *
// 3138  * @return  ZStatus_t
// 3139  */
// 3140 static ZStatus_t zclGeneral_ProcessInLevelControl( zclIncoming_t *pInMsg,
// 3141                                                    zclGeneral_AppCallbacks_t *pCBs )
// 3142 {
// 3143   uint8 withOnOff = FALSE;
// 3144   ZStatus_t stat = ZSuccess;
// 3145 
// 3146   if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
// 3147   {
// 3148     switch ( pInMsg->hdr.commandID )
// 3149     {
// 3150       case COMMAND_LEVEL_MOVE_TO_LEVEL_WITH_ON_OFF:
// 3151         withOnOff = TRUE;
// 3152         // fall through
// 3153       case COMMAND_LEVEL_MOVE_TO_LEVEL:
// 3154         if ( pCBs->pfnLevelControlMoveToLevel )
// 3155         {
// 3156           zclLCMoveToLevel_t cmd;
// 3157 
// 3158           cmd.level = pInMsg->pData[0];
// 3159 
// 3160           if ( ( cmd.level >= ATTR_LEVEL_MIN_LEVEL ) &&
// 3161                ( cmd.level <= ATTR_LEVEL_MAX_LEVEL ) )
// 3162           {
// 3163             cmd.transitionTime = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
// 3164             cmd.withOnOff = withOnOff;
// 3165 
// 3166             pCBs->pfnLevelControlMoveToLevel( &cmd );
// 3167           }
// 3168           else
// 3169           {
// 3170             // level range requested is invalid
// 3171             stat = ZCL_STATUS_INVALID_VALUE;
// 3172           }
// 3173         }
// 3174         break;
// 3175 
// 3176       case COMMAND_LEVEL_MOVE_WITH_ON_OFF:
// 3177         withOnOff = TRUE;
// 3178         // fall through
// 3179       case COMMAND_LEVEL_MOVE:
// 3180         if ( pCBs->pfnLevelControlMove )
// 3181         {
// 3182           zclLCMove_t cmd;
// 3183 
// 3184           cmd.moveMode = pInMsg->pData[0];
// 3185           cmd.rate = pInMsg->pData[1];
// 3186           cmd.withOnOff = withOnOff;
// 3187 
// 3188           pCBs->pfnLevelControlMove( &cmd );
// 3189         }
// 3190         break;
// 3191 
// 3192       case COMMAND_LEVEL_STEP_WITH_ON_OFF:
// 3193         withOnOff = TRUE;
// 3194         // fall through
// 3195       case COMMAND_LEVEL_STEP:
// 3196         if ( pCBs->pfnLevelControlStep )
// 3197         {
// 3198           zclLCStep_t cmd;
// 3199 
// 3200           cmd.stepMode = pInMsg->pData[0];
// 3201           cmd.amount =  pInMsg->pData[1];
// 3202           cmd.transitionTime = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
// 3203           cmd.withOnOff = withOnOff;
// 3204 
// 3205           pCBs->pfnLevelControlStep( &cmd );
// 3206         }
// 3207         break;
// 3208 
// 3209       case COMMAND_LEVEL_STOP:
// 3210       case COMMAND_LEVEL_STOP_WITH_ON_OFF:
// 3211         // Both Stop commands are identical
// 3212         if ( pCBs->pfnLevelControlStop )
// 3213         {
// 3214           pCBs->pfnLevelControlStop();
// 3215         }
// 3216         break;
// 3217 
// 3218       default:
// 3219         stat = ZFailure;
// 3220         break;
// 3221     }
// 3222   }
// 3223   // no Client command
// 3224 
// 3225   return ( stat );
// 3226 }
// 3227 #endif // ZCL_LEVEL_CTRL
// 3228 
// 3229 #ifdef ZCL_ALARMS
// 3230 /*********************************************************************
// 3231  * @fn      zclGeneral_AddAlarm
// 3232  *
// 3233  * @brief   Add an alarm for a cluster
// 3234  *
// 3235  * @param   endpoint -
// 3236  * @param   alarm - new alarm item
// 3237  *
// 3238  * @return  ZStatus_t
// 3239  */
// 3240 ZStatus_t zclGeneral_AddAlarm( uint8 endpoint, zclGeneral_Alarm_t *alarm )
// 3241 {
// 3242   zclGenAlarmItem_t *pNewItem;
// 3243   zclGenAlarmItem_t *pLoop;
// 3244 
// 3245   // Fill in the new profile list
// 3246   pNewItem = zcl_mem_alloc( sizeof( zclGenAlarmItem_t ) );
// 3247   if ( pNewItem == NULL )
// 3248     return ( ZMemError );
// 3249 
// 3250   // Fill in the plugin record.
// 3251   pNewItem->next = (zclGenAlarmItem_t *)NULL;
// 3252   pNewItem->endpoint =  endpoint;
// 3253   zcl_memcpy( (uint8*)(&pNewItem->alarm), (uint8*)alarm, sizeof ( zclGeneral_Alarm_t ) );
// 3254 
// 3255   // Find spot in list
// 3256   if (  zclGenAlarmTable == NULL )
// 3257   {
// 3258     zclGenAlarmTable = pNewItem;
// 3259   }
// 3260   else
// 3261   {
// 3262     // Look for end of list
// 3263     pLoop = zclGenAlarmTable;
// 3264     while ( pLoop->next != NULL )
// 3265       pLoop = pLoop->next;
// 3266 
// 3267     // Put new item at end of list
// 3268     pLoop->next = pNewItem;
// 3269   }
// 3270 
// 3271   return ( ZSuccess );
// 3272 }
// 3273 
// 3274 /*********************************************************************
// 3275  * @fn      zclGeneral_FindAlarm
// 3276  *
// 3277  * @brief   Find an alarm with alarmCode and clusterID
// 3278  *
// 3279  * @param   endpoint -
// 3280  * @param   groupID - what group the scene belongs to
// 3281  * @param   sceneID - ID to look for scene
// 3282  *
// 3283  * @return  a pointer to the alarm information, NULL if not found
// 3284  */
// 3285 zclGeneral_Alarm_t *zclGeneral_FindAlarm( uint8 endpoint, uint8 alarmCode, uint16 clusterID )
// 3286 {
// 3287   zclGenAlarmItem_t *pLoop;
// 3288 
// 3289   // Look for the alarm
// 3290   pLoop = zclGenAlarmTable;
// 3291   while ( pLoop )
// 3292   {
// 3293     if ( pLoop->endpoint == endpoint &&
// 3294          pLoop->alarm.code == alarmCode && pLoop->alarm.clusterID == clusterID )
// 3295     {
// 3296       return ( &(pLoop->alarm) );
// 3297     }
// 3298     pLoop = pLoop->next;
// 3299   }
// 3300 
// 3301   return ( (zclGeneral_Alarm_t *)NULL );
// 3302 }
// 3303 
// 3304 /*********************************************************************
// 3305  * @fn      zclGeneral_FindEarliestAlarm
// 3306  *
// 3307  * @brief   Find an alarm with the earliest timestamp
// 3308  *
// 3309  * @param   endpoint -
// 3310  *
// 3311  * @return  a pointer to the alarm information, NULL if not found
// 3312  */
// 3313 zclGeneral_Alarm_t *zclGeneral_FindEarliestAlarm( uint8 endpoint )
// 3314 {
// 3315   zclGenAlarmItem_t *pLoop;
// 3316   zclGenAlarmItem_t earliestAlarm;
// 3317   zclGenAlarmItem_t *pEarliestAlarm = &earliestAlarm;
// 3318 
// 3319   pEarliestAlarm->alarm.timeStamp = 0xFFFFFFFF;
// 3320 
// 3321   // Look for alarm with earliest time
// 3322   pLoop = zclGenAlarmTable;
// 3323   while ( pLoop )
// 3324   {
// 3325     if ( pLoop->endpoint == endpoint &&
// 3326          pLoop->alarm.timeStamp < pEarliestAlarm->alarm.timeStamp )
// 3327     {
// 3328       pEarliestAlarm = pLoop;
// 3329     }
// 3330     pLoop = pLoop->next;
// 3331   }
// 3332 
// 3333   if ( pEarliestAlarm->alarm.timeStamp != 0xFFFFFFFF )
// 3334     return ( &(pEarliestAlarm->alarm) );
// 3335 
// 3336   // No alarm
// 3337   return ( (zclGeneral_Alarm_t *)NULL );
// 3338 }
// 3339 
// 3340 /*********************************************************************
// 3341  * @fn      zclGeneral_ResetAlarm
// 3342  *
// 3343  * @brief   Remove an alarm with alarmCode and clusterID
// 3344  *
// 3345  * @param   endpoint -
// 3346  * @param   alarmCode -
// 3347  * @param   clusterID -
// 3348  *
// 3349  * @return  TRUE if removed, FALSE if not found
// 3350  */
// 3351 void zclGeneral_ResetAlarm( uint8 endpoint, uint8 alarmCode, uint16 clusterID )
// 3352 {
// 3353   zclGenAlarmItem_t *pLoop;
// 3354   zclGenAlarmItem_t *pPrev;
// 3355 
// 3356   // Look for end of list
// 3357   pLoop = zclGenAlarmTable;
// 3358   pPrev = NULL;
// 3359   while ( pLoop )
// 3360   {
// 3361     if ( pLoop->endpoint == endpoint &&
// 3362          pLoop->alarm.code == alarmCode && pLoop->alarm.clusterID == clusterID )
// 3363     {
// 3364       if ( pPrev == NULL )
// 3365         zclGenAlarmTable = pLoop->next;
// 3366       else
// 3367         pPrev->next = pLoop->next;
// 3368 
// 3369       // Free the memory
// 3370       zcl_mem_free( pLoop );
// 3371 
// 3372       // Notify the Application so that if the alarm condition still active then
// 3373       // a new notification will be generated, and a new alarm record will be
// 3374       // added to the alarm log
// 3375       // zclGeneral_NotifyReset( alarmCode, clusterID ); // callback function?
// 3376       return;
// 3377     }
// 3378     pPrev = pLoop;
// 3379     pLoop = pLoop->next;
// 3380   }
// 3381 }
// 3382 
// 3383 /*********************************************************************
// 3384  * @fn      zclGeneral_ResetAllAlarms
// 3385  *
// 3386  * @brief   Remove all alarms with endpoint
// 3387  *
// 3388  * @param   endpoint -
// 3389  * @param   notifyApp -
// 3390  *
// 3391  * @return  none
// 3392  */
// 3393 void zclGeneral_ResetAllAlarms( uint8 endpoint, uint8 notifyApp )
// 3394 {
// 3395   zclGenAlarmItem_t *pLoop;
// 3396   zclGenAlarmItem_t *pPrev;
// 3397   zclGenAlarmItem_t *pNext;
// 3398 
// 3399   // Look for end of list
// 3400   pLoop = zclGenAlarmTable;
// 3401   pPrev = NULL;
// 3402   while ( pLoop )
// 3403   {
// 3404     if (  pLoop->endpoint == endpoint )
// 3405     {
// 3406       if ( pPrev == NULL )
// 3407         zclGenAlarmTable = pLoop->next;
// 3408       else
// 3409         pPrev->next = pLoop->next;
// 3410 
// 3411       pNext = pLoop->next;
// 3412 
// 3413       // Free the memory
// 3414       zcl_mem_free( pLoop );
// 3415 
// 3416       pLoop = pNext;
// 3417     }
// 3418     else
// 3419     {
// 3420       pPrev = pLoop;
// 3421       pLoop = pLoop->next;
// 3422     }
// 3423   }
// 3424 
// 3425   if ( notifyApp )
// 3426   {
// 3427     // Notify the Application so that if any alarm conditions still active then
// 3428     // a new notification will be generated, and a new alarm record will be
// 3429     // added to the alarm log
// 3430     // zclGeneral_NotifyResetAll(); // callback function?
// 3431   }
// 3432 }
// 3433 
// 3434 /*********************************************************************
// 3435  * @fn      zclGeneral_ProcessInAlarmsServer
// 3436  *
// 3437  * @brief   Process in the received Alarms Command.
// 3438  *
// 3439  * @param   pInMsg - pointer to the incoming message
// 3440  *
// 3441  * @return  ZStatus_t
// 3442  */
// 3443 static ZStatus_t zclGeneral_ProcessInAlarmsServer( zclIncoming_t *pInMsg,
// 3444                                                    zclGeneral_AppCallbacks_t *pCBs )
// 3445 {
// 3446   zclAlarm_t alarm;
// 3447   zclGeneral_Alarm_t *pAlarm;
// 3448   uint8 *pData = pInMsg->pData;
// 3449   ZStatus_t stat = ZSuccess;
// 3450 
// 3451   switch ( pInMsg->hdr.commandID )
// 3452   {
// 3453     case COMMAND_ALARMS_RESET:
// 3454       if ( pCBs->pfnAlarm )
// 3455       {
// 3456         alarm.cmdID = pInMsg->hdr.commandID;
// 3457         alarm.alarmCode = pData[0];
// 3458         alarm.clusterID = BUILD_UINT16( pData[1], pData[2] );
// 3459 
// 3460         pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
// 3461       }
// 3462       else
// 3463       {
// 3464         stat = ZCL_STATUS_FAILURE;
// 3465       }
// 3466       break;
// 3467 
// 3468     case COMMAND_ALARMS_RESET_ALL:
// 3469       if ( pCBs->pfnAlarm )
// 3470       {
// 3471         alarm.cmdID = pInMsg->hdr.commandID;
// 3472 
// 3473         pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
// 3474       }
// 3475       else
// 3476       {
// 3477         stat = ZCL_STATUS_FAILURE;
// 3478       }
// 3479       break;
// 3480 
// 3481     case COMMAND_ALARMS_GET:
// 3482       if ( pCBs->pfnAlarm )
// 3483       {
// 3484         alarm.srcAddr = &(pInMsg->msg->srcAddr);
// 3485         alarm.cmdID = pInMsg->hdr.commandID;
// 3486 
// 3487         pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
// 3488 
// 3489         pAlarm = zclGeneral_FindEarliestAlarm( pInMsg->msg->endPoint );
// 3490         if ( pAlarm )
// 3491         {
// 3492           // Send a response back
// 3493           zclGeneral_SendAlarmGetResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 3494                                            ZCL_STATUS_SUCCESS, pAlarm->code,
// 3495                                            pAlarm->clusterID, pAlarm->timeStamp,
// 3496                                            true, pInMsg->hdr.transSeqNum );
// 3497           // Remove the entry from the Alarm table
// 3498           zclGeneral_ResetAlarm( pInMsg->msg->endPoint, pAlarm->code, pAlarm->clusterID );
// 3499         }
// 3500         else
// 3501         {
// 3502           // Send a response back
// 3503           zclGeneral_SendAlarmGetResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 3504                                            ZCL_STATUS_NOT_FOUND, 0, 0, 0,
// 3505                                            true, pInMsg->hdr.transSeqNum );
// 3506         }
// 3507         stat = ZCL_STATUS_CMD_HAS_RSP;
// 3508       }
// 3509       else
// 3510       {
// 3511         stat = ZCL_STATUS_FAILURE;
// 3512       }
// 3513       break;
// 3514 
// 3515     case COMMAND_ALARMS_RESET_LOG:
// 3516       if ( pCBs->pfnAlarm )
// 3517       {
// 3518         alarm.cmdID = pInMsg->hdr.commandID;
// 3519 
// 3520         pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
// 3521 
// 3522         zclGeneral_ResetAllAlarms( pInMsg->msg->endPoint, FALSE );
// 3523       }
// 3524       else
// 3525       {
// 3526         stat = ZCL_STATUS_FAILURE;
// 3527       }
// 3528       break;
// 3529 
// 3530 #ifdef SE_UK_EXT
// 3531     case COMMAND_ALARMS_PUBLISH_EVENT_LOG:
// 3532       if ( pCBs->pfnPublishEventLog )
// 3533       {
// 3534         zclPublishEventLog_t eventLog;
// 3535 
// 3536         eventLog.logID = *pData++;
// 3537         eventLog.cmdIndex = *pData++;
// 3538         eventLog.totalCmds = *pData++;
// 3539 
// 3540         // First try to find out number of Sub Log Payloads
// 3541         eventLog.numSubLogs = (pInMsg->pDataLen-3)/(1+4); // event ID + event time
// 3542         if ( eventLog.numSubLogs > 0 )
// 3543         {
// 3544           // Try to alloc space for Log Payload
// 3545           eventLog.pLogs = (zclEventLogPayload_t *)zcl_mem_alloc( sizeof( zclEventLogPayload_t ) *
// 3546                                                                    eventLog.numSubLogs );
// 3547           if ( eventLog.pLogs != NULL )
// 3548           {
// 3549             // Copy Log Payload
// 3550             for ( uint8 i = 0; i < eventLog.numSubLogs; i++ )
// 3551             {
// 3552               eventLog.pLogs[i].eventId = *pData++;
// 3553               eventLog.pLogs[i].eventTime = zcl_build_uint32( pData, 4 );
// 3554               pData += 4;
// 3555             }
// 3556           }
// 3557           else
// 3558           {
// 3559             stat = ZCL_STATUS_SOFTWARE_FAILURE;
// 3560           }
// 3561         }
// 3562         else
// 3563         {
// 3564           eventLog.pLogs = NULL;
// 3565         }
// 3566 
// 3567         if ( stat == ZSuccess )
// 3568         {
// 3569           pCBs->pfnPublishEventLog( &(pInMsg->msg->srcAddr), &eventLog );
// 3570         }
// 3571 
// 3572         if ( eventLog.pLogs != NULL )
// 3573         {
// 3574           zcl_mem_free( eventLog.pLogs );
// 3575         }
// 3576       }
// 3577       break;
// 3578 #endif // SE_UK_EXT
// 3579 
// 3580     default:
// 3581       stat = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
// 3582       break;
// 3583   }
// 3584 
// 3585   return ( stat );
// 3586 }
// 3587 
// 3588 /*********************************************************************
// 3589  * @fn      zclGeneral_ProcessInAlarmsClient
// 3590  *
// 3591  * @brief   Process in the received Alarms Command.
// 3592  *
// 3593  * @param   pInMsg - pointer to the incoming message
// 3594  *
// 3595  * @return  ZStatus_t
// 3596  */
// 3597 static ZStatus_t zclGeneral_ProcessInAlarmsClient( zclIncoming_t *pInMsg,
// 3598                                                    zclGeneral_AppCallbacks_t *pCBs )
// 3599 {
// 3600   uint8 *pData = pInMsg->pData;
// 3601   zclAlarm_t alarm;
// 3602   ZStatus_t stat = ZSuccess;
// 3603 
// 3604   zcl_memset( (uint8*)&alarm, 0, sizeof( zclAlarm_t ) );
// 3605 
// 3606   switch ( pInMsg->hdr.commandID )
// 3607   {
// 3608     case COMMAND_ALARMS_ALARM:
// 3609       if ( pCBs->pfnAlarm )
// 3610       {
// 3611         alarm.srcAddr = &(pInMsg->msg->srcAddr);
// 3612         alarm.cmdID = pInMsg->hdr.commandID;
// 3613         alarm.alarmCode = pData[0];
// 3614         alarm.clusterID = BUILD_UINT16( pData[1], pData[2] );
// 3615 
// 3616         pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
// 3617       }
// 3618       else
// 3619       {
// 3620         stat = ZCL_STATUS_FAILURE;
// 3621       }
// 3622       break;
// 3623 
// 3624     case COMMAND_ALARMS_GET_RSP:
// 3625       if ( pCBs->pfnAlarm )
// 3626       {
// 3627         alarm.srcAddr = &(pInMsg->msg->srcAddr);
// 3628         alarm.cmdID = pInMsg->hdr.commandID;
// 3629         alarm.alarmCode = *pData++;
// 3630         alarm.clusterID = BUILD_UINT16( pData[0], pData[1] );
// 3631 
// 3632         pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
// 3633       }
// 3634       else
// 3635       {
// 3636         stat = ZCL_STATUS_FAILURE;
// 3637       }
// 3638       break;
// 3639 
// 3640 #ifdef SE_UK_EXT
// 3641     case COMMAND_ALARMS_GET_EVENT_LOG:
// 3642       if ( pCBs->pfnGetEventLog )
// 3643       {
// 3644         zclGetEventLog_t eventLog;
// 3645 
// 3646         eventLog.logID = *pData++;
// 3647         eventLog.startTime = zcl_build_uint32( pData, 4 );
// 3648         pData += 4;
// 3649         eventLog.endTime = zcl_build_uint32( pData, 4 );
// 3650         pData += 4;
// 3651         eventLog.numEvents = *pData;
// 3652 
// 3653         pCBs->pfnGetEventLog( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 3654                               &eventLog, pInMsg->hdr.transSeqNum );
// 3655       }
// 3656       break;
// 3657 #endif // SE_UK_EXT
// 3658 
// 3659     default:
// 3660       stat = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
// 3661       break;
// 3662   }
// 3663 
// 3664   return ( stat );
// 3665 }
// 3666 #endif // ZCL_ALARMS
// 3667 
// 3668 #ifdef ZCL_LOCATION
// 3669 /*********************************************************************
// 3670  * @fn      zclGeneral_ProcessInLocationServer
// 3671  *
// 3672  * @brief   Process in the received Location Command.
// 3673  *
// 3674  * @param   pInMsg - pointer to the incoming message
// 3675  *
// 3676  * @return  ZStatus_t
// 3677  */
// 3678 static ZStatus_t zclGeneral_ProcessInLocationServer( zclIncoming_t *pInMsg,
// 3679                                                      zclGeneral_AppCallbacks_t *pCBs )
// 3680 {
// 3681   uint8 *pData = pInMsg->pData;
// 3682   zclLocation_t cmd;
// 3683   ZStatus_t stat = ZSuccess;
// 3684 
// 3685   zcl_memset( (uint8*)&cmd, 0, sizeof( zclLocation_t ) );
// 3686 
// 3687   switch ( pInMsg->hdr.commandID )
// 3688   {
// 3689     case COMMAND_LOCATION_SET_ABSOLUTE:
// 3690       cmd.un.absLoc.coordinate1 = BUILD_UINT16( pData[0], pData[1] );
// 3691       pData += 2;
// 3692       cmd.un.absLoc.coordinate2 = BUILD_UINT16( pData[0], pData[1] );
// 3693       pData += 2;
// 3694       cmd.un.absLoc.coordinate3 = BUILD_UINT16( pData[0], pData[1] );
// 3695       pData += 2;
// 3696       cmd.un.absLoc.power = BUILD_UINT16( pData[0], pData[1] );
// 3697       pData += 2;
// 3698       cmd.un.absLoc.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
// 3699 
// 3700       if ( pCBs->pfnLocation )
// 3701       {
// 3702         cmd.srcAddr = &(pInMsg->msg->srcAddr);
// 3703         cmd.cmdID = pInMsg->hdr.commandID;
// 3704 
// 3705         // Update the absolute location info
// 3706         pCBs->pfnLocation( &cmd );
// 3707       }
// 3708       break;
// 3709 
// 3710     case COMMAND_LOCATION_SET_DEV_CFG:
// 3711       cmd.un.devCfg.power = BUILD_UINT16( pData[0], pData[1] );
// 3712       pData += 2;
// 3713       cmd.un.devCfg.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
// 3714       pData += 2;
// 3715       cmd.un.devCfg.calcPeriod = BUILD_UINT16( pData[0], pData[1] );
// 3716       pData += 2;
// 3717       cmd.un.devCfg.numMeasurements = *pData++;
// 3718       cmd.un.devCfg.reportPeriod = BUILD_UINT16( pData[0], pData[1] );
// 3719 
// 3720       if ( pCBs->pfnLocation )
// 3721       {
// 3722         cmd.srcAddr = &(pInMsg->msg->srcAddr);
// 3723         cmd.cmdID = pInMsg->hdr.commandID;
// 3724 
// 3725         // Update the device configuration info
// 3726         pCBs->pfnLocation( &cmd );
// 3727       }
// 3728       break;
// 3729 
// 3730     case COMMAND_LOCATION_GET_DEV_CFG:
// 3731       cmd.un.ieeeAddr = pData;
// 3732 
// 3733       if ( pCBs->pfnLocation )
// 3734       {
// 3735         cmd.srcAddr = &(pInMsg->msg->srcAddr);
// 3736         cmd.cmdID = pInMsg->hdr.commandID;
// 3737         cmd.seqNum = pInMsg->hdr.transSeqNum;
// 3738 
// 3739         // Retreive the Device Configuration
// 3740         pCBs->pfnLocation( &cmd );
// 3741       }
// 3742       stat = ZCL_STATUS_CMD_HAS_RSP;
// 3743       break;
// 3744 
// 3745     case COMMAND_LOCATION_GET_DATA:
// 3746       cmd.un.loc.bitmap.locByte = *pData++;
// 3747       cmd.un.loc.numResponses = *pData++;
// 3748 
// 3749       if ( cmd.un.loc.brdcastResponse == 0 ) // command is sent as a unicast
// 3750         zcl_memcpy( cmd.un.loc.targetAddr, pData, 8 );
// 3751 
// 3752       if ( pCBs->pfnLocation )
// 3753       {
// 3754         cmd.srcAddr = &(pInMsg->msg->srcAddr);
// 3755         cmd.cmdID = pInMsg->hdr.commandID;
// 3756         cmd.seqNum = pInMsg->hdr.transSeqNum;
// 3757 
// 3758         // Retreive the Location Data
// 3759         pCBs->pfnLocation( &cmd );
// 3760       }
// 3761       stat = ZCL_STATUS_CMD_HAS_RSP;
// 3762       break;
// 3763 
// 3764     default:
// 3765       stat = ZFailure;
// 3766       break;
// 3767   }
// 3768 
// 3769   return ( stat );
// 3770 }
// 3771 
// 3772 /*********************************************************************
// 3773  * @fn      zclGeneral_ProcessInLocationDataRsp
// 3774  *
// 3775  * @brief   Process in the received Location Command.
// 3776  *
// 3777  * @param   pInMsg - pointer to the incoming message
// 3778  *
// 3779  * @return  ZStatus_t
// 3780  */
// 3781 static void zclGeneral_ProcessInLocationDataRsp( zclIncoming_t *pInMsg,
// 3782                                                  zclGeneral_AppCallbacks_t *pCBs )
// 3783 {
// 3784   uint8 *pData = pInMsg->pData;
// 3785   zclLocationRsp_t rsp;
// 3786 
// 3787   zcl_memset( (uint8*)&rsp, 0, sizeof( zclLocationRsp_t ) );
// 3788 
// 3789   if ( pCBs->pfnLocationRsp )
// 3790   {
// 3791     if ( pInMsg->hdr.commandID == COMMAND_LOCATION_DATA_RSP )
// 3792       rsp.un.loc.status = *pData++;
// 3793 
// 3794     if ( pInMsg->hdr.commandID != COMMAND_LOCATION_DATA_RSP ||
// 3795          rsp.un.loc.status == ZCL_STATUS_SUCCESS )
// 3796     {
// 3797       rsp.un.loc.data.type = *pData++;
// 3798       rsp.un.loc.data.absLoc.coordinate1 = BUILD_UINT16( pData[0], pData[1] );
// 3799       pData += 2;
// 3800       rsp.un.loc.data.absLoc.coordinate2 = BUILD_UINT16( pData[0], pData[1] );
// 3801       pData += 2;
// 3802 
// 3803       if ( locationType2D( rsp.un.loc.data.type ) == 0 )
// 3804       {
// 3805         rsp.un.loc.data.absLoc.coordinate3 = BUILD_UINT16( pData[0], pData[1] );
// 3806         pData += 2;
// 3807       }
// 3808 
// 3809       if ( pInMsg->hdr.commandID != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
// 3810       {
// 3811         rsp.un.loc.data.absLoc.power = BUILD_UINT16( pData[0], pData[1] );
// 3812         pData += 2;
// 3813         rsp.un.loc.data.absLoc.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
// 3814         pData += 2;
// 3815       }
// 3816 
// 3817       if ( locationTypeAbsolute( rsp.un.loc.data.type ) == 0 )
// 3818       {
// 3819         if ( pInMsg->hdr.commandID != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
// 3820           rsp.un.loc.data.calcLoc.locationMethod = *pData++;
// 3821 
// 3822         rsp.un.loc.data.calcLoc.qualityMeasure = *pData++;
// 3823         rsp.un.loc.data.calcLoc.locationAge = BUILD_UINT16( pData[0], pData[1] );
// 3824       }
// 3825     }
// 3826 
// 3827     rsp.srcAddr = &(pInMsg->msg->srcAddr);
// 3828     rsp.cmdID = pInMsg->hdr.commandID;
// 3829 
// 3830     // Notify the Application
// 3831     pCBs->pfnLocationRsp( &rsp );
// 3832   }
// 3833 }
// 3834 
// 3835 /*********************************************************************
// 3836  * @fn      zclGeneral_ProcessInLocationClient
// 3837  *
// 3838  * @brief   Process in the received Location Command.
// 3839  *
// 3840  * @param   pInMsg - pointer to the incoming message
// 3841  *
// 3842  * @return  ZStatus_t
// 3843  */
// 3844 static ZStatus_t zclGeneral_ProcessInLocationClient( zclIncoming_t *pInMsg,
// 3845                                                      zclGeneral_AppCallbacks_t *pCBs )
// 3846 {
// 3847   uint8 *pData = pInMsg->pData;
// 3848   zclLocationRsp_t rsp;
// 3849   ZStatus_t stat = ZSuccess;
// 3850 
// 3851   zcl_memset( (uint8*)&rsp, 0, sizeof( zclLocationRsp_t ) );
// 3852 
// 3853   switch ( pInMsg->hdr.commandID )
// 3854   {
// 3855     case COMMAND_LOCATION_DEV_CFG_RSP:
// 3856       if ( pCBs->pfnLocationRsp )
// 3857       {
// 3858         rsp.un.devCfg.status = *pData++;
// 3859         if ( rsp.un.devCfg.status == ZCL_STATUS_SUCCESS )
// 3860         {
// 3861           rsp.un.devCfg.data.power = BUILD_UINT16( pData[0], pData[1] );
// 3862           pData += 2;
// 3863           rsp.un.devCfg.data.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
// 3864           pData += 2;
// 3865           rsp.un.devCfg.data.calcPeriod = BUILD_UINT16( pData[0], pData[1] );
// 3866           pData += 2;
// 3867           rsp.un.devCfg.data.numMeasurements = *pData++;
// 3868           rsp.un.devCfg.data.reportPeriod = BUILD_UINT16( pData[0], pData[1] );
// 3869 
// 3870           rsp.srcAddr = &(pInMsg->msg->srcAddr);
// 3871           rsp.cmdID = pInMsg->hdr.commandID;
// 3872 
// 3873           // Notify the Application
// 3874           pCBs->pfnLocationRsp( &rsp );
// 3875         }
// 3876       }
// 3877       break;
// 3878 
// 3879     case COMMAND_LOCATION_DATA_RSP:
// 3880     case COMMAND_LOCATION_DATA_NOTIF:
// 3881     case COMMAND_LOCATION_COMPACT_DATA_NOTIF:
// 3882       zclGeneral_ProcessInLocationDataRsp( pInMsg, pCBs );
// 3883       break;
// 3884 
// 3885     case COMMAND_LOCATION_RSSI_PING:
// 3886       if ( pCBs->pfnLocationRsp )
// 3887       {
// 3888         rsp.un.locationType = *pData;
// 3889 
// 3890         rsp.srcAddr = &(pInMsg->msg->srcAddr);
// 3891         rsp.cmdID = pInMsg->hdr.commandID;
// 3892 
// 3893         // Notify the Application
// 3894         pCBs->pfnLocationRsp( &rsp );
// 3895       }
// 3896       break;
// 3897 
// 3898     default:
// 3899       stat = ZFailure;
// 3900       break;
// 3901   }
// 3902 
// 3903   return ( stat );
// 3904 }
// 3905 #endif // ZCL_LOCATION
// 3906 
// 3907 #ifdef ZCL_SCENES
// 3908 #if !defined ( ZCL_STANDALONE )
// 3909 /*********************************************************************
// 3910  * @fn      zclGeneral_ScenesInitNV
// 3911  *
// 3912  * @brief   Initialize the NV Scene Table Items
// 3913  *
// 3914  * @param   none
// 3915  *
// 3916  * @return  number of scenes
// 3917  */
// 3918 static uint8 zclGeneral_ScenesInitNV( void )
// 3919 {
// 3920   uint8  status;
// 3921   uint16 size;
// 3922 
// 3923   size = (uint16)((sizeof ( nvGenScenesHdr_t ))
// 3924                   + ( sizeof( zclGenSceneNVItem_t ) * ZCL_GEN_MAX_SCENES ));
// 3925 
// 3926   status = zcl_nv_item_init( ZCD_NV_SCENE_TABLE, size, NULL );
// 3927 
// 3928   if ( status != ZSUCCESS )
// 3929   {
// 3930     zclGeneral_ScenesSetDefaultNV();
// 3931   }
// 3932 
// 3933   return status;
// 3934 }
// 3935 #endif // ZCL_STANDALONE
// 3936 
// 3937 #if !defined ( ZCL_STANDALONE )
// 3938 /*********************************************************************
// 3939  * @fn          zclGeneral_ScenesSetDefaultNV
// 3940  *
// 3941  * @brief       Write the defaults to NV
// 3942  *
// 3943  * @param       none
// 3944  *
// 3945  * @return      none
// 3946  */
// 3947 static void zclGeneral_ScenesSetDefaultNV( void )
// 3948 {
// 3949   nvGenScenesHdr_t hdr;
// 3950 
// 3951   // Initialize the header
// 3952   hdr.numRecs = 0;
// 3953 
// 3954   // Save off the header
// 3955   zcl_nv_write( ZCD_NV_SCENE_TABLE, 0, sizeof( nvGenScenesHdr_t ), &hdr );
// 3956 }
// 3957 #endif // ZCL_STANDALONE
// 3958 
// 3959 #if !defined ( ZCL_STANDALONE )
// 3960 /*********************************************************************
// 3961  * @fn          zclGeneral_ScenesWriteNV
// 3962  *
// 3963  * @brief       Save the Scene Table in NV
// 3964  *
// 3965  * @param       none
// 3966  *
// 3967  * @return      none
// 3968  */
// 3969 static void zclGeneral_ScenesWriteNV( void )
// 3970 {
// 3971   nvGenScenesHdr_t hdr;
// 3972   zclGenSceneItem_t *pLoop;
// 3973   zclGenSceneNVItem_t item;
// 3974 
// 3975   hdr.numRecs = 0;
// 3976 
// 3977   // Look for end of list
// 3978   pLoop = zclGenSceneTable;
// 3979   while ( pLoop )
// 3980   {
// 3981     // Build the record
// 3982     item.endpoint = pLoop->endpoint;
// 3983     zcl_memcpy( &(item.scene), &(pLoop->scene), sizeof ( zclGeneral_Scene_t ) );
// 3984 
// 3985     // Save the record to NV
// 3986     zcl_nv_write( ZCD_NV_SCENE_TABLE,
// 3987             (uint16)((sizeof( nvGenScenesHdr_t )) + (hdr.numRecs * sizeof ( zclGenSceneNVItem_t ))),
// 3988                     sizeof ( zclGenSceneNVItem_t ), &item );
// 3989 
// 3990     hdr.numRecs++;
// 3991 
// 3992     pLoop = pLoop->next;
// 3993   }
// 3994 
// 3995   // Save off the header
// 3996   zcl_nv_write( ZCD_NV_SCENE_TABLE, 0, sizeof( nvGenScenesHdr_t ), &hdr );
// 3997 }
// 3998 #endif // ZCL_STANDALONE
// 3999 
// 4000 #if !defined ( ZCL_STANDALONE )
// 4001 /*********************************************************************
// 4002  * @fn          zclGeneral_ScenesRestoreFromNV
// 4003  *
// 4004  * @brief       Restore the Scene table from NV
// 4005  *
// 4006  * @param       none
// 4007  *
// 4008  * @return      Number of entries restored
// 4009  */
// 4010 static uint16 zclGeneral_ScenesRestoreFromNV( void )
// 4011 {
// 4012   uint16 x;
// 4013   nvGenScenesHdr_t hdr;
// 4014 
// 4015   zclGenSceneNVItem_t item;
// 4016   uint16 numAdded = 0;
// 4017 
// 4018   if ( zcl_nv_read( ZCD_NV_SCENE_TABLE, 0, sizeof(nvGenScenesHdr_t), &hdr ) == ZSuccess )
// 4019   {
// 4020     // Read in the device list
// 4021     for ( x = 0; x < hdr.numRecs; x++ )
// 4022     {
// 4023       if ( zcl_nv_read( ZCD_NV_SCENE_TABLE,
// 4024                 (uint16)(sizeof(nvGenScenesHdr_t) + (x * sizeof ( zclGenSceneNVItem_t ))),
// 4025                                   sizeof ( zclGenSceneNVItem_t ), &item ) == ZSUCCESS )
// 4026       {
// 4027         // Add the scene
// 4028         if ( zclGeneral_AddScene( item.endpoint, &(item.scene) ) == ZSuccess )
// 4029         {
// 4030           numAdded++;
// 4031         }
// 4032       }
// 4033     }
// 4034   }
// 4035 
// 4036   return ( numAdded );
// 4037 }
// 4038 #endif // ZCL_STANDALONE
// 4039 
// 4040 #if !defined ( ZCL_STANDALONE )
// 4041 /*********************************************************************
// 4042  * @fn          zclGeneral_ScenesInit
// 4043  *
// 4044  * @brief       Initialize the scenes table
// 4045  *
// 4046  * @param       none
// 4047  *
// 4048  * @return      none
// 4049  */
// 4050 void zclGeneral_ScenesInit( void )
// 4051 {
// 4052   // Initialize NV items
// 4053   zclGeneral_ScenesInitNV();
// 4054 
// 4055   // Restore the Scene table
// 4056   zclGeneral_ScenesRestoreFromNV();
// 4057 }
// 4058 #endif // ZCL_STANDALONE
// 4059 
// 4060 #if !defined ( ZCL_STANDALONE )
// 4061 /*********************************************************************
// 4062  * @fn          zclGeneral_ScenesSave
// 4063  *
// 4064  * @brief       Save the scenes table
// 4065  *
// 4066  * @param       none
// 4067  *
// 4068  * @return      none
// 4069  */
// 4070 void zclGeneral_ScenesSave( void )
// 4071 {
// 4072   // Update NV
// 4073   zclGeneral_ScenesWriteNV();
// 4074 }
// 4075 #endif // ZCL_STANDALONE
// 4076 
// 4077 #endif // ZCL_SCENES
// 4078 
// 4079 /***************************************************************************
// 4080 ****************************************************************************/
// 
// 3 750 bytes in segment BANKED_CODE
//    96 bytes in segment BANK_RELAYS
//     3 bytes in segment XDATA_Z
// 
//    96 bytes of CODE     memory
// 3 750 bytes of HUGECODE memory
//     3 bytes of XDATA    memory
//
//Errors: none
//Warnings: 1
