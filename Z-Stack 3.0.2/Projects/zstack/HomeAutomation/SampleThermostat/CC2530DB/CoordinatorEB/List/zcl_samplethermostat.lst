###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               16/Jul/2020  11:11:01
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\Source\zcl_samplethermostat.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EWC034.tmp ("D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\Source\zcl_samplethermostat.c"
#        -D ZCL_REPORT_DESTINATION_DEVICE -D BDB_REPORTING -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D
#        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_HVAC_CLUSTER -D ZCL_GROUPS -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\List\zcl_samplethermostat.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\Obj\zcl_samplethermostat.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\Source\zcl_samplethermostat.c
      1          /**************************************************************************************************
      2            Filename:       zcl_samplethermostat.c
      3            Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
      4            Revision:       $Revision: 40796 $
      5          
      6            Description:    Zigbee Cluster Library - sample device application.
      7          
      8          
      9            Copyright 2013 - 2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application implements a ZigBee Thermostat, based on Z-Stack 3.0.
     42          
     43            This application is based on the common sample-application user interface. Please see the main
     44            comment in zcl_sampleapp_ui.c. The rest of this comment describes only the content specific for
     45            this sample applicetion.
     46            
     47            Application-specific UI peripherals being used:
     48          
     49            - LEDs:
     50              LED1 on indicates that the system is currently heating or cooling.
     51              LED1 off indicates that the system is currently off.
     52          
     53            Application-specific menu system:
     54          
     55              <REMOTE TEMP> View the temperature of the remote temperature sensor
     56                Buttons have no affect on this screen
     57                This screen shows the following information:
     58                  Line2:
     59                    Shows the temperature of the remote temperature sensor
     60          
     61              <SET HEAT TEMP> Changes the heating point temperature
     62                Up/Down changes the temperature at which heating will activate
     63                This screen shows the following information:
     64                  Line2:
     65                    Shows current heating point temperature
     66          
     67              <SET COOL TEMP> Changes the cooling point temperature
     68                Up/Down changes the temperature at which cooling will activate
     69                This screen shows the following information:
     70                  Line2:
     71                    Shows current cooling point temperature
     72          
     73          *********************************************************************/
     74          
     75          /*********************************************************************
     76           * INCLUDES
     77           */
     78          #include "ZComDef.h"
     79          #include "OSAL.h"
     80          #include "AF.h"
     81          #include "ZDApp.h"
     82          #include "ZDObject.h"
     83          #include "MT_APP.h"
     84          #include "MT_SYS.h"
     85          
     86          #include "zcl.h"
     87          #include "zcl_general.h"
     88          #include "zcl_ha.h"
     89          #include "zcl_hvac.h"
     90          #include "zcl_ms.h"
     91          
     92          #include "zcl_samplethermostat.h"
     93          
     94          #include "bdb_interface.h"
     95          
     96          
     97          #include "onboard.h"
     98          
     99          /* HAL */
    100          #include "hal_lcd.h"
    101          #include "hal_led.h"
    102          #include "hal_key.h"
    103          
    104          
    105          /*********************************************************************
    106           * MACROS
    107           */
    108          
    109          #define GUI_REMOTE_TEMP    1
    110          #define GUI_SET_HEATING   2         
    111          #define GUI_SET_COOLING   3
    112          
    113          #define APP_TITLE "   Thermostat   "
    114          
    115          /*********************************************************************
    116           * CONSTANTS
    117           */
    118          
    119          /*********************************************************************
    120           * TYPEDEFS
    121           */
    122          
    123          /*********************************************************************
    124           * GLOBAL VARIABLES
    125           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    126          uint8 zclSampleThermostat_TaskID;
   \                     zclSampleThermostat_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    127          
    128          extern int16 zdpExternalStateTaskID;
    129          
    130          /*********************************************************************
    131           * GLOBAL FUNCTIONS
    132           */
    133          
    134          /*********************************************************************
    135           * LOCAL VARIABLES
    136           */
    137          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    138          devStates_t zclSampleThermostat_NwkState = DEV_INIT;
   \                     zclSampleThermostat_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleThermostat_NwkState`
   \   000001                REQUIRE __INIT_XDATA_I
    139          
    140          //static uint8 aProcessCmd[] = { 1, 0, 0, 0 }; // used for reset command, { length + cmd0 + cmd1 + data }
    141          
    142          // Test Endpoint to allow SYS_APP_MSGs
    143          /*
    144          static endPointDesc_t sampleThermostat_TestEp =
    145          {
    146            20,                                 // Test endpoint
    147            0,
    148            &zclSampleThermostat_TaskID,
    149            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    150            (afNetworkLatencyReq_t)0            // No Network Latency req
    151          };
    152          */
    153          
    154          #ifdef BDB_REPORTING
    155          #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 8
    156            uint8 reportableChange[] = {0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; // 0x2C01 is 300 in int16
    157          #endif
    158          #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 4

   \                                 In  segment XDATA_I, align 1, keep-with-next
    159            uint8 reportableChange[] = {0x2C, 0x01, 0x00, 0x00}; // 0x2C01 is 300 in int16
   \                     reportableChange:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for reportableChange>`
   \   000004                REQUIRE __INIT_XDATA_I
    160          #endif 
    161          #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 2
    162            uint8 reportableChange[] = {0x2C, 0x01}; // 0x2C01 is 300 in int16
    163          #endif 
    164          #endif
    165            
    166          /*********************************************************************
    167           * LOCAL FUNCTIONS
    168           */
    169          static void zclSampleThermostat_HandleKeys( byte shift, byte keys );
    170          static void zclSampleThermostat_BasicResetCB( void );
    171          #ifdef MT_APP_FUNC
    172          static void zclSampleThermostat_ProcessAppMsg( uint8 srcEP, uint8 len, uint8 *msg );
    173          static void zclSampleThermostat_ProcessFoundationMsg( afAddrType_t *dstAddr, uint16 clusterID,
    174                                                                zclFrameHdr_t *hdr, zclParseCmd_t *pParseCmd );
    175          #endif
    176          
    177          static void zclSampleThermostat_ProcessCommissioningStatus(bdbCommissioningModeMsg_t* bdbCommissioningModeMsg);
    178          
    179          
    180          // app display functions
    181          void zclSampleThermostat_LcdDisplayUpdate(void);
    182          void zclSampleThermostat_LcdDisplayMainMode(void);
    183          void zclSampleThermostat_LcdDisplayHeatMode(void);
    184          void zclSampleThermostat_LcdDisplayCoolMode(void);
    185          void zclSampleThermostat_LcdDisplayHelpMode(void);
    186          
    187          // Functions to process ZCL Foundation incoming Command/Response messages
    188          static void zclSampleThermostat_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    189          #ifdef ZCL_READ
    190          static uint8 zclSampleThermostat_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    191          #endif
    192          #ifdef ZCL_WRITE
    193          static uint8 zclSampleThermostat_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    194          #endif
    195          #ifdef ZCL_REPORT_DESTINATION_DEVICE
    196          static void zclSampleThermostat_ProcessInReportCmd( zclIncomingMsg_t *pInMsg );
    197          #endif  // ZCL_REPORT_DESTINATION_DEVICE
    198          static uint8 zclSampleThermostat_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    199          
    200          static void zclSampleThermostat_UpdateLedState(void);
    201          
    202          static void zclSampleApp_BatteryWarningCB( uint8 voltLevel);
    203          
    204          /*********************************************************************
    205           * STATUS STRINGS
    206           */
    207          
    208          /*********************************************************************
    209           * CONSTANTS
    210           */
    211          
    212          /*********************************************************************
    213           * ZCL General Profile Callback table
    214           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    215          static zclGeneral_AppCallbacks_t zclSampleThermostat_CmdCallbacks =
   \                     zclSampleThermostat_CmdCallbacks:
   \   000000                DS 18
   \   000012                REQUIRE `?<Initializer for zclSampleThermostat_CmdCallb`
   \   000012                REQUIRE __INIT_XDATA_I
    216          {
    217            zclSampleThermostat_BasicResetCB,            // Basic Cluster Reset command
    218            NULL,                                        // Identify Trigger Effect command
    219            NULL,             				                   // On/Off cluster command
    220            NULL,                                        // On/Off cluster enhanced command Off with Effect
    221            NULL,                                        // On/Off cluster enhanced command On with Recall Global Scene
    222            NULL,                                        // On/Off cluster enhanced command On with Timed Off
    223          #ifdef ZCL_LEVEL_CTRL
    224            NULL,                                        // Level Control Move to Level command
    225            NULL,                                        // Level Control Move command
    226            NULL,                                        // Level Control Step command
    227            NULL,                                        // Level Control Stop command
    228          #endif
    229          #ifdef ZCL_GROUPS
    230            NULL,                                        // Group Response commands
    231          #endif
    232          #ifdef ZCL_SCENES
    233            NULL,                                        // Scene Store Request command
    234            NULL,                                        // Scene Recall Request command
    235            NULL,                                        // Scene Response command
    236          #endif
    237          #ifdef ZCL_ALARMS
    238            NULL,                                        // Alarm (Response) commands
    239          #endif
    240          #ifdef SE_UK_EXT
    241            NULL,                                        // Get Event Log command
    242            NULL,                                        // Publish Event Log command
    243          #endif
    244            NULL,                                        // RSSI Location command
    245            NULL                                         // RSSI Location Response command
    246          };
    247          
    248          /*********************************************************************
    249           * @fn          zclSampleThermostat_Init
    250           *
    251           * @brief       Initialization function for the zclGeneral layer.
    252           *
    253           * @param       none
    254           *
    255           * @return      none
    256           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    257          void zclSampleThermostat_Init( byte task_id )
   \                     zclSampleThermostat_Init:
    258          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    259            zclSampleThermostat_TaskID = task_id;
   \   000006   90....       MOV       DPTR,#zclSampleThermostat_TaskID
   \   000009   F0           MOVX      @DPTR,A
    260          
    261            // Register the Simple Descriptor for this application
    262            bdb_RegisterSimpleDescriptor( &zclSampleThermostat_SimpleDesc );
   \   00000A                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   00000A   7A..         MOV       R2,#zclSampleThermostat_SimpleDesc & 0xff
   \   00000C   7B..         MOV       R3,#(zclSampleThermostat_SimpleDesc >> 8) & 0xff
   \   00000E   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    263          
    264            // Register the ZCL General Cluster Library callback functions
    265            zclGeneral_RegisterCmdCallbacks( SAMPLETHERMOSTAT_ENDPOINT, &zclSampleThermostat_CmdCallbacks );
   \   000011                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   000011   7A..         MOV       R2,#zclSampleThermostat_CmdCallbacks & 0xff
   \   000013   7B..         MOV       R3,#(zclSampleThermostat_CmdCallbacks >> 8) & 0xff
   \   000015   7908         MOV       R1,#0x8
   \   000017   12....       LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    266          
    267            // Register the application's attribute list
    268            zclSampleThermostat_ResetAttributesToDefaultValues();
   \   00001A                ; Setup parameters for call to function zclSampleThermostat_ResetAttributesToDefaultValues
   \   00001A   12....       LCALL     ??zclSampleThermostat_ResetAttributesToDefaultV; Banked call to: zclSampleThermostat_ResetAttributesToDefaultValues
    269            zcl_registerAttrList( SAMPLETHERMOSTAT_ENDPOINT, zclSampleThermostat_NumAttributes, zclSampleThermostat_Attrs );
   \   00001D                ; Setup parameters for call to function zcl_registerAttrList
   \   00001D   7C..         MOV       R4,#zclSampleThermostat_Attrs & 0xff
   \   00001F   7D..         MOV       R5,#(zclSampleThermostat_Attrs >> 8) & 0xff
   \   000021   90....       MOV       DPTR,#zclSampleThermostat_NumAttributes
   \   000024   E4           CLR       A
   \   000025   93           MOVC      A,@A+DPTR
   \   000026   FA           MOV       R2,A
   \   000027   7908         MOV       R1,#0x8
   \   000029   12....       LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    270          
    271            // Register the Application to receive the unprocessed Foundation command/response messages
    272            zcl_registerForMsg( zclSampleThermostat_TaskID );
   \   00002C                ; Setup parameters for call to function zcl_registerForMsg
   \   00002C   90....       MOV       DPTR,#zclSampleThermostat_TaskID
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F9           MOV       R1,A
   \   000031   12....       LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    273          
    274            // Register low voltage NV memory protection application callback
    275            RegisterVoltageWarningCB( zclSampleApp_BatteryWarningCB );
   \   000034                ; Setup parameters for call to function RegisterVoltageWarningCB
   \   000034   7A..         MOV       R2,#`??zclSampleApp_BatteryWarningCB::?relay` & 0xff
   \   000036   7B..         MOV       R3,#(`??zclSampleApp_BatteryWarningCB::?relay` >> 8) & 0xff
   \   000038   12....       LCALL     `??RegisterVoltageWarningCB::?relay`; Banked call to: RegisterVoltageWarningCB
    276          
    277            // Register for all key events - This app will handle all key events
    278            RegisterForKeys( zclSampleThermostat_TaskID );
   \   00003B                ; Setup parameters for call to function RegisterForKeys
   \   00003B   90....       MOV       DPTR,#zclSampleThermostat_TaskID
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F9           MOV       R1,A
   \   000040   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    279          
    280            bdb_RegisterCommissioningStatusCB( zclSampleThermostat_ProcessCommissioningStatus );
   \   000043                ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
   \   000043   7A..         MOV       R2,#??zclSampleThermostat_ProcessCommissioningStatu & 0xff
   \   000045   7B..         MOV       R3,#(??zclSampleThermostat_ProcessCommissioningStatu >> 8) & 0xff
   \   000047   12....       LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
    281          
    282          #ifdef BDB_REPORTING
    283            //Adds the default configuration values for the reportable attributes of the ZCL_CLUSTER_ID_HVAC_THERMOSTAT cluster, for endpoint SAMPLETHERMOSTAT_ENDPOINT
    284            //Default maxReportingInterval value is 10 seconds
    285            //Default minReportingInterval value is 3 seconds
    286            //Default reportChange value is 300 (3 degrees)
    287            bdb_RepAddAttrCfgRecordDefaultToList(SAMPLETHERMOSTAT_ENDPOINT, ZCL_CLUSTER_ID_HVAC_THERMOSTAT, ATTRID_HVAC_THERMOSTAT_LOCAL_TEMPERATURE, 0, 10, reportableChange);
   \   00004A                ; Setup parameters for call to function bdb_RepAddAttrCfgRecordDefaultToList
   \   00004A   75....       MOV       ?V0,#reportableChange & 0xff
   \   00004D   75....       MOV       ?V1,#(reportableChange >> 8) & 0xff
   \   000050   78..         MOV       R0,#?V0
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000055   75..0A       MOV       ?V0,#0xa
   \   000058   75..00       MOV       ?V1,#0x0
   \   00005B   78..         MOV       R0,#?V0
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000060   E4           CLR       A
   \   000061   F5..         MOV       ?V0,A
   \   000063   78..         MOV       R0,#?V0
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000068   7C00         MOV       R4,#0x0
   \   00006A   7D00         MOV       R5,#0x0
   \   00006C   7A01         MOV       R2,#0x1
   \   00006E   7B02         MOV       R3,#0x2
   \   000070   7908         MOV       R1,#0x8
   \   000072   12....       LCALL     `??bdb_RepAddAttrCfgRecordDefaultToList::?relay`; Banked call to: bdb_RepAddAttrCfgRecordDefaultToList
   \   000075   7406         MOV       A,#0x6
   \   000077   12....       LCALL     ?DEALLOC_XSTACK8
    288            bdb_RepAddAttrCfgRecordDefaultToList(SAMPLETHERMOSTAT_ENDPOINT, ZCL_CLUSTER_ID_HVAC_THERMOSTAT, ATTRID_HVAC_THERMOSTAT_PI_COOLING_DEMAND, 0, 10, reportableChange);
   \   00007A                ; Setup parameters for call to function bdb_RepAddAttrCfgRecordDefaultToList
   \   00007A   75....       MOV       ?V0,#reportableChange & 0xff
   \   00007D   75....       MOV       ?V1,#(reportableChange >> 8) & 0xff
   \   000080   78..         MOV       R0,#?V0
   \   000082   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000085   75..0A       MOV       ?V0,#0xa
   \   000088   75..00       MOV       ?V1,#0x0
   \   00008B   78..         MOV       R0,#?V0
   \   00008D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000090   E4           CLR       A
   \   000091   F5..         MOV       ?V0,A
   \   000093   78..         MOV       R0,#?V0
   \   000095   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000098   7C07         MOV       R4,#0x7
   \   00009A   7D00         MOV       R5,#0x0
   \   00009C   7A01         MOV       R2,#0x1
   \   00009E   7B02         MOV       R3,#0x2
   \   0000A0   7908         MOV       R1,#0x8
   \   0000A2   12....       LCALL     `??bdb_RepAddAttrCfgRecordDefaultToList::?relay`; Banked call to: bdb_RepAddAttrCfgRecordDefaultToList
   \   0000A5   7406         MOV       A,#0x6
   \   0000A7   12....       LCALL     ?DEALLOC_XSTACK8
    289            bdb_RepAddAttrCfgRecordDefaultToList(SAMPLETHERMOSTAT_ENDPOINT, ZCL_CLUSTER_ID_HVAC_THERMOSTAT, ATTRID_HVAC_THERMOSTAT_PI_HEATING_DEMAND, 0, 10, reportableChange);
   \   0000AA                ; Setup parameters for call to function bdb_RepAddAttrCfgRecordDefaultToList
   \   0000AA   75....       MOV       ?V0,#reportableChange & 0xff
   \   0000AD   75....       MOV       ?V1,#(reportableChange >> 8) & 0xff
   \   0000B0   78..         MOV       R0,#?V0
   \   0000B2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B5   75..0A       MOV       ?V0,#0xa
   \   0000B8   75..00       MOV       ?V1,#0x0
   \   0000BB   78..         MOV       R0,#?V0
   \   0000BD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C0   E4           CLR       A
   \   0000C1   F5..         MOV       ?V0,A
   \   0000C3   78..         MOV       R0,#?V0
   \   0000C5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C8   7C08         MOV       R4,#0x8
   \   0000CA   7D00         MOV       R5,#0x0
   \   0000CC   7A01         MOV       R2,#0x1
   \   0000CE   7B02         MOV       R3,#0x2
   \   0000D0   7908         MOV       R1,#0x8
   \   0000D2   12....       LCALL     `??bdb_RepAddAttrCfgRecordDefaultToList::?relay`; Banked call to: bdb_RepAddAttrCfgRecordDefaultToList
   \   0000D5   7406         MOV       A,#0x6
   \   0000D7   12....       LCALL     ?DEALLOC_XSTACK8
    290          #endif  
    291            
    292            zdpExternalStateTaskID = zclSampleThermostat_TaskID;
   \   0000DA   90....       MOV       DPTR,#zclSampleThermostat_TaskID
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   90....       MOV       DPTR,#zdpExternalStateTaskID
   \   0000E1   F0           MOVX      @DPTR,A
   \   0000E2   A3           INC       DPTR
   \   0000E3   E4           CLR       A
   \   0000E4   F0           MOVX      @DPTR,A
    293          }
   \   0000E5   7F02         MOV       R7,#0x2
   \   0000E7   02....       LJMP      ?BANKED_LEAVE_XDATA
    294          
    295          /*********************************************************************
    296           * @fn          zclSample_event_loop
    297           *
    298           * @brief       Event Loop Processor for zclGeneral.
    299           *
    300           * @param       none
    301           *
    302           * @return      none
    303           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    304          uint16 zclSampleThermostat_event_loop( uint8 task_id, uint16 events )
   \                     zclSampleThermostat_event_loop:
    305          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    306            afIncomingMSGPacket_t *MSGpkt;
    307          
    308            (void)task_id;  // Intentionally unreferenced parameter
    309          
    310            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL       A,#0x80
   \   00000B   702A         JNZ       ??zclSampleThermostat_event_loop_0
    311            {
    312              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleThermostat_TaskID )) )
    313              {
    314                switch ( MSGpkt->hdr.event )
    315                {
    316          #ifdef MT_APP_FUNC
    317                  case MT_SYS_APP_MSG:
    318                    // Message received from MT
    319                    zclSampleThermostat_ProcessAppMsg( ((mtSysAppMsg_t *)MSGpkt)->endpoint,
    320                                                    ((mtSysAppMsg_t *)MSGpkt)->appDataLen,
    321                                                    ((mtSysAppMsg_t *)MSGpkt)->appData );
    322          #endif
    323                    break;
    324          
    325                  case ZCL_INCOMING_MSG:
    326                    // Incoming ZCL Foundation command/response messages
    327                    zclSampleThermostat_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    328                    break;
    329          
    330                  case KEY_CHANGE:
    331                    zclSampleThermostat_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    332                    break;
    333          
    334                  case ZDO_STATE_CHANGE:
    335                    break;
    336          
    337                  default:
    338                    break;
    339                }
    340          
    341                // Release the memory
    342                osal_msg_deallocate( (uint8 *)MSGpkt );
    343              }
    344          
    345              // return unprocessed events
    346              return (events ^ SYS_EVENT_MSG);
    347            }
    348            
    349          #if ZG_BUILD_ENDDEVICE_TYPE    
    350            if ( events & SAMPLEAPP_END_DEVICE_REJOIN_EVT )
    351            {
    352              bdb_ZedAttemptRecoverNwk();
    353              return ( events ^ SAMPLEAPP_END_DEVICE_REJOIN_EVT );
    354            }
    355          #endif
    356            
    357            if ( events & SAMPLEAPP_LCD_AUTO_UPDATE_EVT )
   \   00000D   EA           MOV       A,R2
   \   00000E   5410         ANL       A,#0x10
   \   000010   6051         JZ        ??zclSampleThermostat_event_loop_1
    358            {
    359              return ( events ^ SAMPLEAPP_LCD_AUTO_UPDATE_EVT );
   \   000012   EA           MOV       A,R2
   \   000013   6410         XRL       A,#0x10
   \   000015   8054         SJMP      ??zclSampleThermostat_event_loop_2
    360            }
   \                     ??zclSampleThermostat_event_loop_3:
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   A2E5         MOV       C,0xE0 /* A   */.5
   \   00001D   5011         JNC       ??zclSampleThermostat_event_loop_4
   \   00001F                ; Setup parameters for call to function HalLedSet
   \   00001F   7A01         MOV       R2,#0x1
   \   000021   7902         MOV       R1,#0x2
   \   000023   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000026                ; Setup parameters for call to function bdb_StartCommissioning
   \   000026   790C         MOV       R1,#0xc
   \   000028   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
   \   00002B                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   00002B   79FF         MOV       R1,#-0x1
   \   00002D   12....       LCALL     `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \                     ??zclSampleThermostat_event_loop_4:
   \   000030                ; Setup parameters for call to function osal_msg_deallocate
   \   000030   AA..         MOV       R2,?V0
   \   000032   AB..         MOV       R3,?V1
   \   000034   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zclSampleThermostat_event_loop_0:
   \   000037                ; Setup parameters for call to function osal_msg_receive
   \   000037   90....       MOV       DPTR,#zclSampleThermostat_TaskID
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F9           MOV       R1,A
   \   00003C   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00003F   8A..         MOV       ?V0,R2
   \   000041   8B..         MOV       ?V1,R3
   \   000043   EA           MOV       A,R2
   \   000044   4B           ORL       A,R3
   \   000045   6014         JZ        ??zclSampleThermostat_event_loop_5
   \   000047   8A82         MOV       DPL,R2
   \   000049   8B83         MOV       DPH,R3
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   24CC         ADD       A,#-0x34
   \   00004E   6006         JZ        ??zclSampleThermostat_event_loop_6
   \   000050   2474         ADD       A,#0x74
   \   000052   60C3         JZ        ??zclSampleThermostat_event_loop_3
   \   000054   80DA         SJMP      ??zclSampleThermostat_event_loop_4
   \                     ??zclSampleThermostat_event_loop_6:
   \   000056                ; Setup parameters for call to function zclSampleThermostat_ProcessIncomingMsg
   \   000056   12....       LCALL     `??zclSampleThermostat_ProcessIncomingMsg::?rela`; Banked call to: zclSampleThermostat_ProcessIncomingMsg
   \   000059   80D5         SJMP      ??zclSampleThermostat_event_loop_4
   \                     ??zclSampleThermostat_event_loop_5:
   \   00005B   EE           MOV       A,R6
   \   00005C   FA           MOV       R2,A
   \   00005D   EF           MOV       A,R7
   \   00005E   6480         XRL       A,#0x80
   \   000060   FB           MOV       R3,A
   \   000061   800F         SJMP      ??zclSampleThermostat_event_loop_7
    361          
    362            if ( events & SAMPLEAPP_KEY_AUTO_REPEAT_EVT )
   \                     ??zclSampleThermostat_event_loop_1:
   \   000063   EA           MOV       A,R2
   \   000064   5420         ANL       A,#0x20
   \   000066   6006         JZ        ??zclSampleThermostat_event_loop_8
    363            {
    364              return ( events ^ SAMPLEAPP_KEY_AUTO_REPEAT_EVT );
   \   000068   EA           MOV       A,R2
   \   000069   6420         XRL       A,#0x20
   \                     ??zclSampleThermostat_event_loop_2:
   \   00006B   FA           MOV       R2,A
   \   00006C   8004         SJMP      ??zclSampleThermostat_event_loop_7
    365            }
    366          
    367            // Discard unknown events
    368            return 0;
   \                     ??zclSampleThermostat_event_loop_8:
   \   00006E   7A00         MOV       R2,#0x0
   \   000070   7B00         MOV       R3,#0x0
   \                     ??zclSampleThermostat_event_loop_7:
   \   000072   7F04         MOV       R7,#0x4
   \   000074   02....       LJMP      ?BANKED_LEAVE_XDATA
    369          }
    370          
    371          /*********************************************************************
    372           * @fn      zclSampleThermostat_HandleKeys
    373           *
    374           * @brief   Handles all key events for this device.
    375           *
    376           * @param   shift - true if in shift/alt.
    377           * @param   keys - bit field for key events. Valid entries:
    378           *                 HAL_KEY_SW_5
    379           *                 HAL_KEY_SW_4
    380           *                 HAL_KEY_SW_3
    381           *                 HAL_KEY_SW_2
    382           *                 HAL_KEY_SW_1
    383           *
    384           * @return  none
    385           */
    386          static void zclSampleThermostat_HandleKeys( byte shift, byte keys )
    387          {
    388            if ( keys & HAL_KEY_SW_6 ) //key1
    389            {
    390              HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
    391              bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_FORMATION | BDB_COMMISSIONING_MODE_FINDING_BINDING );  //Coordiinator
    392              NLME_PermitJoiningRequest( 0xff );
    393            }    
    394          }
    395          
    396          #ifdef MT_APP_FUNC
    397          
    398          /*********************************************************************
    399           * @fn      zclSampleThermostat_ProcessAppMsg
    400           *
    401           * @brief   Process DoorLock messages
    402           *
    403           * @param   srcEP - Sending Apps endpoint
    404           * @param   len - number of bytes
    405           * @param   msg - pointer to message
    406           *          0 - lo byte destination address
    407           *          1 - hi byte destination address
    408           *          2 - destination endpoint
    409           *          3 - lo byte cluster ID
    410           *          4 - hi byte cluster ID
    411           *          5 - message length
    412           *          6 - destination address mode (first byte of data)
    413           *          7 - zcl command frame
    414           *
    415           * @return  none
    416           */
    417          static void zclSampleThermostat_ProcessAppMsg( uint8 srcEP, uint8 len, uint8 *msg )
    418          {
    419            afAddrType_t dstAddr;
    420            uint16 clusterID;
    421            zclFrameHdr_t hdr;
    422            uint8 *pData;
    423            uint8 dataLen;
    424          
    425            dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
    426            msg += 2;
    427            dstAddr.endPoint = *msg++;
    428            clusterID = BUILD_UINT16( msg[0], msg[1] );
    429            msg += 2;
    430            dataLen = *msg++; // Length of message (Z-Tool can support up to 255 octets)
    431            dstAddr.addrMode = (afAddrMode_t)(*msg++);
    432            dataLen--; // Length of ZCL frame
    433          
    434            // Begining of ZCL frame
    435            pData = zclParseHdr( &hdr, msg );
    436            dataLen -= (uint8)( pData - msg );
    437          
    438            // Is this a foundation type message?
    439            if ( zcl_ProfileCmd( hdr.fc.type ) )
    440            {
    441              if ( hdr.fc.manuSpecific )
    442              {
    443                // We don't support any manufacturer specific command -- just forward it.
    444                zcl_SendCommand( srcEP, &dstAddr, clusterID, hdr.commandID, FALSE, ZCL_FRAME_CLIENT_SERVER_DIR,
    445                                 hdr.fc.disableDefaultRsp, hdr.manuCode, hdr.transSeqNum, dataLen, pData );
    446              }
    447              else
    448              {
    449                zclParseCmd_t cmd;
    450          
    451                cmd.endpoint = srcEP;
    452                cmd.dataLen = dataLen;
    453                cmd.pData = pData;
    454          
    455                zclSampleThermostat_ProcessFoundationMsg( &dstAddr, clusterID, &hdr, &cmd );
    456              }
    457            }
    458            else
    459            {
    460              // Nope, must be specific to the cluster ID
    461              if ( hdr.fc.manuSpecific )
    462              {
    463                // We don't support any manufacturer specific command -- just forward it.
    464                zcl_SendCommand( srcEP, &dstAddr, clusterID, hdr.commandID, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    465                                 hdr.fc.disableDefaultRsp, hdr.manuCode, hdr.transSeqNum, dataLen, pData );
    466              }
    467            }
    468          }
    469          
    470          /*********************************************************************
    471           * @fn      zclSampleThermostat_ProcessFoundationMsg
    472           *
    473           * @brief   Process Foundation message
    474           *
    475           * @param   srcEP - Sending Apps endpoint
    476           * @param   dstAddr - where to send the request
    477           * @param   clusterID - real cluster ID
    478           * @param   hdr - pointer to the message header
    479           * @param   len - length of the received message
    480           * @param   data - received message
    481           *
    482           * @return  none
    483           */
    484          static void zclSampleThermostat_ProcessFoundationMsg( afAddrType_t *dstAddr, uint16 clusterID,
    485                                                          zclFrameHdr_t *hdr, zclParseCmd_t *pParseCmd )
    486          {
    487          #if defined(ZCL_READ) || defined(ZCL_WRITE) || defined(ZCL_REPORT) || defined(ZCL_DISCOVER)
    488            void *cmd;
    489          #endif
    490          
    491            switch ( hdr->commandID )
    492            {
    493          #ifdef ZCL_READ
    494              case ZCL_CMD_READ:
    495                cmd = zclParseInReadCmd( pParseCmd );
    496                if ( cmd )
    497                {
    498                  zcl_SendRead( SAMPLETHERMOSTAT_ENDPOINT, dstAddr, clusterID, (zclReadCmd_t *)cmd,
    499                                ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
    500                  osal_mem_free( cmd );
    501                }
    502                break;
    503          #endif // ZCL_READ
    504          
    505          #ifdef ZCL_WRITE
    506              case ZCL_CMD_WRITE:
    507                cmd = zclParseInWriteCmd( pParseCmd );
    508                if ( cmd )
    509                {
    510                  zcl_SendWrite( SAMPLETHERMOSTAT_ENDPOINT, dstAddr, clusterID, (zclWriteCmd_t *)cmd,
    511                                 ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
    512                  osal_mem_free( cmd );
    513                }
    514                break;
    515          
    516              case ZCL_CMD_WRITE_UNDIVIDED:
    517                cmd = zclParseInWriteCmd( pParseCmd );
    518                if ( cmd )
    519                {
    520                  zcl_SendWriteUndivided( SAMPLETHERMOSTAT_ENDPOINT, dstAddr, clusterID, (zclWriteCmd_t *)cmd,
    521                                          ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
    522                  osal_mem_free( cmd );
    523                }
    524                break;
    525          
    526              case ZCL_CMD_WRITE_NO_RSP:
    527                cmd = zclParseInWriteCmd( pParseCmd );
    528                if ( cmd )
    529                {
    530                  zcl_SendWriteNoRsp( SAMPLETHERMOSTAT_ENDPOINT, dstAddr, clusterID, (zclWriteCmd_t *)cmd,
    531                                      ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
    532                  osal_mem_free( cmd );
    533                }
    534                break;
    535          #endif // ZCL_WRITE
    536          
    537          #ifdef ZCL_REPORT
    538              case ZCL_CMD_CONFIG_REPORT:
    539                cmd = zclParseInConfigReportCmd( pParseCmd );
    540                if ( cmd )
    541                {
    542                  zcl_SendConfigReportCmd( SAMPLETHERMOSTAT_ENDPOINT, dstAddr,  clusterID, (zclCfgReportCmd_t *)cmd,
    543                                           ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
    544                  osal_mem_free( cmd );
    545                }
    546                break;
    547          
    548              case ZCL_CMD_READ_REPORT_CFG:
    549                cmd = zclParseInReadReportCfgCmd( pParseCmd );
    550                if ( cmd )
    551                {
    552                  zcl_SendReadReportCfgCmd( SAMPLETHERMOSTAT_ENDPOINT, dstAddr, clusterID, (zclReadReportCfgCmd_t *)cmd,
    553                                            ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
    554                  osal_mem_free( cmd );
    555                }
    556                break;
    557          
    558              case ZCL_CMD_REPORT:
    559                cmd = zclParseInReportCmd( pParseCmd );
    560                if ( cmd )
    561                {
    562                  zcl_SendReportCmd( SAMPLETHERMOSTAT_ENDPOINT, dstAddr, clusterID, (zclReportCmd_t *)cmd,
    563                                     ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
    564                  osal_mem_free( cmd );
    565                }
    566                break;
    567          #endif // ZCL_REPORT
    568          #ifdef ZCL_DISCOVER
    569              case ZCL_CMD_DISCOVER_ATTRS:
    570                cmd = zclParseInDiscAttrsCmd( pParseCmd );
    571                if ( cmd )
    572                {
    573                  zcl_SendDiscoverAttrsCmd( SAMPLETHERMOSTAT_ENDPOINT, dstAddr, clusterID, (zclDiscoverAttrsCmd_t *)cmd,
    574                                            ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
    575                  osal_mem_free( cmd );
    576                }
    577                break;
    578          #endif // ZCL_DISCOVER
    579          
    580              default:
    581                // Unsupported command -- just forward it.
    582                zcl_SendCommand( pParseCmd->endpoint, dstAddr, clusterID, hdr->commandID, FALSE, ZCL_FRAME_CLIENT_SERVER_DIR,
    583                                 hdr->fc.disableDefaultRsp, 0, hdr->transSeqNum, pParseCmd->dataLen, pParseCmd->pData );
    584                break;
    585            }
    586          }
    587          
    588          #endif // MT_APP_FUNC
    589          
    590          /*********************************************************************
    591           * @fn      zclSampleThermostat_BasicResetCB
    592           *
    593           * @brief   Callback from the ZCL General Cluster Library
    594           *          to set all the Basic Cluster attributes to default values.
    595           *
    596           * @param   none
    597           *
    598           * @return  none
    599           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    600          static void zclSampleThermostat_BasicResetCB( void )
   \                     zclSampleThermostat_BasicResetCB:
    601          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    602            zclSampleThermostat_ResetAttributesToDefaultValues();
   \   000004                ; Setup parameters for call to function zclSampleThermostat_ResetAttributesToDefaultValues
   \   000004   12....       LCALL     ??zclSampleThermostat_ResetAttributesToDefaultV; Banked call to: zclSampleThermostat_ResetAttributesToDefaultValues
    603          
    604            zclSampleThermostat_UpdateLedState();
   \   000007                ; Setup parameters for call to function zclSampleThermostat_UpdateLedState
   \   000007   12....       LCALL     `??zclSampleThermostat_UpdateLedState::?relay`; Banked call to: zclSampleThermostat_UpdateLedState
    605          }
   \   00000A                REQUIRE ?Subroutine0
   \   00000A                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    606          
    607          /*********************************************************************
    608           * @fn      zclSampleApp_BatteryWarningCB
    609           *
    610           * @brief   Called to handle battery-low situation.
    611           *
    612           * @param   voltLevel - level of severity
    613           *
    614           * @return  none
    615           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    616          void zclSampleApp_BatteryWarningCB( uint8 voltLevel )
   \                     zclSampleApp_BatteryWarningCB:
    617          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    618            if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
    619            {
    620              // Send warning message to the gateway and blink LED
    621            }
    622            else if ( voltLevel == VOLT_LEVEL_BAD )
    623            {
    624              // Shut down the system
    625            }
    626          }
   \   000000   02....       LJMP      ?BRET
    627          
    628          /******************************************************************************
    629           *
    630           *  Functions for processing ZCL Foundation incoming Command/Response messages
    631           *
    632           *****************************************************************************/
    633          
    634          /*********************************************************************
    635           * @fn      zclSampleThermostat_ProcessIncomingMsg
    636           *
    637           * @brief   Process ZCL Foundation incoming message
    638           *
    639           * @param   pInMsg - pointer to the received message
    640           *
    641           * @return  none
    642           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    643          static void zclSampleThermostat_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg)
   \                     zclSampleThermostat_ProcessIncomingMsg:
    644          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    645            switch ( pInMsg->zclHdr.commandID )
   \   000005   EA           MOV       A,R2
   \   000006   2417         ADD       A,#0x17
   \   000008   FE           MOV       R6,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   FF           MOV       R7,A
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   14           DEC       A
   \   000019   600A         JZ        ??zclSampleThermostat_ProcessIncomingMsg_0
   \   00001B   24FD         ADD       A,#-0x3
   \   00001D   6013         JZ        ??zclSampleThermostat_ProcessIncomingMsg_1
   \   00001F   24FA         ADD       A,#-0x6
   \   000021   601C         JZ        ??zclSampleThermostat_ProcessIncomingMsg_2
   \   000023   8053         SJMP      ??zclSampleThermostat_ProcessIncomingMsg_3
    646            {
    647          #ifdef ZCL_READ
    648              case ZCL_CMD_READ_RSP:
    649                zclSampleThermostat_ProcessInReadRspCmd( pInMsg );
   \                     ??zclSampleThermostat_ProcessIncomingMsg_0:
   \   000025   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F9           MOV       R1,A
   \   00002A   E8           MOV       A,R0
   \   00002B   C3           CLR       C
   \   00002C   99           SUBB      A,R1
   \   00002D   5049         JNC       ??zclSampleThermostat_ProcessIncomingMsg_3
   \   00002F   08           INC       R0
   \   000030   80F6         SJMP      ??CrossCallReturnLabel_0
    650                break;
    651          #endif
    652          #ifdef ZCL_WRITE
    653              case ZCL_CMD_WRITE_RSP:
    654                zclSampleThermostat_ProcessInWriteRspCmd( pInMsg );
   \                     ??zclSampleThermostat_ProcessIncomingMsg_1:
   \   000032   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000035   E0           MOVX      A,@DPTR
   \   000036   F9           MOV       R1,A
   \   000037   E8           MOV       A,R0
   \   000038   C3           CLR       C
   \   000039   99           SUBB      A,R1
   \   00003A   503C         JNC       ??zclSampleThermostat_ProcessIncomingMsg_3
   \   00003C   08           INC       R0
   \   00003D   80F6         SJMP      ??CrossCallReturnLabel_1
    655                break;
    656          #endif
    657          #ifdef ZCL_REPORT
    658              case ZCL_CMD_CONFIG_REPORT:
    659                //zclSampleThermostat_ProcessInConfigReportCmd( pInMsg );
    660                break;
    661          
    662              case ZCL_CMD_CONFIG_REPORT_RSP:
    663                //zclSampleThermostat_ProcessInConfigReportRspCmd( pInMsg );
    664                break;
    665          
    666              case ZCL_CMD_READ_REPORT_CFG:
    667                //zclSampleThermostat_ProcessInReadReportCfgCmd( pInMsg );
    668                break;
    669          
    670              case ZCL_CMD_READ_REPORT_CFG_RSP:
    671                //zclSampleThermostat_ProcessInReadReportCfgRspCmd( pInMsg );
    672                break;
    673          #endif
    674          #ifdef ZCL_REPORT_DESTINATION_DEVICE
    675              case ZCL_CMD_REPORT:
    676                zclSampleThermostat_ProcessInReportCmd( pInMsg );
   \                     ??zclSampleThermostat_ProcessIncomingMsg_2:
   \   00003F                ; Setup parameters for call to function HalLedSet
   \   00003F   7A08         MOV       R2,#0x8
   \   000041   7904         MOV       R1,#0x4
   \   000043   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000046   8E82         MOV       DPL,R6
   \   000048   8F83         MOV       DPH,R7
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F8           MOV       R0,A
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   F9           MOV       R1,A
   \   00004F   8882         MOV       DPL,R0
   \   000051   F583         MOV       DPH,A
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   FA           MOV       R2,A
   \   000056   A3           INC       DPTR
   \   000057   E0           MOVX      A,@DPTR
   \   000058   FB           MOV       R3,A
   \   000059   EA           MOV       A,R2
   \   00005A   4B           ORL       A,R3
   \   00005B   701B         JNZ       ??zclSampleThermostat_ProcessIncomingMsg_3
   \   00005D   8882         MOV       DPL,R0
   \   00005F   8983         MOV       DPH,R1
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   12....       LCALL     ?Subroutine4 & 0xFFFF
    677                break;
    678          #endif
    679              case ZCL_CMD_DEFAULT_RSP:
    680                zclSampleThermostat_ProcessInDefaultRspCmd( pInMsg );
    681                break;
    682          
    683              default:
    684                break;
    685            }
   \                     ??CrossCallReturnLabel_4:
   \   000068   E0           MOVX      A,@DPTR
   \   000069   FA           MOV       R2,A
   \   00006A   A3           INC       DPTR
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   F9           MOV       R1,A
   \   00006D   EA           MOV       A,R2
   \   00006E   90....       MOV       DPTR,#zclSampleThermostat_LocalTemperature
   \   000071   F0           MOVX      @DPTR,A
   \   000072   A3           INC       DPTR
   \   000073   E9           MOV       A,R1
   \   000074   F0           MOVX      @DPTR,A
   \   000075                ; Setup parameters for call to function zclSampleThermostat_UpdateLedState
   \   000075   12....       LCALL     `??zclSampleThermostat_UpdateLedState::?relay`; Banked call to: zclSampleThermostat_UpdateLedState
    686          
    687            if ( pInMsg->attrCmd )
   \                     ??zclSampleThermostat_ProcessIncomingMsg_3:
   \   000078   8E82         MOV       DPL,R6
   \   00007A   8F83         MOV       DPH,R7
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   FA           MOV       R2,A
   \   00007E   A3           INC       DPTR
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   FB           MOV       R3,A
   \   000081   EA           MOV       A,R2
   \   000082   4B           ORL       A,R3
   \   000083   6003         JZ        ??zclSampleThermostat_ProcessIncomingMsg_4
    688            {
    689              osal_mem_free( pInMsg->attrCmd );
   \   000085                ; Setup parameters for call to function osal_mem_free
   \   000085   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    690            }
    691          }
   \                     ??zclSampleThermostat_ProcessIncomingMsg_4:
   \   000088                REQUIRE ?Subroutine1
   \   000088                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000007   7800         MOV       R0,#0x0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   8882         MOV       DPL,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET
    692          
    693          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    694          static void zclSampleThermostat_ProcessCommissioningStatus(bdbCommissioningModeMsg_t* bdbCommissioningModeMsg)
   \                     zclSampleThermostat_ProcessCommissioningStatus:
    695          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    696              switch(bdbCommissioningModeMsg->bdbCommissioningMode)
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   6402         XRL       A,#0x2
   \   000011   701B         JNZ       ??zclSampleThermostat_ProcessCommissioningStatu_1
    697              {
    698                case BDB_COMMISSIONING_FORMATION:
    699                  if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \   000013   8A82         MOV       DPL,R2
   \   000015   8B83         MOV       DPH,R3
   \   000017   E0           MOVX      A,@DPTR
   \   000018   7014         JNZ       ??zclSampleThermostat_ProcessCommissioningStatu_1
    700                  {
    701                    //After formation, perform nwk steering again plus the remaining commissioning modes that has not been process yet
    702                    HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
   \   00001A                ; Setup parameters for call to function HalLedSet
   \   00001A   7A01         MOV       R2,#0x1
   \   00001C   7901         MOV       R1,#0x1
   \   00001E   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    703                    bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
   \   000021                ; Setup parameters for call to function bdb_StartCommissioning
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   4402         ORL       A,#0x2
   \   00002A   F9           MOV       R1,A
   \   00002B   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    704                  }
    705                  else
    706                  {
    707                    //Want to try other channels?
    708                    //try with bdb_setChannelAttribute
    709                  }
    710                break;
    711                case BDB_COMMISSIONING_NWK_STEERING:
    712                  if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    713                  {
    714                    //YOUR JOB:
    715                    //We are on the nwk, what now?
    716                  }
    717                  else
    718                  {
    719                    //See the possible errors for nwk steering procedure
    720                    //No suitable networks found
    721                    //Want to try other channels?
    722                    //try with bdb_setChannelAttribute
    723                  }
    724                break;
    725                case BDB_COMMISSIONING_FINDING_BINDING:
    726                  if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    727                  {
    728                    //YOUR JOB:
    729                  }
    730                  else
    731                  {
    732                    //YOUR JOB:
    733                    //retry?, wait for user interaction?
    734                  }
    735                break;
    736                case BDB_COMMISSIONING_INITIALIZATION:
    737                  //Initialization notification can only be successful. Failure on initialization 
    738                  //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
    739                  
    740                  //YOUR JOB:
    741                  //We are on a network, what now?
    742                  
    743                break;
    744          #if ZG_BUILD_ENDDEVICE_TYPE    
    745              case BDB_COMMISSIONING_PARENT_LOST:
    746                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
    747                {
    748                  //We did recover from losing parent
    749                }
    750                else
    751                {
    752                  //Parent not found, attempt to rejoin again after a fixed delay
    753                  osal_start_timerEx(zclSampleThermostat_TaskID, SAMPLEAPP_END_DEVICE_REJOIN_EVT, SAMPLEAPP_END_DEVICE_REJOIN_DELAY);
    754                }
    755              break;
    756          #endif 
    757              }
    758          
    759          }
   \                     ??zclSampleThermostat_ProcessCommissioningStatu_1:
   \   00002E   80..         SJMP      ?Subroutine1
    760          
    761          
    762          #ifdef ZCL_READ
    763          /*********************************************************************
    764           * @fn      zclSampleThermostat_ProcessInReadRspCmd
    765           *
    766           * @brief   Process the "Profile" Read Response Command
    767           *
    768           * @param   pInMsg - incoming message to process
    769           *
    770           * @return  none
    771           */
    772          static uint8 zclSampleThermostat_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
    773          {
    774            zclReadRspCmd_t *readRspCmd;
    775            uint8 i;
    776          
    777            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
    778            for (i = 0; i < readRspCmd->numAttr; i++)
    779            {
    780              // Notify the originator of the results of the original read attributes
    781              // attempt and, for each successfull request, the value of the requested
    782              // attribute
    783            }
    784          
    785            return ( TRUE );
    786          }
    787          #endif // ZCL_READ
    788          
    789          #ifdef ZCL_WRITE
    790          /*********************************************************************
    791           * @fn      zclSampleThermostat_ProcessInWriteRspCmd
    792           *
    793           * @brief   Process the "Profile" Write Response Command
    794           *
    795           * @param   pInMsg - incoming message to process
    796           *
    797           * @return  none
    798           */
    799          static uint8 zclSampleThermostat_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
    800          {
    801            zclWriteRspCmd_t *writeRspCmd;
    802            uint8 i;
    803          
    804            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
    805            for (i = 0; i < writeRspCmd->numAttr; i++)
    806            {
    807              // Notify the device of the results of the its original write attributes
    808              // command.
    809            }
    810          
    811            return ( TRUE );
    812          }
    813          #endif // ZCL_WRITE
    814          
    815          #ifdef ZCL_REPORT_DESTINATION_DEVICE
    816          /*********************************************************************
    817           * @fn      zclSampleThermostat_ProcessInReportCmd
    818           *
    819           * @brief   Process the "Profile" Report Command
    820           *
    821           * @param   pInMsg - incoming message to process
    822           *
    823           * @return  none
    824           */
    825          static void zclSampleThermostat_ProcessInReportCmd( zclIncomingMsg_t *pInMsg )
    826          {
    827            HalLedSet ( HAL_LED_3, HAL_LED_MODE_TOGGLE );
    828            
    829            zclReportCmd_t *pInTempSensorReport;
    830            
    831            pInTempSensorReport = (zclReportCmd_t *)pInMsg->attrCmd;
    832          
    833            if ( pInTempSensorReport->attrList[0].attrID != ATTRID_MS_TEMPERATURE_MEASURED_VALUE )
    834            {
    835              return;
    836            }
    837            
    838            // store the current temperature value sent over the air from temperature sensor
    839            zclSampleThermostat_LocalTemperature = BUILD_UINT16(pInTempSensorReport->attrList[0].attrData[0], pInTempSensorReport->attrList[0].attrData[1]);
    840          
    841            zclSampleThermostat_UpdateLedState();
    842          }
    843          #endif  // ZCL_REPORT_DESTINATION_DEVICE
    844          
    845          /*********************************************************************
    846           * @fn      zclSampleThermostat_ProcessInDefaultRspCmd
    847           *
    848           * @brief   Process the "Profile" Default Response Command
    849           *
    850           * @param   pInMsg - incoming message to process
    851           *
    852           * @return  none
    853           */
    854          static uint8 zclSampleThermostat_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
    855          {
    856            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
    857          
    858            // Device is notified of the Default Response command.
    859            (void)pInMsg;
    860          
    861            return ( TRUE );
    862          }
    863          
    864          //static void zclSampleThermostat_UiActionSetHeating(uint16 keys)
    865          //{
    866          //  if ( keys & HAL_KEY_SW_1 )
    867          //  {
    868          //    // increase heating setpoint, considering whole numbers where necessary
    869          //    if ( zclSampleThermostat_OccupiedHeatingSetpoint < zclSampleThermostat_MaxHeatSetpointLimit )
    870          //    {
    871          //      zclSampleThermostat_OccupiedHeatingSetpoint = zclSampleThermostat_OccupiedHeatingSetpoint + 100;
    872          //    }
    873          //    else if ( zclSampleThermostat_OccupiedHeatingSetpoint >= zclSampleThermostat_MaxHeatSetpointLimit )
    874          //    {
    875          //      zclSampleThermostat_OccupiedHeatingSetpoint = zclSampleThermostat_MaxHeatSetpointLimit;
    876          //    }
    877          //  }
    878          //  
    879          //  if ( keys & HAL_KEY_SW_3 )
    880          //  {
    881          //    // decrease heating setpoint, considering whole numbers where necessary
    882          //    if ( zclSampleThermostat_OccupiedHeatingSetpoint > zclSampleThermostat_MinHeatSetpointLimit )
    883          //    {
    884          //      zclSampleThermostat_OccupiedHeatingSetpoint = zclSampleThermostat_OccupiedHeatingSetpoint - 100;
    885          //    }
    886          //    else if ( zclSampleThermostat_OccupiedHeatingSetpoint <= zclSampleThermostat_MinHeatSetpointLimit )
    887          //    {
    888          //      zclSampleThermostat_OccupiedHeatingSetpoint = zclSampleThermostat_MinHeatSetpointLimit;
    889          //    }
    890          //  }
    891          //  
    892          //  UI_UpdateLcd();
    893          //  zclSampleThermostat_UpdateLedState();
    894          //}
    895          //
    896          //static void zclSampleThermostat_UiActionSetCooling(uint16 keys)
    897          //{
    898          //  if ( keys & HAL_KEY_SW_1 )
    899          //  {
    900          //    // increase cooling setpoint, considering whole numbers where necessary
    901          //    if ( zclSampleThermostat_OccupiedCoolingSetpoint < zclSampleThermostat_MaxCoolSetpointLimit )
    902          //    {
    903          //      zclSampleThermostat_OccupiedCoolingSetpoint = zclSampleThermostat_OccupiedCoolingSetpoint + 100;
    904          //    }
    905          //    else if ( zclSampleThermostat_OccupiedCoolingSetpoint >= zclSampleThermostat_MaxCoolSetpointLimit )
    906          //    {
    907          //      zclSampleThermostat_OccupiedCoolingSetpoint = zclSampleThermostat_MaxCoolSetpointLimit;
    908          //    }
    909          //  }
    910          //  
    911          //  if ( keys & HAL_KEY_SW_3 )
    912          //  {
    913          //    // decrease cooling setpoint, considering whole numbers where necessary
    914          //    if ( zclSampleThermostat_OccupiedCoolingSetpoint > zclSampleThermostat_MinCoolSetpointLimit )
    915          //    {
    916          //      zclSampleThermostat_OccupiedCoolingSetpoint = zclSampleThermostat_OccupiedCoolingSetpoint - 100;
    917          //    }
    918          //    else if ( zclSampleThermostat_OccupiedCoolingSetpoint <= zclSampleThermostat_MinCoolSetpointLimit )
    919          //    {
    920          //      zclSampleThermostat_OccupiedCoolingSetpoint = zclSampleThermostat_MinCoolSetpointLimit;
    921          //    }
    922          //  }
    923          //  
    924          //  UI_UpdateLcd();
    925          //  zclSampleThermostat_UpdateLedState();
    926          //}
    927          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    928          void zclSampleThermostat_UpdateLedState(void)
   \                     zclSampleThermostat_UpdateLedState:
    929          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    930            // use LEDs to show heating or cooling cycles based off local temperature
    931            if ( zclSampleThermostat_LocalTemperature != NULL )
   \   000004   90....       MOV       DPTR,#zclSampleThermostat_LocalTemperature
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F9           MOV       R1,A
   \   00000C   E8           MOV       A,R0
   \   00000D   49           ORL       A,R1
   \   00000E   6037         JZ        ??zclSampleThermostat_UpdateLedState_0
    932            {
    933              if ( zclSampleThermostat_LocalTemperature <= zclSampleThermostat_OccupiedHeatingSetpoint )
   \   000010   7583..       MOV       DPH,#(zclSampleThermostat_OccupiedHeatingSetpoint >> 8) & 0xff
   \   000013   7582..       MOV       DPL,#zclSampleThermostat_OccupiedHeatingSetpoint & 0xff
   \   000016   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000019   4007         JC        ??zclSampleThermostat_UpdateLedState_1
    934              {
    935                // turn on heating
    936                zclSampleThermostat_SystemMode = HVAC_THERMOSTAT_SYSTEM_MODE_HEAT;
   \   00001B   90....       MOV       DPTR,#zclSampleThermostat_SystemMode
   \   00001E   7404         MOV       A,#0x4
   \   000020   8018         SJMP      ??zclSampleThermostat_UpdateLedState_2
    937                HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
    938              }
    939              else if ( zclSampleThermostat_LocalTemperature >= zclSampleThermostat_OccupiedCoolingSetpoint )
   \                     ??zclSampleThermostat_UpdateLedState_1:
   \   000022   90....       MOV       DPTR,#zclSampleThermostat_OccupiedCoolingSetpoint
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F8           MOV       R0,A
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F9           MOV       R1,A
   \   00002A   7583..       MOV       DPH,#(zclSampleThermostat_LocalTemperature >> 8) & 0xff
   \   00002D   7582..       MOV       DPL,#zclSampleThermostat_LocalTemperature & 0xff
   \   000030   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000033   90....       MOV       DPTR,#zclSampleThermostat_SystemMode
   \   000036   4007         JC        ??zclSampleThermostat_UpdateLedState_3
    940              {
    941                // turn on cooling
    942                zclSampleThermostat_SystemMode = HVAC_THERMOSTAT_SYSTEM_MODE_COOL;
   \   000038   7403         MOV       A,#0x3
   \                     ??zclSampleThermostat_UpdateLedState_2:
   \   00003A   F0           MOVX      @DPTR,A
    943                HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
   \   00003B                ; Setup parameters for call to function HalLedSet
   \   00003B   7A01         MOV       R2,#0x1
   \   00003D   8003         SJMP      ??zclSampleThermostat_UpdateLedState_4
    944              }
    945              else
    946              {
    947                // turn off heating/cooling
    948                zclSampleThermostat_SystemMode = HVAC_THERMOSTAT_SYSTEM_MODE_OFF;
   \                     ??zclSampleThermostat_UpdateLedState_3:
   \   00003F   E4           CLR       A
   \   000040   F0           MOVX      @DPTR,A
    949                HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
   \   000041                ; Setup parameters for call to function HalLedSet
   \   000041   FA           MOV       R2,A
   \                     ??zclSampleThermostat_UpdateLedState_4:
   \   000042   7901         MOV       R1,#0x1
   \   000044   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    950              }
    951            }
    952          }
   \                     ??zclSampleThermostat_UpdateLedState_0:
   \   000047   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   C3           CLR       C
   \   000001   E0           MOVX      A,@DPTR
   \   000002   98           SUBB      A,R0
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   99           SUBB      A,R1
   \   000006   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000008   65D0         XRL       A,PSW
   \   00000A   33           RLC       A
   \   00000B   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleThermostat_NwkState`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for reportableChange>`:
   \   000000   2C           DB 44
   \   000001   01           DB 1
   \   000002   00           DB 0
   \   000003   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleThermostat_CmdCallb`:
   \   000000   ....         DW `??zclSampleThermostat_BasicResetCB::?relay`
   \   000002   0000         DW 0H
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   0000         DW 0H
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H
    953          
    954          
    955          /****************************************************************************
    956          ****************************************************************************/
    957          
    958          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   zclSampleApp_BatteryWarningCB
      2      0   zclSampleThermostat_BasicResetCB
        2      0   -> zclSampleThermostat_ResetAttributesToDefaultValues
        2      0   -> zclSampleThermostat_UpdateLedState
      0     16   zclSampleThermostat_Init
        0     10   -> RegisterForKeys
        0     10   -> RegisterVoltageWarningCB
        0     10   -> bdb_RegisterCommissioningStatusCB
        0     10   -> bdb_RegisterSimpleDescriptor
        0     16   -> bdb_RepAddAttrCfgRecordDefaultToList
        0     10   -> zclGeneral_RegisterCmdCallbacks
        0     10   -> zclSampleThermostat_ResetAttributesToDefaultValues
        0     10   -> zcl_registerAttrList
        0     10   -> zcl_registerForMsg
      0      9   zclSampleThermostat_ProcessCommissioningStatus
        0      9   -> HalLedSet
        0      9   -> bdb_StartCommissioning
      0     21   zclSampleThermostat_ProcessIncomingMsg
        0      9   -> HalLedSet
        0      9   -> osal_mem_free
        0      9   -> zclSampleThermostat_UpdateLedState
      4      9   zclSampleThermostat_UpdateLedState
        2      0   -> HalLedSet
      0     12   zclSampleThermostat_event_loop
        0     12   -> HalLedSet
        0     12   -> NLME_PermitJoiningRequest
        0     12   -> bdb_StartCommissioning
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     12   -> zclSampleThermostat_ProcessIncomingMsg


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Initializer for reportableChange>
      18  ?<Initializer for zclSampleThermostat_CmdCallb
       1  ?<Initializer for zclSampleThermostat_NwkState
       7  ?Subroutine0
       5  ?Subroutine1
      10  ?Subroutine2
      12  ?Subroutine3
       9  ?Subroutine4
       4  reportableChange
       3  zclSampleApp_BatteryWarningCB
      10  zclSampleThermostat_BasicResetCB
      18  zclSampleThermostat_CmdCallbacks
     234  zclSampleThermostat_Init
       1  zclSampleThermostat_NwkState
      48  zclSampleThermostat_ProcessCommissioningStatus
     136  zclSampleThermostat_ProcessIncomingMsg
       1  zclSampleThermostat_TaskID
      74  zclSampleThermostat_UpdateLedState
     119  zclSampleThermostat_event_loop
      42  -- Other

 
 667 bytes in segment BANKED_CODE
  42 bytes in segment BANK_RELAYS
  23 bytes in segment XDATA_I
  23 bytes in segment XDATA_ID
   1 byte  in segment XDATA_Z
 
  65 bytes of CODE     memory
 667 bytes of HUGECODE memory
  24 bytes of XDATA    memory

Errors: none
Warnings: none
