###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               16/Jul/2020  23:49:45
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\Source\zcl_samplethermostat.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW6536.tmp ("D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\Source\zcl_samplethermostat.c"
#        -D ZCL_REPORT_DESTINATION_DEVICE -D BDB_REPORTING -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D
#        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_HVAC_CLUSTER -D ZCL_GROUPS -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\List\zcl_samplethermostat.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\Obj\zcl_samplethermostat.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\SampleThermostat\Source\zcl_samplethermostat.c
      1          /**************************************************************************************************
      2            Filename:       zcl_samplethermostat.c
      3            Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
      4            Revision:       $Revision: 40796 $
      5          
      6            Description:    Zigbee Cluster Library - sample device application.
      7          
      8          
      9            Copyright 2013 - 2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application implements a ZigBee Thermostat, based on Z-Stack 3.0.
     42          
     43            This application is based on the common sample-application user interface. Please see the main
     44            comment in zcl_sampleapp_ui.c. The rest of this comment describes only the content specific for
     45            this sample applicetion.
     46            
     47            Application-specific UI peripherals being used:
     48          
     49            - LEDs:
     50              LED1 on indicates that the system is currently heating or cooling.
     51              LED1 off indicates that the system is currently off.
     52          
     53            Application-specific menu system:
     54          
     55              <REMOTE TEMP> View the temperature of the remote temperature sensor
     56                Buttons have no affect on this screen
     57                This screen shows the following information:
     58                  Line2:
     59                    Shows the temperature of the remote temperature sensor
     60          
     61              <SET HEAT TEMP> Changes the heating point temperature
     62                Up/Down changes the temperature at which heating will activate
     63                This screen shows the following information:
     64                  Line2:
     65                    Shows current heating point temperature
     66          
     67              <SET COOL TEMP> Changes the cooling point temperature
     68                Up/Down changes the temperature at which cooling will activate
     69                This screen shows the following information:
     70                  Line2:
     71                    Shows current cooling point temperature
     72          
     73          *********************************************************************/
     74          
     75          /*********************************************************************
     76           * INCLUDES
     77           */
     78          #include "ZComDef.h"
     79          #include "OSAL.h"
     80          #include "AF.h"
     81          #include "ZDApp.h"
     82          #include "ZDObject.h"
     83          #include "MT_APP.h"
     84          #include "MT_SYS.h"
     85          
     86          #include "zcl.h"
     87          #include "zcl_general.h"
     88          #include "zcl_ha.h"
     89          #include "zcl_hvac.h"
     90          #include "zcl_ms.h"
     91          
     92          #include "zcl_samplethermostat.h"
     93          
     94          #include "bdb_interface.h"
     95          
     96          
     97          #include "onboard.h"
     98          
     99          /* UART */
    100          #include "uart0.h"
    101          #include "user_printf.h"
    102          
    103          /* HAL */
    104          #include "hal_lcd.h"
    105          #include "hal_led.h"
    106          #include "hal_key.h"
    107          
    108          
    109          /*********************************************************************
    110           * MACROS
    111           */
    112          
    113          #define GUI_REMOTE_TEMP    1
    114          #define GUI_SET_HEATING   2         
    115          #define GUI_SET_COOLING   3
    116          
    117          #define APP_TITLE "   Thermostat   "
    118          
    119          /*********************************************************************
    120           * CONSTANTS
    121           */
    122          
    123          /*********************************************************************
    124           * TYPEDEFS
    125           */
    126          
    127          /*********************************************************************
    128           * GLOBAL VARIABLES
    129           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    130          uint8 zclSampleThermostat_TaskID;
   \                     zclSampleThermostat_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    131          
    132          extern int16 zdpExternalStateTaskID;
    133          
    134          /*********************************************************************
    135           * GLOBAL FUNCTIONS
    136           */
    137          
    138          /*********************************************************************
    139           * LOCAL VARIABLES
    140           */
    141          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    142          devStates_t zclSampleThermostat_NwkState = DEV_INIT;
   \                     zclSampleThermostat_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleThermostat_NwkState`
   \   000001                REQUIRE __INIT_XDATA_I
    143          
    144          //static uint8 aProcessCmd[] = { 1, 0, 0, 0 }; // used for reset command, { length + cmd0 + cmd1 + data }
    145          
    146          // Test Endpoint to allow SYS_APP_MSGs
    147          /*
    148          static endPointDesc_t sampleThermostat_TestEp =
    149          {
    150            20,                                 // Test endpoint
    151            0,
    152            &zclSampleThermostat_TaskID,
    153            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    154            (afNetworkLatencyReq_t)0            // No Network Latency req
    155          };
    156          */
    157          
    158          #ifdef BDB_REPORTING
    159          #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 8
    160            uint8 reportableChange[] = {0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; // 0x2C01 is 300 in int16
    161          #endif
    162          #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 4

   \                                 In  segment XDATA_I, align 1, keep-with-next
    163            uint8 reportableChange[] = {0x2C, 0x01, 0x00, 0x00}; // 0x2C01 is 300 in int16
   \                     reportableChange:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for reportableChange>`
   \   000004                REQUIRE __INIT_XDATA_I
    164          #endif 
    165          #if BDBREPORTING_MAX_ANALOG_ATTR_SIZE == 2
    166            uint8 reportableChange[] = {0x2C, 0x01}; // 0x2C01 is 300 in int16
    167          #endif 
    168          #endif
    169            
    170          /*********************************************************************
    171           * LOCAL FUNCTIONS
    172           */
    173          static void zclSampleThermostat_HandleKeys( byte shift, byte keys );
    174          static void zclSampleThermostat_BasicResetCB( void );
    175          #ifdef MT_APP_FUNC
    176          static void zclSampleThermostat_ProcessAppMsg( uint8 srcEP, uint8 len, uint8 *msg );
    177          static void zclSampleThermostat_ProcessFoundationMsg( afAddrType_t *dstAddr, uint16 clusterID,
    178                                                                zclFrameHdr_t *hdr, zclParseCmd_t *pParseCmd );
    179          #endif
    180          
    181          static void zclSampleThermostat_ProcessCommissioningStatus(bdbCommissioningModeMsg_t* bdbCommissioningModeMsg);
    182          
    183          
    184          // app display functions
    185          void zclSampleThermostat_LcdDisplayUpdate(void);
    186          void zclSampleThermostat_LcdDisplayMainMode(void);
    187          void zclSampleThermostat_LcdDisplayHeatMode(void);
    188          void zclSampleThermostat_LcdDisplayCoolMode(void);
    189          void zclSampleThermostat_LcdDisplayHelpMode(void);
    190          
    191          // Functions to process ZCL Foundation incoming Command/Response messages
    192          static void zclSampleThermostat_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    193          #ifdef ZCL_READ
    194          static uint8 zclSampleThermostat_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    195          #endif
    196          #ifdef ZCL_WRITE
    197          static uint8 zclSampleThermostat_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    198          #endif
    199          #ifdef ZCL_REPORT_DESTINATION_DEVICE
    200          static void zclSampleThermostat_ProcessInReportCmd( zclIncomingMsg_t *pInMsg );
    201          #endif  // ZCL_REPORT_DESTINATION_DEVICE
    202          static uint8 zclSampleThermostat_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    203          
    204          static void zclSampleThermostat_UpdateLedState(void);
    205          
    206          static void zclSampleApp_BatteryWarningCB( uint8 voltLevel);
    207          
    208          /*********************************************************************
    209           * STATUS STRINGS
    210           */
    211          
    212          /*********************************************************************
    213           * CONSTANTS
    214           */
    215          
    216          /*********************************************************************
    217           * ZCL General Profile Callback table
    218           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    219          static zclGeneral_AppCallbacks_t zclSampleThermostat_CmdCallbacks =
   \                     zclSampleThermostat_CmdCallbacks:
   \   000000                DS 18
   \   000012                REQUIRE `?<Initializer for zclSampleThermostat_CmdCallb`
   \   000012                REQUIRE __INIT_XDATA_I
    220          {
    221            zclSampleThermostat_BasicResetCB,            // Basic Cluster Reset command
    222            NULL,                                        // Identify Trigger Effect command
    223            NULL,             				                   // On/Off cluster command
    224            NULL,                                        // On/Off cluster enhanced command Off with Effect
    225            NULL,                                        // On/Off cluster enhanced command On with Recall Global Scene
    226            NULL,                                        // On/Off cluster enhanced command On with Timed Off
    227          #ifdef ZCL_LEVEL_CTRL
    228            NULL,                                        // Level Control Move to Level command
    229            NULL,                                        // Level Control Move command
    230            NULL,                                        // Level Control Step command
    231            NULL,                                        // Level Control Stop command
    232          #endif
    233          #ifdef ZCL_GROUPS
    234            NULL,                                        // Group Response commands
    235          #endif
    236          #ifdef ZCL_SCENES
    237            NULL,                                        // Scene Store Request command
    238            NULL,                                        // Scene Recall Request command
    239            NULL,                                        // Scene Response command
    240          #endif
    241          #ifdef ZCL_ALARMS
    242            NULL,                                        // Alarm (Response) commands
    243          #endif
    244          #ifdef SE_UK_EXT
    245            NULL,                                        // Get Event Log command
    246            NULL,                                        // Publish Event Log command
    247          #endif
    248            NULL,                                        // RSSI Location command
    249            NULL                                         // RSSI Location Response command
    250          };
    251          
    252          /*********************************************************************
    253           * @fn          zclSampleThermostat_Init
    254           *
    255           * @brief       Initialization function for the zclGeneral layer.
    256           *
    257           * @param       none
    258           *
    259           * @return      none
    260           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    261          void zclSampleThermostat_Init( byte task_id )
   \                     zclSampleThermostat_Init:
    262          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    263            zclSampleThermostat_TaskID = task_id;
   \   000006   90....       MOV       DPTR,#zclSampleThermostat_TaskID
   \   000009   F0           MOVX      @DPTR,A
    264          
    265            //Initialize the Uart0
    266            Uart0_Init(HAL_UART_BR_115200);
   \   00000A                ; Setup parameters for call to function Uart0_Init
   \   00000A   7904         MOV       R1,#0x4
   \   00000C   12....       LCALL     `??Uart0_Init::?relay`; Banked call to: Uart0_Init
    267            
    268            // Register the Simple Descriptor for this application
    269            bdb_RegisterSimpleDescriptor( &zclSampleThermostat_SimpleDesc );
   \   00000F                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   00000F   7A..         MOV       R2,#zclSampleThermostat_SimpleDesc & 0xff
   \   000011   7B..         MOV       R3,#(zclSampleThermostat_SimpleDesc >> 8) & 0xff
   \   000013   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    270          
    271            // Register the ZCL General Cluster Library callback functions
    272            zclGeneral_RegisterCmdCallbacks( SAMPLETHERMOSTAT_ENDPOINT, &zclSampleThermostat_CmdCallbacks );
   \   000016                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   000016   7A..         MOV       R2,#zclSampleThermostat_CmdCallbacks & 0xff
   \   000018   7B..         MOV       R3,#(zclSampleThermostat_CmdCallbacks >> 8) & 0xff
   \   00001A   7908         MOV       R1,#0x8
   \   00001C   12....       LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    273          
    274            // Register the application's attribute list
    275            zclSampleThermostat_ResetAttributesToDefaultValues();
   \   00001F                ; Setup parameters for call to function zclSampleThermostat_ResetAttributesToDefaultValues
   \   00001F   12....       LCALL     ??zclSampleThermostat_ResetAttributesToDefaultV; Banked call to: zclSampleThermostat_ResetAttributesToDefaultValues
    276            zcl_registerAttrList( SAMPLETHERMOSTAT_ENDPOINT, zclSampleThermostat_NumAttributes, zclSampleThermostat_Attrs );
   \   000022                ; Setup parameters for call to function zcl_registerAttrList
   \   000022   7C..         MOV       R4,#zclSampleThermostat_Attrs & 0xff
   \   000024   7D..         MOV       R5,#(zclSampleThermostat_Attrs >> 8) & 0xff
   \   000026   90....       MOV       DPTR,#zclSampleThermostat_NumAttributes
   \   000029   E4           CLR       A
   \   00002A   93           MOVC      A,@A+DPTR
   \   00002B   FA           MOV       R2,A
   \   00002C   7908         MOV       R1,#0x8
   \   00002E   12....       LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    277          
    278            // Register the Application to receive the unprocessed Foundation command/response messages
    279            zcl_registerForMsg( zclSampleThermostat_TaskID );
   \   000031                ; Setup parameters for call to function zcl_registerForMsg
   \   000031   90....       MOV       DPTR,#zclSampleThermostat_TaskID
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F9           MOV       R1,A
   \   000036   12....       LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    280          
    281            // Register low voltage NV memory protection application callback
    282            RegisterVoltageWarningCB( zclSampleApp_BatteryWarningCB );
   \   000039                ; Setup parameters for call to function RegisterVoltageWarningCB
   \   000039   7A..         MOV       R2,#`??zclSampleApp_BatteryWarningCB::?relay` & 0xff
   \   00003B   7B..         MOV       R3,#(`??zclSampleApp_BatteryWarningCB::?relay` >> 8) & 0xff
   \   00003D   12....       LCALL     `??RegisterVoltageWarningCB::?relay`; Banked call to: RegisterVoltageWarningCB
    283          
    284            // Register for all key events - This app will handle all key events
    285            RegisterForKeys( zclSampleThermostat_TaskID );
   \   000040                ; Setup parameters for call to function RegisterForKeys
   \   000040   90....       MOV       DPTR,#zclSampleThermostat_TaskID
   \   000043   E0           MOVX      A,@DPTR
   \   000044   F9           MOV       R1,A
   \   000045   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    286          
    287            bdb_RegisterCommissioningStatusCB( zclSampleThermostat_ProcessCommissioningStatus );
   \   000048                ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
   \   000048   7A..         MOV       R2,#??zclSampleThermostat_ProcessCommissioningStatu & 0xff
   \   00004A   7B..         MOV       R3,#(??zclSampleThermostat_ProcessCommissioningStatu >> 8) & 0xff
   \   00004C   12....       LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
    288          
    289          #ifdef BDB_REPORTING
    290            //Adds the default configuration values for the reportable attributes of the ZCL_CLUSTER_ID_HVAC_THERMOSTAT cluster, for endpoint SAMPLETHERMOSTAT_ENDPOINT
    291            //Default maxReportingInterval value is 10 seconds
    292            //Default minReportingInterval value is 3 seconds
    293            //Default reportChange value is 300 (3 degrees)
    294            bdb_RepAddAttrCfgRecordDefaultToList(SAMPLETHERMOSTAT_ENDPOINT, ZCL_CLUSTER_ID_HVAC_THERMOSTAT, ATTRID_HVAC_THERMOSTAT_LOCAL_TEMPERATURE, 0, 10, reportableChange);
   \   00004F                ; Setup parameters for call to function bdb_RepAddAttrCfgRecordDefaultToList
   \   00004F   75....       MOV       ?V0,#reportableChange & 0xff
   \   000052   75....       MOV       ?V1,#(reportableChange >> 8) & 0xff
   \   000055   78..         MOV       R0,#?V0
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005A   75..0A       MOV       ?V0,#0xa
   \   00005D   75..00       MOV       ?V1,#0x0
   \   000060   78..         MOV       R0,#?V0
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000065   E4           CLR       A
   \   000066   F5..         MOV       ?V0,A
   \   000068   78..         MOV       R0,#?V0
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006D   7C00         MOV       R4,#0x0
   \   00006F   7D00         MOV       R5,#0x0
   \   000071   7A01         MOV       R2,#0x1
   \   000073   7B02         MOV       R3,#0x2
   \   000075   7908         MOV       R1,#0x8
   \   000077   12....       LCALL     `??bdb_RepAddAttrCfgRecordDefaultToList::?relay`; Banked call to: bdb_RepAddAttrCfgRecordDefaultToList
   \   00007A   7406         MOV       A,#0x6
   \   00007C   12....       LCALL     ?DEALLOC_XSTACK8
    295            bdb_RepAddAttrCfgRecordDefaultToList(SAMPLETHERMOSTAT_ENDPOINT, ZCL_CLUSTER_ID_HVAC_THERMOSTAT, ATTRID_HVAC_THERMOSTAT_PI_COOLING_DEMAND, 0, 10, reportableChange);
   \   00007F                ; Setup parameters for call to function bdb_RepAddAttrCfgRecordDefaultToList
   \   00007F   75....       MOV       ?V0,#reportableChange & 0xff
   \   000082   75....       MOV       ?V1,#(reportableChange >> 8) & 0xff
   \   000085   78..         MOV       R0,#?V0
   \   000087   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008A   75..0A       MOV       ?V0,#0xa
   \   00008D   75..00       MOV       ?V1,#0x0
   \   000090   78..         MOV       R0,#?V0
   \   000092   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000095   E4           CLR       A
   \   000096   F5..         MOV       ?V0,A
   \   000098   78..         MOV       R0,#?V0
   \   00009A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009D   7C07         MOV       R4,#0x7
   \   00009F   7D00         MOV       R5,#0x0
   \   0000A1   7A01         MOV       R2,#0x1
   \   0000A3   7B02         MOV       R3,#0x2
   \   0000A5   7908         MOV       R1,#0x8
   \   0000A7   12....       LCALL     `??bdb_RepAddAttrCfgRecordDefaultToList::?relay`; Banked call to: bdb_RepAddAttrCfgRecordDefaultToList
   \   0000AA   7406         MOV       A,#0x6
   \   0000AC   12....       LCALL     ?DEALLOC_XSTACK8
    296            bdb_RepAddAttrCfgRecordDefaultToList(SAMPLETHERMOSTAT_ENDPOINT, ZCL_CLUSTER_ID_HVAC_THERMOSTAT, ATTRID_HVAC_THERMOSTAT_PI_HEATING_DEMAND, 0, 10, reportableChange);
   \   0000AF                ; Setup parameters for call to function bdb_RepAddAttrCfgRecordDefaultToList
   \   0000AF   75....       MOV       ?V0,#reportableChange & 0xff
   \   0000B2   75....       MOV       ?V1,#(reportableChange >> 8) & 0xff
   \   0000B5   78..         MOV       R0,#?V0
   \   0000B7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BA   75..0A       MOV       ?V0,#0xa
   \   0000BD   75..00       MOV       ?V1,#0x0
   \   0000C0   78..         MOV       R0,#?V0
   \   0000C2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C5   E4           CLR       A
   \   0000C6   F5..         MOV       ?V0,A
   \   0000C8   78..         MOV       R0,#?V0
   \   0000CA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CD   7C08         MOV       R4,#0x8
   \   0000CF   7D00         MOV       R5,#0x0
   \   0000D1   7A01         MOV       R2,#0x1
   \   0000D3   7B02         MOV       R3,#0x2
   \   0000D5   7908         MOV       R1,#0x8
   \   0000D7   12....       LCALL     `??bdb_RepAddAttrCfgRecordDefaultToList::?relay`; Banked call to: bdb_RepAddAttrCfgRecordDefaultToList
   \   0000DA   7406         MOV       A,#0x6
   \   0000DC   12....       LCALL     ?DEALLOC_XSTACK8
    297          #endif  
    298            
    299            zdpExternalStateTaskID = zclSampleThermostat_TaskID;
   \   0000DF   90....       MOV       DPTR,#zclSampleThermostat_TaskID
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   90....       MOV       DPTR,#zdpExternalStateTaskID
   \   0000E6   F0           MOVX      @DPTR,A
   \   0000E7   A3           INC       DPTR
   \   0000E8   E4           CLR       A
   \   0000E9   F0           MOVX      @DPTR,A
    300          
    301            printf("init successful\r\n");
   \   0000EA                ; Setup parameters for call to function printf
   \   0000EA   7A..         MOV       R2,#`?<Constant "init successful\\r\\n">` & 0xff
   \   0000EC   7B..         MOV       R3,#(`?<Constant "init successful\\r\\n">` >> 8) & 0xff
   \   0000EE   12....       LCALL     `??printf::?relay`; Banked call to: printf
    302          }
   \   0000F1   7F02         MOV       R7,#0x2
   \   0000F3   02....       LJMP      ?BANKED_LEAVE_XDATA
    303          
    304          /*********************************************************************
    305           * @fn          zclSample_event_loop
    306           *
    307           * @brief       Event Loop Processor for zclGeneral.
    308           *
    309           * @param       none
    310           *
    311           * @return      none
    312           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    313          uint16 zclSampleThermostat_event_loop( uint8 task_id, uint16 events )
   \                     zclSampleThermostat_event_loop:
    314          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    315            afIncomingMSGPacket_t *MSGpkt;
    316          
    317            (void)task_id;  // Intentionally unreferenced parameter
    318          
    319            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL       A,#0x80
   \   00000B   702A         JNZ       ??zclSampleThermostat_event_loop_0
    320            {
    321              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleThermostat_TaskID )) )
    322              {
    323                switch ( MSGpkt->hdr.event )
    324                {
    325          #ifdef MT_APP_FUNC
    326                  case MT_SYS_APP_MSG:
    327                    // Message received from MT
    328                    zclSampleThermostat_ProcessAppMsg( ((mtSysAppMsg_t *)MSGpkt)->endpoint,
    329                                                    ((mtSysAppMsg_t *)MSGpkt)->appDataLen,
    330                                                    ((mtSysAppMsg_t *)MSGpkt)->appData );
    331          #endif
    332                    break;
    333          
    334                  case ZCL_INCOMING_MSG:
    335                    // Incoming ZCL Foundation command/response messages
    336                    zclSampleThermostat_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    337                    break;
    338          
    339                  case KEY_CHANGE:
    340                    zclSampleThermostat_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    341                    break;
    342          
    343                  case ZDO_STATE_CHANGE:
    344                    break;
    345          
    346                  default:
    347                    break;
    348                }
    349          
    350                // Release the memory
    351                osal_msg_deallocate( (uint8 *)MSGpkt );
    352              }
    353          
    354              // return unprocessed events
    355              return (events ^ SYS_EVENT_MSG);
    356            }
    357            
    358          #if ZG_BUILD_ENDDEVICE_TYPE    
    359            if ( events & SAMPLEAPP_END_DEVICE_REJOIN_EVT )
    360            {
    361              bdb_ZedAttemptRecoverNwk();
    362              return ( events ^ SAMPLEAPP_END_DEVICE_REJOIN_EVT );
    363            }
    364          #endif
    365            
    366            if ( events & SAMPLEAPP_LCD_AUTO_UPDATE_EVT )
   \   00000D   EA           MOV       A,R2
   \   00000E   5410         ANL       A,#0x10
   \   000010   6051         JZ        ??zclSampleThermostat_event_loop_1
    367            {
    368              return ( events ^ SAMPLEAPP_LCD_AUTO_UPDATE_EVT );
   \   000012   EA           MOV       A,R2
   \   000013   6410         XRL       A,#0x10
   \   000015   8054         SJMP      ??zclSampleThermostat_event_loop_2
    369            }
   \                     ??zclSampleThermostat_event_loop_3:
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   A2E5         MOV       C,0xE0 /* A   */.5
   \   00001D   5011         JNC       ??zclSampleThermostat_event_loop_4
   \   00001F                ; Setup parameters for call to function HalLedSet
   \   00001F   7A01         MOV       R2,#0x1
   \   000021   7902         MOV       R1,#0x2
   \   000023   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000026                ; Setup parameters for call to function bdb_StartCommissioning
   \   000026   790C         MOV       R1,#0xc
   \   000028   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
   \   00002B                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   00002B   79FF         MOV       R1,#-0x1
   \   00002D   12....       LCALL     `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \                     ??zclSampleThermostat_event_loop_4:
   \   000030                ; Setup parameters for call to function osal_msg_deallocate
   \   000030   AA..         MOV       R2,?V0
   \   000032   AB..         MOV       R3,?V1
   \   000034   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zclSampleThermostat_event_loop_0:
   \   000037                ; Setup parameters for call to function osal_msg_receive
   \   000037   90....       MOV       DPTR,#zclSampleThermostat_TaskID
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F9           MOV       R1,A
   \   00003C   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00003F   8A..         MOV       ?V0,R2
   \   000041   8B..         MOV       ?V1,R3
   \   000043   EA           MOV       A,R2
   \   000044   4B           ORL       A,R3
   \   000045   6014         JZ        ??zclSampleThermostat_event_loop_5
   \   000047   8A82         MOV       DPL,R2
   \   000049   8B83         MOV       DPH,R3
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   24CC         ADD       A,#-0x34
   \   00004E   6006         JZ        ??zclSampleThermostat_event_loop_6
   \   000050   2474         ADD       A,#0x74
   \   000052   60C3         JZ        ??zclSampleThermostat_event_loop_3
   \   000054   80DA         SJMP      ??zclSampleThermostat_event_loop_4
   \                     ??zclSampleThermostat_event_loop_6:
   \   000056                ; Setup parameters for call to function zclSampleThermostat_ProcessIncomingMsg
   \   000056   12....       LCALL     `??zclSampleThermostat_ProcessIncomingMsg::?rela`; Banked call to: zclSampleThermostat_ProcessIncomingMsg
   \   000059   80D5         SJMP      ??zclSampleThermostat_event_loop_4
   \                     ??zclSampleThermostat_event_loop_5:
   \   00005B   EE           MOV       A,R6
   \   00005C   FA           MOV       R2,A
   \   00005D   EF           MOV       A,R7
   \   00005E   6480         XRL       A,#0x80
   \   000060   FB           MOV       R3,A
   \   000061   800F         SJMP      ??zclSampleThermostat_event_loop_7
    370          
    371            if ( events & SAMPLEAPP_KEY_AUTO_REPEAT_EVT )
   \                     ??zclSampleThermostat_event_loop_1:
   \   000063   EA           MOV       A,R2
   \   000064   5420         ANL       A,#0x20
   \   000066   6006         JZ        ??zclSampleThermostat_event_loop_8
    372            {
    373              return ( events ^ SAMPLEAPP_KEY_AUTO_REPEAT_EVT );
   \   000068   EA           MOV       A,R2
   \   000069   6420         XRL       A,#0x20
   \                     ??zclSampleThermostat_event_loop_2:
   \   00006B   FA           MOV       R2,A
   \   00006C   8004         SJMP      ??zclSampleThermostat_event_loop_7
    374            }
    375          
    376            // Discard unknown events
    377            return 0;
   \                     ??zclSampleThermostat_event_loop_8:
   \   00006E   7A00         MOV       R2,#0x0
   \   000070   7B00         MOV       R3,#0x0
   \                     ??zclSampleThermostat_event_loop_7:
   \   000072   7F04         MOV       R7,#0x4
   \   000074   02....       LJMP      ?BANKED_LEAVE_XDATA
    378          }
    379          
    380          /*********************************************************************
    381           * @fn      zclSampleThermostat_HandleKeys
    382           *
    383           * @brief   Handles all key events for this device.
    384           *
    385           * @param   shift - true if in shift/alt.
    386           * @param   keys - bit field for key events. Valid entries:
    387           *                 HAL_KEY_SW_5
    388           *                 HAL_KEY_SW_4
    389           *                 HAL_KEY_SW_3
    390           *                 HAL_KEY_SW_2
    391           *                 HAL_KEY_SW_1
    392           *
    393           * @return  none
    394           */
    395          static void zclSampleThermostat_HandleKeys( byte shift, byte keys )
    396          {
    397            if ( keys & HAL_KEY_SW_6 ) //key1
    398            {
    399              HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
    400              bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_FORMATION | BDB_COMMISSIONING_MODE_FINDING_BINDING );  //Coordiinator
    401              NLME_PermitJoiningRequest( 0xff );
    402            }    
    403          }
    404          
    405          #ifdef MT_APP_FUNC
    406          
    407          /*********************************************************************
    408           * @fn      zclSampleThermostat_ProcessAppMsg
    409           *
    410           * @brief   Process DoorLock messages
    411           *
    412           * @param   srcEP - Sending Apps endpoint
    413           * @param   len - number of bytes
    414           * @param   msg - pointer to message
    415           *          0 - lo byte destination address
    416           *          1 - hi byte destination address
    417           *          2 - destination endpoint
    418           *          3 - lo byte cluster ID
    419           *          4 - hi byte cluster ID
    420           *          5 - message length
    421           *          6 - destination address mode (first byte of data)
    422           *          7 - zcl command frame
    423           *
    424           * @return  none
    425           */
    426          static void zclSampleThermostat_ProcessAppMsg( uint8 srcEP, uint8 len, uint8 *msg )
    427          {
    428            afAddrType_t dstAddr;
    429            uint16 clusterID;
    430            zclFrameHdr_t hdr;
    431            uint8 *pData;
    432            uint8 dataLen;
    433          
    434            dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
    435            msg += 2;
    436            dstAddr.endPoint = *msg++;
    437            clusterID = BUILD_UINT16( msg[0], msg[1] );
    438            msg += 2;
    439            dataLen = *msg++; // Length of message (Z-Tool can support up to 255 octets)
    440            dstAddr.addrMode = (afAddrMode_t)(*msg++);
    441            dataLen--; // Length of ZCL frame
    442          
    443            // Begining of ZCL frame
    444            pData = zclParseHdr( &hdr, msg );
    445            dataLen -= (uint8)( pData - msg );
    446          
    447            // Is this a foundation type message?
    448            if ( zcl_ProfileCmd( hdr.fc.type ) )
    449            {
    450              if ( hdr.fc.manuSpecific )
    451              {
    452                // We don't support any manufacturer specific command -- just forward it.
    453                zcl_SendCommand( srcEP, &dstAddr, clusterID, hdr.commandID, FALSE, ZCL_FRAME_CLIENT_SERVER_DIR,
    454                                 hdr.fc.disableDefaultRsp, hdr.manuCode, hdr.transSeqNum, dataLen, pData );
    455              }
    456              else
    457              {
    458                zclParseCmd_t cmd;
    459          
    460                cmd.endpoint = srcEP;
    461                cmd.dataLen = dataLen;
    462                cmd.pData = pData;
    463          
    464                zclSampleThermostat_ProcessFoundationMsg( &dstAddr, clusterID, &hdr, &cmd );
    465              }
    466            }
    467            else
    468            {
    469              // Nope, must be specific to the cluster ID
    470              if ( hdr.fc.manuSpecific )
    471              {
    472                // We don't support any manufacturer specific command -- just forward it.
    473                zcl_SendCommand( srcEP, &dstAddr, clusterID, hdr.commandID, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    474                                 hdr.fc.disableDefaultRsp, hdr.manuCode, hdr.transSeqNum, dataLen, pData );
    475              }
    476            }
    477          }
    478          
    479          /*********************************************************************
    480           * @fn      zclSampleThermostat_ProcessFoundationMsg
    481           *
    482           * @brief   Process Foundation message
    483           *
    484           * @param   srcEP - Sending Apps endpoint
    485           * @param   dstAddr - where to send the request
    486           * @param   clusterID - real cluster ID
    487           * @param   hdr - pointer to the message header
    488           * @param   len - length of the received message
    489           * @param   data - received message
    490           *
    491           * @return  none
    492           */
    493          static void zclSampleThermostat_ProcessFoundationMsg( afAddrType_t *dstAddr, uint16 clusterID,
    494                                                          zclFrameHdr_t *hdr, zclParseCmd_t *pParseCmd )
    495          {
    496          #if defined(ZCL_READ) || defined(ZCL_WRITE) || defined(ZCL_REPORT) || defined(ZCL_DISCOVER)
    497            void *cmd;
    498          #endif
    499          
    500            switch ( hdr->commandID )
    501            {
    502          #ifdef ZCL_READ
    503              case ZCL_CMD_READ:
    504                cmd = zclParseInReadCmd( pParseCmd );
    505                if ( cmd )
    506                {
    507                  zcl_SendRead( SAMPLETHERMOSTAT_ENDPOINT, dstAddr, clusterID, (zclReadCmd_t *)cmd,
    508                                ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
    509                  osal_mem_free( cmd );
    510                }
    511                break;
    512          #endif // ZCL_READ
    513          
    514          #ifdef ZCL_WRITE
    515              case ZCL_CMD_WRITE:
    516                cmd = zclParseInWriteCmd( pParseCmd );
    517                if ( cmd )
    518                {
    519                  zcl_SendWrite( SAMPLETHERMOSTAT_ENDPOINT, dstAddr, clusterID, (zclWriteCmd_t *)cmd,
    520                                 ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
    521                  osal_mem_free( cmd );
    522                }
    523                break;
    524          
    525              case ZCL_CMD_WRITE_UNDIVIDED:
    526                cmd = zclParseInWriteCmd( pParseCmd );
    527                if ( cmd )
    528                {
    529                  zcl_SendWriteUndivided( SAMPLETHERMOSTAT_ENDPOINT, dstAddr, clusterID, (zclWriteCmd_t *)cmd,
    530                                          ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
    531                  osal_mem_free( cmd );
    532                }
    533                break;
    534          
    535              case ZCL_CMD_WRITE_NO_RSP:
    536                cmd = zclParseInWriteCmd( pParseCmd );
    537                if ( cmd )
    538                {
    539                  zcl_SendWriteNoRsp( SAMPLETHERMOSTAT_ENDPOINT, dstAddr, clusterID, (zclWriteCmd_t *)cmd,
    540                                      ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
    541                  osal_mem_free( cmd );
    542                }
    543                break;
    544          #endif // ZCL_WRITE
    545          
    546          #ifdef ZCL_REPORT
    547              case ZCL_CMD_CONFIG_REPORT:
    548                cmd = zclParseInConfigReportCmd( pParseCmd );
    549                if ( cmd )
    550                {
    551                  zcl_SendConfigReportCmd( SAMPLETHERMOSTAT_ENDPOINT, dstAddr,  clusterID, (zclCfgReportCmd_t *)cmd,
    552                                           ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
    553                  osal_mem_free( cmd );
    554                }
    555                break;
    556          
    557              case ZCL_CMD_READ_REPORT_CFG:
    558                cmd = zclParseInReadReportCfgCmd( pParseCmd );
    559                if ( cmd )
    560                {
    561                  zcl_SendReadReportCfgCmd( SAMPLETHERMOSTAT_ENDPOINT, dstAddr, clusterID, (zclReadReportCfgCmd_t *)cmd,
    562                                            ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
    563                  osal_mem_free( cmd );
    564                }
    565                break;
    566          
    567              case ZCL_CMD_REPORT:
    568                cmd = zclParseInReportCmd( pParseCmd );
    569                if ( cmd )
    570                {
    571                  zcl_SendReportCmd( SAMPLETHERMOSTAT_ENDPOINT, dstAddr, clusterID, (zclReportCmd_t *)cmd,
    572                                     ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
    573                  osal_mem_free( cmd );
    574                }
    575                break;
    576          #endif // ZCL_REPORT
    577          #ifdef ZCL_DISCOVER
    578              case ZCL_CMD_DISCOVER_ATTRS:
    579                cmd = zclParseInDiscAttrsCmd( pParseCmd );
    580                if ( cmd )
    581                {
    582                  zcl_SendDiscoverAttrsCmd( SAMPLETHERMOSTAT_ENDPOINT, dstAddr, clusterID, (zclDiscoverAttrsCmd_t *)cmd,
    583                                            ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
    584                  osal_mem_free( cmd );
    585                }
    586                break;
    587          #endif // ZCL_DISCOVER
    588          
    589              default:
    590                // Unsupported command -- just forward it.
    591                zcl_SendCommand( pParseCmd->endpoint, dstAddr, clusterID, hdr->commandID, FALSE, ZCL_FRAME_CLIENT_SERVER_DIR,
    592                                 hdr->fc.disableDefaultRsp, 0, hdr->transSeqNum, pParseCmd->dataLen, pParseCmd->pData );
    593                break;
    594            }
    595          }
    596          
    597          #endif // MT_APP_FUNC
    598          
    599          /*********************************************************************
    600           * @fn      zclSampleThermostat_BasicResetCB
    601           *
    602           * @brief   Callback from the ZCL General Cluster Library
    603           *          to set all the Basic Cluster attributes to default values.
    604           *
    605           * @param   none
    606           *
    607           * @return  none
    608           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    609          static void zclSampleThermostat_BasicResetCB( void )
   \                     zclSampleThermostat_BasicResetCB:
    610          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    611            zclSampleThermostat_ResetAttributesToDefaultValues();
   \   000004                ; Setup parameters for call to function zclSampleThermostat_ResetAttributesToDefaultValues
   \   000004   12....       LCALL     ??zclSampleThermostat_ResetAttributesToDefaultV; Banked call to: zclSampleThermostat_ResetAttributesToDefaultValues
    612          
    613            zclSampleThermostat_UpdateLedState();
   \   000007                ; Setup parameters for call to function zclSampleThermostat_UpdateLedState
   \   000007   12....       LCALL     `??zclSampleThermostat_UpdateLedState::?relay`; Banked call to: zclSampleThermostat_UpdateLedState
    614          }
   \   00000A                REQUIRE ?Subroutine0
   \   00000A                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    615          
    616          /*********************************************************************
    617           * @fn      zclSampleApp_BatteryWarningCB
    618           *
    619           * @brief   Called to handle battery-low situation.
    620           *
    621           * @param   voltLevel - level of severity
    622           *
    623           * @return  none
    624           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    625          void zclSampleApp_BatteryWarningCB( uint8 voltLevel )
   \                     zclSampleApp_BatteryWarningCB:
    626          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    627            if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
    628            {
    629              // Send warning message to the gateway and blink LED
    630            }
    631            else if ( voltLevel == VOLT_LEVEL_BAD )
    632            {
    633              // Shut down the system
    634            }
    635          }
   \   000000   02....       LJMP      ?BRET
    636          
    637          /******************************************************************************
    638           *
    639           *  Functions for processing ZCL Foundation incoming Command/Response messages
    640           *
    641           *****************************************************************************/
    642          
    643          /*********************************************************************
    644           * @fn      zclSampleThermostat_ProcessIncomingMsg
    645           *
    646           * @brief   Process ZCL Foundation incoming message
    647           *
    648           * @param   pInMsg - pointer to the received message
    649           *
    650           * @return  none
    651           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    652          static void zclSampleThermostat_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg)
   \                     zclSampleThermostat_ProcessIncomingMsg:
    653          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    654            switch ( pInMsg->zclHdr.commandID )
   \   000005   EA           MOV       A,R2
   \   000006   2417         ADD       A,#0x17
   \   000008   FE           MOV       R6,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   FF           MOV       R7,A
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   14           DEC       A
   \   000019   600A         JZ        ??zclSampleThermostat_ProcessIncomingMsg_0
   \   00001B   24FD         ADD       A,#-0x3
   \   00001D   6013         JZ        ??zclSampleThermostat_ProcessIncomingMsg_1
   \   00001F   24FA         ADD       A,#-0x6
   \   000021   601C         JZ        ??zclSampleThermostat_ProcessIncomingMsg_2
   \   000023   8065         SJMP      ??zclSampleThermostat_ProcessIncomingMsg_3
    655            {
    656          #ifdef ZCL_READ
    657              case ZCL_CMD_READ_RSP:
    658                zclSampleThermostat_ProcessInReadRspCmd( pInMsg );
   \                     ??zclSampleThermostat_ProcessIncomingMsg_0:
   \   000025   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F9           MOV       R1,A
   \   00002A   E8           MOV       A,R0
   \   00002B   C3           CLR       C
   \   00002C   99           SUBB      A,R1
   \   00002D   505B         JNC       ??zclSampleThermostat_ProcessIncomingMsg_3
   \   00002F   08           INC       R0
   \   000030   80F6         SJMP      ??CrossCallReturnLabel_0
    659                break;
    660          #endif
    661          #ifdef ZCL_WRITE
    662              case ZCL_CMD_WRITE_RSP:
    663                zclSampleThermostat_ProcessInWriteRspCmd( pInMsg );
   \                     ??zclSampleThermostat_ProcessIncomingMsg_1:
   \   000032   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000035   E0           MOVX      A,@DPTR
   \   000036   F9           MOV       R1,A
   \   000037   E8           MOV       A,R0
   \   000038   C3           CLR       C
   \   000039   99           SUBB      A,R1
   \   00003A   504E         JNC       ??zclSampleThermostat_ProcessIncomingMsg_3
   \   00003C   08           INC       R0
   \   00003D   80F6         SJMP      ??CrossCallReturnLabel_1
    664                break;
    665          #endif
    666          #ifdef ZCL_REPORT
    667              case ZCL_CMD_CONFIG_REPORT:
    668                //zclSampleThermostat_ProcessInConfigReportCmd( pInMsg );
    669                break;
    670          
    671              case ZCL_CMD_CONFIG_REPORT_RSP:
    672                //zclSampleThermostat_ProcessInConfigReportRspCmd( pInMsg );
    673                break;
    674          
    675              case ZCL_CMD_READ_REPORT_CFG:
    676                //zclSampleThermostat_ProcessInReadReportCfgCmd( pInMsg );
    677                break;
    678          
    679              case ZCL_CMD_READ_REPORT_CFG_RSP:
    680                //zclSampleThermostat_ProcessInReadReportCfgRspCmd( pInMsg );
    681                break;
    682          #endif
    683          #ifdef ZCL_REPORT_DESTINATION_DEVICE
    684              case ZCL_CMD_REPORT:
    685                zclSampleThermostat_ProcessInReportCmd( pInMsg );
   \                     ??zclSampleThermostat_ProcessIncomingMsg_2:
   \   00003F                ; Setup parameters for call to function HalLedSet
   \   00003F   7A08         MOV       R2,#0x8
   \   000041   7904         MOV       R1,#0x4
   \   000043   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000046   8E82         MOV       DPL,R6
   \   000048   8F83         MOV       DPH,R7
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F8           MOV       R0,A
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   F9           MOV       R1,A
   \   00004F   8882         MOV       DPL,R0
   \   000051   F583         MOV       DPH,A
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   FA           MOV       R2,A
   \   000056   A3           INC       DPTR
   \   000057   E0           MOVX      A,@DPTR
   \   000058   FB           MOV       R3,A
   \   000059   EA           MOV       A,R2
   \   00005A   4B           ORL       A,R3
   \   00005B   702D         JNZ       ??zclSampleThermostat_ProcessIncomingMsg_3
   \   00005D   8882         MOV       DPL,R0
   \   00005F   8983         MOV       DPH,R1
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   12....       LCALL     ?Subroutine4 & 0xFFFF
    686                break;
    687          #endif
    688              case ZCL_CMD_DEFAULT_RSP:
    689                zclSampleThermostat_ProcessInDefaultRspCmd( pInMsg );
    690                break;
    691          
    692              default:
    693                break;
    694            }
   \                     ??CrossCallReturnLabel_4:
   \   000068   E0           MOVX      A,@DPTR
   \   000069   FA           MOV       R2,A
   \   00006A   A3           INC       DPTR
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   F9           MOV       R1,A
   \   00006D   EA           MOV       A,R2
   \   00006E   90....       MOV       DPTR,#zclSampleThermostat_LocalTemperature
   \   000071   F0           MOVX      @DPTR,A
   \   000072   A3           INC       DPTR
   \   000073   E9           MOV       A,R1
   \   000074   F0           MOVX      @DPTR,A
   \   000075                ; Setup parameters for call to function printf
   \   000075   90....       MOV       DPTR,#zclSampleThermostat_LocalTemperature
   \   000078   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00007B   7A..         MOV       R2,#`?<Constant "data: %d">` & 0xff
   \   00007D   7B..         MOV       R3,#(`?<Constant "data: %d">` >> 8) & 0xff
   \   00007F   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000082   7402         MOV       A,#0x2
   \   000084   12....       LCALL     ?DEALLOC_XSTACK8
   \   000087                ; Setup parameters for call to function zclSampleThermostat_UpdateLedState
   \   000087   12....       LCALL     `??zclSampleThermostat_UpdateLedState::?relay`; Banked call to: zclSampleThermostat_UpdateLedState
    695          
    696            if ( pInMsg->attrCmd )
   \                     ??zclSampleThermostat_ProcessIncomingMsg_3:
   \   00008A   8E82         MOV       DPL,R6
   \   00008C   8F83         MOV       DPH,R7
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   FA           MOV       R2,A
   \   000090   A3           INC       DPTR
   \   000091   E0           MOVX      A,@DPTR
   \   000092   FB           MOV       R3,A
   \   000093   EA           MOV       A,R2
   \   000094   4B           ORL       A,R3
   \   000095   6003         JZ        ??zclSampleThermostat_ProcessIncomingMsg_4
    697            {
    698              osal_mem_free( pInMsg->attrCmd );
   \   000097                ; Setup parameters for call to function osal_mem_free
   \   000097   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    699            }
    700          }
   \                     ??zclSampleThermostat_ProcessIncomingMsg_4:
   \   00009A                REQUIRE ?Subroutine1
   \   00009A                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000007   7800         MOV       R0,#0x0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   8882         MOV       DPL,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET
    701          
    702          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    703          static void zclSampleThermostat_ProcessCommissioningStatus(bdbCommissioningModeMsg_t* bdbCommissioningModeMsg)
   \                     zclSampleThermostat_ProcessCommissioningStatus:
    704          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    705              switch(bdbCommissioningModeMsg->bdbCommissioningMode)
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   6402         XRL       A,#0x2
   \   000011   701B         JNZ       ??zclSampleThermostat_ProcessCommissioningStatu_1
    706              {
    707                case BDB_COMMISSIONING_FORMATION:
    708                  if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \   000013   8A82         MOV       DPL,R2
   \   000015   8B83         MOV       DPH,R3
   \   000017   E0           MOVX      A,@DPTR
   \   000018   7014         JNZ       ??zclSampleThermostat_ProcessCommissioningStatu_1
    709                  {
    710                    //After formation, perform nwk steering again plus the remaining commissioning modes that has not been process yet
    711                    HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
   \   00001A                ; Setup parameters for call to function HalLedSet
   \   00001A   7A01         MOV       R2,#0x1
   \   00001C   7901         MOV       R1,#0x1
   \   00001E   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    712                    bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
   \   000021                ; Setup parameters for call to function bdb_StartCommissioning
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   4402         ORL       A,#0x2
   \   00002A   F9           MOV       R1,A
   \   00002B   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    713                  }
    714                  else
    715                  {
    716                    //Want to try other channels?
    717                    //try with bdb_setChannelAttribute
    718                  }
    719                break;
    720                case BDB_COMMISSIONING_NWK_STEERING:
    721                  if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    722                  {
    723                    //YOUR JOB:
    724                    //We are on the nwk, what now?
    725                  }
    726                  else
    727                  {
    728                    //See the possible errors for nwk steering procedure
    729                    //No suitable networks found
    730                    //Want to try other channels?
    731                    //try with bdb_setChannelAttribute
    732                  }
    733                break;
    734                case BDB_COMMISSIONING_FINDING_BINDING:
    735                  if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    736                  {
    737                    //YOUR JOB:
    738                  }
    739                  else
    740                  {
    741                    //YOUR JOB:
    742                    //retry?, wait for user interaction?
    743                  }
    744                break;
    745                case BDB_COMMISSIONING_INITIALIZATION:
    746                  //Initialization notification can only be successful. Failure on initialization 
    747                  //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
    748                  
    749                  //YOUR JOB:
    750                  //We are on a network, what now?
    751                  
    752                break;
    753          #if ZG_BUILD_ENDDEVICE_TYPE    
    754              case BDB_COMMISSIONING_PARENT_LOST:
    755                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
    756                {
    757                  //We did recover from losing parent
    758                }
    759                else
    760                {
    761                  //Parent not found, attempt to rejoin again after a fixed delay
    762                  osal_start_timerEx(zclSampleThermostat_TaskID, SAMPLEAPP_END_DEVICE_REJOIN_EVT, SAMPLEAPP_END_DEVICE_REJOIN_DELAY);
    763                }
    764              break;
    765          #endif 
    766              }
    767          
    768          }
   \                     ??zclSampleThermostat_ProcessCommissioningStatu_1:
   \   00002E   80..         SJMP      ?Subroutine1
    769          
    770          
    771          #ifdef ZCL_READ
    772          /*********************************************************************
    773           * @fn      zclSampleThermostat_ProcessInReadRspCmd
    774           *
    775           * @brief   Process the "Profile" Read Response Command
    776           *
    777           * @param   pInMsg - incoming message to process
    778           *
    779           * @return  none
    780           */
    781          static uint8 zclSampleThermostat_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
    782          {
    783            zclReadRspCmd_t *readRspCmd;
    784            uint8 i;
    785          
    786            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
    787            for (i = 0; i < readRspCmd->numAttr; i++)
    788            {
    789              // Notify the originator of the results of the original read attributes
    790              // attempt and, for each successfull request, the value of the requested
    791              // attribute
    792            }
    793          
    794            return ( TRUE );
    795          }
    796          #endif // ZCL_READ
    797          
    798          #ifdef ZCL_WRITE
    799          /*********************************************************************
    800           * @fn      zclSampleThermostat_ProcessInWriteRspCmd
    801           *
    802           * @brief   Process the "Profile" Write Response Command
    803           *
    804           * @param   pInMsg - incoming message to process
    805           *
    806           * @return  none
    807           */
    808          static uint8 zclSampleThermostat_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
    809          {
    810            zclWriteRspCmd_t *writeRspCmd;
    811            uint8 i;
    812          
    813            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
    814            for (i = 0; i < writeRspCmd->numAttr; i++)
    815            {
    816              // Notify the device of the results of the its original write attributes
    817              // command.
    818            }
    819          
    820            return ( TRUE );
    821          }
    822          #endif // ZCL_WRITE
    823          
    824          #ifdef ZCL_REPORT_DESTINATION_DEVICE
    825          /*********************************************************************
    826           * @fn      zclSampleThermostat_ProcessInReportCmd
    827           *
    828           * @brief   Process the "Profile" Report Command
    829           *
    830           * @param   pInMsg - incoming message to process
    831           *
    832           * @return  none
    833           */
    834          static void zclSampleThermostat_ProcessInReportCmd( zclIncomingMsg_t *pInMsg )
    835          {
    836            HalLedSet ( HAL_LED_3, HAL_LED_MODE_TOGGLE );
    837            
    838            zclReportCmd_t *pInTempSensorReport;
    839            
    840            pInTempSensorReport = (zclReportCmd_t *)pInMsg->attrCmd;
    841          
    842            if ( pInTempSensorReport->attrList[0].attrID != ATTRID_MS_TEMPERATURE_MEASURED_VALUE )
    843            {
    844              return;
    845            }
    846            
    847            // store the current temperature value sent over the air from temperature sensor
    848            zclSampleThermostat_LocalTemperature = BUILD_UINT16(pInTempSensorReport->attrList[0].attrData[0], pInTempSensorReport->attrList[0].attrData[1]);
    849          
    850            printf("data: %d", zclSampleThermostat_LocalTemperature);
    851            
    852            zclSampleThermostat_UpdateLedState();
    853          }
    854          #endif  // ZCL_REPORT_DESTINATION_DEVICE
    855          
    856          /*********************************************************************
    857           * @fn      zclSampleThermostat_ProcessInDefaultRspCmd
    858           *
    859           * @brief   Process the "Profile" Default Response Command
    860           *
    861           * @param   pInMsg - incoming message to process
    862           *
    863           * @return  none
    864           */
    865          static uint8 zclSampleThermostat_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
    866          {
    867            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
    868          
    869            // Device is notified of the Default Response command.
    870            (void)pInMsg;
    871          
    872            return ( TRUE );
    873          }
    874          
    875          //static void zclSampleThermostat_UiActionSetHeating(uint16 keys)
    876          //{
    877          //  if ( keys & HAL_KEY_SW_1 )
    878          //  {
    879          //    // increase heating setpoint, considering whole numbers where necessary
    880          //    if ( zclSampleThermostat_OccupiedHeatingSetpoint < zclSampleThermostat_MaxHeatSetpointLimit )
    881          //    {
    882          //      zclSampleThermostat_OccupiedHeatingSetpoint = zclSampleThermostat_OccupiedHeatingSetpoint + 100;
    883          //    }
    884          //    else if ( zclSampleThermostat_OccupiedHeatingSetpoint >= zclSampleThermostat_MaxHeatSetpointLimit )
    885          //    {
    886          //      zclSampleThermostat_OccupiedHeatingSetpoint = zclSampleThermostat_MaxHeatSetpointLimit;
    887          //    }
    888          //  }
    889          //  
    890          //  if ( keys & HAL_KEY_SW_3 )
    891          //  {
    892          //    // decrease heating setpoint, considering whole numbers where necessary
    893          //    if ( zclSampleThermostat_OccupiedHeatingSetpoint > zclSampleThermostat_MinHeatSetpointLimit )
    894          //    {
    895          //      zclSampleThermostat_OccupiedHeatingSetpoint = zclSampleThermostat_OccupiedHeatingSetpoint - 100;
    896          //    }
    897          //    else if ( zclSampleThermostat_OccupiedHeatingSetpoint <= zclSampleThermostat_MinHeatSetpointLimit )
    898          //    {
    899          //      zclSampleThermostat_OccupiedHeatingSetpoint = zclSampleThermostat_MinHeatSetpointLimit;
    900          //    }
    901          //  }
    902          //  
    903          //  UI_UpdateLcd();
    904          //  zclSampleThermostat_UpdateLedState();
    905          //}
    906          //
    907          //static void zclSampleThermostat_UiActionSetCooling(uint16 keys)
    908          //{
    909          //  if ( keys & HAL_KEY_SW_1 )
    910          //  {
    911          //    // increase cooling setpoint, considering whole numbers where necessary
    912          //    if ( zclSampleThermostat_OccupiedCoolingSetpoint < zclSampleThermostat_MaxCoolSetpointLimit )
    913          //    {
    914          //      zclSampleThermostat_OccupiedCoolingSetpoint = zclSampleThermostat_OccupiedCoolingSetpoint + 100;
    915          //    }
    916          //    else if ( zclSampleThermostat_OccupiedCoolingSetpoint >= zclSampleThermostat_MaxCoolSetpointLimit )
    917          //    {
    918          //      zclSampleThermostat_OccupiedCoolingSetpoint = zclSampleThermostat_MaxCoolSetpointLimit;
    919          //    }
    920          //  }
    921          //  
    922          //  if ( keys & HAL_KEY_SW_3 )
    923          //  {
    924          //    // decrease cooling setpoint, considering whole numbers where necessary
    925          //    if ( zclSampleThermostat_OccupiedCoolingSetpoint > zclSampleThermostat_MinCoolSetpointLimit )
    926          //    {
    927          //      zclSampleThermostat_OccupiedCoolingSetpoint = zclSampleThermostat_OccupiedCoolingSetpoint - 100;
    928          //    }
    929          //    else if ( zclSampleThermostat_OccupiedCoolingSetpoint <= zclSampleThermostat_MinCoolSetpointLimit )
    930          //    {
    931          //      zclSampleThermostat_OccupiedCoolingSetpoint = zclSampleThermostat_MinCoolSetpointLimit;
    932          //    }
    933          //  }
    934          //  
    935          //  UI_UpdateLcd();
    936          //  zclSampleThermostat_UpdateLedState();
    937          //}
    938          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    939          void zclSampleThermostat_UpdateLedState(void)
   \                     zclSampleThermostat_UpdateLedState:
    940          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    941            // use LEDs to show heating or cooling cycles based off local temperature
    942            if ( zclSampleThermostat_LocalTemperature != NULL )
   \   000004   90....       MOV       DPTR,#zclSampleThermostat_LocalTemperature
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F9           MOV       R1,A
   \   00000C   E8           MOV       A,R0
   \   00000D   49           ORL       A,R1
   \   00000E   6037         JZ        ??zclSampleThermostat_UpdateLedState_0
    943            {
    944              if ( zclSampleThermostat_LocalTemperature <= zclSampleThermostat_OccupiedHeatingSetpoint )
   \   000010   7583..       MOV       DPH,#(zclSampleThermostat_OccupiedHeatingSetpoint >> 8) & 0xff
   \   000013   7582..       MOV       DPL,#zclSampleThermostat_OccupiedHeatingSetpoint & 0xff
   \   000016   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000019   4007         JC        ??zclSampleThermostat_UpdateLedState_1
    945              {
    946                // turn on heating
    947                zclSampleThermostat_SystemMode = HVAC_THERMOSTAT_SYSTEM_MODE_HEAT;
   \   00001B   90....       MOV       DPTR,#zclSampleThermostat_SystemMode
   \   00001E   7404         MOV       A,#0x4
   \   000020   8018         SJMP      ??zclSampleThermostat_UpdateLedState_2
    948                HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
    949              }
    950              else if ( zclSampleThermostat_LocalTemperature >= zclSampleThermostat_OccupiedCoolingSetpoint )
   \                     ??zclSampleThermostat_UpdateLedState_1:
   \   000022   90....       MOV       DPTR,#zclSampleThermostat_OccupiedCoolingSetpoint
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F8           MOV       R0,A
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F9           MOV       R1,A
   \   00002A   7583..       MOV       DPH,#(zclSampleThermostat_LocalTemperature >> 8) & 0xff
   \   00002D   7582..       MOV       DPL,#zclSampleThermostat_LocalTemperature & 0xff
   \   000030   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000033   90....       MOV       DPTR,#zclSampleThermostat_SystemMode
   \   000036   4007         JC        ??zclSampleThermostat_UpdateLedState_3
    951              {
    952                // turn on cooling
    953                zclSampleThermostat_SystemMode = HVAC_THERMOSTAT_SYSTEM_MODE_COOL;
   \   000038   7403         MOV       A,#0x3
   \                     ??zclSampleThermostat_UpdateLedState_2:
   \   00003A   F0           MOVX      @DPTR,A
    954                HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
   \   00003B                ; Setup parameters for call to function HalLedSet
   \   00003B   7A01         MOV       R2,#0x1
   \   00003D   8003         SJMP      ??zclSampleThermostat_UpdateLedState_4
    955              }
    956              else
    957              {
    958                // turn off heating/cooling
    959                zclSampleThermostat_SystemMode = HVAC_THERMOSTAT_SYSTEM_MODE_OFF;
   \                     ??zclSampleThermostat_UpdateLedState_3:
   \   00003F   E4           CLR       A
   \   000040   F0           MOVX      @DPTR,A
    960                HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
   \   000041                ; Setup parameters for call to function HalLedSet
   \   000041   FA           MOV       R2,A
   \                     ??zclSampleThermostat_UpdateLedState_4:
   \   000042   7901         MOV       R1,#0x1
   \   000044   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    961              }
    962            }
    963          }
   \                     ??zclSampleThermostat_UpdateLedState_0:
   \   000047   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   C3           CLR       C
   \   000001   E0           MOVX      A,@DPTR
   \   000002   98           SUBB      A,R0
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   99           SUBB      A,R1
   \   000006   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000008   65D0         XRL       A,PSW
   \   00000A   33           RLC       A
   \   00000B   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleThermostat_NwkState`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for reportableChange>`:
   \   000000   2C           DB 44
   \   000001   01           DB 1
   \   000002   00           DB 0
   \   000003   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleThermostat_CmdCallb`:
   \   000000   ....         DW `??zclSampleThermostat_BasicResetCB::?relay`
   \   000002   0000         DW 0H
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   0000         DW 0H
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "init successful\\r\\n">`:
   \   000000   696E6974     DB "init successful\015\012"
   \            20737563
   \            63657373
   \            66756C0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "data: %d">`:
   \   000000   64617461     DB "data: %d"
   \            3A202564
   \            00      
    964          
    965          
    966          /****************************************************************************
    967          ****************************************************************************/
    968          
    969          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   zclSampleApp_BatteryWarningCB
      2      0   zclSampleThermostat_BasicResetCB
        2      0   -> zclSampleThermostat_ResetAttributesToDefaultValues
        2      0   -> zclSampleThermostat_UpdateLedState
      0     16   zclSampleThermostat_Init
        0     10   -> RegisterForKeys
        0     10   -> RegisterVoltageWarningCB
        0     10   -> Uart0_Init
        0     10   -> bdb_RegisterCommissioningStatusCB
        0     10   -> bdb_RegisterSimpleDescriptor
        0     16   -> bdb_RepAddAttrCfgRecordDefaultToList
        0     10   -> printf
        0     10   -> zclGeneral_RegisterCmdCallbacks
        0     10   -> zclSampleThermostat_ResetAttributesToDefaultValues
        0     10   -> zcl_registerAttrList
        0     10   -> zcl_registerForMsg
      0      9   zclSampleThermostat_ProcessCommissioningStatus
        0      9   -> HalLedSet
        0      9   -> bdb_StartCommissioning
      0     23   zclSampleThermostat_ProcessIncomingMsg
        0      9   -> HalLedSet
        0      9   -> osal_mem_free
        0     11   -> printf
        0      9   -> zclSampleThermostat_UpdateLedState
      4      9   zclSampleThermostat_UpdateLedState
        2      0   -> HalLedSet
      0     12   zclSampleThermostat_event_loop
        0     12   -> HalLedSet
        0     12   -> NLME_PermitJoiningRequest
        0     12   -> bdb_StartCommissioning
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     12   -> zclSampleThermostat_ProcessIncomingMsg


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       9  ?<Constant "data: %d">
      18  ?<Constant "init successful\r\n">
       4  ?<Initializer for reportableChange>
      18  ?<Initializer for zclSampleThermostat_CmdCallb
       1  ?<Initializer for zclSampleThermostat_NwkState
       7  ?Subroutine0
       5  ?Subroutine1
      10  ?Subroutine2
      12  ?Subroutine3
       9  ?Subroutine4
       4  reportableChange
       3  zclSampleApp_BatteryWarningCB
      10  zclSampleThermostat_BasicResetCB
      18  zclSampleThermostat_CmdCallbacks
     246  zclSampleThermostat_Init
       1  zclSampleThermostat_NwkState
      48  zclSampleThermostat_ProcessCommissioningStatus
     154  zclSampleThermostat_ProcessIncomingMsg
       1  zclSampleThermostat_TaskID
      74  zclSampleThermostat_UpdateLedState
     119  zclSampleThermostat_event_loop
      42  -- Other

 
 697 bytes in segment BANKED_CODE
  42 bytes in segment BANK_RELAYS
  23 bytes in segment XDATA_I
  23 bytes in segment XDATA_ID
  27 bytes in segment XDATA_ROM_C
   1 byte  in segment XDATA_Z
 
  65 bytes of CODE     memory
  27 bytes of CONST    memory
 697 bytes of HUGECODE memory
  24 bytes of XDATA    memory

Errors: none
Warnings: none
