###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               29/Jul/2020  20:29:39
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\AA\Z-Stack 3.0.2\Components\zmac\f8w\zmac_cb.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW330C.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\zmac\f8w\zmac_cb.c" -D SECURE=1 -D TC_LINKKEY_JOIN -D
#        NV_INIT -D NV_RESTORE -D xPOWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1
#        -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_GROUPS -D
#        BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\zmac_cb.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\zmac_cb.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\zmac\f8w\zmac_cb.c
      1          /**************************************************************************************************
      2            Filename:       zmac_cb.c
      3            Revised:        $Date: 2014-12-03 16:04:46 -0800 (Wed, 03 Dec 2014) $
      4            Revision:       $Revision: 41329 $
      5          
      6            Description:    This file contains the NWK functions that the ZMAC calls
      7          
      8          
      9            Copyright 2005-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /********************************************************************************************************
     41           *                                               INCLUDES
     42           ********************************************************************************************************/
     43          
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "ZMAC.h"
     47          #include "MT_MAC.h"
     48          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     49          #include "cGP_stub.h"
     50             
     51          #if !defined NONWK
     52          #include "nwk.h"
     53          #include "nwk_bufs.h"
     54          #include "ZGlobals.h"
     55          #endif
     56          
     57          #if defined( MACSIM )
     58            #include "mac_sim.h"
     59          #endif
     60          
     61          #include "mac_security.h"
     62          
     63          #include "mac_main.h"
     64          #ifdef FEATURE_DUAL_MAC
     65          #include "dmmgr.h"
     66          #endif /* FEATURE_DUAL_MAC */
     67          extern void *ZMac_ScanBuf;
     68          
     69          /********************************************************************************************************
     70           *                                               CONSTANTS
     71           ********************************************************************************************************/
     72          
     73          #if !defined NONWK
     74          /* Lookup table for size of structures. Must match with the order of MAC callback events */

   \                                 In  segment CODE_C, align 1
     75          const uint8 CODE zmacCBSizeTable [] = {
   \                     zmacCBSizeTable:
   \   000000   00           DB 0
   \   000001   16           DB 22
   \   000002   0F           DB 15
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   0B           DB 11
   \   000006   15           DB 21
   \   000007   0B           DB 11
   \   000008   02           DB 2
   \   000009   00           DB 0
   \   00000A   02           DB 2
   \   00000B   22           DB 34
   \   00000C   0F           DB 15
   \   00000D   33           DB 51
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   0E           DB 14
   \   000011   0F           DB 15
     76            0,
     77            sizeof(ZMacAssociateInd_t),       // MAC_MLME_ASSOCIATE_IND      1   Associate indication
     78            sizeof(ZMacAssociateCnf_t),       // MAC_MLME_ASSOCIATE_CNF      2   Associate confirm
     79            0,                                // MAC_MLME_DISASSOCIATE_IND   3   Disassociate indication
     80            0,                                // MAC_MLME_DISASSOCIATE_CNF   4   Disassociate confirm
     81            sizeof(macMlmeBeaconNotifyInd_t), // MAC_MLME_BEACON_NOTIFY_IND  5   con notify indication
     82            sizeof(ZMacOrphanInd_t),          // MAC_MLME_ORPHAN_IND         6   Orphan indication
     83            sizeof(ZMacScanCnf_t),            // MAC_MLME_SCAN_CNF           7   Scan confirm
     84            sizeof(ZMacStartCnf_t),           // MAC_MLME_START_CNF          8   Start confirm
     85            0,                                // MAC_MLME_SYNC_LOSS_IND      9   Sync loss indication
     86            sizeof(ZMacPollCnf_t),            // MAC_MLME_POLL_CNF           10  Poll confirm
     87            sizeof(ZMacCommStatusInd_t),      // MAC_MLME_COMM_STATUS_IND    11  Comm status indication
     88            sizeof(ZMacDataCnf_t),            // MAC_MCPS_DATA_CNF           12  Data confirm
     89            sizeof(macMcpsDataInd_t),         // MAC_MCPS_DATA_IND           13  Data indication
     90            0,                                // MAC_MCPS_PURGE_CNF          14  Purge confirm
     91            0,                                // MAC_PWR_ON_CNF              15  Power on confirm
     92            sizeof(ZMacPollInd_t),            // MAC_MLME_POLL_IND           16  Poll indication
     93            sizeof(ZMacDataCnf_t)            // MAC_MCPS_GREEN_PWR_DATA_CNF 17  Data confirm for Green Power
     94          };
     95          #endif /* !defined NONWK */
     96          
     97          /********************************************************************************************************
     98           *                                               LOCALS
     99           ********************************************************************************************************/
    100          
    101          /* LQI Adjustment Mode */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          static ZMacLqiAdjust_t lqiAdjMode = LQI_ADJ_OFF;
   \                     lqiAdjMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    103          
    104          #if !defined NONWK
    105          /* LQI Adjustment Function */
    106          static void ZMacLqiAdjust( uint8 corr, uint8* lqi );
    107          #endif
    108          
    109          /*********************************************************************
    110           * ZMAC Function Pointers
    111           */
    112          
    113          /*
    114           * ZMac Application callback function. This function will be called
    115           * for every MAC message that is received over-the-air or generated
    116           * locally by MAC for the application.
    117           *
    118           * The callback function should return TRUE if it has handled the
    119           * MAC message and no further action should be taken with it. It
    120           * should return FALSE if it has not handled the MAC message and
    121           * normal processing should take place.
    122           *
    123           * NOTE: The processing in this function should be kept to the
    124           *       minimum.
    125           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    126          uint8 (*pZMac_AppCallback)( uint8 *msgPtr ) = (void*)NULL;
   \                     pZMac_AppCallback:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    127          
    128          
    129          /*********************************************************************
    130           * ZMAC Functions
    131           */
    132          
    133          /**************************************************************************************************
    134           * @fn       MAC_CbackEvent()
    135           *
    136           * @brief    convert MAC data confirm and indication to ZMac and send to NWK
    137           *
    138           * @param    pData - pointer to macCbackEvent_t
    139           *
    140           * @return   none
    141           *************************************************************************************************/
    142          #ifdef FEATURE_DUAL_MAC
    143          void ZMacCbackEventHdlr(macCbackEvent_t *pData)
    144          #else

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    145          void MAC_CbackEvent(macCbackEvent_t *pData)
   \                     MAC_CbackEvent:
    146          #endif /* FEATURE_DUAL_MAC */
    147          #ifndef MT_MAC_CB_FUNC
    148          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EA           MOV       A,R2
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   EB           MOV       A,R3
   \   000014   F0           MOVX      @DPTR,A
    149          #if !defined NONWK
    150            uint8 event = pData->hdr.event;
   \   000015   85..82       MOV       DPL,?XSP + 0
   \   000018   85..83       MOV       DPH,?XSP + 1
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F8           MOV       R0,A
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F583         MOV       DPH,A
   \   000021   8882         MOV       DPL,R0
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F5..         MOV       ?V2,A
    151            uint16 tmp = zmacCBSizeTable[event];
   \   000026   E5..         MOV       A,?V2
   \   000028   F8           MOV       R0,A
   \   000029   7900         MOV       R1,#0x0
   \   00002B   74..         MOV       A,#zmacCBSizeTable & 0xff
   \   00002D   28           ADD       A,R0
   \   00002E   F582         MOV       DPL,A
   \   000030   74..         MOV       A,#(zmacCBSizeTable >> 8) & 0xff
   \   000032   39           ADDC      A,R1
   \   000033   F583         MOV       DPH,A
   \   000035   E4           CLR       A
   \   000036   93           MOVC      A,@A+DPTR
   \   000037   F8           MOV       R0,A
   \   000038   7900         MOV       R1,#0x0
   \   00003A   7402         MOV       A,#0x2
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   E8           MOV       A,R0
   \   000040   F0           MOVX      @DPTR,A
   \   000041   A3           INC       DPTR
   \   000042   E9           MOV       A,R1
   \   000043   F0           MOVX      @DPTR,A
    152            macCbackEvent_t *msgPtr;
    153          
    154            /* If the Network layer will handle a new MAC callback, a non-zero value must be entered in the
    155             * corresponding location in the zmacCBSizeTable[] - thus the table acts as "should handle"?
    156             */
    157            if (tmp == 0)
   \   000044   7402         MOV       A,#0x2
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   F8           MOV       R0,A
   \   00004B   A3           INC       DPTR
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   F9           MOV       R1,A
   \   00004E   E8           MOV       A,R0
   \   00004F   49           ORL       A,R1
   \   000050   7003         JNZ       $+5
   \   000052   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
    158            {
    159              return;
    160            }
    161          
    162            // MAC_MCPS_DATA_IND is very special - it is the only event where the MAC does not free *pData.
    163            if ( event == MAC_MCPS_DATA_IND )
   \   000055   740D         MOV       A,#0xd
   \   000057   65..         XRL       A,?V2
   \   000059   705C         JNZ       ??MAC_CbackEvent_1
    164            {
    165          #if defined ( ZMAC_MAX_DATA_IND ) && ( ZMAC_MAX_DATA_IND >= 1 )
    166              // This feature limits the number of unprocessed MAC Data Indications that can be queued
    167              // into the Network Task's OSAL message queue. To enable ZMAC_MAX_DATA_IND filtering, the
    168              // command-line option specifies the threshold setting where MAC_MCPS_DATD_IND callback
    169              // messages will be dropped. For example, adding ZMAC_MAX_DATA_IND=5 to the commnad-line
    170              // options allows up to five messages to be passed up and queued in the NWK layer buffer.
    171              uint8 diCount = osal_msg_count( NWK_TaskID, MAC_MCPS_DATA_IND );
    172          #endif // ZMAC_MAX_DATA_IND
    173              MAC_MlmeGetReq( MAC_SHORT_ADDRESS, &tmp );
   \   00005B                ; Setup parameters for call to function MAC_MlmeGetReq
   \   00005B   7402         MOV       A,#0x2
   \   00005D   12....       LCALL     ?XSTACK_DISP101_8
   \   000060   7953         MOV       R1,#0x53
   \   000062   12....       LCALL     `??MAC_MlmeGetReq::?relay`; Banked call to: MAC_MlmeGetReq
   \   000065   E9           MOV       A,R1
    174              if ( (tmp == INVALID_NODE_ADDR) ||
    175                   (tmp == NWK_BROADCAST_SHORTADDR_DEVALL) ||
    176          #if defined ( ZMAC_MAX_DATA_IND ) && ( ZMAC_MAX_DATA_IND >= 1 )
    177                   (diCount > ZMAC_MAX_DATA_IND) ||
    178          #endif // ZMAC_MAX_DATA_IND
    179                   (pData->dataInd.msdu.len == 0) )
   \   000066   7402         MOV       A,#0x2
   \   000068   12....       LCALL     ?XSTACK_DISP0_8
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   64FE         XRL       A,#0xfe
   \   00006E   7004         JNZ       ??MAC_CbackEvent_2
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   64FF         XRL       A,#0xff
   \                     ??MAC_CbackEvent_2:
   \   000074   6025         JZ        ??MAC_CbackEvent_3
   \   000076   7402         MOV       A,#0x2
   \   000078   12....       LCALL     ?XSTACK_DISP0_8
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   64FF         XRL       A,#0xff
   \   00007E   7004         JNZ       ??MAC_CbackEvent_4
   \   000080   A3           INC       DPTR
   \   000081   E0           MOVX      A,@DPTR
   \   000082   64FF         XRL       A,#0xff
   \                     ??MAC_CbackEvent_4:
   \   000084   6015         JZ        ??MAC_CbackEvent_3
   \   000086   85..82       MOV       DPL,?XSP + 0
   \   000089   85..83       MOV       DPH,?XSP + 1
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   F8           MOV       R0,A
   \   00008E   A3           INC       DPTR
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   F583         MOV       DPH,A
   \   000092   8882         MOV       DPL,R0
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   E0           MOVX      A,@DPTR
   \   000099   700A         JNZ       ??MAC_CbackEvent_5
    180              {
    181                mac_msg_deallocate( (uint8 **)&pData );
   \                     ??MAC_CbackEvent_3:
   \   00009B                ; Setup parameters for call to function mac_msg_deallocate
   \   00009B   AA..         MOV       R2,?XSP + 0
   \   00009D   AB..         MOV       R3,?XSP + 1
   \   00009F   12....       LCALL     `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    182                return;
   \   0000A2   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
    183              }
    184              msgPtr = pData;
   \                     ??MAC_CbackEvent_5:
   \   0000A5   85..82       MOV       DPL,?XSP + 0
   \   0000A8   85..83       MOV       DPH,?XSP + 1
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   F8           MOV       R0,A
   \   0000AD   A3           INC       DPTR
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   F9           MOV       R1,A
   \   0000B0   E8           MOV       A,R0
   \   0000B1   FE           MOV       R6,A
   \   0000B2   E9           MOV       A,R1
   \   0000B3   FF           MOV       R7,A
   \   0000B4   02....       LJMP      ??MAC_CbackEvent_6 & 0xFFFF
    185            }
    186            else
    187            {
    188              if (event == MAC_MLME_BEACON_NOTIFY_IND )
   \                     ??MAC_CbackEvent_1:
   \   0000B7   7405         MOV       A,#0x5
   \   0000B9   65..         XRL       A,?V2
   \   0000BB   702D         JNZ       ??MAC_CbackEvent_7
    189              {
    190                tmp += sizeof(macPanDesc_t) + pData->beaconNotifyInd.sduLength;
   \   0000BD   85..82       MOV       DPL,?XSP + 0
   \   0000C0   85..83       MOV       DPH,?XSP + 1
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   F8           MOV       R0,A
   \   0000C5   A3           INC       DPTR
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   C8           XCH       A,R0
   \   0000C8   2408         ADD       A,#0x8
   \   0000CA   F582         MOV       DPL,A
   \   0000CC   C8           XCH       A,R0
   \   0000CD   3400         ADDC      A,#0x0
   \   0000CF   F583         MOV       DPH,A
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   F8           MOV       R0,A
   \   0000D3   7900         MOV       R1,#0x0
   \   0000D5   E8           MOV       A,R0
   \   0000D6   2421         ADD       A,#0x21
   \   0000D8   F8           MOV       R0,A
   \   0000D9   5001         JNC       ??MAC_CbackEvent_8
   \   0000DB   09           INC       R1
   \                     ??MAC_CbackEvent_8:
   \   0000DC   7402         MOV       A,#0x2
   \   0000DE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E1   E0           MOVX      A,@DPTR
   \   0000E2   28           ADD       A,R0
   \   0000E3   F0           MOVX      @DPTR,A
   \   0000E4   A3           INC       DPTR
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   39           ADDC      A,R1
   \   0000E7   F0           MOVX      @DPTR,A
   \   0000E8   8062         SJMP      ??MAC_CbackEvent_9
    191              }
    192              else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_7:
   \   0000EA   7407         MOV       A,#0x7
   \   0000EC   65..         XRL       A,?V2
   \   0000EE   705C         JNZ       ??MAC_CbackEvent_9
    193              {
    194                if (pData->scanCnf.scanType == ZMAC_ED_SCAN)
   \   0000F0   85..82       MOV       DPL,?XSP + 0
   \   0000F3   85..83       MOV       DPH,?XSP + 1
   \   0000F6   E0           MOVX      A,@DPTR
   \   0000F7   F8           MOV       R0,A
   \   0000F8   A3           INC       DPTR
   \   0000F9   E0           MOVX      A,@DPTR
   \   0000FA   F583         MOV       DPH,A
   \   0000FC   8882         MOV       DPL,R0
   \   0000FE   A3           INC       DPTR
   \   0000FF   A3           INC       DPTR
   \   000100   E0           MOVX      A,@DPTR
   \   000101   7010         JNZ       ??MAC_CbackEvent_10
    195                {
    196                  tmp += ZMAC_ED_SCAN_MAXCHANNELS;
   \   000103   7402         MOV       A,#0x2
   \   000105   12....       LCALL     ?XSTACK_DISP0_8
   \   000108   E0           MOVX      A,@DPTR
   \   000109   241B         ADD       A,#0x1b
   \   00010B   F0           MOVX      @DPTR,A
   \   00010C   A3           INC       DPTR
   \   00010D   E0           MOVX      A,@DPTR
   \   00010E   3400         ADDC      A,#0x0
   \   000110   F0           MOVX      @DPTR,A
   \   000111   8039         SJMP      ??MAC_CbackEvent_9
    197                }
    198                else
    199                {
    200                  tmp += sizeof( ZMacPanDesc_t ) * pData->scanCnf.resultListSize;
   \                     ??MAC_CbackEvent_10:
   \   000113   85..82       MOV       DPL,?XSP + 0
   \   000116   85..83       MOV       DPH,?XSP + 1
   \   000119   E0           MOVX      A,@DPTR
   \   00011A   F8           MOV       R0,A
   \   00011B   A3           INC       DPTR
   \   00011C   E0           MOVX      A,@DPTR
   \   00011D   C8           XCH       A,R0
   \   00011E   2408         ADD       A,#0x8
   \   000120   F582         MOV       DPL,A
   \   000122   C8           XCH       A,R0
   \   000123   3400         ADDC      A,#0x0
   \   000125   F583         MOV       DPH,A
   \   000127   E0           MOVX      A,@DPTR
   \   000128   F8           MOV       R0,A
   \   000129   7900         MOV       R1,#0x0
   \   00012B   E8           MOV       A,R0
   \   00012C   75F021       MOV       B,#0x21
   \   00012F   A4           MUL       AB
   \   000130   C8           XCH       A,R0
   \   000131   AAF0         MOV       R2,B
   \   000133   75F000       MOV       B,#0x0
   \   000136   A4           MUL       AB
   \   000137   2A           ADD       A,R2
   \   000138   FA           MOV       R2,A
   \   000139   75F021       MOV       B,#0x21
   \   00013C   E9           MOV       A,R1
   \   00013D   A4           MUL       AB
   \   00013E   2A           ADD       A,R2
   \   00013F   F9           MOV       R1,A
   \   000140   7402         MOV       A,#0x2
   \   000142   12....       LCALL     ?XSTACK_DISP0_8
   \   000145   E0           MOVX      A,@DPTR
   \   000146   28           ADD       A,R0
   \   000147   F0           MOVX      @DPTR,A
   \   000148   A3           INC       DPTR
   \   000149   E0           MOVX      A,@DPTR
   \   00014A   39           ADDC      A,R1
   \   00014B   F0           MOVX      @DPTR,A
    201                }
    202              }
    203          
    204              if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \                     ??MAC_CbackEvent_9:
   \   00014C                ; Setup parameters for call to function osal_msg_allocate
   \   00014C   7402         MOV       A,#0x2
   \   00014E   12....       LCALL     ?XSTACK_DISP0_8
   \   000151   E0           MOVX      A,@DPTR
   \   000152   FA           MOV       R2,A
   \   000153   A3           INC       DPTR
   \   000154   E0           MOVX      A,@DPTR
   \   000155   FB           MOV       R3,A
   \   000156   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000159   8A..         MOV       ?V0,R2
   \   00015B   8B..         MOV       ?V1,R3
   \   00015D   AE..         MOV       R6,?V0
   \   00015F   AF..         MOV       R7,?V1
   \   000161   EE           MOV       A,R6
   \   000162   4F           ORL       A,R7
   \   000163   7067         JNZ       ??MAC_CbackEvent_11
    205              {
    206                // Not enough memory. If data confirm - try again
    207                if ((event == MAC_MCPS_DATA_CNF) && (pData->dataCnf.pDataReq != NULL))
   \   000165   740C         MOV       A,#0xc
   \   000167   65..         XRL       A,?V2
   \   000169   705E         JNZ       ??MAC_CbackEvent_12
   \   00016B   85..82       MOV       DPL,?XSP + 0
   \   00016E   85..83       MOV       DPH,?XSP + 1
   \   000171   E0           MOVX      A,@DPTR
   \   000172   F8           MOV       R0,A
   \   000173   A3           INC       DPTR
   \   000174   E0           MOVX      A,@DPTR
   \   000175   F583         MOV       DPH,A
   \   000177   8882         MOV       DPL,R0
   \   000179   A3           INC       DPTR
   \   00017A   A3           INC       DPTR
   \   00017B   A3           INC       DPTR
   \   00017C   E0           MOVX      A,@DPTR
   \   00017D   F8           MOV       R0,A
   \   00017E   A3           INC       DPTR
   \   00017F   E0           MOVX      A,@DPTR
   \   000180   F9           MOV       R1,A
   \   000181   E8           MOV       A,R0
   \   000182   49           ORL       A,R1
   \   000183   6044         JZ        ??MAC_CbackEvent_12
    208                {
    209                  halIntState_t intState;
    210          
    211                  // This is not normally deallocated here because the pZMac_AppCallback()
    212                  // application may need it.
    213                  HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000185   A2AF         MOV       C,0xa8.7
   \   000187   E4           CLR       A
   \   000188   33           RLC       A
   \   000189   F5..         MOV       ?V0,A
   \   00018B   C2AF         CLR       0xa8.7
    214          
    215                  mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   00018D                ; Setup parameters for call to function mac_msg_deallocate
   \   00018D   85..82       MOV       DPL,?XSP + 0
   \   000190   85..83       MOV       DPH,?XSP + 1
   \   000193   E0           MOVX      A,@DPTR
   \   000194   2403         ADD       A,#0x3
   \   000196   FA           MOV       R2,A
   \   000197   A3           INC       DPTR
   \   000198   E0           MOVX      A,@DPTR
   \   000199   3400         ADDC      A,#0x0
   \   00019B   FB           MOV       R3,A
   \   00019C   12....       LCALL     `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    216                  if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \   00019F                ; Setup parameters for call to function osal_msg_allocate
   \   00019F   7402         MOV       A,#0x2
   \   0001A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A4   E0           MOVX      A,@DPTR
   \   0001A5   FA           MOV       R2,A
   \   0001A6   A3           INC       DPTR
   \   0001A7   E0           MOVX      A,@DPTR
   \   0001A8   FB           MOV       R3,A
   \   0001A9   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   0001AC   8A..         MOV       ?V4,R2
   \   0001AE   8B..         MOV       ?V5,R3
   \   0001B0   AE..         MOV       R6,?V4
   \   0001B2   AF..         MOV       R7,?V5
   \   0001B4   EE           MOV       A,R6
   \   0001B5   4F           ORL       A,R7
   \   0001B6   7009         JNZ       ??MAC_CbackEvent_13
    217                  {
    218                    // Still no allocation, something is wrong
    219                    HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   0001B8   E5..         MOV       A,?V0
   \   0001BA   A2E0         MOV       C,0xE0 /* A   */.0
   \   0001BC   92AF         MOV       0xa8.7,C
    220                    return;
   \   0001BE   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
    221                  }
    222                  HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??MAC_CbackEvent_13:
   \   0001C1   E5..         MOV       A,?V0
   \   0001C3   A2E0         MOV       C,0xE0 /* A   */.0
   \   0001C5   92AF         MOV       0xa8.7,C
   \   0001C7   8003         SJMP      ??MAC_CbackEvent_11
    223                }
    224                else
    225                {
    226                  // This message is dropped
    227                  return;
   \                     ??MAC_CbackEvent_12:
   \   0001C9   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
    228                }
    229              }
    230              osal_memcpy(msgPtr, pData, zmacCBSizeTable[event]);
   \                     ??MAC_CbackEvent_11:
   \   0001CC                ; Setup parameters for call to function osal_memcpy
   \   0001CC   85..82       MOV       DPL,?XSP + 0
   \   0001CF   85..83       MOV       DPH,?XSP + 1
   \   0001D2   E0           MOVX      A,@DPTR
   \   0001D3   F5..         MOV       ?V0,A
   \   0001D5   A3           INC       DPTR
   \   0001D6   E0           MOVX      A,@DPTR
   \   0001D7   F5..         MOV       ?V1,A
   \   0001D9   85....       MOV       ?V4,?V0
   \   0001DC   85....       MOV       ?V5,?V1
   \   0001DF   75..00       MOV       ?V6,#0x0
   \   0001E2   78..         MOV       R0,#?V4
   \   0001E4   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001E7   E5..         MOV       A,?V2
   \   0001E9   F8           MOV       R0,A
   \   0001EA   7900         MOV       R1,#0x0
   \   0001EC   74..         MOV       A,#zmacCBSizeTable & 0xff
   \   0001EE   28           ADD       A,R0
   \   0001EF   F582         MOV       DPL,A
   \   0001F1   74..         MOV       A,#(zmacCBSizeTable >> 8) & 0xff
   \   0001F3   39           ADDC      A,R1
   \   0001F4   F583         MOV       DPH,A
   \   0001F6   E4           CLR       A
   \   0001F7   93           MOVC      A,@A+DPTR
   \   0001F8   FC           MOV       R4,A
   \   0001F9   7D00         MOV       R5,#0x0
   \   0001FB   EE           MOV       A,R6
   \   0001FC   FA           MOV       R2,A
   \   0001FD   EF           MOV       A,R7
   \   0001FE   FB           MOV       R3,A
   \   0001FF   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000202   7403         MOV       A,#0x3
   \   000204   12....       LCALL     ?DEALLOC_XSTACK8
    231            }
    232          
    233            if ( event == MAC_MLME_BEACON_NOTIFY_IND )
   \                     ??MAC_CbackEvent_6:
   \   000207   7405         MOV       A,#0x5
   \   000209   65..         XRL       A,?V2
   \   00020B   6003         JZ        $+5
   \   00020D   02....       LJMP      ??MAC_CbackEvent_14 & 0xFFFF
    234            {
    235              macMlmeBeaconNotifyInd_t *pBeacon = (macMlmeBeaconNotifyInd_t*)msgPtr;
   \   000210   8E..         MOV       ?V0,R6
   \   000212   8F..         MOV       ?V1,R7
    236          
    237              osal_memcpy(pBeacon+1, pBeacon->pPanDesc, sizeof(macPanDesc_t));
   \   000214                ; Setup parameters for call to function osal_memcpy
   \   000214   85..82       MOV       DPL,?V0
   \   000217   85..83       MOV       DPH,?V1
   \   00021A   A3           INC       DPTR
   \   00021B   A3           INC       DPTR
   \   00021C   A3           INC       DPTR
   \   00021D   E0           MOVX      A,@DPTR
   \   00021E   F5..         MOV       ?V4,A
   \   000220   A3           INC       DPTR
   \   000221   E0           MOVX      A,@DPTR
   \   000222   F5..         MOV       ?V5,A
   \   000224   75..00       MOV       ?V6,#0x0
   \   000227   78..         MOV       R0,#?V4
   \   000229   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00022C   7C21         MOV       R4,#0x21
   \   00022E   7D00         MOV       R5,#0x0
   \   000230   E5..         MOV       A,?V0
   \   000232   240B         ADD       A,#0xb
   \   000234   FA           MOV       R2,A
   \   000235   E4           CLR       A
   \   000236   35..         ADDC      A,?V1
   \   000238   FB           MOV       R3,A
   \   000239   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00023C   7403         MOV       A,#0x3
   \   00023E   12....       LCALL     ?DEALLOC_XSTACK8
    238              pBeacon->pPanDesc = (macPanDesc_t *)(pBeacon+1);
   \   000241   E5..         MOV       A,?V0
   \   000243   240B         ADD       A,#0xb
   \   000245   F8           MOV       R0,A
   \   000246   E4           CLR       A
   \   000247   35..         ADDC      A,?V1
   \   000249   F9           MOV       R1,A
   \   00024A   85..82       MOV       DPL,?V0
   \   00024D   85..83       MOV       DPH,?V1
   \   000250   A3           INC       DPTR
   \   000251   A3           INC       DPTR
   \   000252   A3           INC       DPTR
   \   000253   E8           MOV       A,R0
   \   000254   F0           MOVX      @DPTR,A
   \   000255   A3           INC       DPTR
   \   000256   E9           MOV       A,R1
   \   000257   F0           MOVX      @DPTR,A
    239              osal_memcpy(pBeacon->pPanDesc+1, pBeacon->pSdu, pBeacon->sduLength);
   \   000258                ; Setup parameters for call to function osal_memcpy
   \   000258   85..82       MOV       DPL,?V0
   \   00025B   85..83       MOV       DPH,?V1
   \   00025E   A3           INC       DPTR
   \   00025F   A3           INC       DPTR
   \   000260   A3           INC       DPTR
   \   000261   A3           INC       DPTR
   \   000262   A3           INC       DPTR
   \   000263   A3           INC       DPTR
   \   000264   A3           INC       DPTR
   \   000265   A3           INC       DPTR
   \   000266   A3           INC       DPTR
   \   000267   E0           MOVX      A,@DPTR
   \   000268   F5..         MOV       ?V4,A
   \   00026A   A3           INC       DPTR
   \   00026B   E0           MOVX      A,@DPTR
   \   00026C   F5..         MOV       ?V5,A
   \   00026E   75..00       MOV       ?V6,#0x0
   \   000271   78..         MOV       R0,#?V4
   \   000273   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000276   85..82       MOV       DPL,?V0
   \   000279   85..83       MOV       DPH,?V1
   \   00027C   A3           INC       DPTR
   \   00027D   A3           INC       DPTR
   \   00027E   A3           INC       DPTR
   \   00027F   A3           INC       DPTR
   \   000280   A3           INC       DPTR
   \   000281   A3           INC       DPTR
   \   000282   A3           INC       DPTR
   \   000283   A3           INC       DPTR
   \   000284   E0           MOVX      A,@DPTR
   \   000285   FC           MOV       R4,A
   \   000286   7D00         MOV       R5,#0x0
   \   000288   85..82       MOV       DPL,?V0
   \   00028B   85..83       MOV       DPH,?V1
   \   00028E   A3           INC       DPTR
   \   00028F   A3           INC       DPTR
   \   000290   A3           INC       DPTR
   \   000291   E0           MOVX      A,@DPTR
   \   000292   2421         ADD       A,#0x21
   \   000294   FA           MOV       R2,A
   \   000295   A3           INC       DPTR
   \   000296   E0           MOVX      A,@DPTR
   \   000297   3400         ADDC      A,#0x0
   \   000299   FB           MOV       R3,A
   \   00029A   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00029D   7403         MOV       A,#0x3
   \   00029F   12....       LCALL     ?DEALLOC_XSTACK8
    240              pBeacon->pSdu = (uint8 *)(pBeacon->pPanDesc+1);
   \   0002A2   85..82       MOV       DPL,?V0
   \   0002A5   85..83       MOV       DPH,?V1
   \   0002A8   A3           INC       DPTR
   \   0002A9   A3           INC       DPTR
   \   0002AA   A3           INC       DPTR
   \   0002AB   E0           MOVX      A,@DPTR
   \   0002AC   2421         ADD       A,#0x21
   \   0002AE   F8           MOV       R0,A
   \   0002AF   A3           INC       DPTR
   \   0002B0   E0           MOVX      A,@DPTR
   \   0002B1   3400         ADDC      A,#0x0
   \   0002B3   F9           MOV       R1,A
   \   0002B4   85..82       MOV       DPL,?V0
   \   0002B7   85..83       MOV       DPH,?V1
   \   0002BA   A3           INC       DPTR
   \   0002BB   A3           INC       DPTR
   \   0002BC   A3           INC       DPTR
   \   0002BD   A3           INC       DPTR
   \   0002BE   A3           INC       DPTR
   \   0002BF   A3           INC       DPTR
   \   0002C0   A3           INC       DPTR
   \   0002C1   A3           INC       DPTR
   \   0002C2   A3           INC       DPTR
   \   0002C3   E8           MOV       A,R0
   \   0002C4   F0           MOVX      @DPTR,A
   \   0002C5   A3           INC       DPTR
   \   0002C6   E9           MOV       A,R1
   \   0002C7   F0           MOVX      @DPTR,A
   \   0002C8   02....       LJMP      ??MAC_CbackEvent_15 & 0xFFFF
    241            }
    242            else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_14:
   \   0002CB   7407         MOV       A,#0x7
   \   0002CD   65..         XRL       A,?V2
   \   0002CF   6003         JZ        $+5
   \   0002D1   02....       LJMP      ??MAC_CbackEvent_15 & 0xFFFF
    243            {
    244              macMlmeScanCnf_t *pScan = (macMlmeScanCnf_t*)msgPtr;
   \   0002D4   8E..         MOV       ?V0,R6
   \   0002D6   8F..         MOV       ?V1,R7
    245          
    246              if (ZMac_ScanBuf != NULL)
   \   0002D8   90....       MOV       DPTR,#ZMac_ScanBuf
   \   0002DB   E0           MOVX      A,@DPTR
   \   0002DC   F8           MOV       R0,A
   \   0002DD   A3           INC       DPTR
   \   0002DE   E0           MOVX      A,@DPTR
   \   0002DF   F9           MOV       R1,A
   \   0002E0   E8           MOV       A,R0
   \   0002E1   49           ORL       A,R1
   \   0002E2   7003         JNZ       $+5
   \   0002E4   02....       LJMP      ??MAC_CbackEvent_15 & 0xFFFF
    247              {
    248                void *pTmp = ZMac_ScanBuf;
   \   0002E7   90....       MOV       DPTR,#ZMac_ScanBuf
   \   0002EA   E0           MOVX      A,@DPTR
   \   0002EB   F5..         MOV       ?V8,A
   \   0002ED   A3           INC       DPTR
   \   0002EE   E0           MOVX      A,@DPTR
   \   0002EF   F5..         MOV       ?V9,A
    249                ZMac_ScanBuf = NULL;
   \   0002F1   90....       MOV       DPTR,#ZMac_ScanBuf
   \   0002F4   7400         MOV       A,#0x0
   \   0002F6   F0           MOVX      @DPTR,A
   \   0002F7   A3           INC       DPTR
   \   0002F8   7400         MOV       A,#0x0
   \   0002FA   F0           MOVX      @DPTR,A
    250          
    251                if (pScan->scanType == ZMAC_ED_SCAN)
   \   0002FB   85..82       MOV       DPL,?V0
   \   0002FE   85..83       MOV       DPH,?V1
   \   000301   A3           INC       DPTR
   \   000302   A3           INC       DPTR
   \   000303   E0           MOVX      A,@DPTR
   \   000304   704D         JNZ       ??MAC_CbackEvent_16
    252                {
    253                  pScan->result.pEnergyDetect = (uint8*) (pScan + 1);
   \   000306   E5..         MOV       A,?V0
   \   000308   240B         ADD       A,#0xb
   \   00030A   F8           MOV       R0,A
   \   00030B   E4           CLR       A
   \   00030C   35..         ADDC      A,?V1
   \   00030E   F9           MOV       R1,A
   \   00030F   85..82       MOV       DPL,?V0
   \   000312   85..83       MOV       DPH,?V1
   \   000315   A3           INC       DPTR
   \   000316   A3           INC       DPTR
   \   000317   A3           INC       DPTR
   \   000318   A3           INC       DPTR
   \   000319   A3           INC       DPTR
   \   00031A   A3           INC       DPTR
   \   00031B   A3           INC       DPTR
   \   00031C   A3           INC       DPTR
   \   00031D   A3           INC       DPTR
   \   00031E   E8           MOV       A,R0
   \   00031F   F0           MOVX      @DPTR,A
   \   000320   A3           INC       DPTR
   \   000321   E9           MOV       A,R1
   \   000322   F0           MOVX      @DPTR,A
    254                  osal_memcpy(pScan->result.pEnergyDetect, pTmp, ZMAC_ED_SCAN_MAXCHANNELS);
   \   000323                ; Setup parameters for call to function osal_memcpy
   \   000323   85....       MOV       ?V4,?V8
   \   000326   85....       MOV       ?V5,?V9
   \   000329   75..00       MOV       ?V6,#0x0
   \   00032C   78..         MOV       R0,#?V4
   \   00032E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000331   7C1B         MOV       R4,#0x1b
   \   000333   7D00         MOV       R5,#0x0
   \   000335   85..82       MOV       DPL,?V0
   \   000338   85..83       MOV       DPH,?V1
   \   00033B   A3           INC       DPTR
   \   00033C   A3           INC       DPTR
   \   00033D   A3           INC       DPTR
   \   00033E   A3           INC       DPTR
   \   00033F   A3           INC       DPTR
   \   000340   A3           INC       DPTR
   \   000341   A3           INC       DPTR
   \   000342   A3           INC       DPTR
   \   000343   A3           INC       DPTR
   \   000344   E0           MOVX      A,@DPTR
   \   000345   FA           MOV       R2,A
   \   000346   A3           INC       DPTR
   \   000347   E0           MOVX      A,@DPTR
   \   000348   FB           MOV       R3,A
   \   000349   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00034C   7403         MOV       A,#0x3
   \   00034E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000351   8063         SJMP      ??MAC_CbackEvent_17
    255                }
    256                else
    257                {
    258                  pScan->result.pPanDescriptor = (macPanDesc_t*) (pScan + 1);
   \                     ??MAC_CbackEvent_16:
   \   000353   E5..         MOV       A,?V0
   \   000355   240B         ADD       A,#0xb
   \   000357   F8           MOV       R0,A
   \   000358   E4           CLR       A
   \   000359   35..         ADDC      A,?V1
   \   00035B   F9           MOV       R1,A
   \   00035C   85..82       MOV       DPL,?V0
   \   00035F   85..83       MOV       DPH,?V1
   \   000362   A3           INC       DPTR
   \   000363   A3           INC       DPTR
   \   000364   A3           INC       DPTR
   \   000365   A3           INC       DPTR
   \   000366   A3           INC       DPTR
   \   000367   A3           INC       DPTR
   \   000368   A3           INC       DPTR
   \   000369   A3           INC       DPTR
   \   00036A   A3           INC       DPTR
   \   00036B   E8           MOV       A,R0
   \   00036C   F0           MOVX      @DPTR,A
   \   00036D   A3           INC       DPTR
   \   00036E   E9           MOV       A,R1
   \   00036F   F0           MOVX      @DPTR,A
    259                  osal_memcpy(pScan + 1, pTmp, sizeof( ZMacPanDesc_t ) * pScan->resultListSize);
   \   000370                ; Setup parameters for call to function osal_memcpy
   \   000370   85....       MOV       ?V4,?V8
   \   000373   85....       MOV       ?V5,?V9
   \   000376   75..00       MOV       ?V6,#0x0
   \   000379   78..         MOV       R0,#?V4
   \   00037B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00037E   85..82       MOV       DPL,?V0
   \   000381   85..83       MOV       DPH,?V1
   \   000384   A3           INC       DPTR
   \   000385   A3           INC       DPTR
   \   000386   A3           INC       DPTR
   \   000387   A3           INC       DPTR
   \   000388   A3           INC       DPTR
   \   000389   A3           INC       DPTR
   \   00038A   A3           INC       DPTR
   \   00038B   A3           INC       DPTR
   \   00038C   E0           MOVX      A,@DPTR
   \   00038D   FC           MOV       R4,A
   \   00038E   7D00         MOV       R5,#0x0
   \   000390   EC           MOV       A,R4
   \   000391   75F021       MOV       B,#0x21
   \   000394   A4           MUL       AB
   \   000395   CC           XCH       A,R4
   \   000396   A8F0         MOV       R0,B
   \   000398   75F000       MOV       B,#0x0
   \   00039B   A4           MUL       AB
   \   00039C   28           ADD       A,R0
   \   00039D   F8           MOV       R0,A
   \   00039E   75F021       MOV       B,#0x21
   \   0003A1   ED           MOV       A,R5
   \   0003A2   A4           MUL       AB
   \   0003A3   28           ADD       A,R0
   \   0003A4   FD           MOV       R5,A
   \   0003A5   E5..         MOV       A,?V0
   \   0003A7   240B         ADD       A,#0xb
   \   0003A9   FA           MOV       R2,A
   \   0003AA   E4           CLR       A
   \   0003AB   35..         ADDC      A,?V1
   \   0003AD   FB           MOV       R3,A
   \   0003AE   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0003B1   7403         MOV       A,#0x3
   \   0003B3   12....       LCALL     ?DEALLOC_XSTACK8
    260                }
    261          
    262                osal_mem_free(pTmp);
   \                     ??MAC_CbackEvent_17:
   \   0003B6                ; Setup parameters for call to function osal_mem_free
   \   0003B6   AA..         MOV       R2,?V8
   \   0003B8   AB..         MOV       R3,?V9
   \   0003BA   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    263              }
    264            }
    265          
    266            if ( ( pZMac_AppCallback == NULL ) || ( pZMac_AppCallback( (uint8 *)msgPtr ) == FALSE ) )
   \                     ??MAC_CbackEvent_15:
   \   0003BD   90....       MOV       DPTR,#pZMac_AppCallback
   \   0003C0   E0           MOVX      A,@DPTR
   \   0003C1   F8           MOV       R0,A
   \   0003C2   A3           INC       DPTR
   \   0003C3   E0           MOVX      A,@DPTR
   \   0003C4   F9           MOV       R1,A
   \   0003C5   E8           MOV       A,R0
   \   0003C6   49           ORL       A,R1
   \   0003C7   6018         JZ        ??MAC_CbackEvent_18
   \   0003C9                ; Setup parameters for indirect call
   \   0003C9   EE           MOV       A,R6
   \   0003CA   FA           MOV       R2,A
   \   0003CB   EF           MOV       A,R7
   \   0003CC   FB           MOV       R3,A
   \   0003CD   90....       MOV       DPTR,#pZMac_AppCallback
   \   0003D0   E0           MOVX      A,@DPTR
   \   0003D1   F8           MOV       R0,A
   \   0003D2   A3           INC       DPTR
   \   0003D3   E0           MOVX      A,@DPTR
   \   0003D4   F583         MOV       DPH,A
   \   0003D6   8882         MOV       DPL,R0
   \   0003D8   12....       LCALL     ?CALL_IND
   \   0003DB   E9           MOV       A,R1
   \   0003DC   6003         JZ        $+5
   \   0003DE   02....       LJMP      ??MAC_CbackEvent_19 & 0xFFFF
    267            {
    268              // Filter out non-zigbee packets
    269              if ( event == MAC_MCPS_DATA_IND )
   \                     ??MAC_CbackEvent_18:
   \   0003E1   740D         MOV       A,#0xd
   \   0003E3   65..         XRL       A,?V2
   \   0003E5   6003         JZ        $+5
   \   0003E7   02....       LJMP      ??MAC_CbackEvent_20 & 0xFFFF
    270              {
    271                uint8 fcFrameType = (pData->dataInd.msdu.p[0] & 0x03);
   \   0003EA   85..82       MOV       DPL,?XSP + 0
   \   0003ED   85..83       MOV       DPH,?XSP + 1
   \   0003F0   E0           MOVX      A,@DPTR
   \   0003F1   F8           MOV       R0,A
   \   0003F2   A3           INC       DPTR
   \   0003F3   E0           MOVX      A,@DPTR
   \   0003F4   F583         MOV       DPH,A
   \   0003F6   8882         MOV       DPL,R0
   \   0003F8   A3           INC       DPTR
   \   0003F9   A3           INC       DPTR
   \   0003FA   E0           MOVX      A,@DPTR
   \   0003FB   F8           MOV       R0,A
   \   0003FC   A3           INC       DPTR
   \   0003FD   E0           MOVX      A,@DPTR
   \   0003FE   F583         MOV       DPH,A
   \   000400   8882         MOV       DPL,R0
   \   000402   E0           MOVX      A,@DPTR
   \   000403   5403         ANL       A,#0x3
   \   000405   F5..         MOV       ?V3,A
    272                uint8 fcProtoVer = ((pData->dataInd.msdu.p[0] >> 2) & 0x0F);
   \   000407   85..82       MOV       DPL,?XSP + 0
   \   00040A   85..83       MOV       DPH,?XSP + 1
   \   00040D   E0           MOVX      A,@DPTR
   \   00040E   F8           MOV       R0,A
   \   00040F   A3           INC       DPTR
   \   000410   E0           MOVX      A,@DPTR
   \   000411   F583         MOV       DPH,A
   \   000413   8882         MOV       DPL,R0
   \   000415   A3           INC       DPTR
   \   000416   A3           INC       DPTR
   \   000417   E0           MOVX      A,@DPTR
   \   000418   F8           MOV       R0,A
   \   000419   A3           INC       DPTR
   \   00041A   E0           MOVX      A,@DPTR
   \   00041B   F583         MOV       DPH,A
   \   00041D   8882         MOV       DPL,R0
   \   00041F   E0           MOVX      A,@DPTR
   \   000420   13           RRC       A
   \   000421   13           RRC       A
   \   000422   543F         ANL       A,#0x3f
   \   000424   540F         ANL       A,#0xf
   \   000426   F5..         MOV       ?V5,A
    273                uint8 fcReserve = (pData->dataInd.msdu.p[1] & 0xC0);
   \   000428   85..82       MOV       DPL,?XSP + 0
   \   00042B   85..83       MOV       DPH,?XSP + 1
   \   00042E   E0           MOVX      A,@DPTR
   \   00042F   F8           MOV       R0,A
   \   000430   A3           INC       DPTR
   \   000431   E0           MOVX      A,@DPTR
   \   000432   F583         MOV       DPH,A
   \   000434   8882         MOV       DPL,R0
   \   000436   A3           INC       DPTR
   \   000437   A3           INC       DPTR
   \   000438   E0           MOVX      A,@DPTR
   \   000439   F8           MOV       R0,A
   \   00043A   A3           INC       DPTR
   \   00043B   E0           MOVX      A,@DPTR
   \   00043C   F583         MOV       DPH,A
   \   00043E   8882         MOV       DPL,R0
   \   000440   A3           INC       DPTR
   \   000441   E0           MOVX      A,@DPTR
   \   000442   54C0         ANL       A,#0xc0
   \   000444   F5..         MOV       ?V4,A
    274                if ( (fcFrameType > 0x01) || (fcProtoVer != _NIB.nwkProtocolVersion) || (fcReserve != 0)
    275                    || (pData->dataInd.mac.srcAddr.addrMode != SADDR_MODE_SHORT) )
   \   000446   E5..         MOV       A,?V3
   \   000448   C3           CLR       C
   \   000449   9402         SUBB      A,#0x2
   \   00044B   5025         JNC       ??MAC_CbackEvent_21
   \   00044D   90....       MOV       DPTR,#_NIB + 17
   \   000450   E0           MOVX      A,@DPTR
   \   000451   65..         XRL       A,?V5
   \   000453   701D         JNZ       ??MAC_CbackEvent_21
   \   000455   E5..         MOV       A,?V4
   \   000457   7019         JNZ       ??MAC_CbackEvent_21
   \   000459   85..82       MOV       DPL,?XSP + 0
   \   00045C   85..83       MOV       DPH,?XSP + 1
   \   00045F   E0           MOVX      A,@DPTR
   \   000460   F8           MOV       R0,A
   \   000461   A3           INC       DPTR
   \   000462   E0           MOVX      A,@DPTR
   \   000463   C8           XCH       A,R0
   \   000464   241B         ADD       A,#0x1b
   \   000466   F582         MOV       DPL,A
   \   000468   C8           XCH       A,R0
   \   000469   3400         ADDC      A,#0x0
   \   00046B   F583         MOV       DPH,A
   \   00046D   E0           MOVX      A,@DPTR
   \   00046E   6402         XRL       A,#0x2
   \   000470   600A         JZ        ??MAC_CbackEvent_22
    276                {
    277          #if (ZG_BUILD_RTR_TYPE)       
    278                  //Is this for GP
    279                  if(fcProtoVer == GP_ZIGBEE_PROTOCOL_VER)
    280                  {
    281                    pData->hdr.event = GP_MAC_MCPS_DATA_IND;
    282             
    283                    // Application hasn't already processed this message. Send it to NWK task.
    284                    osal_msg_send( gp_TaskID, (uint8 *)pData );
    285          
    286                    return;
    287                  }
    288          #endif
    289                
    290                  // Drop the message
    291                  mac_msg_deallocate( (uint8 **)&pData );
   \                     ??MAC_CbackEvent_21:
   \   000472                ; Setup parameters for call to function mac_msg_deallocate
   \   000472   AA..         MOV       R2,?XSP + 0
   \   000474   AB..         MOV       R3,?XSP + 1
   \   000476   12....       LCALL     `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    292                  return;
   \   000479   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
    293                }
    294                else
    295                {
    296                  macDataInd_t *pInd = &msgPtr->dataInd.mac;
   \                     ??MAC_CbackEvent_22:
   \   00047C   EE           MOV       A,R6
   \   00047D   2413         ADD       A,#0x13
   \   00047F   F5..         MOV       ?V0,A
   \   000481   E4           CLR       A
   \   000482   3F           ADDC      A,R7
   \   000483   F5..         MOV       ?V1,A
    297                  // See if LQI needs adjustment due to frame correlation
    298                  ZMacLqiAdjust( pInd->correlation, &pInd->mpduLinkQuality );
   \   000485                ; Setup parameters for call to function ZMacLqiAdjust
   \   000485   E5..         MOV       A,?V0
   \   000487   241C         ADD       A,#0x1c
   \   000489   FA           MOV       R2,A
   \   00048A   E4           CLR       A
   \   00048B   35..         ADDC      A,?V1
   \   00048D   FB           MOV       R3,A
   \   00048E   E5..         MOV       A,?V0
   \   000490   241D         ADD       A,#0x1d
   \   000492   F582         MOV       DPL,A
   \   000494   E4           CLR       A
   \   000495   35..         ADDC      A,?V1
   \   000497   F583         MOV       DPH,A
   \   000499   E0           MOVX      A,@DPTR
   \   00049A   F9           MOV       R1,A
   \   00049B   12....       LCALL     `??ZMacLqiAdjust::?relay`; Banked call to: ZMacLqiAdjust
    299          
    300                  // Look for broadcast message that has a radius of greater 1
    301                  if ( (pData->dataInd.mac.dstAddr.addr.shortAddr == 0xFFFF)
    302                         && (pData->dataInd.msdu.p[6] > 1) )
   \   00049E   85..82       MOV       DPL,?XSP + 0
   \   0004A1   85..83       MOV       DPH,?XSP + 1
   \   0004A4   E0           MOVX      A,@DPTR
   \   0004A5   F8           MOV       R0,A
   \   0004A6   A3           INC       DPTR
   \   0004A7   E0           MOVX      A,@DPTR
   \   0004A8   C8           XCH       A,R0
   \   0004A9   241C         ADD       A,#0x1c
   \   0004AB   F582         MOV       DPL,A
   \   0004AD   C8           XCH       A,R0
   \   0004AE   3400         ADDC      A,#0x0
   \   0004B0   F583         MOV       DPH,A
   \   0004B2   E0           MOVX      A,@DPTR
   \   0004B3   64FF         XRL       A,#0xff
   \   0004B5   7004         JNZ       ??MAC_CbackEvent_23
   \   0004B7   A3           INC       DPTR
   \   0004B8   E0           MOVX      A,@DPTR
   \   0004B9   64FF         XRL       A,#0xff
   \                     ??MAC_CbackEvent_23:
   \   0004BB   6003         JZ        $+5
   \   0004BD   02....       LJMP      ??MAC_CbackEvent_24 & 0xFFFF
   \   0004C0   85..82       MOV       DPL,?XSP + 0
   \   0004C3   85..83       MOV       DPH,?XSP + 1
   \   0004C6   E0           MOVX      A,@DPTR
   \   0004C7   F8           MOV       R0,A
   \   0004C8   A3           INC       DPTR
   \   0004C9   E0           MOVX      A,@DPTR
   \   0004CA   F583         MOV       DPH,A
   \   0004CC   8882         MOV       DPL,R0
   \   0004CE   A3           INC       DPTR
   \   0004CF   A3           INC       DPTR
   \   0004D0   E0           MOVX      A,@DPTR
   \   0004D1   F8           MOV       R0,A
   \   0004D2   A3           INC       DPTR
   \   0004D3   E0           MOVX      A,@DPTR
   \   0004D4   C8           XCH       A,R0
   \   0004D5   2406         ADD       A,#0x6
   \   0004D7   F582         MOV       DPL,A
   \   0004D9   C8           XCH       A,R0
   \   0004DA   3400         ADDC      A,#0x0
   \   0004DC   F583         MOV       DPH,A
   \   0004DE   E0           MOVX      A,@DPTR
   \   0004DF   C3           CLR       C
   \   0004E0   9402         SUBB      A,#0x2
   \   0004E2   407E         JC        ??MAC_CbackEvent_24
    303                  {
    304                    // Send the messsage to a special broadcast queue
    305                    if ( nwk_broadcastSend( (uint8 *)msgPtr ) != SUCCESS )
   \   0004E4                ; Setup parameters for call to function nwk_broadcastSend
   \   0004E4   EE           MOV       A,R6
   \   0004E5   FA           MOV       R2,A
   \   0004E6   EF           MOV       A,R7
   \   0004E7   FB           MOV       R3,A
   \   0004E8   12....       LCALL     `??nwk_broadcastSend::?relay`; Banked call to: nwk_broadcastSend
   \   0004EB   E9           MOV       A,R1
   \   0004EC   6007         JZ        ??MAC_CbackEvent_25
    306                    {
    307                      // Drop the message, too many broadcast messages to process
    308                      mac_msg_deallocate( (uint8 **)&pData );
   \   0004EE                ; Setup parameters for call to function mac_msg_deallocate
   \   0004EE   AA..         MOV       R2,?XSP + 0
   \   0004F0   AB..         MOV       R3,?XSP + 1
   \   0004F2   12....       LCALL     `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    309                    }
    310                    return;
   \                     ??MAC_CbackEvent_25:
   \   0004F5   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
    311                  }
    312                }
    313              }
    314              else if ((event == MAC_MCPS_DATA_CNF) && (pData->hdr.status != MAC_NO_RESOURCES))
   \                     ??MAC_CbackEvent_20:
   \   0004F8   740C         MOV       A,#0xc
   \   0004FA   65..         XRL       A,?V2
   \   0004FC   7064         JNZ       ??MAC_CbackEvent_24
   \   0004FE   85..82       MOV       DPL,?XSP + 0
   \   000501   85..83       MOV       DPH,?XSP + 1
   \   000504   E0           MOVX      A,@DPTR
   \   000505   F8           MOV       R0,A
   \   000506   A3           INC       DPTR
   \   000507   E0           MOVX      A,@DPTR
   \   000508   F583         MOV       DPH,A
   \   00050A   8882         MOV       DPL,R0
   \   00050C   A3           INC       DPTR
   \   00050D   E0           MOVX      A,@DPTR
   \   00050E   641A         XRL       A,#0x1a
   \   000510   6050         JZ        ??MAC_CbackEvent_24
    315              {
    316                macMcpsDataCnf_t *pCnf = &msgPtr->dataCnf;
   \   000512   8E..         MOV       ?V0,R6
   \   000514   8F..         MOV       ?V1,R7
    317          
    318                if ( pCnf->pDataReq && (pCnf->pDataReq->internal.txOptions & MAC_TXOPTION_ACK) )
   \   000516   85..82       MOV       DPL,?V0
   \   000519   85..83       MOV       DPH,?V1
   \   00051C   A3           INC       DPTR
   \   00051D   A3           INC       DPTR
   \   00051E   A3           INC       DPTR
   \   00051F   E0           MOVX      A,@DPTR
   \   000520   F8           MOV       R0,A
   \   000521   A3           INC       DPTR
   \   000522   E0           MOVX      A,@DPTR
   \   000523   F9           MOV       R1,A
   \   000524   E8           MOV       A,R0
   \   000525   49           ORL       A,R1
   \   000526   603A         JZ        ??MAC_CbackEvent_24
   \   000528   85..82       MOV       DPL,?V0
   \   00052B   85..83       MOV       DPH,?V1
   \   00052E   A3           INC       DPTR
   \   00052F   A3           INC       DPTR
   \   000530   A3           INC       DPTR
   \   000531   E0           MOVX      A,@DPTR
   \   000532   F8           MOV       R0,A
   \   000533   A3           INC       DPTR
   \   000534   E0           MOVX      A,@DPTR
   \   000535   C8           XCH       A,R0
   \   000536   240E         ADD       A,#0xe
   \   000538   F582         MOV       DPL,A
   \   00053A   C8           XCH       A,R0
   \   00053B   3400         ADDC      A,#0x0
   \   00053D   F583         MOV       DPH,A
   \   00053F   E0           MOVX      A,@DPTR
   \   000540   F8           MOV       R0,A
   \   000541   A3           INC       DPTR
   \   000542   E0           MOVX      A,@DPTR
   \   000543   F9           MOV       R1,A
   \   000544   E8           MOV       A,R0
   \   000545   A2E0         MOV       C,0xE0 /* A   */.0
   \   000547   5019         JNC       ??MAC_CbackEvent_24
    319                {
    320                  // See if LQI needs adjustment due to frame correlation
    321                  ZMacLqiAdjust( pCnf->correlation, &pCnf->mpduLinkQuality );
   \   000549                ; Setup parameters for call to function ZMacLqiAdjust
   \   000549   E5..         MOV       A,?V0
   \   00054B   240C         ADD       A,#0xc
   \   00054D   FA           MOV       R2,A
   \   00054E   E4           CLR       A
   \   00054F   35..         ADDC      A,?V1
   \   000551   FB           MOV       R3,A
   \   000552   E5..         MOV       A,?V0
   \   000554   240D         ADD       A,#0xd
   \   000556   F582         MOV       DPL,A
   \   000558   E4           CLR       A
   \   000559   35..         ADDC      A,?V1
   \   00055B   F583         MOV       DPH,A
   \   00055D   E0           MOVX      A,@DPTR
   \   00055E   F9           MOV       R1,A
   \   00055F   12....       LCALL     `??ZMacLqiAdjust::?relay`; Banked call to: ZMacLqiAdjust
    322                }
    323              }
    324              if(event == MAC_MCPS_GREEN_PWR_DATA_CNF)
   \                     ??MAC_CbackEvent_24:
   \   000562   7411         MOV       A,#0x11
   \   000564   65..         XRL       A,?V2
   \   000566   7009         JNZ       ??MAC_CbackEvent_26
    325              {
    326                msgPtr->dataCnf.hdr.event = GP_MAC_MCPS_DATA_CNF;
   \   000568   8E82         MOV       DPL,R6
   \   00056A   8F83         MOV       DPH,R7
   \   00056C   7400         MOV       A,#0x0
   \   00056E   F0           MOVX      @DPTR,A
   \   00056F   800D         SJMP      ??MAC_CbackEvent_19
    327          #if (ZG_BUILD_RTR_TYPE)       
    328                osal_msg_send( gp_TaskID, (uint8 *)msgPtr);
    329          #endif
    330              }
    331              else
    332              {
    333                osal_msg_send( NWK_TaskID, (uint8 *)msgPtr );
   \                     ??MAC_CbackEvent_26:
   \   000571                ; Setup parameters for call to function osal_msg_send
   \   000571   EE           MOV       A,R6
   \   000572   FA           MOV       R2,A
   \   000573   EF           MOV       A,R7
   \   000574   FB           MOV       R3,A
   \   000575   90....       MOV       DPTR,#NWK_TaskID
   \   000578   E0           MOVX      A,@DPTR
   \   000579   F9           MOV       R1,A
   \   00057A   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   00057D   E9           MOV       A,R1
    334              }
    335            }
    336            
    337          #if (ZG_BUILD_RTR_TYPE)
    338            if ((event == MAC_MCPS_DATA_CNF || event == MAC_MCPS_GREEN_PWR_DATA_CNF) && (pData->dataCnf.pDataReq != NULL))
    339          #else
    340            if ((event == MAC_MCPS_DATA_CNF ) && (pData->dataCnf.pDataReq != NULL))
   \                     ??MAC_CbackEvent_19:
   \   00057E   740C         MOV       A,#0xc
   \   000580   65..         XRL       A,?V2
   \   000582   702C         JNZ       ??MAC_CbackEvent_0
   \   000584   85..82       MOV       DPL,?XSP + 0
   \   000587   85..83       MOV       DPH,?XSP + 1
   \   00058A   E0           MOVX      A,@DPTR
   \   00058B   F8           MOV       R0,A
   \   00058C   A3           INC       DPTR
   \   00058D   E0           MOVX      A,@DPTR
   \   00058E   F583         MOV       DPH,A
   \   000590   8882         MOV       DPL,R0
   \   000592   A3           INC       DPTR
   \   000593   A3           INC       DPTR
   \   000594   A3           INC       DPTR
   \   000595   E0           MOVX      A,@DPTR
   \   000596   F8           MOV       R0,A
   \   000597   A3           INC       DPTR
   \   000598   E0           MOVX      A,@DPTR
   \   000599   F9           MOV       R1,A
   \   00059A   E8           MOV       A,R0
   \   00059B   49           ORL       A,R1
   \   00059C   6012         JZ        ??MAC_CbackEvent_0
    341          #endif
    342            {
    343              // If the application needs 'pDataReq' then we cannot free it here.
    344              // The application must free it after using it. Note that 'pDataReq'
    345              // is of macMcpsDataReq_t (and not ZMacDataReq_t) type.
    346          
    347              mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   00059E                ; Setup parameters for call to function mac_msg_deallocate
   \   00059E   85..82       MOV       DPL,?XSP + 0
   \   0005A1   85..83       MOV       DPH,?XSP + 1
   \   0005A4   E0           MOVX      A,@DPTR
   \   0005A5   2403         ADD       A,#0x3
   \   0005A7   FA           MOV       R2,A
   \   0005A8   A3           INC       DPTR
   \   0005A9   E0           MOVX      A,@DPTR
   \   0005AA   3400         ADDC      A,#0x0
   \   0005AC   FB           MOV       R3,A
   \   0005AD   12....       LCALL     `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    348            }
    349          #endif
    350          }
   \                     ??MAC_CbackEvent_0:
   \   0005B0   7404         MOV       A,#0x4
   \   0005B2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0005B5   7F0A         MOV       R7,#0xa
   \   0005B7   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   0005BA                REQUIRE _A_IEN0
    351          #else  // ifdef MT_MAC_CB_FUNC
    352          {
    353            /* Check if MT has subscribed for this callback If so, pass it as an event to MonitorTest */
    354            switch (pData->hdr.event)
    355            {
    356              case MAC_MLME_ASSOCIATE_IND:
    357                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_IND )
    358                  nwk_MTCallbackSubNwkAssociateInd ( (ZMacAssociateInd_t *)pData );
    359                break;
    360          
    361              case MAC_MLME_ASSOCIATE_CNF:
    362                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_CNF )
    363                {
    364                  nwk_MTCallbackSubNwkAssociateCnf ( (ZMacAssociateCnf_t *)pData );
    365          #ifdef FEATURE_DUAL_MAC
    366                  DMMGR_ResetActivityFlag( ASSOC_ACTIVITY );
    367          #endif /* FEATURE_DUAL_MAC */
    368                }
    369                break;
    370          
    371              case MAC_MLME_DISASSOCIATE_IND:
    372                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_IND )
    373                  nwk_MTCallbackSubNwkDisassociateInd ( (ZMacDisassociateInd_t *)pData );
    374                break;
    375          
    376              case MAC_MLME_DISASSOCIATE_CNF:
    377                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_CNF )
    378                {
    379                  nwk_MTCallbackSubNwkDisassociateCnf ( (ZMacDisassociateCnf_t *)pData );
    380          #ifdef FEATURE_DUAL_MAC
    381                  DMMGR_ResetActivityFlag( DISASSOC_ACTIVITY );
    382          #endif /* FEATURE_DUAL_MAC */
    383                }
    384                break;
    385          
    386              case MAC_MLME_BEACON_NOTIFY_IND:
    387                if ( _macCallbackSub & CB_ID_NWK_BEACON_NOTIFY_IND )
    388                  nwk_MTCallbackSubNwkBeaconNotifyInd( (ZMacBeaconNotifyInd_t *)pData );
    389                break;
    390          
    391              case MAC_MLME_ORPHAN_IND:
    392                if ( _macCallbackSub & CB_ID_NWK_ORPHAN_IND )
    393                  nwk_MTCallbackSubNwkOrphanInd( (ZMacOrphanInd_t *) pData );
    394                break;
    395          
    396              case MAC_MLME_SCAN_CNF:
    397                if ( _macCallbackSub & CB_ID_NWK_SCAN_CNF )
    398                {
    399                  pData->scanCnf.result.pEnergyDetect = ZMac_ScanBuf;
    400                  nwk_MTCallbackSubNwkScanCnf ( (ZMacScanCnf_t *) pData );
    401          #ifdef FEATURE_DUAL_MAC
    402                  DMMGR_ResetActivityFlag( SCAN_ACTIVITY );
    403          #endif /* FEATURE_DUAL_MAC */
    404                }
    405          
    406                if (ZMac_ScanBuf != NULL)
    407                {
    408                  void *pTmp = ZMac_ScanBuf;
    409                  ZMac_ScanBuf = NULL;
    410                  osal_mem_free(pTmp);
    411                }
    412                break;
    413          
    414              case MAC_MLME_START_CNF:
    415                if ( _macCallbackSub & CB_ID_NWK_START_CNF )
    416                {
    417                  nwk_MTCallbackSubNwkStartCnf ( pData->hdr.status );
    418          #ifdef FEATURE_DUAL_MAC
    419                  DMMGR_ResetActivityFlag( START_ACTIVITY );
    420          #endif /* FEATURE_DUAL_MAC */
    421                }
    422                break;
    423          
    424              case MAC_MLME_SYNC_LOSS_IND:
    425                if ( _macCallbackSub & CB_ID_NWK_SYNC_LOSS_IND )
    426                 nwk_MTCallbackSubNwkSyncLossInd( (ZMacSyncLossInd_t *) pData );
    427                break;
    428          
    429              case MAC_MLME_POLL_CNF:
    430                if ( _macCallbackSub & CB_ID_NWK_POLL_CNF )
    431                {
    432                  nwk_MTCallbackSubNwkPollCnf( pData->hdr.status );
    433          #ifdef FEATURE_DUAL_MAC
    434                  DMMGR_ResetActivityFlag( DATA_POLL_ACTIVITY );
    435          #endif /* FEATURE_DUAL_MAC */
    436                }
    437                break;
    438          
    439              case MAC_MLME_COMM_STATUS_IND:
    440                if ( _macCallbackSub & CB_ID_NWK_COMM_STATUS_IND )
    441                {
    442                  nwk_MTCallbackSubCommStatusInd ( (ZMacCommStatusInd_t *) pData );
    443          #ifdef FEATURE_DUAL_MAC
    444                  /**
    445                   * Reset the activity flags if we receive the comm status 
    446                   * indication. The association response and orphan response msg 
    447                   * receives the comm-status indication message as a response. 
    448                   */
    449                  switch ( ((ZMacCommStatusInd_t *) pData)->hdr.Status )
    450                  {
    451                    case ZMAC_SUCCESS:
    452                    case ZMAC_TRANSACTION_OVERFLOW:
    453                    case ZMAC_TRANSACTION_EXPIRED:
    454                    case ZMAC_CHANNEL_ACCESS_FAILURE:
    455                    case ZMAC_NO_RESOURCES:          
    456                    case ZMAC_NO_ACK:
    457                    case ZMAC_COUNTER_ERROR:    
    458                    case ZMAC_INVALID_PARAMETER:
    459                      DMMGR_ResetActivityFlag( ALL_ACTIVITY );
    460                      break;
    461                    default:
    462                      /**
    463                       * If the activity flag is not reset, we need to re-evaluate the
    464                       * and add more case statement above. Note, MAC security is not
    465                       * used by zstack and not supported by dual mac.
    466                       */
    467                      break;
    468                  }
    469          #endif /* FEATURE_DUAL_MAC */
    470                }
    471                break;
    472          
    473              case MAC_MCPS_DATA_CNF:
    474              {
    475          #ifdef FEATURE_DUAL_MAC
    476                if ( pData->dataCnf.pDataReq != NULL )
    477                {
    478                  if ( DMMGR_IsDefaultMac() )
    479                  {
    480                    DMMGR_ProcessMacDataCnf((macMcpsDataCnf_t *)pData);
    481                  }
    482                  
    483                  mac_msg_deallocate((uint8 **)&pData->dataCnf.pDataReq); 
    484                }
    485                
    486                if ( _macCallbackSub & CB_ID_NWK_DATA_CNF )
    487                {
    488                  nwk_MTCallbackSubNwkDataCnf( (ZMacDataCnf_t *) pData );
    489                }
    490          
    491                DMMGR_ResetActivityFlag( DATA_ACTIVITY );
    492          #else
    493                if (pData->dataCnf.pDataReq != NULL)
    494                {
    495                  mac_msg_deallocate((uint8**)&pData->dataCnf.pDataReq);
    496                }
    497          
    498                if ( _macCallbackSub & CB_ID_NWK_DATA_CNF )
    499                {
    500                  nwk_MTCallbackSubNwkDataCnf( (ZMacDataCnf_t *) pData );
    501                }
    502          
    503          #endif /* FEATURE_DUAL_MAC */
    504              }
    505              break;
    506          
    507              case MAC_MCPS_DATA_IND:
    508                {
    509                  /*
    510                     Data Ind is unconventional: to save an alloc/copy, reuse the MAC
    511                     buffer and re-organize the contents into ZMAC format.
    512                  */
    513                  ZMacDataInd_t *pDataInd = (ZMacDataInd_t *) pData;
    514                  uint8 event, status, len, *msdu;
    515          
    516                  /* Store parameters */
    517                  event = pData->hdr.event;
    518                  status = pData->hdr.status;
    519                  len = pData->dataInd.msdu.len;
    520                  msdu = pData->dataInd.msdu.p;
    521          
    522                  /* Copy security fields */
    523                  osal_memcpy(&pDataInd->Sec, &pData->dataInd.sec, sizeof(ZMacSec_t));
    524          
    525                  /* Copy mac fields one by one since the two buffers overlap. */
    526                  osal_memcpy(&pDataInd->SrcAddr, &pData->dataInd.mac.srcAddr, sizeof(zAddrType_t));
    527                  osal_memcpy(&pDataInd->DstAddr, &pData->dataInd.mac.dstAddr, sizeof(zAddrType_t));
    528                  pDataInd->Timestamp = pData->dataInd.mac.timestamp;
    529                  pDataInd->Timestamp2 = pData->dataInd.mac.timestamp2;
    530                  pDataInd->SrcPANId = pData->dataInd.mac.srcPanId;
    531                  pDataInd->DstPANId = pData->dataInd.mac.dstPanId;
    532                  pDataInd->mpduLinkQuality = pData->dataInd.mac.mpduLinkQuality;
    533                  pDataInd->Correlation = pData->dataInd.mac.correlation;
    534                  pDataInd->Rssi = pData->dataInd.mac.rssi;
    535                  pDataInd->Dsn = pData->dataInd.mac.dsn;
    536          
    537                  /* Restore parameters */
    538                  pDataInd->hdr.Status = status;
    539                  pDataInd->hdr.Event = event;
    540                  pDataInd->msduLength = len;
    541          
    542                  if (len)
    543                    pDataInd->msdu = msdu;
    544                  else
    545                    pDataInd->msdu = NULL;
    546          
    547                  if ( _macCallbackSub & CB_ID_NWK_DATA_IND )
    548                    nwk_MTCallbackSubNwkDataInd ( pDataInd );
    549                }
    550          
    551                /* free buffer */
    552                mac_msg_deallocate( (uint8 **)&pData );
    553                break;
    554          
    555              case MAC_MCPS_PURGE_CNF:
    556                if ( _macCallbackSub & CB_ID_NWK_PURGE_CNF )
    557                {
    558                  nwk_MTCallbackSubNwkPurgeCnf( (ZMacPurgeCnf_t *) pData);
    559          #ifdef FEATURE_DUAL_MAC
    560                  DMMGR_ResetActivityFlag( DATA_PURGE_ACTIVITY );
    561          #endif /* FEATURE_DUAL_MAC */
    562          
    563                }
    564                break;
    565          
    566              case MAC_MLME_POLL_IND:
    567                  if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_IND )
    568                  {
    569                    nwk_MTCallbackSubNwkPollInd( (ZMacPollInd_t *)pData );
    570                  }
    571                break;
    572          
    573              default:
    574                break;
    575            }
    576          }
    577          #endif
    578          
    579          /********************************************************************************************************
    580           * @fn      MAC_CbackCheckPending
    581           *
    582           * @brief   Return number of pending indirect msg
    583           *
    584           * @param   None
    585           *
    586           * @return  Number of indirect msg holding
    587           ********************************************************************************************************/
    588          #ifdef FEATURE_DUAL_MAC
    589          uint8 ZMacCbackCheckPending(void)
    590          #else

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    591          uint8 MAC_CbackCheckPending(void)
   \                     MAC_CbackCheckPending:
    592          #endif 
    593          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    594          #if !defined (NONWK)
    595            if ( ZSTACK_ROUTER_BUILD )
    596            {
    597              return (nwkDB_ReturnIndirectHoldingCnt());
    598            }
    599            else
    600            {
    601              return (0);
   \   000000   7900         MOV       R1,#0x0
   \   000002   02....       LJMP      ?BRET
    602            }
    603          #else
    604            return (0);
    605          #endif
    606          }
    607          
    608          /**************************************************************************************************
    609           * @fn          MAC_CbackQueryRetransmit
    610           *
    611           * @brief       This function callback function returns whether or not to continue MAC
    612           *              retransmission.
    613           *              A return value '0x00' will indicate no continuation of retry and a return value
    614           *              '0x01' will indicate to continue retransmission. This callback function shall be
    615           *              used to stop continuing retransmission for RF4CE.
    616           *              MAC shall call this callback function whenever it finishes transmitting a packet
    617           *              for macMaxFrameRetries times.
    618           *
    619           * input parameters
    620           *
    621           * None.
    622           *
    623           * output parameters
    624           *
    625           * None.
    626           *
    627           * @return      0x00 to stop retransmission, 0x01 to continue retransmission.
    628           **************************************************************************************************
    629          */
    630          #ifdef FEATURE_DUAL_MAC
    631          uint8 ZMacCbackQueryRetransmit(void)
    632          #else

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    633          uint8 MAC_CbackQueryRetransmit(void)
   \                     MAC_CbackQueryRetransmit:
    634          #endif /* FEATURE_DUAL_MAC */
    635          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    636            return(0);
   \   000000   7900         MOV       R1,#0x0
   \   000002   02....       LJMP      ?BRET
    637          }
    638          
    639          /********************************************************************************************************
    640           * @fn      ZMacLqiAdjustMode
    641           *
    642           * @brief   Sets/return LQI adjust mode
    643           *
    644           * @param   mode - LQI_ADJ_GET = return current mode only
    645           *                 LQI_ADJ_OFF = disable LQI adjusts
    646           *                 LQI_ADJ_MODEx = set to LQI adjust MODEx
    647           *
    648           * @return  current LQI adjust mode
    649           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    650          ZMacLqiAdjust_t ZMacLqiAdjustMode( ZMacLqiAdjust_t mode )
   \                     ZMacLqiAdjustMode:
    651          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   F8           MOV       R0,A
    652            if ( mode != LQI_ADJ_GET )
   \   000006   74FF         MOV       A,#-0x1
   \   000008   68           XRL       A,R0
   \   000009   6005         JZ        ??ZMacLqiAdjustMode_0
    653            {
    654              lqiAdjMode = mode;
   \   00000B   E8           MOV       A,R0
   \   00000C   90....       MOV       DPTR,#lqiAdjMode
   \   00000F   F0           MOVX      @DPTR,A
    655            }
    656            return ( lqiAdjMode );
   \                     ??ZMacLqiAdjustMode_0:
   \   000010   90....       MOV       DPTR,#lqiAdjMode
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F9           MOV       R1,A
   \   000015   D083         POP       DPH
   \   000017   D082         POP       DPL
   \   000019   02....       LJMP      ?BRET
    657          }
    658          
    659          #if !defined NONWK
    660          /********************************************************************************************************
    661           * @fn      ZMacLqiAdjust
    662           *
    663           * @brief   Adjust LQI according to correlation value
    664           *
    665           * @notes - the IEEE 802.15.4 specification provides some general statements on
    666           *          the subject of LQI. Section 6.7.8: "The minimum and maximum LQI values
    667           *          (0x00 and 0xFF) should be associated with the lowest and highest IEEE
    668           *          802.15.4 signals detectable by the receiver, and LQ values should be
    669           *          uniformly distributed between these two limits." Section E.2.3: "The
    670           *          LQI (see 6.7.8) measures the received energy and/or SNR for each
    671           *          received packet. When energy level and SNR information are combined,
    672           *          they can indicate whether a corrupt packet resulted from low signal
    673           *          strength or from high signal strength plus interference."
    674           *        - LQI Adjustment Mode1 provided below is a simple algorithm to use the
    675           *          packet correlation value (related to SNR) to scale incoming LQI value
    676           *          (related to signal strength) to 'derate' noisy packets.
    677           *        - LQI Adjustment Mode2 provided below is a location for a developer to
    678           *          implement their own proprietary LQI adjustment algorithm.
    679           *
    680           * @param   corr - packet correlation value
    681           * @param   lqi  - ptr to link quality (scaled rssi)
    682           *
    683           * @return  *lqi - adjusted link quality
    684           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    685          static void ZMacLqiAdjust( uint8 corr, uint8 *lqi )
   \                     ZMacLqiAdjust:
    686          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FC           MOV       R4,A
   \   000009   EB           MOV       A,R3
   \   00000A   FD           MOV       R5,A
    687            if ( lqiAdjMode != LQI_ADJ_OFF )
   \   00000B   90....       MOV       DPTR,#lqiAdjMode
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   606B         JZ        ??ZMacLqiAdjust_0
    688            {
    689              uint16 adjLqi = *lqi;
   \   000011   8C82         MOV       DPL,R4
   \   000013   8D83         MOV       DPH,R5
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F8           MOV       R0,A
   \   000017   7900         MOV       R1,#0x0
    690          
    691              // Keep correlation within theoretical limits
    692              if ( corr < LQI_CORR_MIN )
   \   000019   EE           MOV       A,R6
   \   00001A   C3           CLR       C
   \   00001B   9432         SUBB      A,#0x32
   \   00001D   5004         JNC       ??ZMacLqiAdjust_1
    693              {
    694                 corr = LQI_CORR_MIN;
   \   00001F   7E32         MOV       R6,#0x32
   \   000021   8008         SJMP      ??ZMacLqiAdjust_2
    695              }
    696              else if ( corr > LQI_CORR_MAX )
   \                     ??ZMacLqiAdjust_1:
   \   000023   EE           MOV       A,R6
   \   000024   C3           CLR       C
   \   000025   946F         SUBB      A,#0x6f
   \   000027   4002         JC        ??ZMacLqiAdjust_2
    697              {
    698                 corr = LQI_CORR_MAX;
   \   000029   7E6E         MOV       R6,#0x6e
    699              }
    700          
    701              if ( lqiAdjMode == LQI_ADJ_MODE1 )
   \                     ??ZMacLqiAdjust_2:
   \   00002B   90....       MOV       DPTR,#lqiAdjMode
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   6401         XRL       A,#0x1
   \   000031   7032         JNZ       ??ZMacLqiAdjust_3
    702              {
    703                /* MODE1 - linear scaling of incoming LQI with a "correlation percentage"
    704                           which is computed from the incoming correlation value between
    705                           theorectical minimum/maximum values. This is a very simple way
    706                           of 'derating' the incoming LQI as correlation value drops. */
    707                adjLqi = (adjLqi * (corr - LQI_CORR_MIN)) / (LQI_CORR_MAX - LQI_CORR_MIN);
   \   000033   EE           MOV       A,R6
   \   000034   FA           MOV       R2,A
   \   000035   7B00         MOV       R3,#0x0
   \   000037   EA           MOV       A,R2
   \   000038   24CE         ADD       A,#-0x32
   \   00003A   F5..         MOV       ?V0,A
   \   00003C   EB           MOV       A,R3
   \   00003D   34FF         ADDC      A,#-0x1
   \   00003F   F5..         MOV       ?V1,A
   \   000041   E8           MOV       A,R0
   \   000042   85..F0       MOV       B,?V0
   \   000045   A4           MUL       AB
   \   000046   C8           XCH       A,R0
   \   000047   AAF0         MOV       R2,B
   \   000049   85..F0       MOV       B,?V1
   \   00004C   A4           MUL       AB
   \   00004D   2A           ADD       A,R2
   \   00004E   FA           MOV       R2,A
   \   00004F   85..F0       MOV       B,?V0
   \   000052   E9           MOV       A,R1
   \   000053   A4           MUL       AB
   \   000054   2A           ADD       A,R2
   \   000055   F9           MOV       R1,A
   \   000056   7A3C         MOV       R2,#0x3c
   \   000058   7B00         MOV       R3,#0x0
   \   00005A   12....       LCALL     ?US_DIV_MOD
   \   00005D   88..         MOV       ?V0,R0
   \   00005F   89..         MOV       ?V1,R1
   \   000061   A8..         MOV       R0,?V0
   \   000063   A9..         MOV       R1,?V1
    708              }
    709              else if ( lqiAdjMode == LQI_ADJ_MODE2 )
    710              {
    711                /* MODE2 - location for developer to implement a proprietary algorithm */
    712              }
    713          
    714              // Replace incoming LQI with scaled value
    715              *lqi = (adjLqi > 255) ? 255 : (uint8)adjLqi;
   \                     ??ZMacLqiAdjust_3:
   \   000065   C3           CLR       C
   \   000066   E8           MOV       A,R0
   \   000067   9400         SUBB      A,#0x0
   \   000069   E9           MOV       A,R1
   \   00006A   9401         SUBB      A,#0x1
   \   00006C   4004         JC        ??ZMacLqiAdjust_4
   \   00006E   74FF         MOV       A,#-0x1
   \   000070   8001         SJMP      ??ZMacLqiAdjust_5
   \                     ??ZMacLqiAdjust_4:
   \   000072   E8           MOV       A,R0
   \                     ??ZMacLqiAdjust_5:
   \   000073   C0E0         PUSH      A
   \   000075   8C82         MOV       DPL,R4
   \   000077   8D83         MOV       DPH,R5
   \   000079   D0E0         POP       A
   \   00007B   F0           MOVX      @DPTR,A
    716            }
    717          }
   \                     ??ZMacLqiAdjust_0:
   \   00007C   7F02         MOV       R7,#0x2
   \   00007E   02....       LJMP      ?BANKED_LEAVE_XDATA
    718          #endif

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   MAC_CbackCheckPending
      0     25   MAC_CbackEvent
        0     22   -> MAC_MlmeGetReq
        0     22   -> ZMacLqiAdjust
        0     22   -> mac_msg_deallocate
        0     22   -> nwk_broadcastSend
        0     22   -> osal_mem_free
        0     25   -> osal_memcpy
        0     22   -> osal_msg_allocate
        0     22   -> osal_msg_send
      0      0   MAC_CbackQueryRetransmit
      1     32   ZMacLqiAdjust
      2      0   ZMacLqiAdjustMode


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  MAC_CbackCheckPending
    1466  MAC_CbackEvent
       5  MAC_CbackQueryRetransmit
     129  ZMacLqiAdjust
      28  ZMacLqiAdjustMode
       1  _A_IEN0
       1  lqiAdjMode
       2  pZMac_AppCallback
      18  zmacCBSizeTable
      30  -- Other

 
 1 633 bytes in segment BANKED_CODE
    30 bytes in segment BANK_RELAYS
    18 bytes in segment CODE_C
     1 byte  in segment SFR_AN
     3 bytes in segment XDATA_Z
 
    48 bytes of CODE     memory
     0 bytes of DATA     memory (+ 1 byte shared)
 1 633 bytes of HUGECODE memory
     3 bytes of XDATA    memory

Errors: none
Warnings: none
