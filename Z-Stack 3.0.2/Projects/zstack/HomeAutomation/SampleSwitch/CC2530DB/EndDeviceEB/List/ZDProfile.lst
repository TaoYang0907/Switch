###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               31/Jul/2020  11:47:33
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\AA\Z-Stack 3.0.2\Components\stack\zdo\ZDProfile.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EWE780.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\stack\zdo\ZDProfile.c" -D SECURE=1 -D TC_LINKKEY_JOIN
#        -D NV_INIT -D NV_RESTORE -D POWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1
#        -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_GROUPS -D
#        BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\ZDProfile.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\ZDProfile.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\stack\zdo\ZDProfile.c
      1          /**************************************************************************************************
      2            Filename:       ZDProfile.c
      3            Revised:        $Date: 2015-10-14 11:48:06 -0700 (Wed, 14 Oct 2015) $
      4            Revision:       $Revision: 44530 $
      5          
      6            Description:    This is the Zigbee Device Profile.
      7          
      8          
      9            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "NLMEDE.h"
     47          #include "nwk_util.h"
     48          #include "APS.h"
     49          
     50          #include "AddrMgr.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDNwkMgr.h"
     55          
     56          #if defined( LCD_SUPPORTED )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          #include "nwk_util.h"
     61          
     62          #if defined( MT_ZDO_FUNC )
     63            #include "MT_ZDO.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \
     71            (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \
     72            (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \
     73            (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \
     74          }
     75          
     76          #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \
     77            afStatus_t stat;                                    \
     78            ZDP_TmpBuf = (BUF)+1;                               \
     79            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     80            osal_mem_free( (BUF) );                             \
     81            ZDP_TmpBuf = ZDP_Buf+1;                             \
     82            return stat;                                        \
     83          }
     84          
     85          #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \
     86            afStatus_t stat;                                    \
     87            ZDP_TxOptions = (TxO);                              \
     88            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     89            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
     90            return stat;                                        \
     91          }
     92          
     93          #define FillAndSendBufferTxOptions( TRANSSEQ, ADDR, ID, LEN, BUF, TxO ) { \
     94            afStatus_t stat;                                    \
     95            ZDP_TmpBuf = (BUF)+1;                               \
     96            ZDP_TxOptions = (TxO);                              \
     97            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     98            osal_mem_free( (BUF) );                             \
     99            ZDP_TmpBuf = ZDP_Buf+1;                             \
    100            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
    101            return stat;                                        \
    102          }
    103          
    104          /*********************************************************************
    105           * CONSTANTS
    106           */
    107          
    108          #define ZDP_BUF_SZ          80
    109          

   \                                 In  segment CODE_C, align 1
    110          CONST byte ZDP_AF_ENDPOINT = 0;
   \                     ZDP_AF_ENDPOINT:
   \   000000   00           DB 0
    111          
    112          // Routing table options
    113          #define ZP_RTG_RECORD       0x04       // Routing table indication that a route record is needed
    114          #define ZP_MTO_ROUTE_RC     0x08       // Concentrator with routing cache
    115          #define ZP_MTO_ROUTE_NRC    0x10       // Concentrator with limited cache
    116          
    117          
    118          /*********************************************************************
    119           * TYPEDEFS
    120           */
    121          typedef struct
    122          {
    123            void *next;
    124            uint8 taskID;
    125            uint16 clusterID;
    126          } ZDO_MsgCB_t;
    127          
    128          
    129          /*********************************************************************
    130           * GLOBAL VARIABLES
    131           */
    132          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          byte ZDP_TransID = 0;
   \                     ZDP_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          uint8 childIndex = 0;
   \                     childIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135          
    136          /*********************************************************************
    137           * EXTERNAL VARIABLES
    138           */
    139          
    140          extern endPointDesc_t ZDApp_epDesc;
    141          
    142          /*********************************************************************
    143           * EXTERNAL FUNCTIONS
    144           */
    145          extern void ZDApp_SetParentAnnceTimer( void );
    146          
    147          /*********************************************************************
    148           * LOCAL FUNCTIONS
    149           */
    150          
    151          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
    152          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg );
    153          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg );
    154          
    155          /*********************************************************************
    156           * LOCAL VARIABLES
    157           */
    158          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          static uint8  ZDP_Buf[ ZDP_BUF_SZ ];
   \                     ZDP_Buf:
   \   000000                DS 80
   \   000050                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    160          static uint8 *ZDP_TmpBuf = ZDP_Buf+1;
   \                     ZDP_TmpBuf:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDP_TmpBuf>`
   \   000002                REQUIRE __INIT_XDATA_I
    161          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \                     ZDP_TxOptions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    163          ZDO_MsgCB_t *zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   \                     zdoMsgCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    164          
    165          /*********************************************************************
    166           * ZDO Message Processing table
    167           */
    168          
    169          typedef void (*pfnZDPMsgProcessor)( zdoIncomingMsg_t *inMsg );
    170          
    171          typedef struct
    172          {
    173            uint16                clusterID;
    174            pfnZDPMsgProcessor    pFn;
    175          } zdpMsgProcItem_t;
    176          

   \                                 In  segment CODE_C, align 1
    177          CONST zdpMsgProcItem_t zdpMsgProcs[] =
   \                     zdpMsgProcs:
   \   000000   0000         DW 0
   \   000002   ....         DW `??zdpProcessAddrReq::?relay`
   \   000004   0100         DW 1
   \   000006   ....         DW `??zdpProcessAddrReq::?relay`
   \   000008   0200         DW 2
   \   00000A   ....         DW `??ZDO_ProcessNodeDescReq::?relay`
   \   00000C   0280         DW 32770
   \   00000E   ....         DW `??ZDO_ProcessNodeDescRsp::?relay`
   \   000010   0300         DW 3
   \   000012   ....         DW `??ZDO_ProcessPowerDescReq::?relay`
   \   000014   0400         DW 4
   \   000016   ....         DW `??ZDO_ProcessSimpleDescReq::?relay`
   \   000018   0480         DW 32772
   \   00001A   ....         DW `??ZDO_ProcessSimpleDescRsp::?relay`
   \   00001C   0500         DW 5
   \   00001E   ....         DW `??ZDO_ProcessActiveEPReq::?relay`
   \   000020   0600         DW 6
   \   000022   ....         DW `??ZDO_ProcessMatchDescReq::?relay`
   \   000024   3100         DW 49
   \   000026   ....         DW `??ZDO_ProcessMgmtLqiReq::?relay`
   \   000028   3300         DW 51
   \   00002A   ....         DW `??ZDO_ProcessMgmtBindReq::?relay`
   \   00002C   3400         DW 52
   \   00002E   ....         DW `??ZDO_ProcessMgmtLeaveReq::?relay`
   \   000030   FFFF         DW 65535
   \   000032   0000         DW 0H
    178          {
    179          #if ( RFD_RCVC_ALWAYS_ON==TRUE ) || ( ZG_BUILD_RTR_TYPE )
    180            // These aren't processed by sleeping end devices.
    181            { Device_annce,           ZDO_ProcessDeviceAnnce },
    182          #endif
    183          #if ( ZG_BUILD_RTR_TYPE )
    184            // These aren't processed by end devices.
    185            { Parent_annce,           ZDO_ProcessParentAnnce },
    186            { Parent_annce_rsp,       ZDO_ProcessParentAnnceRsp },
    187          #endif
    188            { NWK_addr_req,           zdpProcessAddrReq },
    189            { IEEE_addr_req,          zdpProcessAddrReq },
    190            { Node_Desc_req,          ZDO_ProcessNodeDescReq },
    191            { Node_Desc_rsp,          ZDO_ProcessNodeDescRsp },
    192            { Power_Desc_req,         ZDO_ProcessPowerDescReq },
    193            { Simple_Desc_req,        ZDO_ProcessSimpleDescReq },
    194            { Simple_Desc_rsp,        ZDO_ProcessSimpleDescRsp },
    195            { Active_EP_req,          ZDO_ProcessActiveEPReq },
    196            { Match_Desc_req,         ZDO_ProcessMatchDescReq },
    197          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
    198            { Mgmt_NWK_Disc_req,      ZDO_ProcessMgmtNwkDiscReq },
    199          #endif
    200          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && ( ZG_BUILD_RTR_TYPE || ZG_BUILD_ENDDEVICE_TYPE )
    201            { Mgmt_Lqi_req,           ZDO_ProcessMgmtLqiReq },
    202          #endif
    203          #if defined ( ZDO_MGMT_RTG_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    204            { Mgmt_Rtg_req,           ZDO_ProcessMgmtRtgReq },
    205          #endif
    206          #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
    207            { Mgmt_Bind_req,          ZDO_ProcessMgmtBindReq },
    208          #endif
    209          #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    210            { Mgmt_Direct_Join_req,   ZDO_ProcessMgmtDirectJoinReq },
    211          #endif
    212          #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
    213            { Mgmt_Leave_req,         ZDO_ProcessMgmtLeaveReq },
    214          #endif
    215          #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && ( ZG_BUILD_RTR_TYPE )
    216            { Mgmt_Permit_Join_req,   ZDO_ProcessMgmtPermitJoinReq },
    217          #endif
    218          #if defined ( ZDO_USERDESC_RESPONSE )
    219            { User_Desc_req,          ZDO_ProcessUserDescReq },
    220          #endif
    221          #if defined ( ZDO_USERDESCSET_RESPONSE )
    222            { User_Desc_set,          ZDO_ProcessUserDescSet },
    223          #endif
    224          #if defined ( ZDO_SERVERDISC_RESPONSE )
    225            { Server_Discovery_req,   ZDO_ProcessServerDiscReq },
    226          #endif
    227            {0xFFFF, NULL} // Last
    228          };
    229          
    230          /*********************************************************************
    231           * @fn          fillAndSend
    232           *
    233           * @brief       Combined to reduce space
    234           *
    235           * @param
    236           * @param
    237           *
    238           * @return      afStatus_t
    239           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    240          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
   \                     fillAndSend:
    241          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   \   000012   89..         MOV       ?V0,R1
   \   000014   741C         MOV       A,#0x1c
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V4,A
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F5..         MOV       ?V5,A
    242            afAddrType_t afAddr;
    243          
    244            osal_memset( &afAddr, 0, sizeof(afAddrType_t) );
   \   000020                ; Setup parameters for call to function osal_memset
   \   000020   7C0C         MOV       R4,#0xc
   \   000022   7D00         MOV       R5,#0x0
   \   000024   7900         MOV       R1,#0x0
   \   000026   AA..         MOV       R2,?XSP + 0
   \   000028   AB..         MOV       R3,?XSP + 1
   \   00002A   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    245            ZADDR_TO_AFADDR( addr, afAddr );
   \   00002D   90....       MOV       DPTR,#ZDP_AF_ENDPOINT
   \   000030   E4           CLR       A
   \   000031   93           MOVC      A,@A+DPTR
   \   000032   C0E0         PUSH      A
   \   000034   7409         MOV       A,#0x9
   \   000036   12....       LCALL     ?XSTACK_DISP0_8
   \   000039   D0E0         POP       A
   \   00003B   F0           MOVX      @DPTR,A
   \   00003C   8E82         MOV       DPL,R6
   \   00003E   8F83         MOV       DPH,R7
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   E0           MOVX      A,@DPTR
   \   000049   C0E0         PUSH      A
   \   00004B   7408         MOV       A,#0x8
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   D0E0         POP       A
   \   000052   F0           MOVX      @DPTR,A
   \   000053   8E82         MOV       DPL,R6
   \   000055   8F83         MOV       DPH,R7
   \   000057   E0           MOVX      A,@DPTR
   \   000058   F8           MOV       R0,A
   \   000059   A3           INC       DPTR
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   F9           MOV       R1,A
   \   00005C   85..82       MOV       DPL,?XSP + 0
   \   00005F   85..83       MOV       DPH,?XSP + 1
   \   000062   E8           MOV       A,R0
   \   000063   F0           MOVX      @DPTR,A
   \   000064   A3           INC       DPTR
   \   000065   E9           MOV       A,R1
   \   000066   F0           MOVX      @DPTR,A
    246          
    247            *(ZDP_TmpBuf-1) = *transSeq;
   \   000067   85..82       MOV       DPL,?V2
   \   00006A   85..83       MOV       DPH,?V3
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   C0E0         PUSH      A
   \   000070   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000073   E0           MOVX      A,@DPTR
   \   000074   F8           MOV       R0,A
   \   000075   A3           INC       DPTR
   \   000076   E0           MOVX      A,@DPTR
   \   000077   C8           XCH       A,R0
   \   000078   24FF         ADD       A,#-0x1
   \   00007A   F582         MOV       DPL,A
   \   00007C   C8           XCH       A,R0
   \   00007D   34FF         ADDC      A,#-0x1
   \   00007F   F583         MOV       DPH,A
   \   000081   D0E0         POP       A
   \   000083   F0           MOVX      @DPTR,A
    248          
    249            return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
    250                                     (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
    251                                     transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
   \   000084                ; Setup parameters for call to function AF_DataRequest
   \   000084   75..1E       MOV       ?V1,#0x1e
   \   000087   78..         MOV       R0,#?V1
   \   000089   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008C   78..         MOV       R0,#?V2
   \   00008E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000091   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000094   E0           MOVX      A,@DPTR
   \   000095   24FF         ADD       A,#-0x1
   \   000097   F5..         MOV       ?V6,A
   \   000099   A3           INC       DPTR
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   34FF         ADDC      A,#-0x1
   \   00009D   F5..         MOV       ?V7,A
   \   00009F   78..         MOV       R0,#?V6
   \   0000A1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A4   E5..         MOV       A,?V0
   \   0000A6   F8           MOV       R0,A
   \   0000A7   7900         MOV       R1,#0x0
   \   0000A9   E8           MOV       A,R0
   \   0000AA   2401         ADD       A,#0x1
   \   0000AC   F5..         MOV       ?V6,A
   \   0000AE   E4           CLR       A
   \   0000AF   39           ADDC      A,R1
   \   0000B0   F5..         MOV       ?V7,A
   \   0000B2   78..         MOV       R0,#?V6
   \   0000B4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B7   78..         MOV       R0,#?V4
   \   0000B9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BC   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000BF   E0           MOVX      A,@DPTR
   \   0000C0   F9           MOV       R1,A
   \   0000C1   7C..         MOV       R4,#ZDApp_epDesc & 0xff
   \   0000C3   7D..         MOV       R5,#(ZDApp_epDesc >> 8) & 0xff
   \   0000C5   7409         MOV       A,#0x9
   \   0000C7   12....       LCALL     ?XSTACK_DISP101_8
   \   0000CA   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000CD   7409         MOV       A,#0x9
   \   0000CF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D2   740C         MOV       A,#0xc
   \   0000D4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D7   7F08         MOV       R7,#0x8
   \   0000D9   02....       LJMP      ?BANKED_LEAVE_XDATA
    252          
    253          }
    254          
    255          /*********************************************************************
    256           * @fn          ZDP_SendData
    257           *
    258           * @brief       This builds and send a request message that has
    259           *              NWKAddrOfInterest as its only parameter.
    260           *
    261           * @param       dstAddr - destination address
    262           * @param       cmd - clusterID
    263           * @param       dataLen - number of bytes of data
    264           * @param       data - pointer to the data
    265           * @param       SecurityEnable - Security Options
    266           *
    267           * @return      afStatus_t
    268           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    269          afStatus_t ZDP_SendData( uint8 *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
   \                     ZDP_SendData:
    270                                  byte len, uint8 *buf, byte SecurityEnable )
    271          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V12,R2
   \   000007   8B..         MOV       ?V13,R3
   \   000009   8C..         MOV       ?V10,R4
   \   00000B   8D..         MOV       ?V11,R5
   \   00000D   89..         MOV       ?V3,R1
   \   00000F   7416         MOV       A,#0x16
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V8,A
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V9,A
   \   00001B   7418         MOV       A,#0x18
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V0,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F5..         MOV       ?V1,A
   \   000027   741A         MOV       A,#0x1a
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F5..         MOV       ?V6,A
    272            uint8 *pBuf = ZDP_TmpBuf;
   \   00002F   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000032   E0           MOVX      A,@DPTR
   \   000033   FE           MOV       R6,A
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   FF           MOV       R7,A
    273            byte cnt = len;
   \   000037   85....       MOV       ?V2,?V3
    274          
    275            while ( cnt-- )
   \                     ??ZDP_SendData_0:
   \   00003A   85....       MOV       ?V4,?V2
   \   00003D   74FF         MOV       A,#-0x1
   \   00003F   25..         ADD       A,?V4
   \   000041   F5..         MOV       ?V2,A
   \   000043   E5..         MOV       A,?V4
   \   000045   6028         JZ        ??ZDP_SendData_1
    276            {
    277              *pBuf++ = *buf++;
   \   000047   85..82       MOV       DPL,?V0
   \   00004A   85..83       MOV       DPH,?V1
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   C0E0         PUSH      A
   \   000050   8E82         MOV       DPL,R6
   \   000052   8F83         MOV       DPH,R7
   \   000054   D0E0         POP       A
   \   000056   F0           MOVX      @DPTR,A
   \   000057   85..82       MOV       DPL,?V0
   \   00005A   85..83       MOV       DPH,?V1
   \   00005D   A3           INC       DPTR
   \   00005E   8582..       MOV       ?V0,DPL
   \   000061   8583..       MOV       ?V1,DPH
   \   000064   8E82         MOV       DPL,R6
   \   000066   8F83         MOV       DPH,R7
   \   000068   A3           INC       DPTR
   \   000069   AE82         MOV       R6,DPL
   \   00006B   AF83         MOV       R7,DPH
   \   00006D   80CB         SJMP      ??ZDP_SendData_0
    278            }
    279          
    280            FillAndSendTxOptions( TransSeq, dstAddr, cmd, len, ((SecurityEnable) ? AF_EN_SECURITY : 0) );
   \                     ??ZDP_SendData_1:
   \   00006F   E5..         MOV       A,?V6
   \   000071   6008         JZ        ??ZDP_SendData_2
   \   000073   90....       MOV       DPTR,#ZDP_TxOptions
   \   000076   7440         MOV       A,#0x40
   \   000078   F0           MOVX      @DPTR,A
   \   000079   8006         SJMP      ??ZDP_SendData_3
   \                     ??ZDP_SendData_2:
   \   00007B   90....       MOV       DPTR,#ZDP_TxOptions
   \   00007E   7400         MOV       A,#0x0
   \   000080   F0           MOVX      @DPTR,A
   \                     ??ZDP_SendData_3:
   \   000081                ; Setup parameters for call to function fillAndSend
   \   000081   78..         MOV       R0,#?V8
   \   000083   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000086   A9..         MOV       R1,?V3
   \   000088   AC..         MOV       R4,?V10
   \   00008A   AD..         MOV       R5,?V11
   \   00008C   AA..         MOV       R2,?V12
   \   00008E   AB..         MOV       R3,?V13
   \   000090   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000093   7402         MOV       A,#0x2
   \   000095   12....       LCALL     ?DEALLOC_XSTACK8
   \   000098   E9           MOV       A,R1
   \   000099   F5..         MOV       ?V5,A
   \   00009B   90....       MOV       DPTR,#ZDP_TxOptions
   \   00009E   7400         MOV       A,#0x0
   \   0000A0   F0           MOVX      @DPTR,A
   \   0000A1   A9..         MOV       R1,?V5
   \   0000A3   7F0E         MOV       R7,#0xe
   \   0000A5   02....       LJMP      ?BANKED_LEAVE_XDATA
    281          }
    282          
    283          /*********************************************************************
    284           * @fn          ZDP_NWKAddrOfInterestReq
    285           *
    286           * @brief       This builds and send a request message that has
    287           *              NWKAddrOfInterest as its only parameter.
    288           *
    289           * @param       dstAddr - destination address
    290           * @param       nwkAddr - 16 bit address
    291           * @param       SecurityEnable - Security Options
    292           *
    293           * @return      afStatus_t
    294           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    295          afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_NWKAddrOfInterestReq:
    296                                               byte cmd, byte SecurityEnable )
    297          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   \   00000D   89..         MOV       ?V2,R1
    298            (void)SecurityEnable;  // Intentionally unreferenced parameter
    299          
    300            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   00000F   E5..         MOV       A,?V0
   \   000011   C0E0         PUSH      A
   \   000013   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F8           MOV       R0,A
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F583         MOV       DPH,A
   \   00001C   8882         MOV       DPL,R0
   \   00001E   D0E0         POP       A
   \   000020   F0           MOVX      @DPTR,A
    301            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \   000021   A8..         MOV       R0,?V0
   \   000023   A9..         MOV       R1,?V1
   \   000025   E4           CLR       A
   \   000026   C9           XCH       A,R1
   \   000027   F8           MOV       R0,A
   \   000028   E8           MOV       A,R0
   \   000029   C0E0         PUSH      A
   \   00002B   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F8           MOV       R0,A
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F583         MOV       DPH,A
   \   000034   8882         MOV       DPL,R0
   \   000036   A3           INC       DPTR
   \   000037   D0E0         POP       A
   \   000039   F0           MOVX      @DPTR,A
    302          
    303            return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
   \   00003A                ; Setup parameters for call to function fillAndSend
   \   00003A   E5..         MOV       A,?V2
   \   00003C   F5..         MOV       ?V4,A
   \   00003E   75..00       MOV       ?V5,#0x0
   \   000041   78..         MOV       R0,#?V4
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000046   7902         MOV       R1,#0x2
   \   000048   EE           MOV       A,R6
   \   000049   FC           MOV       R4,A
   \   00004A   EF           MOV       A,R7
   \   00004B   FD           MOV       R5,A
   \   00004C   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   00004E   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000050   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000053   7402         MOV       A,#0x2
   \   000055   12....       LCALL     ?DEALLOC_XSTACK8
   \   000058   7F06         MOV       R7,#0x6
   \   00005A   02....       LJMP      ?BANKED_LEAVE_XDATA
    304          }
    305          
    306          /*********************************************************************
    307           * Address Requests
    308           */
    309          
    310          /*********************************************************************
    311           * @fn          ZDP_NwkAddrReq
    312           *
    313           * @brief       This builds and send a NWK_addr_req message.  This
    314           *              function sends a broadcast message looking for a 16
    315           *              bit address with a 64 bit address as bait.
    316           *
    317           * @param       IEEEAddress - looking for this device
    318           * @param       SecurityEnable - Security Options
    319           *
    320           * @return      afStatus_t
    321           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    322          afStatus_t ZDP_NwkAddrReq( uint8 *IEEEAddress, byte ReqType,
   \                     ZDP_NwkAddrReq:
    323                                     byte StartIndex, byte SecurityEnable )
    324          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   \   00000E   89..         MOV       ?V1,R1
   \   000010   8C..         MOV       ?V2,R4
   \   000012   8D..         MOV       ?V3,R5
    325            uint8 *pBuf = ZDP_TmpBuf;
   \   000014   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000017   E0           MOVX      A,@DPTR
   \   000018   FE           MOV       R6,A
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   FF           MOV       R7,A
    326            byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
   \   00001C   75..0A       MOV       ?V0,#0xa
    327            zAddrType_t dstAddr;
    328          
    329            (void)SecurityEnable;  // Intentionally unreferenced parameter
    330          
    331            if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
   \   00001F                ; Setup parameters for call to function sAddrExtCmp
   \   00001F   AC..         MOV       R4,?V4
   \   000021   AD..         MOV       R5,?V5
   \   000023   7A..         MOV       R2,#saveExtAddr & 0xff
   \   000025   7B..         MOV       R3,#(saveExtAddr >> 8) & 0xff
   \   000027   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00002A   E9           MOV       A,R1
   \   00002B   7017         JNZ       ??ZDP_NwkAddrReq_0
    332            {
    333              dstAddr.addrMode = AddrBroadcast;
   \   00002D   7408         MOV       A,#0x8
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   740F         MOV       A,#0xf
   \   000034   F0           MOVX      @DPTR,A
    334              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000035   85..82       MOV       DPL,?XSP + 0
   \   000038   85..83       MOV       DPH,?XSP + 1
   \   00003B   74FD         MOV       A,#-0x3
   \   00003D   F0           MOVX      @DPTR,A
   \   00003E   A3           INC       DPTR
   \   00003F   74FF         MOV       A,#-0x1
   \   000041   F0           MOVX      @DPTR,A
   \   000042   801B         SJMP      ??ZDP_NwkAddrReq_1
    335            }
    336            else
    337            {
    338              dstAddr.addrMode = Addr16Bit;
   \                     ??ZDP_NwkAddrReq_0:
   \   000044   7408         MOV       A,#0x8
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   7402         MOV       A,#0x2
   \   00004B   F0           MOVX      @DPTR,A
    339              dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
   \   00004C   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   F8           MOV       R0,A
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   F9           MOV       R1,A
   \   000054   85..82       MOV       DPL,?XSP + 0
   \   000057   85..83       MOV       DPH,?XSP + 1
   \   00005A   E8           MOV       A,R0
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   A3           INC       DPTR
   \   00005D   E9           MOV       A,R1
   \   00005E   F0           MOVX      @DPTR,A
    340            }
    341          
    342            pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
   \                     ??ZDP_NwkAddrReq_1:
   \   00005F                ; Setup parameters for call to function sAddrExtCpy
   \   00005F   AC..         MOV       R4,?V4
   \   000061   AD..         MOV       R5,?V5
   \   000063   EE           MOV       A,R6
   \   000064   FA           MOV       R2,A
   \   000065   EF           MOV       A,R7
   \   000066   FB           MOV       R3,A
   \   000067   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00006A   8A..         MOV       ?V6,R2
   \   00006C   8B..         MOV       ?V7,R3
   \   00006E   AE..         MOV       R6,?V6
   \   000070   AF..         MOV       R7,?V7
    343          
    344            *pBuf++ = ReqType;
   \   000072   E5..         MOV       A,?V1
   \   000074   C0E0         PUSH      A
   \   000076   8E82         MOV       DPL,R6
   \   000078   8F83         MOV       DPH,R7
   \   00007A   D0E0         POP       A
   \   00007C   F0           MOVX      @DPTR,A
   \   00007D   8E82         MOV       DPL,R6
   \   00007F   8F83         MOV       DPH,R7
   \   000081   A3           INC       DPTR
   \   000082   AE82         MOV       R6,DPL
   \   000084   AF83         MOV       R7,DPH
    345            *pBuf++ = StartIndex;
   \   000086   E5..         MOV       A,?V2
   \   000088   C0E0         PUSH      A
   \   00008A   8E82         MOV       DPL,R6
   \   00008C   8F83         MOV       DPH,R7
   \   00008E   D0E0         POP       A
   \   000090   F0           MOVX      @DPTR,A
   \   000091   8E82         MOV       DPL,R6
   \   000093   8F83         MOV       DPH,R7
   \   000095   A3           INC       DPTR
   \   000096   AE82         MOV       R6,DPL
   \   000098   AF83         MOV       R7,DPH
    346          
    347            return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
   \   00009A                ; Setup parameters for call to function fillAndSend
   \   00009A   E4           CLR       A
   \   00009B   F5..         MOV       ?V6,A
   \   00009D   F5..         MOV       ?V7,A
   \   00009F   78..         MOV       R0,#?V6
   \   0000A1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A4   A9..         MOV       R1,?V0
   \   0000A6   7402         MOV       A,#0x2
   \   0000A8   12....       LCALL     ?XSTACK_DISP102_8
   \   0000AB   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   0000AD   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   0000AF   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000B2   7402         MOV       A,#0x2
   \   0000B4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B7   7409         MOV       A,#0x9
   \   0000B9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BC   7F08         MOV       R7,#0x8
   \   0000BE   02....       LJMP      ?BANKED_LEAVE_XDATA
    348          }
    349          
    350          /*********************************************************************
    351           * @fn          ZDP_IEEEAddrReq
    352           *
    353           * @brief       This builds and send a IEEE_addr_req message.  This
    354           *              function sends a unicast message looking for a 64
    355           *              bit IEEE address with a 16 bit address as bait.
    356           *
    357           * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
    358           *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
    359           * @param       SecurityEnable - Security Options
    360           *
    361           * @return      afStatus_t
    362           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    363          afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
   \                     ZDP_IEEEAddrReq:
    364                                      byte StartIndex, byte SecurityEnable )
    365          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   89..         MOV       ?V2,R1
   \   000010   8C..         MOV       ?V3,R4
   \   000012   8D..         MOV       ?V4,R5
    366            uint8 *pBuf = ZDP_TmpBuf;
   \   000014   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000017   E0           MOVX      A,@DPTR
   \   000018   FE           MOV       R6,A
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   FF           MOV       R7,A
    367            byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
   \   00001C   75..04       MOV       ?V5,#0x4
    368            zAddrType_t dstAddr;
    369          
    370            (void)SecurityEnable;  // Intentionally unreferenced parameter
    371          
    372            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00001F   7408         MOV       A,#0x8
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   7402         MOV       A,#0x2
   \   000026   F0           MOVX      @DPTR,A
    373            dstAddr.addr.shortAddr = shortAddr;
   \   000027   85..82       MOV       DPL,?XSP + 0
   \   00002A   85..83       MOV       DPH,?XSP + 1
   \   00002D   E5..         MOV       A,?V0
   \   00002F   F0           MOVX      @DPTR,A
   \   000030   A3           INC       DPTR
   \   000031   E5..         MOV       A,?V1
   \   000033   F0           MOVX      @DPTR,A
    374          
    375            *pBuf++ = LO_UINT16( shortAddr );
   \   000034   E5..         MOV       A,?V0
   \   000036   C0E0         PUSH      A
   \   000038   8E82         MOV       DPL,R6
   \   00003A   8F83         MOV       DPH,R7
   \   00003C   D0E0         POP       A
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   8E82         MOV       DPL,R6
   \   000041   8F83         MOV       DPH,R7
   \   000043   A3           INC       DPTR
   \   000044   AE82         MOV       R6,DPL
   \   000046   AF83         MOV       R7,DPH
    376            *pBuf++ = HI_UINT16( shortAddr );
   \   000048   A8..         MOV       R0,?V0
   \   00004A   A9..         MOV       R1,?V1
   \   00004C   E4           CLR       A
   \   00004D   C9           XCH       A,R1
   \   00004E   F8           MOV       R0,A
   \   00004F   E8           MOV       A,R0
   \   000050   C0E0         PUSH      A
   \   000052   8E82         MOV       DPL,R6
   \   000054   8F83         MOV       DPH,R7
   \   000056   D0E0         POP       A
   \   000058   F0           MOVX      @DPTR,A
   \   000059   8E82         MOV       DPL,R6
   \   00005B   8F83         MOV       DPH,R7
   \   00005D   A3           INC       DPTR
   \   00005E   AE82         MOV       R6,DPL
   \   000060   AF83         MOV       R7,DPH
    377          
    378            *pBuf++ = ReqType;
   \   000062   E5..         MOV       A,?V2
   \   000064   C0E0         PUSH      A
   \   000066   8E82         MOV       DPL,R6
   \   000068   8F83         MOV       DPH,R7
   \   00006A   D0E0         POP       A
   \   00006C   F0           MOVX      @DPTR,A
   \   00006D   8E82         MOV       DPL,R6
   \   00006F   8F83         MOV       DPH,R7
   \   000071   A3           INC       DPTR
   \   000072   AE82         MOV       R6,DPL
   \   000074   AF83         MOV       R7,DPH
    379            *pBuf++ = StartIndex;
   \   000076   E5..         MOV       A,?V3
   \   000078   C0E0         PUSH      A
   \   00007A   8E82         MOV       DPL,R6
   \   00007C   8F83         MOV       DPH,R7
   \   00007E   D0E0         POP       A
   \   000080   F0           MOVX      @DPTR,A
   \   000081   8E82         MOV       DPL,R6
   \   000083   8F83         MOV       DPH,R7
   \   000085   A3           INC       DPTR
   \   000086   AE82         MOV       R6,DPL
   \   000088   AF83         MOV       R7,DPH
    380          
    381            return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
   \   00008A                ; Setup parameters for call to function fillAndSend
   \   00008A   75..01       MOV       ?V6,#0x1
   \   00008D   75..00       MOV       ?V7,#0x0
   \   000090   78..         MOV       R0,#?V6
   \   000092   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000095   A9..         MOV       R1,?V5
   \   000097   7402         MOV       A,#0x2
   \   000099   12....       LCALL     ?XSTACK_DISP102_8
   \   00009C   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   00009E   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   0000A0   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000A3   7402         MOV       A,#0x2
   \   0000A5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A8   7409         MOV       A,#0x9
   \   0000AA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AD   7F08         MOV       R7,#0x8
   \   0000AF   02....       LJMP      ?BANKED_LEAVE_XDATA
    382          }
    383          
    384          /*********************************************************************
    385           * @fn          ZDP_MatchDescReq
    386           *
    387           * @brief       This builds and send a Match_Desc_req message.  This
    388           *              function sends a broadcast or unicast message
    389           *              requesting the list of endpoint/interfaces that
    390           *              match profile ID and cluster IDs.
    391           *
    392           * @param       dstAddr - destination address
    393           * @param       nwkAddr - network address of interest
    394           * @param       ProfileID - Profile ID
    395           * @param       NumInClusters - number of input clusters
    396           * @param       InClusterList - input cluster ID list
    397           * @param       NumOutClusters - number of output clusters
    398           * @param       OutClusterList - output cluster ID list
    399           * @param       SecurityEnable - Security Options
    400           *
    401           * @return      afStatus_t
    402           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    403          afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_MatchDescReq:
    404                                          uint16 ProfileID,
    405                                          byte NumInClusters, cId_t *InClusterList,
    406                                          byte NumOutClusters, cId_t *OutClusterList,
    407                                          byte SecurityEnable )
    408          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   \   00000D   89..         MOV       ?V8,R1
   \   00000F   7418         MOV       A,#0x18
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V2,A
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V3,A
   \   00001B   741A         MOV       A,#0x1a
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V14,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F5..         MOV       ?V15,A
   \   000027   741C         MOV       A,#0x1c
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F5..         MOV       ?V5,A
   \   00002F   741D         MOV       A,#0x1d
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F5..         MOV       ?V12,A
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F5..         MOV       ?V13,A
    409            uint8 *pBuf = ZDP_TmpBuf;
   \   00003B   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   FE           MOV       R6,A
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   FF           MOV       R7,A
    410            // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    411            byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
   \   000043   75..06       MOV       ?V9,#0x6
    412          
    413            (void)SecurityEnable;  // Intentionally unreferenced parameter
    414          
    415            len += (NumInClusters + NumOutClusters) * sizeof(uint16);
   \   000046   75F002       MOV       B,#0x2
   \   000049   E5..         MOV       A,?V8
   \   00004B   FA           MOV       R2,A
   \   00004C   7B00         MOV       R3,#0x0
   \   00004E   E5..         MOV       A,?V5
   \   000050   F8           MOV       R0,A
   \   000051   7900         MOV       R1,#0x0
   \   000053   EA           MOV       A,R2
   \   000054   28           ADD       A,R0
   \   000055   F8           MOV       R0,A
   \   000056   EB           MOV       A,R3
   \   000057   39           ADDC      A,R1
   \   000058   F9           MOV       R1,A
   \   000059   E8           MOV       A,R0
   \   00005A   A4           MUL       AB
   \   00005B   25..         ADD       A,?V9
   \   00005D   F5..         MOV       ?V9,A
    416          
    417            if ( len >= ZDP_BUF_SZ-1 )
   \   00005F   E5..         MOV       A,?V9
   \   000061   C3           CLR       C
   \   000062   944F         SUBB      A,#0x4f
   \   000064   4005         JC        ??ZDP_MatchDescReq_0
    418            {
    419              return afStatus_MEM_FAIL;
   \   000066   7910         MOV       R1,#0x10
   \   000068   02....       LJMP      ??ZDP_MatchDescReq_1 & 0xFFFF
    420            }
    421          
    422            // The spec changed in Zigbee 2007 (2.4.3.1.7.1) to not allow sending
    423            // this command to 0xFFFF.  So, here we will filter this and replace
    424            // with 0xFFFD to only send to devices with RX ON.  This includes the
    425            // network address of interest.
    426            if ( ((dstAddr->addrMode == AddrBroadcast) || (dstAddr->addrMode == Addr16Bit))
    427                && (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL) )
   \                     ??ZDP_MatchDescReq_0:
   \   00006B   85..82       MOV       DPL,?V6
   \   00006E   85..83       MOV       DPH,?V7
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   640F         XRL       A,#0xf
   \   00007C   6013         JZ        ??ZDP_MatchDescReq_2
   \   00007E   85..82       MOV       DPL,?V6
   \   000081   85..83       MOV       DPH,?V7
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   6402         XRL       A,#0x2
   \   00008F   701E         JNZ       ??ZDP_MatchDescReq_3
   \                     ??ZDP_MatchDescReq_2:
   \   000091   85..82       MOV       DPL,?V6
   \   000094   85..83       MOV       DPH,?V7
   \   000097   E0           MOVX      A,@DPTR
   \   000098   64FF         XRL       A,#0xff
   \   00009A   7004         JNZ       ??ZDP_MatchDescReq_4
   \   00009C   A3           INC       DPTR
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   64FF         XRL       A,#0xff
   \                     ??ZDP_MatchDescReq_4:
   \   0000A0   700D         JNZ       ??ZDP_MatchDescReq_3
    428            {
    429              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   0000A2   85..82       MOV       DPL,?V6
   \   0000A5   85..83       MOV       DPH,?V7
   \   0000A8   74FD         MOV       A,#-0x3
   \   0000AA   F0           MOVX      @DPTR,A
   \   0000AB   A3           INC       DPTR
   \   0000AC   74FF         MOV       A,#-0x1
   \   0000AE   F0           MOVX      @DPTR,A
    430            }
    431            if ( nwkAddr == NWK_BROADCAST_SHORTADDR_DEVALL )
   \                     ??ZDP_MatchDescReq_3:
   \   0000AF   74FF         MOV       A,#-0x1
   \   0000B1   65..         XRL       A,?V0
   \   0000B3   7004         JNZ       ??ZDP_MatchDescReq_5
   \   0000B5   74FF         MOV       A,#-0x1
   \   0000B7   65..         XRL       A,?V1
   \                     ??ZDP_MatchDescReq_5:
   \   0000B9   7006         JNZ       ??ZDP_MatchDescReq_6
    432            {
    433              nwkAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   0000BB   75..FD       MOV       ?V0,#-0x3
   \   0000BE   75..FF       MOV       ?V1,#-0x1
    434            }
    435          
    436            *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
   \                     ??ZDP_MatchDescReq_6:
   \   0000C1   E5..         MOV       A,?V0
   \   0000C3   C0E0         PUSH      A
   \   0000C5   8E82         MOV       DPL,R6
   \   0000C7   8F83         MOV       DPH,R7
   \   0000C9   D0E0         POP       A
   \   0000CB   F0           MOVX      @DPTR,A
   \   0000CC   8E82         MOV       DPL,R6
   \   0000CE   8F83         MOV       DPH,R7
   \   0000D0   A3           INC       DPTR
   \   0000D1   AE82         MOV       R6,DPL
   \   0000D3   AF83         MOV       R7,DPH
    437            *pBuf++ = HI_UINT16( nwkAddr );
   \   0000D5   A8..         MOV       R0,?V0
   \   0000D7   A9..         MOV       R1,?V1
   \   0000D9   E4           CLR       A
   \   0000DA   C9           XCH       A,R1
   \   0000DB   F8           MOV       R0,A
   \   0000DC   E8           MOV       A,R0
   \   0000DD   C0E0         PUSH      A
   \   0000DF   8E82         MOV       DPL,R6
   \   0000E1   8F83         MOV       DPH,R7
   \   0000E3   D0E0         POP       A
   \   0000E5   F0           MOVX      @DPTR,A
   \   0000E6   8E82         MOV       DPL,R6
   \   0000E8   8F83         MOV       DPH,R7
   \   0000EA   A3           INC       DPTR
   \   0000EB   AE82         MOV       R6,DPL
   \   0000ED   AF83         MOV       R7,DPH
    438          
    439            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \   0000EF   E5..         MOV       A,?V2
   \   0000F1   C0E0         PUSH      A
   \   0000F3   8E82         MOV       DPL,R6
   \   0000F5   8F83         MOV       DPH,R7
   \   0000F7   D0E0         POP       A
   \   0000F9   F0           MOVX      @DPTR,A
   \   0000FA   8E82         MOV       DPL,R6
   \   0000FC   8F83         MOV       DPH,R7
   \   0000FE   A3           INC       DPTR
   \   0000FF   AE82         MOV       R6,DPL
   \   000101   AF83         MOV       R7,DPH
    440            *pBuf++ = HI_UINT16( ProfileID );
   \   000103   A8..         MOV       R0,?V2
   \   000105   A9..         MOV       R1,?V3
   \   000107   E4           CLR       A
   \   000108   C9           XCH       A,R1
   \   000109   F8           MOV       R0,A
   \   00010A   E8           MOV       A,R0
   \   00010B   C0E0         PUSH      A
   \   00010D   8E82         MOV       DPL,R6
   \   00010F   8F83         MOV       DPH,R7
   \   000111   D0E0         POP       A
   \   000113   F0           MOVX      @DPTR,A
   \   000114   8E82         MOV       DPL,R6
   \   000116   8F83         MOV       DPH,R7
   \   000118   A3           INC       DPTR
   \   000119   AE82         MOV       R6,DPL
   \   00011B   AF83         MOV       R7,DPH
    441          
    442            *pBuf++ = NumInClusters; // Input cluster list
   \   00011D   E5..         MOV       A,?V8
   \   00011F   C0E0         PUSH      A
   \   000121   8E82         MOV       DPL,R6
   \   000123   8F83         MOV       DPH,R7
   \   000125   D0E0         POP       A
   \   000127   F0           MOVX      @DPTR,A
   \   000128   8E82         MOV       DPL,R6
   \   00012A   8F83         MOV       DPH,R7
   \   00012C   A3           INC       DPTR
   \   00012D   AE82         MOV       R6,DPL
   \   00012F   AF83         MOV       R7,DPH
    443            if ( NumInClusters )
   \   000131   E5..         MOV       A,?V8
   \   000133   7003         JNZ       $+5
   \   000135   02....       LJMP      ??ZDP_MatchDescReq_7 & 0xFFFF
    444            {
    445              for (i=0; i<NumInClusters; ++i)  {
   \   000138   75..00       MOV       ?V4,#0x0
   \                     ??ZDP_MatchDescReq_8:
   \   00013B   E5..         MOV       A,?V4
   \   00013D   C3           CLR       C
   \   00013E   95..         SUBB      A,?V8
   \   000140   4003         JC        $+5
   \   000142   02....       LJMP      ??ZDP_MatchDescReq_7 & 0xFFFF
    446                *pBuf++ = LO_UINT16( InClusterList[i] );
   \   000145   E5..         MOV       A,?V4
   \   000147   F8           MOV       R0,A
   \   000148   7900         MOV       R1,#0x0
   \   00014A   E8           MOV       A,R0
   \   00014B   75F002       MOV       B,#0x2
   \   00014E   A4           MUL       AB
   \   00014F   C8           XCH       A,R0
   \   000150   AAF0         MOV       R2,B
   \   000152   75F000       MOV       B,#0x0
   \   000155   A4           MUL       AB
   \   000156   2A           ADD       A,R2
   \   000157   FA           MOV       R2,A
   \   000158   75F002       MOV       B,#0x2
   \   00015B   E9           MOV       A,R1
   \   00015C   A4           MUL       AB
   \   00015D   2A           ADD       A,R2
   \   00015E   F9           MOV       R1,A
   \   00015F   E5..         MOV       A,?V14
   \   000161   28           ADD       A,R0
   \   000162   F582         MOV       DPL,A
   \   000164   E5..         MOV       A,?V15
   \   000166   39           ADDC      A,R1
   \   000167   F583         MOV       DPH,A
   \   000169   E0           MOVX      A,@DPTR
   \   00016A   F8           MOV       R0,A
   \   00016B   A3           INC       DPTR
   \   00016C   E0           MOVX      A,@DPTR
   \   00016D   F9           MOV       R1,A
   \   00016E   E8           MOV       A,R0
   \   00016F   C0E0         PUSH      A
   \   000171   8E82         MOV       DPL,R6
   \   000173   8F83         MOV       DPH,R7
   \   000175   D0E0         POP       A
   \   000177   F0           MOVX      @DPTR,A
   \   000178   8E82         MOV       DPL,R6
   \   00017A   8F83         MOV       DPH,R7
   \   00017C   A3           INC       DPTR
   \   00017D   AE82         MOV       R6,DPL
   \   00017F   AF83         MOV       R7,DPH
    447                *pBuf++ = HI_UINT16( InClusterList[i] );
   \   000181   E5..         MOV       A,?V4
   \   000183   F8           MOV       R0,A
   \   000184   7900         MOV       R1,#0x0
   \   000186   E8           MOV       A,R0
   \   000187   75F002       MOV       B,#0x2
   \   00018A   A4           MUL       AB
   \   00018B   C8           XCH       A,R0
   \   00018C   AAF0         MOV       R2,B
   \   00018E   75F000       MOV       B,#0x0
   \   000191   A4           MUL       AB
   \   000192   2A           ADD       A,R2
   \   000193   FA           MOV       R2,A
   \   000194   75F002       MOV       B,#0x2
   \   000197   E9           MOV       A,R1
   \   000198   A4           MUL       AB
   \   000199   2A           ADD       A,R2
   \   00019A   F9           MOV       R1,A
   \   00019B   E5..         MOV       A,?V14
   \   00019D   28           ADD       A,R0
   \   00019E   F582         MOV       DPL,A
   \   0001A0   E5..         MOV       A,?V15
   \   0001A2   39           ADDC      A,R1
   \   0001A3   F583         MOV       DPH,A
   \   0001A5   E0           MOVX      A,@DPTR
   \   0001A6   F8           MOV       R0,A
   \   0001A7   A3           INC       DPTR
   \   0001A8   E0           MOVX      A,@DPTR
   \   0001A9   F9           MOV       R1,A
   \   0001AA   E4           CLR       A
   \   0001AB   C9           XCH       A,R1
   \   0001AC   F8           MOV       R0,A
   \   0001AD   E8           MOV       A,R0
   \   0001AE   C0E0         PUSH      A
   \   0001B0   8E82         MOV       DPL,R6
   \   0001B2   8F83         MOV       DPH,R7
   \   0001B4   D0E0         POP       A
   \   0001B6   F0           MOVX      @DPTR,A
   \   0001B7   8E82         MOV       DPL,R6
   \   0001B9   8F83         MOV       DPH,R7
   \   0001BB   A3           INC       DPTR
   \   0001BC   AE82         MOV       R6,DPL
   \   0001BE   AF83         MOV       R7,DPH
    448              }
   \   0001C0   05..         INC       ?V4
   \   0001C2   02....       LJMP      ??ZDP_MatchDescReq_8 & 0xFFFF
    449            }
    450          
    451            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_MatchDescReq_7:
   \   0001C5   E5..         MOV       A,?V5
   \   0001C7   C0E0         PUSH      A
   \   0001C9   8E82         MOV       DPL,R6
   \   0001CB   8F83         MOV       DPH,R7
   \   0001CD   D0E0         POP       A
   \   0001CF   F0           MOVX      @DPTR,A
   \   0001D0   8E82         MOV       DPL,R6
   \   0001D2   8F83         MOV       DPH,R7
   \   0001D4   A3           INC       DPTR
   \   0001D5   AE82         MOV       R6,DPL
   \   0001D7   AF83         MOV       R7,DPH
    452            if ( NumOutClusters )
   \   0001D9   E5..         MOV       A,?V5
   \   0001DB   7003         JNZ       $+5
   \   0001DD   02....       LJMP      ??ZDP_MatchDescReq_9 & 0xFFFF
    453            {
    454              for (i=0; i<NumOutClusters; ++i)  {
   \   0001E0   75..00       MOV       ?V4,#0x0
   \                     ??ZDP_MatchDescReq_10:
   \   0001E3   E5..         MOV       A,?V4
   \   0001E5   C3           CLR       C
   \   0001E6   95..         SUBB      A,?V5
   \   0001E8   4003         JC        $+5
   \   0001EA   02....       LJMP      ??ZDP_MatchDescReq_9 & 0xFFFF
    455                *pBuf++ = LO_UINT16( OutClusterList[i] );
   \   0001ED   E5..         MOV       A,?V4
   \   0001EF   F8           MOV       R0,A
   \   0001F0   7900         MOV       R1,#0x0
   \   0001F2   E8           MOV       A,R0
   \   0001F3   75F002       MOV       B,#0x2
   \   0001F6   A4           MUL       AB
   \   0001F7   C8           XCH       A,R0
   \   0001F8   AAF0         MOV       R2,B
   \   0001FA   75F000       MOV       B,#0x0
   \   0001FD   A4           MUL       AB
   \   0001FE   2A           ADD       A,R2
   \   0001FF   FA           MOV       R2,A
   \   000200   75F002       MOV       B,#0x2
   \   000203   E9           MOV       A,R1
   \   000204   A4           MUL       AB
   \   000205   2A           ADD       A,R2
   \   000206   F9           MOV       R1,A
   \   000207   E5..         MOV       A,?V12
   \   000209   28           ADD       A,R0
   \   00020A   F582         MOV       DPL,A
   \   00020C   E5..         MOV       A,?V13
   \   00020E   39           ADDC      A,R1
   \   00020F   F583         MOV       DPH,A
   \   000211   E0           MOVX      A,@DPTR
   \   000212   F8           MOV       R0,A
   \   000213   A3           INC       DPTR
   \   000214   E0           MOVX      A,@DPTR
   \   000215   F9           MOV       R1,A
   \   000216   E8           MOV       A,R0
   \   000217   C0E0         PUSH      A
   \   000219   8E82         MOV       DPL,R6
   \   00021B   8F83         MOV       DPH,R7
   \   00021D   D0E0         POP       A
   \   00021F   F0           MOVX      @DPTR,A
   \   000220   8E82         MOV       DPL,R6
   \   000222   8F83         MOV       DPH,R7
   \   000224   A3           INC       DPTR
   \   000225   AE82         MOV       R6,DPL
   \   000227   AF83         MOV       R7,DPH
    456                *pBuf++ = HI_UINT16( OutClusterList[i] );
   \   000229   E5..         MOV       A,?V4
   \   00022B   F8           MOV       R0,A
   \   00022C   7900         MOV       R1,#0x0
   \   00022E   E8           MOV       A,R0
   \   00022F   75F002       MOV       B,#0x2
   \   000232   A4           MUL       AB
   \   000233   C8           XCH       A,R0
   \   000234   AAF0         MOV       R2,B
   \   000236   75F000       MOV       B,#0x0
   \   000239   A4           MUL       AB
   \   00023A   2A           ADD       A,R2
   \   00023B   FA           MOV       R2,A
   \   00023C   75F002       MOV       B,#0x2
   \   00023F   E9           MOV       A,R1
   \   000240   A4           MUL       AB
   \   000241   2A           ADD       A,R2
   \   000242   F9           MOV       R1,A
   \   000243   E5..         MOV       A,?V12
   \   000245   28           ADD       A,R0
   \   000246   F582         MOV       DPL,A
   \   000248   E5..         MOV       A,?V13
   \   00024A   39           ADDC      A,R1
   \   00024B   F583         MOV       DPH,A
   \   00024D   E0           MOVX      A,@DPTR
   \   00024E   F8           MOV       R0,A
   \   00024F   A3           INC       DPTR
   \   000250   E0           MOVX      A,@DPTR
   \   000251   F9           MOV       R1,A
   \   000252   E4           CLR       A
   \   000253   C9           XCH       A,R1
   \   000254   F8           MOV       R0,A
   \   000255   E8           MOV       A,R0
   \   000256   C0E0         PUSH      A
   \   000258   8E82         MOV       DPL,R6
   \   00025A   8F83         MOV       DPH,R7
   \   00025C   D0E0         POP       A
   \   00025E   F0           MOVX      @DPTR,A
   \   00025F   8E82         MOV       DPL,R6
   \   000261   8F83         MOV       DPH,R7
   \   000263   A3           INC       DPTR
   \   000264   AE82         MOV       R6,DPL
   \   000266   AF83         MOV       R7,DPH
    457              }
   \   000268   05..         INC       ?V4
   \   00026A   02....       LJMP      ??ZDP_MatchDescReq_10 & 0xFFFF
    458            }
    459          
    460            return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
   \                     ??ZDP_MatchDescReq_9:
   \   00026D                ; Setup parameters for call to function fillAndSend
   \   00026D   75..06       MOV       ?V10,#0x6
   \   000270   75..00       MOV       ?V11,#0x0
   \   000273   78..         MOV       R0,#?V10
   \   000275   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000278   A9..         MOV       R1,?V9
   \   00027A   AC..         MOV       R4,?V6
   \   00027C   AD..         MOV       R5,?V7
   \   00027E   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000280   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000282   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000285   7402         MOV       A,#0x2
   \   000287   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDP_MatchDescReq_1:
   \   00028A   7F10         MOV       R7,#0x10
   \   00028C   02....       LJMP      ?BANKED_LEAVE_XDATA
    461          }
    462          
    463          /*********************************************************************
    464           * @fn          ZDP_SimpleDescReq
    465           *
    466           * @brief       This builds and send a NWK_Simple_Desc_req
    467           *              message.  This function sends unicast message to the
    468           *              destination device.
    469           *
    470           * @param       dstAddr - destination address
    471           * @param       nwkAddr - 16 bit address
    472           * @param       epIntf - endpoint/interface
    473           * @param       SecurityEnable - Security Options
    474           *
    475           * @return      afStatus_t
    476           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    477          afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_SimpleDescReq:
    478                                              byte endPoint, byte SecurityEnable )
    479          
    480          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   \   00000D   89..         MOV       ?V2,R1
    481            (void)SecurityEnable;  // Intentionally unreferenced parameter
    482          
    483            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   00000F   E5..         MOV       A,?V0
   \   000011   C0E0         PUSH      A
   \   000013   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F8           MOV       R0,A
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F583         MOV       DPH,A
   \   00001C   8882         MOV       DPL,R0
   \   00001E   D0E0         POP       A
   \   000020   F0           MOVX      @DPTR,A
    484            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \   000021   A8..         MOV       R0,?V0
   \   000023   A9..         MOV       R1,?V1
   \   000025   E4           CLR       A
   \   000026   C9           XCH       A,R1
   \   000027   F8           MOV       R0,A
   \   000028   E8           MOV       A,R0
   \   000029   C0E0         PUSH      A
   \   00002B   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F8           MOV       R0,A
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F583         MOV       DPH,A
   \   000034   8882         MOV       DPL,R0
   \   000036   A3           INC       DPTR
   \   000037   D0E0         POP       A
   \   000039   F0           MOVX      @DPTR,A
    485            ZDP_TmpBuf[2] = endPoint;
   \   00003A   E5..         MOV       A,?V2
   \   00003C   C0E0         PUSH      A
   \   00003E   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F8           MOV       R0,A
   \   000043   A3           INC       DPTR
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F583         MOV       DPH,A
   \   000047   8882         MOV       DPL,R0
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   D0E0         POP       A
   \   00004D   F0           MOVX      @DPTR,A
    486          
    487            return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
   \   00004E                ; Setup parameters for call to function fillAndSend
   \   00004E   75..04       MOV       ?V4,#0x4
   \   000051   75..00       MOV       ?V5,#0x0
   \   000054   78..         MOV       R0,#?V4
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000059   7903         MOV       R1,#0x3
   \   00005B   EE           MOV       A,R6
   \   00005C   FC           MOV       R4,A
   \   00005D   EF           MOV       A,R7
   \   00005E   FD           MOV       R5,A
   \   00005F   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000061   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000063   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000066   7402         MOV       A,#0x2
   \   000068   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006B   7F06         MOV       R7,#0x6
   \   00006D   02....       LJMP      ?BANKED_LEAVE_XDATA
    488          }
    489          
    490          /*********************************************************************
    491           * @fn          ZDP_UserDescSet
    492           *
    493           * @brief       This builds and send a User_Desc_set message to set
    494           *              the user descriptor.  This function sends unicast
    495           *              message to the destination device.
    496           *
    497           * @param       dstAddr - destination address
    498           * @param       nwkAddr - 16 bit address
    499           * @param       UserDescriptor - user descriptor
    500           * @param       SecurityEnable - Security Options
    501           *
    502           * @return      afStatus_t
    503           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    504          afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_UserDescSet:
    505                                    UserDescriptorFormat_t *UserDescriptor,
    506                                    byte SecurityEnable )
    507          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V10,R2
   \   000007   8B..         MOV       ?V11,R3
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   \   00000D   89..         MOV       ?V7,R1
   \   00000F   7414         MOV       A,#0x14
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V8,A
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V9,A
    508            uint8 *pBuf = ZDP_TmpBuf;
   \   00001B   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   FE           MOV       R6,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   FF           MOV       R7,A
    509            byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
    510                        UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
   \   000023   85..82       MOV       DPL,?V8
   \   000026   85..83       MOV       DPH,?V9
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   C3           CLR       C
   \   00002B   9410         SUBB      A,#0x10
   \   00002D   500B         JNC       ??ZDP_UserDescSet_0
   \   00002F   85..82       MOV       DPL,?V8
   \   000032   85..83       MOV       DPH,?V9
   \   000035   E0           MOVX      A,@DPTR
   \   000036   F5..         MOV       ?V2,A
   \   000038   8003         SJMP      ??ZDP_UserDescSet_1
   \                     ??ZDP_UserDescSet_0:
   \   00003A   75..10       MOV       ?V2,#0x10
    511            byte addrLen = 2;
   \                     ??ZDP_UserDescSet_1:
   \   00003D   75..02       MOV       ?V3,#0x2
    512          
    513            (void)SecurityEnable;  // Intentionally unreferenced parameter
    514          
    515            *pBuf++ = LO_UINT16( nwkAddr );
   \   000040   E5..         MOV       A,?V0
   \   000042   C0E0         PUSH      A
   \   000044   8E82         MOV       DPL,R6
   \   000046   8F83         MOV       DPH,R7
   \   000048   D0E0         POP       A
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B   8E82         MOV       DPL,R6
   \   00004D   8F83         MOV       DPH,R7
   \   00004F   A3           INC       DPTR
   \   000050   AE82         MOV       R6,DPL
   \   000052   AF83         MOV       R7,DPH
    516            *pBuf++ = HI_UINT16( nwkAddr );
   \   000054   A8..         MOV       R0,?V0
   \   000056   A9..         MOV       R1,?V1
   \   000058   E4           CLR       A
   \   000059   C9           XCH       A,R1
   \   00005A   F8           MOV       R0,A
   \   00005B   E8           MOV       A,R0
   \   00005C   C0E0         PUSH      A
   \   00005E   8E82         MOV       DPL,R6
   \   000060   8F83         MOV       DPH,R7
   \   000062   D0E0         POP       A
   \   000064   F0           MOVX      @DPTR,A
   \   000065   8E82         MOV       DPL,R6
   \   000067   8F83         MOV       DPH,R7
   \   000069   A3           INC       DPTR
   \   00006A   AE82         MOV       R6,DPL
   \   00006C   AF83         MOV       R7,DPH
    517          
    518            *pBuf++ = len;
   \   00006E   E5..         MOV       A,?V2
   \   000070   C0E0         PUSH      A
   \   000072   8E82         MOV       DPL,R6
   \   000074   8F83         MOV       DPH,R7
   \   000076   D0E0         POP       A
   \   000078   F0           MOVX      @DPTR,A
   \   000079   8E82         MOV       DPL,R6
   \   00007B   8F83         MOV       DPH,R7
   \   00007D   A3           INC       DPTR
   \   00007E   AE82         MOV       R6,DPL
   \   000080   AF83         MOV       R7,DPH
    519            addrLen = 3;
   \   000082   75..03       MOV       ?V3,#0x3
    520          
    521            pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
   \   000085                ; Setup parameters for call to function osal_memcpy
   \   000085   85..82       MOV       DPL,?V8
   \   000088   85..83       MOV       DPH,?V9
   \   00008B   A3           INC       DPTR
   \   00008C   A982         MOV       R1,DPL
   \   00008E   AA83         MOV       R2,DPH
   \   000090   7B00         MOV       R3,#0x0
   \   000092   89..         MOV       ?V4,R1
   \   000094   8A..         MOV       ?V5,R2
   \   000096   8B..         MOV       ?V6,R3
   \   000098   78..         MOV       R0,#?V4
   \   00009A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00009D   E5..         MOV       A,?V2
   \   00009F   FC           MOV       R4,A
   \   0000A0   7D00         MOV       R5,#0x0
   \   0000A2   EE           MOV       A,R6
   \   0000A3   FA           MOV       R2,A
   \   0000A4   EF           MOV       A,R7
   \   0000A5   FB           MOV       R3,A
   \   0000A6   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000A9   7403         MOV       A,#0x3
   \   0000AB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AE   8A..         MOV       ?V4,R2
   \   0000B0   8B..         MOV       ?V5,R3
   \   0000B2   AE..         MOV       R6,?V4
   \   0000B4   AF..         MOV       R7,?V5
    522            osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
   \   0000B6                ; Setup parameters for call to function osal_memset
   \   0000B6   E5..         MOV       A,?V2
   \   0000B8   F8           MOV       R0,A
   \   0000B9   7900         MOV       R1,#0x0
   \   0000BB   7410         MOV       A,#0x10
   \   0000BD   C3           CLR       C
   \   0000BE   98           SUBB      A,R0
   \   0000BF   FC           MOV       R4,A
   \   0000C0   7400         MOV       A,#0x0
   \   0000C2   99           SUBB      A,R1
   \   0000C3   FD           MOV       R5,A
   \   0000C4   7920         MOV       R1,#0x20
   \   0000C6   EE           MOV       A,R6
   \   0000C7   FA           MOV       R2,A
   \   0000C8   EF           MOV       A,R7
   \   0000C9   FB           MOV       R3,A
   \   0000CA   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    523          
    524            return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
   \   0000CD                ; Setup parameters for call to function fillAndSend
   \   0000CD   75..14       MOV       ?V4,#0x14
   \   0000D0   75..00       MOV       ?V5,#0x0
   \   0000D3   78..         MOV       R0,#?V4
   \   0000D5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D8   7410         MOV       A,#0x10
   \   0000DA   25..         ADD       A,?V3
   \   0000DC   F9           MOV       R1,A
   \   0000DD   AC..         MOV       R4,?V10
   \   0000DF   AD..         MOV       R5,?V11
   \   0000E1   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   0000E3   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   0000E5   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000E8   7402         MOV       A,#0x2
   \   0000EA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000ED   7F0C         MOV       R7,#0xc
   \   0000EF   02....       LJMP      ?BANKED_LEAVE_XDATA
    525          }
    526          
    527          /*********************************************************************
    528           * @fn          ZDP_ServerDiscReq
    529           *
    530           * @brief       Build and send a Server_Discovery_req request message.
    531           *
    532           * @param       serverMask - 16-bit bit-mask of server services being sought.
    533           * @param       SecurityEnable - Security Options
    534           *
    535           * @return      afStatus_t
    536           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    537          afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
   \                     ZDP_ServerDiscReq:
    538          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   89..         MOV       ?V2,R1
    539            uint8 *pBuf = ZDP_TmpBuf;
   \   000010   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000013   E0           MOVX      A,@DPTR
   \   000014   FE           MOV       R6,A
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   FF           MOV       R7,A
    540            zAddrType_t dstAddr;
    541          
    542            dstAddr.addrMode = AddrBroadcast;
   \   000018   7408         MOV       A,#0x8
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   740F         MOV       A,#0xf
   \   00001F   F0           MOVX      @DPTR,A
    543            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000020   85..82       MOV       DPL,?XSP + 0
   \   000023   85..83       MOV       DPH,?XSP + 1
   \   000026   74FD         MOV       A,#-0x3
   \   000028   F0           MOVX      @DPTR,A
   \   000029   A3           INC       DPTR
   \   00002A   74FF         MOV       A,#-0x1
   \   00002C   F0           MOVX      @DPTR,A
    544          
    545            *pBuf++ = LO_UINT16( serverMask );
   \   00002D   E5..         MOV       A,?V0
   \   00002F   C0E0         PUSH      A
   \   000031   8E82         MOV       DPL,R6
   \   000033   8F83         MOV       DPH,R7
   \   000035   D0E0         POP       A
   \   000037   F0           MOVX      @DPTR,A
   \   000038   8E82         MOV       DPL,R6
   \   00003A   8F83         MOV       DPH,R7
   \   00003C   A3           INC       DPTR
   \   00003D   AE82         MOV       R6,DPL
   \   00003F   AF83         MOV       R7,DPH
    546            *pBuf = HI_UINT16( serverMask );
   \   000041   A8..         MOV       R0,?V0
   \   000043   A9..         MOV       R1,?V1
   \   000045   E4           CLR       A
   \   000046   C9           XCH       A,R1
   \   000047   F8           MOV       R0,A
   \   000048   E8           MOV       A,R0
   \   000049   C0E0         PUSH      A
   \   00004B   8E82         MOV       DPL,R6
   \   00004D   8F83         MOV       DPH,R7
   \   00004F   D0E0         POP       A
   \   000051   F0           MOVX      @DPTR,A
    547          
    548            FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
    549                       ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
   \   000052   E5..         MOV       A,?V2
   \   000054   6008         JZ        ??ZDP_ServerDiscReq_0
   \   000056   90....       MOV       DPTR,#ZDP_TxOptions
   \   000059   7440         MOV       A,#0x40
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   8006         SJMP      ??ZDP_ServerDiscReq_1
   \                     ??ZDP_ServerDiscReq_0:
   \   00005E   90....       MOV       DPTR,#ZDP_TxOptions
   \   000061   7400         MOV       A,#0x0
   \   000063   F0           MOVX      @DPTR,A
   \                     ??ZDP_ServerDiscReq_1:
   \   000064                ; Setup parameters for call to function fillAndSend
   \   000064   75..15       MOV       ?V4,#0x15
   \   000067   75..00       MOV       ?V5,#0x0
   \   00006A   78..         MOV       R0,#?V4
   \   00006C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006F   7902         MOV       R1,#0x2
   \   000071   7402         MOV       A,#0x2
   \   000073   12....       LCALL     ?XSTACK_DISP102_8
   \   000076   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000078   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   00007A   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00007D   7402         MOV       A,#0x2
   \   00007F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000082   E9           MOV       A,R1
   \   000083   F5..         MOV       ?V3,A
   \   000085   90....       MOV       DPTR,#ZDP_TxOptions
   \   000088   7400         MOV       A,#0x0
   \   00008A   F0           MOVX      @DPTR,A
   \   00008B   A9..         MOV       R1,?V3
   \   00008D   7409         MOV       A,#0x9
   \   00008F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000092   7F06         MOV       R7,#0x6
   \   000094   02....       LJMP      ?BANKED_LEAVE_XDATA
    550          }
    551          
    552          /*********************************************************************
    553           * @fn          ZDP_DeviceAnnce
    554           *
    555           * @brief       This builds and send a Device_Annce message.  This
    556           *              function sends a broadcast message.
    557           *
    558           * @param       nwkAddr - 16 bit address of the device
    559           * @param       IEEEAddr - 64 bit address of the device
    560           * @param       capabilities - device capabilities.  This field is only
    561           *                 sent for v1.1 networks.
    562           * @param       SecurityEnable - Security Options
    563           *
    564           * @return      afStatus_t
    565           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    566          afStatus_t ZDP_DeviceAnnce( uint16 nwkAddr, uint8 *IEEEAddr,
   \                     ZDP_DeviceAnnce:
    567                                        byte capabilities, byte SecurityEnable )
    568          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   8C..         MOV       ?V2,R4
   \   000010   8D..         MOV       ?V3,R5
   \   000012   89..         MOV       ?V1,R1
    569            zAddrType_t dstAddr;
    570            uint8 len;
    571          
    572            (void)SecurityEnable;  // Intentionally unreferenced parameter
    573          
    574            dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000014   7408         MOV       A,#0x8
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   740F         MOV       A,#0xf
   \   00001B   F0           MOVX      @DPTR,A
    575            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   00001C   85..82       MOV       DPL,?XSP + 0
   \   00001F   85..83       MOV       DPH,?XSP + 1
   \   000022   74FD         MOV       A,#-0x3
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   74FF         MOV       A,#-0x1
   \   000028   F0           MOVX      @DPTR,A
    576          
    577            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000029   EE           MOV       A,R6
   \   00002A   C0E0         PUSH      A
   \   00002C   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F8           MOV       R0,A
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   F583         MOV       DPH,A
   \   000035   8882         MOV       DPL,R0
   \   000037   D0E0         POP       A
   \   000039   F0           MOVX      @DPTR,A
    578            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \   00003A   EE           MOV       A,R6
   \   00003B   F8           MOV       R0,A
   \   00003C   EF           MOV       A,R7
   \   00003D   F9           MOV       R1,A
   \   00003E   E4           CLR       A
   \   00003F   C9           XCH       A,R1
   \   000040   F8           MOV       R0,A
   \   000041   E8           MOV       A,R0
   \   000042   C0E0         PUSH      A
   \   000044   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F8           MOV       R0,A
   \   000049   A3           INC       DPTR
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F583         MOV       DPH,A
   \   00004D   8882         MOV       DPL,R0
   \   00004F   A3           INC       DPTR
   \   000050   D0E0         POP       A
   \   000052   F0           MOVX      @DPTR,A
    579            osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
   \   000053                ; Setup parameters for call to function sAddrExtCpy
   \   000053   AC..         MOV       R4,?V2
   \   000055   AD..         MOV       R5,?V3
   \   000057   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   2402         ADD       A,#0x2
   \   00005D   FA           MOV       R2,A
   \   00005E   A3           INC       DPTR
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   3400         ADDC      A,#0x0
   \   000062   FB           MOV       R3,A
   \   000063   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    580            len = 2 + Z_EXTADDR_LEN;
   \   000066   75..0A       MOV       ?V0,#0xa
    581          
    582            ZDP_TmpBuf[10] = capabilities;
   \   000069   E5..         MOV       A,?V1
   \   00006B   C0E0         PUSH      A
   \   00006D   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000070   E0           MOVX      A,@DPTR
   \   000071   F8           MOV       R0,A
   \   000072   A3           INC       DPTR
   \   000073   E0           MOVX      A,@DPTR
   \   000074   C8           XCH       A,R0
   \   000075   240A         ADD       A,#0xa
   \   000077   F582         MOV       DPL,A
   \   000079   C8           XCH       A,R0
   \   00007A   3400         ADDC      A,#0x0
   \   00007C   F583         MOV       DPH,A
   \   00007E   D0E0         POP       A
   \   000080   F0           MOVX      @DPTR,A
    583            len++;
   \   000081   05..         INC       ?V0
    584          
    585            return fillAndSend( &ZDP_TransID, &dstAddr, Device_annce, len );
   \   000083                ; Setup parameters for call to function fillAndSend
   \   000083   75..13       MOV       ?V4,#0x13
   \   000086   75..00       MOV       ?V5,#0x0
   \   000089   78..         MOV       R0,#?V4
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008E   A9..         MOV       R1,?V0
   \   000090   7402         MOV       A,#0x2
   \   000092   12....       LCALL     ?XSTACK_DISP102_8
   \   000095   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000097   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000099   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00009C   7402         MOV       A,#0x2
   \   00009E   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A1   7409         MOV       A,#0x9
   \   0000A3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A6   7F06         MOV       R7,#0x6
   \   0000A8   02....       LJMP      ?BANKED_LEAVE_XDATA
    586          }
    587          
    588          /*********************************************************************
    589           * @fn          ZDP_ParentAnnce
    590           *
    591           * @brief       This builds and send a Parent_Annce and Parent_Annce_Rsp
    592           *              messages, it will depend on the clusterID parameter.
    593           *
    594           * @param       TransSeq - ZDP Transaction Sequence Number
    595           * @param       dstAddr - destination address
    596           * @param       numberOfChildren - 8 bit number of children
    597           * @param       childInfo - list of children information (ExtAddr and Age)
    598           * @param       clusterID - Parent_annce or Parent_annce_rsp
    599           * @param       SecurityEnable - Security Options
    600           *
    601           * @return      afStatus_t
    602           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    603          afStatus_t ZDP_ParentAnnce( uint8 *TransSeq,
   \                     ZDP_ParentAnnce:
    604                                      zAddrType_t *dstAddr,
    605                                      uint8 numberOfChildren,
    606                                      uint8 *childInfo,
    607                                      cId_t clusterID,
    608                                      uint8 SecurityEnable )
    609          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V8,R2
   \   000007   8B..         MOV       ?V9,R3
   \   000009   8C..         MOV       ?V4,R4
   \   00000B   8D..         MOV       ?V5,R5
   \   00000D   89..         MOV       ?V6,R1
   \   00000F   741A         MOV       A,#0x1a
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   FE           MOV       R6,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   FF           MOV       R7,A
    610            uint8 *pBuf = ZDP_TmpBuf;
   \   000019   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V0,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V1,A
    611            ZDO_ChildInfo_t *pChildInfo;
    612            uint8 i, len;
    613            uint8 *numOfChild;
    614          
    615            (void)SecurityEnable;  // Intentionally unreferenced parameter
    616          
    617            pChildInfo = (ZDO_ChildInfo_t *)childInfo;
   \   000023   7418         MOV       A,#0x18
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F8           MOV       R0,A
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F9           MOV       R1,A
   \   00002D   88..         MOV       ?V14,R0
   \   00002F   89..         MOV       ?V15,R1
    618          
    619            if ( dstAddr->addrMode == AddrBroadcast )
   \   000031   85..82       MOV       DPL,?V4
   \   000034   85..83       MOV       DPH,?V5
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   640F         XRL       A,#0xf
   \   000042   700D         JNZ       ??ZDP_ParentAnnce_0
    620            {
    621              // Make sure is sent to 0xFFFC
    622              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
   \   000044   85..82       MOV       DPL,?V4
   \   000047   85..83       MOV       DPH,?V5
   \   00004A   74FC         MOV       A,#-0x4
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   A3           INC       DPTR
   \   00004E   74FF         MOV       A,#-0x1
   \   000050   F0           MOVX      @DPTR,A
    623            }
    624            len = 1;
   \                     ??ZDP_ParentAnnce_0:
   \   000051   75..01       MOV       ?V2,#0x1
    625            if ( clusterID == Parent_annce_rsp )
   \   000054   741F         MOV       A,#0x1f
   \   000056   6E           XRL       A,R6
   \   000057   7003         JNZ       ??ZDP_ParentAnnce_1
   \   000059   7480         MOV       A,#-0x80
   \   00005B   6F           XRL       A,R7
   \                     ??ZDP_ParentAnnce_1:
   \   00005C   7018         JNZ       ??ZDP_ParentAnnce_2
    626            {
    627              // + Status Byte
    628              len += 1;
   \   00005E   05..         INC       ?V2
    629              // Set the status bit to success
    630              *pBuf++ = 0;
   \   000060   85..82       MOV       DPL,?V0
   \   000063   85..83       MOV       DPH,?V1
   \   000066   7400         MOV       A,#0x0
   \   000068   F0           MOVX      @DPTR,A
   \   000069   85..82       MOV       DPL,?V0
   \   00006C   85..83       MOV       DPH,?V1
   \   00006F   A3           INC       DPTR
   \   000070   8582..       MOV       ?V0,DPL
   \   000073   8583..       MOV       ?V1,DPH
    631            }
    632            
    633            numOfChild = pBuf;
   \                     ??ZDP_ParentAnnce_2:
   \   000076   85....       MOV       ?V12,?V0
   \   000079   85....       MOV       ?V13,?V1
    634            *pBuf++ = numberOfChildren;
   \   00007C   E5..         MOV       A,?V6
   \   00007E   C0E0         PUSH      A
   \   000080   85..82       MOV       DPL,?V0
   \   000083   85..83       MOV       DPH,?V1
   \   000086   D0E0         POP       A
   \   000088   F0           MOVX      @DPTR,A
   \   000089   85..82       MOV       DPL,?V0
   \   00008C   85..83       MOV       DPH,?V1
   \   00008F   A3           INC       DPTR
   \   000090   8582..       MOV       ?V0,DPL
   \   000093   8583..       MOV       ?V1,DPH
    635          
    636            for ( i = 0; i < MAX_PARENT_ANNCE_CHILD; i++ )
   \   000096   75..00       MOV       ?V3,#0x0
   \                     ??ZDP_ParentAnnce_3:
   \   000099   E5..         MOV       A,?V3
   \   00009B   C3           CLR       C
   \   00009C   940A         SUBB      A,#0xa
   \   00009E   4003         JC        $+5
   \   0000A0   02....       LJMP      ??ZDP_ParentAnnce_4 & 0xFFFF
    637            {
    638              pBuf = osal_cpyExtAddr( pBuf, pChildInfo[childIndex].extAddr );
   \   0000A3                ; Setup parameters for call to function sAddrExtCpy
   \   0000A3   90....       MOV       DPTR,#childIndex
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   F8           MOV       R0,A
   \   0000A8   7900         MOV       R1,#0x0
   \   0000AA   E8           MOV       A,R0
   \   0000AB   75F008       MOV       B,#0x8
   \   0000AE   A4           MUL       AB
   \   0000AF   C8           XCH       A,R0
   \   0000B0   AAF0         MOV       R2,B
   \   0000B2   75F000       MOV       B,#0x0
   \   0000B5   A4           MUL       AB
   \   0000B6   2A           ADD       A,R2
   \   0000B7   FA           MOV       R2,A
   \   0000B8   75F008       MOV       B,#0x8
   \   0000BB   E9           MOV       A,R1
   \   0000BC   A4           MUL       AB
   \   0000BD   2A           ADD       A,R2
   \   0000BE   F9           MOV       R1,A
   \   0000BF   E5..         MOV       A,?V14
   \   0000C1   28           ADD       A,R0
   \   0000C2   FC           MOV       R4,A
   \   0000C3   E5..         MOV       A,?V15
   \   0000C5   39           ADDC      A,R1
   \   0000C6   FD           MOV       R5,A
   \   0000C7   AA..         MOV       R2,?V0
   \   0000C9   AB..         MOV       R3,?V1
   \   0000CB   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000CE   8A..         MOV       ?V10,R2
   \   0000D0   8B..         MOV       ?V11,R3
   \   0000D2   85....       MOV       ?V0,?V10
   \   0000D5   85....       MOV       ?V1,?V11
    639              childIndex++;
   \   0000D8   90....       MOV       DPTR,#childIndex
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   2401         ADD       A,#0x1
   \   0000DE   F0           MOVX      @DPTR,A
    640              
    641              len += Z_EXTADDR_LEN;
   \   0000DF   7408         MOV       A,#0x8
   \   0000E1   25..         ADD       A,?V2
   \   0000E3   F5..         MOV       ?V2,A
    642              
    643              if ( childIndex == numberOfChildren )
   \   0000E5   90....       MOV       DPTR,#childIndex
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   65..         XRL       A,?V6
   \   0000EB   7038         JNZ       ??ZDP_ParentAnnce_5
    644              {
    645                pBuf = numOfChild;
   \   0000ED   85....       MOV       ?V0,?V12
   \   0000F0   85....       MOV       ?V1,?V13
    646                *pBuf = i + 1;
   \   0000F3   7401         MOV       A,#0x1
   \   0000F5   25..         ADD       A,?V3
   \   0000F7   C0E0         PUSH      A
   \   0000F9   85..82       MOV       DPL,?V0
   \   0000FC   85..83       MOV       DPH,?V1
   \   0000FF   D0E0         POP       A
   \   000101   F0           MOVX      @DPTR,A
    647                // All childs are taken, restart index and go out
    648                childIndex = 0;
   \   000102   90....       MOV       DPTR,#childIndex
   \   000105   7400         MOV       A,#0x0
   \   000107   F0           MOVX      @DPTR,A
    649                return fillAndSend( TransSeq, dstAddr, clusterID, len );
   \   000108                ; Setup parameters for call to function fillAndSend
   \   000108   8E..         MOV       ?V10,R6
   \   00010A   8F..         MOV       ?V11,R7
   \   00010C   78..         MOV       R0,#?V10
   \   00010E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000111   A9..         MOV       R1,?V2
   \   000113   AC..         MOV       R4,?V4
   \   000115   AD..         MOV       R5,?V5
   \   000117   AA..         MOV       R2,?V8
   \   000119   AB..         MOV       R3,?V9
   \   00011B   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00011E   7402         MOV       A,#0x2
   \   000120   12....       LCALL     ?DEALLOC_XSTACK8
   \   000123   8067         SJMP      ??ZDP_ParentAnnce_6
    650              }
    651            }
   \                     ??ZDP_ParentAnnce_5:
   \   000125   05..         INC       ?V3
   \   000127   02....       LJMP      ??ZDP_ParentAnnce_3 & 0xFFFF
    652            
    653            pBuf = numOfChild;
   \                     ??ZDP_ParentAnnce_4:
   \   00012A   85....       MOV       ?V0,?V12
   \   00012D   85....       MOV       ?V1,?V13
    654            *pBuf = MAX_PARENT_ANNCE_CHILD;
   \   000130   85..82       MOV       DPL,?V0
   \   000133   85..83       MOV       DPH,?V1
   \   000136   740A         MOV       A,#0xa
   \   000138   F0           MOVX      @DPTR,A
    655            if ( childIndex < numberOfChildren )
   \   000139   90....       MOV       DPTR,#childIndex
   \   00013C   E0           MOVX      A,@DPTR
   \   00013D   C3           CLR       C
   \   00013E   95..         SUBB      A,?V6
   \   000140   502F         JNC       ??ZDP_ParentAnnce_7
    656            {
    657              if ( clusterID == Parent_annce )
   \   000142   741F         MOV       A,#0x1f
   \   000144   6E           XRL       A,R6
   \   000145   7003         JNZ       ??ZDP_ParentAnnce_8
   \   000147   7400         MOV       A,#0x0
   \   000149   6F           XRL       A,R7
   \                     ??ZDP_ParentAnnce_8:
   \   00014A   7003         JNZ       ??ZDP_ParentAnnce_9
    658              {
    659                ZDApp_SetParentAnnceTimer();
   \   00014C                ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
   \   00014C   12....       LCALL     `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
    660              }
    661              if ( clusterID == Parent_annce_rsp )
   \                     ??ZDP_ParentAnnce_9:
   \   00014F   741F         MOV       A,#0x1f
   \   000151   6E           XRL       A,R6
   \   000152   7003         JNZ       ??ZDP_ParentAnnce_10
   \   000154   7480         MOV       A,#-0x80
   \   000156   6F           XRL       A,R7
   \                     ??ZDP_ParentAnnce_10:
   \   000157   7018         JNZ       ??ZDP_ParentAnnce_7
    662              {
    663                osal_start_timerEx( ZDAppTaskID, ZDO_PARENT_ANNCE_EVT, 10 );
   \   000159                ; Setup parameters for call to function osal_start_timerEx
   \   000159   90....       MOV       DPTR,#__Constant_a
   \   00015C   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00015F   7A00         MOV       R2,#0x0
   \   000161   7B40         MOV       R3,#0x40
   \   000163   90....       MOV       DPTR,#ZDAppTaskID
   \   000166   E0           MOVX      A,@DPTR
   \   000167   F9           MOV       R1,A
   \   000168   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00016B   7404         MOV       A,#0x4
   \   00016D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000170   E9           MOV       A,R1
    664              }
    665            }
    666          
    667            return fillAndSend( TransSeq, dstAddr, clusterID, len );
   \                     ??ZDP_ParentAnnce_7:
   \   000171                ; Setup parameters for call to function fillAndSend
   \   000171   8E..         MOV       ?V10,R6
   \   000173   8F..         MOV       ?V11,R7
   \   000175   78..         MOV       R0,#?V10
   \   000177   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00017A   A9..         MOV       R1,?V2
   \   00017C   AC..         MOV       R4,?V4
   \   00017E   AD..         MOV       R5,?V5
   \   000180   AA..         MOV       R2,?V8
   \   000182   AB..         MOV       R3,?V9
   \   000184   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000187   7402         MOV       A,#0x2
   \   000189   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDP_ParentAnnce_6:
   \   00018C   7F10         MOV       R7,#0x10
   \   00018E   02....       LJMP      ?BANKED_LEAVE_XDATA
    668          }
    669          
    670          /*********************************************************************
    671           * Address Responses
    672           */
    673          
    674          /*********************************************************************
    675           * @fn      zdpProcessAddrReq
    676           *
    677           * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
    678           *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
    679           *
    680           * @param   inMsg - incoming message
    681           *
    682           * @return  none
    683           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    684          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg )
   \                     zdpProcessAddrReq:
    685          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
    686            associated_devices_t *pAssoc;
    687            uint8 reqType;
    688            uint16 aoi = INVALID_NODE_ADDR;
   \   00000E   7EFE         MOV       R6,#-0x2
   \   000010   7FFF         MOV       R7,#-0x1
    689            uint8 *ieee = NULL;
   \   000012   75..00       MOV       ?V6,#0x0
   \   000015   75..00       MOV       ?V7,#0x0
    690          
    691            reqType = inMsg->asdu[(inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
   \   000018   E5..         MOV       A,?V4
   \   00001A   240C         ADD       A,#0xc
   \   00001C   F582         MOV       DPL,A
   \   00001E   E4           CLR       A
   \   00001F   35..         ADDC      A,?V5
   \   000021   F583         MOV       DPH,A
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F8           MOV       R0,A
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F9           MOV       R1,A
   \   000028   E8           MOV       A,R0
   \   000029   49           ORL       A,R1
   \   00002A   7006         JNZ       ??zdpProcessAddrReq_0
   \   00002C   7808         MOV       R0,#0x8
   \   00002E   7900         MOV       R1,#0x0
   \   000030   8004         SJMP      ??zdpProcessAddrReq_1
   \                     ??zdpProcessAddrReq_0:
   \   000032   7802         MOV       R0,#0x2
   \   000034   7900         MOV       R1,#0x0
   \                     ??zdpProcessAddrReq_1:
   \   000036   E5..         MOV       A,?V4
   \   000038   2413         ADD       A,#0x13
   \   00003A   F582         MOV       DPL,A
   \   00003C   E4           CLR       A
   \   00003D   35..         ADDC      A,?V5
   \   00003F   F583         MOV       DPH,A
   \   000041   E0           MOVX      A,@DPTR
   \   000042   28           ADD       A,R0
   \   000043   FA           MOV       R2,A
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \   000046   39           ADDC      A,R1
   \   000047   8A82         MOV       DPL,R2
   \   000049   F583         MOV       DPH,A
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   F5..         MOV       ?V3,A
    692          
    693            if ( inMsg->clusterID == NWK_addr_req )
   \   00004E   E5..         MOV       A,?V4
   \   000050   240C         ADD       A,#0xc
   \   000052   F582         MOV       DPL,A
   \   000054   E4           CLR       A
   \   000055   35..         ADDC      A,?V5
   \   000057   F583         MOV       DPH,A
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   F8           MOV       R0,A
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   F9           MOV       R1,A
   \   00005E   E8           MOV       A,R0
   \   00005F   49           ORL       A,R1
   \   000060   702C         JNZ       ??zdpProcessAddrReq_2
    694          
    695            {
    696              ieee = inMsg->asdu;
   \   000062   E5..         MOV       A,?V4
   \   000064   2413         ADD       A,#0x13
   \   000066   F582         MOV       DPL,A
   \   000068   E4           CLR       A
   \   000069   35..         ADDC      A,?V5
   \   00006B   F583         MOV       DPH,A
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   F8           MOV       R0,A
   \   00006F   A3           INC       DPTR
   \   000070   E0           MOVX      A,@DPTR
   \   000071   F9           MOV       R1,A
   \   000072   88..         MOV       ?V6,R0
   \   000074   89..         MOV       ?V7,R1
    697          
    698              if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
   \   000076                ; Setup parameters for call to function sAddrExtCmp
   \   000076   AC..         MOV       R4,?V6
   \   000078   AD..         MOV       R5,?V7
   \   00007A   7A..         MOV       R2,#saveExtAddr & 0xff
   \   00007C   7B..         MOV       R3,#(saveExtAddr >> 8) & 0xff
   \   00007E   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000081   E9           MOV       A,R1
   \   000082   6058         JZ        ??zdpProcessAddrReq_3
    699              {
    700                aoi = ZDAppNwkAddr.addr.shortAddr;
   \   000084   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000087   E0           MOVX      A,@DPTR
   \   000088   FE           MOV       R6,A
   \   000089   A3           INC       DPTR
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   FF           MOV       R7,A
   \   00008C   804E         SJMP      ??zdpProcessAddrReq_3
    701              }
    702              // Handle response for sleeping end devices
    703              else if ( (ZSTACK_ROUTER_BUILD)
    704                && (((pAssoc = AssocGetWithExt( ieee )) != NULL)
    705                       && ((pAssoc->nodeRelation == CHILD_RFD) || (pAssoc->nodeRelation == CHILD_RFD_RX_IDLE)) ) )
    706              {
    707                aoi = pAssoc->shortAddr;
    708                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
    709                  reqType = 0xFF; // Force Invalid
    710              }
    711            }
    712            else  // if ( inMsg->clusterID == IEEE_addr_req )
    713            {
    714              aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??zdpProcessAddrReq_2:
   \   00008E   E5..         MOV       A,?V4
   \   000090   2413         ADD       A,#0x13
   \   000092   F582         MOV       DPL,A
   \   000094   E4           CLR       A
   \   000095   35..         ADDC      A,?V5
   \   000097   F583         MOV       DPH,A
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   F8           MOV       R0,A
   \   00009B   A3           INC       DPTR
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   F583         MOV       DPH,A
   \   00009F   8882         MOV       DPL,R0
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   FA           MOV       R2,A
   \   0000A3   7B00         MOV       R3,#0x0
   \   0000A5   E5..         MOV       A,?V4
   \   0000A7   2413         ADD       A,#0x13
   \   0000A9   F582         MOV       DPL,A
   \   0000AB   E4           CLR       A
   \   0000AC   35..         ADDC      A,?V5
   \   0000AE   F583         MOV       DPH,A
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   F8           MOV       R0,A
   \   0000B2   A3           INC       DPTR
   \   0000B3   E0           MOVX      A,@DPTR
   \   0000B4   F583         MOV       DPH,A
   \   0000B6   8882         MOV       DPL,R0
   \   0000B8   A3           INC       DPTR
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   F8           MOV       R0,A
   \   0000BB   7900         MOV       R1,#0x0
   \   0000BD   E4           CLR       A
   \   0000BE   C8           XCH       A,R0
   \   0000BF   F9           MOV       R1,A
   \   0000C0   EA           MOV       A,R2
   \   0000C1   28           ADD       A,R0
   \   0000C2   F8           MOV       R0,A
   \   0000C3   EB           MOV       A,R3
   \   0000C4   39           ADDC      A,R1
   \   0000C5   F9           MOV       R1,A
   \   0000C6   E8           MOV       A,R0
   \   0000C7   FE           MOV       R6,A
   \   0000C8   E9           MOV       A,R1
   \   0000C9   FF           MOV       R7,A
    715          
    716              if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   0000CA   90....       MOV       DPTR,#ZDAppNwkAddr
   \   0000CD   E0           MOVX      A,@DPTR
   \   0000CE   6E           XRL       A,R6
   \   0000CF   7003         JNZ       ??zdpProcessAddrReq_4
   \   0000D1   A3           INC       DPTR
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   6F           XRL       A,R7
   \                     ??zdpProcessAddrReq_4:
   \   0000D4   7006         JNZ       ??zdpProcessAddrReq_3
    717              {
    718                ieee = saveExtAddr;
   \   0000D6   75....       MOV       ?V6,#saveExtAddr & 0xff
   \   0000D9   75....       MOV       ?V7,#(saveExtAddr >> 8) & 0xff
    719              }
    720              else if ( (ZSTACK_ROUTER_BUILD)
    721                && (((pAssoc = AssocGetWithShort( aoi )) != NULL)
    722                       && (pAssoc->nodeRelation == CHILD_RFD)) )
    723              {
    724                AddrMgrEntry_t addrEntry;
    725                addrEntry.user = ADDRMGR_USER_DEFAULT;
    726                addrEntry.index = pAssoc->addrIdx;
    727                if ( AddrMgrEntryGet( &addrEntry ) )
    728                {
    729                  ieee = addrEntry.extAddr;
    730                }
    731          
    732                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
    733                  reqType = 0xFF; // Force Invalid
    734              }
    735            }
    736          
    737            if ( ((aoi != INVALID_NODE_ADDR) && (ieee != NULL)) || (inMsg->wasBroadcast == FALSE) )
   \                     ??zdpProcessAddrReq_3:
   \   0000DC   74FE         MOV       A,#-0x2
   \   0000DE   6E           XRL       A,R6
   \   0000DF   7003         JNZ       ??zdpProcessAddrReq_5
   \   0000E1   74FF         MOV       A,#-0x1
   \   0000E3   6F           XRL       A,R7
   \                     ??zdpProcessAddrReq_5:
   \   0000E4   6006         JZ        ??zdpProcessAddrReq_6
   \   0000E6   E5..         MOV       A,?V6
   \   0000E8   45..         ORL       A,?V7
   \   0000EA   7011         JNZ       ??zdpProcessAddrReq_7
   \                     ??zdpProcessAddrReq_6:
   \   0000EC   E5..         MOV       A,?V4
   \   0000EE   240B         ADD       A,#0xb
   \   0000F0   F582         MOV       DPL,A
   \   0000F2   E4           CLR       A
   \   0000F3   35..         ADDC      A,?V5
   \   0000F5   F583         MOV       DPH,A
   \   0000F7   E0           MOVX      A,@DPTR
   \   0000F8   6003         JZ        $+5
   \   0000FA   02....       LJMP      ??zdpProcessAddrReq_8 & 0xFFFF
    738            {
    739              uint8 stat;
    740              uint8 *pBuf = ZDP_TmpBuf;
   \                     ??zdpProcessAddrReq_7:
   \   0000FD   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000100   E0           MOVX      A,@DPTR
   \   000101   F5..         MOV       ?V0,A
   \   000103   A3           INC       DPTR
   \   000104   E0           MOVX      A,@DPTR
   \   000105   F5..         MOV       ?V1,A
    741              // Status + IEEE-Addr + Nwk-Addr.
    742              uint8 len = 1 + Z_EXTADDR_LEN + 2;
   \   000107   75..0B       MOV       ?V8,#0xb
    743          
    744              // If aoi and iee are both setup, we found results
    745              if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
   \   00010A   74FE         MOV       A,#-0x2
   \   00010C   6E           XRL       A,R6
   \   00010D   7003         JNZ       ??zdpProcessAddrReq_9
   \   00010F   74FF         MOV       A,#-0x1
   \   000111   6F           XRL       A,R7
   \                     ??zdpProcessAddrReq_9:
   \   000112   6036         JZ        ??zdpProcessAddrReq_10
   \   000114   E5..         MOV       A,?V6
   \   000116   45..         ORL       A,?V7
   \   000118   6030         JZ        ??zdpProcessAddrReq_10
    746              {
    747                stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) || (reqType == ZDP_ADDR_REQTYPE_EXTENDED))
    748                              ? ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
   \   00011A   E5..         MOV       A,?V3
   \   00011C   6006         JZ        ??zdpProcessAddrReq_11
   \   00011E   7401         MOV       A,#0x1
   \   000120   65..         XRL       A,?V3
   \   000122   7005         JNZ       ??zdpProcessAddrReq_12
   \                     ??zdpProcessAddrReq_11:
   \   000124   75..00       MOV       ?V2,#0x0
   \   000127   8003         SJMP      ??zdpProcessAddrReq_13
   \                     ??zdpProcessAddrReq_12:
   \   000129   75..80       MOV       ?V2,#-0x80
    749                        
    750                if(stat == ZDP_INVALID_REQTYPE)
   \                     ??zdpProcessAddrReq_13:
   \   00012C   7480         MOV       A,#-0x80
   \   00012E   65..         XRL       A,?V2
   \   000130   7050         JNZ       ??zdpProcessAddrReq_14
    751                {
    752                  //R21 Errata update CCB 2111 
    753                  if(inMsg->wasBroadcast == TRUE)
   \   000132   E5..         MOV       A,?V4
   \   000134   240B         ADD       A,#0xb
   \   000136   F582         MOV       DPL,A
   \   000138   E4           CLR       A
   \   000139   35..         ADDC      A,?V5
   \   00013B   F583         MOV       DPH,A
   \   00013D   E0           MOVX      A,@DPTR
   \   00013E   6401         XRL       A,#0x1
   \   000140   7003         JNZ       $+5
   \   000142   02....       LJMP      ??zdpProcessAddrReq_8 & 0xFFFF
    754                  {
    755                    return;
    756                  }
    757                  
    758                  stat = ZDP_INVALID_REQTYPE;
   \   000145   75..80       MOV       ?V2,#-0x80
   \   000148   8038         SJMP      ??zdpProcessAddrReq_14
    759                }
    760              }
    761              else
    762              {
    763                // not found and the req was unicast to this device
    764                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??zdpProcessAddrReq_10:
   \   00014A   75..81       MOV       ?V2,#-0x7f
    765          
    766                // Fill in the missing field with this device's address
    767                if ( inMsg->clusterID == NWK_addr_req )
   \   00014D   E5..         MOV       A,?V4
   \   00014F   240C         ADD       A,#0xc
   \   000151   F582         MOV       DPL,A
   \   000153   E4           CLR       A
   \   000154   35..         ADDC      A,?V5
   \   000156   F583         MOV       DPH,A
   \   000158   E0           MOVX      A,@DPTR
   \   000159   F8           MOV       R0,A
   \   00015A   A3           INC       DPTR
   \   00015B   E0           MOVX      A,@DPTR
   \   00015C   F9           MOV       R1,A
   \   00015D   E8           MOV       A,R0
   \   00015E   49           ORL       A,R1
   \   00015F   7006         JNZ       ??zdpProcessAddrReq_15
    768                {
    769                  //CCB 2112 Zigbee Core spec
    770                  aoi = 0xFFFF;
   \   000161   7EFF         MOV       R6,#-0x1
   \   000163   7FFF         MOV       R7,#-0x1
   \   000165   801B         SJMP      ??zdpProcessAddrReq_14
    771                }
    772                else
    773                {
    774                  //CCB 2113 Zigbee Core spec
    775                  uint8 invalidIEEEAddr[Z_EXTADDR_LEN];
    776                  osal_memset(invalidIEEEAddr,0xFF,Z_EXTADDR_LEN);
   \                     ??zdpProcessAddrReq_15:
   \   000167                ; Setup parameters for call to function osal_memset
   \   000167   7C08         MOV       R4,#0x8
   \   000169   7D00         MOV       R5,#0x0
   \   00016B   79FF         MOV       R1,#-0x1
   \   00016D   AA..         MOV       R2,?XSP + 0
   \   00016F   AB..         MOV       R3,?XSP + 1
   \   000171   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    777                  ieee = invalidIEEEAddr;
   \   000174   A8..         MOV       R0,?XSP + 0
   \   000176   A9..         MOV       R1,?XSP + 1
   \   000178   88..         MOV       ?V10,R0
   \   00017A   89..         MOV       ?V11,R1
   \   00017C   85....       MOV       ?V6,?V10
   \   00017F   85....       MOV       ?V7,?V11
    778                }
    779              }
    780          
    781              *pBuf++ = stat;
   \                     ??zdpProcessAddrReq_14:
   \   000182   E5..         MOV       A,?V2
   \   000184   C0E0         PUSH      A
   \   000186   85..82       MOV       DPL,?V0
   \   000189   85..83       MOV       DPH,?V1
   \   00018C   D0E0         POP       A
   \   00018E   F0           MOVX      @DPTR,A
   \   00018F   85..82       MOV       DPL,?V0
   \   000192   85..83       MOV       DPH,?V1
   \   000195   A3           INC       DPTR
   \   000196   8582..       MOV       ?V0,DPL
   \   000199   8583..       MOV       ?V1,DPH
    782          
    783              pBuf = osal_cpyExtAddr( pBuf, ieee );
   \   00019C                ; Setup parameters for call to function sAddrExtCpy
   \   00019C   AC..         MOV       R4,?V6
   \   00019E   AD..         MOV       R5,?V7
   \   0001A0   AA..         MOV       R2,?V0
   \   0001A2   AB..         MOV       R3,?V1
   \   0001A4   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0001A7   8A..         MOV       ?V10,R2
   \   0001A9   8B..         MOV       ?V11,R3
   \   0001AB   85....       MOV       ?V0,?V10
   \   0001AE   85....       MOV       ?V1,?V11
    784          
    785              *pBuf++ = LO_UINT16( aoi );
   \   0001B1   EE           MOV       A,R6
   \   0001B2   C0E0         PUSH      A
   \   0001B4   85..82       MOV       DPL,?V0
   \   0001B7   85..83       MOV       DPH,?V1
   \   0001BA   D0E0         POP       A
   \   0001BC   F0           MOVX      @DPTR,A
   \   0001BD   85..82       MOV       DPL,?V0
   \   0001C0   85..83       MOV       DPH,?V1
   \   0001C3   A3           INC       DPTR
   \   0001C4   8582..       MOV       ?V0,DPL
   \   0001C7   8583..       MOV       ?V1,DPH
    786              *pBuf++ = HI_UINT16( aoi );
   \   0001CA   EE           MOV       A,R6
   \   0001CB   F8           MOV       R0,A
   \   0001CC   EF           MOV       A,R7
   \   0001CD   F9           MOV       R1,A
   \   0001CE   E4           CLR       A
   \   0001CF   C9           XCH       A,R1
   \   0001D0   F8           MOV       R0,A
   \   0001D1   E8           MOV       A,R0
   \   0001D2   C0E0         PUSH      A
   \   0001D4   85..82       MOV       DPL,?V0
   \   0001D7   85..83       MOV       DPH,?V1
   \   0001DA   D0E0         POP       A
   \   0001DC   F0           MOVX      @DPTR,A
   \   0001DD   85..82       MOV       DPL,?V0
   \   0001E0   85..83       MOV       DPH,?V1
   \   0001E3   A3           INC       DPTR
   \   0001E4   8582..       MOV       ?V0,DPL
   \   0001E7   8583..       MOV       ?V1,DPH
    787          
    788              if ( ZSTACK_ROUTER_BUILD )
    789              {
    790                if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) && (aoi == ZDAppNwkAddr.addr.shortAddr)
    791                     && (stat == ZDP_SUCCESS) )
    792                {
    793                  uint8  cnt = 0;
    794                  
    795                  //Updated to only search for ZED devices as per R21 spec (2.4.3.1.1.2)
    796                  uint16 *list = AssocMakeList( &cnt );
    797          
    798                  if ( list != NULL )
    799                  {
    800                    byte idx = inMsg->asdu[(((inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
    801                    uint16 *pList = list + idx;
    802          
    803                    // NumAssocDev field is only present on success.
    804                    if ( cnt > idx )
    805                    {
    806                      cnt -= idx;
    807                      len += (cnt * sizeof( uint16 ));
    808                    }
    809                    else
    810                    {
    811                      cnt = 0;
    812                    }
    813                    *pBuf++ = cnt;
    814                    len++;
    815          
    816                    // StartIndex field is only present if NumAssocDev field is non-zero.
    817                    *pBuf++ = idx;
    818                    len++;
    819          
    820                    while ( cnt != 0 )
    821                    {
    822                      *pBuf++ = LO_UINT16( *pList );
    823                      *pBuf++ = HI_UINT16( *pList );
    824                      pList++;
    825                      cnt--;
    826                    }
    827          
    828                    osal_mem_free( (uint8 *)list );
    829                  }
    830                  else
    831                  {
    832                    // NumAssocDev field is only present on success.
    833                    *pBuf++ = 0;
    834                    len++;
    835                  }
    836                }
    837              }
    838          
    839              ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \   0001EA   90....       MOV       DPTR,#ZDP_TxOptions
   \   0001ED   7410         MOV       A,#0x10
   \   0001EF   F0           MOVX      @DPTR,A
    840              fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), (cId_t)(inMsg->clusterID | ZDO_RESPONSE_BIT), len );
   \   0001F0                ; Setup parameters for call to function fillAndSend
   \   0001F0   E5..         MOV       A,?V4
   \   0001F2   240C         ADD       A,#0xc
   \   0001F4   F582         MOV       DPL,A
   \   0001F6   E4           CLR       A
   \   0001F7   35..         ADDC      A,?V5
   \   0001F9   F583         MOV       DPH,A
   \   0001FB   E0           MOVX      A,@DPTR
   \   0001FC   4400         ORL       A,#0x0
   \   0001FE   F5..         MOV       ?V10,A
   \   000200   A3           INC       DPTR
   \   000201   E0           MOVX      A,@DPTR
   \   000202   4480         ORL       A,#0x80
   \   000204   F5..         MOV       ?V11,A
   \   000206   78..         MOV       R0,#?V10
   \   000208   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00020B   A9..         MOV       R1,?V8
   \   00020D   E5..         MOV       A,?V4
   \   00020F   2402         ADD       A,#0x2
   \   000211   FC           MOV       R4,A
   \   000212   E4           CLR       A
   \   000213   35..         ADDC      A,?V5
   \   000215   FD           MOV       R5,A
   \   000216   E5..         MOV       A,?V4
   \   000218   240F         ADD       A,#0xf
   \   00021A   FA           MOV       R2,A
   \   00021B   E4           CLR       A
   \   00021C   35..         ADDC      A,?V5
   \   00021E   FB           MOV       R3,A
   \   00021F   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000222   7402         MOV       A,#0x2
   \   000224   12....       LCALL     ?DEALLOC_XSTACK8
   \   000227   E9           MOV       A,R1
    841              ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   000228   90....       MOV       DPTR,#ZDP_TxOptions
   \   00022B   7400         MOV       A,#0x0
   \   00022D   F0           MOVX      @DPTR,A
    842            }
    843          }
   \                     ??zdpProcessAddrReq_8:
   \   00022E   7408         MOV       A,#0x8
   \   000230   12....       LCALL     ?DEALLOC_XSTACK8
   \   000233   7F0C         MOV       R7,#0xc
   \   000235   02....       LJMP      ?BANKED_LEAVE_XDATA
    844          
    845          /*********************************************************************
    846           * @fn          ZDP_NodeDescMsg
    847           *
    848           * @brief       Builds and sends a Node Descriptor message, unicast to the
    849           *              specified device.
    850           *
    851           * @param       inMsg - incoming message
    852           * @param       nwkAddr - 16 bit network address for device
    853           * @param       pNodeDesc - pointer to the node descriptor
    854           *
    855           * @return      afStatus_t
    856           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    857          afStatus_t ZDP_NodeDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_NodeDescMsg:
    858                                     uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc )
    859          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   \   00000D   7412         MOV       A,#0x12
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F5..         MOV       ?V0,A
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F5..         MOV       ?V1,A
    860            uint8 *pBuf = ZDP_TmpBuf;
   \   000019   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   FE           MOV       R6,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   FF           MOV       R7,A
    861            byte len;
    862          
    863            len = 1 + 2 + 13;  // Status + nwkAddr + Node descriptor
   \   000021   75..10       MOV       ?V6,#0x10
    864          
    865            *pBuf++ = ZDP_SUCCESS;
   \   000024   8E82         MOV       DPL,R6
   \   000026   8F83         MOV       DPH,R7
   \   000028   7400         MOV       A,#0x0
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   8E82         MOV       DPL,R6
   \   00002D   8F83         MOV       DPH,R7
   \   00002F   A3           INC       DPTR
   \   000030   AE82         MOV       R6,DPL
   \   000032   AF83         MOV       R7,DPH
    866          
    867            *pBuf++ = LO_UINT16( nwkAddr );
   \   000034   E5..         MOV       A,?V2
   \   000036   C0E0         PUSH      A
   \   000038   8E82         MOV       DPL,R6
   \   00003A   8F83         MOV       DPH,R7
   \   00003C   D0E0         POP       A
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   8E82         MOV       DPL,R6
   \   000041   8F83         MOV       DPH,R7
   \   000043   A3           INC       DPTR
   \   000044   AE82         MOV       R6,DPL
   \   000046   AF83         MOV       R7,DPH
    868            *pBuf++ = HI_UINT16( nwkAddr );
   \   000048   A8..         MOV       R0,?V2
   \   00004A   A9..         MOV       R1,?V3
   \   00004C   E4           CLR       A
   \   00004D   C9           XCH       A,R1
   \   00004E   F8           MOV       R0,A
   \   00004F   E8           MOV       A,R0
   \   000050   C0E0         PUSH      A
   \   000052   8E82         MOV       DPL,R6
   \   000054   8F83         MOV       DPH,R7
   \   000056   D0E0         POP       A
   \   000058   F0           MOVX      @DPTR,A
   \   000059   8E82         MOV       DPL,R6
   \   00005B   8F83         MOV       DPH,R7
   \   00005D   A3           INC       DPTR
   \   00005E   AE82         MOV       R6,DPL
   \   000060   AF83         MOV       R7,DPH
    869          
    870            *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
    871                               (pNodeDesc->UserDescAvail << 4) |
    872                               (pNodeDesc->LogicalType & 0x07));
   \   000062   85..82       MOV       DPL,?V0
   \   000065   85..83       MOV       DPH,?V1
   \   000068   E0           MOVX      A,@DPTR
   \   000069   5407         ANL       A,#0x7
   \   00006B   F9           MOV       R1,A
   \   00006C   85..82       MOV       DPL,?V0
   \   00006F   85..83       MOV       DPH,?V1
   \   000072   E0           MOVX      A,@DPTR
   \   000073   A2E4         MOV       C,0xE0 /* A   */.4
   \   000075   E4           CLR       A
   \   000076   33           RLC       A
   \   000077   C4           SWAP      A
   \   000078   54F0         ANL       A,#0xf0
   \   00007A   F8           MOV       R0,A
   \   00007B   85..82       MOV       DPL,?V0
   \   00007E   85..83       MOV       DPH,?V1
   \   000081   E0           MOVX      A,@DPTR
   \   000082   A2E3         MOV       C,0xE0 /* A   */.3
   \   000084   E4           CLR       A
   \   000085   33           RLC       A
   \   000086   33           RLC       A
   \   000087   33           RLC       A
   \   000088   33           RLC       A
   \   000089   54F8         ANL       A,#0xf8
   \   00008B   48           ORL       A,R0
   \   00008C   49           ORL       A,R1
   \   00008D   C0E0         PUSH      A
   \   00008F   8E82         MOV       DPL,R6
   \   000091   8F83         MOV       DPH,R7
   \   000093   D0E0         POP       A
   \   000095   F0           MOVX      @DPTR,A
   \   000096   8E82         MOV       DPL,R6
   \   000098   8F83         MOV       DPH,R7
   \   00009A   A3           INC       DPTR
   \   00009B   AE82         MOV       R6,DPL
   \   00009D   AF83         MOV       R7,DPH
    873          
    874            *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
   \   00009F   85..82       MOV       DPL,?V0
   \   0000A2   85..83       MOV       DPH,?V1
   \   0000A5   A3           INC       DPTR
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   5407         ANL       A,#0x7
   \   0000A9   F8           MOV       R0,A
   \   0000AA   85..82       MOV       DPL,?V0
   \   0000AD   85..83       MOV       DPH,?V1
   \   0000B0   A3           INC       DPTR
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   13           RRC       A
   \   0000B3   13           RRC       A
   \   0000B4   13           RRC       A
   \   0000B5   541F         ANL       A,#0x1f
   \   0000B7   33           RLC       A
   \   0000B8   33           RLC       A
   \   0000B9   33           RLC       A
   \   0000BA   54F8         ANL       A,#0xf8
   \   0000BC   48           ORL       A,R0
   \   0000BD   C0E0         PUSH      A
   \   0000BF   8E82         MOV       DPL,R6
   \   0000C1   8F83         MOV       DPH,R7
   \   0000C3   D0E0         POP       A
   \   0000C5   F0           MOVX      @DPTR,A
   \   0000C6   8E82         MOV       DPL,R6
   \   0000C8   8F83         MOV       DPH,R7
   \   0000CA   A3           INC       DPTR
   \   0000CB   AE82         MOV       R6,DPL
   \   0000CD   AF83         MOV       R7,DPH
    875            *pBuf++ = pNodeDesc->CapabilityFlags;
   \   0000CF   85..82       MOV       DPL,?V0
   \   0000D2   85..83       MOV       DPH,?V1
   \   0000D5   A3           INC       DPTR
   \   0000D6   A3           INC       DPTR
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   C0E0         PUSH      A
   \   0000DA   8E82         MOV       DPL,R6
   \   0000DC   8F83         MOV       DPH,R7
   \   0000DE   D0E0         POP       A
   \   0000E0   F0           MOVX      @DPTR,A
   \   0000E1   8E82         MOV       DPL,R6
   \   0000E3   8F83         MOV       DPH,R7
   \   0000E5   A3           INC       DPTR
   \   0000E6   AE82         MOV       R6,DPL
   \   0000E8   AF83         MOV       R7,DPH
    876            *pBuf++ = pNodeDesc->ManufacturerCode[0];
   \   0000EA   85..82       MOV       DPL,?V0
   \   0000ED   85..83       MOV       DPH,?V1
   \   0000F0   A3           INC       DPTR
   \   0000F1   A3           INC       DPTR
   \   0000F2   A3           INC       DPTR
   \   0000F3   E0           MOVX      A,@DPTR
   \   0000F4   C0E0         PUSH      A
   \   0000F6   8E82         MOV       DPL,R6
   \   0000F8   8F83         MOV       DPH,R7
   \   0000FA   D0E0         POP       A
   \   0000FC   F0           MOVX      @DPTR,A
   \   0000FD   8E82         MOV       DPL,R6
   \   0000FF   8F83         MOV       DPH,R7
   \   000101   A3           INC       DPTR
   \   000102   AE82         MOV       R6,DPL
   \   000104   AF83         MOV       R7,DPH
    877            *pBuf++ = pNodeDesc->ManufacturerCode[1];
   \   000106   85..82       MOV       DPL,?V0
   \   000109   85..83       MOV       DPH,?V1
   \   00010C   A3           INC       DPTR
   \   00010D   A3           INC       DPTR
   \   00010E   A3           INC       DPTR
   \   00010F   A3           INC       DPTR
   \   000110   E0           MOVX      A,@DPTR
   \   000111   C0E0         PUSH      A
   \   000113   8E82         MOV       DPL,R6
   \   000115   8F83         MOV       DPH,R7
   \   000117   D0E0         POP       A
   \   000119   F0           MOVX      @DPTR,A
   \   00011A   8E82         MOV       DPL,R6
   \   00011C   8F83         MOV       DPH,R7
   \   00011E   A3           INC       DPTR
   \   00011F   AE82         MOV       R6,DPL
   \   000121   AF83         MOV       R7,DPH
    878            *pBuf++ = pNodeDesc->MaxBufferSize;
   \   000123   85..82       MOV       DPL,?V0
   \   000126   85..83       MOV       DPH,?V1
   \   000129   A3           INC       DPTR
   \   00012A   A3           INC       DPTR
   \   00012B   A3           INC       DPTR
   \   00012C   A3           INC       DPTR
   \   00012D   A3           INC       DPTR
   \   00012E   E0           MOVX      A,@DPTR
   \   00012F   C0E0         PUSH      A
   \   000131   8E82         MOV       DPL,R6
   \   000133   8F83         MOV       DPH,R7
   \   000135   D0E0         POP       A
   \   000137   F0           MOVX      @DPTR,A
   \   000138   8E82         MOV       DPL,R6
   \   00013A   8F83         MOV       DPH,R7
   \   00013C   A3           INC       DPTR
   \   00013D   AE82         MOV       R6,DPL
   \   00013F   AF83         MOV       R7,DPH
    879            *pBuf++ = pNodeDesc->MaxInTransferSize[0];
   \   000141   85..82       MOV       DPL,?V0
   \   000144   85..83       MOV       DPH,?V1
   \   000147   A3           INC       DPTR
   \   000148   A3           INC       DPTR
   \   000149   A3           INC       DPTR
   \   00014A   A3           INC       DPTR
   \   00014B   A3           INC       DPTR
   \   00014C   A3           INC       DPTR
   \   00014D   E0           MOVX      A,@DPTR
   \   00014E   C0E0         PUSH      A
   \   000150   8E82         MOV       DPL,R6
   \   000152   8F83         MOV       DPH,R7
   \   000154   D0E0         POP       A
   \   000156   F0           MOVX      @DPTR,A
   \   000157   8E82         MOV       DPL,R6
   \   000159   8F83         MOV       DPH,R7
   \   00015B   A3           INC       DPTR
   \   00015C   AE82         MOV       R6,DPL
   \   00015E   AF83         MOV       R7,DPH
    880            *pBuf++ = pNodeDesc->MaxInTransferSize[1];
   \   000160   85..82       MOV       DPL,?V0
   \   000163   85..83       MOV       DPH,?V1
   \   000166   A3           INC       DPTR
   \   000167   A3           INC       DPTR
   \   000168   A3           INC       DPTR
   \   000169   A3           INC       DPTR
   \   00016A   A3           INC       DPTR
   \   00016B   A3           INC       DPTR
   \   00016C   A3           INC       DPTR
   \   00016D   E0           MOVX      A,@DPTR
   \   00016E   C0E0         PUSH      A
   \   000170   8E82         MOV       DPL,R6
   \   000172   8F83         MOV       DPH,R7
   \   000174   D0E0         POP       A
   \   000176   F0           MOVX      @DPTR,A
   \   000177   8E82         MOV       DPL,R6
   \   000179   8F83         MOV       DPH,R7
   \   00017B   A3           INC       DPTR
   \   00017C   AE82         MOV       R6,DPL
   \   00017E   AF83         MOV       R7,DPH
    881          
    882            *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
   \   000180   85..82       MOV       DPL,?V0
   \   000183   85..83       MOV       DPH,?V1
   \   000186   A3           INC       DPTR
   \   000187   A3           INC       DPTR
   \   000188   A3           INC       DPTR
   \   000189   A3           INC       DPTR
   \   00018A   A3           INC       DPTR
   \   00018B   A3           INC       DPTR
   \   00018C   A3           INC       DPTR
   \   00018D   A3           INC       DPTR
   \   00018E   E0           MOVX      A,@DPTR
   \   00018F   F8           MOV       R0,A
   \   000190   A3           INC       DPTR
   \   000191   E0           MOVX      A,@DPTR
   \   000192   F9           MOV       R1,A
   \   000193   E8           MOV       A,R0
   \   000194   C0E0         PUSH      A
   \   000196   8E82         MOV       DPL,R6
   \   000198   8F83         MOV       DPH,R7
   \   00019A   D0E0         POP       A
   \   00019C   F0           MOVX      @DPTR,A
   \   00019D   8E82         MOV       DPL,R6
   \   00019F   8F83         MOV       DPH,R7
   \   0001A1   A3           INC       DPTR
   \   0001A2   AE82         MOV       R6,DPL
   \   0001A4   AF83         MOV       R7,DPH
    883            *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
   \   0001A6   85..82       MOV       DPL,?V0
   \   0001A9   85..83       MOV       DPH,?V1
   \   0001AC   A3           INC       DPTR
   \   0001AD   A3           INC       DPTR
   \   0001AE   A3           INC       DPTR
   \   0001AF   A3           INC       DPTR
   \   0001B0   A3           INC       DPTR
   \   0001B1   A3           INC       DPTR
   \   0001B2   A3           INC       DPTR
   \   0001B3   A3           INC       DPTR
   \   0001B4   E0           MOVX      A,@DPTR
   \   0001B5   F8           MOV       R0,A
   \   0001B6   A3           INC       DPTR
   \   0001B7   E0           MOVX      A,@DPTR
   \   0001B8   F9           MOV       R1,A
   \   0001B9   E4           CLR       A
   \   0001BA   C9           XCH       A,R1
   \   0001BB   F8           MOV       R0,A
   \   0001BC   E8           MOV       A,R0
   \   0001BD   C0E0         PUSH      A
   \   0001BF   8E82         MOV       DPL,R6
   \   0001C1   8F83         MOV       DPH,R7
   \   0001C3   D0E0         POP       A
   \   0001C5   F0           MOVX      @DPTR,A
   \   0001C6   8E82         MOV       DPL,R6
   \   0001C8   8F83         MOV       DPH,R7
   \   0001CA   A3           INC       DPTR
   \   0001CB   AE82         MOV       R6,DPL
   \   0001CD   AF83         MOV       R7,DPH
    884            *pBuf++ = pNodeDesc->MaxOutTransferSize[0];
   \   0001CF   85..82       MOV       DPL,?V0
   \   0001D2   85..83       MOV       DPH,?V1
   \   0001D5   A3           INC       DPTR
   \   0001D6   A3           INC       DPTR
   \   0001D7   A3           INC       DPTR
   \   0001D8   A3           INC       DPTR
   \   0001D9   A3           INC       DPTR
   \   0001DA   A3           INC       DPTR
   \   0001DB   A3           INC       DPTR
   \   0001DC   A3           INC       DPTR
   \   0001DD   A3           INC       DPTR
   \   0001DE   A3           INC       DPTR
   \   0001DF   E0           MOVX      A,@DPTR
   \   0001E0   C0E0         PUSH      A
   \   0001E2   8E82         MOV       DPL,R6
   \   0001E4   8F83         MOV       DPH,R7
   \   0001E6   D0E0         POP       A
   \   0001E8   F0           MOVX      @DPTR,A
   \   0001E9   8E82         MOV       DPL,R6
   \   0001EB   8F83         MOV       DPH,R7
   \   0001ED   A3           INC       DPTR
   \   0001EE   AE82         MOV       R6,DPL
   \   0001F0   AF83         MOV       R7,DPH
    885            *pBuf++ = pNodeDesc->MaxOutTransferSize[1];
   \   0001F2   E5..         MOV       A,?V0
   \   0001F4   240B         ADD       A,#0xb
   \   0001F6   F582         MOV       DPL,A
   \   0001F8   E4           CLR       A
   \   0001F9   35..         ADDC      A,?V1
   \   0001FB   F583         MOV       DPH,A
   \   0001FD   E0           MOVX      A,@DPTR
   \   0001FE   C0E0         PUSH      A
   \   000200   8E82         MOV       DPL,R6
   \   000202   8F83         MOV       DPH,R7
   \   000204   D0E0         POP       A
   \   000206   F0           MOVX      @DPTR,A
   \   000207   8E82         MOV       DPL,R6
   \   000209   8F83         MOV       DPH,R7
   \   00020B   A3           INC       DPTR
   \   00020C   AE82         MOV       R6,DPL
   \   00020E   AF83         MOV       R7,DPH
    886            *pBuf = pNodeDesc->DescriptorCapability;
   \   000210   E5..         MOV       A,?V0
   \   000212   240C         ADD       A,#0xc
   \   000214   F582         MOV       DPL,A
   \   000216   E4           CLR       A
   \   000217   35..         ADDC      A,?V1
   \   000219   F583         MOV       DPH,A
   \   00021B   E0           MOVX      A,@DPTR
   \   00021C   C0E0         PUSH      A
   \   00021E   8E82         MOV       DPL,R6
   \   000220   8F83         MOV       DPH,R7
   \   000222   D0E0         POP       A
   \   000224   F0           MOVX      @DPTR,A
    887          
    888            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Node_Desc_rsp, len );
   \   000225                ; Setup parameters for call to function fillAndSend
   \   000225   75..02       MOV       ?V8,#0x2
   \   000228   75..80       MOV       ?V9,#-0x80
   \   00022B   78..         MOV       R0,#?V8
   \   00022D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000230   A9..         MOV       R1,?V6
   \   000232   E5..         MOV       A,?V4
   \   000234   2402         ADD       A,#0x2
   \   000236   FC           MOV       R4,A
   \   000237   E4           CLR       A
   \   000238   35..         ADDC      A,?V5
   \   00023A   FD           MOV       R5,A
   \   00023B   E5..         MOV       A,?V4
   \   00023D   240F         ADD       A,#0xf
   \   00023F   FA           MOV       R2,A
   \   000240   E4           CLR       A
   \   000241   35..         ADDC      A,?V5
   \   000243   FB           MOV       R3,A
   \   000244   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000247   7402         MOV       A,#0x2
   \   000249   12....       LCALL     ?DEALLOC_XSTACK8
   \   00024C   7F0A         MOV       R7,#0xa
   \   00024E   02....       LJMP      ?BANKED_LEAVE_XDATA
    889          }
    890          
    891          /*********************************************************************
    892           * @fn          ZDP_PowerDescMsg
    893           *
    894           * @brief       Builds and sends a Power Descriptor message, unicast to the
    895           *              specified device.
    896           *
    897           * @param       inMsg - incoming message (request)
    898           * @param       nwkAddr - 16 bit network address for device
    899           * @param       pPowerDesc - pointer to the node descriptor
    900           *
    901           * @return      afStatus_t
    902           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    903          afStatus_t ZDP_PowerDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_PowerDescMsg:
    904                               uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc )
    905          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   \   00000D   7412         MOV       A,#0x12
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F5..         MOV       ?V2,A
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F5..         MOV       ?V3,A
    906            uint8 *pBuf = ZDP_TmpBuf;
   \   000019   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   FE           MOV       R6,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   FF           MOV       R7,A
    907            byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
   \   000021   75..05       MOV       ?V6,#0x5
    908          
    909            *pBuf++ = ZDP_SUCCESS;
   \   000024   8E82         MOV       DPL,R6
   \   000026   8F83         MOV       DPH,R7
   \   000028   7400         MOV       A,#0x0
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   8E82         MOV       DPL,R6
   \   00002D   8F83         MOV       DPH,R7
   \   00002F   A3           INC       DPTR
   \   000030   AE82         MOV       R6,DPL
   \   000032   AF83         MOV       R7,DPH
    910          
    911            *pBuf++ = LO_UINT16( nwkAddr );
   \   000034   E5..         MOV       A,?V0
   \   000036   C0E0         PUSH      A
   \   000038   8E82         MOV       DPL,R6
   \   00003A   8F83         MOV       DPH,R7
   \   00003C   D0E0         POP       A
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   8E82         MOV       DPL,R6
   \   000041   8F83         MOV       DPH,R7
   \   000043   A3           INC       DPTR
   \   000044   AE82         MOV       R6,DPL
   \   000046   AF83         MOV       R7,DPH
    912            *pBuf++ = HI_UINT16( nwkAddr );
   \   000048   A8..         MOV       R0,?V0
   \   00004A   A9..         MOV       R1,?V1
   \   00004C   E4           CLR       A
   \   00004D   C9           XCH       A,R1
   \   00004E   F8           MOV       R0,A
   \   00004F   E8           MOV       A,R0
   \   000050   C0E0         PUSH      A
   \   000052   8E82         MOV       DPL,R6
   \   000054   8F83         MOV       DPH,R7
   \   000056   D0E0         POP       A
   \   000058   F0           MOVX      @DPTR,A
   \   000059   8E82         MOV       DPL,R6
   \   00005B   8F83         MOV       DPH,R7
   \   00005D   A3           INC       DPTR
   \   00005E   AE82         MOV       R6,DPL
   \   000060   AF83         MOV       R7,DPH
    913          
    914            *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
    915                              | (pPowerDesc->PowerMode & 0x0F));
   \   000062   85..82       MOV       DPL,?V2
   \   000065   85..83       MOV       DPH,?V3
   \   000068   E0           MOVX      A,@DPTR
   \   000069   F8           MOV       R0,A
   \   00006A   A3           INC       DPTR
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   F9           MOV       R1,A
   \   00006D   E8           MOV       A,R0
   \   00006E   540F         ANL       A,#0xf
   \   000070   FA           MOV       R2,A
   \   000071   85..82       MOV       DPL,?V2
   \   000074   85..83       MOV       DPH,?V3
   \   000077   E0           MOVX      A,@DPTR
   \   000078   F8           MOV       R0,A
   \   000079   A3           INC       DPTR
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   F9           MOV       R1,A
   \   00007C   E8           MOV       A,R0
   \   00007D   C4           SWAP      A
   \   00007E   540F         ANL       A,#0xf
   \   000080   C4           SWAP      A
   \   000081   54F0         ANL       A,#0xf0
   \   000083   4A           ORL       A,R2
   \   000084   C0E0         PUSH      A
   \   000086   8E82         MOV       DPL,R6
   \   000088   8F83         MOV       DPH,R7
   \   00008A   D0E0         POP       A
   \   00008C   F0           MOVX      @DPTR,A
   \   00008D   8E82         MOV       DPL,R6
   \   00008F   8F83         MOV       DPH,R7
   \   000091   A3           INC       DPTR
   \   000092   AE82         MOV       R6,DPL
   \   000094   AF83         MOV       R7,DPH
    916            *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
    917                              | (pPowerDesc->CurrentPowerSource & 0x0F));
   \   000096   85..82       MOV       DPL,?V2
   \   000099   85..83       MOV       DPH,?V3
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   F8           MOV       R0,A
   \   00009E   A3           INC       DPTR
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   F9           MOV       R1,A
   \   0000A1   E4           CLR       A
   \   0000A2   C9           XCH       A,R1
   \   0000A3   F8           MOV       R0,A
   \   0000A4   E8           MOV       A,R0
   \   0000A5   540F         ANL       A,#0xf
   \   0000A7   F8           MOV       R0,A
   \   0000A8   E9           MOV       A,R1
   \   0000A9   5400         ANL       A,#0x0
   \   0000AB   F9           MOV       R1,A
   \   0000AC   E8           MOV       A,R0
   \   0000AD   F9           MOV       R1,A
   \   0000AE   85..82       MOV       DPL,?V2
   \   0000B1   85..83       MOV       DPH,?V3
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   F5..         MOV       ?V8,A
   \   0000B7   A3           INC       DPTR
   \   0000B8   E0           MOVX      A,@DPTR
   \   0000B9   F5..         MOV       ?V9,A
   \   0000BB   740C         MOV       A,#0xc
   \   0000BD   78..         MOV       R0,#?V8
   \   0000BF   12....       LCALL     ?US_SHR
   \   0000C2   E5..         MOV       A,?V8
   \   0000C4   C4           SWAP      A
   \   0000C5   54F0         ANL       A,#0xf0
   \   0000C7   49           ORL       A,R1
   \   0000C8   C0E0         PUSH      A
   \   0000CA   8E82         MOV       DPL,R6
   \   0000CC   8F83         MOV       DPH,R7
   \   0000CE   D0E0         POP       A
   \   0000D0   F0           MOVX      @DPTR,A
   \   0000D1   8E82         MOV       DPL,R6
   \   0000D3   8F83         MOV       DPH,R7
   \   0000D5   A3           INC       DPTR
   \   0000D6   AE82         MOV       R6,DPL
   \   0000D8   AF83         MOV       R7,DPH
    918          
    919            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Power_Desc_rsp, len );
   \   0000DA                ; Setup parameters for call to function fillAndSend
   \   0000DA   75..03       MOV       ?V8,#0x3
   \   0000DD   75..80       MOV       ?V9,#-0x80
   \   0000E0   78..         MOV       R0,#?V8
   \   0000E2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E5   A9..         MOV       R1,?V6
   \   0000E7   E5..         MOV       A,?V4
   \   0000E9   2402         ADD       A,#0x2
   \   0000EB   FC           MOV       R4,A
   \   0000EC   E4           CLR       A
   \   0000ED   35..         ADDC      A,?V5
   \   0000EF   FD           MOV       R5,A
   \   0000F0   E5..         MOV       A,?V4
   \   0000F2   240F         ADD       A,#0xf
   \   0000F4   FA           MOV       R2,A
   \   0000F5   E4           CLR       A
   \   0000F6   35..         ADDC      A,?V5
   \   0000F8   FB           MOV       R3,A
   \   0000F9   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000FC   7402         MOV       A,#0x2
   \   0000FE   12....       LCALL     ?DEALLOC_XSTACK8
   \   000101   7F0A         MOV       R7,#0xa
   \   000103   02....       LJMP      ?BANKED_LEAVE_XDATA
    920          }
    921          
    922          /*********************************************************************
    923           * @fn          ZDP_SimpleDescMsg
    924           *
    925           * @brief       Builds and sends a Simple Descriptor message, unicast to the
    926           *              specified device.
    927           *
    928           * @param       inMsg - incoming message (request)
    929           * @param       Status - message status (ZDP_SUCCESS or other)
    930           * @param       pSimpleDesc - pointer to the node descriptor
    931           *
    932           * @return      afStatus_t
    933           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    934          afStatus_t ZDP_SimpleDescMsg( zdoIncomingMsg_t *inMsg, byte Status,
   \                     ZDP_SimpleDescMsg:
    935                                        SimpleDescriptionFormat_t *pSimpleDesc )
    936          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   \   000009   89..         MOV       ?V6,R1
   \   00000B   8C..         MOV       ?V0,R4
   \   00000D   8D..         MOV       ?V1,R5
    937            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000012   E0           MOVX      A,@DPTR
   \   000013   FE           MOV       R6,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   FF           MOV       R7,A
    938            uint8 i, len;
    939          
    940            if ( Status == ZDP_SUCCESS && pSimpleDesc )
   \   000017   E5..         MOV       A,?V6
   \   000019   703D         JNZ       ??ZDP_SimpleDescMsg_0
   \   00001B   E5..         MOV       A,?V0
   \   00001D   45..         ORL       A,?V1
   \   00001F   6037         JZ        ??ZDP_SimpleDescMsg_0
    941            {
    942              // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
    943              len = 1 + 2 + 1 + 8;
   \   000021   75..0C       MOV       ?V3,#0xc
    944              len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters) * sizeof ( uint16 );
   \   000024   75F002       MOV       B,#0x2
   \   000027   85..82       MOV       DPL,?V0
   \   00002A   85..83       MOV       DPH,?V1
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F8           MOV       R0,A
   \   000035   7900         MOV       R1,#0x0
   \   000037   85..82       MOV       DPL,?V0
   \   00003A   85..83       MOV       DPH,?V1
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   FA           MOV       R2,A
   \   000048   7B00         MOV       R3,#0x0
   \   00004A   E8           MOV       A,R0
   \   00004B   2A           ADD       A,R2
   \   00004C   F8           MOV       R0,A
   \   00004D   E9           MOV       A,R1
   \   00004E   3B           ADDC      A,R3
   \   00004F   F9           MOV       R1,A
   \   000050   E8           MOV       A,R0
   \   000051   A4           MUL       AB
   \   000052   25..         ADD       A,?V3
   \   000054   F5..         MOV       ?V3,A
   \   000056   8003         SJMP      ??ZDP_SimpleDescMsg_1
    945            }
    946            else
    947            {
    948              len = 1 + 2 + 1; // Status + desc length
   \                     ??ZDP_SimpleDescMsg_0:
   \   000058   75..04       MOV       ?V3,#0x4
    949            }
    950            if ( len >= ZDP_BUF_SZ-1 )
   \                     ??ZDP_SimpleDescMsg_1:
   \   00005B   E5..         MOV       A,?V3
   \   00005D   C3           CLR       C
   \   00005E   944F         SUBB      A,#0x4f
   \   000060   4005         JC        ??ZDP_SimpleDescMsg_2
    951            {
    952              return afStatus_MEM_FAIL;
   \   000062   7910         MOV       R1,#0x10
   \   000064   02....       LJMP      ??ZDP_SimpleDescMsg_3 & 0xFFFF
    953            }
    954          
    955            *pBuf++ = Status;
   \                     ??ZDP_SimpleDescMsg_2:
   \   000067   E5..         MOV       A,?V6
   \   000069   C0E0         PUSH      A
   \   00006B   8E82         MOV       DPL,R6
   \   00006D   8F83         MOV       DPH,R7
   \   00006F   D0E0         POP       A
   \   000071   F0           MOVX      @DPTR,A
   \   000072   8E82         MOV       DPL,R6
   \   000074   8F83         MOV       DPH,R7
   \   000076   A3           INC       DPTR
   \   000077   AE82         MOV       R6,DPL
   \   000079   AF83         MOV       R7,DPH
    956            
    957            //From spec 2.4.3.1.5 The NWKAddrOfInterest field shall match 
    958            //that specified in the original Simple_Desc_req command
    959            *pBuf++ = inMsg->asdu[0];  
   \   00007B   E5..         MOV       A,?V4
   \   00007D   2413         ADD       A,#0x13
   \   00007F   F582         MOV       DPL,A
   \   000081   E4           CLR       A
   \   000082   35..         ADDC      A,?V5
   \   000084   F583         MOV       DPH,A
   \   000086   E0           MOVX      A,@DPTR
   \   000087   F8           MOV       R0,A
   \   000088   A3           INC       DPTR
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   F583         MOV       DPH,A
   \   00008C   8882         MOV       DPL,R0
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   C0E0         PUSH      A
   \   000091   8E82         MOV       DPL,R6
   \   000093   8F83         MOV       DPH,R7
   \   000095   D0E0         POP       A
   \   000097   F0           MOVX      @DPTR,A
   \   000098   8E82         MOV       DPL,R6
   \   00009A   8F83         MOV       DPH,R7
   \   00009C   A3           INC       DPTR
   \   00009D   AE82         MOV       R6,DPL
   \   00009F   AF83         MOV       R7,DPH
    960            *pBuf++ = inMsg->asdu[1];
   \   0000A1   E5..         MOV       A,?V4
   \   0000A3   2413         ADD       A,#0x13
   \   0000A5   F582         MOV       DPL,A
   \   0000A7   E4           CLR       A
   \   0000A8   35..         ADDC      A,?V5
   \   0000AA   F583         MOV       DPH,A
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   F8           MOV       R0,A
   \   0000AE   A3           INC       DPTR
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   F583         MOV       DPH,A
   \   0000B2   8882         MOV       DPL,R0
   \   0000B4   A3           INC       DPTR
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   C0E0         PUSH      A
   \   0000B8   8E82         MOV       DPL,R6
   \   0000BA   8F83         MOV       DPH,R7
   \   0000BC   D0E0         POP       A
   \   0000BE   F0           MOVX      @DPTR,A
   \   0000BF   8E82         MOV       DPL,R6
   \   0000C1   8F83         MOV       DPH,R7
   \   0000C3   A3           INC       DPTR
   \   0000C4   AE82         MOV       R6,DPL
   \   0000C6   AF83         MOV       R7,DPH
    961          
    962            if ( len > 4 )
   \   0000C8   E5..         MOV       A,?V3
   \   0000CA   C3           CLR       C
   \   0000CB   9405         SUBB      A,#0x5
   \   0000CD   5003         JNC       $+5
   \   0000CF   02....       LJMP      ??ZDP_SimpleDescMsg_4 & 0xFFFF
    963            {
    964              *pBuf++ = len - 4;   // Simple descriptor length
   \   0000D2   74FC         MOV       A,#-0x4
   \   0000D4   25..         ADD       A,?V3
   \   0000D6   C0E0         PUSH      A
   \   0000D8   8E82         MOV       DPL,R6
   \   0000DA   8F83         MOV       DPH,R7
   \   0000DC   D0E0         POP       A
   \   0000DE   F0           MOVX      @DPTR,A
   \   0000DF   8E82         MOV       DPL,R6
   \   0000E1   8F83         MOV       DPH,R7
   \   0000E3   A3           INC       DPTR
   \   0000E4   AE82         MOV       R6,DPL
   \   0000E6   AF83         MOV       R7,DPH
    965          
    966              *pBuf++ = pSimpleDesc->EndPoint;
   \   0000E8   85..82       MOV       DPL,?V0
   \   0000EB   85..83       MOV       DPH,?V1
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   C0E0         PUSH      A
   \   0000F1   8E82         MOV       DPL,R6
   \   0000F3   8F83         MOV       DPH,R7
   \   0000F5   D0E0         POP       A
   \   0000F7   F0           MOVX      @DPTR,A
   \   0000F8   8E82         MOV       DPL,R6
   \   0000FA   8F83         MOV       DPH,R7
   \   0000FC   A3           INC       DPTR
   \   0000FD   AE82         MOV       R6,DPL
   \   0000FF   AF83         MOV       R7,DPH
    967              *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
   \   000101   85..82       MOV       DPL,?V0
   \   000104   85..83       MOV       DPH,?V1
   \   000107   A3           INC       DPTR
   \   000108   E0           MOVX      A,@DPTR
   \   000109   F8           MOV       R0,A
   \   00010A   A3           INC       DPTR
   \   00010B   E0           MOVX      A,@DPTR
   \   00010C   F9           MOV       R1,A
   \   00010D   E8           MOV       A,R0
   \   00010E   C0E0         PUSH      A
   \   000110   8E82         MOV       DPL,R6
   \   000112   8F83         MOV       DPH,R7
   \   000114   D0E0         POP       A
   \   000116   F0           MOVX      @DPTR,A
   \   000117   8E82         MOV       DPL,R6
   \   000119   8F83         MOV       DPH,R7
   \   00011B   A3           INC       DPTR
   \   00011C   AE82         MOV       R6,DPL
   \   00011E   AF83         MOV       R7,DPH
    968              *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
   \   000120   85..82       MOV       DPL,?V0
   \   000123   85..83       MOV       DPH,?V1
   \   000126   A3           INC       DPTR
   \   000127   E0           MOVX      A,@DPTR
   \   000128   F8           MOV       R0,A
   \   000129   A3           INC       DPTR
   \   00012A   E0           MOVX      A,@DPTR
   \   00012B   F9           MOV       R1,A
   \   00012C   E4           CLR       A
   \   00012D   C9           XCH       A,R1
   \   00012E   F8           MOV       R0,A
   \   00012F   E8           MOV       A,R0
   \   000130   C0E0         PUSH      A
   \   000132   8E82         MOV       DPL,R6
   \   000134   8F83         MOV       DPH,R7
   \   000136   D0E0         POP       A
   \   000138   F0           MOVX      @DPTR,A
   \   000139   8E82         MOV       DPL,R6
   \   00013B   8F83         MOV       DPH,R7
   \   00013D   A3           INC       DPTR
   \   00013E   AE82         MOV       R6,DPL
   \   000140   AF83         MOV       R7,DPH
    969              *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
   \   000142   85..82       MOV       DPL,?V0
   \   000145   85..83       MOV       DPH,?V1
   \   000148   A3           INC       DPTR
   \   000149   A3           INC       DPTR
   \   00014A   A3           INC       DPTR
   \   00014B   E0           MOVX      A,@DPTR
   \   00014C   F8           MOV       R0,A
   \   00014D   A3           INC       DPTR
   \   00014E   E0           MOVX      A,@DPTR
   \   00014F   F9           MOV       R1,A
   \   000150   E8           MOV       A,R0
   \   000151   C0E0         PUSH      A
   \   000153   8E82         MOV       DPL,R6
   \   000155   8F83         MOV       DPH,R7
   \   000157   D0E0         POP       A
   \   000159   F0           MOVX      @DPTR,A
   \   00015A   8E82         MOV       DPL,R6
   \   00015C   8F83         MOV       DPH,R7
   \   00015E   A3           INC       DPTR
   \   00015F   AE82         MOV       R6,DPL
   \   000161   AF83         MOV       R7,DPH
    970              *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
   \   000163   85..82       MOV       DPL,?V0
   \   000166   85..83       MOV       DPH,?V1
   \   000169   A3           INC       DPTR
   \   00016A   A3           INC       DPTR
   \   00016B   A3           INC       DPTR
   \   00016C   E0           MOVX      A,@DPTR
   \   00016D   F8           MOV       R0,A
   \   00016E   A3           INC       DPTR
   \   00016F   E0           MOVX      A,@DPTR
   \   000170   F9           MOV       R1,A
   \   000171   E4           CLR       A
   \   000172   C9           XCH       A,R1
   \   000173   F8           MOV       R0,A
   \   000174   E8           MOV       A,R0
   \   000175   C0E0         PUSH      A
   \   000177   8E82         MOV       DPL,R6
   \   000179   8F83         MOV       DPH,R7
   \   00017B   D0E0         POP       A
   \   00017D   F0           MOVX      @DPTR,A
   \   00017E   8E82         MOV       DPL,R6
   \   000180   8F83         MOV       DPH,R7
   \   000182   A3           INC       DPTR
   \   000183   AE82         MOV       R6,DPL
   \   000185   AF83         MOV       R7,DPH
    971          
    972              *pBuf++ = (byte)(pSimpleDesc->AppDevVer & 0x0F);
   \   000187   85..82       MOV       DPL,?V0
   \   00018A   85..83       MOV       DPH,?V1
   \   00018D   A3           INC       DPTR
   \   00018E   A3           INC       DPTR
   \   00018F   A3           INC       DPTR
   \   000190   A3           INC       DPTR
   \   000191   A3           INC       DPTR
   \   000192   E0           MOVX      A,@DPTR
   \   000193   540F         ANL       A,#0xf
   \   000195   C0E0         PUSH      A
   \   000197   8E82         MOV       DPL,R6
   \   000199   8F83         MOV       DPH,R7
   \   00019B   D0E0         POP       A
   \   00019D   F0           MOVX      @DPTR,A
   \   00019E   8E82         MOV       DPL,R6
   \   0001A0   8F83         MOV       DPH,R7
   \   0001A2   A3           INC       DPTR
   \   0001A3   AE82         MOV       R6,DPL
   \   0001A5   AF83         MOV       R7,DPH
    973          
    974              *pBuf++ = pSimpleDesc->AppNumInClusters;
   \   0001A7   85..82       MOV       DPL,?V0
   \   0001AA   85..83       MOV       DPH,?V1
   \   0001AD   A3           INC       DPTR
   \   0001AE   A3           INC       DPTR
   \   0001AF   A3           INC       DPTR
   \   0001B0   A3           INC       DPTR
   \   0001B1   A3           INC       DPTR
   \   0001B2   A3           INC       DPTR
   \   0001B3   E0           MOVX      A,@DPTR
   \   0001B4   C0E0         PUSH      A
   \   0001B6   8E82         MOV       DPL,R6
   \   0001B8   8F83         MOV       DPH,R7
   \   0001BA   D0E0         POP       A
   \   0001BC   F0           MOVX      @DPTR,A
   \   0001BD   8E82         MOV       DPL,R6
   \   0001BF   8F83         MOV       DPH,R7
   \   0001C1   A3           INC       DPTR
   \   0001C2   AE82         MOV       R6,DPL
   \   0001C4   AF83         MOV       R7,DPH
    975              if ( pSimpleDesc->AppNumInClusters )
   \   0001C6   85..82       MOV       DPL,?V0
   \   0001C9   85..83       MOV       DPH,?V1
   \   0001CC   A3           INC       DPTR
   \   0001CD   A3           INC       DPTR
   \   0001CE   A3           INC       DPTR
   \   0001CF   A3           INC       DPTR
   \   0001D0   A3           INC       DPTR
   \   0001D1   A3           INC       DPTR
   \   0001D2   E0           MOVX      A,@DPTR
   \   0001D3   7003         JNZ       $+5
   \   0001D5   02....       LJMP      ??ZDP_SimpleDescMsg_5 & 0xFFFF
    976              {
    977                for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
   \   0001D8   75..00       MOV       ?V2,#0x0
   \                     ??ZDP_SimpleDescMsg_6:
   \   0001DB   85..82       MOV       DPL,?V0
   \   0001DE   85..83       MOV       DPH,?V1
   \   0001E1   A3           INC       DPTR
   \   0001E2   A3           INC       DPTR
   \   0001E3   A3           INC       DPTR
   \   0001E4   A3           INC       DPTR
   \   0001E5   A3           INC       DPTR
   \   0001E6   A3           INC       DPTR
   \   0001E7   E0           MOVX      A,@DPTR
   \   0001E8   F8           MOV       R0,A
   \   0001E9   E5..         MOV       A,?V2
   \   0001EB   C3           CLR       C
   \   0001EC   98           SUBB      A,R0
   \   0001ED   4003         JC        $+5
   \   0001EF   02....       LJMP      ??ZDP_SimpleDescMsg_5 & 0xFFFF
    978                {
    979                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \   0001F2   E5..         MOV       A,?V2
   \   0001F4   F8           MOV       R0,A
   \   0001F5   7900         MOV       R1,#0x0
   \   0001F7   E8           MOV       A,R0
   \   0001F8   75F002       MOV       B,#0x2
   \   0001FB   A4           MUL       AB
   \   0001FC   C8           XCH       A,R0
   \   0001FD   AAF0         MOV       R2,B
   \   0001FF   75F000       MOV       B,#0x0
   \   000202   A4           MUL       AB
   \   000203   2A           ADD       A,R2
   \   000204   FA           MOV       R2,A
   \   000205   75F002       MOV       B,#0x2
   \   000208   E9           MOV       A,R1
   \   000209   A4           MUL       AB
   \   00020A   2A           ADD       A,R2
   \   00020B   F9           MOV       R1,A
   \   00020C   85..82       MOV       DPL,?V0
   \   00020F   85..83       MOV       DPH,?V1
   \   000212   A3           INC       DPTR
   \   000213   A3           INC       DPTR
   \   000214   A3           INC       DPTR
   \   000215   A3           INC       DPTR
   \   000216   A3           INC       DPTR
   \   000217   A3           INC       DPTR
   \   000218   A3           INC       DPTR
   \   000219   E0           MOVX      A,@DPTR
   \   00021A   28           ADD       A,R0
   \   00021B   FA           MOV       R2,A
   \   00021C   A3           INC       DPTR
   \   00021D   E0           MOVX      A,@DPTR
   \   00021E   39           ADDC      A,R1
   \   00021F   8A82         MOV       DPL,R2
   \   000221   F583         MOV       DPH,A
   \   000223   E0           MOVX      A,@DPTR
   \   000224   F8           MOV       R0,A
   \   000225   A3           INC       DPTR
   \   000226   E0           MOVX      A,@DPTR
   \   000227   F9           MOV       R1,A
   \   000228   E8           MOV       A,R0
   \   000229   C0E0         PUSH      A
   \   00022B   8E82         MOV       DPL,R6
   \   00022D   8F83         MOV       DPH,R7
   \   00022F   D0E0         POP       A
   \   000231   F0           MOVX      @DPTR,A
   \   000232   8E82         MOV       DPL,R6
   \   000234   8F83         MOV       DPH,R7
   \   000236   A3           INC       DPTR
   \   000237   AE82         MOV       R6,DPL
   \   000239   AF83         MOV       R7,DPH
    980                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \   00023B   E5..         MOV       A,?V2
   \   00023D   F8           MOV       R0,A
   \   00023E   7900         MOV       R1,#0x0
   \   000240   E8           MOV       A,R0
   \   000241   75F002       MOV       B,#0x2
   \   000244   A4           MUL       AB
   \   000245   C8           XCH       A,R0
   \   000246   AAF0         MOV       R2,B
   \   000248   75F000       MOV       B,#0x0
   \   00024B   A4           MUL       AB
   \   00024C   2A           ADD       A,R2
   \   00024D   FA           MOV       R2,A
   \   00024E   75F002       MOV       B,#0x2
   \   000251   E9           MOV       A,R1
   \   000252   A4           MUL       AB
   \   000253   2A           ADD       A,R2
   \   000254   F9           MOV       R1,A
   \   000255   85..82       MOV       DPL,?V0
   \   000258   85..83       MOV       DPH,?V1
   \   00025B   A3           INC       DPTR
   \   00025C   A3           INC       DPTR
   \   00025D   A3           INC       DPTR
   \   00025E   A3           INC       DPTR
   \   00025F   A3           INC       DPTR
   \   000260   A3           INC       DPTR
   \   000261   A3           INC       DPTR
   \   000262   E0           MOVX      A,@DPTR
   \   000263   28           ADD       A,R0
   \   000264   FA           MOV       R2,A
   \   000265   A3           INC       DPTR
   \   000266   E0           MOVX      A,@DPTR
   \   000267   39           ADDC      A,R1
   \   000268   8A82         MOV       DPL,R2
   \   00026A   F583         MOV       DPH,A
   \   00026C   E0           MOVX      A,@DPTR
   \   00026D   F8           MOV       R0,A
   \   00026E   A3           INC       DPTR
   \   00026F   E0           MOVX      A,@DPTR
   \   000270   F9           MOV       R1,A
   \   000271   E4           CLR       A
   \   000272   C9           XCH       A,R1
   \   000273   F8           MOV       R0,A
   \   000274   E8           MOV       A,R0
   \   000275   C0E0         PUSH      A
   \   000277   8E82         MOV       DPL,R6
   \   000279   8F83         MOV       DPH,R7
   \   00027B   D0E0         POP       A
   \   00027D   F0           MOVX      @DPTR,A
   \   00027E   8E82         MOV       DPL,R6
   \   000280   8F83         MOV       DPH,R7
   \   000282   A3           INC       DPTR
   \   000283   AE82         MOV       R6,DPL
   \   000285   AF83         MOV       R7,DPH
    981                }
   \   000287   05..         INC       ?V2
   \   000289   02....       LJMP      ??ZDP_SimpleDescMsg_6 & 0xFFFF
    982              }
    983          
    984              *pBuf++ = pSimpleDesc->AppNumOutClusters;
   \                     ??ZDP_SimpleDescMsg_5:
   \   00028C   85..82       MOV       DPL,?V0
   \   00028F   85..83       MOV       DPH,?V1
   \   000292   A3           INC       DPTR
   \   000293   A3           INC       DPTR
   \   000294   A3           INC       DPTR
   \   000295   A3           INC       DPTR
   \   000296   A3           INC       DPTR
   \   000297   A3           INC       DPTR
   \   000298   A3           INC       DPTR
   \   000299   A3           INC       DPTR
   \   00029A   A3           INC       DPTR
   \   00029B   E0           MOVX      A,@DPTR
   \   00029C   C0E0         PUSH      A
   \   00029E   8E82         MOV       DPL,R6
   \   0002A0   8F83         MOV       DPH,R7
   \   0002A2   D0E0         POP       A
   \   0002A4   F0           MOVX      @DPTR,A
   \   0002A5   8E82         MOV       DPL,R6
   \   0002A7   8F83         MOV       DPH,R7
   \   0002A9   A3           INC       DPTR
   \   0002AA   AE82         MOV       R6,DPL
   \   0002AC   AF83         MOV       R7,DPH
    985              if ( pSimpleDesc->AppNumOutClusters )
   \   0002AE   85..82       MOV       DPL,?V0
   \   0002B1   85..83       MOV       DPH,?V1
   \   0002B4   A3           INC       DPTR
   \   0002B5   A3           INC       DPTR
   \   0002B6   A3           INC       DPTR
   \   0002B7   A3           INC       DPTR
   \   0002B8   A3           INC       DPTR
   \   0002B9   A3           INC       DPTR
   \   0002BA   A3           INC       DPTR
   \   0002BB   A3           INC       DPTR
   \   0002BC   A3           INC       DPTR
   \   0002BD   E0           MOVX      A,@DPTR
   \   0002BE   7003         JNZ       $+5
   \   0002C0   02....       LJMP      ??ZDP_SimpleDescMsg_7 & 0xFFFF
    986              {
    987                for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
   \   0002C3   75..00       MOV       ?V2,#0x0
   \                     ??ZDP_SimpleDescMsg_8:
   \   0002C6   85..82       MOV       DPL,?V0
   \   0002C9   85..83       MOV       DPH,?V1
   \   0002CC   A3           INC       DPTR
   \   0002CD   A3           INC       DPTR
   \   0002CE   A3           INC       DPTR
   \   0002CF   A3           INC       DPTR
   \   0002D0   A3           INC       DPTR
   \   0002D1   A3           INC       DPTR
   \   0002D2   A3           INC       DPTR
   \   0002D3   A3           INC       DPTR
   \   0002D4   A3           INC       DPTR
   \   0002D5   E0           MOVX      A,@DPTR
   \   0002D6   F8           MOV       R0,A
   \   0002D7   E5..         MOV       A,?V2
   \   0002D9   C3           CLR       C
   \   0002DA   98           SUBB      A,R0
   \   0002DB   4003         JC        $+5
   \   0002DD   02....       LJMP      ??ZDP_SimpleDescMsg_7 & 0xFFFF
    988                {
    989                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   0002E0   E5..         MOV       A,?V2
   \   0002E2   F8           MOV       R0,A
   \   0002E3   7900         MOV       R1,#0x0
   \   0002E5   E8           MOV       A,R0
   \   0002E6   75F002       MOV       B,#0x2
   \   0002E9   A4           MUL       AB
   \   0002EA   C8           XCH       A,R0
   \   0002EB   AAF0         MOV       R2,B
   \   0002ED   75F000       MOV       B,#0x0
   \   0002F0   A4           MUL       AB
   \   0002F1   2A           ADD       A,R2
   \   0002F2   FA           MOV       R2,A
   \   0002F3   75F002       MOV       B,#0x2
   \   0002F6   E9           MOV       A,R1
   \   0002F7   A4           MUL       AB
   \   0002F8   2A           ADD       A,R2
   \   0002F9   F9           MOV       R1,A
   \   0002FA   85..82       MOV       DPL,?V0
   \   0002FD   85..83       MOV       DPH,?V1
   \   000300   A3           INC       DPTR
   \   000301   A3           INC       DPTR
   \   000302   A3           INC       DPTR
   \   000303   A3           INC       DPTR
   \   000304   A3           INC       DPTR
   \   000305   A3           INC       DPTR
   \   000306   A3           INC       DPTR
   \   000307   A3           INC       DPTR
   \   000308   A3           INC       DPTR
   \   000309   A3           INC       DPTR
   \   00030A   E0           MOVX      A,@DPTR
   \   00030B   28           ADD       A,R0
   \   00030C   FA           MOV       R2,A
   \   00030D   A3           INC       DPTR
   \   00030E   E0           MOVX      A,@DPTR
   \   00030F   39           ADDC      A,R1
   \   000310   8A82         MOV       DPL,R2
   \   000312   F583         MOV       DPH,A
   \   000314   E0           MOVX      A,@DPTR
   \   000315   F8           MOV       R0,A
   \   000316   A3           INC       DPTR
   \   000317   E0           MOVX      A,@DPTR
   \   000318   F9           MOV       R1,A
   \   000319   E8           MOV       A,R0
   \   00031A   C0E0         PUSH      A
   \   00031C   8E82         MOV       DPL,R6
   \   00031E   8F83         MOV       DPH,R7
   \   000320   D0E0         POP       A
   \   000322   F0           MOVX      @DPTR,A
   \   000323   8E82         MOV       DPL,R6
   \   000325   8F83         MOV       DPH,R7
   \   000327   A3           INC       DPTR
   \   000328   AE82         MOV       R6,DPL
   \   00032A   AF83         MOV       R7,DPH
    990                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   00032C   E5..         MOV       A,?V2
   \   00032E   F8           MOV       R0,A
   \   00032F   7900         MOV       R1,#0x0
   \   000331   E8           MOV       A,R0
   \   000332   75F002       MOV       B,#0x2
   \   000335   A4           MUL       AB
   \   000336   C8           XCH       A,R0
   \   000337   AAF0         MOV       R2,B
   \   000339   75F000       MOV       B,#0x0
   \   00033C   A4           MUL       AB
   \   00033D   2A           ADD       A,R2
   \   00033E   FA           MOV       R2,A
   \   00033F   75F002       MOV       B,#0x2
   \   000342   E9           MOV       A,R1
   \   000343   A4           MUL       AB
   \   000344   2A           ADD       A,R2
   \   000345   F9           MOV       R1,A
   \   000346   85..82       MOV       DPL,?V0
   \   000349   85..83       MOV       DPH,?V1
   \   00034C   A3           INC       DPTR
   \   00034D   A3           INC       DPTR
   \   00034E   A3           INC       DPTR
   \   00034F   A3           INC       DPTR
   \   000350   A3           INC       DPTR
   \   000351   A3           INC       DPTR
   \   000352   A3           INC       DPTR
   \   000353   A3           INC       DPTR
   \   000354   A3           INC       DPTR
   \   000355   A3           INC       DPTR
   \   000356   E0           MOVX      A,@DPTR
   \   000357   28           ADD       A,R0
   \   000358   FA           MOV       R2,A
   \   000359   A3           INC       DPTR
   \   00035A   E0           MOVX      A,@DPTR
   \   00035B   39           ADDC      A,R1
   \   00035C   8A82         MOV       DPL,R2
   \   00035E   F583         MOV       DPH,A
   \   000360   E0           MOVX      A,@DPTR
   \   000361   F8           MOV       R0,A
   \   000362   A3           INC       DPTR
   \   000363   E0           MOVX      A,@DPTR
   \   000364   F9           MOV       R1,A
   \   000365   E4           CLR       A
   \   000366   C9           XCH       A,R1
   \   000367   F8           MOV       R0,A
   \   000368   E8           MOV       A,R0
   \   000369   C0E0         PUSH      A
   \   00036B   8E82         MOV       DPL,R6
   \   00036D   8F83         MOV       DPH,R7
   \   00036F   D0E0         POP       A
   \   000371   F0           MOVX      @DPTR,A
   \   000372   8E82         MOV       DPL,R6
   \   000374   8F83         MOV       DPH,R7
   \   000376   A3           INC       DPTR
   \   000377   AE82         MOV       R6,DPL
   \   000379   AF83         MOV       R7,DPH
    991                }
   \   00037B   05..         INC       ?V2
   \   00037D   02....       LJMP      ??ZDP_SimpleDescMsg_8 & 0xFFFF
    992              }
    993            }
    994          
    995            else
    996            {
    997              *pBuf = 0; // Description Length = 0;
   \                     ??ZDP_SimpleDescMsg_4:
   \   000380   8E82         MOV       DPL,R6
   \   000382   8F83         MOV       DPH,R7
   \   000384   7400         MOV       A,#0x0
   \   000386   F0           MOVX      @DPTR,A
    998            }
    999          
   1000            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Simple_Desc_rsp, len );
   \                     ??ZDP_SimpleDescMsg_7:
   \   000387                ; Setup parameters for call to function fillAndSend
   \   000387   75..04       MOV       ?V8,#0x4
   \   00038A   75..80       MOV       ?V9,#-0x80
   \   00038D   78..         MOV       R0,#?V8
   \   00038F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000392   A9..         MOV       R1,?V3
   \   000394   E5..         MOV       A,?V4
   \   000396   2402         ADD       A,#0x2
   \   000398   FC           MOV       R4,A
   \   000399   E4           CLR       A
   \   00039A   35..         ADDC      A,?V5
   \   00039C   FD           MOV       R5,A
   \   00039D   E5..         MOV       A,?V4
   \   00039F   240F         ADD       A,#0xf
   \   0003A1   FA           MOV       R2,A
   \   0003A2   E4           CLR       A
   \   0003A3   35..         ADDC      A,?V5
   \   0003A5   FB           MOV       R3,A
   \   0003A6   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0003A9   7402         MOV       A,#0x2
   \   0003AB   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDP_SimpleDescMsg_3:
   \   0003AE   7F0A         MOV       R7,#0xa
   \   0003B0   02....       LJMP      ?BANKED_LEAVE_XDATA
   1001          }
   1002          
   1003          /*********************************************************************
   1004           * @fn          ZDP_EPRsp
   1005           *
   1006           * @brief       This builds and send an endpoint list. Used in
   1007           *              Active_EP_rsp and Match_Desc_Rsp
   1008           *              message.  This function sends unicast message to the
   1009           *              requesting device.
   1010           *
   1011           * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
   1012           * @param       dstAddr - destination address
   1013           * @param       Status - message status (ZDP_SUCCESS or other)
   1014           * @param       nwkAddr - Device's short address that this response describes
   1015           * @param       Count - number of endpoint/interfaces in list
   1016           * @param       pEPIntfList - Array of Endpoint/Interfaces
   1017           * @param       SecurityEnable - Security Options
   1018           *
   1019           * @return      afStatus_t
   1020           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1021          afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_EPRsp:
   1022                                  byte Status, uint16 nwkAddr, byte Count,
   1023                                  uint8 *pEPList,
   1024                                  byte SecurityEnable )
   1025          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   C0E0         PUSH      A
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   D0E0         POP       A
   \   000015   F0           MOVX      @DPTR,A
   \   000016   8A..         MOV       ?V2,R2
   \   000018   8B..         MOV       ?V3,R3
   \   00001A   8C..         MOV       ?V14,R4
   \   00001C   8D..         MOV       ?V15,R5
   \   00001E   7419         MOV       A,#0x19
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F5..         MOV       ?V10,A
   \   000026   741A         MOV       A,#0x1a
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F5..         MOV       ?V0,A
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F5..         MOV       ?V1,A
   \   000032   741C         MOV       A,#0x1c
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F5..         MOV       ?V7,A
   \   00003A   741D         MOV       A,#0x1d
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F5..         MOV       ?V12,A
   \   000042   A3           INC       DPTR
   \   000043   E0           MOVX      A,@DPTR
   \   000044   F5..         MOV       ?V13,A
   1026            uint8 *pBuf = ZDP_TmpBuf;
   \   000046   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   FE           MOV       R6,A
   \   00004B   A3           INC       DPTR
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   FF           MOV       R7,A
   1027            byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
   \   00004E   75..04       MOV       ?V9,#0x4
   1028            byte txOptions;
   1029          
   1030            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1031          
   1032            if ( MsgType == Match_Desc_rsp )
   \   000051   7406         MOV       A,#0x6
   \   000053   65..         XRL       A,?V2
   \   000055   7004         JNZ       ??ZDP_EPRsp_0
   \   000057   7480         MOV       A,#-0x80
   \   000059   65..         XRL       A,?V3
   \                     ??ZDP_EPRsp_0:
   \   00005B   7005         JNZ       ??ZDP_EPRsp_1
   1033              txOptions = AF_MSG_ACK_REQUEST;
   \   00005D   75..10       MOV       ?V8,#0x10
   \   000060   8003         SJMP      ??ZDP_EPRsp_2
   1034            else
   1035              txOptions = 0;
   \                     ??ZDP_EPRsp_1:
   \   000062   75..00       MOV       ?V8,#0x0
   1036          
   1037              *pBuf++ = Status;
   \                     ??ZDP_EPRsp_2:
   \   000065   E5..         MOV       A,?V10
   \   000067   C0E0         PUSH      A
   \   000069   8E82         MOV       DPL,R6
   \   00006B   8F83         MOV       DPH,R7
   \   00006D   D0E0         POP       A
   \   00006F   F0           MOVX      @DPTR,A
   \   000070   8E82         MOV       DPL,R6
   \   000072   8F83         MOV       DPH,R7
   \   000074   A3           INC       DPTR
   \   000075   AE82         MOV       R6,DPL
   \   000077   AF83         MOV       R7,DPH
   1038            *pBuf++ = LO_UINT16( nwkAddr );
   \   000079   E5..         MOV       A,?V0
   \   00007B   C0E0         PUSH      A
   \   00007D   8E82         MOV       DPL,R6
   \   00007F   8F83         MOV       DPH,R7
   \   000081   D0E0         POP       A
   \   000083   F0           MOVX      @DPTR,A
   \   000084   8E82         MOV       DPL,R6
   \   000086   8F83         MOV       DPH,R7
   \   000088   A3           INC       DPTR
   \   000089   AE82         MOV       R6,DPL
   \   00008B   AF83         MOV       R7,DPH
   1039            *pBuf++ = HI_UINT16( nwkAddr );
   \   00008D   A8..         MOV       R0,?V0
   \   00008F   A9..         MOV       R1,?V1
   \   000091   E4           CLR       A
   \   000092   C9           XCH       A,R1
   \   000093   F8           MOV       R0,A
   \   000094   E8           MOV       A,R0
   \   000095   C0E0         PUSH      A
   \   000097   8E82         MOV       DPL,R6
   \   000099   8F83         MOV       DPH,R7
   \   00009B   D0E0         POP       A
   \   00009D   F0           MOVX      @DPTR,A
   \   00009E   8E82         MOV       DPL,R6
   \   0000A0   8F83         MOV       DPH,R7
   \   0000A2   A3           INC       DPTR
   \   0000A3   AE82         MOV       R6,DPL
   \   0000A5   AF83         MOV       R7,DPH
   1040          
   1041            *pBuf++ = Count;   // Endpoint/Interface count
   \   0000A7   E5..         MOV       A,?V7
   \   0000A9   C0E0         PUSH      A
   \   0000AB   8E82         MOV       DPL,R6
   \   0000AD   8F83         MOV       DPH,R7
   \   0000AF   D0E0         POP       A
   \   0000B1   F0           MOVX      @DPTR,A
   \   0000B2   8E82         MOV       DPL,R6
   \   0000B4   8F83         MOV       DPH,R7
   \   0000B6   A3           INC       DPTR
   \   0000B7   AE82         MOV       R6,DPL
   \   0000B9   AF83         MOV       R7,DPH
   1042          
   1043            if ( Count )
   \   0000BB   E5..         MOV       A,?V7
   \   0000BD   6025         JZ        ??ZDP_EPRsp_3
   1044            {
   1045              len += Count;
   \   0000BF   E5..         MOV       A,?V7
   \   0000C1   25..         ADD       A,?V9
   \   0000C3   F5..         MOV       ?V9,A
   1046              osal_memcpy( pBuf, pEPList, Count );
   \   0000C5                ; Setup parameters for call to function osal_memcpy
   \   0000C5   85....       MOV       ?V4,?V12
   \   0000C8   85....       MOV       ?V5,?V13
   \   0000CB   75..00       MOV       ?V6,#0x0
   \   0000CE   78..         MOV       R0,#?V4
   \   0000D0   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000D3   E5..         MOV       A,?V7
   \   0000D5   FC           MOV       R4,A
   \   0000D6   7D00         MOV       R5,#0x0
   \   0000D8   EE           MOV       A,R6
   \   0000D9   FA           MOV       R2,A
   \   0000DA   EF           MOV       A,R7
   \   0000DB   FB           MOV       R3,A
   \   0000DC   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000DF   7403         MOV       A,#0x3
   \   0000E1   12....       LCALL     ?DEALLOC_XSTACK8
   1047            }
   1048          
   1049            FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
   \                     ??ZDP_EPRsp_3:
   \   0000E4   E5..         MOV       A,?V8
   \   0000E6   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000E9   F0           MOVX      @DPTR,A
   \   0000EA                ; Setup parameters for call to function fillAndSend
   \   0000EA   78..         MOV       R0,#?V2
   \   0000EC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000EF   A9..         MOV       R1,?V9
   \   0000F1   AC..         MOV       R4,?V14
   \   0000F3   AD..         MOV       R5,?V15
   \   0000F5   7402         MOV       A,#0x2
   \   0000F7   12....       LCALL     ?XSTACK_DISP101_8
   \   0000FA   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000FD   7402         MOV       A,#0x2
   \   0000FF   12....       LCALL     ?DEALLOC_XSTACK8
   \   000102   E9           MOV       A,R1
   \   000103   F5..         MOV       ?V4,A
   \   000105   90....       MOV       DPTR,#ZDP_TxOptions
   \   000108   7400         MOV       A,#0x0
   \   00010A   F0           MOVX      @DPTR,A
   \   00010B   A9..         MOV       R1,?V4
   \   00010D   7401         MOV       A,#0x1
   \   00010F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000112   7F10         MOV       R7,#0x10
   \   000114   02....       LJMP      ?BANKED_LEAVE_XDATA
   1050          }
   1051          
   1052          /*********************************************************************
   1053           * @fn          ZDP_UserDescRsp
   1054           *
   1055           * @brief       Build and send the User Decriptor Response.
   1056           *
   1057           *
   1058           * @param       dstAddr - destination address
   1059           * @param       nwkAddrOfInterest -
   1060           * @param       userDesc -
   1061           * @param       SecurityEnable - Security Options
   1062           *
   1063           * @return      ZStatus_t
   1064           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1065          ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_UserDescRsp:
   1066                          uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
   1067                          byte SecurityEnable )
   1068          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   C0E0         PUSH      A
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   D0E0         POP       A
   \   000015   F0           MOVX      @DPTR,A
   \   000016   8A..         MOV       ?V10,R2
   \   000018   8B..         MOV       ?V11,R3
   \   00001A   8C..         MOV       ?V0,R4
   \   00001C   8D..         MOV       ?V1,R5
   \   00001E   7415         MOV       A,#0x15
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F5..         MOV       ?V8,A
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F5..         MOV       ?V9,A
   1069            uint8 *pBuf = ZDP_TmpBuf;
   \   00002A   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   FE           MOV       R6,A
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   FF           MOV       R7,A
   1070            byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
   \   000032   75..04       MOV       ?V2,#0x4
   1071          
   1072            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1073          
   1074            len += userDesc->len;
   \   000035   85..82       MOV       DPL,?V8
   \   000038   85..83       MOV       DPH,?V9
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   25..         ADD       A,?V2
   \   00003E   F5..         MOV       ?V2,A
   1075          
   1076            *pBuf++ = ZSUCCESS;
   \   000040   8E82         MOV       DPL,R6
   \   000042   8F83         MOV       DPH,R7
   \   000044   7400         MOV       A,#0x0
   \   000046   F0           MOVX      @DPTR,A
   \   000047   8E82         MOV       DPL,R6
   \   000049   8F83         MOV       DPH,R7
   \   00004B   A3           INC       DPTR
   \   00004C   AE82         MOV       R6,DPL
   \   00004E   AF83         MOV       R7,DPH
   1077          
   1078            *pBuf++ = LO_UINT16( nwkAddrOfInterest );
   \   000050   E5..         MOV       A,?V0
   \   000052   C0E0         PUSH      A
   \   000054   8E82         MOV       DPL,R6
   \   000056   8F83         MOV       DPH,R7
   \   000058   D0E0         POP       A
   \   00005A   F0           MOVX      @DPTR,A
   \   00005B   8E82         MOV       DPL,R6
   \   00005D   8F83         MOV       DPH,R7
   \   00005F   A3           INC       DPTR
   \   000060   AE82         MOV       R6,DPL
   \   000062   AF83         MOV       R7,DPH
   1079            *pBuf++ = HI_UINT16( nwkAddrOfInterest );
   \   000064   A8..         MOV       R0,?V0
   \   000066   A9..         MOV       R1,?V1
   \   000068   E4           CLR       A
   \   000069   C9           XCH       A,R1
   \   00006A   F8           MOV       R0,A
   \   00006B   E8           MOV       A,R0
   \   00006C   C0E0         PUSH      A
   \   00006E   8E82         MOV       DPL,R6
   \   000070   8F83         MOV       DPH,R7
   \   000072   D0E0         POP       A
   \   000074   F0           MOVX      @DPTR,A
   \   000075   8E82         MOV       DPL,R6
   \   000077   8F83         MOV       DPH,R7
   \   000079   A3           INC       DPTR
   \   00007A   AE82         MOV       R6,DPL
   \   00007C   AF83         MOV       R7,DPH
   1080          
   1081            *pBuf++ = userDesc->len;
   \   00007E   85..82       MOV       DPL,?V8
   \   000081   85..83       MOV       DPH,?V9
   \   000084   E0           MOVX      A,@DPTR
   \   000085   C0E0         PUSH      A
   \   000087   8E82         MOV       DPL,R6
   \   000089   8F83         MOV       DPH,R7
   \   00008B   D0E0         POP       A
   \   00008D   F0           MOVX      @DPTR,A
   \   00008E   8E82         MOV       DPL,R6
   \   000090   8F83         MOV       DPH,R7
   \   000092   A3           INC       DPTR
   \   000093   AE82         MOV       R6,DPL
   \   000095   AF83         MOV       R7,DPH
   1082            osal_memcpy( pBuf, userDesc->desc, userDesc->len );
   \   000097                ; Setup parameters for call to function osal_memcpy
   \   000097   85..82       MOV       DPL,?V8
   \   00009A   85..83       MOV       DPH,?V9
   \   00009D   A3           INC       DPTR
   \   00009E   A982         MOV       R1,DPL
   \   0000A0   AA83         MOV       R2,DPH
   \   0000A2   7B00         MOV       R3,#0x0
   \   0000A4   89..         MOV       ?V4,R1
   \   0000A6   8A..         MOV       ?V5,R2
   \   0000A8   8B..         MOV       ?V6,R3
   \   0000AA   78..         MOV       R0,#?V4
   \   0000AC   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000AF   85..82       MOV       DPL,?V8
   \   0000B2   85..83       MOV       DPH,?V9
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   FC           MOV       R4,A
   \   0000B7   7D00         MOV       R5,#0x0
   \   0000B9   EE           MOV       A,R6
   \   0000BA   FA           MOV       R2,A
   \   0000BB   EF           MOV       A,R7
   \   0000BC   FB           MOV       R3,A
   \   0000BD   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000C0   7403         MOV       A,#0x3
   \   0000C2   12....       LCALL     ?DEALLOC_XSTACK8
   1083          
   1084            return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
   \   0000C5                ; Setup parameters for call to function fillAndSend
   \   0000C5   75..11       MOV       ?V4,#0x11
   \   0000C8   75..80       MOV       ?V5,#-0x80
   \   0000CB   78..         MOV       R0,#?V4
   \   0000CD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D0   A9..         MOV       R1,?V2
   \   0000D2   AC..         MOV       R4,?V10
   \   0000D4   AD..         MOV       R5,?V11
   \   0000D6   7402         MOV       A,#0x2
   \   0000D8   12....       LCALL     ?XSTACK_DISP101_8
   \   0000DB   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000DE   7402         MOV       A,#0x2
   \   0000E0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E3   7401         MOV       A,#0x1
   \   0000E5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E8   7F0C         MOV       R7,#0xc
   \   0000EA   02....       LJMP      ?BANKED_LEAVE_XDATA
   1085          }
   1086          
   1087          /*********************************************************************
   1088           * @fn          ZDP_ServerDiscRsp
   1089           *
   1090           * @brief       Build and send the Server_Discovery_rsp response.
   1091           *
   1092           * @param       transID - Transaction sequence number of request.
   1093           * @param       dstAddr - Network Destination Address.
   1094           * @param       status - Status of response to request.
   1095           * @param       aoi - Network Address of Interest of request.
   1096           * @param       serverMask - Bit map of service(s) being sought.
   1097           * @param       SecurityEnable - Security Options
   1098           *
   1099           * @return      ZStatus_t
   1100           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1101          ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
   \                     ZDP_ServerDiscRsp:
   1102                                     uint16 aoi, uint16 serverMask, byte SecurityEnable )
   1103          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   C0E0         PUSH      A
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   D0E0         POP       A
   \   000015   F0           MOVX      @DPTR,A
   \   000016   8A..         MOV       ?V6,R2
   \   000018   8B..         MOV       ?V7,R3
   \   00001A   8C..         MOV       ?V3,R4
   \   00001C   8D..         MOV       ?V5,R5
   \   00001E   7415         MOV       A,#0x15
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F5..         MOV       ?V0,A
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F5..         MOV       ?V1,A
   1104            const byte len = 1  + 2;  // status + aoi + mask.
   \   00002A   75..03       MOV       ?V4,#0x3
   1105            uint8 *pBuf = ZDP_TmpBuf;
   \   00002D   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000030   E0           MOVX      A,@DPTR
   \   000031   FE           MOV       R6,A
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   FF           MOV       R7,A
   1106            ZStatus_t stat;
   1107          
   1108            // Intentionally unreferenced parameters
   1109            (void)aoi;
   1110            (void)SecurityEnable;
   1111          
   1112            *pBuf++ = status;
   \   000035   E5..         MOV       A,?V3
   \   000037   C0E0         PUSH      A
   \   000039   8E82         MOV       DPL,R6
   \   00003B   8F83         MOV       DPH,R7
   \   00003D   D0E0         POP       A
   \   00003F   F0           MOVX      @DPTR,A
   \   000040   8E82         MOV       DPL,R6
   \   000042   8F83         MOV       DPH,R7
   \   000044   A3           INC       DPTR
   \   000045   AE82         MOV       R6,DPL
   \   000047   AF83         MOV       R7,DPH
   1113          
   1114            *pBuf++ = LO_UINT16( serverMask );
   \   000049   E5..         MOV       A,?V0
   \   00004B   C0E0         PUSH      A
   \   00004D   8E82         MOV       DPL,R6
   \   00004F   8F83         MOV       DPH,R7
   \   000051   D0E0         POP       A
   \   000053   F0           MOVX      @DPTR,A
   \   000054   8E82         MOV       DPL,R6
   \   000056   8F83         MOV       DPH,R7
   \   000058   A3           INC       DPTR
   \   000059   AE82         MOV       R6,DPL
   \   00005B   AF83         MOV       R7,DPH
   1115            *pBuf++ = HI_UINT16( serverMask );
   \   00005D   A8..         MOV       R0,?V0
   \   00005F   A9..         MOV       R1,?V1
   \   000061   E4           CLR       A
   \   000062   C9           XCH       A,R1
   \   000063   F8           MOV       R0,A
   \   000064   E8           MOV       A,R0
   \   000065   C0E0         PUSH      A
   \   000067   8E82         MOV       DPL,R6
   \   000069   8F83         MOV       DPH,R7
   \   00006B   D0E0         POP       A
   \   00006D   F0           MOVX      @DPTR,A
   \   00006E   8E82         MOV       DPL,R6
   \   000070   8F83         MOV       DPH,R7
   \   000072   A3           INC       DPTR
   \   000073   AE82         MOV       R6,DPL
   \   000075   AF83         MOV       R7,DPH
   1116          
   1117            ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \   000077   90....       MOV       DPTR,#ZDP_TxOptions
   \   00007A   7410         MOV       A,#0x10
   \   00007C   F0           MOVX      @DPTR,A
   1118            stat = fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
   \   00007D                ; Setup parameters for call to function fillAndSend
   \   00007D   75..15       MOV       ?V8,#0x15
   \   000080   75..80       MOV       ?V9,#-0x80
   \   000083   78..         MOV       R0,#?V8
   \   000085   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000088   A9..         MOV       R1,?V4
   \   00008A   AC..         MOV       R4,?V6
   \   00008C   AD..         MOV       R5,?V7
   \   00008E   7402         MOV       A,#0x2
   \   000090   12....       LCALL     ?XSTACK_DISP101_8
   \   000093   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000096   7402         MOV       A,#0x2
   \   000098   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009B   E9           MOV       A,R1
   \   00009C   F5..         MOV       ?V2,A
   1119            ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   00009E   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000A1   7400         MOV       A,#0x0
   \   0000A3   F0           MOVX      @DPTR,A
   1120          
   1121            return ( stat );
   \   0000A4   A9..         MOV       R1,?V2
   \   0000A6   7401         MOV       A,#0x1
   \   0000A8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AB   7F0A         MOV       R7,#0xa
   \   0000AD   02....       LJMP      ?BANKED_LEAVE_XDATA
   1122          }
   1123          
   1124          /*********************************************************************
   1125           * @fn          ZDP_GenericRsp
   1126           *
   1127           * @brief       Sends a response message with only the parameter status
   1128           *              byte and the addr of interest for data.
   1129           *              This function sends unicast message to the
   1130           *              requesting device.
   1131           *
   1132           * @param       dstAddr - destination address
   1133           * @param       status  - generic status for response
   1134           * @param       aoi     - address of interest
   1135           * @param       dstAddr - destination address
   1136           * @param       rspId   - response cluster ID
   1137           * @param       SecurityEnable - Security Options
   1138           *
   1139           * @return      afStatus_t
   1140           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1141          afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_GenericRsp:
   1142                               byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
   1143          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   C0E0         PUSH      A
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   D0E0         POP       A
   \   000015   F0           MOVX      @DPTR,A
   \   000016   8A..         MOV       ?V0,R2
   \   000018   8B..         MOV       ?V1,R3
   \   00001A   8C..         MOV       ?V3,R4
   \   00001C   8D..         MOV       ?V2,R5
   \   00001E   7411         MOV       A,#0x11
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E0           MOVX      A,@DPTR
   \   000024   FE           MOV       R6,A
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   FF           MOV       R7,A
   \   000028   7413         MOV       A,#0x13
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F5..         MOV       ?V6,A
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F5..         MOV       ?V7,A
   1144            uint8 len;
   1145          
   1146            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1147          
   1148            ZDP_TmpBuf[0] = status;
   \   000034   E5..         MOV       A,?V3
   \   000036   C0E0         PUSH      A
   \   000038   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F8           MOV       R0,A
   \   00003D   A3           INC       DPTR
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F583         MOV       DPH,A
   \   000041   8882         MOV       DPL,R0
   \   000043   D0E0         POP       A
   \   000045   F0           MOVX      @DPTR,A
   1149            ZDP_TmpBuf[1] = LO_UINT16( aoi );
   \   000046   EE           MOV       A,R6
   \   000047   C0E0         PUSH      A
   \   000049   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   F8           MOV       R0,A
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   F583         MOV       DPH,A
   \   000052   8882         MOV       DPL,R0
   \   000054   A3           INC       DPTR
   \   000055   D0E0         POP       A
   \   000057   F0           MOVX      @DPTR,A
   1150            ZDP_TmpBuf[2] = HI_UINT16( aoi );
   \   000058   EE           MOV       A,R6
   \   000059   F8           MOV       R0,A
   \   00005A   EF           MOV       A,R7
   \   00005B   F9           MOV       R1,A
   \   00005C   E4           CLR       A
   \   00005D   C9           XCH       A,R1
   \   00005E   F8           MOV       R0,A
   \   00005F   E8           MOV       A,R0
   \   000060   C0E0         PUSH      A
   \   000062   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000065   E0           MOVX      A,@DPTR
   \   000066   F8           MOV       R0,A
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   F583         MOV       DPH,A
   \   00006B   8882         MOV       DPL,R0
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   D0E0         POP       A
   \   000071   F0           MOVX      @DPTR,A
   1151          
   1152            // Length byte
   1153            ZDP_TmpBuf[3] = 0;
   \   000072   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000075   E0           MOVX      A,@DPTR
   \   000076   F8           MOV       R0,A
   \   000077   A3           INC       DPTR
   \   000078   E0           MOVX      A,@DPTR
   \   000079   F583         MOV       DPH,A
   \   00007B   8882         MOV       DPL,R0
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   7400         MOV       A,#0x0
   \   000082   F0           MOVX      @DPTR,A
   1154            len = 4;
   \   000083   75..04       MOV       ?V4,#0x4
   1155          
   1156            return fillAndSend( &TransSeq, dstAddr, rspID, len );
   \   000086                ; Setup parameters for call to function fillAndSend
   \   000086   78..         MOV       R0,#?V6
   \   000088   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008B   A9..         MOV       R1,?V4
   \   00008D   AC..         MOV       R4,?V0
   \   00008F   AD..         MOV       R5,?V1
   \   000091   7402         MOV       A,#0x2
   \   000093   12....       LCALL     ?XSTACK_DISP101_8
   \   000096   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000099   7402         MOV       A,#0x2
   \   00009B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009E   7401         MOV       A,#0x1
   \   0000A0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A3   7F08         MOV       R7,#0x8
   \   0000A5   02....       LJMP      ?BANKED_LEAVE_XDATA
   1157          }
   1158          
   1159          /*********************************************************************
   1160           * Binding
   1161           */
   1162          /*********************************************************************
   1163           * @fn          ZDP_EndDeviceBindReq
   1164           *
   1165           * @brief       This builds and sends a End_Device_Bind_req message.
   1166           *              This function sends a unicast message.
   1167           *
   1168           * @param       dstAddr - destination address
   1169           * @param       LocalCoordinator - short address of local coordinator
   1170           * @param       epIntf - Endpoint/Interface of Simple Desc
   1171           * @param       ProfileID - Profile ID
   1172           *
   1173           *   The Input cluster list is the opposite of what you would think.
   1174           *   This is the output cluster list of this device
   1175           * @param       NumInClusters - number of input clusters
   1176           * @param       InClusterList - input cluster ID list
   1177           *
   1178           *   The Output cluster list is the opposite of what you would think.
   1179           *   This is the input cluster list of this device
   1180           * @param       NumOutClusters - number of output clusters
   1181           * @param       OutClusterList - output cluster ID list
   1182           *
   1183           * @param       SecurityEnable - Security Options
   1184           *
   1185           * @return      afStatus_t
   1186           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1187          afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
   \                     ZDP_EndDeviceBindReq:
   1188                                           uint16 LocalCoordinator,
   1189                                           byte endPoint,
   1190                                           uint16 ProfileID,
   1191                                           byte NumInClusters, cId_t *InClusterList,
   1192                                           byte NumOutClusters, cId_t *OutClusterList,
   1193                                           byte SecurityEnable )
   1194          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000   74E9         MOV       A,#-0x17
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   8C..         MOV       ?V0,R4
   \   000016   8D..         MOV       ?V1,R5
   \   000018   89..         MOV       ?V14,R1
   \   00001A   741B         MOV       A,#0x1b
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V2,A
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F5..         MOV       ?V3,A
   \   000026   741D         MOV       A,#0x1d
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F5..         MOV       ?V7,A
   \   00002E   741E         MOV       A,#0x1e
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F5..         MOV       ?V12,A
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F5..         MOV       ?V13,A
   \   00003A   7420         MOV       A,#0x20
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F5..         MOV       ?V6,A
   \   000042   7421         MOV       A,#0x21
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F5..         MOV       ?V10,A
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   F5..         MOV       ?V11,A
   1195            uint8 *pBuf = ZDP_TmpBuf;
   \   00004E   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000051   E0           MOVX      A,@DPTR
   \   000052   FE           MOV       R6,A
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   FF           MOV       R7,A
   1196            uint8 i, len;
   1197            uint8 *ieeeAddr;
   1198          
   1199            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1200          
   1201            // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
   1202            len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
   \   000056   75..0F       MOV       ?V5,#0xf
   1203            len += (NumInClusters + NumOutClusters) * sizeof ( uint16 );
   \   000059   75F002       MOV       B,#0x2
   \   00005C   E5..         MOV       A,?V7
   \   00005E   FA           MOV       R2,A
   \   00005F   7B00         MOV       R3,#0x0
   \   000061   E5..         MOV       A,?V6
   \   000063   F8           MOV       R0,A
   \   000064   7900         MOV       R1,#0x0
   \   000066   EA           MOV       A,R2
   \   000067   28           ADD       A,R0
   \   000068   F8           MOV       R0,A
   \   000069   EB           MOV       A,R3
   \   00006A   39           ADDC      A,R1
   \   00006B   F9           MOV       R1,A
   \   00006C   E8           MOV       A,R0
   \   00006D   A4           MUL       AB
   \   00006E   25..         ADD       A,?V5
   \   000070   F5..         MOV       ?V5,A
   1204          
   1205            if ( len >= ZDP_BUF_SZ-1 )
   \   000072   E5..         MOV       A,?V5
   \   000074   C3           CLR       C
   \   000075   944F         SUBB      A,#0x4f
   \   000077   4005         JC        ??ZDP_EndDeviceBindReq_0
   1206            {
   1207              return afStatus_MEM_FAIL;
   \   000079   7910         MOV       R1,#0x10
   \   00007B   02....       LJMP      ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1208            }
   1209          
   1210            if ( LocalCoordinator != NLME_GetShortAddr() )
   \                     ??ZDP_EndDeviceBindReq_0:
   \   00007E                ; Setup parameters for call to function NLME_GetShortAddr
   \   00007E   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000081   8A..         MOV       ?V8,R2
   \   000083   8B..         MOV       ?V9,R3
   \   000085   E5..         MOV       A,?V8
   \   000087   65..         XRL       A,?V0
   \   000089   7004         JNZ       ??ZDP_EndDeviceBindReq_2
   \   00008B   E5..         MOV       A,?V9
   \   00008D   65..         XRL       A,?V1
   \                     ??ZDP_EndDeviceBindReq_2:
   \   00008F   6005         JZ        ??ZDP_EndDeviceBindReq_3
   1211            {
   1212              return afStatus_INVALID_PARAMETER;
   \   000091   7902         MOV       R1,#0x2
   \   000093   02....       LJMP      ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1213            }
   1214          
   1215            *pBuf++ = LO_UINT16( LocalCoordinator );
   \                     ??ZDP_EndDeviceBindReq_3:
   \   000096   E5..         MOV       A,?V0
   \   000098   C0E0         PUSH      A
   \   00009A   8E82         MOV       DPL,R6
   \   00009C   8F83         MOV       DPH,R7
   \   00009E   D0E0         POP       A
   \   0000A0   F0           MOVX      @DPTR,A
   \   0000A1   8E82         MOV       DPL,R6
   \   0000A3   8F83         MOV       DPH,R7
   \   0000A5   A3           INC       DPTR
   \   0000A6   AE82         MOV       R6,DPL
   \   0000A8   AF83         MOV       R7,DPH
   1216            *pBuf++ = HI_UINT16( LocalCoordinator );
   \   0000AA   A8..         MOV       R0,?V0
   \   0000AC   A9..         MOV       R1,?V1
   \   0000AE   E4           CLR       A
   \   0000AF   C9           XCH       A,R1
   \   0000B0   F8           MOV       R0,A
   \   0000B1   E8           MOV       A,R0
   \   0000B2   C0E0         PUSH      A
   \   0000B4   8E82         MOV       DPL,R6
   \   0000B6   8F83         MOV       DPH,R7
   \   0000B8   D0E0         POP       A
   \   0000BA   F0           MOVX      @DPTR,A
   \   0000BB   8E82         MOV       DPL,R6
   \   0000BD   8F83         MOV       DPH,R7
   \   0000BF   A3           INC       DPTR
   \   0000C0   AE82         MOV       R6,DPL
   \   0000C2   AF83         MOV       R7,DPH
   1217          
   1218            ieeeAddr = NLME_GetExtAddr();
   \   0000C4                ; Setup parameters for call to function NLME_GetExtAddr
   \   0000C4   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   0000C7   85..82       MOV       DPL,?XSP + 0
   \   0000CA   85..83       MOV       DPH,?XSP + 1
   \   0000CD   EA           MOV       A,R2
   \   0000CE   F0           MOVX      @DPTR,A
   \   0000CF   A3           INC       DPTR
   \   0000D0   EB           MOV       A,R3
   \   0000D1   F0           MOVX      @DPTR,A
   1219            pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
   \   0000D2                ; Setup parameters for call to function sAddrExtCpy
   \   0000D2   85..82       MOV       DPL,?XSP + 0
   \   0000D5   85..83       MOV       DPH,?XSP + 1
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   FC           MOV       R4,A
   \   0000DA   A3           INC       DPTR
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   FD           MOV       R5,A
   \   0000DD   EE           MOV       A,R6
   \   0000DE   FA           MOV       R2,A
   \   0000DF   EF           MOV       A,R7
   \   0000E0   FB           MOV       R3,A
   \   0000E1   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000E4   8A..         MOV       ?V8,R2
   \   0000E6   8B..         MOV       ?V9,R3
   \   0000E8   AE..         MOV       R6,?V8
   \   0000EA   AF..         MOV       R7,?V9
   1220          
   1221            *pBuf++ = endPoint;
   \   0000EC   E5..         MOV       A,?V14
   \   0000EE   C0E0         PUSH      A
   \   0000F0   8E82         MOV       DPL,R6
   \   0000F2   8F83         MOV       DPH,R7
   \   0000F4   D0E0         POP       A
   \   0000F6   F0           MOVX      @DPTR,A
   \   0000F7   8E82         MOV       DPL,R6
   \   0000F9   8F83         MOV       DPH,R7
   \   0000FB   A3           INC       DPTR
   \   0000FC   AE82         MOV       R6,DPL
   \   0000FE   AF83         MOV       R7,DPH
   1222          
   1223            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \   000100   E5..         MOV       A,?V2
   \   000102   C0E0         PUSH      A
   \   000104   8E82         MOV       DPL,R6
   \   000106   8F83         MOV       DPH,R7
   \   000108   D0E0         POP       A
   \   00010A   F0           MOVX      @DPTR,A
   \   00010B   8E82         MOV       DPL,R6
   \   00010D   8F83         MOV       DPH,R7
   \   00010F   A3           INC       DPTR
   \   000110   AE82         MOV       R6,DPL
   \   000112   AF83         MOV       R7,DPH
   1224            *pBuf++ = HI_UINT16( ProfileID );
   \   000114   A8..         MOV       R0,?V2
   \   000116   A9..         MOV       R1,?V3
   \   000118   E4           CLR       A
   \   000119   C9           XCH       A,R1
   \   00011A   F8           MOV       R0,A
   \   00011B   E8           MOV       A,R0
   \   00011C   C0E0         PUSH      A
   \   00011E   8E82         MOV       DPL,R6
   \   000120   8F83         MOV       DPH,R7
   \   000122   D0E0         POP       A
   \   000124   F0           MOVX      @DPTR,A
   \   000125   8E82         MOV       DPL,R6
   \   000127   8F83         MOV       DPH,R7
   \   000129   A3           INC       DPTR
   \   00012A   AE82         MOV       R6,DPL
   \   00012C   AF83         MOV       R7,DPH
   1225          
   1226            *pBuf++ = NumInClusters; // Input cluster list
   \   00012E   E5..         MOV       A,?V7
   \   000130   C0E0         PUSH      A
   \   000132   8E82         MOV       DPL,R6
   \   000134   8F83         MOV       DPH,R7
   \   000136   D0E0         POP       A
   \   000138   F0           MOVX      @DPTR,A
   \   000139   8E82         MOV       DPL,R6
   \   00013B   8F83         MOV       DPH,R7
   \   00013D   A3           INC       DPTR
   \   00013E   AE82         MOV       R6,DPL
   \   000140   AF83         MOV       R7,DPH
   1227            for ( i = 0; i < NumInClusters; ++i )
   \   000142   75..00       MOV       ?V4,#0x0
   \                     ??ZDP_EndDeviceBindReq_4:
   \   000145   E5..         MOV       A,?V4
   \   000147   C3           CLR       C
   \   000148   95..         SUBB      A,?V7
   \   00014A   4003         JC        $+5
   \   00014C   02....       LJMP      ??ZDP_EndDeviceBindReq_5 & 0xFFFF
   1228            {
   1229              *pBuf++ = LO_UINT16(InClusterList[i]);
   \   00014F   E5..         MOV       A,?V4
   \   000151   F8           MOV       R0,A
   \   000152   7900         MOV       R1,#0x0
   \   000154   E8           MOV       A,R0
   \   000155   75F002       MOV       B,#0x2
   \   000158   A4           MUL       AB
   \   000159   C8           XCH       A,R0
   \   00015A   AAF0         MOV       R2,B
   \   00015C   75F000       MOV       B,#0x0
   \   00015F   A4           MUL       AB
   \   000160   2A           ADD       A,R2
   \   000161   FA           MOV       R2,A
   \   000162   75F002       MOV       B,#0x2
   \   000165   E9           MOV       A,R1
   \   000166   A4           MUL       AB
   \   000167   2A           ADD       A,R2
   \   000168   F9           MOV       R1,A
   \   000169   E5..         MOV       A,?V12
   \   00016B   28           ADD       A,R0
   \   00016C   F582         MOV       DPL,A
   \   00016E   E5..         MOV       A,?V13
   \   000170   39           ADDC      A,R1
   \   000171   F583         MOV       DPH,A
   \   000173   E0           MOVX      A,@DPTR
   \   000174   F8           MOV       R0,A
   \   000175   A3           INC       DPTR
   \   000176   E0           MOVX      A,@DPTR
   \   000177   F9           MOV       R1,A
   \   000178   E8           MOV       A,R0
   \   000179   C0E0         PUSH      A
   \   00017B   8E82         MOV       DPL,R6
   \   00017D   8F83         MOV       DPH,R7
   \   00017F   D0E0         POP       A
   \   000181   F0           MOVX      @DPTR,A
   \   000182   8E82         MOV       DPL,R6
   \   000184   8F83         MOV       DPH,R7
   \   000186   A3           INC       DPTR
   \   000187   AE82         MOV       R6,DPL
   \   000189   AF83         MOV       R7,DPH
   1230              *pBuf++ = HI_UINT16(InClusterList[i]);
   \   00018B   E5..         MOV       A,?V4
   \   00018D   F8           MOV       R0,A
   \   00018E   7900         MOV       R1,#0x0
   \   000190   E8           MOV       A,R0
   \   000191   75F002       MOV       B,#0x2
   \   000194   A4           MUL       AB
   \   000195   C8           XCH       A,R0
   \   000196   AAF0         MOV       R2,B
   \   000198   75F000       MOV       B,#0x0
   \   00019B   A4           MUL       AB
   \   00019C   2A           ADD       A,R2
   \   00019D   FA           MOV       R2,A
   \   00019E   75F002       MOV       B,#0x2
   \   0001A1   E9           MOV       A,R1
   \   0001A2   A4           MUL       AB
   \   0001A3   2A           ADD       A,R2
   \   0001A4   F9           MOV       R1,A
   \   0001A5   E5..         MOV       A,?V12
   \   0001A7   28           ADD       A,R0
   \   0001A8   F582         MOV       DPL,A
   \   0001AA   E5..         MOV       A,?V13
   \   0001AC   39           ADDC      A,R1
   \   0001AD   F583         MOV       DPH,A
   \   0001AF   E0           MOVX      A,@DPTR
   \   0001B0   F8           MOV       R0,A
   \   0001B1   A3           INC       DPTR
   \   0001B2   E0           MOVX      A,@DPTR
   \   0001B3   F9           MOV       R1,A
   \   0001B4   E4           CLR       A
   \   0001B5   C9           XCH       A,R1
   \   0001B6   F8           MOV       R0,A
   \   0001B7   E8           MOV       A,R0
   \   0001B8   C0E0         PUSH      A
   \   0001BA   8E82         MOV       DPL,R6
   \   0001BC   8F83         MOV       DPH,R7
   \   0001BE   D0E0         POP       A
   \   0001C0   F0           MOVX      @DPTR,A
   \   0001C1   8E82         MOV       DPL,R6
   \   0001C3   8F83         MOV       DPH,R7
   \   0001C5   A3           INC       DPTR
   \   0001C6   AE82         MOV       R6,DPL
   \   0001C8   AF83         MOV       R7,DPH
   1231            }
   \   0001CA   05..         INC       ?V4
   \   0001CC   02....       LJMP      ??ZDP_EndDeviceBindReq_4 & 0xFFFF
   1232          
   1233            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_EndDeviceBindReq_5:
   \   0001CF   E5..         MOV       A,?V6
   \   0001D1   C0E0         PUSH      A
   \   0001D3   8E82         MOV       DPL,R6
   \   0001D5   8F83         MOV       DPH,R7
   \   0001D7   D0E0         POP       A
   \   0001D9   F0           MOVX      @DPTR,A
   \   0001DA   8E82         MOV       DPL,R6
   \   0001DC   8F83         MOV       DPH,R7
   \   0001DE   A3           INC       DPTR
   \   0001DF   AE82         MOV       R6,DPL
   \   0001E1   AF83         MOV       R7,DPH
   1234            for ( i = 0; i < NumOutClusters; ++i )
   \   0001E3   75..00       MOV       ?V4,#0x0
   \                     ??ZDP_EndDeviceBindReq_6:
   \   0001E6   E5..         MOV       A,?V4
   \   0001E8   C3           CLR       C
   \   0001E9   95..         SUBB      A,?V6
   \   0001EB   4003         JC        $+5
   \   0001ED   02....       LJMP      ??ZDP_EndDeviceBindReq_7 & 0xFFFF
   1235            {
   1236              *pBuf++ = LO_UINT16(OutClusterList[i]);
   \   0001F0   E5..         MOV       A,?V4
   \   0001F2   F8           MOV       R0,A
   \   0001F3   7900         MOV       R1,#0x0
   \   0001F5   E8           MOV       A,R0
   \   0001F6   75F002       MOV       B,#0x2
   \   0001F9   A4           MUL       AB
   \   0001FA   C8           XCH       A,R0
   \   0001FB   AAF0         MOV       R2,B
   \   0001FD   75F000       MOV       B,#0x0
   \   000200   A4           MUL       AB
   \   000201   2A           ADD       A,R2
   \   000202   FA           MOV       R2,A
   \   000203   75F002       MOV       B,#0x2
   \   000206   E9           MOV       A,R1
   \   000207   A4           MUL       AB
   \   000208   2A           ADD       A,R2
   \   000209   F9           MOV       R1,A
   \   00020A   E5..         MOV       A,?V10
   \   00020C   28           ADD       A,R0
   \   00020D   F582         MOV       DPL,A
   \   00020F   E5..         MOV       A,?V11
   \   000211   39           ADDC      A,R1
   \   000212   F583         MOV       DPH,A
   \   000214   E0           MOVX      A,@DPTR
   \   000215   F8           MOV       R0,A
   \   000216   A3           INC       DPTR
   \   000217   E0           MOVX      A,@DPTR
   \   000218   F9           MOV       R1,A
   \   000219   E8           MOV       A,R0
   \   00021A   C0E0         PUSH      A
   \   00021C   8E82         MOV       DPL,R6
   \   00021E   8F83         MOV       DPH,R7
   \   000220   D0E0         POP       A
   \   000222   F0           MOVX      @DPTR,A
   \   000223   8E82         MOV       DPL,R6
   \   000225   8F83         MOV       DPH,R7
   \   000227   A3           INC       DPTR
   \   000228   AE82         MOV       R6,DPL
   \   00022A   AF83         MOV       R7,DPH
   1237              *pBuf++ = HI_UINT16(OutClusterList[i]);
   \   00022C   E5..         MOV       A,?V4
   \   00022E   F8           MOV       R0,A
   \   00022F   7900         MOV       R1,#0x0
   \   000231   E8           MOV       A,R0
   \   000232   75F002       MOV       B,#0x2
   \   000235   A4           MUL       AB
   \   000236   C8           XCH       A,R0
   \   000237   AAF0         MOV       R2,B
   \   000239   75F000       MOV       B,#0x0
   \   00023C   A4           MUL       AB
   \   00023D   2A           ADD       A,R2
   \   00023E   FA           MOV       R2,A
   \   00023F   75F002       MOV       B,#0x2
   \   000242   E9           MOV       A,R1
   \   000243   A4           MUL       AB
   \   000244   2A           ADD       A,R2
   \   000245   F9           MOV       R1,A
   \   000246   E5..         MOV       A,?V10
   \   000248   28           ADD       A,R0
   \   000249   F582         MOV       DPL,A
   \   00024B   E5..         MOV       A,?V11
   \   00024D   39           ADDC      A,R1
   \   00024E   F583         MOV       DPH,A
   \   000250   E0           MOVX      A,@DPTR
   \   000251   F8           MOV       R0,A
   \   000252   A3           INC       DPTR
   \   000253   E0           MOVX      A,@DPTR
   \   000254   F9           MOV       R1,A
   \   000255   E4           CLR       A
   \   000256   C9           XCH       A,R1
   \   000257   F8           MOV       R0,A
   \   000258   E8           MOV       A,R0
   \   000259   C0E0         PUSH      A
   \   00025B   8E82         MOV       DPL,R6
   \   00025D   8F83         MOV       DPH,R7
   \   00025F   D0E0         POP       A
   \   000261   F0           MOVX      @DPTR,A
   \   000262   8E82         MOV       DPL,R6
   \   000264   8F83         MOV       DPH,R7
   \   000266   A3           INC       DPTR
   \   000267   AE82         MOV       R6,DPL
   \   000269   AF83         MOV       R7,DPH
   1238            }
   \   00026B   05..         INC       ?V4
   \   00026D   02....       LJMP      ??ZDP_EndDeviceBindReq_6 & 0xFFFF
   1239          
   1240            return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
   \                     ??ZDP_EndDeviceBindReq_7:
   \   000270                ; Setup parameters for call to function fillAndSend
   \   000270   75..20       MOV       ?V8,#0x20
   \   000273   75..00       MOV       ?V9,#0x0
   \   000276   78..         MOV       R0,#?V8
   \   000278   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00027B   A9..         MOV       R1,?V5
   \   00027D   7404         MOV       A,#0x4
   \   00027F   12....       LCALL     ?XSTACK_DISP0_8
   \   000282   E0           MOVX      A,@DPTR
   \   000283   FC           MOV       R4,A
   \   000284   A3           INC       DPTR
   \   000285   E0           MOVX      A,@DPTR
   \   000286   FD           MOV       R5,A
   \   000287   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000289   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   00028B   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00028E   7402         MOV       A,#0x2
   \   000290   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDP_EndDeviceBindReq_1:
   \   000293   7404         MOV       A,#0x4
   \   000295   12....       LCALL     ?DEALLOC_XSTACK8
   \   000298   7F0F         MOV       R7,#0xf
   \   00029A   02....       LJMP      ?BANKED_LEAVE_XDATA
   1241          }
   1242          
   1243          /*********************************************************************
   1244           * @fn          ZDP_BindUnbindReq
   1245           *
   1246           * @brief       This builds and send a Bind_req or Unbind_req message
   1247           *              Depending on the ClusterID. This function
   1248           *              sends a unicast message to the local coordinator.
   1249           *
   1250           * @param       BindOrUnbind - either Bind_req or Unbind_req
   1251           * @param       dstAddr - destination address of the message
   1252           * @param       SourceAddr - source 64 bit address of the binding
   1253           * @param       SrcEPIntf - Source endpoint/interface
   1254           * @param       ClusterID - Binding cluster ID
   1255           * @param       DestinationAddr - destination 64 bit addr of binding
   1256           * @param       DstEPIntf - destination endpoint/interface
   1257           * @param       SecurityEnable - Security Options
   1258           *
   1259           * @return      afStatus_t
   1260           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1261          afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
   \                     ZDP_BindUnbindReq:
   1262                                        uint8 *SourceAddr, byte SrcEndPoint,
   1263                                        cId_t ClusterID,
   1264                                        zAddrType_t *destinationAddr, byte DstEndPoint,
   1265                                        byte SecurityEnable )
   1266          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   \   000009   8C..         MOV       ?V12,R4
   \   00000B   8D..         MOV       ?V13,R5
   \   00000D   89..         MOV       ?V9,R1
   \   00000F   7418         MOV       A,#0x18
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V14,A
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V15,A
   \   00001B   741A         MOV       A,#0x1a
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V0,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F5..         MOV       ?V1,A
   \   000027   741C         MOV       A,#0x1c
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F5..         MOV       ?V4,A
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F5..         MOV       ?V5,A
   \   000033   741E         MOV       A,#0x1e
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F5..         MOV       ?V8,A
   1267            uint8 *pBuf = ZDP_TmpBuf;
   \   00003B   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   FE           MOV       R6,A
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   FF           MOV       R7,A
   1268            byte len;
   1269          
   1270            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1271          
   1272            // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
   1273            len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
   \   000043   75..0C       MOV       ?V6,#0xc
   1274            if ( destinationAddr->addrMode == Addr64Bit )
   \   000046   85..82       MOV       DPL,?V4
   \   000049   85..83       MOV       DPH,?V5
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   6403         XRL       A,#0x3
   \   000057   7008         JNZ       ??ZDP_BindUnbindReq_0
   1275              len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
   \   000059   7409         MOV       A,#0x9
   \   00005B   25..         ADD       A,?V6
   \   00005D   F5..         MOV       ?V6,A
   \   00005F   8019         SJMP      ??ZDP_BindUnbindReq_1
   1276            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_0:
   \   000061   85..82       MOV       DPL,?V4
   \   000064   85..83       MOV       DPH,?V5
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   6401         XRL       A,#0x1
   \   000072   7006         JNZ       ??ZDP_BindUnbindReq_1
   1277              len += sizeof ( uint16 );
   \   000074   7402         MOV       A,#0x2
   \   000076   25..         ADD       A,?V6
   \   000078   F5..         MOV       ?V6,A
   1278          
   1279            pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
   \                     ??ZDP_BindUnbindReq_1:
   \   00007A                ; Setup parameters for call to function sAddrExtCpy
   \   00007A   AC..         MOV       R4,?V14
   \   00007C   AD..         MOV       R5,?V15
   \   00007E   EE           MOV       A,R6
   \   00007F   FA           MOV       R2,A
   \   000080   EF           MOV       A,R7
   \   000081   FB           MOV       R3,A
   \   000082   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000085   8A..         MOV       ?V10,R2
   \   000087   8B..         MOV       ?V11,R3
   \   000089   AE..         MOV       R6,?V10
   \   00008B   AF..         MOV       R7,?V11
   1280            *pBuf++ = SrcEndPoint;
   \   00008D   E5..         MOV       A,?V9
   \   00008F   C0E0         PUSH      A
   \   000091   8E82         MOV       DPL,R6
   \   000093   8F83         MOV       DPH,R7
   \   000095   D0E0         POP       A
   \   000097   F0           MOVX      @DPTR,A
   \   000098   8E82         MOV       DPL,R6
   \   00009A   8F83         MOV       DPH,R7
   \   00009C   A3           INC       DPTR
   \   00009D   AE82         MOV       R6,DPL
   \   00009F   AF83         MOV       R7,DPH
   1281          
   1282            *pBuf++ = LO_UINT16( ClusterID );
   \   0000A1   E5..         MOV       A,?V0
   \   0000A3   C0E0         PUSH      A
   \   0000A5   8E82         MOV       DPL,R6
   \   0000A7   8F83         MOV       DPH,R7
   \   0000A9   D0E0         POP       A
   \   0000AB   F0           MOVX      @DPTR,A
   \   0000AC   8E82         MOV       DPL,R6
   \   0000AE   8F83         MOV       DPH,R7
   \   0000B0   A3           INC       DPTR
   \   0000B1   AE82         MOV       R6,DPL
   \   0000B3   AF83         MOV       R7,DPH
   1283          
   1284            *pBuf++ = HI_UINT16( ClusterID );
   \   0000B5   A8..         MOV       R0,?V0
   \   0000B7   A9..         MOV       R1,?V1
   \   0000B9   E4           CLR       A
   \   0000BA   C9           XCH       A,R1
   \   0000BB   F8           MOV       R0,A
   \   0000BC   E8           MOV       A,R0
   \   0000BD   C0E0         PUSH      A
   \   0000BF   8E82         MOV       DPL,R6
   \   0000C1   8F83         MOV       DPH,R7
   \   0000C3   D0E0         POP       A
   \   0000C5   F0           MOVX      @DPTR,A
   \   0000C6   8E82         MOV       DPL,R6
   \   0000C8   8F83         MOV       DPH,R7
   \   0000CA   A3           INC       DPTR
   \   0000CB   AE82         MOV       R6,DPL
   \   0000CD   AF83         MOV       R7,DPH
   1285            *pBuf++ = destinationAddr->addrMode;
   \   0000CF   85..82       MOV       DPL,?V4
   \   0000D2   85..83       MOV       DPH,?V5
   \   0000D5   A3           INC       DPTR
   \   0000D6   A3           INC       DPTR
   \   0000D7   A3           INC       DPTR
   \   0000D8   A3           INC       DPTR
   \   0000D9   A3           INC       DPTR
   \   0000DA   A3           INC       DPTR
   \   0000DB   A3           INC       DPTR
   \   0000DC   A3           INC       DPTR
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   C0E0         PUSH      A
   \   0000E0   8E82         MOV       DPL,R6
   \   0000E2   8F83         MOV       DPH,R7
   \   0000E4   D0E0         POP       A
   \   0000E6   F0           MOVX      @DPTR,A
   \   0000E7   8E82         MOV       DPL,R6
   \   0000E9   8F83         MOV       DPH,R7
   \   0000EB   A3           INC       DPTR
   \   0000EC   AE82         MOV       R6,DPL
   \   0000EE   AF83         MOV       R7,DPH
   1286            if ( destinationAddr->addrMode == Addr64Bit )
   \   0000F0   85..82       MOV       DPL,?V4
   \   0000F3   85..83       MOV       DPH,?V5
   \   0000F6   A3           INC       DPTR
   \   0000F7   A3           INC       DPTR
   \   0000F8   A3           INC       DPTR
   \   0000F9   A3           INC       DPTR
   \   0000FA   A3           INC       DPTR
   \   0000FB   A3           INC       DPTR
   \   0000FC   A3           INC       DPTR
   \   0000FD   A3           INC       DPTR
   \   0000FE   E0           MOVX      A,@DPTR
   \   0000FF   6403         XRL       A,#0x3
   \   000101   7020         JNZ       ??ZDP_BindUnbindReq_2
   1287            {
   1288              pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   \   000103                ; Setup parameters for call to function sAddrExtCpy
   \   000103   AC..         MOV       R4,?V4
   \   000105   AD..         MOV       R5,?V5
   \   000107   EE           MOV       A,R6
   \   000108   FA           MOV       R2,A
   \   000109   EF           MOV       A,R7
   \   00010A   FB           MOV       R3,A
   \   00010B   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00010E   8A..         MOV       ?V10,R2
   \   000110   8B..         MOV       ?V11,R3
   \   000112   AE..         MOV       R6,?V10
   \   000114   AF..         MOV       R7,?V11
   1289              *pBuf = DstEndPoint;
   \   000116   E5..         MOV       A,?V8
   \   000118   C0E0         PUSH      A
   \   00011A   8E82         MOV       DPL,R6
   \   00011C   8F83         MOV       DPH,R7
   \   00011E   D0E0         POP       A
   \   000120   F0           MOVX      @DPTR,A
   \   000121   8052         SJMP      ??ZDP_BindUnbindReq_3
   1290            }
   1291            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_2:
   \   000123   85..82       MOV       DPL,?V4
   \   000126   85..83       MOV       DPH,?V5
   \   000129   A3           INC       DPTR
   \   00012A   A3           INC       DPTR
   \   00012B   A3           INC       DPTR
   \   00012C   A3           INC       DPTR
   \   00012D   A3           INC       DPTR
   \   00012E   A3           INC       DPTR
   \   00012F   A3           INC       DPTR
   \   000130   A3           INC       DPTR
   \   000131   E0           MOVX      A,@DPTR
   \   000132   6401         XRL       A,#0x1
   \   000134   703F         JNZ       ??ZDP_BindUnbindReq_3
   1292            {
   1293              *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
   \   000136   85..82       MOV       DPL,?V4
   \   000139   85..83       MOV       DPH,?V5
   \   00013C   E0           MOVX      A,@DPTR
   \   00013D   F8           MOV       R0,A
   \   00013E   A3           INC       DPTR
   \   00013F   E0           MOVX      A,@DPTR
   \   000140   F9           MOV       R1,A
   \   000141   E8           MOV       A,R0
   \   000142   C0E0         PUSH      A
   \   000144   8E82         MOV       DPL,R6
   \   000146   8F83         MOV       DPH,R7
   \   000148   D0E0         POP       A
   \   00014A   F0           MOVX      @DPTR,A
   \   00014B   8E82         MOV       DPL,R6
   \   00014D   8F83         MOV       DPH,R7
   \   00014F   A3           INC       DPTR
   \   000150   AE82         MOV       R6,DPL
   \   000152   AF83         MOV       R7,DPH
   1294              *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
   \   000154   85..82       MOV       DPL,?V4
   \   000157   85..83       MOV       DPH,?V5
   \   00015A   E0           MOVX      A,@DPTR
   \   00015B   F8           MOV       R0,A
   \   00015C   A3           INC       DPTR
   \   00015D   E0           MOVX      A,@DPTR
   \   00015E   F9           MOV       R1,A
   \   00015F   E4           CLR       A
   \   000160   C9           XCH       A,R1
   \   000161   F8           MOV       R0,A
   \   000162   E8           MOV       A,R0
   \   000163   C0E0         PUSH      A
   \   000165   8E82         MOV       DPL,R6
   \   000167   8F83         MOV       DPH,R7
   \   000169   D0E0         POP       A
   \   00016B   F0           MOVX      @DPTR,A
   \   00016C   8E82         MOV       DPL,R6
   \   00016E   8F83         MOV       DPH,R7
   \   000170   A3           INC       DPTR
   \   000171   AE82         MOV       R6,DPL
   \   000173   AF83         MOV       R7,DPH
   1295            }
   1296          
   1297            FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
   \                     ??ZDP_BindUnbindReq_3:
   \   000175   90....       MOV       DPTR,#ZDP_TxOptions
   \   000178   7410         MOV       A,#0x10
   \   00017A   F0           MOVX      @DPTR,A
   \   00017B                ; Setup parameters for call to function fillAndSend
   \   00017B   78..         MOV       R0,#?V2
   \   00017D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000180   A9..         MOV       R1,?V6
   \   000182   AC..         MOV       R4,?V12
   \   000184   AD..         MOV       R5,?V13
   \   000186   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000188   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   00018A   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00018D   7402         MOV       A,#0x2
   \   00018F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000192   E9           MOV       A,R1
   \   000193   F5..         MOV       ?V7,A
   \   000195   90....       MOV       DPTR,#ZDP_TxOptions
   \   000198   7400         MOV       A,#0x0
   \   00019A   F0           MOVX      @DPTR,A
   \   00019B   A9..         MOV       R1,?V7
   \   00019D   7F10         MOV       R7,#0x10
   \   00019F   02....       LJMP      ?BANKED_LEAVE_XDATA
   1298          }
   1299          
   1300          /*********************************************************************
   1301           * Network Management
   1302           */
   1303          
   1304          /*********************************************************************
   1305           * @fn          ZDP_MgmtNwkDiscReq
   1306           *
   1307           * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
   1308           *              function sends a unicast message.
   1309           *
   1310           * @param       dstAddr - destination address of the message
   1311           * @param       ScanChannels - 32 bit address bit map
   1312           * @param       StartIndex - Starting index within the reporting network
   1313           *                           list
   1314           * @param       SecurityEnable - Security Options
   1315           *
   1316           * @return      afStatus_t
   1317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1318          afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscReq:
   1319                                         uint32 ScanChannels,
   1320                                         byte ScanDuration,
   1321                                         byte StartIndex,
   1322                                         byte SecurityEnable )
   1323          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V12,R2
   \   000007   8B..         MOV       ?V13,R3
   \   000009   E9           MOV       A,R1
   \   00000A   FE           MOV       R6,A
   \   00000B   EC           MOV       A,R4
   \   00000C   FF           MOV       R7,A
   \   00000D   8D..         MOV       ?V8,R5
   \   00000F   7416         MOV       A,#0x16
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   78..         MOV       R0,#?V0
   \   000016   12....       LCALL     ?L_MOV_X
   \   000019   85....       MOV       ?V4,?V0
   \   00001C   85....       MOV       ?V5,?V1
   \   00001F   85....       MOV       ?V6,?V2
   \   000022   85....       MOV       ?V7,?V3
   1324            uint8 *pBuf = ZDP_TmpBuf;
   \   000025   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F5..         MOV       ?V0,A
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F5..         MOV       ?V1,A
   1325            byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
   \   00002F   75..06       MOV       ?V2,#0x6
   1326          
   1327            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1328          
   1329            pBuf = osal_buffer_uint32( pBuf, ScanChannels );
   \   000032                ; Setup parameters for call to function osal_buffer_uint32
   \   000032   78..         MOV       R0,#?V4
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000037   AA..         MOV       R2,?V0
   \   000039   AB..         MOV       R3,?V1
   \   00003B   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00003E   7404         MOV       A,#0x4
   \   000040   12....       LCALL     ?DEALLOC_XSTACK8
   \   000043   8A..         MOV       ?V10,R2
   \   000045   8B..         MOV       ?V11,R3
   \   000047   85....       MOV       ?V0,?V10
   \   00004A   85....       MOV       ?V1,?V11
   1330          
   1331            *pBuf++ = ScanDuration;
   \   00004D   EE           MOV       A,R6
   \   00004E   C0E0         PUSH      A
   \   000050   85..82       MOV       DPL,?V0
   \   000053   85..83       MOV       DPH,?V1
   \   000056   D0E0         POP       A
   \   000058   F0           MOVX      @DPTR,A
   \   000059   85..82       MOV       DPL,?V0
   \   00005C   85..83       MOV       DPH,?V1
   \   00005F   A3           INC       DPTR
   \   000060   8582..       MOV       ?V0,DPL
   \   000063   8583..       MOV       ?V1,DPH
   1332            *pBuf = StartIndex;
   \   000066   EF           MOV       A,R7
   \   000067   C0E0         PUSH      A
   \   000069   85..82       MOV       DPL,?V0
   \   00006C   85..83       MOV       DPH,?V1
   \   00006F   D0E0         POP       A
   \   000071   F0           MOVX      @DPTR,A
   1333          
   1334            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
   \   000072                ; Setup parameters for call to function fillAndSend
   \   000072   75..30       MOV       ?V10,#0x30
   \   000075   75..00       MOV       ?V11,#0x0
   \   000078   78..         MOV       R0,#?V10
   \   00007A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007D   A9..         MOV       R1,?V2
   \   00007F   AC..         MOV       R4,?V12
   \   000081   AD..         MOV       R5,?V13
   \   000083   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000085   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000087   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00008A   7402         MOV       A,#0x2
   \   00008C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008F   7F0E         MOV       R7,#0xe
   \   000091   02....       LJMP      ?BANKED_LEAVE_XDATA
   1335          }
   1336          
   1337          /*********************************************************************
   1338           * @fn          ZDP_MgmtDirectJoinReq
   1339           *
   1340           * @brief       This builds and send a Mgmt_Direct_Join_req message. This
   1341           *              function sends a unicast message.
   1342           *
   1343           * @param       dstAddr - destination address of the message
   1344           * @param       deviceAddr - 64 bit IEEE Address
   1345           * @param       SecurityEnable - Security Options
   1346           *
   1347           * @return      afStatus_t
   1348           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1349          afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtDirectJoinReq:
   1350                                         uint8 *deviceAddr,
   1351                                         byte capInfo,
   1352                                         byte SecurityEnable )
   1353          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   \   00000D   89..         MOV       ?V2,R1
   1354            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1355          
   1356            osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
   \   00000F                ; Setup parameters for call to function sAddrExtCpy
   \   00000F   EE           MOV       A,R6
   \   000010   FC           MOV       R4,A
   \   000011   EF           MOV       A,R7
   \   000012   FD           MOV       R5,A
   \   000013   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000016   E0           MOVX      A,@DPTR
   \   000017   FA           MOV       R2,A
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FB           MOV       R3,A
   \   00001B   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1357            ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
   \   00001E   E5..         MOV       A,?V2
   \   000020   C0E0         PUSH      A
   \   000022   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F8           MOV       R0,A
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   C8           XCH       A,R0
   \   00002A   2408         ADD       A,#0x8
   \   00002C   F582         MOV       DPL,A
   \   00002E   C8           XCH       A,R0
   \   00002F   3400         ADDC      A,#0x0
   \   000031   F583         MOV       DPH,A
   \   000033   D0E0         POP       A
   \   000035   F0           MOVX      @DPTR,A
   1358          
   1359            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
   \   000036                ; Setup parameters for call to function fillAndSend
   \   000036   75..35       MOV       ?V4,#0x35
   \   000039   75..00       MOV       ?V5,#0x0
   \   00003C   78..         MOV       R0,#?V4
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000041   7909         MOV       R1,#0x9
   \   000043   AC..         MOV       R4,?V0
   \   000045   AD..         MOV       R5,?V1
   \   000047   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000049   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   00004B   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00004E   7402         MOV       A,#0x2
   \   000050   12....       LCALL     ?DEALLOC_XSTACK8
   \   000053   7F06         MOV       R7,#0x6
   \   000055   02....       LJMP      ?BANKED_LEAVE_XDATA
   1360          }
   1361          
   1362          /*********************************************************************
   1363           * @fn          ZDP_MgmtPermitJoinReq
   1364           *
   1365           * @brief       This builds and send a Mgmt_Permit_Join_req message.
   1366           *
   1367           * @param       dstAddr - destination address of the message
   1368           * @param       duration - Permit duration
   1369           * @param       TcSignificance - Trust Center Significance
   1370           *
   1371           * @return      afStatus_t
   1372           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1373          afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
   \                     ZDP_MgmtPermitJoinReq:
   1374                                            byte TcSignificance, byte SecurityEnable )
   1375          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   89..         MOV       ?V1,R1
   \   000010   8C..         MOV       ?V2,R4
   \   000012   8D..         MOV       ?V0,R5
   1376            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1377          
   1378            // Build buffer
   1379            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
   \   000014   E5..         MOV       A,?V1
   \   000016   C0E0         PUSH      A
   \   000018   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F8           MOV       R0,A
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F583         MOV       DPH,A
   \   000021   8882         MOV       DPL,R0
   \   000023   D0E0         POP       A
   \   000025   F0           MOVX      @DPTR,A
   1380            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
   \   000026   E5..         MOV       A,?V2
   \   000028   C0E0         PUSH      A
   \   00002A   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F8           MOV       R0,A
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F583         MOV       DPH,A
   \   000033   8882         MOV       DPL,R0
   \   000035   A3           INC       DPTR
   \   000036   D0E0         POP       A
   \   000038   F0           MOVX      @DPTR,A
   1381          
   1382            // Check of this is a broadcast message
   1383            if ( (dstAddr) && ((dstAddr->addrMode == Addr16Bit) || (dstAddr->addrMode == AddrBroadcast))
   1384                && ((dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL)
   1385                    || (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR)
   1386                    || (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVRXON)) )
   \   000039   EE           MOV       A,R6
   \   00003A   4F           ORL       A,R7
   \   00003B   7003         JNZ       $+5
   \   00003D   02....       LJMP      ??ZDP_MgmtPermitJoinReq_0 & 0xFFFF
   \   000040   8E82         MOV       DPL,R6
   \   000042   8F83         MOV       DPH,R7
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   6402         XRL       A,#0x2
   \   00004F   6011         JZ        ??ZDP_MgmtPermitJoinReq_1
   \   000051   8E82         MOV       DPL,R6
   \   000053   8F83         MOV       DPH,R7
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   640F         XRL       A,#0xf
   \   000060   7062         JNZ       ??ZDP_MgmtPermitJoinReq_0
   \                     ??ZDP_MgmtPermitJoinReq_1:
   \   000062   8E82         MOV       DPL,R6
   \   000064   8F83         MOV       DPH,R7
   \   000066   E0           MOVX      A,@DPTR
   \   000067   64FF         XRL       A,#0xff
   \   000069   7004         JNZ       ??ZDP_MgmtPermitJoinReq_2
   \   00006B   A3           INC       DPTR
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   64FF         XRL       A,#0xff
   \                     ??ZDP_MgmtPermitJoinReq_2:
   \   00006F   601E         JZ        ??ZDP_MgmtPermitJoinReq_3
   \   000071   8E82         MOV       DPL,R6
   \   000073   8F83         MOV       DPH,R7
   \   000075   E0           MOVX      A,@DPTR
   \   000076   64FC         XRL       A,#0xfc
   \   000078   7004         JNZ       ??ZDP_MgmtPermitJoinReq_4
   \   00007A   A3           INC       DPTR
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   64FF         XRL       A,#0xff
   \                     ??ZDP_MgmtPermitJoinReq_4:
   \   00007E   600F         JZ        ??ZDP_MgmtPermitJoinReq_3
   \   000080   8E82         MOV       DPL,R6
   \   000082   8F83         MOV       DPH,R7
   \   000084   E0           MOVX      A,@DPTR
   \   000085   64FD         XRL       A,#0xfd
   \   000087   7004         JNZ       ??ZDP_MgmtPermitJoinReq_5
   \   000089   A3           INC       DPTR
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   64FF         XRL       A,#0xff
   \                     ??ZDP_MgmtPermitJoinReq_5:
   \   00008D   7035         JNZ       ??ZDP_MgmtPermitJoinReq_0
   1387            {
   1388              // Send this to our self as well as broadcast to network
   1389              zAddrType_t tmpAddr;
   1390          
   1391              tmpAddr.addrMode = Addr16Bit;
   \                     ??ZDP_MgmtPermitJoinReq_3:
   \   00008F   7408         MOV       A,#0x8
   \   000091   12....       LCALL     ?XSTACK_DISP0_8
   \   000094   7402         MOV       A,#0x2
   \   000096   F0           MOVX      @DPTR,A
   1392              tmpAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000097                ; Setup parameters for call to function NLME_GetShortAddr
   \   000097   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00009A   85..82       MOV       DPL,?XSP + 0
   \   00009D   85..83       MOV       DPH,?XSP + 1
   \   0000A0   EA           MOV       A,R2
   \   0000A1   F0           MOVX      @DPTR,A
   \   0000A2   A3           INC       DPTR
   \   0000A3   EB           MOV       A,R3
   \   0000A4   F0           MOVX      @DPTR,A
   1393          
   1394              fillAndSend( &ZDP_TransID, &tmpAddr, Mgmt_Permit_Join_req,
   1395                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \   0000A5                ; Setup parameters for call to function fillAndSend
   \   0000A5   75..36       MOV       ?V4,#0x36
   \   0000A8   75..00       MOV       ?V5,#0x0
   \   0000AB   78..         MOV       R0,#?V4
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B0   7902         MOV       R1,#0x2
   \   0000B2   7402         MOV       A,#0x2
   \   0000B4   12....       LCALL     ?XSTACK_DISP102_8
   \   0000B7   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   0000B9   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   0000BB   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000BE   7402         MOV       A,#0x2
   \   0000C0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C3   E9           MOV       A,R1
   1396            }
   1397          
   1398            // Send the message
   1399            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
   1400                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \                     ??ZDP_MgmtPermitJoinReq_0:
   \   0000C4                ; Setup parameters for call to function fillAndSend
   \   0000C4   75..36       MOV       ?V4,#0x36
   \   0000C7   75..00       MOV       ?V5,#0x0
   \   0000CA   78..         MOV       R0,#?V4
   \   0000CC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CF   7902         MOV       R1,#0x2
   \   0000D1   EE           MOV       A,R6
   \   0000D2   FC           MOV       R4,A
   \   0000D3   EF           MOV       A,R7
   \   0000D4   FD           MOV       R5,A
   \   0000D5   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   0000D7   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   0000D9   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000DC   7402         MOV       A,#0x2
   \   0000DE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E1   7409         MOV       A,#0x9
   \   0000E3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E6   7F06         MOV       R7,#0x6
   \   0000E8   02....       LJMP      ?BANKED_LEAVE_XDATA
   1401          }
   1402          
   1403          /*********************************************************************
   1404           * @fn          ZDP_MgmtLeaveReq
   1405           *
   1406           * @brief       This builds and send a Mgmt_Leave_req message.
   1407           *
   1408           * @param       dstAddr - destination address of the message
   1409           *              IEEEAddr - IEEE adddress of device that is removed
   1410           *              RemoveChildren - set to 1 to remove the children of the
   1411           *                                device as well. 0 otherwise.
   1412           *              Rejoin - set to 1 if the removed device should rejoin
   1413                                   afterwards. 0 otherwise.
   1414           *
   1415           * @return      afStatus_t
   1416           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1417          afStatus_t ZDP_MgmtLeaveReq( zAddrType_t *dstAddr, uint8 *IEEEAddr, uint8 RemoveChildren,
   \                     ZDP_MgmtLeaveReq:
   1418                           uint8 Rejoin, uint8 SecurityEnable )
   1419          
   1420          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   \   00000D   89..         MOV       ?V3,R1
   \   00000F   740E         MOV       A,#0xe
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V2,A
   1421            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1422          
   1423            osal_cpyExtAddr( ZDP_TmpBuf, IEEEAddr );
   \   000017                ; Setup parameters for call to function sAddrExtCpy
   \   000017   AC..         MOV       R4,?V0
   \   000019   AD..         MOV       R5,?V1
   \   00001B   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   FA           MOV       R2,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   FB           MOV       R3,A
   \   000023   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1424            ZDP_TmpBuf[Z_EXTADDR_LEN] = 0;
   \   000026   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F8           MOV       R0,A
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   C8           XCH       A,R0
   \   00002E   2408         ADD       A,#0x8
   \   000030   F582         MOV       DPL,A
   \   000032   C8           XCH       A,R0
   \   000033   3400         ADDC      A,#0x0
   \   000035   F583         MOV       DPH,A
   \   000037   7400         MOV       A,#0x0
   \   000039   F0           MOVX      @DPTR,A
   1425          
   1426            if ( RemoveChildren == TRUE )
   \   00003A   7401         MOV       A,#0x1
   \   00003C   65..         XRL       A,?V3
   \   00003E   7015         JNZ       ??ZDP_MgmtLeaveReq_0
   1427            {
   1428              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_RC;
   \   000040   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000043   E0           MOVX      A,@DPTR
   \   000044   F8           MOV       R0,A
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   C8           XCH       A,R0
   \   000048   2408         ADD       A,#0x8
   \   00004A   F582         MOV       DPL,A
   \   00004C   C8           XCH       A,R0
   \   00004D   3400         ADDC      A,#0x0
   \   00004F   F583         MOV       DPH,A
   \   000051   E0           MOVX      A,@DPTR
   \   000052   D2E6         SETB      0xE0 /* A   */.6
   \   000054   F0           MOVX      @DPTR,A
   1429            }
   1430            if ( Rejoin == TRUE )
   \                     ??ZDP_MgmtLeaveReq_0:
   \   000055   7401         MOV       A,#0x1
   \   000057   65..         XRL       A,?V2
   \   000059   7015         JNZ       ??ZDP_MgmtLeaveReq_1
   1431            {
   1432              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_REJOIN;
   \   00005B   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F8           MOV       R0,A
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   C8           XCH       A,R0
   \   000063   2408         ADD       A,#0x8
   \   000065   F582         MOV       DPL,A
   \   000067   C8           XCH       A,R0
   \   000068   3400         ADDC      A,#0x0
   \   00006A   F583         MOV       DPH,A
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   D2E7         SETB      0xE0 /* A   */.7
   \   00006F   F0           MOVX      @DPTR,A
   1433            }
   1434          
   1435            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Leave_req, (Z_EXTADDR_LEN + 1) );
   \                     ??ZDP_MgmtLeaveReq_1:
   \   000070                ; Setup parameters for call to function fillAndSend
   \   000070   75..34       MOV       ?V4,#0x34
   \   000073   75..00       MOV       ?V5,#0x0
   \   000076   78..         MOV       R0,#?V4
   \   000078   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007B   7909         MOV       R1,#0x9
   \   00007D   EE           MOV       A,R6
   \   00007E   FC           MOV       R4,A
   \   00007F   EF           MOV       A,R7
   \   000080   FD           MOV       R5,A
   \   000081   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000083   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000085   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000088   7402         MOV       A,#0x2
   \   00008A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008D   7F06         MOV       R7,#0x6
   \   00008F   02....       LJMP      ?BANKED_LEAVE_XDATA
   1436          }
   1437          
   1438          /*********************************************************************
   1439           * @fn          ZDP_MgmtNwkUpdateReq
   1440           *
   1441           * @brief       This builds and send a Mgmt_NWK_Update_req message. This
   1442           *              function sends a unicast or broadcast message.
   1443           *
   1444           * @param       dstAddr - destination address of the message
   1445           * @param       ChannelMask - 32 bit address bit map
   1446           * @param       ScanDuration - length of time to spend scanning each channel
   1447           * @param       ScanCount - number of energy scans to be conducted
   1448           * @param       NwkUpdateId - NWk Update Id value
   1449           * @param       NwkManagerAddr - NWK address for device with Network Manager
   1450           *                               bit set in its Node Descriptor
   1451           *
   1452           * @return      afStatus_t
   1453           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1454          afStatus_t ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateReq:
   1455                                           uint32 ChannelMask,
   1456                                           uint8 ScanDuration,
   1457                                           uint8 ScanCount,
   1458                                           uint8 NwkUpdateId,
   1459                                           uint16 NwkManagerAddr )
   1460          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V12,R2
   \   000007   8B..         MOV       ?V13,R3
   \   000009   E9           MOV       A,R1
   \   00000A   FF           MOV       R7,A
   \   00000B   8C..         MOV       ?V9,R4
   \   00000D   8D..         MOV       ?V8,R5
   \   00000F   7416         MOV       A,#0x16
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   78..         MOV       R0,#?V4
   \   000016   12....       LCALL     ?L_MOV_X
   \   000019   741A         MOV       A,#0x1a
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V2,A
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F5..         MOV       ?V3,A
   1461            uint8 *pBuf = ZDP_TmpBuf;
   \   000025   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F5..         MOV       ?V0,A
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F5..         MOV       ?V1,A
   1462            byte len = sizeof( uint32 ) + 1;  // ChannelMask + ScanDuration
   \   00002F   7E05         MOV       R6,#0x5
   1463          
   1464            pBuf = osal_buffer_uint32( pBuf, ChannelMask );
   \   000031                ; Setup parameters for call to function osal_buffer_uint32
   \   000031   78..         MOV       R0,#?V4
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000036   AA..         MOV       R2,?V0
   \   000038   AB..         MOV       R3,?V1
   \   00003A   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00003D   7404         MOV       A,#0x4
   \   00003F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000042   8A..         MOV       ?V10,R2
   \   000044   8B..         MOV       ?V11,R3
   \   000046   85....       MOV       ?V0,?V10
   \   000049   85....       MOV       ?V1,?V11
   1465          
   1466            *pBuf++ = ScanDuration;
   \   00004C   EF           MOV       A,R7
   \   00004D   C0E0         PUSH      A
   \   00004F   85..82       MOV       DPL,?V0
   \   000052   85..83       MOV       DPH,?V1
   \   000055   D0E0         POP       A
   \   000057   F0           MOVX      @DPTR,A
   \   000058   85..82       MOV       DPL,?V0
   \   00005B   85..83       MOV       DPH,?V1
   \   00005E   A3           INC       DPTR
   \   00005F   8582..       MOV       ?V0,DPL
   \   000062   8583..       MOV       ?V1,DPH
   1467          
   1468            if ( ScanDuration <= 0x05 )
   \   000065   EF           MOV       A,R7
   \   000066   C3           CLR       C
   \   000067   9406         SUBB      A,#0x6
   \   000069   501D         JNC       ??ZDP_MgmtNwkUpdateReq_0
   1469            {
   1470              // Request is to scan over channelMask
   1471              len += sizeof( uint8 );
   \   00006B   0E           INC       R6
   1472          
   1473              *pBuf++ = ScanCount;
   \   00006C   E5..         MOV       A,?V9
   \   00006E   C0E0         PUSH      A
   \   000070   85..82       MOV       DPL,?V0
   \   000073   85..83       MOV       DPH,?V1
   \   000076   D0E0         POP       A
   \   000078   F0           MOVX      @DPTR,A
   \   000079   85..82       MOV       DPL,?V0
   \   00007C   85..83       MOV       DPH,?V1
   \   00007F   A3           INC       DPTR
   \   000080   8582..       MOV       ?V0,DPL
   \   000083   8583..       MOV       ?V1,DPH
   \   000086   8068         SJMP      ??ZDP_MgmtNwkUpdateReq_1
   1474            }
   1475            else if ( ( ScanDuration == 0xFE ) || ( ScanDuration == 0xFF ) )
   \                     ??ZDP_MgmtNwkUpdateReq_0:
   \   000088   74FE         MOV       A,#-0x2
   \   00008A   6F           XRL       A,R7
   \   00008B   6005         JZ        ??ZDP_MgmtNwkUpdateReq_2
   \   00008D   74FF         MOV       A,#-0x1
   \   00008F   6F           XRL       A,R7
   \   000090   705E         JNZ       ??ZDP_MgmtNwkUpdateReq_1
   1476            {
   1477              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   1478              len += sizeof( uint8 );
   \                     ??ZDP_MgmtNwkUpdateReq_2:
   \   000092   0E           INC       R6
   1479          
   1480              *pBuf++ = NwkUpdateId;
   \   000093   E5..         MOV       A,?V8
   \   000095   C0E0         PUSH      A
   \   000097   85..82       MOV       DPL,?V0
   \   00009A   85..83       MOV       DPH,?V1
   \   00009D   D0E0         POP       A
   \   00009F   F0           MOVX      @DPTR,A
   \   0000A0   85..82       MOV       DPL,?V0
   \   0000A3   85..83       MOV       DPH,?V1
   \   0000A6   A3           INC       DPTR
   \   0000A7   8582..       MOV       ?V0,DPL
   \   0000AA   8583..       MOV       ?V1,DPH
   1481          
   1482              if ( ScanDuration == 0xFF )
   \   0000AD   74FF         MOV       A,#-0x1
   \   0000AF   6F           XRL       A,R7
   \   0000B0   703E         JNZ       ??ZDP_MgmtNwkUpdateReq_1
   1483              {
   1484                len += sizeof( uint16 );
   \   0000B2   7402         MOV       A,#0x2
   \   0000B4   2E           ADD       A,R6
   \   0000B5   FE           MOV       R6,A
   1485          
   1486                *pBuf++  = LO_UINT16( NwkManagerAddr );
   \   0000B6   E5..         MOV       A,?V2
   \   0000B8   C0E0         PUSH      A
   \   0000BA   85..82       MOV       DPL,?V0
   \   0000BD   85..83       MOV       DPH,?V1
   \   0000C0   D0E0         POP       A
   \   0000C2   F0           MOVX      @DPTR,A
   \   0000C3   85..82       MOV       DPL,?V0
   \   0000C6   85..83       MOV       DPH,?V1
   \   0000C9   A3           INC       DPTR
   \   0000CA   8582..       MOV       ?V0,DPL
   \   0000CD   8583..       MOV       ?V1,DPH
   1487                *pBuf++  = HI_UINT16( NwkManagerAddr );
   \   0000D0   A8..         MOV       R0,?V2
   \   0000D2   A9..         MOV       R1,?V3
   \   0000D4   E4           CLR       A
   \   0000D5   C9           XCH       A,R1
   \   0000D6   F8           MOV       R0,A
   \   0000D7   E8           MOV       A,R0
   \   0000D8   C0E0         PUSH      A
   \   0000DA   85..82       MOV       DPL,?V0
   \   0000DD   85..83       MOV       DPH,?V1
   \   0000E0   D0E0         POP       A
   \   0000E2   F0           MOVX      @DPTR,A
   \   0000E3   85..82       MOV       DPL,?V0
   \   0000E6   85..83       MOV       DPH,?V1
   \   0000E9   A3           INC       DPTR
   \   0000EA   8582..       MOV       ?V0,DPL
   \   0000ED   8583..       MOV       ?V1,DPH
   1488              }
   1489            }
   1490          
   1491            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Update_req, len );
   \                     ??ZDP_MgmtNwkUpdateReq_1:
   \   0000F0                ; Setup parameters for call to function fillAndSend
   \   0000F0   75..38       MOV       ?V10,#0x38
   \   0000F3   75..00       MOV       ?V11,#0x0
   \   0000F6   78..         MOV       R0,#?V10
   \   0000F8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FB   EE           MOV       A,R6
   \   0000FC   F9           MOV       R1,A
   \   0000FD   AC..         MOV       R4,?V12
   \   0000FF   AD..         MOV       R5,?V13
   \   000101   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000103   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000105   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000108   7402         MOV       A,#0x2
   \   00010A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00010D   7F0E         MOV       R7,#0xe
   \   00010F   02....       LJMP      ?BANKED_LEAVE_XDATA
   1492          }
   1493          
   1494          
   1495          /*********************************************************************
   1496           * Network Management Responses
   1497           */
   1498          
   1499          /*********************************************************************
   1500           * @fn          ZDP_MgmtNwkDiscRsp
   1501           *
   1502           * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
   1503           *              function sends a unicast message.
   1504           *
   1505           * @param       dstAddr - destination address of the message
   1506           * @param       Status - message status (ZDP_SUCCESS or other)
   1507           * @param       NetworkCount - Total number of networks found
   1508           * @param       StartIndex - Starting index within the reporting network
   1509           *                           list
   1510           * @param       NetworkListCount - number of network lists included
   1511           *                                 in this message
   1512           * @param       NetworkList - List of network descriptors
   1513           * @param       SecurityEnable - Security Options
   1514           *
   1515           * @return      afStatus_t
   1516           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1517          afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscRsp:
   1518                                      byte Status,
   1519                                      byte NetworkCount,
   1520                                      byte StartIndex,
   1521                                      byte NetworkListCount,
   1522                                      networkDesc_t *NetworkList,
   1523                                      byte SecurityEnable )
   1524          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   C0E0         PUSH      A
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   D0E0         POP       A
   \   000015   F0           MOVX      @DPTR,A
   \   000016   8A..         MOV       ?V14,R2
   \   000018   8B..         MOV       ?V15,R3
   \   00001A   8C..         MOV       ?V12,R4
   \   00001C   8D..         MOV       ?V11,R5
   \   00001E   7419         MOV       A,#0x19
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F5..         MOV       ?V10,A
   \   000026   741A         MOV       A,#0x1a
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F5..         MOV       ?V3,A
   \   00002E   741B         MOV       A,#0x1b
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F5..         MOV       ?V0,A
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F5..         MOV       ?V1,A
   1525            uint8 *buf;
   1526            uint8 *pBuf;
   1527            byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
   \   00003A   75..04       MOV       ?V2,#0x4
   1528            byte idx;
   1529          
   1530            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1531          
   1532            len += (NetworkListCount * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
   \   00003D   75F00C       MOV       B,#0xc
   \   000040   E5..         MOV       A,?V3
   \   000042   A4           MUL       AB
   \   000043   25..         ADD       A,?V2
   \   000045   F5..         MOV       ?V2,A
   1533          
   1534            buf = osal_mem_alloc( len+1 );
   \   000047                ; Setup parameters for call to function osal_mem_alloc
   \   000047   E5..         MOV       A,?V2
   \   000049   F8           MOV       R0,A
   \   00004A   7900         MOV       R1,#0x0
   \   00004C   E8           MOV       A,R0
   \   00004D   2401         ADD       A,#0x1
   \   00004F   FA           MOV       R2,A
   \   000050   E4           CLR       A
   \   000051   39           ADDC      A,R1
   \   000052   FB           MOV       R3,A
   \   000053   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000056   8A..         MOV       ?V8,R2
   \   000058   8B..         MOV       ?V9,R3
   \   00005A   85....       MOV       ?V6,?V8
   \   00005D   85....       MOV       ?V7,?V9
   1535            if ( buf == NULL )
   \   000060   E5..         MOV       A,?V6
   \   000062   45..         ORL       A,?V7
   \   000064   7005         JNZ       ??ZDP_MgmtNwkDiscRsp_0
   1536            {
   1537              return afStatus_MEM_FAIL;
   \   000066   7910         MOV       R1,#0x10
   \   000068   02....       LJMP      ??ZDP_MgmtNwkDiscRsp_1 & 0xFFFF
   1538            }
   1539          
   1540            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkDiscRsp_0:
   \   00006B   85..82       MOV       DPL,?V6
   \   00006E   85..83       MOV       DPH,?V7
   \   000071   A3           INC       DPTR
   \   000072   AE82         MOV       R6,DPL
   \   000074   AF83         MOV       R7,DPH
   1541          
   1542            *pBuf++ = Status;
   \   000076   E5..         MOV       A,?V12
   \   000078   C0E0         PUSH      A
   \   00007A   8E82         MOV       DPL,R6
   \   00007C   8F83         MOV       DPH,R7
   \   00007E   D0E0         POP       A
   \   000080   F0           MOVX      @DPTR,A
   \   000081   8E82         MOV       DPL,R6
   \   000083   8F83         MOV       DPH,R7
   \   000085   A3           INC       DPTR
   \   000086   AE82         MOV       R6,DPL
   \   000088   AF83         MOV       R7,DPH
   1543            *pBuf++ = NetworkCount;
   \   00008A   E5..         MOV       A,?V11
   \   00008C   C0E0         PUSH      A
   \   00008E   8E82         MOV       DPL,R6
   \   000090   8F83         MOV       DPH,R7
   \   000092   D0E0         POP       A
   \   000094   F0           MOVX      @DPTR,A
   \   000095   8E82         MOV       DPL,R6
   \   000097   8F83         MOV       DPH,R7
   \   000099   A3           INC       DPTR
   \   00009A   AE82         MOV       R6,DPL
   \   00009C   AF83         MOV       R7,DPH
   1544            *pBuf++ = StartIndex;
   \   00009E   E5..         MOV       A,?V10
   \   0000A0   C0E0         PUSH      A
   \   0000A2   8E82         MOV       DPL,R6
   \   0000A4   8F83         MOV       DPH,R7
   \   0000A6   D0E0         POP       A
   \   0000A8   F0           MOVX      @DPTR,A
   \   0000A9   8E82         MOV       DPL,R6
   \   0000AB   8F83         MOV       DPH,R7
   \   0000AD   A3           INC       DPTR
   \   0000AE   AE82         MOV       R6,DPL
   \   0000B0   AF83         MOV       R7,DPH
   1545            *pBuf++ = NetworkListCount;
   \   0000B2   E5..         MOV       A,?V3
   \   0000B4   C0E0         PUSH      A
   \   0000B6   8E82         MOV       DPL,R6
   \   0000B8   8F83         MOV       DPH,R7
   \   0000BA   D0E0         POP       A
   \   0000BC   F0           MOVX      @DPTR,A
   \   0000BD   8E82         MOV       DPL,R6
   \   0000BF   8F83         MOV       DPH,R7
   \   0000C1   A3           INC       DPTR
   \   0000C2   AE82         MOV       R6,DPL
   \   0000C4   AF83         MOV       R7,DPH
   1546          
   1547            for ( idx = 0; idx < NetworkListCount; idx++ )
   \   0000C6   75..00       MOV       ?V4,#0x0
   \                     ??ZDP_MgmtNwkDiscRsp_2:
   \   0000C9   E5..         MOV       A,?V4
   \   0000CB   C3           CLR       C
   \   0000CC   95..         SUBB      A,?V3
   \   0000CE   4003         JC        $+5
   \   0000D0   02....       LJMP      ??ZDP_MgmtNwkDiscRsp_3 & 0xFFFF
   1548            {
   1549              osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
   \   0000D3                ; Setup parameters for call to function sAddrExtCpy
   \   0000D3   E5..         MOV       A,?V0
   \   0000D5   240B         ADD       A,#0xb
   \   0000D7   FC           MOV       R4,A
   \   0000D8   E4           CLR       A
   \   0000D9   35..         ADDC      A,?V1
   \   0000DB   FD           MOV       R5,A
   \   0000DC   EE           MOV       A,R6
   \   0000DD   FA           MOV       R2,A
   \   0000DE   EF           MOV       A,R7
   \   0000DF   FB           MOV       R3,A
   \   0000E0   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1550              pBuf += Z_EXTADDR_LEN;
   \   0000E3   EE           MOV       A,R6
   \   0000E4   2408         ADD       A,#0x8
   \   0000E6   FE           MOV       R6,A
   \   0000E7   5001         JNC       ??ZDP_MgmtNwkDiscRsp_4
   \   0000E9   0F           INC       R7
   1551          
   1552              *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
   \                     ??ZDP_MgmtNwkDiscRsp_4:
   \   0000EA   85..82       MOV       DPL,?V0
   \   0000ED   85..83       MOV       DPH,?V1
   \   0000F0   A3           INC       DPTR
   \   0000F1   A3           INC       DPTR
   \   0000F2   E0           MOVX      A,@DPTR
   \   0000F3   C0E0         PUSH      A
   \   0000F5   8E82         MOV       DPL,R6
   \   0000F7   8F83         MOV       DPH,R7
   \   0000F9   D0E0         POP       A
   \   0000FB   F0           MOVX      @DPTR,A
   \   0000FC   8E82         MOV       DPL,R6
   \   0000FE   8F83         MOV       DPH,R7
   \   000100   A3           INC       DPTR
   \   000101   AE82         MOV       R6,DPL
   \   000103   AF83         MOV       R7,DPH
   1553              *pBuf    = NetworkList->stackProfile;                  // Stack profile
   \   000105   85..82       MOV       DPL,?V0
   \   000108   85..83       MOV       DPH,?V1
   \   00010B   A3           INC       DPTR
   \   00010C   A3           INC       DPTR
   \   00010D   A3           INC       DPTR
   \   00010E   A3           INC       DPTR
   \   00010F   A3           INC       DPTR
   \   000110   A3           INC       DPTR
   \   000111   E0           MOVX      A,@DPTR
   \   000112   C0E0         PUSH      A
   \   000114   8E82         MOV       DPL,R6
   \   000116   8F83         MOV       DPH,R7
   \   000118   D0E0         POP       A
   \   00011A   F0           MOVX      @DPTR,A
   1554              *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
   \   00011B   85..82       MOV       DPL,?V0
   \   00011E   85..83       MOV       DPH,?V1
   \   000121   A3           INC       DPTR
   \   000122   A3           INC       DPTR
   \   000123   A3           INC       DPTR
   \   000124   A3           INC       DPTR
   \   000125   A3           INC       DPTR
   \   000126   E0           MOVX      A,@DPTR
   \   000127   C4           SWAP      A
   \   000128   54F0         ANL       A,#0xf0
   \   00012A   F8           MOV       R0,A
   \   00012B   8E82         MOV       DPL,R6
   \   00012D   8F83         MOV       DPH,R7
   \   00012F   E0           MOVX      A,@DPTR
   \   000130   48           ORL       A,R0
   \   000131   F0           MOVX      @DPTR,A
   \   000132   8E82         MOV       DPL,R6
   \   000134   8F83         MOV       DPH,R7
   \   000136   A3           INC       DPTR
   \   000137   AE82         MOV       R6,DPL
   \   000139   AF83         MOV       R7,DPH
   1555              *pBuf    = BEACON_ORDER_NO_BEACONS;                    // Beacon Order
   \   00013B   8E82         MOV       DPL,R6
   \   00013D   8F83         MOV       DPH,R7
   \   00013F   740F         MOV       A,#0xf
   \   000141   F0           MOVX      @DPTR,A
   1556              *pBuf++ |= (uint8)(BEACON_ORDER_NO_BEACONS << 4);      // Superframe Order
   \   000142   8E82         MOV       DPL,R6
   \   000144   8F83         MOV       DPH,R7
   \   000146   E0           MOVX      A,@DPTR
   \   000147   44F0         ORL       A,#0xf0
   \   000149   F0           MOVX      @DPTR,A
   \   00014A   8E82         MOV       DPL,R6
   \   00014C   8F83         MOV       DPH,R7
   \   00014E   A3           INC       DPTR
   \   00014F   AE82         MOV       R6,DPL
   \   000151   AF83         MOV       R7,DPH
   1557          
   1558              if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
   \   000153   85..82       MOV       DPL,?V0
   \   000156   85..83       MOV       DPH,?V1
   \   000159   A3           INC       DPTR
   \   00015A   A3           INC       DPTR
   \   00015B   A3           INC       DPTR
   \   00015C   A3           INC       DPTR
   \   00015D   A3           INC       DPTR
   \   00015E   A3           INC       DPTR
   \   00015F   A3           INC       DPTR
   \   000160   E0           MOVX      A,@DPTR
   \   000161   64FE         XRL       A,#0xfe
   \   000163   7004         JNZ       ??ZDP_MgmtNwkDiscRsp_5
   \   000165   A3           INC       DPTR
   \   000166   E0           MOVX      A,@DPTR
   \   000167   64FF         XRL       A,#0xff
   \                     ??ZDP_MgmtNwkDiscRsp_5:
   \   000169   6012         JZ        ??ZDP_MgmtNwkDiscRsp_6
   1559              {
   1560                *pBuf++ = TRUE;                         // Permit Joining
   \   00016B   8E82         MOV       DPL,R6
   \   00016D   8F83         MOV       DPH,R7
   \   00016F   7401         MOV       A,#0x1
   \   000171   F0           MOVX      @DPTR,A
   \   000172   8E82         MOV       DPL,R6
   \   000174   8F83         MOV       DPH,R7
   \   000176   A3           INC       DPTR
   \   000177   AE82         MOV       R6,DPL
   \   000179   AF83         MOV       R7,DPH
   \   00017B   8010         SJMP      ??ZDP_MgmtNwkDiscRsp_7
   1561              }
   1562              else
   1563              {
   1564                *pBuf++ = FALSE;
   \                     ??ZDP_MgmtNwkDiscRsp_6:
   \   00017D   8E82         MOV       DPL,R6
   \   00017F   8F83         MOV       DPH,R7
   \   000181   7400         MOV       A,#0x0
   \   000183   F0           MOVX      @DPTR,A
   \   000184   8E82         MOV       DPL,R6
   \   000186   8F83         MOV       DPH,R7
   \   000188   A3           INC       DPTR
   \   000189   AE82         MOV       R6,DPL
   \   00018B   AF83         MOV       R7,DPH
   1565              }
   1566          
   1567              NetworkList = NetworkList->nextDesc;    // Move to next list entry
   \                     ??ZDP_MgmtNwkDiscRsp_7:
   \   00018D   E5..         MOV       A,?V0
   \   00018F   2414         ADD       A,#0x14
   \   000191   F582         MOV       DPL,A
   \   000193   E4           CLR       A
   \   000194   35..         ADDC      A,?V1
   \   000196   F583         MOV       DPH,A
   \   000198   E0           MOVX      A,@DPTR
   \   000199   F5..         MOV       ?V0,A
   \   00019B   A3           INC       DPTR
   \   00019C   E0           MOVX      A,@DPTR
   \   00019D   F5..         MOV       ?V1,A
   1568            }
   \   00019F   05..         INC       ?V4
   \   0001A1   02....       LJMP      ??ZDP_MgmtNwkDiscRsp_2 & 0xFFFF
   1569          
   1570            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
   \                     ??ZDP_MgmtNwkDiscRsp_3:
   \   0001A4   85..82       MOV       DPL,?V6
   \   0001A7   85..83       MOV       DPH,?V7
   \   0001AA   A3           INC       DPTR
   \   0001AB   A882         MOV       R0,DPL
   \   0001AD   A983         MOV       R1,DPH
   \   0001AF   90....       MOV       DPTR,#ZDP_TmpBuf
   \   0001B2   E8           MOV       A,R0
   \   0001B3   F0           MOVX      @DPTR,A
   \   0001B4   A3           INC       DPTR
   \   0001B5   E9           MOV       A,R1
   \   0001B6   F0           MOVX      @DPTR,A
   \   0001B7                ; Setup parameters for call to function fillAndSend
   \   0001B7   75..30       MOV       ?V8,#0x30
   \   0001BA   75..80       MOV       ?V9,#-0x80
   \   0001BD   78..         MOV       R0,#?V8
   \   0001BF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001C2   A9..         MOV       R1,?V2
   \   0001C4   AC..         MOV       R4,?V14
   \   0001C6   AD..         MOV       R5,?V15
   \   0001C8   7402         MOV       A,#0x2
   \   0001CA   12....       LCALL     ?XSTACK_DISP101_8
   \   0001CD   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0001D0   7402         MOV       A,#0x2
   \   0001D2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001D5   E9           MOV       A,R1
   \   0001D6   F5..         MOV       ?V5,A
   \   0001D8                ; Setup parameters for call to function osal_mem_free
   \   0001D8   AA..         MOV       R2,?V6
   \   0001DA   AB..         MOV       R3,?V7
   \   0001DC   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001DF   90....       MOV       DPTR,#ZDP_TmpBuf
   \   0001E2   74..         MOV       A,#(ZDP_Buf + 1) & 0xff
   \   0001E4   F0           MOVX      @DPTR,A
   \   0001E5   A3           INC       DPTR
   \   0001E6   74..         MOV       A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   0001E8   F0           MOVX      @DPTR,A
   \   0001E9   A9..         MOV       R1,?V5
   \                     ??ZDP_MgmtNwkDiscRsp_1:
   \   0001EB   7401         MOV       A,#0x1
   \   0001ED   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001F0   7F10         MOV       R7,#0x10
   \   0001F2   02....       LJMP      ?BANKED_LEAVE_XDATA
   1571          }
   1572          
   1573          /*********************************************************************
   1574           * @fn          ZDP_MgmtLqiRsp
   1575           *
   1576           * @brief       This builds and send a Mgmt_Lqi_rsp message. This
   1577           *              function sends a unicast message.
   1578           *
   1579           * @param       dstAddr - destination address of the message
   1580           * @param       Status - message status (ZDP_SUCCESS or other)
   1581           * @param       NeighborLqiEntries - Total number of entries found
   1582           * @param       StartIndex - Starting index within the reporting list
   1583           * @param       NeighborLqiCount - number of lists included
   1584           *                                 in this message
   1585           * @param       NeighborLqiList - List of NeighborLqiItems.  This list
   1586           *                is the list to be sent, not the entire list
   1587           * @param       SecurityEnable - true if secure
   1588           *
   1589           * @return      ZStatus_t
   1590           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1591          ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtLqiRsp:
   1592                                    byte Status,
   1593                                    byte NeighborLqiEntries,
   1594                                    byte StartIndex,
   1595                                    byte NeighborLqiCount,
   1596                                    ZDP_MgmtLqiItem_t* NeighborList,
   1597                                    byte SecurityEnable )
   1598          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   C0E0         PUSH      A
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   D0E0         POP       A
   \   000015   F0           MOVX      @DPTR,A
   \   000016   8A..         MOV       ?V14,R2
   \   000018   8B..         MOV       ?V15,R3
   \   00001A   8C..         MOV       ?V4,R4
   \   00001C   8D..         MOV       ?V12,R5
   \   00001E   7419         MOV       A,#0x19
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F5..         MOV       ?V11,A
   \   000026   741A         MOV       A,#0x1a
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F5..         MOV       ?V6,A
   1599            ZDP_MgmtLqiItem_t* list = NeighborList;
   \   00002E   741B         MOV       A,#0x1b
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F5..         MOV       ?V0,A
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F5..         MOV       ?V1,A
   1600            uint8 *buf, *pBuf;
   1601            byte len, x;
   1602          
   1603            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1604          
   1605            if ( ZSuccess != Status )
   \   00003A   E5..         MOV       A,?V4
   \   00003C   6033         JZ        ??ZDP_MgmtLqiRsp_0
   1606            {
   1607              ZDP_TmpBuf[0] = Status;
   \   00003E   E5..         MOV       A,?V4
   \   000040   C0E0         PUSH      A
   \   000042   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F8           MOV       R0,A
   \   000047   A3           INC       DPTR
   \   000048   E0           MOVX      A,@DPTR
   \   000049   F583         MOV       DPH,A
   \   00004B   8882         MOV       DPL,R0
   \   00004D   D0E0         POP       A
   \   00004F   F0           MOVX      @DPTR,A
   1608              return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
   \   000050                ; Setup parameters for call to function fillAndSend
   \   000050   75..31       MOV       ?V8,#0x31
   \   000053   75..80       MOV       ?V9,#-0x80
   \   000056   78..         MOV       R0,#?V8
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005B   7901         MOV       R1,#0x1
   \   00005D   AC..         MOV       R4,?V14
   \   00005F   AD..         MOV       R5,?V15
   \   000061   7402         MOV       A,#0x2
   \   000063   12....       LCALL     ?XSTACK_DISP101_8
   \   000066   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000069   7402         MOV       A,#0x2
   \   00006B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006E   02....       LJMP      ??ZDP_MgmtLqiRsp_1 & 0xFFFF
   1609            }
   1610          
   1611            // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
   1612            //  neighbor LQI data.
   1613            len = (1 + 1 + 1 + 1) + (NeighborLqiCount * ZDP_MGMTLQI_EXTENDED_SIZE);
   \                     ??ZDP_MgmtLqiRsp_0:
   \   000071   75F016       MOV       B,#0x16
   \   000074   E5..         MOV       A,?V6
   \   000076   A4           MUL       AB
   \   000077   2404         ADD       A,#0x4
   \   000079   F5..         MOV       ?V10,A
   1614          
   1615            buf = osal_mem_alloc( len+1 );
   \   00007B                ; Setup parameters for call to function osal_mem_alloc
   \   00007B   E5..         MOV       A,?V10
   \   00007D   F8           MOV       R0,A
   \   00007E   7900         MOV       R1,#0x0
   \   000080   E8           MOV       A,R0
   \   000081   2401         ADD       A,#0x1
   \   000083   FA           MOV       R2,A
   \   000084   E4           CLR       A
   \   000085   39           ADDC      A,R1
   \   000086   FB           MOV       R3,A
   \   000087   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00008A   8A..         MOV       ?V8,R2
   \   00008C   8B..         MOV       ?V9,R3
   \   00008E   85....       MOV       ?V2,?V8
   \   000091   85....       MOV       ?V3,?V9
   1616            if ( buf == NULL )
   \   000094   E5..         MOV       A,?V2
   \   000096   45..         ORL       A,?V3
   \   000098   7005         JNZ       ??ZDP_MgmtLqiRsp_2
   1617            {
   1618              return afStatus_MEM_FAIL;
   \   00009A   7910         MOV       R1,#0x10
   \   00009C   02....       LJMP      ??ZDP_MgmtLqiRsp_1 & 0xFFFF
   1619            }
   1620          
   1621            pBuf = buf+1;
   \                     ??ZDP_MgmtLqiRsp_2:
   \   00009F   85..82       MOV       DPL,?V2
   \   0000A2   85..83       MOV       DPH,?V3
   \   0000A5   A3           INC       DPTR
   \   0000A6   AE82         MOV       R6,DPL
   \   0000A8   AF83         MOV       R7,DPH
   1622          
   1623            *pBuf++ = Status;
   \   0000AA   E5..         MOV       A,?V4
   \   0000AC   C0E0         PUSH      A
   \   0000AE   8E82         MOV       DPL,R6
   \   0000B0   8F83         MOV       DPH,R7
   \   0000B2   D0E0         POP       A
   \   0000B4   F0           MOVX      @DPTR,A
   \   0000B5   8E82         MOV       DPL,R6
   \   0000B7   8F83         MOV       DPH,R7
   \   0000B9   A3           INC       DPTR
   \   0000BA   AE82         MOV       R6,DPL
   \   0000BC   AF83         MOV       R7,DPH
   1624            *pBuf++ = NeighborLqiEntries;
   \   0000BE   E5..         MOV       A,?V12
   \   0000C0   C0E0         PUSH      A
   \   0000C2   8E82         MOV       DPL,R6
   \   0000C4   8F83         MOV       DPH,R7
   \   0000C6   D0E0         POP       A
   \   0000C8   F0           MOVX      @DPTR,A
   \   0000C9   8E82         MOV       DPL,R6
   \   0000CB   8F83         MOV       DPH,R7
   \   0000CD   A3           INC       DPTR
   \   0000CE   AE82         MOV       R6,DPL
   \   0000D0   AF83         MOV       R7,DPH
   1625            *pBuf++ = StartIndex;
   \   0000D2   E5..         MOV       A,?V11
   \   0000D4   C0E0         PUSH      A
   \   0000D6   8E82         MOV       DPL,R6
   \   0000D8   8F83         MOV       DPH,R7
   \   0000DA   D0E0         POP       A
   \   0000DC   F0           MOVX      @DPTR,A
   \   0000DD   8E82         MOV       DPL,R6
   \   0000DF   8F83         MOV       DPH,R7
   \   0000E1   A3           INC       DPTR
   \   0000E2   AE82         MOV       R6,DPL
   \   0000E4   AF83         MOV       R7,DPH
   1626            *pBuf++ = NeighborLqiCount;
   \   0000E6   E5..         MOV       A,?V6
   \   0000E8   C0E0         PUSH      A
   \   0000EA   8E82         MOV       DPL,R6
   \   0000EC   8F83         MOV       DPH,R7
   \   0000EE   D0E0         POP       A
   \   0000F0   F0           MOVX      @DPTR,A
   \   0000F1   8E82         MOV       DPL,R6
   \   0000F3   8F83         MOV       DPH,R7
   \   0000F5   A3           INC       DPTR
   \   0000F6   AE82         MOV       R6,DPL
   \   0000F8   AF83         MOV       R7,DPH
   1627          
   1628            for ( x = 0; x < NeighborLqiCount; x++ )
   \   0000FA   75..00       MOV       ?V7,#0x0
   \                     ??ZDP_MgmtLqiRsp_3:
   \   0000FD   E5..         MOV       A,?V7
   \   0000FF   C3           CLR       C
   \   000100   95..         SUBB      A,?V6
   \   000102   4003         JC        $+5
   \   000104   02....       LJMP      ??ZDP_MgmtLqiRsp_4 & 0xFFFF
   1629            {
   1630              osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
   \   000107                ; Setup parameters for call to function sAddrExtCpy
   \   000107   E5..         MOV       A,?V0
   \   000109   2402         ADD       A,#0x2
   \   00010B   FC           MOV       R4,A
   \   00010C   E4           CLR       A
   \   00010D   35..         ADDC      A,?V1
   \   00010F   FD           MOV       R5,A
   \   000110   EE           MOV       A,R6
   \   000111   FA           MOV       R2,A
   \   000112   EF           MOV       A,R7
   \   000113   FB           MOV       R3,A
   \   000114   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1631              pBuf += Z_EXTADDR_LEN;
   \   000117   EE           MOV       A,R6
   \   000118   2408         ADD       A,#0x8
   \   00011A   FE           MOV       R6,A
   \   00011B   5001         JNC       ??ZDP_MgmtLqiRsp_5
   \   00011D   0F           INC       R7
   1632          
   1633              // EXTADDR
   1634              pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
   \                     ??ZDP_MgmtLqiRsp_5:
   \   00011E                ; Setup parameters for call to function sAddrExtCpy
   \   00011E   E5..         MOV       A,?V0
   \   000120   240A         ADD       A,#0xa
   \   000122   FC           MOV       R4,A
   \   000123   E4           CLR       A
   \   000124   35..         ADDC      A,?V1
   \   000126   FD           MOV       R5,A
   \   000127   EE           MOV       A,R6
   \   000128   FA           MOV       R2,A
   \   000129   EF           MOV       A,R7
   \   00012A   FB           MOV       R3,A
   \   00012B   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00012E   8A..         MOV       ?V8,R2
   \   000130   8B..         MOV       ?V9,R3
   \   000132   AE..         MOV       R6,?V8
   \   000134   AF..         MOV       R7,?V9
   1635          
   1636              // NWKADDR
   1637              *pBuf++ = LO_UINT16( list->nwkAddr );
   \   000136   E5..         MOV       A,?V0
   \   000138   2412         ADD       A,#0x12
   \   00013A   F582         MOV       DPL,A
   \   00013C   E4           CLR       A
   \   00013D   35..         ADDC      A,?V1
   \   00013F   F583         MOV       DPH,A
   \   000141   E0           MOVX      A,@DPTR
   \   000142   F8           MOV       R0,A
   \   000143   A3           INC       DPTR
   \   000144   E0           MOVX      A,@DPTR
   \   000145   F9           MOV       R1,A
   \   000146   E8           MOV       A,R0
   \   000147   C0E0         PUSH      A
   \   000149   8E82         MOV       DPL,R6
   \   00014B   8F83         MOV       DPH,R7
   \   00014D   D0E0         POP       A
   \   00014F   F0           MOVX      @DPTR,A
   \   000150   8E82         MOV       DPL,R6
   \   000152   8F83         MOV       DPH,R7
   \   000154   A3           INC       DPTR
   \   000155   AE82         MOV       R6,DPL
   \   000157   AF83         MOV       R7,DPH
   1638              *pBuf++ = HI_UINT16( list->nwkAddr );
   \   000159   E5..         MOV       A,?V0
   \   00015B   2412         ADD       A,#0x12
   \   00015D   F582         MOV       DPL,A
   \   00015F   E4           CLR       A
   \   000160   35..         ADDC      A,?V1
   \   000162   F583         MOV       DPH,A
   \   000164   E0           MOVX      A,@DPTR
   \   000165   F8           MOV       R0,A
   \   000166   A3           INC       DPTR
   \   000167   E0           MOVX      A,@DPTR
   \   000168   F9           MOV       R1,A
   \   000169   E4           CLR       A
   \   00016A   C9           XCH       A,R1
   \   00016B   F8           MOV       R0,A
   \   00016C   E8           MOV       A,R0
   \   00016D   C0E0         PUSH      A
   \   00016F   8E82         MOV       DPL,R6
   \   000171   8F83         MOV       DPH,R7
   \   000173   D0E0         POP       A
   \   000175   F0           MOVX      @DPTR,A
   \   000176   8E82         MOV       DPL,R6
   \   000178   8F83         MOV       DPH,R7
   \   00017A   A3           INC       DPTR
   \   00017B   AE82         MOV       R6,DPL
   \   00017D   AF83         MOV       R7,DPH
   1639          
   1640              // DEVICETYPE
   1641              *pBuf = list->devType;
   \   00017F   E5..         MOV       A,?V0
   \   000181   2414         ADD       A,#0x14
   \   000183   F582         MOV       DPL,A
   \   000185   E4           CLR       A
   \   000186   35..         ADDC      A,?V1
   \   000188   F583         MOV       DPH,A
   \   00018A   E0           MOVX      A,@DPTR
   \   00018B   C0E0         PUSH      A
   \   00018D   8E82         MOV       DPL,R6
   \   00018F   8F83         MOV       DPH,R7
   \   000191   D0E0         POP       A
   \   000193   F0           MOVX      @DPTR,A
   1642          
   1643              // RXONIDLE
   1644              *pBuf |= (uint8)(list->rxOnIdle << 2);
   \   000194   E5..         MOV       A,?V0
   \   000196   2415         ADD       A,#0x15
   \   000198   F582         MOV       DPL,A
   \   00019A   E4           CLR       A
   \   00019B   35..         ADDC      A,?V1
   \   00019D   F583         MOV       DPH,A
   \   00019F   E0           MOVX      A,@DPTR
   \   0001A0   33           RLC       A
   \   0001A1   33           RLC       A
   \   0001A2   54FC         ANL       A,#0xfc
   \   0001A4   F8           MOV       R0,A
   \   0001A5   8E82         MOV       DPL,R6
   \   0001A7   8F83         MOV       DPH,R7
   \   0001A9   E0           MOVX      A,@DPTR
   \   0001AA   48           ORL       A,R0
   \   0001AB   F0           MOVX      @DPTR,A
   1645          
   1646              // RELATIONSHIP
   1647              *pBuf++ |= (uint8)(list->relation << 4);
   \   0001AC   E5..         MOV       A,?V0
   \   0001AE   2416         ADD       A,#0x16
   \   0001B0   F582         MOV       DPL,A
   \   0001B2   E4           CLR       A
   \   0001B3   35..         ADDC      A,?V1
   \   0001B5   F583         MOV       DPH,A
   \   0001B7   E0           MOVX      A,@DPTR
   \   0001B8   C4           SWAP      A
   \   0001B9   54F0         ANL       A,#0xf0
   \   0001BB   F8           MOV       R0,A
   \   0001BC   8E82         MOV       DPL,R6
   \   0001BE   8F83         MOV       DPH,R7
   \   0001C0   E0           MOVX      A,@DPTR
   \   0001C1   48           ORL       A,R0
   \   0001C2   F0           MOVX      @DPTR,A
   \   0001C3   8E82         MOV       DPL,R6
   \   0001C5   8F83         MOV       DPH,R7
   \   0001C7   A3           INC       DPTR
   \   0001C8   AE82         MOV       R6,DPL
   \   0001CA   AF83         MOV       R7,DPH
   1648          
   1649              // PERMITJOINING
   1650              *pBuf++ = (uint8)(list->permit);
   \   0001CC   E5..         MOV       A,?V0
   \   0001CE   2417         ADD       A,#0x17
   \   0001D0   F582         MOV       DPL,A
   \   0001D2   E4           CLR       A
   \   0001D3   35..         ADDC      A,?V1
   \   0001D5   F583         MOV       DPH,A
   \   0001D7   E0           MOVX      A,@DPTR
   \   0001D8   C0E0         PUSH      A
   \   0001DA   8E82         MOV       DPL,R6
   \   0001DC   8F83         MOV       DPH,R7
   \   0001DE   D0E0         POP       A
   \   0001E0   F0           MOVX      @DPTR,A
   \   0001E1   8E82         MOV       DPL,R6
   \   0001E3   8F83         MOV       DPH,R7
   \   0001E5   A3           INC       DPTR
   \   0001E6   AE82         MOV       R6,DPL
   \   0001E8   AF83         MOV       R7,DPH
   1651          
   1652              // DEPTH
   1653              *pBuf++ = list->depth;
   \   0001EA   E5..         MOV       A,?V0
   \   0001EC   2418         ADD       A,#0x18
   \   0001EE   F582         MOV       DPL,A
   \   0001F0   E4           CLR       A
   \   0001F1   35..         ADDC      A,?V1
   \   0001F3   F583         MOV       DPH,A
   \   0001F5   E0           MOVX      A,@DPTR
   \   0001F6   C0E0         PUSH      A
   \   0001F8   8E82         MOV       DPL,R6
   \   0001FA   8F83         MOV       DPH,R7
   \   0001FC   D0E0         POP       A
   \   0001FE   F0           MOVX      @DPTR,A
   \   0001FF   8E82         MOV       DPL,R6
   \   000201   8F83         MOV       DPH,R7
   \   000203   A3           INC       DPTR
   \   000204   AE82         MOV       R6,DPL
   \   000206   AF83         MOV       R7,DPH
   1654          
   1655              // LQI
   1656              *pBuf++ = list->lqi;
   \   000208   E5..         MOV       A,?V0
   \   00020A   2419         ADD       A,#0x19
   \   00020C   F582         MOV       DPL,A
   \   00020E   E4           CLR       A
   \   00020F   35..         ADDC      A,?V1
   \   000211   F583         MOV       DPH,A
   \   000213   E0           MOVX      A,@DPTR
   \   000214   C0E0         PUSH      A
   \   000216   8E82         MOV       DPL,R6
   \   000218   8F83         MOV       DPH,R7
   \   00021A   D0E0         POP       A
   \   00021C   F0           MOVX      @DPTR,A
   \   00021D   8E82         MOV       DPL,R6
   \   00021F   8F83         MOV       DPH,R7
   \   000221   A3           INC       DPTR
   \   000222   AE82         MOV       R6,DPL
   \   000224   AF83         MOV       R7,DPH
   1657          
   1658              list++; // next list entry
   \   000226   E5..         MOV       A,?V0
   \   000228   241A         ADD       A,#0x1a
   \   00022A   F5..         MOV       ?V0,A
   \   00022C   5002         JNC       ??ZDP_MgmtLqiRsp_6
   \   00022E   05..         INC       ?V1
   1659            }
   \                     ??ZDP_MgmtLqiRsp_6:
   \   000230   05..         INC       ?V7
   \   000232   02....       LJMP      ??ZDP_MgmtLqiRsp_3 & 0xFFFF
   1660          
   1661            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
   \                     ??ZDP_MgmtLqiRsp_4:
   \   000235   85..82       MOV       DPL,?V2
   \   000238   85..83       MOV       DPH,?V3
   \   00023B   A3           INC       DPTR
   \   00023C   A882         MOV       R0,DPL
   \   00023E   A983         MOV       R1,DPH
   \   000240   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000243   E8           MOV       A,R0
   \   000244   F0           MOVX      @DPTR,A
   \   000245   A3           INC       DPTR
   \   000246   E9           MOV       A,R1
   \   000247   F0           MOVX      @DPTR,A
   \   000248                ; Setup parameters for call to function fillAndSend
   \   000248   75..31       MOV       ?V8,#0x31
   \   00024B   75..80       MOV       ?V9,#-0x80
   \   00024E   78..         MOV       R0,#?V8
   \   000250   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000253   A9..         MOV       R1,?V10
   \   000255   AC..         MOV       R4,?V14
   \   000257   AD..         MOV       R5,?V15
   \   000259   7402         MOV       A,#0x2
   \   00025B   12....       LCALL     ?XSTACK_DISP101_8
   \   00025E   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000261   7402         MOV       A,#0x2
   \   000263   12....       LCALL     ?DEALLOC_XSTACK8
   \   000266   E9           MOV       A,R1
   \   000267   F5..         MOV       ?V5,A
   \   000269                ; Setup parameters for call to function osal_mem_free
   \   000269   AA..         MOV       R2,?V2
   \   00026B   AB..         MOV       R3,?V3
   \   00026D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000270   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000273   74..         MOV       A,#(ZDP_Buf + 1) & 0xff
   \   000275   F0           MOVX      @DPTR,A
   \   000276   A3           INC       DPTR
   \   000277   74..         MOV       A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000279   F0           MOVX      @DPTR,A
   \   00027A   A9..         MOV       R1,?V5
   \                     ??ZDP_MgmtLqiRsp_1:
   \   00027C   7401         MOV       A,#0x1
   \   00027E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000281   7F10         MOV       R7,#0x10
   \   000283   02....       LJMP      ?BANKED_LEAVE_XDATA
   1662          }
   1663          
   1664          /*********************************************************************
   1665           * @fn          ZDP_MgmtRtgRsp
   1666           *
   1667           * @brief       This builds and send a Mgmt_Rtg_rsp message. This
   1668           *              function sends a unicast message.
   1669           *
   1670           * @param       dstAddr - destination address of the message
   1671           * @param       Status - message status (ZDP_SUCCESS or other)
   1672           * @param       RoutingTableEntries - Total number of entries
   1673           * @param       StartIndex - Starting index within the reporting list
   1674           * @param       RoutingTableListCount - number of entries included
   1675           *                                      in this message
   1676           * @param       RoutingTableList - List of Routing Table entries
   1677           * @param       SecurityEnable - true to enable security for this message
   1678           *
   1679           * @return      ZStatus_t
   1680           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1681          ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtRtgRsp:
   1682                                      byte Status,
   1683                                      byte RoutingTableEntries,
   1684                                      byte StartIndex,
   1685                                      byte RoutingListCount,
   1686                                      rtgItem_t *RoutingTableList,
   1687                                      byte SecurityEnable )
   1688          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   C0E0         PUSH      A
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   D0E0         POP       A
   \   000015   F0           MOVX      @DPTR,A
   \   000016   8A..         MOV       ?V14,R2
   \   000018   8B..         MOV       ?V15,R3
   \   00001A   8C..         MOV       ?V12,R4
   \   00001C   8D..         MOV       ?V11,R5
   \   00001E   7419         MOV       A,#0x19
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F5..         MOV       ?V10,A
   \   000026   741A         MOV       A,#0x1a
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F5..         MOV       ?V3,A
   \   00002E   741B         MOV       A,#0x1b
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F5..         MOV       ?V0,A
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F5..         MOV       ?V1,A
   1689            uint8 *buf;
   1690            uint8 *pBuf;
   1691            // Status + RoutingTableEntries + StartIndex + RoutingListCount.
   1692            byte len = 1 + 1 + 1 + 1;
   \   00003A   75..04       MOV       ?V2,#0x4
   1693            byte x;
   1694          
   1695            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1696          
   1697            // Add an array for Routing List data
   1698            len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
   \   00003D   75F005       MOV       B,#0x5
   \   000040   E5..         MOV       A,?V3
   \   000042   A4           MUL       AB
   \   000043   25..         ADD       A,?V2
   \   000045   F5..         MOV       ?V2,A
   1699          
   1700            buf = osal_mem_alloc( (short)(len+1) );
   \   000047                ; Setup parameters for call to function osal_mem_alloc
   \   000047   E5..         MOV       A,?V2
   \   000049   F8           MOV       R0,A
   \   00004A   7900         MOV       R1,#0x0
   \   00004C   E8           MOV       A,R0
   \   00004D   2401         ADD       A,#0x1
   \   00004F   FA           MOV       R2,A
   \   000050   E4           CLR       A
   \   000051   39           ADDC      A,R1
   \   000052   FB           MOV       R3,A
   \   000053   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000056   8A..         MOV       ?V8,R2
   \   000058   8B..         MOV       ?V9,R3
   \   00005A   85....       MOV       ?V4,?V8
   \   00005D   85....       MOV       ?V5,?V9
   1701            if ( buf == NULL )
   \   000060   E5..         MOV       A,?V4
   \   000062   45..         ORL       A,?V5
   \   000064   7005         JNZ       ??ZDP_MgmtRtgRsp_0
   1702            {
   1703              return afStatus_MEM_FAIL;
   \   000066   7910         MOV       R1,#0x10
   \   000068   02....       LJMP      ??ZDP_MgmtRtgRsp_1 & 0xFFFF
   1704            }
   1705          
   1706            pBuf = buf+1;
   \                     ??ZDP_MgmtRtgRsp_0:
   \   00006B   85..82       MOV       DPL,?V4
   \   00006E   85..83       MOV       DPH,?V5
   \   000071   A3           INC       DPTR
   \   000072   AE82         MOV       R6,DPL
   \   000074   AF83         MOV       R7,DPH
   1707          
   1708            *pBuf++ = Status;
   \   000076   E5..         MOV       A,?V12
   \   000078   C0E0         PUSH      A
   \   00007A   8E82         MOV       DPL,R6
   \   00007C   8F83         MOV       DPH,R7
   \   00007E   D0E0         POP       A
   \   000080   F0           MOVX      @DPTR,A
   \   000081   8E82         MOV       DPL,R6
   \   000083   8F83         MOV       DPH,R7
   \   000085   A3           INC       DPTR
   \   000086   AE82         MOV       R6,DPL
   \   000088   AF83         MOV       R7,DPH
   1709            *pBuf++ = RoutingTableEntries;
   \   00008A   E5..         MOV       A,?V11
   \   00008C   C0E0         PUSH      A
   \   00008E   8E82         MOV       DPL,R6
   \   000090   8F83         MOV       DPH,R7
   \   000092   D0E0         POP       A
   \   000094   F0           MOVX      @DPTR,A
   \   000095   8E82         MOV       DPL,R6
   \   000097   8F83         MOV       DPH,R7
   \   000099   A3           INC       DPTR
   \   00009A   AE82         MOV       R6,DPL
   \   00009C   AF83         MOV       R7,DPH
   1710            *pBuf++ = StartIndex;
   \   00009E   E5..         MOV       A,?V10
   \   0000A0   C0E0         PUSH      A
   \   0000A2   8E82         MOV       DPL,R6
   \   0000A4   8F83         MOV       DPH,R7
   \   0000A6   D0E0         POP       A
   \   0000A8   F0           MOVX      @DPTR,A
   \   0000A9   8E82         MOV       DPL,R6
   \   0000AB   8F83         MOV       DPH,R7
   \   0000AD   A3           INC       DPTR
   \   0000AE   AE82         MOV       R6,DPL
   \   0000B0   AF83         MOV       R7,DPH
   1711            *pBuf++ = RoutingListCount;
   \   0000B2   E5..         MOV       A,?V3
   \   0000B4   C0E0         PUSH      A
   \   0000B6   8E82         MOV       DPL,R6
   \   0000B8   8F83         MOV       DPH,R7
   \   0000BA   D0E0         POP       A
   \   0000BC   F0           MOVX      @DPTR,A
   \   0000BD   8E82         MOV       DPL,R6
   \   0000BF   8F83         MOV       DPH,R7
   \   0000C1   A3           INC       DPTR
   \   0000C2   AE82         MOV       R6,DPL
   \   0000C4   AF83         MOV       R7,DPH
   1712          
   1713            for ( x = 0; x < RoutingListCount; x++ )
   \   0000C6   75..00       MOV       ?V6,#0x0
   \                     ??ZDP_MgmtRtgRsp_2:
   \   0000C9   E5..         MOV       A,?V6
   \   0000CB   C3           CLR       C
   \   0000CC   95..         SUBB      A,?V3
   \   0000CE   4003         JC        $+5
   \   0000D0   02....       LJMP      ??ZDP_MgmtRtgRsp_3 & 0xFFFF
   1714            {
   1715              *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
   \   0000D3   85..82       MOV       DPL,?V0
   \   0000D6   85..83       MOV       DPH,?V1
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   F8           MOV       R0,A
   \   0000DB   A3           INC       DPTR
   \   0000DC   E0           MOVX      A,@DPTR
   \   0000DD   F9           MOV       R1,A
   \   0000DE   E8           MOV       A,R0
   \   0000DF   C0E0         PUSH      A
   \   0000E1   8E82         MOV       DPL,R6
   \   0000E3   8F83         MOV       DPH,R7
   \   0000E5   D0E0         POP       A
   \   0000E7   F0           MOVX      @DPTR,A
   \   0000E8   8E82         MOV       DPL,R6
   \   0000EA   8F83         MOV       DPH,R7
   \   0000EC   A3           INC       DPTR
   \   0000ED   AE82         MOV       R6,DPL
   \   0000EF   AF83         MOV       R7,DPH
   1716              *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
   \   0000F1   85..82       MOV       DPL,?V0
   \   0000F4   85..83       MOV       DPH,?V1
   \   0000F7   E0           MOVX      A,@DPTR
   \   0000F8   F8           MOV       R0,A
   \   0000F9   A3           INC       DPTR
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   F9           MOV       R1,A
   \   0000FC   E4           CLR       A
   \   0000FD   C9           XCH       A,R1
   \   0000FE   F8           MOV       R0,A
   \   0000FF   E8           MOV       A,R0
   \   000100   C0E0         PUSH      A
   \   000102   8E82         MOV       DPL,R6
   \   000104   8F83         MOV       DPH,R7
   \   000106   D0E0         POP       A
   \   000108   F0           MOVX      @DPTR,A
   \   000109   8E82         MOV       DPL,R6
   \   00010B   8F83         MOV       DPH,R7
   \   00010D   A3           INC       DPTR
   \   00010E   AE82         MOV       R6,DPL
   \   000110   AF83         MOV       R7,DPH
   1717          
   1718              *pBuf = (RoutingTableList->status & 0x07);
   \   000112   85..82       MOV       DPL,?V0
   \   000115   85..83       MOV       DPH,?V1
   \   000118   A3           INC       DPTR
   \   000119   A3           INC       DPTR
   \   00011A   A3           INC       DPTR
   \   00011B   A3           INC       DPTR
   \   00011C   A3           INC       DPTR
   \   00011D   E0           MOVX      A,@DPTR
   \   00011E   5407         ANL       A,#0x7
   \   000120   C0E0         PUSH      A
   \   000122   8E82         MOV       DPL,R6
   \   000124   8F83         MOV       DPH,R7
   \   000126   D0E0         POP       A
   \   000128   F0           MOVX      @DPTR,A
   1719              if ( RoutingTableList->options & (ZP_MTO_ROUTE_RC | ZP_MTO_ROUTE_NRC) )
   \   000129   85..82       MOV       DPL,?V0
   \   00012C   85..83       MOV       DPH,?V1
   \   00012F   A3           INC       DPTR
   \   000130   A3           INC       DPTR
   \   000131   A3           INC       DPTR
   \   000132   A3           INC       DPTR
   \   000133   A3           INC       DPTR
   \   000134   A3           INC       DPTR
   \   000135   E0           MOVX      A,@DPTR
   \   000136   5418         ANL       A,#0x18
   \   000138   6041         JZ        ??ZDP_MgmtRtgRsp_4
   1720              {
   1721                uint8 options = 0;
   \   00013A   7800         MOV       R0,#0x0
   1722                options |= ZDO_MGMT_RTG_ENTRY_MANYTOONE;
   \   00013C   D3           SETB      C
   \   00013D   E8           MOV       A,R0
   \   00013E   92E1         MOV       0xE0 /* A   */.1,C
   \   000140   F8           MOV       R0,A
   1723          
   1724                if ( RoutingTableList->options & ZP_RTG_RECORD )
   \   000141   85..82       MOV       DPL,?V0
   \   000144   85..83       MOV       DPH,?V1
   \   000147   A3           INC       DPTR
   \   000148   A3           INC       DPTR
   \   000149   A3           INC       DPTR
   \   00014A   A3           INC       DPTR
   \   00014B   A3           INC       DPTR
   \   00014C   A3           INC       DPTR
   \   00014D   E0           MOVX      A,@DPTR
   \   00014E   A2E2         MOV       C,0xE0 /* A   */.2
   \   000150   5005         JNC       ??ZDP_MgmtRtgRsp_5
   1725                {
   1726                  options |= ZDO_MGMT_RTG_ENTRY_ROUTE_RECORD_REQUIRED;
   \   000152   D3           SETB      C
   \   000153   E8           MOV       A,R0
   \   000154   92E2         MOV       0xE0 /* A   */.2,C
   \   000156   F8           MOV       R0,A
   1727                }
   1728          
   1729                if ( RoutingTableList->options & ZP_MTO_ROUTE_NRC )
   \                     ??ZDP_MgmtRtgRsp_5:
   \   000157   85..82       MOV       DPL,?V0
   \   00015A   85..83       MOV       DPH,?V1
   \   00015D   A3           INC       DPTR
   \   00015E   A3           INC       DPTR
   \   00015F   A3           INC       DPTR
   \   000160   A3           INC       DPTR
   \   000161   A3           INC       DPTR
   \   000162   A3           INC       DPTR
   \   000163   E0           MOVX      A,@DPTR
   \   000164   A2E4         MOV       C,0xE0 /* A   */.4
   \   000166   5005         JNC       ??ZDP_MgmtRtgRsp_6
   1730                {
   1731                  options |= ZDO_MGMT_RTG_ENTRY_MEMORY_CONSTRAINED;
   \   000168   D3           SETB      C
   \   000169   E8           MOV       A,R0
   \   00016A   92E0         MOV       0xE0 /* A   */.0,C
   \   00016C   F8           MOV       R0,A
   1732                }
   1733          
   1734                *pBuf |= (options << 3);
   \                     ??ZDP_MgmtRtgRsp_6:
   \   00016D   E8           MOV       A,R0
   \   00016E   33           RLC       A
   \   00016F   33           RLC       A
   \   000170   33           RLC       A
   \   000171   54F8         ANL       A,#0xf8
   \   000173   F8           MOV       R0,A
   \   000174   8E82         MOV       DPL,R6
   \   000176   8F83         MOV       DPH,R7
   \   000178   E0           MOVX      A,@DPTR
   \   000179   48           ORL       A,R0
   \   00017A   F0           MOVX      @DPTR,A
   1735              }
   1736              pBuf++;
   \                     ??ZDP_MgmtRtgRsp_4:
   \   00017B   8E82         MOV       DPL,R6
   \   00017D   8F83         MOV       DPH,R7
   \   00017F   A3           INC       DPTR
   \   000180   AE82         MOV       R6,DPL
   \   000182   AF83         MOV       R7,DPH
   1737          
   1738              *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
   \   000184   85..82       MOV       DPL,?V0
   \   000187   85..83       MOV       DPH,?V1
   \   00018A   A3           INC       DPTR
   \   00018B   A3           INC       DPTR
   \   00018C   E0           MOVX      A,@DPTR
   \   00018D   F8           MOV       R0,A
   \   00018E   A3           INC       DPTR
   \   00018F   E0           MOVX      A,@DPTR
   \   000190   F9           MOV       R1,A
   \   000191   E8           MOV       A,R0
   \   000192   C0E0         PUSH      A
   \   000194   8E82         MOV       DPL,R6
   \   000196   8F83         MOV       DPH,R7
   \   000198   D0E0         POP       A
   \   00019A   F0           MOVX      @DPTR,A
   \   00019B   8E82         MOV       DPL,R6
   \   00019D   8F83         MOV       DPH,R7
   \   00019F   A3           INC       DPTR
   \   0001A0   AE82         MOV       R6,DPL
   \   0001A2   AF83         MOV       R7,DPH
   1739              *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
   \   0001A4   85..82       MOV       DPL,?V0
   \   0001A7   85..83       MOV       DPH,?V1
   \   0001AA   A3           INC       DPTR
   \   0001AB   A3           INC       DPTR
   \   0001AC   E0           MOVX      A,@DPTR
   \   0001AD   F8           MOV       R0,A
   \   0001AE   A3           INC       DPTR
   \   0001AF   E0           MOVX      A,@DPTR
   \   0001B0   F9           MOV       R1,A
   \   0001B1   E4           CLR       A
   \   0001B2   C9           XCH       A,R1
   \   0001B3   F8           MOV       R0,A
   \   0001B4   E8           MOV       A,R0
   \   0001B5   C0E0         PUSH      A
   \   0001B7   8E82         MOV       DPL,R6
   \   0001B9   8F83         MOV       DPH,R7
   \   0001BB   D0E0         POP       A
   \   0001BD   F0           MOVX      @DPTR,A
   \   0001BE   8E82         MOV       DPL,R6
   \   0001C0   8F83         MOV       DPH,R7
   \   0001C2   A3           INC       DPTR
   \   0001C3   AE82         MOV       R6,DPL
   \   0001C5   AF83         MOV       R7,DPH
   1740              RoutingTableList++;    // Move to next list entry
   \   0001C7   E5..         MOV       A,?V0
   \   0001C9   2407         ADD       A,#0x7
   \   0001CB   F5..         MOV       ?V0,A
   \   0001CD   5002         JNC       ??ZDP_MgmtRtgRsp_7
   \   0001CF   05..         INC       ?V1
   1741            }
   \                     ??ZDP_MgmtRtgRsp_7:
   \   0001D1   05..         INC       ?V6
   \   0001D3   02....       LJMP      ??ZDP_MgmtRtgRsp_2 & 0xFFFF
   1742          
   1743            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
   \                     ??ZDP_MgmtRtgRsp_3:
   \   0001D6   85..82       MOV       DPL,?V4
   \   0001D9   85..83       MOV       DPH,?V5
   \   0001DC   A3           INC       DPTR
   \   0001DD   A882         MOV       R0,DPL
   \   0001DF   A983         MOV       R1,DPH
   \   0001E1   90....       MOV       DPTR,#ZDP_TmpBuf
   \   0001E4   E8           MOV       A,R0
   \   0001E5   F0           MOVX      @DPTR,A
   \   0001E6   A3           INC       DPTR
   \   0001E7   E9           MOV       A,R1
   \   0001E8   F0           MOVX      @DPTR,A
   \   0001E9                ; Setup parameters for call to function fillAndSend
   \   0001E9   75..32       MOV       ?V8,#0x32
   \   0001EC   75..80       MOV       ?V9,#-0x80
   \   0001EF   78..         MOV       R0,#?V8
   \   0001F1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001F4   A9..         MOV       R1,?V2
   \   0001F6   AC..         MOV       R4,?V14
   \   0001F8   AD..         MOV       R5,?V15
   \   0001FA   7402         MOV       A,#0x2
   \   0001FC   12....       LCALL     ?XSTACK_DISP101_8
   \   0001FF   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000202   7402         MOV       A,#0x2
   \   000204   12....       LCALL     ?DEALLOC_XSTACK8
   \   000207   E9           MOV       A,R1
   \   000208   F5..         MOV       ?V7,A
   \   00020A                ; Setup parameters for call to function osal_mem_free
   \   00020A   AA..         MOV       R2,?V4
   \   00020C   AB..         MOV       R3,?V5
   \   00020E   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000211   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000214   74..         MOV       A,#(ZDP_Buf + 1) & 0xff
   \   000216   F0           MOVX      @DPTR,A
   \   000217   A3           INC       DPTR
   \   000218   74..         MOV       A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   00021A   F0           MOVX      @DPTR,A
   \   00021B   A9..         MOV       R1,?V7
   \                     ??ZDP_MgmtRtgRsp_1:
   \   00021D   7401         MOV       A,#0x1
   \   00021F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000222   7F10         MOV       R7,#0x10
   \   000224   02....       LJMP      ?BANKED_LEAVE_XDATA
   1744          }
   1745          
   1746          /*********************************************************************
   1747           * @fn          ZDP_MgmtBindRsp
   1748           *
   1749           * @brief       This builds and send a Mgmt_Bind_rsp message. This
   1750           *              function sends a unicast message.
   1751           *
   1752           * @param       dstAddr - destination address of the message
   1753           * @param       Status - message status (ZDP_SUCCESS or other)
   1754           * @param       BindingTableEntries - Total number of entries
   1755           * @param       StartIndex - Starting index within the reporting list
   1756           * @param       BindingTableListCount - number of entries included
   1757           *                                 in this message
   1758           * @param       BindingTableList - List of Binding Table entries
   1759           * @param       SecurityEnable - Security Options
   1760           *
   1761           * @return      ZStatus_t
   1762           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1763          ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtBindRsp:
   1764                                      byte Status,
   1765                                      byte BindingTableEntries,
   1766                                      byte StartIndex,
   1767                                      byte BindingTableListCount,
   1768                                      apsBindingItem_t *BindingTableList,
   1769                                      byte SecurityEnable )
   1770          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   C0E0         PUSH      A
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   D0E0         POP       A
   \   000015   F0           MOVX      @DPTR,A
   \   000016   7401         MOV       A,#0x1
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   EA           MOV       A,R2
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   A3           INC       DPTR
   \   00001E   EB           MOV       A,R3
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   8C..         MOV       ?V14,R4
   \   000022   8D..         MOV       ?V13,R5
   \   000024   741B         MOV       A,#0x1b
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F5..         MOV       ?V12,A
   \   00002C   741C         MOV       A,#0x1c
   \   00002E   12....       LCALL     ?XSTACK_DISP0_8
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F5..         MOV       ?V6,A
   \   000034   741D         MOV       A,#0x1d
   \   000036   12....       LCALL     ?XSTACK_DISP0_8
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F5..         MOV       ?V0,A
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   F5..         MOV       ?V1,A
   1771            uint8 *buf;
   1772            uint8 *pBuf;
   1773            uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
   1774            uint8 len;    // Actual length varies due to different addrMode
   1775            uint8 x;
   1776            byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
   \   000040   75..15       MOV       ?V11,#0x15
   1777            byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
   \   000043   75..0E       MOV       ?V15,#0xe
   1778          
   1779            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1780          
   1781            // Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1782            maxLen = 1 + 1 + 1 + 1;
   \   000046   75..04       MOV       ?V10,#0x4
   1783            maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
   \   000049   E5..         MOV       A,?V11
   \   00004B   F5F0         MOV       B,A
   \   00004D   E5..         MOV       A,?V6
   \   00004F   A4           MUL       AB
   \   000050   25..         ADD       A,?V10
   \   000052   F5..         MOV       ?V10,A
   1784            buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
   \   000054                ; Setup parameters for call to function osal_mem_alloc
   \   000054   E5..         MOV       A,?V10
   \   000056   F8           MOV       R0,A
   \   000057   7900         MOV       R1,#0x0
   \   000059   E8           MOV       A,R0
   \   00005A   2401         ADD       A,#0x1
   \   00005C   FA           MOV       R2,A
   \   00005D   E4           CLR       A
   \   00005E   39           ADDC      A,R1
   \   00005F   FB           MOV       R3,A
   \   000060   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000063   8A..         MOV       ?V8,R2
   \   000065   8B..         MOV       ?V9,R3
   \   000067   85....       MOV       ?V4,?V8
   \   00006A   85....       MOV       ?V5,?V9
   1785          
   1786            if ( buf == NULL )
   \   00006D   E5..         MOV       A,?V4
   \   00006F   45..         ORL       A,?V5
   \   000071   7005         JNZ       ??ZDP_MgmtBindRsp_0
   1787            {
   1788              return afStatus_MEM_FAIL;
   \   000073   7910         MOV       R1,#0x10
   \   000075   02....       LJMP      ??ZDP_MgmtBindRsp_1 & 0xFFFF
   1789            }
   1790          
   1791            pBuf = buf+1;
   \                     ??ZDP_MgmtBindRsp_0:
   \   000078   85..82       MOV       DPL,?V4
   \   00007B   85..83       MOV       DPH,?V5
   \   00007E   A3           INC       DPTR
   \   00007F   AE82         MOV       R6,DPL
   \   000081   AF83         MOV       R7,DPH
   1792          
   1793            *pBuf++ = Status;
   \   000083   E5..         MOV       A,?V14
   \   000085   C0E0         PUSH      A
   \   000087   8E82         MOV       DPL,R6
   \   000089   8F83         MOV       DPH,R7
   \   00008B   D0E0         POP       A
   \   00008D   F0           MOVX      @DPTR,A
   \   00008E   8E82         MOV       DPL,R6
   \   000090   8F83         MOV       DPH,R7
   \   000092   A3           INC       DPTR
   \   000093   AE82         MOV       R6,DPL
   \   000095   AF83         MOV       R7,DPH
   1794            *pBuf++ = BindingTableEntries;
   \   000097   E5..         MOV       A,?V13
   \   000099   C0E0         PUSH      A
   \   00009B   8E82         MOV       DPL,R6
   \   00009D   8F83         MOV       DPH,R7
   \   00009F   D0E0         POP       A
   \   0000A1   F0           MOVX      @DPTR,A
   \   0000A2   8E82         MOV       DPL,R6
   \   0000A4   8F83         MOV       DPH,R7
   \   0000A6   A3           INC       DPTR
   \   0000A7   AE82         MOV       R6,DPL
   \   0000A9   AF83         MOV       R7,DPH
   1795            *pBuf++ = StartIndex;
   \   0000AB   E5..         MOV       A,?V12
   \   0000AD   C0E0         PUSH      A
   \   0000AF   8E82         MOV       DPL,R6
   \   0000B1   8F83         MOV       DPH,R7
   \   0000B3   D0E0         POP       A
   \   0000B5   F0           MOVX      @DPTR,A
   \   0000B6   8E82         MOV       DPL,R6
   \   0000B8   8F83         MOV       DPH,R7
   \   0000BA   A3           INC       DPTR
   \   0000BB   AE82         MOV       R6,DPL
   \   0000BD   AF83         MOV       R7,DPH
   1796            *pBuf++ = BindingTableListCount;
   \   0000BF   E5..         MOV       A,?V6
   \   0000C1   C0E0         PUSH      A
   \   0000C3   8E82         MOV       DPL,R6
   \   0000C5   8F83         MOV       DPH,R7
   \   0000C7   D0E0         POP       A
   \   0000C9   F0           MOVX      @DPTR,A
   \   0000CA   8E82         MOV       DPL,R6
   \   0000CC   8F83         MOV       DPH,R7
   \   0000CE   A3           INC       DPTR
   \   0000CF   AE82         MOV       R6,DPL
   \   0000D1   AF83         MOV       R7,DPH
   1797          
   1798            // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1799            // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
   1800            //           extZdpBindEntrySize     -- Version 1.1 extended address mode
   1801            //           shortZdpBindEntrySize   -- Version 1.1 group address mode
   1802          
   1803            len = 1 + 1 + 1 + 1;
   \   0000D3   75..04       MOV       ?V2,#0x4
   1804            for ( x = 0; x < BindingTableListCount; x++ )
   \   0000D6   75..00       MOV       ?V7,#0x0
   \                     ??ZDP_MgmtBindRsp_2:
   \   0000D9   E5..         MOV       A,?V7
   \   0000DB   C3           CLR       C
   \   0000DC   95..         SUBB      A,?V6
   \   0000DE   4003         JC        $+5
   \   0000E0   02....       LJMP      ??ZDP_MgmtBindRsp_3 & 0xFFFF
   1805            {
   1806              pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
   \   0000E3                ; Setup parameters for call to function sAddrExtCpy
   \   0000E3   AC..         MOV       R4,?V0
   \   0000E5   AD..         MOV       R5,?V1
   \   0000E7   EE           MOV       A,R6
   \   0000E8   FA           MOV       R2,A
   \   0000E9   EF           MOV       A,R7
   \   0000EA   FB           MOV       R3,A
   \   0000EB   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000EE   8A..         MOV       ?V8,R2
   \   0000F0   8B..         MOV       ?V9,R3
   \   0000F2   AE..         MOV       R6,?V8
   \   0000F4   AF..         MOV       R7,?V9
   1807              *pBuf++ = BindingTableList->srcEP;
   \   0000F6   85..82       MOV       DPL,?V0
   \   0000F9   85..83       MOV       DPH,?V1
   \   0000FC   A3           INC       DPTR
   \   0000FD   A3           INC       DPTR
   \   0000FE   A3           INC       DPTR
   \   0000FF   A3           INC       DPTR
   \   000100   A3           INC       DPTR
   \   000101   A3           INC       DPTR
   \   000102   A3           INC       DPTR
   \   000103   A3           INC       DPTR
   \   000104   E0           MOVX      A,@DPTR
   \   000105   C0E0         PUSH      A
   \   000107   8E82         MOV       DPL,R6
   \   000109   8F83         MOV       DPH,R7
   \   00010B   D0E0         POP       A
   \   00010D   F0           MOVX      @DPTR,A
   \   00010E   8E82         MOV       DPL,R6
   \   000110   8F83         MOV       DPH,R7
   \   000112   A3           INC       DPTR
   \   000113   AE82         MOV       R6,DPL
   \   000115   AF83         MOV       R7,DPH
   1808          
   1809              // Cluster ID
   1810              *pBuf++ = LO_UINT16( BindingTableList->clusterID );
   \   000117   85..82       MOV       DPL,?V0
   \   00011A   85..83       MOV       DPH,?V1
   \   00011D   A3           INC       DPTR
   \   00011E   A3           INC       DPTR
   \   00011F   A3           INC       DPTR
   \   000120   A3           INC       DPTR
   \   000121   A3           INC       DPTR
   \   000122   A3           INC       DPTR
   \   000123   A3           INC       DPTR
   \   000124   A3           INC       DPTR
   \   000125   A3           INC       DPTR
   \   000126   E0           MOVX      A,@DPTR
   \   000127   F8           MOV       R0,A
   \   000128   A3           INC       DPTR
   \   000129   E0           MOVX      A,@DPTR
   \   00012A   F9           MOV       R1,A
   \   00012B   E8           MOV       A,R0
   \   00012C   C0E0         PUSH      A
   \   00012E   8E82         MOV       DPL,R6
   \   000130   8F83         MOV       DPH,R7
   \   000132   D0E0         POP       A
   \   000134   F0           MOVX      @DPTR,A
   \   000135   8E82         MOV       DPL,R6
   \   000137   8F83         MOV       DPH,R7
   \   000139   A3           INC       DPTR
   \   00013A   AE82         MOV       R6,DPL
   \   00013C   AF83         MOV       R7,DPH
   1811              *pBuf++ = HI_UINT16( BindingTableList->clusterID );
   \   00013E   85..82       MOV       DPL,?V0
   \   000141   85..83       MOV       DPH,?V1
   \   000144   A3           INC       DPTR
   \   000145   A3           INC       DPTR
   \   000146   A3           INC       DPTR
   \   000147   A3           INC       DPTR
   \   000148   A3           INC       DPTR
   \   000149   A3           INC       DPTR
   \   00014A   A3           INC       DPTR
   \   00014B   A3           INC       DPTR
   \   00014C   A3           INC       DPTR
   \   00014D   E0           MOVX      A,@DPTR
   \   00014E   F8           MOV       R0,A
   \   00014F   A3           INC       DPTR
   \   000150   E0           MOVX      A,@DPTR
   \   000151   F9           MOV       R1,A
   \   000152   E4           CLR       A
   \   000153   C9           XCH       A,R1
   \   000154   F8           MOV       R0,A
   \   000155   E8           MOV       A,R0
   \   000156   C0E0         PUSH      A
   \   000158   8E82         MOV       DPL,R6
   \   00015A   8F83         MOV       DPH,R7
   \   00015C   D0E0         POP       A
   \   00015E   F0           MOVX      @DPTR,A
   \   00015F   8E82         MOV       DPL,R6
   \   000161   8F83         MOV       DPH,R7
   \   000163   A3           INC       DPTR
   \   000164   AE82         MOV       R6,DPL
   \   000166   AF83         MOV       R7,DPH
   1812          
   1813              *pBuf++ = BindingTableList->dstAddr.addrMode;
   \   000168   E5..         MOV       A,?V0
   \   00016A   2413         ADD       A,#0x13
   \   00016C   F582         MOV       DPL,A
   \   00016E   E4           CLR       A
   \   00016F   35..         ADDC      A,?V1
   \   000171   F583         MOV       DPH,A
   \   000173   E0           MOVX      A,@DPTR
   \   000174   C0E0         PUSH      A
   \   000176   8E82         MOV       DPL,R6
   \   000178   8F83         MOV       DPH,R7
   \   00017A   D0E0         POP       A
   \   00017C   F0           MOVX      @DPTR,A
   \   00017D   8E82         MOV       DPL,R6
   \   00017F   8F83         MOV       DPH,R7
   \   000181   A3           INC       DPTR
   \   000182   AE82         MOV       R6,DPL
   \   000184   AF83         MOV       R7,DPH
   1814              if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
   \   000186   E5..         MOV       A,?V0
   \   000188   2413         ADD       A,#0x13
   \   00018A   F582         MOV       DPL,A
   \   00018C   E4           CLR       A
   \   00018D   35..         ADDC      A,?V1
   \   00018F   F583         MOV       DPH,A
   \   000191   E0           MOVX      A,@DPTR
   \   000192   6403         XRL       A,#0x3
   \   000194   703E         JNZ       ??ZDP_MgmtBindRsp_4
   1815              {
   1816                len += extZdpBindEntrySize;
   \   000196   E5..         MOV       A,?V11
   \   000198   25..         ADD       A,?V2
   \   00019A   F5..         MOV       ?V2,A
   1817                pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   \   00019C                ; Setup parameters for call to function sAddrExtCpy
   \   00019C   E5..         MOV       A,?V0
   \   00019E   240B         ADD       A,#0xb
   \   0001A0   FC           MOV       R4,A
   \   0001A1   E4           CLR       A
   \   0001A2   35..         ADDC      A,?V1
   \   0001A4   FD           MOV       R5,A
   \   0001A5   EE           MOV       A,R6
   \   0001A6   FA           MOV       R2,A
   \   0001A7   EF           MOV       A,R7
   \   0001A8   FB           MOV       R3,A
   \   0001A9   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0001AC   8A..         MOV       ?V8,R2
   \   0001AE   8B..         MOV       ?V9,R3
   \   0001B0   AE..         MOV       R6,?V8
   \   0001B2   AF..         MOV       R7,?V9
   1818                *pBuf++ = BindingTableList->dstEP;
   \   0001B4   E5..         MOV       A,?V0
   \   0001B6   2414         ADD       A,#0x14
   \   0001B8   F582         MOV       DPL,A
   \   0001BA   E4           CLR       A
   \   0001BB   35..         ADDC      A,?V1
   \   0001BD   F583         MOV       DPH,A
   \   0001BF   E0           MOVX      A,@DPTR
   \   0001C0   C0E0         PUSH      A
   \   0001C2   8E82         MOV       DPL,R6
   \   0001C4   8F83         MOV       DPH,R7
   \   0001C6   D0E0         POP       A
   \   0001C8   F0           MOVX      @DPTR,A
   \   0001C9   8E82         MOV       DPL,R6
   \   0001CB   8F83         MOV       DPH,R7
   \   0001CD   A3           INC       DPTR
   \   0001CE   AE82         MOV       R6,DPL
   \   0001D0   AF83         MOV       R7,DPH
   \   0001D2   804F         SJMP      ??ZDP_MgmtBindRsp_5
   1819              }
   1820              else
   1821              {
   1822                len += shortZdpBindEntrySize;
   \                     ??ZDP_MgmtBindRsp_4:
   \   0001D4   E5..         MOV       A,?V15
   \   0001D6   25..         ADD       A,?V2
   \   0001D8   F5..         MOV       ?V2,A
   1823                *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   0001DA   E5..         MOV       A,?V0
   \   0001DC   240B         ADD       A,#0xb
   \   0001DE   F582         MOV       DPL,A
   \   0001E0   E4           CLR       A
   \   0001E1   35..         ADDC      A,?V1
   \   0001E3   F583         MOV       DPH,A
   \   0001E5   E0           MOVX      A,@DPTR
   \   0001E6   F8           MOV       R0,A
   \   0001E7   A3           INC       DPTR
   \   0001E8   E0           MOVX      A,@DPTR
   \   0001E9   F9           MOV       R1,A
   \   0001EA   E8           MOV       A,R0
   \   0001EB   C0E0         PUSH      A
   \   0001ED   8E82         MOV       DPL,R6
   \   0001EF   8F83         MOV       DPH,R7
   \   0001F1   D0E0         POP       A
   \   0001F3   F0           MOVX      @DPTR,A
   \   0001F4   8E82         MOV       DPL,R6
   \   0001F6   8F83         MOV       DPH,R7
   \   0001F8   A3           INC       DPTR
   \   0001F9   AE82         MOV       R6,DPL
   \   0001FB   AF83         MOV       R7,DPH
   1824                *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   0001FD   E5..         MOV       A,?V0
   \   0001FF   240B         ADD       A,#0xb
   \   000201   F582         MOV       DPL,A
   \   000203   E4           CLR       A
   \   000204   35..         ADDC      A,?V1
   \   000206   F583         MOV       DPH,A
   \   000208   E0           MOVX      A,@DPTR
   \   000209   F8           MOV       R0,A
   \   00020A   A3           INC       DPTR
   \   00020B   E0           MOVX      A,@DPTR
   \   00020C   F9           MOV       R1,A
   \   00020D   E4           CLR       A
   \   00020E   C9           XCH       A,R1
   \   00020F   F8           MOV       R0,A
   \   000210   E8           MOV       A,R0
   \   000211   C0E0         PUSH      A
   \   000213   8E82         MOV       DPL,R6
   \   000215   8F83         MOV       DPH,R7
   \   000217   D0E0         POP       A
   \   000219   F0           MOVX      @DPTR,A
   \   00021A   8E82         MOV       DPL,R6
   \   00021C   8F83         MOV       DPH,R7
   \   00021E   A3           INC       DPTR
   \   00021F   AE82         MOV       R6,DPL
   \   000221   AF83         MOV       R7,DPH
   1825              }
   1826              BindingTableList++;    // Move to next list entry
   \                     ??ZDP_MgmtBindRsp_5:
   \   000223   E5..         MOV       A,?V0
   \   000225   2415         ADD       A,#0x15
   \   000227   F5..         MOV       ?V0,A
   \   000229   5002         JNC       ??ZDP_MgmtBindRsp_6
   \   00022B   05..         INC       ?V1
   1827            }
   \                     ??ZDP_MgmtBindRsp_6:
   \   00022D   05..         INC       ?V7
   \   00022F   02....       LJMP      ??ZDP_MgmtBindRsp_2 & 0xFFFF
   1828          
   1829            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
   \                     ??ZDP_MgmtBindRsp_3:
   \   000232   85..82       MOV       DPL,?V4
   \   000235   85..83       MOV       DPH,?V5
   \   000238   A3           INC       DPTR
   \   000239   A882         MOV       R0,DPL
   \   00023B   A983         MOV       R1,DPH
   \   00023D   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000240   E8           MOV       A,R0
   \   000241   F0           MOVX      @DPTR,A
   \   000242   A3           INC       DPTR
   \   000243   E9           MOV       A,R1
   \   000244   F0           MOVX      @DPTR,A
   \   000245                ; Setup parameters for call to function fillAndSend
   \   000245   75..33       MOV       ?V8,#0x33
   \   000248   75..80       MOV       ?V9,#-0x80
   \   00024B   78..         MOV       R0,#?V8
   \   00024D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000250   A9..         MOV       R1,?V2
   \   000252   7403         MOV       A,#0x3
   \   000254   12....       LCALL     ?XSTACK_DISP0_8
   \   000257   E0           MOVX      A,@DPTR
   \   000258   FC           MOV       R4,A
   \   000259   A3           INC       DPTR
   \   00025A   E0           MOVX      A,@DPTR
   \   00025B   FD           MOV       R5,A
   \   00025C   7402         MOV       A,#0x2
   \   00025E   12....       LCALL     ?XSTACK_DISP101_8
   \   000261   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000264   7402         MOV       A,#0x2
   \   000266   12....       LCALL     ?DEALLOC_XSTACK8
   \   000269   E9           MOV       A,R1
   \   00026A   F5..         MOV       ?V3,A
   \   00026C                ; Setup parameters for call to function osal_mem_free
   \   00026C   AA..         MOV       R2,?V4
   \   00026E   AB..         MOV       R3,?V5
   \   000270   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000273   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000276   74..         MOV       A,#(ZDP_Buf + 1) & 0xff
   \   000278   F0           MOVX      @DPTR,A
   \   000279   A3           INC       DPTR
   \   00027A   74..         MOV       A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   00027C   F0           MOVX      @DPTR,A
   \   00027D   A9..         MOV       R1,?V3
   \                     ??ZDP_MgmtBindRsp_1:
   \   00027F   7403         MOV       A,#0x3
   \   000281   12....       LCALL     ?DEALLOC_XSTACK8
   \   000284   7F10         MOV       R7,#0x10
   \   000286   02....       LJMP      ?BANKED_LEAVE_XDATA
   1830          }
   1831          
   1832          /*********************************************************************
   1833           * @fn          ZDP_MgmtNwkUpdateNotify
   1834           *
   1835           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
   1836           *              function sends a unicast message.
   1837           *
   1838           * @param       dstAddr - destination address of the message
   1839           * @param       status - message status (ZDP_SUCCESS or other)
   1840           * @param       scannedChannels - List of channels scanned by the request
   1841           * @param       totalTransmissions - Total transmissions
   1842           * @param       transmissionFailures - Sum of transmission failures
   1843           * @param       listCount - Number of records contained in the energyValues list
   1844           * @param       energyValues - List of descriptors, one for each of ListCount,
   1845           *                             of the enegry detect descriptors
   1846           * @param       txOptions - Transmit options
   1847           * @param       securityEnable - Security options
   1848           *
   1849           * @return      afStatus_t
   1850           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1851          afStatus_t ZDP_MgmtNwkUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateNotify:
   1852                                              uint8 status, uint32 scannedChannels,
   1853                                              uint16 totalTransmissions, uint16 transmissionFailures,
   1854                                              uint8 listCount, uint8 *energyValues, uint8 txOptions,
   1855                                              uint8 securityEnable )
   1856          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   C0E0         PUSH      A
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   D0E0         POP       A
   \   000015   F0           MOVX      @DPTR,A
   \   000016   7401         MOV       A,#0x1
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   EA           MOV       A,R2
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   A3           INC       DPTR
   \   00001E   EB           MOV       A,R3
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   8C..         MOV       ?V15,R4
   \   000022   8D..         MOV       ?V11,R5
   \   000024   741B         MOV       A,#0x1b
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   78..         MOV       R0,#?V4
   \   00002B   12....       LCALL     ?L_MOV_X
   \   00002E   741F         MOV       A,#0x1f
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F5..         MOV       ?V2,A
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F5..         MOV       ?V3,A
   \   00003A   7421         MOV       A,#0x21
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F5..         MOV       ?V0,A
   \   000042   A3           INC       DPTR
   \   000043   E0           MOVX      A,@DPTR
   \   000044   F5..         MOV       ?V1,A
   1857            uint8 *buf;
   1858            uint8 *pBuf;
   1859            uint8 len;
   1860          
   1861            (void)securityEnable;  // Intentionally unreferenced parameter
   1862          
   1863            // Status + ScannedChannels + totalTransmissions + transmissionFailures + ListCount + energyValues
   1864            len = 1 + 4 + 2 + 2 + 1 + listCount;
   \   000046   740A         MOV       A,#0xa
   \   000048   25..         ADD       A,?V11
   \   00004A   F5..         MOV       ?V14,A
   1865          
   1866            buf = osal_mem_alloc( len+1 ); // +1 for transaction ID
   \   00004C                ; Setup parameters for call to function osal_mem_alloc
   \   00004C   E5..         MOV       A,?V14
   \   00004E   F8           MOV       R0,A
   \   00004F   7900         MOV       R1,#0x0
   \   000051   E8           MOV       A,R0
   \   000052   2401         ADD       A,#0x1
   \   000054   FA           MOV       R2,A
   \   000055   E4           CLR       A
   \   000056   39           ADDC      A,R1
   \   000057   FB           MOV       R3,A
   \   000058   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00005B   8A..         MOV       ?V8,R2
   \   00005D   8B..         MOV       ?V9,R3
   \   00005F   85....       MOV       ?V12,?V8
   \   000062   85....       MOV       ?V13,?V9
   1867            if ( buf == NULL )
   \   000065   E5..         MOV       A,?V12
   \   000067   45..         ORL       A,?V13
   \   000069   7005         JNZ       ??ZDP_MgmtNwkUpdateNotify_0
   1868            {
   1869              return afStatus_MEM_FAIL;
   \   00006B   7910         MOV       R1,#0x10
   \   00006D   02....       LJMP      ??ZDP_MgmtNwkUpdateNotify_1 & 0xFFFF
   1870            }
   1871          
   1872            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkUpdateNotify_0:
   \   000070   85..82       MOV       DPL,?V12
   \   000073   85..83       MOV       DPH,?V13
   \   000076   A3           INC       DPTR
   \   000077   AE82         MOV       R6,DPL
   \   000079   AF83         MOV       R7,DPH
   1873          
   1874            *pBuf++ = status;
   \   00007B   E5..         MOV       A,?V15
   \   00007D   C0E0         PUSH      A
   \   00007F   8E82         MOV       DPL,R6
   \   000081   8F83         MOV       DPH,R7
   \   000083   D0E0         POP       A
   \   000085   F0           MOVX      @DPTR,A
   \   000086   8E82         MOV       DPL,R6
   \   000088   8F83         MOV       DPH,R7
   \   00008A   A3           INC       DPTR
   \   00008B   AE82         MOV       R6,DPL
   \   00008D   AF83         MOV       R7,DPH
   1875          
   1876            pBuf = osal_buffer_uint32( pBuf, scannedChannels );
   \   00008F                ; Setup parameters for call to function osal_buffer_uint32
   \   00008F   78..         MOV       R0,#?V4
   \   000091   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000094   EE           MOV       A,R6
   \   000095   FA           MOV       R2,A
   \   000096   EF           MOV       A,R7
   \   000097   FB           MOV       R3,A
   \   000098   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00009B   7404         MOV       A,#0x4
   \   00009D   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A0   8A..         MOV       ?V8,R2
   \   0000A2   8B..         MOV       ?V9,R3
   \   0000A4   AE..         MOV       R6,?V8
   \   0000A6   AF..         MOV       R7,?V9
   1877          
   1878            *pBuf++ = LO_UINT16( totalTransmissions );
   \   0000A8   E5..         MOV       A,?V2
   \   0000AA   C0E0         PUSH      A
   \   0000AC   8E82         MOV       DPL,R6
   \   0000AE   8F83         MOV       DPH,R7
   \   0000B0   D0E0         POP       A
   \   0000B2   F0           MOVX      @DPTR,A
   \   0000B3   8E82         MOV       DPL,R6
   \   0000B5   8F83         MOV       DPH,R7
   \   0000B7   A3           INC       DPTR
   \   0000B8   AE82         MOV       R6,DPL
   \   0000BA   AF83         MOV       R7,DPH
   1879            *pBuf++ = HI_UINT16( totalTransmissions );
   \   0000BC   A8..         MOV       R0,?V2
   \   0000BE   A9..         MOV       R1,?V3
   \   0000C0   E4           CLR       A
   \   0000C1   C9           XCH       A,R1
   \   0000C2   F8           MOV       R0,A
   \   0000C3   E8           MOV       A,R0
   \   0000C4   C0E0         PUSH      A
   \   0000C6   8E82         MOV       DPL,R6
   \   0000C8   8F83         MOV       DPH,R7
   \   0000CA   D0E0         POP       A
   \   0000CC   F0           MOVX      @DPTR,A
   \   0000CD   8E82         MOV       DPL,R6
   \   0000CF   8F83         MOV       DPH,R7
   \   0000D1   A3           INC       DPTR
   \   0000D2   AE82         MOV       R6,DPL
   \   0000D4   AF83         MOV       R7,DPH
   1880          
   1881            *pBuf++ = LO_UINT16( transmissionFailures );
   \   0000D6   E5..         MOV       A,?V0
   \   0000D8   C0E0         PUSH      A
   \   0000DA   8E82         MOV       DPL,R6
   \   0000DC   8F83         MOV       DPH,R7
   \   0000DE   D0E0         POP       A
   \   0000E0   F0           MOVX      @DPTR,A
   \   0000E1   8E82         MOV       DPL,R6
   \   0000E3   8F83         MOV       DPH,R7
   \   0000E5   A3           INC       DPTR
   \   0000E6   AE82         MOV       R6,DPL
   \   0000E8   AF83         MOV       R7,DPH
   1882            *pBuf++ = HI_UINT16( transmissionFailures );
   \   0000EA   A8..         MOV       R0,?V0
   \   0000EC   A9..         MOV       R1,?V1
   \   0000EE   E4           CLR       A
   \   0000EF   C9           XCH       A,R1
   \   0000F0   F8           MOV       R0,A
   \   0000F1   E8           MOV       A,R0
   \   0000F2   C0E0         PUSH      A
   \   0000F4   8E82         MOV       DPL,R6
   \   0000F6   8F83         MOV       DPH,R7
   \   0000F8   D0E0         POP       A
   \   0000FA   F0           MOVX      @DPTR,A
   \   0000FB   8E82         MOV       DPL,R6
   \   0000FD   8F83         MOV       DPH,R7
   \   0000FF   A3           INC       DPTR
   \   000100   AE82         MOV       R6,DPL
   \   000102   AF83         MOV       R7,DPH
   1883          
   1884            *pBuf++ = listCount;
   \   000104   E5..         MOV       A,?V11
   \   000106   C0E0         PUSH      A
   \   000108   8E82         MOV       DPL,R6
   \   00010A   8F83         MOV       DPH,R7
   \   00010C   D0E0         POP       A
   \   00010E   F0           MOVX      @DPTR,A
   \   00010F   8E82         MOV       DPL,R6
   \   000111   8F83         MOV       DPH,R7
   \   000113   A3           INC       DPTR
   \   000114   AE82         MOV       R6,DPL
   \   000116   AF83         MOV       R7,DPH
   1885          
   1886            if ( listCount > 0 )
   \   000118   E5..         MOV       A,?V11
   \   00011A   6025         JZ        ??ZDP_MgmtNwkUpdateNotify_2
   1887              osal_memcpy( pBuf, energyValues, listCount );
   \   00011C                ; Setup parameters for call to function osal_memcpy
   \   00011C   7423         MOV       A,#0x23
   \   00011E   12....       LCALL     ?XSTACK_DISP0_8
   \   000121   E0           MOVX      A,@DPTR
   \   000122   F5..         MOV       ?V8,A
   \   000124   A3           INC       DPTR
   \   000125   E0           MOVX      A,@DPTR
   \   000126   F5..         MOV       ?V9,A
   \   000128   75..00       MOV       ?V10,#0x0
   \   00012B   78..         MOV       R0,#?V8
   \   00012D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000130   E5..         MOV       A,?V11
   \   000132   FC           MOV       R4,A
   \   000133   7D00         MOV       R5,#0x0
   \   000135   EE           MOV       A,R6
   \   000136   FA           MOV       R2,A
   \   000137   EF           MOV       A,R7
   \   000138   FB           MOV       R3,A
   \   000139   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00013C   7403         MOV       A,#0x3
   \   00013E   12....       LCALL     ?DEALLOC_XSTACK8
   1888          
   1889            FillAndSendBufferTxOptions( &TransSeq, dstAddr, Mgmt_NWK_Update_notify, len, buf, txOptions );
   \                     ??ZDP_MgmtNwkUpdateNotify_2:
   \   000141   85..82       MOV       DPL,?V12
   \   000144   85..83       MOV       DPH,?V13
   \   000147   A3           INC       DPTR
   \   000148   A882         MOV       R0,DPL
   \   00014A   A983         MOV       R1,DPH
   \   00014C   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00014F   E8           MOV       A,R0
   \   000150   F0           MOVX      @DPTR,A
   \   000151   A3           INC       DPTR
   \   000152   E9           MOV       A,R1
   \   000153   F0           MOVX      @DPTR,A
   \   000154   7425         MOV       A,#0x25
   \   000156   12....       LCALL     ?XSTACK_DISP0_8
   \   000159   E0           MOVX      A,@DPTR
   \   00015A   90....       MOV       DPTR,#ZDP_TxOptions
   \   00015D   F0           MOVX      @DPTR,A
   \   00015E                ; Setup parameters for call to function fillAndSend
   \   00015E   75..38       MOV       ?V8,#0x38
   \   000161   75..80       MOV       ?V9,#-0x80
   \   000164   78..         MOV       R0,#?V8
   \   000166   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000169   A9..         MOV       R1,?V14
   \   00016B   7403         MOV       A,#0x3
   \   00016D   12....       LCALL     ?XSTACK_DISP0_8
   \   000170   E0           MOVX      A,@DPTR
   \   000171   FC           MOV       R4,A
   \   000172   A3           INC       DPTR
   \   000173   E0           MOVX      A,@DPTR
   \   000174   FD           MOV       R5,A
   \   000175   7402         MOV       A,#0x2
   \   000177   12....       LCALL     ?XSTACK_DISP101_8
   \   00017A   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00017D   7402         MOV       A,#0x2
   \   00017F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000182   E9           MOV       A,R1
   \   000183   F5..         MOV       ?V10,A
   \   000185                ; Setup parameters for call to function osal_mem_free
   \   000185   AA..         MOV       R2,?V12
   \   000187   AB..         MOV       R3,?V13
   \   000189   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00018C   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00018F   74..         MOV       A,#(ZDP_Buf + 1) & 0xff
   \   000191   F0           MOVX      @DPTR,A
   \   000192   A3           INC       DPTR
   \   000193   74..         MOV       A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000195   F0           MOVX      @DPTR,A
   \   000196   90....       MOV       DPTR,#ZDP_TxOptions
   \   000199   7400         MOV       A,#0x0
   \   00019B   F0           MOVX      @DPTR,A
   \   00019C   A9..         MOV       R1,?V10
   \                     ??ZDP_MgmtNwkUpdateNotify_1:
   \   00019E   7403         MOV       A,#0x3
   \   0001A0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001A3   7F10         MOV       R7,#0x10
   \   0001A5   02....       LJMP      ?BANKED_LEAVE_XDATA
   1890          }
   1891          
   1892          /*********************************************************************
   1893           * Functions to register for ZDO Over-the-air messages
   1894           */
   1895          
   1896          /*********************************************************************
   1897           * @fn          ZDO_RegisterForZDOMsg
   1898           *
   1899           * @brief       Call this function to register of an incoming over
   1900           *              the air ZDO message - probably a response message
   1901           *              but requests can also be received.
   1902           *              Messages are delivered to the task with ZDO_CB_MSG
   1903           *              as the message ID.
   1904           *
   1905           * @param       taskID - Where you would like the message delivered
   1906           * @param       clusterID - What message?
   1907           *                          ZDO_ALL_MSGS_CLUSTERID - all responses
   1908           *                          and device announce
   1909           *
   1910           * @return      ZSuccess - successful, ZMemError if not
   1911           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1912          ZStatus_t ZDO_RegisterForZDOMsg( uint8 taskID, uint16 clusterID )
   \                     ZDO_RegisterForZDOMsg:
   1913          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V6,R1
   \   000007   8A..         MOV       ?V4,R2
   \   000009   8B..         MOV       ?V5,R3
   1914            ZDO_MsgCB_t *pList;
   1915            ZDO_MsgCB_t *pLast;
   1916            ZDO_MsgCB_t *pNew;
   1917          
   1918            // Look for duplicate
   1919            pList = pLast = zdoMsgCBs;
   \   00000B   90....       MOV       DPTR,#zdoMsgCBs
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F8           MOV       R0,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F9           MOV       R1,A
   \   000013   88..         MOV       ?V2,R0
   \   000015   89..         MOV       ?V3,R1
   \   000017   AE..         MOV       R6,?V2
   \   000019   AF..         MOV       R7,?V3
   1920            while ( pList )
   \                     ??ZDO_RegisterForZDOMsg_0:
   \   00001B   EE           MOV       A,R6
   \   00001C   4F           ORL       A,R7
   \   00001D   6035         JZ        ??ZDO_RegisterForZDOMsg_1
   1921            {
   1922              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   \   00001F   8E82         MOV       DPL,R6
   \   000021   8F83         MOV       DPH,R7
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   65..         XRL       A,?V6
   \   000028   7017         JNZ       ??ZDO_RegisterForZDOMsg_2
   \   00002A   8E82         MOV       DPL,R6
   \   00002C   8F83         MOV       DPH,R7
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   65..         XRL       A,?V4
   \   000034   7004         JNZ       ??ZDO_RegisterForZDOMsg_3
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   65..         XRL       A,?V5
   \                     ??ZDO_RegisterForZDOMsg_3:
   \   00003A   7005         JNZ       ??ZDO_RegisterForZDOMsg_2
   1923                return ( ZSuccess );
   \   00003C   7900         MOV       R1,#0x0
   \   00003E   02....       LJMP      ??ZDO_RegisterForZDOMsg_4 & 0xFFFF
   1924              pLast = pList;
   \                     ??ZDO_RegisterForZDOMsg_2:
   \   000041   EE           MOV       A,R6
   \   000042   F8           MOV       R0,A
   \   000043   EF           MOV       A,R7
   \   000044   F9           MOV       R1,A
   \   000045   88..         MOV       ?V2,R0
   \   000047   89..         MOV       ?V3,R1
   1925              pList = (ZDO_MsgCB_t *)pList->next;
   \   000049   8E82         MOV       DPL,R6
   \   00004B   8F83         MOV       DPH,R7
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   FE           MOV       R6,A
   \   00004F   A3           INC       DPTR
   \   000050   E0           MOVX      A,@DPTR
   \   000051   FF           MOV       R7,A
   \   000052   80C7         SJMP      ??ZDO_RegisterForZDOMsg_0
   1926            }
   1927          
   1928            // Add to the list
   1929            pNew = (ZDO_MsgCB_t *)osal_mem_alloc( sizeof ( ZDO_MsgCB_t ) );
   \                     ??ZDO_RegisterForZDOMsg_1:
   \   000054                ; Setup parameters for call to function osal_mem_alloc
   \   000054   7A05         MOV       R2,#0x5
   \   000056   7B00         MOV       R3,#0x0
   \   000058   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00005B   8A..         MOV       ?V8,R2
   \   00005D   8B..         MOV       ?V9,R3
   \   00005F   85....       MOV       ?V0,?V8
   \   000062   85....       MOV       ?V1,?V9
   1930            if ( pNew )
   \   000065   E5..         MOV       A,?V0
   \   000067   45..         ORL       A,?V1
   \   000069   6055         JZ        ??ZDO_RegisterForZDOMsg_5
   1931            {
   1932              pNew->taskID = taskID;
   \   00006B   E5..         MOV       A,?V6
   \   00006D   C0E0         PUSH      A
   \   00006F   85..82       MOV       DPL,?V0
   \   000072   85..83       MOV       DPH,?V1
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   D0E0         POP       A
   \   000079   F0           MOVX      @DPTR,A
   1933              pNew->clusterID = clusterID;
   \   00007A   85..82       MOV       DPL,?V0
   \   00007D   85..83       MOV       DPH,?V1
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   E5..         MOV       A,?V4
   \   000085   F0           MOVX      @DPTR,A
   \   000086   A3           INC       DPTR
   \   000087   E5..         MOV       A,?V5
   \   000089   F0           MOVX      @DPTR,A
   1934              pNew->next = NULL;
   \   00008A   85..82       MOV       DPL,?V0
   \   00008D   85..83       MOV       DPH,?V1
   \   000090   7400         MOV       A,#0x0
   \   000092   F0           MOVX      @DPTR,A
   \   000093   A3           INC       DPTR
   \   000094   7400         MOV       A,#0x0
   \   000096   F0           MOVX      @DPTR,A
   1935              if ( zdoMsgCBs )
   \   000097   90....       MOV       DPTR,#zdoMsgCBs
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   F8           MOV       R0,A
   \   00009C   A3           INC       DPTR
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   F9           MOV       R1,A
   \   00009F   E8           MOV       A,R0
   \   0000A0   49           ORL       A,R1
   \   0000A1   600F         JZ        ??ZDO_RegisterForZDOMsg_6
   1936              {
   1937                pLast->next = pNew;
   \   0000A3   85..82       MOV       DPL,?V2
   \   0000A6   85..83       MOV       DPH,?V3
   \   0000A9   E5..         MOV       A,?V0
   \   0000AB   F0           MOVX      @DPTR,A
   \   0000AC   A3           INC       DPTR
   \   0000AD   E5..         MOV       A,?V1
   \   0000AF   F0           MOVX      @DPTR,A
   \   0000B0   800A         SJMP      ??ZDO_RegisterForZDOMsg_7
   1938              }
   1939              else
   1940                zdoMsgCBs = pNew;
   \                     ??ZDO_RegisterForZDOMsg_6:
   \   0000B2   90....       MOV       DPTR,#zdoMsgCBs
   \   0000B5   E5..         MOV       A,?V0
   \   0000B7   F0           MOVX      @DPTR,A
   \   0000B8   A3           INC       DPTR
   \   0000B9   E5..         MOV       A,?V1
   \   0000BB   F0           MOVX      @DPTR,A
   1941              return ( ZSuccess );
   \                     ??ZDO_RegisterForZDOMsg_7:
   \   0000BC   7900         MOV       R1,#0x0
   \   0000BE   8002         SJMP      ??ZDO_RegisterForZDOMsg_4
   1942            }
   1943            else
   1944              return ( ZMemError );
   \                     ??ZDO_RegisterForZDOMsg_5:
   \   0000C0   7910         MOV       R1,#0x10
   \                     ??ZDO_RegisterForZDOMsg_4:
   \   0000C2   7F0A         MOV       R7,#0xa
   \   0000C4   02....       LJMP      ?BANKED_LEAVE_XDATA
   1945          }
   1946          
   1947          /*********************************************************************
   1948           * @fn          ZDO_RemoveRegisteredCB
   1949           *
   1950           * @brief       Call this function if you don't want to receive the
   1951           *              incoming message.
   1952           *
   1953           * @param       taskID - Where the messages are being delivered.
   1954           * @param       clusterID - What message?
   1955           *
   1956           * @return      ZSuccess - successful, ZFailure if not found
   1957           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1958          ZStatus_t ZDO_RemoveRegisteredCB( uint8 taskID, uint16 clusterID )
   \                     ZDO_RemoveRegisteredCB:
   1959          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV       A,#-0xd
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V4,R1
   \   000007   8A..         MOV       ?V2,R2
   \   000009   8B..         MOV       ?V3,R3
   1960            ZDO_MsgCB_t *pList;
   1961            ZDO_MsgCB_t *pLast = NULL;
   \   00000B   75..00       MOV       ?V0,#0x0
   \   00000E   75..00       MOV       ?V1,#0x0
   1962          
   1963            pList = zdoMsgCBs;
   \   000011   90....       MOV       DPTR,#zdoMsgCBs
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F8           MOV       R0,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F9           MOV       R1,A
   \   000019   E8           MOV       A,R0
   \   00001A   FE           MOV       R6,A
   \   00001B   E9           MOV       A,R1
   \   00001C   FF           MOV       R7,A
   1964            while ( pList )
   \                     ??ZDO_RemoveRegisteredCB_0:
   \   00001D   EE           MOV       A,R6
   \   00001E   4F           ORL       A,R7
   \   00001F   7003         JNZ       $+5
   \   000021   02....       LJMP      ??ZDO_RemoveRegisteredCB_1 & 0xFFFF
   1965            {
   1966              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   \   000024   8E82         MOV       DPL,R6
   \   000026   8F83         MOV       DPH,R7
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   65..         XRL       A,?V4
   \   00002D   7063         JNZ       ??ZDO_RemoveRegisteredCB_2
   \   00002F   8E82         MOV       DPL,R6
   \   000031   8F83         MOV       DPH,R7
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   65..         XRL       A,?V2
   \   000039   7004         JNZ       ??ZDO_RemoveRegisteredCB_3
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   65..         XRL       A,?V3
   \                     ??ZDO_RemoveRegisteredCB_3:
   \   00003F   7051         JNZ       ??ZDO_RemoveRegisteredCB_2
   1967              {
   1968                if ( pLast )
   \   000041   E5..         MOV       A,?V0
   \   000043   45..         ORL       A,?V1
   \   000045   6016         JZ        ??ZDO_RemoveRegisteredCB_4
   1969                {
   1970                  // remove this one from the linked list
   1971                  pLast->next = pList->next;
   \   000047   8E82         MOV       DPL,R6
   \   000049   8F83         MOV       DPH,R7
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   F8           MOV       R0,A
   \   00004D   A3           INC       DPTR
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   F9           MOV       R1,A
   \   000050   85..82       MOV       DPL,?V0
   \   000053   85..83       MOV       DPH,?V1
   \   000056   E8           MOV       A,R0
   \   000057   F0           MOVX      @DPTR,A
   \   000058   A3           INC       DPTR
   \   000059   E9           MOV       A,R1
   \   00005A   F0           MOVX      @DPTR,A
   \   00005B   802A         SJMP      ??ZDO_RemoveRegisteredCB_5
   1972                }
   1973                else if ( pList->next )
   \                     ??ZDO_RemoveRegisteredCB_4:
   \   00005D   8E82         MOV       DPL,R6
   \   00005F   8F83         MOV       DPH,R7
   \   000061   E0           MOVX      A,@DPTR
   \   000062   F8           MOV       R0,A
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F9           MOV       R1,A
   \   000066   E8           MOV       A,R0
   \   000067   49           ORL       A,R1
   \   000068   6013         JZ        ??ZDO_RemoveRegisteredCB_6
   1974                {
   1975                  // remove the first one from the linked list
   1976                  zdoMsgCBs = pList->next;
   \   00006A   8E82         MOV       DPL,R6
   \   00006C   8F83         MOV       DPH,R7
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   F8           MOV       R0,A
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   F9           MOV       R1,A
   \   000073   90....       MOV       DPTR,#zdoMsgCBs
   \   000076   E8           MOV       A,R0
   \   000077   F0           MOVX      @DPTR,A
   \   000078   A3           INC       DPTR
   \   000079   E9           MOV       A,R1
   \   00007A   F0           MOVX      @DPTR,A
   \   00007B   800A         SJMP      ??ZDO_RemoveRegisteredCB_5
   1977                }
   1978                else
   1979                {
   1980                  // remove the only item from the list
   1981                  zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   \                     ??ZDO_RemoveRegisteredCB_6:
   \   00007D   90....       MOV       DPTR,#zdoMsgCBs
   \   000080   7400         MOV       A,#0x0
   \   000082   F0           MOVX      @DPTR,A
   \   000083   A3           INC       DPTR
   \   000084   7400         MOV       A,#0x0
   \   000086   F0           MOVX      @DPTR,A
   1982                }
   1983                osal_mem_free( pList );
   \                     ??ZDO_RemoveRegisteredCB_5:
   \   000087                ; Setup parameters for call to function osal_mem_free
   \   000087   EE           MOV       A,R6
   \   000088   FA           MOV       R2,A
   \   000089   EF           MOV       A,R7
   \   00008A   FB           MOV       R3,A
   \   00008B   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1984                return ( ZSuccess );
   \   00008E   7900         MOV       R1,#0x0
   \   000090   8016         SJMP      ??ZDO_RemoveRegisteredCB_7
   1985              }
   1986              pLast = pList;
   \                     ??ZDO_RemoveRegisteredCB_2:
   \   000092   EE           MOV       A,R6
   \   000093   F8           MOV       R0,A
   \   000094   EF           MOV       A,R7
   \   000095   F9           MOV       R1,A
   \   000096   88..         MOV       ?V0,R0
   \   000098   89..         MOV       ?V1,R1
   1987              pList = pList->next;
   \   00009A   8E82         MOV       DPL,R6
   \   00009C   8F83         MOV       DPH,R7
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   FE           MOV       R6,A
   \   0000A0   A3           INC       DPTR
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   FF           MOV       R7,A
   \   0000A3   02....       LJMP      ??ZDO_RemoveRegisteredCB_0 & 0xFFFF
   1988            }
   1989          
   1990            return ( ZFailure );
   \                     ??ZDO_RemoveRegisteredCB_1:
   \   0000A6   7901         MOV       R1,#0x1
   \                     ??ZDO_RemoveRegisteredCB_7:
   \   0000A8   7F05         MOV       R7,#0x5
   \   0000AA   02....       LJMP      ?BANKED_LEAVE_XDATA
   1991          }
   1992          
   1993          /*********************************************************************
   1994           * @fn          ZDO_SendMsgCBs
   1995           *
   1996           * @brief       This function sends messages to registered tasks.
   1997           *              Local to ZDO and shouldn't be called outside of ZDO.
   1998           *
   1999           * @param       inMsg - incoming message
   2000           *
   2001           * @return      TRUE if sent to at least 1 task, FALSE if not
   2002           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2003          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDO_SendMsgCBs:
   2004          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   2005            uint8 ret = FALSE;
   \   000009   75..00       MOV       ?V7,#0x0
   2006            ZDO_MsgCB_t *pList = zdoMsgCBs;
   \   00000C   90....       MOV       DPTR,#zdoMsgCBs
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F5..         MOV       ?V2,A
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F5..         MOV       ?V3,A
   2007            while ( pList )
   \                     ??ZDO_SendMsgCBs_0:
   \   000016   E5..         MOV       A,?V2
   \   000018   45..         ORL       A,?V3
   \   00001A   7003         JNZ       $+5
   \   00001C   02....       LJMP      ??ZDO_SendMsgCBs_1 & 0xFFFF
   2008            {
   2009              if ( (pList->clusterID == inMsg->clusterID)
   2010                 || ((pList->clusterID == ZDO_ALL_MSGS_CLUSTERID)
   2011                     && ((inMsg->clusterID & ZDO_RESPONSE_BIT) || (inMsg->clusterID == Device_annce))) )
   \   00001F   85..82       MOV       DPL,?V2
   \   000022   85..83       MOV       DPH,?V3
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F8           MOV       R0,A
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F9           MOV       R1,A
   \   00002D   E5..         MOV       A,?V0
   \   00002F   240C         ADD       A,#0xc
   \   000031   F582         MOV       DPL,A
   \   000033   E4           CLR       A
   \   000034   35..         ADDC      A,?V1
   \   000036   F583         MOV       DPH,A
   \   000038   E0           MOVX      A,@DPTR
   \   000039   68           XRL       A,R0
   \   00003A   7003         JNZ       ??ZDO_SendMsgCBs_2
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   69           XRL       A,R1
   \                     ??ZDO_SendMsgCBs_2:
   \   00003F   6048         JZ        ??ZDO_SendMsgCBs_3
   \   000041   85..82       MOV       DPL,?V2
   \   000044   85..83       MOV       DPH,?V3
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   64FF         XRL       A,#0xff
   \   00004D   7004         JNZ       ??ZDO_SendMsgCBs_4
   \   00004F   A3           INC       DPTR
   \   000050   E0           MOVX      A,@DPTR
   \   000051   64FF         XRL       A,#0xff
   \                     ??ZDO_SendMsgCBs_4:
   \   000053   6003         JZ        $+5
   \   000055   02....       LJMP      ??ZDO_SendMsgCBs_5 & 0xFFFF
   \   000058   E5..         MOV       A,?V0
   \   00005A   240C         ADD       A,#0xc
   \   00005C   F582         MOV       DPL,A
   \   00005E   E4           CLR       A
   \   00005F   35..         ADDC      A,?V1
   \   000061   F583         MOV       DPH,A
   \   000063   E0           MOVX      A,@DPTR
   \   000064   5400         ANL       A,#0x0
   \   000066   F8           MOV       R0,A
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   5480         ANL       A,#0x80
   \   00006B   F9           MOV       R1,A
   \   00006C   E8           MOV       A,R0
   \   00006D   49           ORL       A,R1
   \   00006E   7019         JNZ       ??ZDO_SendMsgCBs_3
   \   000070   E5..         MOV       A,?V0
   \   000072   240C         ADD       A,#0xc
   \   000074   F582         MOV       DPL,A
   \   000076   E4           CLR       A
   \   000077   35..         ADDC      A,?V1
   \   000079   F583         MOV       DPH,A
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   6413         XRL       A,#0x13
   \   00007E   7004         JNZ       ??ZDO_SendMsgCBs_6
   \   000080   A3           INC       DPTR
   \   000081   E0           MOVX      A,@DPTR
   \   000082   6400         XRL       A,#0x0
   \                     ??ZDO_SendMsgCBs_6:
   \   000084   6003         JZ        $+5
   \   000086   02....       LJMP      ??ZDO_SendMsgCBs_5 & 0xFFFF
   2012              {
   2013                zdoIncomingMsg_t *msgPtr;
   2014          
   2015                // Send the address to the task
   2016                msgPtr = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + inMsg->asduLen );
   \                     ??ZDO_SendMsgCBs_3:
   \   000089                ; Setup parameters for call to function osal_msg_allocate
   \   000089   E5..         MOV       A,?V0
   \   00008B   2410         ADD       A,#0x10
   \   00008D   F582         MOV       DPL,A
   \   00008F   E4           CLR       A
   \   000090   35..         ADDC      A,?V1
   \   000092   F583         MOV       DPH,A
   \   000094   E0           MOVX      A,@DPTR
   \   000095   F8           MOV       R0,A
   \   000096   7900         MOV       R1,#0x0
   \   000098   E8           MOV       A,R0
   \   000099   2417         ADD       A,#0x17
   \   00009B   FA           MOV       R2,A
   \   00009C   E4           CLR       A
   \   00009D   39           ADDC      A,R1
   \   00009E   FB           MOV       R3,A
   \   00009F   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   0000A2   8A..         MOV       ?V4,R2
   \   0000A4   8B..         MOV       ?V5,R3
   \   0000A6   AE..         MOV       R6,?V4
   \   0000A8   AF..         MOV       R7,?V5
   2017                if ( msgPtr )
   \   0000AA   EE           MOV       A,R6
   \   0000AB   4F           ORL       A,R7
   \   0000AC   7003         JNZ       $+5
   \   0000AE   02....       LJMP      ??ZDO_SendMsgCBs_5 & 0xFFFF
   2018                {
   2019                  // copy struct
   2020                  osal_memcpy( msgPtr, inMsg, sizeof( zdoIncomingMsg_t ));
   \   0000B1                ; Setup parameters for call to function osal_memcpy
   \   0000B1   85....       MOV       ?V4,?V0
   \   0000B4   85....       MOV       ?V5,?V1
   \   0000B7   75..00       MOV       ?V6,#0x0
   \   0000BA   78..         MOV       R0,#?V4
   \   0000BC   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000BF   7C17         MOV       R4,#0x17
   \   0000C1   7D00         MOV       R5,#0x0
   \   0000C3   EE           MOV       A,R6
   \   0000C4   FA           MOV       R2,A
   \   0000C5   EF           MOV       A,R7
   \   0000C6   FB           MOV       R3,A
   \   0000C7   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000CA   7403         MOV       A,#0x3
   \   0000CC   12....       LCALL     ?DEALLOC_XSTACK8
   2021          
   2022                  if ( inMsg->asduLen )
   \   0000CF   E5..         MOV       A,?V0
   \   0000D1   2410         ADD       A,#0x10
   \   0000D3   F582         MOV       DPL,A
   \   0000D5   E4           CLR       A
   \   0000D6   35..         ADDC      A,?V1
   \   0000D8   F583         MOV       DPH,A
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   6054         JZ        ??ZDO_SendMsgCBs_7
   2023                  {
   2024                    msgPtr->asdu = (byte*)(((byte*)msgPtr) + sizeof( zdoIncomingMsg_t ));
   \   0000DD   EE           MOV       A,R6
   \   0000DE   2417         ADD       A,#0x17
   \   0000E0   F8           MOV       R0,A
   \   0000E1   E4           CLR       A
   \   0000E2   3F           ADDC      A,R7
   \   0000E3   F9           MOV       R1,A
   \   0000E4   EE           MOV       A,R6
   \   0000E5   2413         ADD       A,#0x13
   \   0000E7   F582         MOV       DPL,A
   \   0000E9   E4           CLR       A
   \   0000EA   3F           ADDC      A,R7
   \   0000EB   F583         MOV       DPH,A
   \   0000ED   E8           MOV       A,R0
   \   0000EE   F0           MOVX      @DPTR,A
   \   0000EF   A3           INC       DPTR
   \   0000F0   E9           MOV       A,R1
   \   0000F1   F0           MOVX      @DPTR,A
   2025                    osal_memcpy( msgPtr->asdu, inMsg->asdu, inMsg->asduLen );
   \   0000F2                ; Setup parameters for call to function osal_memcpy
   \   0000F2   E5..         MOV       A,?V0
   \   0000F4   2413         ADD       A,#0x13
   \   0000F6   F582         MOV       DPL,A
   \   0000F8   E4           CLR       A
   \   0000F9   35..         ADDC      A,?V1
   \   0000FB   F583         MOV       DPH,A
   \   0000FD   E0           MOVX      A,@DPTR
   \   0000FE   F5..         MOV       ?V4,A
   \   000100   A3           INC       DPTR
   \   000101   E0           MOVX      A,@DPTR
   \   000102   F5..         MOV       ?V5,A
   \   000104   75..00       MOV       ?V6,#0x0
   \   000107   78..         MOV       R0,#?V4
   \   000109   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00010C   E5..         MOV       A,?V0
   \   00010E   2410         ADD       A,#0x10
   \   000110   F582         MOV       DPL,A
   \   000112   E4           CLR       A
   \   000113   35..         ADDC      A,?V1
   \   000115   F583         MOV       DPH,A
   \   000117   E0           MOVX      A,@DPTR
   \   000118   FC           MOV       R4,A
   \   000119   7D00         MOV       R5,#0x0
   \   00011B   EE           MOV       A,R6
   \   00011C   2413         ADD       A,#0x13
   \   00011E   F582         MOV       DPL,A
   \   000120   E4           CLR       A
   \   000121   3F           ADDC      A,R7
   \   000122   F583         MOV       DPH,A
   \   000124   E0           MOVX      A,@DPTR
   \   000125   FA           MOV       R2,A
   \   000126   A3           INC       DPTR
   \   000127   E0           MOVX      A,@DPTR
   \   000128   FB           MOV       R3,A
   \   000129   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00012C   7403         MOV       A,#0x3
   \   00012E   12....       LCALL     ?DEALLOC_XSTACK8
   2026                  }
   2027          
   2028                  msgPtr->hdr.event = ZDO_CB_MSG;
   \                     ??ZDO_SendMsgCBs_7:
   \   000131   8E82         MOV       DPL,R6
   \   000133   8F83         MOV       DPH,R7
   \   000135   74D3         MOV       A,#-0x2d
   \   000137   F0           MOVX      @DPTR,A
   2029                  osal_msg_send( pList->taskID, (uint8 *)msgPtr );
   \   000138                ; Setup parameters for call to function osal_msg_send
   \   000138   EE           MOV       A,R6
   \   000139   FA           MOV       R2,A
   \   00013A   EF           MOV       A,R7
   \   00013B   FB           MOV       R3,A
   \   00013C   85..82       MOV       DPL,?V2
   \   00013F   85..83       MOV       DPH,?V3
   \   000142   A3           INC       DPTR
   \   000143   A3           INC       DPTR
   \   000144   E0           MOVX      A,@DPTR
   \   000145   F9           MOV       R1,A
   \   000146   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000149   E9           MOV       A,R1
   2030                  ret = TRUE;
   \   00014A   75..01       MOV       ?V7,#0x1
   2031                }
   2032              }
   2033              pList = (ZDO_MsgCB_t *)pList->next;
   \                     ??ZDO_SendMsgCBs_5:
   \   00014D   85..82       MOV       DPL,?V2
   \   000150   85..83       MOV       DPH,?V3
   \   000153   E0           MOVX      A,@DPTR
   \   000154   F5..         MOV       ?V2,A
   \   000156   A3           INC       DPTR
   \   000157   E0           MOVX      A,@DPTR
   \   000158   F5..         MOV       ?V3,A
   \   00015A   02....       LJMP      ??ZDO_SendMsgCBs_0 & 0xFFFF
   2034            }
   2035            return ( ret );
   \                     ??ZDO_SendMsgCBs_1:
   \   00015D   A9..         MOV       R1,?V7
   \   00015F   7F08         MOV       R7,#0x8
   \   000161   02....       LJMP      ?BANKED_LEAVE_XDATA
   2036          }
   2037          
   2038          /*********************************************************************
   2039           * Incoming message processor
   2040           */
   2041          
   2042          /*********************************************************************
   2043           * @fn          ZDP_IncomingData
   2044           *
   2045           * @brief       This function indicates the transfer of a data PDU (ASDU)
   2046           *              from the APS sub-layer to the ZDO.
   2047           *
   2048           * @param       pData - Incoming Message
   2049           *
   2050           * @return      none
   2051           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2052          void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
   \                     ZDP_IncomingData:
   2053          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV       A,#-0x17
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2054            uint8 x = 0;
   \   00000E   75..00       MOV       ?V0,#0x0
   2055            uint8 handled;
   2056            zdoIncomingMsg_t inMsg;
   2057          
   2058            inMsg.srcAddr.addrMode = Addr16Bit;
   \   000011   740A         MOV       A,#0xa
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   7402         MOV       A,#0x2
   \   000018   F0           MOVX      @DPTR,A
   2059            inMsg.srcAddr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
   \   000019   8E82         MOV       DPL,R6
   \   00001B   8F83         MOV       DPH,R7
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F8           MOV       R0,A
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F9           MOV       R1,A
   \   000028   7402         MOV       A,#0x2
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   E8           MOV       A,R0
   \   00002E   F0           MOVX      @DPTR,A
   \   00002F   A3           INC       DPTR
   \   000030   E9           MOV       A,R1
   \   000031   F0           MOVX      @DPTR,A
   2060            inMsg.wasBroadcast = pData->wasBroadcast;
   \   000032   EE           MOV       A,R6
   \   000033   2415         ADD       A,#0x15
   \   000035   F582         MOV       DPL,A
   \   000037   E4           CLR       A
   \   000038   3F           ADDC      A,R7
   \   000039   F583         MOV       DPH,A
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   C0E0         PUSH      A
   \   00003E   740B         MOV       A,#0xb
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   D0E0         POP       A
   \   000045   F0           MOVX      @DPTR,A
   2061            inMsg.clusterID = pData->clusterId;
   \   000046   8E82         MOV       DPL,R6
   \   000048   8F83         MOV       DPH,R7
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   F8           MOV       R0,A
   \   000050   A3           INC       DPTR
   \   000051   E0           MOVX      A,@DPTR
   \   000052   F9           MOV       R1,A
   \   000053   740C         MOV       A,#0xc
   \   000055   12....       LCALL     ?XSTACK_DISP0_8
   \   000058   E8           MOV       A,R0
   \   000059   F0           MOVX      @DPTR,A
   \   00005A   A3           INC       DPTR
   \   00005B   E9           MOV       A,R1
   \   00005C   F0           MOVX      @DPTR,A
   2062            inMsg.SecurityUse = pData->SecurityUse;
   \   00005D   EE           MOV       A,R6
   \   00005E   2419         ADD       A,#0x19
   \   000060   F582         MOV       DPL,A
   \   000062   E4           CLR       A
   \   000063   3F           ADDC      A,R7
   \   000064   F583         MOV       DPH,A
   \   000066   E0           MOVX      A,@DPTR
   \   000067   C0E0         PUSH      A
   \   000069   740E         MOV       A,#0xe
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   D0E0         POP       A
   \   000070   F0           MOVX      @DPTR,A
   2063          
   2064            inMsg.asduLen = pData->cmd.DataLength-1;
   \   000071   EE           MOV       A,R6
   \   000072   2420         ADD       A,#0x20
   \   000074   F582         MOV       DPL,A
   \   000076   E4           CLR       A
   \   000077   3F           ADDC      A,R7
   \   000078   F583         MOV       DPH,A
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   F8           MOV       R0,A
   \   00007C   A3           INC       DPTR
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   F9           MOV       R1,A
   \   00007F   E8           MOV       A,R0
   \   000080   24FF         ADD       A,#-0x1
   \   000082   C0E0         PUSH      A
   \   000084   7410         MOV       A,#0x10
   \   000086   12....       LCALL     ?XSTACK_DISP0_8
   \   000089   D0E0         POP       A
   \   00008B   F0           MOVX      @DPTR,A
   2065            inMsg.asdu = pData->cmd.Data+1;
   \   00008C   EE           MOV       A,R6
   \   00008D   2422         ADD       A,#0x22
   \   00008F   F582         MOV       DPL,A
   \   000091   E4           CLR       A
   \   000092   3F           ADDC      A,R7
   \   000093   F583         MOV       DPH,A
   \   000095   E0           MOVX      A,@DPTR
   \   000096   2401         ADD       A,#0x1
   \   000098   F8           MOV       R0,A
   \   000099   A3           INC       DPTR
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   3400         ADDC      A,#0x0
   \   00009D   F9           MOV       R1,A
   \   00009E   7413         MOV       A,#0x13
   \   0000A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A3   E8           MOV       A,R0
   \   0000A4   F0           MOVX      @DPTR,A
   \   0000A5   A3           INC       DPTR
   \   0000A6   E9           MOV       A,R1
   \   0000A7   F0           MOVX      @DPTR,A
   2066            inMsg.TransSeq = pData->cmd.Data[0];
   \   0000A8   EE           MOV       A,R6
   \   0000A9   2422         ADD       A,#0x22
   \   0000AB   F582         MOV       DPL,A
   \   0000AD   E4           CLR       A
   \   0000AE   3F           ADDC      A,R7
   \   0000AF   F583         MOV       DPH,A
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   F8           MOV       R0,A
   \   0000B3   A3           INC       DPTR
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   F583         MOV       DPH,A
   \   0000B7   8882         MOV       DPL,R0
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   C0E0         PUSH      A
   \   0000BC   740F         MOV       A,#0xf
   \   0000BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C1   D0E0         POP       A
   \   0000C3   F0           MOVX      @DPTR,A
   2067            inMsg.macDestAddr = pData->macDestAddr;
   \   0000C4   EE           MOV       A,R6
   \   0000C5   2412         ADD       A,#0x12
   \   0000C7   F582         MOV       DPL,A
   \   0000C9   E4           CLR       A
   \   0000CA   3F           ADDC      A,R7
   \   0000CB   F583         MOV       DPH,A
   \   0000CD   E0           MOVX      A,@DPTR
   \   0000CE   F8           MOV       R0,A
   \   0000CF   A3           INC       DPTR
   \   0000D0   E0           MOVX      A,@DPTR
   \   0000D1   F9           MOV       R1,A
   \   0000D2   7411         MOV       A,#0x11
   \   0000D4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D7   E8           MOV       A,R0
   \   0000D8   F0           MOVX      @DPTR,A
   \   0000D9   A3           INC       DPTR
   \   0000DA   E9           MOV       A,R1
   \   0000DB   F0           MOVX      @DPTR,A
   2068            inMsg.macSrcAddr = pData->macSrcAddr;
   \   0000DC   EE           MOV       A,R6
   \   0000DD   2424         ADD       A,#0x24
   \   0000DF   F582         MOV       DPL,A
   \   0000E1   E4           CLR       A
   \   0000E2   3F           ADDC      A,R7
   \   0000E3   F583         MOV       DPH,A
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   F8           MOV       R0,A
   \   0000E7   A3           INC       DPTR
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   F9           MOV       R1,A
   \   0000EA   7415         MOV       A,#0x15
   \   0000EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EF   E8           MOV       A,R0
   \   0000F0   F0           MOVX      @DPTR,A
   \   0000F1   A3           INC       DPTR
   \   0000F2   E9           MOV       A,R1
   \   0000F3   F0           MOVX      @DPTR,A
   2069          
   2070            handled = ZDO_SendMsgCBs( &inMsg );
   \   0000F4                ; Setup parameters for call to function ZDO_SendMsgCBs
   \   0000F4   AA..         MOV       R2,?XSP + 0
   \   0000F6   AB..         MOV       R3,?XSP + 1
   \   0000F8   12....       LCALL     `??ZDO_SendMsgCBs::?relay`; Banked call to: ZDO_SendMsgCBs
   \   0000FB   E9           MOV       A,R1
   \   0000FC   F5..         MOV       ?V1,A
   2071          
   2072          #if (defined MT_ZDO_CB_FUNC)
   2073          #if !defined MT_TASK
   2074            if (zgZdoDirectCB)
   2075          #endif
   2076            {
   2077              MT_ZdoDirectCB( pData, &inMsg );
   2078            }
   2079          #endif
   2080          
   2081            while ( zdpMsgProcs[x].clusterID != 0xFFFF )
   \                     ??ZDP_IncomingData_0:
   \   0000FE   E5..         MOV       A,?V0
   \   000100   F8           MOV       R0,A
   \   000101   7900         MOV       R1,#0x0
   \   000103   E8           MOV       A,R0
   \   000104   75F004       MOV       B,#0x4
   \   000107   A4           MUL       AB
   \   000108   C8           XCH       A,R0
   \   000109   AAF0         MOV       R2,B
   \   00010B   75F000       MOV       B,#0x0
   \   00010E   A4           MUL       AB
   \   00010F   2A           ADD       A,R2
   \   000110   FA           MOV       R2,A
   \   000111   75F004       MOV       B,#0x4
   \   000114   E9           MOV       A,R1
   \   000115   A4           MUL       AB
   \   000116   2A           ADD       A,R2
   \   000117   F9           MOV       R1,A
   \   000118   74..         MOV       A,#zdpMsgProcs & 0xff
   \   00011A   28           ADD       A,R0
   \   00011B   F582         MOV       DPL,A
   \   00011D   74..         MOV       A,#(zdpMsgProcs >> 8) & 0xff
   \   00011F   39           ADDC      A,R1
   \   000120   F583         MOV       DPH,A
   \   000122   E4           CLR       A
   \   000123   93           MOVC      A,@A+DPTR
   \   000124   F8           MOV       R0,A
   \   000125   7401         MOV       A,#0x1
   \   000127   93           MOVC      A,@A+DPTR
   \   000128   F9           MOV       R1,A
   \   000129   74FF         MOV       A,#-0x1
   \   00012B   68           XRL       A,R0
   \   00012C   7003         JNZ       ??ZDP_IncomingData_1
   \   00012E   74FF         MOV       A,#-0x1
   \   000130   69           XRL       A,R1
   \                     ??ZDP_IncomingData_1:
   \   000131   6076         JZ        ??ZDP_IncomingData_2
   2082            {
   2083              if ( zdpMsgProcs[x].clusterID == inMsg.clusterID )
   \   000133   E5..         MOV       A,?V0
   \   000135   F8           MOV       R0,A
   \   000136   7900         MOV       R1,#0x0
   \   000138   E8           MOV       A,R0
   \   000139   75F004       MOV       B,#0x4
   \   00013C   A4           MUL       AB
   \   00013D   C8           XCH       A,R0
   \   00013E   AAF0         MOV       R2,B
   \   000140   75F000       MOV       B,#0x0
   \   000143   A4           MUL       AB
   \   000144   2A           ADD       A,R2
   \   000145   FA           MOV       R2,A
   \   000146   75F004       MOV       B,#0x4
   \   000149   E9           MOV       A,R1
   \   00014A   A4           MUL       AB
   \   00014B   2A           ADD       A,R2
   \   00014C   F9           MOV       R1,A
   \   00014D   74..         MOV       A,#zdpMsgProcs & 0xff
   \   00014F   28           ADD       A,R0
   \   000150   F582         MOV       DPL,A
   \   000152   74..         MOV       A,#(zdpMsgProcs >> 8) & 0xff
   \   000154   39           ADDC      A,R1
   \   000155   F583         MOV       DPH,A
   \   000157   E4           CLR       A
   \   000158   93           MOVC      A,@A+DPTR
   \   000159   F8           MOV       R0,A
   \   00015A   7401         MOV       A,#0x1
   \   00015C   93           MOVC      A,@A+DPTR
   \   00015D   F9           MOV       R1,A
   \   00015E   740C         MOV       A,#0xc
   \   000160   12....       LCALL     ?XSTACK_DISP0_8
   \   000163   E0           MOVX      A,@DPTR
   \   000164   68           XRL       A,R0
   \   000165   7003         JNZ       ??ZDP_IncomingData_3
   \   000167   A3           INC       DPTR
   \   000168   E0           MOVX      A,@DPTR
   \   000169   69           XRL       A,R1
   \                     ??ZDP_IncomingData_3:
   \   00016A   7038         JNZ       ??ZDP_IncomingData_4
   2084              {
   2085                zdpMsgProcs[x].pFn( &inMsg );
   \   00016C                ; Setup parameters for indirect call
   \   00016C   AA..         MOV       R2,?XSP + 0
   \   00016E   AB..         MOV       R3,?XSP + 1
   \   000170   E5..         MOV       A,?V0
   \   000172   F8           MOV       R0,A
   \   000173   7900         MOV       R1,#0x0
   \   000175   E8           MOV       A,R0
   \   000176   75F004       MOV       B,#0x4
   \   000179   A4           MUL       AB
   \   00017A   C8           XCH       A,R0
   \   00017B   ACF0         MOV       R4,B
   \   00017D   75F000       MOV       B,#0x0
   \   000180   A4           MUL       AB
   \   000181   2C           ADD       A,R4
   \   000182   FC           MOV       R4,A
   \   000183   75F004       MOV       B,#0x4
   \   000186   E9           MOV       A,R1
   \   000187   A4           MUL       AB
   \   000188   2C           ADD       A,R4
   \   000189   F9           MOV       R1,A
   \   00018A   74..         MOV       A,#(zdpMsgProcs + 2) & 0xff
   \   00018C   28           ADD       A,R0
   \   00018D   F582         MOV       DPL,A
   \   00018F   74..         MOV       A,#((zdpMsgProcs + 2) >> 8) & 0xff
   \   000191   39           ADDC      A,R1
   \   000192   F583         MOV       DPH,A
   \   000194   E4           CLR       A
   \   000195   93           MOVC      A,@A+DPTR
   \   000196   C0E0         PUSH      A
   \   000198   7401         MOV       A,#0x1
   \   00019A   93           MOVC      A,@A+DPTR
   \   00019B   F583         MOV       DPH,A
   \   00019D   D082         POP       DPL
   \   00019F   12....       LCALL     ?CALL_IND
   2086                return;
   \   0001A2   8010         SJMP      ??ZDP_IncomingData_5
   2087              }
   2088              x++;
   \                     ??ZDP_IncomingData_4:
   \   0001A4   05..         INC       ?V0
   \   0001A6   02....       LJMP      ??ZDP_IncomingData_0 & 0xFFFF
   2089            }
   2090          
   2091            // Handle unhandled messages
   2092            if ( !handled )
   \                     ??ZDP_IncomingData_2:
   \   0001A9   E5..         MOV       A,?V1
   \   0001AB   7007         JNZ       ??ZDP_IncomingData_5
   2093              ZDApp_InMsgCB( &inMsg );
   \   0001AD                ; Setup parameters for call to function ZDApp_InMsgCB
   \   0001AD   AA..         MOV       R2,?XSP + 0
   \   0001AF   AB..         MOV       R3,?XSP + 1
   \   0001B1   12....       LCALL     `??ZDApp_InMsgCB::?relay`; Banked call to: ZDApp_InMsgCB
   2094          }
   \                     ??ZDP_IncomingData_5:
   \   0001B4   7417         MOV       A,#0x17
   \   0001B6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001B9   7F02         MOV       R7,#0x2
   \   0001BB   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDP_TmpBuf>`:
   \   000000   ....         DW ZDP_Buf + 1H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_a:
   \   000000   0A000000     DD 10
   2095          
   2096          /*********************************************************************
   2097          *********************************************************************/
   2098          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     18   ZDO_RegisterForZDOMsg
        0     18   -> osal_mem_alloc
      0     13   ZDO_RemoveRegisteredCB
        0     13   -> osal_mem_free
      0     52   ZDO_SendMsgCBs
        0     19   -> osal_memcpy
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      1     34   ZDP_BindUnbindReq
        0     26   -> fillAndSend
        0     24   -> sAddrExtCpy
      1     26   ZDP_DeviceAnnce
        0     25   -> fillAndSend
        0     23   -> sAddrExtCpy
      1     35   ZDP_EPRsp
        0     27   -> fillAndSend
        0     28   -> osal_memcpy
      1     38   ZDP_EndDeviceBindReq
        0     27   -> NLME_GetExtAddr
        0     27   -> NLME_GetShortAddr
        0     29   -> fillAndSend
        0     27   -> sAddrExtCpy
      1     23   ZDP_GenericRsp
        0     19   -> fillAndSend
      1     27   ZDP_IEEEAddrReq
        0     27   -> fillAndSend
      1     33   ZDP_IncomingData
        0     33   -> ZDApp_InMsgCB
        0     33   -> ZDO_SendMsgCBs
      1     34   ZDP_MatchDescReq
        0     26   -> fillAndSend
      1     34   ZDP_MgmtBindRsp
        0     29   -> fillAndSend
        0     27   -> osal_mem_alloc
        0     27   -> osal_mem_free
        0     27   -> sAddrExtCpy
      1     17   ZDP_MgmtDirectJoinReq
        0     16   -> fillAndSend
        0     14   -> sAddrExtCpy
      0     18   ZDP_MgmtLeaveReq
        0     16   -> fillAndSend
        0     14   -> sAddrExtCpy
      1     32   ZDP_MgmtLqiRsp
        0     27   -> fillAndSend
        0     25   -> osal_mem_alloc
        0     25   -> osal_mem_free
        0     25   -> sAddrExtCpy
      1     30   ZDP_MgmtNwkDiscReq
        0     24   -> fillAndSend
        0     26   -> osal_buffer_uint32
      1     32   ZDP_MgmtNwkDiscRsp
        0     27   -> fillAndSend
        0     25   -> osal_mem_alloc
        0     25   -> osal_mem_free
        0     25   -> sAddrExtCpy
      1     43   ZDP_MgmtNwkUpdateNotify
        0     29   -> fillAndSend
        0     31   -> osal_buffer_uint32
        0     27   -> osal_mem_alloc
        0     27   -> osal_mem_free
        0     30   -> osal_memcpy
      1     32   ZDP_MgmtNwkUpdateReq
        0     24   -> fillAndSend
        0     26   -> osal_buffer_uint32
      1     25   ZDP_MgmtPermitJoinReq
        0     23   -> NLME_GetShortAddr
        0     25   -> fillAndSend
      1     32   ZDP_MgmtRtgRsp
        0     27   -> fillAndSend
        0     25   -> osal_mem_alloc
        0     25   -> osal_mem_free
      1     17   ZDP_NWKAddrOfInterestReq
        0     16   -> fillAndSend
      1     22   ZDP_NodeDescMsg
        0     20   -> fillAndSend
      1     27   ZDP_NwkAddrReq
        0     27   -> fillAndSend
        0     25   -> sAddrExtCmp
        0     25   -> sAddrExtCpy
      1     33   ZDP_ParentAnnce
        0     24   -> ZDApp_SetParentAnnceTimer
        0     26   -> fillAndSend
        0     28   -> osal_start_timerEx
        0     24   -> sAddrExtCpy
      1     22   ZDP_PowerDescMsg
        0     20   -> fillAndSend
      1     29   ZDP_SendData
        0     24   -> fillAndSend
      1     25   ZDP_ServerDiscReq
        0     25   -> fillAndSend
      1     25   ZDP_ServerDiscRsp
        0     21   -> fillAndSend
      1     20   ZDP_SimpleDescMsg
        0     20   -> fillAndSend
      1     17   ZDP_SimpleDescReq
        0     16   -> fillAndSend
      1     27   ZDP_UserDescRsp
        0     23   -> fillAndSend
        0     24   -> osal_memcpy
      1     25   ZDP_UserDescSet
        0     22   -> fillAndSend
        0     23   -> osal_memcpy
        0     20   -> osal_memset
      1     67   fillAndSend
        0     37   -> AF_DataRequest
        0     28   -> osal_memset
      1     30   zdpProcessAddrReq
        0     30   -> fillAndSend
        0     28   -> osal_memset
        0     28   -> sAddrExtCmp
        0     28   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDP_TmpBuf>
     199  ZDO_RegisterForZDOMsg
     173  ZDO_RemoveRegisteredCB
     356  ZDO_SendMsgCBs
       1  ZDP_AF_ENDPOINT
     418  ZDP_BindUnbindReq
      80  ZDP_Buf
     171  ZDP_DeviceAnnce
     279  ZDP_EPRsp
     669  ZDP_EndDeviceBindReq
     168  ZDP_GenericRsp
     178  ZDP_IEEEAddrReq
     446  ZDP_IncomingData
     655  ZDP_MatchDescReq
     649  ZDP_MgmtBindRsp
      88  ZDP_MgmtDirectJoinReq
     146  ZDP_MgmtLeaveReq
     646  ZDP_MgmtLqiRsp
     148  ZDP_MgmtNwkDiscReq
     501  ZDP_MgmtNwkDiscRsp
     424  ZDP_MgmtNwkUpdateNotify
     274  ZDP_MgmtNwkUpdateReq
     235  ZDP_MgmtPermitJoinReq
     551  ZDP_MgmtRtgRsp
      93  ZDP_NWKAddrOfInterestReq
     593  ZDP_NodeDescMsg
     193  ZDP_NwkAddrReq
     401  ZDP_ParentAnnce
     262  ZDP_PowerDescMsg
     168  ZDP_SendData
     151  ZDP_ServerDiscReq
     176  ZDP_ServerDiscRsp
     947  ZDP_SimpleDescMsg
     112  ZDP_SimpleDescReq
       2  ZDP_TmpBuf
       1  ZDP_TransID
       1  ZDP_TxOptions
     237  ZDP_UserDescRsp
     242  ZDP_UserDescSet
       4  __Constant_a
       1  childIndex
     220  fillAndSend
       2  zdoMsgCBs
      52  zdpMsgProcs
     568  zdpProcessAddrReq
     210  -- Other

 
 11 737 bytes in segment BANKED_CODE
    210 bytes in segment BANK_RELAYS
     53 bytes in segment CODE_C
      2 bytes in segment XDATA_I
      2 bytes in segment XDATA_ID
      4 bytes in segment XDATA_ROM_C
     85 bytes in segment XDATA_Z
 
    265 bytes of CODE     memory
      0 bytes of CONST    memory (+ 4 bytes shared)
 11 737 bytes of HUGECODE memory
     87 bytes of XDATA    memory

Errors: none
Warnings: none
