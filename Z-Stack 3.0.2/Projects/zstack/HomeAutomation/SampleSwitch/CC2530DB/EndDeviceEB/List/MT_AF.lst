###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               05/Aug/2020  22:51:05
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\AA\Z-Stack 3.0.2\Components\mt\MT_AF.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW339B.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\mt\MT_AF.c" -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT
#        -D NV_RESTORE -D POWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D
#        xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_GROUPS -D
#        BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=0
#        -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0 -DREJOIN_POLL_RATE=0
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\MT_AF.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\MT_AF.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\mt\MT_AF.c
      1          /**************************************************************************************************
      2            Filename:       MT_AF.c
      3            Revised:        $Date: 2015-01-26 08:25:50 -0800 (Mon, 26 Jan 2015) $
      4            Revision:       $Revision: 42025 $
      5          
      6            Description:    MonitorTest functions for the AF layer.
      7          
      8            Copyright 2007-2015 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License"). You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product. Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "MT.h"
     47          #include "MT_AF.h"
     48          #include "MT_ZDO.h"
     49          #include "nwk.h"
     50          #include "OnBoard.h"
     51          #include "MT_UART.h"
     52          
     53          #if defined INTER_PAN
     54          #include "stub_aps.h"
     55          #endif
     56          
     57          
     58          /* ------------------------------------------------------------------------------------------------
     59           *                                          Constants
     60           * ------------------------------------------------------------------------------------------------
     61           */
     62          
     63          #if !defined MT_AF_EXEC_CNT
     64          #define MT_AF_EXEC_CNT  15
     65          #endif
     66          
     67          #if !defined MT_AF_EXEC_DLY
     68          #define MT_AF_EXEC_DLY  1000
     69          #endif
     70          
     71          /* ------------------------------------------------------------------------------------------------
     72           *                                           Typedefs
     73           * ------------------------------------------------------------------------------------------------
     74           */
     75          
     76          typedef struct
     77          {
     78            uint8 *data;
     79            afAddrType_t dstAddr;
     80            endPointDesc_t *epDesc;
     81            uint16 cId;
     82            uint16 dataLen;
     83            uint8 transId;
     84            uint8 txOpts;
     85            uint8 radius;
     86            uint8 tick;
     87          } mtAfDataReq_t;
     88          
     89          typedef struct _mtAfInMsgList_t
     90          {
     91            struct _mtAfInMsgList_t *next;
     92            uint8 *data;
     93            uint32 timestamp;         // Receipt timestamp from MAC.
     94            uint8 tick;
     95          } mtAfInMsgList_t;
     96          
     97          /* ------------------------------------------------------------------------------------------------
     98           *                                        Local Variables
     99           * ------------------------------------------------------------------------------------------------
    100           */
    101          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          mtAfInMsgList_t *pMtAfInMsgList = NULL;
   \                     pMtAfInMsgList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          mtAfDataReq_t *pMtAfDataReq = NULL;
   \                     pMtAfDataReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    104          
    105          /* ------------------------------------------------------------------------------------------------
    106           *                                        Global Variables
    107           * ------------------------------------------------------------------------------------------------
    108           */
    109          
    110          #if defined ( MT_AF_CB_FUNC )
    111          uint16 _afCallbackSub;
    112          #endif
    113          
    114          /* ------------------------------------------------------------------------------------------------
    115           *                                        Local Functions
    116           * ------------------------------------------------------------------------------------------------
    117           */
    118          
    119          static void MT_AfRegister(uint8 *pBuf);
    120          static void MT_AfDelete(uint8 *pBuf);
    121          static void MT_AfDataRequest(uint8 *pBuf);
    122          
    123          #if defined ( ZIGBEEPRO )
    124          static void MT_AfDataRequestSrcRtg(uint8 *pBuf);
    125          #endif
    126          
    127          #if defined INTER_PAN
    128          static void MT_AfInterPanCtl(uint8 *pBuf);
    129          #endif
    130          
    131          static void MT_AfDataRetrieve(uint8 *pBuf);
    132          static void MT_AfDataStore(uint8 *pBuf);
    133          static void MT_AfAPSF_ConfigSet(uint8 *pBuf);
    134          static void MT_AfAPSF_ConfigGet(uint8 *pBuf);
    135          
    136          
    137          /**************************************************************************************************
    138           * @fn          MT_AfExec
    139           *
    140           * @brief       This function is invoked by an MT timer event.
    141           *
    142           * input parameters
    143           *
    144           * None.
    145           *
    146           * output parameters
    147           *
    148           * None.
    149           *
    150           * @return      None.
    151           **************************************************************************************************
    152           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    153          void MT_AfExec(void)
   \                     MT_AfExec:
    154          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    155            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \   000005   90....       MOV       DPTR,#pMtAfInMsgList
   \   000008   E0           MOVX      A,@DPTR
   \   000009   FE           MOV       R6,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   FF           MOV       R7,A
    156          
    157            while (pItem != NULL)
   \                     ??MT_AfExec_0:
   \   00000D   EE           MOV       A,R6
   \   00000E   4F           ORL       A,R7
   \   00000F   7003         JNZ       $+5
   \   000011   02....       LJMP      ??MT_AfExec_1 & 0xFFFF
    158            {
    159              if (--(pItem->tick) == 0)
   \   000014   8E82         MOV       DPL,R6
   \   000016   8F83         MOV       DPH,R7
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   24FF         ADD       A,#-0x1
   \   000023   F0           MOVX      @DPTR,A
   \   000024   8E82         MOV       DPL,R6
   \   000026   8F83         MOV       DPH,R7
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   7063         JNZ       ??MT_AfExec_2
    160              {
    161                if (pMtAfInMsgList == pItem)
   \   000033   90....       MOV       DPTR,#pMtAfInMsgList
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F8           MOV       R0,A
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F9           MOV       R1,A
   \   00003B   EE           MOV       A,R6
   \   00003C   68           XRL       A,R0
   \   00003D   7002         JNZ       ??MT_AfExec_3
   \   00003F   EF           MOV       A,R7
   \   000040   69           XRL       A,R1
   \                     ??MT_AfExec_3:
   \   000041   7026         JNZ       ??MT_AfExec_4
    162                {
    163                  pMtAfInMsgList = pItem->next;
   \   000043   8E82         MOV       DPL,R6
   \   000045   8F83         MOV       DPH,R7
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F8           MOV       R0,A
   \   000049   A3           INC       DPTR
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F9           MOV       R1,A
   \   00004C   90....       MOV       DPTR,#pMtAfInMsgList
   \   00004F   E8           MOV       A,R0
   \   000050   F0           MOVX      @DPTR,A
   \   000051   A3           INC       DPTR
   \   000052   E9           MOV       A,R1
   \   000053   F0           MOVX      @DPTR,A
    164                  (void)osal_mem_free(pItem);
   \   000054                ; Setup parameters for call to function osal_mem_free
   \   000054   EE           MOV       A,R6
   \   000055   FA           MOV       R2,A
   \   000056   EF           MOV       A,R7
   \   000057   FB           MOV       R3,A
   \   000058   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    165                  pItem = pMtAfInMsgList;
   \   00005B   90....       MOV       DPTR,#pMtAfInMsgList
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F8           MOV       R0,A
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   F9           MOV       R1,A
   \   000063   E8           MOV       A,R0
   \   000064   FE           MOV       R6,A
   \   000065   E9           MOV       A,R1
   \   000066   FF           MOV       R7,A
   \   000067   80A4         SJMP      ??MT_AfExec_0
    166                }
    167                else
    168                {
    169                  pPrev->next = pItem->next;
   \                     ??MT_AfExec_4:
   \   000069   8E82         MOV       DPL,R6
   \   00006B   8F83         MOV       DPH,R7
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   F8           MOV       R0,A
   \   00006F   A3           INC       DPTR
   \   000070   E0           MOVX      A,@DPTR
   \   000071   F9           MOV       R1,A
   \   000072   85..82       MOV       DPL,?V0
   \   000075   85..83       MOV       DPH,?V1
   \   000078   E8           MOV       A,R0
   \   000079   F0           MOVX      @DPTR,A
   \   00007A   A3           INC       DPTR
   \   00007B   E9           MOV       A,R1
   \   00007C   F0           MOVX      @DPTR,A
    170                  (void)osal_mem_free(pItem);
   \   00007D                ; Setup parameters for call to function osal_mem_free
   \   00007D   EE           MOV       A,R6
   \   00007E   FA           MOV       R2,A
   \   00007F   EF           MOV       A,R7
   \   000080   FB           MOV       R3,A
   \   000081   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    171                  pItem = pPrev->next;
   \   000084   85..82       MOV       DPL,?V0
   \   000087   85..83       MOV       DPH,?V1
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   F8           MOV       R0,A
   \   00008C   A3           INC       DPTR
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   F9           MOV       R1,A
   \   00008F   E8           MOV       A,R0
   \   000090   FE           MOV       R6,A
   \   000091   E9           MOV       A,R1
   \   000092   FF           MOV       R7,A
   \   000093   02....       LJMP      ??MT_AfExec_0 & 0xFFFF
    172                }
    173              }
    174              else
    175              {
    176                pPrev = pItem;
   \                     ??MT_AfExec_2:
   \   000096   8E..         MOV       ?V0,R6
   \   000098   8F..         MOV       ?V1,R7
    177                pItem = pItem->next;
   \   00009A   8E82         MOV       DPL,R6
   \   00009C   8F83         MOV       DPH,R7
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   FE           MOV       R6,A
   \   0000A0   A3           INC       DPTR
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   FF           MOV       R7,A
   \   0000A3   02....       LJMP      ??MT_AfExec_0 & 0xFFFF
    178              }
    179            }
    180          
    181            if (pMtAfDataReq != NULL)
   \                     ??MT_AfExec_1:
   \   0000A6   90....       MOV       DPTR,#pMtAfDataReq
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   F8           MOV       R0,A
   \   0000AB   A3           INC       DPTR
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   F9           MOV       R1,A
   \   0000AE   E8           MOV       A,R0
   \   0000AF   49           ORL       A,R1
   \   0000B0   603E         JZ        ??MT_AfExec_5
    182            {
    183              if (--(pMtAfDataReq->tick) == 0)
   \   0000B2   90....       MOV       DPTR,#pMtAfDataReq
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   F8           MOV       R0,A
   \   0000B7   A3           INC       DPTR
   \   0000B8   E0           MOVX      A,@DPTR
   \   0000B9   C8           XCH       A,R0
   \   0000BA   2417         ADD       A,#0x17
   \   0000BC   F582         MOV       DPL,A
   \   0000BE   C8           XCH       A,R0
   \   0000BF   3400         ADDC      A,#0x0
   \   0000C1   F583         MOV       DPH,A
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   24FF         ADD       A,#-0x1
   \   0000C6   F0           MOVX      @DPTR,A
   \   0000C7   90....       MOV       DPTR,#pMtAfDataReq
   \   0000CA   E0           MOVX      A,@DPTR
   \   0000CB   F8           MOV       R0,A
   \   0000CC   A3           INC       DPTR
   \   0000CD   E0           MOVX      A,@DPTR
   \   0000CE   C8           XCH       A,R0
   \   0000CF   2417         ADD       A,#0x17
   \   0000D1   F582         MOV       DPL,A
   \   0000D3   C8           XCH       A,R0
   \   0000D4   3400         ADDC      A,#0x0
   \   0000D6   F583         MOV       DPH,A
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   7015         JNZ       ??MT_AfExec_5
    184              {
    185                (void)osal_mem_free(pMtAfDataReq);
   \   0000DB                ; Setup parameters for call to function osal_mem_free
   \   0000DB   90....       MOV       DPTR,#pMtAfDataReq
   \   0000DE   E0           MOVX      A,@DPTR
   \   0000DF   FA           MOV       R2,A
   \   0000E0   A3           INC       DPTR
   \   0000E1   E0           MOVX      A,@DPTR
   \   0000E2   FB           MOV       R3,A
   \   0000E3   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    186                pMtAfDataReq = NULL;
   \   0000E6   90....       MOV       DPTR,#pMtAfDataReq
   \   0000E9   7400         MOV       A,#0x0
   \   0000EB   F0           MOVX      @DPTR,A
   \   0000EC   A3           INC       DPTR
   \   0000ED   7400         MOV       A,#0x0
   \   0000EF   F0           MOVX      @DPTR,A
    187              }
    188            }
    189          
    190            if ((pMtAfInMsgList != NULL) || (pMtAfDataReq != NULL))
   \                     ??MT_AfExec_5:
   \   0000F0   90....       MOV       DPTR,#pMtAfInMsgList
   \   0000F3   E0           MOVX      A,@DPTR
   \   0000F4   F8           MOV       R0,A
   \   0000F5   A3           INC       DPTR
   \   0000F6   E0           MOVX      A,@DPTR
   \   0000F7   F9           MOV       R1,A
   \   0000F8   E8           MOV       A,R0
   \   0000F9   49           ORL       A,R1
   \   0000FA   700C         JNZ       ??MT_AfExec_6
   \   0000FC   90....       MOV       DPTR,#pMtAfDataReq
   \   0000FF   E0           MOVX      A,@DPTR
   \   000100   F8           MOV       R0,A
   \   000101   A3           INC       DPTR
   \   000102   E0           MOVX      A,@DPTR
   \   000103   F9           MOV       R1,A
   \   000104   E8           MOV       A,R0
   \   000105   49           ORL       A,R1
   \   000106   6027         JZ        ??MT_AfExec_7
    191            {
    192              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??MT_AfExec_6:
   \   000108                ; Setup parameters for call to function osal_start_timerEx
   \   000108   90....       MOV       DPTR,#__Constant_3e8
   \   00010B   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00010E   7A08         MOV       R2,#0x8
   \   000110   7B00         MOV       R3,#0x0
   \   000112   90....       MOV       DPTR,#MT_TaskID
   \   000115   E0           MOVX      A,@DPTR
   \   000116   F9           MOV       R1,A
   \   000117   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00011A   7404         MOV       A,#0x4
   \   00011C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00011F   E9           MOV       A,R1
   \   000120   600D         JZ        ??MT_AfExec_7
    193              {
    194                osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   000122                ; Setup parameters for call to function osal_set_event
   \   000122   7A08         MOV       R2,#0x8
   \   000124   7B00         MOV       R3,#0x0
   \   000126   90....       MOV       DPTR,#MT_TaskID
   \   000129   E0           MOVX      A,@DPTR
   \   00012A   F9           MOV       R1,A
   \   00012B   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00012E   E9           MOV       A,R1
    195              }
    196            }
    197          }
   \                     ??MT_AfExec_7:
   \   00012F   7F02         MOV       R7,#0x2
   \   000131   02....       LJMP      ?BANKED_LEAVE_XDATA
    198          
    199          /***************************************************************************************************
    200           * @fn      MT_AfCommandProcessing
    201           *
    202           * @brief   Process all the AF commands that are issued by test tool
    203           *
    204           * @param   pBuf - pointer to the received buffer
    205           *
    206           * @return  status
    207           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    208          uint8 MT_AfCommandProcessing(uint8 *pBuf)
   \                     MT_AfCommandProcessing:
    209          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    210            uint8 status = MT_RPC_SUCCESS;
   \   000009   75..00       MOV       ?V0,#0x0
    211          
    212            switch (pBuf[MT_RPC_POS_CMD1])
   \   00000C   8E82         MOV       DPL,R6
   \   00000E   8F83         MOV       DPH,R7
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   601E         JZ        ??MT_AfCommandProcessing_0
   \   000015   14           DEC       A
   \   000016   602D         JZ        ??MT_AfCommandProcessing_1
   \   000018   14           DEC       A
   \   000019   602A         JZ        ??MT_AfCommandProcessing_1
   \   00001B   14           DEC       A
   \   00001C   6030         JZ        ??MT_AfCommandProcessing_2
   \   00001E   14           DEC       A
   \   00001F   601B         JZ        ??MT_AfCommandProcessing_3
   \   000021   24F4         ADD       A,#-0xc
   \   000023   6032         JZ        ??MT_AfCommandProcessing_4
   \   000025   14           DEC       A
   \   000026   6041         JZ        ??MT_AfCommandProcessing_5
   \   000028   14           DEC       A
   \   000029   6035         JZ        ??MT_AfCommandProcessing_6
   \   00002B   14           DEC       A
   \   00002C   6044         JZ        ??MT_AfCommandProcessing_7
   \   00002E   14           DEC       A
   \   00002F   604A         JZ        ??MT_AfCommandProcessing_8
   \   000031   8051         SJMP      ??MT_AfCommandProcessing_9
    213            {
    214              case MT_AF_REGISTER:
    215                MT_AfRegister(pBuf);
   \                     ??MT_AfCommandProcessing_0:
   \   000033                ; Setup parameters for call to function MT_AfRegister
   \   000033   EE           MOV       A,R6
   \   000034   FA           MOV       R2,A
   \   000035   EF           MOV       A,R7
   \   000036   FB           MOV       R3,A
   \   000037   12....       LCALL     `??MT_AfRegister::?relay`; Banked call to: MT_AfRegister
    216                break;
   \   00003A   804B         SJMP      ??MT_AfCommandProcessing_10
    217          
    218              case MT_AF_DELETE:
    219                MT_AfDelete( pBuf );
   \                     ??MT_AfCommandProcessing_3:
   \   00003C                ; Setup parameters for call to function MT_AfDelete
   \   00003C   EE           MOV       A,R6
   \   00003D   FA           MOV       R2,A
   \   00003E   EF           MOV       A,R7
   \   00003F   FB           MOV       R3,A
   \   000040   12....       LCALL     `??MT_AfDelete::?relay`; Banked call to: MT_AfDelete
    220                break;
   \   000043   8042         SJMP      ??MT_AfCommandProcessing_10
    221          
    222              case MT_AF_DATA_REQUEST:
    223              case MT_AF_DATA_REQUEST_EXT:
    224                MT_AfDataRequest(pBuf);
   \                     ??MT_AfCommandProcessing_1:
   \   000045                ; Setup parameters for call to function MT_AfDataRequest
   \   000045   EE           MOV       A,R6
   \   000046   FA           MOV       R2,A
   \   000047   EF           MOV       A,R7
   \   000048   FB           MOV       R3,A
   \   000049   12....       LCALL     `??MT_AfDataRequest::?relay`; Banked call to: MT_AfDataRequest
    225                break;
   \   00004C   8039         SJMP      ??MT_AfCommandProcessing_10
    226          
    227          #if defined( ZIGBEEPRO )
    228              case MT_AF_DATA_REQUEST_SRCRTG:
    229                MT_AfDataRequestSrcRtg(pBuf);
   \                     ??MT_AfCommandProcessing_2:
   \   00004E                ; Setup parameters for call to function MT_AfDataRequestSrcRtg
   \   00004E   EE           MOV       A,R6
   \   00004F   FA           MOV       R2,A
   \   000050   EF           MOV       A,R7
   \   000051   FB           MOV       R3,A
   \   000052   12....       LCALL     `??MT_AfDataRequestSrcRtg::?relay`; Banked call to: MT_AfDataRequestSrcRtg
    230                break;
   \   000055   8030         SJMP      ??MT_AfCommandProcessing_10
    231          #endif
    232          
    233          #if defined INTER_PAN
    234              case MT_AF_INTER_PAN_CTL:
    235                MT_AfInterPanCtl(pBuf);
   \                     ??MT_AfCommandProcessing_4:
   \   000057                ; Setup parameters for call to function MT_AfInterPanCtl
   \   000057   EE           MOV       A,R6
   \   000058   FA           MOV       R2,A
   \   000059   EF           MOV       A,R7
   \   00005A   FB           MOV       R3,A
   \   00005B   12....       LCALL     `??MT_AfInterPanCtl::?relay`; Banked call to: MT_AfInterPanCtl
    236                break;
   \   00005E   8027         SJMP      ??MT_AfCommandProcessing_10
    237          #endif
    238          
    239              case MT_AF_DATA_RETRIEVE:
    240                MT_AfDataRetrieve(pBuf);
   \                     ??MT_AfCommandProcessing_6:
   \   000060                ; Setup parameters for call to function MT_AfDataRetrieve
   \   000060   EE           MOV       A,R6
   \   000061   FA           MOV       R2,A
   \   000062   EF           MOV       A,R7
   \   000063   FB           MOV       R3,A
   \   000064   12....       LCALL     `??MT_AfDataRetrieve::?relay`; Banked call to: MT_AfDataRetrieve
    241                break;
   \   000067   801E         SJMP      ??MT_AfCommandProcessing_10
    242          
    243              case MT_AF_DATA_STORE:
    244                MT_AfDataStore(pBuf);
   \                     ??MT_AfCommandProcessing_5:
   \   000069                ; Setup parameters for call to function MT_AfDataStore
   \   000069   EE           MOV       A,R6
   \   00006A   FA           MOV       R2,A
   \   00006B   EF           MOV       A,R7
   \   00006C   FB           MOV       R3,A
   \   00006D   12....       LCALL     `??MT_AfDataStore::?relay`; Banked call to: MT_AfDataStore
    245                break;
   \   000070   8015         SJMP      ??MT_AfCommandProcessing_10
    246          
    247              case MT_AF_APSF_CONFIG_SET:
    248                MT_AfAPSF_ConfigSet(pBuf);
   \                     ??MT_AfCommandProcessing_7:
   \   000072                ; Setup parameters for call to function MT_AfAPSF_ConfigSet
   \   000072   EE           MOV       A,R6
   \   000073   FA           MOV       R2,A
   \   000074   EF           MOV       A,R7
   \   000075   FB           MOV       R3,A
   \   000076   12....       LCALL     `??MT_AfAPSF_ConfigSet::?relay`; Banked call to: MT_AfAPSF_ConfigSet
    249                break;
   \   000079   800C         SJMP      ??MT_AfCommandProcessing_10
    250          
    251              case MT_AF_APSF_CONFIG_GET:
    252                MT_AfAPSF_ConfigGet(pBuf);
   \                     ??MT_AfCommandProcessing_8:
   \   00007B                ; Setup parameters for call to function MT_AfAPSF_ConfigGet
   \   00007B   EE           MOV       A,R6
   \   00007C   FA           MOV       R2,A
   \   00007D   EF           MOV       A,R7
   \   00007E   FB           MOV       R3,A
   \   00007F   12....       LCALL     `??MT_AfAPSF_ConfigGet::?relay`; Banked call to: MT_AfAPSF_ConfigGet
    253                break;
   \   000082   8003         SJMP      ??MT_AfCommandProcessing_10
    254          
    255              default:
    256                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_AfCommandProcessing_9:
   \   000084   75..02       MOV       ?V0,#0x2
    257                break;
    258            }
    259          
    260            return status;
   \                     ??MT_AfCommandProcessing_10:
   \   000087   A9..         MOV       R1,?V0
   \   000089   7F01         MOV       R7,#0x1
   \   00008B   02....       LJMP      ?BANKED_LEAVE_XDATA
    261          }
    262          
    263          /***************************************************************************************************
    264           * @fn      MT_AfRegister
    265           *
    266           * @brief   Process AF Register command
    267           *
    268           * @param   pBuf - pointer to the received buffer
    269           *
    270           * @return  none
    271           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    272          static void MT_AfRegister(uint8 *pBuf)
   \                     MT_AfRegister:
    273          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
    274            uint8 cmdId;
    275            uint8 retValue = ZMemError;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   7410         MOV       A,#0x10
   \   000016   F0           MOVX      @DPTR,A
    276            endPointDesc_t *epDesc;
    277          
    278            /* parse header */
    279            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000017   85..82       MOV       DPL,?V0
   \   00001A   85..83       MOV       DPH,?V1
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V2,A
    280            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000022   E5..         MOV       A,?V0
   \   000024   2403         ADD       A,#0x3
   \   000026   F5..         MOV       ?V0,A
   \   000028   5002         JNC       ??MT_AfRegister_0
   \   00002A   05..         INC       ?V1
    281          
    282            epDesc = (endPointDesc_t *)osal_mem_alloc(sizeof(endPointDesc_t));
   \                     ??MT_AfRegister_0:
   \   00002C                ; Setup parameters for call to function osal_mem_alloc
   \   00002C   7A07         MOV       R2,#0x7
   \   00002E   7B00         MOV       R3,#0x0
   \   000030   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000033   8A..         MOV       ?V4,R2
   \   000035   8B..         MOV       ?V5,R3
   \   000037   AE..         MOV       R6,?V4
   \   000039   AF..         MOV       R7,?V5
    283            if ( epDesc )
   \   00003B   EE           MOV       A,R6
   \   00003C   4F           ORL       A,R7
   \   00003D   6050         JZ        ??MT_AfRegister_1
    284            {
    285              epDesc->task_id = &MT_TaskID;
   \   00003F   8E82         MOV       DPL,R6
   \   000041   8F83         MOV       DPH,R7
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   74..         MOV       A,#MT_TaskID & 0xff
   \   000047   F0           MOVX      @DPTR,A
   \   000048   A3           INC       DPTR
   \   000049   74..         MOV       A,#(MT_TaskID >> 8) & 0xff
   \   00004B   F0           MOVX      @DPTR,A
    286              retValue = MT_BuildEndpointDesc( pBuf, epDesc );
   \   00004C                ; Setup parameters for call to function MT_BuildEndpointDesc
   \   00004C   EE           MOV       A,R6
   \   00004D   FC           MOV       R4,A
   \   00004E   EF           MOV       A,R7
   \   00004F   FD           MOV       R5,A
   \   000050   AA..         MOV       R2,?V0
   \   000052   AB..         MOV       R3,?V1
   \   000054   12....       LCALL     `??MT_BuildEndpointDesc::?relay`; Banked call to: MT_BuildEndpointDesc
   \   000057   E9           MOV       A,R1
   \   000058   C0E0         PUSH      A
   \   00005A   85..82       MOV       DPL,?XSP + 0
   \   00005D   85..83       MOV       DPH,?XSP + 1
   \   000060   D0E0         POP       A
   \   000062   F0           MOVX      @DPTR,A
    287              if ( retValue == ZSuccess )
   \   000063   85..82       MOV       DPL,?XSP + 0
   \   000066   85..83       MOV       DPH,?XSP + 1
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   7013         JNZ       ??MT_AfRegister_2
    288              {
    289                retValue = afRegister( epDesc );
   \   00006C                ; Setup parameters for call to function afRegister
   \   00006C   EE           MOV       A,R6
   \   00006D   FA           MOV       R2,A
   \   00006E   EF           MOV       A,R7
   \   00006F   FB           MOV       R3,A
   \   000070   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
   \   000073   E9           MOV       A,R1
   \   000074   C0E0         PUSH      A
   \   000076   85..82       MOV       DPL,?XSP + 0
   \   000079   85..83       MOV       DPH,?XSP + 1
   \   00007C   D0E0         POP       A
   \   00007E   F0           MOVX      @DPTR,A
    290              }
    291          
    292              if ( retValue != ZSuccess )
   \                     ??MT_AfRegister_2:
   \   00007F   85..82       MOV       DPL,?XSP + 0
   \   000082   85..83       MOV       DPH,?XSP + 1
   \   000085   E0           MOVX      A,@DPTR
   \   000086   6007         JZ        ??MT_AfRegister_1
    293              {
    294                osal_mem_free( epDesc );
   \   000088                ; Setup parameters for call to function osal_mem_free
   \   000088   EE           MOV       A,R6
   \   000089   FA           MOV       R2,A
   \   00008A   EF           MOV       A,R7
   \   00008B   FB           MOV       R3,A
   \   00008C   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    295              }
    296            }
    297          
    298            /* Build and send back the response */
    299            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfRegister_1:
   \   00008F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00008F   AC..         MOV       R4,?XSP + 0
   \   000091   AD..         MOV       R5,?XSP + 1
   \   000093   7B01         MOV       R3,#0x1
   \   000095   AA..         MOV       R2,?V2
   \   000097   7964         MOV       R1,#0x64
   \   000099   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    300          }
   \   00009C   7401         MOV       A,#0x1
   \   00009E   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A1   7F06         MOV       R7,#0x6
   \   0000A3   02....       LJMP      ?BANKED_LEAVE_XDATA
    301          
    302          /***************************************************************************************************
    303           * @fn      MT_AfDelete
    304           *
    305           * @brief   Process AF Delete Endpoint command
    306           *
    307           * @param   pBuf - pointer to the received buffer
    308           *
    309           * @return  none
    310           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    311          static void MT_AfDelete(uint8 *pBuf)
   \                     MT_AfDelete:
    312          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    313            uint8 cmdId;
    314            uint8 retValue = ZMemError;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   7410         MOV       A,#0x10
   \   000016   F0           MOVX      @DPTR,A
    315          
    316            /* parse header */
    317            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000017   8E82         MOV       DPL,R6
   \   000019   8F83         MOV       DPH,R7
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F5..         MOV       ?V0,A
    318            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000020   EE           MOV       A,R6
   \   000021   2403         ADD       A,#0x3
   \   000023   FE           MOV       R6,A
   \   000024   5001         JNC       ??MT_AfDelete_0
   \   000026   0F           INC       R7
    319          
    320            retValue = afDelete( *pBuf );
   \                     ??MT_AfDelete_0:
   \   000027                ; Setup parameters for call to function afDelete
   \   000027   8E82         MOV       DPL,R6
   \   000029   8F83         MOV       DPH,R7
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F9           MOV       R1,A
   \   00002D   12....       LCALL     `??afDelete::?relay`; Banked call to: afDelete
   \   000030   E9           MOV       A,R1
   \   000031   C0E0         PUSH      A
   \   000033   85..82       MOV       DPL,?XSP + 0
   \   000036   85..83       MOV       DPH,?XSP + 1
   \   000039   D0E0         POP       A
   \   00003B   F0           MOVX      @DPTR,A
    321          
    322            /* Build and send back the response */
    323            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \   00003C                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00003C   AC..         MOV       R4,?XSP + 0
   \   00003E   AD..         MOV       R5,?XSP + 1
   \   000040   7B01         MOV       R3,#0x1
   \   000042   AA..         MOV       R2,?V0
   \   000044   7964         MOV       R1,#0x64
   \   000046   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    324          }
   \   000049   7401         MOV       A,#0x1
   \   00004B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004E   7F01         MOV       R7,#0x1
   \   000050   02....       LJMP      ?BANKED_LEAVE_XDATA
    325          
    326          /***************************************************************************************************
    327           * @fn      MT_AfDataRequest
    328           *
    329           * @brief   Process AF Register command
    330           *
    331           * @param   pBuf - pointer to the received buffer
    332           *
    333           * @return  none
    334           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    335          static void MT_AfDataRequest(uint8 *pBuf)
   \                     MT_AfDataRequest:
    336          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000   74E9         MOV       A,#-0x17
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    337            #define MT_AF_REQ_MSG_LEN  10
    338            #define MT_AF_REQ_MSG_EXT  10
    339          
    340            endPointDesc_t *epDesc;
    341            afAddrType_t dstAddr;
    342            cId_t cId;
    343            uint8 transId, txOpts, radius;
    344            uint8 cmd0, cmd1;
    345            uint8 retValue = ZFailure;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   7401         MOV       A,#0x1
   \   000016   F0           MOVX      @DPTR,A
    346            uint16 dataLen, tempLen;
    347          
    348            /* Parse header */
    349            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   000017   8E82         MOV       DPL,R6
   \   000019   8F83         MOV       DPH,R7
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V14,A
    350            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   00001F   8E82         MOV       DPL,R6
   \   000021   8F83         MOV       DPH,R7
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F5..         MOV       ?V7,A
    351            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000028   EE           MOV       A,R6
   \   000029   2403         ADD       A,#0x3
   \   00002B   FE           MOV       R6,A
   \   00002C   5001         JNC       ??MT_AfDataRequest_0
   \   00002E   0F           INC       R7
    352          
    353            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \                     ??MT_AfDataRequest_0:
   \   00002F   7402         MOV       A,#0x2
   \   000031   65..         XRL       A,?V7
   \   000033   6003         JZ        $+5
   \   000035   02....       LJMP      ??MT_AfDataRequest_1 & 0xFFFF
    354            {
    355              dstAddr.addrMode = (afAddrMode_t)*pBuf++;
   \   000038   8E82         MOV       DPL,R6
   \   00003A   8F83         MOV       DPH,R7
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   C0E0         PUSH      A
   \   00003F   740A         MOV       A,#0xa
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   D0E0         POP       A
   \   000046   F0           MOVX      @DPTR,A
   \   000047   8E82         MOV       DPL,R6
   \   000049   8F83         MOV       DPH,R7
   \   00004B   A3           INC       DPTR
   \   00004C   AE82         MOV       R6,DPL
   \   00004E   AF83         MOV       R7,DPH
    356          
    357              if (dstAddr.addrMode == afAddr64Bit)
   \   000050   740A         MOV       A,#0xa
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   E0           MOVX      A,@DPTR
   \   000056   6403         XRL       A,#0x3
   \   000058   7029         JNZ       ??MT_AfDataRequest_2
    358              {
    359                (void)osal_memcpy(dstAddr.addr.extAddr, pBuf, Z_EXTADDR_LEN);
   \   00005A                ; Setup parameters for call to function osal_memcpy
   \   00005A   8E..         MOV       ?V4,R6
   \   00005C   8F..         MOV       ?V5,R7
   \   00005E   75..00       MOV       ?V6,#0x0
   \   000061   78..         MOV       R0,#?V4
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000066   7C08         MOV       R4,#0x8
   \   000068   7D00         MOV       R5,#0x0
   \   00006A   7405         MOV       A,#0x5
   \   00006C   12....       LCALL     ?XSTACK_DISP101_8
   \   00006F   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000072   7403         MOV       A,#0x3
   \   000074   12....       LCALL     ?DEALLOC_XSTACK8
   \   000077   8A..         MOV       ?V4,R2
   \   000079   8B..         MOV       ?V5,R3
   \   00007B   85..82       MOV       DPL,?V4
   \   00007E   85..83       MOV       DPH,?V5
   \   000081   8011         SJMP      ??MT_AfDataRequest_3
    360              }
    361              else
    362              {
    363                dstAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??MT_AfDataRequest_2:
   \   000083                ; Setup parameters for call to function osal_build_uint16
   \   000083   EE           MOV       A,R6
   \   000084   FA           MOV       R2,A
   \   000085   EF           MOV       A,R7
   \   000086   FB           MOV       R3,A
   \   000087   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00008A   7402         MOV       A,#0x2
   \   00008C   12....       LCALL     ?XSTACK_DISP0_8
   \   00008F   EA           MOV       A,R2
   \   000090   F0           MOVX      @DPTR,A
   \   000091   A3           INC       DPTR
   \   000092   EB           MOV       A,R3
   \   000093   F0           MOVX      @DPTR,A
    364              }
    365              pBuf += Z_EXTADDR_LEN;
   \                     ??MT_AfDataRequest_3:
   \   000094   EE           MOV       A,R6
   \   000095   2408         ADD       A,#0x8
   \   000097   FE           MOV       R6,A
   \   000098   5001         JNC       ??MT_AfDataRequest_4
   \   00009A   0F           INC       R7
    366          
    367              dstAddr.endPoint = *pBuf++;
   \                     ??MT_AfDataRequest_4:
   \   00009B   8E82         MOV       DPL,R6
   \   00009D   8F83         MOV       DPH,R7
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   C0E0         PUSH      A
   \   0000A2   740B         MOV       A,#0xb
   \   0000A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A7   D0E0         POP       A
   \   0000A9   F0           MOVX      @DPTR,A
   \   0000AA   8E82         MOV       DPL,R6
   \   0000AC   8F83         MOV       DPH,R7
   \   0000AE   A3           INC       DPTR
   \   0000AF   AE82         MOV       R6,DPL
   \   0000B1   AF83         MOV       R7,DPH
    368              dstAddr.panId = osal_build_uint16( pBuf );
   \   0000B3                ; Setup parameters for call to function osal_build_uint16
   \   0000B3   EE           MOV       A,R6
   \   0000B4   FA           MOV       R2,A
   \   0000B5   EF           MOV       A,R7
   \   0000B6   FB           MOV       R3,A
   \   0000B7   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0000BA   740C         MOV       A,#0xc
   \   0000BC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BF   EA           MOV       A,R2
   \   0000C0   F0           MOVX      @DPTR,A
   \   0000C1   A3           INC       DPTR
   \   0000C2   EB           MOV       A,R3
   \   0000C3   F0           MOVX      @DPTR,A
    369              pBuf += 2;
   \   0000C4   EE           MOV       A,R6
   \   0000C5   2402         ADD       A,#0x2
   \   0000C7   FE           MOV       R6,A
   \   0000C8   5047         JNC       ??MT_AfDataRequest_5
   \   0000CA   0F           INC       R7
   \   0000CB   8044         SJMP      ??MT_AfDataRequest_5
    370            }
    371            else
    372            {
    373              /* Destination address */
    374              dstAddr.addrMode = afAddr16Bit;
   \                     ??MT_AfDataRequest_1:
   \   0000CD   740A         MOV       A,#0xa
   \   0000CF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D2   7402         MOV       A,#0x2
   \   0000D4   F0           MOVX      @DPTR,A
    375              dstAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \   0000D5                ; Setup parameters for call to function osal_build_uint16
   \   0000D5   EE           MOV       A,R6
   \   0000D6   FA           MOV       R2,A
   \   0000D7   EF           MOV       A,R7
   \   0000D8   FB           MOV       R3,A
   \   0000D9   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0000DC   7402         MOV       A,#0x2
   \   0000DE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E1   EA           MOV       A,R2
   \   0000E2   F0           MOVX      @DPTR,A
   \   0000E3   A3           INC       DPTR
   \   0000E4   EB           MOV       A,R3
   \   0000E5   F0           MOVX      @DPTR,A
    376              pBuf += 2;
   \   0000E6   EE           MOV       A,R6
   \   0000E7   2402         ADD       A,#0x2
   \   0000E9   FE           MOV       R6,A
   \   0000EA   5001         JNC       ??MT_AfDataRequest_6
   \   0000EC   0F           INC       R7
    377          
    378              /* Destination endpoint */
    379              dstAddr.endPoint = *pBuf++;
   \                     ??MT_AfDataRequest_6:
   \   0000ED   8E82         MOV       DPL,R6
   \   0000EF   8F83         MOV       DPH,R7
   \   0000F1   E0           MOVX      A,@DPTR
   \   0000F2   C0E0         PUSH      A
   \   0000F4   740B         MOV       A,#0xb
   \   0000F6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F9   D0E0         POP       A
   \   0000FB   F0           MOVX      @DPTR,A
   \   0000FC   8E82         MOV       DPL,R6
   \   0000FE   8F83         MOV       DPH,R7
   \   000100   A3           INC       DPTR
   \   000101   AE82         MOV       R6,DPL
   \   000103   AF83         MOV       R7,DPH
    380              dstAddr.panId = 0;
   \   000105   740C         MOV       A,#0xc
   \   000107   12....       LCALL     ?XSTACK_DISP0_8
   \   00010A   7400         MOV       A,#0x0
   \   00010C   F0           MOVX      @DPTR,A
   \   00010D   A3           INC       DPTR
   \   00010E   7400         MOV       A,#0x0
   \   000110   F0           MOVX      @DPTR,A
    381            }
    382          
    383            /* Source endpoint */
    384            epDesc = afFindEndPointDesc(*pBuf++);
   \                     ??MT_AfDataRequest_5:
   \   000111                ; Setup parameters for call to function afFindEndPointDesc
   \   000111   8E82         MOV       DPL,R6
   \   000113   8F83         MOV       DPH,R7
   \   000115   E0           MOVX      A,@DPTR
   \   000116   F9           MOV       R1,A
   \   000117   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00011A   8A..         MOV       ?V4,R2
   \   00011C   8B..         MOV       ?V5,R3
   \   00011E   85....       MOV       ?V12,?V4
   \   000121   85....       MOV       ?V13,?V5
   \   000124   8E82         MOV       DPL,R6
   \   000126   8F83         MOV       DPH,R7
   \   000128   A3           INC       DPTR
   \   000129   AE82         MOV       R6,DPL
   \   00012B   AF83         MOV       R7,DPH
    385          
    386            /* ClusterId */
    387            cId = osal_build_uint16( pBuf );
   \   00012D                ; Setup parameters for call to function osal_build_uint16
   \   00012D   EE           MOV       A,R6
   \   00012E   FA           MOV       R2,A
   \   00012F   EF           MOV       A,R7
   \   000130   FB           MOV       R3,A
   \   000131   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000134   8A..         MOV       ?V4,R2
   \   000136   8B..         MOV       ?V5,R3
   \   000138   85....       MOV       ?V2,?V4
   \   00013B   85....       MOV       ?V3,?V5
    388            pBuf +=2;
   \   00013E   EE           MOV       A,R6
   \   00013F   2402         ADD       A,#0x2
   \   000141   FE           MOV       R6,A
   \   000142   5001         JNC       ??MT_AfDataRequest_7
   \   000144   0F           INC       R7
    389          
    390            /* TransId */
    391            transId = *pBuf++;
   \                     ??MT_AfDataRequest_7:
   \   000145   8E82         MOV       DPL,R6
   \   000147   8F83         MOV       DPH,R7
   \   000149   E0           MOVX      A,@DPTR
   \   00014A   C0E0         PUSH      A
   \   00014C   7401         MOV       A,#0x1
   \   00014E   12....       LCALL     ?XSTACK_DISP0_8
   \   000151   D0E0         POP       A
   \   000153   F0           MOVX      @DPTR,A
   \   000154   8E82         MOV       DPL,R6
   \   000156   8F83         MOV       DPH,R7
   \   000158   A3           INC       DPTR
   \   000159   AE82         MOV       R6,DPL
   \   00015B   AF83         MOV       R7,DPH
    392          
    393            /* TxOption */
    394            txOpts = *pBuf++;
   \   00015D   8E82         MOV       DPL,R6
   \   00015F   8F83         MOV       DPH,R7
   \   000161   E0           MOVX      A,@DPTR
   \   000162   F5..         MOV       ?V9,A
   \   000164   8E82         MOV       DPL,R6
   \   000166   8F83         MOV       DPH,R7
   \   000168   A3           INC       DPTR
   \   000169   AE82         MOV       R6,DPL
   \   00016B   AF83         MOV       R7,DPH
    395          
    396            /* Radius */
    397            radius = *pBuf++;
   \   00016D   8E82         MOV       DPL,R6
   \   00016F   8F83         MOV       DPH,R7
   \   000171   E0           MOVX      A,@DPTR
   \   000172   F5..         MOV       ?V8,A
   \   000174   8E82         MOV       DPL,R6
   \   000176   8F83         MOV       DPH,R7
   \   000178   A3           INC       DPTR
   \   000179   AE82         MOV       R6,DPL
   \   00017B   AF83         MOV       R7,DPH
    398          
    399            /* Length */
    400            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \   00017D   7402         MOV       A,#0x2
   \   00017F   65..         XRL       A,?V7
   \   000181   7027         JNZ       ??MT_AfDataRequest_8
    401            {
    402              dataLen = osal_build_uint16( pBuf );
   \   000183                ; Setup parameters for call to function osal_build_uint16
   \   000183   EE           MOV       A,R6
   \   000184   FA           MOV       R2,A
   \   000185   EF           MOV       A,R7
   \   000186   FB           MOV       R3,A
   \   000187   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00018A   8A..         MOV       ?V4,R2
   \   00018C   8B..         MOV       ?V5,R3
   \   00018E   85....       MOV       ?V0,?V4
   \   000191   85....       MOV       ?V1,?V5
    403              tempLen = dataLen + MT_AF_REQ_MSG_LEN + MT_AF_REQ_MSG_EXT;
   \   000194   E5..         MOV       A,?V0
   \   000196   2414         ADD       A,#0x14
   \   000198   F8           MOV       R0,A
   \   000199   E4           CLR       A
   \   00019A   35..         ADDC      A,?V1
   \   00019C   F9           MOV       R1,A
   \   00019D   88..         MOV       ?V10,R0
   \   00019F   89..         MOV       ?V11,R1
    404              pBuf += 2;
   \   0001A1   EE           MOV       A,R6
   \   0001A2   2402         ADD       A,#0x2
   \   0001A4   FE           MOV       R6,A
   \   0001A5   5025         JNC       ??MT_AfDataRequest_9
   \   0001A7   0F           INC       R7
   \   0001A8   8022         SJMP      ??MT_AfDataRequest_9
    405            }
    406            else
    407            {
    408              dataLen = *pBuf++;
   \                     ??MT_AfDataRequest_8:
   \   0001AA   8E82         MOV       DPL,R6
   \   0001AC   8F83         MOV       DPH,R7
   \   0001AE   E0           MOVX      A,@DPTR
   \   0001AF   F8           MOV       R0,A
   \   0001B0   7900         MOV       R1,#0x0
   \   0001B2   88..         MOV       ?V0,R0
   \   0001B4   89..         MOV       ?V1,R1
   \   0001B6   8E82         MOV       DPL,R6
   \   0001B8   8F83         MOV       DPH,R7
   \   0001BA   A3           INC       DPTR
   \   0001BB   AE82         MOV       R6,DPL
   \   0001BD   AF83         MOV       R7,DPH
    409              tempLen = dataLen + MT_AF_REQ_MSG_LEN;
   \   0001BF   E5..         MOV       A,?V0
   \   0001C1   240A         ADD       A,#0xa
   \   0001C3   F8           MOV       R0,A
   \   0001C4   E4           CLR       A
   \   0001C5   35..         ADDC      A,?V1
   \   0001C7   F9           MOV       R1,A
   \   0001C8   88..         MOV       ?V10,R0
   \   0001CA   89..         MOV       ?V11,R1
    410            }
    411          
    412            if ( epDesc == NULL )
   \                     ??MT_AfDataRequest_9:
   \   0001CC   E5..         MOV       A,?V12
   \   0001CE   45..         ORL       A,?V13
   \   0001D0   700C         JNZ       ??MT_AfDataRequest_10
    413            {
    414              retValue = afStatus_INVALID_PARAMETER;
   \   0001D2   85..82       MOV       DPL,?XSP + 0
   \   0001D5   85..83       MOV       DPH,?XSP + 1
   \   0001D8   7402         MOV       A,#0x2
   \   0001DA   F0           MOVX      @DPTR,A
   \   0001DB   02....       LJMP      ??MT_AfDataRequest_11 & 0xFFFF
    415            }
    416            else if (tempLen > (uint16)MT_RPC_DATA_MAX)
   \                     ??MT_AfDataRequest_10:
   \   0001DE   C3           CLR       C
   \   0001DF   E5..         MOV       A,?V10
   \   0001E1   94FB         SUBB      A,#-0x5
   \   0001E3   E5..         MOV       A,?V11
   \   0001E5   9400         SUBB      A,#0x0
   \   0001E7   5003         JNC       $+5
   \   0001E9   02....       LJMP      ??MT_AfDataRequest_12 & 0xFFFF
    417            {
    418              if (pMtAfDataReq != NULL)
   \   0001EC   90....       MOV       DPTR,#pMtAfDataReq
   \   0001EF   E0           MOVX      A,@DPTR
   \   0001F0   F8           MOV       R0,A
   \   0001F1   A3           INC       DPTR
   \   0001F2   E0           MOVX      A,@DPTR
   \   0001F3   F9           MOV       R1,A
   \   0001F4   E8           MOV       A,R0
   \   0001F5   49           ORL       A,R1
   \   0001F6   600C         JZ        ??MT_AfDataRequest_13
    419              {
    420                retValue = afStatus_INVALID_PARAMETER;
   \   0001F8   85..82       MOV       DPL,?XSP + 0
   \   0001FB   85..83       MOV       DPH,?XSP + 1
   \   0001FE   7402         MOV       A,#0x2
   \   000200   F0           MOVX      @DPTR,A
   \   000201   02....       LJMP      ??MT_AfDataRequest_11 & 0xFFFF
    421              }
    422              else if ((pMtAfDataReq = osal_mem_alloc(sizeof(mtAfDataReq_t) + dataLen)) == NULL)
   \                     ??MT_AfDataRequest_13:
   \   000204                ; Setup parameters for call to function osal_mem_alloc
   \   000204   E5..         MOV       A,?V0
   \   000206   2418         ADD       A,#0x18
   \   000208   FA           MOV       R2,A
   \   000209   E4           CLR       A
   \   00020A   35..         ADDC      A,?V1
   \   00020C   FB           MOV       R3,A
   \   00020D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000210   90....       MOV       DPTR,#pMtAfDataReq
   \   000213   EA           MOV       A,R2
   \   000214   F0           MOVX      @DPTR,A
   \   000215   A3           INC       DPTR
   \   000216   EB           MOV       A,R3
   \   000217   F0           MOVX      @DPTR,A
   \   000218   90....       MOV       DPTR,#pMtAfDataReq
   \   00021B   E0           MOVX      A,@DPTR
   \   00021C   F8           MOV       R0,A
   \   00021D   A3           INC       DPTR
   \   00021E   E0           MOVX      A,@DPTR
   \   00021F   F9           MOV       R1,A
   \   000220   E8           MOV       A,R0
   \   000221   49           ORL       A,R1
   \   000222   700C         JNZ       ??MT_AfDataRequest_14
    423              {
    424                retValue = afStatus_MEM_FAIL;
   \   000224   85..82       MOV       DPL,?XSP + 0
   \   000227   85..83       MOV       DPH,?XSP + 1
   \   00022A   7410         MOV       A,#0x10
   \   00022C   F0           MOVX      @DPTR,A
   \   00022D   02....       LJMP      ??MT_AfDataRequest_11 & 0xFFFF
    425              }
    426              else
    427              {
    428                retValue = afStatus_SUCCESS;
   \                     ??MT_AfDataRequest_14:
   \   000230   85..82       MOV       DPL,?XSP + 0
   \   000233   85..83       MOV       DPH,?XSP + 1
   \   000236   7400         MOV       A,#0x0
   \   000238   F0           MOVX      @DPTR,A
    429          
    430                pMtAfDataReq->data = (uint8 *)(pMtAfDataReq+1);
   \   000239   90....       MOV       DPTR,#pMtAfDataReq
   \   00023C   E0           MOVX      A,@DPTR
   \   00023D   2418         ADD       A,#0x18
   \   00023F   FA           MOV       R2,A
   \   000240   A3           INC       DPTR
   \   000241   E0           MOVX      A,@DPTR
   \   000242   3400         ADDC      A,#0x0
   \   000244   FB           MOV       R3,A
   \   000245   90....       MOV       DPTR,#pMtAfDataReq
   \   000248   E0           MOVX      A,@DPTR
   \   000249   F8           MOV       R0,A
   \   00024A   A3           INC       DPTR
   \   00024B   E0           MOVX      A,@DPTR
   \   00024C   F583         MOV       DPH,A
   \   00024E   8882         MOV       DPL,R0
   \   000250   EA           MOV       A,R2
   \   000251   F0           MOVX      @DPTR,A
   \   000252   A3           INC       DPTR
   \   000253   EB           MOV       A,R3
   \   000254   F0           MOVX      @DPTR,A
    431                (void)osal_memcpy(&(pMtAfDataReq->dstAddr), &dstAddr, sizeof(afAddrType_t));
   \   000255                ; Setup parameters for call to function osal_memcpy
   \   000255   7402         MOV       A,#0x2
   \   000257   12....       LCALL     ?XSTACK_DISP100_8
   \   00025A   88..         MOV       ?V4,R0
   \   00025C   89..         MOV       ?V5,R1
   \   00025E   75..00       MOV       ?V6,#0x0
   \   000261   78..         MOV       R0,#?V4
   \   000263   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000266   7C0C         MOV       R4,#0xc
   \   000268   7D00         MOV       R5,#0x0
   \   00026A   90....       MOV       DPTR,#pMtAfDataReq
   \   00026D   E0           MOVX      A,@DPTR
   \   00026E   2402         ADD       A,#0x2
   \   000270   FA           MOV       R2,A
   \   000271   A3           INC       DPTR
   \   000272   E0           MOVX      A,@DPTR
   \   000273   3400         ADDC      A,#0x0
   \   000275   FB           MOV       R3,A
   \   000276   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000279   7403         MOV       A,#0x3
   \   00027B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00027E   740E         MOV       A,#0xe
   \   000280   12....       LCALL     ?XSTACK_DISP0_8
   \   000283   EA           MOV       A,R2
   \   000284   F0           MOVX      @DPTR,A
   \   000285   A3           INC       DPTR
   \   000286   EB           MOV       A,R3
   \   000287   F0           MOVX      @DPTR,A
    432                pMtAfDataReq->epDesc = epDesc;
   \   000288   90....       MOV       DPTR,#pMtAfDataReq
   \   00028B   E0           MOVX      A,@DPTR
   \   00028C   F8           MOV       R0,A
   \   00028D   A3           INC       DPTR
   \   00028E   E0           MOVX      A,@DPTR
   \   00028F   C8           XCH       A,R0
   \   000290   240E         ADD       A,#0xe
   \   000292   F582         MOV       DPL,A
   \   000294   C8           XCH       A,R0
   \   000295   3400         ADDC      A,#0x0
   \   000297   F583         MOV       DPH,A
   \   000299   E5..         MOV       A,?V12
   \   00029B   F0           MOVX      @DPTR,A
   \   00029C   A3           INC       DPTR
   \   00029D   E5..         MOV       A,?V13
   \   00029F   F0           MOVX      @DPTR,A
    433                pMtAfDataReq->cId = cId;
   \   0002A0   90....       MOV       DPTR,#pMtAfDataReq
   \   0002A3   E0           MOVX      A,@DPTR
   \   0002A4   F8           MOV       R0,A
   \   0002A5   A3           INC       DPTR
   \   0002A6   E0           MOVX      A,@DPTR
   \   0002A7   C8           XCH       A,R0
   \   0002A8   2410         ADD       A,#0x10
   \   0002AA   F582         MOV       DPL,A
   \   0002AC   C8           XCH       A,R0
   \   0002AD   3400         ADDC      A,#0x0
   \   0002AF   F583         MOV       DPH,A
   \   0002B1   E5..         MOV       A,?V2
   \   0002B3   F0           MOVX      @DPTR,A
   \   0002B4   A3           INC       DPTR
   \   0002B5   E5..         MOV       A,?V3
   \   0002B7   F0           MOVX      @DPTR,A
    434                pMtAfDataReq->dataLen = dataLen;
   \   0002B8   90....       MOV       DPTR,#pMtAfDataReq
   \   0002BB   E0           MOVX      A,@DPTR
   \   0002BC   F8           MOV       R0,A
   \   0002BD   A3           INC       DPTR
   \   0002BE   E0           MOVX      A,@DPTR
   \   0002BF   C8           XCH       A,R0
   \   0002C0   2412         ADD       A,#0x12
   \   0002C2   F582         MOV       DPL,A
   \   0002C4   C8           XCH       A,R0
   \   0002C5   3400         ADDC      A,#0x0
   \   0002C7   F583         MOV       DPH,A
   \   0002C9   E5..         MOV       A,?V0
   \   0002CB   F0           MOVX      @DPTR,A
   \   0002CC   A3           INC       DPTR
   \   0002CD   E5..         MOV       A,?V1
   \   0002CF   F0           MOVX      @DPTR,A
    435                pMtAfDataReq->transId = transId;
   \   0002D0   7401         MOV       A,#0x1
   \   0002D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0002D5   E0           MOVX      A,@DPTR
   \   0002D6   C0E0         PUSH      A
   \   0002D8   90....       MOV       DPTR,#pMtAfDataReq
   \   0002DB   E0           MOVX      A,@DPTR
   \   0002DC   F8           MOV       R0,A
   \   0002DD   A3           INC       DPTR
   \   0002DE   E0           MOVX      A,@DPTR
   \   0002DF   C8           XCH       A,R0
   \   0002E0   2414         ADD       A,#0x14
   \   0002E2   F582         MOV       DPL,A
   \   0002E4   C8           XCH       A,R0
   \   0002E5   3400         ADDC      A,#0x0
   \   0002E7   F583         MOV       DPH,A
   \   0002E9   D0E0         POP       A
   \   0002EB   F0           MOVX      @DPTR,A
    436                pMtAfDataReq->txOpts = txOpts;
   \   0002EC   E5..         MOV       A,?V9
   \   0002EE   C0E0         PUSH      A
   \   0002F0   90....       MOV       DPTR,#pMtAfDataReq
   \   0002F3   E0           MOVX      A,@DPTR
   \   0002F4   F8           MOV       R0,A
   \   0002F5   A3           INC       DPTR
   \   0002F6   E0           MOVX      A,@DPTR
   \   0002F7   C8           XCH       A,R0
   \   0002F8   2415         ADD       A,#0x15
   \   0002FA   F582         MOV       DPL,A
   \   0002FC   C8           XCH       A,R0
   \   0002FD   3400         ADDC      A,#0x0
   \   0002FF   F583         MOV       DPH,A
   \   000301   D0E0         POP       A
   \   000303   F0           MOVX      @DPTR,A
    437                pMtAfDataReq->radius = radius;
   \   000304   E5..         MOV       A,?V8
   \   000306   C0E0         PUSH      A
   \   000308   90....       MOV       DPTR,#pMtAfDataReq
   \   00030B   E0           MOVX      A,@DPTR
   \   00030C   F8           MOV       R0,A
   \   00030D   A3           INC       DPTR
   \   00030E   E0           MOVX      A,@DPTR
   \   00030F   C8           XCH       A,R0
   \   000310   2416         ADD       A,#0x16
   \   000312   F582         MOV       DPL,A
   \   000314   C8           XCH       A,R0
   \   000315   3400         ADDC      A,#0x0
   \   000317   F583         MOV       DPH,A
   \   000319   D0E0         POP       A
   \   00031B   F0           MOVX      @DPTR,A
    438          
    439                // Setup to time-out the huge outgoing item if host does not MT_AF_DATA_STORE it.
    440                pMtAfDataReq->tick = MT_AF_EXEC_CNT;
   \   00031C   90....       MOV       DPTR,#pMtAfDataReq
   \   00031F   E0           MOVX      A,@DPTR
   \   000320   F8           MOV       R0,A
   \   000321   A3           INC       DPTR
   \   000322   E0           MOVX      A,@DPTR
   \   000323   C8           XCH       A,R0
   \   000324   2417         ADD       A,#0x17
   \   000326   F582         MOV       DPL,A
   \   000328   C8           XCH       A,R0
   \   000329   3400         ADDC      A,#0x0
   \   00032B   F583         MOV       DPH,A
   \   00032D   740F         MOV       A,#0xf
   \   00032F   F0           MOVX      @DPTR,A
    441                if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \   000330                ; Setup parameters for call to function osal_start_timerEx
   \   000330   90....       MOV       DPTR,#__Constant_3e8
   \   000333   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000336   7A08         MOV       R2,#0x8
   \   000338   7B00         MOV       R3,#0x0
   \   00033A   90....       MOV       DPTR,#MT_TaskID
   \   00033D   E0           MOVX      A,@DPTR
   \   00033E   F9           MOV       R1,A
   \   00033F   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000342   7404         MOV       A,#0x4
   \   000344   12....       LCALL     ?DEALLOC_XSTACK8
   \   000347   E9           MOV       A,R1
   \   000348   6058         JZ        ??MT_AfDataRequest_11
    442                {
    443                  (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   00034A                ; Setup parameters for call to function osal_set_event
   \   00034A   7A08         MOV       R2,#0x8
   \   00034C   7B00         MOV       R3,#0x0
   \   00034E   90....       MOV       DPTR,#MT_TaskID
   \   000351   E0           MOVX      A,@DPTR
   \   000352   F9           MOV       R1,A
   \   000353   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000356   E9           MOV       A,R1
   \   000357   8049         SJMP      ??MT_AfDataRequest_11
    444                }
    445              }
    446            }
    447            else
    448            {
    449              retValue = AF_DataRequest(&dstAddr, epDesc, cId, dataLen, pBuf, &transId, txOpts, radius);
   \                     ??MT_AfDataRequest_12:
   \   000359                ; Setup parameters for call to function AF_DataRequest
   \   000359   E5..         MOV       A,?V8
   \   00035B   F5..         MOV       ?V4,A
   \   00035D   78..         MOV       R0,#?V4
   \   00035F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000362   7402         MOV       A,#0x2
   \   000364   12....       LCALL     ?XSTACK_DISP100_8
   \   000367   88..         MOV       ?V4,R0
   \   000369   89..         MOV       ?V5,R1
   \   00036B   78..         MOV       R0,#?V4
   \   00036D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000370   8E..         MOV       ?V4,R6
   \   000372   8F..         MOV       ?V5,R7
   \   000374   78..         MOV       R0,#?V4
   \   000376   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000379   78..         MOV       R0,#?V0
   \   00037B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00037E   78..         MOV       R0,#?V2
   \   000380   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000383   A9..         MOV       R1,?V9
   \   000385   AC..         MOV       R4,?V12
   \   000387   AD..         MOV       R5,?V13
   \   000389   740B         MOV       A,#0xb
   \   00038B   12....       LCALL     ?XSTACK_DISP101_8
   \   00038E   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000391   7409         MOV       A,#0x9
   \   000393   12....       LCALL     ?DEALLOC_XSTACK8
   \   000396   E9           MOV       A,R1
   \   000397   C0E0         PUSH      A
   \   000399   85..82       MOV       DPL,?XSP + 0
   \   00039C   85..83       MOV       DPH,?XSP + 1
   \   00039F   D0E0         POP       A
   \   0003A1   F0           MOVX      @DPTR,A
    450            }
    451          
    452            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??MT_AfDataRequest_11:
   \   0003A2   74E0         MOV       A,#-0x20
   \   0003A4   55..         ANL       A,?V14
   \   0003A6   6420         XRL       A,#0x20
   \   0003A8   700D         JNZ       ??MT_AfDataRequest_15
    453            {
    454              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_AF), cmd1, 1, &retValue);
   \   0003AA                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0003AA   AC..         MOV       R4,?XSP + 0
   \   0003AC   AD..         MOV       R5,?XSP + 1
   \   0003AE   7B01         MOV       R3,#0x1
   \   0003B0   AA..         MOV       R2,?V7
   \   0003B2   7964         MOV       R1,#0x64
   \   0003B4   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    455            }
    456          }
   \                     ??MT_AfDataRequest_15:
   \   0003B7   7410         MOV       A,#0x10
   \   0003B9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003BC   7F0F         MOV       R7,#0xf
   \   0003BE   02....       LJMP      ?BANKED_LEAVE_XDATA
    457          
    458          #if defined( ZIGBEEPRO )
    459          /***************************************************************************************************
    460           * @fn      MT_AfDataRequestSrcRtg
    461           *
    462           * @brief   Process AF Register command
    463           *
    464           * @param   pBuf - pointer to the received buffer
    465           *
    466           * @return  none
    467           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    468          static void MT_AfDataRequestSrcRtg(uint8 *pBuf)
   \                     MT_AfDataRequestSrcRtg:
    469          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    470            uint8 cmdId, dataLen = 0;
   \   00000E   75..00       MOV       ?V3,#0x0
    471            uint8 retValue = ZFailure;
   \   000011   85..82       MOV       DPL,?XSP + 0
   \   000014   85..83       MOV       DPH,?XSP + 1
   \   000017   7401         MOV       A,#0x1
   \   000019   F0           MOVX      @DPTR,A
    472            endPointDesc_t *epDesc;
    473            byte transId;
    474            afAddrType_t dstAddr;
    475            cId_t cId;
    476            byte txOpts, radius, srcEP, relayCnt;
    477            uint16 *pRelayList;
    478            uint8 i;
    479          
    480            /* parse header */
    481            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00001A   8E82         MOV       DPL,R6
   \   00001C   8F83         MOV       DPH,R7
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V5,A
    482            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000023   EE           MOV       A,R6
   \   000024   2403         ADD       A,#0x3
   \   000026   FE           MOV       R6,A
   \   000027   5001         JNC       ??MT_AfDataRequestSrcRtg_0
   \   000029   0F           INC       R7
    483          
    484            /* Destination address */
    485            /* Initialize the panID field to zero to avoid inter-pan */
    486            osal_memset( &dstAddr, 0, sizeof(afAddrType_t) );
   \                     ??MT_AfDataRequestSrcRtg_0:
   \   00002A                ; Setup parameters for call to function osal_memset
   \   00002A   7C0C         MOV       R4,#0xc
   \   00002C   7D00         MOV       R5,#0x0
   \   00002E   7900         MOV       R1,#0x0
   \   000030   7402         MOV       A,#0x2
   \   000032   12....       LCALL     ?XSTACK_DISP101_8
   \   000035   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    487            dstAddr.addrMode = afAddr16Bit;
   \   000038   740A         MOV       A,#0xa
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   7402         MOV       A,#0x2
   \   00003F   F0           MOVX      @DPTR,A
    488            dstAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \   000040                ; Setup parameters for call to function osal_build_uint16
   \   000040   EE           MOV       A,R6
   \   000041   FA           MOV       R2,A
   \   000042   EF           MOV       A,R7
   \   000043   FB           MOV       R3,A
   \   000044   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000047   7402         MOV       A,#0x2
   \   000049   12....       LCALL     ?XSTACK_DISP0_8
   \   00004C   EA           MOV       A,R2
   \   00004D   F0           MOVX      @DPTR,A
   \   00004E   A3           INC       DPTR
   \   00004F   EB           MOV       A,R3
   \   000050   F0           MOVX      @DPTR,A
    489            pBuf += 2;
   \   000051   EE           MOV       A,R6
   \   000052   2402         ADD       A,#0x2
   \   000054   FE           MOV       R6,A
   \   000055   5001         JNC       ??MT_AfDataRequestSrcRtg_1
   \   000057   0F           INC       R7
    490          
    491            /* Destination endpoint */
    492            dstAddr.endPoint = *pBuf++;
   \                     ??MT_AfDataRequestSrcRtg_1:
   \   000058   8E82         MOV       DPL,R6
   \   00005A   8F83         MOV       DPH,R7
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   C0E0         PUSH      A
   \   00005F   740B         MOV       A,#0xb
   \   000061   12....       LCALL     ?XSTACK_DISP0_8
   \   000064   D0E0         POP       A
   \   000066   F0           MOVX      @DPTR,A
   \   000067   8E82         MOV       DPL,R6
   \   000069   8F83         MOV       DPH,R7
   \   00006B   A3           INC       DPTR
   \   00006C   AE82         MOV       R6,DPL
   \   00006E   AF83         MOV       R7,DPH
    493          
    494            /* Source endpoint */
    495            srcEP = *pBuf++;
   \   000070   8E82         MOV       DPL,R6
   \   000072   8F83         MOV       DPH,R7
   \   000074   E0           MOVX      A,@DPTR
   \   000075   F5..         MOV       ?V10,A
   \   000077   8E82         MOV       DPL,R6
   \   000079   8F83         MOV       DPH,R7
   \   00007B   A3           INC       DPTR
   \   00007C   AE82         MOV       R6,DPL
   \   00007E   AF83         MOV       R7,DPH
    496            epDesc = afFindEndPointDesc( srcEP );
   \   000080                ; Setup parameters for call to function afFindEndPointDesc
   \   000080   A9..         MOV       R1,?V10
   \   000082   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000085   8A..         MOV       ?V8,R2
   \   000087   8B..         MOV       ?V9,R3
   \   000089   85....       MOV       ?V14,?V8
   \   00008C   85....       MOV       ?V15,?V9
    497          
    498            /* ClusterId */
    499            cId = osal_build_uint16( pBuf );
   \   00008F                ; Setup parameters for call to function osal_build_uint16
   \   00008F   EE           MOV       A,R6
   \   000090   FA           MOV       R2,A
   \   000091   EF           MOV       A,R7
   \   000092   FB           MOV       R3,A
   \   000093   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000096   8A..         MOV       ?V8,R2
   \   000098   8B..         MOV       ?V9,R3
   \   00009A   85....       MOV       ?V0,?V8
   \   00009D   85....       MOV       ?V1,?V9
    500            pBuf +=2;
   \   0000A0   EE           MOV       A,R6
   \   0000A1   2402         ADD       A,#0x2
   \   0000A3   FE           MOV       R6,A
   \   0000A4   5001         JNC       ??MT_AfDataRequestSrcRtg_2
   \   0000A6   0F           INC       R7
    501          
    502            /* TransId */
    503            transId = *pBuf++;
   \                     ??MT_AfDataRequestSrcRtg_2:
   \   0000A7   8E82         MOV       DPL,R6
   \   0000A9   8F83         MOV       DPH,R7
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   C0E0         PUSH      A
   \   0000AE   7401         MOV       A,#0x1
   \   0000B0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B3   D0E0         POP       A
   \   0000B5   F0           MOVX      @DPTR,A
   \   0000B6   8E82         MOV       DPL,R6
   \   0000B8   8F83         MOV       DPH,R7
   \   0000BA   A3           INC       DPTR
   \   0000BB   AE82         MOV       R6,DPL
   \   0000BD   AF83         MOV       R7,DPH
    504          
    505            /* TxOption */
    506            txOpts = *pBuf++;
   \   0000BF   8E82         MOV       DPL,R6
   \   0000C1   8F83         MOV       DPH,R7
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   F5..         MOV       ?V12,A
   \   0000C6   8E82         MOV       DPL,R6
   \   0000C8   8F83         MOV       DPH,R7
   \   0000CA   A3           INC       DPTR
   \   0000CB   AE82         MOV       R6,DPL
   \   0000CD   AF83         MOV       R7,DPH
    507          
    508            /* Radius */
    509            radius = *pBuf++;
   \   0000CF   8E82         MOV       DPL,R6
   \   0000D1   8F83         MOV       DPH,R7
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   F5..         MOV       ?V11,A
   \   0000D6   8E82         MOV       DPL,R6
   \   0000D8   8F83         MOV       DPH,R7
   \   0000DA   A3           INC       DPTR
   \   0000DB   AE82         MOV       R6,DPL
   \   0000DD   AF83         MOV       R7,DPH
    510          
    511            /* Source route relay count */
    512            relayCnt = *pBuf++;
   \   0000DF   8E82         MOV       DPL,R6
   \   0000E1   8F83         MOV       DPH,R7
   \   0000E3   E0           MOVX      A,@DPTR
   \   0000E4   F5..         MOV       ?V4,A
   \   0000E6   8E82         MOV       DPL,R6
   \   0000E8   8F83         MOV       DPH,R7
   \   0000EA   A3           INC       DPTR
   \   0000EB   AE82         MOV       R6,DPL
   \   0000ED   AF83         MOV       R7,DPH
    513          
    514            /* Convert the source route relay list */
    515            if( (pRelayList = osal_mem_alloc( relayCnt * sizeof( uint16 ))) != NULL )
   \   0000EF                ; Setup parameters for call to function osal_mem_alloc
   \   0000EF   E5..         MOV       A,?V4
   \   0000F1   FA           MOV       R2,A
   \   0000F2   7B00         MOV       R3,#0x0
   \   0000F4   EA           MOV       A,R2
   \   0000F5   75F002       MOV       B,#0x2
   \   0000F8   A4           MUL       AB
   \   0000F9   CA           XCH       A,R2
   \   0000FA   A8F0         MOV       R0,B
   \   0000FC   75F000       MOV       B,#0x0
   \   0000FF   A4           MUL       AB
   \   000100   28           ADD       A,R0
   \   000101   F8           MOV       R0,A
   \   000102   75F002       MOV       B,#0x2
   \   000105   EB           MOV       A,R3
   \   000106   A4           MUL       AB
   \   000107   28           ADD       A,R0
   \   000108   FB           MOV       R3,A
   \   000109   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00010C   8A..         MOV       ?V8,R2
   \   00010E   8B..         MOV       ?V9,R3
   \   000110   85....       MOV       ?V6,?V8
   \   000113   85....       MOV       ?V7,?V9
   \   000116   E5..         MOV       A,?V6
   \   000118   45..         ORL       A,?V7
   \   00011A   7003         JNZ       $+5
   \   00011C   02....       LJMP      ??MT_AfDataRequestSrcRtg_3 & 0xFFFF
    516            {
    517              for( i = 0; i < relayCnt; i++ )
   \   00011F   75..00       MOV       ?V2,#0x0
   \                     ??MT_AfDataRequestSrcRtg_4:
   \   000122   E5..         MOV       A,?V2
   \   000124   C3           CLR       C
   \   000125   95..         SUBB      A,?V4
   \   000127   503B         JNC       ??MT_AfDataRequestSrcRtg_5
    518              {
    519                pRelayList[i] = osal_build_uint16( pBuf );
   \   000129                ; Setup parameters for call to function osal_build_uint16
   \   000129   EE           MOV       A,R6
   \   00012A   FA           MOV       R2,A
   \   00012B   EF           MOV       A,R7
   \   00012C   FB           MOV       R3,A
   \   00012D   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000130   E5..         MOV       A,?V2
   \   000132   F8           MOV       R0,A
   \   000133   7900         MOV       R1,#0x0
   \   000135   E8           MOV       A,R0
   \   000136   75F002       MOV       B,#0x2
   \   000139   A4           MUL       AB
   \   00013A   C8           XCH       A,R0
   \   00013B   ACF0         MOV       R4,B
   \   00013D   75F000       MOV       B,#0x0
   \   000140   A4           MUL       AB
   \   000141   2C           ADD       A,R4
   \   000142   FC           MOV       R4,A
   \   000143   75F002       MOV       B,#0x2
   \   000146   E9           MOV       A,R1
   \   000147   A4           MUL       AB
   \   000148   2C           ADD       A,R4
   \   000149   F9           MOV       R1,A
   \   00014A   E5..         MOV       A,?V6
   \   00014C   28           ADD       A,R0
   \   00014D   F582         MOV       DPL,A
   \   00014F   E5..         MOV       A,?V7
   \   000151   39           ADDC      A,R1
   \   000152   F583         MOV       DPH,A
   \   000154   EA           MOV       A,R2
   \   000155   F0           MOVX      @DPTR,A
   \   000156   A3           INC       DPTR
   \   000157   EB           MOV       A,R3
   \   000158   F0           MOVX      @DPTR,A
    520                pBuf += 2;
   \   000159   EE           MOV       A,R6
   \   00015A   2402         ADD       A,#0x2
   \   00015C   FE           MOV       R6,A
   \   00015D   5001         JNC       ??MT_AfDataRequestSrcRtg_6
   \   00015F   0F           INC       R7
    521              }
   \                     ??MT_AfDataRequestSrcRtg_6:
   \   000160   05..         INC       ?V2
   \   000162   80BE         SJMP      ??MT_AfDataRequestSrcRtg_4
    522          
    523              /* Data payload Length */
    524              dataLen = *pBuf++;
   \                     ??MT_AfDataRequestSrcRtg_5:
   \   000164   8E82         MOV       DPL,R6
   \   000166   8F83         MOV       DPH,R7
   \   000168   E0           MOVX      A,@DPTR
   \   000169   F5..         MOV       ?V3,A
   \   00016B   8E82         MOV       DPL,R6
   \   00016D   8F83         MOV       DPH,R7
   \   00016F   A3           INC       DPTR
   \   000170   AE82         MOV       R6,DPL
   \   000172   AF83         MOV       R7,DPH
    525          
    526              if ( epDesc == NULL )
   \   000174   E5..         MOV       A,?V14
   \   000176   45..         ORL       A,?V15
   \   000178   700B         JNZ       ??MT_AfDataRequestSrcRtg_7
    527              {
    528                retValue = afStatus_INVALID_PARAMETER;
   \   00017A   85..82       MOV       DPL,?XSP + 0
   \   00017D   85..83       MOV       DPH,?XSP + 1
   \   000180   7402         MOV       A,#0x2
   \   000182   F0           MOVX      @DPTR,A
   \   000183   805E         SJMP      ??MT_AfDataRequestSrcRtg_8
    529              }
    530              else
    531              {
    532                retValue = AF_DataRequestSrcRtg( &dstAddr, epDesc, cId, dataLen, pBuf,
    533                                               &transId, txOpts, radius, relayCnt, pRelayList );
   \                     ??MT_AfDataRequestSrcRtg_7:
   \   000185                ; Setup parameters for call to function AF_DataRequestSrcRtg
   \   000185   78..         MOV       R0,#?V6
   \   000187   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00018A   E5..         MOV       A,?V4
   \   00018C   F5..         MOV       ?V8,A
   \   00018E   78..         MOV       R0,#?V8
   \   000190   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000193   E5..         MOV       A,?V11
   \   000195   F5..         MOV       ?V8,A
   \   000197   78..         MOV       R0,#?V8
   \   000199   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00019C   7405         MOV       A,#0x5
   \   00019E   12....       LCALL     ?XSTACK_DISP100_8
   \   0001A1   88..         MOV       ?V8,R0
   \   0001A3   89..         MOV       ?V9,R1
   \   0001A5   78..         MOV       R0,#?V8
   \   0001A7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001AA   8E..         MOV       ?V8,R6
   \   0001AC   8F..         MOV       ?V9,R7
   \   0001AE   78..         MOV       R0,#?V8
   \   0001B0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B3   E5..         MOV       A,?V3
   \   0001B5   F5..         MOV       ?V8,A
   \   0001B7   75..00       MOV       ?V9,#0x0
   \   0001BA   78..         MOV       R0,#?V8
   \   0001BC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001BF   78..         MOV       R0,#?V0
   \   0001C1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001C4   A9..         MOV       R1,?V12
   \   0001C6   AC..         MOV       R4,?V14
   \   0001C8   AD..         MOV       R5,?V15
   \   0001CA   740E         MOV       A,#0xe
   \   0001CC   12....       LCALL     ?XSTACK_DISP101_8
   \   0001CF   12....       LCALL     `??AF_DataRequestSrcRtg::?relay`; Banked call to: AF_DataRequestSrcRtg
   \   0001D2   740C         MOV       A,#0xc
   \   0001D4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001D7   E9           MOV       A,R1
   \   0001D8   C0E0         PUSH      A
   \   0001DA   85..82       MOV       DPL,?XSP + 0
   \   0001DD   85..83       MOV       DPH,?XSP + 1
   \   0001E0   D0E0         POP       A
   \   0001E2   F0           MOVX      @DPTR,A
    534              }
    535          
    536              /* Free the memory allocated */
    537              osal_mem_free( pRelayList );
   \                     ??MT_AfDataRequestSrcRtg_8:
   \   0001E3                ; Setup parameters for call to function osal_mem_free
   \   0001E3   AA..         MOV       R2,?V6
   \   0001E5   AB..         MOV       R3,?V7
   \   0001E7   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001EA   8009         SJMP      ??MT_AfDataRequestSrcRtg_9
    538            }
    539            else
    540            {
    541              retValue = afStatus_MEM_FAIL;
   \                     ??MT_AfDataRequestSrcRtg_3:
   \   0001EC   85..82       MOV       DPL,?XSP + 0
   \   0001EF   85..83       MOV       DPH,?XSP + 1
   \   0001F2   7410         MOV       A,#0x10
   \   0001F4   F0           MOVX      @DPTR,A
    542            }
    543          
    544          
    545            /* Build and send back the response */
    546            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfDataRequestSrcRtg_9:
   \   0001F5                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0001F5   AC..         MOV       R4,?XSP + 0
   \   0001F7   AD..         MOV       R5,?XSP + 1
   \   0001F9   7B01         MOV       R3,#0x1
   \   0001FB   AA..         MOV       R2,?V5
   \   0001FD   7964         MOV       R1,#0x64
   \   0001FF   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    547          }
   \   000202   740E         MOV       A,#0xe
   \   000204   12....       LCALL     ?DEALLOC_XSTACK8
   \   000207   7F10         MOV       R7,#0x10
   \   000209   02....       LJMP      ?BANKED_LEAVE_XDATA
    548          #endif
    549          
    550          #if defined INTER_PAN
    551          /***************************************************************************************************
    552           * @fn      MT_AfInterPanCtl
    553           *
    554           * @brief   Process the AF Inter Pan control command.
    555           *
    556           * @param   pBuf - pointer to the received buffer
    557           *
    558           * @return  none
    559           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    560          static void MT_AfInterPanCtl(uint8 *pBuf)
   \                     MT_AfInterPanCtl:
    561          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    562            uint8 cmd, rtrn;
    563            uint16 panId;
    564            endPointDesc_t *pEP;
    565          
    566            cmd = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8E82         MOV       DPL,R6
   \   000010   8F83         MOV       DPH,R7
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V2,A
    567            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV       A,R6
   \   000018   2403         ADD       A,#0x3
   \   00001A   FE           MOV       R6,A
   \   00001B   5001         JNC       ??MT_AfInterPanCtl_0
   \   00001D   0F           INC       R7
    568          
    569            switch (*pBuf++)  // Inter-pan request parameter.
   \                     ??MT_AfInterPanCtl_0:
   \   00001E   EE           MOV       A,R6
   \   00001F   F8           MOV       R0,A
   \   000020   EF           MOV       A,R7
   \   000021   F9           MOV       R1,A
   \   000022   8882         MOV       DPL,R0
   \   000024   8983         MOV       DPH,R1
   \   000026   A3           INC       DPTR
   \   000027   AE82         MOV       R6,DPL
   \   000029   AF83         MOV       R7,DPH
   \   00002B   8882         MOV       DPL,R0
   \   00002D   8983         MOV       DPH,R1
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   600C         JZ        ??MT_AfInterPanCtl_1
   \   000032   14           DEC       A
   \   000033   601B         JZ        ??MT_AfInterPanCtl_2
   \   000035   14           DEC       A
   \   000036   602F         JZ        ??MT_AfInterPanCtl_3
   \   000038   14           DEC       A
   \   000039   6062         JZ        ??MT_AfInterPanCtl_4
   \   00003B   02....       LJMP      ??MT_AfInterPanCtl_5 & 0xFFFF
    570            {
    571            case InterPanClr:
    572              rtrn = StubAPS_SetIntraPanChannel();           // Switch channel back to the NIB channel.
   \                     ??MT_AfInterPanCtl_1:
   \   00003E                ; Setup parameters for call to function StubAPS_SetIntraPanChannel
   \   00003E   12....       LCALL     `??StubAPS_SetIntraPanChannel::?relay`; Banked call to: StubAPS_SetIntraPanChannel
   \   000041   E9           MOV       A,R1
   \   000042   C0E0         PUSH      A
   \   000044   85..82       MOV       DPL,?XSP + 0
   \   000047   85..83       MOV       DPH,?XSP + 1
   \   00004A   D0E0         POP       A
   \   00004C   F0           MOVX      @DPTR,A
    573              break;
   \   00004D   02....       LJMP      ??MT_AfInterPanCtl_6 & 0xFFFF
    574          
    575            case InterPanSet:
    576              rtrn = StubAPS_SetInterPanChannel(*pBuf);      // Set channel for inter-pan communication.
   \                     ??MT_AfInterPanCtl_2:
   \   000050                ; Setup parameters for call to function StubAPS_SetInterPanChannel
   \   000050   8E82         MOV       DPL,R6
   \   000052   8F83         MOV       DPH,R7
   \   000054   E0           MOVX      A,@DPTR
   \   000055   F9           MOV       R1,A
   \   000056   12....       LCALL     `??StubAPS_SetInterPanChannel::?relay`; Banked call to: StubAPS_SetInterPanChannel
   \   000059   E9           MOV       A,R1
   \   00005A   C0E0         PUSH      A
   \   00005C   85..82       MOV       DPL,?XSP + 0
   \   00005F   85..83       MOV       DPH,?XSP + 1
   \   000062   D0E0         POP       A
   \   000064   F0           MOVX      @DPTR,A
    577              break;
   \   000065   8078         SJMP      ??MT_AfInterPanCtl_6
    578          
    579            case InterPanReg:
    580              if ((pEP = afFindEndPointDesc(*pBuf)))
   \                     ??MT_AfInterPanCtl_3:
   \   000067                ; Setup parameters for call to function afFindEndPointDesc
   \   000067   8E82         MOV       DPL,R6
   \   000069   8F83         MOV       DPH,R7
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   F9           MOV       R1,A
   \   00006D   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000070   8A..         MOV       ?V6,R2
   \   000072   8B..         MOV       ?V7,R3
   \   000074   A8..         MOV       R0,?V6
   \   000076   A9..         MOV       R1,?V7
   \   000078   88..         MOV       ?V4,R0
   \   00007A   89..         MOV       ?V5,R1
   \   00007C   E8           MOV       A,R0
   \   00007D   49           ORL       A,R1
   \   00007E   6012         JZ        ??MT_AfInterPanCtl_7
    581              {
    582                StubAPS_RegisterApp(pEP);
   \   000080                ; Setup parameters for call to function StubAPS_RegisterApp
   \   000080   AA..         MOV       R2,?V4
   \   000082   AB..         MOV       R3,?V5
   \   000084   12....       LCALL     `??StubAPS_RegisterApp::?relay`; Banked call to: StubAPS_RegisterApp
    583                rtrn = SUCCESS;
   \   000087   85..82       MOV       DPL,?XSP + 0
   \   00008A   85..83       MOV       DPH,?XSP + 1
   \   00008D   7400         MOV       A,#0x0
   \   00008F   F0           MOVX      @DPTR,A
   \   000090   804D         SJMP      ??MT_AfInterPanCtl_6
    584              }
    585              else
    586              {
    587                rtrn = FAILURE;
   \                     ??MT_AfInterPanCtl_7:
   \   000092   85..82       MOV       DPL,?XSP + 0
   \   000095   85..83       MOV       DPH,?XSP + 1
   \   000098   7401         MOV       A,#0x1
   \   00009A   F0           MOVX      @DPTR,A
    588              }
    589              break;
   \   00009B   8042         SJMP      ??MT_AfInterPanCtl_6
    590          
    591            case InterPanChk:
    592              panId = osal_build_uint16( pBuf );
   \                     ??MT_AfInterPanCtl_4:
   \   00009D                ; Setup parameters for call to function osal_build_uint16
   \   00009D   EE           MOV       A,R6
   \   00009E   FA           MOV       R2,A
   \   00009F   EF           MOV       A,R7
   \   0000A0   FB           MOV       R3,A
   \   0000A1   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0000A4   8A..         MOV       ?V6,R2
   \   0000A6   8B..         MOV       ?V7,R3
   \   0000A8   85....       MOV       ?V0,?V6
   \   0000AB   85....       MOV       ?V1,?V7
    593              rtrn = (StubAPS_InterPan(panId, pBuf[2])) ? ZSuccess : ZFailure;
   \   0000AE                ; Setup parameters for call to function StubAPS_InterPan
   \   0000AE   8E82         MOV       DPL,R6
   \   0000B0   8F83         MOV       DPH,R7
   \   0000B2   A3           INC       DPTR
   \   0000B3   A3           INC       DPTR
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   F9           MOV       R1,A
   \   0000B6   AA..         MOV       R2,?V0
   \   0000B8   AB..         MOV       R3,?V1
   \   0000BA   12....       LCALL     `??StubAPS_InterPan::?relay`; Banked call to: StubAPS_InterPan
   \   0000BD   E9           MOV       A,R1
   \   0000BE   600B         JZ        ??MT_AfInterPanCtl_8
   \   0000C0   85..82       MOV       DPL,?XSP + 0
   \   0000C3   85..83       MOV       DPH,?XSP + 1
   \   0000C6   7400         MOV       A,#0x0
   \   0000C8   F0           MOVX      @DPTR,A
   \   0000C9   8014         SJMP      ??MT_AfInterPanCtl_6
   \                     ??MT_AfInterPanCtl_8:
   \   0000CB   85..82       MOV       DPL,?XSP + 0
   \   0000CE   85..83       MOV       DPH,?XSP + 1
   \   0000D1   7401         MOV       A,#0x1
   \   0000D3   F0           MOVX      @DPTR,A
    594              break;
   \   0000D4   8009         SJMP      ??MT_AfInterPanCtl_6
    595          
    596            default:
    597              rtrn = afStatus_INVALID_PARAMETER;
   \                     ??MT_AfInterPanCtl_5:
   \   0000D6   85..82       MOV       DPL,?XSP + 0
   \   0000D9   85..83       MOV       DPH,?XSP + 1
   \   0000DC   7402         MOV       A,#0x2
   \   0000DE   F0           MOVX      @DPTR,A
    598              break;
    599            }
    600          
    601            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmd, 1, &rtrn);
   \                     ??MT_AfInterPanCtl_6:
   \   0000DF                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000DF   AC..         MOV       R4,?XSP + 0
   \   0000E1   AD..         MOV       R5,?XSP + 1
   \   0000E3   7B01         MOV       R3,#0x1
   \   0000E5   AA..         MOV       R2,?V2
   \   0000E7   7964         MOV       R1,#0x64
   \   0000E9   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    602          }
   \   0000EC   7401         MOV       A,#0x1
   \   0000EE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F1   7F08         MOV       R7,#0x8
   \   0000F3   02....       LJMP      ?BANKED_LEAVE_XDATA
    603          #endif
    604          
    605          /***************************************************************************************************
    606           * @fn      MT_AfDataConfirm
    607           *
    608           * @brief   Process
    609           *
    610           * @param   pBuf - pointer to the received buffer
    611           *
    612           * @return  none
    613           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    614          void MT_AfDataConfirm(afDataConfirm_t *pMsg)
   \                     MT_AfDataConfirm:
    615          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    616            uint8 retArray[3];
    617          
    618            retArray[0] = pMsg->hdr.status;
   \   00000E   8E82         MOV       DPL,R6
   \   000010   8F83         MOV       DPH,R7
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   C0E0         PUSH      A
   \   000016   85..82       MOV       DPL,?XSP + 0
   \   000019   85..83       MOV       DPH,?XSP + 1
   \   00001C   D0E0         POP       A
   \   00001E   F0           MOVX      @DPTR,A
    619            retArray[1] = pMsg->endpoint;
   \   00001F   8E82         MOV       DPL,R6
   \   000021   8F83         MOV       DPH,R7
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   C0E0         PUSH      A
   \   000028   7401         MOV       A,#0x1
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   D0E0         POP       A
   \   00002F   F0           MOVX      @DPTR,A
    620            retArray[2] = pMsg->transID;
   \   000030   8E82         MOV       DPL,R6
   \   000032   8F83         MOV       DPH,R7
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   C0E0         PUSH      A
   \   00003A   7402         MOV       A,#0x2
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   D0E0         POP       A
   \   000041   F0           MOVX      @DPTR,A
    621          
    622            /* Build and send back the response */
    623            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_DATA_CONFIRM, 3, retArray);
   \   000042                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000042   AC..         MOV       R4,?XSP + 0
   \   000044   AD..         MOV       R5,?XSP + 1
   \   000046   7B03         MOV       R3,#0x3
   \   000048   7A80         MOV       R2,#-0x80
   \   00004A   7944         MOV       R1,#0x44
   \   00004C   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    624          }
   \   00004F   7403         MOV       A,#0x3
   \   000051   12....       LCALL     ?DEALLOC_XSTACK8
   \   000054   7F01         MOV       R7,#0x1
   \   000056   02....       LJMP      ?BANKED_LEAVE_XDATA
    625          
    626          /***************************************************************************************************
    627           * @fn      MT_AfReflectError
    628           *
    629           * @brief   Process
    630           *
    631           * @param   pBuf - pointer to the received buffer
    632           *
    633           * @return  none
    634           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    635          void MT_AfReflectError(afReflectError_t *pMsg)
   \                     MT_AfReflectError:
    636          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    637            uint8 retArray[6];
    638          
    639            retArray[0] = pMsg->hdr.status;
   \   00000E   8E82         MOV       DPL,R6
   \   000010   8F83         MOV       DPH,R7
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   C0E0         PUSH      A
   \   000016   85..82       MOV       DPL,?XSP + 0
   \   000019   85..83       MOV       DPH,?XSP + 1
   \   00001C   D0E0         POP       A
   \   00001E   F0           MOVX      @DPTR,A
    640            retArray[1] = pMsg->endpoint;
   \   00001F   8E82         MOV       DPL,R6
   \   000021   8F83         MOV       DPH,R7
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   C0E0         PUSH      A
   \   000028   7401         MOV       A,#0x1
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   D0E0         POP       A
   \   00002F   F0           MOVX      @DPTR,A
    641            retArray[2] = pMsg->transID;
   \   000030   8E82         MOV       DPL,R6
   \   000032   8F83         MOV       DPH,R7
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   C0E0         PUSH      A
   \   00003A   7402         MOV       A,#0x2
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   D0E0         POP       A
   \   000041   F0           MOVX      @DPTR,A
    642            retArray[3] = pMsg->dstAddrMode;
   \   000042   8E82         MOV       DPL,R6
   \   000044   8F83         MOV       DPH,R7
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   C0E0         PUSH      A
   \   00004D   7403         MOV       A,#0x3
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   D0E0         POP       A
   \   000054   F0           MOVX      @DPTR,A
    643            retArray[4] = LO_UINT16( pMsg->dstAddr );
   \   000055   8E82         MOV       DPL,R6
   \   000057   8F83         MOV       DPH,R7
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F8           MOV       R0,A
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   F9           MOV       R1,A
   \   000063   E8           MOV       A,R0
   \   000064   C0E0         PUSH      A
   \   000066   7404         MOV       A,#0x4
   \   000068   12....       LCALL     ?XSTACK_DISP0_8
   \   00006B   D0E0         POP       A
   \   00006D   F0           MOVX      @DPTR,A
    644            retArray[5] = HI_UINT16( pMsg->dstAddr );
   \   00006E   8E82         MOV       DPL,R6
   \   000070   8F83         MOV       DPH,R7
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   E0           MOVX      A,@DPTR
   \   000078   F8           MOV       R0,A
   \   000079   A3           INC       DPTR
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   F9           MOV       R1,A
   \   00007C   E4           CLR       A
   \   00007D   C9           XCH       A,R1
   \   00007E   F8           MOV       R0,A
   \   00007F   E8           MOV       A,R0
   \   000080   C0E0         PUSH      A
   \   000082   7405         MOV       A,#0x5
   \   000084   12....       LCALL     ?XSTACK_DISP0_8
   \   000087   D0E0         POP       A
   \   000089   F0           MOVX      @DPTR,A
    645          
    646            /* Build and send back the response */
    647            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_REFLECT_ERROR, 6, retArray);
   \   00008A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00008A   AC..         MOV       R4,?XSP + 0
   \   00008C   AD..         MOV       R5,?XSP + 1
   \   00008E   7B06         MOV       R3,#0x6
   \   000090   7A83         MOV       R2,#-0x7d
   \   000092   7944         MOV       R1,#0x44
   \   000094   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    648          }
   \   000097   7406         MOV       A,#0x6
   \   000099   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009C   7F01         MOV       R7,#0x1
   \   00009E   02....       LJMP      ?BANKED_LEAVE_XDATA
    649          
    650          /***************************************************************************************************
    651           * @fn          MT_AfIncomingMsg
    652           *
    653           * @brief       Process the callback subscription for AF Incoming data.
    654           *
    655           * @param       pkt - Incoming AF data.
    656           *
    657           * @return      none
    658           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    659          void MT_AfIncomingMsg(afIncomingMSGPacket_t *pMsg)
   \                     MT_AfIncomingMsg:
    660          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V8,R2
   \   00000C   8B..         MOV       ?V9,R3
    661            #define MT_AF_INC_MSG_LEN  20
    662            #define MT_AF_INC_MSG_EXT  10
    663          
    664            uint16 dataLen = pMsg->cmd.DataLength;  // Length of the data section in the response packet.
   \   00000E   E5..         MOV       A,?V8
   \   000010   2420         ADD       A,#0x20
   \   000012   F582         MOV       DPL,A
   \   000014   E4           CLR       A
   \   000015   35..         ADDC      A,?V9
   \   000017   F583         MOV       DPH,A
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V2,A
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F5..         MOV       ?V3,A
    665            uint16 respLen = MT_AF_INC_MSG_LEN + dataLen;
   \   000020   E5..         MOV       A,?V2
   \   000022   2414         ADD       A,#0x14
   \   000024   F5..         MOV       ?V0,A
   \   000026   E4           CLR       A
   \   000027   35..         ADDC      A,?V3
   \   000029   F5..         MOV       ?V1,A
    666            uint8 cmd = MT_AF_INCOMING_MSG;
   \   00002B   75..81       MOV       ?V7,#-0x7f
    667            uint8 *pRsp, *pTmp;
    668            mtAfInMsgList_t *pItem = NULL;
   \   00002E   75..00       MOV       ?V10,#0x0
   \   000031   75..00       MOV       ?V11,#0x0
    669          
    670          #if defined INTER_PAN
    671            if (StubAPS_InterPan(pMsg->srcAddr.panId, pMsg->srcAddr.endPoint))
   \   000034                ; Setup parameters for call to function StubAPS_InterPan
   \   000034   E5..         MOV       A,?V8
   \   000036   240F         ADD       A,#0xf
   \   000038   F582         MOV       DPL,A
   \   00003A   E4           CLR       A
   \   00003B   35..         ADDC      A,?V9
   \   00003D   F583         MOV       DPH,A
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F9           MOV       R1,A
   \   000041   E5..         MOV       A,?V8
   \   000043   2410         ADD       A,#0x10
   \   000045   F582         MOV       DPL,A
   \   000047   E4           CLR       A
   \   000048   35..         ADDC      A,?V9
   \   00004A   F583         MOV       DPH,A
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   FA           MOV       R2,A
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   FB           MOV       R3,A
   \   000051   12....       LCALL     `??StubAPS_InterPan::?relay`; Banked call to: StubAPS_InterPan
   \   000054   E9           MOV       A,R1
   \   000055   6005         JZ        ??MT_AfIncomingMsg_0
    672            {
    673              cmd = MT_AF_INCOMING_MSG_EXT;
   \   000057   75..82       MOV       ?V7,#-0x7e
   \   00005A   801E         SJMP      ??MT_AfIncomingMsg_1
    674            }
    675            else
    676          #endif
    677            if ((pMsg->srcAddr.addrMode == afAddr64Bit) ||
    678                (respLen > (uint16)(MT_RPC_DATA_MAX - MT_AF_INC_MSG_EXT)))
   \                     ??MT_AfIncomingMsg_0:
   \   00005C   E5..         MOV       A,?V8
   \   00005E   240E         ADD       A,#0xe
   \   000060   F582         MOV       DPL,A
   \   000062   E4           CLR       A
   \   000063   35..         ADDC      A,?V9
   \   000065   F583         MOV       DPH,A
   \   000067   E0           MOVX      A,@DPTR
   \   000068   6403         XRL       A,#0x3
   \   00006A   600B         JZ        ??MT_AfIncomingMsg_2
   \   00006C   C3           CLR       C
   \   00006D   E5..         MOV       A,?V0
   \   00006F   94F1         SUBB      A,#-0xf
   \   000071   E5..         MOV       A,?V1
   \   000073   9400         SUBB      A,#0x0
   \   000075   4003         JC        ??MT_AfIncomingMsg_1
    679            {
    680              cmd = MT_AF_INCOMING_MSG_EXT;
   \                     ??MT_AfIncomingMsg_2:
   \   000077   75..82       MOV       ?V7,#-0x7e
    681            }
    682          
    683            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \                     ??MT_AfIncomingMsg_1:
   \   00007A   7482         MOV       A,#-0x7e
   \   00007C   65..         XRL       A,?V7
   \   00007E   700C         JNZ       ??MT_AfIncomingMsg_3
    684            {
    685              respLen += MT_AF_INC_MSG_EXT;
   \   000080   E5..         MOV       A,?V0
   \   000082   240A         ADD       A,#0xa
   \   000084   F5..         MOV       ?V0,A
   \   000086   E5..         MOV       A,?V1
   \   000088   3400         ADDC      A,#0x0
   \   00008A   F5..         MOV       ?V1,A
    686            }
    687          
    688            if (respLen > (uint16)MT_RPC_DATA_MAX)
   \                     ??MT_AfIncomingMsg_3:
   \   00008C   C3           CLR       C
   \   00008D   E5..         MOV       A,?V0
   \   00008F   94FB         SUBB      A,#-0x5
   \   000091   E5..         MOV       A,?V1
   \   000093   9400         SUBB      A,#0x0
   \   000095   4042         JC        ??MT_AfIncomingMsg_4
    689            {
    690              if ((pItem = (mtAfInMsgList_t *)osal_mem_alloc(sizeof(mtAfInMsgList_t) + dataLen)) == NULL)
   \   000097                ; Setup parameters for call to function osal_mem_alloc
   \   000097   E5..         MOV       A,?V2
   \   000099   2409         ADD       A,#0x9
   \   00009B   FA           MOV       R2,A
   \   00009C   E4           CLR       A
   \   00009D   35..         ADDC      A,?V3
   \   00009F   FB           MOV       R3,A
   \   0000A0   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000A3   8A..         MOV       ?V4,R2
   \   0000A5   8B..         MOV       ?V5,R3
   \   0000A7   85....       MOV       ?V10,?V4
   \   0000AA   85....       MOV       ?V11,?V5
   \   0000AD   E5..         MOV       A,?V10
   \   0000AF   45..         ORL       A,?V11
   \   0000B1   7003         JNZ       $+5
   \   0000B3   02....       LJMP      ??MT_AfIncomingMsg_5 & 0xFFFF
    691              {
    692                return;  // If cannot hold a huge message, cannot give indication at all.
    693              }
    694          
    695              pItem->data = (uint8 *)(pItem+1);
   \   0000B6   E5..         MOV       A,?V10
   \   0000B8   2409         ADD       A,#0x9
   \   0000BA   F8           MOV       R0,A
   \   0000BB   E4           CLR       A
   \   0000BC   35..         ADDC      A,?V11
   \   0000BE   F9           MOV       R1,A
   \   0000BF   85..82       MOV       DPL,?V10
   \   0000C2   85..83       MOV       DPH,?V11
   \   0000C5   A3           INC       DPTR
   \   0000C6   A3           INC       DPTR
   \   0000C7   E8           MOV       A,R0
   \   0000C8   F0           MOVX      @DPTR,A
   \   0000C9   A3           INC       DPTR
   \   0000CA   E9           MOV       A,R1
   \   0000CB   F0           MOVX      @DPTR,A
    696              respLen -= dataLen;  // Zero data bytes are sent with an over-sized incoming indication.
   \   0000CC   C3           CLR       C
   \   0000CD   E5..         MOV       A,?V0
   \   0000CF   95..         SUBB      A,?V2
   \   0000D1   F5..         MOV       ?V0,A
   \   0000D3   E5..         MOV       A,?V1
   \   0000D5   95..         SUBB      A,?V3
   \   0000D7   F5..         MOV       ?V1,A
    697            }
    698          
    699            // Attempt to allocate memory for the response packet.
    700            if ((pRsp = osal_mem_alloc(respLen)) == NULL)
   \                     ??MT_AfIncomingMsg_4:
   \   0000D9                ; Setup parameters for call to function osal_mem_alloc
   \   0000D9   AA..         MOV       R2,?V0
   \   0000DB   AB..         MOV       R3,?V1
   \   0000DD   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000E0   8A..         MOV       ?V4,R2
   \   0000E2   8B..         MOV       ?V5,R3
   \   0000E4   85....       MOV       ?V12,?V4
   \   0000E7   85....       MOV       ?V13,?V5
   \   0000EA   E5..         MOV       A,?V12
   \   0000EC   45..         ORL       A,?V13
   \   0000EE   7010         JNZ       ??MT_AfIncomingMsg_6
    701            {
    702              if (pItem != NULL)
   \   0000F0   E5..         MOV       A,?V10
   \   0000F2   45..         ORL       A,?V11
   \   0000F4   6007         JZ        ??MT_AfIncomingMsg_7
    703              {
    704                (void)osal_mem_free(pItem);
   \   0000F6                ; Setup parameters for call to function osal_mem_free
   \   0000F6   AA..         MOV       R2,?V10
   \   0000F8   AB..         MOV       R3,?V11
   \   0000FA   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    705              }
    706              return;
   \                     ??MT_AfIncomingMsg_7:
   \   0000FD   02....       LJMP      ??MT_AfIncomingMsg_5 & 0xFFFF
    707            }
    708            pTmp = pRsp;
   \                     ??MT_AfIncomingMsg_6:
   \   000100   AE..         MOV       R6,?V12
   \   000102   AF..         MOV       R7,?V13
    709          
    710            /* Group ID */
    711            *pTmp++ = LO_UINT16(pMsg->groupId);
   \   000104   85..82       MOV       DPL,?V8
   \   000107   85..83       MOV       DPH,?V9
   \   00010A   A3           INC       DPTR
   \   00010B   A3           INC       DPTR
   \   00010C   E0           MOVX      A,@DPTR
   \   00010D   F8           MOV       R0,A
   \   00010E   A3           INC       DPTR
   \   00010F   E0           MOVX      A,@DPTR
   \   000110   F9           MOV       R1,A
   \   000111   E8           MOV       A,R0
   \   000112   C0E0         PUSH      A
   \   000114   8E82         MOV       DPL,R6
   \   000116   8F83         MOV       DPH,R7
   \   000118   D0E0         POP       A
   \   00011A   F0           MOVX      @DPTR,A
   \   00011B   8E82         MOV       DPL,R6
   \   00011D   8F83         MOV       DPH,R7
   \   00011F   A3           INC       DPTR
   \   000120   AE82         MOV       R6,DPL
   \   000122   AF83         MOV       R7,DPH
    712            *pTmp++ = HI_UINT16(pMsg->groupId);
   \   000124   85..82       MOV       DPL,?V8
   \   000127   85..83       MOV       DPH,?V9
   \   00012A   A3           INC       DPTR
   \   00012B   A3           INC       DPTR
   \   00012C   E0           MOVX      A,@DPTR
   \   00012D   F8           MOV       R0,A
   \   00012E   A3           INC       DPTR
   \   00012F   E0           MOVX      A,@DPTR
   \   000130   F9           MOV       R1,A
   \   000131   E4           CLR       A
   \   000132   C9           XCH       A,R1
   \   000133   F8           MOV       R0,A
   \   000134   E8           MOV       A,R0
   \   000135   C0E0         PUSH      A
   \   000137   8E82         MOV       DPL,R6
   \   000139   8F83         MOV       DPH,R7
   \   00013B   D0E0         POP       A
   \   00013D   F0           MOVX      @DPTR,A
   \   00013E   8E82         MOV       DPL,R6
   \   000140   8F83         MOV       DPH,R7
   \   000142   A3           INC       DPTR
   \   000143   AE82         MOV       R6,DPL
   \   000145   AF83         MOV       R7,DPH
    713          
    714            /* Cluster ID */
    715            *pTmp++ = LO_UINT16(pMsg->clusterId);
   \   000147   85..82       MOV       DPL,?V8
   \   00014A   85..83       MOV       DPH,?V9
   \   00014D   A3           INC       DPTR
   \   00014E   A3           INC       DPTR
   \   00014F   A3           INC       DPTR
   \   000150   A3           INC       DPTR
   \   000151   E0           MOVX      A,@DPTR
   \   000152   F8           MOV       R0,A
   \   000153   A3           INC       DPTR
   \   000154   E0           MOVX      A,@DPTR
   \   000155   F9           MOV       R1,A
   \   000156   E8           MOV       A,R0
   \   000157   C0E0         PUSH      A
   \   000159   8E82         MOV       DPL,R6
   \   00015B   8F83         MOV       DPH,R7
   \   00015D   D0E0         POP       A
   \   00015F   F0           MOVX      @DPTR,A
   \   000160   8E82         MOV       DPL,R6
   \   000162   8F83         MOV       DPH,R7
   \   000164   A3           INC       DPTR
   \   000165   AE82         MOV       R6,DPL
   \   000167   AF83         MOV       R7,DPH
    716            *pTmp++ = HI_UINT16(pMsg->clusterId);
   \   000169   85..82       MOV       DPL,?V8
   \   00016C   85..83       MOV       DPH,?V9
   \   00016F   A3           INC       DPTR
   \   000170   A3           INC       DPTR
   \   000171   A3           INC       DPTR
   \   000172   A3           INC       DPTR
   \   000173   E0           MOVX      A,@DPTR
   \   000174   F8           MOV       R0,A
   \   000175   A3           INC       DPTR
   \   000176   E0           MOVX      A,@DPTR
   \   000177   F9           MOV       R1,A
   \   000178   E4           CLR       A
   \   000179   C9           XCH       A,R1
   \   00017A   F8           MOV       R0,A
   \   00017B   E8           MOV       A,R0
   \   00017C   C0E0         PUSH      A
   \   00017E   8E82         MOV       DPL,R6
   \   000180   8F83         MOV       DPH,R7
   \   000182   D0E0         POP       A
   \   000184   F0           MOVX      @DPTR,A
   \   000185   8E82         MOV       DPL,R6
   \   000187   8F83         MOV       DPH,R7
   \   000189   A3           INC       DPTR
   \   00018A   AE82         MOV       R6,DPL
   \   00018C   AF83         MOV       R7,DPH
    717          
    718            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   00018E   7482         MOV       A,#-0x7e
   \   000190   65..         XRL       A,?V7
   \   000192   6003         JZ        $+5
   \   000194   02....       LJMP      ??MT_AfIncomingMsg_8 & 0xFFFF
    719            {
    720              *pTmp++ = pMsg->srcAddr.addrMode;
   \   000197   E5..         MOV       A,?V8
   \   000199   240E         ADD       A,#0xe
   \   00019B   F582         MOV       DPL,A
   \   00019D   E4           CLR       A
   \   00019E   35..         ADDC      A,?V9
   \   0001A0   F583         MOV       DPH,A
   \   0001A2   E0           MOVX      A,@DPTR
   \   0001A3   C0E0         PUSH      A
   \   0001A5   8E82         MOV       DPL,R6
   \   0001A7   8F83         MOV       DPH,R7
   \   0001A9   D0E0         POP       A
   \   0001AB   F0           MOVX      @DPTR,A
   \   0001AC   8E82         MOV       DPL,R6
   \   0001AE   8F83         MOV       DPH,R7
   \   0001B0   A3           INC       DPTR
   \   0001B1   AE82         MOV       R6,DPL
   \   0001B3   AF83         MOV       R7,DPH
    721          
    722              if (pMsg->srcAddr.addrMode == afAddr64Bit)
   \   0001B5   E5..         MOV       A,?V8
   \   0001B7   240E         ADD       A,#0xe
   \   0001B9   F582         MOV       DPL,A
   \   0001BB   E4           CLR       A
   \   0001BC   35..         ADDC      A,?V9
   \   0001BE   F583         MOV       DPH,A
   \   0001C0   E0           MOVX      A,@DPTR
   \   0001C1   6403         XRL       A,#0x3
   \   0001C3   702F         JNZ       ??MT_AfIncomingMsg_9
    723              {
    724                (void)osal_memcpy(pTmp, pMsg->srcAddr.addr.extAddr, Z_EXTADDR_LEN);
   \   0001C5                ; Setup parameters for call to function osal_memcpy
   \   0001C5   E5..         MOV       A,?V8
   \   0001C7   2406         ADD       A,#0x6
   \   0001C9   F5..         MOV       ?V4,A
   \   0001CB   E4           CLR       A
   \   0001CC   35..         ADDC      A,?V9
   \   0001CE   F5..         MOV       ?V5,A
   \   0001D0   75..00       MOV       ?V6,#0x0
   \   0001D3   78..         MOV       R0,#?V4
   \   0001D5   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001D8   7C08         MOV       R4,#0x8
   \   0001DA   7D00         MOV       R5,#0x0
   \   0001DC   EE           MOV       A,R6
   \   0001DD   FA           MOV       R2,A
   \   0001DE   EF           MOV       A,R7
   \   0001DF   FB           MOV       R3,A
   \   0001E0   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001E3   7403         MOV       A,#0x3
   \   0001E5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001E8   8A..         MOV       ?V4,R2
   \   0001EA   8B..         MOV       ?V5,R3
   \   0001EC   85..82       MOV       DPL,?V4
   \   0001EF   85..83       MOV       DPH,?V5
   \   0001F2   803A         SJMP      ??MT_AfIncomingMsg_10
    725              }
    726              else
    727              {
    728                pTmp[0] = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_9:
   \   0001F4   85..82       MOV       DPL,?V8
   \   0001F7   85..83       MOV       DPH,?V9
   \   0001FA   A3           INC       DPTR
   \   0001FB   A3           INC       DPTR
   \   0001FC   A3           INC       DPTR
   \   0001FD   A3           INC       DPTR
   \   0001FE   A3           INC       DPTR
   \   0001FF   A3           INC       DPTR
   \   000200   E0           MOVX      A,@DPTR
   \   000201   F8           MOV       R0,A
   \   000202   A3           INC       DPTR
   \   000203   E0           MOVX      A,@DPTR
   \   000204   F9           MOV       R1,A
   \   000205   E8           MOV       A,R0
   \   000206   C0E0         PUSH      A
   \   000208   8E82         MOV       DPL,R6
   \   00020A   8F83         MOV       DPH,R7
   \   00020C   D0E0         POP       A
   \   00020E   F0           MOVX      @DPTR,A
    729                pTmp[1] = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   00020F   85..82       MOV       DPL,?V8
   \   000212   85..83       MOV       DPH,?V9
   \   000215   A3           INC       DPTR
   \   000216   A3           INC       DPTR
   \   000217   A3           INC       DPTR
   \   000218   A3           INC       DPTR
   \   000219   A3           INC       DPTR
   \   00021A   A3           INC       DPTR
   \   00021B   E0           MOVX      A,@DPTR
   \   00021C   F8           MOV       R0,A
   \   00021D   A3           INC       DPTR
   \   00021E   E0           MOVX      A,@DPTR
   \   00021F   F9           MOV       R1,A
   \   000220   E4           CLR       A
   \   000221   C9           XCH       A,R1
   \   000222   F8           MOV       R0,A
   \   000223   E8           MOV       A,R0
   \   000224   C0E0         PUSH      A
   \   000226   8E82         MOV       DPL,R6
   \   000228   8F83         MOV       DPH,R7
   \   00022A   A3           INC       DPTR
   \   00022B   D0E0         POP       A
   \   00022D   F0           MOVX      @DPTR,A
    730              }
    731              pTmp += Z_EXTADDR_LEN;
   \                     ??MT_AfIncomingMsg_10:
   \   00022E   EE           MOV       A,R6
   \   00022F   2408         ADD       A,#0x8
   \   000231   FE           MOV       R6,A
   \   000232   5001         JNC       ??MT_AfIncomingMsg_11
   \   000234   0F           INC       R7
    732          
    733              *pTmp++ = pMsg->srcAddr.endPoint;
   \                     ??MT_AfIncomingMsg_11:
   \   000235   E5..         MOV       A,?V8
   \   000237   240F         ADD       A,#0xf
   \   000239   F582         MOV       DPL,A
   \   00023B   E4           CLR       A
   \   00023C   35..         ADDC      A,?V9
   \   00023E   F583         MOV       DPH,A
   \   000240   E0           MOVX      A,@DPTR
   \   000241   C0E0         PUSH      A
   \   000243   8E82         MOV       DPL,R6
   \   000245   8F83         MOV       DPH,R7
   \   000247   D0E0         POP       A
   \   000249   F0           MOVX      @DPTR,A
   \   00024A   8E82         MOV       DPL,R6
   \   00024C   8F83         MOV       DPH,R7
   \   00024E   A3           INC       DPTR
   \   00024F   AE82         MOV       R6,DPL
   \   000251   AF83         MOV       R7,DPH
    734          #if defined INTER_PAN
    735              *pTmp++ = LO_UINT16(pMsg->srcAddr.panId);
   \   000253   E5..         MOV       A,?V8
   \   000255   2410         ADD       A,#0x10
   \   000257   F582         MOV       DPL,A
   \   000259   E4           CLR       A
   \   00025A   35..         ADDC      A,?V9
   \   00025C   F583         MOV       DPH,A
   \   00025E   E0           MOVX      A,@DPTR
   \   00025F   F8           MOV       R0,A
   \   000260   A3           INC       DPTR
   \   000261   E0           MOVX      A,@DPTR
   \   000262   F9           MOV       R1,A
   \   000263   E8           MOV       A,R0
   \   000264   C0E0         PUSH      A
   \   000266   8E82         MOV       DPL,R6
   \   000268   8F83         MOV       DPH,R7
   \   00026A   D0E0         POP       A
   \   00026C   F0           MOVX      @DPTR,A
   \   00026D   8E82         MOV       DPL,R6
   \   00026F   8F83         MOV       DPH,R7
   \   000271   A3           INC       DPTR
   \   000272   AE82         MOV       R6,DPL
   \   000274   AF83         MOV       R7,DPH
    736              *pTmp++ = HI_UINT16(pMsg->srcAddr.panId);
   \   000276   E5..         MOV       A,?V8
   \   000278   2410         ADD       A,#0x10
   \   00027A   F582         MOV       DPL,A
   \   00027C   E4           CLR       A
   \   00027D   35..         ADDC      A,?V9
   \   00027F   F583         MOV       DPH,A
   \   000281   E0           MOVX      A,@DPTR
   \   000282   F8           MOV       R0,A
   \   000283   A3           INC       DPTR
   \   000284   E0           MOVX      A,@DPTR
   \   000285   F9           MOV       R1,A
   \   000286   E4           CLR       A
   \   000287   C9           XCH       A,R1
   \   000288   F8           MOV       R0,A
   \   000289   E8           MOV       A,R0
   \   00028A   C0E0         PUSH      A
   \   00028C   8E82         MOV       DPL,R6
   \   00028E   8F83         MOV       DPH,R7
   \   000290   D0E0         POP       A
   \   000292   F0           MOVX      @DPTR,A
   \   000293   8E82         MOV       DPL,R6
   \   000295   8F83         MOV       DPH,R7
   \   000297   A3           INC       DPTR
   \   000298   AE82         MOV       R6,DPL
   \   00029A   AF83         MOV       R7,DPH
   \   00029C   8069         SJMP      ??MT_AfIncomingMsg_12
    737          #else
    738              *pTmp++ = 0;
    739              *pTmp++ = 0;
    740          #endif
    741            }
    742            else
    743            {
    744              /* Source Address */
    745              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_8:
   \   00029E   85..82       MOV       DPL,?V8
   \   0002A1   85..83       MOV       DPH,?V9
   \   0002A4   A3           INC       DPTR
   \   0002A5   A3           INC       DPTR
   \   0002A6   A3           INC       DPTR
   \   0002A7   A3           INC       DPTR
   \   0002A8   A3           INC       DPTR
   \   0002A9   A3           INC       DPTR
   \   0002AA   E0           MOVX      A,@DPTR
   \   0002AB   F8           MOV       R0,A
   \   0002AC   A3           INC       DPTR
   \   0002AD   E0           MOVX      A,@DPTR
   \   0002AE   F9           MOV       R1,A
   \   0002AF   E8           MOV       A,R0
   \   0002B0   C0E0         PUSH      A
   \   0002B2   8E82         MOV       DPL,R6
   \   0002B4   8F83         MOV       DPH,R7
   \   0002B6   D0E0         POP       A
   \   0002B8   F0           MOVX      @DPTR,A
   \   0002B9   8E82         MOV       DPL,R6
   \   0002BB   8F83         MOV       DPH,R7
   \   0002BD   A3           INC       DPTR
   \   0002BE   AE82         MOV       R6,DPL
   \   0002C0   AF83         MOV       R7,DPH
    746              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   0002C2   85..82       MOV       DPL,?V8
   \   0002C5   85..83       MOV       DPH,?V9
   \   0002C8   A3           INC       DPTR
   \   0002C9   A3           INC       DPTR
   \   0002CA   A3           INC       DPTR
   \   0002CB   A3           INC       DPTR
   \   0002CC   A3           INC       DPTR
   \   0002CD   A3           INC       DPTR
   \   0002CE   E0           MOVX      A,@DPTR
   \   0002CF   F8           MOV       R0,A
   \   0002D0   A3           INC       DPTR
   \   0002D1   E0           MOVX      A,@DPTR
   \   0002D2   F9           MOV       R1,A
   \   0002D3   E4           CLR       A
   \   0002D4   C9           XCH       A,R1
   \   0002D5   F8           MOV       R0,A
   \   0002D6   E8           MOV       A,R0
   \   0002D7   C0E0         PUSH      A
   \   0002D9   8E82         MOV       DPL,R6
   \   0002DB   8F83         MOV       DPH,R7
   \   0002DD   D0E0         POP       A
   \   0002DF   F0           MOVX      @DPTR,A
   \   0002E0   8E82         MOV       DPL,R6
   \   0002E2   8F83         MOV       DPH,R7
   \   0002E4   A3           INC       DPTR
   \   0002E5   AE82         MOV       R6,DPL
   \   0002E7   AF83         MOV       R7,DPH
    747          
    748              /* Source EP */
    749              *pTmp++ = pMsg->srcAddr.endPoint;
   \   0002E9   E5..         MOV       A,?V8
   \   0002EB   240F         ADD       A,#0xf
   \   0002ED   F582         MOV       DPL,A
   \   0002EF   E4           CLR       A
   \   0002F0   35..         ADDC      A,?V9
   \   0002F2   F583         MOV       DPH,A
   \   0002F4   E0           MOVX      A,@DPTR
   \   0002F5   C0E0         PUSH      A
   \   0002F7   8E82         MOV       DPL,R6
   \   0002F9   8F83         MOV       DPH,R7
   \   0002FB   D0E0         POP       A
   \   0002FD   F0           MOVX      @DPTR,A
   \   0002FE   8E82         MOV       DPL,R6
   \   000300   8F83         MOV       DPH,R7
   \   000302   A3           INC       DPTR
   \   000303   AE82         MOV       R6,DPL
   \   000305   AF83         MOV       R7,DPH
    750            }
    751          
    752            /* Destination EP */
    753            *pTmp++ = pMsg->endPoint;
   \                     ??MT_AfIncomingMsg_12:
   \   000307   E5..         MOV       A,?V8
   \   000309   2414         ADD       A,#0x14
   \   00030B   F582         MOV       DPL,A
   \   00030D   E4           CLR       A
   \   00030E   35..         ADDC      A,?V9
   \   000310   F583         MOV       DPH,A
   \   000312   E0           MOVX      A,@DPTR
   \   000313   C0E0         PUSH      A
   \   000315   8E82         MOV       DPL,R6
   \   000317   8F83         MOV       DPH,R7
   \   000319   D0E0         POP       A
   \   00031B   F0           MOVX      @DPTR,A
   \   00031C   8E82         MOV       DPL,R6
   \   00031E   8F83         MOV       DPH,R7
   \   000320   A3           INC       DPTR
   \   000321   AE82         MOV       R6,DPL
   \   000323   AF83         MOV       R7,DPH
    754          
    755            /* WasBroadCast */
    756            *pTmp++ = pMsg->wasBroadcast;
   \   000325   E5..         MOV       A,?V8
   \   000327   2415         ADD       A,#0x15
   \   000329   F582         MOV       DPL,A
   \   00032B   E4           CLR       A
   \   00032C   35..         ADDC      A,?V9
   \   00032E   F583         MOV       DPH,A
   \   000330   E0           MOVX      A,@DPTR
   \   000331   C0E0         PUSH      A
   \   000333   8E82         MOV       DPL,R6
   \   000335   8F83         MOV       DPH,R7
   \   000337   D0E0         POP       A
   \   000339   F0           MOVX      @DPTR,A
   \   00033A   8E82         MOV       DPL,R6
   \   00033C   8F83         MOV       DPH,R7
   \   00033E   A3           INC       DPTR
   \   00033F   AE82         MOV       R6,DPL
   \   000341   AF83         MOV       R7,DPH
    757          
    758            /* LinkQuality */
    759            *pTmp++ = pMsg->LinkQuality;
   \   000343   E5..         MOV       A,?V8
   \   000345   2416         ADD       A,#0x16
   \   000347   F582         MOV       DPL,A
   \   000349   E4           CLR       A
   \   00034A   35..         ADDC      A,?V9
   \   00034C   F583         MOV       DPH,A
   \   00034E   E0           MOVX      A,@DPTR
   \   00034F   C0E0         PUSH      A
   \   000351   8E82         MOV       DPL,R6
   \   000353   8F83         MOV       DPH,R7
   \   000355   D0E0         POP       A
   \   000357   F0           MOVX      @DPTR,A
   \   000358   8E82         MOV       DPL,R6
   \   00035A   8F83         MOV       DPH,R7
   \   00035C   A3           INC       DPTR
   \   00035D   AE82         MOV       R6,DPL
   \   00035F   AF83         MOV       R7,DPH
    760          
    761            /* SecurityUse */
    762            *pTmp++ = pMsg->SecurityUse;
   \   000361   E5..         MOV       A,?V8
   \   000363   2419         ADD       A,#0x19
   \   000365   F582         MOV       DPL,A
   \   000367   E4           CLR       A
   \   000368   35..         ADDC      A,?V9
   \   00036A   F583         MOV       DPH,A
   \   00036C   E0           MOVX      A,@DPTR
   \   00036D   C0E0         PUSH      A
   \   00036F   8E82         MOV       DPL,R6
   \   000371   8F83         MOV       DPH,R7
   \   000373   D0E0         POP       A
   \   000375   F0           MOVX      @DPTR,A
   \   000376   8E82         MOV       DPL,R6
   \   000378   8F83         MOV       DPH,R7
   \   00037A   A3           INC       DPTR
   \   00037B   AE82         MOV       R6,DPL
   \   00037D   AF83         MOV       R7,DPH
    763          
    764            /* Timestamp */
    765            osal_buffer_uint32( pTmp, pMsg->timestamp );
   \   00037F                ; Setup parameters for call to function osal_buffer_uint32
   \   00037F   E5..         MOV       A,?V8
   \   000381   241A         ADD       A,#0x1a
   \   000383   F582         MOV       DPL,A
   \   000385   E4           CLR       A
   \   000386   35..         ADDC      A,?V9
   \   000388   F583         MOV       DPH,A
   \   00038A   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00038D   EE           MOV       A,R6
   \   00038E   FA           MOV       R2,A
   \   00038F   EF           MOV       A,R7
   \   000390   FB           MOV       R3,A
   \   000391   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000394   7404         MOV       A,#0x4
   \   000396   12....       LCALL     ?DEALLOC_XSTACK8
    766            pTmp += 4;
   \   000399   EE           MOV       A,R6
   \   00039A   2404         ADD       A,#0x4
   \   00039C   FE           MOV       R6,A
   \   00039D   5001         JNC       ??MT_AfIncomingMsg_13
   \   00039F   0F           INC       R7
    767          
    768            /* Data Length */
    769            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \                     ??MT_AfIncomingMsg_13:
   \   0003A0   7482         MOV       A,#-0x7e
   \   0003A2   65..         XRL       A,?V7
   \   0003A4   7040         JNZ       ??MT_AfIncomingMsg_14
    770            {
    771              /* Z-Tool apparently takes the last Byte before the data buffer as the dynamic length and
    772               * ignores the bigger UInt16 length of an EXT incoming message. But no data bytes will be sent
    773               * with a huge message, so it's necessary to work-around and fake-out Z-Tool with a zero here.
    774               */
    775              *pTmp++ = 0;  // TODO - workaround Z-Tool shortcoming; should be: = pMsg->cmd.TransSeqNumber;
   \   0003A6   8E82         MOV       DPL,R6
   \   0003A8   8F83         MOV       DPH,R7
   \   0003AA   7400         MOV       A,#0x0
   \   0003AC   F0           MOVX      @DPTR,A
   \   0003AD   8E82         MOV       DPL,R6
   \   0003AF   8F83         MOV       DPH,R7
   \   0003B1   A3           INC       DPTR
   \   0003B2   AE82         MOV       R6,DPL
   \   0003B4   AF83         MOV       R7,DPH
    776              *pTmp++ = LO_UINT16(dataLen);
   \   0003B6   E5..         MOV       A,?V2
   \   0003B8   C0E0         PUSH      A
   \   0003BA   8E82         MOV       DPL,R6
   \   0003BC   8F83         MOV       DPH,R7
   \   0003BE   D0E0         POP       A
   \   0003C0   F0           MOVX      @DPTR,A
   \   0003C1   8E82         MOV       DPL,R6
   \   0003C3   8F83         MOV       DPH,R7
   \   0003C5   A3           INC       DPTR
   \   0003C6   AE82         MOV       R6,DPL
   \   0003C8   AF83         MOV       R7,DPH
    777              *pTmp++ = HI_UINT16(dataLen);
   \   0003CA   A8..         MOV       R0,?V2
   \   0003CC   A9..         MOV       R1,?V3
   \   0003CE   E4           CLR       A
   \   0003CF   C9           XCH       A,R1
   \   0003D0   F8           MOV       R0,A
   \   0003D1   E8           MOV       A,R0
   \   0003D2   C0E0         PUSH      A
   \   0003D4   8E82         MOV       DPL,R6
   \   0003D6   8F83         MOV       DPH,R7
   \   0003D8   D0E0         POP       A
   \   0003DA   F0           MOVX      @DPTR,A
   \   0003DB   8E82         MOV       DPL,R6
   \   0003DD   8F83         MOV       DPH,R7
   \   0003DF   A3           INC       DPTR
   \   0003E0   AE82         MOV       R6,DPL
   \   0003E2   AF83         MOV       R7,DPH
   \   0003E4   8032         SJMP      ??MT_AfIncomingMsg_15
    778            }
    779            else
    780            {
    781              *pTmp++ = pMsg->cmd.TransSeqNumber;
   \                     ??MT_AfIncomingMsg_14:
   \   0003E6   E5..         MOV       A,?V8
   \   0003E8   241F         ADD       A,#0x1f
   \   0003EA   F582         MOV       DPL,A
   \   0003EC   E4           CLR       A
   \   0003ED   35..         ADDC      A,?V9
   \   0003EF   F583         MOV       DPH,A
   \   0003F1   E0           MOVX      A,@DPTR
   \   0003F2   C0E0         PUSH      A
   \   0003F4   8E82         MOV       DPL,R6
   \   0003F6   8F83         MOV       DPH,R7
   \   0003F8   D0E0         POP       A
   \   0003FA   F0           MOVX      @DPTR,A
   \   0003FB   8E82         MOV       DPL,R6
   \   0003FD   8F83         MOV       DPH,R7
   \   0003FF   A3           INC       DPTR
   \   000400   AE82         MOV       R6,DPL
   \   000402   AF83         MOV       R7,DPH
    782              *pTmp++ = dataLen;
   \   000404   E5..         MOV       A,?V2
   \   000406   C0E0         PUSH      A
   \   000408   8E82         MOV       DPL,R6
   \   00040A   8F83         MOV       DPH,R7
   \   00040C   D0E0         POP       A
   \   00040E   F0           MOVX      @DPTR,A
   \   00040F   8E82         MOV       DPL,R6
   \   000411   8F83         MOV       DPH,R7
   \   000413   A3           INC       DPTR
   \   000414   AE82         MOV       R6,DPL
   \   000416   AF83         MOV       R7,DPH
    783            }
    784          
    785            /* Data */
    786            if (pItem != NULL)
   \                     ??MT_AfIncomingMsg_15:
   \   000418   E5..         MOV       A,?V10
   \   00041A   45..         ORL       A,?V11
   \   00041C   7003         JNZ       $+5
   \   00041E   02....       LJMP      ??MT_AfIncomingMsg_16 & 0xFFFF
    787            {
    788              // Enqueue the new huge incoming item.
    789              pItem->next = pMtAfInMsgList;
   \   000421   90....       MOV       DPTR,#pMtAfInMsgList
   \   000424   E0           MOVX      A,@DPTR
   \   000425   F8           MOV       R0,A
   \   000426   A3           INC       DPTR
   \   000427   E0           MOVX      A,@DPTR
   \   000428   F9           MOV       R1,A
   \   000429   85..82       MOV       DPL,?V10
   \   00042C   85..83       MOV       DPH,?V11
   \   00042F   E8           MOV       A,R0
   \   000430   F0           MOVX      @DPTR,A
   \   000431   A3           INC       DPTR
   \   000432   E9           MOV       A,R1
   \   000433   F0           MOVX      @DPTR,A
    790              pMtAfInMsgList = pItem;
   \   000434   90....       MOV       DPTR,#pMtAfInMsgList
   \   000437   E5..         MOV       A,?V10
   \   000439   F0           MOVX      @DPTR,A
   \   00043A   A3           INC       DPTR
   \   00043B   E5..         MOV       A,?V11
   \   00043D   F0           MOVX      @DPTR,A
    791          
    792              // Setup to time-out the huge incoming item if host does not MT_AF_DATA_RETRIEVE it.
    793              pItem->tick = MT_AF_EXEC_CNT;
   \   00043E   85..82       MOV       DPL,?V10
   \   000441   85..83       MOV       DPH,?V11
   \   000444   A3           INC       DPTR
   \   000445   A3           INC       DPTR
   \   000446   A3           INC       DPTR
   \   000447   A3           INC       DPTR
   \   000448   A3           INC       DPTR
   \   000449   A3           INC       DPTR
   \   00044A   A3           INC       DPTR
   \   00044B   A3           INC       DPTR
   \   00044C   740F         MOV       A,#0xf
   \   00044E   F0           MOVX      @DPTR,A
    794              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \   00044F                ; Setup parameters for call to function osal_start_timerEx
   \   00044F   90....       MOV       DPTR,#__Constant_3e8
   \   000452   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000455   7A08         MOV       R2,#0x8
   \   000457   7B00         MOV       R3,#0x0
   \   000459   90....       MOV       DPTR,#MT_TaskID
   \   00045C   E0           MOVX      A,@DPTR
   \   00045D   F9           MOV       R1,A
   \   00045E   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000461   7404         MOV       A,#0x4
   \   000463   12....       LCALL     ?DEALLOC_XSTACK8
   \   000466   E9           MOV       A,R1
   \   000467   6018         JZ        ??MT_AfIncomingMsg_17
    795              {
    796                (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   000469                ; Setup parameters for call to function osal_set_event
   \   000469   7A08         MOV       R2,#0x8
   \   00046B   7B00         MOV       R3,#0x0
   \   00046D   90....       MOV       DPTR,#MT_TaskID
   \   000470   E0           MOVX      A,@DPTR
   \   000471   F9           MOV       R1,A
   \   000472   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000475   E9           MOV       A,R1
   \   000476   C0E0         PUSH      A
   \   000478   85..82       MOV       DPL,?XSP + 0
   \   00047B   85..83       MOV       DPH,?XSP + 1
   \   00047E   D0E0         POP       A
   \   000480   F0           MOVX      @DPTR,A
    797              }
    798          
    799              pItem->timestamp = pMsg->timestamp;
   \                     ??MT_AfIncomingMsg_17:
   \   000481   E5..         MOV       A,?V8
   \   000483   241A         ADD       A,#0x1a
   \   000485   F582         MOV       DPL,A
   \   000487   E4           CLR       A
   \   000488   35..         ADDC      A,?V9
   \   00048A   F583         MOV       DPH,A
   \   00048C   12....       LCALL     ?XLOAD_R0123
   \   00048F   85..82       MOV       DPL,?V10
   \   000492   85..83       MOV       DPH,?V11
   \   000495   A3           INC       DPTR
   \   000496   A3           INC       DPTR
   \   000497   A3           INC       DPTR
   \   000498   A3           INC       DPTR
   \   000499   12....       LCALL     ?XSTORE_R0123
    800              (void)osal_memcpy(pItem->data, pMsg->cmd.Data, dataLen);
   \   00049C                ; Setup parameters for call to function osal_memcpy
   \   00049C   E5..         MOV       A,?V8
   \   00049E   2422         ADD       A,#0x22
   \   0004A0   F582         MOV       DPL,A
   \   0004A2   E4           CLR       A
   \   0004A3   35..         ADDC      A,?V9
   \   0004A5   F583         MOV       DPH,A
   \   0004A7   E0           MOVX      A,@DPTR
   \   0004A8   F5..         MOV       ?V4,A
   \   0004AA   A3           INC       DPTR
   \   0004AB   E0           MOVX      A,@DPTR
   \   0004AC   F5..         MOV       ?V5,A
   \   0004AE   75..00       MOV       ?V6,#0x0
   \   0004B1   78..         MOV       R0,#?V4
   \   0004B3   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0004B6   AC..         MOV       R4,?V2
   \   0004B8   AD..         MOV       R5,?V3
   \   0004BA   85..82       MOV       DPL,?V10
   \   0004BD   85..83       MOV       DPH,?V11
   \   0004C0   A3           INC       DPTR
   \   0004C1   A3           INC       DPTR
   \   0004C2   E0           MOVX      A,@DPTR
   \   0004C3   FA           MOV       R2,A
   \   0004C4   A3           INC       DPTR
   \   0004C5   E0           MOVX      A,@DPTR
   \   0004C6   FB           MOV       R3,A
   \   0004C7   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0004CA   7403         MOV       A,#0x3
   \   0004CC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0004CF   8A..         MOV       ?V4,R2
   \   0004D1   8B..         MOV       ?V5,R3
   \   0004D3   85..82       MOV       DPL,?V4
   \   0004D6   85..83       MOV       DPH,?V5
   \   0004D9   803C         SJMP      ??MT_AfIncomingMsg_18
    801            }
    802            else
    803            {
    804              (void)osal_memcpy(pTmp, pMsg->cmd.Data, dataLen);
   \                     ??MT_AfIncomingMsg_16:
   \   0004DB                ; Setup parameters for call to function osal_memcpy
   \   0004DB   E5..         MOV       A,?V8
   \   0004DD   2422         ADD       A,#0x22
   \   0004DF   F582         MOV       DPL,A
   \   0004E1   E4           CLR       A
   \   0004E2   35..         ADDC      A,?V9
   \   0004E4   F583         MOV       DPH,A
   \   0004E6   E0           MOVX      A,@DPTR
   \   0004E7   F5..         MOV       ?V4,A
   \   0004E9   A3           INC       DPTR
   \   0004EA   E0           MOVX      A,@DPTR
   \   0004EB   F5..         MOV       ?V5,A
   \   0004ED   75..00       MOV       ?V6,#0x0
   \   0004F0   78..         MOV       R0,#?V4
   \   0004F2   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0004F5   AC..         MOV       R4,?V2
   \   0004F7   AD..         MOV       R5,?V3
   \   0004F9   EE           MOV       A,R6
   \   0004FA   FA           MOV       R2,A
   \   0004FB   EF           MOV       A,R7
   \   0004FC   FB           MOV       R3,A
   \   0004FD   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000500   7403         MOV       A,#0x3
   \   000502   12....       LCALL     ?DEALLOC_XSTACK8
   \   000505   8A..         MOV       ?V4,R2
   \   000507   8B..         MOV       ?V5,R3
   \   000509   85..82       MOV       DPL,?V4
   \   00050C   85..83       MOV       DPH,?V5
    805              pTmp += dataLen;
   \   00050F   EE           MOV       A,R6
   \   000510   25..         ADD       A,?V2
   \   000512   FE           MOV       R6,A
   \   000513   EF           MOV       A,R7
   \   000514   35..         ADDC      A,?V3
   \   000516   FF           MOV       R7,A
    806            }
    807          
    808            // MAC Source address
    809            *pTmp++ = LO_UINT16(pMsg->macSrcAddr);
   \                     ??MT_AfIncomingMsg_18:
   \   000517   E5..         MOV       A,?V8
   \   000519   2424         ADD       A,#0x24
   \   00051B   F582         MOV       DPL,A
   \   00051D   E4           CLR       A
   \   00051E   35..         ADDC      A,?V9
   \   000520   F583         MOV       DPH,A
   \   000522   E0           MOVX      A,@DPTR
   \   000523   F8           MOV       R0,A
   \   000524   A3           INC       DPTR
   \   000525   E0           MOVX      A,@DPTR
   \   000526   F9           MOV       R1,A
   \   000527   E8           MOV       A,R0
   \   000528   C0E0         PUSH      A
   \   00052A   8E82         MOV       DPL,R6
   \   00052C   8F83         MOV       DPH,R7
   \   00052E   D0E0         POP       A
   \   000530   F0           MOVX      @DPTR,A
   \   000531   8E82         MOV       DPL,R6
   \   000533   8F83         MOV       DPH,R7
   \   000535   A3           INC       DPTR
   \   000536   AE82         MOV       R6,DPL
   \   000538   AF83         MOV       R7,DPH
    810            *pTmp++ = HI_UINT16(pMsg->macSrcAddr);
   \   00053A   E5..         MOV       A,?V8
   \   00053C   2424         ADD       A,#0x24
   \   00053E   F582         MOV       DPL,A
   \   000540   E4           CLR       A
   \   000541   35..         ADDC      A,?V9
   \   000543   F583         MOV       DPH,A
   \   000545   E0           MOVX      A,@DPTR
   \   000546   F8           MOV       R0,A
   \   000547   A3           INC       DPTR
   \   000548   E0           MOVX      A,@DPTR
   \   000549   F9           MOV       R1,A
   \   00054A   E4           CLR       A
   \   00054B   C9           XCH       A,R1
   \   00054C   F8           MOV       R0,A
   \   00054D   E8           MOV       A,R0
   \   00054E   C0E0         PUSH      A
   \   000550   8E82         MOV       DPL,R6
   \   000552   8F83         MOV       DPH,R7
   \   000554   D0E0         POP       A
   \   000556   F0           MOVX      @DPTR,A
   \   000557   8E82         MOV       DPL,R6
   \   000559   8F83         MOV       DPH,R7
   \   00055B   A3           INC       DPTR
   \   00055C   AE82         MOV       R6,DPL
   \   00055E   AF83         MOV       R7,DPH
    811          
    812            // messages result radius
    813            *pTmp = pMsg->radius;
   \   000560   E5..         MOV       A,?V8
   \   000562   2426         ADD       A,#0x26
   \   000564   F582         MOV       DPL,A
   \   000566   E4           CLR       A
   \   000567   35..         ADDC      A,?V9
   \   000569   F583         MOV       DPH,A
   \   00056B   E0           MOVX      A,@DPTR
   \   00056C   C0E0         PUSH      A
   \   00056E   8E82         MOV       DPL,R6
   \   000570   8F83         MOV       DPH,R7
   \   000572   D0E0         POP       A
   \   000574   F0           MOVX      @DPTR,A
    814          
    815            /* Build and send back the response */
    816            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ|(uint8)MT_RPC_SYS_AF), cmd, respLen, pRsp);
   \   000575                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000575   AC..         MOV       R4,?V12
   \   000577   AD..         MOV       R5,?V13
   \   000579   AB..         MOV       R3,?V0
   \   00057B   AA..         MOV       R2,?V7
   \   00057D   7944         MOV       R1,#0x44
   \   00057F   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    817          
    818            (void)osal_mem_free(pRsp);
   \   000582                ; Setup parameters for call to function osal_mem_free
   \   000582   AA..         MOV       R2,?V12
   \   000584   AB..         MOV       R3,?V13
   \   000586   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    819          }
   \                     ??MT_AfIncomingMsg_5:
   \   000589   7401         MOV       A,#0x1
   \   00058B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00058E   7F0E         MOV       R7,#0xe
   \   000590   02....       LJMP      ?BANKED_LEAVE_XDATA
    820          
    821          /**************************************************************************************************
    822           * @fn          MT_AfDataRetrieve
    823           *
    824           * @brief   Process AF Data Retrieve command to incrementally read out a very large
    825           *          incoming AF message.
    826           *
    827           * input parameters
    828           *
    829           * @param pBuf - pointer to the received buffer
    830           *
    831           * output parameters
    832           *
    833           * @param rtrn - AF-Status of the operation.
    834           *
    835           * @return      None.
    836           **************************************************************************************************
    837           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    838          static void MT_AfDataRetrieve(uint8 *pBuf)
   \                     MT_AfDataRetrieve:
    839          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V10,R2
   \   00000C   8B..         MOV       ?V11,R3
    840            #define MT_AF_RTV_HDR_SZ  2
    841          
    842            uint32 timestamp;
    843            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \   00000E   90....       MOV       DPTR,#pMtAfInMsgList
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F5..         MOV       ?V8,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F5..         MOV       ?V9,A
    844            uint8 rtrn = afStatus_FAILED;
   \   000018   7F01         MOV       R7,#0x1
    845            uint8 len = 0;
   \   00001A   7E00         MOV       R6,#0x0
    846          
    847            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00001C   E5..         MOV       A,?V10
   \   00001E   2403         ADD       A,#0x3
   \   000020   F5..         MOV       ?V10,A
   \   000022   5002         JNC       ??MT_AfDataRetrieve_0
   \   000024   05..         INC       ?V11
    848            timestamp = osal_build_uint32( pBuf, 4 );
   \                     ??MT_AfDataRetrieve_0:
   \   000026                ; Setup parameters for call to function osal_build_uint32
   \   000026   7904         MOV       R1,#0x4
   \   000028   AA..         MOV       R2,?V10
   \   00002A   AB..         MOV       R3,?V11
   \   00002C   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00002F   8A..         MOV       ?V0,R2
   \   000031   8B..         MOV       ?V1,R3
   \   000033   8C..         MOV       ?V2,R4
   \   000035   8D..         MOV       ?V3,R5
   \   000037   85....       MOV       ?V4,?V0
   \   00003A   85....       MOV       ?V5,?V1
   \   00003D   85....       MOV       ?V6,?V2
   \   000040   85....       MOV       ?V7,?V3
    849          
    850            while (pItem != NULL)
   \                     ??MT_AfDataRetrieve_1:
   \   000043   E5..         MOV       A,?V8
   \   000045   45..         ORL       A,?V9
   \   000047   602D         JZ        ??MT_AfDataRetrieve_2
    851            {
    852              pPrev = pItem;
   \   000049   85..82       MOV       DPL,?XSP + 0
   \   00004C   85..83       MOV       DPH,?XSP + 1
   \   00004F   E5..         MOV       A,?V8
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   E5..         MOV       A,?V9
   \   000055   F0           MOVX      @DPTR,A
    853              if (pItem->timestamp == timestamp)
   \   000056   85..82       MOV       DPL,?V8
   \   000059   85..83       MOV       DPH,?V9
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   78..         MOV       R0,#?V4
   \   000062   12....       LCALL     ?L_EQ_X
   \   000065   600F         JZ        ??MT_AfDataRetrieve_2
    854              {
    855                break;
    856              }
    857              pItem = pItem->next;
   \   000067   85..82       MOV       DPL,?V8
   \   00006A   85..83       MOV       DPH,?V9
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   F5..         MOV       ?V8,A
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   F5..         MOV       ?V9,A
   \   000074   80CD         SJMP      ??MT_AfDataRetrieve_1
    858            }
    859          
    860            if (pItem != NULL)
   \                     ??MT_AfDataRetrieve_2:
   \   000076   E5..         MOV       A,?V8
   \   000078   45..         ORL       A,?V9
   \   00007A   7003         JNZ       $+5
   \   00007C   02....       LJMP      ??MT_AfDataRetrieve_3 & 0xFFFF
    861            {
    862              uint16 idx;
    863              uint8 *pRsp;
    864          
    865              pBuf += 4;
   \   00007F   E5..         MOV       A,?V10
   \   000081   2404         ADD       A,#0x4
   \   000083   F5..         MOV       ?V10,A
   \   000085   5002         JNC       ??MT_AfDataRetrieve_4
   \   000087   05..         INC       ?V11
    866              idx = osal_build_uint16( pBuf );
   \                     ??MT_AfDataRetrieve_4:
   \   000089                ; Setup parameters for call to function osal_build_uint16
   \   000089   AA..         MOV       R2,?V10
   \   00008B   AB..         MOV       R3,?V11
   \   00008D   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000090   8A..         MOV       ?V0,R2
   \   000092   8B..         MOV       ?V1,R3
   \   000094   85....       MOV       ?V14,?V0
   \   000097   85....       MOV       ?V15,?V1
    867              len = pBuf[2];
   \   00009A   85..82       MOV       DPL,?V10
   \   00009D   85..83       MOV       DPH,?V11
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   FE           MOV       R6,A
    868          
    869              if (len == 0)  // Indication to delete the afIncomingMSGPacket.
   \   0000A4   EE           MOV       A,R6
   \   0000A5   7051         JNZ       ??MT_AfDataRetrieve_5
    870              {
    871                if (pMtAfInMsgList == pItem)
   \   0000A7   90....       MOV       DPTR,#pMtAfInMsgList
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   F8           MOV       R0,A
   \   0000AC   A3           INC       DPTR
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   F9           MOV       R1,A
   \   0000AF   E5..         MOV       A,?V8
   \   0000B1   68           XRL       A,R0
   \   0000B2   7003         JNZ       ??MT_AfDataRetrieve_6
   \   0000B4   E5..         MOV       A,?V9
   \   0000B6   69           XRL       A,R1
   \                     ??MT_AfDataRetrieve_6:
   \   0000B7   7015         JNZ       ??MT_AfDataRetrieve_7
    872                {
    873                  pMtAfInMsgList = pItem->next;
   \   0000B9   85..82       MOV       DPL,?V8
   \   0000BC   85..83       MOV       DPH,?V9
   \   0000BF   E0           MOVX      A,@DPTR
   \   0000C0   F8           MOV       R0,A
   \   0000C1   A3           INC       DPTR
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   F9           MOV       R1,A
   \   0000C4   90....       MOV       DPTR,#pMtAfInMsgList
   \   0000C7   E8           MOV       A,R0
   \   0000C8   F0           MOVX      @DPTR,A
   \   0000C9   A3           INC       DPTR
   \   0000CA   E9           MOV       A,R1
   \   0000CB   F0           MOVX      @DPTR,A
   \   0000CC   801E         SJMP      ??MT_AfDataRetrieve_8
    874                }
    875                else
    876                {
    877                  pPrev->next = pItem->next;
   \                     ??MT_AfDataRetrieve_7:
   \   0000CE   85..82       MOV       DPL,?V8
   \   0000D1   85..83       MOV       DPH,?V9
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   FA           MOV       R2,A
   \   0000D6   A3           INC       DPTR
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   FB           MOV       R3,A
   \   0000D9   85..82       MOV       DPL,?XSP + 0
   \   0000DC   85..83       MOV       DPH,?XSP + 1
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   F8           MOV       R0,A
   \   0000E1   A3           INC       DPTR
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   F583         MOV       DPH,A
   \   0000E5   8882         MOV       DPL,R0
   \   0000E7   EA           MOV       A,R2
   \   0000E8   F0           MOVX      @DPTR,A
   \   0000E9   A3           INC       DPTR
   \   0000EA   EB           MOV       A,R3
   \   0000EB   F0           MOVX      @DPTR,A
    878                }
    879                (void)osal_mem_free(pItem);
   \                     ??MT_AfDataRetrieve_8:
   \   0000EC                ; Setup parameters for call to function osal_mem_free
   \   0000EC   AA..         MOV       R2,?V8
   \   0000EE   AB..         MOV       R3,?V9
   \   0000F0   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    880                rtrn = afStatus_SUCCESS;
   \   0000F3   7F00         MOV       R7,#0x0
   \   0000F5   02....       LJMP      ??MT_AfDataRetrieve_3 & 0xFFFF
    881              }
    882              else if ((pRsp = osal_mem_alloc(len + MT_AF_RTV_HDR_SZ)) == NULL)
   \                     ??MT_AfDataRetrieve_5:
   \   0000F8                ; Setup parameters for call to function osal_mem_alloc
   \   0000F8   EE           MOV       A,R6
   \   0000F9   F8           MOV       R0,A
   \   0000FA   7900         MOV       R1,#0x0
   \   0000FC   E8           MOV       A,R0
   \   0000FD   2402         ADD       A,#0x2
   \   0000FF   FA           MOV       R2,A
   \   000100   E4           CLR       A
   \   000101   39           ADDC      A,R1
   \   000102   FB           MOV       R3,A
   \   000103   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000106   8A..         MOV       ?V0,R2
   \   000108   8B..         MOV       ?V1,R3
   \   00010A   85....       MOV       ?V12,?V0
   \   00010D   85....       MOV       ?V13,?V1
   \   000110   E5..         MOV       A,?V12
   \   000112   45..         ORL       A,?V13
   \   000114   7006         JNZ       ??MT_AfDataRetrieve_9
    883              {
    884                rtrn = afStatus_MEM_FAIL;
   \   000116   7F10         MOV       R7,#0x10
    885                len = 0;
   \   000118   7E00         MOV       R6,#0x0
   \   00011A   8068         SJMP      ??MT_AfDataRetrieve_3
    886              }
    887              else
    888              {
    889                pRsp[0] = ZSuccess;
   \                     ??MT_AfDataRetrieve_9:
   \   00011C   85..82       MOV       DPL,?V12
   \   00011F   85..83       MOV       DPH,?V13
   \   000122   7400         MOV       A,#0x0
   \   000124   F0           MOVX      @DPTR,A
    890                pRsp[1] = len;
   \   000125   EE           MOV       A,R6
   \   000126   C0E0         PUSH      A
   \   000128   85..82       MOV       DPL,?V12
   \   00012B   85..83       MOV       DPH,?V13
   \   00012E   A3           INC       DPTR
   \   00012F   D0E0         POP       A
   \   000131   F0           MOVX      @DPTR,A
    891                (void)osal_memcpy(pRsp + MT_AF_RTV_HDR_SZ, pItem->data+idx, len);
   \   000132                ; Setup parameters for call to function osal_memcpy
   \   000132   85..82       MOV       DPL,?V8
   \   000135   85..83       MOV       DPH,?V9
   \   000138   A3           INC       DPTR
   \   000139   A3           INC       DPTR
   \   00013A   E0           MOVX      A,@DPTR
   \   00013B   25..         ADD       A,?V14
   \   00013D   F5..         MOV       ?V0,A
   \   00013F   A3           INC       DPTR
   \   000140   E0           MOVX      A,@DPTR
   \   000141   35..         ADDC      A,?V15
   \   000143   F5..         MOV       ?V1,A
   \   000145   75..00       MOV       ?V2,#0x0
   \   000148   78..         MOV       R0,#?V0
   \   00014A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00014D   EE           MOV       A,R6
   \   00014E   FC           MOV       R4,A
   \   00014F   7D00         MOV       R5,#0x0
   \   000151   E5..         MOV       A,?V12
   \   000153   2402         ADD       A,#0x2
   \   000155   FA           MOV       R2,A
   \   000156   E4           CLR       A
   \   000157   35..         ADDC      A,?V13
   \   000159   FB           MOV       R3,A
   \   00015A   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00015D   7403         MOV       A,#0x3
   \   00015F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000162   8A..         MOV       ?V0,R2
   \   000164   8B..         MOV       ?V1,R3
   \   000166   85....       MOV       ?V2,?V0
   \   000169   85....       MOV       ?V3,?V1
    892                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    893                                                     MT_AF_DATA_RETRIEVE, len + MT_AF_RTV_HDR_SZ, pRsp);
   \   00016C                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00016C   AC..         MOV       R4,?V12
   \   00016E   AD..         MOV       R5,?V13
   \   000170   7402         MOV       A,#0x2
   \   000172   2E           ADD       A,R6
   \   000173   FB           MOV       R3,A
   \   000174   7A12         MOV       R2,#0x12
   \   000176   7964         MOV       R1,#0x64
   \   000178   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    894                (void)osal_mem_free(pRsp);
   \   00017B                ; Setup parameters for call to function osal_mem_free
   \   00017B   AA..         MOV       R2,?V12
   \   00017D   AB..         MOV       R3,?V13
   \   00017F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    895                return;
   \   000182   8026         SJMP      ??MT_AfDataRetrieve_10
    896              }
    897            }
    898          
    899            pBuf[0] = rtrn;
   \                     ??MT_AfDataRetrieve_3:
   \   000184   EF           MOV       A,R7
   \   000185   C0E0         PUSH      A
   \   000187   85..82       MOV       DPL,?V10
   \   00018A   85..83       MOV       DPH,?V11
   \   00018D   D0E0         POP       A
   \   00018F   F0           MOVX      @DPTR,A
    900            pBuf[1] = len;
   \   000190   EE           MOV       A,R6
   \   000191   C0E0         PUSH      A
   \   000193   85..82       MOV       DPL,?V10
   \   000196   85..83       MOV       DPH,?V11
   \   000199   A3           INC       DPTR
   \   00019A   D0E0         POP       A
   \   00019C   F0           MOVX      @DPTR,A
    901            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    902                                                 MT_AF_DATA_RETRIEVE, MT_AF_RTV_HDR_SZ, pBuf);
   \   00019D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00019D   AC..         MOV       R4,?V10
   \   00019F   AD..         MOV       R5,?V11
   \   0001A1   7B02         MOV       R3,#0x2
   \   0001A3   7A12         MOV       R2,#0x12
   \   0001A5   7964         MOV       R1,#0x64
   \   0001A7   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    903          }
   \                     ??MT_AfDataRetrieve_10:
   \   0001AA   7402         MOV       A,#0x2
   \   0001AC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001AF   7F10         MOV       R7,#0x10
   \   0001B1   02....       LJMP      ?BANKED_LEAVE_XDATA
    904          
    905          /**************************************************************************************************
    906           * @fn          MT_AfDataStore
    907           *
    908           * @brief   Process AF Data Store command to incrementally store the data buffer for very large
    909           *          outgoing AF message.
    910           *
    911           * input parameters
    912           *
    913           * @param pBuf - pointer to the received buffer
    914           *
    915           * output parameters
    916           *
    917           * @param rtrn - AF-Status of the operation.
    918           *
    919           * @return      None.
    920           **************************************************************************************************
    921           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    922          static void MT_AfDataStore(uint8 *pBuf)
   \                     MT_AfDataStore:
    923          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    924            uint16 idx;
    925            uint8 len, rtrn = afStatus_FAILED;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   7401         MOV       A,#0x1
   \   000016   F0           MOVX      @DPTR,A
    926          
    927            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV       A,R6
   \   000018   2403         ADD       A,#0x3
   \   00001A   FE           MOV       R6,A
   \   00001B   5001         JNC       ??MT_AfDataStore_0
   \   00001D   0F           INC       R7
    928            idx = osal_build_uint16( pBuf );
   \                     ??MT_AfDataStore_0:
   \   00001E                ; Setup parameters for call to function osal_build_uint16
   \   00001E   EE           MOV       A,R6
   \   00001F   FA           MOV       R2,A
   \   000020   EF           MOV       A,R7
   \   000021   FB           MOV       R3,A
   \   000022   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000025   8A..         MOV       ?V4,R2
   \   000027   8B..         MOV       ?V5,R3
   \   000029   85....       MOV       ?V2,?V4
   \   00002C   85....       MOV       ?V3,?V5
    929            len = pBuf[2];
   \   00002F   8E82         MOV       DPL,R6
   \   000031   8F83         MOV       DPH,R7
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   F5..         MOV       ?V0,A
    930            pBuf += 3;
   \   000038   EE           MOV       A,R6
   \   000039   2403         ADD       A,#0x3
   \   00003B   FE           MOV       R6,A
   \   00003C   5001         JNC       ??MT_AfDataStore_1
   \   00003E   0F           INC       R7
    931          
    932            if (pMtAfDataReq == NULL)
   \                     ??MT_AfDataStore_1:
   \   00003F   90....       MOV       DPTR,#pMtAfDataReq
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F8           MOV       R0,A
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F9           MOV       R1,A
   \   000047   E8           MOV       A,R0
   \   000048   49           ORL       A,R1
   \   000049   700C         JNZ       ??MT_AfDataStore_2
    933            {
    934              rtrn = afStatus_MEM_FAIL;
   \   00004B   85..82       MOV       DPL,?XSP + 0
   \   00004E   85..83       MOV       DPH,?XSP + 1
   \   000051   7410         MOV       A,#0x10
   \   000053   F0           MOVX      @DPTR,A
   \   000054   02....       LJMP      ??MT_AfDataStore_3 & 0xFFFF
    935            }
    936            else if (len == 0)  // Indication to send the message.
   \                     ??MT_AfDataStore_2:
   \   000057   E5..         MOV       A,?V0
   \   000059   6003         JZ        $+5
   \   00005B   02....       LJMP      ??MT_AfDataStore_4 & 0xFFFF
    937            {
    938              rtrn = AF_DataRequest(&(pMtAfDataReq->dstAddr), pMtAfDataReq->epDesc, pMtAfDataReq->cId,
    939                                      pMtAfDataReq->dataLen,  pMtAfDataReq->data,
    940                                    &(pMtAfDataReq->transId), pMtAfDataReq->txOpts, pMtAfDataReq->radius);
   \   00005E                ; Setup parameters for call to function AF_DataRequest
   \   00005E   90....       MOV       DPTR,#pMtAfDataReq
   \   000061   E0           MOVX      A,@DPTR
   \   000062   F8           MOV       R0,A
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   C8           XCH       A,R0
   \   000066   2416         ADD       A,#0x16
   \   000068   F582         MOV       DPL,A
   \   00006A   C8           XCH       A,R0
   \   00006B   3400         ADDC      A,#0x0
   \   00006D   F583         MOV       DPH,A
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   F5..         MOV       ?V1,A
   \   000072   78..         MOV       R0,#?V1
   \   000074   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000077   90....       MOV       DPTR,#pMtAfDataReq
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   2414         ADD       A,#0x14
   \   00007D   F5..         MOV       ?V4,A
   \   00007F   A3           INC       DPTR
   \   000080   E0           MOVX      A,@DPTR
   \   000081   3400         ADDC      A,#0x0
   \   000083   F5..         MOV       ?V5,A
   \   000085   78..         MOV       R0,#?V4
   \   000087   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008A   90....       MOV       DPTR,#pMtAfDataReq
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   F8           MOV       R0,A
   \   00008F   A3           INC       DPTR
   \   000090   E0           MOVX      A,@DPTR
   \   000091   F583         MOV       DPH,A
   \   000093   8882         MOV       DPL,R0
   \   000095   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000098   90....       MOV       DPTR,#pMtAfDataReq
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   F8           MOV       R0,A
   \   00009D   A3           INC       DPTR
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   C8           XCH       A,R0
   \   0000A0   2412         ADD       A,#0x12
   \   0000A2   F582         MOV       DPL,A
   \   0000A4   C8           XCH       A,R0
   \   0000A5   3400         ADDC      A,#0x0
   \   0000A7   F583         MOV       DPH,A
   \   0000A9   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000AC   90....       MOV       DPTR,#pMtAfDataReq
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   F8           MOV       R0,A
   \   0000B1   A3           INC       DPTR
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   C8           XCH       A,R0
   \   0000B4   2410         ADD       A,#0x10
   \   0000B6   F582         MOV       DPL,A
   \   0000B8   C8           XCH       A,R0
   \   0000B9   3400         ADDC      A,#0x0
   \   0000BB   F583         MOV       DPH,A
   \   0000BD   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000C0   90....       MOV       DPTR,#pMtAfDataReq
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   F8           MOV       R0,A
   \   0000C5   A3           INC       DPTR
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   C8           XCH       A,R0
   \   0000C8   2415         ADD       A,#0x15
   \   0000CA   F582         MOV       DPL,A
   \   0000CC   C8           XCH       A,R0
   \   0000CD   3400         ADDC      A,#0x0
   \   0000CF   F583         MOV       DPH,A
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   F9           MOV       R1,A
   \   0000D3   90....       MOV       DPTR,#pMtAfDataReq
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   F8           MOV       R0,A
   \   0000D8   A3           INC       DPTR
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   C8           XCH       A,R0
   \   0000DB   240E         ADD       A,#0xe
   \   0000DD   F582         MOV       DPL,A
   \   0000DF   C8           XCH       A,R0
   \   0000E0   3400         ADDC      A,#0x0
   \   0000E2   F583         MOV       DPH,A
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   FC           MOV       R4,A
   \   0000E6   A3           INC       DPTR
   \   0000E7   E0           MOVX      A,@DPTR
   \   0000E8   FD           MOV       R5,A
   \   0000E9   90....       MOV       DPTR,#pMtAfDataReq
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   2402         ADD       A,#0x2
   \   0000EF   FA           MOV       R2,A
   \   0000F0   A3           INC       DPTR
   \   0000F1   E0           MOVX      A,@DPTR
   \   0000F2   3400         ADDC      A,#0x0
   \   0000F4   FB           MOV       R3,A
   \   0000F5   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000F8   7409         MOV       A,#0x9
   \   0000FA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000FD   E9           MOV       A,R1
   \   0000FE   C0E0         PUSH      A
   \   000100   85..82       MOV       DPL,?XSP + 0
   \   000103   85..83       MOV       DPH,?XSP + 1
   \   000106   D0E0         POP       A
   \   000108   F0           MOVX      @DPTR,A
    941              (void)osal_mem_free(pMtAfDataReq);
   \   000109                ; Setup parameters for call to function osal_mem_free
   \   000109   90....       MOV       DPTR,#pMtAfDataReq
   \   00010C   E0           MOVX      A,@DPTR
   \   00010D   FA           MOV       R2,A
   \   00010E   A3           INC       DPTR
   \   00010F   E0           MOVX      A,@DPTR
   \   000110   FB           MOV       R3,A
   \   000111   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    942              pMtAfDataReq = NULL;
   \   000114   90....       MOV       DPTR,#pMtAfDataReq
   \   000117   7400         MOV       A,#0x0
   \   000119   F0           MOVX      @DPTR,A
   \   00011A   A3           INC       DPTR
   \   00011B   7400         MOV       A,#0x0
   \   00011D   F0           MOVX      @DPTR,A
   \   00011E   803E         SJMP      ??MT_AfDataStore_3
    943            }
    944            else
    945            {
    946              (void)osal_memcpy(pMtAfDataReq->data+idx, pBuf, len);
   \                     ??MT_AfDataStore_4:
   \   000120                ; Setup parameters for call to function osal_memcpy
   \   000120   8E..         MOV       ?V4,R6
   \   000122   8F..         MOV       ?V5,R7
   \   000124   75..00       MOV       ?V6,#0x0
   \   000127   78..         MOV       R0,#?V4
   \   000129   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00012C   E5..         MOV       A,?V0
   \   00012E   FC           MOV       R4,A
   \   00012F   7D00         MOV       R5,#0x0
   \   000131   90....       MOV       DPTR,#pMtAfDataReq
   \   000134   E0           MOVX      A,@DPTR
   \   000135   F8           MOV       R0,A
   \   000136   A3           INC       DPTR
   \   000137   E0           MOVX      A,@DPTR
   \   000138   F583         MOV       DPH,A
   \   00013A   8882         MOV       DPL,R0
   \   00013C   E0           MOVX      A,@DPTR
   \   00013D   25..         ADD       A,?V2
   \   00013F   FA           MOV       R2,A
   \   000140   A3           INC       DPTR
   \   000141   E0           MOVX      A,@DPTR
   \   000142   35..         ADDC      A,?V3
   \   000144   FB           MOV       R3,A
   \   000145   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000148   7403         MOV       A,#0x3
   \   00014A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00014D   8A..         MOV       ?V4,R2
   \   00014F   8B..         MOV       ?V5,R3
   \   000151   A8..         MOV       R0,?V4
   \   000153   A9..         MOV       R1,?V5
    947              rtrn = afStatus_SUCCESS;
   \   000155   85..82       MOV       DPL,?XSP + 0
   \   000158   85..83       MOV       DPH,?XSP + 1
   \   00015B   7400         MOV       A,#0x0
   \   00015D   F0           MOVX      @DPTR,A
    948            }
    949          
    950            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    951                                                                          MT_AF_DATA_STORE, 1, &rtrn);
   \                     ??MT_AfDataStore_3:
   \   00015E                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00015E   AC..         MOV       R4,?XSP + 0
   \   000160   AD..         MOV       R5,?XSP + 1
   \   000162   7B01         MOV       R3,#0x1
   \   000164   7A11         MOV       R2,#0x11
   \   000166   7964         MOV       R1,#0x64
   \   000168   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    952          }
   \   00016B   7401         MOV       A,#0x1
   \   00016D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000170   7F07         MOV       R7,#0x7
   \   000172   02....       LJMP      ?BANKED_LEAVE_XDATA
    953          
    954          /**************************************************************************************************
    955           * @fn          MT_AfAPSF_ConfigSet
    956           *
    957           * @brief       This function is the MT proxy for afAPSF_ConfigSet().
    958           *
    959           * input parameters
    960           *
    961           * @param       pBuf - Pointer to the received buffer.
    962           *
    963           * output parameters
    964           *
    965           * None.
    966           *
    967           * @return      None.
    968           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    969          static void MT_AfAPSF_ConfigSet(uint8 *pBuf)
   \                     MT_AfAPSF_ConfigSet:
    970          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    971            afAPSF_Config_t cfg = { pBuf[MT_RPC_POS_DAT0+1], pBuf[MT_RPC_POS_DAT0+2] };
   \   00000E   8E82         MOV       DPL,R6
   \   000010   8F83         MOV       DPH,R7
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   C0E0         PUSH      A
   \   000019   7401         MOV       A,#0x1
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   D0E0         POP       A
   \   000020   F0           MOVX      @DPTR,A
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   C0E0         PUSH      A
   \   00002D   7402         MOV       A,#0x2
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   D0E0         POP       A
   \   000034   F0           MOVX      @DPTR,A
    972            afStatus_t rtrn = afAPSF_ConfigSet(pBuf[MT_RPC_POS_DAT0], &cfg);
   \   000035                ; Setup parameters for call to function afAPSF_ConfigSet
   \   000035   7401         MOV       A,#0x1
   \   000037   12....       LCALL     ?XSTACK_DISP101_8
   \   00003A   8E82         MOV       DPL,R6
   \   00003C   8F83         MOV       DPH,R7
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F9           MOV       R1,A
   \   000043   12....       LCALL     `??afAPSF_ConfigSet::?relay`; Banked call to: afAPSF_ConfigSet
   \   000046   E9           MOV       A,R1
   \   000047   C0E0         PUSH      A
   \   000049   85..82       MOV       DPL,?XSP + 0
   \   00004C   85..83       MOV       DPH,?XSP + 1
   \   00004F   D0E0         POP       A
   \   000051   F0           MOVX      @DPTR,A
    973          
    974            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    975                                                 MT_AF_APSF_CONFIG_SET, 1, (uint8 *)&rtrn);
   \   000052                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000052   AC..         MOV       R4,?XSP + 0
   \   000054   AD..         MOV       R5,?XSP + 1
   \   000056   7B01         MOV       R3,#0x1
   \   000058   7A13         MOV       R2,#0x13
   \   00005A   7964         MOV       R1,#0x64
   \   00005C   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    976          }
   \   00005F   7403         MOV       A,#0x3
   \   000061   12....       LCALL     ?DEALLOC_XSTACK8
   \   000064   7F01         MOV       R7,#0x1
   \   000066   02....       LJMP      ?BANKED_LEAVE_XDATA
    977          
    978          /**************************************************************************************************
    979           * @fn          MT_AfAPSF_ConfigGet
    980           *
    981           * @brief       This function is the MT proxy for afAPSF_ConfigGet().
    982           *
    983           * input parameters
    984           *
    985           * @param       pBuf - Pointer to the received buffer.
    986           *
    987           * output parameters
    988           *
    989           * None.
    990           *
    991           * @return      None.
    992           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    993          static void MT_AfAPSF_ConfigGet(uint8 *pBuf)
   \                     MT_AfAPSF_ConfigGet:
    994          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    995            afAPSF_Config_t cfg = { 0, 0 };
   \   00000E   90....       MOV       DPTR,#`?<Constant {0, 0}>`
   \   000011   AC..         MOV       R4,?XSP + 0
   \   000013   AD..         MOV       R5,?XSP + 1
   \   000015   7402         MOV       A,#0x2
   \   000017   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    996            uint8 buf[2];
    997          
    998            afAPSF_ConfigGet( pBuf[MT_RPC_POS_DAT0], &cfg );
   \   00001A                ; Setup parameters for call to function afAPSF_ConfigGet
   \   00001A   AA..         MOV       R2,?XSP + 0
   \   00001C   AB..         MOV       R3,?XSP + 1
   \   00001E   8E82         MOV       DPL,R6
   \   000020   8F83         MOV       DPH,R7
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F9           MOV       R1,A
   \   000027   12....       LCALL     `??afAPSF_ConfigGet::?relay`; Banked call to: afAPSF_ConfigGet
    999          
   1000            buf[0] = cfg.frameDelay;
   \   00002A   85..82       MOV       DPL,?XSP + 0
   \   00002D   85..83       MOV       DPH,?XSP + 1
   \   000030   E0           MOVX      A,@DPTR
   \   000031   C0E0         PUSH      A
   \   000033   7402         MOV       A,#0x2
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   D0E0         POP       A
   \   00003A   F0           MOVX      @DPTR,A
   1001            buf[1] = cfg.windowSize;
   \   00003B   7401         MOV       A,#0x1
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   E0           MOVX      A,@DPTR
   \   000041   C0E0         PUSH      A
   \   000043   7403         MOV       A,#0x3
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   D0E0         POP       A
   \   00004A   F0           MOVX      @DPTR,A
   1002          
   1003            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
   1004                                                 MT_AF_APSF_CONFIG_GET, 3, buf );
   \   00004B                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00004B   7402         MOV       A,#0x2
   \   00004D   12....       LCALL     ?XSTACK_DISP102_8
   \   000050   7B03         MOV       R3,#0x3
   \   000052   7A14         MOV       R2,#0x14
   \   000054   7964         MOV       R1,#0x64
   \   000056   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1005          }
   \   000059   7404         MOV       A,#0x4
   \   00005B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005E   7F01         MOV       R7,#0x1
   \   000060   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000
   1006          
   1007          /***************************************************************************************************
   1008          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     22   MT_AfAPSF_ConfigGet
        0     13   -> MT_BuildAndSendZToolResponse
        0     13   -> afAPSF_ConfigGet
      1     21   MT_AfAPSF_ConfigSet
        0     12   -> MT_BuildAndSendZToolResponse
        0     12   -> afAPSF_ConfigSet
      0      9   MT_AfCommandProcessing
        0      9   -> MT_AfAPSF_ConfigGet
        0      9   -> MT_AfAPSF_ConfigSet
        0      9   -> MT_AfDataRequest
        0      9   -> MT_AfDataRequestSrcRtg
        0      9   -> MT_AfDataRetrieve
        0      9   -> MT_AfDataStore
        0      9   -> MT_AfDelete
        0      9   -> MT_AfInterPanCtl
        0      9   -> MT_AfRegister
      1     12   MT_AfDataConfirm
        0     12   -> MT_BuildAndSendZToolResponse
      1     57   MT_AfDataRequest
        0     48   -> AF_DataRequest
        0     39   -> MT_BuildAndSendZToolResponse
        0     39   -> afFindEndPointDesc
        0     39   -> osal_build_uint16
        0     39   -> osal_mem_alloc
        0     42   -> osal_memcpy
        0     39   -> osal_set_event
        0     43   -> osal_start_timerEx
      1     59   MT_AfDataRequestSrcRtg
        0     50   -> AF_DataRequestSrcRtg
        0     38   -> MT_BuildAndSendZToolResponse
        0     38   -> afFindEndPointDesc
        0     38   -> osal_build_uint16
        0     38   -> osal_mem_alloc
        0     38   -> osal_mem_free
        0     38   -> osal_memset
      1     38   MT_AfDataRetrieve
        0     26   -> MT_BuildAndSendZToolResponse
        0     26   -> osal_build_uint16
        0     26   -> osal_build_uint32
        0     26   -> osal_mem_alloc
        0     26   -> osal_mem_free
        0     29   -> osal_memcpy
      1     34   MT_AfDataStore
        0     25   -> AF_DataRequest
        0     16   -> MT_BuildAndSendZToolResponse
        0     16   -> osal_build_uint16
        0     16   -> osal_mem_free
        0     19   -> osal_memcpy
      1     19   MT_AfDelete
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> afDelete
      0     14   MT_AfExec
        0     10   -> osal_mem_free
        0     10   -> osal_set_event
        0     14   -> osal_start_timerEx
      1     27   MT_AfIncomingMsg
        0     23   -> MT_BuildAndSendZToolResponse
        0     23   -> StubAPS_InterPan
        0     27   -> osal_buffer_uint32
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     26   -> osal_memcpy
        0     23   -> osal_set_event
        0     27   -> osal_start_timerEx
      1     26   MT_AfInterPanCtl
        0     17   -> MT_BuildAndSendZToolResponse
        0     17   -> StubAPS_InterPan
        0     17   -> StubAPS_RegisterApp
        0     17   -> StubAPS_SetInterPanChannel
        0     17   -> StubAPS_SetIntraPanChannel
        0     17   -> afFindEndPointDesc
        0     17   -> osal_build_uint16
      1     15   MT_AfReflectError
        0     15   -> MT_BuildAndSendZToolResponse
      1     24   MT_AfRegister
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> MT_BuildEndpointDesc
        0     15   -> afRegister
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant {0, 0}>
      99  MT_AfAPSF_ConfigGet
     105  MT_AfAPSF_ConfigSet
     142  MT_AfCommandProcessing
      89  MT_AfDataConfirm
     961  MT_AfDataRequest
     524  MT_AfDataRequestSrcRtg
     436  MT_AfDataRetrieve
     373  MT_AfDataStore
      83  MT_AfDelete
     308  MT_AfExec
    1427  MT_AfIncomingMsg
     246  MT_AfInterPanCtl
     161  MT_AfReflectError
     166  MT_AfRegister
       4  __Constant_3e8
       2  pMtAfDataReq
       2  pMtAfInMsgList
      84  -- Other

 
 5 120 bytes in segment BANKED_CODE
    84 bytes in segment BANK_RELAYS
     6 bytes in segment XDATA_ROM_C
     4 bytes in segment XDATA_Z
 
    84 bytes of CODE     memory
     2 bytes of CONST    memory (+ 4 bytes shared)
 5 120 bytes of HUGECODE memory
     4 bytes of XDATA    memory

Errors: none
Warnings: none
