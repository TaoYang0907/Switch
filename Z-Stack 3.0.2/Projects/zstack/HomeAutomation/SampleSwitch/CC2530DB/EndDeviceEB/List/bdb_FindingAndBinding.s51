///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              05/Aug/2020  22:50:55
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\AA\Z-Stack 3.0.2\Components\stack\bdb\bdb_FindingAndBinding.c
//    Command line       =  
//        -f C:\Users\sunli\AppData\Local\Temp\EWC07.tmp ("D:\AA\Z-Stack
//        3.0.2\Components\stack\bdb\bdb_FindingAndBinding.c" -D SECURE=1 -D
//        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D POWER_SAVING -D
//        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D
//        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
//        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
//        -D ZCL_GROUPS -D BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
//        -lA "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=0 -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0
//        -DREJOIN_POLL_RATE=0 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
//        "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -On --require_prototypes --no_cse --no_unroll --no_inline
//        --no_code_motion --no_tbaa --no_cross_call)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\bdb_FindingAndBinding.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME bdb_FindingAndBinding

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_X
        EXTERN ?L_MOV_X
        EXTERN ?L_MUL
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_DIV_MOD
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??bdb_FindIfAppCluster::?relay`
        FUNCTION `??bdb_FindIfAppCluster::?relay`,0203H
        PUBLIC `??bdb_GetFBInitiatorStatus::?relay`
        FUNCTION `??bdb_GetFBInitiatorStatus::?relay`,0203H
        PUBLIC `??bdb_ProcessIEEEAddrRsp::?relay`
        FUNCTION `??bdb_ProcessIEEEAddrRsp::?relay`,0203H
        PUBLIC `??bdb_ProcessRespondentList::?relay`
        FUNCTION `??bdb_ProcessRespondentList::?relay`,0203H
        PUBLIC `??bdb_ProcessSimpleDesc::?relay`
        FUNCTION `??bdb_ProcessSimpleDesc::?relay`,0203H
        PUBLIC `??bdb_RegisterBindNotificationCB::?relay`
        FUNCTION `??bdb_RegisterBindNotificationCB::?relay`,0203H
        PUBLIC `??bdb_RegisterIdentifyTimeChangeCB::?relay`
        FUNCTION `??bdb_RegisterIdentifyTimeChangeCB::?relay`,0203H
        PUBLIC `??bdb_SendIdentifyQuery::?relay`
        FUNCTION `??bdb_SendIdentifyQuery::?relay`,0203H
        PUBLIC `??bdb_SetIdentifyActiveEndpoint::?relay`
        FUNCTION `??bdb_SetIdentifyActiveEndpoint::?relay`,0203H
        PUBLIC `??bdb_StopInitiatorFindingBinding::?relay`
        FUNCTION `??bdb_StopInitiatorFindingBinding::?relay`,0203H
        PUBLIC `??bdb_ZclIdentifyQueryCmdInd::?relay`
        FUNCTION `??bdb_ZclIdentifyQueryCmdInd::?relay`,0203H
        PUBLIC `??bdb_checkMatchingEndpoints::?relay`
        FUNCTION `??bdb_checkMatchingEndpoints::?relay`,0203H
        PUBLIC `??bdb_exitFindingBindingWStatus::?relay`
        FUNCTION `??bdb_exitFindingBindingWStatus::?relay`,0203H
        PUBLIC `??bdb_findRespondentNode::?relay`
        FUNCTION `??bdb_findRespondentNode::?relay`,0203H
        PUBLIC `??bdb_getRespondentRetry::?relay`
        FUNCTION `??bdb_getRespondentRetry::?relay`,0203H
        PUBLIC `??bdb_setEpDescListToActiveEndpoint::?relay`
        FUNCTION `??bdb_setEpDescListToActiveEndpoint::?relay`,0203H
        FUNCTION `??bdb_zclFindingBindingAddBindEntry::?relay`,0203H
        PUBLIC `??bdb_zclFindingBindingEpType::?relay`
        FUNCTION `??bdb_zclFindingBindingEpType::?relay`,0203H
        FUNCTION `??bdb_zclSimpleDescClusterListClean::?relay`,0203H
        PUBWEAK __Constant_2710
        PUBWEAK __Constant_3
        PUBWEAK __Constant_3e7
        PUBWEAK __Constant_3e8
        PUBLIC bdbIndentifyActiveEndpoint
        PUBLIC bdb_FindIfAppCluster
        FUNCTION bdb_FindIfAppCluster,0203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bdb_FindingBindingTargetSimpleDesc
        PUBLIC bdb_GetFBInitiatorStatus
        FUNCTION bdb_GetFBInitiatorStatus,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC bdb_ProcessIEEEAddrRsp
        FUNCTION bdb_ProcessIEEEAddrRsp,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC bdb_ProcessRespondentList
        FUNCTION bdb_ProcessRespondentList,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC bdb_ProcessSimpleDesc
        FUNCTION bdb_ProcessSimpleDesc,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        PUBLIC bdb_RegisterBindNotificationCB
        FUNCTION bdb_RegisterBindNotificationCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_RegisterIdentifyTimeChangeCB
        FUNCTION bdb_RegisterIdentifyTimeChangeCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_SendIdentifyQuery
        FUNCTION bdb_SendIdentifyQuery,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC bdb_SetIdentifyActiveEndpoint
        FUNCTION bdb_SetIdentifyActiveEndpoint,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_StopInitiatorFindingBinding
        FUNCTION bdb_StopInitiatorFindingBinding,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_ZclIdentifyQueryCmdInd
        FUNCTION bdb_ZclIdentifyQueryCmdInd,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bdb_ZclType1Clusters
        PUBLIC bdb_ZclType2Clusters
        PUBLIC bdb_checkMatchingEndpoints
        FUNCTION bdb_checkMatchingEndpoints,0a1203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 45, STACK
        PUBLIC bdb_exitFindingBindingWStatus
        FUNCTION bdb_exitFindingBindingWStatus,021203H
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bdb_findRespondentNode
        FUNCTION bdb_findRespondentNode,0203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bdb_getRespondentRetry
        FUNCTION bdb_getRespondentRetry,0203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_setEpDescListToActiveEndpoint
        FUNCTION bdb_setEpDescListToActiveEndpoint,0203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION bdb_zclFindingBindingAddBindEntry,0a1203H
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC bdb_zclFindingBindingEpType
        FUNCTION bdb_zclFindingBindingEpType,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        FUNCTION bdb_zclSimpleDescClusterListClean,021203H
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC grpName
        PUBLIC pfnBindNotificationCB
        PUBLIC pfnIdentifyTimeChangeCB
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
AddrMgrEntryUpdate  SYMBOL "AddrMgrEntryUpdate"
`??AddrMgrEntryUpdate::?relay` SYMBOL "?relay", AddrMgrEntryUpdate
AddrMgrExtAddrLookup SYMBOL "AddrMgrExtAddrLookup"
`??AddrMgrExtAddrLookup::?relay` SYMBOL "?relay", AddrMgrExtAddrLookup
AddrMgrExtAddrSet   SYMBOL "AddrMgrExtAddrSet"
`??AddrMgrExtAddrSet::?relay` SYMBOL "?relay", AddrMgrExtAddrSet
ZDO_AnyClusterMatches SYMBOL "ZDO_AnyClusterMatches"
`??ZDO_AnyClusterMatches::?relay` SYMBOL "?relay", ZDO_AnyClusterMatches
ZDO_ParseAddrRsp    SYMBOL "ZDO_ParseAddrRsp"
`??ZDO_ParseAddrRsp::?relay` SYMBOL "?relay", ZDO_ParseAddrRsp
ZDO_ParseSimpleDescBuf SYMBOL "ZDO_ParseSimpleDescBuf"
`??ZDO_ParseSimpleDescBuf::?relay` SYMBOL "?relay", ZDO_ParseSimpleDescBuf
ZDP_IEEEAddrReq     SYMBOL "ZDP_IEEEAddrReq"
`??ZDP_IEEEAddrReq::?relay` SYMBOL "?relay", ZDP_IEEEAddrReq
ZDP_SimpleDescReq   SYMBOL "ZDP_SimpleDescReq"
`??ZDP_SimpleDescReq::?relay` SYMBOL "?relay", ZDP_SimpleDescReq
bdb_AddRespondentNode SYMBOL "bdb_AddRespondentNode"
`??bdb_AddRespondentNode::?relay` SYMBOL "?relay", bdb_AddRespondentNode
bdb_getZCLFrameCounter SYMBOL "bdb_getZCLFrameCounter"
`??bdb_getZCLFrameCounter::?relay` SYMBOL "?relay", bdb_getZCLFrameCounter
bdb_reportCommissioningState SYMBOL "bdb_reportCommissioningState"
`??bdb_reportCommissioningState::?relay` SYMBOL "?relay", bdb_reportCommissioningState
bdb_zclRespondentListClean SYMBOL "bdb_zclRespondentListClean"
`??bdb_zclRespondentListClean::?relay` SYMBOL "?relay", bdb_zclRespondentListClean
osal_get_timeoutEx  SYMBOL "osal_get_timeoutEx"
`??osal_get_timeoutEx::?relay` SYMBOL "?relay", osal_get_timeoutEx
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
zclGeneral_SendAddGroupRequest SYMBOL "zclGeneral_SendAddGroupRequest"
`??zclGeneral_SendAddGroupRequest::?relay` SYMBOL "?relay", zclGeneral_SendAddGroupRequest
zcl_SendCommand     SYMBOL "zcl_SendCommand"
`??zcl_SendCommand::?relay` SYMBOL "?relay", zcl_SendCommand
zcl_registerClusterOptionList SYMBOL "zcl_registerClusterOptionList"
`??zcl_registerClusterOptionList::?relay` SYMBOL "?relay", zcl_registerClusterOptionList
bdb_FindIfAppCluster SYMBOL "bdb_FindIfAppCluster"
`??bdb_FindIfAppCluster::?relay` SYMBOL "?relay", bdb_FindIfAppCluster
bdb_GetFBInitiatorStatus SYMBOL "bdb_GetFBInitiatorStatus"
`??bdb_GetFBInitiatorStatus::?relay` SYMBOL "?relay", bdb_GetFBInitiatorStatus
bdb_ProcessIEEEAddrRsp SYMBOL "bdb_ProcessIEEEAddrRsp"
`??bdb_ProcessIEEEAddrRsp::?relay` SYMBOL "?relay", bdb_ProcessIEEEAddrRsp
bdb_ProcessRespondentList SYMBOL "bdb_ProcessRespondentList"
`??bdb_ProcessRespondentList::?relay` SYMBOL "?relay", bdb_ProcessRespondentList
bdb_ProcessSimpleDesc SYMBOL "bdb_ProcessSimpleDesc"
`??bdb_ProcessSimpleDesc::?relay` SYMBOL "?relay", bdb_ProcessSimpleDesc
bdb_RegisterBindNotificationCB SYMBOL "bdb_RegisterBindNotificationCB"
`??bdb_RegisterBindNotificationCB::?relay` SYMBOL "?relay", bdb_RegisterBindNotificationCB
bdb_RegisterIdentifyTimeChangeCB SYMBOL "bdb_RegisterIdentifyTimeChangeCB"
`??bdb_RegisterIdentifyTimeChangeCB::?relay` SYMBOL "?relay", bdb_RegisterIdentifyTimeChangeCB
bdb_SendIdentifyQuery SYMBOL "bdb_SendIdentifyQuery"
`??bdb_SendIdentifyQuery::?relay` SYMBOL "?relay", bdb_SendIdentifyQuery
bdb_SetIdentifyActiveEndpoint SYMBOL "bdb_SetIdentifyActiveEndpoint"
`??bdb_SetIdentifyActiveEndpoint::?relay` SYMBOL "?relay", bdb_SetIdentifyActiveEndpoint
bdb_StopInitiatorFindingBinding SYMBOL "bdb_StopInitiatorFindingBinding"
`??bdb_StopInitiatorFindingBinding::?relay` SYMBOL "?relay", bdb_StopInitiatorFindingBinding
bdb_ZclIdentifyQueryCmdInd SYMBOL "bdb_ZclIdentifyQueryCmdInd"
`??bdb_ZclIdentifyQueryCmdInd::?relay` SYMBOL "?relay", bdb_ZclIdentifyQueryCmdInd
bdb_checkMatchingEndpoints SYMBOL "bdb_checkMatchingEndpoints"
`??bdb_checkMatchingEndpoints::?relay` SYMBOL "?relay", bdb_checkMatchingEndpoints
bdb_exitFindingBindingWStatus SYMBOL "bdb_exitFindingBindingWStatus"
`??bdb_exitFindingBindingWStatus::?relay` SYMBOL "?relay", bdb_exitFindingBindingWStatus
bdb_findRespondentNode SYMBOL "bdb_findRespondentNode"
`??bdb_findRespondentNode::?relay` SYMBOL "?relay", bdb_findRespondentNode
bdb_getRespondentRetry SYMBOL "bdb_getRespondentRetry"
`??bdb_getRespondentRetry::?relay` SYMBOL "?relay", bdb_getRespondentRetry
bdb_setEpDescListToActiveEndpoint SYMBOL "bdb_setEpDescListToActiveEndpoint"
`??bdb_setEpDescListToActiveEndpoint::?relay` SYMBOL "?relay", bdb_setEpDescListToActiveEndpoint
bdb_zclFindingBindingEpType SYMBOL "bdb_zclFindingBindingEpType"
`??bdb_zclFindingBindingEpType::?relay` SYMBOL "?relay", bdb_zclFindingBindingEpType

        EXTERN `??AddrMgrEntryUpdate::?relay`
        FUNCTION `??AddrMgrEntryUpdate::?relay`,00H
        EXTERN `??AddrMgrExtAddrLookup::?relay`
        FUNCTION `??AddrMgrExtAddrLookup::?relay`,00H
        EXTERN `??AddrMgrExtAddrSet::?relay`
        FUNCTION `??AddrMgrExtAddrSet::?relay`,00H
        EXTERN `??ZDO_AnyClusterMatches::?relay`
        FUNCTION `??ZDO_AnyClusterMatches::?relay`,00H
        EXTERN `??ZDO_ParseAddrRsp::?relay`
        FUNCTION `??ZDO_ParseAddrRsp::?relay`,00H
        EXTERN `??ZDO_ParseSimpleDescBuf::?relay`
        FUNCTION `??ZDO_ParseSimpleDescBuf::?relay`,00H
        EXTERN `??ZDP_IEEEAddrReq::?relay`
        FUNCTION `??ZDP_IEEEAddrReq::?relay`,00H
        EXTERN `??ZDP_SimpleDescReq::?relay`
        FUNCTION `??ZDP_SimpleDescReq::?relay`,00H
        EXTERN `??bdb_AddRespondentNode::?relay`
        FUNCTION `??bdb_AddRespondentNode::?relay`,00H
        EXTERN `??bdb_getZCLFrameCounter::?relay`
        FUNCTION `??bdb_getZCLFrameCounter::?relay`,00H
        EXTERN `??bdb_reportCommissioningState::?relay`
        FUNCTION `??bdb_reportCommissioningState::?relay`,00H
        EXTERN `??bdb_zclRespondentListClean::?relay`
        FUNCTION `??bdb_zclRespondentListClean::?relay`,00H
        EXTERN `??osal_get_timeoutEx::?relay`
        FUNCTION `??osal_get_timeoutEx::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??zclGeneral_SendAddGroupRequest::?relay`
        FUNCTION `??zclGeneral_SendAddGroupRequest::?relay`,00H
        EXTERN `??zcl_SendCommand::?relay`
        FUNCTION `??zcl_SendCommand::?relay`,00H
        EXTERN `??zcl_registerClusterOptionList::?relay`
        FUNCTION `??zcl_registerClusterOptionList::?relay`,00H
        EXTERN AddrMgrEntryUpdate
        FUNCTION AddrMgrEntryUpdate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrLookup
        FUNCTION AddrMgrExtAddrLookup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrSet
        FUNCTION AddrMgrExtAddrSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_AnyClusterMatches
        FUNCTION ZDO_AnyClusterMatches,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseAddrRsp
        FUNCTION ZDO_ParseAddrRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseSimpleDescBuf
        FUNCTION ZDO_ParseSimpleDescBuf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_IEEEAddrReq
        FUNCTION ZDP_IEEEAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_SimpleDescReq
        FUNCTION ZDP_SimpleDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdbAttributes
        EXTERN bdbCommissioningProcedureState
        EXTERN bdb_AddRespondentNode
        FUNCTION bdb_AddRespondentNode,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_CurrEpDescriptorList
        EXTERN bdb_FB_InitiatorCurrentCyclesNumber
        EXTERN bdb_HeadEpDescriptorList
        EXTERN bdb_TaskID
        EXTERN bdb_getZCLFrameCounter
        FUNCTION bdb_getZCLFrameCounter,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_reportCommissioningState
        FUNCTION bdb_reportCommissioningState,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_zclRespondentListClean
        FUNCTION bdb_zclRespondentListClean,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_get_timeoutEx
        FUNCTION osal_get_timeoutEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN pRespondentCurr
        EXTERN pRespondentHead
        EXTERN pRespondentNext
        EXTERN pbindAddEntry
        EXTERN zclGeneral_SendAddGroupRequest
        FUNCTION zclGeneral_SendAddGroupRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendCommand
        FUNCTION zcl_SendCommand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerClusterOptionList
        FUNCTION zcl_registerClusterOptionList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgPollRate

// D:\AA\Z-Stack 3.0.2\Components\stack\bdb\bdb_FindingAndBinding.c
//    1 /**************************************************************************************************
//    2   Filename:       bdb_FindingAndBinding.c
//    3   Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
//    4   Revision:       $Revision: - $
//    5 
//    6   Description:    This file contains the Base Device Behavior functions and attributes.
//    7 
//    8 
//    9   Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 
//   44 #include "bdb.h"
//   45 #include "ZDObject.h"
//   46 #include "bdb_interface.h"
//   47 #include "AddrMgr.h"
//   48    
//   49 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)   
//   50    
//   51 /*********************************************************************
//   52  * MACROS
//   53  */
//   54 
//   55 
//   56 
//   57    
//   58 /*********************************************************************
//   59  * CONSTANTS
//   60  */
//   61 /*********************************************************************
//   62  * TYPEDEFS
//   63  */
//   64  
//   65  
//   66 /*********************************************************************
//   67  * GLOBAL VARIABLES
//   68  */
//   69 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   70 uint8 grpName[6] = {'G','r','o','u','p','\0'};
grpName:
        DATA8
        DS 6
        REQUIRE `?<Initializer for grpName>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   71 bdbGCB_IdentifyTimeChange_t      pfnIdentifyTimeChangeCB = NULL; 
pfnIdentifyTimeChangeCB:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   72 bdbGCB_BindNotification_t        pfnBindNotificationCB = NULL;
pfnBindNotificationCB:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   73 
//   74 /*********************************************************************
//   75  * EXTERNAL VARIABLES
//   76  */
//   77 
//   78 /*********************************************************************
//   79  * EXTERNAL FUNCTIONS
//   80  */
//   81 
//   82 
//   83 
//   84 /*********************************************************************
//   85  * LOCAL VARIABLES
//   86  */
//   87 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   88 SimpleDescriptionFormat_t  bdb_FindingBindingTargetSimpleDesc;
bdb_FindingBindingTargetSimpleDesc:
        DS 12
        REQUIRE __INIT_XDATA_Z
//   89 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   90 uint8 bdbIndentifyActiveEndpoint  = 0xFF;
bdbIndentifyActiveEndpoint:
        DATA8
        DS 1
        REQUIRE `?<Initializer for bdbIndentifyActiveEndpoint>`
        REQUIRE __INIT_XDATA_I
//   91 
//   92 //Your JOB:
//   93 //Remove the clusters that your application do not use. This will save some flash and processing
//   94 //when looking into matching clusters during the finding & binding procedure

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   95 const cId_t bdb_ZclType1Clusters[] =
bdb_ZclType1Clusters:
        DATA16
        DW 5
        DW 6
        DW 8
        DW 9
        DW 22
        DW 258
        DW 514
        DW 515
        DW 768
        DW 769
        DW 1281
        DW 1282
        DW 1536
        DW 1537
        DW 2820
        DW 1556
        DW 1557
        DW 1559
        DW 1792
        DW 1793
        DW 1794
        DW 1795
        DW 2308
        DW 2304
//   96 {
//   97   ZCL_CLUSTER_ID_GEN_SCENES,
//   98   ZCL_CLUSTER_ID_GEN_ON_OFF,
//   99   ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
//  100   ZCL_CLUSTER_ID_GEN_ALARMS,
//  101   ZCL_CLUSTER_ID_GEN_PARTITION,
//  102   ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING,
//  103   ZCL_CLUSTER_ID_HVAC_FAN_CONTROL,
//  104   ZCL_CLUSTER_ID_HVAC_DIHUMIDIFICATION_CONTROL,
//  105   ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
//  106   ZCL_CLUSTER_ID_LIGHTING_BALLAST_CONFIG,
//  107   ZCL_CLUSTER_ID_SS_IAS_ACE,
//  108   ZCL_CLUSTER_ID_SS_IAS_WD,
//  109   ZCL_CLUSTER_ID_PI_GENERIC_TUNNEL,
//  110   ZCL_CLUSTER_ID_PI_BACNET_PROTOCOL_TUNNEL,
//  111   ZCL_CLUSTER_ID_HA_ELECTRICAL_MEASUREMENT,
//  112   ZCL_CLUSTER_ID_PI_11073_PROTOCOL_TUNNEL,
//  113   ZCL_CLUSTER_ID_PI_ISO7818_PROTOCOL_TUNNEL,
//  114   ZCL_CLUSTER_ID_PI_RETAIL_TUNNEL,
//  115   ZCL_CLUSTER_ID_SE_PRICE,
//  116   ZCL_CLUSTER_ID_SE_DRLC,
//  117   ZCL_CLUSTER_ID_SE_METERING,
//  118   ZCL_CLUSTER_ID_SE_MESSAGING,
//  119   ZCL_CLUSTER_ID_TELECOMMUNICATIONS_VOICE_OVER_ZIGBEE,
//  120   ZCL_CLUSTER_ID_TELECOMMUNICATIONS_INFORMATION,
//  121 };
//  122 
//  123 //Your JOB:
//  124 //Remove the clusters that your application do not use. This will save some flash and processing
//  125 //when looking into matching clusters during the finding & binding procedure

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  126 const cId_t bdb_ZclType2Clusters[] =
bdb_ZclType2Clusters:
        DATA16
        DW 7
        DW 10
        DW 12
        DW 13
        DW 14
        DW 15
        DW 16
        DW 17
        DW 18
        DW 19
        DW 20
        DW 25
        DW 27
        DW 256
        DW 257
        DW 512
        DW 513
        DW 1026
        DW 1024
        DW 1025
        DW 1027
        DW 1028
        DW 1029
        DW 1030
        DW 1280
        DW 1538
        DW 1539
        DW 1540
        DW 1541
        DW 1542
        DW 1543
        DW 1544
        DW 1545
        DW 1546
        DW 1547
        DW 1548
        DW 1549
        DW 1550
        DW 1551
        DW 1552
        DW 1553
        DW 1554
        DW 1555
        DW 1796
        DW 2304
        DW 2816
        DW 2817
        DW 2818
        DW 2819
//  127 {
//  128   ZCL_CLUSTER_ID_GEN_ON_OFF_SWITCH_CONFIG,
//  129   ZCL_CLUSTER_ID_GEN_TIME,
//  130   ZCL_CLUSTER_ID_GEN_ANALOG_INPUT_BASIC,
//  131   ZCL_CLUSTER_ID_GEN_ANALOG_OUTPUT_BASIC,
//  132   ZCL_CLUSTER_ID_GEN_ANALOG_VALUE_BASIC,
//  133   ZCL_CLUSTER_ID_GEN_BINARY_INPUT_BASIC,
//  134   ZCL_CLUSTER_ID_GEN_BINARY_OUTPUT_BASIC,
//  135   ZCL_CLUSTER_ID_GEN_BINARY_VALUE_BASIC,
//  136   ZCL_CLUSTER_ID_GEN_MULTISTATE_INPUT_BASIC,
//  137   ZCL_CLUSTER_ID_GEN_MULTISTATE_OUTPUT_BASIC,
//  138   ZCL_CLUSTER_ID_GEN_MULTISTATE_VALUE_BASIC,
//  139   ZCL_CLUSTER_ID_OTA,
//  140   ZCL_CLUSTER_ID_GEN_APPLIANCE_CONTROL,
//  141   ZCL_CLUSTER_ID_CLOSURES_SHADE_CONFIG,
//  142   ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
//  143   ZCL_CLUSTER_ID_HVAC_PUMP_CONFIG_CONTROL,
//  144   ZCL_CLUSTER_ID_HVAC_THERMOSTAT,
//  145   ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT,
//  146   ZCL_CLUSTER_ID_MS_ILLUMINANCE_MEASUREMENT,
//  147   ZCL_CLUSTER_ID_MS_ILLUMINANCE_LEVEL_SENSING_CONFIG,
//  148   ZCL_CLUSTER_ID_MS_PRESSURE_MEASUREMENT,
//  149   ZCL_CLUSTER_ID_MS_FLOW_MEASUREMENT,
//  150   ZCL_CLUSTER_ID_MS_RELATIVE_HUMIDITY,
//  151   ZCL_CLUSTER_ID_MS_OCCUPANCY_SENSING,
//  152   ZCL_CLUSTER_ID_SS_IAS_ZONE,
//  153   ZCL_CLUSTER_ID_PI_ANALOG_INPUT_BACNET_REG,
//  154   ZCL_CLUSTER_ID_PI_ANALOG_INPUT_BACNET_EXT,
//  155   ZCL_CLUSTER_ID_PI_ANALOG_OUTPUT_BACNET_REG,
//  156   ZCL_CLUSTER_ID_PI_ANALOG_OUTPUT_BACNET_EXT,
//  157   ZCL_CLUSTER_ID_PI_ANALOG_VALUE_BACNET_REG,
//  158   ZCL_CLUSTER_ID_PI_ANALOG_VALUE_BACNET_EXT,
//  159   ZCL_CLUSTER_ID_PI_BINARY_INPUT_BACNET_REG,
//  160   ZCL_CLUSTER_ID_PI_BINARY_INPUT_BACNET_EXT,
//  161   ZCL_CLUSTER_ID_PI_BINARY_OUTPUT_BACNET_REG,
//  162   ZCL_CLUSTER_ID_PI_BINARY_OUTPUT_BACNET_EXT,
//  163   ZCL_CLUSTER_ID_PI_BINARY_VALUE_BACNET_REG,
//  164   ZCL_CLUSTER_ID_PI_BINARY_VALUE_BACNET_EXT,
//  165   ZCL_CLUSTER_ID_PI_MULTISTATE_INPUT_BACNET_REG,
//  166   ZCL_CLUSTER_ID_PI_MULTISTATE_INPUT_BACNET_EXT,
//  167   ZCL_CLUSTER_ID_PI_MULTISTATE_OUTPUT_BACNET_REG,
//  168   ZCL_CLUSTER_ID_PI_MULTISTATE_OUTPUT_BACNET_EXT,
//  169   ZCL_CLUSTER_ID_PI_MULTISTATE_VALUE_BACNET_REG,
//  170   ZCL_CLUSTER_ID_PI_MULTISTATE_VALUE_BACNET_EXT,
//  171   ZCL_CLUSTER_ID_SE_TUNNELING,
//  172   ZCL_CLUSTER_ID_TELECOMMUNICATIONS_INFORMATION,
//  173   ZCL_CLUSTER_ID_HA_APPLIANCE_IDENTIFICATION,
//  174   ZCL_CLUSTER_ID_HA_METER_IDENTIFICATION,
//  175   ZCL_CLUSTER_ID_HA_APPLIANCE_EVENTS_ALERTS,
//  176   ZCL_CLUSTER_ID_HA_APPLIANCE_STATISTICS,
//  177 };
//  178 
//  179 #ifdef ZCL_GROUPS

        RSEG XDATA_I:XDATA:NOROOT(0)
//  180 static zclOptionRec_t zcl_Groups_Options[] =
zcl_Groups_Options:
        DATA8
        DS 3
        REQUIRE `?<Initializer for zcl_Groups_Options>`
        REQUIRE __INIT_XDATA_I
//  181 {
//  182   {
//  183     ZCL_CLUSTER_ID_GEN_GROUPS,
//  184     ( AF_ACK_REQUEST ),
//  185   },
//  186 };
//  187 #endif
//  188 
//  189 
//  190  /*********************************************************************
//  191  * LOCAL FUNCTIONS
//  192  */
//  193 static ZStatus_t bdb_zclFindingBindingAddBindEntry( byte SrcEndpInt,
//  194                                   uint16 BindClusterId,
//  195                                   byte Cnt,                 
//  196                                   uint16 * ClusterList,
//  197                                   zAddrType_t *DstAddr, byte DstEndpInt, uint8 addBind, uint8 isClusterOutput );
//  198 
//  199 uint8 bdb_FindIfAppCluster( cId_t ClusterId, uint8 isClusterOutput );
//  200 
//  201 
//  202 static void bdb_zclSimpleDescClusterListClean( SimpleDescriptionFormat_t *pSimpleDesc );
//  203 bdbFindingBindingRespondent_t* bdb_findRespondentNode(uint8 endpoint, uint16 shortAddress);
//  204 bdbFindingBindingRespondent_t* bdb_getRespondentRetry(bdbFindingBindingRespondent_t* pRespondentHead);
//  205 void bdb_checkMatchingEndpoints(uint8 bindIfMatch, uint16 shortAddress, bdbFindingBindingRespondent_t **pCurr);
//  206  /*********************************************************************
//  207  * PUBLIC FUNCTIONS
//  208  *********************************************************************/
//  209 
//  210 void bdb_ProcessSimpleDesc( zdoIncomingMsg_t *msgPtr );
//  211 void bdb_ProcessIEEEAddrRsp(zdoIncomingMsg_t *pMsg);
//  212 
//  213 /*********************************************************************
//  214  * @fn      bdb_SetIdentifyActiveEndpoint
//  215  *
//  216  * @brief   Set the endpoint which will perform the finding and binding (either Target or Initiator)
//  217  *
//  218  * @param   Active endpoint with which perform F&B. If set to 0xFF all endpoints with Identify will be attempted. The endpoint must be either Initiator or Target or Both
//  219  *
//  220  * @return  ZFailure - F&B commissioning mode already requested
//  221  *          ZInvalidParameter - Endpoint specified not found or reserved by Zigbee
//  222  *          ZSuccess - 
//  223  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  224 ZStatus_t bdb_SetIdentifyActiveEndpoint(uint8 activeEndpoint)
bdb_SetIdentifyActiveEndpoint:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function bdb_SetIdentifyActiveEndpoint
        CODE
//  225 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV       A,R1
        MOV       R4,A
//  226   epList_t *bdb_EpDescriptorListTemp = NULL;
        MOV       R2,#0x0
        MOV       R3,#0x0
//  227   
//  228   //Cannot process the request if no endpoints or F&B is under process
//  229   if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_FINDING_BINDING)
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.3
        JNC       ??bdb_SetIdentifyActiveEndpoint_0
//  230   {
//  231     return ZFailure;
        MOV       R1,#0x1
        SJMP      ??bdb_SetIdentifyActiveEndpoint_1
//  232   }
//  233   
//  234   if(activeEndpoint == 0xFF)
??bdb_SetIdentifyActiveEndpoint_0:
        MOV       A,#-0x1
        XRL       A,R4
        JNZ       ??bdb_SetIdentifyActiveEndpoint_2
//  235   {
//  236     bdbIndentifyActiveEndpoint = activeEndpoint;
        MOV       A,R4
        MOV       DPTR,#bdbIndentifyActiveEndpoint
        MOVX      @DPTR,A
//  237     return ZSuccess;
        MOV       R1,#0x0
        SJMP      ??bdb_SetIdentifyActiveEndpoint_1
//  238   }
//  239   
//  240   if((activeEndpoint != 0) && (activeEndpoint < BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
??bdb_SetIdentifyActiveEndpoint_2:
        MOV       A,R4
        JZ        ??bdb_SetIdentifyActiveEndpoint_3
        MOV       A,R4
        CLR       C
        SUBB      A,#-0xf
        JNC       ??bdb_SetIdentifyActiveEndpoint_3
//  241   {
//  242     bdb_EpDescriptorListTemp = bdb_HeadEpDescriptorList;
        MOV       DPTR,#bdb_HeadEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
//  243     
//  244     while(bdb_EpDescriptorListTemp != NULL)
??bdb_SetIdentifyActiveEndpoint_4:
        MOV       A,R2
        ORL       A,R3
        JZ        ??bdb_SetIdentifyActiveEndpoint_3
//  245     {
//  246       if(bdb_EpDescriptorListTemp->epDesc->endPoint == activeEndpoint)
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        XRL       A,R4
        JNZ       ??bdb_SetIdentifyActiveEndpoint_5
//  247       {
//  248         if(bdb_EpDescriptorListTemp->epDesc->epType)
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        MOVX      A,@DPTR
        JZ        ??bdb_SetIdentifyActiveEndpoint_6
//  249         {
//  250           bdbIndentifyActiveEndpoint = activeEndpoint;
        MOV       A,R4
        MOV       DPTR,#bdbIndentifyActiveEndpoint
        MOVX      @DPTR,A
//  251           return ZSuccess;
        MOV       R1,#0x0
        SJMP      ??bdb_SetIdentifyActiveEndpoint_1
//  252         }
//  253         else
//  254         {
//  255           return ZInvalidParameter;
??bdb_SetIdentifyActiveEndpoint_6:
        MOV       R1,#0x2
        SJMP      ??bdb_SetIdentifyActiveEndpoint_1
//  256         }
//  257       }
//  258       bdb_EpDescriptorListTemp = bdb_EpDescriptorListTemp->nextDesc;
??bdb_SetIdentifyActiveEndpoint_5:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        SJMP      ??bdb_SetIdentifyActiveEndpoint_4
//  259     }
//  260   }
//  261   
//  262   return ZInvalidParameter;
??bdb_SetIdentifyActiveEndpoint_3:
        MOV       R1,#0x2
??bdb_SetIdentifyActiveEndpoint_1:
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
//  263 }
          CFI EndBlock cfiBlock0
//  264 
//  265 
//  266 /*********************************************************************
//  267  * @fn      bdb_setEpDescListToActiveEndpoint
//  268  *
//  269  * @brief   Set the endpoint list to the active endpoint selected by the application for F&B process
//  270  *
//  271  * @return  Current endpoint descriptor
//  272  */
//  273 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  274 endPointDesc_t* bdb_setEpDescListToActiveEndpoint(void)
bdb_setEpDescListToActiveEndpoint:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function bdb_setEpDescListToActiveEndpoint
        CODE
//  275 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  276   bdb_CurrEpDescriptorList = bdb_HeadEpDescriptorList;
        MOV       DPTR,#bdb_HeadEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  277  
//  278   //Check which active endpoit is being requested
//  279   if(bdbIndentifyActiveEndpoint != 0xFF)
        MOV       DPTR,#bdbIndentifyActiveEndpoint
        MOVX      A,@DPTR
        XRL       A,#0xff
        JZ        ??bdb_setEpDescListToActiveEndpoint_0
//  280   {
//  281     //Search for an specific endpoint
//  282     while(bdb_CurrEpDescriptorList != NULL)
??bdb_setEpDescListToActiveEndpoint_1:
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       $+5
        LJMP      ??bdb_setEpDescListToActiveEndpoint_2 & 0xFFFF
//  283     {
//  284       if(bdb_CurrEpDescriptorList->epDesc->endPoint == bdbIndentifyActiveEndpoint)
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPTR,#bdbIndentifyActiveEndpoint
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??bdb_setEpDescListToActiveEndpoint_3
//  285       {
//  286         return bdb_CurrEpDescriptorList->epDesc;
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LJMP      ??bdb_setEpDescListToActiveEndpoint_4 & 0xFFFF
//  287       }
//  288       bdb_CurrEpDescriptorList = bdb_CurrEpDescriptorList->nextDesc;
??bdb_setEpDescListToActiveEndpoint_3:
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        SJMP      ??bdb_setEpDescListToActiveEndpoint_1
//  289     }
//  290   }
//  291   else
//  292   {
//  293     //Look for the first endpoint that is either intiator or target to perform F&B. Is assumed that the endpoint supports Identify
//  294     while(bdb_CurrEpDescriptorList != NULL)
??bdb_setEpDescListToActiveEndpoint_0:
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_setEpDescListToActiveEndpoint_2
//  295     {
//  296       if((bdb_CurrEpDescriptorList->epDesc->endPoint != 0) && 
//  297          (bdb_CurrEpDescriptorList->epDesc->endPoint < BDB_ZIGBEE_RESERVED_ENDPOINTS_START) && 
//  298          (bdb_CurrEpDescriptorList->epDesc->epType))
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        JZ        ??bdb_setEpDescListToActiveEndpoint_5
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#-0xf
        JNC       ??bdb_setEpDescListToActiveEndpoint_5
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        MOVX      A,@DPTR
        JZ        ??bdb_setEpDescListToActiveEndpoint_5
//  299       {
//  300         return bdb_CurrEpDescriptorList->epDesc;
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        SJMP      ??bdb_setEpDescListToActiveEndpoint_4
//  301       }
//  302       bdb_CurrEpDescriptorList = bdb_CurrEpDescriptorList->nextDesc;
??bdb_setEpDescListToActiveEndpoint_5:
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        LJMP      ??bdb_setEpDescListToActiveEndpoint_0 & 0xFFFF
//  303     }
//  304   }
//  305   //not found
//  306   return NULL;
??bdb_setEpDescListToActiveEndpoint_2:
        MOV       R2,#0x0
        MOV       R3,#0x0
??bdb_setEpDescListToActiveEndpoint_4:
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
//  307 }
          CFI EndBlock cfiBlock1
//  308 
//  309 
//  310 /*********************************************************************
//  311  * @fn      bdb_ProcessIEEEAddrRsp
//  312  *
//  313  * @brief   Process IEEE addr response and mark the entry as done or remove the 
//  314  *          bind if not successful.
//  315  *
//  316  * @param   zdoIncomingMsg_t *pMsg
//  317  *
//  318  * @return  none
//  319  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  320 void bdb_ProcessIEEEAddrRsp(zdoIncomingMsg_t *pMsg)
bdb_ProcessIEEEAddrRsp:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function bdb_ProcessIEEEAddrRsp
        CODE
//  321 {
        FUNCALL bdb_ProcessIEEEAddrRsp, ZDO_ParseAddrRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessIEEEAddrRsp, bdb_setEpDescListToActiveEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessIEEEAddrRsp, bdb_findRespondentNode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessIEEEAddrRsp, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessIEEEAddrRsp, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessIEEEAddrRsp, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessIEEEAddrRsp, bdb_zclSimpleDescClusterListClean
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessIEEEAddrRsp, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessIEEEAddrRsp, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessIEEEAddrRsp, bdb_checkMatchingEndpoints
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessIEEEAddrRsp, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 23
        MOV       A,#-0x17
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       ?V0,R2
        MOV       ?V1,R3
//  322   ZDO_NwkIEEEAddrResp_t *pAddrRsp = NULL;
        MOV       R6,#0x0
        MOV       R7,#0x0
//  323   bdbFindingBindingRespondent_t *pCurr = NULL;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
//  324 
//  325   pAddrRsp = ZDO_ParseAddrRsp( pMsg );
        ; Setup parameters for call to function ZDO_ParseAddrRsp
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R6,?V2
        MOV       R7,?V3
//  326   
//  327   if(pAddrRsp == NULL)
        MOV       A,R6
        ORL       A,R7
        JNZ       $+5
        LJMP      ??bdb_ProcessIEEEAddrRsp_0 & 0xFFFF
//  328   {
//  329     return;
//  330   }
//  331   
//  332   bdb_setEpDescListToActiveEndpoint();
        ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
        LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
//  333   
//  334   pCurr = bdb_findRespondentNode(bdb_FindingBindingTargetSimpleDesc.EndPoint, pAddrRsp->nwkAddr);
        ; Setup parameters for call to function bdb_findRespondentNode
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_findRespondentNode::?relay`; Banked call to: bdb_findRespondentNode
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  335   
//  336   //Does the entry exist and we were waiting an IEEE addr rsp from this device?
//  337   if((pCurr != NULL) && (pCurr->attempts > FINDING_AND_BINDING_MISSING_IEEE_ADDR))
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       $+5
        LJMP      ??bdb_ProcessIEEEAddrRsp_1 & 0xFFFF
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0xc
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#-0x7f
        JNC       $+5
        LJMP      ??bdb_ProcessIEEEAddrRsp_1 & 0xFFFF
//  338   {
//  339     if(pAddrRsp->status == ZSuccess )
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        JZ        $+5
        LJMP      ??bdb_ProcessIEEEAddrRsp_2 & 0xFFFF
//  340     {
//  341       uint8 extAddr[8]; 
//  342       AddrMgrEntry_t entry;
//  343       
//  344       entry.nwkAddr = pAddrRsp->nwkAddr;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  345       entry.user = ADDRMGR_USER_BINDING;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x4
        MOVX      @DPTR,A
//  346       AddrMgrExtAddrSet(entry.extAddr, pAddrRsp->extAddr);
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV       A,R6
        ADD       A,#0x3
        MOV       R4,A
        CLR       A
        ADDC      A,R7
        MOV       R5,A
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
//  347       
//  348       //Add it as bind entry
//  349       if(AddrMgrEntryUpdate(&entry) == FALSE)
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
        MOV       A,R1
        JNZ       ??bdb_ProcessIEEEAddrRsp_3
//  350       {
//  351         //No space, then report F&B table full
//  352         //If periodic was triggered, then finish it
//  353         if(FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE)                                  
//  354         {
//  355           bdb_FB_InitiatorCurrentCyclesNumber = 0;
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOV       A,#0x0
        MOVX      @DPTR,A
//  356           osal_stop_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
//  357         }
//  358         
//  359         bdb_zclSimpleDescClusterListClean( &bdb_FindingBindingTargetSimpleDesc );
        ; Setup parameters for call to function bdb_zclSimpleDescClusterListClean
        MOV       R2,#bdb_FindingBindingTargetSimpleDesc & 0xff
        MOV       R3,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
        LCALL     `??bdb_zclSimpleDescClusterListClean::?relay`; Banked call to: bdb_zclSimpleDescClusterListClean
//  360         osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x40
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
//  361         bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_BINDING_TABLE_FULL );
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xc
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
//  362         return;
        SJMP      ??bdb_ProcessIEEEAddrRsp_0
//  363       }
//  364 
//  365       //search for the matching clusters to be added this time as we have the IEEE addrs
//  366       bdb_checkMatchingEndpoints(TRUE, pAddrRsp->nwkAddr, &pCurr);
??bdb_ProcessIEEEAddrRsp_3:
        ; Setup parameters for call to function bdb_checkMatchingEndpoints
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       R1,#0x1
        LCALL     `??bdb_checkMatchingEndpoints::?relay`; Banked call to: bdb_checkMatchingEndpoints
//  367       (void)extAddr;  //dummy
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP100_8
//  368     }
//  369     //Bind cannot be added if the device was not found
//  370     pCurr->attempts = FINDING_AND_BINDING_RESPONDENT_COMPLETE;
??bdb_ProcessIEEEAddrRsp_2:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0xc
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOV       A,#-0x1
        MOVX      @DPTR,A
//  371   }
//  372   
//  373   //release the memory
//  374   osal_mem_free( pAddrRsp );
??bdb_ProcessIEEEAddrRsp_1:
        ; Setup parameters for call to function osal_mem_free
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  375 }
??bdb_ProcessIEEEAddrRsp_0:
        MOV       A,#0x17
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  376 
//  377 
//  378 /*********************************************************************
//  379  * @fn      bdb_StopInitiatorFindingBinding
//  380  *
//  381  * @brief   Stops finding and binding for initiator devices.
//  382  *
//  383  * @param   none
//  384  *
//  385  * @return  none
//  386  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  387 void bdb_StopInitiatorFindingBinding(void)
bdb_StopInitiatorFindingBinding:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function bdb_StopInitiatorFindingBinding
        CODE
//  388 {
        FUNCALL bdb_StopInitiatorFindingBinding, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StopInitiatorFindingBinding, bdb_zclRespondentListClean
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StopInitiatorFindingBinding, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StopInitiatorFindingBinding, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  389   //If periodic was triggered, then finish it
//  390   if(FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE)                                  
//  391   {
//  392     bdb_FB_InitiatorCurrentCyclesNumber = 0;
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOV       A,#0x0
        MOVX      @DPTR,A
//  393     osal_stop_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
//  394   }      
//  395   //Clean the respondent list and stop its timer
//  396   bdb_zclRespondentListClean( &pRespondentHead );
        ; Setup parameters for call to function bdb_zclRespondentListClean
        MOV       R2,#pRespondentHead & 0xff
        MOV       R3,#(pRespondentHead >> 8) & 0xff
        LCALL     `??bdb_zclRespondentListClean::?relay`; Banked call to: bdb_zclRespondentListClean
//  397   osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x40
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
//  398   
//  399   //Notify status
//  400   bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE );
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xb
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
//  401 
//  402 }
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock3
//  403 
//  404 
//  405 /*********************************************************************
//  406  * @fn      bdb_checkMatchingEndpoints
//  407  *
//  408  * @brief   Check active endpoints for F&B and the respondant simple descriptor 
//  409  *          for matching application clusters
//  410  *
//  411  * @param   pRespondant - Respondant to be process
//  412  * @param   bindIfMatch - Flag to indicate that binds for matching cluster must 
//  413  *                        be done
//  414  *
//  415  * @return  status - Result of the operation
//  416  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  417 void bdb_checkMatchingEndpoints(uint8 bindIfMatch, uint16 shortAddr, bdbFindingBindingRespondent_t **pCurr)
bdb_checkMatchingEndpoints:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function bdb_checkMatchingEndpoints
        CODE
//  418 {
        FUNCALL bdb_checkMatchingEndpoints, zcl_registerClusterOptionList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_checkMatchingEndpoints, AddrMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_checkMatchingEndpoints, bdb_zclFindingBindingAddBindEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_checkMatchingEndpoints, bdb_zclFindingBindingAddBindEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_checkMatchingEndpoints, zclGeneral_SendAddGroupRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_checkMatchingEndpoints, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_checkMatchingEndpoints, bdb_zclSimpleDescClusterListClean
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_checkMatchingEndpoints, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_checkMatchingEndpoints, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV       A,#-0x12
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 21
        MOV       A,#-0x15
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
        MOV       ?V1,R1
        MOV       ?V6,R2
        MOV       ?V7,R3
        MOV       ?V4,R4
        MOV       ?V5,R5
//  419   uint8 matchFound;
//  420   endPointDesc_t *bdb_CurrEpDescriptor;
//  421   uint8 i, status;
//  422   zAddrType_t dstAddr;
//  423 #ifdef ZCL_GROUPS
//  424   afAddrType_t afDstAddr;
//  425 #endif  
//  426   
//  427   //Check all the endpoints active for F&B
//  428   while(bdb_CurrEpDescriptorList != NULL)
??bdb_checkMatchingEndpoints_0:
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       $+5
        LJMP      ??bdb_checkMatchingEndpoints_1 & 0xFFFF
//  429   {
//  430     matchFound = FALSE;
        MOV       ?V0,#0x0
//  431 
//  432     bdb_CurrEpDescriptor = bdb_CurrEpDescriptorList->epDesc;
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       ?V2,R0
        MOV       ?V3,R1
//  433 
//  434 #ifdef ZCL_GROUPS
//  435     if ( bdbAttributes.bdbCommissioningGroupID != 0xFFFF )    
        MOV       DPTR,#bdbAttributes + 8
        MOVX      A,@DPTR
        XRL       A,#0xff
        JNZ       ??bdb_checkMatchingEndpoints_2
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0xff
??bdb_checkMatchingEndpoints_2:
        JZ        ??bdb_checkMatchingEndpoints_3
//  436     {
//  437       zcl_registerClusterOptionList(bdb_CurrEpDescriptor->endPoint,1,zcl_Groups_Options);      
        ; Setup parameters for call to function zcl_registerClusterOptionList
        MOV       R4,#zcl_Groups_Options & 0xff
        MOV       R5,#(zcl_Groups_Options >> 8) & 0xff
        MOV       R2,#0x1
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zcl_registerClusterOptionList::?relay`; Banked call to: zcl_registerClusterOptionList
        MOV       A,R1
//  438       
//  439       dstAddr.addr.shortAddr = bdbAttributes.bdbCommissioningGroupID;
        MOV       DPTR,#bdbAttributes + 8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  440       dstAddr.addrMode = AddrGroup;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
        SJMP      ??bdb_checkMatchingEndpoints_4
//  441     }
//  442     else
//  443 #endif
//  444     {
//  445       dstAddr.addrMode = Addr64Bit;
??bdb_checkMatchingEndpoints_3:
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x3
        MOVX      @DPTR,A
//  446       if(bindIfMatch)
        MOV       A,?V1
        JZ        ??bdb_checkMatchingEndpoints_4
//  447       {
//  448         //if bind is to be created, then we should have the ext address in addr mgr
//  449         AddrMgrExtAddrLookup( shortAddr, dstAddr.addr.extAddr );
        ; Setup parameters for call to function AddrMgrExtAddrLookup
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??AddrMgrExtAddrLookup::?relay`; Banked call to: AddrMgrExtAddrLookup
        MOV       A,R1
//  450       }
//  451     }
//  452     for(i = 0; i < bdb_CurrEpDescriptor->simpleDesc->AppNumOutClusters; i++)
??bdb_checkMatchingEndpoints_4:
        MOV       R6,#0x0
??bdb_checkMatchingEndpoints_5:
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x9
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R6
        CLR       C
        SUBB      A,R0
        JC        $+5
        LJMP      ??bdb_checkMatchingEndpoints_6 & 0xFFFF
//  453     {
//  454       //Filter for Application clusters (to bind app clusters only)
//  455       status = bdb_zclFindingBindingAddBindEntry( bdb_CurrEpDescriptor->endPoint,
//  456                               bdb_CurrEpDescriptor->simpleDesc->pAppOutClusterList[i],
//  457                               bdb_FindingBindingTargetSimpleDesc.AppNumInClusters,
//  458                               bdb_FindingBindingTargetSimpleDesc.pAppInClusterList,
//  459                               &dstAddr, bdb_FindingBindingTargetSimpleDesc.EndPoint, bindIfMatch, TRUE );
        ; Setup parameters for call to function bdb_zclFindingBindingAddBindEntry
        MOV       ?V8,#0x1
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 40)
        MOV       A,?V1
        MOV       ?V8,A
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 41)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V8,R0
        MOV       ?V9,R1
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc + 7
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 45)
        MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc + 6
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       A,R6
        MOV       R2,A
        MOV       R3,#0x0
        MOV       A,R2
        MOV       B,#0x2
        MUL       AB
        XCH       A,R2
        MOV       R0,B
        MOV       B,#0x0
        MUL       AB
        ADD       A,R0
        MOV       R0,A
        MOV       B,#0x2
        MOV       A,R3
        MUL       AB
        ADD       A,R0
        MOV       R3,A
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0xa
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        ADD       A,R2
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R3
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_zclFindingBindingAddBindEntry::?relay`; Banked call to: bdb_zclFindingBindingAddBindEntry
        MOV       A,#0x6
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
        MOV       A,R1
        MOV       R7,A
//  460       
//  461       if ( status == ZApsTableFull )
        MOV       A,#-0x4e
        XRL       A,R7
        JZ        ??bdb_checkMatchingEndpoints_6
//  462       {
//  463         break;
//  464       }
//  465       else if(status == ZSuccess)
        MOV       A,R7
        JNZ       ??bdb_checkMatchingEndpoints_7
//  466       {
//  467         matchFound = TRUE;
        MOV       ?V0,#0x1
//  468         //If a match is found and we are not adding due to lack of IEEE addrs, then skip looking
//  469         if(!bindIfMatch)
        MOV       A,?V1
        JZ        ??bdb_checkMatchingEndpoints_6
//  470         {
//  471           break;
//  472         }
//  473       }
//  474     }
??bdb_checkMatchingEndpoints_7:
        INC       R6
        LJMP      ??bdb_checkMatchingEndpoints_5 & 0xFFFF
//  475     
//  476     //Only search for other matches if the table is not full and we have not 
//  477     //found any match or we have to add bind as many as we can
//  478     if( (status != ZApsTableFull) && (!matchFound || bindIfMatch) )      
??bdb_checkMatchingEndpoints_6:
        MOV       A,#-0x4e
        XRL       A,R7
        JNZ       $+5
        LJMP      ??bdb_checkMatchingEndpoints_8 & 0xFFFF
        MOV       A,?V0
        JZ        ??bdb_checkMatchingEndpoints_9
        MOV       A,?V1
        JNZ       $+5
        LJMP      ??bdb_checkMatchingEndpoints_8 & 0xFFFF
//  479     {
//  480       for(i = 0; i < bdb_CurrEpDescriptor->simpleDesc->AppNumInClusters; i++)
??bdb_checkMatchingEndpoints_9:
        MOV       R6,#0x0
??bdb_checkMatchingEndpoints_10:
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x6
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R6
        CLR       C
        SUBB      A,R0
        JC        $+5
        LJMP      ??bdb_checkMatchingEndpoints_8 & 0xFFFF
//  481       {
//  482         //Filter for Application clusters (to bind app clusters only)
//  483         status = bdb_zclFindingBindingAddBindEntry( bdb_CurrEpDescriptor->endPoint,
//  484                                 bdb_CurrEpDescriptor->simpleDesc->pAppInClusterList[i],
//  485                                 bdb_FindingBindingTargetSimpleDesc.AppNumOutClusters,
//  486                                 bdb_FindingBindingTargetSimpleDesc.pAppOutClusterList,
//  487                                 &dstAddr, bdb_FindingBindingTargetSimpleDesc.EndPoint, bindIfMatch, FALSE );
        ; Setup parameters for call to function bdb_zclFindingBindingAddBindEntry
        MOV       ?V8,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 40)
        MOV       A,?V1
        MOV       ?V8,A
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 41)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V8,R0
        MOV       ?V9,R1
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc + 10
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 45)
        MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc + 9
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       A,R6
        MOV       R2,A
        MOV       R3,#0x0
        MOV       A,R2
        MOV       B,#0x2
        MUL       AB
        XCH       A,R2
        MOV       R0,B
        MOV       B,#0x0
        MUL       AB
        ADD       A,R0
        MOV       R0,A
        MOV       B,#0x2
        MOV       A,R3
        MUL       AB
        ADD       A,R0
        MOV       R3,A
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x7
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        ADD       A,R2
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R3
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_zclFindingBindingAddBindEntry::?relay`; Banked call to: bdb_zclFindingBindingAddBindEntry
        MOV       A,#0x6
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
        MOV       A,R1
        MOV       R7,A
//  488 
//  489         if ( status == ZApsTableFull )
        MOV       A,#-0x4e
        XRL       A,R7
        JZ        ??bdb_checkMatchingEndpoints_8
//  490         {
//  491           break;
//  492         }
//  493         else if(status == ZSuccess)
        MOV       A,R7
        JNZ       ??bdb_checkMatchingEndpoints_11
//  494         {
//  495           matchFound = TRUE;
        MOV       ?V0,#0x1
//  496           
//  497           //If a match is found and we are not adding due to lack of IEEE addrs, then skip looking
//  498           if(!bindIfMatch)
        MOV       A,?V1
        JZ        ??bdb_checkMatchingEndpoints_8
//  499           {
//  500             break;
//  501           }
//  502         }
//  503       }
??bdb_checkMatchingEndpoints_11:
        INC       R6
        LJMP      ??bdb_checkMatchingEndpoints_10 & 0xFFFF
//  504     }
//  505     
//  506     //Check if we have found any match
//  507     if( matchFound == TRUE )
??bdb_checkMatchingEndpoints_8:
        MOV       A,#0x1
        XRL       A,?V0
        JZ        $+5
        LJMP      ??bdb_checkMatchingEndpoints_12 & 0xFFFF
//  508     {
//  509       if(bindIfMatch)
        MOV       A,?V1
        JZ        ??bdb_checkMatchingEndpoints_13
//  510       {
//  511         //Mark respondent as complete as simple desc has been process and we do 
//  512         //have IEEE addrs
//  513         (*pCurr)->attempts = FINDING_AND_BINDING_RESPONDENT_COMPLETE;
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0xc
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOV       A,#-0x1
        MOVX      @DPTR,A
        SJMP      ??bdb_checkMatchingEndpoints_14
//  514       }
//  515       else
//  516       {
//  517         //Mark as we need IEEE addrs
//  518         (*pCurr)->attempts = FINDING_AND_BINDING_MISSING_IEEE_ADDR;
??bdb_checkMatchingEndpoints_13:
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0xc
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOV       A,#-0x80
        MOVX      @DPTR,A
//  519       }
//  520 
//  521 #ifdef ZCL_GROUPS
//  522       if ( bdbAttributes.bdbCommissioningGroupID != 0xFFFF )
??bdb_checkMatchingEndpoints_14:
        MOV       DPTR,#bdbAttributes + 8
        MOVX      A,@DPTR
        XRL       A,#0xff
        JNZ       ??bdb_checkMatchingEndpoints_15
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0xff
??bdb_checkMatchingEndpoints_15:
        JZ        ??bdb_checkMatchingEndpoints_16
//  523       {
//  524         afDstAddr.addr.shortAddr = shortAddr;
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V7
        MOVX      @DPTR,A
//  525         afDstAddr.addrMode = afAddr16Bit;
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
//  526         afDstAddr.endPoint = bdb_FindingBindingTargetSimpleDesc.EndPoint;
        MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  527             
//  528         zclGeneral_SendAddGroupRequest( bdb_CurrEpDescriptor->endPoint, &afDstAddr,
//  529                                     COMMAND_GROUP_ADD, bdbAttributes.bdbCommissioningGroupID, grpName,
//  530                                     TRUE, 0x00 );
        ; Setup parameters for call to function zclGeneral_SendAddGroupRequest
        MOV       ?V8,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 40)
        MOV       ?V8,#grpName & 0xff
        MOV       ?V9,#(grpName >> 8) & 0xff
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 42)
        MOV       DPTR,#bdbAttributes + 8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 44)
        MOV       R5,#0x1
        MOV       R4,#0x0
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP101_8
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclGeneral_SendAddGroupRequest::?relay`; Banked call to: zclGeneral_SendAddGroupRequest
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
        MOV       A,R1
        SJMP      ??bdb_checkMatchingEndpoints_16
//  531       }
//  532 #endif
//  533     }
//  534     else
//  535     {
//  536       //No matching cluster, then we are done with this respondent
//  537       (*pCurr)->attempts = FINDING_AND_BINDING_RESPONDENT_COMPLETE;
??bdb_checkMatchingEndpoints_12:
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0xc
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOV       A,#-0x1
        MOVX      @DPTR,A
//  538     }
//  539     
//  540     if ( status == ZApsTableFull )
??bdb_checkMatchingEndpoints_16:
        MOV       A,#-0x4e
        XRL       A,R7
        JNZ       ??bdb_checkMatchingEndpoints_17
//  541     {
//  542       //If periodic was triggered, then finish it
//  543       if(FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE)                                  
//  544       {
//  545         bdb_FB_InitiatorCurrentCyclesNumber = 0;
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOV       A,#0x0
        MOVX      @DPTR,A
//  546         osal_stop_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
//  547       }      
//  548       
//  549       bdb_zclSimpleDescClusterListClean( &bdb_FindingBindingTargetSimpleDesc );
        ; Setup parameters for call to function bdb_zclSimpleDescClusterListClean
        MOV       R2,#bdb_FindingBindingTargetSimpleDesc & 0xff
        MOV       R3,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
        LCALL     `??bdb_zclSimpleDescClusterListClean::?relay`; Banked call to: bdb_zclSimpleDescClusterListClean
//  550       osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x40
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
//  551       bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_BINDING_TABLE_FULL );
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xc
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
//  552       
//  553       return;
        SJMP      ??bdb_checkMatchingEndpoints_1
//  554     }
//  555     
//  556     //If an specific endpoint was requested, then don't go trough the rest of 
//  557     //the endpoints
//  558     if( bdbIndentifyActiveEndpoint != 0xFF )
??bdb_checkMatchingEndpoints_17:
        MOV       DPTR,#bdbIndentifyActiveEndpoint
        MOVX      A,@DPTR
        XRL       A,#0xff
        JNZ       ??bdb_checkMatchingEndpoints_1
//  559     {
//  560       break;
//  561     }
//  562     else
//  563     {
//  564       //If active endpoints 'all' is attempted, then process the next endpoint in 
//  565       //the list
//  566       bdb_CurrEpDescriptorList = bdb_CurrEpDescriptorList->nextDesc;
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  567 
//  568       while(bdb_CurrEpDescriptorList != NULL)
??bdb_checkMatchingEndpoints_18:
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       $+5
        LJMP      ??bdb_checkMatchingEndpoints_0 & 0xFFFF
//  569       {
//  570         //It has to be different from 0 or reserved for Zigbee
//  571         if((bdb_CurrEpDescriptorList->epDesc->endPoint != 0) && (bdb_CurrEpDescriptorList->epDesc->endPoint < BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        JZ        ??bdb_checkMatchingEndpoints_19
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#-0xf
        JNC       $+5
        LJMP      ??bdb_checkMatchingEndpoints_0 & 0xFFFF
//  572         {
//  573           break;
//  574         }
//  575         bdb_CurrEpDescriptorList = bdb_CurrEpDescriptorList->nextDesc;
??bdb_checkMatchingEndpoints_19:
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        SJMP      ??bdb_checkMatchingEndpoints_18
//  576       }
//  577     }
//  578   }
//  579 }
??bdb_checkMatchingEndpoints_1:
        MOV       A,#0x15
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R7,#0xa
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4
//  580 
//  581 
//  582 
//  583 /*********************************************************************
//  584  * @fn      bdb_ProcessSimpleDesc
//  585  *
//  586  * @brief   Process simple descriptor requested by F&B. Binds will be added if 
//  587  *          matching cluster is found and if IEEE addrs of the device is already 
//  588  *          stored
//  589  *
//  590  * @param   msgPtr - pointer to simple descriptor response indication message
//  591  *
//  592  * @return  none
//  593  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  594 void bdb_ProcessSimpleDesc( zdoIncomingMsg_t *msgPtr )
bdb_ProcessSimpleDesc:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function bdb_ProcessSimpleDesc
        CODE
//  595 {
        FUNCALL bdb_ProcessSimpleDesc, bdb_setEpDescListToActiveEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessSimpleDesc, ZDO_ParseSimpleDescBuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessSimpleDesc, bdb_findRespondentNode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessSimpleDesc, AddrMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessSimpleDesc, bdb_checkMatchingEndpoints
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessSimpleDesc, bdb_zclSimpleDescClusterListClean
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 19
        MOV       A,#-0x13
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  596   zAddrType_t dstAddr;
//  597   bdbFindingBindingRespondent_t *pCurr = NULL;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
//  598   uint8 isRespondantReadyToBeAdded = FALSE;
        MOV       ?V0,#0x0
//  599 
//  600   bdb_setEpDescListToActiveEndpoint();
        ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
        LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
//  601   
//  602   if ( !(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR )) 
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JC        $+5
        LJMP      ??bdb_ProcessSimpleDesc_0 & 0xFFFF
//  603   {  
//  604     //We should not be processing these commands as we are not initiator
//  605     return;
//  606   }
//  607   
//  608   dstAddr.addr.shortAddr = BUILD_UINT16( msgPtr->asdu[1], msgPtr->asdu[2] );
        MOV       A,R6
        ADD       A,#0x13
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       R3,#0x0
        MOV       A,R6
        ADD       A,#0x13
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       R1,#0x0
        CLR       A
        XCH       A,R0
        MOV       R1,A
        MOV       A,R2
        ADD       A,R0
        MOV       R0,A
        MOV       A,R3
        ADDC      A,R1
        MOV       R1,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  609   dstAddr.addrMode = Addr16Bit;
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
//  610   
//  611   ZDO_ParseSimpleDescBuf( &msgPtr->asdu[4], &bdb_FindingBindingTargetSimpleDesc );
        ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
        MOV       R4,#bdb_FindingBindingTargetSimpleDesc & 0xff
        MOV       R5,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
        MOV       A,R6
        ADD       A,#0x13
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        ADD       A,#0x4
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R3,A
        LCALL     `??ZDO_ParseSimpleDescBuf::?relay`; Banked call to: ZDO_ParseSimpleDescBuf
        MOV       A,R1
//  612   
//  613   pCurr = bdb_findRespondentNode(bdb_FindingBindingTargetSimpleDesc.EndPoint, dstAddr.addr.shortAddr);
        ; Setup parameters for call to function bdb_findRespondentNode
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_findRespondentNode::?relay`; Banked call to: bdb_findRespondentNode
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  614   
//  615   //Just for safety check this is a valid entry
//  616   if(pCurr != NULL) 
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_ProcessSimpleDesc_0
//  617   {
//  618     uint8 extAddr[Z_EXTADDR_LEN]; 
//  619     
//  620     if(AddrMgrExtAddrLookup( pCurr->data.addr.shortAddr, extAddr ))
        ; Setup parameters for call to function AddrMgrExtAddrLookup
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP102_8
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??AddrMgrExtAddrLookup::?relay`; Banked call to: AddrMgrExtAddrLookup
        MOV       A,R1
        JZ        ??bdb_ProcessSimpleDesc_1
//  621     {
//  622       isRespondantReadyToBeAdded = TRUE;
        MOV       ?V0,#0x1
        SJMP      ??bdb_ProcessSimpleDesc_2
//  623     }
//  624     else
//  625     {
//  626       //Save the simple desc to don't ask for it again
//  627       pCurr->SimpleDescriptor = &bdb_FindingBindingTargetSimpleDesc;
??bdb_ProcessSimpleDesc_1:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0xd
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOV       A,#bdb_FindingBindingTargetSimpleDesc & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
        MOVX      @DPTR,A
//  628     }
//  629     (void)extAddr;  //dummy
??bdb_ProcessSimpleDesc_2:
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP100_8
//  630   }
//  631   else
//  632   {
//  633     //This simple desc rsp was not requested by BDB F&B
//  634     return;
//  635   } 
//  636   
//  637   bdb_checkMatchingEndpoints(isRespondantReadyToBeAdded, dstAddr.addr.shortAddr, &pCurr);
        ; Setup parameters for call to function bdb_checkMatchingEndpoints
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       R1,?V0
        LCALL     `??bdb_checkMatchingEndpoints::?relay`; Banked call to: bdb_checkMatchingEndpoints
//  638   
//  639   //If the respondent got process complete, then release the entry
//  640   if(pCurr->attempts == FINDING_AND_BINDING_RESPONDENT_COMPLETE)
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0xc
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,#0xff
        JNZ       ??bdb_ProcessSimpleDesc_0
//  641   {
//  642     bdb_zclSimpleDescClusterListClean( &bdb_FindingBindingTargetSimpleDesc );  
        ; Setup parameters for call to function bdb_zclSimpleDescClusterListClean
        MOV       R2,#bdb_FindingBindingTargetSimpleDesc & 0xff
        MOV       R3,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
        LCALL     `??bdb_zclSimpleDescClusterListClean::?relay`; Banked call to: bdb_zclSimpleDescClusterListClean
//  643   }
//  644 }
??bdb_ProcessSimpleDesc_0:
        MOV       A,#0x13
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock5
//  645 
//  646 /*********************************************************************
//  647  * @fn      bdb_zclFindingBindingEpType
//  648  *
//  649  * @brief   Gives the Ep Type according to application clusters in
//  650  *          simple descriptor
//  651  *
//  652  * @return  epType - If Target, Initiator or both
//  653  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  654 uint8 bdb_zclFindingBindingEpType( endPointDesc_t *epDesc )
bdb_zclFindingBindingEpType:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function bdb_zclFindingBindingEpType
        CODE
//  655 {
        FUNCALL bdb_zclFindingBindingEpType, ZDO_AnyClusterMatches
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_zclFindingBindingEpType, ZDO_AnyClusterMatches
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_zclFindingBindingEpType, ZDO_AnyClusterMatches
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_zclFindingBindingEpType, ZDO_AnyClusterMatches
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
//  656   uint8 epType = 0;
        MOV       R7,#0x0
//  657   uint8 status;
//  658   uint8 type1ClusterCnt;
//  659   uint8 type2ClusterCnt;
//  660   
//  661   type1ClusterCnt = sizeof( bdb_ZclType1Clusters )/sizeof( uint16 );
        MOV       ?V3,#0x18
//  662   type2ClusterCnt = sizeof( bdb_ZclType2Clusters )/sizeof( uint16 );
        MOV       ?V2,#0x31
//  663   
//  664 
//  665   // Are there matching type 1 on server side?
//  666   status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumInClusters, 
//  667                                   epDesc->simpleDesc->pAppInClusterList,
//  668                                   type1ClusterCnt,
//  669                                   (uint16*)bdb_ZclType1Clusters);
        ; Setup parameters for call to function ZDO_AnyClusterMatches
        MOV       ?V4,#bdb_ZclType1Clusters & 0xff
        MOV       ?V5,#(bdb_ZclType1Clusters >> 8) & 0xff
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R4,?V3
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x7
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x6
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R1
        MOV       R6,A
//  670   
//  671   if( status == TRUE )
        MOV       A,#0x1
        XRL       A,R6
        JNZ       ??bdb_zclFindingBindingEpType_0
//  672   {
//  673     epType |= BDB_FINDING_AND_BINDING_TARGET;
        SETB      C
        MOV       A,R7
        MOV       0xE0 /* A   */.1,C
        MOV       R7,A
//  674   }
//  675   
//  676   // Are there matching type 1 on client side?
//  677   status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumOutClusters, 
//  678                                   epDesc->simpleDesc->pAppOutClusterList,
//  679                                   type1ClusterCnt,
//  680                                   (uint16*)bdb_ZclType1Clusters);
??bdb_zclFindingBindingEpType_0:
        ; Setup parameters for call to function ZDO_AnyClusterMatches
        MOV       ?V4,#bdb_ZclType1Clusters & 0xff
        MOV       ?V5,#(bdb_ZclType1Clusters >> 8) & 0xff
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R4,?V3
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0xa
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x9
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R1
        MOV       R6,A
//  681   
//  682   if( status == TRUE )
        MOV       A,#0x1
        XRL       A,R6
        JNZ       ??bdb_zclFindingBindingEpType_1
//  683   {
//  684     epType |= BDB_FINDING_AND_BINDING_INITIATOR;
        SETB      C
        MOV       A,R7
        MOV       0xE0 /* A   */.0,C
        MOV       R7,A
//  685   }
//  686   
//  687   // Are there matching type 2 on server side?
//  688   status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumInClusters, 
//  689                                   epDesc->simpleDesc->pAppInClusterList,
//  690                                   type2ClusterCnt,
//  691                                   (uint16*)bdb_ZclType2Clusters);
??bdb_zclFindingBindingEpType_1:
        ; Setup parameters for call to function ZDO_AnyClusterMatches
        MOV       ?V4,#bdb_ZclType2Clusters & 0xff
        MOV       ?V5,#(bdb_ZclType2Clusters >> 8) & 0xff
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R4,?V2
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x7
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x6
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R1
        MOV       R6,A
//  692   
//  693   if( status == TRUE )
        MOV       A,#0x1
        XRL       A,R6
        JNZ       ??bdb_zclFindingBindingEpType_2
//  694   {
//  695     epType |= BDB_FINDING_AND_BINDING_INITIATOR;
        SETB      C
        MOV       A,R7
        MOV       0xE0 /* A   */.0,C
        MOV       R7,A
//  696   }
//  697   
//  698   // Are there matching type 2 on client side?
//  699   status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumOutClusters, 
//  700                                   epDesc->simpleDesc->pAppOutClusterList,
//  701                                   type2ClusterCnt,
//  702                                   (uint16*)bdb_ZclType2Clusters);
??bdb_zclFindingBindingEpType_2:
        ; Setup parameters for call to function ZDO_AnyClusterMatches
        MOV       ?V4,#bdb_ZclType2Clusters & 0xff
        MOV       ?V5,#(bdb_ZclType2Clusters >> 8) & 0xff
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R4,?V2
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0xa
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x9
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R1
        MOV       R6,A
//  703   
//  704   if( status == TRUE )
        MOV       A,#0x1
        XRL       A,R6
        JNZ       ??bdb_zclFindingBindingEpType_3
//  705   {
//  706     epType |= BDB_FINDING_AND_BINDING_TARGET;
        SETB      C
        MOV       A,R7
        MOV       0xE0 /* A   */.1,C
        MOV       R7,A
//  707   }
//  708 
//  709   return epType;
??bdb_zclFindingBindingEpType_3:
        MOV       A,R7
        MOV       R1,A
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
//  710 
//  711 }
          CFI EndBlock cfiBlock6
//  712 
//  713 /*********************************************************************
//  714  * @fn      bdb_zclFindingBindingAddBindEntry
//  715  *
//  716  * @brief   This function is used to Add an entry to the binding table
//  717  *
//  718  * @param   SrcEndpInt - source endpoint
//  719  * @param   BindClusterId - cluster to try bind
//  720  * @param   Cnt - list of remote clusters
//  721  * @param   ClusterList - pointer to the Object ID list
//  722  * @param   DstAddr - Address of remote node
//  723  * @param   DstEndpInt - EndPoint of remote node
//  724  * @param   addBind - Indicate wheter or not bind must be added or not
//  725  * @param   isClusterOutput - True if the bind attempted is output cluster in the local device, false otherwise
//  726  *
//  727  * @return  status - Success if added
//  728  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  729 static ZStatus_t bdb_zclFindingBindingAddBindEntry( byte SrcEndpInt,
bdb_zclFindingBindingAddBindEntry:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function bdb_zclFindingBindingAddBindEntry
        CODE
//  730                                   uint16 BindClusterId,
//  731                                   byte Cnt,                 
//  732                                   uint16 * ClusterList,
//  733                                   zAddrType_t *DstAddr, byte DstEndpInt, uint8 addBind, uint8 isClusterOutput )
//  734 {
        FUNCALL bdb_zclFindingBindingAddBindEntry, bdb_FindIfAppCluster
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_zclFindingBindingAddBindEntry, ZDO_AnyClusterMatches
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV       A,#-0x12
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       A,R1
        MOV       R6,A
        MOV       A,R4
        MOV       R7,A
        MOV       ?V0,R5
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V8,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V9,A
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V5,A
        MOV       A,#0x18
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       A,#0x19
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V2,A
//  735   uint8 status;
//  736 
//  737   if ( bdb_FindIfAppCluster ( BindClusterId, isClusterOutput ) != SUCCESS )
        ; Setup parameters for call to function bdb_FindIfAppCluster
        MOV       R1,?V2
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??bdb_FindIfAppCluster::?relay`; Banked call to: bdb_FindIfAppCluster
        MOV       A,R1
        JZ        ??bdb_zclFindingBindingAddBindEntry_0
//  738   {
//  739     return ( ZApsFail ); // No App cluster
        MOV       R1,#-0x4f
        SJMP      ??bdb_zclFindingBindingAddBindEntry_1
//  740   }
//  741 
//  742   // Are there matching clusters?
//  743   status = ZDO_AnyClusterMatches( Cnt, 
//  744                                   ClusterList,
//  745                                   1,
//  746                                  &BindClusterId);
??bdb_zclFindingBindingAddBindEntry_0:
        ; Setup parameters for call to function ZDO_AnyClusterMatches
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V6,R0
        MOV       ?V7,R1
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R4,#0x1
        MOV       R2,?V8
        MOV       R3,?V9
        MOV       A,R7
        MOV       R1,A
        LCALL     `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R1
        MOV       ?V1,A
//  747   if ( status == FALSE )
        MOV       A,?V1
        JNZ       ??bdb_zclFindingBindingAddBindEntry_2
//  748   {
//  749     return ( ZApsFail ); // No matched Cluster
        MOV       R1,#-0x4f
        SJMP      ??bdb_zclFindingBindingAddBindEntry_1
//  750   }
//  751 
//  752   if(addBind)  
??bdb_zclFindingBindingAddBindEntry_2:
        MOV       A,?V3
        JZ        ??bdb_zclFindingBindingAddBindEntry_3
//  753   {
//  754     if ( pbindAddEntry )
        MOV       DPTR,#pbindAddEntry
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_zclFindingBindingAddBindEntry_3
//  755     {
//  756       // Add the entry into the binding table
//  757       if (!pbindAddEntry( SrcEndpInt, DstAddr, DstEndpInt,
//  758                              1, &BindClusterId ) )
        ; Setup parameters for indirect call
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V6,R0
        MOV       ?V7,R1
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R5,#0x1
        MOV       R4,?V0
        MOV       R2,?V4
        MOV       R3,?V5
        MOV       A,R6
        MOV       R1,A
        MOV       DPTR,#pbindAddEntry
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        LCALL     ?CALL_IND
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       ?V6,R2
        MOV       ?V7,R3
        MOV       A,?V6
        ORL       A,?V7
        JNZ       ??bdb_zclFindingBindingAddBindEntry_3
//  759       {
//  760         return ( ZApsTableFull );
        MOV       R1,#-0x4e
        SJMP      ??bdb_zclFindingBindingAddBindEntry_1
//  761       }
//  762     }
//  763   }
//  764   
//  765   return ( ZSuccess );
??bdb_zclFindingBindingAddBindEntry_3:
        MOV       R1,#0x0
??bdb_zclFindingBindingAddBindEntry_1:
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R7,#0xa
        LJMP      ?BANKED_LEAVE_XDATA
//  766 }
          CFI EndBlock cfiBlock7
//  767 
//  768 /*********************************************************************
//  769  * @fn      bdb_exitFindingBindingWStatus
//  770  *
//  771  * @brief   Clean respondent list and reports the status to bdb state machine
//  772  *
//  773  * @return  
//  774  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  775 void bdb_exitFindingBindingWStatus( uint8 status )
bdb_exitFindingBindingWStatus:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function bdb_exitFindingBindingWStatus
        CODE
//  776 {
        FUNCALL bdb_exitFindingBindingWStatus, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
//  777   // bdb report status
//  778   bdbAttributes.bdbCommissioningStatus = status;
        MOV       A,R6
        MOV       DPTR,#bdbAttributes + 10
        MOVX      @DPTR,A
//  779   
//  780   bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_FINDING_BINDING, TRUE );
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x6
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
//  781 }
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock8
//  782 
//  783 /*********************************************************************
//  784  * @fn      bdb_zclSimpleDescClusterListClean
//  785  *
//  786  * @brief   This function free Simple Descriptor cluster lists
//  787  *
//  788  * @param   pSimpleDesc - pointer to simple descriptor
//  789  *
//  790  * @return  status
//  791  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  792 static void bdb_zclSimpleDescClusterListClean( SimpleDescriptionFormat_t *pSimpleDesc )
bdb_zclSimpleDescClusterListClean:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function bdb_zclSimpleDescClusterListClean
        CODE
//  793 {
        FUNCALL bdb_zclSimpleDescClusterListClean, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_zclSimpleDescClusterListClean, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  794   if(pSimpleDesc->pAppInClusterList != NULL)
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_zclSimpleDescClusterListClean_0
//  795   {
//  796     osal_mem_free( pSimpleDesc->pAppInClusterList );
        ; Setup parameters for call to function osal_mem_free
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  797     pSimpleDesc->pAppInClusterList = ( cId_t* )NULL;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
//  798   }
//  799   if(pSimpleDesc->pAppOutClusterList != NULL)
??bdb_zclSimpleDescClusterListClean_0:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_zclSimpleDescClusterListClean_1
//  800   {
//  801     osal_mem_free( pSimpleDesc->pAppOutClusterList );
        ; Setup parameters for call to function osal_mem_free
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  802     pSimpleDesc->pAppOutClusterList = ( cId_t* )NULL;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
//  803   }
//  804 }
??bdb_zclSimpleDescClusterListClean_1:
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock9
//  805 
//  806 /*********************************************************************
//  807  * @fn      bdb_RegisterIdentifyTimeChangeCB
//  808  *
//  809  * @brief   Register an Application's Identify Time change callback function
//  810  *          to let know the application when identify is active or not.
//  811  *
//  812  * @param   pfnIdentify - application callback
//  813  *
//  814  * @return  none
//  815  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  816 void bdb_RegisterIdentifyTimeChangeCB( bdbGCB_IdentifyTimeChange_t pfnIdentifyTimeChange )
bdb_RegisterIdentifyTimeChangeCB:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function bdb_RegisterIdentifyTimeChangeCB
        CODE
//  817 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  818   pfnIdentifyTimeChangeCB = pfnIdentifyTimeChange;
        MOV       DPTR,#pfnIdentifyTimeChangeCB
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  819 }
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock10
//  820 
//  821 #if (FINDING_AND_BINDING_PERIODIC_ENABLE==TRUE)
//  822 /*********************************************************************
//  823  * @fn      bdb_GetFBInitiatorStatus
//  824  *
//  825  * @brief   Get the F&B initiator status for periodic requests.
//  826  *
//  827  * @param   RemainingTime - in seconds
//  828  * @param   AttemptsLeft - number of attempts to be done
//  829  * @param   MatchesFound - Add the number of matches to this parameter
//  830  *                         since the last bdb_GetFBInitiatorStatus call
//  831  *
//  832  * @return  none
//  833  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  834 void bdb_GetFBInitiatorStatus(uint8 *RemainingTime, uint8* AttemptsLeft)
bdb_GetFBInitiatorStatus:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function bdb_GetFBInitiatorStatus
        CODE
//  835 {
        FUNCALL bdb_GetFBInitiatorStatus, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV       A,#-0x14
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
//  836   if(RemainingTime != NULL)  
        MOV       A,R6
        ORL       A,R7
        JZ        ??bdb_GetFBInitiatorStatus_0
//  837   {
//  838     if (bdb_FB_InitiatorCurrentCyclesNumber == 0)
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX      A,@DPTR
        JNZ       ??bdb_GetFBInitiatorStatus_1
//  839     {
//  840       *RemainingTime = 0;
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,#0x0
        MOVX      @DPTR,A
        SJMP      ??bdb_GetFBInitiatorStatus_0
//  841     }
//  842     else
//  843     {
//  844       *RemainingTime = (bdb_FB_InitiatorCurrentCyclesNumber - 1) * FINDING_AND_BINDING_PERIODIC_TIME + ((osal_get_timeoutEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT) + 999) / 1000);
??bdb_GetFBInitiatorStatus_1:
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       ?V6,R4
        MOV       ?V7,R5
        MOV       DPTR,#__Constant_3e7
        MOV       R0,#?V4
        LCALL     ?L_ADD_X
        MOV       DPTR,#__Constant_3e8
        MOV       R0,#?V8
        LCALL     ?L_MOV_X
        MOV       R0,#?V4
        MOV       R1,#?V8
        LCALL     ?UL_DIV_MOD
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,R0
        ADD       A,#-0x1
        MOV       R0,A
        MOV       A,R1
        ADDC      A,#-0x1
        MOV       R1,A
        MOV       A,R0
        MOV       B,#0xf
        MUL       AB
        XCH       A,R0
        MOV       R2,B
        MOV       B,#0x0
        MUL       AB
        ADD       A,R2
        MOV       R2,A
        MOV       B,#0xf
        MOV       A,R1
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       A,R0
        ADD       A,?V4
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  845     }
//  846   }
//  847   
//  848   if(AttemptsLeft != NULL)
??bdb_GetFBInitiatorStatus_0:
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??bdb_GetFBInitiatorStatus_2
//  849   {
//  850     *AttemptsLeft = bdb_FB_InitiatorCurrentCyclesNumber;
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?V0
        MOV       DPH,?V1
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  851   }
//  852 }
??bdb_GetFBInitiatorStatus_2:
        MOV       R7,#0xc
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock11
//  853 #endif
//  854 
//  855 /*********************************************************************
//  856  * @fn      bdb_RegisterBindNotificationCB
//  857  *
//  858  * @brief   Register an Application's notification callback function to let 
//  859  *          know the application when a new bind is added to the binding table.
//  860  *
//  861  * @param   pfnIdentify - application callback
//  862  *
//  863  * @return  none
//  864  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  865 void bdb_RegisterBindNotificationCB( bdbGCB_BindNotification_t pfnBindNotification )
bdb_RegisterBindNotificationCB:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function bdb_RegisterBindNotificationCB
        CODE
//  866 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  867   pfnBindNotificationCB = pfnBindNotification;
        MOV       DPTR,#pfnBindNotificationCB
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  868 }
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock12
//  869 
//  870 /*********************************************************************
//  871  * @fn      bdb_SendIdentifyQuery
//  872  *
//  873  * @brief   Sends Identify query from the given endpoint
//  874  *
//  875  * @param   endpoint
//  876  *
//  877  * @return  ZStatus_t
//  878  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  879 ZStatus_t bdb_SendIdentifyQuery( uint8 endpoint )
bdb_SendIdentifyQuery:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function bdb_SendIdentifyQuery
        CODE
//  880 {
        FUNCALL bdb_SendIdentifyQuery, bdb_getZCLFrameCounter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_SendIdentifyQuery, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_SendIdentifyQuery, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 12
        MOV       A,#-0xc
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R1
        MOV       R7,A
//  881   afAddrType_t dstAddr;
//  882   ZStatus_t    status;
//  883   
//  884   dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVALL;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#-0x1
        MOVX      @DPTR,A
//  885   dstAddr.addrMode = afAddr16Bit;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
//  886   dstAddr.endPoint = 0xFF;
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x1
        MOVX      @DPTR,A
//  887 
//  888   status = zclGeneral_SendIdentifyQuery( endpoint, &dstAddr, TRUE, bdb_getZCLFrameCounter() ); 
        ; Setup parameters for call to function bdb_getZCLFrameCounter
        LCALL     `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
        MOV       A,R1
        MOV       R1,A
        ; Setup parameters for call to function zcl_SendCommand
        CLR       A
        MOV       ?V0,A
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        CLR       A
        MOV       ?V0,A
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       A,R1
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 27)
        CLR       A
        MOV       ?V0,A
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       R4,#0x3
        MOV       R5,#0x0
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP101_8
        MOV       A,R7
        MOV       R1,A
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R1
        MOV       R6,A
//  889   
//  890   if(status == ZSuccess)
        MOV       A,R6
        JNZ       ??bdb_SendIdentifyQuery_0
//  891   {
//  892     osal_start_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT, IDENTIFY_QUERY_RSP_TIMEOUT );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_2710
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R2,#0x0
        MOV       R3,#0x40
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R1
//  893   }
//  894   
//  895   return status;
??bdb_SendIdentifyQuery_0:
        MOV       A,R6
        MOV       R1,A
        MOV       A,#0xc
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
//  896 }
          CFI EndBlock cfiBlock13
//  897 
//  898 /*********************************************************************
//  899  * @fn      bdb_ZclIdentifyQueryCmdInd
//  900  *
//  901  * @brief   Callback from the ZCL General Cluster Library when
//  902  *          it received an Identity Query Response Command for this 
//  903  *          application.
//  904  *
//  905  * @param   srcAddr - source address and endpoint of the response message
//  906  * @param   identifyTime - the number of seconds to identify yourself
//  907  *
//  908  * @return  none
//  909  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  910 void bdb_ZclIdentifyQueryCmdInd( zclIdentifyQueryRsp_t *pCmd )
bdb_ZclIdentifyQueryCmdInd:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function bdb_ZclIdentifyQueryCmdInd
        CODE
//  911 {
        FUNCALL bdb_ZclIdentifyQueryCmdInd, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ZclIdentifyQueryCmdInd, bdb_AddRespondentNode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ZclIdentifyQueryCmdInd, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  912   bdbFindingBindingRespondent_t *pCurr;
//  913   
//  914   // Stop the timer before refresh
//  915   osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x40
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
//  916   
//  917   // add new node to the list
//  918   pCurr = bdb_AddRespondentNode( &pRespondentHead, pCmd );
        ; Setup parameters for call to function bdb_AddRespondentNode
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R2,#pRespondentHead & 0xff
        MOV       R3,#(pRespondentHead >> 8) & 0xff
        LCALL     `??bdb_AddRespondentNode::?relay`; Banked call to: bdb_AddRespondentNode
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       ?V0,?V2
        MOV       ?V1,?V3
//  919   
//  920   if(pCurr != NULL)
        MOV       A,?V0
        ORL       A,?V1
        JNZ       $+5
        LJMP      ??bdb_ZclIdentifyQueryCmdInd_0 & 0xFFFF
//  921   {
//  922     pCurr->data.addrMode = pCmd->srcAddr->addrMode;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x8
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  923     pCurr->data.addr.shortAddr = pCmd->srcAddr->addr.shortAddr;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  924     pCurr->data.endPoint = pCmd->srcAddr->endPoint;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x9
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  925     pCurr->data.panId = pCmd->srcAddr->panId;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0xa
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  926     pCurr->attempts = FINDING_AND_BINDING_NEW_RESPONDENT;
        MOV       A,?V0
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOV       A,#0x0
        MOVX      @DPTR,A
//  927     pCurr->SimpleDescriptor = NULL;
        MOV       A,?V0
        ADD       A,#0xd
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
//  928   }
//  929   
//  930   //Process the identify query rsp
//  931   osal_set_event(bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT);
??bdb_ZclIdentifyQueryCmdInd_0:
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x0
        MOV       R3,#0x40
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
        MOV       A,R1
//  932 }
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock14
//  933 
//  934 /*********************************************************************
//  935  * @fn      bdb_ProcessRespondentList
//  936  *
//  937  * @brief   Process the respondent list by sending Simple Descriptor request to 
//  938  *          devices respondent in the list. Also send IEEE Addr Req to those 
//  939  *          device for which a bind is created buy IEEE addr is missing.
//  940  *
//  941  * @param   none
//  942  *
//  943  * @return  none
//  944  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  945 void bdb_ProcessRespondentList( void )
bdb_ProcessRespondentList:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function bdb_ProcessRespondentList
        CODE
//  946 {
        FUNCALL bdb_ProcessRespondentList, bdb_getRespondentRetry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessRespondentList, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessRespondentList, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessRespondentList, bdb_getRespondentRetry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessRespondentList, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessRespondentList, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessRespondentList, ZDP_IEEEAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessRespondentList, ZDP_SimpleDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessRespondentList, bdb_getRespondentRetry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
//  947   zAddrType_t dstAddr = { 0 };
        MOV       DPTR,#`?<Constant {{0}}>`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x9
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  948   
//  949   // Look for the first respondent
//  950   if ( pRespondentCurr == NULL )
        MOV       DPTR,#pRespondentCurr
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       ??bdb_ProcessRespondentList_0
//  951   {
//  952     pRespondentCurr = bdb_getRespondentRetry(pRespondentHead);
        ; Setup parameters for call to function bdb_getRespondentRetry
        MOV       DPTR,#pRespondentHead
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
        MOV       DPTR,#pRespondentCurr
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  953     
//  954     // If null, then no responses from Identify query request
//  955     if ( (pRespondentCurr == NULL) )
        MOV       DPTR,#pRespondentCurr
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        $+5
        LJMP      ??bdb_ProcessRespondentList_1 & 0xFFFF
//  956     {
//  957       //No responses, then no responses
//  958       if(pRespondentHead == NULL)
        MOV       DPTR,#pRespondentHead
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       ??bdb_ProcessRespondentList_2
//  959       {
//  960         bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE );
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xb
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
        SJMP      ??bdb_ProcessRespondentList_3
//  961       }
//  962       //Responses and binded to all clusters possible
//  963       else
//  964       {
//  965         bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_SUCCESS );
??bdb_ProcessRespondentList_2:
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0x0
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
//  966       }
//  967       return;
??bdb_ProcessRespondentList_3:
        LJMP      ??bdb_ProcessRespondentList_4 & 0xFFFF
//  968     }
//  969   }
//  970   else
//  971   {
//  972     //Validate that we are not processing a missing IEEE Address before chaning 
//  973     //the current respondent to be process
//  974     if((pRespondentCurr->attempts & FINDING_AND_BINDING_MISSING_IEEE_ADDR) &&
//  975        ((pRespondentCurr->attempts & (~FINDING_AND_BINDING_MISSING_IEEE_ADDR)) >= FINDING_AND_BINDING_MAX_ATTEMPTS))
??bdb_ProcessRespondentList_0:
        MOV       DPTR,#pRespondentCurr
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0xc
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.7
        JNC       ??bdb_ProcessRespondentList_1
        MOV       DPTR,#pRespondentCurr
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0xc
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        ANL       A,#0x7f
        CLR       C
        SUBB      A,#0x4
        JC        ??bdb_ProcessRespondentList_1
//  976     {
//  977       if(pRespondentNext == NULL)
        MOV       DPTR,#pRespondentNext
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       ??bdb_ProcessRespondentList_5
//  978       {
//  979         //Review the whole list if we have simple desc that we need to attempt.
//  980         pRespondentCurr = bdb_getRespondentRetry(pRespondentHead);
        ; Setup parameters for call to function bdb_getRespondentRetry
        MOV       DPTR,#pRespondentHead
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
        MOV       DPTR,#pRespondentCurr
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  981           
//  982         if(pRespondentCurr == NULL)
        MOV       DPTR,#pRespondentCurr
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       ??bdb_ProcessRespondentList_1
//  983         {
//  984           bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_SUCCESS );
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0x0
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
//  985           return;
        LJMP      ??bdb_ProcessRespondentList_4 & 0xFFFF
//  986         }
//  987       }
//  988       else
//  989       {
//  990         pRespondentCurr = pRespondentNext;
??bdb_ProcessRespondentList_5:
        MOV       DPTR,#pRespondentNext
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#pRespondentCurr
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  991       }
//  992     }
//  993   }
//  994   
//  995   //Start the timer to process the next respondent
//  996   osal_start_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT, SIMPLEDESC_RESPONSE_TIMEOUT );
??bdb_ProcessRespondentList_1:
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#zgPollRate
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       DPTR,#__Constant_3
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       R0,#?V0
        MOV       R1,#?V4
        LCALL     ?L_MUL
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       R2,#0x0
        MOV       R3,#0x40
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,R1
//  997   
//  998   //If ParentLost is reported, then do not attempt send SimpleDesc, mark those as pending, 
//  999   //if Parent Lost is restored, then these simpleDesc attempts will be restored to 0
// 1000   if(bdbCommissioningProcedureState.bdbCommissioningState != BDB_PARENT_LOST)
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,#0x8
        JNZ       $+5
        LJMP      ??bdb_ProcessRespondentList_6 & 0xFFFF
// 1001   {
// 1002     dstAddr.addr.shortAddr = pRespondentCurr->data.addr.shortAddr;
        MOV       DPTR,#pRespondentCurr
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 1003     dstAddr.addrMode = pRespondentCurr->data.addrMode;
        MOV       DPTR,#pRespondentCurr
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x8
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1004 
// 1005     //Update the attempts, ahead of actually sending the frame, as this is done just below
// 1006     pRespondentCurr->attempts++;
        MOV       DPTR,#pRespondentCurr
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0xc
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOVX      @DPTR,A
// 1007     
// 1008     //Send IEEE addr request or simple desc req
// 1009     if(pRespondentCurr->attempts & FINDING_AND_BINDING_MISSING_IEEE_ADDR)
        MOV       DPTR,#pRespondentCurr
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0xc
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.7
        JNC       ??bdb_ProcessRespondentList_7
// 1010     {
// 1011       ZDP_IEEEAddrReq(pRespondentCurr->data.addr.shortAddr,0,0,0);
        ; Setup parameters for call to function ZDP_IEEEAddrReq
        MOV       R5,#0x0
        MOV       R4,#0x0
        MOV       R1,#0x0
        MOV       DPTR,#pRespondentCurr
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
        MOV       A,R1
        SJMP      ??bdb_ProcessRespondentList_8
// 1012     }
// 1013     else
// 1014     {
// 1015       //Send simple descriptor
// 1016       ZDP_SimpleDescReq( &dstAddr, pRespondentCurr->data.addr.shortAddr, pRespondentCurr->data.endPoint, 0 );
??bdb_ProcessRespondentList_7:
        ; Setup parameters for call to function ZDP_SimpleDescReq
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       DPTR,#pRespondentCurr
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x9
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#pRespondentCurr
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,R1
        SJMP      ??bdb_ProcessRespondentList_8
// 1017     }
// 1018   }
// 1019   else
// 1020   {
// 1021     //Stop any attempt due to parent lost
// 1022     pRespondentCurr->attempts |= FINDING_AND_BINDING_PARENT_LOST;
??bdb_ProcessRespondentList_6:
        MOV       DPTR,#pRespondentCurr
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0xc
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.6
        MOVX      @DPTR,A
// 1023   }
// 1024   
// 1025   //Search for the next respondant that has not enough tries in the list
// 1026   pRespondentNext = bdb_getRespondentRetry(pRespondentCurr->pNext);
??bdb_ProcessRespondentList_8:
        ; Setup parameters for call to function bdb_getRespondentRetry
        MOV       DPTR,#pRespondentCurr
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0xf
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
        MOV       DPTR,#pRespondentNext
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 1027 }
??bdb_ProcessRespondentList_4:
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock15

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {{0}}>`:
        DATA16
        DW 0
        DB 0, 0, 0, 0, 0, 0
        DB 0
// 1028 
// 1029 /*********************************************************************
// 1030  * @fn      bdb_FindIfAppCluster
// 1031  *
// 1032  * @brief   To verify if cluster is application type and should the local device create a bind for it
// 1033  *
// 1034  * @param   ClusterId - cluster ID to be verified
// 1035  * @param   isClusterOutput - True if the bind attempted is output cluster in the local device, false otherwise
// 1036  *
// 1037  * @return  true if success
// 1038  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1039 uint8 bdb_FindIfAppCluster( cId_t ClusterId, uint8 isClusterOutput )
bdb_FindIfAppCluster:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function bdb_FindIfAppCluster
        CODE
// 1040 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R5,A
// 1041   uint8 i;
// 1042   uint8 ClusterCnt;
// 1043 
// 1044   if(isClusterOutput)
        MOV       A,R5
        JZ        ??bdb_FindIfAppCluster_0
// 1045   {
// 1046       ClusterCnt = sizeof( bdb_ZclType1Clusters )/sizeof( uint16 );
        MOV       R4,#0x18
// 1047 
// 1048       for ( i = 0; i < ClusterCnt; i++ )
        MOV       R0,#0x0
??bdb_FindIfAppCluster_1:
        MOV       A,R0
        CLR       C
        SUBB      A,R4
        JNC       ??bdb_FindIfAppCluster_2
// 1049       {
// 1050         if ( bdb_ZclType1Clusters[i] == ClusterId )
        MOV       A,R0
        MOV       R6,A
        MOV       R7,#0x0
        MOV       A,R6
        MOV       B,#0x2
        MUL       AB
        XCH       A,R6
        MOV       R1,B
        MOV       B,#0x0
        MUL       AB
        ADD       A,R1
        MOV       R1,A
        MOV       B,#0x2
        MOV       A,R7
        MUL       AB
        ADD       A,R1
        MOV       R7,A
        MOV       A,#bdb_ZclType1Clusters & 0xff
        ADD       A,R6
        MOV       DPL,A
        MOV       A,#(bdb_ZclType1Clusters >> 8) & 0xff
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,R2
        JNZ       ??bdb_FindIfAppCluster_3
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R3
??bdb_FindIfAppCluster_3:
        JNZ       ??bdb_FindIfAppCluster_4
// 1051         {
// 1052           return ( SUCCESS );
        MOV       R1,#0x0
        SJMP      ??bdb_FindIfAppCluster_5
// 1053         }
// 1054       }
??bdb_FindIfAppCluster_4:
        INC       R0
        SJMP      ??bdb_FindIfAppCluster_1
// 1055   }
// 1056   else
// 1057   {
// 1058       ClusterCnt = sizeof( bdb_ZclType2Clusters )/sizeof( uint16 );
??bdb_FindIfAppCluster_0:
        MOV       R4,#0x31
// 1059 
// 1060       for ( i = 0; i < ClusterCnt; i++ )
        MOV       R0,#0x0
??bdb_FindIfAppCluster_6:
        MOV       A,R0
        CLR       C
        SUBB      A,R4
        JNC       ??bdb_FindIfAppCluster_2
// 1061       {
// 1062         if ( bdb_ZclType2Clusters[i] == ClusterId )
        MOV       A,R0
        MOV       R6,A
        MOV       R7,#0x0
        MOV       A,R6
        MOV       B,#0x2
        MUL       AB
        XCH       A,R6
        MOV       R1,B
        MOV       B,#0x0
        MUL       AB
        ADD       A,R1
        MOV       R1,A
        MOV       B,#0x2
        MOV       A,R7
        MUL       AB
        ADD       A,R1
        MOV       R7,A
        MOV       A,#bdb_ZclType2Clusters & 0xff
        ADD       A,R6
        MOV       DPL,A
        MOV       A,#(bdb_ZclType2Clusters >> 8) & 0xff
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,R2
        JNZ       ??bdb_FindIfAppCluster_7
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R3
??bdb_FindIfAppCluster_7:
        JNZ       ??bdb_FindIfAppCluster_8
// 1063         {
// 1064           return ( SUCCESS );
        MOV       R1,#0x0
        SJMP      ??bdb_FindIfAppCluster_5
// 1065         }
// 1066       }
??bdb_FindIfAppCluster_8:
        INC       R0
        SJMP      ??bdb_FindIfAppCluster_6
// 1067   }
// 1068   
// 1069   // If not found, take it as application cluster it will be filtered
// 1070   // by simple descriptor at some point
// 1071   return ( FAILURE );
??bdb_FindIfAppCluster_2:
        MOV       R1,#0x1
??bdb_FindIfAppCluster_5:
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
// 1072 }
          CFI EndBlock cfiBlock16
// 1073 
// 1074 
// 1075 /*********************************************************************
// 1076  * @fn      bdb_getRespondentRetry
// 1077  *
// 1078  * @brief   Get the next Respondant entry to retry
// 1079  *
// 1080  * @param   pHead - pointer to a pointer of the list head
// 1081  *
// 1082  * @return  respondant entry if found, otherwise NULL
// 1083  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1084 bdbFindingBindingRespondent_t* bdb_getRespondentRetry(bdbFindingBindingRespondent_t* pRespondentHead)
bdb_getRespondentRetry:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function bdb_getRespondentRetry
        CODE
// 1085 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV       A,R2
        MOV       R0,A
        MOV       A,R3
        MOV       R1,A
// 1086   bdbFindingBindingRespondent_t *pTemp;
// 1087   
// 1088   pTemp = pRespondentHead;
        MOV       A,R0
        MOV       R4,A
        MOV       A,R1
        MOV       R5,A
// 1089   
// 1090   while(pTemp != NULL)
??bdb_getRespondentRetry_0:
        MOV       A,R4
        ORL       A,R5
        JZ        ??bdb_getRespondentRetry_1
// 1091   {
// 1092     //does the next entry requires to perform an attempt on simple desc req or IEEE addr req?
// 1093     if((pTemp->attempts & ~FINDING_AND_BINDING_MISSING_IEEE_ADDR) < FINDING_AND_BINDING_MAX_ATTEMPTS)
        MOV       A,R4
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,R5
        MOV       DPH,A
        MOVX      A,@DPTR
        ANL       A,#0x7f
        CLR       C
        SUBB      A,#0x4
        JNC       ??bdb_getRespondentRetry_2
// 1094     {
// 1095       return pTemp;
        MOV       A,R4
        MOV       R2,A
        MOV       A,R5
        MOV       R3,A
        SJMP      ??bdb_getRespondentRetry_3
// 1096     }
// 1097    
// 1098     pTemp = pTemp->pNext;
??bdb_getRespondentRetry_2:
        MOV       A,R4
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R5
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        SJMP      ??bdb_getRespondentRetry_0
// 1099   }
// 1100   return NULL;
??bdb_getRespondentRetry_1:
        MOV       R2,#0x0
        MOV       R3,#0x0
??bdb_getRespondentRetry_3:
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
// 1101 }
          CFI EndBlock cfiBlock17
// 1102 
// 1103 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1104 bdbFindingBindingRespondent_t* bdb_findRespondentNode(uint8 endpoint, uint16 shortAddress)
bdb_findRespondentNode:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function bdb_findRespondentNode
        CODE
// 1105 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1106   bdbFindingBindingRespondent_t* pTemp = pRespondentHead;
        MOV       DPTR,#pRespondentHead
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
// 1107   
// 1108   while(pTemp != NULL)  
??bdb_findRespondentNode_0:
        MOV       A,R4
        ORL       A,R5
        JZ        ??bdb_findRespondentNode_1
// 1109   {
// 1110     if((pTemp->data.addr.shortAddr == shortAddress) && (pTemp->data.endPoint == endpoint))
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        XRL       A,R6
        JNZ       ??bdb_findRespondentNode_2
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R7
??bdb_findRespondentNode_2:
        JNZ       ??bdb_findRespondentNode_3
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
        JNZ       ??bdb_findRespondentNode_3
// 1111     {
// 1112       return pTemp;
        MOV       A,R4
        MOV       R2,A
        MOV       A,R5
        MOV       R3,A
        SJMP      ??bdb_findRespondentNode_4
// 1113     }
// 1114     
// 1115     pTemp = pTemp->pNext;
??bdb_findRespondentNode_3:
        MOV       A,R4
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R5
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        SJMP      ??bdb_findRespondentNode_0
// 1116   }
// 1117   
// 1118   return NULL;
??bdb_findRespondentNode_1:
        MOV       R2,#0x0
        MOV       R3,#0x0
??bdb_findRespondentNode_4:
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
// 1119 }
          CFI EndBlock cfiBlock18

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for grpName>`:
        DATA8
        DB 71
        DB 114
        DB 111
        DB 117
        DB 112
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for bdbIndentifyActiveEndpoint>`:
        DATA8
        DB 255

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zcl_Groups_Options>`:
        DATA16
        DW 4
        DATA8
        DB 16

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e7:
        DD 999

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2710:
        DD 10000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3:
        DD 3

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_SetIdentifyActiveEndpoint::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_SetIdentifyActiveEndpoint

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setEpDescListToActiveEndpoint::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setEpDescListToActiveEndpoint

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ProcessIEEEAddrRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ProcessIEEEAddrRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_StopInitiatorFindingBinding::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_StopInitiatorFindingBinding

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_checkMatchingEndpoints::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_checkMatchingEndpoints

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ProcessSimpleDesc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ProcessSimpleDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_zclFindingBindingEpType::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_zclFindingBindingEpType

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_zclFindingBindingAddBindEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_zclFindingBindingAddBindEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_exitFindingBindingWStatus::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_exitFindingBindingWStatus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_zclSimpleDescClusterListClean::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_zclSimpleDescClusterListClean

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RegisterIdentifyTimeChangeCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RegisterIdentifyTimeChangeCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_GetFBInitiatorStatus::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_GetFBInitiatorStatus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RegisterBindNotificationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RegisterBindNotificationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_SendIdentifyQuery::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_SendIdentifyQuery

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ZclIdentifyQueryCmdInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ZclIdentifyQueryCmdInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ProcessRespondentList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ProcessRespondentList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_FindIfAppCluster::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_FindIfAppCluster

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_getRespondentRetry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_getRespondentRetry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_findRespondentNode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_findRespondentNode

        END
// 1120 
// 1121 #endif  
// 1122 
// 1123 /*********************************************************************
// 1124 *********************************************************************/
// 
// 4 168 bytes in segment BANKED_CODE
//   114 bytes in segment BANK_RELAYS
//    10 bytes in segment XDATA_I
//    10 bytes in segment XDATA_ID
//   171 bytes in segment XDATA_ROM_C
//    16 bytes in segment XDATA_Z
// 
//   124 bytes of CODE     memory
//   155 bytes of CONST    memory (+ 16 bytes shared)
// 4 168 bytes of HUGECODE memory
//    26 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
