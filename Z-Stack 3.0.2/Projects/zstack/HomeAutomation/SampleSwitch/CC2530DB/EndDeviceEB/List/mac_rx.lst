###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               31/Jul/2020  16:02:02
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack 3.0.2\Components\mac\low_level\srf04\mac_rx.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EWE7D5.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\mac\low_level\srf04\mac_rx.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D POWER_SAVING -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_GROUPS -D BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=0
#        -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0 -DREJOIN_POLL_RATE=0
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\mac_rx.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\mac_rx.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\mac\low_level\srf04\mac_rx.c
      1          /**************************************************************************************************
      2            Filename:       mac_rx.c
      3            Revised:        $Date: 2014-05-16 10:22:59 -0700 (Fri, 16 May 2014) $
      4            Revision:       $Revision: 38564 $
      5          
      6            Description:    Describe the purpose and contents of the file.
      7          
      8          
      9            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          
     45          /* hal */
     46          #include "hal_defs.h"
     47          #include "hal_types.h"
     48          
     49          /* OSAL */
     50          #include "OSAL.h"
     51          
     52          /* high-level */
     53          #include "mac_high_level.h"
     54          #include "mac_spec.h"
     55          #include "mac_pib.h"
     56          
     57          /* MAC security */
     58          #include "mac_security.h"
     59          
     60          /* exported low-level */
     61          #include "mac_low_level.h"
     62          
     63          /* low-level specific */
     64          #include "mac_rx.h"
     65          #include "mac_tx.h"
     66          #include "mac_rx_onoff.h"
     67          #include "mac_radio.h"
     68          
     69          /* target specific */
     70          #include "mac_radio_defs.h"

   \                                 In  segment SFR_AN, at 0x91
   \   unsigned char volatile __sfr RFIRQF1
   \                     RFIRQF1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9b
   \   unsigned char volatile __sfr S1CON
   \                     S1CON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe1
   \   unsigned char volatile __sfr RFST
   \                     RFST:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe9
   \   unsigned char volatile __sfr RFIRQF0
   \                     RFIRQF0:
   \   000000                DS 1
     71          #include "mac_autopend.h"
     72          
     73          /* debug */
     74          #include "mac_assert.h"
     75          
     76          #ifdef ACK_DONE_ISR_WORKAROUND
     77          typedef struct macTimer_s
     78          {
     79            struct macTimer_s     *pNext;                     /* next timer in queue */
     80            int32                 backoff;                    /* timer expiration count */
     81            void                  (*pFunc)(uint8 parameter);  /* timer callback function */
     82            uint8                 parameter;                  /* callback function parameter */
     83          } macTimer_t;
     84          
     85          extern macTimer_t macTxAckIsrTimer;
     86          extern void macTimerCancel(macTimer_t *pTimer);
     87          #endif /* ACK_DONE_ISR_WROKAROUND */
     88          
     89          
     90          
     91          /* ------------------------------------------------------------------------------------------------
     92           *                                            Defines
     93           * ------------------------------------------------------------------------------------------------
     94           */
     95          #define MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT   16   /* adjustable to tune performance */
     96          
     97          /* receive FIFO bytes needed to start a valid receive (see function rxStartIsr for details) */
     98          #define RX_THRESHOLD_START_LEN    (MAC_PHY_PHR_LEN        +  \
     99                                             MAC_FCF_FIELD_LEN      +  \
    100                                             MAC_SEQ_NUM_FIELD_LEN  +  \
    101                                             MAC_FCS_FIELD_LEN)
    102          
    103          /* maximum size of addressing fields (note: command frame identifier processed as part of address) */
    104          #define MAX_ADDR_FIELDS_LEN  ((MAC_EXT_ADDR_FIELD_LEN + MAC_PAN_ID_FIELD_LEN) * 2)
    105          
    106          /* addressing mode reserved value */
    107          #define ADDR_MODE_RESERVERED  1
    108          
    109          /* length of command frame identifier */
    110          #define CMD_FRAME_ID_LEN      1
    111          
    112          /* packet size mask is equal to the maximum value */
    113          #define PHY_PACKET_SIZE_MASK  0x7F
    114          
    115          /* value for promiscuous off, must not conflict with other mode variants from separate include files */
    116          #define PROMISCUOUS_MODE_OFF  0x00
    117          
    118          /* bit of proprietary FCS format that indicates if the CRC is OK */
    119          #define PROPRIETARY_FCS_CRC_OK_BIT  0x80
    120          
    121          /* dummy length value for unused entry in lookup table */
    122          #define DUMMY_LEN   0xBE
    123          
    124          /* value for rxThresholdIntState */
    125          #define RX_THRESHOLD_INT_STATE_INACTIVE   0
    126          #define RX_THRESHOLD_INT_STATE_ACTIVE     1
    127          #define RX_THRESHOLD_INT_STATE_RESET      2
    128          
    129          
    130          /* ------------------------------------------------------------------------------------------------
    131           *                                             Macros
    132           * ------------------------------------------------------------------------------------------------
    133           */
    134          #define MEM_ALLOC(x)   macDataRxMemAlloc(x)
    135          #define MEM_FREE(x)    macDataRxMemFree((uint8 **)x)
    136          
    137          /*
    138           *  Macro for encoding frame control information into internal flags format.
    139           *  Parameter is pointer to the frame.  NOTE!  If either the internal frame
    140           *  format *or* the specification changes, this macro will need to be modified.
    141           */
    142          #define INTERNAL_FCF_FLAGS(p)  ((((p)[1] >> 4) & 0x03) | ((p)[0] & 0x78))
    143          
    144          /*
    145           *  The radio replaces the actual FCS with different information.  This proprietary FCS is
    146           *  the same length as the original and includes:
    147           *    1) the RSSI value
    148           *    2) the average correlation value (used for LQI)
    149           *    3) a CRC passed bit
    150           *
    151           *  These macros decode the proprietary FCS.  The macro parameter is a pointer to the two byte FCS.
    152           */
    153          #define PROPRIETARY_FCS_RSSI(p)                 ((int8)((p)[0]))
    154          #define PROPRIETARY_FCS_CRC_OK(p)               ((p)[1] & PROPRIETARY_FCS_CRC_OK_BIT)
    155          #define PROPRIETARY_FCS_CORRELATION_VALUE(p)    ((p)[1] & ~PROPRIETARY_FCS_CRC_OK_BIT)
    156          
    157          /*
    158           *  Macros for security control field.
    159           */
    160          #define SECURITY_LEVEL(s)                       (s & 0x07)
    161          #define KEY_IDENTIFIER_MODE(s)                  ((s & 0x18) >> 3)
    162          #define SECURITY_CONTROL_RESERVED(s)            ((s & 0xE0) >> 5)
    163          
    164          /* ------------------------------------------------------------------------------------------------
    165           *                                       Global Variables
    166           * ------------------------------------------------------------------------------------------------
    167           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    168          uint8 macRxActive;
   \                     macRxActive:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          uint8 macRxFilter;
   \                     macRxFilter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    170          uint8 macRxOutgoingAckFlag;
   \                     macRxOutgoingAckFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    171          
    172          
    173          /* ------------------------------------------------------------------------------------------------
    174           *                                       Local Constants
    175           * ------------------------------------------------------------------------------------------------
    176           */

   \                                 In  segment CODE_C, align 1
    177          static const uint8 CODE macRxAddrLen[] =
   \                     macRxAddrLen:
   \   000000   00           DB 0
   \   000001   BE           DB 190
   \   000002   04           DB 4
   \   000003   0A           DB 10
    178          {
    179            0,                                                /* no address */
    180            DUMMY_LEN,                                        /* reserved */
    181            MAC_PAN_ID_FIELD_LEN + MAC_SHORT_ADDR_FIELD_LEN,  /* short address + pan id */
    182            MAC_PAN_ID_FIELD_LEN + MAC_EXT_ADDR_FIELD_LEN     /* extended address + pan id */
    183          };
    184          
    185          
    186          /* ------------------------------------------------------------------------------------------------
    187           *                                       Local Prototypes
    188           * ------------------------------------------------------------------------------------------------
    189           */
    190          static void rxHaltCleanupFinalStep(void);
    191          
    192          static void rxStartIsr(void);
    193          static void rxAddrIsr(void);
    194          
    195          #ifdef FEATURE_MAC_SECURITY
    196            static void rxSecurityHdrIsr(void);
    197          #endif
    198          
    199          static void rxPayloadIsr(void);
    200          static void rxDiscardIsr(void);
    201          static void rxFcsIsr(void);
    202          
    203          static void rxPrepPayload(void);
    204          static void rxDiscardFrame(void);
    205          static void rxDone(void);
    206          static void rxPostRxUpdates(void);
    207          
    208          
    209          /* ------------------------------------------------------------------------------------------------
    210           *                                         Local Variables
    211           * ------------------------------------------------------------------------------------------------
    212           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    213          static void    (* pFuncRxState)(void);
   \                     pFuncRxState:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    214          static macRx_t  * pRxBuf;
   \                     pRxBuf:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    215          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    216          static uint8  rxBuf[MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN];
   \                     rxBuf:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    217          static uint8  rxUnreadLen;
   \                     rxUnreadLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    218          static uint8  rxNextLen;
   \                     rxNextLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    219          static uint8  rxPayloadLen;
   \                     rxPayloadLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    220          static uint8  rxFilter;
   \                     rxFilter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    221          static uint8  rxPromiscuousMode;
   \                     rxPromiscuousMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    222          static uint8  rxIsrActiveFlag;
   \                     rxIsrActiveFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    223          static uint8  rxResetFlag;
   \                     rxResetFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    224          static uint8  rxFifoOverflowCount;
   \                     rxFifoOverflowCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    225          
    226          
    227          /**************************************************************************************************
    228           * @fn          macRxInit
    229           *
    230           * @brief       Initialize receive variable states.
    231           *
    232           * @param       none
    233           *
    234           * @return      none
    235           **************************************************************************************************
    236           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    237          MAC_INTERNAL_API void macRxInit(void)
   \                     macRxInit:
    238          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    239            macRxFilter          = RX_FILTER_OFF;
   \   000004   90....       MOV       DPTR,#macRxFilter
   \   000007   7400         MOV       A,#0x0
   \   000009   F0           MOVX      @DPTR,A
    240            rxPromiscuousMode    = PROMISCUOUS_MODE_OFF;
   \   00000A   90....       MOV       DPTR,#rxPromiscuousMode
   \   00000D   7400         MOV       A,#0x0
   \   00000F   F0           MOVX      @DPTR,A
    241            pRxBuf               = NULL; /* required for macRxReset() to function correctly */
   \   000010   90....       MOV       DPTR,#pRxBuf
   \   000013   7400         MOV       A,#0x0
   \   000015   F0           MOVX      @DPTR,A
   \   000016   A3           INC       DPTR
   \   000017   7400         MOV       A,#0x0
   \   000019   F0           MOVX      @DPTR,A
    242            macRxActive          = MAC_RX_ACTIVE_NO_ACTIVITY;
   \   00001A   90....       MOV       DPTR,#macRxActive
   \   00001D   7400         MOV       A,#0x0
   \   00001F   F0           MOVX      @DPTR,A
    243            pFuncRxState         = &rxStartIsr;
   \   000020   90....       MOV       DPTR,#pFuncRxState
   \   000023   74..         MOV       A,#`??rxStartIsr::?relay` & 0xff
   \   000025   F0           MOVX      @DPTR,A
   \   000026   A3           INC       DPTR
   \   000027   74..         MOV       A,#(`??rxStartIsr::?relay` >> 8) & 0xff
   \   000029   F0           MOVX      @DPTR,A
    244            macRxOutgoingAckFlag = 0;
   \   00002A   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   00002D   7400         MOV       A,#0x0
   \   00002F   F0           MOVX      @DPTR,A
    245            rxIsrActiveFlag      = 0;
   \   000030   90....       MOV       DPTR,#rxIsrActiveFlag
   \   000033   7400         MOV       A,#0x0
   \   000035   F0           MOVX      @DPTR,A
    246            rxResetFlag          = 0;
   \   000036   90....       MOV       DPTR,#rxResetFlag
   \   000039   7400         MOV       A,#0x0
   \   00003B   F0           MOVX      @DPTR,A
    247            rxFifoOverflowCount  = 0;
   \   00003C   90....       MOV       DPTR,#rxFifoOverflowCount
   \   00003F   7400         MOV       A,#0x0
   \   000041   F0           MOVX      @DPTR,A
    248          }
   \   000042   D083         POP       DPH
   \   000044   D082         POP       DPL
   \   000046   02....       LJMP      ?BRET
    249          
    250          
    251          /**************************************************************************************************
    252           * @fn          macRxRadioPowerUpInit
    253           *
    254           * @brief       Initialization for after radio first powers up.
    255           *
    256           * @param       none
    257           *
    258           * @return      none
    259           **************************************************************************************************
    260           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    261          MAC_INTERNAL_API void macRxRadioPowerUpInit(void)
   \                     macRxRadioPowerUpInit:
    262          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    263            /* set threshold at initial value */
    264            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \   000004   906194       MOV       DPTR,#0x6194
   \   000007   7405         MOV       A,#0x5
   \   000009   F0           MOVX      @DPTR,A
    265          
    266            /* clear any accidental threshold interrupt that happened as part of power up sequence */
    267            MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
   \   00000A   A2AF         MOV       C,0xa8.7
   \   00000C   E4           CLR       A
   \   00000D   33           RLC       A
   \   00000E   F8           MOV       R0,A
   \   00000F   C2AF         CLR       0xa8.7
   \   000011   759B00       MOV       0x9b,#0x0
   \   000014   75E9FB       MOV       0xe9,#-0x5
   \   000017   E8           MOV       A,R0
   \   000018   A2E0         MOV       C,0xE0 /* A   */.0
   \   00001A   92AF         MOV       0xa8.7,C
    268          
    269            /* enable threshold interrupts */
    270            MAC_RADIO_ENABLE_RX_THRESHOLD_INTERRUPT();
   \   00001C   9061A3       MOV       DPTR,#0x61a3
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   D2E2         SETB      0xE0 /* A   */.2
   \   000022   F0           MOVX      @DPTR,A
    271          }
   \   000023   D083         POP       DPH
   \   000025   D082         POP       DPL
   \   000027   02....       LJMP      ?BRET
   \   00002A                REQUIRE _A_IEN0
   \   00002A                REQUIRE S1CON
   \   00002A                REQUIRE RFIRQF0
    272          
    273          
    274          /**************************************************************************************************
    275           * @fn          macRxTxReset
    276           *
    277           * @brief       Reset the receive state.
    278           *
    279           * @param       none
    280           *
    281           * @return      none
    282           **************************************************************************************************
    283           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    284          MAC_INTERNAL_API void macRxTxReset(void)
   \                     macRxTxReset:
    285          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    286            /* forces receiver off, cleans up by calling macRxHaltCleanup() and macTxHaltCleanup() */
    287            macRxHardDisable();
   \   000004                ; Setup parameters for call to function macRxHardDisable
   \   000004   12....       LCALL     `??macRxHardDisable::?relay`; Banked call to: macRxHardDisable
    288          
    289            /*
    290             *   Note : transmit does not require any reset logic
    291             *          beyond what macRxHardDisable() provides.
    292             */
    293          
    294            /* restore deault filter mode to off */
    295            macRxFilter = RX_FILTER_OFF;
   \   000007   90....       MOV       DPTR,#macRxFilter
   \   00000A   7400         MOV       A,#0x0
   \   00000C   F0           MOVX      @DPTR,A
    296          
    297            /* return promiscuous mode to default off state */
    298            macRxPromiscuousMode(MAC_PROMISCUOUS_MODE_OFF);
   \   00000D                ; Setup parameters for call to function macRxPromiscuousMode
   \   00000D   7900         MOV       R1,#0x0
   \   00000F   12....       LCALL     `??macRxPromiscuousMode::?relay`; Banked call to: macRxPromiscuousMode
    299          }
   \   000012   D083         POP       DPH
   \   000014   D082         POP       DPL
   \   000016   02....       LJMP      ?BRET
    300          
    301          
    302          /**************************************************************************************************
    303           * @fn          macRxHaltCleanup
    304           *
    305           * @brief       Cleanup up the receive logic after receiver is forced off.
    306           *
    307           * @param       none
    308           *
    309           * @return      none
    310           **************************************************************************************************
    311           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    312          MAC_INTERNAL_API void macRxHaltCleanup(void)
   \                     macRxHaltCleanup:
    313          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    314            rxResetFlag = 1;
   \   000004   90....       MOV       DPTR,#rxResetFlag
   \   000007   7401         MOV       A,#0x1
   \   000009   F0           MOVX      @DPTR,A
    315            if (!rxIsrActiveFlag)
   \   00000A   90....       MOV       DPTR,#rxIsrActiveFlag
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   7009         JNZ       ??macRxHaltCleanup_0
    316            {
    317              rxHaltCleanupFinalStep();
   \   000010                ; Setup parameters for call to function rxHaltCleanupFinalStep
   \   000010   12....       LCALL     `??rxHaltCleanupFinalStep::?relay`; Banked call to: rxHaltCleanupFinalStep
    318              rxResetFlag = 0;
   \   000013   90....       MOV       DPTR,#rxResetFlag
   \   000016   7400         MOV       A,#0x0
   \   000018   F0           MOVX      @DPTR,A
    319            }
    320          }
   \                     ??macRxHaltCleanup_0:
   \   000019   D083         POP       DPH
   \   00001B   D082         POP       DPL
   \   00001D   02....       LJMP      ?BRET
    321          
    322          
    323          /*=================================================================================================
    324           * @fn          rxHaltCleanupFinalStep
    325           *
    326           * @brief       Required cleanup if receiver is halted in the middle of a receive.
    327           *
    328           * @param       none
    329           *
    330           * @return      none
    331           *=================================================================================================
    332           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    333          static void rxHaltCleanupFinalStep(void)
   \                     rxHaltCleanupFinalStep:
    334          {  
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    335            /* cancel any upcoming ACK transmit complete callback */
    336            MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \   000004   9061A4       MOV       DPTR,#0x61a4
   \   000007   E0           MOVX      A,@DPTR
   \   000008   C2E0         CLR       0xE0 /* A   */.0
   \   00000A   F0           MOVX      @DPTR,A
    337          
    338            /* set start of frame threshold */
    339            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \   00000B   906194       MOV       DPTR,#0x6194
   \   00000E   7405         MOV       A,#0x5
   \   000010   F0           MOVX      @DPTR,A
    340          
    341            /* flush the receive FIFO */
    342            MAC_RADIO_FLUSH_RX_FIFO();
   \   000011   75E1ED       MOV       0xe1,#-0x13
   \   000014   75E1ED       MOV       0xe1,#-0x13
    343          
    344            /* clear any receive interrupt that happened to squeak through */
    345            MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
   \   000017   A2AF         MOV       C,0xa8.7
   \   000019   E4           CLR       A
   \   00001A   33           RLC       A
   \   00001B   FA           MOV       R2,A
   \   00001C   C2AF         CLR       0xa8.7
   \   00001E   759B00       MOV       0x9b,#0x0
   \   000021   75E9FB       MOV       0xe9,#-0x5
   \   000024   EA           MOV       A,R2
   \   000025   A2E0         MOV       C,0xE0 /* A   */.0
   \   000027   92AF         MOV       0xa8.7,C
    346          
    347            /* if data buffer has been allocated, free it */
    348            if (pRxBuf != NULL)
   \   000029   90....       MOV       DPTR,#pRxBuf
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F8           MOV       R0,A
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F9           MOV       R1,A
   \   000031   E8           MOV       A,R0
   \   000032   49           ORL       A,R1
   \   000033   6008         JZ        ??rxHaltCleanupFinalStep_0
    349            {
    350              MEM_FREE((uint8 **)&pRxBuf);
   \   000035                ; Setup parameters for call to function macDataRxMemFree
   \   000035   7A..         MOV       R2,#pRxBuf & 0xff
   \   000037   7B..         MOV       R3,#(pRxBuf >> 8) & 0xff
   \   000039   12....       LCALL     `??macDataRxMemFree::?relay`; Banked call to: macDataRxMemFree
   \   00003C   E9           MOV       A,R1
    351            }
    352            /* MEM_FREE() sets parameter to NULL. */
    353          
    354            pFuncRxState = &rxStartIsr;
   \                     ??rxHaltCleanupFinalStep_0:
   \   00003D   90....       MOV       DPTR,#pFuncRxState
   \   000040   74..         MOV       A,#`??rxStartIsr::?relay` & 0xff
   \   000042   F0           MOVX      @DPTR,A
   \   000043   A3           INC       DPTR
   \   000044   74..         MOV       A,#(`??rxStartIsr::?relay` >> 8) & 0xff
   \   000046   F0           MOVX      @DPTR,A
    355          
    356            /* if receive was active, perform the post receive updates */
    357            if (macRxActive || macRxOutgoingAckFlag)
   \   000047   90....       MOV       DPTR,#macRxActive
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   7006         JNZ       ??rxHaltCleanupFinalStep_1
   \   00004D   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   000050   E0           MOVX      A,@DPTR
   \   000051   600F         JZ        ??rxHaltCleanupFinalStep_2
    358            {
    359              macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxHaltCleanupFinalStep_1:
   \   000053   90....       MOV       DPTR,#macRxActive
   \   000056   7400         MOV       A,#0x0
   \   000058   F0           MOVX      @DPTR,A
    360              macRxOutgoingAckFlag = 0;
   \   000059   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   00005C   7400         MOV       A,#0x0
   \   00005E   F0           MOVX      @DPTR,A
    361          
    362              rxPostRxUpdates();
   \   00005F                ; Setup parameters for call to function rxPostRxUpdates
   \   00005F   12....       LCALL     `??rxPostRxUpdates::?relay`; Banked call to: rxPostRxUpdates
    363            }
    364          }
   \                     ??rxHaltCleanupFinalStep_2:
   \   000062   D083         POP       DPH
   \   000064   D082         POP       DPL
   \   000066   02....       LJMP      ?BRET
   \   000069                REQUIRE RFST
   \   000069                REQUIRE _A_IEN0
   \   000069                REQUIRE S1CON
   \   000069                REQUIRE RFIRQF0
    365          
    366          
    367          /**************************************************************************************************
    368           * @fn          macRxThresholdIsr
    369           *
    370           * @brief       Interrupt service routine called when bytes in FIFO reach threshold value.
    371           *              It implements a state machine for receiving a packet.
    372           *
    373           * @param       none
    374           *
    375           * @return      none
    376           **************************************************************************************************
    377           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    378          MAC_INTERNAL_API void macRxThresholdIsr(void)
   \                     macRxThresholdIsr:
    379          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    380            /* if currently reseting, do not execute receive ISR logic */
    381            if (rxResetFlag)
   \   000004   90....       MOV       DPTR,#rxResetFlag
   \   000007   E0           MOVX      A,@DPTR
   \   000008   7029         JNZ       ??macRxThresholdIsr_0
    382            {
    383              return;
    384            }
    385          
    386            /*
    387             *  Call the function that handles the current receive state.
    388             *  A flag is set for the duration of the call to indicate
    389             *  the ISR is executing.  This is necessary for the reset
    390             *  logic so it does not perform a reset in the middle of
    391             *  executing the ISR.
    392             */
    393            rxIsrActiveFlag = 1;
   \   00000A   90....       MOV       DPTR,#rxIsrActiveFlag
   \   00000D   7401         MOV       A,#0x1
   \   00000F   F0           MOVX      @DPTR,A
    394            (*pFuncRxState)();
   \   000010                ; Setup parameters for indirect call
   \   000010   90....       MOV       DPTR,#pFuncRxState
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F8           MOV       R0,A
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F583         MOV       DPH,A
   \   000019   8882         MOV       DPL,R0
   \   00001B   12....       LCALL     ?CALL_IND
    395            rxIsrActiveFlag = 0;
   \   00001E   90....       MOV       DPTR,#rxIsrActiveFlag
   \   000021   7400         MOV       A,#0x0
   \   000023   F0           MOVX      @DPTR,A
    396          
    397            /* if a reset occurred during the ISR, peform cleanup here */
    398            if (rxResetFlag)
   \   000024   90....       MOV       DPTR,#rxResetFlag
   \   000027   E0           MOVX      A,@DPTR
   \   000028   6009         JZ        ??macRxThresholdIsr_0
    399            {
    400              rxHaltCleanupFinalStep();
   \   00002A                ; Setup parameters for call to function rxHaltCleanupFinalStep
   \   00002A   12....       LCALL     `??rxHaltCleanupFinalStep::?relay`; Banked call to: rxHaltCleanupFinalStep
    401              rxResetFlag = 0;
   \   00002D   90....       MOV       DPTR,#rxResetFlag
   \   000030   7400         MOV       A,#0x0
   \   000032   F0           MOVX      @DPTR,A
    402            }
    403          }
   \                     ??macRxThresholdIsr_0:
   \   000033   D083         POP       DPH
   \   000035   D082         POP       DPL
   \   000037   02....       LJMP      ?BRET
    404          
    405          
    406          /*=================================================================================================
    407           * @fn          rxStartIsr
    408           *
    409           * @brief       First ISR state for receiving a packet - compute packet length, allocate
    410           *              buffer, initialize buffer.  Acknowledgements are handled immediately without
    411           *              allocating a buffer.
    412           *
    413           * @param       none
    414           *
    415           * @return      none
    416           *=================================================================================================
    417           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    418          static void rxStartIsr(void)
   \                     rxStartIsr:
    419          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    420            uint8  addrLen;
    421            uint8  ackWithPending;
    422            uint8  dstAddrMode;
    423            uint8  srcAddrMode;
    424            uint8  mhrLen = 0;
   \   00000A   75..00       MOV       ?V5,#0x0
    425          
    426            MAC_ASSERT(!macRxActive); /* receive on top of receive */
   \   00000D   90....       MOV       DPTR,#macRxActive
   \   000010   E0           MOVX      A,@DPTR
   \   000011   6003         JZ        ??rxStartIsr_0
   \   000013                ; Setup parameters for call to function halAssertHandler
   \   000013   12....       LCALL     `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    427          
    428            /* indicate rx is active */
    429            macRxActive = MAC_RX_ACTIVE_STARTED;
   \                     ??rxStartIsr_0:
   \   000016   90....       MOV       DPTR,#macRxActive
   \   000019   7481         MOV       A,#-0x7f
   \   00001B   F0           MOVX      @DPTR,A
    430          
    431            /*
    432             *  For bullet proof functionality, need to see if the receiver was just turned off.
    433             *  The logic to request turning off the receiver, disables interrupts and then checks
    434             *  the value of macRxActive.  If it is TRUE, the receiver will not be turned off.
    435             *
    436             *  There is a small hole though.  It's possible to attempt turning off the receiver
    437             *  in the window from when the receive interrupt fires and the point where macRxActive
    438             *  is set to TRUE.  To plug this hole, the on/off status must be tested *after*
    439             *  macRxActive has been set.  If the receiver is off at this point, there is nothing
    440             *  in the RX fifo and the receive is simply aborted.
    441             *
    442             *  Also, there are some considerations in case a hard disable just happened.  Usually,
    443             *  the receiver will just be off at this point after a hard disable.  The check described
    444             *  above will account for this case too.  However, if a hard disable were immediately
    445             *  followed by an enable, the receiver would be on.  To catch this case, the receive
    446             *  FIFO is also tested to see if it is empty.  Recovery is identical to the other cases.
    447             */
    448            if (!macRxOnFlag || MAC_RADIO_RX_FIFO_IS_EMPTY())
   \   00001C   90....       MOV       DPTR,#macRxOnFlag
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6010         JZ        ??rxStartIsr_1
   \   000022   906193       MOV       DPTR,#0x6193
   \   000025   E0           MOVX      A,@DPTR
   \   000026   A2E7         MOV       C,0xE0 /* A   */.7
   \   000028   4014         JC        ??rxStartIsr_2
   \   00002A   906193       MOV       DPTR,#0x6193
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   A2E6         MOV       C,0xE0 /* A   */.6
   \   000030   400C         JC        ??rxStartIsr_2
    449            {
    450              /* reset active flag */
    451              macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxStartIsr_1:
   \   000032   90....       MOV       DPTR,#macRxActive
   \   000035   7400         MOV       A,#0x0
   \   000037   F0           MOVX      @DPTR,A
    452          
    453              /*
    454               *  To be absolutely bulletproof, must make sure no transmit queue'ed up during
    455               *  the tiny, tiny window when macRxActive was not zero.
    456               */
    457              rxPostRxUpdates();
   \   000038                ; Setup parameters for call to function rxPostRxUpdates
   \   000038   12....       LCALL     `??rxPostRxUpdates::?relay`; Banked call to: rxPostRxUpdates
    458          
    459              /* return immediately from here */
    460              return;
   \   00003B   02....       LJMP      ??rxStartIsr_3 & 0xFFFF
    461            }
    462          
    463            /*
    464             *  If interrupts are held off for too long it's possible the previous "transmit done"
    465             *  callback is pending.  If this is the case, it needs to be completed before
    466             *  continuing with the receive logic.
    467             */
    468            MAC_RADIO_FORCE_TX_DONE_IF_PENDING();
   \                     ??rxStartIsr_2:
   \   00003E                ; Setup parameters for call to function macCspForceTxDoneIfPending
   \   00003E   12....       LCALL     `??macCspForceTxDoneIfPending::?relay`; Banked call to: macCspForceTxDoneIfPending
    469          
    470            /*
    471             *  It's possible receive logic is still waiting for confirmation of an ACK that went out
    472             *  for the previous receive.  This is OK but the callback needs to be canceled at this point.
    473             *  That callback execute receive cleanup logic that will run at the completion
    474             *  of *this* receive.  Also, it is important the flag for the outgoing ACK to be cleared.
    475             */
    476            MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \   000041   9061A4       MOV       DPTR,#0x61a4
   \   000044   E0           MOVX      A,@DPTR
   \   000045   C2E0         CLR       0xE0 /* A   */.0
   \   000047   F0           MOVX      @DPTR,A
    477            macRxOutgoingAckFlag = 0;
   \   000048   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   00004B   7400         MOV       A,#0x0
   \   00004D   F0           MOVX      @DPTR,A
    478          
    479            /*
    480             *  Make a module-local copy of macRxFilter.  This prevents the selected
    481             *  filter from changing in the middle of a receive.
    482             */
    483            rxFilter = macRxFilter;
   \   00004E   90....       MOV       DPTR,#macRxFilter
   \   000051   E0           MOVX      A,@DPTR
   \   000052   90....       MOV       DPTR,#rxFilter
   \   000055   F0           MOVX      @DPTR,A
    484          
    485            /*-------------------------------------------------------------------------------
    486             *  Read initial frame information from FIFO.
    487             *
    488             *   This code is not triggered until the following are in the RX FIFO:
    489             *     frame length          - one byte containing length of MAC frame (excludes this field)
    490             *     frame control field   - two bytes defining frame type, addressing fields, control flags
    491             *     sequence number       - one byte unique sequence identifier
    492             *     additional two bytes  - these bytes are available in case the received frame is an ACK,
    493             *                             if so, the frame can be verified and responded to immediately,
    494             *                             if not an ACK, these bytes will be processed normally
    495             */
    496          
    497            /* read frame length, frame control field, and sequence number from FIFO */
    498            MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN);
   \   000056                ; Setup parameters for call to function macMemReadRxFifo
   \   000056   7904         MOV       R1,#0x4
   \   000058   7A..         MOV       R2,#rxBuf & 0xff
   \   00005A   7B..         MOV       R3,#(rxBuf >> 8) & 0xff
   \   00005C   12....       LCALL     `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
    499          
    500            /* bytes to read from FIFO equals frame length minus length of MHR fields just read from FIFO */
    501            rxUnreadLen = (rxBuf[0] & PHY_PACKET_SIZE_MASK) - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN;
   \   00005F   90....       MOV       DPTR,#rxBuf
   \   000062   E0           MOVX      A,@DPTR
   \   000063   547F         ANL       A,#0x7f
   \   000065   24FD         ADD       A,#-0x3
   \   000067   90....       MOV       DPTR,#rxUnreadLen
   \   00006A   F0           MOVX      @DPTR,A
    502          
    503            /*
    504             *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
    505             *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
    506             *  the entire receive buffer is flushed.
    507             */
    508            if ((rxUnreadLen > (MAC_A_MAX_PHY_PACKET_SIZE - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN)) ||
    509                (MAC_FRAME_TYPE(&rxBuf[1]) > MAC_FRAME_TYPE_MAX_VALID))
   \   00006B   90....       MOV       DPTR,#rxUnreadLen
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   C3           CLR       C
   \   000070   947D         SUBB      A,#0x7d
   \   000072   500B         JNC       ??rxStartIsr_4
   \   000074   90....       MOV       DPTR,#rxBuf + 1
   \   000077   E0           MOVX      A,@DPTR
   \   000078   5407         ANL       A,#0x7
   \   00007A   C3           CLR       C
   \   00007B   9404         SUBB      A,#0x4
   \   00007D   400C         JC        ??rxStartIsr_5
    510            {
    511              MAC_RADIO_FLUSH_RX_FIFO();
   \                     ??rxStartIsr_4:
   \   00007F   75E1ED       MOV       0xe1,#-0x13
   \   000082   75E1ED       MOV       0xe1,#-0x13
    512              rxDone();
   \   000085                ; Setup parameters for call to function rxDone
   \   000085   12....       LCALL     `??rxDone::?relay`; Banked call to: rxDone
    513              return;
   \   000088   02....       LJMP      ??rxStartIsr_3 & 0xFFFF
    514            }
    515          
    516          
    517            /*-------------------------------------------------------------------------------
    518             *  Process ACKs.
    519             *
    520             *  If this frame is an ACK, process it immediately and exit from here.
    521             *  If this frame is not an ACK and transmit is listening for an ACK, let
    522             *  the transmit logic know an non-ACK was received so transmit can complete.
    523             *
    524             *  In promiscuous mode ACKs are treated like any other frame.
    525             */
    526            if ((MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_ACK) && (rxPromiscuousMode == PROMISCUOUS_MODE_OFF))
   \                     ??rxStartIsr_5:
   \   00008B   90....       MOV       DPTR,#rxBuf + 1
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   5407         ANL       A,#0x7
   \   000091   6402         XRL       A,#0x2
   \   000093   6003         JZ        $+5
   \   000095   02....       LJMP      ??rxStartIsr_6 & 0xFFFF
   \   000098   90....       MOV       DPTR,#rxPromiscuousMode
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   6003         JZ        $+5
   \   00009E   02....       LJMP      ??rxStartIsr_6 & 0xFFFF
    527            {
    528              halIntState_t  s;
    529              uint8 fcsBuf[MAC_FCF_FIELD_LEN];
    530              /*
    531               *  There are guaranteed to be two unread bytes in the FIFO.  By defintion, for ACK frames
    532               *  these two bytes will be the FCS.
    533               */
    534          
    535              /* read FCS from FIFO (threshold set so bytes are guaranteed to be there) */
    536              MAC_RADIO_READ_RX_FIFO(fcsBuf, MAC_FCS_FIELD_LEN);
   \   0000A1                ; Setup parameters for call to function macMemReadRxFifo
   \   0000A1   7902         MOV       R1,#0x2
   \   0000A3   AA..         MOV       R2,?XSP + 0
   \   0000A5   AB..         MOV       R3,?XSP + 1
   \   0000A7   12....       LCALL     `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
    537          
    538              /*
    539               *  This critical section ensures that the ACK timeout won't be triggered in the
    540               *  middle of receiving the ACK frame.
    541               */
    542              HAL_ENTER_CRITICAL_SECTION(s);
   \   0000AA   A2AF         MOV       C,0xa8.7
   \   0000AC   E4           CLR       A
   \   0000AD   33           RLC       A
   \   0000AE   F5..         MOV       ?V2,A
   \   0000B0   C2AF         CLR       0xa8.7
    543          
    544              /* see if transmit is listening for an ACK */
    545              if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \   0000B2   90....       MOV       DPTR,#macTxActive
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   6486         XRL       A,#0x86
   \   0000B8   6003         JZ        $+5
   \   0000BA   02....       LJMP      ??rxStartIsr_7 & 0xFFFF
    546              {
    547                MAC_ASSERT(pMacDataTx != NULL); /* transmit buffer must be present */
   \   0000BD   90....       MOV       DPTR,#pMacDataTx
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   F8           MOV       R0,A
   \   0000C2   A3           INC       DPTR
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   F9           MOV       R1,A
   \   0000C5   E8           MOV       A,R0
   \   0000C6   49           ORL       A,R1
   \   0000C7   7003         JNZ       ??rxStartIsr_8
   \   0000C9                ; Setup parameters for call to function halAssertHandler
   \   0000C9   12....       LCALL     `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    548          
    549                /* record link quality metrics for the receive ACK */
    550                {
    551                  int8 rssiDbm;
    552                  uint8 corr;
    553          
    554                  rssiDbm = PROPRIETARY_FCS_RSSI(fcsBuf) + MAC_RADIO_RSSI_OFFSET;
   \                     ??rxStartIsr_8:
   \   0000CC   85..82       MOV       DPL,?XSP + 0
   \   0000CF   85..83       MOV       DPH,?XSP + 1
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   24B7         ADD       A,#-0x49
   \   0000D5   F5..         MOV       ?V1,A
    555                  MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
    556                  corr = PROPRIETARY_FCS_CORRELATION_VALUE(fcsBuf);
   \   0000D7   7401         MOV       A,#0x1
   \   0000D9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DC   E0           MOVX      A,@DPTR
   \   0000DD   547F         ANL       A,#0x7f
   \   0000DF   F5..         MOV       ?V0,A
    557          
    558                  pMacDataTx->internal.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
   \   0000E1                ; Setup parameters for call to function macRadioComputeLQI
   \   0000E1   AA..         MOV       R2,?V0
   \   0000E3   A9..         MOV       R1,?V1
   \   0000E5   12....       LCALL     `??macRadioComputeLQI::?relay`; Banked call to: macRadioComputeLQI
   \   0000E8   E9           MOV       A,R1
   \   0000E9   C0E0         PUSH      A
   \   0000EB   90....       MOV       DPTR,#pMacDataTx
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   F8           MOV       R0,A
   \   0000F0   A3           INC       DPTR
   \   0000F1   E0           MOVX      A,@DPTR
   \   0000F2   C8           XCH       A,R0
   \   0000F3   2415         ADD       A,#0x15
   \   0000F5   F582         MOV       DPL,A
   \   0000F7   C8           XCH       A,R0
   \   0000F8   3400         ADDC      A,#0x0
   \   0000FA   F583         MOV       DPH,A
   \   0000FC   D0E0         POP       A
   \   0000FE   F0           MOVX      @DPTR,A
    559                  pMacDataTx->internal.correlation = corr;
   \   0000FF   E5..         MOV       A,?V0
   \   000101   C0E0         PUSH      A
   \   000103   90....       MOV       DPTR,#pMacDataTx
   \   000106   E0           MOVX      A,@DPTR
   \   000107   F8           MOV       R0,A
   \   000108   A3           INC       DPTR
   \   000109   E0           MOVX      A,@DPTR
   \   00010A   C8           XCH       A,R0
   \   00010B   2416         ADD       A,#0x16
   \   00010D   F582         MOV       DPL,A
   \   00010F   C8           XCH       A,R0
   \   000110   3400         ADDC      A,#0x0
   \   000112   F583         MOV       DPH,A
   \   000114   D0E0         POP       A
   \   000116   F0           MOVX      @DPTR,A
    560                  pMacDataTx->internal.rssi= rssiDbm;
   \   000117   E5..         MOV       A,?V1
   \   000119   C0E0         PUSH      A
   \   00011B   90....       MOV       DPTR,#pMacDataTx
   \   00011E   E0           MOVX      A,@DPTR
   \   00011F   F8           MOV       R0,A
   \   000120   A3           INC       DPTR
   \   000121   E0           MOVX      A,@DPTR
   \   000122   C8           XCH       A,R0
   \   000123   2417         ADD       A,#0x17
   \   000125   F582         MOV       DPL,A
   \   000127   C8           XCH       A,R0
   \   000128   3400         ADDC      A,#0x0
   \   00012A   F583         MOV       DPH,A
   \   00012C   D0E0         POP       A
   \   00012E   F0           MOVX      @DPTR,A
    561                }
    562          
    563                /*
    564                 *  It's okay if the ACK timeout is triggered here. The callbacks for ACK received
    565                 *  or ACK not received will check "macTxActive" flag before taking any actions.
    566                 */
    567                HAL_EXIT_CRITICAL_SECTION(s);
   \   00012F   E5..         MOV       A,?V2
   \   000131   A2E0         MOV       C,0xE0 /* A   */.0
   \   000133   92AF         MOV       0xa8.7,C
    568          
    569                /*
    570                 *  An ACK was received so transmit logic needs to know.  If the FCS failed,
    571                 *  the transmit logic still needs to know.  In that case, treat the frame
    572                 *  as a non-ACK to complete the active transmit.
    573                 */
    574                if (PROPRIETARY_FCS_CRC_OK(fcsBuf))
   \   000135   7401         MOV       A,#0x1
   \   000137   12....       LCALL     ?XSTACK_DISP0_8
   \   00013A   E0           MOVX      A,@DPTR
   \   00013B   A2E7         MOV       C,0xE0 /* A   */.7
   \   00013D   5011         JNC       ??rxStartIsr_9
    575                {
    576                  /* call transmit logic to indicate ACK was received */
    577                  macTxAckReceivedCallback(MAC_SEQ_NUMBER(&rxBuf[1]), MAC_FRAME_PENDING(&rxBuf[1]));
   \   00013F                ; Setup parameters for call to function macTxAckReceivedCallback
   \   00013F   90....       MOV       DPTR,#rxBuf + 1
   \   000142   E0           MOVX      A,@DPTR
   \   000143   5410         ANL       A,#0x10
   \   000145   FA           MOV       R2,A
   \   000146   90....       MOV       DPTR,#rxBuf + 3
   \   000149   E0           MOVX      A,@DPTR
   \   00014A   F9           MOV       R1,A
   \   00014B   12....       LCALL     `??macTxAckReceivedCallback::?relay`; Banked call to: macTxAckReceivedCallback
   \   00014E   800B         SJMP      ??rxStartIsr_10
    578                }
    579                else
    580                {
    581                  macTxAckNotReceivedCallback();
   \                     ??rxStartIsr_9:
   \   000150                ; Setup parameters for call to function macTxAckNotReceivedCallback
   \   000150   12....       LCALL     `??macTxAckNotReceivedCallback::?relay`; Banked call to: macTxAckNotReceivedCallback
   \   000153   8006         SJMP      ??rxStartIsr_10
    582                }
    583              }
    584              else
    585              {
    586                HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??rxStartIsr_7:
   \   000155   E5..         MOV       A,?V2
   \   000157   A2E0         MOV       C,0xE0 /* A   */.0
   \   000159   92AF         MOV       0xa8.7,C
    587              }
    588          
    589              /* receive is done, exit from here */
    590              rxDone();
   \                     ??rxStartIsr_10:
   \   00015B                ; Setup parameters for call to function rxDone
   \   00015B   12....       LCALL     `??rxDone::?relay`; Banked call to: rxDone
    591              return;
   \   00015E   02....       LJMP      ??rxStartIsr_3 & 0xFFFF
    592            }
    593            else if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \                     ??rxStartIsr_6:
   \   000161   90....       MOV       DPTR,#macTxActive
   \   000164   E0           MOVX      A,@DPTR
   \   000165   6486         XRL       A,#0x86
   \   000167   7003         JNZ       ??rxStartIsr_11
    594            {
    595              macTxAckNotReceivedCallback();
   \   000169                ; Setup parameters for call to function macTxAckNotReceivedCallback
   \   000169   12....       LCALL     `??macTxAckNotReceivedCallback::?relay`; Banked call to: macTxAckNotReceivedCallback
    596            }
    597          
    598            /*-------------------------------------------------------------------------------
    599             *  Apply filtering.
    600             *
    601             *  For efficiency, see if filtering is even 'on' before processing.  Also test
    602             *  to make sure promiscuous mode is disabled.  If promiscuous mode is enabled,
    603             *  do not apply filtering.
    604             */
    605            if ((rxFilter != RX_FILTER_OFF) && !rxPromiscuousMode)
   \                     ??rxStartIsr_11:
   \   00016C   90....       MOV       DPTR,#rxFilter
   \   00016F   E0           MOVX      A,@DPTR
   \   000170   6036         JZ        ??rxStartIsr_12
   \   000172   90....       MOV       DPTR,#rxPromiscuousMode
   \   000175   E0           MOVX      A,@DPTR
   \   000176   7030         JNZ       ??rxStartIsr_12
    606            {
    607              if (/* filter all frames */
    608                   (rxFilter == RX_FILTER_ALL) ||
    609          
    610                   /* filter non-beacon frames */
    611                   ((rxFilter == RX_FILTER_NON_BEACON_FRAMES) &&
    612                    (MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_BEACON)) ||
    613          
    614                   /* filter non-command frames */
    615                   ((rxFilter == RX_FILTER_NON_COMMAND_FRAMES) &&
    616                    ((MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_COMMAND))))
   \   000178   90....       MOV       DPTR,#rxFilter
   \   00017B   E0           MOVX      A,@DPTR
   \   00017C   6401         XRL       A,#0x1
   \   00017E   6022         JZ        ??rxStartIsr_13
   \   000180   90....       MOV       DPTR,#rxFilter
   \   000183   E0           MOVX      A,@DPTR
   \   000184   6402         XRL       A,#0x2
   \   000186   7008         JNZ       ??rxStartIsr_14
   \   000188   90....       MOV       DPTR,#rxBuf + 1
   \   00018B   E0           MOVX      A,@DPTR
   \   00018C   5407         ANL       A,#0x7
   \   00018E   7012         JNZ       ??rxStartIsr_13
   \                     ??rxStartIsr_14:
   \   000190   90....       MOV       DPTR,#rxFilter
   \   000193   E0           MOVX      A,@DPTR
   \   000194   6403         XRL       A,#0x3
   \   000196   7010         JNZ       ??rxStartIsr_12
   \   000198   90....       MOV       DPTR,#rxBuf + 1
   \   00019B   E0           MOVX      A,@DPTR
   \   00019C   5407         ANL       A,#0x7
   \   00019E   6403         XRL       A,#0x3
   \   0001A0   6006         JZ        ??rxStartIsr_12
    617              {
    618                /* discard rest of frame */
    619                rxDiscardFrame();
   \                     ??rxStartIsr_13:
   \   0001A2                ; Setup parameters for call to function rxDiscardFrame
   \   0001A2   12....       LCALL     `??rxDiscardFrame::?relay`; Banked call to: rxDiscardFrame
    620                return;
   \   0001A5   02....       LJMP      ??rxStartIsr_3 & 0xFFFF
    621              }
    622            }
    623          
    624            /*-------------------------------------------------------------------------------
    625             *  Compute length of addressing fields.  Compute payload length.
    626             */
    627          
    628            /* decode addressing modes */
    629            dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
   \                     ??rxStartIsr_12:
   \   0001A8   90....       MOV       DPTR,#rxBuf + 2
   \   0001AB   E0           MOVX      A,@DPTR
   \   0001AC   13           RRC       A
   \   0001AD   13           RRC       A
   \   0001AE   543F         ANL       A,#0x3f
   \   0001B0   5403         ANL       A,#0x3
   \   0001B2   F5..         MOV       ?V6,A
    630            srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
   \   0001B4   90....       MOV       DPTR,#rxBuf + 2
   \   0001B7   E0           MOVX      A,@DPTR
   \   0001B8   C4           SWAP      A
   \   0001B9   13           RRC       A
   \   0001BA   13           RRC       A
   \   0001BB   5403         ANL       A,#0x3
   \   0001BD   F5..         MOV       ?V4,A
    631          
    632            /*
    633            *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
    634             *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
    635             *  the entire receive buffer is flushed.
    636             */
    637            if (macChipVersion == REV_A)
   \   0001BF   90....       MOV       DPTR,#macChipVersion
   \   0001C2   E0           MOVX      A,@DPTR
   \   0001C3   7018         JNZ       ??rxStartIsr_15
    638            {
    639              if ((srcAddrMode == ADDR_MODE_RESERVERED) || (dstAddrMode == ADDR_MODE_RESERVERED))
   \   0001C5   7401         MOV       A,#0x1
   \   0001C7   65..         XRL       A,?V4
   \   0001C9   6006         JZ        ??rxStartIsr_16
   \   0001CB   7401         MOV       A,#0x1
   \   0001CD   65..         XRL       A,?V6
   \   0001CF   700C         JNZ       ??rxStartIsr_15
    640              {
    641                MAC_RADIO_FLUSH_RX_FIFO();
   \                     ??rxStartIsr_16:
   \   0001D1   75E1ED       MOV       0xe1,#-0x13
   \   0001D4   75E1ED       MOV       0xe1,#-0x13
    642                rxDone();
   \   0001D7                ; Setup parameters for call to function rxDone
   \   0001D7   12....       LCALL     `??rxDone::?relay`; Banked call to: rxDone
    643                return;
   \   0001DA   02....       LJMP      ??rxStartIsr_3 & 0xFFFF
    644              }
    645            }
    646          
    647            /*
    648             *  Compute the addressing field length.  A lookup table based on addressing
    649             *  mode is used for efficiency.  If the source address is present and the
    650             *  frame is intra-PAN, the PAN Id is not repeated.  In this case, the address
    651             *  length is adjusted to match the smaller length.
    652             */
    653            addrLen = macRxAddrLen[dstAddrMode] + macRxAddrLen[srcAddrMode];
   \                     ??rxStartIsr_15:
   \   0001DD   E5..         MOV       A,?V4
   \   0001DF   F8           MOV       R0,A
   \   0001E0   7900         MOV       R1,#0x0
   \   0001E2   74..         MOV       A,#macRxAddrLen & 0xff
   \   0001E4   28           ADD       A,R0
   \   0001E5   F582         MOV       DPL,A
   \   0001E7   74..         MOV       A,#(macRxAddrLen >> 8) & 0xff
   \   0001E9   39           ADDC      A,R1
   \   0001EA   F583         MOV       DPH,A
   \   0001EC   E4           CLR       A
   \   0001ED   93           MOVC      A,@A+DPTR
   \   0001EE   FA           MOV       R2,A
   \   0001EF   E5..         MOV       A,?V6
   \   0001F1   F8           MOV       R0,A
   \   0001F2   7900         MOV       R1,#0x0
   \   0001F4   74..         MOV       A,#macRxAddrLen & 0xff
   \   0001F6   28           ADD       A,R0
   \   0001F7   F582         MOV       DPL,A
   \   0001F9   74..         MOV       A,#(macRxAddrLen >> 8) & 0xff
   \   0001FB   39           ADDC      A,R1
   \   0001FC   F583         MOV       DPH,A
   \   0001FE   E4           CLR       A
   \   0001FF   93           MOVC      A,@A+DPTR
   \   000200   2A           ADD       A,R2
   \   000201   FF           MOV       R7,A
    654            if ((srcAddrMode != SADDR_MODE_NONE) && MAC_INTRA_PAN(&rxBuf[1]))
   \   000202   E5..         MOV       A,?V4
   \   000204   600C         JZ        ??rxStartIsr_17
   \   000206   90....       MOV       DPTR,#rxBuf + 1
   \   000209   E0           MOVX      A,@DPTR
   \   00020A   A2E6         MOV       C,0xE0 /* A   */.6
   \   00020C   5004         JNC       ??rxStartIsr_17
    655            {
    656              addrLen -= MAC_PAN_ID_FIELD_LEN;
   \   00020E   74FE         MOV       A,#-0x2
   \   000210   2F           ADD       A,R7
   \   000211   FF           MOV       R7,A
    657            }
    658          
    659            /*
    660             *  If there are not enough unread bytes to include the computed address
    661             *  plus FCS field, the frame is corrupted and must be discarded.
    662             */
    663            if ((addrLen + MAC_FCS_FIELD_LEN) > rxUnreadLen)
   \                     ??rxStartIsr_17:
   \   000212   90....       MOV       DPTR,#rxUnreadLen
   \   000215   E0           MOVX      A,@DPTR
   \   000216   FA           MOV       R2,A
   \   000217   7B00         MOV       R3,#0x0
   \   000219   EF           MOV       A,R7
   \   00021A   F8           MOV       R0,A
   \   00021B   7900         MOV       R1,#0x0
   \   00021D   E8           MOV       A,R0
   \   00021E   2402         ADD       A,#0x2
   \   000220   F8           MOV       R0,A
   \   000221   5001         JNC       ??rxStartIsr_18
   \   000223   09           INC       R1
   \                     ??rxStartIsr_18:
   \   000224   C3           CLR       C
   \   000225   EA           MOV       A,R2
   \   000226   98           SUBB      A,R0
   \   000227   EB           MOV       A,R3
   \   000228   99           SUBB      A,R1
   \   000229   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00022B   65D0         XRL       A,PSW
   \   00022D   33           RLC       A
   \   00022E   5006         JNC       ??rxStartIsr_19
    664            {
    665              /* discard frame and exit */
    666              rxDiscardFrame();
   \   000230                ; Setup parameters for call to function rxDiscardFrame
   \   000230   12....       LCALL     `??rxDiscardFrame::?relay`; Banked call to: rxDiscardFrame
    667              return;
   \   000233   02....       LJMP      ??rxStartIsr_3 & 0xFFFF
    668            }
    669          
    670            /* aux security header plus payload length is equal to unread bytes minus
    671             * address length, minus the FCS
    672             */
    673            rxPayloadLen = rxUnreadLen - addrLen - MAC_FCS_FIELD_LEN;
   \                     ??rxStartIsr_19:
   \   000236   90....       MOV       DPTR,#rxUnreadLen
   \   000239   E0           MOVX      A,@DPTR
   \   00023A   C3           CLR       C
   \   00023B   9F           SUBB      A,R7
   \   00023C   24FE         ADD       A,#-0x2
   \   00023E   90....       MOV       DPTR,#rxPayloadLen
   \   000241   F0           MOVX      @DPTR,A
    674          
    675            /*-------------------------------------------------------------------------------
    676             *  Allocate memory for the incoming frame.
    677             */
    678            if (MAC_SEC_ENABLED(&rxBuf[1]))
   \   000242   90....       MOV       DPTR,#rxBuf + 1
   \   000245   E0           MOVX      A,@DPTR
   \   000246   A2E3         MOV       C,0xE0 /* A   */.3
   \   000248   5003         JNC       ??rxStartIsr_20
    679            {
    680              /* increase the allocation size of MAC header for security */
    681              mhrLen = MAC_MHR_LEN;
   \   00024A   75..25       MOV       ?V5,#0x25
    682            }
    683          
    684            pRxBuf = (macRx_t *) MEM_ALLOC(sizeof(macRx_t) + mhrLen + rxPayloadLen);
   \                     ??rxStartIsr_20:
   \   00024D                ; Setup parameters for call to function macDataRxMemAlloc
   \   00024D   E5..         MOV       A,?V5
   \   00024F   F8           MOV       R0,A
   \   000250   7900         MOV       R1,#0x0
   \   000252   90....       MOV       DPTR,#rxPayloadLen
   \   000255   E0           MOVX      A,@DPTR
   \   000256   FA           MOV       R2,A
   \   000257   7B00         MOV       R3,#0x0
   \   000259   E8           MOV       A,R0
   \   00025A   2A           ADD       A,R2
   \   00025B   F8           MOV       R0,A
   \   00025C   E9           MOV       A,R1
   \   00025D   3B           ADDC      A,R3
   \   00025E   F9           MOV       R1,A
   \   00025F   E8           MOV       A,R0
   \   000260   243A         ADD       A,#0x3a
   \   000262   FA           MOV       R2,A
   \   000263   E4           CLR       A
   \   000264   39           ADDC      A,R1
   \   000265   FB           MOV       R3,A
   \   000266   12....       LCALL     `??macDataRxMemAlloc::?relay`; Banked call to: macDataRxMemAlloc
   \   000269   90....       MOV       DPTR,#pRxBuf
   \   00026C   EA           MOV       A,R2
   \   00026D   F0           MOVX      @DPTR,A
   \   00026E   A3           INC       DPTR
   \   00026F   EB           MOV       A,R3
   \   000270   F0           MOVX      @DPTR,A
    685            if (pRxBuf == NULL)
   \   000271   90....       MOV       DPTR,#pRxBuf
   \   000274   E0           MOVX      A,@DPTR
   \   000275   F8           MOV       R0,A
   \   000276   A3           INC       DPTR
   \   000277   E0           MOVX      A,@DPTR
   \   000278   F9           MOV       R1,A
   \   000279   E8           MOV       A,R0
   \   00027A   49           ORL       A,R1
   \   00027B   7009         JNZ       ??rxStartIsr_21
    686            {
    687              /* Cancel the outgoing TX ACK */
    688              MAC_RADIO_CANCEL_TX_ACK();
   \   00027D   75E1E8       MOV       0xe1,#-0x18
    689          
    690              /* buffer allocation failed, discard the frame and exit*/
    691              rxDiscardFrame();
   \   000280                ; Setup parameters for call to function rxDiscardFrame
   \   000280   12....       LCALL     `??rxDiscardFrame::?relay`; Banked call to: rxDiscardFrame
    692              return;
   \   000283   02....       LJMP      ??rxStartIsr_3 & 0xFFFF
    693            }
    694          
    695            /*-------------------------------------------------------------------------------
    696             *  Set up to process ACK request.  Do not ACK if in promiscuous mode.
    697             */
    698            ackWithPending = 0;
   \                     ??rxStartIsr_21:
   \   000286   7E00         MOV       R6,#0x0
    699            if (!rxPromiscuousMode)
   \   000288   90....       MOV       DPTR,#rxPromiscuousMode
   \   00028B   E0           MOVX      A,@DPTR
   \   00028C   700A         JNZ       ??rxStartIsr_22
    700            {
    701              macRxOutgoingAckFlag = MAC_ACK_REQUEST(&rxBuf[1]);
   \   00028E   90....       MOV       DPTR,#rxBuf + 1
   \   000291   E0           MOVX      A,@DPTR
   \   000292   5420         ANL       A,#0x20
   \   000294   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   000297   F0           MOVX      @DPTR,A
    702            }
    703          
    704            /*-------------------------------------------------------------------------------
    705             *  Process any ACK request.
    706             */
    707            if (macRxOutgoingAckFlag)
   \                     ??rxStartIsr_22:
   \   000298   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   00029B   E0           MOVX      A,@DPTR
   \   00029C   606A         JZ        ??rxStartIsr_23
    708            {
    709              halIntState_t  s;
    710          
    711              /*
    712               *  This critical section ensures that the callback ISR is initiated within time
    713               *  to guarantee correlation with the strobe.
    714               */
    715              HAL_ENTER_CRITICAL_SECTION(s);
   \   00029E   A2AF         MOV       C,0xa8.7
   \   0002A0   E4           CLR       A
   \   0002A1   33           RLC       A
   \   0002A2   F5..         MOV       ?V0,A
   \   0002A4   C2AF         CLR       0xa8.7
    716          
    717              /* Do not ack data packet with pending more data */
    718              if( MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_COMMAND )
   \   0002A6   90....       MOV       DPTR,#rxBuf + 1
   \   0002A9   E0           MOVX      A,@DPTR
   \   0002AA   5407         ANL       A,#0x7
   \   0002AC   6403         XRL       A,#0x3
   \   0002AE   7024         JNZ       ??rxStartIsr_24
    719              {
    720                if( macRxCheckMACPendingCallback())
   \   0002B0                ; Setup parameters for call to function macRxCheckMACPendingCallback
   \   0002B0   12....       LCALL     `??macRxCheckMACPendingCallback::?relay`; Banked call to: macRxCheckMACPendingCallback
   \   0002B3   E9           MOV       A,R1
   \   0002B4   6004         JZ        ??rxStartIsr_25
    721                {
    722                  /* Check is any mac data pending for end devices */
    723                  ackWithPending = MAC_RX_FLAG_ACK_PENDING;
   \   0002B6   7E04         MOV       R6,#0x4
   \   0002B8   801A         SJMP      ??rxStartIsr_24
    724                }
    725                else
    726                {
    727                  if( macSrcMatchIsEnabled )
   \                     ??rxStartIsr_25:
   \   0002BA   90....       MOV       DPTR,#macSrcMatchIsEnabled
   \   0002BD   E0           MOVX      A,@DPTR
   \   0002BE   600C         JZ        ??rxStartIsr_26
    728                  {
    729                    /* When autopend is enabled, check if allpending is set to true */
    730                    if( MAC_SrcMatchCheckAllPending() == MAC_AUTOACK_PENDING_ALL_ON )
   \   0002C0                ; Setup parameters for call to function MAC_SrcMatchCheckAllPending
   \   0002C0   12....       LCALL     `??MAC_SrcMatchCheckAllPending::?relay`; Banked call to: MAC_SrcMatchCheckAllPending
   \   0002C3   E9           MOV       A,R1
   \   0002C4   64FE         XRL       A,#0xfe
   \   0002C6   700C         JNZ       ??rxStartIsr_24
    731                    {
    732                      ackWithPending = MAC_RX_FLAG_ACK_PENDING;
   \   0002C8   7E04         MOV       R6,#0x4
   \   0002CA   8008         SJMP      ??rxStartIsr_24
    733                    }
    734                  }
    735                  else
    736                  {
    737                    /* When autopend is disabled, check the application pending callback */
    738                    if( macRxCheckPendingCallback() )
   \                     ??rxStartIsr_26:
   \   0002CC                ; Setup parameters for call to function macRxCheckPendingCallback
   \   0002CC   12....       LCALL     `??macRxCheckPendingCallback::?relay`; Banked call to: macRxCheckPendingCallback
   \   0002CF   E9           MOV       A,R1
   \   0002D0   6002         JZ        ??rxStartIsr_24
    739                    {
    740                      ackWithPending = MAC_RX_FLAG_ACK_PENDING;
   \   0002D2   7E04         MOV       R6,#0x4
    741                    }
    742                  }
    743                }
    744              }
    745          
    746              if( ackWithPending == MAC_RX_FLAG_ACK_PENDING )
   \                     ??rxStartIsr_24:
   \   0002D4   7404         MOV       A,#0x4
   \   0002D6   6E           XRL       A,R6
   \   0002D7   7009         JNZ       ??rxStartIsr_27
    747              {
    748                MAC_RADIO_TX_ACK_PEND();
   \   0002D9   90618A       MOV       DPTR,#0x618a
   \   0002DC   E0           MOVX      A,@DPTR
   \   0002DD   D2E2         SETB      0xE0 /* A   */.2
   \   0002DF   F0           MOVX      @DPTR,A
   \   0002E0   8007         SJMP      ??rxStartIsr_28
    749              }
    750              else
    751              {
    752                MAC_RADIO_TX_ACK();
   \                     ??rxStartIsr_27:
   \   0002E2   90618A       MOV       DPTR,#0x618a
   \   0002E5   E0           MOVX      A,@DPTR
   \   0002E6   C2E2         CLR       0xE0 /* A   */.2
   \   0002E8   F0           MOVX      @DPTR,A
    753              }
    754          
    755          
    756              /* request a callback to macRxAckTxDoneCallback() when the ACK transmit has finished */
    757              MAC_RADIO_REQUEST_ACK_TX_DONE_CALLBACK();
   \                     ??rxStartIsr_28:
   \   0002E9   A2AF         MOV       C,0xa8.7
   \   0002EB   E4           CLR       A
   \   0002EC   33           RLC       A
   \   0002ED   F8           MOV       R0,A
   \   0002EE   C2AF         CLR       0xa8.7
   \   0002F0   759B00       MOV       0x9b,#0x0
   \   0002F3   7591FE       MOV       0x91,#-0x2
   \   0002F6   E8           MOV       A,R0
   \   0002F7   A2E0         MOV       C,0xE0 /* A   */.0
   \   0002F9   92AF         MOV       0xa8.7,C
   \   0002FB   9061A4       MOV       DPTR,#0x61a4
   \   0002FE   E0           MOVX      A,@DPTR
   \   0002FF   D2E0         SETB      0xE0 /* A   */.0
   \   000301   F0           MOVX      @DPTR,A
    758              HAL_EXIT_CRITICAL_SECTION(s);
   \   000302   E5..         MOV       A,?V0
   \   000304   A2E0         MOV       C,0xE0 /* A   */.0
   \   000306   92AF         MOV       0xa8.7,C
    759            }
    760          
    761           /*-------------------------------------------------------------------------------
    762            *  Populate the receive buffer going up to high-level.
    763            */
    764          
    765            /* configure the payload buffer
    766             * save MAC header pointer regardless of security status.
    767             */
    768            pRxBuf->mhr.p   = pRxBuf->msdu.p   = (uint8 *) (pRxBuf + 1);
   \                     ??rxStartIsr_23:
   \   000308   90....       MOV       DPTR,#pRxBuf
   \   00030B   E0           MOVX      A,@DPTR
   \   00030C   243A         ADD       A,#0x3a
   \   00030E   F8           MOV       R0,A
   \   00030F   A3           INC       DPTR
   \   000310   E0           MOVX      A,@DPTR
   \   000311   3400         ADDC      A,#0x0
   \   000313   F9           MOV       R1,A
   \   000314   90....       MOV       DPTR,#pRxBuf
   \   000317   E0           MOVX      A,@DPTR
   \   000318   FA           MOV       R2,A
   \   000319   A3           INC       DPTR
   \   00031A   E0           MOVX      A,@DPTR
   \   00031B   F583         MOV       DPH,A
   \   00031D   8A82         MOV       DPL,R2
   \   00031F   A3           INC       DPTR
   \   000320   A3           INC       DPTR
   \   000321   E8           MOV       A,R0
   \   000322   F0           MOVX      @DPTR,A
   \   000323   A3           INC       DPTR
   \   000324   E9           MOV       A,R1
   \   000325   F0           MOVX      @DPTR,A
   \   000326   90....       MOV       DPTR,#pRxBuf
   \   000329   E0           MOVX      A,@DPTR
   \   00032A   F8           MOV       R0,A
   \   00032B   A3           INC       DPTR
   \   00032C   E0           MOVX      A,@DPTR
   \   00032D   F583         MOV       DPH,A
   \   00032F   8882         MOV       DPL,R0
   \   000331   A3           INC       DPTR
   \   000332   A3           INC       DPTR
   \   000333   E0           MOVX      A,@DPTR
   \   000334   F8           MOV       R0,A
   \   000335   A3           INC       DPTR
   \   000336   E0           MOVX      A,@DPTR
   \   000337   F9           MOV       R1,A
   \   000338   90....       MOV       DPTR,#pRxBuf
   \   00033B   E0           MOVX      A,@DPTR
   \   00033C   FA           MOV       R2,A
   \   00033D   A3           INC       DPTR
   \   00033E   E0           MOVX      A,@DPTR
   \   00033F   CA           XCH       A,R2
   \   000340   2433         ADD       A,#0x33
   \   000342   F582         MOV       DPL,A
   \   000344   CA           XCH       A,R2
   \   000345   3400         ADDC      A,#0x0
   \   000347   F583         MOV       DPH,A
   \   000349   E8           MOV       A,R0
   \   00034A   F0           MOVX      @DPTR,A
   \   00034B   A3           INC       DPTR
   \   00034C   E9           MOV       A,R1
   \   00034D   F0           MOVX      @DPTR,A
    769            pRxBuf->mhr.len = pRxBuf->msdu.len =  rxPayloadLen;
   \   00034E   90....       MOV       DPTR,#rxPayloadLen
   \   000351   E0           MOVX      A,@DPTR
   \   000352   C0E0         PUSH      A
   \   000354   90....       MOV       DPTR,#pRxBuf
   \   000357   E0           MOVX      A,@DPTR
   \   000358   F8           MOV       R0,A
   \   000359   A3           INC       DPTR
   \   00035A   E0           MOVX      A,@DPTR
   \   00035B   F583         MOV       DPH,A
   \   00035D   8882         MOV       DPL,R0
   \   00035F   A3           INC       DPTR
   \   000360   A3           INC       DPTR
   \   000361   A3           INC       DPTR
   \   000362   A3           INC       DPTR
   \   000363   D0E0         POP       A
   \   000365   F0           MOVX      @DPTR,A
   \   000366   90....       MOV       DPTR,#pRxBuf
   \   000369   E0           MOVX      A,@DPTR
   \   00036A   F8           MOV       R0,A
   \   00036B   A3           INC       DPTR
   \   00036C   E0           MOVX      A,@DPTR
   \   00036D   F583         MOV       DPH,A
   \   00036F   8882         MOV       DPL,R0
   \   000371   A3           INC       DPTR
   \   000372   A3           INC       DPTR
   \   000373   A3           INC       DPTR
   \   000374   A3           INC       DPTR
   \   000375   E0           MOVX      A,@DPTR
   \   000376   C0E0         PUSH      A
   \   000378   90....       MOV       DPTR,#pRxBuf
   \   00037B   E0           MOVX      A,@DPTR
   \   00037C   F8           MOV       R0,A
   \   00037D   A3           INC       DPTR
   \   00037E   E0           MOVX      A,@DPTR
   \   00037F   C8           XCH       A,R0
   \   000380   2435         ADD       A,#0x35
   \   000382   F582         MOV       DPL,A
   \   000384   C8           XCH       A,R0
   \   000385   3400         ADDC      A,#0x0
   \   000387   F583         MOV       DPH,A
   \   000389   D0E0         POP       A
   \   00038B   F0           MOVX      @DPTR,A
    770          
    771            if (MAC_SEC_ENABLED(&rxBuf[1]))
   \   00038C   90....       MOV       DPTR,#rxBuf + 1
   \   00038F   E0           MOVX      A,@DPTR
   \   000390   A2E3         MOV       C,0xE0 /* A   */.3
   \   000392   4003         JC        $+5
   \   000394   02....       LJMP      ??rxStartIsr_29 & 0xFFFF
    772            {
    773              /* Copy FCF and sequence number to RX buffer */
    774              pRxBuf->mhr.len = MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN;
   \   000397   90....       MOV       DPTR,#pRxBuf
   \   00039A   E0           MOVX      A,@DPTR
   \   00039B   F8           MOV       R0,A
   \   00039C   A3           INC       DPTR
   \   00039D   E0           MOVX      A,@DPTR
   \   00039E   C8           XCH       A,R0
   \   00039F   2435         ADD       A,#0x35
   \   0003A1   F582         MOV       DPL,A
   \   0003A3   C8           XCH       A,R0
   \   0003A4   3400         ADDC      A,#0x0
   \   0003A6   F583         MOV       DPH,A
   \   0003A8   7403         MOV       A,#0x3
   \   0003AA   F0           MOVX      @DPTR,A
    775              osal_memcpy(pRxBuf->mhr.p, &rxBuf[1], pRxBuf->mhr.len);
   \   0003AB                ; Setup parameters for call to function osal_memcpy
   \   0003AB   75....       MOV       ?V0,#(rxBuf + 1) & 0xff
   \   0003AE   75....       MOV       ?V1,#((rxBuf + 1) >> 8) & 0xff
   \   0003B1   75..00       MOV       ?V2,#0x0
   \   0003B4   78..         MOV       R0,#?V0
   \   0003B6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0003B9   90....       MOV       DPTR,#pRxBuf
   \   0003BC   E0           MOVX      A,@DPTR
   \   0003BD   F8           MOV       R0,A
   \   0003BE   A3           INC       DPTR
   \   0003BF   E0           MOVX      A,@DPTR
   \   0003C0   C8           XCH       A,R0
   \   0003C1   2435         ADD       A,#0x35
   \   0003C3   F582         MOV       DPL,A
   \   0003C5   C8           XCH       A,R0
   \   0003C6   3400         ADDC      A,#0x0
   \   0003C8   F583         MOV       DPH,A
   \   0003CA   E0           MOVX      A,@DPTR
   \   0003CB   FC           MOV       R4,A
   \   0003CC   7D00         MOV       R5,#0x0
   \   0003CE   90....       MOV       DPTR,#pRxBuf
   \   0003D1   E0           MOVX      A,@DPTR
   \   0003D2   F8           MOV       R0,A
   \   0003D3   A3           INC       DPTR
   \   0003D4   E0           MOVX      A,@DPTR
   \   0003D5   C8           XCH       A,R0
   \   0003D6   2433         ADD       A,#0x33
   \   0003D8   F582         MOV       DPL,A
   \   0003DA   C8           XCH       A,R0
   \   0003DB   3400         ADDC      A,#0x0
   \   0003DD   F583         MOV       DPH,A
   \   0003DF   E0           MOVX      A,@DPTR
   \   0003E0   FA           MOV       R2,A
   \   0003E1   A3           INC       DPTR
   \   0003E2   E0           MOVX      A,@DPTR
   \   0003E3   FB           MOV       R3,A
   \   0003E4   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0003E7   7403         MOV       A,#0x3
   \   0003E9   12....       LCALL     ?DEALLOC_XSTACK8
    776              pRxBuf->mhr.p += pRxBuf->mhr.len;
   \   0003EC   90....       MOV       DPTR,#pRxBuf
   \   0003EF   E0           MOVX      A,@DPTR
   \   0003F0   F8           MOV       R0,A
   \   0003F1   A3           INC       DPTR
   \   0003F2   E0           MOVX      A,@DPTR
   \   0003F3   C8           XCH       A,R0
   \   0003F4   2435         ADD       A,#0x35
   \   0003F6   F582         MOV       DPL,A
   \   0003F8   C8           XCH       A,R0
   \   0003F9   3400         ADDC      A,#0x0
   \   0003FB   F583         MOV       DPH,A
   \   0003FD   E0           MOVX      A,@DPTR
   \   0003FE   F8           MOV       R0,A
   \   0003FF   7900         MOV       R1,#0x0
   \   000401   90....       MOV       DPTR,#pRxBuf
   \   000404   E0           MOVX      A,@DPTR
   \   000405   FA           MOV       R2,A
   \   000406   A3           INC       DPTR
   \   000407   E0           MOVX      A,@DPTR
   \   000408   CA           XCH       A,R2
   \   000409   2433         ADD       A,#0x33
   \   00040B   F582         MOV       DPL,A
   \   00040D   CA           XCH       A,R2
   \   00040E   3400         ADDC      A,#0x0
   \   000410   F583         MOV       DPH,A
   \   000412   E0           MOVX      A,@DPTR
   \   000413   28           ADD       A,R0
   \   000414   F8           MOV       R0,A
   \   000415   A3           INC       DPTR
   \   000416   E0           MOVX      A,@DPTR
   \   000417   39           ADDC      A,R1
   \   000418   F9           MOV       R1,A
   \   000419   90....       MOV       DPTR,#pRxBuf
   \   00041C   E0           MOVX      A,@DPTR
   \   00041D   FA           MOV       R2,A
   \   00041E   A3           INC       DPTR
   \   00041F   E0           MOVX      A,@DPTR
   \   000420   CA           XCH       A,R2
   \   000421   2433         ADD       A,#0x33
   \   000423   F582         MOV       DPL,A
   \   000425   CA           XCH       A,R2
   \   000426   3400         ADDC      A,#0x0
   \   000428   F583         MOV       DPH,A
   \   00042A   E8           MOV       A,R0
   \   00042B   F0           MOVX      @DPTR,A
   \   00042C   A3           INC       DPTR
   \   00042D   E9           MOV       A,R1
   \   00042E   F0           MOVX      @DPTR,A
    777            }
    778          
    779            /* set internal values */
    780            pRxBuf->mac.srcAddr.addrMode  = srcAddrMode;
   \                     ??rxStartIsr_29:
   \   00042F   E5..         MOV       A,?V4
   \   000431   C0E0         PUSH      A
   \   000433   90....       MOV       DPTR,#pRxBuf
   \   000436   E0           MOVX      A,@DPTR
   \   000437   F8           MOV       R0,A
   \   000438   A3           INC       DPTR
   \   000439   E0           MOVX      A,@DPTR
   \   00043A   C8           XCH       A,R0
   \   00043B   241B         ADD       A,#0x1b
   \   00043D   F582         MOV       DPL,A
   \   00043F   C8           XCH       A,R0
   \   000440   3400         ADDC      A,#0x0
   \   000442   F583         MOV       DPH,A
   \   000444   D0E0         POP       A
   \   000446   F0           MOVX      @DPTR,A
    781            pRxBuf->mac.dstAddr.addrMode  = dstAddrMode;
   \   000447   E5..         MOV       A,?V6
   \   000449   C0E0         PUSH      A
   \   00044B   90....       MOV       DPTR,#pRxBuf
   \   00044E   E0           MOVX      A,@DPTR
   \   00044F   F8           MOV       R0,A
   \   000450   A3           INC       DPTR
   \   000451   E0           MOVX      A,@DPTR
   \   000452   C8           XCH       A,R0
   \   000453   2424         ADD       A,#0x24
   \   000455   F582         MOV       DPL,A
   \   000457   C8           XCH       A,R0
   \   000458   3400         ADDC      A,#0x0
   \   00045A   F583         MOV       DPH,A
   \   00045C   D0E0         POP       A
   \   00045E   F0           MOVX      @DPTR,A
    782            pRxBuf->mac.timestamp         = MAC_RADIO_BACKOFF_CAPTURE();
   \   00045F                ; Setup parameters for call to function macMcuOverflowCapture
   \   00045F   12....       LCALL     `??macMcuOverflowCapture::?relay`; Banked call to: macMcuOverflowCapture
   \   000462   8A..         MOV       ?V0,R2
   \   000464   8B..         MOV       ?V1,R3
   \   000466   8C..         MOV       ?V2,R4
   \   000468   8D..         MOV       ?V3,R5
   \   00046A   90....       MOV       DPTR,#pRxBuf
   \   00046D   E0           MOVX      A,@DPTR
   \   00046E   F8           MOV       R0,A
   \   00046F   A3           INC       DPTR
   \   000470   E0           MOVX      A,@DPTR
   \   000471   C8           XCH       A,R0
   \   000472   2425         ADD       A,#0x25
   \   000474   F582         MOV       DPL,A
   \   000476   C8           XCH       A,R0
   \   000477   3400         ADDC      A,#0x0
   \   000479   F583         MOV       DPH,A
   \   00047B   78..         MOV       R0,#?V0
   \   00047D   12....       LCALL     ?L_MOV_TO_X
    783            pRxBuf->mac.timestamp2        = MAC_RADIO_TIMER_CAPTURE();
   \   000480                ; Setup parameters for call to function macMcuTimerCapture
   \   000480   12....       LCALL     `??macMcuTimerCapture::?relay`; Banked call to: macMcuTimerCapture
   \   000483   8A..         MOV       ?V0,R2
   \   000485   8B..         MOV       ?V1,R3
   \   000487   A8..         MOV       R0,?V0
   \   000489   A9..         MOV       R1,?V1
   \   00048B   90....       MOV       DPTR,#pRxBuf
   \   00048E   E0           MOVX      A,@DPTR
   \   00048F   FA           MOV       R2,A
   \   000490   A3           INC       DPTR
   \   000491   E0           MOVX      A,@DPTR
   \   000492   CA           XCH       A,R2
   \   000493   2429         ADD       A,#0x29
   \   000495   F582         MOV       DPL,A
   \   000497   CA           XCH       A,R2
   \   000498   3400         ADDC      A,#0x0
   \   00049A   F583         MOV       DPH,A
   \   00049C   E8           MOV       A,R0
   \   00049D   F0           MOVX      @DPTR,A
   \   00049E   A3           INC       DPTR
   \   00049F   E9           MOV       A,R1
   \   0004A0   F0           MOVX      @DPTR,A
    784          
    785            /* Special Case for Enhanced Beacon Request which has a different
    786             * frame version
    787             */
    788          #ifdef FEATURE_ENHANCED_BEACON
    789            if( MAC_FRAME_VERSION(&rxBuf[1]) == 2 )
    790            {
    791                pRxBuf->internal.frameType  = MAC_FRAME_TYPE_INTERNAL_MAC_VERSION_E | \
    792                                            MAC_FRAME_TYPE(&rxBuf[1]);
    793            }
    794            else
    795          #endif
    796            {
    797              pRxBuf->internal.frameType  = MAC_FRAME_TYPE(&rxBuf[1]);
   \   0004A1   90....       MOV       DPTR,#rxBuf + 1
   \   0004A4   E0           MOVX      A,@DPTR
   \   0004A5   5407         ANL       A,#0x7
   \   0004A7   C0E0         PUSH      A
   \   0004A9   90....       MOV       DPTR,#pRxBuf
   \   0004AC   E0           MOVX      A,@DPTR
   \   0004AD   F8           MOV       R0,A
   \   0004AE   A3           INC       DPTR
   \   0004AF   E0           MOVX      A,@DPTR
   \   0004B0   F583         MOV       DPH,A
   \   0004B2   8882         MOV       DPL,R0
   \   0004B4   A3           INC       DPTR
   \   0004B5   A3           INC       DPTR
   \   0004B6   A3           INC       DPTR
   \   0004B7   A3           INC       DPTR
   \   0004B8   A3           INC       DPTR
   \   0004B9   D0E0         POP       A
   \   0004BB   F0           MOVX      @DPTR,A
    798            }
    799          
    800            pRxBuf->mac.dsn               = MAC_SEQ_NUMBER(&rxBuf[1]);
   \   0004BC   90....       MOV       DPTR,#rxBuf + 3
   \   0004BF   E0           MOVX      A,@DPTR
   \   0004C0   C0E0         PUSH      A
   \   0004C2   90....       MOV       DPTR,#pRxBuf
   \   0004C5   E0           MOVX      A,@DPTR
   \   0004C6   F8           MOV       R0,A
   \   0004C7   A3           INC       DPTR
   \   0004C8   E0           MOVX      A,@DPTR
   \   0004C9   C8           XCH       A,R0
   \   0004CA   2432         ADD       A,#0x32
   \   0004CC   F582         MOV       DPL,A
   \   0004CE   C8           XCH       A,R0
   \   0004CF   3400         ADDC      A,#0x0
   \   0004D1   F583         MOV       DPH,A
   \   0004D3   D0E0         POP       A
   \   0004D5   F0           MOVX      @DPTR,A
    801            pRxBuf->internal.flags        = INTERNAL_FCF_FLAGS(&rxBuf[1]) | ackWithPending;
   \   0004D6   90....       MOV       DPTR,#rxBuf + 1
   \   0004D9   E0           MOVX      A,@DPTR
   \   0004DA   5478         ANL       A,#0x78
   \   0004DC   F8           MOV       R0,A
   \   0004DD   90....       MOV       DPTR,#rxBuf + 2
   \   0004E0   E0           MOVX      A,@DPTR
   \   0004E1   C4           SWAP      A
   \   0004E2   540F         ANL       A,#0xf
   \   0004E4   5403         ANL       A,#0x3
   \   0004E6   48           ORL       A,R0
   \   0004E7   4E           ORL       A,R6
   \   0004E8   C0E0         PUSH      A
   \   0004EA   90....       MOV       DPTR,#pRxBuf
   \   0004ED   E0           MOVX      A,@DPTR
   \   0004EE   F8           MOV       R0,A
   \   0004EF   A3           INC       DPTR
   \   0004F0   E0           MOVX      A,@DPTR
   \   0004F1   C8           XCH       A,R0
   \   0004F2   2407         ADD       A,#0x7
   \   0004F4   F582         MOV       DPL,A
   \   0004F6   C8           XCH       A,R0
   \   0004F7   3400         ADDC      A,#0x0
   \   0004F9   F583         MOV       DPH,A
   \   0004FB   D0E0         POP       A
   \   0004FD   F0           MOVX      @DPTR,A
    802          
    803            /*-------------------------------------------------------------------------------
    804             *  If the processing the addressing fields does not require more bytes from
    805             *  the FIFO go directly address processing function.  Otherwise, configure
    806             *  interrupt to jump there once bytes are received.
    807             */
    808            if (addrLen == 0)
   \   0004FE   EF           MOV       A,R7
   \   0004FF   700F         JNZ       ??rxStartIsr_30
    809            {
    810              /* no addressing fields to read, prepare for payload interrupts */
    811              pFuncRxState = &rxPayloadIsr;
   \   000501   90....       MOV       DPTR,#pFuncRxState
   \   000504   74..         MOV       A,#`??rxPayloadIsr::?relay` & 0xff
   \   000506   F0           MOVX      @DPTR,A
   \   000507   A3           INC       DPTR
   \   000508   74..         MOV       A,#(`??rxPayloadIsr::?relay` >> 8) & 0xff
   \   00050A   F0           MOVX      @DPTR,A
    812              rxPrepPayload();
   \   00050B                ; Setup parameters for call to function rxPrepPayload
   \   00050B   12....       LCALL     `??rxPrepPayload::?relay`; Banked call to: rxPrepPayload
   \   00050E   802B         SJMP      ??rxStartIsr_3
    813            }
    814            else
    815            {
    816              /* need to read and process addressing fields, prepare for address interrupt */
    817              rxNextLen = addrLen;
   \                     ??rxStartIsr_30:
   \   000510   EF           MOV       A,R7
   \   000511   90....       MOV       DPTR,#rxNextLen
   \   000514   F0           MOVX      @DPTR,A
    818              if (MAC_SEC_ENABLED(&rxBuf[1]))
   \   000515   90....       MOV       DPTR,#rxBuf + 1
   \   000518   E0           MOVX      A,@DPTR
   \   000519   A2E3         MOV       C,0xE0 /* A   */.3
   \   00051B   500A         JNC       ??rxStartIsr_31
    819              {
    820                /* When security is enabled, read off security control field as well */
    821                MAC_RADIO_SET_RX_THRESHOLD(rxNextLen + MAC_SEC_CONTROL_FIELD_LEN);
   \   00051D   90....       MOV       DPTR,#rxNextLen
   \   000520   E0           MOVX      A,@DPTR
   \   000521   906194       MOV       DPTR,#0x6194
   \   000524   F0           MOVX      @DPTR,A
   \   000525   800A         SJMP      ??rxStartIsr_32
    822              }
    823              else
    824              {
    825                MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \                     ??rxStartIsr_31:
   \   000527   90....       MOV       DPTR,#rxNextLen
   \   00052A   E0           MOVX      A,@DPTR
   \   00052B   24FF         ADD       A,#-0x1
   \   00052D   906194       MOV       DPTR,#0x6194
   \   000530   F0           MOVX      @DPTR,A
    826              }
    827              pFuncRxState = &rxAddrIsr;
   \                     ??rxStartIsr_32:
   \   000531   90....       MOV       DPTR,#pFuncRxState
   \   000534   74..         MOV       A,#`??rxAddrIsr::?relay` & 0xff
   \   000536   F0           MOVX      @DPTR,A
   \   000537   A3           INC       DPTR
   \   000538   74..         MOV       A,#(`??rxAddrIsr::?relay` >> 8) & 0xff
   \   00053A   F0           MOVX      @DPTR,A
    828            }
    829          }
   \                     ??rxStartIsr_3:
   \   00053B   7402         MOV       A,#0x2
   \   00053D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000540   7F07         MOV       R7,#0x7
   \   000542   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000545                REQUIRE RFST
   \   000545                REQUIRE _A_IEN0
   \   000545                REQUIRE S1CON
   \   000545                REQUIRE RFIRQF1
    830          
    831          
    832          /*=================================================================================================
    833           * @fn          rxAddrIsr
    834           *
    835           * @brief       Receive ISR state for decoding address.  Reads and stores the address information
    836           *              from the incoming packet.
    837           *
    838           * @param       none
    839           *
    840           * @return      none
    841           *=================================================================================================
    842           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    843          static void rxAddrIsr(void)
   \                     rxAddrIsr:
    844          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    845            uint8 buf[MAX_ADDR_FIELDS_LEN];
    846            uint8 dstAddrMode;
    847            uint8 srcAddrMode;
    848          #ifdef FEATURE_MAC_SECURITY
    849            uint8 securityControl;
    850          #endif /* MAC_SECURITY */
    851            uint8  * p;
    852          
    853            MAC_ASSERT(rxNextLen != 0); /* logic assumes at least one address byte in buffer */
   \   00000A   90....       MOV       DPTR,#rxNextLen
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   7003         JNZ       ??rxAddrIsr_0
   \   000010                ; Setup parameters for call to function halAssertHandler
   \   000010   12....       LCALL     `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    854          
    855            /*  read out address fields into local buffer in one shot */
    856            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
   \                     ??rxAddrIsr_0:
   \   000013                ; Setup parameters for call to function macMemReadRxFifo
   \   000013   90....       MOV       DPTR,#rxNextLen
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F9           MOV       R1,A
   \   000018   AA..         MOV       R2,?XSP + 0
   \   00001A   AB..         MOV       R3,?XSP + 1
   \   00001C   12....       LCALL     `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
    857          
    858            /* set pointer to buffer with addressing fields */
    859            p = buf;
   \   00001F   A8..         MOV       R0,?XSP + 0
   \   000021   A9..         MOV       R1,?XSP + 1
   \   000023   88..         MOV       ?V2,R0
   \   000025   89..         MOV       ?V3,R1
   \   000027   AE..         MOV       R6,?V2
   \   000029   AF..         MOV       R7,?V3
    860          
    861            /* destination address */
    862            dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
   \   00002B   90....       MOV       DPTR,#rxBuf + 2
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   13           RRC       A
   \   000030   13           RRC       A
   \   000031   543F         ANL       A,#0x3f
   \   000033   5403         ANL       A,#0x3
   \   000035   F5..         MOV       ?V0,A
    863            if (dstAddrMode != SADDR_MODE_NONE)
   \   000037   E5..         MOV       A,?V0
   \   000039   7003         JNZ       $+5
   \   00003B   02....       LJMP      ??rxAddrIsr_1 & 0xFFFF
    864            {
    865              pRxBuf->mac.srcPanId = pRxBuf->mac.dstPanId = BUILD_UINT16(p[0], p[1]);
   \   00003E   8E82         MOV       DPL,R6
   \   000040   8F83         MOV       DPH,R7
   \   000042   E0           MOVX      A,@DPTR
   \   000043   FA           MOV       R2,A
   \   000044   7B00         MOV       R3,#0x0
   \   000046   8E82         MOV       DPL,R6
   \   000048   8F83         MOV       DPH,R7
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   F8           MOV       R0,A
   \   00004D   7900         MOV       R1,#0x0
   \   00004F   E4           CLR       A
   \   000050   C8           XCH       A,R0
   \   000051   F9           MOV       R1,A
   \   000052   EA           MOV       A,R2
   \   000053   28           ADD       A,R0
   \   000054   F8           MOV       R0,A
   \   000055   EB           MOV       A,R3
   \   000056   39           ADDC      A,R1
   \   000057   F9           MOV       R1,A
   \   000058   90....       MOV       DPTR,#pRxBuf
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   FA           MOV       R2,A
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   CA           XCH       A,R2
   \   000060   242D         ADD       A,#0x2d
   \   000062   F582         MOV       DPL,A
   \   000064   CA           XCH       A,R2
   \   000065   3400         ADDC      A,#0x0
   \   000067   F583         MOV       DPH,A
   \   000069   E8           MOV       A,R0
   \   00006A   F0           MOVX      @DPTR,A
   \   00006B   A3           INC       DPTR
   \   00006C   E9           MOV       A,R1
   \   00006D   F0           MOVX      @DPTR,A
   \   00006E   90....       MOV       DPTR,#pRxBuf
   \   000071   E0           MOVX      A,@DPTR
   \   000072   F8           MOV       R0,A
   \   000073   A3           INC       DPTR
   \   000074   E0           MOVX      A,@DPTR
   \   000075   C8           XCH       A,R0
   \   000076   242D         ADD       A,#0x2d
   \   000078   F582         MOV       DPL,A
   \   00007A   C8           XCH       A,R0
   \   00007B   3400         ADDC      A,#0x0
   \   00007D   F583         MOV       DPH,A
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   F8           MOV       R0,A
   \   000081   A3           INC       DPTR
   \   000082   E0           MOVX      A,@DPTR
   \   000083   F9           MOV       R1,A
   \   000084   90....       MOV       DPTR,#pRxBuf
   \   000087   E0           MOVX      A,@DPTR
   \   000088   FA           MOV       R2,A
   \   000089   A3           INC       DPTR
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   CA           XCH       A,R2
   \   00008C   242B         ADD       A,#0x2b
   \   00008E   F582         MOV       DPL,A
   \   000090   CA           XCH       A,R2
   \   000091   3400         ADDC      A,#0x0
   \   000093   F583         MOV       DPH,A
   \   000095   E8           MOV       A,R0
   \   000096   F0           MOVX      @DPTR,A
   \   000097   A3           INC       DPTR
   \   000098   E9           MOV       A,R1
   \   000099   F0           MOVX      @DPTR,A
    866              p += MAC_PAN_ID_FIELD_LEN;
   \   00009A   EE           MOV       A,R6
   \   00009B   2402         ADD       A,#0x2
   \   00009D   FE           MOV       R6,A
   \   00009E   5001         JNC       ??rxAddrIsr_2
   \   0000A0   0F           INC       R7
    867              if (dstAddrMode == SADDR_MODE_EXT)
   \                     ??rxAddrIsr_2:
   \   0000A1   7403         MOV       A,#0x3
   \   0000A3   65..         XRL       A,?V0
   \   0000A5   701C         JNZ       ??rxAddrIsr_3
    868              {
    869                sAddrExtCpy(pRxBuf->mac.dstAddr.addr.extAddr, p);
   \   0000A7                ; Setup parameters for call to function sAddrExtCpy
   \   0000A7   EE           MOV       A,R6
   \   0000A8   FC           MOV       R4,A
   \   0000A9   EF           MOV       A,R7
   \   0000AA   FD           MOV       R5,A
   \   0000AB   90....       MOV       DPTR,#pRxBuf
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   241C         ADD       A,#0x1c
   \   0000B1   FA           MOV       R2,A
   \   0000B2   A3           INC       DPTR
   \   0000B3   E0           MOVX      A,@DPTR
   \   0000B4   3400         ADDC      A,#0x0
   \   0000B6   FB           MOV       R3,A
   \   0000B7   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    870                p += MAC_EXT_ADDR_FIELD_LEN;
   \   0000BA   EE           MOV       A,R6
   \   0000BB   2408         ADD       A,#0x8
   \   0000BD   FE           MOV       R6,A
   \   0000BE   503A         JNC       ??rxAddrIsr_1
   \   0000C0   0F           INC       R7
   \   0000C1   8037         SJMP      ??rxAddrIsr_1
    871              }
    872              else
    873              {
    874                pRxBuf->mac.dstAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
   \                     ??rxAddrIsr_3:
   \   0000C3   8E82         MOV       DPL,R6
   \   0000C5   8F83         MOV       DPH,R7
   \   0000C7   E0           MOVX      A,@DPTR
   \   0000C8   FA           MOV       R2,A
   \   0000C9   7B00         MOV       R3,#0x0
   \   0000CB   8E82         MOV       DPL,R6
   \   0000CD   8F83         MOV       DPH,R7
   \   0000CF   A3           INC       DPTR
   \   0000D0   E0           MOVX      A,@DPTR
   \   0000D1   F8           MOV       R0,A
   \   0000D2   7900         MOV       R1,#0x0
   \   0000D4   E4           CLR       A
   \   0000D5   C8           XCH       A,R0
   \   0000D6   F9           MOV       R1,A
   \   0000D7   EA           MOV       A,R2
   \   0000D8   28           ADD       A,R0
   \   0000D9   F8           MOV       R0,A
   \   0000DA   EB           MOV       A,R3
   \   0000DB   39           ADDC      A,R1
   \   0000DC   F9           MOV       R1,A
   \   0000DD   90....       MOV       DPTR,#pRxBuf
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   FA           MOV       R2,A
   \   0000E2   A3           INC       DPTR
   \   0000E3   E0           MOVX      A,@DPTR
   \   0000E4   CA           XCH       A,R2
   \   0000E5   241C         ADD       A,#0x1c
   \   0000E7   F582         MOV       DPL,A
   \   0000E9   CA           XCH       A,R2
   \   0000EA   3400         ADDC      A,#0x0
   \   0000EC   F583         MOV       DPH,A
   \   0000EE   E8           MOV       A,R0
   \   0000EF   F0           MOVX      @DPTR,A
   \   0000F0   A3           INC       DPTR
   \   0000F1   E9           MOV       A,R1
   \   0000F2   F0           MOVX      @DPTR,A
    875                p += MAC_SHORT_ADDR_FIELD_LEN;
   \   0000F3   EE           MOV       A,R6
   \   0000F4   2402         ADD       A,#0x2
   \   0000F6   FE           MOV       R6,A
   \   0000F7   5001         JNC       ??rxAddrIsr_1
   \   0000F9   0F           INC       R7
    876              }
    877            }
    878          
    879            /* sources address */
    880            srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
   \                     ??rxAddrIsr_1:
   \   0000FA   90....       MOV       DPTR,#rxBuf + 2
   \   0000FD   E0           MOVX      A,@DPTR
   \   0000FE   C4           SWAP      A
   \   0000FF   13           RRC       A
   \   000100   13           RRC       A
   \   000101   5403         ANL       A,#0x3
   \   000103   F5..         MOV       ?V1,A
    881            if (srcAddrMode != SADDR_MODE_NONE)
   \   000105   E5..         MOV       A,?V1
   \   000107   7003         JNZ       $+5
   \   000109   02....       LJMP      ??rxAddrIsr_4 & 0xFFFF
    882            {
    883              if (!(pRxBuf->internal.flags & MAC_RX_FLAG_INTRA_PAN))
   \   00010C   90....       MOV       DPTR,#pRxBuf
   \   00010F   E0           MOVX      A,@DPTR
   \   000110   F8           MOV       R0,A
   \   000111   A3           INC       DPTR
   \   000112   E0           MOVX      A,@DPTR
   \   000113   C8           XCH       A,R0
   \   000114   2407         ADD       A,#0x7
   \   000116   F582         MOV       DPL,A
   \   000118   C8           XCH       A,R0
   \   000119   3400         ADDC      A,#0x0
   \   00011B   F583         MOV       DPH,A
   \   00011D   E0           MOVX      A,@DPTR
   \   00011E   A2E6         MOV       C,0xE0 /* A   */.6
   \   000120   4037         JC        ??rxAddrIsr_5
    884              {
    885                pRxBuf->mac.srcPanId = BUILD_UINT16(p[0], p[1]);
   \   000122   8E82         MOV       DPL,R6
   \   000124   8F83         MOV       DPH,R7
   \   000126   E0           MOVX      A,@DPTR
   \   000127   FA           MOV       R2,A
   \   000128   7B00         MOV       R3,#0x0
   \   00012A   8E82         MOV       DPL,R6
   \   00012C   8F83         MOV       DPH,R7
   \   00012E   A3           INC       DPTR
   \   00012F   E0           MOVX      A,@DPTR
   \   000130   F8           MOV       R0,A
   \   000131   7900         MOV       R1,#0x0
   \   000133   E4           CLR       A
   \   000134   C8           XCH       A,R0
   \   000135   F9           MOV       R1,A
   \   000136   EA           MOV       A,R2
   \   000137   28           ADD       A,R0
   \   000138   F8           MOV       R0,A
   \   000139   EB           MOV       A,R3
   \   00013A   39           ADDC      A,R1
   \   00013B   F9           MOV       R1,A
   \   00013C   90....       MOV       DPTR,#pRxBuf
   \   00013F   E0           MOVX      A,@DPTR
   \   000140   FA           MOV       R2,A
   \   000141   A3           INC       DPTR
   \   000142   E0           MOVX      A,@DPTR
   \   000143   CA           XCH       A,R2
   \   000144   242B         ADD       A,#0x2b
   \   000146   F582         MOV       DPL,A
   \   000148   CA           XCH       A,R2
   \   000149   3400         ADDC      A,#0x0
   \   00014B   F583         MOV       DPH,A
   \   00014D   E8           MOV       A,R0
   \   00014E   F0           MOVX      @DPTR,A
   \   00014F   A3           INC       DPTR
   \   000150   E9           MOV       A,R1
   \   000151   F0           MOVX      @DPTR,A
    886                p += MAC_PAN_ID_FIELD_LEN;
   \   000152   EE           MOV       A,R6
   \   000153   2402         ADD       A,#0x2
   \   000155   FE           MOV       R6,A
   \   000156   5001         JNC       ??rxAddrIsr_5
   \   000158   0F           INC       R7
    887              }
    888              if (srcAddrMode == SADDR_MODE_EXT)
   \                     ??rxAddrIsr_5:
   \   000159   7403         MOV       A,#0x3
   \   00015B   65..         XRL       A,?V1
   \   00015D   7015         JNZ       ??rxAddrIsr_6
    889              {
    890                sAddrExtCpy(pRxBuf->mac.srcAddr.addr.extAddr, p);
   \   00015F                ; Setup parameters for call to function sAddrExtCpy
   \   00015F   EE           MOV       A,R6
   \   000160   FC           MOV       R4,A
   \   000161   EF           MOV       A,R7
   \   000162   FD           MOV       R5,A
   \   000163   90....       MOV       DPTR,#pRxBuf
   \   000166   E0           MOVX      A,@DPTR
   \   000167   2413         ADD       A,#0x13
   \   000169   FA           MOV       R2,A
   \   00016A   A3           INC       DPTR
   \   00016B   E0           MOVX      A,@DPTR
   \   00016C   3400         ADDC      A,#0x0
   \   00016E   FB           MOV       R3,A
   \   00016F   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000172   8030         SJMP      ??rxAddrIsr_4
    891              }
    892              else
    893              {
    894                pRxBuf->mac.srcAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
   \                     ??rxAddrIsr_6:
   \   000174   8E82         MOV       DPL,R6
   \   000176   8F83         MOV       DPH,R7
   \   000178   E0           MOVX      A,@DPTR
   \   000179   FA           MOV       R2,A
   \   00017A   7B00         MOV       R3,#0x0
   \   00017C   8E82         MOV       DPL,R6
   \   00017E   8F83         MOV       DPH,R7
   \   000180   A3           INC       DPTR
   \   000181   E0           MOVX      A,@DPTR
   \   000182   F8           MOV       R0,A
   \   000183   7900         MOV       R1,#0x0
   \   000185   E4           CLR       A
   \   000186   C8           XCH       A,R0
   \   000187   F9           MOV       R1,A
   \   000188   EA           MOV       A,R2
   \   000189   28           ADD       A,R0
   \   00018A   F8           MOV       R0,A
   \   00018B   EB           MOV       A,R3
   \   00018C   39           ADDC      A,R1
   \   00018D   F9           MOV       R1,A
   \   00018E   90....       MOV       DPTR,#pRxBuf
   \   000191   E0           MOVX      A,@DPTR
   \   000192   FA           MOV       R2,A
   \   000193   A3           INC       DPTR
   \   000194   E0           MOVX      A,@DPTR
   \   000195   CA           XCH       A,R2
   \   000196   2413         ADD       A,#0x13
   \   000198   F582         MOV       DPL,A
   \   00019A   CA           XCH       A,R2
   \   00019B   3400         ADDC      A,#0x0
   \   00019D   F583         MOV       DPH,A
   \   00019F   E8           MOV       A,R0
   \   0001A0   F0           MOVX      @DPTR,A
   \   0001A1   A3           INC       DPTR
   \   0001A2   E9           MOV       A,R1
   \   0001A3   F0           MOVX      @DPTR,A
    895              }
    896            }
    897          
    898          #ifdef FEATURE_MAC_SECURITY
    899            if (MAC_SEC_ENABLED(&rxBuf[1]))
    900            {
    901              uint8 keyIdMode;
    902          
    903              if (MAC_FRAME_VERSION(&rxBuf[1]) == 0)
    904              {
    905                /* MAC_UNSUPPORTED_LEGACY - Cancel the outgoing TX ACK.
    906                 * It may be too late but we have to try.
    907                 */
    908                MAC_RADIO_CANCEL_TX_ACK();
    909          
    910                /* clean up after unsupported security legacy */
    911                macRxHaltCleanup();
    912                return;
    913              }
    914          
    915              /* Copy addressing fields to RX buffer */
    916              osal_memcpy(pRxBuf->mhr.p, buf, rxNextLen);
    917              pRxBuf->mhr.p   += rxNextLen;
    918              pRxBuf->mhr.len += rxNextLen;
    919          
    920              /*-------------------------------------------------------------------------------
    921               *  Prepare for auxiliary security header interrupts.
    922               */
    923          
    924              /* read out security control field from FIFO (threshold set so bytes are guaranteed to be there) */
    925              MAC_RADIO_READ_RX_FIFO(&securityControl, MAC_SEC_CONTROL_FIELD_LEN);
    926          
    927              /* Copy security fields to MHR buffer */
    928              *pRxBuf->mhr.p   = securityControl;
    929              pRxBuf->mhr.p   += MAC_SEC_CONTROL_FIELD_LEN;
    930              pRxBuf->mhr.len += MAC_SEC_CONTROL_FIELD_LEN;
    931          
    932              /* store security level and key ID mode */
    933              pRxBuf->sec.securityLevel = SECURITY_LEVEL(securityControl);
    934              pRxBuf->sec.keyIdMode = keyIdMode = KEY_IDENTIFIER_MODE(securityControl);
    935          
    936              /* Corrupted RX frame, should never occur. */
    937              if ((keyIdMode > MAC_KEY_ID_MODE_8)
    938              /* Get the next RX length according to AuxLen table minus security control field.
    939               * The security control length is counted already.
    940               */
    941              || ((macKeySourceLen[keyIdMode] + MAC_FRAME_COUNTER_LEN) >= rxPayloadLen)
    942              /* Security Enabled subfield is one, but the Security Level in the header is zero:
    943               * MAC_UNSUPPORTED_SECURITY - Cancel the outgoing TX ACK.
    944               */
    945              || (pRxBuf->sec.securityLevel == MAC_SEC_LEVEL_NONE))
    946              {
    947                /* It may be too late but we have to try. */
    948                MAC_RADIO_CANCEL_TX_ACK();
    949          
    950                /* clean up after unsupported security or corrupted RX frame. */
    951                macRxHaltCleanup();
    952                return;
    953              }
    954          
    955              /* get the next RX length according to AuxLen table minus security control field.
    956               * The sceurity control length is counted already.
    957               */
    958              rxNextLen = macKeySourceLen[keyIdMode] + MAC_FRAME_COUNTER_LEN;
    959              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
    960              pFuncRxState = &rxSecurityHdrIsr;
    961            }
    962            else
    963          #endif /* MAC_SECURITY */
    964            {
    965              /* clear security level */
    966              pRxBuf->sec.securityLevel = MAC_SEC_LEVEL_NONE;
   \                     ??rxAddrIsr_4:
   \   0001A4   90....       MOV       DPTR,#pRxBuf
   \   0001A7   E0           MOVX      A,@DPTR
   \   0001A8   F8           MOV       R0,A
   \   0001A9   A3           INC       DPTR
   \   0001AA   E0           MOVX      A,@DPTR
   \   0001AB   C8           XCH       A,R0
   \   0001AC   2410         ADD       A,#0x10
   \   0001AE   F582         MOV       DPL,A
   \   0001B0   C8           XCH       A,R0
   \   0001B1   3400         ADDC      A,#0x0
   \   0001B3   F583         MOV       DPH,A
   \   0001B5   7400         MOV       A,#0x0
   \   0001B7   F0           MOVX      @DPTR,A
    967          
    968              /*-------------------------------------------------------------------------------
    969               *  Prepare for payload interrupts.
    970               */
    971              pFuncRxState = &rxPayloadIsr;
   \   0001B8   90....       MOV       DPTR,#pFuncRxState
   \   0001BB   74..         MOV       A,#`??rxPayloadIsr::?relay` & 0xff
   \   0001BD   F0           MOVX      @DPTR,A
   \   0001BE   A3           INC       DPTR
   \   0001BF   74..         MOV       A,#(`??rxPayloadIsr::?relay` >> 8) & 0xff
   \   0001C1   F0           MOVX      @DPTR,A
    972              rxPrepPayload();
   \   0001C2                ; Setup parameters for call to function rxPrepPayload
   \   0001C2   12....       LCALL     `??rxPrepPayload::?relay`; Banked call to: rxPrepPayload
    973            }
    974          }
   \   0001C5   7414         MOV       A,#0x14
   \   0001C7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001CA   7F04         MOV       R7,#0x4
   \   0001CC   02....       LJMP      ?BANKED_LEAVE_XDATA
    975          
    976          
    977          #ifdef FEATURE_MAC_SECURITY
    978          /*=================================================================================================
    979           * @fn          rxSecurityHdrIsr
    980           *
    981           * @brief       Receive ISR state for reading out and storing the auxiliary security header.
    982           *
    983           * @param       none
    984           *
    985           * @return      none
    986           *=================================================================================================
    987           */
    988          static void rxSecurityHdrIsr(void)
    989          {
    990            uint8 buf[MAC_FRAME_COUNTER_LEN + MAC_KEY_ID_8_LEN];
    991          
    992            /* read out frame counter and key ID */
    993            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
    994          
    995            /* Incoming frame counter */
    996            pRxBuf->frameCounter = BUILD_UINT32(buf[0], buf[1], buf[2], buf[3]);
    997            if (rxNextLen - MAC_FRAME_COUNTER_LEN > 0)
    998            {
    999              /* Explicit mode */
   1000              osal_memcpy(pRxBuf->sec.keySource, &buf[MAC_FRAME_COUNTER_LEN], rxNextLen - MAC_FRAME_COUNTER_LEN - 1);
   1001              pRxBuf->sec.keyIndex = buf[rxNextLen - MAC_KEY_INDEX_LEN];
   1002            }
   1003          
   1004            /* Copy security fields to RX buffer */
   1005            osal_memcpy(pRxBuf->mhr.p, buf, rxNextLen);
   1006            pRxBuf->mhr.p   += rxNextLen;
   1007            pRxBuf->mhr.len += rxNextLen;
   1008          
   1009            /* Update payload pointer and payload length. The rxPayloadLen includes security header length
   1010             * and SCF byte. The security header and SCF length must be deducted from the rxPayloadLen.
   1011             */
   1012            rxPayloadLen    -= (rxNextLen + MAC_SEC_CONTROL_FIELD_LEN);
   1013            pRxBuf->msdu.len = rxPayloadLen;
   1014            pRxBuf->mhr.len += rxPayloadLen;
   1015          
   1016            /*-------------------------------------------------------------------------------
   1017             *  Prepare for payload interrupts.
   1018             */
   1019            pFuncRxState = &rxPayloadIsr;
   1020            rxPrepPayload();
   1021          }
   1022          #endif /* MAC_SECURITY */
   1023          
   1024          
   1025          /*=================================================================================================
   1026           * @fn          rxPrepPayload
   1027           *
   1028           * @brief       Common code to prepare for the payload ISR.
   1029           *
   1030           * @param       none
   1031           *
   1032           * @return      none
   1033           *=================================================================================================
   1034           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1035          static void rxPrepPayload(void)
   \                     rxPrepPayload:
   1036          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1037            if (rxPayloadLen == 0)
   \   000004   90....       MOV       DPTR,#rxPayloadLen
   \   000007   E0           MOVX      A,@DPTR
   \   000008   7012         JNZ       ??rxPrepPayload_0
   1038            {
   1039              MAC_RADIO_SET_RX_THRESHOLD(MAC_FCS_FIELD_LEN);
   \   00000A   906194       MOV       DPTR,#0x6194
   \   00000D   7401         MOV       A,#0x1
   \   00000F   F0           MOVX      @DPTR,A
   1040              pFuncRxState = &rxFcsIsr;
   \   000010   90....       MOV       DPTR,#pFuncRxState
   \   000013   74..         MOV       A,#`??rxFcsIsr::?relay` & 0xff
   \   000015   F0           MOVX      @DPTR,A
   \   000016   A3           INC       DPTR
   \   000017   74..         MOV       A,#(`??rxFcsIsr::?relay` >> 8) & 0xff
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   8023         SJMP      ??rxPrepPayload_1
   1041            }
   1042            else
   1043            {
   1044              rxNextLen = MIN(rxPayloadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
   \                     ??rxPrepPayload_0:
   \   00001C   90....       MOV       DPTR,#rxPayloadLen
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   C3           CLR       C
   \   000021   9410         SUBB      A,#0x10
   \   000023   500A         JNC       ??rxPrepPayload_2
   \   000025   90....       MOV       DPTR,#rxPayloadLen
   \   000028   E0           MOVX      A,@DPTR
   \   000029   90....       MOV       DPTR,#rxNextLen
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   8006         SJMP      ??rxPrepPayload_3
   \                     ??rxPrepPayload_2:
   \   00002F   90....       MOV       DPTR,#rxNextLen
   \   000032   7410         MOV       A,#0x10
   \   000034   F0           MOVX      @DPTR,A
   1045              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \                     ??rxPrepPayload_3:
   \   000035   90....       MOV       DPTR,#rxNextLen
   \   000038   E0           MOVX      A,@DPTR
   \   000039   24FF         ADD       A,#-0x1
   \   00003B   906194       MOV       DPTR,#0x6194
   \   00003E   F0           MOVX      @DPTR,A
   1046            }
   1047          }
   \                     ??rxPrepPayload_1:
   \   00003F   D083         POP       DPH
   \   000041   D082         POP       DPL
   \   000043   02....       LJMP      ?BRET
   1048          
   1049          
   1050          /*=================================================================================================
   1051           * @fn          rxPayloadIsr
   1052           *
   1053           * @brief       Receive ISR state for reading out and storing the packet payload.
   1054           *
   1055           * @param       none
   1056           *
   1057           * @return      none
   1058           *=================================================================================================
   1059           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1060          static void rxPayloadIsr(void)
   \                     rxPayloadIsr:
   1061          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1062            MAC_RADIO_READ_RX_FIFO(pRxBuf->mhr.p, rxNextLen);
   \   000004                ; Setup parameters for call to function macMemReadRxFifo
   \   000004   90....       MOV       DPTR,#rxNextLen
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   90....       MOV       DPTR,#pRxBuf
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F8           MOV       R0,A
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   C8           XCH       A,R0
   \   000011   2433         ADD       A,#0x33
   \   000013   F582         MOV       DPL,A
   \   000015   C8           XCH       A,R0
   \   000016   3400         ADDC      A,#0x0
   \   000018   F583         MOV       DPH,A
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   FA           MOV       R2,A
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   FB           MOV       R3,A
   \   00001F   12....       LCALL     `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
   1063            pRxBuf->mhr.p += rxNextLen;
   \   000022   90....       MOV       DPTR,#rxNextLen
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F8           MOV       R0,A
   \   000027   7900         MOV       R1,#0x0
   \   000029   90....       MOV       DPTR,#pRxBuf
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   FA           MOV       R2,A
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   CA           XCH       A,R2
   \   000031   2433         ADD       A,#0x33
   \   000033   F582         MOV       DPL,A
   \   000035   CA           XCH       A,R2
   \   000036   3400         ADDC      A,#0x0
   \   000038   F583         MOV       DPH,A
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   28           ADD       A,R0
   \   00003C   F8           MOV       R0,A
   \   00003D   A3           INC       DPTR
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   39           ADDC      A,R1
   \   000040   F9           MOV       R1,A
   \   000041   90....       MOV       DPTR,#pRxBuf
   \   000044   E0           MOVX      A,@DPTR
   \   000045   FA           MOV       R2,A
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   CA           XCH       A,R2
   \   000049   2433         ADD       A,#0x33
   \   00004B   F582         MOV       DPL,A
   \   00004D   CA           XCH       A,R2
   \   00004E   3400         ADDC      A,#0x0
   \   000050   F583         MOV       DPH,A
   \   000052   E8           MOV       A,R0
   \   000053   F0           MOVX      @DPTR,A
   \   000054   A3           INC       DPTR
   \   000055   E9           MOV       A,R1
   \   000056   F0           MOVX      @DPTR,A
   1064          
   1065            rxPayloadLen -= rxNextLen;
   \   000057   90....       MOV       DPTR,#rxNextLen
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   F8           MOV       R0,A
   \   00005C   90....       MOV       DPTR,#rxPayloadLen
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   C3           CLR       C
   \   000061   98           SUBB      A,R0
   \   000062   F0           MOVX      @DPTR,A
   1066          
   1067            rxPrepPayload();
   \   000063                ; Setup parameters for call to function rxPrepPayload
   \   000063   12....       LCALL     `??rxPrepPayload::?relay`; Banked call to: rxPrepPayload
   1068          }
   \   000066   D083         POP       DPH
   \   000068   D082         POP       DPL
   \   00006A   02....       LJMP      ?BRET
   1069          
   1070          
   1071          /*=================================================================================================
   1072           * @fn          rxFcsIsr
   1073           *
   1074           * @brief       Receive ISR state for handling the FCS.
   1075           *
   1076           * @param       none
   1077           *
   1078           * @return      none
   1079           *=================================================================================================
   1080           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1081          static void rxFcsIsr(void)
   \                     rxFcsIsr:
   1082          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1083            uint8 crcOK;
   1084            uint8 ackWithPending = 0;
   \   000005   7E00         MOV       R6,#0x0
   1085          
   1086            /* read FCS, rxBuf is now available storage */
   1087            MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_FCS_FIELD_LEN);
   \   000007                ; Setup parameters for call to function macMemReadRxFifo
   \   000007   7902         MOV       R1,#0x2
   \   000009   7A..         MOV       R2,#rxBuf & 0xff
   \   00000B   7B..         MOV       R3,#(rxBuf >> 8) & 0xff
   \   00000D   12....       LCALL     `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
   1088          
   1089            /*
   1090             *  The FCS has actually been replaced within the radio by a proprietary version of the FCS.
   1091             *  This proprietary FCS is two bytes (same length as the real FCS) and contains:
   1092             *    1) the RSSI value
   1093             *    2) the average correlation value (used for LQI)
   1094             *    3) a CRC passed bit
   1095             */
   1096          
   1097            /* save the "CRC-is-OK" status */
   1098            crcOK = PROPRIETARY_FCS_CRC_OK(rxBuf);
   \   000010   90....       MOV       DPTR,#rxBuf + 1
   \   000013   E0           MOVX      A,@DPTR
   \   000014   5480         ANL       A,#0x80
   \   000016   F5..         MOV       ?V1,A
   1099          
   1100            /*
   1101             *  See if the frame should be passed up to high-level MAC.  If the CRC is OK, the
   1102             *  the frame is always passed up.  Frames with a bad CRC are also passed up *if*
   1103             *  a special variant of promiscuous mode is active.
   1104             */
   1105            if (crcOK || (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC))
   \   000018   E5..         MOV       A,?V1
   \   00001A   700B         JNZ       ??rxFcsIsr_0
   \   00001C   90....       MOV       DPTR,#rxPromiscuousMode
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6402         XRL       A,#0x2
   \   000022   6003         JZ        $+5
   \   000024   02....       LJMP      ??rxFcsIsr_1 & 0xFFFF
   1106            {
   1107              int8 rssiDbm;
   1108              uint8 corr;
   1109          
   1110          #ifdef FEATURE_SYSTEM_STATS
   1111              /* Increment diagnostic CRC success counter */
   1112              macLowLevelDiags( MAC_DIAGS_RX_CRC_PASS );
   1113          #endif /* FEATURE_SYSTEM_STATS */
   1114          
   1115              /*
   1116               *  As power saving optimization, set state variable to indicate physical receive
   1117               *  has completed and then request turning of the receiver.  This means the receiver
   1118               *  can be off (if other conditions permit) during execution of the callback function.
   1119               *
   1120               *  The receiver will be requested to turn off once again at the end of the receive
   1121               *  logic.  There is no harm in doing this.
   1122               */
   1123              macRxActive = MAC_RX_ACTIVE_DONE;
   \                     ??rxFcsIsr_0:
   \   000027   90....       MOV       DPTR,#macRxActive
   \   00002A   7402         MOV       A,#0x2
   \   00002C   F0           MOVX      @DPTR,A
   1124              macRxOffRequest();
   \   00002D                ; Setup parameters for call to function macRxOffRequest
   \   00002D   12....       LCALL     `??macRxOffRequest::?relay`; Banked call to: macRxOffRequest
   1125          
   1126              /* decode RSSI and correlation values */
   1127              rssiDbm = PROPRIETARY_FCS_RSSI(rxBuf) + MAC_RADIO_RSSI_OFFSET;
   \   000030   90....       MOV       DPTR,#rxBuf
   \   000033   E0           MOVX      A,@DPTR
   \   000034   24B7         ADD       A,#-0x49
   \   000036   FF           MOV       R7,A
   1128              MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
   1129              corr = PROPRIETARY_FCS_CORRELATION_VALUE(rxBuf);
   \   000037   90....       MOV       DPTR,#rxBuf + 1
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   547F         ANL       A,#0x7f
   \   00003D   F5..         MOV       ?V0,A
   1130          
   1131              /* record parameters that get passed up to high-level */
   1132              pRxBuf->mac.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
   \   00003F                ; Setup parameters for call to function macRadioComputeLQI
   \   00003F   AA..         MOV       R2,?V0
   \   000041   EF           MOV       A,R7
   \   000042   F9           MOV       R1,A
   \   000043   12....       LCALL     `??macRadioComputeLQI::?relay`; Banked call to: macRadioComputeLQI
   \   000046   E9           MOV       A,R1
   \   000047   C0E0         PUSH      A
   \   000049   90....       MOV       DPTR,#pRxBuf
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   F8           MOV       R0,A
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   C8           XCH       A,R0
   \   000051   242F         ADD       A,#0x2f
   \   000053   F582         MOV       DPL,A
   \   000055   C8           XCH       A,R0
   \   000056   3400         ADDC      A,#0x0
   \   000058   F583         MOV       DPH,A
   \   00005A   D0E0         POP       A
   \   00005C   F0           MOVX      @DPTR,A
   1133              pRxBuf->mac.rssi = rssiDbm;
   \   00005D   EF           MOV       A,R7
   \   00005E   C0E0         PUSH      A
   \   000060   90....       MOV       DPTR,#pRxBuf
   \   000063   E0           MOVX      A,@DPTR
   \   000064   F8           MOV       R0,A
   \   000065   A3           INC       DPTR
   \   000066   E0           MOVX      A,@DPTR
   \   000067   C8           XCH       A,R0
   \   000068   2431         ADD       A,#0x31
   \   00006A   F582         MOV       DPL,A
   \   00006C   C8           XCH       A,R0
   \   00006D   3400         ADDC      A,#0x0
   \   00006F   F583         MOV       DPH,A
   \   000071   D0E0         POP       A
   \   000073   F0           MOVX      @DPTR,A
   1134              pRxBuf->mac.correlation = corr;
   \   000074   E5..         MOV       A,?V0
   \   000076   C0E0         PUSH      A
   \   000078   90....       MOV       DPTR,#pRxBuf
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   F8           MOV       R0,A
   \   00007D   A3           INC       DPTR
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   C8           XCH       A,R0
   \   000080   2430         ADD       A,#0x30
   \   000082   F582         MOV       DPL,A
   \   000084   C8           XCH       A,R0
   \   000085   3400         ADDC      A,#0x0
   \   000087   F583         MOV       DPH,A
   \   000089   D0E0         POP       A
   \   00008B   F0           MOVX      @DPTR,A
   1135          
   1136              /* set the MSDU pointer to point at start of data */
   1137              pRxBuf->mhr.p   = (uint8 *) (pRxBuf + 1);
   \   00008C   90....       MOV       DPTR,#pRxBuf
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   243A         ADD       A,#0x3a
   \   000092   F8           MOV       R0,A
   \   000093   A3           INC       DPTR
   \   000094   E0           MOVX      A,@DPTR
   \   000095   3400         ADDC      A,#0x0
   \   000097   F9           MOV       R1,A
   \   000098   90....       MOV       DPTR,#pRxBuf
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   FA           MOV       R2,A
   \   00009D   A3           INC       DPTR
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   CA           XCH       A,R2
   \   0000A0   2433         ADD       A,#0x33
   \   0000A2   F582         MOV       DPL,A
   \   0000A4   CA           XCH       A,R2
   \   0000A5   3400         ADDC      A,#0x0
   \   0000A7   F583         MOV       DPH,A
   \   0000A9   E8           MOV       A,R0
   \   0000AA   F0           MOVX      @DPTR,A
   \   0000AB   A3           INC       DPTR
   \   0000AC   E9           MOV       A,R1
   \   0000AD   F0           MOVX      @DPTR,A
   1138              pRxBuf->msdu.p += (pRxBuf->mhr.len - pRxBuf->msdu.len);
   \   0000AE   90....       MOV       DPTR,#pRxBuf
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   F8           MOV       R0,A
   \   0000B3   A3           INC       DPTR
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   C8           XCH       A,R0
   \   0000B6   2435         ADD       A,#0x35
   \   0000B8   F582         MOV       DPL,A
   \   0000BA   C8           XCH       A,R0
   \   0000BB   3400         ADDC      A,#0x0
   \   0000BD   F583         MOV       DPH,A
   \   0000BF   E0           MOVX      A,@DPTR
   \   0000C0   F8           MOV       R0,A
   \   0000C1   7900         MOV       R1,#0x0
   \   0000C3   90....       MOV       DPTR,#pRxBuf
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   FA           MOV       R2,A
   \   0000C8   A3           INC       DPTR
   \   0000C9   E0           MOVX      A,@DPTR
   \   0000CA   F583         MOV       DPH,A
   \   0000CC   8A82         MOV       DPL,R2
   \   0000CE   A3           INC       DPTR
   \   0000CF   A3           INC       DPTR
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   FA           MOV       R2,A
   \   0000D4   7B00         MOV       R3,#0x0
   \   0000D6   E8           MOV       A,R0
   \   0000D7   C3           CLR       C
   \   0000D8   9A           SUBB      A,R2
   \   0000D9   F8           MOV       R0,A
   \   0000DA   E9           MOV       A,R1
   \   0000DB   9B           SUBB      A,R3
   \   0000DC   F9           MOV       R1,A
   \   0000DD   90....       MOV       DPTR,#pRxBuf
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   FA           MOV       R2,A
   \   0000E2   A3           INC       DPTR
   \   0000E3   E0           MOVX      A,@DPTR
   \   0000E4   F583         MOV       DPH,A
   \   0000E6   8A82         MOV       DPL,R2
   \   0000E8   A3           INC       DPTR
   \   0000E9   A3           INC       DPTR
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   28           ADD       A,R0
   \   0000EC   F8           MOV       R0,A
   \   0000ED   A3           INC       DPTR
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   39           ADDC      A,R1
   \   0000F0   F9           MOV       R1,A
   \   0000F1   90....       MOV       DPTR,#pRxBuf
   \   0000F4   E0           MOVX      A,@DPTR
   \   0000F5   FA           MOV       R2,A
   \   0000F6   A3           INC       DPTR
   \   0000F7   E0           MOVX      A,@DPTR
   \   0000F8   F583         MOV       DPH,A
   \   0000FA   8A82         MOV       DPL,R2
   \   0000FC   A3           INC       DPTR
   \   0000FD   A3           INC       DPTR
   \   0000FE   E8           MOV       A,R0
   \   0000FF   F0           MOVX      @DPTR,A
   \   000100   A3           INC       DPTR
   \   000101   E9           MOV       A,R1
   \   000102   F0           MOVX      @DPTR,A
   1139          
   1140              if ((pRxBuf->internal.flags & MAC_RX_FLAG_ACK_PENDING) && (*pRxBuf->msdu.p != MAC_DATA_REQ_FRAME))
   \   000103   90....       MOV       DPTR,#pRxBuf
   \   000106   E0           MOVX      A,@DPTR
   \   000107   F8           MOV       R0,A
   \   000108   A3           INC       DPTR
   \   000109   E0           MOVX      A,@DPTR
   \   00010A   C8           XCH       A,R0
   \   00010B   2407         ADD       A,#0x7
   \   00010D   F582         MOV       DPL,A
   \   00010F   C8           XCH       A,R0
   \   000110   3400         ADDC      A,#0x0
   \   000112   F583         MOV       DPH,A
   \   000114   E0           MOVX      A,@DPTR
   \   000115   A2E2         MOV       C,0xE0 /* A   */.2
   \   000117   5021         JNC       ??rxFcsIsr_2
   \   000119   90....       MOV       DPTR,#pRxBuf
   \   00011C   E0           MOVX      A,@DPTR
   \   00011D   F8           MOV       R0,A
   \   00011E   A3           INC       DPTR
   \   00011F   E0           MOVX      A,@DPTR
   \   000120   F583         MOV       DPH,A
   \   000122   8882         MOV       DPL,R0
   \   000124   A3           INC       DPTR
   \   000125   A3           INC       DPTR
   \   000126   E0           MOVX      A,@DPTR
   \   000127   F8           MOV       R0,A
   \   000128   A3           INC       DPTR
   \   000129   E0           MOVX      A,@DPTR
   \   00012A   F583         MOV       DPH,A
   \   00012C   8882         MOV       DPL,R0
   \   00012E   E0           MOVX      A,@DPTR
   \   00012F   6404         XRL       A,#0x4
   \   000131   6007         JZ        ??rxFcsIsr_2
   1141              {
   1142                /* For non-data request commands, cancel the pending bit in the ACK. */
   1143                MAC_RADIO_TX_ACK();
   \   000133   90618A       MOV       DPTR,#0x618a
   \   000136   E0           MOVX      A,@DPTR
   \   000137   C2E2         CLR       0xE0 /* A   */.2
   \   000139   F0           MOVX      @DPTR,A
   1144              }
   1145          
   1146              /* Read the source matching result back */
   1147              if( macSrcMatchIsEnabled && MAC_RADIO_SRC_MATCH_RESULT() )
   \                     ??rxFcsIsr_2:
   \   00013A   90....       MOV       DPTR,#macSrcMatchIsEnabled
   \   00013D   E0           MOVX      A,@DPTR
   \   00013E   6008         JZ        ??rxFcsIsr_3
   \   000140                ; Setup parameters for call to function MAC_SrcMatchCheckResult
   \   000140   12....       LCALL     `??MAC_SrcMatchCheckResult::?relay`; Banked call to: MAC_SrcMatchCheckResult
   \   000143   E9           MOV       A,R1
   \   000144   6002         JZ        ??rxFcsIsr_3
   1148              {
   1149                /* This result will not overwrite the previously determined pRxBuf->internal.flags */
   1150                ackWithPending = MAC_RX_FLAG_ACK_PENDING;
   \   000146   7E04         MOV       R6,#0x4
   1151              }
   1152              pRxBuf->internal.flags |= ( crcOK | ackWithPending );
   \                     ??rxFcsIsr_3:
   \   000148   E5..         MOV       A,?V1
   \   00014A   4E           ORL       A,R6
   \   00014B   F8           MOV       R0,A
   \   00014C   90....       MOV       DPTR,#pRxBuf
   \   00014F   E0           MOVX      A,@DPTR
   \   000150   F9           MOV       R1,A
   \   000151   A3           INC       DPTR
   \   000152   E0           MOVX      A,@DPTR
   \   000153   C9           XCH       A,R1
   \   000154   2407         ADD       A,#0x7
   \   000156   F582         MOV       DPL,A
   \   000158   C9           XCH       A,R1
   \   000159   3400         ADDC      A,#0x0
   \   00015B   F583         MOV       DPH,A
   \   00015D   E0           MOVX      A,@DPTR
   \   00015E   48           ORL       A,R0
   \   00015F   F0           MOVX      @DPTR,A
   1153          
   1154              /* finally... execute callback function */
   1155              macRxCompleteCallback(pRxBuf);
   \   000160                ; Setup parameters for call to function macRxCompleteCallback
   \   000160   90....       MOV       DPTR,#pRxBuf
   \   000163   E0           MOVX      A,@DPTR
   \   000164   FA           MOV       R2,A
   \   000165   A3           INC       DPTR
   \   000166   E0           MOVX      A,@DPTR
   \   000167   FB           MOV       R3,A
   \   000168   12....       LCALL     `??macRxCompleteCallback::?relay`; Banked call to: macRxCompleteCallback
   1156              pRxBuf = NULL; /* needed to indicate buffer is no longer allocated */
   \   00016B   90....       MOV       DPTR,#pRxBuf
   \   00016E   7400         MOV       A,#0x0
   \   000170   F0           MOVX      @DPTR,A
   \   000171   A3           INC       DPTR
   \   000172   7400         MOV       A,#0x0
   \   000174   F0           MOVX      @DPTR,A
   \   000175   801F         SJMP      ??rxFcsIsr_4
   1157            }
   1158            else
   1159            {
   1160          #ifdef FEATURE_SYSTEM_STATS
   1161              /* Increment diagnostic CRC failure counter */
   1162              macLowLevelDiags( MAC_DIAGS_RX_CRC_FAIL );
   1163          #endif /* FEATURE_SYSTEM_STATS */
   1164          
   1165              /*
   1166               *  The CRC is bad so no ACK was sent.  Cancel any callback and clear the flag.
   1167               *  (It's OK to cancel the outgoing ACK even if an ACK was not requested.  It's
   1168               *  slightly more efficient to do so.)
   1169               */
   1170              MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \                     ??rxFcsIsr_1:
   \   000177   9061A4       MOV       DPTR,#0x61a4
   \   00017A   E0           MOVX      A,@DPTR
   \   00017B   C2E0         CLR       0xE0 /* A   */.0
   \   00017D   F0           MOVX      @DPTR,A
   1171              macRxOutgoingAckFlag = 0;
   \   00017E   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   000181   7400         MOV       A,#0x0
   \   000183   F0           MOVX      @DPTR,A
   1172          
   1173              /* the CRC failed so the packet must be discarded */
   1174              MEM_FREE((uint8 **)&pRxBuf);
   \   000184                ; Setup parameters for call to function macDataRxMemFree
   \   000184   7A..         MOV       R2,#pRxBuf & 0xff
   \   000186   7B..         MOV       R3,#(pRxBuf >> 8) & 0xff
   \   000188   12....       LCALL     `??macDataRxMemFree::?relay`; Banked call to: macDataRxMemFree
   \   00018B   E9           MOV       A,R1
   1175              pRxBuf = NULL;  /* needed to indicate buffer is no longer allocated */
   \   00018C   90....       MOV       DPTR,#pRxBuf
   \   00018F   7400         MOV       A,#0x0
   \   000191   F0           MOVX      @DPTR,A
   \   000192   A3           INC       DPTR
   \   000193   7400         MOV       A,#0x0
   \   000195   F0           MOVX      @DPTR,A
   1176            }
   1177          
   1178            /* reset threshold level, reset receive state, and complete receive logic */
   1179            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \                     ??rxFcsIsr_4:
   \   000196   906194       MOV       DPTR,#0x6194
   \   000199   7405         MOV       A,#0x5
   \   00019B   F0           MOVX      @DPTR,A
   1180            pFuncRxState = &rxStartIsr;
   \   00019C   90....       MOV       DPTR,#pFuncRxState
   \   00019F   74..         MOV       A,#`??rxStartIsr::?relay` & 0xff
   \   0001A1   F0           MOVX      @DPTR,A
   \   0001A2   A3           INC       DPTR
   \   0001A3   74..         MOV       A,#(`??rxStartIsr::?relay` >> 8) & 0xff
   \   0001A5   F0           MOVX      @DPTR,A
   1181            rxDone();
   \   0001A6                ; Setup parameters for call to function rxDone
   \   0001A6   12....       LCALL     `??rxDone::?relay`; Banked call to: rxDone
   1182          }
   \   0001A9   7F02         MOV       R7,#0x2
   \   0001AB   02....       LJMP      ?BANKED_LEAVE_XDATA
   1183          
   1184          
   1185          /*=================================================================================================
   1186           * @fn          rxDone
   1187           *
   1188           * @brief       Common exit point for receive.
   1189           *
   1190           * @param       none
   1191           *
   1192           * @return      none
   1193           *=================================================================================================
   1194           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1195          static void rxDone(void)
   \                     rxDone:
   1196          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1197            /* if the receive FIFO has overflowed, flush it here */
   1198            if (MAC_RADIO_RX_FIFO_HAS_OVERFLOWED())
   \   000004   906193       MOV       DPTR,#0x6193
   \   000007   E0           MOVX      A,@DPTR
   \   000008   A2E6         MOV       C,0xE0 /* A   */.6
   \   00000A   500E         JNC       ??rxDone_0
   \   00000C   906193       MOV       DPTR,#0x6193
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   A2E7         MOV       C,0xE0 /* A   */.7
   \   000012   4006         JC        ??rxDone_0
   1199            {
   1200              MAC_RADIO_FLUSH_RX_FIFO();
   \   000014   75E1ED       MOV       0xe1,#-0x13
   \   000017   75E1ED       MOV       0xe1,#-0x13
   1201            }
   1202          
   1203            /* mark receive as inactive */
   1204            macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxDone_0:
   \   00001A   90....       MOV       DPTR,#macRxActive
   \   00001D   7400         MOV       A,#0x0
   \   00001F   F0           MOVX      @DPTR,A
   1205          
   1206            /* if there is no outgoing ACK, run the post receive updates */
   1207            if (!macRxOutgoingAckFlag)
   \   000020   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   000023   E0           MOVX      A,@DPTR
   \   000024   7003         JNZ       ??rxDone_1
   1208            {
   1209              rxPostRxUpdates();
   \   000026                ; Setup parameters for call to function rxPostRxUpdates
   \   000026   12....       LCALL     `??rxPostRxUpdates::?relay`; Banked call to: rxPostRxUpdates
   1210            }
   1211          }
   \                     ??rxDone_1:
   \   000029   D083         POP       DPH
   \   00002B   D082         POP       DPL
   \   00002D   02....       LJMP      ?BRET
   \   000030                REQUIRE RFST
   1212          
   1213          
   1214          /**************************************************************************************************
   1215           * @fn          macRxAckTxDoneCallback
   1216           *
   1217           * @brief       Function called when the outoing ACK has completed transmitting.
   1218           *
   1219           * @param       none
   1220           *
   1221           * @return      none
   1222           **************************************************************************************************
   1223           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1224          void macRxAckTxDoneCallback(void)
   \                     macRxAckTxDoneCallback:
   1225          {  
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1226            macRxOutgoingAckFlag = 0;
   \   000004   90....       MOV       DPTR,#macRxOutgoingAckFlag
   \   000007   7400         MOV       A,#0x0
   \   000009   F0           MOVX      @DPTR,A
   1227          
   1228          #ifdef ACK_DONE_ISR_WORKAROUND
   1229            macTimerCancel(&macTxAckIsrTimer);
   1230          #endif /* ACK_DONE_ISR_WROKAROUND */
   1231          
   1232            /*
   1233             *  With certain interrupt priorities and timing conditions, it is possible this callback
   1234             *  could be executed before the primary receive logic completes.  To prevent this, the
   1235             *  post updates are only executed if receive logic is no longer active.  In the case the
   1236             *  post updates are not executed here, they will execute when the main receive logic
   1237             *  completes.
   1238             */
   1239            if (!macRxActive)
   \   00000A   90....       MOV       DPTR,#macRxActive
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   7003         JNZ       ??macRxAckTxDoneCallback_0
   1240            {
   1241              rxPostRxUpdates();
   \   000010                ; Setup parameters for call to function rxPostRxUpdates
   \   000010   12....       LCALL     `??rxPostRxUpdates::?relay`; Banked call to: rxPostRxUpdates
   1242            }
   1243          }
   \                     ??macRxAckTxDoneCallback_0:
   \   000013   D083         POP       DPH
   \   000015   D082         POP       DPL
   \   000017   02....       LJMP      ?BRET
   1244          
   1245          
   1246          /*=================================================================================================
   1247           * @fn          rxPostRxUpdates
   1248           *
   1249           * @brief       Updates that need to be performed once receive is complete.
   1250           *
   1251           *              It is not fatal to execute this function if somehow receive is active.  Under
   1252           *              certain timing/interrupt conditions a new receive may have started before this
   1253           *              function executes.  This should happen very rarely (if it happens at all) and
   1254           *              would cause no problems.
   1255           *
   1256           * @param       none
   1257           *
   1258           * @return      none
   1259           *=================================================================================================
   1260           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1261          static void rxPostRxUpdates(void)
   \                     rxPostRxUpdates:
   1262          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1263            /* turn off receiver if permitted */
   1264            macRxOffRequest();
   \   000004                ; Setup parameters for call to function macRxOffRequest
   \   000004   12....       LCALL     `??macRxOffRequest::?relay`; Banked call to: macRxOffRequest
   1265          
   1266            /* update the transmit power, update may have been blocked by transmit of outgoing ACK */
   1267            macRadioUpdateTxPower();
   \   000007                ; Setup parameters for call to function macRadioUpdateTxPower
   \   000007   12....       LCALL     `??macRadioUpdateTxPower::?relay`; Banked call to: macRadioUpdateTxPower
   1268          
   1269            /* initiate and transmit that was queued during receive */
   1270            macTxStartQueuedFrame();
   \   00000A                ; Setup parameters for call to function macTxStartQueuedFrame
   \   00000A   12....       LCALL     `??macTxStartQueuedFrame::?relay`; Banked call to: macTxStartQueuedFrame
   1271          }
   \   00000D   D083         POP       DPH
   \   00000F   D082         POP       DPL
   \   000011   02....       LJMP      ?BRET
   1272          
   1273          
   1274          /*=================================================================================================
   1275           * @fn          rxDiscardFrame
   1276           *
   1277           * @brief       Initializes for discarding a packet.  Must be called before ACK is strobed.
   1278           *
   1279           * @param       none
   1280           *
   1281           * @return      none
   1282           *=================================================================================================
   1283           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1284          static void rxDiscardFrame(void)
   \                     rxDiscardFrame:
   1285          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1286            MAC_ASSERT(pFuncRxState == &rxStartIsr); /* illegal state for calling discard frame function */
   \   000004   90....       MOV       DPTR,#pFuncRxState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   64..         XRL       A,#`??rxStartIsr::?relay` & 0xff
   \   00000A   7004         JNZ       ??rxDiscardFrame_0
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   64..         XRL       A,#(`??rxStartIsr::?relay` >> 8) & 0xff
   \                     ??rxDiscardFrame_0:
   \   000010   6003         JZ        ??rxDiscardFrame_1
   \   000012                ; Setup parameters for call to function halAssertHandler
   \   000012   12....       LCALL     `??halAssertHandler::?relay`; Banked call to: halAssertHandler
   1287          
   1288            if (rxUnreadLen == 0)
   \                     ??rxDiscardFrame_1:
   \   000015   90....       MOV       DPTR,#rxUnreadLen
   \   000018   E0           MOVX      A,@DPTR
   \   000019   7005         JNZ       ??rxDiscardFrame_2
   1289            {
   1290              rxDone();
   \   00001B                ; Setup parameters for call to function rxDone
   \   00001B   12....       LCALL     `??rxDone::?relay`; Banked call to: rxDone
   \   00001E   802D         SJMP      ??rxDiscardFrame_3
   1291            }
   1292            else
   1293            {
   1294              rxNextLen = MIN(rxUnreadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
   \                     ??rxDiscardFrame_2:
   \   000020   90....       MOV       DPTR,#rxUnreadLen
   \   000023   E0           MOVX      A,@DPTR
   \   000024   C3           CLR       C
   \   000025   9410         SUBB      A,#0x10
   \   000027   500A         JNC       ??rxDiscardFrame_4
   \   000029   90....       MOV       DPTR,#rxUnreadLen
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   90....       MOV       DPTR,#rxNextLen
   \   000030   F0           MOVX      @DPTR,A
   \   000031   8006         SJMP      ??rxDiscardFrame_5
   \                     ??rxDiscardFrame_4:
   \   000033   90....       MOV       DPTR,#rxNextLen
   \   000036   7410         MOV       A,#0x10
   \   000038   F0           MOVX      @DPTR,A
   1295              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \                     ??rxDiscardFrame_5:
   \   000039   90....       MOV       DPTR,#rxNextLen
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   24FF         ADD       A,#-0x1
   \   00003F   906194       MOV       DPTR,#0x6194
   \   000042   F0           MOVX      @DPTR,A
   1296              pFuncRxState = &rxDiscardIsr;
   \   000043   90....       MOV       DPTR,#pFuncRxState
   \   000046   74..         MOV       A,#`??rxDiscardIsr::?relay` & 0xff
   \   000048   F0           MOVX      @DPTR,A
   \   000049   A3           INC       DPTR
   \   00004A   74..         MOV       A,#(`??rxDiscardIsr::?relay` >> 8) & 0xff
   \   00004C   F0           MOVX      @DPTR,A
   1297            }
   1298          }
   \                     ??rxDiscardFrame_3:
   \   00004D   D083         POP       DPH
   \   00004F   D082         POP       DPL
   \   000051   02....       LJMP      ?BRET
   1299          
   1300          
   1301          /*=================================================================================================
   1302           * @fn          rxDiscardIsr
   1303           *
   1304           * @brief       Receive ISR state for discarding a packet.
   1305           *
   1306           * @param       none
   1307           *
   1308           * @return      none
   1309           *=================================================================================================
   1310           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1311          static void rxDiscardIsr(void)
   \                     rxDiscardIsr:
   1312          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 16
   \   000004   74F0         MOV       A,#-0x10
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   1313            uint8 buf[MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT];
   1314          
   1315            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
   \   000009                ; Setup parameters for call to function macMemReadRxFifo
   \   000009   90....       MOV       DPTR,#rxNextLen
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F9           MOV       R1,A
   \   00000E   AA..         MOV       R2,?XSP + 0
   \   000010   AB..         MOV       R3,?XSP + 1
   \   000012   12....       LCALL     `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
   1316            rxUnreadLen -= rxNextLen;
   \   000015   90....       MOV       DPTR,#rxNextLen
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F8           MOV       R0,A
   \   00001A   90....       MOV       DPTR,#rxUnreadLen
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   C3           CLR       C
   \   00001F   98           SUBB      A,R0
   \   000020   F0           MOVX      @DPTR,A
   1317          
   1318            /* read out and discard bytes until all bytes of packet are disposed of */
   1319            if (rxUnreadLen != 0)
   \   000021   90....       MOV       DPTR,#rxUnreadLen
   \   000024   E0           MOVX      A,@DPTR
   \   000025   601D         JZ        ??rxDiscardIsr_0
   1320            {
   1321              if (rxUnreadLen < MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT)
   \   000027   90....       MOV       DPTR,#rxUnreadLen
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   C3           CLR       C
   \   00002C   9410         SUBB      A,#0x10
   \   00002E   5027         JNC       ??rxDiscardIsr_1
   1322              {
   1323                rxNextLen = rxUnreadLen;
   \   000030   90....       MOV       DPTR,#rxUnreadLen
   \   000033   E0           MOVX      A,@DPTR
   \   000034   90....       MOV       DPTR,#rxNextLen
   \   000037   F0           MOVX      @DPTR,A
   1324                MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   000038   90....       MOV       DPTR,#rxNextLen
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   24FF         ADD       A,#-0x1
   \   00003E   906194       MOV       DPTR,#0x6194
   \   000041   F0           MOVX      @DPTR,A
   \   000042   8013         SJMP      ??rxDiscardIsr_1
   1325              }
   1326            }
   1327            else
   1328            {
   1329              /* reset threshold level, reset receive state, and complete receive logic */
   1330              MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \                     ??rxDiscardIsr_0:
   \   000044   906194       MOV       DPTR,#0x6194
   \   000047   7405         MOV       A,#0x5
   \   000049   F0           MOVX      @DPTR,A
   1331              pFuncRxState = &rxStartIsr;
   \   00004A   90....       MOV       DPTR,#pFuncRxState
   \   00004D   74..         MOV       A,#`??rxStartIsr::?relay` & 0xff
   \   00004F   F0           MOVX      @DPTR,A
   \   000050   A3           INC       DPTR
   \   000051   74..         MOV       A,#(`??rxStartIsr::?relay` >> 8) & 0xff
   \   000053   F0           MOVX      @DPTR,A
   1332              rxDone();
   \   000054                ; Setup parameters for call to function rxDone
   \   000054   12....       LCALL     `??rxDone::?relay`; Banked call to: rxDone
   1333            }
   1334          }
   \                     ??rxDiscardIsr_1:
   \   000057   7410         MOV       A,#0x10
   \   000059   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005C   D083         POP       DPH
   \   00005E   D082         POP       DPL
   \   000060   02....       LJMP      ?BRET
   1335          
   1336          
   1337          /**************************************************************************************************
   1338           * @fn          macRxFifoOverflowIsr
   1339           *
   1340           * @brief       This interrupt service routine is called when RX FIFO overflow. Note that this
   1341           *              exception does not retrieve the good frames that are trapped in the RX FIFO.
   1342           *              It simply halts and cleanup the RX.
   1343           *
   1344           * @param       none
   1345           *
   1346           * @return      none
   1347           **************************************************************************************************
   1348           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1349          MAC_INTERNAL_API void macRxFifoOverflowIsr(void)
   \                     macRxFifoOverflowIsr:
   1350          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1351            rxFifoOverflowCount++; /* This flag is used for debug purpose only */
   \   000004   90....       MOV       DPTR,#rxFifoOverflowCount
   \   000007   E0           MOVX      A,@DPTR
   \   000008   2401         ADD       A,#0x1
   \   00000A   F0           MOVX      @DPTR,A
   1352            macRxHaltCleanup();
   \   00000B                ; Setup parameters for call to function macRxHaltCleanup
   \   00000B   12....       LCALL     `??macRxHaltCleanup::?relay`; Banked call to: macRxHaltCleanup
   1353          }
   \   00000E   D083         POP       DPH
   \   000010   D082         POP       DPL
   \   000012   02....       LJMP      ?BRET
   1354          
   1355          
   1356          /**************************************************************************************************
   1357           * @fn          macRxPromiscuousMode
   1358           *
   1359           * @brief       Sets promiscuous mode - enabling or disabling it.
   1360           *
   1361           * @param       none
   1362           *
   1363           * @return      none
   1364           **************************************************************************************************
   1365           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1366          MAC_INTERNAL_API void macRxPromiscuousMode(uint8 mode)
   \                     macRxPromiscuousMode:
   1367          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   1368            rxPromiscuousMode = mode;
   \   000007   EE           MOV       A,R6
   \   000008   90....       MOV       DPTR,#rxPromiscuousMode
   \   00000B   F0           MOVX      @DPTR,A
   1369          
   1370            if (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_OFF)
   \   00000C   90....       MOV       DPTR,#rxPromiscuousMode
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   700F         JNZ       ??macRxPromiscuousMode_0
   1371            {
   1372              MAC_RADIO_TURN_ON_RX_FRAME_FILTERING();
   \   000012   906180       MOV       DPTR,#0x6180
   \   000015   7400         MOV       A,#0x0
   \   000017   F0           MOVX      @DPTR,A
   \   000018   906180       MOV       DPTR,#0x6180
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   4409         ORL       A,#0x9
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   8014         SJMP      ??macRxPromiscuousMode_1
   1373            }
   1374            else
   1375            {
   1376              MAC_ASSERT((mode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC)   ||
   1377                         (mode == MAC_PROMISCUOUS_MODE_COMPLIANT));  /* invalid mode */
   \                     ??macRxPromiscuousMode_0:
   \   000021   7402         MOV       A,#0x2
   \   000023   6E           XRL       A,R6
   \   000024   6008         JZ        ??macRxPromiscuousMode_2
   \   000026   7401         MOV       A,#0x1
   \   000028   6E           XRL       A,R6
   \   000029   6003         JZ        ??macRxPromiscuousMode_2
   \   00002B                ; Setup parameters for call to function halAssertHandler
   \   00002B   12....       LCALL     `??halAssertHandler::?relay`; Banked call to: halAssertHandler
   1378          
   1379              MAC_RADIO_TURN_OFF_RX_FRAME_FILTERING();
   \                     ??macRxPromiscuousMode_2:
   \   00002E   906180       MOV       DPTR,#0x6180
   \   000031   E0           MOVX      A,@DPTR
   \   000032   C2E0         CLR       0xE0 /* A   */.0
   \   000034   F0           MOVX      @DPTR,A
   1380            }
   1381          }
   \                     ??macRxPromiscuousMode_1:
   \   000035   7F01         MOV       R7,#0x1
   \   000037   02....       LJMP      ?BANKED_LEAVE_XDATA
   1382          
   1383          
   1384          /**************************************************************************************************
   1385           *                                  Compile Time Integrity Checks
   1386           **************************************************************************************************
   1387           */
   1388          
   1389          /* check for changes to the spec that would affect the source code */
   1390          #if ((MAC_A_MAX_PHY_PACKET_SIZE   !=  0x7F )   ||  \
   1391               (MAC_FCF_FIELD_LEN           !=  2    )   ||  \
   1392               (MAC_FCF_FRAME_TYPE_POS      !=  0    )   ||  \
   1393               (MAC_FCF_FRAME_PENDING_POS   !=  4    )   ||  \
   1394               (MAC_FCF_ACK_REQUEST_POS     !=  5    )   ||  \
   1395               (MAC_FCF_INTRA_PAN_POS       !=  6    )   ||  \
   1396               (MAC_FCF_DST_ADDR_MODE_POS   !=  10   )   ||  \
   1397               (MAC_FCF_FRAME_VERSION_POS   !=  12   )   ||  \
   1398               (MAC_FCF_SRC_ADDR_MODE_POS   !=  14   ))
   1399          #error "ERROR!  Change to the spec that requires modification of source code."
   1400          #endif
   1401          
   1402          /* check for changes to the internal flags format */
   1403          #if ((MAC_RX_FLAG_VERSION      !=  0x03)  ||  \
   1404               (MAC_RX_FLAG_ACK_PENDING  !=  0x04)  ||  \
   1405               (MAC_RX_FLAG_SECURITY     !=  0x08)  ||  \
   1406               (MAC_RX_FLAG_PENDING      !=  0x10)  ||  \
   1407               (MAC_RX_FLAG_ACK_REQUEST  !=  0x20)  ||  \
   1408               (MAC_RX_FLAG_INTRA_PAN    !=  0x40))
   1409          #error "ERROR!  Change to the internal RX flags format.  Requires modification of source code."
   1410          #endif
   1411          
   1412          /* validate CRC OK bit optimization */
   1413          #if (MAC_RX_FLAG_CRC_OK != PROPRIETARY_FCS_CRC_OK_BIT)
   1414          #error "ERROR!  Optimization relies on these bits having the same position."
   1415          #endif
   1416          
   1417          #if (MAC_RX_ACTIVE_NO_ACTIVITY != 0x00)
   1418          #error "ERROR! Zero is reserved value of macRxActive. Allows boolean operations, e.g !macRxActive."
   1419          #endif
   1420          
   1421          #if (MAC_PROMISCUOUS_MODE_OFF != 0x00)
   1422          #error "ERROR! Zero is reserved value of rxPromiscuousMode. Allows boolean operations, e.g !rxPromiscuousMode."
   1423          #endif
   1424          
   1425          
   1426          /**************************************************************************************************
   1427          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   macRxAckTxDoneCallback
        2      0   -> rxPostRxUpdates
      2      0   macRxFifoOverflowIsr
        2      0   -> macRxHaltCleanup
      2      0   macRxHaltCleanup
        2      0   -> rxHaltCleanupFinalStep
      2      0   macRxInit
      0      9   macRxPromiscuousMode
        0      9   -> halAssertHandler
      2      0   macRxRadioPowerUpInit
      2      0   macRxThresholdIsr
        2      0   -> rxHaltCleanupFinalStep
      2      0   macRxTxReset
        2      0   -> macRxHardDisable
        2      0   -> macRxPromiscuousMode
      0     32   rxAddrIsr
        0     32   -> halAssertHandler
        0     32   -> macMemReadRxFifo
        0     32   -> rxPrepPayload
        0     32   -> sAddrExtCpy
      2     17   rxDiscardFrame
        2      0   -> halAssertHandler
        2      0   -> rxDone
      2     16   rxDiscardIsr
        2     16   -> macMemReadRxFifo
        2     16   -> rxDone
      2     17   rxDone
        2      0   -> rxPostRxUpdates
      1     10   rxFcsIsr
        0     10   -> MAC_SrcMatchCheckResult
        0     10   -> macDataRxMemFree
        0     10   -> macMemReadRxFifo
        0     10   -> macRadioComputeLQI
        0     10   -> macRxCompleteCallback
        0     10   -> macRxOffRequest
        0     10   -> rxDone
      2      0   rxHaltCleanupFinalStep
        2      0   -> macDataRxMemFree
        2      0   -> rxPostRxUpdates
      2      0   rxPayloadIsr
        2      0   -> macMemReadRxFifo
        2      0   -> rxPrepPayload
      2     17   rxPostRxUpdates
        2      0   -> macRadioUpdateTxPower
        2      0   -> macRxOffRequest
        2      0   -> macTxStartQueuedFrame
      2     32   rxPrepPayload
      1     20   rxStartIsr
        0     17   -> MAC_SrcMatchCheckAllPending
        0     17   -> halAssertHandler
        0     17   -> macCspForceTxDoneIfPending
        0     17   -> macDataRxMemAlloc
        0     17   -> macMcuOverflowCapture
        0     17   -> macMcuTimerCapture
        0     17   -> macMemReadRxFifo
        0     17   -> macRadioComputeLQI
        0     17   -> macRxCheckMACPendingCallback
        0     17   -> macRxCheckPendingCallback
        0     17   -> macTxAckNotReceivedCallback
        0     17   -> macTxAckReceivedCallback
        0     20   -> osal_memcpy
        0     17   -> rxDiscardFrame
        0     17   -> rxDone
        0     17   -> rxPostRxUpdates
        0     17   -> rxPrepPayload


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  RFIRQF0
       1  RFIRQF1
       1  RFST
       1  S1CON
       1  _A_IEN0
      26  macRxAckTxDoneCallback
       1  macRxActive
       4  macRxAddrLen
      21  macRxFifoOverflowIsr
       1  macRxFilter
      32  macRxHaltCleanup
      73  macRxInit
       1  macRxOutgoingAckFlag
      58  macRxPromiscuousMode
      42  macRxRadioPowerUpInit
      58  macRxThresholdIsr
      25  macRxTxReset
       2  pFuncRxState
       2  pRxBuf
     463  rxAddrIsr
       4  rxBuf
      84  rxDiscardFrame
      99  rxDiscardIsr
      48  rxDone
     430  rxFcsIsr
       1  rxFifoOverflowCount
       1  rxFilter
     105  rxHaltCleanupFinalStep
       1  rxIsrActiveFlag
       1  rxNextLen
     109  rxPayloadIsr
       1  rxPayloadLen
      20  rxPostRxUpdates
      70  rxPrepPayload
       1  rxPromiscuousMode
       1  rxResetFlag
    1349  rxStartIsr
       1  rxUnreadLen
     108  -- Other

 
 3 112 bytes in segment BANKED_CODE
   108 bytes in segment BANK_RELAYS
     4 bytes in segment CODE_C
     5 bytes in segment SFR_AN
    19 bytes in segment XDATA_Z
 
   112 bytes of CODE     memory
     0 bytes of DATA     memory (+ 5 bytes shared)
 3 112 bytes of HUGECODE memory
    19 bytes of XDATA    memory

Errors: none
Warnings: none
