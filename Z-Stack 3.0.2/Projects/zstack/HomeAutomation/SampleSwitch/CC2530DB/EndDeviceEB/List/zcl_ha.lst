###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               05/Aug/2020  22:51:13
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\Source\zcl_ha.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW5451.tmp ("D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\Source\zcl_ha.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D POWER_SAVING -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_GROUPS -D BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=0
#        -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0 -DREJOIN_POLL_RATE=0
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\zcl_ha.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\zcl_ha.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\Source\zcl_ha.c
      1          /**************************************************************************************************
      2            Filename:       zcl_ha.c
      3            Revised:        $Date: 2013-10-21 12:15:10 -0700 (Mon, 21 Oct 2013) $
      4            Revision:       $Revision: 35738 $
      5          
      6            Description:    Describe the purpose and contents of the file.
      7          
      8          
      9            Copyright 2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          
     46          #include "zcl.h"
     47          #include "zcl_general.h"
     48          #include "zcl_closures.h"
     49          #include "zcl_HVAC.h"
     50          #include "zcl_ss.h"
     51          #include "zcl_ms.h"
     52          #include "zcl_lighting.h"
     53          #include "zcl_ha.h"
     54          
     55          /* HAL */
     56          #include "hal_lcd.h"
     57          #include "bdb.h"
     58          
     59          
     60          /*********************************************************************
     61           * MACROS
     62           */
     63          
     64          /*********************************************************************
     65           * CONSTANTS
     66           */
     67          
     68          /*********************************************************************
     69           * TYPEDEFS
     70           */
     71          
     72          /*********************************************************************
     73           * GLOBAL VARIABLES
     74           */
     75          
     76          /*********************************************************************
     77           * EXTERNAL VARIABLES
     78           */
     79          
     80          /*********************************************************************
     81           * EXTERNAL FUNCTIONS
     82           */
     83          
     84          /*********************************************************************
     85           * LOCAL VARIABLES
     86           */
     87          
     88          /*********************************************************************
     89           * STATUS STRINGS
     90           */
     91          // NwkInfo displayed on line 1 once on the network
     92          // 0123456789012345
     93          // Zc: PPPP CH ADDR
     94          // Zr: PPPP CH ADDR
     95          // Zed:PPPP CH ADDR

   \                                 In  segment XDATA_ROM_C, align 1
     96          const char NwkInfoZcStr[]  = "ZC: ";
   \                     NwkInfoZcStr:
   \   000000   5A433A20     DB "ZC: "
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
     97          const char NwkInfoZrStr[]  = "ZR: ";
   \                     NwkInfoZrStr:
   \   000000   5A523A20     DB "ZR: "
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
     98          const char NwkInfoZedStr[] = "Zed:";
   \                     NwkInfoZedStr:
   \   000000   5A65643A     DB "Zed:"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
     99          const char * const NwkInfoStrs[] = { NwkInfoZcStr, NwkInfoZrStr, NwkInfoZedStr };
   \                     NwkInfoStrs:
   \   000000   ....         DW NwkInfoZcStr
   \   000002   ....         DW NwkInfoZrStr
   \   000004   ....         DW NwkInfoZedStr
    100          
    101          /*********************************************************************
    102           * LOCAL FUNCTIONS
    103           */
    104          
    105          /*********************************************************************
    106           * @fn      zclHA_isbit
    107           *
    108           * @brief   Returns TRUE if the index bit is set
    109           *
    110           * @param   pArray   - array with bits in it
    111           *          bitIndex - index into the array of bits
    112           *
    113           * @return  TRUE if index bit is set
    114           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    115          bool zclHA_isbit(uint8 *pArray, uint8 bitIndex)
   \                     zclHA_isbit:
    116          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    117            uint8 bit;
    118            bit = ( 1 << ( bitIndex & 0x7 ) );
   \   000007   7401         MOV       A,#0x1
   \   000009   C0E0         PUSH      A
   \   00000B   7407         MOV       A,#0x7
   \   00000D   5E           ANL       A,R6
   \   00000E   F9           MOV       R1,A
   \   00000F   D0E0         POP       A
   \   000011   B90002       CJNE      R1,#0x0,??zclHA_isbit_0
   \   000014   8004         SJMP      ??zclHA_isbit_1
   \                     ??zclHA_isbit_0:
   \   000016   C3           CLR       C
   \   000017   33           RLC       A
   \   000018   D9FC         DJNZ      R1,??zclHA_isbit_0
   \                     ??zclHA_isbit_1:
   \   00001A   F8           MOV       R0,A
    119            if( pArray[bitIndex >> 3] & bit )
   \   00001B   EE           MOV       A,R6
   \   00001C   13           RRC       A
   \   00001D   13           RRC       A
   \   00001E   13           RRC       A
   \   00001F   541F         ANL       A,#0x1f
   \   000021   FC           MOV       R4,A
   \   000022   7D00         MOV       R5,#0x0
   \   000024   EA           MOV       A,R2
   \   000025   2C           ADD       A,R4
   \   000026   F582         MOV       DPL,A
   \   000028   EB           MOV       A,R3
   \   000029   3D           ADDC      A,R5
   \   00002A   F583         MOV       DPH,A
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   58           ANL       A,R0
   \   00002E   6004         JZ        ??zclHA_isbit_2
    120              return TRUE;
   \   000030   7901         MOV       R1,#0x1
   \   000032   8002         SJMP      ??zclHA_isbit_3
    121            return FALSE;
   \                     ??zclHA_isbit_2:
   \   000034   7900         MOV       R1,#0x0
   \                     ??zclHA_isbit_3:
   \   000036   7F01         MOV       R7,#0x1
   \   000038   02....       LJMP      ?BANKED_LEAVE_XDATA
    122          }
    123          
    124          /*********************************************************************
    125           * @fn      zclHA_setbit
    126           *
    127           * @brief   Sets a bit in a bit array
    128           *
    129           * @param   pArray   - array with bits in it
    130           *          bitIndex - index into the array of bits
    131           *
    132           * @return  none
    133           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    134          void zclHA_setbit(uint8 *pArray, uint8 bitIndex)
   \                     zclHA_setbit:
    135          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    136            uint8 bit;
    137            bit = ( 1 << ( bitIndex & 0x7 ) );
   \   000004   7401         MOV       A,#0x1
   \   000006   C0E0         PUSH      A
   \   000008   7407         MOV       A,#0x7
   \   00000A   59           ANL       A,R1
   \   00000B   FC           MOV       R4,A
   \   00000C   D0E0         POP       A
   \   00000E   BC0002       CJNE      R4,#0x0,??zclHA_setbit_0
   \   000011   8004         SJMP      ??zclHA_setbit_1
   \                     ??zclHA_setbit_0:
   \   000013   C3           CLR       C
   \   000014   33           RLC       A
   \   000015   DCFC         DJNZ      R4,??zclHA_setbit_0
   \                     ??zclHA_setbit_1:
   \   000017   F8           MOV       R0,A
    138            pArray[bitIndex >> 3] |= bit;
   \   000018   E9           MOV       A,R1
   \   000019   13           RRC       A
   \   00001A   13           RRC       A
   \   00001B   13           RRC       A
   \   00001C   541F         ANL       A,#0x1f
   \   00001E   FC           MOV       R4,A
   \   00001F   7D00         MOV       R5,#0x0
   \   000021   EA           MOV       A,R2
   \   000022   2C           ADD       A,R4
   \   000023   F582         MOV       DPL,A
   \   000025   EB           MOV       A,R3
   \   000026   3D           ADDC      A,R5
   \   000027   F583         MOV       DPH,A
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   48           ORL       A,R0
   \   00002B   F0           MOVX      @DPTR,A
    139          }
   \   00002C   D083         POP       DPH
   \   00002E   D082         POP       DPL
   \   000030   02....       LJMP      ?BRET
    140          
    141          /*********************************************************************
    142           * @fn      zclHA_clearbit
    143           *
    144           * @brief   clears a bit in a bit array
    145           *
    146           * @param   pArray   - array with bits in it
    147           *          bitIndex - index into the array of bits
    148           *
    149           * @return  none
    150           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    151          void zclHA_clearbit(uint8 *pArray, uint8 bitIndex)
   \                     zclHA_clearbit:
    152          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    153            uint8 bit;
    154            bit = ( 1 << ( bitIndex & 0x7 ) );
   \   000005   7401         MOV       A,#0x1
   \   000007   C0E0         PUSH      A
   \   000009   7407         MOV       A,#0x7
   \   00000B   59           ANL       A,R1
   \   00000C   FC           MOV       R4,A
   \   00000D   D0E0         POP       A
   \   00000F   BC0002       CJNE      R4,#0x0,??zclHA_clearbit_0
   \   000012   8004         SJMP      ??zclHA_clearbit_1
   \                     ??zclHA_clearbit_0:
   \   000014   C3           CLR       C
   \   000015   33           RLC       A
   \   000016   DCFC         DJNZ      R4,??zclHA_clearbit_0
   \                     ??zclHA_clearbit_1:
   \   000018   F8           MOV       R0,A
    155            pArray[bitIndex >> 3] &= (~(unsigned)bit);
   \   000019   E8           MOV       A,R0
   \   00001A   F4           CPL       A
   \   00001B   FE           MOV       R6,A
   \   00001C   E9           MOV       A,R1
   \   00001D   13           RRC       A
   \   00001E   13           RRC       A
   \   00001F   13           RRC       A
   \   000020   541F         ANL       A,#0x1f
   \   000022   FC           MOV       R4,A
   \   000023   7D00         MOV       R5,#0x0
   \   000025   EA           MOV       A,R2
   \   000026   2C           ADD       A,R4
   \   000027   F582         MOV       DPL,A
   \   000029   EB           MOV       A,R3
   \   00002A   3D           ADDC      A,R5
   \   00002B   F583         MOV       DPH,A
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   5E           ANL       A,R6
   \   00002F   F0           MOVX      @DPTR,A
    156          }
   \   000030   7F01         MOV       R7,#0x1
   \   000032   02....       LJMP      ?BANKED_LEAVE_XDATA
    157          
    158          /*********************************************************************
    159           * @fn      zclHA_uint16toa
    160           *
    161           * @brief   Converts from a uint16 to ascii hex string.
    162           *          The # will be exactly 4 hex digits (e.g. 0x0000 or 0x1E3F).
    163           *          NULL terminates the string.
    164           *
    165           * @param   u - Number to be converted
    166           *          string - pointer to coverted string
    167           *
    168           * @return  none
    169           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    170          void zclHA_uint16toa(uint16 u, char *string)
   \                     zclHA_uint16toa:
    171          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
    172            // add preceding zeros
    173            if ( u < 0x1000 )
   \   00000D   C3           CLR       C
   \   00000E   E5..         MOV       A,?V0
   \   000010   9400         SUBB      A,#0x0
   \   000012   E5..         MOV       A,?V1
   \   000014   9410         SUBB      A,#0x10
   \   000016   5016         JNC       ??zclHA_uint16toa_0
    174            {
    175              *string++ = '0';
   \   000018   85..82       MOV       DPL,?V2
   \   00001B   85..83       MOV       DPH,?V3
   \   00001E   7430         MOV       A,#0x30
   \   000020   F0           MOVX      @DPTR,A
   \   000021   85..82       MOV       DPL,?V2
   \   000024   85..83       MOV       DPH,?V3
   \   000027   A3           INC       DPTR
   \   000028   8582..       MOV       ?V2,DPL
   \   00002B   8583..       MOV       ?V3,DPH
    176            }
    177          
    178            if ( u < 0x0100 )
   \                     ??zclHA_uint16toa_0:
   \   00002E   C3           CLR       C
   \   00002F   E5..         MOV       A,?V0
   \   000031   9400         SUBB      A,#0x0
   \   000033   E5..         MOV       A,?V1
   \   000035   9401         SUBB      A,#0x1
   \   000037   5016         JNC       ??zclHA_uint16toa_1
    179            {
    180              *string++ = '0';
   \   000039   85..82       MOV       DPL,?V2
   \   00003C   85..83       MOV       DPH,?V3
   \   00003F   7430         MOV       A,#0x30
   \   000041   F0           MOVX      @DPTR,A
   \   000042   85..82       MOV       DPL,?V2
   \   000045   85..83       MOV       DPH,?V3
   \   000048   A3           INC       DPTR
   \   000049   8582..       MOV       ?V2,DPL
   \   00004C   8583..       MOV       ?V3,DPH
    181            }
    182          
    183            if ( u < 0x0010 )
   \                     ??zclHA_uint16toa_1:
   \   00004F   C3           CLR       C
   \   000050   E5..         MOV       A,?V0
   \   000052   9410         SUBB      A,#0x10
   \   000054   E5..         MOV       A,?V1
   \   000056   9400         SUBB      A,#0x0
   \   000058   5016         JNC       ??zclHA_uint16toa_2
    184            {
    185              *string++ = '0';
   \   00005A   85..82       MOV       DPL,?V2
   \   00005D   85..83       MOV       DPH,?V3
   \   000060   7430         MOV       A,#0x30
   \   000062   F0           MOVX      @DPTR,A
   \   000063   85..82       MOV       DPL,?V2
   \   000066   85..83       MOV       DPH,?V3
   \   000069   A3           INC       DPTR
   \   00006A   8582..       MOV       ?V2,DPL
   \   00006D   8583..       MOV       ?V3,DPH
    186            }
    187          
    188            _ltoa((unsigned long)u, (unsigned char *)string, 16);
   \                     ??zclHA_uint16toa_2:
   \   000070                ; Setup parameters for call to function _ltoa
   \   000070   78..         MOV       R0,#?V2
   \   000072   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000075   7910         MOV       R1,#0x10
   \   000077   AA..         MOV       R2,?V0
   \   000079   AB..         MOV       R3,?V1
   \   00007B   E4           CLR       A
   \   00007C   FC           MOV       R4,A
   \   00007D   FD           MOV       R5,A
   \   00007E   12....       LCALL     `??_ltoa::?relay`; Banked call to: _ltoa
   \   000081   7402         MOV       A,#0x2
   \   000083   12....       LCALL     ?DEALLOC_XSTACK8
    189          }
   \   000086   7F04         MOV       R7,#0x4
   \   000088   02....       LJMP      ?BANKED_LEAVE_XDATA
    190          
    191          /*********************************************************************
    192           * @fn      zclHA_uint8toa
    193           *
    194           * @brief   Converts from a uint8 to ascii decimal string.
    195           *          The # will be exactly 3 digits (e.g. "123", " 64", "  0"), preceded by spaces.
    196           *          No null terminator.
    197           *
    198           * @param   b - Byte to be converted
    199           *          string - pointer to coverted string
    200           *
    201           * @return  none
    202           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    203          void zclHA_uint8toa(uint8 b, char *string)
   \                     zclHA_uint8toa:
    204          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    205            // write the level (up to 3 digits, pre-padded with spaces)
    206            string[0] = string[1] = string[2] = '0';
   \   000004   7830         MOV       R0,#0x30
   \   000006   E8           MOV       A,R0
   \   000007   C0E0         PUSH      A
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   D0E0         POP       A
   \   000011   F0           MOVX      @DPTR,A
   \   000012   E8           MOV       A,R0
   \   000013   C0E0         PUSH      A
   \   000015   8A82         MOV       DPL,R2
   \   000017   8B83         MOV       DPH,R3
   \   000019   A3           INC       DPTR
   \   00001A   D0E0         POP       A
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   E8           MOV       A,R0
   \   00001E   C0E0         PUSH      A
   \   000020   8A82         MOV       DPL,R2
   \   000022   8B83         MOV       DPH,R3
   \   000024   D0E0         POP       A
   \   000026   F0           MOVX      @DPTR,A
    207            string[2] = '0' + (b % 10);  // 1s
   \   000027   E9           MOV       A,R1
   \   000028   75F00A       MOV       B,#0xa
   \   00002B   84           DIV       AB
   \   00002C   E5F0         MOV       A,B
   \   00002E   2430         ADD       A,#0x30
   \   000030   C0E0         PUSH      A
   \   000032   8A82         MOV       DPL,R2
   \   000034   8B83         MOV       DPH,R3
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   D0E0         POP       A
   \   00003A   F0           MOVX      @DPTR,A
    208            b = b / 10;
   \   00003B   75F00A       MOV       B,#0xa
   \   00003E   E9           MOV       A,R1
   \   00003F   84           DIV       AB
   \   000040   F9           MOV       R1,A
    209            if( b )
   \   000041   E9           MOV       A,R1
   \   000042   6019         JZ        ??zclHA_uint8toa_0
    210            {
    211              string[1] = '0' + (b % 10);  // 10s
   \   000044   E9           MOV       A,R1
   \   000045   75F00A       MOV       B,#0xa
   \   000048   84           DIV       AB
   \   000049   E5F0         MOV       A,B
   \   00004B   2430         ADD       A,#0x30
   \   00004D   C0E0         PUSH      A
   \   00004F   8A82         MOV       DPL,R2
   \   000051   8B83         MOV       DPH,R3
   \   000053   A3           INC       DPTR
   \   000054   D0E0         POP       A
   \   000056   F0           MOVX      @DPTR,A
    212              b = b / 10;
   \   000057   75F00A       MOV       B,#0xa
   \   00005A   E9           MOV       A,R1
   \   00005B   84           DIV       AB
   \   00005C   F9           MOV       R1,A
    213            }
    214            if( b )
   \                     ??zclHA_uint8toa_0:
   \   00005D   E9           MOV       A,R1
   \   00005E   6012         JZ        ??zclHA_uint8toa_1
    215            {
    216             string[0] = '0' + (b % 10);  // 100s
   \   000060   E9           MOV       A,R1
   \   000061   75F00A       MOV       B,#0xa
   \   000064   84           DIV       AB
   \   000065   E5F0         MOV       A,B
   \   000067   2430         ADD       A,#0x30
   \   000069   C0E0         PUSH      A
   \   00006B   8A82         MOV       DPL,R2
   \   00006D   8B83         MOV       DPH,R3
   \   00006F   D0E0         POP       A
   \   000071   F0           MOVX      @DPTR,A
    217            }
    218          }
   \                     ??zclHA_uint8toa_1:
   \   000072   D083         POP       DPH
   \   000074   D082         POP       DPL
   \   000076   02....       LJMP      ?BRET
    219          
    220          /*********************************************************************
    221           * @fn      zclHA_LcdStatusLine1
    222           *
    223           * @brief   Display LCD line 1 with network status
    224           *          only call after on network
    225           *          ZC: PPPP CH ADDR
    226           *          ZR: PPPP CH ADDR
    227           *          ZE: PPPP CH ADDR
    228           *
    229           * @param   kind (0=ZC, 1=ZR, 2=ZED)
    230           *
    231           * @return  none
    232           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    233          void zclHA_LcdStatusLine1( uint8 kind )
   \                     zclHA_LcdStatusLine1:
    234          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    235          #if defined ( LCD_SUPPORTED )
    236            char szLine[20];
    237          
    238            // copy in what node type it is
    239            if ( kind > ZCL_HA_DEVICE_END_DEVICE )
   \   00000C   EE           MOV       A,R6
   \   00000D   C3           CLR       C
   \   00000E   9403         SUBB      A,#0x3
   \   000010   4003         JC        $+5
   \   000012   02....       LJMP      ??zclHA_LcdStatusLine1_0 & 0xFFFF
    240            {
    241              return;
    242            }
    243          
    244            // ZE: PANx CH ADDR
    245            osal_memcpy( szLine, NwkInfoStrs[kind], 4 );
   \   000015                ; Setup parameters for call to function osal_memcpy
   \   000015   EE           MOV       A,R6
   \   000016   F8           MOV       R0,A
   \   000017   7900         MOV       R1,#0x0
   \   000019   E8           MOV       A,R0
   \   00001A   75F002       MOV       B,#0x2
   \   00001D   A4           MUL       AB
   \   00001E   C8           XCH       A,R0
   \   00001F   AAF0         MOV       R2,B
   \   000021   75F000       MOV       B,#0x0
   \   000024   A4           MUL       AB
   \   000025   2A           ADD       A,R2
   \   000026   FA           MOV       R2,A
   \   000027   75F002       MOV       B,#0x2
   \   00002A   E9           MOV       A,R1
   \   00002B   A4           MUL       AB
   \   00002C   2A           ADD       A,R2
   \   00002D   F9           MOV       R1,A
   \   00002E   74..         MOV       A,#NwkInfoStrs & 0xff
   \   000030   28           ADD       A,R0
   \   000031   F582         MOV       DPL,A
   \   000033   74..         MOV       A,#(NwkInfoStrs >> 8) & 0xff
   \   000035   39           ADDC      A,R1
   \   000036   F583         MOV       DPH,A
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F5..         MOV       ?V0,A
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   F5..         MOV       ?V1,A
   \   00003F   75..00       MOV       ?V2,#0x0
   \   000042   78..         MOV       R0,#?V0
   \   000044   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000047   7C04         MOV       R4,#0x4
   \   000049   7D00         MOV       R5,#0x0
   \   00004B   7403         MOV       A,#0x3
   \   00004D   12....       LCALL     ?XSTACK_DISP101_8
   \   000050   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000053   7403         MOV       A,#0x3
   \   000055   12....       LCALL     ?DEALLOC_XSTACK8
    246            zclHA_uint16toa( _NIB.nwkPanId, &szLine[4] );
   \   000058                ; Setup parameters for call to function zclHA_uint16toa
   \   000058   7404         MOV       A,#0x4
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   AC82         MOV       R4,DPL
   \   00005F   AD83         MOV       R5,DPH
   \   000061   90....       MOV       DPTR,#_NIB + 33
   \   000064   E0           MOVX      A,@DPTR
   \   000065   FA           MOV       R2,A
   \   000066   A3           INC       DPTR
   \   000067   E0           MOVX      A,@DPTR
   \   000068   FB           MOV       R3,A
   \   000069   12....       LCALL     `??zclHA_uint16toa::?relay`; Banked call to: zclHA_uint16toa
    247            szLine[8] = ' ';
   \   00006C   7408         MOV       A,#0x8
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   7420         MOV       A,#0x20
   \   000073   F0           MOVX      @DPTR,A
    248          
    249            _ltoa( _NIB.nwkLogicalChannel, (void *)(&szLine[9]), 10 );
   \   000074                ; Setup parameters for call to function _ltoa
   \   000074   7409         MOV       A,#0x9
   \   000076   12....       LCALL     ?XSTACK_DISP0_8
   \   000079   8582..       MOV       ?V0,DPL
   \   00007C   8583..       MOV       ?V1,DPH
   \   00007F   78..         MOV       R0,#?V0
   \   000081   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000084   790A         MOV       R1,#0xa
   \   000086   90....       MOV       DPTR,#_NIB + 22
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   F5..         MOV       ?V0,A
   \   00008C   AA..         MOV       R2,?V0
   \   00008E   E4           CLR       A
   \   00008F   FB           MOV       R3,A
   \   000090   FC           MOV       R4,A
   \   000091   FD           MOV       R5,A
   \   000092   12....       LCALL     `??_ltoa::?relay`; Banked call to: _ltoa
   \   000095   7402         MOV       A,#0x2
   \   000097   12....       LCALL     ?DEALLOC_XSTACK8
    250            szLine[11] = ' ';
   \   00009A   740B         MOV       A,#0xb
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   7420         MOV       A,#0x20
   \   0000A1   F0           MOVX      @DPTR,A
    251          
    252            zclHA_uint16toa( _NIB.nwkDevAddress, &szLine[12] );
   \   0000A2                ; Setup parameters for call to function zclHA_uint16toa
   \   0000A2   740C         MOV       A,#0xc
   \   0000A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A7   AC82         MOV       R4,DPL
   \   0000A9   AD83         MOV       R5,DPH
   \   0000AB   90....       MOV       DPTR,#_NIB + 20
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   FA           MOV       R2,A
   \   0000B0   A3           INC       DPTR
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   FB           MOV       R3,A
   \   0000B3   12....       LCALL     `??zclHA_uint16toa::?relay`; Banked call to: zclHA_uint16toa
    253            HalLcdWriteString( (char*)szLine, HAL_LCD_LINE_1 );
   \   0000B6                ; Setup parameters for call to function HalLcdWriteString
   \   0000B6   7901         MOV       R1,#0x1
   \   0000B8   AA..         MOV       R2,?XSP + 0
   \   0000BA   AB..         MOV       R3,?XSP + 1
   \   0000BC   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    254          #endif
    255          }
   \                     ??zclHA_LcdStatusLine1_0:
   \   0000BF   7414         MOV       A,#0x14
   \   0000C1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C4   7F03         MOV       R7,#0x3
   \   0000C6   02....       LJMP      ?BANKED_LEAVE_XDATA
    256          
    257          /*********************************************************************
    258          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     34   zclHA_LcdStatusLine1
        0     31   -> HalLcdWriteString
        0     33   -> _ltoa
        0     34   -> osal_memcpy
        0     31   -> zclHA_uint16toa
      1      9   zclHA_clearbit
      1      9   zclHA_isbit
      3      0   zclHA_setbit
      0     45   zclHA_uint16toa
        0     14   -> _ltoa
      3      0   zclHA_uint8toa


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  NwkInfoStrs
       5  NwkInfoZcStr
       5  NwkInfoZedStr
       5  NwkInfoZrStr
     201  zclHA_LcdStatusLine1
      53  zclHA_clearbit
      59  zclHA_isbit
      51  zclHA_setbit
     139  zclHA_uint16toa
     121  zclHA_uint8toa
      36  -- Other

 
 624 bytes in segment BANKED_CODE
  36 bytes in segment BANK_RELAYS
  21 bytes in segment XDATA_ROM_C
 
  36 bytes of CODE     memory
  21 bytes of CONST    memory
 624 bytes of HUGECODE memory

Errors: none
Warnings: none
