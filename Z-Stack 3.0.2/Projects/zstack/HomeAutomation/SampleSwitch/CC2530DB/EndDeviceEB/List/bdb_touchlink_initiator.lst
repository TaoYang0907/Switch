###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               31/Jul/2020  11:47:15
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack 3.0.2\Components\stack\bdb\bdb_touchlink_initiator.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EWA185.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\stack\bdb\bdb_touchlink_initiator.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D POWER_SAVING -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_GROUPS -D BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\bdb_touchlink_initiator.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\bdb_touchlink_initiator.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\stack\bdb\bdb_touchlink_initiator.c
      1          /**************************************************************************************************
      2            Filename:       bdb_touchlink_initiator.c
      3            Revised:        $Date: 2013-11-22 16:17:23 -0800 (Fri, 22 Nov 2013) $
      4            Revision:       $Revision: 36220 $
      5          
      6            Description:    Zigbee Cluster Library - Light Link Initiator.
      7          
      8          
      9            Copyright 2011-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "OSAL_Tasks.h"
     47          #include "OSAL_Nv.h"
     48          #include "AF.h"
     49          #include "ZDApp.h"
     50          #include "ZDSecMgr.h"
     51          #include "ZDObject.h"
     52          #include "nwk_util.h"
     53          #include "ZGlobals.h"
     54          #include "AddrMgr.h"
     55          
     56          #if defined ( POWER_SAVING )
     57          #include "OSAL_PwrMgr.h"
     58          #endif
     59          
     60          #include "stub_aps.h"
     61          
     62          #include "zcl.h"
     63          #include "zcl_general.h"
     64          #include "bdb.h"
     65          #include "bdb_interface.h"
     66          #include "bdb_tlCommissioning.h"
     67          #include "bdb_touchlink.h"
     68          
     69          #include "bdb_touchlink_initiator.h"
     70          #include "hal_lcd.h"
     71          #include "hal_led.h"
     72          
     73          #include "user_printf.h"
     74          
     75          #if defined ( BDB_TL_INITIATOR )
     76             
     77          /*********************************************************************
     78           * MACROS
     79           */
     80          
     81          /*********************************************************************
     82           * CONSTANTS
     83           */
     84          
     85          #define TOUCHLINK_INITIATOR_REJOIN_TIMEOUT             2500 // 2.5 sec
     86          
     87          // for non-polling end-devices only
     88          #define TOUCHLINK_INITIATOR_TEMP_POST_TL_POLL_RATE     1000
     89          
     90          #define DEV_INFO_INVALID_EP                            0xFE
     91          
     92          #define TOUCHLINK_INITIATOR_NUM_SCAN_REQ_PRIMARY       8  // 5 times on 1st channel, plus once for each remianing primary channel
     93          #define TOUCHLINK_INITIATOR_NUM_SCAN_REQ_EXTENDED      20 // (TOUCHLINK_NUM_SCAN_REQ_PRIMARY + sizeof(TOUCHLINK_SECONDARY_CHANNELS_SET))
     94          
     95          /*********************************************************************
     96           * TYPEDEFS
     97           */
     98          typedef union
     99          {
    100            bdbTLNwkStartRsp_t nwkStartRsp;
    101            bdbTLNwkJoinRsp_t nwkJoinRsp;
    102          } bdbTLRsp_t;
    103          
    104          typedef struct
    105          {
    106            bdbTLScanRsp_t scanRsp;
    107            afAddrType_t srcAddr;
    108            uint16 newNwkAddr;
    109            uint8 rxChannel;  // channel scan response was heard on
    110            int8 lastRssi;    // receieved RSSI
    111          } targetCandidate_t;
    112          
    113          /*********************************************************************
    114           * GLOBAL VARIABLES
    115           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    116          uint8 touchLinkInitiator_TaskID;
   \                     touchLinkInitiator_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    117          
    118          /*********************************************************************
    119           * EXTERNAL VARIABLES
    120           */
    121          extern devStartModes_t devStartMode;
    122          extern uint8 _tmpRejoinState;
    123          
    124          /*********************************************************************
    125           * EXTERNAL FUNCTIONS
    126           */
    127          extern void bdb_setNodeIsOnANetwork(bool isOnANetwork);
    128          
    129          /*********************************************************************
    130           * LOCAL VARIABLES
    131           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          static uint8 initiatorSeqNum;
   \                     initiatorSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    133          
    134          // Touch Link channel tracking

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          static uint8 numScanReqSent;
   \                     numScanReqSent:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          static uint8 scanReqChannels;
   \                     scanReqChannels:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    137          
    138          // Network key sent to the target to start the network with

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          static uint8 keyIndexSent;
   \                     keyIndexSent:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          static uint8 encKeySent[SEC_KEY_LEN];
   \                     encKeySent:
   \   000000                DS 16
   \   000010                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          static uint32 responseIDSent;
   \                     responseIDSent:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    142          
    143          // Info related to the received request
    144          #if ZSTACK_END_DEVICE_BUILD

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          static bdbTLNwkJoinReq_t joinReq;
   \                     joinReq:
   \   000000                DS 47
   \   00002F                REQUIRE __INIT_XDATA_Z
    146          #endif
    147          
    148          // Info related to the received response

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          static targetCandidate_t selectedTarget;
   \                     selectedTarget:
   \   000000                DS 54
   \   000036                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          static uint16 selectedTargetNwkAddr;
   \                     selectedTargetNwkAddr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          static ZLongAddr_t selectedTargetIEEEAddr;
   \                     selectedTargetIEEEAddr:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          static bdbTLRsp_t rxRsp; // network start or join response
   \                     rxRsp:
   \   000000                DS 17
   \   000011                REQUIRE __INIT_XDATA_Z
    153          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          static bdbTLNwkParams_t initiatorNwkParams = {0};
   \                     initiatorNwkParams:
   \   000000                DS 42
   \   00002A                REQUIRE __INIT_XDATA_Z
    155          
    156          // Addresses used for sending/receiving messages

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          static afAddrType_t bcastAddr;
   \                     bcastAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    158          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          static uint16 savedPollRate;
   \                     savedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          static uint16 savedQueuedPollRate;
   \                     savedQueuedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          static uint16 savedResponsePollRate;
   \                     savedResponsePollRate:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          static uint8 savedRxOnIdle;
   \                     savedRxOnIdle:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    163          
    164          // Application callback

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          static touchLink_NotifyAppTLCB_t pfnNotifyAppCB = NULL;
   \                     pfnNotifyAppCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    166          static touchLink_SelectDiscDevCB_t pfnSelectDiscDevCB = NULL;
   \                     pfnSelectDiscDevCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    167          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    168          static uint8 initiatorRegisteredMsgAppTaskID = TASK_NO_TASK;
   \                     initiatorRegisteredMsgAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for initiatorRegisteredMsgAppTas`
   \   000001                REQUIRE __INIT_XDATA_I
    169          
    170          /*********************************************************************
    171           * GLOBAL FUNCTIONS
    172           */
    173          extern void touchLink_ItemInit( uint16 id, uint16 len, void *pBuf );
    174          
    175          /*********************************************************************
    176           * LOCAL FUNCTIONS
    177           */
    178          
    179          static ZStatus_t initiatorScanReqCB( afAddrType_t *srcAddr, bdbTLScanReq_t *pReq, uint8 seqNum );
    180          static ZStatus_t initiatorDeviceInfoReqCB( afAddrType_t *srcAddr, bdbTLDeviceInfoReq_t *pReq, uint8 seqNum );
    181          static ZStatus_t initiatorIdentifyReqCB( afAddrType_t *srcAddr, bdbTLIdentifyReq_t *pReq );
    182          static ZStatus_t initiatorNwkJoinReqCB( afAddrType_t *srcAddr, bdbTLNwkJoinReq_t *pReq, uint8 seqNum );
    183          static ZStatus_t initiatorNwkUpdateReqCB( afAddrType_t *srcAddr, bdbTLNwkUpdateReq_t *pReq );
    184          static ZStatus_t initiatorScanRspCB( afAddrType_t *srcAddr, bdbTLScanRsp_t *pRsp );
    185          static ZStatus_t initiatorDeviceInfoRspCB( afAddrType_t *srcAddr, bdbTLDeviceInfoRsp_t *pRsp );
    186          static ZStatus_t initiatorNwkStartRspCB( afAddrType_t *srcAddr, bdbTLNwkStartRsp_t *pRsp );
    187          static ZStatus_t initiatorNwkJoinRtrRspCB( afAddrType_t *srcAddr, bdbTLNwkJoinRsp_t *pRsp );
    188          static ZStatus_t initiatorNwkJoinEDRspCB( afAddrType_t *srcAddr, bdbTLNwkJoinRsp_t *pRsp );
    189          static void *initiatorZdoLeaveCnfCB( void *pParam );
    190          static ZStatus_t touchLink_InitiatorSendScanRsp( uint8 srcEP, afAddrType_t *dstAddr, uint32 transID, uint8 seqNum );
    191          static void initiatorProcessStateChange( devStates_t state );
    192          static void initiatorSetNwkToInitState( void );
    193          #if ( ZSTACK_ROUTER_BUILD )
    194          static void initiatorJoinNwk( void );
    195          #endif
    196          static void initiatorReJoinNwk( devStartModes_t startMode );
    197          static void initiatorSendScanReq( bool freshScan );
    198          static ZStatus_t initiatorSendNwkStartReq( bdbTLScanRsp_t *pRsp );
    199          static ZStatus_t initiatorSendNwkJoinReq( bdbTLScanRsp_t *pRsp );
    200          static ZStatus_t initiatorSendNwkUpdateReq( bdbTLScanRsp_t *pRsp );
    201          static void initiatorClearSelectedTarget( void );
    202          
    203          /*********************************************************************
    204           * TOUCHLINK Initiator Callback Table
    205           */
    206          // Initiator Command Callbacks table

   \                                 In  segment XDATA_I, align 1, keep-with-next
    207          static bdbTL_InterPANCallbacks_t touchLinkInitiator_CmdCBs =
   \                     touchLinkInitiator_CmdCBs:
   \   000000                DS 26
   \   00001A                REQUIRE `?<Initializer for touchLinkInitiator_CmdCBs>`
   \   00001A                REQUIRE __INIT_XDATA_I
    208          {
    209            // Received Server Commands
    210            initiatorScanReqCB,       // Scan Request command
    211            initiatorDeviceInfoReqCB, // Device Information Request command
    212            initiatorIdentifyReqCB,   // Identify Request command
    213            NULL,                     // Reset to Factory New Request command
    214            NULL,                     // Network Start Request command
    215          #if ( ZSTACK_ROUTER_BUILD )
    216            initiatorNwkJoinReqCB,    // Network Join Router Request command
    217            NULL,                     // Network Join End Device Request command
    218          #else
    219            NULL,                     // Network Join Router Request command
    220            initiatorNwkJoinReqCB,    // Network Join End Device Request command
    221          #endif
    222            initiatorNwkUpdateReqCB,  // Network Update Request command
    223          
    224            // Received Client Commands
    225            initiatorScanRspCB,       // Scan Response command
    226            initiatorDeviceInfoRspCB, // Device Information Response command
    227            initiatorNwkStartRspCB,   // Network Start Response command
    228            initiatorNwkJoinRtrRspCB, // Network Join Router Response command
    229            initiatorNwkJoinEDRspCB   // Network Join End Device Response command
    230          };
    231          
    232          /*********************************************************************
    233           * PUBLIC FUNCTIONS
    234           */
    235          
    236          /*********************************************************************
    237           * @fn      touchLinkInitiator_InitDevice
    238           *
    239           * @brief   Start the TOUCHLINK Initiator device in the network if it's not
    240           *          factory new. Otherwise, determine the network parameters
    241           *          and wait for a touchlink command.
    242           *
    243           * @param   none
    244           *
    245           * @return  status
    246           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    247          ZStatus_t touchLinkInitiator_InitDevice( void )
   \                     touchLinkInitiator_InitDevice:
    248          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    249            ZDO_Config_Node_Descriptor.LogicalType = zgDeviceLogicalType;
   \   000004   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX      A,@DPTR
   \   000008   5407         ANL       A,#0x7
   \   00000A   F8           MOV       R0,A
   \   00000B   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   54F8         ANL       A,#0xf8
   \   000011   48           ORL       A,R0
   \   000012   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000015   F0           MOVX      @DPTR,A
    250            
    251            // Is not factory new?
    252            if ( bdbAttributes.bdbNodeIsOnANetwork == TRUE )
   \   000016   90....       MOV       DPTR,#bdbAttributes + 14
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   6401         XRL       A,#0x1
   \   00001C   7007         JNZ       ??touchLinkInitiator_InitDevice_0
    253            {
    254              // Resume ZigBee functionality based on the info stored in NV
    255              initiatorReJoinNwk( MODE_RESUME );
   \   00001E                ; Setup parameters for call to function initiatorReJoinNwk
   \   00001E   7901         MOV       R1,#0x1
   \   000020   12....       LCALL     `??initiatorReJoinNwk::?relay`; Banked call to: initiatorReJoinNwk
   \   000023   8003         SJMP      ??touchLinkInitiator_InitDevice_1
    256            }
    257            else
    258            {
    259              initiatorSelectNwkParams();
   \                     ??touchLinkInitiator_InitDevice_0:
   \   000025                ; Setup parameters for call to function initiatorSelectNwkParams
   \   000025   12....       LCALL     `??initiatorSelectNwkParams::?relay`; Banked call to: initiatorSelectNwkParams
    260            }
    261          
    262          #if defined ( POWER_SAVING )
    263            osal_pwrmgr_device( PWRMGR_BATTERY );
   \                     ??touchLinkInitiator_InitDevice_1:
   \   000028                ; Setup parameters for call to function osal_pwrmgr_device
   \   000028   7901         MOV       R1,#0x1
   \   00002A   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
    264          #endif
    265          
    266          #if ( ZSTACK_ROUTER_BUILD )
    267            // Enable our receiver
    268            savedRxOnIdle = TRUE;
    269            ZMacSetReq( ZMacRxOnIdle, &savedRxOnIdle );
    270            touchLink_PermitJoin(0);
    271          #endif
    272          
    273            return ( ZSuccess );
   \   00002D   7900         MOV       R1,#0x0
   \   00002F   D083         POP       DPH
   \   000031   D082         POP       DPL
   \   000033   02....       LJMP      ?BRET
    274          }
    275          
    276          /*********************************************************************
    277           * @fn      touchLinkInitiator_RegisterNotifyTLCB
    278           *
    279           * @brief   Register an Application's Touch-Link Notify callback function.
    280           *
    281           * @param   pfnNotifyApp - application callback
    282           *
    283           * @return  none
    284           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    285          void touchLinkInitiator_RegisterNotifyTLCB( touchLink_NotifyAppTLCB_t pfnNotifyApp )
   \                     touchLinkInitiator_RegisterNotifyTLCB:
    286          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    287            pfnNotifyAppCB = pfnNotifyApp;
   \   000004   90....       MOV       DPTR,#pfnNotifyAppCB
   \   000007   EA           MOV       A,R2
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   EB           MOV       A,R3
   \   00000B   F0           MOVX      @DPTR,A
    288          }
   \   00000C   D083         POP       DPH
   \   00000E   D082         POP       DPL
   \   000010   02....       LJMP      ?BRET
    289          
    290          /*********************************************************************
    291           * @fn      touchLinkInitiator_RegisterSelectDiscDevCB
    292           *
    293           * @brief   Register an Application's Selection callback function, to select
    294           *          a target from the discovered devices during a Touch-link scan.
    295           *
    296           * @param   pfnSelectDiscDev - application callback
    297           *
    298           * @return  none
    299           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    300          void touchLinkInitiator_RegisterSelectDiscDevCB( touchLink_SelectDiscDevCB_t pfnSelectDiscDev )
   \                     touchLinkInitiator_RegisterSelectDiscDevCB:
    301          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    302            pfnSelectDiscDevCB = pfnSelectDiscDev;
   \   000004   90....       MOV       DPTR,#pfnSelectDiscDevCB
   \   000007   EA           MOV       A,R2
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   EB           MOV       A,R3
   \   00000B   F0           MOVX      @DPTR,A
    303          }
   \   00000C   D083         POP       DPH
   \   00000E   D082         POP       DPL
   \   000010   02....       LJMP      ?BRET
    304          
    305          /*********************************************************************
    306           * @fn      touchLinkInitiator_StartDevDisc
    307           *
    308           * @brief   Start device discovery, scanning for other devices in the vicinity
    309           *          of the originator (initiating first part of the Touch-Link process).
    310           *          Device discovery shall only be initiated by address assignment capable
    311           *          devices. To perform device discovery, the initiator shall broadcast
    312           *          inter-PAN Scan Requests, spaced at an interval of
    313           *          BDBCTL_SCAN_TIME_BASE_DURATION seconds.
    314           *
    315           * @param   none
    316           *
    317           * @return  status
    318           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    319          ZStatus_t touchLinkInitiator_StartDevDisc( void )
   \                     touchLinkInitiator_StartDevDisc:
    320          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    321            osal_clear_event( ZDAppTaskID, ZDO_NETWORK_INIT ); // in case orphaned rejoin was called
   \   00000A                ; Setup parameters for call to function osal_clear_event
   \   00000A   7A01         MOV       R2,#0x1
   \   00000C   7B00         MOV       R3,#0x0
   \   00000E   90....       MOV       DPTR,#ZDAppTaskID
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F9           MOV       R1,A
   \   000013   12....       LCALL     `??osal_clear_event::?relay`; Banked call to: osal_clear_event
   \   000016   E9           MOV       A,R1
    322            ZDApp_StopJoiningCycle();
   \   000017                ; Setup parameters for call to function ZDApp_StopJoiningCycle
   \   000017   12....       LCALL     `??ZDApp_StopJoiningCycle::?relay`; Banked call to: ZDApp_StopJoiningCycle
   \   00001A   E9           MOV       A,R1
    323          
    324            //abort any touchlink in progress and start the new dev discovery.
    325            touchLinkInitiator_AbortTL();
   \   00001B                ; Setup parameters for call to function touchLinkInitiator_AbortTL
   \   00001B   12....       LCALL     `??touchLinkInitiator_AbortTL::?relay`; Banked call to: touchLinkInitiator_AbortTL
   \   00001E   E9           MOV       A,R1
    326          
    327            // To perform device discovery, switch to channel 11 and broadcast five
    328            // consecutive inter-PAN Scan Requests. Then switch to each remaining
    329            // TOUCHLINK channels in turn (i.e., 15, 20, and 25) and broadcast a single
    330            // inter-PAN Scan Request on each channel.
    331            if ( !osal_get_timeoutEx( touchLinkInitiator_TaskID, TOUCHLINK_TL_SCAN_BASE_EVT ) )
   \   00001F                ; Setup parameters for call to function osal_get_timeoutEx
   \   00001F   7A20         MOV       R2,#0x20
   \   000021   7B00         MOV       R3,#0x0
   \   000023   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F9           MOV       R1,A
   \   000028   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   00002B   EA           MOV       A,R2
   \   00002C   4B           ORL       A,R3
   \   00002D   4C           ORL       A,R4
   \   00002E   4D           ORL       A,R5
   \   00002F   6003         JZ        $+5
   \   000031   02....       LJMP      ??touchLinkInitiator_StartDevDisc_0 & 0xFFFF
    332            {
    333              uint8 x = TRUE;
   \   000034   85..82       MOV       DPL,?XSP + 0
   \   000037   85..83       MOV       DPH,?XSP + 1
   \   00003A   7401         MOV       A,#0x1
   \   00003C   F0           MOVX      @DPTR,A
    334          
    335              // Generate a new Transaction Id
    336              touchLinkTransID = ( ( (uint32)osal_rand() ) << 16 ) + osal_rand();
   \   00003D                ; Setup parameters for call to function osal_rand
   \   00003D   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000040   8A..         MOV       ?V2,R2
   \   000042   8B..         MOV       ?V3,R3
   \   000044   85....       MOV       ?V0,?V2
   \   000047   85....       MOV       ?V1,?V3
   \   00004A   85....       MOV       ?V4,?V0
   \   00004D   85....       MOV       ?V5,?V1
   \   000050   E4           CLR       A
   \   000051   F5..         MOV       ?V6,A
   \   000053   F5..         MOV       ?V7,A
   \   000055   7410         MOV       A,#0x10
   \   000057   78..         MOV       R0,#?V4
   \   000059   12....       LCALL     ?L_SHL
   \   00005C                ; Setup parameters for call to function osal_rand
   \   00005C   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   00005F   8A..         MOV       ?V0,R2
   \   000061   8B..         MOV       ?V1,R3
   \   000063   E4           CLR       A
   \   000064   F5..         MOV       ?V2,A
   \   000066   F5..         MOV       ?V3,A
   \   000068   78..         MOV       R0,#?V4
   \   00006A   79..         MOV       R1,#?V0
   \   00006C   12....       LCALL     ?L_ADD
   \   00006F   90....       MOV       DPTR,#touchLinkTransID
   \   000072   78..         MOV       R0,#?V4
   \   000074   12....       LCALL     ?L_MOV_TO_X
    337              osal_start_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_TRANS_LIFETIME_EXPIRED_EVT,
    338                                  BDBCTL_INTER_PAN_TRANS_ID_LIFETIME );
   \   000077                ; Setup parameters for call to function osal_start_timerEx
   \   000077   90....       MOV       DPTR,#__Constant_1f40
   \   00007A   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00007D   7A10         MOV       R2,#0x10
   \   00007F   7B00         MOV       R3,#0x0
   \   000081   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000084   E0           MOVX      A,@DPTR
   \   000085   F9           MOV       R1,A
   \   000086   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000089   7404         MOV       A,#0x4
   \   00008B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008E   E9           MOV       A,R1
    339          
    340              if ( bdbAttributes.bdbNodeIsOnANetwork == TRUE )
   \   00008F   90....       MOV       DPTR,#bdbAttributes + 14
   \   000092   E0           MOVX      A,@DPTR
   \   000093   6401         XRL       A,#0x1
   \   000095   7049         JNZ       ??touchLinkInitiator_StartDevDisc_1
    341              {
    342                // Turn off polling during touch-link procedure
    343                savedPollRate = zgPollRate;
   \   000097   90....       MOV       DPTR,#zgPollRate
   \   00009A   78..         MOV       R0,#?V0
   \   00009C   12....       LCALL     ?L_MOV_X
   \   00009F   90....       MOV       DPTR,#savedPollRate
   \   0000A2   E5..         MOV       A,?V0
   \   0000A4   F0           MOVX      @DPTR,A
   \   0000A5   A3           INC       DPTR
   \   0000A6   E5..         MOV       A,?V1
   \   0000A8   F0           MOVX      @DPTR,A
    344                savedQueuedPollRate = zgQueuedPollRate;
   \   0000A9   90....       MOV       DPTR,#zgQueuedPollRate
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   F8           MOV       R0,A
   \   0000AE   A3           INC       DPTR
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   F9           MOV       R1,A
   \   0000B1   90....       MOV       DPTR,#savedQueuedPollRate
   \   0000B4   E8           MOV       A,R0
   \   0000B5   F0           MOVX      @DPTR,A
   \   0000B6   A3           INC       DPTR
   \   0000B7   E9           MOV       A,R1
   \   0000B8   F0           MOVX      @DPTR,A
    345                savedResponsePollRate = zgResponsePollRate;
   \   0000B9   90....       MOV       DPTR,#zgResponsePollRate
   \   0000BC   E0           MOVX      A,@DPTR
   \   0000BD   F8           MOV       R0,A
   \   0000BE   A3           INC       DPTR
   \   0000BF   E0           MOVX      A,@DPTR
   \   0000C0   F9           MOV       R1,A
   \   0000C1   90....       MOV       DPTR,#savedResponsePollRate
   \   0000C4   E8           MOV       A,R0
   \   0000C5   F0           MOVX      @DPTR,A
   \   0000C6   A3           INC       DPTR
   \   0000C7   E9           MOV       A,R1
   \   0000C8   F0           MOVX      @DPTR,A
    346          
    347                NLME_SetPollRate( 0 );
   \   0000C9                ; Setup parameters for call to function NLME_SetPollRate
   \   0000C9   90....       MOV       DPTR,#__Constant_0
   \   0000CC   12....       LCALL     ?XLOAD_R2345
   \   0000CF   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
    348                NLME_SetQueuedPollRate( 0 );
   \   0000D2                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   0000D2   7A00         MOV       R2,#0x0
   \   0000D4   7B00         MOV       R3,#0x0
   \   0000D6   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
    349                NLME_SetResponseRate( 0 );
   \   0000D9                ; Setup parameters for call to function NLME_SetResponseRate
   \   0000D9   7A00         MOV       R2,#0x0
   \   0000DB   7B00         MOV       R3,#0x0
   \   0000DD   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
    350              }
    351          
    352              // Remember current rx state
    353              ZMacGetReq( ZMacRxOnIdle, &savedRxOnIdle );
   \                     ??touchLinkInitiator_StartDevDisc_1:
   \   0000E0                ; Setup parameters for call to function ZMacGetReq
   \   0000E0   7A..         MOV       R2,#savedRxOnIdle & 0xff
   \   0000E2   7B..         MOV       R3,#(savedRxOnIdle >> 8) & 0xff
   \   0000E4   7952         MOV       R1,#0x52
   \   0000E6   12....       LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
   \   0000E9   E9           MOV       A,R1
    354          
    355              // MAC receiver should be on during touch-link procedure
    356              ZMacSetReq( ZMacRxOnIdle, &x );
   \   0000EA                ; Setup parameters for call to function ZMacSetReq
   \   0000EA   AA..         MOV       R2,?XSP + 0
   \   0000EC   AB..         MOV       R3,?XSP + 1
   \   0000EE   7952         MOV       R1,#0x52
   \   0000F0   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   0000F3   E9           MOV       A,R1
    357          
    358              scanReqChannels = TOUCHLINK_SCAN_PRIMARY_CHANNELS;
   \   0000F4   90....       MOV       DPTR,#scanReqChannels
   \   0000F7   7401         MOV       A,#0x1
   \   0000F9   F0           MOVX      @DPTR,A
    359              numScanReqSent = 0;
   \   0000FA   90....       MOV       DPTR,#numScanReqSent
   \   0000FD   7400         MOV       A,#0x0
   \   0000FF   F0           MOVX      @DPTR,A
    360          
    361              // Send out the first Scan Request
    362              initiatorSendScanReq( TRUE );
   \   000100                ; Setup parameters for call to function initiatorSendScanReq
   \   000100   7901         MOV       R1,#0x1
   \   000102   12....       LCALL     `??initiatorSendScanReq::?relay`; Banked call to: initiatorSendScanReq
    363          
    364              return ( ZSuccess );
   \   000105   7900         MOV       R1,#0x0
   \   000107   8002         SJMP      ??touchLinkInitiator_StartDevDisc_2
    365            }
    366          
    367            return ( ZFailure );
   \                     ??touchLinkInitiator_StartDevDisc_0:
   \   000109   7901         MOV       R1,#0x1
   \                     ??touchLinkInitiator_StartDevDisc_2:
   \   00010B   7401         MOV       A,#0x1
   \   00010D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000110   7F08         MOV       R7,#0x8
   \   000112   02....       LJMP      ?BANKED_LEAVE_XDATA
    368          }
    369          
    370          /*********************************************************************
    371           * @fn      bdbTL_Send_IndentifyReq
    372           *
    373           * @brief   Call to send out a scan request for factory new procedure
    374           *
    375           * @param   
    376           *
    377           * @return 
    378           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    379          void touchLinkInitiator_ResetToFNProcedure( void )
   \                     touchLinkInitiator_ResetToFNProcedure:
    380          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    381            if ( ( bdbCommissioningProcedureState.bdbCommissioningState == 0 ) || ( osal_get_timeoutEx( bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE ) == 0 ) )
   \   000004   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6012         JZ        ??touchLinkInitiator_ResetToFNProcedure_0
   \   00000A                ; Setup parameters for call to function osal_get_timeoutEx
   \   00000A   7A04         MOV       R2,#0x4
   \   00000C   7B00         MOV       R3,#0x0
   \   00000E   90....       MOV       DPTR,#bdb_TaskID
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F9           MOV       R1,A
   \   000013   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000016   EA           MOV       A,R2
   \   000017   4B           ORL       A,R3
   \   000018   4C           ORL       A,R4
   \   000019   4D           ORL       A,R5
   \   00001A   700A         JNZ       ??touchLinkInitiator_ResetToFNProcedure_1
    382            {
    383              touchlinkFNReset = TRUE;
   \                     ??touchLinkInitiator_ResetToFNProcedure_0:
   \   00001C   90....       MOV       DPTR,#touchlinkFNReset
   \   00001F   7401         MOV       A,#0x1
   \   000021   F0           MOVX      @DPTR,A
    384              touchLinkInitiator_StartDevDisc( );
   \   000022                ; Setup parameters for call to function touchLinkInitiator_StartDevDisc
   \   000022   12....       LCALL     `??touchLinkInitiator_StartDevDisc::?relay`; Banked call to: touchLinkInitiator_StartDevDisc
   \   000025   E9           MOV       A,R1
    385            }
    386          }
   \                     ??touchLinkInitiator_ResetToFNProcedure_1:
   \   000026   D083         POP       DPH
   \   000028   D082         POP       DPL
   \   00002A   02....       LJMP      ?BRET
    387          
    388          /*********************************************************************
    389           * @fn      touchLinkInitiator_AbortTL
    390           *
    391           * @brief   Abort Touch-link device discovery.
    392           *          Successful execution could be done before Network Start/Join
    393           *          commands are sent. Until then, since no device parameters
    394           *          such as network settings are altered, the Touch-Link is
    395           *          still reversible.
    396           *
    397           * @param   none
    398           *
    399           * @return  status
    400           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    401          ZStatus_t touchLinkInitiator_AbortTL( void )
   \                     touchLinkInitiator_AbortTL:
    402          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    403            if ( ( osal_stop_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_TL_SCAN_BASE_EVT ) == SUCCESS )
    404                 || ( osal_stop_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_CFG_TARGET_EVT ) == SUCCESS )
    405                 || ( osal_stop_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_W4_NWK_START_RSP_EVT ) == SUCCESS )
    406                 || ( osal_stop_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_W4_NWK_JOIN_RSP_EVT ) == SUCCESS ) )
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A20         MOV       R2,#0x20
   \   000006   7B00         MOV       R3,#0x0
   \   000008   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000010   E9           MOV       A,R1
   \   000011   602D         JZ        ??touchLinkInitiator_AbortTL_0
   \   000013                ; Setup parameters for call to function osal_stop_timerEx
   \   000013   7A40         MOV       R2,#0x40
   \   000015   7B00         MOV       R3,#0x0
   \   000017   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F9           MOV       R1,A
   \   00001C   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   00001F   E9           MOV       A,R1
   \   000020   601E         JZ        ??touchLinkInitiator_AbortTL_0
   \   000022                ; Setup parameters for call to function osal_stop_timerEx
   \   000022   7A80         MOV       R2,#-0x80
   \   000024   7B00         MOV       R3,#0x0
   \   000026   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F9           MOV       R1,A
   \   00002B   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   00002E   E9           MOV       A,R1
   \   00002F   600F         JZ        ??touchLinkInitiator_AbortTL_0
   \   000031                ; Setup parameters for call to function osal_stop_timerEx
   \   000031   7A00         MOV       R2,#0x0
   \   000033   7B01         MOV       R3,#0x1
   \   000035   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F9           MOV       R1,A
   \   00003A   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   00003D   E9           MOV       A,R1
   \   00003E   702C         JNZ       ??touchLinkInitiator_AbortTL_1
    407            {
    408              initiatorSetNwkToInitState();
   \                     ??touchLinkInitiator_AbortTL_0:
   \   000040                ; Setup parameters for call to function initiatorSetNwkToInitState
   \   000040   12....       LCALL     `??initiatorSetNwkToInitState::?relay`; Banked call to: initiatorSetNwkToInitState
    409              touchLinkTransID = 0;
   \   000043   90....       MOV       DPTR,#touchLinkTransID
   \   000046   7400         MOV       A,#0x0
   \   000048   F0           MOVX      @DPTR,A
   \   000049   A3           INC       DPTR
   \   00004A   7400         MOV       A,#0x0
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   A3           INC       DPTR
   \   00004E   7400         MOV       A,#0x0
   \   000050   F0           MOVX      @DPTR,A
   \   000051   A3           INC       DPTR
   \   000052   7400         MOV       A,#0x0
   \   000054   F0           MOVX      @DPTR,A
    410              numScanReqSent = 0;
   \   000055   90....       MOV       DPTR,#numScanReqSent
   \   000058   7400         MOV       A,#0x0
   \   00005A   F0           MOVX      @DPTR,A
    411              initiatorClearSelectedTarget();
   \   00005B                ; Setup parameters for call to function initiatorClearSelectedTarget
   \   00005B   12....       LCALL     `??initiatorClearSelectedTarget::?relay`; Banked call to: initiatorClearSelectedTarget
    412              selectedTargetNwkAddr = 0;
   \   00005E   90....       MOV       DPTR,#selectedTargetNwkAddr
   \   000061   7400         MOV       A,#0x0
   \   000063   F0           MOVX      @DPTR,A
   \   000064   A3           INC       DPTR
   \   000065   7400         MOV       A,#0x0
   \   000067   F0           MOVX      @DPTR,A
    413          
    414              return ( ZSuccess );
   \   000068   7900         MOV       R1,#0x0
   \   00006A   8002         SJMP      ??touchLinkInitiator_AbortTL_2
    415            }
    416          
    417            return ( ZFailure );
   \                     ??touchLinkInitiator_AbortTL_1:
   \   00006C   7901         MOV       R1,#0x1
   \                     ??touchLinkInitiator_AbortTL_2:
   \   00006E   D083         POP       DPH
   \   000070   D082         POP       DPL
   \   000072   02....       LJMP      ?BRET
    418          }
    419          
    420          /*********************************************************************
    421           * @fn          touchLinkInitiator_Init
    422           *
    423           * @brief       Initialization function for the TOUCHLINK Initiator task.
    424           *
    425           * @param       task_id - TOUCHLINK Initiator task id
    426           *
    427           * @return      none
    428           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    429          void touchLinkInitiator_Init( uint8 task_id )
   \                     touchLinkInitiator_Init:
    430          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    431            // Save our own Task ID
    432            touchLinkInitiator_TaskID = task_id;
   \   000007   EE           MOV       A,R6
   \   000008   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   00000B   F0           MOVX      @DPTR,A
    433          
    434            touchLink_SetTouchLinkTaskId( touchLinkInitiator_TaskID );
   \   00000C                ; Setup parameters for call to function touchLink_SetTouchLinkTaskId
   \   00000C   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F9           MOV       R1,A
   \   000011   12....       LCALL     `??touchLink_SetTouchLinkTaskId::?relay`; Banked call to: touchLink_SetTouchLinkTaskId
    435          
    436          
    437            // Build a broadcast address for the Scan Request
    438            bcastAddr.addrMode = afAddrBroadcast;
   \   000014   90....       MOV       DPTR,#bcastAddr + 8
   \   000017   740F         MOV       A,#0xf
   \   000019   F0           MOVX      @DPTR,A
    439            bcastAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVALL;
   \   00001A   90....       MOV       DPTR,#bcastAddr
   \   00001D   74FF         MOV       A,#-0x1
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   A3           INC       DPTR
   \   000021   74FF         MOV       A,#-0x1
   \   000023   F0           MOVX      @DPTR,A
    440            bcastAddr.panId = 0xFFFF;
   \   000024   90....       MOV       DPTR,#bcastAddr + 10
   \   000027   74FF         MOV       A,#-0x1
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   74FF         MOV       A,#-0x1
   \   00002D   F0           MOVX      @DPTR,A
    441            bcastAddr.endPoint = STUBAPS_INTER_PAN_EP;
   \   00002E   90....       MOV       DPTR,#bcastAddr + 9
   \   000031   74FE         MOV       A,#-0x2
   \   000033   F0           MOVX      @DPTR,A
    442          
    443            // Initialize TOUCHLINK common variables
    444            touchLink_InitVariables( TRUE );
   \   000034                ; Setup parameters for call to function touchLink_InitVariables
   \   000034   7901         MOV       R1,#0x1
   \   000036   12....       LCALL     `??touchLink_InitVariables::?relay`; Banked call to: touchLink_InitVariables
    445          
    446            savedPollRate = POLL_RATE;
   \   000039   90....       MOV       DPTR,#savedPollRate
   \   00003C   74E8         MOV       A,#-0x18
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   A3           INC       DPTR
   \   000040   7403         MOV       A,#0x3
   \   000042   F0           MOVX      @DPTR,A
    447            savedQueuedPollRate = QUEUED_POLL_RATE;
   \   000043   90....       MOV       DPTR,#savedQueuedPollRate
   \   000046   7464         MOV       A,#0x64
   \   000048   F0           MOVX      @DPTR,A
   \   000049   A3           INC       DPTR
   \   00004A   7400         MOV       A,#0x0
   \   00004C   F0           MOVX      @DPTR,A
    448            savedResponsePollRate = RESPONSE_POLL_RATE;
   \   00004D   90....       MOV       DPTR,#savedResponsePollRate
   \   000050   7464         MOV       A,#0x64
   \   000052   F0           MOVX      @DPTR,A
   \   000053   A3           INC       DPTR
   \   000054   7400         MOV       A,#0x0
   \   000056   F0           MOVX      @DPTR,A
    449          
    450            numScanReqSent = 0;
   \   000057   90....       MOV       DPTR,#numScanReqSent
   \   00005A   7400         MOV       A,#0x0
   \   00005C   F0           MOVX      @DPTR,A
    451            initiatorClearSelectedTarget();
   \   00005D                ; Setup parameters for call to function initiatorClearSelectedTarget
   \   00005D   12....       LCALL     `??initiatorClearSelectedTarget::?relay`; Banked call to: initiatorClearSelectedTarget
    452            scanReqChannels = TOUCHLINK_SCAN_PRIMARY_CHANNELS;
   \   000060   90....       MOV       DPTR,#scanReqChannels
   \   000063   7401         MOV       A,#0x1
   \   000065   F0           MOVX      @DPTR,A
    453          
    454            initiatorSeqNum = 0;
   \   000066   90....       MOV       DPTR,#initiatorSeqNum
   \   000069   7400         MOV       A,#0x0
   \   00006B   F0           MOVX      @DPTR,A
    455          
    456            // Register to receive the unprocessed Foundation command/response messages
    457            zcl_registerForMsg( touchLinkInitiator_TaskID );
   \   00006C                ; Setup parameters for call to function zcl_registerForMsg
   \   00006C   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   F9           MOV       R1,A
   \   000071   12....       LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
   \   000074   E9           MOV       A,R1
    458          
    459            // Register for TOUCHLINK Initiator callbacks (for Inter-PAN commands)
    460            bdbTL_RegisterInterPANCmdCallbacks( &touchLinkInitiator_CmdCBs );
   \   000075                ; Setup parameters for call to function bdbTL_RegisterInterPANCmdCallbacks
   \   000075   7A..         MOV       R2,#touchLinkInitiator_CmdCBs & 0xff
   \   000077   7B..         MOV       R3,#(touchLinkInitiator_CmdCBs >> 8) & 0xff
   \   000079   12....       LCALL     `??bdbTL_RegisterInterPANCmdCallbacks::?relay`; Banked call to: bdbTL_RegisterInterPANCmdCallbacks
   \   00007C   E9           MOV       A,R1
    461          
    462            // Register for Initiator to receive Leave Confirm
    463            ZDO_RegisterForZdoCB( ZDO_LEAVE_CNF_CBID, initiatorZdoLeaveCnfCB );
   \   00007D                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   00007D   7A..         MOV       R2,#`??initiatorZdoLeaveCnfCB::?relay` & 0xff
   \   00007F   7B..         MOV       R3,#(`??initiatorZdoLeaveCnfCB::?relay` >> 8) & 0xff
   \   000081   7905         MOV       R1,#0x5
   \   000083   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   \   000086   E9           MOV       A,R1
    464          
    465          #if (ZSTACK_ROUTER_BUILD)
    466            // Register to process ZDO messages
    467            ZDO_RegisterForZDOMsg( touchLinkInitiator_TaskID, Mgmt_Permit_Join_req );
    468            ZDO_RegisterForZDOMsg( touchLinkInitiator_TaskID, Device_annce );
    469          #endif
    470          
    471          }
   \   000087   7F01         MOV       R7,#0x1
   \   000089   02....       LJMP      ?BANKED_LEAVE_XDATA
    472          
    473          /*********************************************************************
    474           * @fn      initiatorSelectNwkParams
    475           *
    476           * @brief   Select a unique PAN ID and Extended PAN ID when compared to
    477           *          the PAN IDs and Extended PAN IDs of the networks detected
    478           *          on the TOUCHLINK channels. The selected Extended PAN ID must be
    479           *          a random number (and not equal to our IEEE address).
    480           *
    481           * @param   void
    482           *
    483           * @return  void
    484           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    485          void initiatorSelectNwkParams( void )
   \                     initiatorSelectNwkParams:
    486          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    487            // Set our group ID range
    488            touchLink_PopGrpIDRange( touchLink_GetNumGrpIDs(), &touchLinkGrpIDsBegin, &touchLinkGrpIDsEnd );
   \   000004                ; Setup parameters for call to function touchLink_GetNumGrpIDs
   \   000004   12....       LCALL     `??touchLink_GetNumGrpIDs::?relay`; Banked call to: touchLink_GetNumGrpIDs
   \   000007   E9           MOV       A,R1
   \   000008   F9           MOV       R1,A
   \   000009                ; Setup parameters for call to function touchLink_PopGrpIDRange
   \   000009   7C..         MOV       R4,#touchLinkGrpIDsEnd & 0xff
   \   00000B   7D..         MOV       R5,#(touchLinkGrpIDsEnd >> 8) & 0xff
   \   00000D   7A..         MOV       R2,#touchLinkGrpIDsBegin & 0xff
   \   00000F   7B..         MOV       R3,#(touchLinkGrpIDsBegin >> 8) & 0xff
   \   000011   12....       LCALL     `??touchLink_PopGrpIDRange::?relay`; Banked call to: touchLink_PopGrpIDRange
    489          
    490            // Select a random Extended PAN ID
    491            touchLink_GenerateRandNum( _NIB.extendedPANID, Z_EXTADDR_LEN );
   \   000014                ; Setup parameters for call to function touchLink_GenerateRandNum
   \   000014   7908         MOV       R1,#0x8
   \   000016   7A..         MOV       R2,#(_NIB + 53) & 0xff
   \   000018   7B..         MOV       R3,#((_NIB + 53) >> 8) & 0xff
   \   00001A   12....       LCALL     `??touchLink_GenerateRandNum::?relay`; Banked call to: touchLink_GenerateRandNum
    492          
    493            // Select a random PAN ID
    494            _NIB.nwkPanId = osal_rand();
   \   00001D                ; Setup parameters for call to function osal_rand
   \   00001D   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000020   90....       MOV       DPTR,#_NIB + 33
   \   000023   EA           MOV       A,R2
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   EB           MOV       A,R3
   \   000027   F0           MOVX      @DPTR,A
    495          
    496            if ( _NIB.nwkLogicalChannel == 0 )
   \   000028   90....       MOV       DPTR,#_NIB + 22
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   7006         JNZ       ??initiatorSelectNwkParams_0
    497            {
    498              if (TOUCHLINK_FIXED_CHANNEL_ENABLE == TRUE )
    499              {
    500                // Use the fixed channel defined in bdb_interface
    501                _NIB.nwkLogicalChannel = TOUCHLINK_FIXED_CHANNEL;
   \   00002E   90....       MOV       DPTR,#_NIB + 22
   \   000031   740B         MOV       A,#0xb
   \   000033   F0           MOVX      @DPTR,A
    502              }
    503              else
    504              {
    505                // Select randomly one of the TouchLink channels as our logical channel
    506                _NIB.nwkLogicalChannel = touchLink_GetRandPrimaryChannel( );
    507              }
    508            }
    509            
    510            selectedTargetNwkAddr = 0;
   \                     ??initiatorSelectNwkParams_0:
   \   000034   90....       MOV       DPTR,#selectedTargetNwkAddr
   \   000037   7400         MOV       A,#0x0
   \   000039   F0           MOVX      @DPTR,A
   \   00003A   A3           INC       DPTR
   \   00003B   7400         MOV       A,#0x0
   \   00003D   F0           MOVX      @DPTR,A
    511          
    512            if ( devState != DEV_INIT )
   \   00003E   90....       MOV       DPTR,#devState
   \   000041   E0           MOVX      A,@DPTR
   \   000042   6401         XRL       A,#0x1
   \   000044   600B         JZ        ??initiatorSelectNwkParams_1
    513            {
    514              // Let's assume we're the first initiator
    515              _NIB.nwkDevAddress = touchLink_PopNwkAddress();
   \   000046                ; Setup parameters for call to function touchLink_PopNwkAddress
   \   000046   12....       LCALL     `??touchLink_PopNwkAddress::?relay`; Banked call to: touchLink_PopNwkAddress
   \   000049   90....       MOV       DPTR,#_NIB + 20
   \   00004C   EA           MOV       A,R2
   \   00004D   F0           MOVX      @DPTR,A
   \   00004E   A3           INC       DPTR
   \   00004F   EB           MOV       A,R3
   \   000050   F0           MOVX      @DPTR,A
    516            }
    517          
    518            // Configure MAC with our network parameters
    519            touchLink_SetMacNwkParams( _NIB.nwkDevAddress, _NIB.nwkPanId, _NIB.nwkLogicalChannel );
   \                     ??initiatorSelectNwkParams_1:
   \   000051                ; Setup parameters for call to function touchLink_SetMacNwkParams
   \   000051   90....       MOV       DPTR,#_NIB + 22
   \   000054   E0           MOVX      A,@DPTR
   \   000055   F9           MOV       R1,A
   \   000056   90....       MOV       DPTR,#_NIB + 33
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   FC           MOV       R4,A
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   FD           MOV       R5,A
   \   00005E   90....       MOV       DPTR,#_NIB + 20
   \   000061   E0           MOVX      A,@DPTR
   \   000062   FA           MOV       R2,A
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   FB           MOV       R3,A
   \   000066   12....       LCALL     `??touchLink_SetMacNwkParams::?relay`; Banked call to: touchLink_SetMacNwkParams
    520          }
   \   000069   D083         POP       DPH
   \   00006B   D082         POP       DPL
   \   00006D   02....       LJMP      ?BRET
    521          
    522          /*********************************************************************
    523           * @fn      touchLinkInitiator_RegisterForMsg
    524           *
    525           * @brief   Register application task to receive unprocessed messages
    526           *          received by the initiator endpoint.
    527           *
    528           * @param   taskId - task Id of the Application where commands will be sent to
    529           *
    530           * @return  ZSuccess if task registration successful
    531           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    532          ZStatus_t touchLinkInitiator_RegisterForMsg( uint8 taskId )
   \                     touchLinkInitiator_RegisterForMsg:
    533          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   F8           MOV       R0,A
    534            if ( initiatorRegisteredMsgAppTaskID == TASK_NO_TASK )
   \   000006   90....       MOV       DPTR,#initiatorRegisteredMsgAppTaskID
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   64FF         XRL       A,#0xff
   \   00000C   7009         JNZ       ??touchLinkInitiator_RegisterForMsg_0
    535            {
    536              initiatorRegisteredMsgAppTaskID = taskId;
   \   00000E   E8           MOV       A,R0
   \   00000F   90....       MOV       DPTR,#initiatorRegisteredMsgAppTaskID
   \   000012   F0           MOVX      @DPTR,A
    537              return ( ZSuccess );
   \   000013   7900         MOV       R1,#0x0
   \   000015   8002         SJMP      ??touchLinkInitiator_RegisterForMsg_1
    538            }
    539            return ( ZFailure );
   \                     ??touchLinkInitiator_RegisterForMsg_0:
   \   000017   7901         MOV       R1,#0x1
   \                     ??touchLinkInitiator_RegisterForMsg_1:
   \   000019   D083         POP       DPH
   \   00001B   D082         POP       DPL
   \   00001D   02....       LJMP      ?BRET
    540          }
    541          
    542          /*********************************************************************
    543           * @fn          touchLinkInitiator_event_loop
    544           *
    545           * @brief       Event Loop Processor for TOUCHLINK Initiator.
    546           *
    547           * @param       task_id - task id
    548           * @param       events - event bitmap
    549           *
    550           * @return      unprocessed events
    551           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    552          uint16 touchLinkInitiator_event_loop( uint8 task_id, uint16 events )
   \                     touchLinkInitiator_event_loop:
    553          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 87
   \   000005   74A9         MOV       A,#-0x57
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
    554            if ( events & SYS_EVENT_MSG )
   \   000010   EE           MOV       A,R6
   \   000011   5400         ANL       A,#0x0
   \   000013   F8           MOV       R0,A
   \   000014   EF           MOV       A,R7
   \   000015   5480         ANL       A,#0x80
   \   000017   F9           MOV       R1,A
   \   000018   E8           MOV       A,R0
   \   000019   49           ORL       A,R1
   \   00001A   6058         JZ        ??touchLinkInitiator_event_loop_0
    555            {
    556              osal_event_hdr_t *pMsg;
    557              ZStatus_t stat = ZFailure;
   \   00001C   75..01       MOV       ?V3,#0x1
    558          
    559              if ( (pMsg = (osal_event_hdr_t *)osal_msg_receive( task_id )) != NULL )
   \   00001F                ; Setup parameters for call to function osal_msg_receive
   \   00001F   A9..         MOV       R1,?V2
   \   000021   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000024   8A..         MOV       ?V4,R2
   \   000026   8B..         MOV       ?V5,R3
   \   000028   85....       MOV       ?V0,?V4
   \   00002B   85....       MOV       ?V1,?V5
   \   00002E   E5..         MOV       A,?V0
   \   000030   45..         ORL       A,?V1
   \   000032   6035         JZ        ??touchLinkInitiator_event_loop_1
    560              {
    561                switch ( pMsg->event )
   \   000034   85..82       MOV       DPL,?V0
   \   000037   85..83       MOV       DPH,?V1
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   64D1         XRL       A,#0xd1
   \   00003D   700F         JNZ       ??touchLinkInitiator_event_loop_2
    562                {
    563          
    564          #if (ZSTACK_ROUTER_BUILD)
    565                  case ZDO_CB_MSG:
    566                    // ZDO sends the message that we registered for
    567                    touchLink_RouterProcessZDOMsg( (zdoIncomingMsg_t *)pMsg );
    568                    stat = ZSuccess;
    569                    break;
    570          #endif
    571                  case ZDO_STATE_CHANGE:
    572                    initiatorProcessStateChange( (devStates_t)pMsg->status );
   \   00003F                ; Setup parameters for call to function initiatorProcessStateChange
   \   00003F   85..82       MOV       DPL,?V0
   \   000042   85..83       MOV       DPH,?V1
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F9           MOV       R1,A
   \   000048   12....       LCALL     `??initiatorProcessStateChange::?relay`; Banked call to: initiatorProcessStateChange
    573                    stat = ZSuccess;
   \   00004B   75..00       MOV       ?V3,#0x0
    574                    break;
    575          
    576                  default:
    577                    break;
    578                }
    579          
    580                if ( stat == ZSuccess )
   \                     ??touchLinkInitiator_event_loop_2:
   \   00004E   E5..         MOV       A,?V3
   \   000050   700A         JNZ       ??touchLinkInitiator_event_loop_3
    581                {
    582                  // Release the OSAL message
    583                  VOID osal_msg_deallocate( (uint8 *)pMsg );
   \   000052                ; Setup parameters for call to function osal_msg_deallocate
   \   000052   AA..         MOV       R2,?V0
   \   000054   AB..         MOV       R3,?V1
   \   000056   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \   000059   E9           MOV       A,R1
   \   00005A   800D         SJMP      ??touchLinkInitiator_event_loop_1
    584                }
    585                else
    586                {
    587                  // forward to the application
    588                  osal_msg_send( initiatorRegisteredMsgAppTaskID, (uint8 *)pMsg );
   \                     ??touchLinkInitiator_event_loop_3:
   \   00005C                ; Setup parameters for call to function osal_msg_send
   \   00005C   AA..         MOV       R2,?V0
   \   00005E   AB..         MOV       R3,?V1
   \   000060   90....       MOV       DPTR,#initiatorRegisteredMsgAppTaskID
   \   000063   E0           MOVX      A,@DPTR
   \   000064   F9           MOV       R1,A
   \   000065   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000068   E9           MOV       A,R1
    589                }
    590              }
    591          
    592              // return unprocessed events
    593              return ( events ^ SYS_EVENT_MSG );
   \                     ??touchLinkInitiator_event_loop_1:
   \   000069   EE           MOV       A,R6
   \   00006A   6400         XRL       A,#0x0
   \   00006C   FA           MOV       R2,A
   \   00006D   EF           MOV       A,R7
   \   00006E   6480         XRL       A,#0x80
   \   000070   FB           MOV       R3,A
   \   000071   02....       LJMP      ??touchLinkInitiator_event_loop_4 & 0xFFFF
    594            }
    595          
    596            if ( events & TOUCHLINK_TL_SCAN_BASE_EVT )
   \                     ??touchLinkInitiator_event_loop_0:
   \   000074   EE           MOV       A,R6
   \   000075   5420         ANL       A,#0x20
   \   000077   7003         JNZ       $+5
   \   000079   02....       LJMP      ??touchLinkInitiator_event_loop_5 & 0xFFFF
    597            {
    598              if ( ( ( scanReqChannels == TOUCHLINK_SCAN_PRIMARY_CHANNELS ) && ( numScanReqSent < TOUCHLINK_INITIATOR_NUM_SCAN_REQ_PRIMARY  ) ) ||
    599                   ( ( scanReqChannels == TOUCHLINK_SCAN_SECONDARY_CHANNELS ) && ( numScanReqSent < TOUCHLINK_INITIATOR_NUM_SCAN_REQ_EXTENDED ) ) )
   \   00007C   90....       MOV       DPTR,#scanReqChannels
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   6401         XRL       A,#0x1
   \   000082   7009         JNZ       ??touchLinkInitiator_event_loop_6
   \   000084   90....       MOV       DPTR,#numScanReqSent
   \   000087   E0           MOVX      A,@DPTR
   \   000088   C3           CLR       C
   \   000089   9408         SUBB      A,#0x8
   \   00008B   4011         JC        ??touchLinkInitiator_event_loop_7
   \                     ??touchLinkInitiator_event_loop_6:
   \   00008D   90....       MOV       DPTR,#scanReqChannels
   \   000090   E0           MOVX      A,@DPTR
   \   000091   6402         XRL       A,#0x2
   \   000093   7011         JNZ       ??touchLinkInitiator_event_loop_8
   \   000095   90....       MOV       DPTR,#numScanReqSent
   \   000098   E0           MOVX      A,@DPTR
   \   000099   C3           CLR       C
   \   00009A   9414         SUBB      A,#0x14
   \   00009C   5008         JNC       ??touchLinkInitiator_event_loop_8
    600              {
    601                // Send another Scan Request on the next channel
    602                initiatorSendScanReq( FALSE );
   \                     ??touchLinkInitiator_event_loop_7:
   \   00009E                ; Setup parameters for call to function initiatorSendScanReq
   \   00009E   7900         MOV       R1,#0x0
   \   0000A0   12....       LCALL     `??initiatorSendScanReq::?relay`; Banked call to: initiatorSendScanReq
   \   0000A3   02....       LJMP      ??touchLinkInitiator_event_loop_9 & 0xFFFF
    603              }
    604              else // Channels scan is complete
    605              {
    606                if ( ( scanReqChannels == TOUCHLINK_SCAN_PRIMARY_CHANNELS ) && ( bdbAttributes.bdbNodeIsOnANetwork == FALSE ) )
   \                     ??touchLinkInitiator_event_loop_8:
   \   0000A6   90....       MOV       DPTR,#scanReqChannels
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   6401         XRL       A,#0x1
   \   0000AC   7014         JNZ       ??touchLinkInitiator_event_loop_10
   \   0000AE   90....       MOV       DPTR,#bdbAttributes + 14
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   700E         JNZ       ??touchLinkInitiator_event_loop_10
    607                {
    608                  // Extended scan is required, lets scan secondary channels
    609                  scanReqChannels = TOUCHLINK_SCAN_SECONDARY_CHANNELS;
   \   0000B4   90....       MOV       DPTR,#scanReqChannels
   \   0000B7   7402         MOV       A,#0x2
   \   0000B9   F0           MOVX      @DPTR,A
    610          
    611                  // Send another Scan Request on the next channel
    612                  initiatorSendScanReq( FALSE );
   \   0000BA                ; Setup parameters for call to function initiatorSendScanReq
   \   0000BA   7900         MOV       R1,#0x0
   \   0000BC   12....       LCALL     `??initiatorSendScanReq::?relay`; Banked call to: initiatorSendScanReq
   \   0000BF   02....       LJMP      ??touchLinkInitiator_event_loop_9 & 0xFFFF
    613                }
    614                // See if we've received any Scan Responses back
    615                else if ( ( selectedTarget.lastRssi != TOUCHLINK_WORST_RSSI )
    616                         && ( selectedTarget.scanRsp.deviceInfo.endpoint != DEV_INFO_INVALID_EP ) )
   \                     ??touchLinkInitiator_event_loop_10:
   \   0000C2   90....       MOV       DPTR,#selectedTarget + 53
   \   0000C5   E0           MOVX      A,@DPTR
   \   0000C6   64BA         XRL       A,#0xba
   \   0000C8   7003         JNZ       $+5
   \   0000CA   02....       LJMP      ??touchLinkInitiator_event_loop_11 & 0xFFFF
   \   0000CD   90....       MOV       DPTR,#selectedTarget + 31
   \   0000D0   E0           MOVX      A,@DPTR
   \   0000D1   64FE         XRL       A,#0xfe
   \   0000D3   7003         JNZ       $+5
   \   0000D5   02....       LJMP      ??touchLinkInitiator_event_loop_11 & 0xFFFF
    617                {
    618                  // Make sure the responder is not a factory new initiator if this device is also 
    619                  // factory new
    620                  if ( ( selectedTarget.scanRsp.touchLinkInitiator == FALSE ) ||
    621                       ( bdbAttributes.bdbNodeIsOnANetwork == TRUE ) )
   \   0000D8   90....       MOV       DPTR,#selectedTarget + 7
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   F8           MOV       R0,A
   \   0000DD   A3           INC       DPTR
   \   0000DE   E0           MOVX      A,@DPTR
   \   0000DF   F9           MOV       R1,A
   \   0000E0   E8           MOV       A,R0
   \   0000E1   C4           SWAP      A
   \   0000E2   540F         ANL       A,#0xf
   \   0000E4   5401         ANL       A,#0x1
   \   0000E6   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000E8   500B         JNC       ??touchLinkInitiator_event_loop_12
   \   0000EA   90....       MOV       DPTR,#bdbAttributes + 14
   \   0000ED   E0           MOVX      A,@DPTR
   \   0000EE   6401         XRL       A,#0x1
   \   0000F0   6003         JZ        $+5
   \   0000F2   02....       LJMP      ??touchLinkInitiator_event_loop_9 & 0xFFFF
    622                  {
    623                    bdbTLIdentifyReq_t req;
    624          
    625                    // Tune to the channel that the Scan Response was heard on
    626                    touchLink_SetChannel( selectedTarget.rxChannel );
   \                     ??touchLinkInitiator_event_loop_12:
   \   0000F5                ; Setup parameters for call to function touchLink_SetChannel
   \   0000F5   90....       MOV       DPTR,#selectedTarget + 52
   \   0000F8   E0           MOVX      A,@DPTR
   \   0000F9   F9           MOV       R1,A
   \   0000FA   12....       LCALL     `??touchLink_SetChannel::?relay`; Banked call to: touchLink_SetChannel
    627          
    628                    req.transID = selectedTarget.scanRsp.transID;
   \   0000FD   90....       MOV       DPTR,#selectedTarget
   \   000100   12....       LCALL     ?XLOAD_R0123
   \   000103   7418         MOV       A,#0x18
   \   000105   12....       LCALL     ?XSTACK_DISP0_8
   \   000108   12....       LCALL     ?XSTORE_R0123
    629                    req.IdDuration = BDB_TL_IDENTIFY_TIME;
   \   00010B   741C         MOV       A,#0x1c
   \   00010D   12....       LCALL     ?XSTACK_DISP0_8
   \   000110   74FF         MOV       A,#-0x1
   \   000112   F0           MOVX      @DPTR,A
   \   000113   A3           INC       DPTR
   \   000114   74FF         MOV       A,#-0x1
   \   000116   F0           MOVX      @DPTR,A
    630                    
    631                    if ( touchlinkFNReset == TRUE )
   \   000117   90....       MOV       DPTR,#touchlinkFNReset
   \   00011A   E0           MOVX      A,@DPTR
   \   00011B   6401         XRL       A,#0x1
   \   00011D   7018         JNZ       ??touchLinkInitiator_event_loop_13
    632                    {
    633                      osal_set_event( touchLinkInitiator_TaskID, TOUCHLINK_CFG_TARGET_EVT );
   \   00011F                ; Setup parameters for call to function osal_set_event
   \   00011F   7A40         MOV       R2,#0x40
   \   000121   7B00         MOV       R3,#0x0
   \   000123   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000126   E0           MOVX      A,@DPTR
   \   000127   F9           MOV       R1,A
   \   000128   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00012B   E9           MOV       A,R1
    634                      return ( events ^ TOUCHLINK_TL_SCAN_BASE_EVT );
   \   00012C   EE           MOV       A,R6
   \   00012D   6420         XRL       A,#0x20
   \   00012F   FA           MOV       R2,A
   \   000130   EF           MOV       A,R7
   \   000131   6400         XRL       A,#0x0
   \   000133   FB           MOV       R3,A
   \   000134   02....       LJMP      ??touchLinkInitiator_event_loop_4 & 0xFFFF
    635                    }
    636                    
    637                    bdbTL_Send_IndentifyReq( TOUCHLINK_INTERNAL_ENDPOINT, &(selectedTarget.srcAddr), &req, initiatorSeqNum++ );
   \                     ??touchLinkInitiator_event_loop_13:
   \   000137   90....       MOV       DPTR,#initiatorSeqNum
   \   00013A   E0           MOVX      A,@DPTR
   \   00013B   F8           MOV       R0,A
   \   00013C   7401         MOV       A,#0x1
   \   00013E   28           ADD       A,R0
   \   00013F   90....       MOV       DPTR,#initiatorSeqNum
   \   000142   F0           MOVX      @DPTR,A
   \   000143                ; Setup parameters for call to function bdbTL_Send_IndentifyReq
   \   000143   E8           MOV       A,R0
   \   000144   F5..         MOV       ?V0,A
   \   000146   78..         MOV       R0,#?V0
   \   000148   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00014B   7419         MOV       A,#0x19
   \   00014D   12....       LCALL     ?XSTACK_DISP102_8
   \   000150   7A..         MOV       R2,#(selectedTarget + 38) & 0xff
   \   000152   7B..         MOV       R3,#((selectedTarget + 38) >> 8) & 0xff
   \   000154   790D         MOV       R1,#0xd
   \   000156   12....       LCALL     `??bdbTL_Send_IndentifyReq::?relay`; Banked call to: bdbTL_Send_IndentifyReq
   \   000159   7401         MOV       A,#0x1
   \   00015B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00015E   E9           MOV       A,R1
    638          
    639          #if ZSTACK_ROUTER_BUILD
    640                    uint8 i = 0;
    641                      
    642                    while ( !CHECK_BIT ( selectedTarget.scanRsp.keyBitmask , i ) ) 
    643                    {
    644                      i++;
    645                    }
    646              
    647                    initiatorNwkParams.keyIndex = i;
    648                    zTouchLinkNwkStartRtr = TRUE;
    649                    // Disabe other TouchLink events
    650                    osal_set_event( touchLinkInitiator_TaskID, TOUCHLINK_DISABLE_RX_EVT );
    651          #endif
    652                    osal_start_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_CFG_TARGET_EVT, TOUCHLINK_INITIATOR_IDENTIFY_INTERVAL );
   \   00015F                ; Setup parameters for call to function osal_start_timerEx
   \   00015F   90....       MOV       DPTR,#__Constant_1f4
   \   000162   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000165   7A40         MOV       R2,#0x40
   \   000167   7B00         MOV       R3,#0x0
   \   000169   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   00016C   E0           MOVX      A,@DPTR
   \   00016D   F9           MOV       R1,A
   \   00016E   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000171   7404         MOV       A,#0x4
   \   000173   12....       LCALL     ?DEALLOC_XSTACK8
   \   000176   E9           MOV       A,R1
   \   000177   801A         SJMP      ??touchLinkInitiator_event_loop_9
    653                  }
    654                  // else wait for touch-link commands from the other initiator
    655                }
    656                else
    657                {
    658                  // We did not manage to select any target
    659                  // Let's just go back to our initial configuration
    660                  osal_set_event( touchLinkInitiator_TaskID, TOUCHLINK_DISABLE_RX_EVT );
   \                     ??touchLinkInitiator_event_loop_11:
   \   000179                ; Setup parameters for call to function osal_set_event
   \   000179   7A00         MOV       R2,#0x0
   \   00017B   7B02         MOV       R3,#0x2
   \   00017D   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000180   E0           MOVX      A,@DPTR
   \   000181   F9           MOV       R1,A
   \   000182   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000185   E9           MOV       A,R1
    661                  bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_TL_NO_SCAN_RESPONSE;
   \   000186   90....       MOV       DPTR,#bdbAttributes + 10
   \   000189   7405         MOV       A,#0x5
   \   00018B   F0           MOVX      @DPTR,A
    662                  bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, FALSE );
   \   00018C                ; Setup parameters for call to function bdb_reportCommissioningState
   \   00018C   7A00         MOV       R2,#0x0
   \   00018E   7902         MOV       R1,#0x2
   \   000190   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    663                }
    664              }
    665          
    666              // return unprocessed events
    667              return ( events ^ TOUCHLINK_TL_SCAN_BASE_EVT );
   \                     ??touchLinkInitiator_event_loop_9:
   \   000193   EE           MOV       A,R6
   \   000194   6420         XRL       A,#0x20
   \   000196   FA           MOV       R2,A
   \   000197   EF           MOV       A,R7
   \   000198   6400         XRL       A,#0x0
   \   00019A   FB           MOV       R3,A
   \   00019B   02....       LJMP      ??touchLinkInitiator_event_loop_4 & 0xFFFF
    668            }
    669          
    670            if ( events & TOUCHLINK_CFG_TARGET_EVT )
   \                     ??touchLinkInitiator_event_loop_5:
   \   00019E   EE           MOV       A,R6
   \   00019F   5440         ANL       A,#0x40
   \   0001A1   7003         JNZ       $+5
   \   0001A3   02....       LJMP      ??touchLinkInitiator_event_loop_14 & 0xFFFF
    671            {
    672              ZStatus_t status = ZFailure;
   \   0001A6   75..01       MOV       ?V0,#0x1
    673          
    674              bdbTLIdentifyReq_t req;
    675          
    676              req.transID = selectedTarget.scanRsp.transID;
   \   0001A9   90....       MOV       DPTR,#selectedTarget
   \   0001AC   12....       LCALL     ?XLOAD_R0123
   \   0001AF   7412         MOV       A,#0x12
   \   0001B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B4   12....       LCALL     ?XSTORE_R0123
    677              req.IdDuration = 0x00;
   \   0001B7   7416         MOV       A,#0x16
   \   0001B9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BC   7400         MOV       A,#0x0
   \   0001BE   F0           MOVX      @DPTR,A
   \   0001BF   A3           INC       DPTR
   \   0001C0   7400         MOV       A,#0x0
   \   0001C2   F0           MOVX      @DPTR,A
    678              uint8 tcExtAddr[Z_EXTADDR_LEN];
    679              uint8 DistributedSecurityNwkAddress[Z_EXTADDR_LEN] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
   \   0001C3   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   0001C6   7447         MOV       A,#0x47
   \   0001C8   12....       LCALL     ?XSTACK_DISP102_8
   \   0001CB   7408         MOV       A,#0x8
   \   0001CD   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    680                  
    681              if ( zTouchLinkNwkStartRtr == FALSE )
   \   0001D0   90....       MOV       DPTR,#zTouchLinkNwkStartRtr
   \   0001D3   E0           MOVX      A,@DPTR
   \   0001D4   7028         JNZ       ??touchLinkInitiator_event_loop_15
    682              {
    683                // Send an Identify stop Request
    684                bdbTL_Send_IndentifyReq( TOUCHLINK_INTERNAL_ENDPOINT, &(selectedTarget.srcAddr), &req, initiatorSeqNum++ );
   \   0001D6   90....       MOV       DPTR,#initiatorSeqNum
   \   0001D9   E0           MOVX      A,@DPTR
   \   0001DA   F8           MOV       R0,A
   \   0001DB   7401         MOV       A,#0x1
   \   0001DD   28           ADD       A,R0
   \   0001DE   90....       MOV       DPTR,#initiatorSeqNum
   \   0001E1   F0           MOVX      @DPTR,A
   \   0001E2                ; Setup parameters for call to function bdbTL_Send_IndentifyReq
   \   0001E2   E8           MOV       A,R0
   \   0001E3   F5..         MOV       ?V1,A
   \   0001E5   78..         MOV       R0,#?V1
   \   0001E7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001EA   7413         MOV       A,#0x13
   \   0001EC   12....       LCALL     ?XSTACK_DISP102_8
   \   0001EF   7A..         MOV       R2,#(selectedTarget + 38) & 0xff
   \   0001F1   7B..         MOV       R3,#((selectedTarget + 38) >> 8) & 0xff
   \   0001F3   790D         MOV       R1,#0xd
   \   0001F5   12....       LCALL     `??bdbTL_Send_IndentifyReq::?relay`; Banked call to: bdbTL_Send_IndentifyReq
   \   0001F8   7401         MOV       A,#0x1
   \   0001FA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001FD   E9           MOV       A,R1
    685              }
    686              
    687             // See if the target is part of our network
    688              if ( !TOUCHLINK_SAME_NWK( selectedTarget.scanRsp.PANID, selectedTarget.scanRsp.extendedPANID ) )
   \                     ??touchLinkInitiator_event_loop_15:
   \   0001FE   90....       MOV       DPTR,#_NIB + 33
   \   000201   E0           MOVX      A,@DPTR
   \   000202   F8           MOV       R0,A
   \   000203   A3           INC       DPTR
   \   000204   E0           MOVX      A,@DPTR
   \   000205   F9           MOV       R1,A
   \   000206   90....       MOV       DPTR,#selectedTarget + 25
   \   000209   E0           MOVX      A,@DPTR
   \   00020A   68           XRL       A,R0
   \   00020B   7003         JNZ       ??touchLinkInitiator_event_loop_16
   \   00020D   A3           INC       DPTR
   \   00020E   E0           MOVX      A,@DPTR
   \   00020F   69           XRL       A,R1
   \                     ??touchLinkInitiator_event_loop_16:
   \   000210   7011         JNZ       ??touchLinkInitiator_event_loop_17
   \   000212                ; Setup parameters for call to function sAddrExtCmp
   \   000212   7C..         MOV       R4,#(selectedTarget + 15) & 0xff
   \   000214   7D..         MOV       R5,#((selectedTarget + 15) >> 8) & 0xff
   \   000216   7A..         MOV       R2,#(_NIB + 53) & 0xff
   \   000218   7B..         MOV       R3,#((_NIB + 53) >> 8) & 0xff
   \   00021A   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00021D   E9           MOV       A,R1
   \   00021E   6003         JZ        $+5
   \   000220   02....       LJMP      ??touchLinkInitiator_event_loop_18 & 0xFFFF
    689              {
    690                // If the local device is not the trust center, always return TRUE
    691                status = APSME_GetRequest( apsTrustCenterAddress, 0, tcExtAddr );
   \                     ??touchLinkInitiator_event_loop_17:
   \   000223                ; Setup parameters for call to function APSME_GetRequest
   \   000223   744F         MOV       A,#0x4f
   \   000225   12....       LCALL     ?XSTACK_DISP102_8
   \   000228   7A00         MOV       R2,#0x0
   \   00022A   7B00         MOV       R3,#0x0
   \   00022C   79AB         MOV       R1,#-0x55
   \   00022E   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   \   000231   E9           MOV       A,R1
   \   000232   F5..         MOV       ?V0,A
    692                  
    693                // Notify BDB state machine
    694                if ( bdbAttributes.bdbNodeIsOnANetwork == TRUE )
   \   000234   90....       MOV       DPTR,#bdbAttributes + 14
   \   000237   E0           MOVX      A,@DPTR
   \   000238   6401         XRL       A,#0x1
   \   00023A   702C         JNZ       ??touchLinkInitiator_event_loop_19
    695                {
    696                  if ( ( status == ZSuccess ) && ( !osal_ExtAddrEqual( DistributedSecurityNwkAddress, tcExtAddr ) ) )
   \   00023C   E5..         MOV       A,?V0
   \   00023E   7028         JNZ       ??touchLinkInitiator_event_loop_19
   \   000240                ; Setup parameters for call to function sAddrExtCmp
   \   000240   744F         MOV       A,#0x4f
   \   000242   12....       LCALL     ?XSTACK_DISP102_8
   \   000245   7447         MOV       A,#0x47
   \   000247   12....       LCALL     ?XSTACK_DISP101_8
   \   00024A   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00024D   E9           MOV       A,R1
   \   00024E   7018         JNZ       ??touchLinkInitiator_event_loop_19
    697                  {
    698                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_TL_NOT_PERMITTED;
   \   000250   90....       MOV       DPTR,#bdbAttributes + 10
   \   000253   7406         MOV       A,#0x6
   \   000255   F0           MOVX      @DPTR,A
    699                    bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, FALSE );
   \   000256                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000256   7A00         MOV       R2,#0x0
   \   000258   7902         MOV       R1,#0x2
   \   00025A   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    700                    return ( events ^ TOUCHLINK_CFG_TARGET_EVT );
   \   00025D   EE           MOV       A,R6
   \   00025E   6440         XRL       A,#0x40
   \   000260   FA           MOV       R2,A
   \   000261   EF           MOV       A,R7
   \   000262   6400         XRL       A,#0x0
   \   000264   FB           MOV       R3,A
   \   000265   02....       LJMP      ??touchLinkInitiator_event_loop_4 & 0xFFFF
    701                  }
    702                }
    703                      
    704                // verify address ranges split possible if required
    705                if ( !touchLink_IsValidSplitFreeRanges( selectedTarget.scanRsp.totalGrpIDs ) )
   \                     ??touchLinkInitiator_event_loop_19:
   \   000268                ; Setup parameters for call to function touchLink_IsValidSplitFreeRanges
   \   000268   90....       MOV       DPTR,#selectedTarget + 30
   \   00026B   E0           MOVX      A,@DPTR
   \   00026C   F9           MOV       R1,A
   \   00026D   12....       LCALL     `??touchLink_IsValidSplitFreeRanges::?relay`; Banked call to: touchLink_IsValidSplitFreeRanges
   \   000270   E9           MOV       A,R1
   \   000271   7018         JNZ       ??touchLinkInitiator_event_loop_20
    706                {
    707                  bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_TL_NOT_AA_CAPABLE;
   \   000273   90....       MOV       DPTR,#bdbAttributes + 10
   \   000276   7404         MOV       A,#0x4
   \   000278   F0           MOVX      @DPTR,A
    708                  bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, FALSE );
   \   000279                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000279   7A00         MOV       R2,#0x0
   \   00027B   7902         MOV       R1,#0x2
   \   00027D   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    709                  return ( events ^ TOUCHLINK_CFG_TARGET_EVT );
   \   000280   EE           MOV       A,R6
   \   000281   6440         XRL       A,#0x40
   \   000283   FA           MOV       R2,A
   \   000284   EF           MOV       A,R7
   \   000285   6400         XRL       A,#0x0
   \   000287   FB           MOV       R3,A
   \   000288   02....       LJMP      ??touchLinkInitiator_event_loop_4 & 0xFFFF
    710                }
    711                
    712                if ( touchlinkFNReset == TRUE )
   \                     ??touchLinkInitiator_event_loop_20:
   \   00028B   90....       MOV       DPTR,#touchlinkFNReset
   \   00028E   E0           MOVX      A,@DPTR
   \   00028F   6401         XRL       A,#0x1
   \   000291   7022         JNZ       ??touchLinkInitiator_event_loop_21
    713                {
    714                  touchlinkFNReset = FALSE;
   \   000293   90....       MOV       DPTR,#touchlinkFNReset
   \   000296   7400         MOV       A,#0x0
   \   000298   F0           MOVX      @DPTR,A
    715                  touchLinkInitiator_ResetToFNSelectedTarget( );
   \   000299                ; Setup parameters for call to function touchLinkInitiator_ResetToFNSelectedTarget
   \   000299   12....       LCALL     `??touchLinkInitiator_ResetToFNSelectedTarget::?`; Banked call to: touchLinkInitiator_ResetToFNSelectedTarget
   \   00029C   E9           MOV       A,R1
    716                  osal_set_event( touchLinkInitiator_TaskID, TOUCHLINK_DISABLE_RX_EVT );
   \   00029D                ; Setup parameters for call to function osal_set_event
   \   00029D   7A00         MOV       R2,#0x0
   \   00029F   7B02         MOV       R3,#0x2
   \   0002A1   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   0002A4   E0           MOVX      A,@DPTR
   \   0002A5   F9           MOV       R1,A
   \   0002A6   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   0002A9   E9           MOV       A,R1
    717                  
    718                  return ( events ^ TOUCHLINK_CFG_TARGET_EVT );
   \   0002AA   EE           MOV       A,R6
   \   0002AB   6440         XRL       A,#0x40
   \   0002AD   FA           MOV       R2,A
   \   0002AE   EF           MOV       A,R7
   \   0002AF   6400         XRL       A,#0x0
   \   0002B1   FB           MOV       R3,A
   \   0002B2   02....       LJMP      ??touchLinkInitiator_event_loop_4 & 0xFFFF
    719                }
    720                  
    721                if ( bdbAttributes.bdbNodeIsOnANetwork == TRUE )
   \                     ??touchLinkInitiator_event_loop_21:
   \   0002B5   90....       MOV       DPTR,#bdbAttributes + 14
   \   0002B8   E0           MOVX      A,@DPTR
   \   0002B9   6401         XRL       A,#0x1
   \   0002BB   7029         JNZ       ??touchLinkInitiator_event_loop_22
    722                {
    723                  // Ask the target to join our network
    724                  osal_start_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_NWK_FORMATION_SUCCESS_EVT, 50);
   \   0002BD                ; Setup parameters for call to function osal_start_timerEx
   \   0002BD   90....       MOV       DPTR,#__Constant_32
   \   0002C0   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0002C3   7A00         MOV       R2,#0x0
   \   0002C5   7B20         MOV       R3,#0x20
   \   0002C7   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   0002CA   E0           MOVX      A,@DPTR
   \   0002CB   F9           MOV       R1,A
   \   0002CC   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0002CF   7404         MOV       A,#0x4
   \   0002D1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002D4   E9           MOV       A,R1
    725                  zTouchLinkNwkStartRtr = FALSE;
   \   0002D5   90....       MOV       DPTR,#zTouchLinkNwkStartRtr
   \   0002D8   7400         MOV       A,#0x0
   \   0002DA   F0           MOVX      @DPTR,A
    726                  return ( events ^ TOUCHLINK_CFG_TARGET_EVT );
   \   0002DB   EE           MOV       A,R6
   \   0002DC   6440         XRL       A,#0x40
   \   0002DE   FA           MOV       R2,A
   \   0002DF   EF           MOV       A,R7
   \   0002E0   6400         XRL       A,#0x0
   \   0002E2   FB           MOV       R3,A
   \   0002E3   02....       LJMP      ??touchLinkInitiator_event_loop_4 & 0xFFFF
    727                }
    728                else if ( ZSTACK_ROUTER_BUILD == TRUE )
    729                {
    730                  // Tune to the channel that the Scan Response was heard on
    731                  touchLink_SetChannel( selectedTarget.rxChannel );
    732                  
    733                  // Try to form a new network
    734                  osal_set_event( touchLinkInitiator_TaskID, TOUCHLINK_NWK_RTR_START_EVT);
    735                  return ( events ^ TOUCHLINK_CFG_TARGET_EVT );
    736                }
    737                else if ( ZSTACK_ROUTER_BUILD == FALSE )
    738                {
    739                  if ( selectedTarget.scanRsp.zLogicalType == ZG_DEVICETYPE_ROUTER )
   \                     ??touchLinkInitiator_event_loop_22:
   \   0002E6   90....       MOV       DPTR,#selectedTarget + 5
   \   0002E9   E0           MOVX      A,@DPTR
   \   0002EA   5403         ANL       A,#0x3
   \   0002EC   F8           MOV       R0,A
   \   0002ED   A3           INC       DPTR
   \   0002EE   E0           MOVX      A,@DPTR
   \   0002EF   5400         ANL       A,#0x0
   \   0002F1   F9           MOV       R1,A
   \   0002F2   E8           MOV       A,R0
   \   0002F3   6401         XRL       A,#0x1
   \   0002F5   701D         JNZ       ??touchLinkInitiator_event_loop_23
    740                  {
    741                    if ( bdbAttributes.bdbNodeIsOnANetwork == FALSE )
   \   0002F7   90....       MOV       DPTR,#bdbAttributes + 14
   \   0002FA   E0           MOVX      A,@DPTR
   \   0002FB   700A         JNZ       ??touchLinkInitiator_event_loop_24
    742                    {
    743                      _NIB.nwkDevAddress = APL_FREE_NWK_ADDR_RANGE_BEGIN;
   \   0002FD   90....       MOV       DPTR,#_NIB + 20
   \   000300   7401         MOV       A,#0x1
   \   000302   F0           MOVX      @DPTR,A
   \   000303   A3           INC       DPTR
   \   000304   7400         MOV       A,#0x0
   \   000306   F0           MOVX      @DPTR,A
    744                    }
    745                    
    746                    // Must be the first light; ask the light to start the network
    747                    status = initiatorSendNwkStartReq( &(selectedTarget.scanRsp) );
   \                     ??touchLinkInitiator_event_loop_24:
   \   000307                ; Setup parameters for call to function initiatorSendNwkStartReq
   \   000307   7A..         MOV       R2,#selectedTarget & 0xff
   \   000309   7B..         MOV       R3,#(selectedTarget >> 8) & 0xff
   \   00030B   12....       LCALL     `??initiatorSendNwkStartReq::?relay`; Banked call to: initiatorSendNwkStartReq
   \   00030E   E9           MOV       A,R1
   \   00030F   F5..         MOV       ?V0,A
   \   000311   02....       LJMP      ??touchLinkInitiator_event_loop_25 & 0xFFFF
    748                  }
    749                  else
    750                  {
    751                    // Notify the BDB state machine 
    752                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   \                     ??touchLinkInitiator_event_loop_23:
   \   000314   90....       MOV       DPTR,#bdbAttributes + 10
   \   000317   7402         MOV       A,#0x2
   \   000319   F0           MOVX      @DPTR,A
    753                    bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, FALSE );
   \   00031A                ; Setup parameters for call to function bdb_reportCommissioningState
   \   00031A   7A00         MOV       R2,#0x0
   \   00031C   7902         MOV       R1,#0x2
   \   00031E   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    754                    return ( events ^ TOUCHLINK_CFG_TARGET_EVT );
   \   000321   EE           MOV       A,R6
   \   000322   6440         XRL       A,#0x40
   \   000324   FA           MOV       R2,A
   \   000325   EF           MOV       A,R7
   \   000326   6400         XRL       A,#0x0
   \   000328   FB           MOV       R3,A
   \   000329   02....       LJMP      ??touchLinkInitiator_event_loop_4 & 0xFFFF
    755                  }
    756                }
    757              }
    758              
    759              else if ( _NIB.nwkUpdateId != selectedTarget.scanRsp.nwkUpdateId )
   \                     ??touchLinkInitiator_event_loop_18:
   \   00032C   90....       MOV       DPTR,#_NIB + 109
   \   00032F   E0           MOVX      A,@DPTR
   \   000330   F8           MOV       R0,A
   \   000331   90....       MOV       DPTR,#selectedTarget + 23
   \   000334   E0           MOVX      A,@DPTR
   \   000335   68           XRL       A,R0
   \   000336   605E         JZ        ??touchLinkInitiator_event_loop_26
    760              {
    761                // Set NWK task to run
    762                nwk_setStateIdle( TRUE );
   \   000338                ; Setup parameters for call to function nwk_setStateIdle
   \   000338   7901         MOV       R1,#0x1
   \   00033A   12....       LCALL     `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
    763                
    764                // Target is already part of our network
    765                if ( selectedTarget.scanRsp.nwkUpdateId > _NIB.nwkUpdateId )
   \   00033D   90....       MOV       DPTR,#selectedTarget + 23
   \   000340   E0           MOVX      A,@DPTR
   \   000341   F8           MOV       R0,A
   \   000342   90....       MOV       DPTR,#_NIB + 109
   \   000345   E0           MOVX      A,@DPTR
   \   000346   C3           CLR       C
   \   000347   98           SUBB      A,R0
   \   000348   5012         JNC       ??touchLinkInitiator_event_loop_27
    766                {
    767                  // Update our network update id and logical channel
    768                  touchLink_ProcessNwkUpdate( selectedTarget.scanRsp.nwkUpdateId, selectedTarget.scanRsp.logicalChannel );
   \   00034A                ; Setup parameters for call to function touchLink_ProcessNwkUpdate
   \   00034A   90....       MOV       DPTR,#selectedTarget + 24
   \   00034D   E0           MOVX      A,@DPTR
   \   00034E   FA           MOV       R2,A
   \   00034F   90....       MOV       DPTR,#selectedTarget + 23
   \   000352   E0           MOVX      A,@DPTR
   \   000353   F9           MOV       R1,A
   \   000354   12....       LCALL     `??touchLink_ProcessNwkUpdate::?relay`; Banked call to: touchLink_ProcessNwkUpdate
    769          
    770                  // We're done here
    771                  status = ZSuccess;
   \   000357   75..00       MOV       ?V0,#0x0
   \   00035A   8022         SJMP      ??touchLinkInitiator_event_loop_28
    772                }
    773                else if ( selectedTarget.scanRsp.nwkUpdateId < _NIB.nwkUpdateId )
   \                     ??touchLinkInitiator_event_loop_27:
   \   00035C   90....       MOV       DPTR,#_NIB + 109
   \   00035F   E0           MOVX      A,@DPTR
   \   000360   F8           MOV       R0,A
   \   000361   90....       MOV       DPTR,#selectedTarget + 23
   \   000364   E0           MOVX      A,@DPTR
   \   000365   C3           CLR       C
   \   000366   98           SUBB      A,R0
   \   000367   5015         JNC       ??touchLinkInitiator_event_loop_28
    774                {
    775                  // Inform the target to update its network update id and logical channel
    776                  initiatorSendNwkUpdateReq( &(selectedTarget.scanRsp) ); // there's no corresponding response!
   \   000369                ; Setup parameters for call to function initiatorSendNwkUpdateReq
   \   000369   7A..         MOV       R2,#selectedTarget & 0xff
   \   00036B   7B..         MOV       R3,#(selectedTarget >> 8) & 0xff
   \   00036D   12....       LCALL     `??initiatorSendNwkUpdateReq::?relay`; Banked call to: initiatorSendNwkUpdateReq
   \   000370   E9           MOV       A,R1
    777          
    778                  // Notify the application about this device
    779                  osal_set_event( touchLinkInitiator_TaskID, TOUCHLINK_NOTIFY_APP_EVT );
   \   000371                ; Setup parameters for call to function osal_set_event
   \   000371   7A00         MOV       R2,#0x0
   \   000373   7B08         MOV       R3,#0x8
   \   000375   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000378   E0           MOVX      A,@DPTR
   \   000379   F9           MOV       R1,A
   \   00037A   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00037D   E9           MOV       A,R1
    780                }
    781                
    782                bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \                     ??touchLinkInitiator_event_loop_28:
   \   00037E   90....       MOV       DPTR,#bdbAttributes + 10
   \   000381   7400         MOV       A,#0x0
   \   000383   F0           MOVX      @DPTR,A
    783                bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, TRUE );
   \   000384                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000384   7A01         MOV       R2,#0x1
   \   000386   7902         MOV       R1,#0x2
   \   000388   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    784                return ( events ^ TOUCHLINK_CFG_TARGET_EVT );
   \   00038B   EE           MOV       A,R6
   \   00038C   6440         XRL       A,#0x40
   \   00038E   FA           MOV       R2,A
   \   00038F   EF           MOV       A,R7
   \   000390   6400         XRL       A,#0x0
   \   000392   FB           MOV       R3,A
   \   000393   02....       LJMP      ??touchLinkInitiator_event_loop_4 & 0xFFFF
    785              }
    786              
    787              //we are touchlinking to a light in our network, just send application the device info
    788              else if ( selectedTarget.scanRsp.touchLinkInitiator == FALSE )
   \                     ??touchLinkInitiator_event_loop_26:
   \   000396   90....       MOV       DPTR,#selectedTarget + 7
   \   000399   E0           MOVX      A,@DPTR
   \   00039A   F8           MOV       R0,A
   \   00039B   A3           INC       DPTR
   \   00039C   E0           MOVX      A,@DPTR
   \   00039D   F9           MOV       R1,A
   \   00039E   E8           MOV       A,R0
   \   00039F   C4           SWAP      A
   \   0003A0   540F         ANL       A,#0xf
   \   0003A2   5401         ANL       A,#0x1
   \   0003A4   A2E0         MOV       C,0xE0 /* A   */.0
   \   0003A6   407F         JC        ??touchLinkInitiator_event_loop_25
    789              {
    790                epInfoRec_t rec;
    791                rec.nwkAddr = selectedTarget.scanRsp.nwkAddr;
   \   0003A8   90....       MOV       DPTR,#selectedTarget + 27
   \   0003AB   E0           MOVX      A,@DPTR
   \   0003AC   F8           MOV       R0,A
   \   0003AD   A3           INC       DPTR
   \   0003AE   E0           MOVX      A,@DPTR
   \   0003AF   F9           MOV       R1,A
   \   0003B0   740A         MOV       A,#0xa
   \   0003B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0003B5   E8           MOV       A,R0
   \   0003B6   F0           MOVX      @DPTR,A
   \   0003B7   A3           INC       DPTR
   \   0003B8   E9           MOV       A,R1
   \   0003B9   F0           MOVX      @DPTR,A
    792                rec.endpoint = selectedTarget.scanRsp.deviceInfo.endpoint;
   \   0003BA   90....       MOV       DPTR,#selectedTarget + 31
   \   0003BD   E0           MOVX      A,@DPTR
   \   0003BE   C0E0         PUSH      A
   \   0003C0   740C         MOV       A,#0xc
   \   0003C2   12....       LCALL     ?XSTACK_DISP0_8
   \   0003C5   D0E0         POP       A
   \   0003C7   F0           MOVX      @DPTR,A
    793                rec.profileID = selectedTarget.scanRsp.deviceInfo.profileID;
   \   0003C8   90....       MOV       DPTR,#selectedTarget + 32
   \   0003CB   E0           MOVX      A,@DPTR
   \   0003CC   F8           MOV       R0,A
   \   0003CD   A3           INC       DPTR
   \   0003CE   E0           MOVX      A,@DPTR
   \   0003CF   F9           MOV       R1,A
   \   0003D0   740D         MOV       A,#0xd
   \   0003D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0003D5   E8           MOV       A,R0
   \   0003D6   F0           MOVX      @DPTR,A
   \   0003D7   A3           INC       DPTR
   \   0003D8   E9           MOV       A,R1
   \   0003D9   F0           MOVX      @DPTR,A
    794                rec.deviceID = selectedTarget.scanRsp.deviceInfo.deviceID;
   \   0003DA   90....       MOV       DPTR,#selectedTarget + 34
   \   0003DD   E0           MOVX      A,@DPTR
   \   0003DE   F8           MOV       R0,A
   \   0003DF   A3           INC       DPTR
   \   0003E0   E0           MOVX      A,@DPTR
   \   0003E1   F9           MOV       R1,A
   \   0003E2   740F         MOV       A,#0xf
   \   0003E4   12....       LCALL     ?XSTACK_DISP0_8
   \   0003E7   E8           MOV       A,R0
   \   0003E8   F0           MOVX      @DPTR,A
   \   0003E9   A3           INC       DPTR
   \   0003EA   E9           MOV       A,R1
   \   0003EB   F0           MOVX      @DPTR,A
    795                rec.version = selectedTarget.scanRsp.deviceInfo.version;
   \   0003EC   90....       MOV       DPTR,#selectedTarget + 36
   \   0003EF   E0           MOVX      A,@DPTR
   \   0003F0   C0E0         PUSH      A
   \   0003F2   7411         MOV       A,#0x11
   \   0003F4   12....       LCALL     ?XSTACK_DISP0_8
   \   0003F7   D0E0         POP       A
   \   0003F9   F0           MOVX      @DPTR,A
    796                // Notify the application
    797                if ( pfnNotifyAppCB )
   \   0003FA   90....       MOV       DPTR,#pfnNotifyAppCB
   \   0003FD   E0           MOVX      A,@DPTR
   \   0003FE   F8           MOV       R0,A
   \   0003FF   A3           INC       DPTR
   \   000400   E0           MOVX      A,@DPTR
   \   000401   F9           MOV       R1,A
   \   000402   E8           MOV       A,R0
   \   000403   49           ORL       A,R1
   \   000404   6014         JZ        ??touchLinkInitiator_event_loop_29
    798                {
    799                  (*pfnNotifyAppCB)( &rec );
   \   000406                ; Setup parameters for indirect call
   \   000406   740A         MOV       A,#0xa
   \   000408   12....       LCALL     ?XSTACK_DISP101_8
   \   00040B   90....       MOV       DPTR,#pfnNotifyAppCB
   \   00040E   E0           MOVX      A,@DPTR
   \   00040F   F8           MOV       R0,A
   \   000410   A3           INC       DPTR
   \   000411   E0           MOVX      A,@DPTR
   \   000412   F583         MOV       DPH,A
   \   000414   8882         MOV       DPL,R0
   \   000416   12....       LCALL     ?CALL_IND
   \   000419   E9           MOV       A,R1
    800                }
    801                bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \                     ??touchLinkInitiator_event_loop_29:
   \   00041A   90....       MOV       DPTR,#bdbAttributes + 10
   \   00041D   7400         MOV       A,#0x0
   \   00041F   F0           MOVX      @DPTR,A
    802                bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, TRUE );
   \   000420                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000420   7A01         MOV       R2,#0x1
   \   000422   7902         MOV       R1,#0x2
   \   000424   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    803              }
    804          
    805              // return unprocessed events
    806              return ( events ^ TOUCHLINK_CFG_TARGET_EVT );
   \                     ??touchLinkInitiator_event_loop_25:
   \   000427   EE           MOV       A,R6
   \   000428   6440         XRL       A,#0x40
   \   00042A   FA           MOV       R2,A
   \   00042B   EF           MOV       A,R7
   \   00042C   6400         XRL       A,#0x0
   \   00042E   FB           MOV       R3,A
   \   00042F   02....       LJMP      ??touchLinkInitiator_event_loop_4 & 0xFFFF
    807            }
    808          
    809            if ( events & TOUCHLINK_W4_NWK_START_RSP_EVT )
   \                     ??touchLinkInitiator_event_loop_14:
   \   000432   EE           MOV       A,R6
   \   000433   5480         ANL       A,#0x80
   \   000435   7003         JNZ       $+5
   \   000437   02....       LJMP      ??touchLinkInitiator_event_loop_30 & 0xFFFF
    810            {
    811              bdbTLNwkStartRsp_t *pRsp = &(rxRsp.nwkStartRsp);
   \   00043A   75....       MOV       ?V0,#rxRsp & 0xff
   \   00043D   75....       MOV       ?V1,#(rxRsp >> 8) & 0xff
    812          
    813              // Look if we have a valid response
    814              if ( ( pRsp->status == TOUCHLINK_NETWORK_START_RSP_STATUS_SUCCESS )
    815                 && ( ( nwk_ExtPANIDValid( pRsp->extendedPANID ) ) && ( touchLink_IsValidTransID( pRsp->transID ) ) ) )
   \   000440   85..82       MOV       DPL,?V0
   \   000443   85..83       MOV       DPH,?V1
   \   000446   A3           INC       DPTR
   \   000447   A3           INC       DPTR
   \   000448   A3           INC       DPTR
   \   000449   A3           INC       DPTR
   \   00044A   E0           MOVX      A,@DPTR
   \   00044B   6003         JZ        $+5
   \   00044D   02....       LJMP      ??touchLinkInitiator_event_loop_31 & 0xFFFF
   \   000450                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000450   E5..         MOV       A,?V0
   \   000452   2405         ADD       A,#0x5
   \   000454   FA           MOV       R2,A
   \   000455   E4           CLR       A
   \   000456   35..         ADDC      A,?V1
   \   000458   FB           MOV       R3,A
   \   000459   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00045C   E9           MOV       A,R1
   \   00045D   7003         JNZ       $+5
   \   00045F   02....       LJMP      ??touchLinkInitiator_event_loop_31 & 0xFFFF
   \   000462                ; Setup parameters for call to function touchLink_IsValidTransID
   \   000462   85..82       MOV       DPL,?V0
   \   000465   85..83       MOV       DPH,?V1
   \   000468   12....       LCALL     ?XLOAD_R2345
   \   00046B   12....       LCALL     `??touchLink_IsValidTransID::?relay`; Banked call to: touchLink_IsValidTransID
   \   00046E   E9           MOV       A,R1
   \   00046F   7003         JNZ       $+5
   \   000471   02....       LJMP      ??touchLinkInitiator_event_loop_31 & 0xFFFF
    816              {
    817                // Copy the new network parameters to NIB
    818                touchLink_SetNIB( ( ZSTACK_ROUTER_BUILD ? NWK_ROUTER : NWK_REJOINING ),
    819                            _NIB.nwkDevAddress, pRsp->extendedPANID,
    820                            pRsp->logicalChannel, pRsp->panId, pRsp->nwkUpdateId );
   \   000474                ; Setup parameters for call to function touchLink_SetNIB
   \   000474   E5..         MOV       A,?V0
   \   000476   240D         ADD       A,#0xd
   \   000478   F582         MOV       DPL,A
   \   00047A   E4           CLR       A
   \   00047B   35..         ADDC      A,?V1
   \   00047D   F583         MOV       DPH,A
   \   00047F   E0           MOVX      A,@DPTR
   \   000480   F5..         MOV       ?V3,A
   \   000482   78..         MOV       R0,#?V3
   \   000484   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000487   E5..         MOV       A,?V0
   \   000489   240F         ADD       A,#0xf
   \   00048B   F582         MOV       DPL,A
   \   00048D   E4           CLR       A
   \   00048E   35..         ADDC      A,?V1
   \   000490   F583         MOV       DPH,A
   \   000492   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000495   E5..         MOV       A,?V0
   \   000497   240E         ADD       A,#0xe
   \   000499   F582         MOV       DPL,A
   \   00049B   E4           CLR       A
   \   00049C   35..         ADDC      A,?V1
   \   00049E   F583         MOV       DPH,A
   \   0004A0   E0           MOVX      A,@DPTR
   \   0004A1   F5..         MOV       ?V3,A
   \   0004A3   78..         MOV       R0,#?V3
   \   0004A5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0004A8   E5..         MOV       A,?V0
   \   0004AA   2405         ADD       A,#0x5
   \   0004AC   FC           MOV       R4,A
   \   0004AD   E4           CLR       A
   \   0004AE   35..         ADDC      A,?V1
   \   0004B0   FD           MOV       R5,A
   \   0004B1   90....       MOV       DPTR,#_NIB + 20
   \   0004B4   E0           MOVX      A,@DPTR
   \   0004B5   FA           MOV       R2,A
   \   0004B6   A3           INC       DPTR
   \   0004B7   E0           MOVX      A,@DPTR
   \   0004B8   FB           MOV       R3,A
   \   0004B9   7909         MOV       R1,#0x9
   \   0004BB   12....       LCALL     `??touchLink_SetNIB::?relay`; Banked call to: touchLink_SetNIB
   \   0004BE   7404         MOV       A,#0x4
   \   0004C0   12....       LCALL     ?DEALLOC_XSTACK8
    821          
    822                // Apply the received network key
    823                touchLink_DecryptNwkKey( encKeySent, keyIndexSent, pRsp->transID, responseIDSent );
   \   0004C3                ; Setup parameters for call to function touchLink_DecryptNwkKey
   \   0004C3   90....       MOV       DPTR,#responseIDSent
   \   0004C6   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0004C9   85..82       MOV       DPL,?V0
   \   0004CC   85..83       MOV       DPH,?V1
   \   0004CF   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0004D2   90....       MOV       DPTR,#keyIndexSent
   \   0004D5   E0           MOVX      A,@DPTR
   \   0004D6   F9           MOV       R1,A
   \   0004D7   7A..         MOV       R2,#encKeySent & 0xff
   \   0004D9   7B..         MOV       R3,#(encKeySent >> 8) & 0xff
   \   0004DB   12....       LCALL     `??touchLink_DecryptNwkKey::?relay`; Banked call to: touchLink_DecryptNwkKey
   \   0004DE   7408         MOV       A,#0x8
   \   0004E0   12....       LCALL     ?DEALLOC_XSTACK8
    824          
    825                // This is not a usual Trust Center protected network
    826                ZDSecMgrUpdateTCAddress( NULL );
   \   0004E3                ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
   \   0004E3   7A00         MOV       R2,#0x0
   \   0004E5   7B00         MOV       R3,#0x0
   \   0004E7   12....       LCALL     `??ZDSecMgrUpdateTCAddress::?relay`; Banked call to: ZDSecMgrUpdateTCAddress
    827          
    828                // Notify the application about this device
    829                osal_set_event( touchLinkInitiator_TaskID, TOUCHLINK_NOTIFY_APP_EVT );
   \   0004EA                ; Setup parameters for call to function osal_set_event
   \   0004EA   7A00         MOV       R2,#0x0
   \   0004EC   7B08         MOV       R3,#0x8
   \   0004EE   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   0004F1   E0           MOVX      A,@DPTR
   \   0004F2   F9           MOV       R1,A
   \   0004F3   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   0004F6   E9           MOV       A,R1
    830          
    831                // Wait at least BDBCTL_MIN_STARTUP_DELAY_TIME seconds to allow the
    832                // target to start the network correctly. Join the target afterwards.
    833                osal_start_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_START_NWK_EVT, BDBCTL_MIN_STARTUP_DELAY_TIME );
   \   0004F7                ; Setup parameters for call to function osal_start_timerEx
   \   0004F7   90....       MOV       DPTR,#__Constant_7d0
   \   0004FA   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0004FD   7A04         MOV       R2,#0x4
   \   0004FF   7B00         MOV       R3,#0x0
   \   000501   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000504   E0           MOVX      A,@DPTR
   \   000505   F9           MOV       R1,A
   \   000506   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000509   7404         MOV       A,#0x4
   \   00050B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00050E   E9           MOV       A,R1
   \   00050F   800D         SJMP      ??touchLinkInitiator_event_loop_32
    834              }
    835              else
    836              {
    837                // Notify the BDB state machine 
    838                bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   \                     ??touchLinkInitiator_event_loop_31:
   \   000511   90....       MOV       DPTR,#bdbAttributes + 10
   \   000514   7402         MOV       A,#0x2
   \   000516   F0           MOVX      @DPTR,A
    839                bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, FALSE );        
   \   000517                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000517   7A00         MOV       R2,#0x0
   \   000519   7902         MOV       R1,#0x2
   \   00051B   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    840              }
    841          
    842              // return unprocessed events
    843              return ( events ^ TOUCHLINK_W4_NWK_START_RSP_EVT );
   \                     ??touchLinkInitiator_event_loop_32:
   \   00051E   EE           MOV       A,R6
   \   00051F   6480         XRL       A,#0x80
   \   000521   FA           MOV       R2,A
   \   000522   EF           MOV       A,R7
   \   000523   6400         XRL       A,#0x0
   \   000525   FB           MOV       R3,A
   \   000526   02....       LJMP      ??touchLinkInitiator_event_loop_4 & 0xFFFF
    844            }
    845          
    846            if ( events & TOUCHLINK_START_NWK_EVT )
   \                     ??touchLinkInitiator_event_loop_30:
   \   000529   EE           MOV       A,R6
   \   00052A   5404         ANL       A,#0x4
   \   00052C   7003         JNZ       $+5
   \   00052E   02....       LJMP      ??touchLinkInitiator_event_loop_33 & 0xFFFF
    847            {
    848              // Rejoins without NWK scan
    849          
    850              bdbTLNwkStartRsp_t *pRsp = &(rxRsp.nwkStartRsp);
   \   000531   75....       MOV       ?V0,#rxRsp & 0xff
   \   000534   75....       MOV       ?V1,#(rxRsp >> 8) & 0xff
    851              bdbTLNwkRejoin_t rejoinInf;
    852              
    853              rejoinInf.panId = pRsp->panId;
   \   000537   E5..         MOV       A,?V0
   \   000539   240F         ADD       A,#0xf
   \   00053B   F582         MOV       DPL,A
   \   00053D   E4           CLR       A
   \   00053E   35..         ADDC      A,?V1
   \   000540   F583         MOV       DPH,A
   \   000542   E0           MOVX      A,@DPTR
   \   000543   F8           MOV       R0,A
   \   000544   A3           INC       DPTR
   \   000545   E0           MOVX      A,@DPTR
   \   000546   F9           MOV       R1,A
   \   000547   7436         MOV       A,#0x36
   \   000549   12....       LCALL     ?XSTACK_DISP0_8
   \   00054C   E8           MOV       A,R0
   \   00054D   F0           MOVX      @DPTR,A
   \   00054E   A3           INC       DPTR
   \   00054F   E9           MOV       A,R1
   \   000550   F0           MOVX      @DPTR,A
    854              rejoinInf.logicalChannel = pRsp->logicalChannel;
   \   000551   E5..         MOV       A,?V0
   \   000553   240E         ADD       A,#0xe
   \   000555   F582         MOV       DPL,A
   \   000557   E4           CLR       A
   \   000558   35..         ADDC      A,?V1
   \   00055A   F583         MOV       DPH,A
   \   00055C   E0           MOVX      A,@DPTR
   \   00055D   C0E0         PUSH      A
   \   00055F   7435         MOV       A,#0x35
   \   000561   12....       LCALL     ?XSTACK_DISP0_8
   \   000564   D0E0         POP       A
   \   000566   F0           MOVX      @DPTR,A
    855              osal_memcpy( rejoinInf.extendedPANID, pRsp->extendedPANID, Z_EXTADDR_LEN);
   \   000567                ; Setup parameters for call to function osal_memcpy
   \   000567   E5..         MOV       A,?V0
   \   000569   2405         ADD       A,#0x5
   \   00056B   F5..         MOV       ?V4,A
   \   00056D   E4           CLR       A
   \   00056E   35..         ADDC      A,?V1
   \   000570   F5..         MOV       ?V5,A
   \   000572   75..00       MOV       ?V6,#0x0
   \   000575   78..         MOV       R0,#?V4
   \   000577   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00057A   7C08         MOV       R4,#0x8
   \   00057C   7D00         MOV       R5,#0x0
   \   00057E   742F         MOV       A,#0x2f
   \   000580   12....       LCALL     ?XSTACK_DISP101_8
   \   000583   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000586   7403         MOV       A,#0x3
   \   000588   12....       LCALL     ?DEALLOC_XSTACK8
    856              rejoinInf.nwkAddr = selectedTargetNwkAddr;
   \   00058B   90....       MOV       DPTR,#selectedTargetNwkAddr
   \   00058E   E0           MOVX      A,@DPTR
   \   00058F   F8           MOV       R0,A
   \   000590   A3           INC       DPTR
   \   000591   E0           MOVX      A,@DPTR
   \   000592   F9           MOV       R1,A
   \   000593   7438         MOV       A,#0x38
   \   000595   12....       LCALL     ?XSTACK_DISP0_8
   \   000598   E8           MOV       A,R0
   \   000599   F0           MOVX      @DPTR,A
   \   00059A   A3           INC       DPTR
   \   00059B   E9           MOV       A,R1
   \   00059C   F0           MOVX      @DPTR,A
    857              rejoinInf.nwkUpdateId = pRsp->nwkUpdateId;
   \   00059D   E5..         MOV       A,?V0
   \   00059F   240D         ADD       A,#0xd
   \   0005A1   F582         MOV       DPL,A
   \   0005A3   E4           CLR       A
   \   0005A4   35..         ADDC      A,?V1
   \   0005A6   F583         MOV       DPH,A
   \   0005A8   E0           MOVX      A,@DPTR
   \   0005A9   C0E0         PUSH      A
   \   0005AB   7434         MOV       A,#0x34
   \   0005AD   12....       LCALL     ?XSTACK_DISP0_8
   \   0005B0   D0E0         POP       A
   \   0005B2   F0           MOVX      @DPTR,A
    858                
    859              touchLink_DevRejoin( &rejoinInf );
   \   0005B3                ; Setup parameters for call to function touchLink_DevRejoin
   \   0005B3   742C         MOV       A,#0x2c
   \   0005B5   12....       LCALL     ?XSTACK_DISP101_8
   \   0005B8   12....       LCALL     `??touchLink_DevRejoin::?relay`; Banked call to: touchLink_DevRejoin
    860          
    861              // return unprocessed events
    862              return ( events ^ TOUCHLINK_START_NWK_EVT );
   \   0005BB   EE           MOV       A,R6
   \   0005BC   6404         XRL       A,#0x4
   \   0005BE   FA           MOV       R2,A
   \   0005BF   EF           MOV       A,R7
   \   0005C0   6400         XRL       A,#0x0
   \   0005C2   FB           MOV       R3,A
   \   0005C3   02....       LJMP      ??touchLinkInitiator_event_loop_4 & 0xFFFF
    863            }
    864          
    865            if ( events & TOUCHLINK_W4_NWK_JOIN_RSP_EVT )
   \                     ??touchLinkInitiator_event_loop_33:
   \   0005C6   EE           MOV       A,R6
   \   0005C7   5400         ANL       A,#0x0
   \   0005C9   F8           MOV       R0,A
   \   0005CA   EF           MOV       A,R7
   \   0005CB   5401         ANL       A,#0x1
   \   0005CD   F9           MOV       R1,A
   \   0005CE   E8           MOV       A,R0
   \   0005CF   49           ORL       A,R1
   \   0005D0   7003         JNZ       $+5
   \   0005D2   02....       LJMP      ??touchLinkInitiator_event_loop_34 & 0xFFFF
    866            {
    867              bdbTLNwkJoinRsp_t *pRsp = &(rxRsp.nwkJoinRsp);
   \   0005D5   75....       MOV       ?V0,#rxRsp & 0xff
   \   0005D8   75....       MOV       ?V1,#(rxRsp >> 8) & 0xff
    868          
    869              if ( pRsp->status == TOUCHLINK_NETWORK_JOIN_RSP_STATUS_SUCCESS )
   \   0005DB   85..82       MOV       DPL,?V0
   \   0005DE   85..83       MOV       DPH,?V1
   \   0005E1   A3           INC       DPTR
   \   0005E2   A3           INC       DPTR
   \   0005E3   A3           INC       DPTR
   \   0005E4   A3           INC       DPTR
   \   0005E5   E0           MOVX      A,@DPTR
   \   0005E6   6003         JZ        $+5
   \   0005E8   02....       LJMP      ??touchLinkInitiator_event_loop_35 & 0xFFFF
    870              {
    871                // Wait at least BDBCTL_MIN_STARTUP_DELAY_TIME seconds to allow the
    872                // target to start operating on the network correctly. Notify the
    873                // application afterwards.
    874                osal_start_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_NOTIFY_APP_EVT,
    875                                    BDBCTL_MIN_STARTUP_DELAY_TIME );
   \   0005EB                ; Setup parameters for call to function osal_start_timerEx
   \   0005EB   90....       MOV       DPTR,#__Constant_7d0
   \   0005EE   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0005F1   7A00         MOV       R2,#0x0
   \   0005F3   7B08         MOV       R3,#0x8
   \   0005F5   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   0005F8   E0           MOVX      A,@DPTR
   \   0005F9   F9           MOV       R1,A
   \   0005FA   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0005FD   7404         MOV       A,#0x4
   \   0005FF   12....       LCALL     ?DEALLOC_XSTACK8
   \   000602   E9           MOV       A,R1
    876                
    877                // Establish bind links
    878                if ( pRespondentHead != NULL )
   \   000603   90....       MOV       DPTR,#pRespondentHead
   \   000606   E0           MOVX      A,@DPTR
   \   000607   F8           MOV       R0,A
   \   000608   A3           INC       DPTR
   \   000609   E0           MOVX      A,@DPTR
   \   00060A   F9           MOV       R1,A
   \   00060B   E8           MOV       A,R0
   \   00060C   49           ORL       A,R1
   \   00060D   6061         JZ        ??touchLinkInitiator_event_loop_36
    879                {
    880                  AddrMgrEntry_t entry;
    881          
    882                  // add the device's address information
    883                  entry.user    = ADDRMGR_USER_BINDING;
   \   00060F   743A         MOV       A,#0x3a
   \   000611   12....       LCALL     ?XSTACK_DISP0_8
   \   000614   7404         MOV       A,#0x4
   \   000616   F0           MOVX      @DPTR,A
    884                  entry.nwkAddr = selectedTargetNwkAddr;
   \   000617   90....       MOV       DPTR,#selectedTargetNwkAddr
   \   00061A   E0           MOVX      A,@DPTR
   \   00061B   F8           MOV       R0,A
   \   00061C   A3           INC       DPTR
   \   00061D   E0           MOVX      A,@DPTR
   \   00061E   F9           MOV       R1,A
   \   00061F   743B         MOV       A,#0x3b
   \   000621   12....       LCALL     ?XSTACK_DISP0_8
   \   000624   E8           MOV       A,R0
   \   000625   F0           MOVX      @DPTR,A
   \   000626   A3           INC       DPTR
   \   000627   E9           MOV       A,R1
   \   000628   F0           MOVX      @DPTR,A
    885                  osal_cpyExtAddr( entry.extAddr, selectedTargetIEEEAddr );
   \   000629                ; Setup parameters for call to function sAddrExtCpy
   \   000629   7C..         MOV       R4,#selectedTargetIEEEAddr & 0xff
   \   00062B   7D..         MOV       R5,#(selectedTargetIEEEAddr >> 8) & 0xff
   \   00062D   743D         MOV       A,#0x3d
   \   00062F   12....       LCALL     ?XSTACK_DISP0_8
   \   000632   AA82         MOV       R2,DPL
   \   000634   AB83         MOV       R3,DPH
   \   000636   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    886                  AddrMgrEntryUpdate( &entry );
   \   000639                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000639   743A         MOV       A,#0x3a
   \   00063B   12....       LCALL     ?XSTACK_DISP101_8
   \   00063E   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   000641   E9           MOV       A,R1
    887                  osal_start_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT, SIMPLEDESC_RESPONSE_TIMEOUT );
   \   000642                ; Setup parameters for call to function osal_start_timerEx
   \   000642   90....       MOV       DPTR,#zgPollRate
   \   000645   78..         MOV       R0,#?V8
   \   000647   12....       LCALL     ?L_MOV_X
   \   00064A   90....       MOV       DPTR,#__Constant_3
   \   00064D   78..         MOV       R0,#?V4
   \   00064F   12....       LCALL     ?L_MOV_X
   \   000652   78..         MOV       R0,#?V8
   \   000654   79..         MOV       R1,#?V4
   \   000656   12....       LCALL     ?L_MUL
   \   000659   78..         MOV       R0,#?V8
   \   00065B   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00065E   7A00         MOV       R2,#0x0
   \   000660   7B40         MOV       R3,#0x40
   \   000662   90....       MOV       DPTR,#bdb_TaskID
   \   000665   E0           MOVX      A,@DPTR
   \   000666   F9           MOV       R1,A
   \   000667   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00066A   7404         MOV       A,#0x4
   \   00066C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00066F   E9           MOV       A,R1
    888                }
    889                
    890                // We're done with touch-link procedure here
    891                initiatorSetNwkToInitState();
   \                     ??touchLinkInitiator_event_loop_36:
   \   000670                ; Setup parameters for call to function initiatorSetNwkToInitState
   \   000670   12....       LCALL     `??initiatorSetNwkToInitState::?relay`; Banked call to: initiatorSetNwkToInitState
    892                //bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
    893                //bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, TRUE );
    894          
    895                touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
   \   000673                ; Setup parameters for call to function touchLink_UpdateNV
   \   000673   7902         MOV       R1,#0x2
   \   000675   12....       LCALL     `??touchLink_UpdateNV::?relay`; Banked call to: touchLink_UpdateNV
    896          
    897                if ( ( POLL_RATE == 0 ) && ( selectedTarget.scanRsp.zLogicalType == ZG_DEVICETYPE_ENDDEVICE ) )
   \   000678   8011         SJMP      ??touchLinkInitiator_event_loop_37
    898                {
    899                  //allow to respond to TOUCHLINK commission utility commands after TL
    900                  NLME_SetPollRate( TOUCHLINK_INITIATOR_TEMP_POST_TL_POLL_RATE );
    901                  //polling should reset when TL life time expires
    902                }
    903              }
    904              else 
    905              {
    906                touchLink_SendLeaveReq( );
   \                     ??touchLinkInitiator_event_loop_35:
   \   00067A                ; Setup parameters for call to function touchLink_SendLeaveReq
   \   00067A   12....       LCALL     `??touchLink_SendLeaveReq::?relay`; Banked call to: touchLink_SendLeaveReq
   \   00067D   E9           MOV       A,R1
    907                bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_TL_TARGET_FAILURE;
   \   00067E   90....       MOV       DPTR,#bdbAttributes + 10
   \   000681   7403         MOV       A,#0x3
   \   000683   F0           MOVX      @DPTR,A
    908                bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, FALSE );
   \   000684                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000684   7A00         MOV       R2,#0x0
   \   000686   7902         MOV       R1,#0x2
   \   000688   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    909              }
    910          
    911              // return unprocessed events
    912              return ( events ^ TOUCHLINK_W4_NWK_JOIN_RSP_EVT );
   \                     ??touchLinkInitiator_event_loop_37:
   \   00068B   EE           MOV       A,R6
   \   00068C   6400         XRL       A,#0x0
   \   00068E   FA           MOV       R2,A
   \   00068F   EF           MOV       A,R7
   \   000690   6401         XRL       A,#0x1
   \   000692   FB           MOV       R3,A
   \   000693   02....       LJMP      ??touchLinkInitiator_event_loop_4 & 0xFFFF
    913            }
    914          
    915            if ( events & TOUCHLINK_NWK_JOIN_IND_EVT )
   \                     ??touchLinkInitiator_event_loop_34:
   \   000696   EE           MOV       A,R6
   \   000697   5402         ANL       A,#0x2
   \   000699   604F         JZ        ??touchLinkInitiator_event_loop_38
    916            {
    917              // If not factory new, perform a Leave on our old network
    918              if ( ( bdbAttributes.bdbNodeIsOnANetwork == TRUE ) && ( touchLink_SendLeaveReq( ) == ZSuccess ) )
   \   00069B   90....       MOV       DPTR,#bdbAttributes + 14
   \   00069E   E0           MOVX      A,@DPTR
   \   00069F   6401         XRL       A,#0x1
   \   0006A1   700E         JNZ       ??touchLinkInitiator_event_loop_39
   \   0006A3                ; Setup parameters for call to function touchLink_SendLeaveReq
   \   0006A3   12....       LCALL     `??touchLink_SendLeaveReq::?relay`; Banked call to: touchLink_SendLeaveReq
   \   0006A6   E9           MOV       A,R1
   \   0006A7   7008         JNZ       ??touchLinkInitiator_event_loop_39
    919              {
    920                // Wait for Leave confirmation before joining the new network
    921                touchLinkLeaveInitiated = TOUCHLINK_LEAVE_TO_JOIN_NWK;
   \   0006A9   90....       MOV       DPTR,#touchLinkLeaveInitiated
   \   0006AC   7401         MOV       A,#0x1
   \   0006AE   F0           MOVX      @DPTR,A
   \   0006AF   802E         SJMP      ??touchLinkInitiator_event_loop_40
    922              }
    923              else
    924              {
    925          #if ( ZSTACK_ROUTER_BUILD )
    926                // Notify our task to join this network
    927                osal_set_event( touchLinkInitiator_TaskID, TOUCHLINK_JOIN_NWK_ATTEMPT_EVT );
    928          #else
    929                bdbTLNwkParams_t *pParams = &(joinReq.nwkParams);
   \                     ??touchLinkInitiator_event_loop_39:
   \   0006B1   75....       MOV       ?V0,#(joinReq + 4) & 0xff
   \   0006B4   75....       MOV       ?V1,#((joinReq + 4) >> 8) & 0xff
    930                
    931                // Notify our task to join this network
    932                // Perform Network Discovery to verify our new network parameters uniqeness
    933                touchLink_PerformNetworkDisc( (uint32)1 << pParams->logicalChannel );
   \   0006B7                ; Setup parameters for call to function touchLink_PerformNetworkDisc
   \   0006B7   75..01       MOV       ?V4,#0x1
   \   0006BA   75..00       MOV       ?V5,#0x0
   \   0006BD   75..00       MOV       ?V6,#0x0
   \   0006C0   75..00       MOV       ?V7,#0x0
   \   0006C3   E5..         MOV       A,?V0
   \   0006C5   2419         ADD       A,#0x19
   \   0006C7   F582         MOV       DPL,A
   \   0006C9   E4           CLR       A
   \   0006CA   35..         ADDC      A,?V1
   \   0006CC   F583         MOV       DPH,A
   \   0006CE   E0           MOVX      A,@DPTR
   \   0006CF   78..         MOV       R0,#?V4
   \   0006D1   12....       LCALL     ?L_SHL
   \   0006D4   AA..         MOV       R2,?V4
   \   0006D6   AB..         MOV       R3,?V5
   \   0006D8   AC..         MOV       R4,?V6
   \   0006DA   AD..         MOV       R5,?V7
   \   0006DC   12....       LCALL     `??touchLink_PerformNetworkDisc::?relay`; Banked call to: touchLink_PerformNetworkDisc
    934          #endif
    935              }
    936          
    937              // return unprocessed events
    938              return ( events ^ TOUCHLINK_NWK_JOIN_IND_EVT );
   \                     ??touchLinkInitiator_event_loop_40:
   \   0006DF   EE           MOV       A,R6
   \   0006E0   6402         XRL       A,#0x2
   \   0006E2   FA           MOV       R2,A
   \   0006E3   EF           MOV       A,R7
   \   0006E4   6400         XRL       A,#0x0
   \   0006E6   FB           MOV       R3,A
   \   0006E7   02....       LJMP      ??touchLinkInitiator_event_loop_4 & 0xFFFF
    939            }
    940          
    941            if ( events & TOUCHLINK_JOIN_NWK_ATTEMPT_EVT )
   \                     ??touchLinkInitiator_event_loop_38:
   \   0006EA   EE           MOV       A,R6
   \   0006EB   5408         ANL       A,#0x8
   \   0006ED   7003         JNZ       $+5
   \   0006EF   02....       LJMP      ??touchLinkInitiator_event_loop_41 & 0xFFFF
    942            {
    943              // Join the network
    944          #if ( ZSTACK_ROUTER_BUILD )
    945              initiatorJoinNwk();
    946          #else
    947              bdbTLNwkParams_t *pParams = &(joinReq.nwkParams);
   \   0006F2   75....       MOV       ?V0,#(joinReq + 4) & 0xff
   \   0006F5   75....       MOV       ?V1,#((joinReq + 4) >> 8) & 0xff
    948              
    949              bdbTLNwkRejoin_t rejoinInf;
    950                   
    951              rejoinInf.panId = pParams->panId;
   \   0006F8   E5..         MOV       A,?V0
   \   0006FA   241A         ADD       A,#0x1a
   \   0006FC   F582         MOV       DPL,A
   \   0006FE   E4           CLR       A
   \   0006FF   35..         ADDC      A,?V1
   \   000701   F583         MOV       DPH,A
   \   000703   E0           MOVX      A,@DPTR
   \   000704   F8           MOV       R0,A
   \   000705   A3           INC       DPTR
   \   000706   E0           MOVX      A,@DPTR
   \   000707   F9           MOV       R1,A
   \   000708   7428         MOV       A,#0x28
   \   00070A   12....       LCALL     ?XSTACK_DISP0_8
   \   00070D   E8           MOV       A,R0
   \   00070E   F0           MOVX      @DPTR,A
   \   00070F   A3           INC       DPTR
   \   000710   E9           MOV       A,R1
   \   000711   F0           MOVX      @DPTR,A
    952              rejoinInf.logicalChannel = pParams->logicalChannel;
   \   000712   E5..         MOV       A,?V0
   \   000714   2419         ADD       A,#0x19
   \   000716   F582         MOV       DPL,A
   \   000718   E4           CLR       A
   \   000719   35..         ADDC      A,?V1
   \   00071B   F583         MOV       DPH,A
   \   00071D   E0           MOVX      A,@DPTR
   \   00071E   C0E0         PUSH      A
   \   000720   7427         MOV       A,#0x27
   \   000722   12....       LCALL     ?XSTACK_DISP0_8
   \   000725   D0E0         POP       A
   \   000727   F0           MOVX      @DPTR,A
    953              osal_memcpy( rejoinInf.extendedPANID, pParams->extendedPANID, Z_EXTADDR_LEN);
   \   000728                ; Setup parameters for call to function osal_memcpy
   \   000728   85....       MOV       ?V4,?V0
   \   00072B   85....       MOV       ?V5,?V1
   \   00072E   75..00       MOV       ?V6,#0x0
   \   000731   78..         MOV       R0,#?V4
   \   000733   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000736   7C08         MOV       R4,#0x8
   \   000738   7D00         MOV       R5,#0x0
   \   00073A   7421         MOV       A,#0x21
   \   00073C   12....       LCALL     ?XSTACK_DISP101_8
   \   00073F   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000742   7403         MOV       A,#0x3
   \   000744   12....       LCALL     ?DEALLOC_XSTACK8
    954              rejoinInf.nwkAddr = pDiscoveredNwkParamList->chosenRouter;
   \   000747   90....       MOV       DPTR,#pDiscoveredNwkParamList
   \   00074A   E0           MOVX      A,@DPTR
   \   00074B   F8           MOV       R0,A
   \   00074C   A3           INC       DPTR
   \   00074D   E0           MOVX      A,@DPTR
   \   00074E   C8           XCH       A,R0
   \   00074F   240D         ADD       A,#0xd
   \   000751   F582         MOV       DPL,A
   \   000753   C8           XCH       A,R0
   \   000754   3400         ADDC      A,#0x0
   \   000756   F583         MOV       DPH,A
   \   000758   E0           MOVX      A,@DPTR
   \   000759   F8           MOV       R0,A
   \   00075A   A3           INC       DPTR
   \   00075B   E0           MOVX      A,@DPTR
   \   00075C   F9           MOV       R1,A
   \   00075D   742A         MOV       A,#0x2a
   \   00075F   12....       LCALL     ?XSTACK_DISP0_8
   \   000762   E8           MOV       A,R0
   \   000763   F0           MOVX      @DPTR,A
   \   000764   A3           INC       DPTR
   \   000765   E9           MOV       A,R1
   \   000766   F0           MOVX      @DPTR,A
    955              rejoinInf.nwkUpdateId = joinReq.nwkUpdateId;
   \   000767   90....       MOV       DPTR,#joinReq + 46
   \   00076A   E0           MOVX      A,@DPTR
   \   00076B   C0E0         PUSH      A
   \   00076D   7426         MOV       A,#0x26
   \   00076F   12....       LCALL     ?XSTACK_DISP0_8
   \   000772   D0E0         POP       A
   \   000774   F0           MOVX      @DPTR,A
    956                
    957              touchLink_DevRejoin( &rejoinInf );
   \   000775                ; Setup parameters for call to function touchLink_DevRejoin
   \   000775   741E         MOV       A,#0x1e
   \   000777   12....       LCALL     ?XSTACK_DISP101_8
   \   00077A   12....       LCALL     `??touchLink_DevRejoin::?relay`; Banked call to: touchLink_DevRejoin
    958          #endif
    959              touchLink_FreeNwkParamList();
   \   00077D                ; Setup parameters for call to function touchLink_FreeNwkParamList
   \   00077D   12....       LCALL     `??touchLink_FreeNwkParamList::?relay`; Banked call to: touchLink_FreeNwkParamList
    960          
    961              // return unprocessed events
    962              return ( events ^ TOUCHLINK_JOIN_NWK_ATTEMPT_EVT );
   \   000780   EE           MOV       A,R6
   \   000781   6408         XRL       A,#0x8
   \   000783   FA           MOV       R2,A
   \   000784   EF           MOV       A,R7
   \   000785   6400         XRL       A,#0x0
   \   000787   FB           MOV       R3,A
   \   000788   02....       LJMP      ??touchLinkInitiator_event_loop_4 & 0xFFFF
    963            }
    964          
    965            if ( events & TOUCHLINK_DISABLE_RX_EVT )
   \                     ??touchLinkInitiator_event_loop_41:
   \   00078B   EE           MOV       A,R6
   \   00078C   5400         ANL       A,#0x0
   \   00078E   F8           MOV       R0,A
   \   00078F   EF           MOV       A,R7
   \   000790   5402         ANL       A,#0x2
   \   000792   F9           MOV       R1,A
   \   000793   E8           MOV       A,R0
   \   000794   49           ORL       A,R1
   \   000795   6023         JZ        ??touchLinkInitiator_event_loop_42
    966            {
    967              // We're not asked to join a network
    968              initiatorSetNwkToInitState();
   \   000797                ; Setup parameters for call to function initiatorSetNwkToInitState
   \   000797   12....       LCALL     `??initiatorSetNwkToInitState::?relay`; Banked call to: initiatorSetNwkToInitState
    969          
    970              scanReqChannels = TOUCHLINK_SCAN_PRIMARY_CHANNELS;
   \   00079A   90....       MOV       DPTR,#scanReqChannels
   \   00079D   7401         MOV       A,#0x1
   \   00079F   F0           MOVX      @DPTR,A
    971              numScanReqSent = 0;
   \   0007A0   90....       MOV       DPTR,#numScanReqSent
   \   0007A3   7400         MOV       A,#0x0
   \   0007A5   F0           MOVX      @DPTR,A
    972              // Reset selected target
    973              if ( zTouchLinkNwkStartRtr == FALSE )
   \   0007A6   90....       MOV       DPTR,#zTouchLinkNwkStartRtr
   \   0007A9   E0           MOVX      A,@DPTR
   \   0007AA   7003         JNZ       ??touchLinkInitiator_event_loop_43
    974              {
    975                initiatorClearSelectedTarget();
   \   0007AC                ; Setup parameters for call to function initiatorClearSelectedTarget
   \   0007AC   12....       LCALL     `??initiatorClearSelectedTarget::?relay`; Banked call to: initiatorClearSelectedTarget
    976              }
    977          
    978              // return unprocessed events
    979              return ( events ^ TOUCHLINK_DISABLE_RX_EVT );
   \                     ??touchLinkInitiator_event_loop_43:
   \   0007AF   EE           MOV       A,R6
   \   0007B0   6400         XRL       A,#0x0
   \   0007B2   FA           MOV       R2,A
   \   0007B3   EF           MOV       A,R7
   \   0007B4   6402         XRL       A,#0x2
   \   0007B6   FB           MOV       R3,A
   \   0007B7   02....       LJMP      ??touchLinkInitiator_event_loop_4 & 0xFFFF
    980            }
    981          
    982            if ( events & TOUCHLINK_W4_REJOIN_EVT )
   \                     ??touchLinkInitiator_event_loop_42:
   \   0007BA   EE           MOV       A,R6
   \   0007BB   5400         ANL       A,#0x0
   \   0007BD   F8           MOV       R0,A
   \   0007BE   EF           MOV       A,R7
   \   0007BF   5404         ANL       A,#0x4
   \   0007C1   F9           MOV       R1,A
   \   0007C2   E8           MOV       A,R0
   \   0007C3   49           ORL       A,R1
   \   0007C4   600F         JZ        ??touchLinkInitiator_event_loop_44
    983            {
    984              // Stop joining cycle
    985              ZDApp_StopJoiningCycle();
   \   0007C6                ; Setup parameters for call to function ZDApp_StopJoiningCycle
   \   0007C6   12....       LCALL     `??ZDApp_StopJoiningCycle::?relay`; Banked call to: ZDApp_StopJoiningCycle
   \   0007C9   E9           MOV       A,R1
    986          
    987              // return unprocessed events
    988              return ( events ^ TOUCHLINK_W4_REJOIN_EVT );
   \   0007CA   EE           MOV       A,R6
   \   0007CB   6400         XRL       A,#0x0
   \   0007CD   FA           MOV       R2,A
   \   0007CE   EF           MOV       A,R7
   \   0007CF   6404         XRL       A,#0x4
   \   0007D1   FB           MOV       R3,A
   \   0007D2   02....       LJMP      ??touchLinkInitiator_event_loop_4 & 0xFFFF
    989            }
    990          
    991            if ( events & TOUCHLINK_NOTIFY_APP_EVT )
   \                     ??touchLinkInitiator_event_loop_44:
   \   0007D5   EE           MOV       A,R6
   \   0007D6   5400         ANL       A,#0x0
   \   0007D8   F8           MOV       R0,A
   \   0007D9   EF           MOV       A,R7
   \   0007DA   5408         ANL       A,#0x8
   \   0007DC   F9           MOV       R1,A
   \   0007DD   E8           MOV       A,R0
   \   0007DE   49           ORL       A,R1
   \   0007DF   7003         JNZ       $+5
   \   0007E1   02....       LJMP      ??touchLinkInitiator_event_loop_45 & 0xFFFF
    992            {
    993              ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
    994                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   0007E4                ; Setup parameters for call to function NLME_GetExtAddr
   \   0007E4   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   0007E7   8A..         MOV       ?V4,R2
   \   0007E9   8B..         MOV       ?V5,R3
   \   0007EB   85....       MOV       ?V0,?V4
   \   0007EE   85....       MOV       ?V1,?V5
   \   0007F1                ; Setup parameters for call to function NLME_GetShortAddr
   \   0007F1   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0007F4   8A..         MOV       ?V4,R2
   \   0007F6   8B..         MOV       ?V5,R3
   \   0007F8   AA..         MOV       R2,?V4
   \   0007FA   AB..         MOV       R3,?V5
   \   0007FC                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   0007FC   75..00       MOV       ?V3,#0x0
   \   0007FF   78..         MOV       R0,#?V3
   \   000801   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000804   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000807   E0           MOVX      A,@DPTR
   \   000808   F9           MOV       R1,A
   \   000809   AC..         MOV       R4,?V0
   \   00080B   AD..         MOV       R5,?V1
   \   00080D   12....       LCALL     `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   000810   7401         MOV       A,#0x1
   \   000812   12....       LCALL     ?DEALLOC_XSTACK8
   \   000815   E9           MOV       A,R1
    995              
    996              if ( selectedTarget.lastRssi > TOUCHLINK_WORST_RSSI )
   \   000816   90....       MOV       DPTR,#selectedTarget + 53
   \   000819   E0           MOVX      A,@DPTR
   \   00081A   C3           CLR       C
   \   00081B   94BB         SUBB      A,#-0x45
   \   00081D   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00081F   65D0         XRL       A,PSW
   \   000821   33           RLC       A
   \   000822   4072         JC        ??touchLinkInitiator_event_loop_46
    997              {
    998                epInfoRec_t rec;
    999                rec.nwkAddr = selectedTarget.newNwkAddr; // newly assigned network address
   \   000824   90....       MOV       DPTR,#selectedTarget + 50
   \   000827   E0           MOVX      A,@DPTR
   \   000828   F8           MOV       R0,A
   \   000829   A3           INC       DPTR
   \   00082A   E0           MOVX      A,@DPTR
   \   00082B   F9           MOV       R1,A
   \   00082C   7402         MOV       A,#0x2
   \   00082E   12....       LCALL     ?XSTACK_DISP0_8
   \   000831   E8           MOV       A,R0
   \   000832   F0           MOVX      @DPTR,A
   \   000833   A3           INC       DPTR
   \   000834   E9           MOV       A,R1
   \   000835   F0           MOVX      @DPTR,A
   1000                rec.endpoint = selectedTarget.scanRsp.deviceInfo.endpoint;
   \   000836   90....       MOV       DPTR,#selectedTarget + 31
   \   000839   E0           MOVX      A,@DPTR
   \   00083A   C0E0         PUSH      A
   \   00083C   7404         MOV       A,#0x4
   \   00083E   12....       LCALL     ?XSTACK_DISP0_8
   \   000841   D0E0         POP       A
   \   000843   F0           MOVX      @DPTR,A
   1001                rec.profileID = selectedTarget.scanRsp.deviceInfo.profileID;
   \   000844   90....       MOV       DPTR,#selectedTarget + 32
   \   000847   E0           MOVX      A,@DPTR
   \   000848   F8           MOV       R0,A
   \   000849   A3           INC       DPTR
   \   00084A   E0           MOVX      A,@DPTR
   \   00084B   F9           MOV       R1,A
   \   00084C   7405         MOV       A,#0x5
   \   00084E   12....       LCALL     ?XSTACK_DISP0_8
   \   000851   E8           MOV       A,R0
   \   000852   F0           MOVX      @DPTR,A
   \   000853   A3           INC       DPTR
   \   000854   E9           MOV       A,R1
   \   000855   F0           MOVX      @DPTR,A
   1002                rec.deviceID = selectedTarget.scanRsp.deviceInfo.deviceID;
   \   000856   90....       MOV       DPTR,#selectedTarget + 34
   \   000859   E0           MOVX      A,@DPTR
   \   00085A   F8           MOV       R0,A
   \   00085B   A3           INC       DPTR
   \   00085C   E0           MOVX      A,@DPTR
   \   00085D   F9           MOV       R1,A
   \   00085E   7407         MOV       A,#0x7
   \   000860   12....       LCALL     ?XSTACK_DISP0_8
   \   000863   E8           MOV       A,R0
   \   000864   F0           MOVX      @DPTR,A
   \   000865   A3           INC       DPTR
   \   000866   E9           MOV       A,R1
   \   000867   F0           MOVX      @DPTR,A
   1003                rec.version = selectedTarget.scanRsp.deviceInfo.version;
   \   000868   90....       MOV       DPTR,#selectedTarget + 36
   \   00086B   E0           MOVX      A,@DPTR
   \   00086C   C0E0         PUSH      A
   \   00086E   7409         MOV       A,#0x9
   \   000870   12....       LCALL     ?XSTACK_DISP0_8
   \   000873   D0E0         POP       A
   \   000875   F0           MOVX      @DPTR,A
   1004                // Notify the application
   1005                if ( pfnNotifyAppCB )
   \   000876   90....       MOV       DPTR,#pfnNotifyAppCB
   \   000879   E0           MOVX      A,@DPTR
   \   00087A   F8           MOV       R0,A
   \   00087B   A3           INC       DPTR
   \   00087C   E0           MOVX      A,@DPTR
   \   00087D   F9           MOV       R1,A
   \   00087E   E8           MOV       A,R0
   \   00087F   49           ORL       A,R1
   \   000880   6014         JZ        ??touchLinkInitiator_event_loop_46
   1006                {
   1007                  (*pfnNotifyAppCB)( &rec );
   \   000882                ; Setup parameters for indirect call
   \   000882   7402         MOV       A,#0x2
   \   000884   12....       LCALL     ?XSTACK_DISP101_8
   \   000887   90....       MOV       DPTR,#pfnNotifyAppCB
   \   00088A   E0           MOVX      A,@DPTR
   \   00088B   F8           MOV       R0,A
   \   00088C   A3           INC       DPTR
   \   00088D   E0           MOVX      A,@DPTR
   \   00088E   F583         MOV       DPH,A
   \   000890   8882         MOV       DPL,R0
   \   000892   12....       LCALL     ?CALL_IND
   \   000895   E9           MOV       A,R1
   1008                }
   1009              }
   1010              // return unprocessed events
   1011              return ( events ^ TOUCHLINK_NOTIFY_APP_EVT );
   \                     ??touchLinkInitiator_event_loop_46:
   \   000896   EE           MOV       A,R6
   \   000897   6400         XRL       A,#0x0
   \   000899   FA           MOV       R2,A
   \   00089A   EF           MOV       A,R7
   \   00089B   6408         XRL       A,#0x8
   \   00089D   FB           MOV       R3,A
   \   00089E   02....       LJMP      ??touchLinkInitiator_event_loop_4 & 0xFFFF
   1012            }
   1013            
   1014            if ( events & TOUCHLINK_NWK_RTR_START_EVT )
   \                     ??touchLinkInitiator_event_loop_45:
   \   0008A1   EE           MOV       A,R6
   \   0008A2   5400         ANL       A,#0x0
   \   0008A4   F8           MOV       R0,A
   \   0008A5   EF           MOV       A,R7
   \   0008A6   5410         ANL       A,#0x10
   \   0008A8   F9           MOV       R1,A
   \   0008A9   E8           MOV       A,R0
   \   0008AA   49           ORL       A,R1
   \   0008AB   7003         JNZ       $+5
   \   0008AD   02....       LJMP      ??touchLinkInitiator_event_loop_47 & 0xFFFF
   1015            {
   1016              uint16 nwkAddr = INVALID_NODE_ADDR;
   \   0008B0   85..82       MOV       DPL,?XSP + 0
   \   0008B3   85..83       MOV       DPH,?XSP + 1
   \   0008B6   74FE         MOV       A,#-0x2
   \   0008B8   F0           MOVX      @DPTR,A
   \   0008B9   A3           INC       DPTR
   \   0008BA   74FF         MOV       A,#-0x1
   \   0008BC   F0           MOVX      @DPTR,A
   1017              
   1018              osal_nv_write( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
   1019                             sizeof( uint16), &nwkAddr );
   \   0008BD                ; Setup parameters for call to function osal_nv_write
   \   0008BD   A8..         MOV       R0,?XSP + 0
   \   0008BF   A9..         MOV       R1,?XSP + 1
   \   0008C1   88..         MOV       ?V0,R0
   \   0008C3   89..         MOV       ?V1,R1
   \   0008C5   78..         MOV       R0,#?V0
   \   0008C7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0008CA   75..02       MOV       ?V0,#0x2
   \   0008CD   75..00       MOV       ?V1,#0x0
   \   0008D0   78..         MOV       R0,#?V0
   \   0008D2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0008D5   7C14         MOV       R4,#0x14
   \   0008D7   7D00         MOV       R5,#0x0
   \   0008D9   7A21         MOV       R2,#0x21
   \   0008DB   7B00         MOV       R3,#0x0
   \   0008DD   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0008E0   7404         MOV       A,#0x4
   \   0008E2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0008E5   E9           MOV       A,R1
   1020              
   1021              // If the PAN Id, Extended PAN Id or Logical Channel are zero then
   1022              // determine each of these parameters
   1023              if ( !nwk_ExtPANIDValid( initiatorNwkParams.extendedPANID ) )
   \   0008E6                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   0008E6   7A..         MOV       R2,#initiatorNwkParams & 0xff
   \   0008E8   7B..         MOV       R3,#(initiatorNwkParams >> 8) & 0xff
   \   0008EA   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   0008ED   E9           MOV       A,R1
   \   0008EE   7009         JNZ       ??touchLinkInitiator_event_loop_48
   1024              {
   1025                touchLink_GenerateRandNum( initiatorNwkParams.extendedPANID, Z_EXTADDR_LEN );
   \   0008F0                ; Setup parameters for call to function touchLink_GenerateRandNum
   \   0008F0   7908         MOV       R1,#0x8
   \   0008F2   7A..         MOV       R2,#initiatorNwkParams & 0xff
   \   0008F4   7B..         MOV       R3,#(initiatorNwkParams >> 8) & 0xff
   \   0008F6   12....       LCALL     `??touchLink_GenerateRandNum::?relay`; Banked call to: touchLink_GenerateRandNum
   1026              }
   1027          
   1028              if ( initiatorNwkParams.panId == 0 )
   \                     ??touchLinkInitiator_event_loop_48:
   \   0008F9   90....       MOV       DPTR,#initiatorNwkParams + 26
   \   0008FC   E0           MOVX      A,@DPTR
   \   0008FD   F8           MOV       R0,A
   \   0008FE   A3           INC       DPTR
   \   0008FF   E0           MOVX      A,@DPTR
   \   000900   F9           MOV       R1,A
   \   000901   E8           MOV       A,R0
   \   000902   49           ORL       A,R1
   \   000903   700B         JNZ       ??touchLinkInitiator_event_loop_49
   1029              {
   1030                initiatorNwkParams.panId = osal_rand();
   \   000905                ; Setup parameters for call to function osal_rand
   \   000905   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000908   90....       MOV       DPTR,#initiatorNwkParams + 26
   \   00090B   EA           MOV       A,R2
   \   00090C   F0           MOVX      @DPTR,A
   \   00090D   A3           INC       DPTR
   \   00090E   EB           MOV       A,R3
   \   00090F   F0           MOVX      @DPTR,A
   1031              }
   1032          
   1033              if ( initiatorNwkParams.logicalChannel == 0 )
   \                     ??touchLinkInitiator_event_loop_49:
   \   000910   90....       MOV       DPTR,#initiatorNwkParams + 25
   \   000913   E0           MOVX      A,@DPTR
   \   000914   7008         JNZ       ??touchLinkInitiator_event_loop_50
   1034              {
   1035                initiatorNwkParams.logicalChannel = touchLink_GetRandPrimaryChannel();
   \   000916                ; Setup parameters for call to function touchLink_GetRandPrimaryChannel
   \   000916   12....       LCALL     `??touchLink_GetRandPrimaryChannel::?relay`; Banked call to: touchLink_GetRandPrimaryChannel
   \   000919   E9           MOV       A,R1
   \   00091A   90....       MOV       DPTR,#initiatorNwkParams + 25
   \   00091D   F0           MOVX      @DPTR,A
   1036              }
   1037          
   1038              if ( selectedTarget.scanRsp.touchLinkAddressAssignment)
   \                     ??touchLinkInitiator_event_loop_50:
   \   00091E   90....       MOV       DPTR,#selectedTarget + 7
   \   000921   E0           MOVX      A,@DPTR
   \   000922   F8           MOV       R0,A
   \   000923   A3           INC       DPTR
   \   000924   E0           MOVX      A,@DPTR
   \   000925   F9           MOV       R1,A
   \   000926   E8           MOV       A,R0
   \   000927   C3           CLR       C
   \   000928   13           RRC       A
   \   000929   5401         ANL       A,#0x1
   \   00092B   A2E0         MOV       C,0xE0 /* A   */.0
   \   00092D   5007         JNC       ??touchLinkInitiator_event_loop_51
   1039              {
   1040                touchLink_GerFreeRanges( &initiatorNwkParams );
   \   00092F                ; Setup parameters for call to function touchLink_GerFreeRanges
   \   00092F   7A..         MOV       R2,#initiatorNwkParams & 0xff
   \   000931   7B..         MOV       R3,#(initiatorNwkParams >> 8) & 0xff
   \   000933   12....       LCALL     `??touchLink_GerFreeRanges::?relay`; Banked call to: touchLink_GerFreeRanges
   1041              }
   1042          
   1043              // Perform Network Discovery to verify our new network parameters uniqeness
   1044              touchLink_PerformNetworkDisc( (uint32)1 << initiatorNwkParams.logicalChannel );
   \                     ??touchLinkInitiator_event_loop_51:
   \   000936                ; Setup parameters for call to function touchLink_PerformNetworkDisc
   \   000936   75..01       MOV       ?V4,#0x1
   \   000939   75..00       MOV       ?V5,#0x0
   \   00093C   75..00       MOV       ?V6,#0x0
   \   00093F   75..00       MOV       ?V7,#0x0
   \   000942   90....       MOV       DPTR,#initiatorNwkParams + 25
   \   000945   E0           MOVX      A,@DPTR
   \   000946   78..         MOV       R0,#?V4
   \   000948   12....       LCALL     ?L_SHL
   \   00094B   AA..         MOV       R2,?V4
   \   00094D   AB..         MOV       R3,?V5
   \   00094F   AC..         MOV       R4,?V6
   \   000951   AD..         MOV       R5,?V7
   \   000953   12....       LCALL     `??touchLink_PerformNetworkDisc::?relay`; Banked call to: touchLink_PerformNetworkDisc
   1045          
   1046              // return unprocessed events
   1047              return ( events ^ TOUCHLINK_NWK_RTR_START_EVT );
   \   000956   EE           MOV       A,R6
   \   000957   6400         XRL       A,#0x0
   \   000959   FA           MOV       R2,A
   \   00095A   EF           MOV       A,R7
   \   00095B   6410         XRL       A,#0x10
   \   00095D   FB           MOV       R3,A
   \   00095E   02....       LJMP      ??touchLinkInitiator_event_loop_4 & 0xFFFF
   1048            }
   1049            
   1050            if ( events & TOUCHLINK_NWK_FORMATION_SUCCESS_EVT )
   \                     ??touchLinkInitiator_event_loop_47:
   \   000961   EE           MOV       A,R6
   \   000962   5400         ANL       A,#0x0
   \   000964   F8           MOV       R0,A
   \   000965   EF           MOV       A,R7
   \   000966   5420         ANL       A,#0x20
   \   000968   F9           MOV       R1,A
   \   000969   E8           MOV       A,R0
   \   00096A   49           ORL       A,R1
   \   00096B   604C         JZ        ??touchLinkInitiator_event_loop_52
   1051            {
   1052              if( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL )
   \   00096D   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000970   E0           MOVX      A,@DPTR
   \   000971   6402         XRL       A,#0x2
   \   000973   703A         JNZ       ??touchLinkInitiator_event_loop_53
   1053              {
   1054                bdbTLNwkJoinRsp_t *pRsp = &(rxRsp.nwkJoinRsp);
   \   000975   75....       MOV       ?V0,#rxRsp & 0xff
   \   000978   75....       MOV       ?V1,#(rxRsp >> 8) & 0xff
   1055                pRsp->status = TOUCHLINK_NETWORK_JOIN_RSP_STATUS_FAILURE;
   \   00097B   85..82       MOV       DPL,?V0
   \   00097E   85..83       MOV       DPH,?V1
   \   000981   A3           INC       DPTR
   \   000982   A3           INC       DPTR
   \   000983   A3           INC       DPTR
   \   000984   A3           INC       DPTR
   \   000985   7401         MOV       A,#0x1
   \   000987   F0           MOVX      @DPTR,A
   1056                
   1057                // Tune to the channel that the Scan Response was heard on
   1058                touchLink_SetChannel( selectedTarget.rxChannel );
   \   000988                ; Setup parameters for call to function touchLink_SetChannel
   \   000988   90....       MOV       DPTR,#selectedTarget + 52
   \   00098B   E0           MOVX      A,@DPTR
   \   00098C   F9           MOV       R1,A
   \   00098D   12....       LCALL     `??touchLink_SetChannel::?relay`; Banked call to: touchLink_SetChannel
   1059                
   1060                if ( _NIB.nwkUpdateId <= selectedTarget.scanRsp.nwkUpdateId )
   \   000990   90....       MOV       DPTR,#_NIB + 109
   \   000993   E0           MOVX      A,@DPTR
   \   000994   F8           MOV       R0,A
   \   000995   90....       MOV       DPTR,#selectedTarget + 23
   \   000998   E0           MOVX      A,@DPTR
   \   000999   C3           CLR       C
   \   00099A   98           SUBB      A,R0
   \   00099B   4008         JC        ??touchLinkInitiator_event_loop_54
   1061                {
   1062                  NLME_SetUpdateID( selectedTarget.scanRsp.nwkUpdateId );
   \   00099D                ; Setup parameters for call to function NLME_SetUpdateID
   \   00099D   90....       MOV       DPTR,#selectedTarget + 23
   \   0009A0   E0           MOVX      A,@DPTR
   \   0009A1   F9           MOV       R1,A
   \   0009A2   12....       LCALL     `??NLME_SetUpdateID::?relay`; Banked call to: NLME_SetUpdateID
   1063                }
   1064                // Ask the target to join our network
   1065                bdb_Initiator_SendNwkJoinReq( );
   \                     ??touchLinkInitiator_event_loop_54:
   \   0009A5                ; Setup parameters for call to function bdb_Initiator_SendNwkJoinReq
   \   0009A5   12....       LCALL     `??bdb_Initiator_SendNwkJoinReq::?relay`; Banked call to: bdb_Initiator_SendNwkJoinReq
   \   0009A8   E9           MOV       A,R1
   1066                zTouchLinkNwkStartRtr = FALSE;
   \   0009A9   90....       MOV       DPTR,#zTouchLinkNwkStartRtr
   \   0009AC   7400         MOV       A,#0x0
   \   0009AE   F0           MOVX      @DPTR,A
   1067              }
   1068              return ( events ^ TOUCHLINK_NWK_FORMATION_SUCCESS_EVT );
   \                     ??touchLinkInitiator_event_loop_53:
   \   0009AF   EE           MOV       A,R6
   \   0009B0   6400         XRL       A,#0x0
   \   0009B2   FA           MOV       R2,A
   \   0009B3   EF           MOV       A,R7
   \   0009B4   6420         XRL       A,#0x20
   \   0009B6   FB           MOV       R3,A
   \   0009B7   8047         SJMP      ??touchLinkInitiator_event_loop_4
   1069            }
   1070          
   1071            if ( events & TOUCHLINK_NWK_DISC_CNF_EVT )
   \                     ??touchLinkInitiator_event_loop_52:
   \   0009B9   EE           MOV       A,R6
   \   0009BA   A2E0         MOV       C,0xE0 /* A   */.0
   \   0009BC   5017         JNC       ??touchLinkInitiator_event_loop_55
   1072            {
   1073          #if ZSTACK_ROUTER_BUILD
   1074              if ( bdbAttributes.bdbNodeIsOnANetwork == FALSE )
   1075              {
   1076                initiatorNwkParams.nwkAddr = APL_FREE_NWK_ADDR_RANGE_BEGIN;
   1077              }
   1078              // Copy in the encrypted network key
   1079              touchLink_EncryptNwkKey( initiatorNwkParams.nwkKey, initiatorNwkParams.keyIndex, touchLinkTransID, touchLinkResponseID );
   1080              // Start operating on the new network
   1081              touchLinkStartRtr( &initiatorNwkParams, touchLinkTransID );
   1082          #else
   1083              // Join to the chosen network
   1084              osal_set_event( touchLinkInitiator_TaskID, TOUCHLINK_JOIN_NWK_ATTEMPT_EVT );
   \   0009BE                ; Setup parameters for call to function osal_set_event
   \   0009BE   7A08         MOV       R2,#0x8
   \   0009C0   7B00         MOV       R3,#0x0
   \   0009C2   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   0009C5   E0           MOVX      A,@DPTR
   \   0009C6   F9           MOV       R1,A
   \   0009C7   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   0009CA   E9           MOV       A,R1
   1085          #endif
   1086              // return unprocessed events
   1087              return ( events ^ TOUCHLINK_NWK_DISC_CNF_EVT );
   \   0009CB   EE           MOV       A,R6
   \   0009CC   6401         XRL       A,#0x1
   \   0009CE   FA           MOV       R2,A
   \   0009CF   EF           MOV       A,R7
   \   0009D0   6400         XRL       A,#0x0
   \   0009D2   FB           MOV       R3,A
   \   0009D3   802B         SJMP      ??touchLinkInitiator_event_loop_4
   1088            }
   1089          
   1090            if ( events & TOUCHLINK_TRANS_LIFETIME_EXPIRED_EVT )
   \                     ??touchLinkInitiator_event_loop_55:
   \   0009D5   EE           MOV       A,R6
   \   0009D6   5410         ANL       A,#0x10
   \   0009D8   6022         JZ        ??touchLinkInitiator_event_loop_56
   1091            {
   1092              touchLinkTransID = 0;
   \   0009DA   90....       MOV       DPTR,#touchLinkTransID
   \   0009DD   7400         MOV       A,#0x0
   \   0009DF   F0           MOVX      @DPTR,A
   \   0009E0   A3           INC       DPTR
   \   0009E1   7400         MOV       A,#0x0
   \   0009E3   F0           MOVX      @DPTR,A
   \   0009E4   A3           INC       DPTR
   \   0009E5   7400         MOV       A,#0x0
   \   0009E7   F0           MOVX      @DPTR,A
   \   0009E8   A3           INC       DPTR
   \   0009E9   7400         MOV       A,#0x0
   \   0009EB   F0           MOVX      @DPTR,A
   1093              initiatorClearSelectedTarget();
   \   0009EC                ; Setup parameters for call to function initiatorClearSelectedTarget
   \   0009EC   12....       LCALL     `??initiatorClearSelectedTarget::?relay`; Banked call to: initiatorClearSelectedTarget
   1094              initiatorSetNwkToInitState();
   \   0009EF                ; Setup parameters for call to function initiatorSetNwkToInitState
   \   0009EF   12....       LCALL     `??initiatorSetNwkToInitState::?relay`; Banked call to: initiatorSetNwkToInitState
   1095          
   1096              // return unprocessed events
   1097              return ( events ^ TOUCHLINK_TRANS_LIFETIME_EXPIRED_EVT );
   \   0009F2   EE           MOV       A,R6
   \   0009F3   6410         XRL       A,#0x10
   \   0009F5   FA           MOV       R2,A
   \   0009F6   EF           MOV       A,R7
   \   0009F7   6400         XRL       A,#0x0
   \   0009F9   FB           MOV       R3,A
   \   0009FA   8004         SJMP      ??touchLinkInitiator_event_loop_4
   1098            }
   1099          
   1100            // If reach here, the events are unknown
   1101            // Discard or make more handlers
   1102            return 0;
   \                     ??touchLinkInitiator_event_loop_56:
   \   0009FC   7A00         MOV       R2,#0x0
   \   0009FE   7B00         MOV       R3,#0x0
   \                     ??touchLinkInitiator_event_loop_4:
   \   000A00   7457         MOV       A,#0x57
   \   000A02   12....       LCALL     ?DEALLOC_XSTACK8
   \   000A05   7F0C         MOV       R7,#0xc
   \   000A07   02....       LJMP      ?BANKED_LEAVE_XDATA
   1103          }
   1104          
   1105          /*********************************************************************
   1106           * @fn      touchLinkInitiator_ChannelChange
   1107           *
   1108           * @brief   Change channel to supprot Frequency agility.
   1109           *
   1110           * @param   targetChannel - channel to
   1111           *
   1112           * @return  status
   1113           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1114          ZStatus_t touchLinkInitiator_ChannelChange( uint8 targetChannel )
   \                     touchLinkInitiator_ChannelChange:
   1115          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   1116              uint32 channelMask;
   1117              zAddrType_t dstAddr = {0};
   \   00000C   90....       MOV       DPTR,#`?<Constant {{0}}>`
   \   00000F   AC..         MOV       R4,?XSP + 0
   \   000011   AD..         MOV       R5,?XSP + 1
   \   000013   7409         MOV       A,#0x9
   \   000015   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1118              if ( ( targetChannel < 11 ) || targetChannel > 26 )
   \   000018   EE           MOV       A,R6
   \   000019   C3           CLR       C
   \   00001A   940B         SUBB      A,#0xb
   \   00001C   4006         JC        ??touchLinkInitiator_ChannelChange_0
   \   00001E   EE           MOV       A,R6
   \   00001F   C3           CLR       C
   \   000020   941B         SUBB      A,#0x1b
   \   000022   4058         JC        ??touchLinkInitiator_ChannelChange_1
   1119              {
   1120                if (TOUCHLINK_PRIMARY_CHANNEL (_NIB.nwkLogicalChannel))
   \                     ??touchLinkInitiator_ChannelChange_0:
   \   000024   90....       MOV       DPTR,#_NIB + 22
   \   000027   E0           MOVX      A,@DPTR
   \   000028   640B         XRL       A,#0xb
   \   00002A   6018         JZ        ??touchLinkInitiator_ChannelChange_2
   \   00002C   90....       MOV       DPTR,#_NIB + 22
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   640F         XRL       A,#0xf
   \   000032   6010         JZ        ??touchLinkInitiator_ChannelChange_2
   \   000034   90....       MOV       DPTR,#_NIB + 22
   \   000037   E0           MOVX      A,@DPTR
   \   000038   6414         XRL       A,#0x14
   \   00003A   6008         JZ        ??touchLinkInitiator_ChannelChange_2
   \   00003C   90....       MOV       DPTR,#_NIB + 22
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   6419         XRL       A,#0x19
   \   000042   7026         JNZ       ??touchLinkInitiator_ChannelChange_3
   1121                {
   1122                  switch (_NIB.nwkLogicalChannel)
   \                     ??touchLinkInitiator_ChannelChange_2:
   \   000044   90....       MOV       DPTR,#_NIB + 22
   \   000047   E0           MOVX      A,@DPTR
   \   000048   24F5         ADD       A,#-0xb
   \   00004A   600E         JZ        ??touchLinkInitiator_ChannelChange_4
   \   00004C   24FC         ADD       A,#-0x4
   \   00004E   600E         JZ        ??touchLinkInitiator_ChannelChange_5
   \   000050   24FB         ADD       A,#-0x5
   \   000052   600E         JZ        ??touchLinkInitiator_ChannelChange_6
   \   000054   24FB         ADD       A,#-0x5
   \   000056   600E         JZ        ??touchLinkInitiator_ChannelChange_7
   \   000058   8022         SJMP      ??touchLinkInitiator_ChannelChange_1
   1123                  {
   1124                  case TOUCHLINK_FIRST_CHANNEL:
   1125                    targetChannel = TOUCHLINK_SECOND_CHANNEL;
   \                     ??touchLinkInitiator_ChannelChange_4:
   \   00005A   7E0F         MOV       R6,#0xf
   1126                    break;
   \   00005C   801E         SJMP      ??touchLinkInitiator_ChannelChange_1
   1127                  case TOUCHLINK_SECOND_CHANNEL:
   1128                    targetChannel = TOUCHLINK_THIRD_CHANNEL;
   \                     ??touchLinkInitiator_ChannelChange_5:
   \   00005E   7E14         MOV       R6,#0x14
   1129                    break;
   \   000060   801A         SJMP      ??touchLinkInitiator_ChannelChange_1
   1130                  case TOUCHLINK_THIRD_CHANNEL:
   1131                    targetChannel = TOUCHLINK_FOURTH_CHANNEL;
   \                     ??touchLinkInitiator_ChannelChange_6:
   \   000062   7E19         MOV       R6,#0x19
   1132                    break;
   \   000064   8016         SJMP      ??touchLinkInitiator_ChannelChange_1
   1133                  case TOUCHLINK_FOURTH_CHANNEL:
   1134                    targetChannel = TOUCHLINK_FIRST_CHANNEL;
   \                     ??touchLinkInitiator_ChannelChange_7:
   \   000066   7E0B         MOV       R6,#0xb
   1135                  }
   \   000068   8012         SJMP      ??touchLinkInitiator_ChannelChange_1
   1136                }
   1137                else
   1138                {
   1139                  targetChannel = _NIB.nwkLogicalChannel + 1;
   \                     ??touchLinkInitiator_ChannelChange_3:
   \   00006A   90....       MOV       DPTR,#_NIB + 22
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   2401         ADD       A,#0x1
   \   000070   FE           MOV       R6,A
   1140                  if ( _NIB.nwkLogicalChannel > 26 )
   \   000071   90....       MOV       DPTR,#_NIB + 22
   \   000074   E0           MOVX      A,@DPTR
   \   000075   C3           CLR       C
   \   000076   941B         SUBB      A,#0x1b
   \   000078   4002         JC        ??touchLinkInitiator_ChannelChange_1
   1141                    targetChannel = 11;
   \   00007A   7E0B         MOV       R6,#0xb
   1142                }
   1143              }
   1144          
   1145              dstAddr.addrMode = AddrBroadcast;
   \                     ??touchLinkInitiator_ChannelChange_1:
   \   00007C   7408         MOV       A,#0x8
   \   00007E   12....       LCALL     ?XSTACK_DISP0_8
   \   000081   740F         MOV       A,#0xf
   \   000083   F0           MOVX      @DPTR,A
   1146              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000084   85..82       MOV       DPL,?XSP + 0
   \   000087   85..83       MOV       DPH,?XSP + 1
   \   00008A   74FD         MOV       A,#-0x3
   \   00008C   F0           MOVX      @DPTR,A
   \   00008D   A3           INC       DPTR
   \   00008E   74FF         MOV       A,#-0x1
   \   000090   F0           MOVX      @DPTR,A
   1147              channelMask = (uint32)1 << targetChannel;
   \   000091   75..01       MOV       ?V4,#0x1
   \   000094   75..00       MOV       ?V5,#0x0
   \   000097   75..00       MOV       ?V6,#0x0
   \   00009A   75..00       MOV       ?V7,#0x0
   \   00009D   EE           MOV       A,R6
   \   00009E   78..         MOV       R0,#?V4
   \   0000A0   12....       LCALL     ?L_SHL
   \   0000A3   85....       MOV       ?V0,?V4
   \   0000A6   85....       MOV       ?V1,?V5
   \   0000A9   85....       MOV       ?V2,?V6
   \   0000AC   85....       MOV       ?V3,?V7
   1148          
   1149              // Increment the nwkUpdateId parameter and set the updateID in the beacon
   1150              NLME_SetUpdateID(_NIB.nwkUpdateId + 1);
   \   0000AF                ; Setup parameters for call to function NLME_SetUpdateID
   \   0000AF   90....       MOV       DPTR,#_NIB + 109
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   2401         ADD       A,#0x1
   \   0000B5   F9           MOV       R1,A
   \   0000B6   12....       LCALL     `??NLME_SetUpdateID::?relay`; Banked call to: NLME_SetUpdateID
   1151          
   1152              ZDP_MgmtNwkUpdateReq( &dstAddr, channelMask, 0xfe, 0, _NIB.nwkUpdateId, 0 );
   \   0000B9                ; Setup parameters for call to function ZDP_MgmtNwkUpdateReq
   \   0000B9   E4           CLR       A
   \   0000BA   F5..         MOV       ?V4,A
   \   0000BC   F5..         MOV       ?V5,A
   \   0000BE   78..         MOV       R0,#?V4
   \   0000C0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C3   78..         MOV       R0,#?V0
   \   0000C5   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   0000C8   90....       MOV       DPTR,#_NIB + 109
   \   0000CB   E0           MOVX      A,@DPTR
   \   0000CC   FD           MOV       R5,A
   \   0000CD   7C00         MOV       R4,#0x0
   \   0000CF   79FE         MOV       R1,#-0x2
   \   0000D1   7406         MOV       A,#0x6
   \   0000D3   12....       LCALL     ?XSTACK_DISP101_8
   \   0000D6   12....       LCALL     `??ZDP_MgmtNwkUpdateReq::?relay`; Banked call to: ZDP_MgmtNwkUpdateReq
   \   0000D9   7406         MOV       A,#0x6
   \   0000DB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DE   E9           MOV       A,R1
   1153          
   1154              return ZSuccess;
   \   0000DF   7900         MOV       R1,#0x0
   \   0000E1   7409         MOV       A,#0x9
   \   0000E3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E6   7F08         MOV       R7,#0x8
   \   0000E8   02....       LJMP      ?BANKED_LEAVE_XDATA
   1155          }

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {{0}}>`:
   \   000000   0000         DW 0
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    
   \   000008   00           DB 0
   1156          
   1157          /*********************************************************************
   1158           * @fn      touchLinkSampleRemote_SendEPInfo
   1159           *
   1160           * @brief   Send Endpoint info command.
   1161           *
   1162           * @param   srcEP - source endpoint
   1163           * @param   dstAddr - destination address
   1164           * @param   seqNum - transaction sequnece number
   1165           *
   1166           * @return  ZStatus_t
   1167           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1168          ZStatus_t touchLinkInitiator_SendEPInfo( uint8 srcEP, afAddrType_t *dstAddr, uint8 seqNum)
   \                     touchLinkInitiator_SendEPInfo:
   1169          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV       A,#-0x17
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   \   000010   8C..         MOV       ?V1,R4
   1170              bdbTLEndpointInfo_t bdbTLEndpointInfoCmd;
   1171              bdbTLDeviceInfo_t  bdbTLDeviceInfo;
   1172                //send Epinfo cmd
   1173              touchLink_GetSubDeviceInfo( 0, &bdbTLDeviceInfo );
   \   000012                ; Setup parameters for call to function touchLink_GetSubDeviceInfo
   \   000012   AA..         MOV       R2,?XSP + 0
   \   000014   AB..         MOV       R3,?XSP + 1
   \   000016   7900         MOV       R1,#0x0
   \   000018   12....       LCALL     `??touchLink_GetSubDeviceInfo::?relay`; Banked call to: touchLink_GetSubDeviceInfo
   1174              bdbTLEndpointInfoCmd.endpoint = bdbTLDeviceInfo.endpoint;
   \   00001B   85..82       MOV       DPL,?XSP + 0
   \   00001E   85..83       MOV       DPH,?XSP + 1
   \   000021   E0           MOVX      A,@DPTR
   \   000022   C0E0         PUSH      A
   \   000024   7411         MOV       A,#0x11
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   D0E0         POP       A
   \   00002B   F0           MOVX      @DPTR,A
   1175              bdbTLEndpointInfoCmd.profileID = bdbTLDeviceInfo.profileID;
   \   00002C   7401         MOV       A,#0x1
   \   00002E   12....       LCALL     ?XSTACK_DISP0_8
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F8           MOV       R0,A
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F9           MOV       R1,A
   \   000036   7412         MOV       A,#0x12
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   E8           MOV       A,R0
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   E9           MOV       A,R1
   \   00003F   F0           MOVX      @DPTR,A
   1176              bdbTLEndpointInfoCmd.deviceID = bdbTLDeviceInfo.deviceID;
   \   000040   7403         MOV       A,#0x3
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F8           MOV       R0,A
   \   000047   A3           INC       DPTR
   \   000048   E0           MOVX      A,@DPTR
   \   000049   F9           MOV       R1,A
   \   00004A   7414         MOV       A,#0x14
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   E8           MOV       A,R0
   \   000050   F0           MOVX      @DPTR,A
   \   000051   A3           INC       DPTR
   \   000052   E9           MOV       A,R1
   \   000053   F0           MOVX      @DPTR,A
   1177              bdbTLEndpointInfoCmd.version = bdbTLDeviceInfo.version;
   \   000054   7405         MOV       A,#0x5
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   C0E0         PUSH      A
   \   00005C   7416         MOV       A,#0x16
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   D0E0         POP       A
   \   000063   F0           MOVX      @DPTR,A
   1178          
   1179              osal_cpyExtAddr( bdbTLEndpointInfoCmd.ieeeAddr, NLME_GetExtAddr() );
   \   000064                ; Setup parameters for call to function NLME_GetExtAddr
   \   000064   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000067   8A..         MOV       ?V2,R2
   \   000069   8B..         MOV       ?V3,R3
   \   00006B   AC..         MOV       R4,?V2
   \   00006D   AD..         MOV       R5,?V3
   \   00006F                ; Setup parameters for call to function sAddrExtCpy
   \   00006F   7407         MOV       A,#0x7
   \   000071   12....       LCALL     ?XSTACK_DISP101_8
   \   000074   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1180              bdbTLEndpointInfoCmd.nwkAddr = NLME_GetShortAddr();
   \   000077                ; Setup parameters for call to function NLME_GetShortAddr
   \   000077   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00007A   740F         MOV       A,#0xf
   \   00007C   12....       LCALL     ?XSTACK_DISP0_8
   \   00007F   EA           MOV       A,R2
   \   000080   F0           MOVX      @DPTR,A
   \   000081   A3           INC       DPTR
   \   000082   EB           MOV       A,R3
   \   000083   F0           MOVX      @DPTR,A
   1181          
   1182              dstAddr->panId = _NIB.nwkPanId;
   \   000084   90....       MOV       DPTR,#_NIB + 33
   \   000087   E0           MOVX      A,@DPTR
   \   000088   F8           MOV       R0,A
   \   000089   A3           INC       DPTR
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   F9           MOV       R1,A
   \   00008C   8E82         MOV       DPL,R6
   \   00008E   8F83         MOV       DPH,R7
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   E8           MOV       A,R0
   \   00009B   F0           MOVX      @DPTR,A
   \   00009C   A3           INC       DPTR
   \   00009D   E9           MOV       A,R1
   \   00009E   F0           MOVX      @DPTR,A
   1183              return bdbTL_Send_EndpointInfo( srcEP, dstAddr, &bdbTLEndpointInfoCmd,
   1184                                                    0, seqNum );
   \   00009F                ; Setup parameters for call to function bdbTL_Send_EndpointInfo
   \   00009F   E5..         MOV       A,?V1
   \   0000A1   F5..         MOV       ?V2,A
   \   0000A3   78..         MOV       R0,#?V2
   \   0000A5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A8   75..00       MOV       ?V2,#0x0
   \   0000AB   78..         MOV       R0,#?V2
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B0   7409         MOV       A,#0x9
   \   0000B2   12....       LCALL     ?XSTACK_DISP102_8
   \   0000B5   EE           MOV       A,R6
   \   0000B6   FA           MOV       R2,A
   \   0000B7   EF           MOV       A,R7
   \   0000B8   FB           MOV       R3,A
   \   0000B9   A9..         MOV       R1,?V0
   \   0000BB   12....       LCALL     `??bdbTL_Send_EndpointInfo::?relay`; Banked call to: bdbTL_Send_EndpointInfo
   \   0000BE   7402         MOV       A,#0x2
   \   0000C0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C3   7417         MOV       A,#0x17
   \   0000C5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C8   7F04         MOV       R7,#0x4
   \   0000CA   02....       LJMP      ?BANKED_LEAVE_XDATA
   1185          }
   1186          
   1187          /*********************************************************************
   1188           * @fn      touchLinkInitiator_ResetToFNSelectedTarget
   1189           *
   1190           * @brief   Send Reset to Factory New Request command to the selected
   1191           *          target of the current Touch-Link transaction.
   1192           *          Note - this function should be called within no later than
   1193           *          BDBCTL_INTER_PAN_TRANS_ID_LIFETIME ms from the Scan Request.
   1194           *
   1195           * @param   none
   1196           *
   1197           * @return  status - failure is returned due to invalid selected target or
   1198           *          expired Touch-Link transaction.
   1199           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1200          ZStatus_t touchLinkInitiator_ResetToFNSelectedTarget( void )
   \                     touchLinkInitiator_ResetToFNSelectedTarget:
   1201          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1202            bdbTLResetToFNReq_t req;
   1203            req.transID = touchLinkTransID;
   \   00000A   90....       MOV       DPTR,#touchLinkTransID
   \   00000D   12....       LCALL     ?XLOAD_R0123
   \   000010   85..82       MOV       DPL,?XSP + 0
   \   000013   85..83       MOV       DPH,?XSP + 1
   \   000016   12....       LCALL     ?XSTORE_R0123
   1204          
   1205            // Cancel further touch-link commissioning (if called during identify interval)
   1206            osal_stop_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_CFG_TARGET_EVT );
   \   000019                ; Setup parameters for call to function osal_stop_timerEx
   \   000019   7A40         MOV       R2,#0x40
   \   00001B   7B00         MOV       R3,#0x0
   \   00001D   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F9           MOV       R1,A
   \   000022   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000025   E9           MOV       A,R1
   1207          
   1208            touchLink_SetChannel( selectedTarget.rxChannel );
   \   000026                ; Setup parameters for call to function touchLink_SetChannel
   \   000026   90....       MOV       DPTR,#selectedTarget + 52
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F9           MOV       R1,A
   \   00002B   12....       LCALL     `??touchLink_SetChannel::?relay`; Banked call to: touchLink_SetChannel
   1209            return bdbTL_Send_ResetToFNReq( TOUCHLINK_INTERNAL_ENDPOINT, &(selectedTarget.srcAddr), &req, initiatorSeqNum++ );
   \   00002E   90....       MOV       DPTR,#initiatorSeqNum
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F8           MOV       R0,A
   \   000033   7401         MOV       A,#0x1
   \   000035   28           ADD       A,R0
   \   000036   90....       MOV       DPTR,#initiatorSeqNum
   \   000039   F0           MOVX      @DPTR,A
   \   00003A                ; Setup parameters for call to function bdbTL_Send_ResetToFNReq
   \   00003A   E8           MOV       A,R0
   \   00003B   F5..         MOV       ?V0,A
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000042   7401         MOV       A,#0x1
   \   000044   12....       LCALL     ?XSTACK_DISP102_8
   \   000047   7A..         MOV       R2,#(selectedTarget + 38) & 0xff
   \   000049   7B..         MOV       R3,#((selectedTarget + 38) >> 8) & 0xff
   \   00004B   790D         MOV       R1,#0xd
   \   00004D   12....       LCALL     `??bdbTL_Send_ResetToFNReq::?relay`; Banked call to: bdbTL_Send_ResetToFNReq
   \   000050   7401         MOV       A,#0x1
   \   000052   12....       LCALL     ?DEALLOC_XSTACK8
   \   000055   7404         MOV       A,#0x4
   \   000057   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005A   7F01         MOV       R7,#0x1
   \   00005C   02....       LJMP      ?BANKED_LEAVE_XDATA
   1210          }
   1211          
   1212          /*********************************************************************
   1213           * @fn      touchLink_InitiatorSendScanRsp
   1214           *
   1215           * @brief   Send out a Scan Response command.
   1216           *
   1217           * @param   srcEP - sender's endpoint
   1218           * @param   dstAddr - pointer to destination address struct
   1219           * @param   transID - received transaction id
   1220           * @param   seqNum - received sequence number
   1221           *
   1222           * @return  ZStatus_t
   1223           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1224          static ZStatus_t touchLink_InitiatorSendScanRsp( uint8 srcEP, afAddrType_t *dstAddr, uint32 transID, uint8 seqNum )
   \                     touchLink_InitiatorSendScanRsp:
   1225          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000   74E9         MOV       A,#-0x17
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EA           MOV       A,R2
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   EB           MOV       A,R3
   \   000014   F0           MOVX      @DPTR,A
   \   000015   89..         MOV       ?V13,R1
   \   000017   8C..         MOV       ?V14,R4
   \   000019   7419         MOV       A,#0x19
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   78..         MOV       R0,#?V4
   \   000020   12....       LCALL     ?L_MOV_X
   1226            ZStatus_t status = ZSuccess;
   \   000023   75..00       MOV       ?V12,#0x0
   1227          
   1228            // Make sure we respond only once during a Device Discovery
   1229            if ( touchLinkLastAcceptedTransID != transID )
   \   000026   90....       MOV       DPTR,#touchLinkLastAcceptedTransID
   \   000029   78..         MOV       R0,#?V4
   \   00002B   12....       LCALL     ?L_EQ_X
   \   00002E   7003         JNZ       $+5
   \   000030   02....       LJMP      ??touchLink_InitiatorSendScanRsp_0 & 0xFFFF
   1230            {
   1231              bdbTLScanRsp_t *pRsp;    
   1232          
   1233              pRsp = (bdbTLScanRsp_t *)osal_mem_alloc( sizeof( bdbTLScanRsp_t ) );
   \   000033                ; Setup parameters for call to function osal_mem_alloc
   \   000033   7A26         MOV       R2,#0x26
   \   000035   7B00         MOV       R3,#0x0
   \   000037   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003A   8A..         MOV       ?V0,R2
   \   00003C   8B..         MOV       ?V1,R3
   \   00003E   AE..         MOV       R6,?V0
   \   000040   AF..         MOV       R7,?V1
   1234              if ( pRsp )
   \   000042   EE           MOV       A,R6
   \   000043   4F           ORL       A,R7
   \   000044   7003         JNZ       $+5
   \   000046   02....       LJMP      ??touchLink_InitiatorSendScanRsp_1 & 0xFFFF
   1235              {
   1236                osal_memset( pRsp, 0, sizeof( bdbTLScanRsp_t ) );
   \   000049                ; Setup parameters for call to function osal_memset
   \   000049   7C26         MOV       R4,#0x26
   \   00004B   7D00         MOV       R5,#0x0
   \   00004D   7900         MOV       R1,#0x0
   \   00004F   EE           MOV       A,R6
   \   000050   FA           MOV       R2,A
   \   000051   EF           MOV       A,R7
   \   000052   FB           MOV       R3,A
   \   000053   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1237          
   1238                // Save transaction id
   1239                touchLinkLastAcceptedTransID = transID;
   \   000056   90....       MOV       DPTR,#touchLinkLastAcceptedTransID
   \   000059   78..         MOV       R0,#?V4
   \   00005B   12....       LCALL     ?L_MOV_TO_X
   1240                osal_start_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_TRANS_LIFETIME_EXPIRED_EVT,
   1241                                    BDBCTL_INTER_PAN_TRANS_ID_LIFETIME );
   \   00005E                ; Setup parameters for call to function osal_start_timerEx
   \   00005E   90....       MOV       DPTR,#__Constant_1f40
   \   000061   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000064   7A10         MOV       R2,#0x10
   \   000066   7B00         MOV       R3,#0x0
   \   000068   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   F9           MOV       R1,A
   \   00006D   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000070   7404         MOV       A,#0x4
   \   000072   12....       LCALL     ?DEALLOC_XSTACK8
   \   000075   E9           MOV       A,R1
   1242          
   1243                pRsp->transID = transID;
   \   000076   8E82         MOV       DPL,R6
   \   000078   8F83         MOV       DPH,R7
   \   00007A   78..         MOV       R0,#?V4
   \   00007C   12....       LCALL     ?L_MOV_TO_X
   1244                pRsp->rssiCorrection = TOUCHLINK_RSSI_CORRECTION;
   \   00007F   8E82         MOV       DPL,R6
   \   000081   8F83         MOV       DPH,R7
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   7400         MOV       A,#0x0
   \   000089   F0           MOVX      @DPTR,A
   1245                pRsp->zLogicalType = zgDeviceLogicalType;
   \   00008A   8E82         MOV       DPL,R6
   \   00008C   8F83         MOV       DPH,R7
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   E0           MOVX      A,@DPTR
   \   000094   54FC         ANL       A,#0xfc
   \   000096   F8           MOV       R0,A
   \   000097   A3           INC       DPTR
   \   000098   E0           MOVX      A,@DPTR
   \   000099   54FF         ANL       A,#0xff
   \   00009B   F9           MOV       R1,A
   \   00009C   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   FA           MOV       R2,A
   \   0000A1   7B00         MOV       R3,#0x0
   \   0000A3   EA           MOV       A,R2
   \   0000A4   5403         ANL       A,#0x3
   \   0000A6   FA           MOV       R2,A
   \   0000A7   EB           MOV       A,R3
   \   0000A8   5400         ANL       A,#0x0
   \   0000AA   FB           MOV       R3,A
   \   0000AB   E8           MOV       A,R0
   \   0000AC   4A           ORL       A,R2
   \   0000AD   F8           MOV       R0,A
   \   0000AE   E9           MOV       A,R1
   \   0000AF   4B           ORL       A,R3
   \   0000B0   F9           MOV       R1,A
   \   0000B1   8E82         MOV       DPL,R6
   \   0000B3   8F83         MOV       DPH,R7
   \   0000B5   A3           INC       DPTR
   \   0000B6   A3           INC       DPTR
   \   0000B7   A3           INC       DPTR
   \   0000B8   A3           INC       DPTR
   \   0000B9   A3           INC       DPTR
   \   0000BA   E8           MOV       A,R0
   \   0000BB   F0           MOVX      @DPTR,A
   \   0000BC   A3           INC       DPTR
   \   0000BD   E9           MOV       A,R1
   \   0000BE   F0           MOVX      @DPTR,A
   1246                pRsp->touchLinkAddressAssignment = touchLink_IsValidSplitFreeRanges( 0 );
   \   0000BF                ; Setup parameters for call to function touchLink_IsValidSplitFreeRanges
   \   0000BF   7900         MOV       R1,#0x0
   \   0000C1   12....       LCALL     `??touchLink_IsValidSplitFreeRanges::?relay`; Banked call to: touchLink_IsValidSplitFreeRanges
   \   0000C4   E9           MOV       A,R1
   \   0000C5   F8           MOV       R0,A
   \   0000C6   8E82         MOV       DPL,R6
   \   0000C8   8F83         MOV       DPH,R7
   \   0000CA   A3           INC       DPTR
   \   0000CB   A3           INC       DPTR
   \   0000CC   A3           INC       DPTR
   \   0000CD   A3           INC       DPTR
   \   0000CE   A3           INC       DPTR
   \   0000CF   A3           INC       DPTR
   \   0000D0   A3           INC       DPTR
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   54FD         ANL       A,#0xfd
   \   0000D4   F0           MOVX      @DPTR,A
   \   0000D5   A3           INC       DPTR
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   54FF         ANL       A,#0xff
   \   0000D9   F0           MOVX      @DPTR,A
   \   0000DA   E8           MOV       A,R0
   \   0000DB   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000DD   E4           CLR       A
   \   0000DE   33           RLC       A
   \   0000DF   F8           MOV       R0,A
   \   0000E0   7900         MOV       R1,#0x0
   \   0000E2   E8           MOV       A,R0
   \   0000E3   28           ADD       A,R0
   \   0000E4   F8           MOV       R0,A
   \   0000E5   E9           MOV       A,R1
   \   0000E6   33           RLC       A
   \   0000E7   F9           MOV       R1,A
   \   0000E8   E8           MOV       A,R0
   \   0000E9   5402         ANL       A,#0x2
   \   0000EB   F8           MOV       R0,A
   \   0000EC   E9           MOV       A,R1
   \   0000ED   5400         ANL       A,#0x0
   \   0000EF   F9           MOV       R1,A
   \   0000F0   8E82         MOV       DPL,R6
   \   0000F2   8F83         MOV       DPH,R7
   \   0000F4   A3           INC       DPTR
   \   0000F5   A3           INC       DPTR
   \   0000F6   A3           INC       DPTR
   \   0000F7   A3           INC       DPTR
   \   0000F8   A3           INC       DPTR
   \   0000F9   A3           INC       DPTR
   \   0000FA   A3           INC       DPTR
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   48           ORL       A,R0
   \   0000FD   F0           MOVX      @DPTR,A
   \   0000FE   A3           INC       DPTR
   \   0000FF   E0           MOVX      A,@DPTR
   \   000100   49           ORL       A,R1
   \   000101   F0           MOVX      @DPTR,A
   1247                pRsp->touchLinkInitiator = TRUE;
   \   000102   8E82         MOV       DPL,R6
   \   000104   8F83         MOV       DPH,R7
   \   000106   A3           INC       DPTR
   \   000107   A3           INC       DPTR
   \   000108   A3           INC       DPTR
   \   000109   A3           INC       DPTR
   \   00010A   A3           INC       DPTR
   \   00010B   A3           INC       DPTR
   \   00010C   A3           INC       DPTR
   \   00010D   E0           MOVX      A,@DPTR
   \   00010E   4410         ORL       A,#0x10
   \   000110   F0           MOVX      @DPTR,A
   \   000111   A3           INC       DPTR
   \   000112   E0           MOVX      A,@DPTR
   \   000113   4400         ORL       A,#0x0
   \   000115   F0           MOVX      @DPTR,A
   1248                pRsp->touchLinkProfileInterop = TRUE;
   \   000116   8E82         MOV       DPL,R6
   \   000118   8F83         MOV       DPH,R7
   \   00011A   A3           INC       DPTR
   \   00011B   A3           INC       DPTR
   \   00011C   A3           INC       DPTR
   \   00011D   A3           INC       DPTR
   \   00011E   A3           INC       DPTR
   \   00011F   A3           INC       DPTR
   \   000120   A3           INC       DPTR
   \   000121   E0           MOVX      A,@DPTR
   \   000122   4480         ORL       A,#0x80
   \   000124   F0           MOVX      @DPTR,A
   \   000125   A3           INC       DPTR
   \   000126   E0           MOVX      A,@DPTR
   \   000127   4400         ORL       A,#0x0
   \   000129   F0           MOVX      @DPTR,A
   1249          
   1250                if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \   00012A   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00012D   E0           MOVX      A,@DPTR
   \   00012E   A2E3         MOV       C,0xE0 /* A   */.3
   \   000130   5012         JNC       ??touchLink_InitiatorSendScanRsp_2
   1251                {
   1252                  pRsp->zRxOnWhenIdle = TRUE;
   \   000132   8E82         MOV       DPL,R6
   \   000134   8F83         MOV       DPH,R7
   \   000136   A3           INC       DPTR
   \   000137   A3           INC       DPTR
   \   000138   A3           INC       DPTR
   \   000139   A3           INC       DPTR
   \   00013A   A3           INC       DPTR
   \   00013B   E0           MOVX      A,@DPTR
   \   00013C   4404         ORL       A,#0x4
   \   00013E   F0           MOVX      @DPTR,A
   \   00013F   A3           INC       DPTR
   \   000140   E0           MOVX      A,@DPTR
   \   000141   4400         ORL       A,#0x0
   \   000143   F0           MOVX      @DPTR,A
   1253                }
   1254          
   1255                pRsp->touchLinklinkPriority = FALSE;
   \                     ??touchLink_InitiatorSendScanRsp_2:
   \   000144   8E82         MOV       DPL,R6
   \   000146   8F83         MOV       DPH,R7
   \   000148   A3           INC       DPTR
   \   000149   A3           INC       DPTR
   \   00014A   A3           INC       DPTR
   \   00014B   A3           INC       DPTR
   \   00014C   A3           INC       DPTR
   \   00014D   A3           INC       DPTR
   \   00014E   A3           INC       DPTR
   \   00014F   E0           MOVX      A,@DPTR
   \   000150   54DF         ANL       A,#0xdf
   \   000152   F0           MOVX      @DPTR,A
   \   000153   A3           INC       DPTR
   \   000154   E0           MOVX      A,@DPTR
   \   000155   54FF         ANL       A,#0xff
   \   000157   F0           MOVX      @DPTR,A
   1256                pRsp->keyBitmask = touchLink_GetNwkKeyBitmask();
   \   000158                ; Setup parameters for call to function touchLink_GetNwkKeyBitmask
   \   000158   12....       LCALL     `??touchLink_GetNwkKeyBitmask::?relay`; Banked call to: touchLink_GetNwkKeyBitmask
   \   00015B   8E82         MOV       DPL,R6
   \   00015D   8F83         MOV       DPH,R7
   \   00015F   A3           INC       DPTR
   \   000160   A3           INC       DPTR
   \   000161   A3           INC       DPTR
   \   000162   A3           INC       DPTR
   \   000163   A3           INC       DPTR
   \   000164   A3           INC       DPTR
   \   000165   A3           INC       DPTR
   \   000166   A3           INC       DPTR
   \   000167   A3           INC       DPTR
   \   000168   EA           MOV       A,R2
   \   000169   F0           MOVX      @DPTR,A
   \   00016A   A3           INC       DPTR
   \   00016B   EB           MOV       A,R3
   \   00016C   F0           MOVX      @DPTR,A
   1257          
   1258                // Generate a new Response ID
   1259                touchLinkResponseID = ( ((uint32)osal_rand()) << 16 ) + osal_rand();
   \   00016D                ; Setup parameters for call to function osal_rand
   \   00016D   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000170   8A..         MOV       ?V0,R2
   \   000172   8B..         MOV       ?V1,R3
   \   000174   85....       MOV       ?V8,?V0
   \   000177   85....       MOV       ?V9,?V1
   \   00017A   E4           CLR       A
   \   00017B   F5..         MOV       ?V10,A
   \   00017D   F5..         MOV       ?V11,A
   \   00017F   7410         MOV       A,#0x10
   \   000181   78..         MOV       R0,#?V8
   \   000183   12....       LCALL     ?L_SHL
   \   000186                ; Setup parameters for call to function osal_rand
   \   000186   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000189   8A..         MOV       ?V0,R2
   \   00018B   8B..         MOV       ?V1,R3
   \   00018D   E4           CLR       A
   \   00018E   F5..         MOV       ?V2,A
   \   000190   F5..         MOV       ?V3,A
   \   000192   78..         MOV       R0,#?V8
   \   000194   79..         MOV       R1,#?V0
   \   000196   12....       LCALL     ?L_ADD
   \   000199   85....       MOV       ?V0,?V8
   \   00019C   85....       MOV       ?V1,?V9
   \   00019F   85....       MOV       ?V2,?V10
   \   0001A2   85....       MOV       ?V3,?V11
   \   0001A5   90....       MOV       DPTR,#touchLinkResponseID
   \   0001A8   78..         MOV       R0,#?V0
   \   0001AA   12....       LCALL     ?L_MOV_TO_X
   1260                pRsp->responseID = touchLinkResponseID;
   \   0001AD   90....       MOV       DPTR,#touchLinkResponseID
   \   0001B0   12....       LCALL     ?XLOAD_R0123
   \   0001B3   EE           MOV       A,R6
   \   0001B4   240B         ADD       A,#0xb
   \   0001B6   F582         MOV       DPL,A
   \   0001B8   E4           CLR       A
   \   0001B9   3F           ADDC      A,R7
   \   0001BA   F583         MOV       DPH,A
   \   0001BC   12....       LCALL     ?XSTORE_R0123
   1261          
   1262                pRsp->touchLinkFactoryNew = !bdbAttributes.bdbNodeIsOnANetwork;
   \   0001BF   90....       MOV       DPTR,#bdbAttributes + 14
   \   0001C2   E0           MOVX      A,@DPTR
   \   0001C3   7004         JNZ       ??touchLink_InitiatorSendScanRsp_3
   \   0001C5   D2F0         SETB      B.0
   \   0001C7   8002         SJMP      ??touchLink_InitiatorSendScanRsp_4
   \                     ??touchLink_InitiatorSendScanRsp_3:
   \   0001C9   C2F0         CLR       B.0
   \                     ??touchLink_InitiatorSendScanRsp_4:
   \   0001CB   8E82         MOV       DPL,R6
   \   0001CD   8F83         MOV       DPH,R7
   \   0001CF   A3           INC       DPTR
   \   0001D0   A3           INC       DPTR
   \   0001D1   A3           INC       DPTR
   \   0001D2   A3           INC       DPTR
   \   0001D3   A3           INC       DPTR
   \   0001D4   A3           INC       DPTR
   \   0001D5   A3           INC       DPTR
   \   0001D6   E0           MOVX      A,@DPTR
   \   0001D7   54FE         ANL       A,#0xfe
   \   0001D9   F0           MOVX      @DPTR,A
   \   0001DA   A3           INC       DPTR
   \   0001DB   E0           MOVX      A,@DPTR
   \   0001DC   54FF         ANL       A,#0xff
   \   0001DE   F0           MOVX      @DPTR,A
   \   0001DF   A2F0         MOV       C,B.0
   \   0001E1   E4           CLR       A
   \   0001E2   33           RLC       A
   \   0001E3   F8           MOV       R0,A
   \   0001E4   7900         MOV       R1,#0x0
   \   0001E6   8E82         MOV       DPL,R6
   \   0001E8   8F83         MOV       DPH,R7
   \   0001EA   A3           INC       DPTR
   \   0001EB   A3           INC       DPTR
   \   0001EC   A3           INC       DPTR
   \   0001ED   A3           INC       DPTR
   \   0001EE   A3           INC       DPTR
   \   0001EF   A3           INC       DPTR
   \   0001F0   A3           INC       DPTR
   \   0001F1   E0           MOVX      A,@DPTR
   \   0001F2   48           ORL       A,R0
   \   0001F3   F0           MOVX      @DPTR,A
   \   0001F4   A3           INC       DPTR
   \   0001F5   E0           MOVX      A,@DPTR
   \   0001F6   49           ORL       A,R1
   \   0001F7   F0           MOVX      @DPTR,A
   1263                if ( pRsp->touchLinkFactoryNew )
   \   0001F8   8E82         MOV       DPL,R6
   \   0001FA   8F83         MOV       DPH,R7
   \   0001FC   A3           INC       DPTR
   \   0001FD   A3           INC       DPTR
   \   0001FE   A3           INC       DPTR
   \   0001FF   A3           INC       DPTR
   \   000200   A3           INC       DPTR
   \   000201   A3           INC       DPTR
   \   000202   A3           INC       DPTR
   \   000203   E0           MOVX      A,@DPTR
   \   000204   5401         ANL       A,#0x1
   \   000206   F8           MOV       R0,A
   \   000207   A3           INC       DPTR
   \   000208   E0           MOVX      A,@DPTR
   \   000209   5400         ANL       A,#0x0
   \   00020B   F9           MOV       R1,A
   \   00020C   E8           MOV       A,R0
   \   00020D   A2E0         MOV       C,0xE0 /* A   */.0
   \   00020F   501E         JNC       ??touchLink_InitiatorSendScanRsp_5
   1264                {
   1265                  pRsp->nwkAddr = 0xFFFF;
   \   000211   EE           MOV       A,R6
   \   000212   241B         ADD       A,#0x1b
   \   000214   F582         MOV       DPL,A
   \   000216   E4           CLR       A
   \   000217   3F           ADDC      A,R7
   \   000218   F583         MOV       DPH,A
   \   00021A   74FF         MOV       A,#-0x1
   \   00021C   F0           MOVX      @DPTR,A
   \   00021D   A3           INC       DPTR
   \   00021E   74FF         MOV       A,#-0x1
   \   000220   F0           MOVX      @DPTR,A
   1266                  pRsp->nwkUpdateId = 0;
   \   000221   EE           MOV       A,R6
   \   000222   2417         ADD       A,#0x17
   \   000224   F582         MOV       DPL,A
   \   000226   E4           CLR       A
   \   000227   3F           ADDC      A,R7
   \   000228   F583         MOV       DPH,A
   \   00022A   7400         MOV       A,#0x0
   \   00022C   F0           MOVX      @DPTR,A
   \   00022D   8028         SJMP      ??touchLink_InitiatorSendScanRsp_6
   1267                }
   1268                else
   1269                {
   1270                  pRsp->nwkAddr = _NIB.nwkDevAddress;
   \                     ??touchLink_InitiatorSendScanRsp_5:
   \   00022F   90....       MOV       DPTR,#_NIB + 20
   \   000232   E0           MOVX      A,@DPTR
   \   000233   F8           MOV       R0,A
   \   000234   A3           INC       DPTR
   \   000235   E0           MOVX      A,@DPTR
   \   000236   F9           MOV       R1,A
   \   000237   EE           MOV       A,R6
   \   000238   241B         ADD       A,#0x1b
   \   00023A   F582         MOV       DPL,A
   \   00023C   E4           CLR       A
   \   00023D   3F           ADDC      A,R7
   \   00023E   F583         MOV       DPH,A
   \   000240   E8           MOV       A,R0
   \   000241   F0           MOVX      @DPTR,A
   \   000242   A3           INC       DPTR
   \   000243   E9           MOV       A,R1
   \   000244   F0           MOVX      @DPTR,A
   1271                  pRsp->nwkUpdateId = _NIB.nwkUpdateId;
   \   000245   90....       MOV       DPTR,#_NIB + 109
   \   000248   E0           MOVX      A,@DPTR
   \   000249   C0E0         PUSH      A
   \   00024B   EE           MOV       A,R6
   \   00024C   2417         ADD       A,#0x17
   \   00024E   F582         MOV       DPL,A
   \   000250   E4           CLR       A
   \   000251   3F           ADDC      A,R7
   \   000252   F583         MOV       DPH,A
   \   000254   D0E0         POP       A
   \   000256   F0           MOVX      @DPTR,A
   1272                }
   1273                pRsp->PANID = _NIB.nwkPanId;
   \                     ??touchLink_InitiatorSendScanRsp_6:
   \   000257   90....       MOV       DPTR,#_NIB + 33
   \   00025A   E0           MOVX      A,@DPTR
   \   00025B   F8           MOV       R0,A
   \   00025C   A3           INC       DPTR
   \   00025D   E0           MOVX      A,@DPTR
   \   00025E   F9           MOV       R1,A
   \   00025F   EE           MOV       A,R6
   \   000260   2419         ADD       A,#0x19
   \   000262   F582         MOV       DPL,A
   \   000264   E4           CLR       A
   \   000265   3F           ADDC      A,R7
   \   000266   F583         MOV       DPH,A
   \   000268   E8           MOV       A,R0
   \   000269   F0           MOVX      @DPTR,A
   \   00026A   A3           INC       DPTR
   \   00026B   E9           MOV       A,R1
   \   00026C   F0           MOVX      @DPTR,A
   1274                pRsp->logicalChannel = _NIB.nwkLogicalChannel;
   \   00026D   90....       MOV       DPTR,#_NIB + 22
   \   000270   E0           MOVX      A,@DPTR
   \   000271   C0E0         PUSH      A
   \   000273   EE           MOV       A,R6
   \   000274   2418         ADD       A,#0x18
   \   000276   F582         MOV       DPL,A
   \   000278   E4           CLR       A
   \   000279   3F           ADDC      A,R7
   \   00027A   F583         MOV       DPH,A
   \   00027C   D0E0         POP       A
   \   00027E   F0           MOVX      @DPTR,A
   1275                osal_cpyExtAddr( pRsp->extendedPANID, _NIB.extendedPANID );
   \   00027F                ; Setup parameters for call to function sAddrExtCpy
   \   00027F   7C..         MOV       R4,#(_NIB + 53) & 0xff
   \   000281   7D..         MOV       R5,#((_NIB + 53) >> 8) & 0xff
   \   000283   EE           MOV       A,R6
   \   000284   240F         ADD       A,#0xf
   \   000286   FA           MOV       R2,A
   \   000287   E4           CLR       A
   \   000288   3F           ADDC      A,R7
   \   000289   FB           MOV       R3,A
   \   00028A   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1276          
   1277                pRsp->numSubDevices = touchLink_GetNumSubDevices( 0 );
   \   00028D                ; Setup parameters for call to function touchLink_GetNumSubDevices
   \   00028D   7900         MOV       R1,#0x0
   \   00028F   12....       LCALL     `??touchLink_GetNumSubDevices::?relay`; Banked call to: touchLink_GetNumSubDevices
   \   000292   E9           MOV       A,R1
   \   000293   C0E0         PUSH      A
   \   000295   EE           MOV       A,R6
   \   000296   241D         ADD       A,#0x1d
   \   000298   F582         MOV       DPL,A
   \   00029A   E4           CLR       A
   \   00029B   3F           ADDC      A,R7
   \   00029C   F583         MOV       DPH,A
   \   00029E   D0E0         POP       A
   \   0002A0   F0           MOVX      @DPTR,A
   1278                if ( pRsp->numSubDevices == 1 )
   \   0002A1   EE           MOV       A,R6
   \   0002A2   241D         ADD       A,#0x1d
   \   0002A4   F582         MOV       DPL,A
   \   0002A6   E4           CLR       A
   \   0002A7   3F           ADDC      A,R7
   \   0002A8   F583         MOV       DPH,A
   \   0002AA   E0           MOVX      A,@DPTR
   \   0002AB   6401         XRL       A,#0x1
   \   0002AD   700C         JNZ       ??touchLink_InitiatorSendScanRsp_7
   1279                {
   1280                  touchLink_GetSubDeviceInfo( 0, &(pRsp->deviceInfo) );
   \   0002AF                ; Setup parameters for call to function touchLink_GetSubDeviceInfo
   \   0002AF   EE           MOV       A,R6
   \   0002B0   241F         ADD       A,#0x1f
   \   0002B2   FA           MOV       R2,A
   \   0002B3   E4           CLR       A
   \   0002B4   3F           ADDC      A,R7
   \   0002B5   FB           MOV       R3,A
   \   0002B6   7900         MOV       R1,#0x0
   \   0002B8   12....       LCALL     `??touchLink_GetSubDeviceInfo::?relay`; Banked call to: touchLink_GetSubDeviceInfo
   1281                }
   1282          
   1283                pRsp->totalGrpIDs = touchLink_GetNumGrpIDs();
   \                     ??touchLink_InitiatorSendScanRsp_7:
   \   0002BB                ; Setup parameters for call to function touchLink_GetNumGrpIDs
   \   0002BB   12....       LCALL     `??touchLink_GetNumGrpIDs::?relay`; Banked call to: touchLink_GetNumGrpIDs
   \   0002BE   E9           MOV       A,R1
   \   0002BF   C0E0         PUSH      A
   \   0002C1   EE           MOV       A,R6
   \   0002C2   241E         ADD       A,#0x1e
   \   0002C4   F582         MOV       DPL,A
   \   0002C6   E4           CLR       A
   \   0002C7   3F           ADDC      A,R7
   \   0002C8   F583         MOV       DPH,A
   \   0002CA   D0E0         POP       A
   \   0002CC   F0           MOVX      @DPTR,A
   1284          
   1285                // Send a response back
   1286                status = bdbTL_Send_ScanRsp( srcEP, dstAddr, pRsp, seqNum );
   \   0002CD                ; Setup parameters for call to function bdbTL_Send_ScanRsp
   \   0002CD   E5..         MOV       A,?V14
   \   0002CF   F5..         MOV       ?V0,A
   \   0002D1   78..         MOV       R0,#?V0
   \   0002D3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002D6   EE           MOV       A,R6
   \   0002D7   FC           MOV       R4,A
   \   0002D8   EF           MOV       A,R7
   \   0002D9   FD           MOV       R5,A
   \   0002DA   7401         MOV       A,#0x1
   \   0002DC   12....       LCALL     ?XSTACK_DISP0_8
   \   0002DF   E0           MOVX      A,@DPTR
   \   0002E0   FA           MOV       R2,A
   \   0002E1   A3           INC       DPTR
   \   0002E2   E0           MOVX      A,@DPTR
   \   0002E3   FB           MOV       R3,A
   \   0002E4   A9..         MOV       R1,?V13
   \   0002E6   12....       LCALL     `??bdbTL_Send_ScanRsp::?relay`; Banked call to: bdbTL_Send_ScanRsp
   \   0002E9   7401         MOV       A,#0x1
   \   0002EB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002EE   E9           MOV       A,R1
   \   0002EF   F5..         MOV       ?V12,A
   1287          
   1288                osal_mem_free( pRsp );
   \   0002F1                ; Setup parameters for call to function osal_mem_free
   \   0002F1   EE           MOV       A,R6
   \   0002F2   FA           MOV       R2,A
   \   0002F3   EF           MOV       A,R7
   \   0002F4   FB           MOV       R3,A
   \   0002F5   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0002F8   8003         SJMP      ??touchLink_InitiatorSendScanRsp_0
   1289              }
   1290              else
   1291              {
   1292                status = ZMemError;
   \                     ??touchLink_InitiatorSendScanRsp_1:
   \   0002FA   75..10       MOV       ?V12,#0x10
   1293              }
   1294            }
   1295          
   1296            return ( status );
   \                     ??touchLink_InitiatorSendScanRsp_0:
   \   0002FD   A9..         MOV       R1,?V12
   \   0002FF   7402         MOV       A,#0x2
   \   000301   12....       LCALL     ?DEALLOC_XSTACK8
   \   000304   7F0F         MOV       R7,#0xf
   \   000306   02....       LJMP      ?BANKED_LEAVE_XDATA
   1297          }
   1298          
   1299          /*********************************************************************
   1300           * @fn      bdb_Initiator_SendNwkJoinReq
   1301           *
   1302           * @brief   Send out a Network Join Router or End Device Request command.
   1303           *          using the selected Target.
   1304           *
   1305           * @param   -
   1306           *
   1307           * @return  ZStatus_t
   1308           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1309          ZStatus_t bdb_Initiator_SendNwkJoinReq( void )
   \                     bdb_Initiator_SendNwkJoinReq:
   1310          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1311            // Set NWK task to idle
   1312            nwk_setStateIdle( TRUE );
   \   000004                ; Setup parameters for call to function nwk_setStateIdle
   \   000004   7901         MOV       R1,#0x1
   \   000006   12....       LCALL     `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
   1313            return initiatorSendNwkJoinReq( &(selectedTarget.scanRsp) );
   \   000009                ; Setup parameters for call to function initiatorSendNwkJoinReq
   \   000009   7A..         MOV       R2,#selectedTarget & 0xff
   \   00000B   7B..         MOV       R3,#(selectedTarget >> 8) & 0xff
   \   00000D   12....       LCALL     `??initiatorSendNwkJoinReq::?relay`; Banked call to: initiatorSendNwkJoinReq
   \   000010   D083         POP       DPH
   \   000012   D082         POP       DPL
   \   000014   02....       LJMP      ?BRET
   1314          }  
   1315          
   1316          #if (ZSTACK_ROUTER_BUILD)
   1317          /*********************************************************************
   1318           * @fn      touchLinkInitiator_PermitJoin
   1319           *
   1320           * @brief   Set the router permit join flag, to allow or deny classical
   1321           *          commissioning by other ZigBee devices.
   1322           *
   1323           * @param   duration - enable up to aplcMaxPermitJoinDuration seconds,
   1324           *                     0 to disable
   1325           *
   1326           * @return  status
   1327           */
   1328          ZStatus_t touchLinkInitiator_PermitJoin( uint8 duration )
   1329          {
   1330            return touchLink_PermitJoin( duration );
   1331          }  
   1332          #endif //(ZSTACK_ROUTER_BUILD)
   1333          
   1334          /*********************************************************************
   1335           * LOCAL FUNCTIONS
   1336           */
   1337          
   1338          /*********************************************************************
   1339           * @fn      initiatorScanReqCB
   1340           *
   1341           * @brief   This callback is called to process a Scan Request command.
   1342           *
   1343           * @param   srcAddr - sender's address
   1344           * @param   pReq - parsed command
   1345           * @param   seqNum - command sequence number
   1346           *
   1347           * @return  ZStatus_t
   1348           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1349          static ZStatus_t initiatorScanReqCB( afAddrType_t *srcAddr, bdbTLScanReq_t *pReq, uint8 seqNum )
   \                     initiatorScanReqCB:
   1350          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   \   000012   89..         MOV       ?V1,R1
   1351            int8 rssi;
   1352            rssi = touchLink_GetMsgRssi();
   \   000014                ; Setup parameters for call to function touchLink_GetMsgRssi
   \   000014   12....       LCALL     `??touchLink_GetMsgRssi::?relay`; Banked call to: touchLink_GetMsgRssi
   \   000017   E9           MOV       A,R1
   \   000018   F5..         MOV       ?V0,A
   1353            if( ( rssi > TOUCHLINK_WORST_RSSI ) && ( pReq->touchLinkInitiator == TRUE ) )
   \   00001A   E5..         MOV       A,?V0
   \   00001C   C3           CLR       C
   \   00001D   94BB         SUBB      A,#-0x45
   \   00001F   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000021   65D0         XRL       A,PSW
   \   000023   33           RLC       A
   \   000024   5003         JNC       $+5
   \   000026   02....       LJMP      ??initiatorScanReqCB_0 & 0xFFFF
   \   000029   8E82         MOV       DPL,R6
   \   00002B   8F83         MOV       DPH,R7
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F8           MOV       R0,A
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F9           MOV       R1,A
   \   000038   E8           MOV       A,R0
   \   000039   C4           SWAP      A
   \   00003A   540F         ANL       A,#0xf
   \   00003C   5401         ANL       A,#0x1
   \   00003E   A2E0         MOV       C,0xE0 /* A   */.0
   \   000040   4003         JC        $+5
   \   000042   02....       LJMP      ??initiatorScanReqCB_0 & 0xFFFF
   1354            {
   1355              // response to the originator, but switch to dst PAN 0xFFFF
   1356              afAddrType_t dstAddr;
   1357              osal_memcpy(&dstAddr, srcAddr, sizeof(afAddrType_t));
   \   000045                ; Setup parameters for call to function osal_memcpy
   \   000045   85....       MOV       ?V4,?V2
   \   000048   85....       MOV       ?V5,?V3
   \   00004B   75..00       MOV       ?V6,#0x0
   \   00004E   78..         MOV       R0,#?V4
   \   000050   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000053   7C0C         MOV       R4,#0xc
   \   000055   7D00         MOV       R5,#0x0
   \   000057   7403         MOV       A,#0x3
   \   000059   12....       LCALL     ?XSTACK_DISP101_8
   \   00005C   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00005F   7403         MOV       A,#0x3
   \   000061   12....       LCALL     ?DEALLOC_XSTACK8
   1358              dstAddr.panId = 0xFFFF;
   \   000064   740A         MOV       A,#0xa
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   74FF         MOV       A,#-0x1
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   A3           INC       DPTR
   \   00006D   74FF         MOV       A,#-0x1
   \   00006F   F0           MOVX      @DPTR,A
   1359          
   1360              // If we are factory new and revice a Scan Request from other factory new
   1361              // device then drop the request.
   1362              if ( ( pReq->touchLinkFactoryNew == TRUE ) && ( bdbAttributes.bdbNodeIsOnANetwork == FALSE ) )
   \   000070   8E82         MOV       DPL,R6
   \   000072   8F83         MOV       DPH,R7
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   A3           INC       DPTR
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   5401         ANL       A,#0x1
   \   00007D   F8           MOV       R0,A
   \   00007E   A3           INC       DPTR
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   5400         ANL       A,#0x0
   \   000082   F9           MOV       R1,A
   \   000083   E8           MOV       A,R0
   \   000084   A2E0         MOV       C,0xE0 /* A   */.0
   \   000086   500A         JNC       ??initiatorScanReqCB_1
   \   000088   90....       MOV       DPTR,#bdbAttributes + 14
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   7004         JNZ       ??initiatorScanReqCB_1
   1363              {
   1364                return ( ZSuccess );
   \   00008E   7900         MOV       R1,#0x0
   \   000090   807E         SJMP      ??initiatorScanReqCB_2
   1365              }
   1366              // If, during its scan, a non factory new initiator receives another scan
   1367              // request inter-PAN command frame from a factory new target, it shall be ignored.
   1368              if ( ( pReq->touchLinkFactoryNew == TRUE ) && ( bdbAttributes.bdbNodeIsOnANetwork == TRUE ) &&
   1369                   osal_get_timeoutEx( touchLinkInitiator_TaskID, TOUCHLINK_TL_SCAN_BASE_EVT ) )
   \                     ??initiatorScanReqCB_1:
   \   000092   8E82         MOV       DPL,R6
   \   000094   8F83         MOV       DPH,R7
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   5401         ANL       A,#0x1
   \   00009F   F8           MOV       R0,A
   \   0000A0   A3           INC       DPTR
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   5400         ANL       A,#0x0
   \   0000A4   F9           MOV       R1,A
   \   0000A5   E8           MOV       A,R0
   \   0000A6   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000A8   501E         JNC       ??initiatorScanReqCB_3
   \   0000AA   90....       MOV       DPTR,#bdbAttributes + 14
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   6401         XRL       A,#0x1
   \   0000B0   7016         JNZ       ??initiatorScanReqCB_3
   \   0000B2                ; Setup parameters for call to function osal_get_timeoutEx
   \   0000B2   7A20         MOV       R2,#0x20
   \   0000B4   7B00         MOV       R3,#0x0
   \   0000B6   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   F9           MOV       R1,A
   \   0000BB   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   0000BE   EA           MOV       A,R2
   \   0000BF   4B           ORL       A,R3
   \   0000C0   4C           ORL       A,R4
   \   0000C1   4D           ORL       A,R5
   \   0000C2   6004         JZ        ??initiatorScanReqCB_3
   1370              {
   1371                return ( ZSuccess );
   \   0000C4   7900         MOV       R1,#0x0
   \   0000C6   8048         SJMP      ??initiatorScanReqCB_2
   1372              }
   1373          
   1374              // Send a Scan Response back
   1375              if ( touchLink_InitiatorSendScanRsp( TOUCHLINK_INTERNAL_ENDPOINT, &dstAddr, pReq->transID, seqNum ) == ZSuccess )
   \                     ??initiatorScanReqCB_3:
   \   0000C8                ; Setup parameters for call to function touchLink_InitiatorSendScanRsp
   \   0000C8   8E82         MOV       DPL,R6
   \   0000CA   8F83         MOV       DPH,R7
   \   0000CC   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000CF   AC..         MOV       R4,?V1
   \   0000D1   7404         MOV       A,#0x4
   \   0000D3   12....       LCALL     ?XSTACK_DISP101_8
   \   0000D6   790D         MOV       R1,#0xd
   \   0000D8   12....       LCALL     `??touchLink_InitiatorSendScanRsp::?relay`; Banked call to: touchLink_InitiatorSendScanRsp
   \   0000DB   7404         MOV       A,#0x4
   \   0000DD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E0   E9           MOV       A,R1
   \   0000E1   702B         JNZ       ??initiatorScanReqCB_0
   1376              {
   1377                // If we're a factory new initiator and are in the middle of a Device
   1378                // Discovery, stop the procedure and wait for subsequent configuration
   1379                // information from the non-factory new initiator that we just responded to.
   1380                if ( ( bdbAttributes.bdbNodeIsOnANetwork == FALSE ) && !pReq->touchLinkFactoryNew )
   \   0000E3   90....       MOV       DPTR,#bdbAttributes + 14
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   7025         JNZ       ??initiatorScanReqCB_0
   \   0000E9   8E82         MOV       DPL,R6
   \   0000EB   8F83         MOV       DPH,R7
   \   0000ED   A3           INC       DPTR
   \   0000EE   A3           INC       DPTR
   \   0000EF   A3           INC       DPTR
   \   0000F0   A3           INC       DPTR
   \   0000F1   A3           INC       DPTR
   \   0000F2   A3           INC       DPTR
   \   0000F3   E0           MOVX      A,@DPTR
   \   0000F4   5401         ANL       A,#0x1
   \   0000F6   F8           MOV       R0,A
   \   0000F7   A3           INC       DPTR
   \   0000F8   E0           MOVX      A,@DPTR
   \   0000F9   5400         ANL       A,#0x0
   \   0000FB   F9           MOV       R1,A
   \   0000FC   E8           MOV       A,R0
   \   0000FD   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000FF   400D         JC        ??initiatorScanReqCB_0
   1381                {
   1382                  osal_stop_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_TL_SCAN_BASE_EVT );
   \   000101                ; Setup parameters for call to function osal_stop_timerEx
   \   000101   7A20         MOV       R2,#0x20
   \   000103   7B00         MOV       R3,#0x0
   \   000105   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000108   E0           MOVX      A,@DPTR
   \   000109   F9           MOV       R1,A
   \   00010A   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   00010D   E9           MOV       A,R1
   1383                }
   1384              }
   1385            }
   1386          
   1387            return ( ZSuccess );
   \                     ??initiatorScanReqCB_0:
   \   00010E   7900         MOV       R1,#0x0
   \                     ??initiatorScanReqCB_2:
   \   000110   740C         MOV       A,#0xc
   \   000112   12....       LCALL     ?DEALLOC_XSTACK8
   \   000115   7F07         MOV       R7,#0x7
   \   000117   02....       LJMP      ?BANKED_LEAVE_XDATA
   1388          }
   1389          
   1390          /*********************************************************************
   1391           * @fn      initiatorDeviceInfoReqCB
   1392           *
   1393           * @brief   This callback is called to process a Device Information
   1394           *          Request command.
   1395           *
   1396           * @param   srcAddr - sender's address
   1397           * @param   pReq - parsed command
   1398           * @param   seqNum - command sequence number
   1399           *
   1400           * @return  ZStatus_t
   1401           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1402          static ZStatus_t initiatorDeviceInfoReqCB( afAddrType_t *srcAddr, bdbTLDeviceInfoReq_t *pReq, uint8 seqNum )
   \                     initiatorDeviceInfoReqCB:
   1403          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   \   00000D   89..         MOV       ?V2,R1
   1404            if ( touchLink_IsValidTransID( pReq->transID ) == FALSE )
   \   00000F                ; Setup parameters for call to function touchLink_IsValidTransID
   \   00000F   8E82         MOV       DPL,R6
   \   000011   8F83         MOV       DPH,R7
   \   000013   12....       LCALL     ?XLOAD_R2345
   \   000016   12....       LCALL     `??touchLink_IsValidTransID::?relay`; Banked call to: touchLink_IsValidTransID
   \   000019   E9           MOV       A,R1
   \   00001A   7004         JNZ       ??initiatorDeviceInfoReqCB_0
   1405            {
   1406              return ( ZFailure );
   \   00001C   7901         MOV       R1,#0x1
   \   00001E   8021         SJMP      ??initiatorDeviceInfoReqCB_1
   1407            }
   1408            return ( touchLink_SendDeviceInfoRsp( TOUCHLINK_INTERNAL_ENDPOINT, srcAddr,
   1409                                            pReq->startIndex, pReq->transID, seqNum ) );
   \                     ??initiatorDeviceInfoReqCB_0:
   \   000020                ; Setup parameters for call to function touchLink_SendDeviceInfoRsp
   \   000020   8E82         MOV       DPL,R6
   \   000022   8F83         MOV       DPH,R7
   \   000024   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000027   AD..         MOV       R5,?V2
   \   000029   8E82         MOV       DPL,R6
   \   00002B   8F83         MOV       DPH,R7
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   FC           MOV       R4,A
   \   000033   AA..         MOV       R2,?V0
   \   000035   AB..         MOV       R3,?V1
   \   000037   790D         MOV       R1,#0xd
   \   000039   12....       LCALL     `??touchLink_SendDeviceInfoRsp::?relay`; Banked call to: touchLink_SendDeviceInfoRsp
   \   00003C   7404         MOV       A,#0x4
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??initiatorDeviceInfoReqCB_1:
   \   000041   7F03         MOV       R7,#0x3
   \   000043   02....       LJMP      ?BANKED_LEAVE_XDATA
   1410          }
   1411          
   1412          /*********************************************************************
   1413           * @fn      initiatorIdentifyReqCB
   1414           *
   1415           * @brief   This callback is called to process an Identify Request command.
   1416           *
   1417           * @param   srcAddr - sender's address
   1418           * @param   pReq - parsed command
   1419           *
   1420           * @return  ZStatus_t
   1421           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1422          static ZStatus_t initiatorIdentifyReqCB( afAddrType_t *srcAddr, bdbTLIdentifyReq_t *pReq )
   \                     initiatorIdentifyReqCB:
   1423          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   1424            if ( touchLink_IsValidTransID( pReq->transID ) == FALSE )
   \   00000D                ; Setup parameters for call to function touchLink_IsValidTransID
   \   00000D   85..82       MOV       DPL,?V0
   \   000010   85..83       MOV       DPH,?V1
   \   000013   12....       LCALL     ?XLOAD_R2345
   \   000016   12....       LCALL     `??touchLink_IsValidTransID::?relay`; Banked call to: touchLink_IsValidTransID
   \   000019   E9           MOV       A,R1
   \   00001A   7004         JNZ       ??initiatorIdentifyReqCB_0
   1425            {
   1426              return ( ZFailure );
   \   00001C   7901         MOV       R1,#0x1
   \   00001E   804C         SJMP      ??initiatorIdentifyReqCB_1
   1427            }
   1428          
   1429            uint16 identifyTime;
   1430            endPointDesc_t * bdb_CurrEpDescriptor;
   1431            
   1432            // Values of the Identify Duration field:
   1433            // - Exit identify mode: 0x0000
   1434            // - Length of time to remain in identify mode: 0x0001-0xfffe
   1435            // - Remain in identify mode for a default time known by the receiver: 0xffff
   1436            if ( pReq->IdDuration == 0xffff )
   \                     ??initiatorIdentifyReqCB_0:
   \   000020   85..82       MOV       DPL,?V0
   \   000023   85..83       MOV       DPH,?V1
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   64FF         XRL       A,#0xff
   \   00002D   7004         JNZ       ??initiatorIdentifyReqCB_2
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   64FF         XRL       A,#0xff
   \                     ??initiatorIdentifyReqCB_2:
   \   000033   7008         JNZ       ??initiatorIdentifyReqCB_3
   1437            {
   1438              identifyTime = TOUCHLINK_DEFAULT_IDENTIFY_TIME;
   \   000035   75..03       MOV       ?V2,#0x3
   \   000038   75..00       MOV       ?V3,#0x0
   \   00003B   8011         SJMP      ??initiatorIdentifyReqCB_4
   1439            }
   1440            else
   1441            {
   1442              identifyTime = pReq->IdDuration;
   \                     ??initiatorIdentifyReqCB_3:
   \   00003D   85..82       MOV       DPL,?V0
   \   000040   85..83       MOV       DPH,?V1
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F5..         MOV       ?V2,A
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   F5..         MOV       ?V3,A
   1443            }
   1444          
   1445            bdb_CurrEpDescriptor = bdb_setEpDescListToActiveEndpoint( );
   \                     ??initiatorIdentifyReqCB_4:
   \   00004E                ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
   \   00004E   12....       LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
   \   000051   8A..         MOV       ?V6,R2
   \   000053   8B..         MOV       ?V7,R3
   \   000055   85....       MOV       ?V4,?V6
   \   000058   85....       MOV       ?V5,?V7
   1446            
   1447            bdb_ZclIdentifyCmdInd( identifyTime, bdb_CurrEpDescriptor->endPoint );
   \   00005B                ; Setup parameters for call to function bdb_ZclIdentifyCmdInd
   \   00005B   85..82       MOV       DPL,?V4
   \   00005E   85..83       MOV       DPH,?V5
   \   000061   E0           MOVX      A,@DPTR
   \   000062   F9           MOV       R1,A
   \   000063   AA..         MOV       R2,?V2
   \   000065   AB..         MOV       R3,?V3
   \   000067   12....       LCALL     `??bdb_ZclIdentifyCmdInd::?relay`; Banked call to: bdb_ZclIdentifyCmdInd
   1448          
   1449            return ( ZSuccess );
   \   00006A   7900         MOV       R1,#0x0
   \                     ??initiatorIdentifyReqCB_1:
   \   00006C   7F08         MOV       R7,#0x8
   \   00006E   02....       LJMP      ?BANKED_LEAVE_XDATA
   1450          }
   1451          
   1452          /*********************************************************************
   1453           * @fn      initiatorNwkJoinReqCB
   1454           *
   1455           * @brief   This callback is called to process Network Join
   1456           *          Request and Network Join End Device Request commands.
   1457           *
   1458           * @param   srcAddr - sender's address
   1459           * @param   pReq - parsed command
   1460           * @param   seqNum - command sequence number
   1461           *
   1462           * @return  ZStatus_t
   1463           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1464          static ZStatus_t initiatorNwkJoinReqCB( afAddrType_t *srcAddr, bdbTLNwkJoinReq_t *pReq, uint8 seqNum )
   \                     initiatorNwkJoinReqCB:
   1465          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV       A,#-0xd
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   \   000012   89..         MOV       ?V1,R1
   1466            bdbTLNwkJoinRsp_t rsp;
   1467            afAddrType_t dstAddr;
   1468            nwk_states_t nwkState;
   1469          
   1470            if ( touchLink_IsValidTransID( pReq->transID ) == FALSE )
   \   000014                ; Setup parameters for call to function touchLink_IsValidTransID
   \   000014   8E82         MOV       DPL,R6
   \   000016   8F83         MOV       DPH,R7
   \   000018   12....       LCALL     ?XLOAD_R2345
   \   00001B   12....       LCALL     `??touchLink_IsValidTransID::?relay`; Banked call to: touchLink_IsValidTransID
   \   00001E   E9           MOV       A,R1
   \   00001F   7005         JNZ       ??initiatorNwkJoinReqCB_0
   1471            {
   1472              return ( ZFailure );
   \   000021   7901         MOV       R1,#0x1
   \   000023   02....       LJMP      ??initiatorNwkJoinReqCB_1 & 0xFFFF
   1473            }
   1474          
   1475            rsp.transID = pReq->transID;
   \                     ??initiatorNwkJoinReqCB_0:
   \   000026   8E82         MOV       DPL,R6
   \   000028   8F83         MOV       DPH,R7
   \   00002A   12....       LCALL     ?XLOAD_R0123
   \   00002D   85..82       MOV       DPL,?XSP + 0
   \   000030   85..83       MOV       DPH,?XSP + 1
   \   000033   12....       LCALL     ?XSTORE_R0123
   1476          
   1477            if ( nwk_ExtPANIDValid( pReq->nwkParams.extendedPANID ) )
   \   000036                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000036   EE           MOV       A,R6
   \   000037   2404         ADD       A,#0x4
   \   000039   FA           MOV       R2,A
   \   00003A   E4           CLR       A
   \   00003B   3F           ADDC      A,R7
   \   00003C   FB           MOV       R3,A
   \   00003D   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   000040   E9           MOV       A,R1
   \   000041   7003         JNZ       $+5
   \   000043   02....       LJMP      ??initiatorNwkJoinReqCB_2 & 0xFFFF
   1478              //NOTE: additional nwk params verification may be added here, e.g. ranges.
   1479            {
   1480          #if ( ZSTACK_ROUTER_BUILD )
   1481              nwkState = NWK_ROUTER;
   1482          #else
   1483              // Save the request for later
   1484              joinReq = *pReq;
   \   000046   8E82         MOV       DPL,R6
   \   000048   8F83         MOV       DPH,R7
   \   00004A   7C..         MOV       R4,#joinReq & 0xff
   \   00004C   7D..         MOV       R5,#(joinReq >> 8) & 0xff
   \   00004E   742F         MOV       A,#0x2f
   \   000050   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1485              nwkState = NWK_ENDDEVICE;
   \   000053   75..04       MOV       ?V0,#0x4
   1486          #endif
   1487          
   1488              // Notify our task to join the new network
   1489              osal_start_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_NWK_JOIN_IND_EVT, BDBCTL_MIN_STARTUP_DELAY_TIME );
   \   000056                ; Setup parameters for call to function osal_start_timerEx
   \   000056   90....       MOV       DPTR,#__Constant_7d0
   \   000059   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00005C   7A02         MOV       R2,#0x2
   \   00005E   7B00         MOV       R3,#0x0
   \   000060   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000063   E0           MOVX      A,@DPTR
   \   000064   F9           MOV       R1,A
   \   000065   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000068   7404         MOV       A,#0x4
   \   00006A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006D   E9           MOV       A,R1
   1490          
   1491              osal_stop_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_DISABLE_RX_EVT );
   \   00006E                ; Setup parameters for call to function osal_stop_timerEx
   \   00006E   7A00         MOV       R2,#0x0
   \   000070   7B02         MOV       R3,#0x2
   \   000072   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000075   E0           MOVX      A,@DPTR
   \   000076   F9           MOV       R1,A
   \   000077   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   00007A   E9           MOV       A,R1
   1492              osal_stop_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_CFG_TARGET_EVT );
   \   00007B                ; Setup parameters for call to function osal_stop_timerEx
   \   00007B   7A40         MOV       R2,#0x40
   \   00007D   7B00         MOV       R3,#0x0
   \   00007F   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000082   E0           MOVX      A,@DPTR
   \   000083   F9           MOV       R1,A
   \   000084   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000087   E9           MOV       A,R1
   1493          
   1494              rsp.status = TOUCHLINK_NETWORK_JOIN_RSP_STATUS_SUCCESS;
   \   000088   7404         MOV       A,#0x4
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   7400         MOV       A,#0x0
   \   00008F   F0           MOVX      @DPTR,A
   1495              
   1496              bdb_setNodeIsOnANetwork(TRUE);
   \   000090                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000090   7901         MOV       R1,#0x1
   \   000092   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
   1497              
   1498              // Apply the received network key
   1499              touchLink_DecryptNwkKey( pReq->nwkParams.nwkKey, pReq->nwkParams.keyIndex, pReq->transID, touchLinkResponseID );
   \   000095                ; Setup parameters for call to function touchLink_DecryptNwkKey
   \   000095   90....       MOV       DPTR,#touchLinkResponseID
   \   000098   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00009B   8E82         MOV       DPL,R6
   \   00009D   8F83         MOV       DPH,R7
   \   00009F   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000A2   EE           MOV       A,R6
   \   0000A3   240C         ADD       A,#0xc
   \   0000A5   F582         MOV       DPL,A
   \   0000A7   E4           CLR       A
   \   0000A8   3F           ADDC      A,R7
   \   0000A9   F583         MOV       DPH,A
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   F9           MOV       R1,A
   \   0000AD   EE           MOV       A,R6
   \   0000AE   240D         ADD       A,#0xd
   \   0000B0   FA           MOV       R2,A
   \   0000B1   E4           CLR       A
   \   0000B2   3F           ADDC      A,R7
   \   0000B3   FB           MOV       R3,A
   \   0000B4   12....       LCALL     `??touchLink_DecryptNwkKey::?relay`; Banked call to: touchLink_DecryptNwkKey
   \   0000B7   7408         MOV       A,#0x8
   \   0000B9   12....       LCALL     ?DEALLOC_XSTACK8
   1500          
   1501              // This is not a usual Trust Center protected network
   1502              ZDSecMgrUpdateTCAddress( NULL );
   \   0000BC                ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
   \   0000BC   7A00         MOV       R2,#0x0
   \   0000BE   7B00         MOV       R3,#0x0
   \   0000C0   12....       LCALL     `??ZDSecMgrUpdateTCAddress::?relay`; Banked call to: ZDSecMgrUpdateTCAddress
   1503              
   1504              // Configure MAC with our network parameters
   1505              NLME_InitNV();
   \   0000C3                ; Setup parameters for call to function NLME_InitNV
   \   0000C3   12....       LCALL     `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
   \   0000C6   E9           MOV       A,R1
   1506              touchLink_SetNIB( nwkState, pReq->nwkParams.nwkAddr, pReq->nwkParams.extendedPANID,
   1507                           _NIB.nwkLogicalChannel, pReq->nwkParams.panId, pReq->nwkParams.panId );
   \   0000C7                ; Setup parameters for call to function touchLink_SetNIB
   \   0000C7   EE           MOV       A,R6
   \   0000C8   241E         ADD       A,#0x1e
   \   0000CA   F582         MOV       DPL,A
   \   0000CC   E4           CLR       A
   \   0000CD   3F           ADDC      A,R7
   \   0000CE   F583         MOV       DPH,A
   \   0000D0   E0           MOVX      A,@DPTR
   \   0000D1   F8           MOV       R0,A
   \   0000D2   A3           INC       DPTR
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   F9           MOV       R1,A
   \   0000D5   E8           MOV       A,R0
   \   0000D6   F5..         MOV       ?V4,A
   \   0000D8   78..         MOV       R0,#?V4
   \   0000DA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DD   EE           MOV       A,R6
   \   0000DE   241E         ADD       A,#0x1e
   \   0000E0   F582         MOV       DPL,A
   \   0000E2   E4           CLR       A
   \   0000E3   3F           ADDC      A,R7
   \   0000E4   F583         MOV       DPH,A
   \   0000E6   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000E9   90....       MOV       DPTR,#_NIB + 22
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   F5..         MOV       ?V4,A
   \   0000EF   78..         MOV       R0,#?V4
   \   0000F1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F4   EE           MOV       A,R6
   \   0000F5   2404         ADD       A,#0x4
   \   0000F7   FC           MOV       R4,A
   \   0000F8   E4           CLR       A
   \   0000F9   3F           ADDC      A,R7
   \   0000FA   FD           MOV       R5,A
   \   0000FB   EE           MOV       A,R6
   \   0000FC   2420         ADD       A,#0x20
   \   0000FE   F582         MOV       DPL,A
   \   000100   E4           CLR       A
   \   000101   3F           ADDC      A,R7
   \   000102   F583         MOV       DPH,A
   \   000104   E0           MOVX      A,@DPTR
   \   000105   FA           MOV       R2,A
   \   000106   A3           INC       DPTR
   \   000107   E0           MOVX      A,@DPTR
   \   000108   FB           MOV       R3,A
   \   000109   A9..         MOV       R1,?V0
   \   00010B   12....       LCALL     `??touchLink_SetNIB::?relay`; Banked call to: touchLink_SetNIB
   \   00010E   7404         MOV       A,#0x4
   \   000110   12....       LCALL     ?DEALLOC_XSTACK8
   1508              
   1509              touchLink_SetChannel( _NIB.nwkLogicalChannel );
   \   000113                ; Setup parameters for call to function touchLink_SetChannel
   \   000113   90....       MOV       DPTR,#_NIB + 22
   \   000116   E0           MOVX      A,@DPTR
   \   000117   F9           MOV       R1,A
   \   000118   12....       LCALL     `??touchLink_SetChannel::?relay`; Banked call to: touchLink_SetChannel
   1510              touchLink_SetMacNwkParams( _NIB.nwkDevAddress, _NIB.nwkPanId, _NIB.nwkLogicalChannel );
   \   00011B                ; Setup parameters for call to function touchLink_SetMacNwkParams
   \   00011B   90....       MOV       DPTR,#_NIB + 22
   \   00011E   E0           MOVX      A,@DPTR
   \   00011F   F9           MOV       R1,A
   \   000120   90....       MOV       DPTR,#_NIB + 33
   \   000123   E0           MOVX      A,@DPTR
   \   000124   FC           MOV       R4,A
   \   000125   A3           INC       DPTR
   \   000126   E0           MOVX      A,@DPTR
   \   000127   FD           MOV       R5,A
   \   000128   90....       MOV       DPTR,#_NIB + 20
   \   00012B   E0           MOVX      A,@DPTR
   \   00012C   FA           MOV       R2,A
   \   00012D   A3           INC       DPTR
   \   00012E   E0           MOVX      A,@DPTR
   \   00012F   FB           MOV       R3,A
   \   000130   12....       LCALL     `??touchLink_SetMacNwkParams::?relay`; Banked call to: touchLink_SetMacNwkParams
   \   000133   8008         SJMP      ??initiatorNwkJoinReqCB_3
   1511            }
   1512            else
   1513            {
   1514              rsp.status = TOUCHLINK_NETWORK_JOIN_RSP_STATUS_FAILURE;
   \                     ??initiatorNwkJoinReqCB_2:
   \   000135   7404         MOV       A,#0x4
   \   000137   12....       LCALL     ?XSTACK_DISP0_8
   \   00013A   7401         MOV       A,#0x1
   \   00013C   F0           MOVX      @DPTR,A
   1515            }
   1516          
   1517            dstAddr = *srcAddr;
   \                     ??initiatorNwkJoinReqCB_3:
   \   00013D   85..82       MOV       DPL,?V2
   \   000140   85..83       MOV       DPH,?V3
   \   000143   7405         MOV       A,#0x5
   \   000145   12....       LCALL     ?XSTACK_DISP102_8
   \   000148   740C         MOV       A,#0xc
   \   00014A   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1518            dstAddr.panId = 0xFFFF;
   \   00014D   740F         MOV       A,#0xf
   \   00014F   12....       LCALL     ?XSTACK_DISP0_8
   \   000152   74FF         MOV       A,#-0x1
   \   000154   F0           MOVX      @DPTR,A
   \   000155   A3           INC       DPTR
   \   000156   74FF         MOV       A,#-0x1
   \   000158   F0           MOVX      @DPTR,A
   1519          
   1520            // Send a response back
   1521          #if ( ZSTACK_ROUTER_BUILD )
   1522            bdbTL_Send_NwkJoinRtrRsp( TOUCHLINK_INTERNAL_ENDPOINT, &dstAddr, &rsp, seqNum );
   1523          #else
   1524            bdbTL_Send_NwkJoinEDRsp( TOUCHLINK_INTERNAL_ENDPOINT, &dstAddr, &rsp, seqNum );
   \   000159                ; Setup parameters for call to function bdbTL_Send_NwkJoinRsp
   \   000159   E5..         MOV       A,?V1
   \   00015B   F5..         MOV       ?V4,A
   \   00015D   78..         MOV       R0,#?V4
   \   00015F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000162   75..15       MOV       ?V4,#0x15
   \   000165   78..         MOV       R0,#?V4
   \   000167   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00016A   7402         MOV       A,#0x2
   \   00016C   12....       LCALL     ?XSTACK_DISP102_8
   \   00016F   7407         MOV       A,#0x7
   \   000171   12....       LCALL     ?XSTACK_DISP101_8
   \   000174   790D         MOV       R1,#0xd
   \   000176   12....       LCALL     `??bdbTL_Send_NwkJoinRsp::?relay`; Banked call to: bdbTL_Send_NwkJoinRsp
   \   000179   7402         MOV       A,#0x2
   \   00017B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00017E   E9           MOV       A,R1
   1525          #endif
   1526          
   1527            return ( ZSuccess );
   \   00017F   7900         MOV       R1,#0x0
   \                     ??initiatorNwkJoinReqCB_1:
   \   000181   7411         MOV       A,#0x11
   \   000183   12....       LCALL     ?DEALLOC_XSTACK8
   \   000186   7F05         MOV       R7,#0x5
   \   000188   02....       LJMP      ?BANKED_LEAVE_XDATA
   1528          }
   1529          
   1530          /*********************************************************************
   1531           * @fn      initiatorNwkUpdateReqCB
   1532           *
   1533           * @brief   This callback is called to process a Network Update Request
   1534           *          command.
   1535           *
   1536           * @param   srcAddr - sender's address
   1537           * @param   pReq - parsed command
   1538           *
   1539           * @return  ZStatus_t
   1540           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1541          static ZStatus_t initiatorNwkUpdateReqCB( afAddrType_t *srcAddr, bdbTLNwkUpdateReq_t *pReq )
   \                     initiatorNwkUpdateReqCB:
   1542          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   1543            if ( touchLink_IsValidTransID( pReq->transID ) == FALSE )
   \   00000D                ; Setup parameters for call to function touchLink_IsValidTransID
   \   00000D   8E82         MOV       DPL,R6
   \   00000F   8F83         MOV       DPH,R7
   \   000011   12....       LCALL     ?XLOAD_R2345
   \   000014   12....       LCALL     `??touchLink_IsValidTransID::?relay`; Banked call to: touchLink_IsValidTransID
   \   000017   E9           MOV       A,R1
   \   000018   7004         JNZ       ??initiatorNwkUpdateReqCB_0
   1544            {
   1545              return ( ZFailure );
   \   00001A   7901         MOV       R1,#0x1
   \   00001C   8064         SJMP      ??initiatorNwkUpdateReqCB_1
   1546            }
   1547            // Discard the request if the Extended PAN ID and PAN ID are not
   1548            // identical with our corresponding stored values
   1549            if ( TOUCHLINK_SAME_NWK( pReq->PANID, pReq->extendedPANID ) )
   \                     ??initiatorNwkUpdateReqCB_0:
   \   00001E   90....       MOV       DPTR,#_NIB + 33
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F8           MOV       R0,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F9           MOV       R1,A
   \   000026   EE           MOV       A,R6
   \   000027   240E         ADD       A,#0xe
   \   000029   F582         MOV       DPL,A
   \   00002B   E4           CLR       A
   \   00002C   3F           ADDC      A,R7
   \   00002D   F583         MOV       DPH,A
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   68           XRL       A,R0
   \   000031   7003         JNZ       ??initiatorNwkUpdateReqCB_2
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   69           XRL       A,R1
   \                     ??initiatorNwkUpdateReqCB_2:
   \   000036   7048         JNZ       ??initiatorNwkUpdateReqCB_3
   \   000038                ; Setup parameters for call to function sAddrExtCmp
   \   000038   EE           MOV       A,R6
   \   000039   2404         ADD       A,#0x4
   \   00003B   FC           MOV       R4,A
   \   00003C   E4           CLR       A
   \   00003D   3F           ADDC      A,R7
   \   00003E   FD           MOV       R5,A
   \   00003F   7A..         MOV       R2,#(_NIB + 53) & 0xff
   \   000041   7B..         MOV       R3,#((_NIB + 53) >> 8) & 0xff
   \   000043   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000046   E9           MOV       A,R1
   \   000047   6037         JZ        ??initiatorNwkUpdateReqCB_3
   1550            {
   1551              uint8 newUpdateId = touchLink_NewNwkUpdateId( pReq->nwkUpdateId, _NIB.nwkUpdateId);
   \   000049                ; Setup parameters for call to function touchLink_NewNwkUpdateId
   \   000049   90....       MOV       DPTR,#_NIB + 109
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   FA           MOV       R2,A
   \   00004E   EE           MOV       A,R6
   \   00004F   240C         ADD       A,#0xc
   \   000051   F582         MOV       DPL,A
   \   000053   E4           CLR       A
   \   000054   3F           ADDC      A,R7
   \   000055   F583         MOV       DPH,A
   \   000057   E0           MOVX      A,@DPTR
   \   000058   F9           MOV       R1,A
   \   000059   12....       LCALL     `??touchLink_NewNwkUpdateId::?relay`; Banked call to: touchLink_NewNwkUpdateId
   \   00005C   E9           MOV       A,R1
   \   00005D   F5..         MOV       ?V2,A
   1552              if ( _NIB.nwkUpdateId != newUpdateId )
   \   00005F   90....       MOV       DPTR,#_NIB + 109
   \   000062   E0           MOVX      A,@DPTR
   \   000063   65..         XRL       A,?V2
   \   000065   6019         JZ        ??initiatorNwkUpdateReqCB_3
   1553              {
   1554                // Update the network update id and logical channel
   1555                touchLink_ProcessNwkUpdate( pReq->nwkUpdateId, pReq->logicalChannel );
   \   000067                ; Setup parameters for call to function touchLink_ProcessNwkUpdate
   \   000067   EE           MOV       A,R6
   \   000068   240D         ADD       A,#0xd
   \   00006A   F582         MOV       DPL,A
   \   00006C   E4           CLR       A
   \   00006D   3F           ADDC      A,R7
   \   00006E   F583         MOV       DPH,A
   \   000070   E0           MOVX      A,@DPTR
   \   000071   FA           MOV       R2,A
   \   000072   EE           MOV       A,R6
   \   000073   240C         ADD       A,#0xc
   \   000075   F582         MOV       DPL,A
   \   000077   E4           CLR       A
   \   000078   3F           ADDC      A,R7
   \   000079   F583         MOV       DPH,A
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   F9           MOV       R1,A
   \   00007D   12....       LCALL     `??touchLink_ProcessNwkUpdate::?relay`; Banked call to: touchLink_ProcessNwkUpdate
   1556              }
   1557            }
   1558          
   1559            return ( ZSuccess );
   \                     ??initiatorNwkUpdateReqCB_3:
   \   000080   7900         MOV       R1,#0x0
   \                     ??initiatorNwkUpdateReqCB_1:
   \   000082   7F03         MOV       R7,#0x3
   \   000084   02....       LJMP      ?BANKED_LEAVE_XDATA
   1560          }
   1561          
   1562          /*********************************************************************
   1563           * @fn      initiatorScanRspCB
   1564           *
   1565           * @brief   This callback is called to process a Scan Response command.
   1566           *
   1567           * @param   srcAddr - sender's address
   1568           * @param   pRsp - parsed command
   1569           *
   1570           * @return  ZStatus_t
   1571           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1572          static ZStatus_t initiatorScanRspCB( afAddrType_t *srcAddr, bdbTLScanRsp_t *pRsp )
   \                     initiatorScanRspCB:
   1573          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   1574            bdbFindingBindingRespondent_t *pCurr;
   1575            
   1576          //  printf("%d\n", touchLink_GetNwkKeyBitmask() );
   1577          //  printf("%d\n", pRsp->keyBitmask );
   1578          //  printf("%d\n", ( pRsp->keyBitmask & touchLink_GetNwkKeyBitmask() ) );
   1579            
   1580            if ( osal_get_timeoutEx( touchLinkInitiator_TaskID, TOUCHLINK_TL_SCAN_BASE_EVT )
   1581                 && ( touchLink_IsValidTransID( pRsp->transID ) )
   1582                 && ( pRsp->keyBitmask & touchLink_GetNwkKeyBitmask() ) )
   \   000012                ; Setup parameters for call to function osal_get_timeoutEx
   \   000012   7A20         MOV       R2,#0x20
   \   000014   7B00         MOV       R3,#0x0
   \   000016   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F9           MOV       R1,A
   \   00001B   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   00001E   EA           MOV       A,R2
   \   00001F   4B           ORL       A,R3
   \   000020   4C           ORL       A,R4
   \   000021   4D           ORL       A,R5
   \   000022   7003         JNZ       $+5
   \   000024   02....       LJMP      ??initiatorScanRspCB_0 & 0xFFFF
   \   000027                ; Setup parameters for call to function touchLink_IsValidTransID
   \   000027   8E82         MOV       DPL,R6
   \   000029   8F83         MOV       DPH,R7
   \   00002B   12....       LCALL     ?XLOAD_R2345
   \   00002E   12....       LCALL     `??touchLink_IsValidTransID::?relay`; Banked call to: touchLink_IsValidTransID
   \   000031   E9           MOV       A,R1
   \   000032   7003         JNZ       $+5
   \   000034   02....       LJMP      ??initiatorScanRspCB_0 & 0xFFFF
   \   000037                ; Setup parameters for call to function touchLink_GetNwkKeyBitmask
   \   000037   12....       LCALL     `??touchLink_GetNwkKeyBitmask::?relay`; Banked call to: touchLink_GetNwkKeyBitmask
   \   00003A   8A..         MOV       ?V0,R2
   \   00003C   8B..         MOV       ?V1,R3
   \   00003E   A8..         MOV       R0,?V0
   \   000040   A9..         MOV       R1,?V1
   \   000042   8E82         MOV       DPL,R6
   \   000044   8F83         MOV       DPH,R7
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   58           ANL       A,R0
   \   000051   F8           MOV       R0,A
   \   000052   A3           INC       DPTR
   \   000053   E0           MOVX      A,@DPTR
   \   000054   59           ANL       A,R1
   \   000055   F9           MOV       R1,A
   \   000056   E8           MOV       A,R0
   \   000057   49           ORL       A,R1
   \   000058   7003         JNZ       $+5
   \   00005A   02....       LJMP      ??initiatorScanRspCB_0 & 0xFFFF
   1583            {
   1584          
   1585              uint8 selectThisTarget = FALSE;
   \   00005D   75..00       MOV       ?V0,#0x0
   1586              int8 rssi = touchLink_GetMsgRssi();
   \   000060                ; Setup parameters for call to function touchLink_GetMsgRssi
   \   000060   12....       LCALL     `??touchLink_GetMsgRssi::?relay`; Banked call to: touchLink_GetMsgRssi
   \   000063   E9           MOV       A,R1
   \   000064   F5..         MOV       ?V1,A
   1587              if ( pfnSelectDiscDevCB != NULL )
   \   000066   90....       MOV       DPTR,#pfnSelectDiscDevCB
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   F8           MOV       R0,A
   \   00006B   A3           INC       DPTR
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   F9           MOV       R1,A
   \   00006E   E8           MOV       A,R0
   \   00006F   49           ORL       A,R1
   \   000070   6019         JZ        ??initiatorScanRspCB_1
   1588              {
   1589                selectThisTarget = pfnSelectDiscDevCB( pRsp, rssi );
   \   000072                ; Setup parameters for indirect call
   \   000072   A9..         MOV       R1,?V1
   \   000074   EE           MOV       A,R6
   \   000075   FA           MOV       R2,A
   \   000076   EF           MOV       A,R7
   \   000077   FB           MOV       R3,A
   \   000078   90....       MOV       DPTR,#pfnSelectDiscDevCB
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   F8           MOV       R0,A
   \   00007D   A3           INC       DPTR
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   F583         MOV       DPH,A
   \   000081   8882         MOV       DPL,R0
   \   000083   12....       LCALL     ?CALL_IND
   \   000086   E9           MOV       A,R1
   \   000087   F5..         MOV       ?V0,A
   \   000089   803D         SJMP      ??initiatorScanRspCB_2
   1590              }
   1591              // Default selection - according to RSSI
   1592              else if ( rssi > TOUCHLINK_WORST_RSSI )
   \                     ??initiatorScanRspCB_1:
   \   00008B   E5..         MOV       A,?V1
   \   00008D   C3           CLR       C
   \   00008E   94BB         SUBB      A,#-0x45
   \   000090   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000092   65D0         XRL       A,PSW
   \   000094   33           RLC       A
   \   000095   4031         JC        ??initiatorScanRspCB_2
   1593              {
   1594                if ( ( rssi + pRsp->rssiCorrection ) > selectedTarget.lastRssi )
   \   000097   90....       MOV       DPTR,#selectedTarget + 53
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   FA           MOV       R2,A
   \   00009C   33           RLC       A
   \   00009D   95E0         SUBB      A,0xE0 /* A   */
   \   00009F   FB           MOV       R3,A
   \   0000A0   E5..         MOV       A,?V1
   \   0000A2   F8           MOV       R0,A
   \   0000A3   33           RLC       A
   \   0000A4   95E0         SUBB      A,0xE0 /* A   */
   \   0000A6   F9           MOV       R1,A
   \   0000A7   8E82         MOV       DPL,R6
   \   0000A9   8F83         MOV       DPH,R7
   \   0000AB   A3           INC       DPTR
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   A3           INC       DPTR
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   FC           MOV       R4,A
   \   0000B1   7D00         MOV       R5,#0x0
   \   0000B3   E8           MOV       A,R0
   \   0000B4   2C           ADD       A,R4
   \   0000B5   F8           MOV       R0,A
   \   0000B6   E9           MOV       A,R1
   \   0000B7   3D           ADDC      A,R5
   \   0000B8   F9           MOV       R1,A
   \   0000B9   C3           CLR       C
   \   0000BA   EA           MOV       A,R2
   \   0000BB   98           SUBB      A,R0
   \   0000BC   EB           MOV       A,R3
   \   0000BD   99           SUBB      A,R1
   \   0000BE   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0000C0   65D0         XRL       A,PSW
   \   0000C2   33           RLC       A
   \   0000C3   5003         JNC       ??initiatorScanRspCB_2
   1595                {
   1596                  // Better RSSI, select this target
   1597                  selectThisTarget = TRUE;
   \   0000C5   75..01       MOV       ?V0,#0x1
   1598                }
   1599              }
   1600              
   1601              if ( selectThisTarget )
   \                     ??initiatorScanRspCB_2:
   \   0000C8   E5..         MOV       A,?V0
   \   0000CA   7003         JNZ       $+5
   \   0000CC   02....       LJMP      ??initiatorScanRspCB_3 & 0xFFFF
   1602              {
   1603                selectedTarget.scanRsp = *pRsp;
   \   0000CF   8E82         MOV       DPL,R6
   \   0000D1   8F83         MOV       DPH,R7
   \   0000D3   7C..         MOV       R4,#selectedTarget & 0xff
   \   0000D5   7D..         MOV       R5,#(selectedTarget >> 8) & 0xff
   \   0000D7   7426         MOV       A,#0x26
   \   0000D9   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1604                selectedTarget.lastRssi = rssi;
   \   0000DC   E5..         MOV       A,?V1
   \   0000DE   90....       MOV       DPTR,#selectedTarget + 53
   \   0000E1   F0           MOVX      @DPTR,A
   1605                selectedTarget.srcAddr = *srcAddr;
   \   0000E2   85..82       MOV       DPL,?V2
   \   0000E5   85..83       MOV       DPH,?V3
   \   0000E8   7C..         MOV       R4,#(selectedTarget + 38) & 0xff
   \   0000EA   7D..         MOV       R5,#((selectedTarget + 38) >> 8) & 0xff
   \   0000EC   740C         MOV       A,#0xc
   \   0000EE   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1606                selectedTarget.srcAddr.panId = 0xFFFF;
   \   0000F1   90....       MOV       DPTR,#selectedTarget + 48
   \   0000F4   74FF         MOV       A,#-0x1
   \   0000F6   F0           MOVX      @DPTR,A
   \   0000F7   A3           INC       DPTR
   \   0000F8   74FF         MOV       A,#-0x1
   \   0000FA   F0           MOVX      @DPTR,A
   1607                touchLinkResponseID = pRsp->responseID;
   \   0000FB   EE           MOV       A,R6
   \   0000FC   240B         ADD       A,#0xb
   \   0000FE   F582         MOV       DPL,A
   \   000100   E4           CLR       A
   \   000101   3F           ADDC      A,R7
   \   000102   F583         MOV       DPH,A
   \   000104   12....       LCALL     ?XLOAD_R0123
   \   000107   90....       MOV       DPTR,#touchLinkResponseID
   \   00010A   12....       LCALL     ?XSTORE_R0123
   1608                touchLinkTransID = pRsp->transID;
   \   00010D   8E82         MOV       DPL,R6
   \   00010F   8F83         MOV       DPH,R7
   \   000111   12....       LCALL     ?XLOAD_R0123
   \   000114   90....       MOV       DPTR,#touchLinkTransID
   \   000117   12....       LCALL     ?XSTORE_R0123
   1609                printf("%d\n", pRsp->logicalChannel );
   \   00011A                ; Setup parameters for call to function printf
   \   00011A   EE           MOV       A,R6
   \   00011B   2418         ADD       A,#0x18
   \   00011D   F582         MOV       DPL,A
   \   00011F   E4           CLR       A
   \   000120   3F           ADDC      A,R7
   \   000121   F583         MOV       DPH,A
   \   000123   E0           MOVX      A,@DPTR
   \   000124   F5..         MOV       ?V6,A
   \   000126   75..00       MOV       ?V7,#0x0
   \   000129   78..         MOV       R0,#?V6
   \   00012B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012E   7A..         MOV       R2,#`?<Constant "%d\\n">` & 0xff
   \   000130   7B..         MOV       R3,#(`?<Constant "%d\\n">` >> 8) & 0xff
   \   000132   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   000135   7402         MOV       A,#0x2
   \   000137   12....       LCALL     ?DEALLOC_XSTACK8
   1610          
   1611                // Remember channel we heard back this scan response on
   1612                ZMacGetReq( ZMacChannel, &(selectedTarget.rxChannel));
   \   00013A                ; Setup parameters for call to function ZMacGetReq
   \   00013A   7A..         MOV       R2,#(selectedTarget + 52) & 0xff
   \   00013C   7B..         MOV       R3,#((selectedTarget + 52) >> 8) & 0xff
   \   00013E   79E1         MOV       R1,#-0x1f
   \   000140   12....       LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
   \   000143   E9           MOV       A,R1
   1613          
   1614                if ( pRsp->numSubDevices > 1 )
   \   000144   EE           MOV       A,R6
   \   000145   241D         ADD       A,#0x1d
   \   000147   F582         MOV       DPL,A
   \   000149   E4           CLR       A
   \   00014A   3F           ADDC      A,R7
   \   00014B   F583         MOV       DPH,A
   \   00014D   E0           MOVX      A,@DPTR
   \   00014E   C3           CLR       C
   \   00014F   9402         SUBB      A,#0x2
   \   000151   4047         JC        ??initiatorScanRspCB_4
   1615                {
   1616                  selectedTarget.scanRsp.deviceInfo.endpoint = DEV_INFO_INVALID_EP;
   \   000153   90....       MOV       DPTR,#selectedTarget + 31
   \   000156   74FE         MOV       A,#-0x2
   \   000158   F0           MOVX      @DPTR,A
   1617          
   1618                  bdbTLDeviceInfoReq_t devInfoReq;
   1619                  devInfoReq.transID = pRsp->transID;
   \   000159   8E82         MOV       DPL,R6
   \   00015B   8F83         MOV       DPH,R7
   \   00015D   12....       LCALL     ?XLOAD_R0123
   \   000160   85..82       MOV       DPL,?XSP + 0
   \   000163   85..83       MOV       DPH,?XSP + 1
   \   000166   12....       LCALL     ?XSTORE_R0123
   1620                  devInfoReq.startIndex = 0;
   \   000169   7404         MOV       A,#0x4
   \   00016B   12....       LCALL     ?XSTACK_DISP0_8
   \   00016E   7400         MOV       A,#0x0
   \   000170   F0           MOVX      @DPTR,A
   1621          
   1622                  return bdbTL_Send_DeviceInfoReq( TOUCHLINK_INTERNAL_ENDPOINT, srcAddr,
   1623                                              &devInfoReq, initiatorSeqNum++ );
   \   000171   90....       MOV       DPTR,#initiatorSeqNum
   \   000174   E0           MOVX      A,@DPTR
   \   000175   F8           MOV       R0,A
   \   000176   7401         MOV       A,#0x1
   \   000178   28           ADD       A,R0
   \   000179   90....       MOV       DPTR,#initiatorSeqNum
   \   00017C   F0           MOVX      @DPTR,A
   \   00017D                ; Setup parameters for call to function bdbTL_Send_DeviceInfoReq
   \   00017D   E8           MOV       A,R0
   \   00017E   F5..         MOV       ?V6,A
   \   000180   78..         MOV       R0,#?V6
   \   000182   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000185   7401         MOV       A,#0x1
   \   000187   12....       LCALL     ?XSTACK_DISP102_8
   \   00018A   AA..         MOV       R2,?V2
   \   00018C   AB..         MOV       R3,?V3
   \   00018E   790D         MOV       R1,#0xd
   \   000190   12....       LCALL     `??bdbTL_Send_DeviceInfoReq::?relay`; Banked call to: bdbTL_Send_DeviceInfoReq
   \   000193   7401         MOV       A,#0x1
   \   000195   12....       LCALL     ?DEALLOC_XSTACK8
   \   000198   8069         SJMP      ??initiatorScanRspCB_5
   1624                }
   1625                  
   1626                // add new node to the list
   1627                pCurr = bdb_AddRespondentNode( &pRespondentHead, NULL );
   \                     ??initiatorScanRspCB_4:
   \   00019A                ; Setup parameters for call to function bdb_AddRespondentNode
   \   00019A   7C00         MOV       R4,#0x0
   \   00019C   7D00         MOV       R5,#0x0
   \   00019E   7A..         MOV       R2,#pRespondentHead & 0xff
   \   0001A0   7B..         MOV       R3,#(pRespondentHead >> 8) & 0xff
   \   0001A2   12....       LCALL     `??bdb_AddRespondentNode::?relay`; Banked call to: bdb_AddRespondentNode
   \   0001A5   8A..         MOV       ?V6,R2
   \   0001A7   8B..         MOV       ?V7,R3
   \   0001A9   85....       MOV       ?V4,?V6
   \   0001AC   85....       MOV       ?V5,?V7
   1628                
   1629                if ( pCurr != NULL )
   \   0001AF   E5..         MOV       A,?V4
   \   0001B1   45..         ORL       A,?V5
   \   0001B3   6048         JZ        ??initiatorScanRspCB_3
   1630                {
   1631                  pCurr->data.endPoint = pRsp->deviceInfo.endpoint;
   \   0001B5   EE           MOV       A,R6
   \   0001B6   241F         ADD       A,#0x1f
   \   0001B8   F582         MOV       DPL,A
   \   0001BA   E4           CLR       A
   \   0001BB   3F           ADDC      A,R7
   \   0001BC   F583         MOV       DPH,A
   \   0001BE   E0           MOVX      A,@DPTR
   \   0001BF   C0E0         PUSH      A
   \   0001C1   85..82       MOV       DPL,?V4
   \   0001C4   85..83       MOV       DPH,?V5
   \   0001C7   A3           INC       DPTR
   \   0001C8   A3           INC       DPTR
   \   0001C9   A3           INC       DPTR
   \   0001CA   A3           INC       DPTR
   \   0001CB   A3           INC       DPTR
   \   0001CC   A3           INC       DPTR
   \   0001CD   A3           INC       DPTR
   \   0001CE   A3           INC       DPTR
   \   0001CF   A3           INC       DPTR
   \   0001D0   D0E0         POP       A
   \   0001D2   F0           MOVX      @DPTR,A
   1632                  pCurr->data.panId = srcAddr->panId;
   \   0001D3   85..82       MOV       DPL,?V2
   \   0001D6   85..83       MOV       DPH,?V3
   \   0001D9   A3           INC       DPTR
   \   0001DA   A3           INC       DPTR
   \   0001DB   A3           INC       DPTR
   \   0001DC   A3           INC       DPTR
   \   0001DD   A3           INC       DPTR
   \   0001DE   A3           INC       DPTR
   \   0001DF   A3           INC       DPTR
   \   0001E0   A3           INC       DPTR
   \   0001E1   A3           INC       DPTR
   \   0001E2   A3           INC       DPTR
   \   0001E3   E0           MOVX      A,@DPTR
   \   0001E4   F8           MOV       R0,A
   \   0001E5   A3           INC       DPTR
   \   0001E6   E0           MOVX      A,@DPTR
   \   0001E7   F9           MOV       R1,A
   \   0001E8   85..82       MOV       DPL,?V4
   \   0001EB   85..83       MOV       DPH,?V5
   \   0001EE   A3           INC       DPTR
   \   0001EF   A3           INC       DPTR
   \   0001F0   A3           INC       DPTR
   \   0001F1   A3           INC       DPTR
   \   0001F2   A3           INC       DPTR
   \   0001F3   A3           INC       DPTR
   \   0001F4   A3           INC       DPTR
   \   0001F5   A3           INC       DPTR
   \   0001F6   A3           INC       DPTR
   \   0001F7   A3           INC       DPTR
   \   0001F8   E8           MOV       A,R0
   \   0001F9   F0           MOVX      @DPTR,A
   \   0001FA   A3           INC       DPTR
   \   0001FB   E9           MOV       A,R1
   \   0001FC   F0           MOVX      @DPTR,A
   1633                }
   1634              }
   1635              return ( ZSuccess );
   \                     ??initiatorScanRspCB_3:
   \   0001FD   7900         MOV       R1,#0x0
   \   0001FF   8002         SJMP      ??initiatorScanRspCB_5
   1636            }
   1637          
   1638            return ( ZFailure );
   \                     ??initiatorScanRspCB_0:
   \   000201   7901         MOV       R1,#0x1
   \                     ??initiatorScanRspCB_5:
   \   000203   7405         MOV       A,#0x5
   \   000205   12....       LCALL     ?DEALLOC_XSTACK8
   \   000208   7F08         MOV       R7,#0x8
   \   00020A   02....       LJMP      ?BANKED_LEAVE_XDATA
   1639          }
   1640          
   1641          /*********************************************************************
   1642           * @fn      initiatorDeviceInfoRspCB
   1643           *
   1644           * @brief   This callback is called to process a Device Information
   1645           *          Response command.
   1646           *          If sub-device is selected, selectedTarget data is updated.
   1647           *
   1648           * @param   srcAddr - sender's address
   1649           * @param   pRsp - parsed command
   1650           *
   1651           * @return  ZStatus_t
   1652           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1653          static ZStatus_t initiatorDeviceInfoRspCB( afAddrType_t *srcAddr, bdbTLDeviceInfoRsp_t *pRsp )
   \                     initiatorDeviceInfoRspCB:
   1654          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 38
   \   000005   74DA         MOV       A,#-0x26
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   1655            bdbFindingBindingRespondent_t *pCurr;
   1656            
   1657            if ( touchLink_IsValidTransID( pRsp->transID )
   1658                 && ( srcAddr->addr.shortAddr == selectedTarget.srcAddr.addr.shortAddr ) )
   \   000012                ; Setup parameters for call to function touchLink_IsValidTransID
   \   000012   8E82         MOV       DPL,R6
   \   000014   8F83         MOV       DPH,R7
   \   000016   12....       LCALL     ?XLOAD_R2345
   \   000019   12....       LCALL     `??touchLink_IsValidTransID::?relay`; Banked call to: touchLink_IsValidTransID
   \   00001C   E9           MOV       A,R1
   \   00001D   7003         JNZ       $+5
   \   00001F   02....       LJMP      ??initiatorDeviceInfoRspCB_0 & 0xFFFF
   \   000022   85..82       MOV       DPL,?V4
   \   000025   85..83       MOV       DPH,?V5
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F8           MOV       R0,A
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F9           MOV       R1,A
   \   00002D   90....       MOV       DPTR,#selectedTarget + 38
   \   000030   E0           MOVX      A,@DPTR
   \   000031   68           XRL       A,R0
   \   000032   7003         JNZ       ??initiatorDeviceInfoRspCB_1
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   69           XRL       A,R1
   \                     ??initiatorDeviceInfoRspCB_1:
   \   000037   6003         JZ        $+5
   \   000039   02....       LJMP      ??initiatorDeviceInfoRspCB_0 & 0xFFFF
   1659            {
   1660              uint8 i;
   1661              uint8 selectedIdx = pRsp->cnt;
   \   00003C   8E82         MOV       DPL,R6
   \   00003E   8F83         MOV       DPH,R7
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F5..         MOV       ?V1,A
   1662              bdbTLScanRsp_t tmpInfo = selectedTarget.scanRsp;
   \   000049   90....       MOV       DPTR,#selectedTarget
   \   00004C   AC..         MOV       R4,?XSP + 0
   \   00004E   AD..         MOV       R5,?XSP + 1
   \   000050   7426         MOV       A,#0x26
   \   000052   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1663          
   1664              for ( i = 0; i < pRsp->cnt; ++i )
   \   000055   75..00       MOV       ?V0,#0x0
   \                     ??initiatorDeviceInfoRspCB_2:
   \   000058   8E82         MOV       DPL,R6
   \   00005A   8F83         MOV       DPH,R7
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F8           MOV       R0,A
   \   000064   E5..         MOV       A,?V0
   \   000066   C3           CLR       C
   \   000067   98           SUBB      A,R0
   \   000068   4003         JC        $+5
   \   00006A   02....       LJMP      ??initiatorDeviceInfoRspCB_3 & 0xFFFF
   1665              {
   1666                if ( pfnSelectDiscDevCB != NULL )
   \   00006D   90....       MOV       DPTR,#pfnSelectDiscDevCB
   \   000070   E0           MOVX      A,@DPTR
   \   000071   F8           MOV       R0,A
   \   000072   A3           INC       DPTR
   \   000073   E0           MOVX      A,@DPTR
   \   000074   F9           MOV       R1,A
   \   000075   E8           MOV       A,R0
   \   000076   49           ORL       A,R1
   \   000077   605E         JZ        ??initiatorDeviceInfoRspCB_4
   1667                {
   1668                  tmpInfo.deviceInfo = pRsp->devInfoRec[i].deviceInfo;
   \   000079   E5..         MOV       A,?V0
   \   00007B   F8           MOV       R0,A
   \   00007C   7900         MOV       R1,#0x0
   \   00007E   E8           MOV       A,R0
   \   00007F   75F010       MOV       B,#0x10
   \   000082   A4           MUL       AB
   \   000083   C8           XCH       A,R0
   \   000084   AAF0         MOV       R2,B
   \   000086   75F000       MOV       B,#0x0
   \   000089   A4           MUL       AB
   \   00008A   2A           ADD       A,R2
   \   00008B   FA           MOV       R2,A
   \   00008C   75F010       MOV       B,#0x10
   \   00008F   E9           MOV       A,R1
   \   000090   A4           MUL       AB
   \   000091   2A           ADD       A,R2
   \   000092   F9           MOV       R1,A
   \   000093   EE           MOV       A,R6
   \   000094   28           ADD       A,R0
   \   000095   F8           MOV       R0,A
   \   000096   EF           MOV       A,R7
   \   000097   39           ADDC      A,R1
   \   000098   F9           MOV       R1,A
   \   000099   E8           MOV       A,R0
   \   00009A   240F         ADD       A,#0xf
   \   00009C   F582         MOV       DPL,A
   \   00009E   E4           CLR       A
   \   00009F   39           ADDC      A,R1
   \   0000A0   F583         MOV       DPH,A
   \   0000A2   C082         PUSH      DPL
   \   0000A4   C083         PUSH      DPH
   \   0000A6   741F         MOV       A,#0x1f
   \   0000A8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AB   AC82         MOV       R4,DPL
   \   0000AD   AD83         MOV       R5,DPH
   \   0000AF   D083         POP       DPH
   \   0000B1   D082         POP       DPL
   \   0000B3   7407         MOV       A,#0x7
   \   0000B5   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1669                  if ( pfnSelectDiscDevCB( &tmpInfo, selectedTarget.lastRssi ) )
   \   0000B8                ; Setup parameters for indirect call
   \   0000B8   90....       MOV       DPTR,#selectedTarget + 53
   \   0000BB   E0           MOVX      A,@DPTR
   \   0000BC   F9           MOV       R1,A
   \   0000BD   AA..         MOV       R2,?XSP + 0
   \   0000BF   AB..         MOV       R3,?XSP + 1
   \   0000C1   90....       MOV       DPTR,#pfnSelectDiscDevCB
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   F8           MOV       R0,A
   \   0000C6   A3           INC       DPTR
   \   0000C7   E0           MOVX      A,@DPTR
   \   0000C8   F583         MOV       DPH,A
   \   0000CA   8882         MOV       DPL,R0
   \   0000CC   12....       LCALL     ?CALL_IND
   \   0000CF   E9           MOV       A,R1
   \   0000D0   6072         JZ        ??initiatorDeviceInfoRspCB_5
   1670                  {
   1671                    selectedIdx = i;
   \   0000D2   85....       MOV       ?V1,?V0
   \   0000D5   806D         SJMP      ??initiatorDeviceInfoRspCB_5
   1672                    // no break here to allow cycling through all sub-devices
   1673                  }
   1674                }
   1675                else
   1676                {
   1677                  if ( ( pRsp->devInfoRec[i].deviceInfo.profileID == TOUCHLINK_PROFILE_ID ) ||
   1678                       ( pRsp->devInfoRec[i].deviceInfo.profileID == Z3_PROFILE_ID ) )
   \                     ??initiatorDeviceInfoRspCB_4:
   \   0000D7   E5..         MOV       A,?V0
   \   0000D9   F8           MOV       R0,A
   \   0000DA   7900         MOV       R1,#0x0
   \   0000DC   E8           MOV       A,R0
   \   0000DD   75F010       MOV       B,#0x10
   \   0000E0   A4           MUL       AB
   \   0000E1   C8           XCH       A,R0
   \   0000E2   AAF0         MOV       R2,B
   \   0000E4   75F000       MOV       B,#0x0
   \   0000E7   A4           MUL       AB
   \   0000E8   2A           ADD       A,R2
   \   0000E9   FA           MOV       R2,A
   \   0000EA   75F010       MOV       B,#0x10
   \   0000ED   E9           MOV       A,R1
   \   0000EE   A4           MUL       AB
   \   0000EF   2A           ADD       A,R2
   \   0000F0   F9           MOV       R1,A
   \   0000F1   EE           MOV       A,R6
   \   0000F2   28           ADD       A,R0
   \   0000F3   F8           MOV       R0,A
   \   0000F4   EF           MOV       A,R7
   \   0000F5   39           ADDC      A,R1
   \   0000F6   F9           MOV       R1,A
   \   0000F7   E8           MOV       A,R0
   \   0000F8   2410         ADD       A,#0x10
   \   0000FA   F582         MOV       DPL,A
   \   0000FC   E4           CLR       A
   \   0000FD   39           ADDC      A,R1
   \   0000FE   F583         MOV       DPH,A
   \   000100   E0           MOVX      A,@DPTR
   \   000101   645E         XRL       A,#0x5e
   \   000103   7004         JNZ       ??initiatorDeviceInfoRspCB_6
   \   000105   A3           INC       DPTR
   \   000106   E0           MOVX      A,@DPTR
   \   000107   64C0         XRL       A,#0xc0
   \                     ??initiatorDeviceInfoRspCB_6:
   \   000109   6034         JZ        ??initiatorDeviceInfoRspCB_7
   \   00010B   E5..         MOV       A,?V0
   \   00010D   F8           MOV       R0,A
   \   00010E   7900         MOV       R1,#0x0
   \   000110   E8           MOV       A,R0
   \   000111   75F010       MOV       B,#0x10
   \   000114   A4           MUL       AB
   \   000115   C8           XCH       A,R0
   \   000116   AAF0         MOV       R2,B
   \   000118   75F000       MOV       B,#0x0
   \   00011B   A4           MUL       AB
   \   00011C   2A           ADD       A,R2
   \   00011D   FA           MOV       R2,A
   \   00011E   75F010       MOV       B,#0x10
   \   000121   E9           MOV       A,R1
   \   000122   A4           MUL       AB
   \   000123   2A           ADD       A,R2
   \   000124   F9           MOV       R1,A
   \   000125   EE           MOV       A,R6
   \   000126   28           ADD       A,R0
   \   000127   F8           MOV       R0,A
   \   000128   EF           MOV       A,R7
   \   000129   39           ADDC      A,R1
   \   00012A   F9           MOV       R1,A
   \   00012B   E8           MOV       A,R0
   \   00012C   2410         ADD       A,#0x10
   \   00012E   F582         MOV       DPL,A
   \   000130   E4           CLR       A
   \   000131   39           ADDC      A,R1
   \   000132   F583         MOV       DPH,A
   \   000134   E0           MOVX      A,@DPTR
   \   000135   6404         XRL       A,#0x4
   \   000137   7004         JNZ       ??initiatorDeviceInfoRspCB_8
   \   000139   A3           INC       DPTR
   \   00013A   E0           MOVX      A,@DPTR
   \   00013B   6401         XRL       A,#0x1
   \                     ??initiatorDeviceInfoRspCB_8:
   \   00013D   7005         JNZ       ??initiatorDeviceInfoRspCB_5
   1679                  {
   1680                    selectedIdx = i;
   \                     ??initiatorDeviceInfoRspCB_7:
   \   00013F   85....       MOV       ?V1,?V0
   1681                    break; // first match
   \   000142   8005         SJMP      ??initiatorDeviceInfoRspCB_3
   1682                  }
   1683                }
   1684              }
   \                     ??initiatorDeviceInfoRspCB_5:
   \   000144   05..         INC       ?V0
   \   000146   02....       LJMP      ??initiatorDeviceInfoRspCB_2 & 0xFFFF
   1685              if ( selectedIdx < pRsp->cnt )
   \                     ??initiatorDeviceInfoRspCB_3:
   \   000149   8E82         MOV       DPL,R6
   \   00014B   8F83         MOV       DPH,R7
   \   00014D   A3           INC       DPTR
   \   00014E   A3           INC       DPTR
   \   00014F   A3           INC       DPTR
   \   000150   A3           INC       DPTR
   \   000151   A3           INC       DPTR
   \   000152   A3           INC       DPTR
   \   000153   E0           MOVX      A,@DPTR
   \   000154   F8           MOV       R0,A
   \   000155   E5..         MOV       A,?V1
   \   000157   C3           CLR       C
   \   000158   98           SUBB      A,R0
   \   000159   4003         JC        $+5
   \   00015B   02....       LJMP      ??initiatorDeviceInfoRspCB_9 & 0xFFFF
   1686              {
   1687                // NOTE - the original scan response device info is overwritten with the
   1688                // selected sub-device info, to complete the data required for the application.
   1689                selectedTarget.scanRsp.deviceInfo = pRsp->devInfoRec[selectedIdx].deviceInfo;
   \   00015E   E5..         MOV       A,?V1
   \   000160   F8           MOV       R0,A
   \   000161   7900         MOV       R1,#0x0
   \   000163   E8           MOV       A,R0
   \   000164   75F010       MOV       B,#0x10
   \   000167   A4           MUL       AB
   \   000168   C8           XCH       A,R0
   \   000169   AAF0         MOV       R2,B
   \   00016B   75F000       MOV       B,#0x0
   \   00016E   A4           MUL       AB
   \   00016F   2A           ADD       A,R2
   \   000170   FA           MOV       R2,A
   \   000171   75F010       MOV       B,#0x10
   \   000174   E9           MOV       A,R1
   \   000175   A4           MUL       AB
   \   000176   2A           ADD       A,R2
   \   000177   F9           MOV       R1,A
   \   000178   EE           MOV       A,R6
   \   000179   28           ADD       A,R0
   \   00017A   F8           MOV       R0,A
   \   00017B   EF           MOV       A,R7
   \   00017C   39           ADDC      A,R1
   \   00017D   F9           MOV       R1,A
   \   00017E   E8           MOV       A,R0
   \   00017F   240F         ADD       A,#0xf
   \   000181   F582         MOV       DPL,A
   \   000183   E4           CLR       A
   \   000184   39           ADDC      A,R1
   \   000185   F583         MOV       DPH,A
   \   000187   7C..         MOV       R4,#(selectedTarget + 31) & 0xff
   \   000189   7D..         MOV       R5,#((selectedTarget + 31) >> 8) & 0xff
   \   00018B   7407         MOV       A,#0x7
   \   00018D   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1690                
   1691                for ( i = 0; i < pRsp->cnt; ++i )
   \   000190   75..00       MOV       ?V0,#0x0
   \                     ??initiatorDeviceInfoRspCB_10:
   \   000193   8E82         MOV       DPL,R6
   \   000195   8F83         MOV       DPH,R7
   \   000197   A3           INC       DPTR
   \   000198   A3           INC       DPTR
   \   000199   A3           INC       DPTR
   \   00019A   A3           INC       DPTR
   \   00019B   A3           INC       DPTR
   \   00019C   A3           INC       DPTR
   \   00019D   E0           MOVX      A,@DPTR
   \   00019E   F8           MOV       R0,A
   \   00019F   E5..         MOV       A,?V0
   \   0001A1   C3           CLR       C
   \   0001A2   98           SUBB      A,R0
   \   0001A3   4003         JC        $+5
   \   0001A5   02....       LJMP      ??initiatorDeviceInfoRspCB_11 & 0xFFFF
   1692                {
   1693                  if ( ( pRsp->devInfoRec[i].deviceInfo.profileID == TOUCHLINK_PROFILE_ID ) ||
   1694                       ( pRsp->devInfoRec[i].deviceInfo.profileID == Z3_PROFILE_ID ) )
   \   0001A8   E5..         MOV       A,?V0
   \   0001AA   F8           MOV       R0,A
   \   0001AB   7900         MOV       R1,#0x0
   \   0001AD   E8           MOV       A,R0
   \   0001AE   75F010       MOV       B,#0x10
   \   0001B1   A4           MUL       AB
   \   0001B2   C8           XCH       A,R0
   \   0001B3   AAF0         MOV       R2,B
   \   0001B5   75F000       MOV       B,#0x0
   \   0001B8   A4           MUL       AB
   \   0001B9   2A           ADD       A,R2
   \   0001BA   FA           MOV       R2,A
   \   0001BB   75F010       MOV       B,#0x10
   \   0001BE   E9           MOV       A,R1
   \   0001BF   A4           MUL       AB
   \   0001C0   2A           ADD       A,R2
   \   0001C1   F9           MOV       R1,A
   \   0001C2   EE           MOV       A,R6
   \   0001C3   28           ADD       A,R0
   \   0001C4   F8           MOV       R0,A
   \   0001C5   EF           MOV       A,R7
   \   0001C6   39           ADDC      A,R1
   \   0001C7   F9           MOV       R1,A
   \   0001C8   E8           MOV       A,R0
   \   0001C9   2410         ADD       A,#0x10
   \   0001CB   F582         MOV       DPL,A
   \   0001CD   E4           CLR       A
   \   0001CE   39           ADDC      A,R1
   \   0001CF   F583         MOV       DPH,A
   \   0001D1   E0           MOVX      A,@DPTR
   \   0001D2   645E         XRL       A,#0x5e
   \   0001D4   7004         JNZ       ??initiatorDeviceInfoRspCB_12
   \   0001D6   A3           INC       DPTR
   \   0001D7   E0           MOVX      A,@DPTR
   \   0001D8   64C0         XRL       A,#0xc0
   \                     ??initiatorDeviceInfoRspCB_12:
   \   0001DA   6037         JZ        ??initiatorDeviceInfoRspCB_13
   \   0001DC   E5..         MOV       A,?V0
   \   0001DE   F8           MOV       R0,A
   \   0001DF   7900         MOV       R1,#0x0
   \   0001E1   E8           MOV       A,R0
   \   0001E2   75F010       MOV       B,#0x10
   \   0001E5   A4           MUL       AB
   \   0001E6   C8           XCH       A,R0
   \   0001E7   AAF0         MOV       R2,B
   \   0001E9   75F000       MOV       B,#0x0
   \   0001EC   A4           MUL       AB
   \   0001ED   2A           ADD       A,R2
   \   0001EE   FA           MOV       R2,A
   \   0001EF   75F010       MOV       B,#0x10
   \   0001F2   E9           MOV       A,R1
   \   0001F3   A4           MUL       AB
   \   0001F4   2A           ADD       A,R2
   \   0001F5   F9           MOV       R1,A
   \   0001F6   EE           MOV       A,R6
   \   0001F7   28           ADD       A,R0
   \   0001F8   F8           MOV       R0,A
   \   0001F9   EF           MOV       A,R7
   \   0001FA   39           ADDC      A,R1
   \   0001FB   F9           MOV       R1,A
   \   0001FC   E8           MOV       A,R0
   \   0001FD   2410         ADD       A,#0x10
   \   0001FF   F582         MOV       DPL,A
   \   000201   E4           CLR       A
   \   000202   39           ADDC      A,R1
   \   000203   F583         MOV       DPH,A
   \   000205   E0           MOVX      A,@DPTR
   \   000206   6404         XRL       A,#0x4
   \   000208   7004         JNZ       ??initiatorDeviceInfoRspCB_14
   \   00020A   A3           INC       DPTR
   \   00020B   E0           MOVX      A,@DPTR
   \   00020C   6401         XRL       A,#0x1
   \                     ??initiatorDeviceInfoRspCB_14:
   \   00020E   6003         JZ        $+5
   \   000210   02....       LJMP      ??initiatorDeviceInfoRspCB_15 & 0xFFFF
   1695                  {
   1696                    // add new node to the list
   1697                    pCurr = bdb_AddRespondentNode( &pRespondentHead, NULL );
   \                     ??initiatorDeviceInfoRspCB_13:
   \   000213                ; Setup parameters for call to function bdb_AddRespondentNode
   \   000213   7C00         MOV       R4,#0x0
   \   000215   7D00         MOV       R5,#0x0
   \   000217   7A..         MOV       R2,#pRespondentHead & 0xff
   \   000219   7B..         MOV       R3,#(pRespondentHead >> 8) & 0xff
   \   00021B   12....       LCALL     `??bdb_AddRespondentNode::?relay`; Banked call to: bdb_AddRespondentNode
   \   00021E   8A..         MOV       ?V6,R2
   \   000220   8B..         MOV       ?V7,R3
   \   000222   85....       MOV       ?V2,?V6
   \   000225   85....       MOV       ?V3,?V7
   1698                    
   1699                    if ( pCurr != NULL )
   \   000228   E5..         MOV       A,?V2
   \   00022A   45..         ORL       A,?V3
   \   00022C   7003         JNZ       $+5
   \   00022E   02....       LJMP      ??initiatorDeviceInfoRspCB_15 & 0xFFFF
   1700                    {
   1701                      osal_memset(pCurr, 0x00, sizeof(bdbFindingBindingRespondent_t));
   \   000231                ; Setup parameters for call to function osal_memset
   \   000231   7C11         MOV       R4,#0x11
   \   000233   7D00         MOV       R5,#0x0
   \   000235   7900         MOV       R1,#0x0
   \   000237   AA..         MOV       R2,?V2
   \   000239   AB..         MOV       R3,?V3
   \   00023B   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1702                      pCurr->data.endPoint = pRsp->devInfoRec[i].deviceInfo.endpoint;
   \   00023E   E5..         MOV       A,?V0
   \   000240   F8           MOV       R0,A
   \   000241   7900         MOV       R1,#0x0
   \   000243   E8           MOV       A,R0
   \   000244   75F010       MOV       B,#0x10
   \   000247   A4           MUL       AB
   \   000248   C8           XCH       A,R0
   \   000249   AAF0         MOV       R2,B
   \   00024B   75F000       MOV       B,#0x0
   \   00024E   A4           MUL       AB
   \   00024F   2A           ADD       A,R2
   \   000250   FA           MOV       R2,A
   \   000251   75F010       MOV       B,#0x10
   \   000254   E9           MOV       A,R1
   \   000255   A4           MUL       AB
   \   000256   2A           ADD       A,R2
   \   000257   F9           MOV       R1,A
   \   000258   EE           MOV       A,R6
   \   000259   28           ADD       A,R0
   \   00025A   F8           MOV       R0,A
   \   00025B   EF           MOV       A,R7
   \   00025C   39           ADDC      A,R1
   \   00025D   F9           MOV       R1,A
   \   00025E   E8           MOV       A,R0
   \   00025F   240F         ADD       A,#0xf
   \   000261   F582         MOV       DPL,A
   \   000263   E4           CLR       A
   \   000264   39           ADDC      A,R1
   \   000265   F583         MOV       DPH,A
   \   000267   E0           MOVX      A,@DPTR
   \   000268   C0E0         PUSH      A
   \   00026A   85..82       MOV       DPL,?V2
   \   00026D   85..83       MOV       DPH,?V3
   \   000270   A3           INC       DPTR
   \   000271   A3           INC       DPTR
   \   000272   A3           INC       DPTR
   \   000273   A3           INC       DPTR
   \   000274   A3           INC       DPTR
   \   000275   A3           INC       DPTR
   \   000276   A3           INC       DPTR
   \   000277   A3           INC       DPTR
   \   000278   A3           INC       DPTR
   \   000279   D0E0         POP       A
   \   00027B   F0           MOVX      @DPTR,A
   1703                      pCurr->data.panId = srcAddr->panId;
   \   00027C   85..82       MOV       DPL,?V4
   \   00027F   85..83       MOV       DPH,?V5
   \   000282   A3           INC       DPTR
   \   000283   A3           INC       DPTR
   \   000284   A3           INC       DPTR
   \   000285   A3           INC       DPTR
   \   000286   A3           INC       DPTR
   \   000287   A3           INC       DPTR
   \   000288   A3           INC       DPTR
   \   000289   A3           INC       DPTR
   \   00028A   A3           INC       DPTR
   \   00028B   A3           INC       DPTR
   \   00028C   E0           MOVX      A,@DPTR
   \   00028D   F8           MOV       R0,A
   \   00028E   A3           INC       DPTR
   \   00028F   E0           MOVX      A,@DPTR
   \   000290   F9           MOV       R1,A
   \   000291   85..82       MOV       DPL,?V2
   \   000294   85..83       MOV       DPH,?V3
   \   000297   A3           INC       DPTR
   \   000298   A3           INC       DPTR
   \   000299   A3           INC       DPTR
   \   00029A   A3           INC       DPTR
   \   00029B   A3           INC       DPTR
   \   00029C   A3           INC       DPTR
   \   00029D   A3           INC       DPTR
   \   00029E   A3           INC       DPTR
   \   00029F   A3           INC       DPTR
   \   0002A0   A3           INC       DPTR
   \   0002A1   E8           MOV       A,R0
   \   0002A2   F0           MOVX      @DPTR,A
   \   0002A3   A3           INC       DPTR
   \   0002A4   E9           MOV       A,R1
   \   0002A5   F0           MOVX      @DPTR,A
   1704                      osal_cpyExtAddr(selectedTargetIEEEAddr, pRsp->devInfoRec[i].ieeeAddr);
   \   0002A6                ; Setup parameters for call to function sAddrExtCpy
   \   0002A6   E5..         MOV       A,?V0
   \   0002A8   F8           MOV       R0,A
   \   0002A9   7900         MOV       R1,#0x0
   \   0002AB   E8           MOV       A,R0
   \   0002AC   75F010       MOV       B,#0x10
   \   0002AF   A4           MUL       AB
   \   0002B0   C8           XCH       A,R0
   \   0002B1   AAF0         MOV       R2,B
   \   0002B3   75F000       MOV       B,#0x0
   \   0002B6   A4           MUL       AB
   \   0002B7   2A           ADD       A,R2
   \   0002B8   FA           MOV       R2,A
   \   0002B9   75F010       MOV       B,#0x10
   \   0002BC   E9           MOV       A,R1
   \   0002BD   A4           MUL       AB
   \   0002BE   2A           ADD       A,R2
   \   0002BF   F9           MOV       R1,A
   \   0002C0   EE           MOV       A,R6
   \   0002C1   28           ADD       A,R0
   \   0002C2   F8           MOV       R0,A
   \   0002C3   EF           MOV       A,R7
   \   0002C4   39           ADDC      A,R1
   \   0002C5   F9           MOV       R1,A
   \   0002C6   E8           MOV       A,R0
   \   0002C7   2407         ADD       A,#0x7
   \   0002C9   FC           MOV       R4,A
   \   0002CA   E4           CLR       A
   \   0002CB   39           ADDC      A,R1
   \   0002CC   FD           MOV       R5,A
   \   0002CD   7A..         MOV       R2,#selectedTargetIEEEAddr & 0xff
   \   0002CF   7B..         MOV       R3,#(selectedTargetIEEEAddr >> 8) & 0xff
   \   0002D1   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1705                    }
   1706                  }
   1707                }
   \                     ??initiatorDeviceInfoRspCB_15:
   \   0002D4   05..         INC       ?V0
   \   0002D6   02....       LJMP      ??initiatorDeviceInfoRspCB_10 & 0xFFFF
   1708              }
   1709              else
   1710              {
   1711                // no sub-device of the currently selected device was selected.
   1712                // clear selection
   1713                initiatorClearSelectedTarget();
   \                     ??initiatorDeviceInfoRspCB_9:
   \   0002D9                ; Setup parameters for call to function initiatorClearSelectedTarget
   \   0002D9   12....       LCALL     `??initiatorClearSelectedTarget::?relay`; Banked call to: initiatorClearSelectedTarget
   1714                bdb_zclRespondentListClean( &pRespondentHead );
   \   0002DC                ; Setup parameters for call to function bdb_zclRespondentListClean
   \   0002DC   7A..         MOV       R2,#pRespondentHead & 0xff
   \   0002DE   7B..         MOV       R3,#(pRespondentHead >> 8) & 0xff
   \   0002E0   12....       LCALL     `??bdb_zclRespondentListClean::?relay`; Banked call to: bdb_zclRespondentListClean
   1715              }
   1716              return ( ZSuccess );
   \                     ??initiatorDeviceInfoRspCB_11:
   \   0002E3   7900         MOV       R1,#0x0
   \   0002E5   8002         SJMP      ??initiatorDeviceInfoRspCB_16
   1717            }
   1718            return ( ZFailure );
   \                     ??initiatorDeviceInfoRspCB_0:
   \   0002E7   7901         MOV       R1,#0x1
   \                     ??initiatorDeviceInfoRspCB_16:
   \   0002E9   7426         MOV       A,#0x26
   \   0002EB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002EE   7F08         MOV       R7,#0x8
   \   0002F0   02....       LJMP      ?BANKED_LEAVE_XDATA
   1719          }
   1720          
   1721          /*********************************************************************
   1722           * @fn      initiatorNwkStartRspCB
   1723           *
   1724           * @brief   This callback is called to process a Network Start Response command.
   1725           *
   1726           * @param   srcAddr - sender's address
   1727           * @param   pRsp - parsed command
   1728           *
   1729           * @return  ZStatus_t
   1730           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1731          static ZStatus_t initiatorNwkStartRspCB( afAddrType_t *srcAddr, bdbTLNwkStartRsp_t *pRsp )
   \                     initiatorNwkStartRspCB:
   1732          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   1733            if ( touchLink_IsValidTransID( pRsp->transID ) == FALSE )
   \   00000D                ; Setup parameters for call to function touchLink_IsValidTransID
   \   00000D   85..82       MOV       DPL,?V0
   \   000010   85..83       MOV       DPH,?V1
   \   000013   12....       LCALL     ?XLOAD_R2345
   \   000016   12....       LCALL     `??touchLink_IsValidTransID::?relay`; Banked call to: touchLink_IsValidTransID
   \   000019   E9           MOV       A,R1
   \   00001A   7004         JNZ       ??initiatorNwkStartRspCB_0
   1734            {
   1735              return ( ZFailure );
   \   00001C   7901         MOV       R1,#0x1
   \   00001E   8030         SJMP      ??initiatorNwkStartRspCB_1
   1736            }
   1737            // Make sure we didn't timeout waiting for this response
   1738            if ( osal_get_timeoutEx( touchLinkInitiator_TaskID, TOUCHLINK_W4_NWK_START_RSP_EVT ) )
   \                     ??initiatorNwkStartRspCB_0:
   \   000020                ; Setup parameters for call to function osal_get_timeoutEx
   \   000020   7A80         MOV       R2,#-0x80
   \   000022   7B00         MOV       R3,#0x0
   \   000024   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F9           MOV       R1,A
   \   000029   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   00002C   EA           MOV       A,R2
   \   00002D   4B           ORL       A,R3
   \   00002E   4C           ORL       A,R4
   \   00002F   4D           ORL       A,R5
   \   000030   601C         JZ        ??initiatorNwkStartRspCB_2
   1739            {
   1740              // Save the Network Start Response for later
   1741              rxRsp.nwkStartRsp = *pRsp;
   \   000032   85..82       MOV       DPL,?V0
   \   000035   85..83       MOV       DPH,?V1
   \   000038   7C..         MOV       R4,#rxRsp & 0xff
   \   00003A   7D..         MOV       R5,#(rxRsp >> 8) & 0xff
   \   00003C   7411         MOV       A,#0x11
   \   00003E   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1742          
   1743              // No need to wait longer
   1744              osal_set_event( touchLinkInitiator_TaskID, TOUCHLINK_W4_NWK_START_RSP_EVT );  
   \   000041                ; Setup parameters for call to function osal_set_event
   \   000041   7A80         MOV       R2,#-0x80
   \   000043   7B00         MOV       R3,#0x0
   \   000045   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000048   E0           MOVX      A,@DPTR
   \   000049   F9           MOV       R1,A
   \   00004A   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00004D   E9           MOV       A,R1
   1745            }
   1746          
   1747            return ( ZSuccess );
   \                     ??initiatorNwkStartRspCB_2:
   \   00004E   7900         MOV       R1,#0x0
   \                     ??initiatorNwkStartRspCB_1:
   \   000050   7F02         MOV       R7,#0x2
   \   000052   02....       LJMP      ?BANKED_LEAVE_XDATA
   1748          }
   1749          
   1750          /*********************************************************************
   1751           * @fn      initiatorNwkJoinRtrRspCB
   1752           *
   1753           * @brief   This callback is called to process a Network Join Router
   1754           *          Response command.
   1755           *
   1756           * @param   srcAddr - sender's address
   1757           * @param   pRsp - parsed command
   1758           *
   1759           * @return  ZStatus_t
   1760           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1761          static ZStatus_t initiatorNwkJoinRtrRspCB( afAddrType_t *srcAddr, bdbTLNwkJoinRsp_t *pRsp )
   \                     initiatorNwkJoinRtrRspCB:
   1762          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   1763            if ( ( touchLink_IsValidTransID( pRsp->transID ) == FALSE ) || 
   1764               ( ( srcAddr->addrMode != afAddr64Bit ) || ( !osal_memcmp( selectedTarget.srcAddr.addr.extAddr, srcAddr->addr.extAddr, Z_EXTADDR_LEN ) ) ) )
   \   00000D                ; Setup parameters for call to function touchLink_IsValidTransID
   \   00000D   8E82         MOV       DPL,R6
   \   00000F   8F83         MOV       DPH,R7
   \   000011   12....       LCALL     ?XLOAD_R2345
   \   000014   12....       LCALL     `??touchLink_IsValidTransID::?relay`; Banked call to: touchLink_IsValidTransID
   \   000017   E9           MOV       A,R1
   \   000018   6036         JZ        ??initiatorNwkJoinRtrRspCB_0
   \   00001A   85..82       MOV       DPL,?V0
   \   00001D   85..83       MOV       DPH,?V1
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   6403         XRL       A,#0x3
   \   00002B   7023         JNZ       ??initiatorNwkJoinRtrRspCB_0
   \   00002D                ; Setup parameters for call to function osal_memcmp
   \   00002D   85....       MOV       ?V4,?V0
   \   000030   85....       MOV       ?V5,?V1
   \   000033   75..00       MOV       ?V6,#0x0
   \   000036   78..         MOV       R0,#?V4
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00003B   7C08         MOV       R4,#0x8
   \   00003D   7D00         MOV       R5,#0x0
   \   00003F   79..         MOV       R1,#(selectedTarget + 38) & 0xff
   \   000041   7A..         MOV       R2,#((selectedTarget + 38) >> 8) & 0xff
   \   000043   7B00         MOV       R3,#0x0
   \   000045   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000048   7403         MOV       A,#0x3
   \   00004A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004D   E9           MOV       A,R1
   \   00004E   7004         JNZ       ??initiatorNwkJoinRtrRspCB_1
   1765            {
   1766              return ( ZFailure );
   \                     ??initiatorNwkJoinRtrRspCB_0:
   \   000050   7901         MOV       R1,#0x1
   \   000052   802E         SJMP      ??initiatorNwkJoinRtrRspCB_2
   1767            }
   1768            
   1769            // Make sure we didn't timeout waiting for this response
   1770            if ( osal_get_timeoutEx( touchLinkInitiator_TaskID, TOUCHLINK_W4_NWK_JOIN_RSP_EVT ) )
   \                     ??initiatorNwkJoinRtrRspCB_1:
   \   000054                ; Setup parameters for call to function osal_get_timeoutEx
   \   000054   7A00         MOV       R2,#0x0
   \   000056   7B01         MOV       R3,#0x1
   \   000058   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F9           MOV       R1,A
   \   00005D   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000060   EA           MOV       A,R2
   \   000061   4B           ORL       A,R3
   \   000062   4C           ORL       A,R4
   \   000063   4D           ORL       A,R5
   \   000064   601A         JZ        ??initiatorNwkJoinRtrRspCB_3
   1771            {
   1772              // Save the Network Start Response for later
   1773              rxRsp.nwkJoinRsp = *pRsp;
   \   000066   8E82         MOV       DPL,R6
   \   000068   8F83         MOV       DPH,R7
   \   00006A   7C..         MOV       R4,#rxRsp & 0xff
   \   00006C   7D..         MOV       R5,#(rxRsp >> 8) & 0xff
   \   00006E   7405         MOV       A,#0x5
   \   000070   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1774          
   1775              // No need to wait longer
   1776              osal_set_event( touchLinkInitiator_TaskID, TOUCHLINK_W4_NWK_JOIN_RSP_EVT );
   \   000073                ; Setup parameters for call to function osal_set_event
   \   000073   7A00         MOV       R2,#0x0
   \   000075   7B01         MOV       R3,#0x1
   \   000077   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   F9           MOV       R1,A
   \   00007C   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00007F   E9           MOV       A,R1
   1777            }
   1778          
   1779            return ( ZSuccess );
   \                     ??initiatorNwkJoinRtrRspCB_3:
   \   000080   7900         MOV       R1,#0x0
   \                     ??initiatorNwkJoinRtrRspCB_2:
   \   000082   7F07         MOV       R7,#0x7
   \   000084   02....       LJMP      ?BANKED_LEAVE_XDATA
   1780          }
   1781          
   1782          /*********************************************************************
   1783           * @fn      initiatorNwkJoinEDRspCB
   1784           *
   1785           * @brief   This callback is called to process a Network Join End Device
   1786           *          Response command.
   1787           *
   1788           * @param   srcAddr - sender's address
   1789           * @param   pRsp - parsed command
   1790           *
   1791           * @return  ZStatus_t
   1792           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1793          static ZStatus_t initiatorNwkJoinEDRspCB( afAddrType_t *srcAddr, bdbTLNwkJoinRsp_t *pRsp )
   \                     initiatorNwkJoinEDRspCB:
   1794          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   1795            if ( ( touchLink_IsValidTransID( pRsp->transID ) == FALSE ) || 
   1796               ( ( srcAddr->addrMode != afAddr64Bit ) || ( !osal_memcmp( selectedTarget.srcAddr.addr.extAddr, srcAddr->addr.extAddr, Z_EXTADDR_LEN ) ) ) )
   \   00000D                ; Setup parameters for call to function touchLink_IsValidTransID
   \   00000D   8E82         MOV       DPL,R6
   \   00000F   8F83         MOV       DPH,R7
   \   000011   12....       LCALL     ?XLOAD_R2345
   \   000014   12....       LCALL     `??touchLink_IsValidTransID::?relay`; Banked call to: touchLink_IsValidTransID
   \   000017   E9           MOV       A,R1
   \   000018   6036         JZ        ??initiatorNwkJoinEDRspCB_0
   \   00001A   85..82       MOV       DPL,?V0
   \   00001D   85..83       MOV       DPH,?V1
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   6403         XRL       A,#0x3
   \   00002B   7023         JNZ       ??initiatorNwkJoinEDRspCB_0
   \   00002D                ; Setup parameters for call to function osal_memcmp
   \   00002D   85....       MOV       ?V4,?V0
   \   000030   85....       MOV       ?V5,?V1
   \   000033   75..00       MOV       ?V6,#0x0
   \   000036   78..         MOV       R0,#?V4
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00003B   7C08         MOV       R4,#0x8
   \   00003D   7D00         MOV       R5,#0x0
   \   00003F   79..         MOV       R1,#(selectedTarget + 38) & 0xff
   \   000041   7A..         MOV       R2,#((selectedTarget + 38) >> 8) & 0xff
   \   000043   7B00         MOV       R3,#0x0
   \   000045   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000048   7403         MOV       A,#0x3
   \   00004A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004D   E9           MOV       A,R1
   \   00004E   7004         JNZ       ??initiatorNwkJoinEDRspCB_1
   1797            {
   1798              return ( ZFailure );
   \                     ??initiatorNwkJoinEDRspCB_0:
   \   000050   7901         MOV       R1,#0x1
   \   000052   8036         SJMP      ??initiatorNwkJoinEDRspCB_2
   1799            }
   1800            
   1801            // Make sure we didn't timeout waiting for this response
   1802            if ( osal_get_timeoutEx( touchLinkInitiator_TaskID, TOUCHLINK_W4_NWK_JOIN_RSP_EVT ) )
   \                     ??initiatorNwkJoinEDRspCB_1:
   \   000054                ; Setup parameters for call to function osal_get_timeoutEx
   \   000054   7A00         MOV       R2,#0x0
   \   000056   7B01         MOV       R3,#0x1
   \   000058   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F9           MOV       R1,A
   \   00005D   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000060   EA           MOV       A,R2
   \   000061   4B           ORL       A,R3
   \   000062   4C           ORL       A,R4
   \   000063   4D           ORL       A,R5
   \   000064   601C         JZ        ??initiatorNwkJoinEDRspCB_3
   1803            {
   1804              // Save the Network Start Response for later
   1805              rxRsp.nwkJoinRsp = *pRsp;
   \   000066   8E82         MOV       DPL,R6
   \   000068   8F83         MOV       DPH,R7
   \   00006A   7C..         MOV       R4,#rxRsp & 0xff
   \   00006C   7D..         MOV       R5,#(rxRsp >> 8) & 0xff
   \   00006E   7405         MOV       A,#0x5
   \   000070   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1806          
   1807              // No need to wait longer
   1808              osal_set_event( touchLinkInitiator_TaskID, TOUCHLINK_W4_NWK_JOIN_RSP_EVT );
   \   000073                ; Setup parameters for call to function osal_set_event
   \   000073   7A00         MOV       R2,#0x0
   \   000075   7B01         MOV       R3,#0x1
   \   000077   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   F9           MOV       R1,A
   \   00007C   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00007F   E9           MOV       A,R1
   \   000080   8006         SJMP      ??initiatorNwkJoinEDRspCB_4
   1809          
   1810            }
   1811            else
   1812            {
   1813              rxRsp.nwkJoinRsp.status = TOUCHLINK_NETWORK_JOIN_RSP_STATUS_FAILURE;
   \                     ??initiatorNwkJoinEDRspCB_3:
   \   000082   90....       MOV       DPTR,#rxRsp + 4
   \   000085   7401         MOV       A,#0x1
   \   000087   F0           MOVX      @DPTR,A
   1814            }
   1815          
   1816            return ( ZSuccess );
   \                     ??initiatorNwkJoinEDRspCB_4:
   \   000088   7900         MOV       R1,#0x0
   \                     ??initiatorNwkJoinEDRspCB_2:
   \   00008A   7F07         MOV       R7,#0x7
   \   00008C   02....       LJMP      ?BANKED_LEAVE_XDATA
   1817          }
   1818          
   1819          /******************************************************************************
   1820           * @fn      initiatorZdoLeaveCnfCB
   1821           *
   1822           * @brief   This callback is called to process a Leave Confirmation message.
   1823           *
   1824           *          Note: this callback function returns a pointer if it has handled
   1825           *                the confirmation message and no further action should be
   1826           *                taken with it. It returns NULL if it has not handled the
   1827           *                confirmation message and normal processing should take place.
   1828           *
   1829           * @param   pParam - received message
   1830           *
   1831           * @return  Pointer if message processed. NULL, otherwise.
   1832           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1833          static void *initiatorZdoLeaveCnfCB( void *pParam )
   \                     initiatorZdoLeaveCnfCB:
   1834          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1835            (void)pParam;
   1836          
   1837            // Did we initiate the leave?
   1838            if ( touchLinkLeaveInitiated == FALSE )
   \   000009   90....       MOV       DPTR,#touchLinkLeaveInitiated
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   7006         JNZ       ??initiatorZdoLeaveCnfCB_0
   1839            {
   1840              return ( NULL );
   \   00000F   7A00         MOV       R2,#0x0
   \   000011   7B00         MOV       R3,#0x0
   \   000013   8019         SJMP      ??initiatorZdoLeaveCnfCB_1
   1841            }
   1842          
   1843            if ( touchLinkLeaveInitiated == TOUCHLINK_LEAVE_TO_JOIN_NWK )
   \                     ??initiatorZdoLeaveCnfCB_0:
   \   000015   90....       MOV       DPTR,#touchLinkLeaveInitiated
   \   000018   E0           MOVX      A,@DPTR
   \   000019   6401         XRL       A,#0x1
   \   00001B   700D         JNZ       ??initiatorZdoLeaveCnfCB_2
   1844            {
   1845              // Notify our task to join the new network
   1846              osal_set_event( touchLinkInitiator_TaskID, TOUCHLINK_JOIN_NWK_ATTEMPT_EVT );
   \   00001D                ; Setup parameters for call to function osal_set_event
   \   00001D   7A08         MOV       R2,#0x8
   \   00001F   7B00         MOV       R3,#0x0
   \   000021   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F9           MOV       R1,A
   \   000026   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000029   E9           MOV       A,R1
   1847            }
   1848          
   1849            return ( (void *)&touchLinkLeaveInitiated );
   \                     ??initiatorZdoLeaveCnfCB_2:
   \   00002A   7A..         MOV       R2,#touchLinkLeaveInitiated & 0xff
   \   00002C   7B..         MOV       R3,#(touchLinkLeaveInitiated >> 8) & 0xff
   \                     ??initiatorZdoLeaveCnfCB_1:
   \   00002E   7F01         MOV       R7,#0x1
   \   000030   02....       LJMP      ?BANKED_LEAVE_XDATA
   1850          }
   1851          
   1852          /*********************************************************************
   1853           * @fn      initiatorProcessStateChange
   1854           *
   1855           * @brief   Process ZDO device state change
   1856           *
   1857           * @param   state - The device's network state
   1858           *
   1859           * @return  none
   1860           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1861          static void initiatorProcessStateChange( devStates_t state )
   \                     initiatorProcessStateChange:
   1862          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   1863            if ( ( ( devState == DEV_ROUTER ) || ( devState == DEV_END_DEVICE ) ) && ( touchlinkDistNwk == TRUE ) )
   \   000007   90....       MOV       DPTR,#devState
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   6407         XRL       A,#0x7
   \   00000D   6008         JZ        ??initiatorProcessStateChange_0
   \   00000F   90....       MOV       DPTR,#devState
   \   000012   E0           MOVX      A,@DPTR
   \   000013   6406         XRL       A,#0x6
   \   000015   7030         JNZ       ??initiatorProcessStateChange_1
   \                     ??initiatorProcessStateChange_0:
   \   000017   90....       MOV       DPTR,#touchlinkDistNwk
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   6401         XRL       A,#0x1
   \   00001D   7028         JNZ       ??initiatorProcessStateChange_1
   1864            {
   1865              // Set touchlink flag to false after joining is complete
   1866              touchlinkDistNwk = FALSE;
   \   00001F   90....       MOV       DPTR,#touchlinkDistNwk
   \   000022   7400         MOV       A,#0x0
   \   000024   F0           MOVX      @DPTR,A
   1867              
   1868              // Save the latest NIB to update our parent's address
   1869              touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_NIB );
   \   000025                ; Setup parameters for call to function touchLink_UpdateNV
   \   000025   7901         MOV       R1,#0x1
   \   000027   12....       LCALL     `??touchLink_UpdateNV::?relay`; Banked call to: touchLink_UpdateNV
   1870             
   1871              if ( !_NIB.CapabilityFlags )
   \   00002A   90....       MOV       DPTR,#_NIB + 14
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   7008         JNZ       ??initiatorProcessStateChange_2
   1872              {
   1873                _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   000030   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000033   E0           MOVX      A,@DPTR
   \   000034   90....       MOV       DPTR,#_NIB + 14
   \   000037   F0           MOVX      @DPTR,A
   1874              }
   1875          
   1876          #if (ZSTACK_ROUTER_BUILD)
   1877                linkInfo_t *linkInfo;
   1878                
   1879                // check if entry exists
   1880                linkInfo = nwkNeighborGetLinkInfo( selectedTargetNwkAddr, _NIB.nwkPanId );
   1881          
   1882                // if not, look for a vacant entry to add this node...
   1883                if ( linkInfo == NULL )
   1884                {
   1885                  nwkNeighborAdd( selectedTargetNwkAddr, _NIB.nwkPanId, DEF_LQI );
   1886                  linkInfo = nwkNeighborGetLinkInfo( selectedTargetNwkAddr, _NIB.nwkPanId );
   1887                  linkInfo->txCost = DEF_LINK_COST;
   1888                  linkInfo->rxLqi = MIN_LQI_COST_1; 
   1889                }
   1890                
   1891                bdb_setNodeIsOnANetwork(TRUE);
   1892                osal_start_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_NWK_FORMATION_SUCCESS_EVT, 500);
   1893          #endif
   1894          
   1895              // We found our parent
   1896              osal_stop_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_W4_REJOIN_EVT );
   \                     ??initiatorProcessStateChange_2:
   \   000038                ; Setup parameters for call to function osal_stop_timerEx
   \   000038   7A00         MOV       R2,#0x0
   \   00003A   7B04         MOV       R3,#0x4
   \   00003C   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F9           MOV       R1,A
   \   000041   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000044   E9           MOV       A,R1
   \   000045   8034         SJMP      ??initiatorProcessStateChange_3
   1897            }
   1898            
   1899            else if ( ( state == DEV_NWK_ORPHAN ) || ( state == DEV_NWK_DISC ) )
   \                     ??initiatorProcessStateChange_1:
   \   000047   740A         MOV       A,#0xa
   \   000049   6E           XRL       A,R6
   \   00004A   6005         JZ        ??initiatorProcessStateChange_4
   \   00004C   7402         MOV       A,#0x2
   \   00004E   6E           XRL       A,R6
   \   00004F   702A         JNZ       ??initiatorProcessStateChange_3
   1900            {
   1901              // Device has lost information about its parent; give it some time to rejoin
   1902              if ( !osal_get_timeoutEx( touchLinkInitiator_TaskID, TOUCHLINK_W4_REJOIN_EVT ) )
   \                     ??initiatorProcessStateChange_4:
   \   000051                ; Setup parameters for call to function osal_get_timeoutEx
   \   000051   7A00         MOV       R2,#0x0
   \   000053   7B04         MOV       R3,#0x4
   \   000055   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000058   E0           MOVX      A,@DPTR
   \   000059   F9           MOV       R1,A
   \   00005A   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   00005D   EA           MOV       A,R2
   \   00005E   4B           ORL       A,R3
   \   00005F   4C           ORL       A,R4
   \   000060   4D           ORL       A,R5
   \   000061   7018         JNZ       ??initiatorProcessStateChange_3
   1903              {
   1904                osal_start_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_W4_REJOIN_EVT,
   1905                                    (NUM_DISC_ATTEMPTS + 1) * TOUCHLINK_INITIATOR_REJOIN_TIMEOUT );
   \   000063                ; Setup parameters for call to function osal_start_timerEx
   \   000063   90....       MOV       DPTR,#__Constant_30d4
   \   000066   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000069   7A00         MOV       R2,#0x0
   \   00006B   7B04         MOV       R3,#0x4
   \   00006D   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000070   E0           MOVX      A,@DPTR
   \   000071   F9           MOV       R1,A
   \   000072   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000075   7404         MOV       A,#0x4
   \   000077   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007A   E9           MOV       A,R1
   1906              }
   1907            }
   1908          }
   \                     ??initiatorProcessStateChange_3:
   \   00007B   7F01         MOV       R7,#0x1
   \   00007D   02....       LJMP      ?BANKED_LEAVE_XDATA
   1909          
   1910          /*********************************************************************
   1911           * @fn      initiatorSetNwkToInitState
   1912           *
   1913           * @brief   Set our network state to its original state.
   1914           *
   1915           * @param   void
   1916           *
   1917           * @return  void
   1918           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1919          static void initiatorSetNwkToInitState()
   \                     initiatorSetNwkToInitState:
   1920          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   1921            // Turn MAC receiver back to its old state
   1922            ZMacSetReq( ZMacRxOnIdle, &savedRxOnIdle );
   \   000005                ; Setup parameters for call to function ZMacSetReq
   \   000005   7A..         MOV       R2,#savedRxOnIdle & 0xff
   \   000007   7B..         MOV       R3,#(savedRxOnIdle >> 8) & 0xff
   \   000009   7952         MOV       R1,#0x52
   \   00000B   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   00000E   E9           MOV       A,R1
   1923          
   1924            // Tune back to our channel
   1925            touchLink_SetChannel( _NIB.nwkLogicalChannel );
   \   00000F                ; Setup parameters for call to function touchLink_SetChannel
   \   00000F   90....       MOV       DPTR,#_NIB + 22
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F9           MOV       R1,A
   \   000014   12....       LCALL     `??touchLink_SetChannel::?relay`; Banked call to: touchLink_SetChannel
   1926          
   1927            // Set NWK task to run
   1928            nwk_setStateIdle( FALSE );
   \   000017                ; Setup parameters for call to function nwk_setStateIdle
   \   000017   7900         MOV       R1,#0x0
   \   000019   12....       LCALL     `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
   1929          
   1930            if ( savedPollRate != zgPollRate )
   \   00001C   90....       MOV       DPTR,#zgPollRate
   \   00001F   C082         PUSH      DPL
   \   000021   C083         PUSH      DPH
   \   000023   90....       MOV       DPTR,#savedPollRate
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F5..         MOV       ?V0,A
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   F5..         MOV       ?V1,A
   \   00002D   E4           CLR       A
   \   00002E   F5..         MOV       ?V2,A
   \   000030   F5..         MOV       ?V3,A
   \   000032   D083         POP       DPH
   \   000034   D082         POP       DPL
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?L_EQ_X
   \   00003B   601E         JZ        ??initiatorSetNwkToInitState_0
   1931            {
   1932              NLME_SetPollRate( savedPollRate );
   \   00003D                ; Setup parameters for call to function NLME_SetPollRate
   \   00003D   90....       MOV       DPTR,#savedPollRate
   \   000040   E0           MOVX      A,@DPTR
   \   000041   F5..         MOV       ?V0,A
   \   000043   A3           INC       DPTR
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F5..         MOV       ?V1,A
   \   000047   AA..         MOV       R2,?V0
   \   000049   AB..         MOV       R3,?V1
   \   00004B   E4           CLR       A
   \   00004C   FC           MOV       R4,A
   \   00004D   FD           MOV       R5,A
   \   00004E   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1933              savedPollRate = POLL_RATE;
   \   000051   90....       MOV       DPTR,#savedPollRate
   \   000054   74E8         MOV       A,#-0x18
   \   000056   F0           MOVX      @DPTR,A
   \   000057   A3           INC       DPTR
   \   000058   7403         MOV       A,#0x3
   \   00005A   F0           MOVX      @DPTR,A
   1934            }
   1935          
   1936            if ( savedQueuedPollRate != zgQueuedPollRate )
   \                     ??initiatorSetNwkToInitState_0:
   \   00005B   90....       MOV       DPTR,#savedQueuedPollRate
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F8           MOV       R0,A
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   F9           MOV       R1,A
   \   000063   90....       MOV       DPTR,#zgQueuedPollRate
   \   000066   E0           MOVX      A,@DPTR
   \   000067   68           XRL       A,R0
   \   000068   7003         JNZ       ??initiatorSetNwkToInitState_1
   \   00006A   A3           INC       DPTR
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   69           XRL       A,R1
   \                     ??initiatorSetNwkToInitState_1:
   \   00006D   6015         JZ        ??initiatorSetNwkToInitState_2
   1937            {
   1938              NLME_SetQueuedPollRate( savedQueuedPollRate );
   \   00006F                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   00006F   90....       MOV       DPTR,#savedQueuedPollRate
   \   000072   E0           MOVX      A,@DPTR
   \   000073   FA           MOV       R2,A
   \   000074   A3           INC       DPTR
   \   000075   E0           MOVX      A,@DPTR
   \   000076   FB           MOV       R3,A
   \   000077   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1939              savedQueuedPollRate = QUEUED_POLL_RATE;
   \   00007A   90....       MOV       DPTR,#savedQueuedPollRate
   \   00007D   7464         MOV       A,#0x64
   \   00007F   F0           MOVX      @DPTR,A
   \   000080   A3           INC       DPTR
   \   000081   7400         MOV       A,#0x0
   \   000083   F0           MOVX      @DPTR,A
   1940            }
   1941          
   1942            if ( savedResponsePollRate != zgResponsePollRate )
   \                     ??initiatorSetNwkToInitState_2:
   \   000084   90....       MOV       DPTR,#savedResponsePollRate
   \   000087   E0           MOVX      A,@DPTR
   \   000088   F8           MOV       R0,A
   \   000089   A3           INC       DPTR
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   F9           MOV       R1,A
   \   00008C   90....       MOV       DPTR,#zgResponsePollRate
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   68           XRL       A,R0
   \   000091   7003         JNZ       ??initiatorSetNwkToInitState_3
   \   000093   A3           INC       DPTR
   \   000094   E0           MOVX      A,@DPTR
   \   000095   69           XRL       A,R1
   \                     ??initiatorSetNwkToInitState_3:
   \   000096   6015         JZ        ??initiatorSetNwkToInitState_4
   1943            {
   1944              NLME_SetResponseRate( savedResponsePollRate );
   \   000098                ; Setup parameters for call to function NLME_SetResponseRate
   \   000098   90....       MOV       DPTR,#savedResponsePollRate
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   FA           MOV       R2,A
   \   00009D   A3           INC       DPTR
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   FB           MOV       R3,A
   \   0000A0   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   1945              savedResponsePollRate = RESPONSE_POLL_RATE;
   \   0000A3   90....       MOV       DPTR,#savedResponsePollRate
   \   0000A6   7464         MOV       A,#0x64
   \   0000A8   F0           MOVX      @DPTR,A
   \   0000A9   A3           INC       DPTR
   \   0000AA   7400         MOV       A,#0x0
   \   0000AC   F0           MOVX      @DPTR,A
   1946            }
   1947          }
   \                     ??initiatorSetNwkToInitState_4:
   \   0000AD   7F04         MOV       R7,#0x4
   \   0000AF   02....       LJMP      ?BANKED_LEAVE_XDATA
   1948          
   1949          #if ( ZSTACK_ROUTER_BUILD )
   1950          /*********************************************************************
   1951           * @fn      initiatorJoinNwk
   1952           *
   1953           * @brief   Initiate a network join request.
   1954           *
   1955           * @param   void
   1956           *
   1957           * @return  void
   1958           */
   1959          static void initiatorJoinNwk( void )
   1960          {
   1961            // Save free ranges
   1962            touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
   1963          
   1964            // In case we're here after a leave
   1965            touchLinkLeaveInitiated = FALSE;
   1966          
   1967            // Clear leave control logic
   1968            ZDApp_LeaveCtrlReset();
   1969          
   1970            if ( POLL_RATE == 0 )
   1971            {
   1972              //allow to respond to TOUCHLINK commission utility commands after TL
   1973              NLME_SetPollRate( TOUCHLINK_INITIATOR_TEMP_POST_TL_POLL_RATE );
   1974              //polling should reset when TL life time expires
   1975            }
   1976          
   1977            touchLinkInitiator_PermitJoin( 0 );
   1978          
   1979            ZDOInitDevice( 0 );
   1980            // Perform a network rejoin request
   1981            _NIB.nwkState = NWK_REJOINING;
   1982            initiatorReJoinNwk( MODE_REJOIN );
   1983          }
   1984          #endif
   1985          
   1986          /*********************************************************************
   1987           * @fn      initiatorReJoinNwk
   1988           *
   1989           * @brief   Send out an Rejoin Request.
   1990           *
   1991           * @param   startMode - MODE_REJOIN or MODE_RESUME
   1992           *
   1993           * @return  none
   1994           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1995          static void initiatorReJoinNwk( devStartModes_t startMode )
   \                     initiatorReJoinNwk:
   1996          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   1997            // Set NWK task to run
   1998            nwk_setStateIdle( FALSE );
   \   000007                ; Setup parameters for call to function nwk_setStateIdle
   \   000007   7900         MOV       R1,#0x0
   \   000009   12....       LCALL     `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
   1999          
   2000            // Configure MAC with our network parameters
   2001            touchLink_SetMacNwkParams( _NIB.nwkDevAddress, _NIB.nwkPanId, _NIB.nwkLogicalChannel );
   \   00000C                ; Setup parameters for call to function touchLink_SetMacNwkParams
   \   00000C   90....       MOV       DPTR,#_NIB + 22
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F9           MOV       R1,A
   \   000011   90....       MOV       DPTR,#_NIB + 33
   \   000014   E0           MOVX      A,@DPTR
   \   000015   FC           MOV       R4,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   FD           MOV       R5,A
   \   000019   90....       MOV       DPTR,#_NIB + 20
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   FA           MOV       R2,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   FB           MOV       R3,A
   \   000021   12....       LCALL     `??touchLink_SetMacNwkParams::?relay`; Banked call to: touchLink_SetMacNwkParams
   2002          
   2003            // Use the new network paramters
   2004            zgConfigPANID = _NIB.nwkPanId;
   \   000024   90....       MOV       DPTR,#_NIB + 33
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F8           MOV       R0,A
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   F9           MOV       R1,A
   \   00002C   90....       MOV       DPTR,#zgConfigPANID
   \   00002F   E8           MOV       A,R0
   \   000030   F0           MOVX      @DPTR,A
   \   000031   A3           INC       DPTR
   \   000032   E9           MOV       A,R1
   \   000033   F0           MOVX      @DPTR,A
   2005            zgDefaultChannelList = _NIB.channelList;
   \   000034   90....       MOV       DPTR,#_NIB + 36
   \   000037   12....       LCALL     ?XLOAD_R0123
   \   00003A   90....       MOV       DPTR,#zgDefaultChannelList
   \   00003D   12....       LCALL     ?XSTORE_R0123
   2006            osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \   000040                ; Setup parameters for call to function sAddrExtCpy
   \   000040   7C..         MOV       R4,#(_NIB + 53) & 0xff
   \   000042   7D..         MOV       R5,#((_NIB + 53) >> 8) & 0xff
   \   000044   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000046   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000048   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2007          
   2008            devStartMode = startMode;
   \   00004B   EE           MOV       A,R6
   \   00004C   90....       MOV       DPTR,#devStartMode
   \   00004F   F0           MOVX      @DPTR,A
   2009          
   2010            _tmpRejoinState = TRUE;
   \   000050   90....       MOV       DPTR,#_tmpRejoinState
   \   000053   7401         MOV       A,#0x1
   \   000055   F0           MOVX      @DPTR,A
   2011          
   2012            // Start the network joining process
   2013            osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   000056                ; Setup parameters for call to function osal_set_event
   \   000056   7A01         MOV       R2,#0x1
   \   000058   7B00         MOV       R3,#0x0
   \   00005A   90....       MOV       DPTR,#ZDAppTaskID
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   F9           MOV       R1,A
   \   00005F   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000062   E9           MOV       A,R1
   2014          }
   \   000063   7F01         MOV       R7,#0x1
   \   000065   02....       LJMP      ?BANKED_LEAVE_XDATA
   2015          
   2016          /*********************************************************************
   2017           * @fn      initiatorSendScanReq
   2018           *
   2019           * @brief   Send out an Scan Request command on one of the TOUCHLINK channels.
   2020           *
   2021           * @param   freshScan - TRUE to start fresh scan, FALSE to resume existing process.
   2022           *
   2023           * @return  void
   2024           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2025          static void initiatorSendScanReq( bool freshScan )
   \                     initiatorSendScanReq:
   2026          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FF           MOV       R7,A
   2027            bdbTLScanReq_t req;
   2028            uint8 newChannel;
   2029            uint8 secondaryChList[] = TOUCHLINK_SECONDARY_CHANNELS_SET;
   \   00000C   90....       MOV       DPTR,#`?<Constant {12, 13, 14, 16, 17, 18, 19, 21, 22`
   \   00000F   7408         MOV       A,#0x8
   \   000011   12....       LCALL     ?XSTACK_DISP102_8
   \   000014   740C         MOV       A,#0xc
   \   000016   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   2030            static uint8 channelIndex = 0;
   2031            
   2032            // Set the device as initiator of touchlink commissioning
   2033            touchLink_DeviceIsInitiator( TRUE );
   \   000019                ; Setup parameters for call to function touchLink_DeviceIsInitiator
   \   000019   7901         MOV       R1,#0x1
   \   00001B   12....       LCALL     `??touchLink_DeviceIsInitiator::?relay`; Banked call to: touchLink_DeviceIsInitiator
   2034          
   2035            if ( freshScan )
   \   00001E   EF           MOV       A,R7
   \   00001F   6006         JZ        ??initiatorSendScanReq_0
   2036            {
   2037              channelIndex = 0;
   \   000021   90....       MOV       DPTR,#??channelIndex
   \   000024   7400         MOV       A,#0x0
   \   000026   F0           MOVX      @DPTR,A
   2038            }
   2039          
   2040            // First figure out the channel
   2041            if ( scanReqChannels == TOUCHLINK_SCAN_PRIMARY_CHANNELS )
   \                     ??initiatorSendScanReq_0:
   \   000027   90....       MOV       DPTR,#scanReqChannels
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   6401         XRL       A,#0x1
   \   00002D   7029         JNZ       ??initiatorSendScanReq_1
   2042            {
   2043              if ( numScanReqSent < 5 )
   \   00002F   90....       MOV       DPTR,#numScanReqSent
   \   000032   E0           MOVX      A,@DPTR
   \   000033   C3           CLR       C
   \   000034   9405         SUBB      A,#0x5
   \   000036   5004         JNC       ??initiatorSendScanReq_2
   2044              {
   2045                // First five consecutive requests are sent on channel 11
   2046                newChannel = TOUCHLINK_FIRST_CHANNEL;
   \   000038   7E0B         MOV       R6,#0xb
   \   00003A   804F         SJMP      ??initiatorSendScanReq_3
   2047              }
   2048              else if ( numScanReqSent == 5 )
   \                     ??initiatorSendScanReq_2:
   \   00003C   90....       MOV       DPTR,#numScanReqSent
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   6405         XRL       A,#0x5
   \   000042   7004         JNZ       ??initiatorSendScanReq_4
   2049              {
   2050                // Sixth request is sent on channel 15
   2051                newChannel = TOUCHLINK_SECOND_CHANNEL;
   \   000044   7E0F         MOV       R6,#0xf
   \   000046   8043         SJMP      ??initiatorSendScanReq_3
   2052              }
   2053              else if ( numScanReqSent == 6 )
   \                     ??initiatorSendScanReq_4:
   \   000048   90....       MOV       DPTR,#numScanReqSent
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   6406         XRL       A,#0x6
   \   00004E   7004         JNZ       ??initiatorSendScanReq_5
   2054              {
   2055                // Seventh request is sent on channel 20
   2056                newChannel = TOUCHLINK_THIRD_CHANNEL;
   \   000050   7E14         MOV       R6,#0x14
   \   000052   8037         SJMP      ??initiatorSendScanReq_3
   2057              }
   2058              else
   2059              {
   2060                // Last request is sent on channel 25
   2061                newChannel = TOUCHLINK_FOURTH_CHANNEL;
   \                     ??initiatorSendScanReq_5:
   \   000054   7E19         MOV       R6,#0x19
   \   000056   8033         SJMP      ??initiatorSendScanReq_3
   2062              }
   2063            }
   2064            else
   2065            {
   2066              // scan secondary channel list
   2067              if ( channelIndex < sizeof(secondaryChList) )
   \                     ??initiatorSendScanReq_1:
   \   000058   90....       MOV       DPTR,#??channelIndex
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   C3           CLR       C
   \   00005D   940C         SUBB      A,#0xc
   \   00005F   5021         JNC       ??initiatorSendScanReq_6
   2068              {
   2069                 newChannel = secondaryChList[channelIndex++];
   \   000061   90....       MOV       DPTR,#??channelIndex
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F8           MOV       R0,A
   \   000066   7900         MOV       R1,#0x0
   \   000068   7408         MOV       A,#0x8
   \   00006A   12....       LCALL     ?XSTACK_DISP0_8
   \   00006D   E582         MOV       A,DPL
   \   00006F   28           ADD       A,R0
   \   000070   F582         MOV       DPL,A
   \   000072   E583         MOV       A,DPH
   \   000074   39           ADDC      A,R1
   \   000075   F583         MOV       DPH,A
   \   000077   E0           MOVX      A,@DPTR
   \   000078   FE           MOV       R6,A
   \   000079   90....       MOV       DPTR,#??channelIndex
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   2401         ADD       A,#0x1
   \   00007F   F0           MOVX      @DPTR,A
   \   000080   8009         SJMP      ??initiatorSendScanReq_3
   2070              }
   2071              else
   2072              {
   2073                // set it to initial value for next discovery process
   2074                channelIndex = 0;
   \                     ??initiatorSendScanReq_6:
   \   000082   90....       MOV       DPTR,#??channelIndex
   \   000085   7400         MOV       A,#0x0
   \   000087   F0           MOVX      @DPTR,A
   2075                return;
   \   000088   02....       LJMP      ??initiatorSendScanReq_7 & 0xFFFF
   2076              }
   2077            }
   2078          
   2079            if ( touchLinkTransID != 0 )
   \                     ??initiatorSendScanReq_3:
   \   00008B   90....       MOV       DPTR,#touchLinkTransID
   \   00008E   12....       LCALL     ?XLOAD_R0123
   \   000091   E8           MOV       A,R0
   \   000092   49           ORL       A,R1
   \   000093   4A           ORL       A,R2
   \   000094   4B           ORL       A,R3
   \   000095   7003         JNZ       $+5
   \   000097   02....       LJMP      ??initiatorSendScanReq_8 & 0xFFFF
   2080            {
   2081              // Build the request
   2082              req.transID = touchLinkTransID;
   \   00009A   90....       MOV       DPTR,#touchLinkTransID
   \   00009D   12....       LCALL     ?XLOAD_R0123
   \   0000A0   85..82       MOV       DPL,?XSP + 0
   \   0000A3   85..83       MOV       DPH,?XSP + 1
   \   0000A6   12....       LCALL     ?XSTORE_R0123
   2083              touchLinkLastAcceptedTransID = touchLinkTransID;
   \   0000A9   90....       MOV       DPTR,#touchLinkTransID
   \   0000AC   12....       LCALL     ?XLOAD_R0123
   \   0000AF   90....       MOV       DPTR,#touchLinkLastAcceptedTransID
   \   0000B2   12....       LCALL     ?XSTORE_R0123
   2084          
   2085              req.zInfo.zInfoByte = 0;
   \   0000B5   7404         MOV       A,#0x4
   \   0000B7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BA   7400         MOV       A,#0x0
   \   0000BC   F0           MOVX      @DPTR,A
   2086              req.zLogicalType = zgDeviceLogicalType;
   \   0000BD   7404         MOV       A,#0x4
   \   0000BF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   54FC         ANL       A,#0xfc
   \   0000C5   F0           MOVX      @DPTR,A
   \   0000C6   A3           INC       DPTR
   \   0000C7   E0           MOVX      A,@DPTR
   \   0000C8   54FF         ANL       A,#0xff
   \   0000CA   F0           MOVX      @DPTR,A
   \   0000CB   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   F8           MOV       R0,A
   \   0000D0   7900         MOV       R1,#0x0
   \   0000D2   E8           MOV       A,R0
   \   0000D3   5403         ANL       A,#0x3
   \   0000D5   F8           MOV       R0,A
   \   0000D6   E9           MOV       A,R1
   \   0000D7   5400         ANL       A,#0x0
   \   0000D9   F9           MOV       R1,A
   \   0000DA   7404         MOV       A,#0x4
   \   0000DC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   48           ORL       A,R0
   \   0000E1   F0           MOVX      @DPTR,A
   \   0000E2   A3           INC       DPTR
   \   0000E3   E0           MOVX      A,@DPTR
   \   0000E4   49           ORL       A,R1
   \   0000E5   F0           MOVX      @DPTR,A
   2087              if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \   0000E6   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   A2E3         MOV       C,0xE0 /* A   */.3
   \   0000EC   500E         JNC       ??initiatorSendScanReq_9
   2088              {
   2089                req.zRxOnWhenIdle = TRUE;
   \   0000EE   7404         MOV       A,#0x4
   \   0000F0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F3   E0           MOVX      A,@DPTR
   \   0000F4   4404         ORL       A,#0x4
   \   0000F6   F0           MOVX      @DPTR,A
   \   0000F7   A3           INC       DPTR
   \   0000F8   E0           MOVX      A,@DPTR
   \   0000F9   4400         ORL       A,#0x0
   \   0000FB   F0           MOVX      @DPTR,A
   2090              }
   2091          
   2092              req.touchLinkInfo.touchLinkInfoByte = 0;
   \                     ??initiatorSendScanReq_9:
   \   0000FC   7406         MOV       A,#0x6
   \   0000FE   12....       LCALL     ?XSTACK_DISP0_8
   \   000101   7400         MOV       A,#0x0
   \   000103   F0           MOVX      @DPTR,A
   2093              req.touchLinkFactoryNew = !bdbAttributes.bdbNodeIsOnANetwork;
   \   000104   90....       MOV       DPTR,#bdbAttributes + 14
   \   000107   E0           MOVX      A,@DPTR
   \   000108   7004         JNZ       ??initiatorSendScanReq_10
   \   00010A   D2F0         SETB      B.0
   \   00010C   8002         SJMP      ??initiatorSendScanReq_11
   \                     ??initiatorSendScanReq_10:
   \   00010E   C2F0         CLR       B.0
   \                     ??initiatorSendScanReq_11:
   \   000110   7406         MOV       A,#0x6
   \   000112   12....       LCALL     ?XSTACK_DISP0_8
   \   000115   E0           MOVX      A,@DPTR
   \   000116   54FE         ANL       A,#0xfe
   \   000118   F0           MOVX      @DPTR,A
   \   000119   A3           INC       DPTR
   \   00011A   E0           MOVX      A,@DPTR
   \   00011B   54FF         ANL       A,#0xff
   \   00011D   F0           MOVX      @DPTR,A
   \   00011E   A2F0         MOV       C,B.0
   \   000120   E4           CLR       A
   \   000121   33           RLC       A
   \   000122   F8           MOV       R0,A
   \   000123   7900         MOV       R1,#0x0
   \   000125   7406         MOV       A,#0x6
   \   000127   12....       LCALL     ?XSTACK_DISP0_8
   \   00012A   E0           MOVX      A,@DPTR
   \   00012B   48           ORL       A,R0
   \   00012C   F0           MOVX      @DPTR,A
   \   00012D   A3           INC       DPTR
   \   00012E   E0           MOVX      A,@DPTR
   \   00012F   49           ORL       A,R1
   \   000130   F0           MOVX      @DPTR,A
   2094              req.touchLinkAddressAssignment = TRUE;
   \   000131   7406         MOV       A,#0x6
   \   000133   12....       LCALL     ?XSTACK_DISP0_8
   \   000136   E0           MOVX      A,@DPTR
   \   000137   4402         ORL       A,#0x2
   \   000139   F0           MOVX      @DPTR,A
   \   00013A   A3           INC       DPTR
   \   00013B   E0           MOVX      A,@DPTR
   \   00013C   4400         ORL       A,#0x0
   \   00013E   F0           MOVX      @DPTR,A
   2095              req.touchLinkInitiator = TRUE;
   \   00013F   7406         MOV       A,#0x6
   \   000141   12....       LCALL     ?XSTACK_DISP0_8
   \   000144   E0           MOVX      A,@DPTR
   \   000145   4410         ORL       A,#0x10
   \   000147   F0           MOVX      @DPTR,A
   \   000148   A3           INC       DPTR
   \   000149   E0           MOVX      A,@DPTR
   \   00014A   4400         ORL       A,#0x0
   \   00014C   F0           MOVX      @DPTR,A
   2096          
   2097              // First switch to the right channel
   2098              touchLink_SetChannel( newChannel );
   \   00014D                ; Setup parameters for call to function touchLink_SetChannel
   \   00014D   EE           MOV       A,R6
   \   00014E   F9           MOV       R1,A
   \   00014F   12....       LCALL     `??touchLink_SetChannel::?relay`; Banked call to: touchLink_SetChannel
   2099          
   2100              // Broadcast the request
   2101              bdbTL_Send_ScanReq( TOUCHLINK_INTERNAL_ENDPOINT, &bcastAddr, &req, initiatorSeqNum++ );
   \   000152   90....       MOV       DPTR,#initiatorSeqNum
   \   000155   E0           MOVX      A,@DPTR
   \   000156   F8           MOV       R0,A
   \   000157   7401         MOV       A,#0x1
   \   000159   28           ADD       A,R0
   \   00015A   90....       MOV       DPTR,#initiatorSeqNum
   \   00015D   F0           MOVX      @DPTR,A
   \   00015E                ; Setup parameters for call to function bdbTL_Send_ScanReq
   \   00015E   E8           MOV       A,R0
   \   00015F   F5..         MOV       ?V0,A
   \   000161   78..         MOV       R0,#?V0
   \   000163   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000166   7401         MOV       A,#0x1
   \   000168   12....       LCALL     ?XSTACK_DISP102_8
   \   00016B   7A..         MOV       R2,#bcastAddr & 0xff
   \   00016D   7B..         MOV       R3,#(bcastAddr >> 8) & 0xff
   \   00016F   790D         MOV       R1,#0xd
   \   000171   12....       LCALL     `??bdbTL_Send_ScanReq::?relay`; Banked call to: bdbTL_Send_ScanReq
   \   000174   7401         MOV       A,#0x1
   \   000176   12....       LCALL     ?DEALLOC_XSTACK8
   \   000179   E9           MOV       A,R1
   2102          
   2103              numScanReqSent++;
   \   00017A   90....       MOV       DPTR,#numScanReqSent
   \   00017D   E0           MOVX      A,@DPTR
   \   00017E   2401         ADD       A,#0x1
   \   000180   F0           MOVX      @DPTR,A
   2104          
   2105              // After each transmission, wait BDBCTL_SCAN_TIME_BASE_DURATION seconds
   2106              // to receive any responses.
   2107              osal_start_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_TL_SCAN_BASE_EVT, BDBCTL_SCAN_TIME_BASE_DURATION );
   \   000181                ; Setup parameters for call to function osal_start_timerEx
   \   000181   90....       MOV       DPTR,#__Constant_fa
   \   000184   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000187   7A20         MOV       R2,#0x20
   \   000189   7B00         MOV       R3,#0x0
   \   00018B   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   00018E   E0           MOVX      A,@DPTR
   \   00018F   F9           MOV       R1,A
   \   000190   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000193   7404         MOV       A,#0x4
   \   000195   12....       LCALL     ?DEALLOC_XSTACK8
   \   000198   E9           MOV       A,R1
   \   000199   8004         SJMP      ??initiatorSendScanReq_7
   2108            }
   2109            else
   2110            {
   2111              touchLinkInitiator_AbortTL();
   \                     ??initiatorSendScanReq_8:
   \   00019B                ; Setup parameters for call to function touchLinkInitiator_AbortTL
   \   00019B   12....       LCALL     `??touchLinkInitiator_AbortTL::?relay`; Banked call to: touchLinkInitiator_AbortTL
   \   00019E   E9           MOV       A,R1
   2112            }
   2113          }
   \                     ??initiatorSendScanReq_7:
   \   00019F   7414         MOV       A,#0x14
   \   0001A1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001A4   7F01         MOV       R7,#0x1
   \   0001A6   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??channelIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
   2114          
   2115          /*********************************************************************
   2116           * @fn      initiatorSendNwkStartReq
   2117           *
   2118           * @brief   Send out a Network Start Request command.
   2119           *
   2120           * @param   pRsp - received Scan Response
   2121           *
   2122           * @return  ZStatus_t
   2123           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2124          static ZStatus_t initiatorSendNwkStartReq( bdbTLScanRsp_t *pRsp )
   \                     initiatorSendNwkStartReq:
   2125          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V8,R2
   \   000007   8B..         MOV       ?V9,R3
   2126            bdbTLNwkStartReq_t *pReq;
   2127            ZStatus_t status;
   2128          
   2129            pReq = (bdbTLNwkStartReq_t *)osal_mem_alloc( sizeof( bdbTLNwkStartReq_t ) );
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   7A38         MOV       R2,#0x38
   \   00000B   7B00         MOV       R3,#0x0
   \   00000D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000010   8A..         MOV       ?V0,R2
   \   000012   8B..         MOV       ?V1,R3
   \   000014   85....       MOV       ?V2,?V0
   \   000017   85....       MOV       ?V3,?V1
   2130            if ( pReq != NULL )
   \   00001A   E5..         MOV       A,?V2
   \   00001C   45..         ORL       A,?V3
   \   00001E   7003         JNZ       $+5
   \   000020   02....       LJMP      ??initiatorSendNwkStartReq_0 & 0xFFFF
   2131            {
   2132              uint16 i;
   2133              bdbTLNwkParams_t *pParams = &(pReq->nwkParams);
   \   000023   E5..         MOV       A,?V2
   \   000025   2404         ADD       A,#0x4
   \   000027   F5..         MOV       ?V0,A
   \   000029   E4           CLR       A
   \   00002A   35..         ADDC      A,?V3
   \   00002C   F5..         MOV       ?V1,A
   2134          
   2135              osal_memset( pReq, 0, sizeof( bdbTLNwkStartReq_t ) );
   \   00002E                ; Setup parameters for call to function osal_memset
   \   00002E   7C38         MOV       R4,#0x38
   \   000030   7D00         MOV       R5,#0x0
   \   000032   7900         MOV       R1,#0x0
   \   000034   AA..         MOV       R2,?V2
   \   000036   AB..         MOV       R3,?V3
   \   000038   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2136          
   2137              // Build the request
   2138              pReq->transID = selectedTarget.scanRsp.transID;
   \   00003B   90....       MOV       DPTR,#selectedTarget
   \   00003E   12....       LCALL     ?XLOAD_R0123
   \   000041   85..82       MOV       DPL,?V2
   \   000044   85..83       MOV       DPH,?V3
   \   000047   12....       LCALL     ?XSTORE_R0123
   2139          
   2140              // Find out key index (prefer highest)
   2141              for ( i = 15; i > 0; i-- )
   \   00004A   7E0F         MOV       R6,#0xf
   \   00004C   7F00         MOV       R7,#0x0
   \                     ??initiatorSendNwkStartReq_1:
   \   00004E   EE           MOV       A,R6
   \   00004F   4F           ORL       A,R7
   \   000050   6034         JZ        ??initiatorSendNwkStartReq_2
   2142              {
   2143                if ( ( (uint16)1 << i ) & pRsp->keyBitmask )
   \   000052   85..82       MOV       DPL,?V8
   \   000055   85..83       MOV       DPH,?V9
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   F5..         MOV       ?V4,A
   \   000064   A3           INC       DPTR
   \   000065   E0           MOVX      A,@DPTR
   \   000066   F5..         MOV       ?V5,A
   \   000068   EE           MOV       A,R6
   \   000069   78..         MOV       R0,#?V4
   \   00006B   12....       LCALL     ?US_SHR
   \   00006E   E5..         MOV       A,?V4
   \   000070   5401         ANL       A,#0x1
   \   000072   F8           MOV       R0,A
   \   000073   E5..         MOV       A,?V5
   \   000075   5400         ANL       A,#0x0
   \   000077   F9           MOV       R1,A
   \   000078   E8           MOV       A,R0
   \   000079   49           ORL       A,R1
   \   00007A   700A         JNZ       ??initiatorSendNwkStartReq_2
   2144                {
   2145                  break;
   2146                }
   2147              }
   \   00007C   EE           MOV       A,R6
   \   00007D   24FF         ADD       A,#-0x1
   \   00007F   FE           MOV       R6,A
   \   000080   EF           MOV       A,R7
   \   000081   34FF         ADDC      A,#-0x1
   \   000083   FF           MOV       R7,A
   \   000084   80C8         SJMP      ??initiatorSendNwkStartReq_1
   2148              pParams->keyIndex = i;
   \                     ??initiatorSendNwkStartReq_2:
   \   000086   EE           MOV       A,R6
   \   000087   C0E0         PUSH      A
   \   000089   85..82       MOV       DPL,?V0
   \   00008C   85..83       MOV       DPH,?V1
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   D0E0         POP       A
   \   000099   F0           MOVX      @DPTR,A
   2149          
   2150              // Copy in the encrypted network key
   2151              touchLink_EncryptNwkKey( pParams->nwkKey, i, pRsp->transID, pRsp->responseID );
   \   00009A                ; Setup parameters for call to function touchLink_EncryptNwkKey
   \   00009A   E5..         MOV       A,?V8
   \   00009C   240B         ADD       A,#0xb
   \   00009E   F582         MOV       DPL,A
   \   0000A0   E4           CLR       A
   \   0000A1   35..         ADDC      A,?V9
   \   0000A3   F583         MOV       DPH,A
   \   0000A5   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000A8   85..82       MOV       DPL,?V8
   \   0000AB   85..83       MOV       DPH,?V9
   \   0000AE   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000B1   EE           MOV       A,R6
   \   0000B2   F9           MOV       R1,A
   \   0000B3   E5..         MOV       A,?V0
   \   0000B5   2409         ADD       A,#0x9
   \   0000B7   FA           MOV       R2,A
   \   0000B8   E4           CLR       A
   \   0000B9   35..         ADDC      A,?V1
   \   0000BB   FB           MOV       R3,A
   \   0000BC   12....       LCALL     `??touchLink_EncryptNwkKey::?relay`; Banked call to: touchLink_EncryptNwkKey
   \   0000BF   7408         MOV       A,#0x8
   \   0000C1   12....       LCALL     ?DEALLOC_XSTACK8
   2152          
   2153              pParams->nwkAddr = touchLink_PopNwkAddress();
   \   0000C4                ; Setup parameters for call to function touchLink_PopNwkAddress
   \   0000C4   12....       LCALL     `??touchLink_PopNwkAddress::?relay`; Banked call to: touchLink_PopNwkAddress
   \   0000C7   E5..         MOV       A,?V0
   \   0000C9   241C         ADD       A,#0x1c
   \   0000CB   F582         MOV       DPL,A
   \   0000CD   E4           CLR       A
   \   0000CE   35..         ADDC      A,?V1
   \   0000D0   F583         MOV       DPH,A
   \   0000D2   EA           MOV       A,R2
   \   0000D3   F0           MOVX      @DPTR,A
   \   0000D4   A3           INC       DPTR
   \   0000D5   EB           MOV       A,R3
   \   0000D6   F0           MOVX      @DPTR,A
   2154              if ( pParams->nwkAddr == 0 )
   \   0000D7   E5..         MOV       A,?V0
   \   0000D9   241C         ADD       A,#0x1c
   \   0000DB   F582         MOV       DPL,A
   \   0000DD   E4           CLR       A
   \   0000DE   35..         ADDC      A,?V1
   \   0000E0   F583         MOV       DPH,A
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   F8           MOV       R0,A
   \   0000E4   A3           INC       DPTR
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   F9           MOV       R1,A
   \   0000E7   E8           MOV       A,R0
   \   0000E8   49           ORL       A,R1
   \   0000E9   7013         JNZ       ??initiatorSendNwkStartReq_3
   2155              {
   2156                pParams->nwkAddr = osal_rand();
   \   0000EB                ; Setup parameters for call to function osal_rand
   \   0000EB   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   0000EE   E5..         MOV       A,?V0
   \   0000F0   241C         ADD       A,#0x1c
   \   0000F2   F582         MOV       DPL,A
   \   0000F4   E4           CLR       A
   \   0000F5   35..         ADDC      A,?V1
   \   0000F7   F583         MOV       DPH,A
   \   0000F9   EA           MOV       A,R2
   \   0000FA   F0           MOVX      @DPTR,A
   \   0000FB   A3           INC       DPTR
   \   0000FC   EB           MOV       A,R3
   \   0000FD   F0           MOVX      @DPTR,A
   2157              }
   2158              // update address for app notification
   2159              selectedTarget.newNwkAddr = pParams->nwkAddr;
   \                     ??initiatorSendNwkStartReq_3:
   \   0000FE   E5..         MOV       A,?V0
   \   000100   241C         ADD       A,#0x1c
   \   000102   F582         MOV       DPL,A
   \   000104   E4           CLR       A
   \   000105   35..         ADDC      A,?V1
   \   000107   F583         MOV       DPH,A
   \   000109   E0           MOVX      A,@DPTR
   \   00010A   F8           MOV       R0,A
   \   00010B   A3           INC       DPTR
   \   00010C   E0           MOVX      A,@DPTR
   \   00010D   F9           MOV       R1,A
   \   00010E   90....       MOV       DPTR,#selectedTarget + 50
   \   000111   E8           MOV       A,R0
   \   000112   F0           MOVX      @DPTR,A
   \   000113   A3           INC       DPTR
   \   000114   E9           MOV       A,R1
   \   000115   F0           MOVX      @DPTR,A
   2160              selectedTargetNwkAddr = pParams->nwkAddr;
   \   000116   E5..         MOV       A,?V0
   \   000118   241C         ADD       A,#0x1c
   \   00011A   F582         MOV       DPL,A
   \   00011C   E4           CLR       A
   \   00011D   35..         ADDC      A,?V1
   \   00011F   F583         MOV       DPH,A
   \   000121   E0           MOVX      A,@DPTR
   \   000122   F8           MOV       R0,A
   \   000123   A3           INC       DPTR
   \   000124   E0           MOVX      A,@DPTR
   \   000125   F9           MOV       R1,A
   \   000126   90....       MOV       DPTR,#selectedTargetNwkAddr
   \   000129   E8           MOV       A,R0
   \   00012A   F0           MOVX      @DPTR,A
   \   00012B   A3           INC       DPTR
   \   00012C   E9           MOV       A,R1
   \   00012D   F0           MOVX      @DPTR,A
   2161          
   2162              // Set group ID range
   2163              if ( pRsp->totalGrpIDs > 0 )
   \   00012E   E5..         MOV       A,?V8
   \   000130   241E         ADD       A,#0x1e
   \   000132   F582         MOV       DPL,A
   \   000134   E4           CLR       A
   \   000135   35..         ADDC      A,?V9
   \   000137   F583         MOV       DPH,A
   \   000139   E0           MOVX      A,@DPTR
   \   00013A   6022         JZ        ??initiatorSendNwkStartReq_4
   2164              {
   2165                touchLink_PopGrpIDRange( pRsp->totalGrpIDs, &(pParams->grpIDsBegin), &(pParams->grpIDsEnd) );
   \   00013C                ; Setup parameters for call to function touchLink_PopGrpIDRange
   \   00013C   E5..         MOV       A,?V0
   \   00013E   2420         ADD       A,#0x20
   \   000140   FC           MOV       R4,A
   \   000141   E4           CLR       A
   \   000142   35..         ADDC      A,?V1
   \   000144   FD           MOV       R5,A
   \   000145   E5..         MOV       A,?V0
   \   000147   241E         ADD       A,#0x1e
   \   000149   FA           MOV       R2,A
   \   00014A   E4           CLR       A
   \   00014B   35..         ADDC      A,?V1
   \   00014D   FB           MOV       R3,A
   \   00014E   E5..         MOV       A,?V8
   \   000150   241E         ADD       A,#0x1e
   \   000152   F582         MOV       DPL,A
   \   000154   E4           CLR       A
   \   000155   35..         ADDC      A,?V9
   \   000157   F583         MOV       DPH,A
   \   000159   E0           MOVX      A,@DPTR
   \   00015A   F9           MOV       R1,A
   \   00015B   12....       LCALL     `??touchLink_PopGrpIDRange::?relay`; Banked call to: touchLink_PopGrpIDRange
   2166              }
   2167          
   2168              if ( pRsp->touchLinkAddressAssignment )
   \                     ??initiatorSendNwkStartReq_4:
   \   00015E   85..82       MOV       DPL,?V8
   \   000161   85..83       MOV       DPH,?V9
   \   000164   A3           INC       DPTR
   \   000165   A3           INC       DPTR
   \   000166   A3           INC       DPTR
   \   000167   A3           INC       DPTR
   \   000168   A3           INC       DPTR
   \   000169   A3           INC       DPTR
   \   00016A   A3           INC       DPTR
   \   00016B   E0           MOVX      A,@DPTR
   \   00016C   F8           MOV       R0,A
   \   00016D   A3           INC       DPTR
   \   00016E   E0           MOVX      A,@DPTR
   \   00016F   F9           MOV       R1,A
   \   000170   E8           MOV       A,R0
   \   000171   C3           CLR       C
   \   000172   13           RRC       A
   \   000173   5401         ANL       A,#0x1
   \   000175   A2E0         MOV       C,0xE0 /* A   */.0
   \   000177   503A         JNC       ??initiatorSendNwkStartReq_5
   2169              {
   2170                touchLink_SplitFreeRanges( &(pParams->freeNwkAddrBegin), &(pParams->freeNwkAddrEnd),
   2171                                     &(pParams->freeGrpIDBegin), &(pParams->freeGrpIDEnd) );
   \   000179                ; Setup parameters for call to function touchLink_SplitFreeRanges
   \   000179   E5..         MOV       A,?V0
   \   00017B   2428         ADD       A,#0x28
   \   00017D   F5..         MOV       ?V4,A
   \   00017F   E4           CLR       A
   \   000180   35..         ADDC      A,?V1
   \   000182   F5..         MOV       ?V5,A
   \   000184   78..         MOV       R0,#?V4
   \   000186   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000189   E5..         MOV       A,?V0
   \   00018B   2426         ADD       A,#0x26
   \   00018D   F5..         MOV       ?V4,A
   \   00018F   E4           CLR       A
   \   000190   35..         ADDC      A,?V1
   \   000192   F5..         MOV       ?V5,A
   \   000194   78..         MOV       R0,#?V4
   \   000196   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000199   E5..         MOV       A,?V0
   \   00019B   2424         ADD       A,#0x24
   \   00019D   FC           MOV       R4,A
   \   00019E   E4           CLR       A
   \   00019F   35..         ADDC      A,?V1
   \   0001A1   FD           MOV       R5,A
   \   0001A2   E5..         MOV       A,?V0
   \   0001A4   2422         ADD       A,#0x22
   \   0001A6   FA           MOV       R2,A
   \   0001A7   E4           CLR       A
   \   0001A8   35..         ADDC      A,?V1
   \   0001AA   FB           MOV       R3,A
   \   0001AB   12....       LCALL     `??touchLink_SplitFreeRanges::?relay`; Banked call to: touchLink_SplitFreeRanges
   \   0001AE   7404         MOV       A,#0x4
   \   0001B0   12....       LCALL     ?DEALLOC_XSTACK8
   2172              }
   2173          
   2174          #ifdef TOUCHLINK_INITIATOR_SET_NEW_NWK_PARAMS
   2175              pParams->logicalChannel = _NIB.nwkLogicalChannel;
   2176              pParams->panId = _NIB.nwkPanId;
   2177              osal_memcpy( pParams->extendedPANID, _NIB.extendedPANID ,Z_EXTADDR_LEN);
   2178          #endif
   2179          
   2180              osal_cpyExtAddr( pReq->initiatorIeeeAddr, NLME_GetExtAddr() );
   \                     ??initiatorSendNwkStartReq_5:
   \   0001B3                ; Setup parameters for call to function NLME_GetExtAddr
   \   0001B3   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   0001B6   8A..         MOV       ?V4,R2
   \   0001B8   8B..         MOV       ?V5,R3
   \   0001BA   AC..         MOV       R4,?V4
   \   0001BC   AD..         MOV       R5,?V5
   \   0001BE                ; Setup parameters for call to function sAddrExtCpy
   \   0001BE   E5..         MOV       A,?V2
   \   0001C0   242E         ADD       A,#0x2e
   \   0001C2   FA           MOV       R2,A
   \   0001C3   E4           CLR       A
   \   0001C4   35..         ADDC      A,?V3
   \   0001C6   FB           MOV       R3,A
   \   0001C7   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2181              pReq->initiatorNwkAddr = _NIB.nwkDevAddress;
   \   0001CA   90....       MOV       DPTR,#_NIB + 20
   \   0001CD   E0           MOVX      A,@DPTR
   \   0001CE   F8           MOV       R0,A
   \   0001CF   A3           INC       DPTR
   \   0001D0   E0           MOVX      A,@DPTR
   \   0001D1   F9           MOV       R1,A
   \   0001D2   E5..         MOV       A,?V2
   \   0001D4   2436         ADD       A,#0x36
   \   0001D6   F582         MOV       DPL,A
   \   0001D8   E4           CLR       A
   \   0001D9   35..         ADDC      A,?V3
   \   0001DB   F583         MOV       DPH,A
   \   0001DD   E8           MOV       A,R0
   \   0001DE   F0           MOVX      @DPTR,A
   \   0001DF   A3           INC       DPTR
   \   0001E0   E9           MOV       A,R1
   \   0001E1   F0           MOVX      @DPTR,A
   2182          
   2183              status = bdbTL_Send_NwkStartReq( TOUCHLINK_INTERNAL_ENDPOINT, &(selectedTarget.srcAddr), pReq, initiatorSeqNum++ );
   \   0001E2   90....       MOV       DPTR,#initiatorSeqNum
   \   0001E5   E0           MOVX      A,@DPTR
   \   0001E6   F8           MOV       R0,A
   \   0001E7   7401         MOV       A,#0x1
   \   0001E9   28           ADD       A,R0
   \   0001EA   90....       MOV       DPTR,#initiatorSeqNum
   \   0001ED   F0           MOVX      @DPTR,A
   \   0001EE                ; Setup parameters for call to function bdbTL_Send_NwkStartReq
   \   0001EE   E8           MOV       A,R0
   \   0001EF   F5..         MOV       ?V4,A
   \   0001F1   78..         MOV       R0,#?V4
   \   0001F3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001F6   AC..         MOV       R4,?V2
   \   0001F8   AD..         MOV       R5,?V3
   \   0001FA   7A..         MOV       R2,#(selectedTarget + 38) & 0xff
   \   0001FC   7B..         MOV       R3,#((selectedTarget + 38) >> 8) & 0xff
   \   0001FE   790D         MOV       R1,#0xd
   \   000200   12....       LCALL     `??bdbTL_Send_NwkStartReq::?relay`; Banked call to: bdbTL_Send_NwkStartReq
   \   000203   7401         MOV       A,#0x1
   \   000205   12....       LCALL     ?DEALLOC_XSTACK8
   \   000208   E9           MOV       A,R1
   \   000209   F5..         MOV       ?V7,A
   2184              if ( status == ZSuccess )
   \   00020B   E5..         MOV       A,?V7
   \   00020D   7054         JNZ       ??initiatorSendNwkStartReq_6
   2185              {
   2186                // Keep a copy of the encryted network key sent to the target
   2187                keyIndexSent = i;
   \   00020F   EE           MOV       A,R6
   \   000210   90....       MOV       DPTR,#keyIndexSent
   \   000213   F0           MOVX      @DPTR,A
   2188                osal_memcpy( encKeySent, pParams->nwkKey, SEC_KEY_LEN );
   \   000214                ; Setup parameters for call to function osal_memcpy
   \   000214   E5..         MOV       A,?V0
   \   000216   2409         ADD       A,#0x9
   \   000218   F5..         MOV       ?V4,A
   \   00021A   E4           CLR       A
   \   00021B   35..         ADDC      A,?V1
   \   00021D   F5..         MOV       ?V5,A
   \   00021F   75..00       MOV       ?V6,#0x0
   \   000222   78..         MOV       R0,#?V4
   \   000224   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000227   7C10         MOV       R4,#0x10
   \   000229   7D00         MOV       R5,#0x0
   \   00022B   7A..         MOV       R2,#encKeySent & 0xff
   \   00022D   7B..         MOV       R3,#(encKeySent >> 8) & 0xff
   \   00022F   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000232   7403         MOV       A,#0x3
   \   000234   12....       LCALL     ?DEALLOC_XSTACK8
   2189                responseIDSent = pRsp->responseID;
   \   000237   E5..         MOV       A,?V8
   \   000239   240B         ADD       A,#0xb
   \   00023B   F582         MOV       DPL,A
   \   00023D   E4           CLR       A
   \   00023E   35..         ADDC      A,?V9
   \   000240   F583         MOV       DPH,A
   \   000242   12....       LCALL     ?XLOAD_R0123
   \   000245   90....       MOV       DPTR,#responseIDSent
   \   000248   12....       LCALL     ?XSTORE_R0123
   2190          
   2191                // After the transmission, wait BDBCTL_RX_WINDOW_DURATION seconds to
   2192                // receive a response.
   2193                osal_start_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_W4_NWK_START_RSP_EVT, BDBCTL_RX_WINDOW_DURATION );
   \   00024B                ; Setup parameters for call to function osal_start_timerEx
   \   00024B   90....       MOV       DPTR,#__Constant_1388
   \   00024E   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000251   7A80         MOV       R2,#-0x80
   \   000253   7B00         MOV       R3,#0x0
   \   000255   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000258   E0           MOVX      A,@DPTR
   \   000259   F9           MOV       R1,A
   \   00025A   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00025D   7404         MOV       A,#0x4
   \   00025F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000262   E9           MOV       A,R1
   2194              }
   2195          
   2196              osal_mem_free( pReq );
   \                     ??initiatorSendNwkStartReq_6:
   \   000263                ; Setup parameters for call to function osal_mem_free
   \   000263   AA..         MOV       R2,?V2
   \   000265   AB..         MOV       R3,?V3
   \   000267   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00026A   8003         SJMP      ??initiatorSendNwkStartReq_7
   2197            }
   2198            else
   2199            {
   2200              status = ZMemError;
   \                     ??initiatorSendNwkStartReq_0:
   \   00026C   75..10       MOV       ?V7,#0x10
   2201            }
   2202          
   2203            return ( status );
   \                     ??initiatorSendNwkStartReq_7:
   \   00026F   A9..         MOV       R1,?V7
   \   000271   7F0A         MOV       R7,#0xa
   \   000273   02....       LJMP      ?BANKED_LEAVE_XDATA
   2204          }
   2205          
   2206          /*********************************************************************
   2207           * @fn      initiatorSendNwkJoinReq
   2208           *
   2209           * @brief   Send out a Network Join Router or End Device Request command.
   2210           *
   2211           * @param   pRsp - received Scan Response
   2212           *
   2213           * @return  ZStatus_t
   2214           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2215          static ZStatus_t initiatorSendNwkJoinReq( bdbTLScanRsp_t *pRsp )
   \                     initiatorSendNwkJoinReq:
   2216          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V8,R2
   \   000007   8B..         MOV       ?V9,R3
   2217            bdbTLNwkJoinReq_t *pReq;
   2218            ZStatus_t status;
   2219            bdbFindingBindingRespondent_t *pCurr;
   2220          
   2221            pReq = (bdbTLNwkJoinReq_t *)osal_mem_alloc( sizeof( bdbTLNwkJoinReq_t ) );
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   7A2F         MOV       R2,#0x2f
   \   00000B   7B00         MOV       R3,#0x0
   \   00000D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000010   8A..         MOV       ?V0,R2
   \   000012   8B..         MOV       ?V1,R3
   \   000014   85....       MOV       ?V4,?V0
   \   000017   85....       MOV       ?V5,?V1
   2222            if ( pReq != NULL )
   \   00001A   E5..         MOV       A,?V4
   \   00001C   45..         ORL       A,?V5
   \   00001E   7003         JNZ       $+5
   \   000020   02....       LJMP      ??initiatorSendNwkJoinReq_0 & 0xFFFF
   2223            {
   2224              uint16 i;
   2225              bdbTLNwkParams_t *pParams = &(pReq->nwkParams);
   \   000023   E5..         MOV       A,?V4
   \   000025   2404         ADD       A,#0x4
   \   000027   F5..         MOV       ?V0,A
   \   000029   E4           CLR       A
   \   00002A   35..         ADDC      A,?V5
   \   00002C   F5..         MOV       ?V1,A
   2226          
   2227              osal_memset( pReq, 0, sizeof( bdbTLNwkJoinReq_t ) );
   \   00002E                ; Setup parameters for call to function osal_memset
   \   00002E   7C2F         MOV       R4,#0x2f
   \   000030   7D00         MOV       R5,#0x0
   \   000032   7900         MOV       R1,#0x0
   \   000034   AA..         MOV       R2,?V4
   \   000036   AB..         MOV       R3,?V5
   \   000038   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2228          
   2229              // Build the request
   2230              pReq->transID = selectedTarget.scanRsp.transID;
   \   00003B   90....       MOV       DPTR,#selectedTarget
   \   00003E   12....       LCALL     ?XLOAD_R0123
   \   000041   85..82       MOV       DPL,?V4
   \   000044   85..83       MOV       DPH,?V5
   \   000047   12....       LCALL     ?XSTORE_R0123
   2231          
   2232              // Find out key index (prefer highest)
   2233              for ( i = 15; i > 0; i-- )
   \   00004A   7E0F         MOV       R6,#0xf
   \   00004C   7F00         MOV       R7,#0x0
   \                     ??initiatorSendNwkJoinReq_1:
   \   00004E   EE           MOV       A,R6
   \   00004F   4F           ORL       A,R7
   \   000050   6034         JZ        ??initiatorSendNwkJoinReq_2
   2234              {
   2235                if ( ( (uint16)1 << i ) & pRsp->keyBitmask )
   \   000052   85..82       MOV       DPL,?V8
   \   000055   85..83       MOV       DPH,?V9
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   F5..         MOV       ?V10,A
   \   000064   A3           INC       DPTR
   \   000065   E0           MOVX      A,@DPTR
   \   000066   F5..         MOV       ?V11,A
   \   000068   EE           MOV       A,R6
   \   000069   78..         MOV       R0,#?V10
   \   00006B   12....       LCALL     ?US_SHR
   \   00006E   E5..         MOV       A,?V10
   \   000070   5401         ANL       A,#0x1
   \   000072   F8           MOV       R0,A
   \   000073   E5..         MOV       A,?V11
   \   000075   5400         ANL       A,#0x0
   \   000077   F9           MOV       R1,A
   \   000078   E8           MOV       A,R0
   \   000079   49           ORL       A,R1
   \   00007A   700A         JNZ       ??initiatorSendNwkJoinReq_2
   2236                {
   2237                  break;
   2238                }
   2239              }
   \   00007C   EE           MOV       A,R6
   \   00007D   24FF         ADD       A,#-0x1
   \   00007F   FE           MOV       R6,A
   \   000080   EF           MOV       A,R7
   \   000081   34FF         ADDC      A,#-0x1
   \   000083   FF           MOV       R7,A
   \   000084   80C8         SJMP      ??initiatorSendNwkJoinReq_1
   2240              pParams->keyIndex = i;
   \                     ??initiatorSendNwkJoinReq_2:
   \   000086   EE           MOV       A,R6
   \   000087   C0E0         PUSH      A
   \   000089   85..82       MOV       DPL,?V0
   \   00008C   85..83       MOV       DPH,?V1
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   D0E0         POP       A
   \   000099   F0           MOVX      @DPTR,A
   2241          
   2242              // Copy in the encrypted network key
   2243              touchLink_EncryptNwkKey( pParams->nwkKey, i, pRsp->transID, pRsp->responseID );
   \   00009A                ; Setup parameters for call to function touchLink_EncryptNwkKey
   \   00009A   E5..         MOV       A,?V8
   \   00009C   240B         ADD       A,#0xb
   \   00009E   F582         MOV       DPL,A
   \   0000A0   E4           CLR       A
   \   0000A1   35..         ADDC      A,?V9
   \   0000A3   F583         MOV       DPH,A
   \   0000A5   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000A8   85..82       MOV       DPL,?V8
   \   0000AB   85..83       MOV       DPH,?V9
   \   0000AE   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000B1   EE           MOV       A,R6
   \   0000B2   F9           MOV       R1,A
   \   0000B3   E5..         MOV       A,?V0
   \   0000B5   2409         ADD       A,#0x9
   \   0000B7   FA           MOV       R2,A
   \   0000B8   E4           CLR       A
   \   0000B9   35..         ADDC      A,?V1
   \   0000BB   FB           MOV       R3,A
   \   0000BC   12....       LCALL     `??touchLink_EncryptNwkKey::?relay`; Banked call to: touchLink_EncryptNwkKey
   \   0000BF   7408         MOV       A,#0x8
   \   0000C1   12....       LCALL     ?DEALLOC_XSTACK8
   2244          
   2245              pParams->nwkAddr = touchLink_PopNwkAddress();
   \   0000C4                ; Setup parameters for call to function touchLink_PopNwkAddress
   \   0000C4   12....       LCALL     `??touchLink_PopNwkAddress::?relay`; Banked call to: touchLink_PopNwkAddress
   \   0000C7   E5..         MOV       A,?V0
   \   0000C9   241C         ADD       A,#0x1c
   \   0000CB   F582         MOV       DPL,A
   \   0000CD   E4           CLR       A
   \   0000CE   35..         ADDC      A,?V1
   \   0000D0   F583         MOV       DPH,A
   \   0000D2   EA           MOV       A,R2
   \   0000D3   F0           MOVX      @DPTR,A
   \   0000D4   A3           INC       DPTR
   \   0000D5   EB           MOV       A,R3
   \   0000D6   F0           MOVX      @DPTR,A
   2246              if ( pParams->nwkAddr == 0 )
   \   0000D7   E5..         MOV       A,?V0
   \   0000D9   241C         ADD       A,#0x1c
   \   0000DB   F582         MOV       DPL,A
   \   0000DD   E4           CLR       A
   \   0000DE   35..         ADDC      A,?V1
   \   0000E0   F583         MOV       DPH,A
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   F8           MOV       R0,A
   \   0000E4   A3           INC       DPTR
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   F9           MOV       R1,A
   \   0000E7   E8           MOV       A,R0
   \   0000E8   49           ORL       A,R1
   \   0000E9   7013         JNZ       ??initiatorSendNwkJoinReq_3
   2247              {
   2248                pParams->nwkAddr = osal_rand();
   \   0000EB                ; Setup parameters for call to function osal_rand
   \   0000EB   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   0000EE   E5..         MOV       A,?V0
   \   0000F0   241C         ADD       A,#0x1c
   \   0000F2   F582         MOV       DPL,A
   \   0000F4   E4           CLR       A
   \   0000F5   35..         ADDC      A,?V1
   \   0000F7   F583         MOV       DPH,A
   \   0000F9   EA           MOV       A,R2
   \   0000FA   F0           MOVX      @DPTR,A
   \   0000FB   A3           INC       DPTR
   \   0000FC   EB           MOV       A,R3
   \   0000FD   F0           MOVX      @DPTR,A
   2249              }
   2250              // update address for app notification
   2251              selectedTarget.newNwkAddr = pParams->nwkAddr;
   \                     ??initiatorSendNwkJoinReq_3:
   \   0000FE   E5..         MOV       A,?V0
   \   000100   241C         ADD       A,#0x1c
   \   000102   F582         MOV       DPL,A
   \   000104   E4           CLR       A
   \   000105   35..         ADDC      A,?V1
   \   000107   F583         MOV       DPH,A
   \   000109   E0           MOVX      A,@DPTR
   \   00010A   F8           MOV       R0,A
   \   00010B   A3           INC       DPTR
   \   00010C   E0           MOVX      A,@DPTR
   \   00010D   F9           MOV       R1,A
   \   00010E   90....       MOV       DPTR,#selectedTarget + 50
   \   000111   E8           MOV       A,R0
   \   000112   F0           MOVX      @DPTR,A
   \   000113   A3           INC       DPTR
   \   000114   E9           MOV       A,R1
   \   000115   F0           MOVX      @DPTR,A
   2252              selectedTargetNwkAddr = pParams->nwkAddr;
   \   000116   E5..         MOV       A,?V0
   \   000118   241C         ADD       A,#0x1c
   \   00011A   F582         MOV       DPL,A
   \   00011C   E4           CLR       A
   \   00011D   35..         ADDC      A,?V1
   \   00011F   F583         MOV       DPH,A
   \   000121   E0           MOVX      A,@DPTR
   \   000122   F8           MOV       R0,A
   \   000123   A3           INC       DPTR
   \   000124   E0           MOVX      A,@DPTR
   \   000125   F9           MOV       R1,A
   \   000126   90....       MOV       DPTR,#selectedTargetNwkAddr
   \   000129   E8           MOV       A,R0
   \   00012A   F0           MOVX      @DPTR,A
   \   00012B   A3           INC       DPTR
   \   00012C   E9           MOV       A,R1
   \   00012D   F0           MOVX      @DPTR,A
   2253              
   2254              // Set group ID range
   2255              if ( pRsp->totalGrpIDs > 0 )
   \   00012E   E5..         MOV       A,?V8
   \   000130   241E         ADD       A,#0x1e
   \   000132   F582         MOV       DPL,A
   \   000134   E4           CLR       A
   \   000135   35..         ADDC      A,?V9
   \   000137   F583         MOV       DPH,A
   \   000139   E0           MOVX      A,@DPTR
   \   00013A   6022         JZ        ??initiatorSendNwkJoinReq_4
   2256              {
   2257                touchLink_PopGrpIDRange( pRsp->totalGrpIDs, &(pParams->grpIDsBegin), &(pParams->grpIDsEnd) );
   \   00013C                ; Setup parameters for call to function touchLink_PopGrpIDRange
   \   00013C   E5..         MOV       A,?V0
   \   00013E   2420         ADD       A,#0x20
   \   000140   FC           MOV       R4,A
   \   000141   E4           CLR       A
   \   000142   35..         ADDC      A,?V1
   \   000144   FD           MOV       R5,A
   \   000145   E5..         MOV       A,?V0
   \   000147   241E         ADD       A,#0x1e
   \   000149   FA           MOV       R2,A
   \   00014A   E4           CLR       A
   \   00014B   35..         ADDC      A,?V1
   \   00014D   FB           MOV       R3,A
   \   00014E   E5..         MOV       A,?V8
   \   000150   241E         ADD       A,#0x1e
   \   000152   F582         MOV       DPL,A
   \   000154   E4           CLR       A
   \   000155   35..         ADDC      A,?V9
   \   000157   F583         MOV       DPH,A
   \   000159   E0           MOVX      A,@DPTR
   \   00015A   F9           MOV       R1,A
   \   00015B   12....       LCALL     `??touchLink_PopGrpIDRange::?relay`; Banked call to: touchLink_PopGrpIDRange
   2258              }
   2259          
   2260              if ( pRsp->touchLinkAddressAssignment )
   \                     ??initiatorSendNwkJoinReq_4:
   \   00015E   85..82       MOV       DPL,?V8
   \   000161   85..83       MOV       DPH,?V9
   \   000164   A3           INC       DPTR
   \   000165   A3           INC       DPTR
   \   000166   A3           INC       DPTR
   \   000167   A3           INC       DPTR
   \   000168   A3           INC       DPTR
   \   000169   A3           INC       DPTR
   \   00016A   A3           INC       DPTR
   \   00016B   E0           MOVX      A,@DPTR
   \   00016C   F8           MOV       R0,A
   \   00016D   A3           INC       DPTR
   \   00016E   E0           MOVX      A,@DPTR
   \   00016F   F9           MOV       R1,A
   \   000170   E8           MOV       A,R0
   \   000171   C3           CLR       C
   \   000172   13           RRC       A
   \   000173   5401         ANL       A,#0x1
   \   000175   A2E0         MOV       C,0xE0 /* A   */.0
   \   000177   503A         JNC       ??initiatorSendNwkJoinReq_5
   2261              {
   2262                touchLink_SplitFreeRanges( &(pParams->freeNwkAddrBegin), &(pParams->freeNwkAddrEnd),
   2263                                     &(pParams->freeGrpIDBegin), &(pParams->freeGrpIDEnd) );
   \   000179                ; Setup parameters for call to function touchLink_SplitFreeRanges
   \   000179   E5..         MOV       A,?V0
   \   00017B   2428         ADD       A,#0x28
   \   00017D   F5..         MOV       ?V10,A
   \   00017F   E4           CLR       A
   \   000180   35..         ADDC      A,?V1
   \   000182   F5..         MOV       ?V11,A
   \   000184   78..         MOV       R0,#?V10
   \   000186   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000189   E5..         MOV       A,?V0
   \   00018B   2426         ADD       A,#0x26
   \   00018D   F5..         MOV       ?V10,A
   \   00018F   E4           CLR       A
   \   000190   35..         ADDC      A,?V1
   \   000192   F5..         MOV       ?V11,A
   \   000194   78..         MOV       R0,#?V10
   \   000196   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000199   E5..         MOV       A,?V0
   \   00019B   2424         ADD       A,#0x24
   \   00019D   FC           MOV       R4,A
   \   00019E   E4           CLR       A
   \   00019F   35..         ADDC      A,?V1
   \   0001A1   FD           MOV       R5,A
   \   0001A2   E5..         MOV       A,?V0
   \   0001A4   2422         ADD       A,#0x22
   \   0001A6   FA           MOV       R2,A
   \   0001A7   E4           CLR       A
   \   0001A8   35..         ADDC      A,?V1
   \   0001AA   FB           MOV       R3,A
   \   0001AB   12....       LCALL     `??touchLink_SplitFreeRanges::?relay`; Banked call to: touchLink_SplitFreeRanges
   \   0001AE   7404         MOV       A,#0x4
   \   0001B0   12....       LCALL     ?DEALLOC_XSTACK8
   2264              }
   2265              // update 
   2266              pCurr = pRespondentHead;
   \                     ??initiatorSendNwkJoinReq_5:
   \   0001B3   90....       MOV       DPTR,#pRespondentHead
   \   0001B6   E0           MOVX      A,@DPTR
   \   0001B7   F8           MOV       R0,A
   \   0001B8   A3           INC       DPTR
   \   0001B9   E0           MOVX      A,@DPTR
   \   0001BA   F9           MOV       R1,A
   \   0001BB   88..         MOV       ?V6,R0
   \   0001BD   89..         MOV       ?V7,R1
   2267              while( pCurr != NULL )
   \                     ??initiatorSendNwkJoinReq_6:
   \   0001BF   E5..         MOV       A,?V6
   \   0001C1   45..         ORL       A,?V7
   \   0001C3   605D         JZ        ??initiatorSendNwkJoinReq_7
   2268              {
   2269                pCurr->data.addr.shortAddr = pParams->nwkAddr;
   \   0001C5   E5..         MOV       A,?V0
   \   0001C7   241C         ADD       A,#0x1c
   \   0001C9   F582         MOV       DPL,A
   \   0001CB   E4           CLR       A
   \   0001CC   35..         ADDC      A,?V1
   \   0001CE   F583         MOV       DPH,A
   \   0001D0   E0           MOVX      A,@DPTR
   \   0001D1   F8           MOV       R0,A
   \   0001D2   A3           INC       DPTR
   \   0001D3   E0           MOVX      A,@DPTR
   \   0001D4   F9           MOV       R1,A
   \   0001D5   85..82       MOV       DPL,?V6
   \   0001D8   85..83       MOV       DPH,?V7
   \   0001DB   E8           MOV       A,R0
   \   0001DC   F0           MOVX      @DPTR,A
   \   0001DD   A3           INC       DPTR
   \   0001DE   E9           MOV       A,R1
   \   0001DF   F0           MOVX      @DPTR,A
   2270                pCurr->data.addrMode = afAddr16Bit;
   \   0001E0   85..82       MOV       DPL,?V6
   \   0001E3   85..83       MOV       DPH,?V7
   \   0001E6   A3           INC       DPTR
   \   0001E7   A3           INC       DPTR
   \   0001E8   A3           INC       DPTR
   \   0001E9   A3           INC       DPTR
   \   0001EA   A3           INC       DPTR
   \   0001EB   A3           INC       DPTR
   \   0001EC   A3           INC       DPTR
   \   0001ED   A3           INC       DPTR
   \   0001EE   7402         MOV       A,#0x2
   \   0001F0   F0           MOVX      @DPTR,A
   2271                pCurr->data.panId = _NIB.nwkPanId;
   \   0001F1   90....       MOV       DPTR,#_NIB + 33
   \   0001F4   E0           MOVX      A,@DPTR
   \   0001F5   F8           MOV       R0,A
   \   0001F6   A3           INC       DPTR
   \   0001F7   E0           MOVX      A,@DPTR
   \   0001F8   F9           MOV       R1,A
   \   0001F9   85..82       MOV       DPL,?V6
   \   0001FC   85..83       MOV       DPH,?V7
   \   0001FF   A3           INC       DPTR
   \   000200   A3           INC       DPTR
   \   000201   A3           INC       DPTR
   \   000202   A3           INC       DPTR
   \   000203   A3           INC       DPTR
   \   000204   A3           INC       DPTR
   \   000205   A3           INC       DPTR
   \   000206   A3           INC       DPTR
   \   000207   A3           INC       DPTR
   \   000208   A3           INC       DPTR
   \   000209   E8           MOV       A,R0
   \   00020A   F0           MOVX      @DPTR,A
   \   00020B   A3           INC       DPTR
   \   00020C   E9           MOV       A,R1
   \   00020D   F0           MOVX      @DPTR,A
   2272                pCurr = pCurr->pNext;
   \   00020E   E5..         MOV       A,?V6
   \   000210   240F         ADD       A,#0xf
   \   000212   F582         MOV       DPL,A
   \   000214   E4           CLR       A
   \   000215   35..         ADDC      A,?V7
   \   000217   F583         MOV       DPH,A
   \   000219   E0           MOVX      A,@DPTR
   \   00021A   F5..         MOV       ?V6,A
   \   00021C   A3           INC       DPTR
   \   00021D   E0           MOVX      A,@DPTR
   \   00021E   F5..         MOV       ?V7,A
   \   000220   809D         SJMP      ??initiatorSendNwkJoinReq_6
   2273              }
   2274          
   2275              pParams->logicalChannel = _NIB.nwkLogicalChannel;
   \                     ??initiatorSendNwkJoinReq_7:
   \   000222   90....       MOV       DPTR,#_NIB + 22
   \   000225   E0           MOVX      A,@DPTR
   \   000226   C0E0         PUSH      A
   \   000228   E5..         MOV       A,?V0
   \   00022A   2419         ADD       A,#0x19
   \   00022C   F582         MOV       DPL,A
   \   00022E   E4           CLR       A
   \   00022F   35..         ADDC      A,?V1
   \   000231   F583         MOV       DPH,A
   \   000233   D0E0         POP       A
   \   000235   F0           MOVX      @DPTR,A
   2276              pParams->panId = _NIB.nwkPanId;
   \   000236   90....       MOV       DPTR,#_NIB + 33
   \   000239   E0           MOVX      A,@DPTR
   \   00023A   F8           MOV       R0,A
   \   00023B   A3           INC       DPTR
   \   00023C   E0           MOVX      A,@DPTR
   \   00023D   F9           MOV       R1,A
   \   00023E   E5..         MOV       A,?V0
   \   000240   241A         ADD       A,#0x1a
   \   000242   F582         MOV       DPL,A
   \   000244   E4           CLR       A
   \   000245   35..         ADDC      A,?V1
   \   000247   F583         MOV       DPH,A
   \   000249   E8           MOV       A,R0
   \   00024A   F0           MOVX      @DPTR,A
   \   00024B   A3           INC       DPTR
   \   00024C   E9           MOV       A,R1
   \   00024D   F0           MOVX      @DPTR,A
   2277              osal_cpyExtAddr( pParams->extendedPANID, _NIB.extendedPANID );
   \   00024E                ; Setup parameters for call to function sAddrExtCpy
   \   00024E   7C..         MOV       R4,#(_NIB + 53) & 0xff
   \   000250   7D..         MOV       R5,#((_NIB + 53) >> 8) & 0xff
   \   000252   AA..         MOV       R2,?V0
   \   000254   AB..         MOV       R3,?V1
   \   000256   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2278              pReq->nwkUpdateId = _NIB.nwkUpdateId;
   \   000259   90....       MOV       DPTR,#_NIB + 109
   \   00025C   E0           MOVX      A,@DPTR
   \   00025D   C0E0         PUSH      A
   \   00025F   E5..         MOV       A,?V4
   \   000261   242E         ADD       A,#0x2e
   \   000263   F582         MOV       DPL,A
   \   000265   E4           CLR       A
   \   000266   35..         ADDC      A,?V5
   \   000268   F583         MOV       DPH,A
   \   00026A   D0E0         POP       A
   \   00026C   F0           MOVX      @DPTR,A
   2279          
   2280              // Let PAN ID, Extended PAN ID and Logical Channel to be determined by the target
   2281              if ( pRsp->zLogicalType == ZG_DEVICETYPE_ROUTER )
   \   00026D   85..82       MOV       DPL,?V8
   \   000270   85..83       MOV       DPH,?V9
   \   000273   A3           INC       DPTR
   \   000274   A3           INC       DPTR
   \   000275   A3           INC       DPTR
   \   000276   A3           INC       DPTR
   \   000277   A3           INC       DPTR
   \   000278   E0           MOVX      A,@DPTR
   \   000279   5403         ANL       A,#0x3
   \   00027B   F8           MOV       R0,A
   \   00027C   A3           INC       DPTR
   \   00027D   E0           MOVX      A,@DPTR
   \   00027E   5400         ANL       A,#0x0
   \   000280   F9           MOV       R1,A
   \   000281   E8           MOV       A,R0
   \   000282   6401         XRL       A,#0x1
   \   000284   7033         JNZ       ??initiatorSendNwkJoinReq_8
   2282              {
   2283                // It's a light
   2284                status = bdbTL_Send_NwkJoinRtrReq( TOUCHLINK_INTERNAL_ENDPOINT, &(selectedTarget.srcAddr), pReq, initiatorSeqNum++ );
   \   000286   90....       MOV       DPTR,#initiatorSeqNum
   \   000289   E0           MOVX      A,@DPTR
   \   00028A   F8           MOV       R0,A
   \   00028B   7401         MOV       A,#0x1
   \   00028D   28           ADD       A,R0
   \   00028E   90....       MOV       DPTR,#initiatorSeqNum
   \   000291   F0           MOVX      @DPTR,A
   \   000292                ; Setup parameters for call to function bdbTL_Send_NwkJoinReq
   \   000292   E8           MOV       A,R0
   \   000293   F5..         MOV       ?V3,A
   \   000295   78..         MOV       R0,#?V3
   \   000297   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00029A   75..12       MOV       ?V3,#0x12
   \   00029D   78..         MOV       R0,#?V3
   \   00029F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002A2   AC..         MOV       R4,?V4
   \   0002A4   AD..         MOV       R5,?V5
   \   0002A6   7A..         MOV       R2,#(selectedTarget + 38) & 0xff
   \   0002A8   7B..         MOV       R3,#((selectedTarget + 38) >> 8) & 0xff
   \   0002AA   790D         MOV       R1,#0xd
   \   0002AC   12....       LCALL     `??bdbTL_Send_NwkJoinReq::?relay`; Banked call to: bdbTL_Send_NwkJoinReq
   \   0002AF   7402         MOV       A,#0x2
   \   0002B1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002B4   E9           MOV       A,R1
   \   0002B5   F5..         MOV       ?V2,A
   \   0002B7   8031         SJMP      ??initiatorSendNwkJoinReq_9
   2285              }
   2286              else // another controller
   2287              {
   2288                status = bdbTL_Send_NwkJoinEDReq( TOUCHLINK_INTERNAL_ENDPOINT, &(selectedTarget.srcAddr), pReq, initiatorSeqNum++ );
   \                     ??initiatorSendNwkJoinReq_8:
   \   0002B9   90....       MOV       DPTR,#initiatorSeqNum
   \   0002BC   E0           MOVX      A,@DPTR
   \   0002BD   F8           MOV       R0,A
   \   0002BE   7401         MOV       A,#0x1
   \   0002C0   28           ADD       A,R0
   \   0002C1   90....       MOV       DPTR,#initiatorSeqNum
   \   0002C4   F0           MOVX      @DPTR,A
   \   0002C5                ; Setup parameters for call to function bdbTL_Send_NwkJoinReq
   \   0002C5   E8           MOV       A,R0
   \   0002C6   F5..         MOV       ?V3,A
   \   0002C8   78..         MOV       R0,#?V3
   \   0002CA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002CD   75..14       MOV       ?V3,#0x14
   \   0002D0   78..         MOV       R0,#?V3
   \   0002D2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002D5   AC..         MOV       R4,?V4
   \   0002D7   AD..         MOV       R5,?V5
   \   0002D9   7A..         MOV       R2,#(selectedTarget + 38) & 0xff
   \   0002DB   7B..         MOV       R3,#((selectedTarget + 38) >> 8) & 0xff
   \   0002DD   790D         MOV       R1,#0xd
   \   0002DF   12....       LCALL     `??bdbTL_Send_NwkJoinReq::?relay`; Banked call to: bdbTL_Send_NwkJoinReq
   \   0002E2   7402         MOV       A,#0x2
   \   0002E4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002E7   E9           MOV       A,R1
   \   0002E8   F5..         MOV       ?V2,A
   2289              }
   2290          
   2291              if ( status == ZSuccess )
   \                     ??initiatorSendNwkJoinReq_9:
   \   0002EA   E5..         MOV       A,?V2
   \   0002EC   7018         JNZ       ??initiatorSendNwkJoinReq_10
   2292              {
   2293                // After the transmission, wait BDBCTL_RX_WINDOW_DURATION seconds to
   2294                // receive a response.
   2295                osal_start_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_W4_NWK_JOIN_RSP_EVT, BDBCTL_RX_WINDOW_DURATION );
   \   0002EE                ; Setup parameters for call to function osal_start_timerEx
   \   0002EE   90....       MOV       DPTR,#__Constant_1388
   \   0002F1   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0002F4   7A00         MOV       R2,#0x0
   \   0002F6   7B01         MOV       R3,#0x1
   \   0002F8   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   0002FB   E0           MOVX      A,@DPTR
   \   0002FC   F9           MOV       R1,A
   \   0002FD   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000300   7404         MOV       A,#0x4
   \   000302   12....       LCALL     ?DEALLOC_XSTACK8
   \   000305   E9           MOV       A,R1
   2296              }
   2297          
   2298              osal_mem_free( pReq );
   \                     ??initiatorSendNwkJoinReq_10:
   \   000306                ; Setup parameters for call to function osal_mem_free
   \   000306   AA..         MOV       R2,?V4
   \   000308   AB..         MOV       R3,?V5
   \   00030A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00030D   8003         SJMP      ??initiatorSendNwkJoinReq_11
   2299            }
   2300            else
   2301            {
   2302              status = ZMemError;
   \                     ??initiatorSendNwkJoinReq_0:
   \   00030F   75..10       MOV       ?V2,#0x10
   2303            }
   2304          
   2305            return ( status );
   \                     ??initiatorSendNwkJoinReq_11:
   \   000312   A9..         MOV       R1,?V2
   \   000314   7F0C         MOV       R7,#0xc
   \   000316   02....       LJMP      ?BANKED_LEAVE_XDATA
   2306          }
   2307          
   2308          /*********************************************************************
   2309           * @fn      initiatorSendNwkUpdateReq
   2310           *
   2311           * @brief   Send out a Network Update Request command.
   2312           *
   2313           * @param   pRsp - received Scan Response
   2314           *
   2315           * @return  ZStatus_t
   2316           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2317          static ZStatus_t initiatorSendNwkUpdateReq( bdbTLScanRsp_t *pRsp )
   \                     initiatorSendNwkUpdateReq:
   2318          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   2319            bdbTLNwkUpdateReq_t *pReq;
   2320            ZStatus_t status;
   2321          
   2322            pReq = (bdbTLNwkUpdateReq_t *)osal_mem_alloc( sizeof( bdbTLNwkUpdateReq_t ) );
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   7A12         MOV       R2,#0x12
   \   00000B   7B00         MOV       R3,#0x0
   \   00000D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000010   8A..         MOV       ?V4,R2
   \   000012   8B..         MOV       ?V5,R3
   \   000014   AE..         MOV       R6,?V4
   \   000016   AF..         MOV       R7,?V5
   2323            if ( pReq!= NULL )
   \   000018   EE           MOV       A,R6
   \   000019   4F           ORL       A,R7
   \   00001A   7003         JNZ       $+5
   \   00001C   02....       LJMP      ??initiatorSendNwkUpdateReq_0 & 0xFFFF
   2324            {
   2325              // Build the request
   2326              pReq->transID = pRsp->transID;
   \   00001F   85..82       MOV       DPL,?V2
   \   000022   85..83       MOV       DPH,?V3
   \   000025   12....       LCALL     ?XLOAD_R0123
   \   000028   8E82         MOV       DPL,R6
   \   00002A   8F83         MOV       DPH,R7
   \   00002C   12....       LCALL     ?XSTORE_R0123
   2327              osal_cpyExtAddr( pReq->extendedPANID, _NIB.extendedPANID );
   \   00002F                ; Setup parameters for call to function sAddrExtCpy
   \   00002F   7C..         MOV       R4,#(_NIB + 53) & 0xff
   \   000031   7D..         MOV       R5,#((_NIB + 53) >> 8) & 0xff
   \   000033   EE           MOV       A,R6
   \   000034   2404         ADD       A,#0x4
   \   000036   FA           MOV       R2,A
   \   000037   E4           CLR       A
   \   000038   3F           ADDC      A,R7
   \   000039   FB           MOV       R3,A
   \   00003A   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2328              pReq->nwkUpdateId = _NIB.nwkUpdateId;
   \   00003D   90....       MOV       DPTR,#_NIB + 109
   \   000040   E0           MOVX      A,@DPTR
   \   000041   C0E0         PUSH      A
   \   000043   EE           MOV       A,R6
   \   000044   240C         ADD       A,#0xc
   \   000046   F582         MOV       DPL,A
   \   000048   E4           CLR       A
   \   000049   3F           ADDC      A,R7
   \   00004A   F583         MOV       DPH,A
   \   00004C   D0E0         POP       A
   \   00004E   F0           MOVX      @DPTR,A
   2329              pReq->logicalChannel = _NIB.nwkLogicalChannel;
   \   00004F   90....       MOV       DPTR,#_NIB + 22
   \   000052   E0           MOVX      A,@DPTR
   \   000053   C0E0         PUSH      A
   \   000055   EE           MOV       A,R6
   \   000056   240D         ADD       A,#0xd
   \   000058   F582         MOV       DPL,A
   \   00005A   E4           CLR       A
   \   00005B   3F           ADDC      A,R7
   \   00005C   F583         MOV       DPH,A
   \   00005E   D0E0         POP       A
   \   000060   F0           MOVX      @DPTR,A
   2330              pReq->PANID = _NIB.nwkPanId;
   \   000061   90....       MOV       DPTR,#_NIB + 33
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F8           MOV       R0,A
   \   000066   A3           INC       DPTR
   \   000067   E0           MOVX      A,@DPTR
   \   000068   F9           MOV       R1,A
   \   000069   EE           MOV       A,R6
   \   00006A   240E         ADD       A,#0xe
   \   00006C   F582         MOV       DPL,A
   \   00006E   E4           CLR       A
   \   00006F   3F           ADDC      A,R7
   \   000070   F583         MOV       DPH,A
   \   000072   E8           MOV       A,R0
   \   000073   F0           MOVX      @DPTR,A
   \   000074   A3           INC       DPTR
   \   000075   E9           MOV       A,R1
   \   000076   F0           MOVX      @DPTR,A
   2331              pReq->nwkAddr = pRsp->nwkAddr;
   \   000077   E5..         MOV       A,?V2
   \   000079   241B         ADD       A,#0x1b
   \   00007B   F582         MOV       DPL,A
   \   00007D   E4           CLR       A
   \   00007E   35..         ADDC      A,?V3
   \   000080   F583         MOV       DPH,A
   \   000082   E0           MOVX      A,@DPTR
   \   000083   F8           MOV       R0,A
   \   000084   A3           INC       DPTR
   \   000085   E0           MOVX      A,@DPTR
   \   000086   F9           MOV       R1,A
   \   000087   EE           MOV       A,R6
   \   000088   2410         ADD       A,#0x10
   \   00008A   F582         MOV       DPL,A
   \   00008C   E4           CLR       A
   \   00008D   3F           ADDC      A,R7
   \   00008E   F583         MOV       DPH,A
   \   000090   E8           MOV       A,R0
   \   000091   F0           MOVX      @DPTR,A
   \   000092   A3           INC       DPTR
   \   000093   E9           MOV       A,R1
   \   000094   F0           MOVX      @DPTR,A
   2332          
   2333              status = bdbTL_Send_NwkUpdateReq( TOUCHLINK_INTERNAL_ENDPOINT, &(selectedTarget.srcAddr), pReq, initiatorSeqNum++ );
   \   000095   90....       MOV       DPTR,#initiatorSeqNum
   \   000098   E0           MOVX      A,@DPTR
   \   000099   F8           MOV       R0,A
   \   00009A   7401         MOV       A,#0x1
   \   00009C   28           ADD       A,R0
   \   00009D   90....       MOV       DPTR,#initiatorSeqNum
   \   0000A0   F0           MOVX      @DPTR,A
   \   0000A1                ; Setup parameters for call to function bdbTL_Send_NwkUpdateReq
   \   0000A1   E8           MOV       A,R0
   \   0000A2   F5..         MOV       ?V1,A
   \   0000A4   78..         MOV       R0,#?V1
   \   0000A6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A9   EE           MOV       A,R6
   \   0000AA   FC           MOV       R4,A
   \   0000AB   EF           MOV       A,R7
   \   0000AC   FD           MOV       R5,A
   \   0000AD   7A..         MOV       R2,#(selectedTarget + 38) & 0xff
   \   0000AF   7B..         MOV       R3,#((selectedTarget + 38) >> 8) & 0xff
   \   0000B1   790D         MOV       R1,#0xd
   \   0000B3   12....       LCALL     `??bdbTL_Send_NwkUpdateReq::?relay`; Banked call to: bdbTL_Send_NwkUpdateReq
   \   0000B6   7401         MOV       A,#0x1
   \   0000B8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BB   E9           MOV       A,R1
   \   0000BC   F5..         MOV       ?V0,A
   2334          
   2335              osal_mem_free( pReq );
   \   0000BE                ; Setup parameters for call to function osal_mem_free
   \   0000BE   EE           MOV       A,R6
   \   0000BF   FA           MOV       R2,A
   \   0000C0   EF           MOV       A,R7
   \   0000C1   FB           MOV       R3,A
   \   0000C2   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000C5   8003         SJMP      ??initiatorSendNwkUpdateReq_1
   2336            }
   2337            else
   2338            {
   2339              status = ZMemError;
   \                     ??initiatorSendNwkUpdateReq_0:
   \   0000C7   75..10       MOV       ?V0,#0x10
   2340            }
   2341          
   2342            return ( status );
   \                     ??initiatorSendNwkUpdateReq_1:
   \   0000CA   A9..         MOV       R1,?V0
   \   0000CC   7F06         MOV       R7,#0x6
   \   0000CE   02....       LJMP      ?BANKED_LEAVE_XDATA
   2343          }
   2344          
   2345          /*********************************************************************
   2346           * @fn      initiatorClearSelectedTarget
   2347           *
   2348           * @brief   clear selected target variable.
   2349           *
   2350           * @param   none
   2351           *
   2352           * @return  none
   2353           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2354          static void initiatorClearSelectedTarget( void )
   \                     initiatorClearSelectedTarget:
   2355          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2356            osal_memset( &selectedTarget, 0x00, sizeof(targetCandidate_t) );
   \   000004                ; Setup parameters for call to function osal_memset
   \   000004   7C36         MOV       R4,#0x36
   \   000006   7D00         MOV       R5,#0x0
   \   000008   7900         MOV       R1,#0x0
   \   00000A   7A..         MOV       R2,#selectedTarget & 0xff
   \   00000C   7B..         MOV       R3,#(selectedTarget >> 8) & 0xff
   \   00000E   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2357            selectedTarget.lastRssi = TOUCHLINK_WORST_RSSI;
   \   000011   90....       MOV       DPTR,#selectedTarget + 53
   \   000014   74BA         MOV       A,#-0x46
   \   000016   F0           MOVX      @DPTR,A
   2358          }
   \   000017   D083         POP       DPH
   \   000019   D082         POP       DPL
   \   00001B   02....       LJMP      ?BRET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for initiatorRegisteredMsgAppTas`:
   \   000000   FF           DB 255

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for touchLinkInitiator_CmdCBs>`:
   \   000000   ....         DW `??initiatorScanReqCB::?relay`
   \   000002   ....         DW `??initiatorDeviceInfoReqCB::?relay`
   \   000004   ....         DW `??initiatorIdentifyReqCB::?relay`
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   0000         DW 0H
   \   00000C   ....         DW `??initiatorNwkJoinReqCB::?relay`
   \   00000E   ....         DW `??initiatorNwkUpdateReqCB::?relay`
   \   000010   ....         DW `??initiatorScanRspCB::?relay`
   \   000012   ....         DW `??initiatorDeviceInfoRspCB::?relay`
   \   000014   ....         DW `??initiatorNwkStartRspCB::?relay`
   \   000016   ....         DW `??initiatorNwkJoinRtrRspCB::?relay`
   \   000018   ....         DW `??initiatorNwkJoinEDRspCB::?relay`

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%d\\n">`:
   \   000000   25640A00     DB "%d\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {12, 13, 14, 16, 17, 18, 19, 21, 22`:
   \   000000   0C           DB 12
   \   000001   0D           DB 13
   \   000002   0E           DB 14
   \   000003   10           DB 16
   \   000004   11           DB 17
   \   000005   12           DB 18
   \   000006   13           DB 19
   \   000007   15           DB 21
   \   000008   16           DB 22
   \   000009   17           DB 23
   \   00000A   18           DB 24
   \   00000B   1A           DB 26

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1f40:
   \   000000   401F0000     DD 8000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1f4:
   \   000000   F4010000     DD 500

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_32:
   \   000000   32000000     DD 50

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_7d0:
   \   000000   D0070000     DD 2000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3:
   \   000000   03000000     DD 3

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_30d4:
   \   000000   D4300000     DD 12500

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_fa:
   \   000000   FA000000     DD 250

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1388:
   \   000000   88130000     DD 5000
   2359          
   2360          #endif //BDB_TL_INITIATOR
   2361          
   2362          /*********************************************************************
   2363          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2    107   bdb_Initiator_SendNwkJoinReq
        2      0   -> initiatorSendNwkJoinReq
        2      0   -> nwk_setStateIdle
      2    107   initiatorClearSelectedTarget
        2      0   -> osal_memset
      0     15   initiatorDeviceInfoReqCB
        0     11   -> touchLink_IsValidTransID
        0     15   -> touchLink_SendDeviceInfoRsp
      2     54   initiatorDeviceInfoRspCB
        0     54   -> bdb_AddRespondentNode
        0     54   -> bdb_zclRespondentListClean
        0     54   -> initiatorClearSelectedTarget
        0     54   -> osal_memset
        0     54   -> sAddrExtCpy
        0     54   -> touchLink_IsValidTransID
      0     16   initiatorIdentifyReqCB
        0     16   -> bdb_ZclIdentifyCmdInd
        0     16   -> bdb_setEpDescListToActiveEndpoint
        0     16   -> touchLink_IsValidTransID
      0     18   initiatorNwkJoinEDRspCB
        0     15   -> osal_get_timeoutEx
        0     18   -> osal_memcmp
        0     15   -> osal_set_event
        0     15   -> touchLink_IsValidTransID
      0     38   initiatorNwkJoinReqCB
        0     30   -> NLME_InitNV
        0     30   -> ZDSecMgrUpdateTCAddress
        0     32   -> bdbTL_Send_NwkJoinRsp
        0     30   -> bdb_setNodeIsOnANetwork
        0     30   -> nwk_ExtPANIDValid
        0     34   -> osal_start_timerEx
        0     30   -> osal_stop_timerEx
        0     38   -> touchLink_DecryptNwkKey
        0     30   -> touchLink_IsValidTransID
        0     30   -> touchLink_SetChannel
        0     30   -> touchLink_SetMacNwkParams
        0     34   -> touchLink_SetNIB
      0     18   initiatorNwkJoinRtrRspCB
        0     15   -> osal_get_timeoutEx
        0     18   -> osal_memcmp
        0     15   -> osal_set_event
        0     15   -> touchLink_IsValidTransID
      0     10   initiatorNwkStartRspCB
        0     10   -> osal_get_timeoutEx
        0     10   -> osal_set_event
        0     10   -> touchLink_IsValidTransID
      0     11   initiatorNwkUpdateReqCB
        0     11   -> sAddrExtCmp
        0     11   -> touchLink_IsValidTransID
        0     11   -> touchLink_NewNwkUpdateId
        0     11   -> touchLink_ProcessNwkUpdate
      0    120   initiatorProcessStateChange
        0      9   -> osal_get_timeoutEx
        0     13   -> osal_start_timerEx
        0      9   -> osal_stop_timerEx
        0      9   -> touchLink_UpdateNV
      0      9   initiatorReJoinNwk
        0      9   -> nwk_setStateIdle
        0      9   -> osal_set_event
        0      9   -> sAddrExtCpy
        0      9   -> touchLink_SetMacNwkParams
      0     31   initiatorScanReqCB
        0     27   -> osal_get_timeoutEx
        0     30   -> osal_memcpy
        0     27   -> osal_stop_timerEx
        0     27   -> touchLink_GetMsgRssi
        0     31   -> touchLink_InitiatorSendScanRsp
      1     23   initiatorScanRspCB
        0     21   -> ZMacGetReq
        0     22   -> bdbTL_Send_DeviceInfoReq
        0     21   -> bdb_AddRespondentNode
        0     21   -> osal_get_timeoutEx
        0     23   -> printf
        0     21   -> touchLink_GetMsgRssi
        0     21   -> touchLink_GetNwkKeyBitmask
        0     21   -> touchLink_IsValidTransID
      2      0   initiatorSelectNwkParams
        2      0   -> osal_rand
        2      0   -> touchLink_GenerateRandNum
        2      0   -> touchLink_GetNumGrpIDs
        2      0   -> touchLink_PopGrpIDRange
        2      0   -> touchLink_PopNwkAddress
        2      0   -> touchLink_SetMacNwkParams
      1     28   initiatorSendNwkJoinReq
        0     22   -> bdbTL_Send_NwkJoinReq
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     20   -> osal_memset
        0     20   -> osal_rand
        0     24   -> osal_start_timerEx
        0     20   -> sAddrExtCpy
        0     28   -> touchLink_EncryptNwkKey
        0     20   -> touchLink_PopGrpIDRange
        0     20   -> touchLink_PopNwkAddress
        0     24   -> touchLink_SplitFreeRanges
      1    133   initiatorSendNwkStartReq
        0     18   -> NLME_GetExtAddr
        0     19   -> bdbTL_Send_NwkStartReq
        0     18   -> osal_mem_alloc
        0     18   -> osal_mem_free
        0     21   -> osal_memcpy
        0     18   -> osal_memset
        0     18   -> osal_rand
        0     22   -> osal_start_timerEx
        0     18   -> sAddrExtCpy
        0     26   -> touchLink_EncryptNwkKey
        0     18   -> touchLink_PopGrpIDRange
        0     18   -> touchLink_PopNwkAddress
        0     22   -> touchLink_SplitFreeRanges
      1    122   initiatorSendNwkUpdateReq
        0     15   -> bdbTL_Send_NwkUpdateReq
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
        0     14   -> sAddrExtCpy
      0    140   initiatorSendScanReq
        0     30   -> bdbTL_Send_ScanReq
        0     33   -> osal_start_timerEx
        0     29   -> touchLinkInitiator_AbortTL
        0     29   -> touchLink_DeviceIsInitiator
        0     29   -> touchLink_SetChannel
      2    119   initiatorSetNwkToInitState
        0     12   -> NLME_SetPollRate
        0     12   -> NLME_SetQueuedPollRate
        0     12   -> NLME_SetResponseRate
        0     12   -> ZMacSetReq
        0     12   -> nwk_setStateIdle
        0     12   -> touchLink_SetChannel
      0      9   initiatorZdoLeaveCnfCB
        0      9   -> osal_set_event
      2     29   touchLinkInitiator_AbortTL
        2      0   -> initiatorClearSelectedTarget
        2      0   -> initiatorSetNwkToInitState
        2      0   -> osal_stop_timerEx
      0     31   touchLinkInitiator_ChannelChange
        0     25   -> NLME_SetUpdateID
        0     31   -> ZDP_MgmtNwkUpdateReq
      0      9   touchLinkInitiator_Init
        0      9   -> ZDO_RegisterForZdoCB
        0      9   -> bdbTL_RegisterInterPANCmdCallbacks
        0      9   -> initiatorClearSelectedTarget
        0      9   -> touchLink_InitVariables
        0      9   -> touchLink_SetTouchLinkTaskId
        0      9   -> zcl_registerForMsg
      2      0   touchLinkInitiator_InitDevice
        2      0   -> initiatorReJoinNwk
        2      0   -> initiatorSelectNwkParams
        2      0   -> osal_pwrmgr_device
      2      0   touchLinkInitiator_RegisterForMsg
      2      0   touchLinkInitiator_RegisterNotifyTLCB
      2      0   touchLinkInitiator_RegisterSelectDiscDevCB
      2      0   touchLinkInitiator_ResetToFNProcedure
        2      0   -> osal_get_timeoutEx
        2      0   -> touchLinkInitiator_StartDevDisc
      0    121   touchLinkInitiator_ResetToFNSelectedTarget
        0     14   -> bdbTL_Send_ResetToFNReq
        0     13   -> osal_stop_timerEx
        0     13   -> touchLink_SetChannel
      1     37   touchLinkInitiator_SendEPInfo
        0     35   -> NLME_GetExtAddr
        0     35   -> NLME_GetShortAddr
        0     37   -> bdbTL_Send_EndpointInfo
        0     35   -> sAddrExtCpy
        0     35   -> touchLink_GetSubDeviceInfo
      0     21   touchLinkInitiator_StartDevDisc
        0     17   -> NLME_SetPollRate
        0     17   -> NLME_SetQueuedPollRate
        0     17   -> NLME_SetResponseRate
        0     17   -> ZDApp_StopJoiningCycle
        0     17   -> ZMacGetReq
        0     17   -> ZMacSetReq
        0     17   -> initiatorSendScanReq
        0     17   -> osal_clear_event
        0     17   -> osal_get_timeoutEx
        0     17   -> osal_rand
        0     21   -> osal_start_timerEx
        0     17   -> touchLinkInitiator_AbortTL
      1    115   touchLinkInitiator_event_loop
        0    107   -> APSME_GetRequest
        0    107   -> AddrMgrEntryUpdate
        0    107   -> NLME_GetExtAddr
        0    107   -> NLME_GetShortAddr
        0    107   -> NLME_SetUpdateID
        0    107   -> ZDApp_StopJoiningCycle
        0    108   -> ZDP_DeviceAnnce
        0    107   -> ZDSecMgrUpdateTCAddress
        0    108   -> bdbTL_Send_IndentifyReq
        0    107   -> bdb_Initiator_SendNwkJoinReq
        0    107   -> bdb_reportCommissioningState
        0    107   -> initiatorClearSelectedTarget
        0    107   -> initiatorProcessStateChange
        0    107   -> initiatorSendNwkStartReq
        0    107   -> initiatorSendNwkUpdateReq
        0    107   -> initiatorSendScanReq
        0    107   -> initiatorSetNwkToInitState
        0    107   -> nwk_ExtPANIDValid
        0    107   -> nwk_setStateIdle
        0    110   -> osal_memcpy
        0    107   -> osal_msg_deallocate
        0    107   -> osal_msg_receive
        0    107   -> osal_msg_send
        0    111   -> osal_nv_write
        0    107   -> osal_rand
        0    107   -> osal_set_event
        0    111   -> osal_start_timerEx
        0    107   -> sAddrExtCmp
        0    107   -> sAddrExtCpy
        0    107   -> touchLinkInitiator_ResetToFNSelectedTarget
        0    115   -> touchLink_DecryptNwkKey
        0    107   -> touchLink_DevRejoin
        0    107   -> touchLink_FreeNwkParamList
        0    107   -> touchLink_GenerateRandNum
        0    107   -> touchLink_GerFreeRanges
        0    107   -> touchLink_GetRandPrimaryChannel
        0    107   -> touchLink_IsValidSplitFreeRanges
        0    107   -> touchLink_IsValidTransID
        0    107   -> touchLink_PerformNetworkDisc
        0    107   -> touchLink_ProcessNwkUpdate
        0    107   -> touchLink_SendLeaveReq
        0    107   -> touchLink_SetChannel
        0    111   -> touchLink_SetNIB
        0    107   -> touchLink_UpdateNV
      1     60   touchLink_InitiatorSendScanRsp
        0     26   -> bdbTL_Send_ScanRsp
        0     25   -> osal_mem_alloc
        0     25   -> osal_mem_free
        0     25   -> osal_memset
        0     25   -> osal_rand
        0     29   -> osal_start_timerEx
        0     25   -> sAddrExtCpy
        0     25   -> touchLink_GetNumGrpIDs
        0     25   -> touchLink_GetNumSubDevices
        0     25   -> touchLink_GetNwkKeyBitmask
        0     25   -> touchLink_GetSubDeviceInfo
        0     25   -> touchLink_IsValidSplitFreeRanges


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "%d\n">
      12  ?<Constant {12, 13, 14, 16, 17, 18, 19, 21, 22
       8  ?<Constant {255, 255, 255, 255, 255, 255, 255,
       9  ?<Constant {{0}}>
       1  ?<Initializer for initiatorRegisteredMsgAppTas
      26  ?<Initializer for touchLinkInitiator_CmdCBs>
       4  __Constant_0
       4  __Constant_1388
       4  __Constant_1f4
       4  __Constant_1f40
       4  __Constant_3
       4  __Constant_30d4
       4  __Constant_32
       4  __Constant_7d0
       4  __Constant_fa
      12  bcastAddr
      23  bdb_Initiator_SendNwkJoinReq
       1  channelIndex
      16  encKeySent
      30  initiatorClearSelectedTarget
      70  initiatorDeviceInfoReqCB
     755  initiatorDeviceInfoRspCB
     113  initiatorIdentifyReqCB
     143  initiatorNwkJoinEDRspCB
     395  initiatorNwkJoinReqCB
     135  initiatorNwkJoinRtrRspCB
      42  initiatorNwkParams
      85  initiatorNwkStartRspCB
     135  initiatorNwkUpdateReqCB
     128  initiatorProcessStateChange
     104  initiatorReJoinNwk
       1  initiatorRegisteredMsgAppTaskID
     282  initiatorScanReqCB
     525  initiatorScanRspCB
     112  initiatorSelectNwkParams
     793  initiatorSendNwkJoinReq
     630  initiatorSendNwkStartReq
     209  initiatorSendNwkUpdateReq
     425  initiatorSendScanReq
       1  initiatorSeqNum
     178  initiatorSetNwkToInitState
      51  initiatorZdoLeaveCnfCB
      47  joinReq
       1  keyIndexSent
       1  numScanReqSent
       2  pfnNotifyAppCB
       2  pfnSelectDiscDevCB
       4  responseIDSent
      17  rxRsp
       2  savedPollRate
       2  savedQueuedPollRate
       2  savedResponsePollRate
       1  savedRxOnIdle
       1  scanReqChannels
      54  selectedTarget
       8  selectedTargetIEEEAddr
       2  selectedTargetNwkAddr
     117  touchLinkInitiator_AbortTL
     235  touchLinkInitiator_ChannelChange
      26  touchLinkInitiator_CmdCBs
     140  touchLinkInitiator_Init
      54  touchLinkInitiator_InitDevice
      32  touchLinkInitiator_RegisterForMsg
      19  touchLinkInitiator_RegisterNotifyTLCB
      19  touchLinkInitiator_RegisterSelectDiscDevCB
      45  touchLinkInitiator_ResetToFNProcedure
      95  touchLinkInitiator_ResetToFNSelectedTarget
     205  touchLinkInitiator_SendEPInfo
     277  touchLinkInitiator_StartDevDisc
       1  touchLinkInitiator_TaskID
    2570  touchLinkInitiator_event_loop
     777  touchLink_InitiatorSendScanRsp
     204  -- Other

 
 9 906 bytes in segment BANKED_CODE
   204 bytes in segment BANK_RELAYS
    27 bytes in segment XDATA_I
    27 bytes in segment XDATA_ID
    69 bytes in segment XDATA_ROM_C
   219 bytes in segment XDATA_Z
 
   231 bytes of CODE     memory
    33 bytes of CONST    memory (+ 36 bytes shared)
 9 906 bytes of HUGECODE memory
   246 bytes of XDATA    memory

Errors: none
Warnings: none
