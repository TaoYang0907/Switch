###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               05/Aug/2020  22:50:56
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack 3.0.2\Components\stack\bdb\bdb_touchlink.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EWF08.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\stack\bdb\bdb_touchlink.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D POWER_SAVING -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_GROUPS -D BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=0
#        -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0 -DREJOIN_POLL_RATE=0
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\bdb_touchlink.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\bdb_touchlink.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\stack\bdb\bdb_touchlink.c
      1          /**************************************************************************************************
      2            Filename:       bdb_touchlink.c
      3            Revised:        $Date: 2013-12-06 15:53:38 -0800 (Fri, 06 Dec 2013) $
      4            Revision:       $Revision: 36460 $
      5          
      6            Description:    Zigbee Cluster Library - Light Link Profile.
      7          
      8          
      9            Copyright 2011-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "OSAL_Nv.h"
     44          #include "hal_aes.h"
     45          #include "ssp_hash.h"
     46          #include "nwk_util.h"
     47          #include "ZDSecMgr.h"
     48          #include "ZDObject.h"
     49          
     50          #if defined( INTER_PAN )
     51            #include "stub_aps.h"
     52          #if defined ( BDB_TL_INITIATOR )
     53            #include "bdb_touchlink_initiator.h"
     54          #endif // BDB_TL_INITIATOR
     55          #if defined ( BDB_TL_TARGET )
     56            #include "bdb_touchlink_target.h"
     57          #endif // BDB_TL_TARGET
     58          #endif
     59          
     60          #include "bdb.h"
     61          #include "bdb_interface.h"
     62          #include "bdb_tlCommissioning.h"
     63          #include "bdb_touchlink.h"
     64          
     65          #if defined ( BDB_TL_TARGET ) || defined ( BDB_TL_INITIATOR )
     66          
     67          /*********************************************************************
     68           * MACROS
     69           */
     70          #define TOUCHLINK_NEW_MIN( min, max )                  ( ( (uint32)(max) + (uint32)(min) + 1 ) / 2 )
     71          
     72          /*********************************************************************
     73           * CONSTANTS
     74           */
     75          
     76          #define TOUCHLINK_NUM_DEVICE_INFO_ENTRIES              5
     77          
     78          
     79          /*********************************************************************
     80           * TYPEDEFS
     81           */
     82          
     83          /*********************************************************************
     84           * GLOBAL VARIABLES
     85           */
     86          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     87          uint32 touchLinkLastAcceptedTransID;
   \                     touchLinkLastAcceptedTransID:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     88             
     89          // Used for Network Discovery

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     90          touchLinkDiscoveredNwkParam_t *pDiscoveredNwkParamList = NULL;
   \                     pDiscoveredNwkParamList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     91          
     92          // Current Touch Link Transaction ID

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     93          uint32 touchLinkTransID;
   \                     touchLinkTransID:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     94          
     95          // Scan Response ID

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     96          uint32 touchLinkResponseID;
   \                     touchLinkResponseID:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     97          
     98          // Our group ID range

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     99          uint16 touchLinkGrpIDsBegin;
   \                     touchLinkGrpIDsBegin:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    100          uint16 touchLinkGrpIDsEnd;
   \                     touchLinkGrpIDsEnd:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    101          
    102          // Flag for leave

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          uint8 touchLinkLeaveInitiated;
   \                     touchLinkLeaveInitiated:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    104          
    105          // Device Information Table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    106          bdbTLDeviceInfo_t *touchLinkSubDevicesTbl[5];
   \                     touchLinkSubDevicesTbl:
   \   000000                DS 10
   \   00000A                REQUIRE __INIT_XDATA_Z
    107          
    108          // Touchlink distributed network flag

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    109          bool touchlinkDistNwk = FALSE;
   \                     touchlinkDistNwk:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    110          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    111          bool touchlinkFNReset;
   \                     touchlinkFNReset:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    112          
    113          /*********************************************************************
    114           * EXTERNAL VARIABLES
    115           */
    116          
    117          /*********************************************************************
    118           * EXTERNAL FUNCTIONS
    119           */
    120          
    121          /*********************************************************************
    122           * LOCAL VARIABLES
    123           */
    124          // TOUCHLINK Profile attributes - Our free network address and group ID ranges

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    125          static uint16 touchLinkFreeNwkAddrBegin;
   \                     touchLinkFreeNwkAddrBegin:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    126          static uint16 touchLinkFreeNwkAddrEnd;
   \                     touchLinkFreeNwkAddrEnd:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          static uint16 touchLinkFreeGrpIdBegin;
   \                     touchLinkFreeGrpIdBegin:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    128          static uint16 touchLinkFreeGrpIdEnd;
   \                     touchLinkFreeGrpIdEnd:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    129          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    130          static bool touchLinkIsInitiator;
   \                     touchLinkIsInitiator:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          static uint8 touchLinkTaskId;
   \                     touchLinkTaskId:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    132          
    133          // This is the Cluster ID List and should be filled with Application
    134          // specific cluster IDs.
    135          #define TOUCHLINK_EP_MAX_INCLUSTERS       1

   \                                 In  segment XDATA_ROM_C, align 1
    136          static const cId_t touchLink_EP_InClusterList[TOUCHLINK_EP_MAX_INCLUSTERS] =
   \                     touchLink_EP_InClusterList:
   \   000000   0010         DW 4096
    137          {
    138            ZCL_CLUSTER_ID_TOUCHLINK
    139          };
    140          
    141          #define TOUCHLINK_EP_MAX_OUTCLUSTERS       1

   \                                 In  segment XDATA_ROM_C, align 1
    142          static const cId_t touchLink_EP_OutClusterList[TOUCHLINK_EP_MAX_OUTCLUSTERS] =
   \                     touchLink_EP_OutClusterList:
   \   000000   0010         DW 4096
    143          {
    144            ZCL_CLUSTER_ID_TOUCHLINK
    145          };
    146          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    147          static SimpleDescriptionFormat_t touchLink_EP_SimpleDesc =
   \                     touchLink_EP_SimpleDesc:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for touchLink_EP_SimpleDesc>`
   \   00000C                REQUIRE __INIT_XDATA_I
    148          {
    149            TOUCHLINK_INTERNAL_ENDPOINT,         //  int Endpoint;
    150            TOUCHLINK_PROFILE_ID,                //  uint16 AppProfId[2];
    151            TOUCHLINK_INTERNAL_DEVICE_ID,        //  uint16 AppDeviceId[2];
    152            TOUCHLINK_DEVICE_VERSION,            //  int   AppDevVer:4;
    153            TOUCHLINK_INTERNAL_FLAGS,            //  int   AppFlags:4;
    154            TOUCHLINK_EP_MAX_INCLUSTERS,         //  byte  AppNumInClusters;
    155            (cId_t *)touchLink_EP_InClusterList, //  byte *pAppInClusterList;
    156            TOUCHLINK_EP_MAX_OUTCLUSTERS,        //  byte  AppNumInClusters;
    157            (cId_t *)touchLink_EP_OutClusterList //  byte *pAppInClusterList;
    158          };
    159          
    160          #if defined( INTER_PAN )
    161          // Define endpoint structure to register with STUB APS for INTER-PAN support

   \                                 In  segment XDATA_I, align 1, keep-with-next
    162          static endPointDesc_t touchLink_EP =
   \                     touchLink_EP:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for touchLink_EP>`
   \   000007                REQUIRE __INIT_XDATA_I
    163          {
    164            TOUCHLINK_INTERNAL_ENDPOINT,
    165            0,
    166            &touchLinkTaskId,
    167            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this endpoint
    168            (afNetworkLatencyReq_t)0            // No Network Latency req
    169          };
    170          #endif
    171          
    172          
    173          /*********************************************************************
    174           * LOCAL FUNCTIONS
    175           */
    176          static void touchLink_BuildAesKey( uint8 *pAesKey, uint32 transID, uint32 responseID, uint8 keyIndex );
    177          void touchLink_ItemInit( uint16 id, uint16 len, void *pBuf );
    178          static void *touchLink_BeaconIndCB ( void *param );
    179          static void *touchLink_NwkDiscoveryCnfCB ( void *param );
    180          static void touchLink_InitNV( void );
    181          
    182          /*********************************************************************
    183           * PUBLIC FUNCTIONS
    184           */
    185          
    186          /*********************************************************************
    187           * @fn      touchLink_InitVariables
    188           *
    189           * @brief   Initialize the TOUCHLINK global and local variables.
    190           *
    191           * @param   initiator - if caller is Initiator
    192           *
    193           * @return  none
    194           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    195          void touchLink_InitVariables( bool initiator )
   \                     touchLink_InitVariables:
    196          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    197            touchLinkTransID = 0;
   \   000007   90....       MOV       DPTR,#touchLinkTransID
   \   00000A   7400         MOV       A,#0x0
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   A3           INC       DPTR
   \   00000E   7400         MOV       A,#0x0
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   7400         MOV       A,#0x0
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   7400         MOV       A,#0x0
   \   000018   F0           MOVX      @DPTR,A
    198            touchLinkIsInitiator = initiator;
   \   000019   EE           MOV       A,R6
   \   00001A   90....       MOV       DPTR,#touchLinkIsInitiator
   \   00001D   F0           MOVX      @DPTR,A
    199          
    200            if ( bdbAttributes.bdbNodeIsOnANetwork == FALSE )
   \   00001E   90....       MOV       DPTR,#bdbAttributes + 14
   \   000021   E0           MOVX      A,@DPTR
   \   000022   700A         JNZ       ??touchLink_InitVariables_0
    201            {
    202              _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   000024   90....       MOV       DPTR,#_NIB + 20
   \   000027   74FE         MOV       A,#-0x2
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   74FF         MOV       A,#-0x1
   \   00002D   F0           MOVX      @DPTR,A
    203            }
    204          
    205            // verify groups communication is initiated by broadcasts rather than multicasts
    206            _NIB.nwkUseMultiCast = FALSE;
   \                     ??touchLink_InitVariables_0:
   \   00002E   90....       MOV       DPTR,#_NIB + 100
   \   000031   7400         MOV       A,#0x0
   \   000033   F0           MOVX      @DPTR,A
    207            // detect and remove stored deprecated end device children after power up
    208            zgRouterOffAssocCleanup = TRUE;
   \   000034   90....       MOV       DPTR,#zgRouterOffAssocCleanup
   \   000037   7401         MOV       A,#0x1
   \   000039   F0           MOVX      @DPTR,A
    209            osal_nv_write(ZCD_NV_ROUTER_OFF_ASSOC_CLEANUP, 0, sizeof(zgRouterOffAssocCleanup), &zgRouterOffAssocCleanup);
   \   00003A                ; Setup parameters for call to function osal_nv_write
   \   00003A   75....       MOV       ?V0,#zgRouterOffAssocCleanup & 0xff
   \   00003D   75....       MOV       ?V1,#(zgRouterOffAssocCleanup >> 8) & 0xff
   \   000040   78..         MOV       R0,#?V0
   \   000042   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000045   75..01       MOV       ?V0,#0x1
   \   000048   75..00       MOV       ?V1,#0x0
   \   00004B   78..         MOV       R0,#?V0
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000050   7C00         MOV       R4,#0x0
   \   000052   7D00         MOV       R5,#0x0
   \   000054   7A3C         MOV       R2,#0x3c
   \   000056   7B00         MOV       R3,#0x0
   \   000058   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00005B   7404         MOV       A,#0x4
   \   00005D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000060   E9           MOV       A,R1
    210          
    211            touchLink_InitFreeRanges( initiator );
   \   000061                ; Setup parameters for call to function touchLink_InitFreeRanges
   \   000061   EE           MOV       A,R6
   \   000062   F9           MOV       R1,A
   \   000063   12....       LCALL     `??touchLink_InitFreeRanges::?relay`; Banked call to: touchLink_InitFreeRanges
    212          
    213            touchLink_InitNV();
   \   000066                ; Setup parameters for call to function touchLink_InitNV
   \   000066   12....       LCALL     `??touchLink_InitNV::?relay`; Banked call to: touchLink_InitNV
    214          
    215            touchLinkLeaveInitiated = FALSE;
   \   000069   90....       MOV       DPTR,#touchLinkLeaveInitiated
   \   00006C   7400         MOV       A,#0x0
   \   00006E   F0           MOVX      @DPTR,A
    216          
    217            // Initialize device info table
    218            osal_memset( touchLinkSubDevicesTbl, 0, sizeof( touchLinkSubDevicesTbl ) );
   \   00006F                ; Setup parameters for call to function osal_memset
   \   00006F   7C0A         MOV       R4,#0xa
   \   000071   7D00         MOV       R5,#0x0
   \   000073   7900         MOV       R1,#0x0
   \   000075   7A..         MOV       R2,#touchLinkSubDevicesTbl & 0xff
   \   000077   7B..         MOV       R3,#(touchLinkSubDevicesTbl >> 8) & 0xff
   \   000079   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    219            
    220            touchLinkIsInitiator = FALSE;
   \   00007C   90....       MOV       DPTR,#touchLinkIsInitiator
   \   00007F   7400         MOV       A,#0x0
   \   000081   F0           MOVX      @DPTR,A
    221            
    222            // set broadcast address mask to support broadcast filtering
    223            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000082                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000082   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000085   E0           MOVX      A,@DPTR
   \   000086   F9           MOV       R1,A
   \   000087   12....       LCALL     `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
    224          }
   \   00008A   7F02         MOV       R7,#0x2
   \   00008C   02....       LJMP      ?BANKED_LEAVE_XDATA
    225          
    226          /*********************************************************************
    227           * @fn      touchLink_InitFreeRanges
    228           *
    229           * @brief   Initialize the TOUCHLINK free range global variables.
    230           *
    231           * @param   initiator - if caller is link initiator
    232           *
    233           * @return  none
    234           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    235          void touchLink_InitFreeRanges( bool initiator )
   \                     touchLink_InitFreeRanges:
    236          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    237            // Initialize our free network address and group ID ranges
    238            if ( initiator )
   \   000004   E9           MOV       A,R1
   \   000005   602A         JZ        ??touchLink_InitFreeRanges_0
    239            {
    240              touchLinkFreeNwkAddrBegin = APL_FREE_NWK_ADDR_RANGE_BEGIN;
   \   000007   90....       MOV       DPTR,#touchLinkFreeNwkAddrBegin
   \   00000A   7401         MOV       A,#0x1
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   A3           INC       DPTR
   \   00000E   7400         MOV       A,#0x0
   \   000010   F0           MOVX      @DPTR,A
    241              touchLinkFreeNwkAddrEnd = APL_FREE_NWK_ADDR_RANGE_END;
   \   000011   90....       MOV       DPTR,#touchLinkFreeNwkAddrEnd
   \   000014   74F7         MOV       A,#-0x9
   \   000016   F0           MOVX      @DPTR,A
   \   000017   A3           INC       DPTR
   \   000018   74FF         MOV       A,#-0x1
   \   00001A   F0           MOVX      @DPTR,A
    242          
    243              touchLinkFreeGrpIdBegin = APL_FREE_GROUP_ID_RANGE_BEGIN;
   \   00001B   90....       MOV       DPTR,#touchLinkFreeGrpIdBegin
   \   00001E   7401         MOV       A,#0x1
   \   000020   F0           MOVX      @DPTR,A
   \   000021   A3           INC       DPTR
   \   000022   7400         MOV       A,#0x0
   \   000024   F0           MOVX      @DPTR,A
    244              touchLinkFreeGrpIdEnd = APL_FREE_GROUP_ID_RANGE_END;
   \   000025   90....       MOV       DPTR,#touchLinkFreeGrpIdEnd
   \   000028   74FF         MOV       A,#-0x1
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   A3           INC       DPTR
   \   00002C   74FE         MOV       A,#-0x2
   \   00002E   F0           MOVX      @DPTR,A
   \   00002F   8034         SJMP      ??touchLink_InitFreeRanges_1
    245            }
    246            else
    247            {
    248              touchLinkFreeNwkAddrBegin = touchLinkFreeNwkAddrEnd = 0;
   \                     ??touchLink_InitFreeRanges_0:
   \   000031   90....       MOV       DPTR,#touchLinkFreeNwkAddrEnd
   \   000034   7400         MOV       A,#0x0
   \   000036   F0           MOVX      @DPTR,A
   \   000037   A3           INC       DPTR
   \   000038   7400         MOV       A,#0x0
   \   00003A   F0           MOVX      @DPTR,A
   \   00003B   90....       MOV       DPTR,#touchLinkFreeNwkAddrEnd
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   FA           MOV       R2,A
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   FB           MOV       R3,A
   \   000043   90....       MOV       DPTR,#touchLinkFreeNwkAddrBegin
   \   000046   EA           MOV       A,R2
   \   000047   F0           MOVX      @DPTR,A
   \   000048   A3           INC       DPTR
   \   000049   EB           MOV       A,R3
   \   00004A   F0           MOVX      @DPTR,A
    249              touchLinkFreeGrpIdBegin = touchLinkFreeGrpIdEnd = 0;
   \   00004B   90....       MOV       DPTR,#touchLinkFreeGrpIdEnd
   \   00004E   7400         MOV       A,#0x0
   \   000050   F0           MOVX      @DPTR,A
   \   000051   A3           INC       DPTR
   \   000052   7400         MOV       A,#0x0
   \   000054   F0           MOVX      @DPTR,A
   \   000055   90....       MOV       DPTR,#touchLinkFreeGrpIdEnd
   \   000058   E0           MOVX      A,@DPTR
   \   000059   FA           MOV       R2,A
   \   00005A   A3           INC       DPTR
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   FB           MOV       R3,A
   \   00005D   90....       MOV       DPTR,#touchLinkFreeGrpIdBegin
   \   000060   EA           MOV       A,R2
   \   000061   F0           MOVX      @DPTR,A
   \   000062   A3           INC       DPTR
   \   000063   EB           MOV       A,R3
   \   000064   F0           MOVX      @DPTR,A
    250            }
    251          
    252            // Initialize our local group ID range
    253            touchLinkGrpIDsBegin = touchLinkGrpIDsEnd = 0;
   \                     ??touchLink_InitFreeRanges_1:
   \   000065   90....       MOV       DPTR,#touchLinkGrpIDsEnd
   \   000068   7400         MOV       A,#0x0
   \   00006A   F0           MOVX      @DPTR,A
   \   00006B   A3           INC       DPTR
   \   00006C   7400         MOV       A,#0x0
   \   00006E   F0           MOVX      @DPTR,A
   \   00006F   90....       MOV       DPTR,#touchLinkGrpIDsEnd
   \   000072   E0           MOVX      A,@DPTR
   \   000073   FA           MOV       R2,A
   \   000074   A3           INC       DPTR
   \   000075   E0           MOVX      A,@DPTR
   \   000076   FB           MOV       R3,A
   \   000077   90....       MOV       DPTR,#touchLinkGrpIDsBegin
   \   00007A   EA           MOV       A,R2
   \   00007B   F0           MOVX      @DPTR,A
   \   00007C   A3           INC       DPTR
   \   00007D   EB           MOV       A,R3
   \   00007E   F0           MOVX      @DPTR,A
    254          }
   \   00007F   D083         POP       DPH
   \   000081   D082         POP       DPL
   \   000083   02....       LJMP      ?BRET
    255          
    256          /*********************************************************************
    257           * @fn      touchLink_UpdateFreeRanges
    258           *
    259           * @brief   Update the TOUCHLINK free range global variables.
    260           *
    261           * @param   pParams - new parameters
    262           *
    263           * @return  none
    264           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          void touchLink_UpdateFreeRanges( bdbTLNwkParams_t *pParams )
   \                     touchLink_UpdateFreeRanges:
    266          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    267            // Set our free network address and group ID ranges
    268            touchLinkFreeNwkAddrBegin = pParams->freeNwkAddrBegin;
   \   000004   EA           MOV       A,R2
   \   000005   2422         ADD       A,#0x22
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F583         MOV       DPH,A
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F8           MOV       R0,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F9           MOV       R1,A
   \   000012   90....       MOV       DPTR,#touchLinkFreeNwkAddrBegin
   \   000015   E8           MOV       A,R0
   \   000016   F0           MOVX      @DPTR,A
   \   000017   A3           INC       DPTR
   \   000018   E9           MOV       A,R1
   \   000019   F0           MOVX      @DPTR,A
    269            touchLinkFreeNwkAddrEnd = pParams->freeNwkAddrEnd;
   \   00001A   EA           MOV       A,R2
   \   00001B   2424         ADD       A,#0x24
   \   00001D   F582         MOV       DPL,A
   \   00001F   E4           CLR       A
   \   000020   3B           ADDC      A,R3
   \   000021   F583         MOV       DPH,A
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F8           MOV       R0,A
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F9           MOV       R1,A
   \   000028   90....       MOV       DPTR,#touchLinkFreeNwkAddrEnd
   \   00002B   E8           MOV       A,R0
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   A3           INC       DPTR
   \   00002E   E9           MOV       A,R1
   \   00002F   F0           MOVX      @DPTR,A
    270            touchLinkFreeGrpIdBegin = pParams->freeGrpIDBegin;
   \   000030   EA           MOV       A,R2
   \   000031   2426         ADD       A,#0x26
   \   000033   F582         MOV       DPL,A
   \   000035   E4           CLR       A
   \   000036   3B           ADDC      A,R3
   \   000037   F583         MOV       DPH,A
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F8           MOV       R0,A
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   F9           MOV       R1,A
   \   00003E   90....       MOV       DPTR,#touchLinkFreeGrpIdBegin
   \   000041   E8           MOV       A,R0
   \   000042   F0           MOVX      @DPTR,A
   \   000043   A3           INC       DPTR
   \   000044   E9           MOV       A,R1
   \   000045   F0           MOVX      @DPTR,A
    271            touchLinkFreeGrpIdEnd = pParams->freeGrpIDEnd;
   \   000046   EA           MOV       A,R2
   \   000047   2428         ADD       A,#0x28
   \   000049   F582         MOV       DPL,A
   \   00004B   E4           CLR       A
   \   00004C   3B           ADDC      A,R3
   \   00004D   F583         MOV       DPH,A
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   F8           MOV       R0,A
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   F9           MOV       R1,A
   \   000054   90....       MOV       DPTR,#touchLinkFreeGrpIdEnd
   \   000057   E8           MOV       A,R0
   \   000058   F0           MOVX      @DPTR,A
   \   000059   A3           INC       DPTR
   \   00005A   E9           MOV       A,R1
   \   00005B   F0           MOVX      @DPTR,A
    272          
    273            // Set our group ID range
    274            touchLinkGrpIDsBegin = pParams->grpIDsBegin;
   \   00005C   EA           MOV       A,R2
   \   00005D   241E         ADD       A,#0x1e
   \   00005F   F582         MOV       DPL,A
   \   000061   E4           CLR       A
   \   000062   3B           ADDC      A,R3
   \   000063   F583         MOV       DPH,A
   \   000065   E0           MOVX      A,@DPTR
   \   000066   F8           MOV       R0,A
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   F9           MOV       R1,A
   \   00006A   90....       MOV       DPTR,#touchLinkGrpIDsBegin
   \   00006D   E8           MOV       A,R0
   \   00006E   F0           MOVX      @DPTR,A
   \   00006F   A3           INC       DPTR
   \   000070   E9           MOV       A,R1
   \   000071   F0           MOVX      @DPTR,A
    275            touchLinkGrpIDsEnd = pParams->grpIDsEnd;
   \   000072   EA           MOV       A,R2
   \   000073   2420         ADD       A,#0x20
   \   000075   F582         MOV       DPL,A
   \   000077   E4           CLR       A
   \   000078   3B           ADDC      A,R3
   \   000079   F583         MOV       DPH,A
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   F8           MOV       R0,A
   \   00007D   A3           INC       DPTR
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   F9           MOV       R1,A
   \   000080   90....       MOV       DPTR,#touchLinkGrpIDsEnd
   \   000083   E8           MOV       A,R0
   \   000084   F0           MOVX      @DPTR,A
   \   000085   A3           INC       DPTR
   \   000086   E9           MOV       A,R1
   \   000087   F0           MOVX      @DPTR,A
    276          }
   \   000088   D083         POP       DPH
   \   00008A   D082         POP       DPL
   \   00008C   02....       LJMP      ?BRET
    277          
    278          /*********************************************************************
    279           * @fn      touchLink_GerFreeRanges
    280           *
    281           * @brief   Get the TOUCHLINK free range global variables.
    282           *
    283           * @param   pParams - parameter to get
    284           *
    285           * @return  none
    286           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    287          void touchLink_GerFreeRanges( bdbTLNwkParams_t *pParams )
   \                     touchLink_GerFreeRanges:
    288          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    289            // Set our free network address and group ID ranges
    290            pParams->freeNwkAddrBegin = touchLinkFreeNwkAddrBegin;
   \   000004   90....       MOV       DPTR,#touchLinkFreeNwkAddrBegin
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F9           MOV       R1,A
   \   00000C   EA           MOV       A,R2
   \   00000D   2422         ADD       A,#0x22
   \   00000F   F582         MOV       DPL,A
   \   000011   E4           CLR       A
   \   000012   3B           ADDC      A,R3
   \   000013   F583         MOV       DPH,A
   \   000015   E8           MOV       A,R0
   \   000016   F0           MOVX      @DPTR,A
   \   000017   A3           INC       DPTR
   \   000018   E9           MOV       A,R1
   \   000019   F0           MOVX      @DPTR,A
    291            pParams->freeNwkAddrEnd = touchLinkFreeNwkAddrEnd;
   \   00001A   90....       MOV       DPTR,#touchLinkFreeNwkAddrEnd
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F8           MOV       R0,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F9           MOV       R1,A
   \   000022   EA           MOV       A,R2
   \   000023   2424         ADD       A,#0x24
   \   000025   F582         MOV       DPL,A
   \   000027   E4           CLR       A
   \   000028   3B           ADDC      A,R3
   \   000029   F583         MOV       DPH,A
   \   00002B   E8           MOV       A,R0
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   A3           INC       DPTR
   \   00002E   E9           MOV       A,R1
   \   00002F   F0           MOVX      @DPTR,A
    292            pParams->freeGrpIDBegin = touchLinkFreeGrpIdBegin;
   \   000030   90....       MOV       DPTR,#touchLinkFreeGrpIdBegin
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F8           MOV       R0,A
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F9           MOV       R1,A
   \   000038   EA           MOV       A,R2
   \   000039   2426         ADD       A,#0x26
   \   00003B   F582         MOV       DPL,A
   \   00003D   E4           CLR       A
   \   00003E   3B           ADDC      A,R3
   \   00003F   F583         MOV       DPH,A
   \   000041   E8           MOV       A,R0
   \   000042   F0           MOVX      @DPTR,A
   \   000043   A3           INC       DPTR
   \   000044   E9           MOV       A,R1
   \   000045   F0           MOVX      @DPTR,A
    293            pParams->freeGrpIDEnd = touchLinkFreeGrpIdEnd;
   \   000046   90....       MOV       DPTR,#touchLinkFreeGrpIdEnd
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   F8           MOV       R0,A
   \   00004B   A3           INC       DPTR
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   F9           MOV       R1,A
   \   00004E   EA           MOV       A,R2
   \   00004F   2428         ADD       A,#0x28
   \   000051   F582         MOV       DPL,A
   \   000053   E4           CLR       A
   \   000054   3B           ADDC      A,R3
   \   000055   F583         MOV       DPH,A
   \   000057   E8           MOV       A,R0
   \   000058   F0           MOVX      @DPTR,A
   \   000059   A3           INC       DPTR
   \   00005A   E9           MOV       A,R1
   \   00005B   F0           MOVX      @DPTR,A
    294            
    295              // Set our group ID range
    296            pParams->grpIDsBegin = touchLinkGrpIDsBegin;
   \   00005C   90....       MOV       DPTR,#touchLinkGrpIDsBegin
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F8           MOV       R0,A
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F9           MOV       R1,A
   \   000064   EA           MOV       A,R2
   \   000065   241E         ADD       A,#0x1e
   \   000067   F582         MOV       DPL,A
   \   000069   E4           CLR       A
   \   00006A   3B           ADDC      A,R3
   \   00006B   F583         MOV       DPH,A
   \   00006D   E8           MOV       A,R0
   \   00006E   F0           MOVX      @DPTR,A
   \   00006F   A3           INC       DPTR
   \   000070   E9           MOV       A,R1
   \   000071   F0           MOVX      @DPTR,A
    297            pParams->grpIDsEnd = touchLinkGrpIDsEnd;
   \   000072   90....       MOV       DPTR,#touchLinkGrpIDsEnd
   \   000075   E0           MOVX      A,@DPTR
   \   000076   F8           MOV       R0,A
   \   000077   A3           INC       DPTR
   \   000078   E0           MOVX      A,@DPTR
   \   000079   F9           MOV       R1,A
   \   00007A   EA           MOV       A,R2
   \   00007B   2420         ADD       A,#0x20
   \   00007D   F582         MOV       DPL,A
   \   00007F   E4           CLR       A
   \   000080   3B           ADDC      A,R3
   \   000081   F583         MOV       DPH,A
   \   000083   E8           MOV       A,R0
   \   000084   F0           MOVX      @DPTR,A
   \   000085   A3           INC       DPTR
   \   000086   E9           MOV       A,R1
   \   000087   F0           MOVX      @DPTR,A
    298          }
   \   000088   D083         POP       DPH
   \   00008A   D082         POP       DPL
   \   00008C   02....       LJMP      ?BRET
    299          
    300          /*********************************************************************
    301           * @fn      touchLink_IsValidSplitFreeRanges
    302           *
    303           * @brief   Checks to see if the resulting two ranges are not smaller
    304           *          than the threshold after division of a network address or
    305           *          group ID range. The Initiator splits its own free range
    306           *          in half and assigns the top half to the new device.
    307           *
    308           *          Note: A range (Nmin...Nmax) is split as follows:
    309           *
    310           *                N'min = (Nmax + Nmin + 1)/2
    311           *                N'max = Nmax
    312           *                Nmax = N'min - 1
    313           *
    314           * @param   totalGrpIDs - total number of group IDs needed
    315           *
    316           * @return  TRUE if split possible. FALSE, otherwise.
    317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    318          bool touchLink_IsValidSplitFreeRanges( uint8 totalGrpIDs )
   \                     touchLink_IsValidSplitFreeRanges:
    319          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   FC           MOV       R4,A
    320            if ( ( touchLinkFreeNwkAddrBegin != 0 ) && ( touchLinkFreeGrpIdBegin != 0 ) )
   \   000006   90....       MOV       DPTR,#touchLinkFreeNwkAddrBegin
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F8           MOV       R0,A
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F9           MOV       R1,A
   \   00000E   E8           MOV       A,R0
   \   00000F   49           ORL       A,R1
   \   000010   607E         JZ        ??touchLink_IsValidSplitFreeRanges_0
   \   000012   90....       MOV       DPTR,#touchLinkFreeGrpIdBegin
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F8           MOV       R0,A
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F9           MOV       R1,A
   \   00001A   E8           MOV       A,R0
   \   00001B   49           ORL       A,R1
   \   00001C   6072         JZ        ??touchLink_IsValidSplitFreeRanges_0
    321            {
    322                return ( ( ( ( touchLinkFreeNwkAddrEnd - touchLinkFreeNwkAddrBegin ) / 2 ) >= APL_FREE_ADDR_THRESHOLD ) &&
    323                         ( ( ( touchLinkFreeGrpIdEnd - ( touchLinkFreeGrpIdBegin + totalGrpIDs - 1 ) ) / 2 ) >= APL_FREE_GROUP_ID_THRESHOLD ) );
   \   00001E   90....       MOV       DPTR,#touchLinkFreeNwkAddrEnd
   \   000021   C082         PUSH      DPL
   \   000023   C083         PUSH      DPH
   \   000025   90....       MOV       DPTR,#touchLinkFreeNwkAddrBegin
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F8           MOV       R0,A
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F9           MOV       R1,A
   \   00002D   D083         POP       DPH
   \   00002F   D082         POP       DPL
   \   000031   E0           MOVX      A,@DPTR
   \   000032   C3           CLR       C
   \   000033   98           SUBB      A,R0
   \   000034   F8           MOV       R0,A
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   99           SUBB      A,R1
   \   000038   F9           MOV       R1,A
   \   000039   E9           MOV       A,R1
   \   00003A   C3           CLR       C
   \   00003B   13           RRC       A
   \   00003C   F9           MOV       R1,A
   \   00003D   E8           MOV       A,R0
   \   00003E   13           RRC       A
   \   00003F   F8           MOV       R0,A
   \   000040   C3           CLR       C
   \   000041   E8           MOV       A,R0
   \   000042   940A         SUBB      A,#0xa
   \   000044   E9           MOV       A,R1
   \   000045   9400         SUBB      A,#0x0
   \   000047   4043         JC        ??touchLink_IsValidSplitFreeRanges_1
   \   000049   90....       MOV       DPTR,#touchLinkFreeGrpIdEnd
   \   00004C   C082         PUSH      DPL
   \   00004E   C083         PUSH      DPH
   \   000050   90....       MOV       DPTR,#touchLinkFreeGrpIdBegin
   \   000053   E0           MOVX      A,@DPTR
   \   000054   F8           MOV       R0,A
   \   000055   A3           INC       DPTR
   \   000056   E0           MOVX      A,@DPTR
   \   000057   F9           MOV       R1,A
   \   000058   D083         POP       DPH
   \   00005A   D082         POP       DPL
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   C3           CLR       C
   \   00005E   98           SUBB      A,R0
   \   00005F   F8           MOV       R0,A
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   99           SUBB      A,R1
   \   000063   F9           MOV       R1,A
   \   000064   EC           MOV       A,R4
   \   000065   FA           MOV       R2,A
   \   000066   7B00         MOV       R3,#0x0
   \   000068   E8           MOV       A,R0
   \   000069   C3           CLR       C
   \   00006A   9A           SUBB      A,R2
   \   00006B   F8           MOV       R0,A
   \   00006C   E9           MOV       A,R1
   \   00006D   9B           SUBB      A,R3
   \   00006E   F9           MOV       R1,A
   \   00006F   E8           MOV       A,R0
   \   000070   C3           CLR       C
   \   000071   94FF         SUBB      A,#-0x1
   \   000073   F8           MOV       R0,A
   \   000074   E9           MOV       A,R1
   \   000075   94FF         SUBB      A,#-0x1
   \   000077   F9           MOV       R1,A
   \   000078   E9           MOV       A,R1
   \   000079   C3           CLR       C
   \   00007A   13           RRC       A
   \   00007B   F9           MOV       R1,A
   \   00007C   E8           MOV       A,R0
   \   00007D   13           RRC       A
   \   00007E   F8           MOV       R0,A
   \   00007F   C3           CLR       C
   \   000080   E8           MOV       A,R0
   \   000081   940A         SUBB      A,#0xa
   \   000083   E9           MOV       A,R1
   \   000084   9400         SUBB      A,#0x0
   \   000086   4004         JC        ??touchLink_IsValidSplitFreeRanges_1
   \   000088   7901         MOV       R1,#0x1
   \   00008A   8006         SJMP      ??touchLink_IsValidSplitFreeRanges_2
   \                     ??touchLink_IsValidSplitFreeRanges_1:
   \   00008C   7900         MOV       R1,#0x0
   \   00008E   8002         SJMP      ??touchLink_IsValidSplitFreeRanges_2
    324          
    325            }
    326          
    327            return ( FALSE );
   \                     ??touchLink_IsValidSplitFreeRanges_0:
   \   000090   7900         MOV       R1,#0x0
   \                     ??touchLink_IsValidSplitFreeRanges_2:
   \   000092   D083         POP       DPH
   \   000094   D082         POP       DPL
   \   000096   02....       LJMP      ?BRET
    328          }
    329          
    330          /*********************************************************************
    331           * @fn      touchLink_SplitFreeRanges
    332           *
    333           * @brief   Split our own free network address and group ID ranges
    334           *          in half and assign the top half to the new device.
    335           *
    336           *          Note: A range (Nmin...Nmax) is split as follows:
    337           *
    338           *                N'min = (Nmax + Nmin + 1)/2
    339           *                N'max = Nmax
    340           *                Nmax = N'min - 1
    341           *
    342           * output parameters
    343           *
    344           * @param   pAddrBegin - new address range begin
    345           * @param   pAddrEnd - new address range end
    346           * @param   pGrpIdBegin - new group id range begin
    347           * @param   pGrpIdEnd - new group id range end
    348           *
    349           * @return  none
    350           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    351          void touchLink_SplitFreeRanges( uint16 *pAddrBegin, uint16 *pAddrEnd,
   \                     touchLink_SplitFreeRanges:
    352                                  uint16 *pGrpIdBegin, uint16 *pGrpIdEnd )
    353          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V8,R2
   \   000007   8B..         MOV       ?V9,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   \   00000D   7412         MOV       A,#0x12
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   E0           MOVX      A,@DPTR
   \   000013   FA           MOV       R2,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   FB           MOV       R3,A
   \   000017   7414         MOV       A,#0x14
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   FC           MOV       R4,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   FD           MOV       R5,A
    354            if ( ( touchLinkFreeNwkAddrBegin != 0 ) && ( touchLinkFreeGrpIdBegin != 0 ) )
   \   000021   90....       MOV       DPTR,#touchLinkFreeNwkAddrBegin
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F8           MOV       R0,A
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F9           MOV       R1,A
   \   000029   E8           MOV       A,R0
   \   00002A   49           ORL       A,R1
   \   00002B   7003         JNZ       $+5
   \   00002D   02....       LJMP      ??touchLink_SplitFreeRanges_0 & 0xFFFF
   \   000030   90....       MOV       DPTR,#touchLinkFreeGrpIdBegin
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F8           MOV       R0,A
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F9           MOV       R1,A
   \   000038   E8           MOV       A,R0
   \   000039   49           ORL       A,R1
   \   00003A   7003         JNZ       $+5
   \   00003C   02....       LJMP      ??touchLink_SplitFreeRanges_0 & 0xFFFF
    355            {
    356              *pAddrBegin = TOUCHLINK_NEW_MIN( touchLinkFreeNwkAddrBegin, touchLinkFreeNwkAddrEnd );
   \   00003F   90....       MOV       DPTR,#touchLinkFreeNwkAddrEnd
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F5..         MOV       ?V4,A
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F5..         MOV       ?V5,A
   \   000049   E4           CLR       A
   \   00004A   F5..         MOV       ?V6,A
   \   00004C   F5..         MOV       ?V7,A
   \   00004E   90....       MOV       DPTR,#touchLinkFreeNwkAddrBegin
   \   000051   E0           MOVX      A,@DPTR
   \   000052   F5..         MOV       ?V0,A
   \   000054   A3           INC       DPTR
   \   000055   E0           MOVX      A,@DPTR
   \   000056   F5..         MOV       ?V1,A
   \   000058   E4           CLR       A
   \   000059   F5..         MOV       ?V2,A
   \   00005B   F5..         MOV       ?V3,A
   \   00005D   78..         MOV       R0,#?V4
   \   00005F   79..         MOV       R1,#?V0
   \   000061   12....       LCALL     ?L_ADD
   \   000064   90....       MOV       DPTR,#__Constant_1
   \   000067   78..         MOV       R0,#?V4
   \   000069   12....       LCALL     ?L_ADD_X
   \   00006C   7401         MOV       A,#0x1
   \   00006E   78..         MOV       R0,#?V4
   \   000070   12....       LCALL     ?UL_SHR
   \   000073   85..82       MOV       DPL,?V8
   \   000076   85..83       MOV       DPH,?V9
   \   000079   E5..         MOV       A,?V4
   \   00007B   F0           MOVX      @DPTR,A
   \   00007C   A3           INC       DPTR
   \   00007D   E5..         MOV       A,?V5
   \   00007F   F0           MOVX      @DPTR,A
    357              *pGrpIdBegin = TOUCHLINK_NEW_MIN( touchLinkFreeGrpIdBegin, touchLinkFreeGrpIdEnd );
   \   000080   90....       MOV       DPTR,#touchLinkFreeGrpIdEnd
   \   000083   E0           MOVX      A,@DPTR
   \   000084   F5..         MOV       ?V4,A
   \   000086   A3           INC       DPTR
   \   000087   E0           MOVX      A,@DPTR
   \   000088   F5..         MOV       ?V5,A
   \   00008A   E4           CLR       A
   \   00008B   F5..         MOV       ?V6,A
   \   00008D   F5..         MOV       ?V7,A
   \   00008F   90....       MOV       DPTR,#touchLinkFreeGrpIdBegin
   \   000092   E0           MOVX      A,@DPTR
   \   000093   F5..         MOV       ?V0,A
   \   000095   A3           INC       DPTR
   \   000096   E0           MOVX      A,@DPTR
   \   000097   F5..         MOV       ?V1,A
   \   000099   E4           CLR       A
   \   00009A   F5..         MOV       ?V2,A
   \   00009C   F5..         MOV       ?V3,A
   \   00009E   78..         MOV       R0,#?V4
   \   0000A0   79..         MOV       R1,#?V0
   \   0000A2   12....       LCALL     ?L_ADD
   \   0000A5   90....       MOV       DPTR,#__Constant_1
   \   0000A8   78..         MOV       R0,#?V4
   \   0000AA   12....       LCALL     ?L_ADD_X
   \   0000AD   7401         MOV       A,#0x1
   \   0000AF   78..         MOV       R0,#?V4
   \   0000B1   12....       LCALL     ?UL_SHR
   \   0000B4   8A82         MOV       DPL,R2
   \   0000B6   8B83         MOV       DPH,R3
   \   0000B8   E5..         MOV       A,?V4
   \   0000BA   F0           MOVX      @DPTR,A
   \   0000BB   A3           INC       DPTR
   \   0000BC   E5..         MOV       A,?V5
   \   0000BE   F0           MOVX      @DPTR,A
    358          
    359              *pAddrEnd = touchLinkFreeNwkAddrEnd;
   \   0000BF   90....       MOV       DPTR,#touchLinkFreeNwkAddrEnd
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   F8           MOV       R0,A
   \   0000C4   A3           INC       DPTR
   \   0000C5   E0           MOVX      A,@DPTR
   \   0000C6   F9           MOV       R1,A
   \   0000C7   8E82         MOV       DPL,R6
   \   0000C9   8F83         MOV       DPH,R7
   \   0000CB   E8           MOV       A,R0
   \   0000CC   F0           MOVX      @DPTR,A
   \   0000CD   A3           INC       DPTR
   \   0000CE   E9           MOV       A,R1
   \   0000CF   F0           MOVX      @DPTR,A
    360              *pGrpIdEnd = touchLinkFreeGrpIdEnd;
   \   0000D0   90....       MOV       DPTR,#touchLinkFreeGrpIdEnd
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   F8           MOV       R0,A
   \   0000D5   A3           INC       DPTR
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   F9           MOV       R1,A
   \   0000D8   8C82         MOV       DPL,R4
   \   0000DA   8D83         MOV       DPH,R5
   \   0000DC   E8           MOV       A,R0
   \   0000DD   F0           MOVX      @DPTR,A
   \   0000DE   A3           INC       DPTR
   \   0000DF   E9           MOV       A,R1
   \   0000E0   F0           MOVX      @DPTR,A
    361          
    362              // Update our max
    363              touchLinkFreeNwkAddrEnd = *pAddrBegin - 1;
   \   0000E1   85..82       MOV       DPL,?V8
   \   0000E4   85..83       MOV       DPH,?V9
   \   0000E7   E0           MOVX      A,@DPTR
   \   0000E8   24FF         ADD       A,#-0x1
   \   0000EA   F8           MOV       R0,A
   \   0000EB   A3           INC       DPTR
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   34FF         ADDC      A,#-0x1
   \   0000EF   F9           MOV       R1,A
   \   0000F0   90....       MOV       DPTR,#touchLinkFreeNwkAddrEnd
   \   0000F3   E8           MOV       A,R0
   \   0000F4   F0           MOVX      @DPTR,A
   \   0000F5   A3           INC       DPTR
   \   0000F6   E9           MOV       A,R1
   \   0000F7   F0           MOVX      @DPTR,A
    364              touchLinkFreeGrpIdEnd = *pGrpIdBegin - 1;
   \   0000F8   8A82         MOV       DPL,R2
   \   0000FA   8B83         MOV       DPH,R3
   \   0000FC   E0           MOVX      A,@DPTR
   \   0000FD   24FF         ADD       A,#-0x1
   \   0000FF   F8           MOV       R0,A
   \   000100   A3           INC       DPTR
   \   000101   E0           MOVX      A,@DPTR
   \   000102   34FF         ADDC      A,#-0x1
   \   000104   F9           MOV       R1,A
   \   000105   90....       MOV       DPTR,#touchLinkFreeGrpIdEnd
   \   000108   E8           MOV       A,R0
   \   000109   F0           MOVX      @DPTR,A
   \   00010A   A3           INC       DPTR
   \   00010B   E9           MOV       A,R1
   \   00010C   F0           MOVX      @DPTR,A
   \   00010D   803C         SJMP      ??touchLink_SplitFreeRanges_1
    365            }
    366            else
    367            {
    368              *pAddrBegin = *pAddrEnd = 0;
   \                     ??touchLink_SplitFreeRanges_0:
   \   00010F   8E82         MOV       DPL,R6
   \   000111   8F83         MOV       DPH,R7
   \   000113   7400         MOV       A,#0x0
   \   000115   F0           MOVX      @DPTR,A
   \   000116   A3           INC       DPTR
   \   000117   7400         MOV       A,#0x0
   \   000119   F0           MOVX      @DPTR,A
   \   00011A   8E82         MOV       DPL,R6
   \   00011C   8F83         MOV       DPH,R7
   \   00011E   E0           MOVX      A,@DPTR
   \   00011F   F8           MOV       R0,A
   \   000120   A3           INC       DPTR
   \   000121   E0           MOVX      A,@DPTR
   \   000122   F9           MOV       R1,A
   \   000123   85..82       MOV       DPL,?V8
   \   000126   85..83       MOV       DPH,?V9
   \   000129   E8           MOV       A,R0
   \   00012A   F0           MOVX      @DPTR,A
   \   00012B   A3           INC       DPTR
   \   00012C   E9           MOV       A,R1
   \   00012D   F0           MOVX      @DPTR,A
    369              *pGrpIdBegin = *pGrpIdEnd = 0;
   \   00012E   8C82         MOV       DPL,R4
   \   000130   8D83         MOV       DPH,R5
   \   000132   7400         MOV       A,#0x0
   \   000134   F0           MOVX      @DPTR,A
   \   000135   A3           INC       DPTR
   \   000136   7400         MOV       A,#0x0
   \   000138   F0           MOVX      @DPTR,A
   \   000139   8C82         MOV       DPL,R4
   \   00013B   8D83         MOV       DPH,R5
   \   00013D   E0           MOVX      A,@DPTR
   \   00013E   F8           MOV       R0,A
   \   00013F   A3           INC       DPTR
   \   000140   E0           MOVX      A,@DPTR
   \   000141   F9           MOV       R1,A
   \   000142   8A82         MOV       DPL,R2
   \   000144   8B83         MOV       DPH,R3
   \   000146   E8           MOV       A,R0
   \   000147   F0           MOVX      @DPTR,A
   \   000148   A3           INC       DPTR
   \   000149   E9           MOV       A,R1
   \   00014A   F0           MOVX      @DPTR,A
    370            }
    371          }
   \                     ??touchLink_SplitFreeRanges_1:
   \   00014B   7F0A         MOV       R7,#0xa
   \   00014D   02....       LJMP      ?BANKED_LEAVE_XDATA
    372          
    373          /*********************************************************************
    374           * @fn      touchLink_PopGrpIDRange
    375           *
    376           * @brief   Pop the requested number of group IDs out of the free group IDs range.
    377           *
    378           * input parameters
    379           *
    380           * @param   numGrpIDs - number of group IDs needed
    381           *
    382           * output parameters
    383           *
    384           * @param   pGrpIdBegin - new group id range begin, or 0 if unavaialable
    385           * @param   pGrpIdEnd - new group id range end, , or 0 if unavaialable
    386           *
    387           * @return  none
    388           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    389          void touchLink_PopGrpIDRange( uint8 numGrpIDs, uint16 *pGrpIDsBegin, uint16 *pGrpIDsEnd )
   \                     touchLink_PopGrpIDRange:
    390          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    391            if ( ( touchLinkFreeGrpIdBegin != 0 )
    392                 && ( touchLinkFreeGrpIdBegin <= touchLinkFreeGrpIdEnd )
    393                 && ( ( touchLinkFreeGrpIdEnd - touchLinkFreeGrpIdBegin ) >= numGrpIDs ) )
   \   000007   90....       MOV       DPTR,#touchLinkFreeGrpIdBegin
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F8           MOV       R0,A
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F9           MOV       R1,A
   \   00000F   E8           MOV       A,R0
   \   000010   49           ORL       A,R1
   \   000011   607B         JZ        ??touchLink_PopGrpIDRange_0
   \   000013   90....       MOV       DPTR,#touchLinkFreeGrpIdEnd
   \   000016   C082         PUSH      DPL
   \   000018   C083         PUSH      DPH
   \   00001A   90....       MOV       DPTR,#touchLinkFreeGrpIdBegin
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F8           MOV       R0,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F9           MOV       R1,A
   \   000022   D083         POP       DPH
   \   000024   D082         POP       DPL
   \   000026   C3           CLR       C
   \   000027   E0           MOVX      A,@DPTR
   \   000028   98           SUBB      A,R0
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   99           SUBB      A,R1
   \   00002C   4060         JC        ??touchLink_PopGrpIDRange_0
   \   00002E   90....       MOV       DPTR,#touchLinkFreeGrpIdEnd
   \   000031   C082         PUSH      DPL
   \   000033   C083         PUSH      DPH
   \   000035   90....       MOV       DPTR,#touchLinkFreeGrpIdBegin
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F8           MOV       R0,A
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F9           MOV       R1,A
   \   00003D   D083         POP       DPH
   \   00003F   D082         POP       DPL
   \   000041   E0           MOVX      A,@DPTR
   \   000042   C3           CLR       C
   \   000043   98           SUBB      A,R0
   \   000044   F8           MOV       R0,A
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   99           SUBB      A,R1
   \   000048   F9           MOV       R1,A
   \   000049   EE           MOV       A,R6
   \   00004A   F5..         MOV       ?V0,A
   \   00004C   75..00       MOV       ?V1,#0x0
   \   00004F   C3           CLR       C
   \   000050   E8           MOV       A,R0
   \   000051   95..         SUBB      A,?V0
   \   000053   E9           MOV       A,R1
   \   000054   95..         SUBB      A,?V1
   \   000056   4036         JC        ??touchLink_PopGrpIDRange_0
    394            {
    395              *pGrpIDsBegin = touchLinkFreeGrpIdBegin;
   \   000058   90....       MOV       DPTR,#touchLinkFreeGrpIdBegin
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F8           MOV       R0,A
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F9           MOV       R1,A
   \   000060   8A82         MOV       DPL,R2
   \   000062   8B83         MOV       DPH,R3
   \   000064   E8           MOV       A,R0
   \   000065   F0           MOVX      @DPTR,A
   \   000066   A3           INC       DPTR
   \   000067   E9           MOV       A,R1
   \   000068   F0           MOVX      @DPTR,A
    396          
    397              // Update min free group id
    398              touchLinkFreeGrpIdBegin += numGrpIDs;
   \   000069   EE           MOV       A,R6
   \   00006A   F8           MOV       R0,A
   \   00006B   7900         MOV       R1,#0x0
   \   00006D   90....       MOV       DPTR,#touchLinkFreeGrpIdBegin
   \   000070   E0           MOVX      A,@DPTR
   \   000071   28           ADD       A,R0
   \   000072   F0           MOVX      @DPTR,A
   \   000073   A3           INC       DPTR
   \   000074   E0           MOVX      A,@DPTR
   \   000075   39           ADDC      A,R1
   \   000076   F0           MOVX      @DPTR,A
    399          
    400              *pGrpIDsEnd = touchLinkFreeGrpIdBegin - 1;
   \   000077   90....       MOV       DPTR,#touchLinkFreeGrpIdBegin
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   24FF         ADD       A,#-0x1
   \   00007D   F8           MOV       R0,A
   \   00007E   A3           INC       DPTR
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   34FF         ADDC      A,#-0x1
   \   000082   F9           MOV       R1,A
   \   000083   8C82         MOV       DPL,R4
   \   000085   8D83         MOV       DPH,R5
   \   000087   E8           MOV       A,R0
   \   000088   F0           MOVX      @DPTR,A
   \   000089   A3           INC       DPTR
   \   00008A   E9           MOV       A,R1
   \   00008B   F0           MOVX      @DPTR,A
   \   00008C   801D         SJMP      ??touchLink_PopGrpIDRange_1
    401            }
    402            else
    403            {
    404              *pGrpIDsBegin = *pGrpIDsEnd = 0;
   \                     ??touchLink_PopGrpIDRange_0:
   \   00008E   8C82         MOV       DPL,R4
   \   000090   8D83         MOV       DPH,R5
   \   000092   7400         MOV       A,#0x0
   \   000094   F0           MOVX      @DPTR,A
   \   000095   A3           INC       DPTR
   \   000096   7400         MOV       A,#0x0
   \   000098   F0           MOVX      @DPTR,A
   \   000099   8C82         MOV       DPL,R4
   \   00009B   8D83         MOV       DPH,R5
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   F8           MOV       R0,A
   \   00009F   A3           INC       DPTR
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   F9           MOV       R1,A
   \   0000A2   8A82         MOV       DPL,R2
   \   0000A4   8B83         MOV       DPH,R3
   \   0000A6   E8           MOV       A,R0
   \   0000A7   F0           MOVX      @DPTR,A
   \   0000A8   A3           INC       DPTR
   \   0000A9   E9           MOV       A,R1
   \   0000AA   F0           MOVX      @DPTR,A
    405            }
    406          }
   \                     ??touchLink_PopGrpIDRange_1:
   \   0000AB   7F02         MOV       R7,#0x2
   \   0000AD   02....       LJMP      ?BANKED_LEAVE_XDATA
    407          
    408          /*********************************************************************
    409           * @fn      touchLink_PopNwkAddress
    410           *
    411           * @brief   Pop an avaialble short address out of the free network addresses range.
    412           *
    413           * @param   none
    414           *
    415           * @return  free address if available. 0, otherwise.
    416           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    417          uint16 touchLink_PopNwkAddress( void )
   \                     touchLink_PopNwkAddress:
    418          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    419            if ( ( touchLinkFreeNwkAddrBegin == 0 ) || ( touchLinkFreeNwkAddrBegin > touchLinkFreeNwkAddrEnd ) )
   \   000004   90....       MOV       DPTR,#touchLinkFreeNwkAddrBegin
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F9           MOV       R1,A
   \   00000C   E8           MOV       A,R0
   \   00000D   49           ORL       A,R1
   \   00000E   601B         JZ        ??touchLink_PopNwkAddress_0
   \   000010   90....       MOV       DPTR,#touchLinkFreeNwkAddrEnd
   \   000013   C082         PUSH      DPL
   \   000015   C083         PUSH      DPH
   \   000017   90....       MOV       DPTR,#touchLinkFreeNwkAddrBegin
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F8           MOV       R0,A
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F9           MOV       R1,A
   \   00001F   D083         POP       DPH
   \   000021   D082         POP       DPL
   \   000023   C3           CLR       C
   \   000024   E0           MOVX      A,@DPTR
   \   000025   98           SUBB      A,R0
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   99           SUBB      A,R1
   \   000029   5006         JNC       ??touchLink_PopNwkAddress_1
    420            {
    421              return ( 0 );
   \                     ??touchLink_PopNwkAddress_0:
   \   00002B   7A00         MOV       R2,#0x0
   \   00002D   7B00         MOV       R3,#0x0
   \   00002F   8017         SJMP      ??touchLink_PopNwkAddress_2
    422            }
    423          
    424            return ( touchLinkFreeNwkAddrBegin++ );
   \                     ??touchLink_PopNwkAddress_1:
   \   000031   90....       MOV       DPTR,#touchLinkFreeNwkAddrBegin
   \   000034   E0           MOVX      A,@DPTR
   \   000035   FA           MOV       R2,A
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   FB           MOV       R3,A
   \   000039   EA           MOV       A,R2
   \   00003A   2401         ADD       A,#0x1
   \   00003C   F8           MOV       R0,A
   \   00003D   E4           CLR       A
   \   00003E   3B           ADDC      A,R3
   \   00003F   F9           MOV       R1,A
   \   000040   90....       MOV       DPTR,#touchLinkFreeNwkAddrBegin
   \   000043   E8           MOV       A,R0
   \   000044   F0           MOVX      @DPTR,A
   \   000045   A3           INC       DPTR
   \   000046   E9           MOV       A,R1
   \   000047   F0           MOVX      @DPTR,A
   \                     ??touchLink_PopNwkAddress_2:
   \   000048   D083         POP       DPH
   \   00004A   D082         POP       DPL
   \   00004C   02....       LJMP      ?BRET
    425          }
    426          
    427          /*********************************************************************
    428           * @fn      touchLink_GetNumSubDevices
    429           *
    430           * @brief   Get the total number of sub-devices (endpoints) registered.
    431           *
    432           * @param   startIndex - starting index
    433           *
    434           * @return  number of sub-devices
    435           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    436          uint8 touchLink_GetNumSubDevices( uint8 startIndex )
   \                     touchLink_GetNumSubDevices:
    437          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   FD           MOV       R5,A
    438            uint8 numEPs = 0;
   \   000006   7900         MOV       R1,#0x0
    439          
    440            for ( uint8 i = startIndex; i < TOUCHLINK_NUM_DEVICE_INFO_ENTRIES; i++ )
   \   000008   ED           MOV       A,R5
   \   000009   FC           MOV       R4,A
   \                     ??touchLink_GetNumSubDevices_0:
   \   00000A   EC           MOV       A,R4
   \   00000B   C3           CLR       C
   \   00000C   9405         SUBB      A,#0x5
   \   00000E   5030         JNC       ??touchLink_GetNumSubDevices_1
    441            {
    442              if ( touchLinkSubDevicesTbl[i] != NULL )
   \   000010   EC           MOV       A,R4
   \   000011   FA           MOV       R2,A
   \   000012   7B00         MOV       R3,#0x0
   \   000014   EA           MOV       A,R2
   \   000015   75F002       MOV       B,#0x2
   \   000018   A4           MUL       AB
   \   000019   CA           XCH       A,R2
   \   00001A   A8F0         MOV       R0,B
   \   00001C   75F000       MOV       B,#0x0
   \   00001F   A4           MUL       AB
   \   000020   28           ADD       A,R0
   \   000021   F8           MOV       R0,A
   \   000022   75F002       MOV       B,#0x2
   \   000025   EB           MOV       A,R3
   \   000026   A4           MUL       AB
   \   000027   28           ADD       A,R0
   \   000028   FB           MOV       R3,A
   \   000029   74..         MOV       A,#touchLinkSubDevicesTbl & 0xff
   \   00002B   2A           ADD       A,R2
   \   00002C   F582         MOV       DPL,A
   \   00002E   74..         MOV       A,#(touchLinkSubDevicesTbl >> 8) & 0xff
   \   000030   3B           ADDC      A,R3
   \   000031   F583         MOV       DPH,A
   \   000033   E0           MOVX      A,@DPTR
   \   000034   FA           MOV       R2,A
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   FB           MOV       R3,A
   \   000038   EA           MOV       A,R2
   \   000039   4B           ORL       A,R3
   \   00003A   6001         JZ        ??touchLink_GetNumSubDevices_2
    443              numEPs++;
   \   00003C   09           INC       R1
    444            }
   \                     ??touchLink_GetNumSubDevices_2:
   \   00003D   0C           INC       R4
   \   00003E   80CA         SJMP      ??touchLink_GetNumSubDevices_0
    445          
    446            return ( numEPs );
   \                     ??touchLink_GetNumSubDevices_1:
   \   000040   D083         POP       DPH
   \   000042   D082         POP       DPL
   \   000044   02....       LJMP      ?BRET
    447          }
    448          
    449          /*********************************************************************
    450           * @fn      touchLink_GetNumGrpIDs
    451           *
    452           * @brief   Get the total number of group IDs required by this device.
    453           *
    454           * @param   none
    455           *
    456           * @return  number of group IDs
    457           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    458          uint8 touchLink_GetNumGrpIDs( void )
   \                     touchLink_GetNumGrpIDs:
    459          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    460            uint8 numGrpIDs = 0;
   \   000004   7900         MOV       R1,#0x0
    461          
    462            for ( uint8 i = 0; i < TOUCHLINK_NUM_DEVICE_INFO_ENTRIES; i++ )
   \   000006   7800         MOV       R0,#0x0
   \                     ??touchLink_GetNumGrpIDs_0:
   \   000008   E8           MOV       A,R0
   \   000009   C3           CLR       C
   \   00000A   9405         SUBB      A,#0x5
   \   00000C   5063         JNC       ??touchLink_GetNumGrpIDs_1
    463            {
    464              if ( touchLinkSubDevicesTbl[i] != NULL )
   \   00000E   E8           MOV       A,R0
   \   00000F   FA           MOV       R2,A
   \   000010   7B00         MOV       R3,#0x0
   \   000012   EA           MOV       A,R2
   \   000013   75F002       MOV       B,#0x2
   \   000016   A4           MUL       AB
   \   000017   CA           XCH       A,R2
   \   000018   ACF0         MOV       R4,B
   \   00001A   75F000       MOV       B,#0x0
   \   00001D   A4           MUL       AB
   \   00001E   2C           ADD       A,R4
   \   00001F   FC           MOV       R4,A
   \   000020   75F002       MOV       B,#0x2
   \   000023   EB           MOV       A,R3
   \   000024   A4           MUL       AB
   \   000025   2C           ADD       A,R4
   \   000026   FB           MOV       R3,A
   \   000027   74..         MOV       A,#touchLinkSubDevicesTbl & 0xff
   \   000029   2A           ADD       A,R2
   \   00002A   F582         MOV       DPL,A
   \   00002C   74..         MOV       A,#(touchLinkSubDevicesTbl >> 8) & 0xff
   \   00002E   3B           ADDC      A,R3
   \   00002F   F583         MOV       DPH,A
   \   000031   E0           MOVX      A,@DPTR
   \   000032   FA           MOV       R2,A
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   FB           MOV       R3,A
   \   000036   EA           MOV       A,R2
   \   000037   4B           ORL       A,R3
   \   000038   6034         JZ        ??touchLink_GetNumGrpIDs_2
    465              {
    466                numGrpIDs += touchLinkSubDevicesTbl[i]->grpIdCnt;
   \   00003A   E8           MOV       A,R0
   \   00003B   FA           MOV       R2,A
   \   00003C   7B00         MOV       R3,#0x0
   \   00003E   EA           MOV       A,R2
   \   00003F   75F002       MOV       B,#0x2
   \   000042   A4           MUL       AB
   \   000043   CA           XCH       A,R2
   \   000044   ACF0         MOV       R4,B
   \   000046   75F000       MOV       B,#0x0
   \   000049   A4           MUL       AB
   \   00004A   2C           ADD       A,R4
   \   00004B   FC           MOV       R4,A
   \   00004C   75F002       MOV       B,#0x2
   \   00004F   EB           MOV       A,R3
   \   000050   A4           MUL       AB
   \   000051   2C           ADD       A,R4
   \   000052   FB           MOV       R3,A
   \   000053   74..         MOV       A,#touchLinkSubDevicesTbl & 0xff
   \   000055   2A           ADD       A,R2
   \   000056   F582         MOV       DPL,A
   \   000058   74..         MOV       A,#(touchLinkSubDevicesTbl >> 8) & 0xff
   \   00005A   3B           ADDC      A,R3
   \   00005B   F583         MOV       DPH,A
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   FA           MOV       R2,A
   \   00005F   A3           INC       DPTR
   \   000060   E0           MOVX      A,@DPTR
   \   000061   CA           XCH       A,R2
   \   000062   2406         ADD       A,#0x6
   \   000064   F582         MOV       DPL,A
   \   000066   CA           XCH       A,R2
   \   000067   3400         ADDC      A,#0x0
   \   000069   F583         MOV       DPH,A
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   29           ADD       A,R1
   \   00006D   F9           MOV       R1,A
    467              }
    468            }
   \                     ??touchLink_GetNumGrpIDs_2:
   \   00006E   08           INC       R0
   \   00006F   8097         SJMP      ??touchLink_GetNumGrpIDs_0
    469          
    470            return ( numGrpIDs );
   \                     ??touchLink_GetNumGrpIDs_1:
   \   000071   D083         POP       DPH
   \   000073   D082         POP       DPL
   \   000075   02....       LJMP      ?BRET
    471          }
    472          
    473          /*********************************************************************
    474           * @fn      touchLink_GetSubDeviceInfo
    475           *
    476           * @brief   Get the sub-device information.
    477           *
    478           * input parameter
    479           *
    480           * @param   index - index of sub-device
    481           *
    482           * output parameter
    483           *
    484           * @param   pInfo - sub-device info (to be returned)
    485           *
    486           * @return  none
    487           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    488          void touchLink_GetSubDeviceInfo( uint8 index, bdbTLDeviceInfo_t *pInfo )
   \                     touchLink_GetSubDeviceInfo:
    489          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    490            if ( pInfo == NULL )
   \   00000B   EE           MOV       A,R6
   \   00000C   4F           ORL       A,R7
   \   00000D   7003         JNZ       $+5
   \   00000F   02....       LJMP      ??touchLink_GetSubDeviceInfo_0 & 0xFFFF
    491            {
    492              return;
    493            }
    494            if ( ( index < TOUCHLINK_NUM_DEVICE_INFO_ENTRIES ) &&
    495                 ( touchLinkSubDevicesTbl[index] != NULL ) )
   \   000012   E5..         MOV       A,?V0
   \   000014   C3           CLR       C
   \   000015   9405         SUBB      A,#0x5
   \   000017   4003         JC        $+5
   \   000019   02....       LJMP      ??touchLink_GetSubDeviceInfo_1 & 0xFFFF
   \   00001C   E5..         MOV       A,?V0
   \   00001E   F8           MOV       R0,A
   \   00001F   7900         MOV       R1,#0x0
   \   000021   E8           MOV       A,R0
   \   000022   75F002       MOV       B,#0x2
   \   000025   A4           MUL       AB
   \   000026   C8           XCH       A,R0
   \   000027   AAF0         MOV       R2,B
   \   000029   75F000       MOV       B,#0x0
   \   00002C   A4           MUL       AB
   \   00002D   2A           ADD       A,R2
   \   00002E   FA           MOV       R2,A
   \   00002F   75F002       MOV       B,#0x2
   \   000032   E9           MOV       A,R1
   \   000033   A4           MUL       AB
   \   000034   2A           ADD       A,R2
   \   000035   F9           MOV       R1,A
   \   000036   74..         MOV       A,#touchLinkSubDevicesTbl & 0xff
   \   000038   28           ADD       A,R0
   \   000039   F582         MOV       DPL,A
   \   00003B   74..         MOV       A,#(touchLinkSubDevicesTbl >> 8) & 0xff
   \   00003D   39           ADDC      A,R1
   \   00003E   F583         MOV       DPH,A
   \   000040   E0           MOVX      A,@DPTR
   \   000041   F8           MOV       R0,A
   \   000042   A3           INC       DPTR
   \   000043   E0           MOVX      A,@DPTR
   \   000044   F9           MOV       R1,A
   \   000045   E8           MOV       A,R0
   \   000046   49           ORL       A,R1
   \   000047   6074         JZ        ??touchLink_GetSubDeviceInfo_1
    496            {
    497              endPointDesc_t *epDesc = afFindEndPointDesc( touchLinkSubDevicesTbl[index]->endpoint );
   \   000049                ; Setup parameters for call to function afFindEndPointDesc
   \   000049   E5..         MOV       A,?V0
   \   00004B   F8           MOV       R0,A
   \   00004C   7900         MOV       R1,#0x0
   \   00004E   E8           MOV       A,R0
   \   00004F   75F002       MOV       B,#0x2
   \   000052   A4           MUL       AB
   \   000053   C8           XCH       A,R0
   \   000054   AAF0         MOV       R2,B
   \   000056   75F000       MOV       B,#0x0
   \   000059   A4           MUL       AB
   \   00005A   2A           ADD       A,R2
   \   00005B   FA           MOV       R2,A
   \   00005C   75F002       MOV       B,#0x2
   \   00005F   E9           MOV       A,R1
   \   000060   A4           MUL       AB
   \   000061   2A           ADD       A,R2
   \   000062   F9           MOV       R1,A
   \   000063   74..         MOV       A,#touchLinkSubDevicesTbl & 0xff
   \   000065   28           ADD       A,R0
   \   000066   F582         MOV       DPL,A
   \   000068   74..         MOV       A,#(touchLinkSubDevicesTbl >> 8) & 0xff
   \   00006A   39           ADDC      A,R1
   \   00006B   F583         MOV       DPH,A
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   F8           MOV       R0,A
   \   00006F   A3           INC       DPTR
   \   000070   E0           MOVX      A,@DPTR
   \   000071   F583         MOV       DPH,A
   \   000073   8882         MOV       DPL,R0
   \   000075   E0           MOVX      A,@DPTR
   \   000076   F9           MOV       R1,A
   \   000077   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00007A   8A..         MOV       ?V2,R2
   \   00007C   8B..         MOV       ?V3,R3
   \   00007E   AA..         MOV       R2,?V2
   \   000080   AB..         MOV       R3,?V3
    498              if ( epDesc != NULL )
   \   000082   EA           MOV       A,R2
   \   000083   4B           ORL       A,R3
   \   000084   6044         JZ        ??touchLink_GetSubDeviceInfo_0
    499              {
    500                // Copy sub-device info
    501                *pInfo = *(touchLinkSubDevicesTbl[index]);
   \   000086   E5..         MOV       A,?V0
   \   000088   F8           MOV       R0,A
   \   000089   7900         MOV       R1,#0x0
   \   00008B   E8           MOV       A,R0
   \   00008C   75F002       MOV       B,#0x2
   \   00008F   A4           MUL       AB
   \   000090   C8           XCH       A,R0
   \   000091   ACF0         MOV       R4,B
   \   000093   75F000       MOV       B,#0x0
   \   000096   A4           MUL       AB
   \   000097   2C           ADD       A,R4
   \   000098   FC           MOV       R4,A
   \   000099   75F002       MOV       B,#0x2
   \   00009C   E9           MOV       A,R1
   \   00009D   A4           MUL       AB
   \   00009E   2C           ADD       A,R4
   \   00009F   F9           MOV       R1,A
   \   0000A0   74..         MOV       A,#touchLinkSubDevicesTbl & 0xff
   \   0000A2   28           ADD       A,R0
   \   0000A3   F582         MOV       DPL,A
   \   0000A5   74..         MOV       A,#(touchLinkSubDevicesTbl >> 8) & 0xff
   \   0000A7   39           ADDC      A,R1
   \   0000A8   F583         MOV       DPH,A
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   F8           MOV       R0,A
   \   0000AC   A3           INC       DPTR
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   F583         MOV       DPH,A
   \   0000B0   8882         MOV       DPL,R0
   \   0000B2   EE           MOV       A,R6
   \   0000B3   FC           MOV       R4,A
   \   0000B4   EF           MOV       A,R7
   \   0000B5   FD           MOV       R5,A
   \   0000B6   7407         MOV       A,#0x7
   \   0000B8   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   0000BB   800D         SJMP      ??touchLink_GetSubDeviceInfo_0
    502              }
    503            }
    504            else
    505            {
    506              osal_memset( pInfo, 0, sizeof( bdbTLDeviceInfo_t ) );
   \                     ??touchLink_GetSubDeviceInfo_1:
   \   0000BD                ; Setup parameters for call to function osal_memset
   \   0000BD   7C07         MOV       R4,#0x7
   \   0000BF   7D00         MOV       R5,#0x0
   \   0000C1   7900         MOV       R1,#0x0
   \   0000C3   EE           MOV       A,R6
   \   0000C4   FA           MOV       R2,A
   \   0000C5   EF           MOV       A,R7
   \   0000C6   FB           MOV       R3,A
   \   0000C7   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    507            }
    508          }
   \                     ??touchLink_GetSubDeviceInfo_0:
   \   0000CA   7F04         MOV       R7,#0x4
   \   0000CC   02....       LJMP      ?BANKED_LEAVE_XDATA
    509          
    510          
    511          /*********************************************************************
    512           * @fn      touchLink_EncryptNwkKey
    513           *
    514           * @brief   Encrypt the current network key to be sent to a Target.
    515           *          In case of Factory New device generate new key.
    516           *
    517           * output parameter
    518           *
    519           * @param   pNwkKey - pointer to encrypted network key
    520           *
    521           * input parameters
    522           *
    523           * @param   keyIndex - key index
    524           * @param   transID - transaction id
    525           * @param   responseID - response id
    526           *
    527           * @return  none
    528           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    529          void touchLink_EncryptNwkKey( uint8 *pNwkKey, uint8 keyIndex, uint32 transID, uint32 responseID )
   \                     touchLink_EncryptNwkKey:
    530          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 69
   \   000005   74BB         MOV       A,#-0x45
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V12,R2
   \   00000C   8B..         MOV       ?V13,R3
   \   00000E   E9           MOV       A,R1
   \   00000F   FE           MOV       R6,A
   \   000010   745B         MOV       A,#0x5b
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   78..         MOV       R0,#?V4
   \   000017   12....       LCALL     ?L_MOV_X
   \   00001A   745F         MOV       A,#0x5f
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   78..         MOV       R0,#?V8
   \   000021   12....       LCALL     ?L_MOV_X
    531            uint8 aesKeyKey[SEC_KEY_LEN] = TOUCHLINK_DEFAULT_AES_KEY;
   \   000024   90....       MOV       DPTR,#`?<Constant {80, 104, 76, 105, 234, 156, 209, 5`
   \   000027   7410         MOV       A,#0x10
   \   000029   12....       LCALL     ?XSTACK_DISP102_8
   \   00002C   7410         MOV       A,#0x10
   \   00002E   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    532            uint8 masterKey[SEC_KEY_LEN] = TOUCHLINK_ENC_KEY;
   \   000031   90....       MOV       DPTR,#`?<Constant {192, 193, 194, 195, 196, 197, 198,`
   \   000034   7435         MOV       A,#0x35
   \   000036   12....       LCALL     ?XSTACK_DISP102_8
   \   000039   7410         MOV       A,#0x10
   \   00003B   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    533            uint8 nwkKey[SEC_KEY_LEN];
    534          
    535            if ( bdbAttributes.bdbNodeIsOnANetwork == FALSE )
   \   00003E   90....       MOV       DPTR,#bdbAttributes + 14
   \   000041   E0           MOVX      A,@DPTR
   \   000042   700B         JNZ       ??touchLink_EncryptNwkKey_0
    536            {
    537              touchLink_GenerateRandNum( nwkKey, SEC_KEY_LEN );
   \   000044                ; Setup parameters for call to function touchLink_GenerateRandNum
   \   000044   7910         MOV       R1,#0x10
   \   000046   AA..         MOV       R2,?XSP + 0
   \   000048   AB..         MOV       R3,?XSP + 1
   \   00004A   12....       LCALL     `??touchLink_GenerateRandNum::?relay`; Banked call to: touchLink_GenerateRandNum
   \   00004D   802F         SJMP      ??touchLink_EncryptNwkKey_1
    538            }
    539            else
    540            {
    541              nwkActiveKeyItems keyItems;
    542              SSP_ReadNwkActiveKey( &keyItems );
   \                     ??touchLink_EncryptNwkKey_0:
   \   00004F                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00004F   7420         MOV       A,#0x20
   \   000051   12....       LCALL     ?XSTACK_DISP101_8
   \   000054   12....       LCALL     `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
    543              osal_memcpy( nwkKey, keyItems.active.key , SEC_KEY_LEN);
   \   000057                ; Setup parameters for call to function osal_memcpy
   \   000057   7421         MOV       A,#0x21
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   A982         MOV       R1,DPL
   \   00005E   AA83         MOV       R2,DPH
   \   000060   7B00         MOV       R3,#0x0
   \   000062   89..         MOV       ?V0,R1
   \   000064   8A..         MOV       ?V1,R2
   \   000066   8B..         MOV       ?V2,R3
   \   000068   78..         MOV       R0,#?V0
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00006D   7C10         MOV       R4,#0x10
   \   00006F   7D00         MOV       R5,#0x0
   \   000071   7403         MOV       A,#0x3
   \   000073   12....       LCALL     ?XSTACK_DISP101_8
   \   000076   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000079   7403         MOV       A,#0x3
   \   00007B   12....       LCALL     ?DEALLOC_XSTACK8
    544            }
    545          
    546            // Build the AES key
    547            touchLink_BuildAesKey( aesKeyKey, transID, responseID, keyIndex );
   \                     ??touchLink_EncryptNwkKey_1:
   \   00007E                ; Setup parameters for call to function touchLink_BuildAesKey
   \   00007E   78..         MOV       R0,#?V8
   \   000080   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000083   78..         MOV       R0,#?V4
   \   000085   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000088   EE           MOV       A,R6
   \   000089   F9           MOV       R1,A
   \   00008A   7418         MOV       A,#0x18
   \   00008C   12....       LCALL     ?XSTACK_DISP101_8
   \   00008F   12....       LCALL     `??touchLink_BuildAesKey::?relay`; Banked call to: touchLink_BuildAesKey
   \   000092   7408         MOV       A,#0x8
   \   000094   12....       LCALL     ?DEALLOC_XSTACK8
    548          
    549            if ( ( keyIndex == TOUCHLINK_KEY_INDEX_MASTER ) || ( keyIndex == TOUCHLINK_KEY_INDEX_CERT ) )
   \   000097   7404         MOV       A,#0x4
   \   000099   6E           XRL       A,R6
   \   00009A   6005         JZ        ??touchLink_EncryptNwkKey_2
   \   00009C   740F         MOV       A,#0xf
   \   00009E   6E           XRL       A,R6
   \   00009F   700D         JNZ       ??touchLink_EncryptNwkKey_3
    550            {
    551              // Encypt with the master key
    552              sspAesEncrypt( masterKey, aesKeyKey );
   \                     ??touchLink_EncryptNwkKey_2:
   \   0000A1                ; Setup parameters for call to function sspAesEncrypt
   \   0000A1   7410         MOV       A,#0x10
   \   0000A3   12....       LCALL     ?XSTACK_DISP102_8
   \   0000A6   7435         MOV       A,#0x35
   \   0000A8   12....       LCALL     ?XSTACK_DISP101_8
   \   0000AB   12....       LCALL     `??sspAesEncrypt::?relay`; Banked call to: sspAesEncrypt
    553            }
    554            // Encrypt the network key with the AES key
    555            sspAesEncrypt( aesKeyKey, nwkKey );
   \                     ??touchLink_EncryptNwkKey_3:
   \   0000AE                ; Setup parameters for call to function sspAesEncrypt
   \   0000AE   AC..         MOV       R4,?XSP + 0
   \   0000B0   AD..         MOV       R5,?XSP + 1
   \   0000B2   7410         MOV       A,#0x10
   \   0000B4   12....       LCALL     ?XSTACK_DISP101_8
   \   0000B7   12....       LCALL     `??sspAesEncrypt::?relay`; Banked call to: sspAesEncrypt
    556          
    557            // Copy in the encrypted network key
    558            osal_memcpy( pNwkKey, nwkKey, SEC_KEY_LEN );
   \   0000BA                ; Setup parameters for call to function osal_memcpy
   \   0000BA   A8..         MOV       R0,?XSP + 0
   \   0000BC   A9..         MOV       R1,?XSP + 1
   \   0000BE   88..         MOV       ?V0,R0
   \   0000C0   89..         MOV       ?V1,R1
   \   0000C2   75..00       MOV       ?V2,#0x0
   \   0000C5   78..         MOV       R0,#?V0
   \   0000C7   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000CA   7C10         MOV       R4,#0x10
   \   0000CC   7D00         MOV       R5,#0x0
   \   0000CE   AA..         MOV       R2,?V12
   \   0000D0   AB..         MOV       R3,?V13
   \   0000D2   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000D5   7403         MOV       A,#0x3
   \   0000D7   12....       LCALL     ?DEALLOC_XSTACK8
    559          }
   \   0000DA   7445         MOV       A,#0x45
   \   0000DC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DF   7F0E         MOV       R7,#0xe
   \   0000E1   02....       LJMP      ?BANKED_LEAVE_XDATA
    560          
    561          /*********************************************************************
    562           * @fn      touchLink_DecryptNwkKey
    563           *
    564           * @brief   Decrypt the received network key and update.
    565           *
    566           * @param   pNwkKey - pointer to the encrypted network key
    567           * @param   keyIndex - key index
    568           * @param   transID - transaction id
    569           * @param   responseID - response id
    570           *
    571           * @return  none
    572           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    573          void touchLink_DecryptNwkKey( uint8 *pNwkKey, uint8 keyIndex, uint32 transID, uint32 responseID )
   \                     touchLink_DecryptNwkKey:
    574          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 48
   \   000005   74D0         MOV       A,#-0x30
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   89..         MOV       ?V11,R1
   \   000010   7444         MOV       A,#0x44
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   78..         MOV       R0,#?V0
   \   000017   12....       LCALL     ?L_MOV_X
   \   00001A   7448         MOV       A,#0x48
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   78..         MOV       R0,#?V4
   \   000021   12....       LCALL     ?L_MOV_X
    575            uint8 aesKeyKey[SEC_KEY_LEN] = TOUCHLINK_DEFAULT_AES_KEY;
   \   000024   90....       MOV       DPTR,#`?<Constant {80, 104, 76, 105, 234, 156, 209, 5_1`
   \   000027   7410         MOV       A,#0x10
   \   000029   12....       LCALL     ?XSTACK_DISP102_8
   \   00002C   7410         MOV       A,#0x10
   \   00002E   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    576          
    577            uint8 nwkKey[SEC_KEY_LEN];
    578          
    579            uint8 masterKey[SEC_KEY_LEN] = TOUCHLINK_ENC_KEY;
   \   000031   90....       MOV       DPTR,#`?<Constant {192, 193, 194, 195, 196, 197, 198,_1`
   \   000034   7420         MOV       A,#0x20
   \   000036   12....       LCALL     ?XSTACK_DISP102_8
   \   000039   7410         MOV       A,#0x10
   \   00003B   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    580          
    581            // Copy in the encrypted network key
    582            osal_memcpy( nwkKey, pNwkKey, SEC_KEY_LEN );
   \   00003E                ; Setup parameters for call to function osal_memcpy
   \   00003E   8E..         MOV       ?V8,R6
   \   000040   8F..         MOV       ?V9,R7
   \   000042   75..00       MOV       ?V10,#0x0
   \   000045   78..         MOV       R0,#?V8
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00004A   7C10         MOV       R4,#0x10
   \   00004C   7D00         MOV       R5,#0x0
   \   00004E   7403         MOV       A,#0x3
   \   000050   12....       LCALL     ?XSTACK_DISP101_8
   \   000053   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000056   7403         MOV       A,#0x3
   \   000058   12....       LCALL     ?DEALLOC_XSTACK8
    583          
    584            touchLink_BuildAesKey( aesKeyKey, transID, responseID, keyIndex );
   \   00005B                ; Setup parameters for call to function touchLink_BuildAesKey
   \   00005B   78..         MOV       R0,#?V4
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000060   78..         MOV       R0,#?V0
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000065   A9..         MOV       R1,?V11
   \   000067   7418         MOV       A,#0x18
   \   000069   12....       LCALL     ?XSTACK_DISP101_8
   \   00006C   12....       LCALL     `??touchLink_BuildAesKey::?relay`; Banked call to: touchLink_BuildAesKey
   \   00006F   7408         MOV       A,#0x8
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
    585          
    586            if ( ( keyIndex == TOUCHLINK_KEY_INDEX_MASTER ) || ( keyIndex == TOUCHLINK_KEY_INDEX_CERT ) )
   \   000074   7404         MOV       A,#0x4
   \   000076   65..         XRL       A,?V11
   \   000078   6006         JZ        ??touchLink_DecryptNwkKey_0
   \   00007A   740F         MOV       A,#0xf
   \   00007C   65..         XRL       A,?V11
   \   00007E   700D         JNZ       ??touchLink_DecryptNwkKey_1
    587            {
    588              //encypt with the master key
    589              sspAesEncrypt( masterKey, aesKeyKey );
   \                     ??touchLink_DecryptNwkKey_0:
   \   000080                ; Setup parameters for call to function sspAesEncrypt
   \   000080   7410         MOV       A,#0x10
   \   000082   12....       LCALL     ?XSTACK_DISP102_8
   \   000085   7420         MOV       A,#0x20
   \   000087   12....       LCALL     ?XSTACK_DISP101_8
   \   00008A   12....       LCALL     `??sspAesEncrypt::?relay`; Banked call to: sspAesEncrypt
    590            }
    591            // Decrypt the network key with the AES key
    592            sspAesDecrypt( aesKeyKey, nwkKey );
   \                     ??touchLink_DecryptNwkKey_1:
   \   00008D                ; Setup parameters for call to function sspAesDecrypt
   \   00008D   AC..         MOV       R4,?XSP + 0
   \   00008F   AD..         MOV       R5,?XSP + 1
   \   000091   7410         MOV       A,#0x10
   \   000093   12....       LCALL     ?XSTACK_DISP101_8
   \   000096   12....       LCALL     `??sspAesDecrypt::?relay`; Banked call to: sspAesDecrypt
    593          
    594            touchLink_UpdateNwkKey( nwkKey, keyIndex );
   \   000099                ; Setup parameters for call to function touchLink_UpdateNwkKey
   \   000099   A9..         MOV       R1,?V11
   \   00009B   AA..         MOV       R2,?XSP + 0
   \   00009D   AB..         MOV       R3,?XSP + 1
   \   00009F   12....       LCALL     `??touchLink_UpdateNwkKey::?relay`; Banked call to: touchLink_UpdateNwkKey
    595          }
   \   0000A2   7430         MOV       A,#0x30
   \   0000A4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A7   7F0C         MOV       R7,#0xc
   \   0000A9   02....       LJMP      ?BANKED_LEAVE_XDATA
    596          
    597          /*********************************************************************
    598           * @fn      touchLink_BuildAesKey
    599           *
    600           * @brief   Build an AES key using Transaction ID and Response ID.
    601           *
    602           * @param   pAesKey - pointer to AES to be built
    603           * @param   transID - transaction id
    604           * @param   responseID - response id
    605           *
    606           * @return  none
    607           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    608          static void touchLink_BuildAesKey( uint8 *pAesKey, uint32 transID, uint32 responseID, uint8 keyIndex )
   \                     touchLink_BuildAesKey:
    609          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   7414         MOV       A,#0x14
   \   000007   12....       LCALL     ?XSTACK_DISP0_8
   \   00000A   78..         MOV       R0,#?V4
   \   00000C   12....       LCALL     ?L_MOV_X
   \   00000F   7418         MOV       A,#0x18
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   78..         MOV       R0,#?V0
   \   000016   12....       LCALL     ?L_MOV_X
    610          
    611            if ( ( keyIndex == TOUCHLINK_KEY_INDEX_MASTER ) || ( keyIndex == TOUCHLINK_KEY_INDEX_CERT ) )
   \   000019   7404         MOV       A,#0x4
   \   00001B   69           XRL       A,R1
   \   00001C   6008         JZ        ??touchLink_BuildAesKey_0
   \   00001E   740F         MOV       A,#0xf
   \   000020   69           XRL       A,R1
   \   000021   6003         JZ        $+5
   \   000023   02....       LJMP      ??touchLink_BuildAesKey_1 & 0xFFFF
    612            {
    613              // Copy transaction identifier to 1st byte
    614              pAesKey[0] = BREAK_UINT32( transID, 3 );
   \                     ??touchLink_BuildAesKey_0:
   \   000026   85....       MOV       ?V8,?V4
   \   000029   85....       MOV       ?V9,?V5
   \   00002C   85....       MOV       ?V10,?V6
   \   00002F   85....       MOV       ?V11,?V7
   \   000032   7418         MOV       A,#0x18
   \   000034   78..         MOV       R0,#?V8
   \   000036   12....       LCALL     ?UL_SHR
   \   000039   E5..         MOV       A,?V8
   \   00003B   C0E0         PUSH      A
   \   00003D   8A82         MOV       DPL,R2
   \   00003F   8B83         MOV       DPH,R3
   \   000041   D0E0         POP       A
   \   000043   F0           MOVX      @DPTR,A
    615              pAesKey[1] = BREAK_UINT32( transID, 2 );
   \   000044   85....       MOV       ?V8,?V4
   \   000047   85....       MOV       ?V9,?V5
   \   00004A   85....       MOV       ?V10,?V6
   \   00004D   85....       MOV       ?V11,?V7
   \   000050   7410         MOV       A,#0x10
   \   000052   78..         MOV       R0,#?V8
   \   000054   12....       LCALL     ?UL_SHR
   \   000057   E5..         MOV       A,?V8
   \   000059   C0E0         PUSH      A
   \   00005B   8A82         MOV       DPL,R2
   \   00005D   8B83         MOV       DPH,R3
   \   00005F   A3           INC       DPTR
   \   000060   D0E0         POP       A
   \   000062   F0           MOVX      @DPTR,A
    616              pAesKey[2] = BREAK_UINT32( transID, 1 );
   \   000063   AC..         MOV       R4,?V4
   \   000065   AD..         MOV       R5,?V5
   \   000067   E4           CLR       A
   \   000068   CD           XCH       A,R5
   \   000069   FC           MOV       R4,A
   \   00006A   EC           MOV       A,R4
   \   00006B   C0E0         PUSH      A
   \   00006D   8A82         MOV       DPL,R2
   \   00006F   8B83         MOV       DPH,R3
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   D0E0         POP       A
   \   000075   F0           MOVX      @DPTR,A
    617              pAesKey[3] = BREAK_UINT32( transID, 0 );
   \   000076   AC..         MOV       R4,?V4
   \   000078   AD..         MOV       R5,?V5
   \   00007A   EC           MOV       A,R4
   \   00007B   C0E0         PUSH      A
   \   00007D   8A82         MOV       DPL,R2
   \   00007F   8B83         MOV       DPH,R3
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   D0E0         POP       A
   \   000086   F0           MOVX      @DPTR,A
    618          
    619              // Copy response identifier 3rd bute
    620              pAesKey[8] = BREAK_UINT32( responseID, 3 );
   \   000087   85....       MOV       ?V8,?V0
   \   00008A   85....       MOV       ?V9,?V1
   \   00008D   85....       MOV       ?V10,?V2
   \   000090   85....       MOV       ?V11,?V3
   \   000093   7418         MOV       A,#0x18
   \   000095   78..         MOV       R0,#?V8
   \   000097   12....       LCALL     ?UL_SHR
   \   00009A   E5..         MOV       A,?V8
   \   00009C   C0E0         PUSH      A
   \   00009E   8A82         MOV       DPL,R2
   \   0000A0   8B83         MOV       DPH,R3
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   D0E0         POP       A
   \   0000AC   F0           MOVX      @DPTR,A
    621              pAesKey[9] = BREAK_UINT32( responseID, 2 );
   \   0000AD   85....       MOV       ?V8,?V0
   \   0000B0   85....       MOV       ?V9,?V1
   \   0000B3   85....       MOV       ?V10,?V2
   \   0000B6   85....       MOV       ?V11,?V3
   \   0000B9   7410         MOV       A,#0x10
   \   0000BB   78..         MOV       R0,#?V8
   \   0000BD   12....       LCALL     ?UL_SHR
   \   0000C0   E5..         MOV       A,?V8
   \   0000C2   C0E0         PUSH      A
   \   0000C4   8A82         MOV       DPL,R2
   \   0000C6   8B83         MOV       DPH,R3
   \   0000C8   A3           INC       DPTR
   \   0000C9   A3           INC       DPTR
   \   0000CA   A3           INC       DPTR
   \   0000CB   A3           INC       DPTR
   \   0000CC   A3           INC       DPTR
   \   0000CD   A3           INC       DPTR
   \   0000CE   A3           INC       DPTR
   \   0000CF   A3           INC       DPTR
   \   0000D0   A3           INC       DPTR
   \   0000D1   D0E0         POP       A
   \   0000D3   F0           MOVX      @DPTR,A
    622              pAesKey[10] = BREAK_UINT32( responseID, 1 );
   \   0000D4   AC..         MOV       R4,?V0
   \   0000D6   AD..         MOV       R5,?V1
   \   0000D8   E4           CLR       A
   \   0000D9   CD           XCH       A,R5
   \   0000DA   FC           MOV       R4,A
   \   0000DB   EC           MOV       A,R4
   \   0000DC   C0E0         PUSH      A
   \   0000DE   8A82         MOV       DPL,R2
   \   0000E0   8B83         MOV       DPH,R3
   \   0000E2   A3           INC       DPTR
   \   0000E3   A3           INC       DPTR
   \   0000E4   A3           INC       DPTR
   \   0000E5   A3           INC       DPTR
   \   0000E6   A3           INC       DPTR
   \   0000E7   A3           INC       DPTR
   \   0000E8   A3           INC       DPTR
   \   0000E9   A3           INC       DPTR
   \   0000EA   A3           INC       DPTR
   \   0000EB   A3           INC       DPTR
   \   0000EC   D0E0         POP       A
   \   0000EE   F0           MOVX      @DPTR,A
    623              pAesKey[11] = BREAK_UINT32( responseID, 0 );
   \   0000EF   AC..         MOV       R4,?V0
   \   0000F1   AD..         MOV       R5,?V1
   \   0000F3   EC           MOV       A,R4
   \   0000F4   C0E0         PUSH      A
   \   0000F6   EA           MOV       A,R2
   \   0000F7   240B         ADD       A,#0xb
   \   0000F9   F582         MOV       DPL,A
   \   0000FB   E4           CLR       A
   \   0000FC   3B           ADDC      A,R3
   \   0000FD   F583         MOV       DPH,A
   \   0000FF   D0E0         POP       A
   \   000101   F0           MOVX      @DPTR,A
    624            }
    625          
    626            // Copy in the transaction identifier
    627            pAesKey[4] = BREAK_UINT32( transID, 3 );
   \                     ??touchLink_BuildAesKey_1:
   \   000102   85....       MOV       ?V8,?V4
   \   000105   85....       MOV       ?V9,?V5
   \   000108   85....       MOV       ?V10,?V6
   \   00010B   85....       MOV       ?V11,?V7
   \   00010E   7418         MOV       A,#0x18
   \   000110   78..         MOV       R0,#?V8
   \   000112   12....       LCALL     ?UL_SHR
   \   000115   E5..         MOV       A,?V8
   \   000117   C0E0         PUSH      A
   \   000119   8A82         MOV       DPL,R2
   \   00011B   8B83         MOV       DPH,R3
   \   00011D   A3           INC       DPTR
   \   00011E   A3           INC       DPTR
   \   00011F   A3           INC       DPTR
   \   000120   A3           INC       DPTR
   \   000121   D0E0         POP       A
   \   000123   F0           MOVX      @DPTR,A
    628            pAesKey[5] = BREAK_UINT32( transID, 2 );
   \   000124   85....       MOV       ?V8,?V4
   \   000127   85....       MOV       ?V9,?V5
   \   00012A   85....       MOV       ?V10,?V6
   \   00012D   85....       MOV       ?V11,?V7
   \   000130   7410         MOV       A,#0x10
   \   000132   78..         MOV       R0,#?V8
   \   000134   12....       LCALL     ?UL_SHR
   \   000137   E5..         MOV       A,?V8
   \   000139   C0E0         PUSH      A
   \   00013B   8A82         MOV       DPL,R2
   \   00013D   8B83         MOV       DPH,R3
   \   00013F   A3           INC       DPTR
   \   000140   A3           INC       DPTR
   \   000141   A3           INC       DPTR
   \   000142   A3           INC       DPTR
   \   000143   A3           INC       DPTR
   \   000144   D0E0         POP       A
   \   000146   F0           MOVX      @DPTR,A
    629            pAesKey[6] = BREAK_UINT32( transID, 1 );
   \   000147   AC..         MOV       R4,?V4
   \   000149   AD..         MOV       R5,?V5
   \   00014B   E4           CLR       A
   \   00014C   CD           XCH       A,R5
   \   00014D   FC           MOV       R4,A
   \   00014E   EC           MOV       A,R4
   \   00014F   C0E0         PUSH      A
   \   000151   8A82         MOV       DPL,R2
   \   000153   8B83         MOV       DPH,R3
   \   000155   A3           INC       DPTR
   \   000156   A3           INC       DPTR
   \   000157   A3           INC       DPTR
   \   000158   A3           INC       DPTR
   \   000159   A3           INC       DPTR
   \   00015A   A3           INC       DPTR
   \   00015B   D0E0         POP       A
   \   00015D   F0           MOVX      @DPTR,A
    630            pAesKey[7] = BREAK_UINT32( transID, 0 );
   \   00015E   AC..         MOV       R4,?V4
   \   000160   AD..         MOV       R5,?V5
   \   000162   EC           MOV       A,R4
   \   000163   C0E0         PUSH      A
   \   000165   8A82         MOV       DPL,R2
   \   000167   8B83         MOV       DPH,R3
   \   000169   A3           INC       DPTR
   \   00016A   A3           INC       DPTR
   \   00016B   A3           INC       DPTR
   \   00016C   A3           INC       DPTR
   \   00016D   A3           INC       DPTR
   \   00016E   A3           INC       DPTR
   \   00016F   A3           INC       DPTR
   \   000170   D0E0         POP       A
   \   000172   F0           MOVX      @DPTR,A
    631          
    632            // Copy in the response identifier
    633            pAesKey[12] = BREAK_UINT32( responseID, 3 );
   \   000173   85....       MOV       ?V8,?V0
   \   000176   85....       MOV       ?V9,?V1
   \   000179   85....       MOV       ?V10,?V2
   \   00017C   85....       MOV       ?V11,?V3
   \   00017F   7418         MOV       A,#0x18
   \   000181   78..         MOV       R0,#?V8
   \   000183   12....       LCALL     ?UL_SHR
   \   000186   E5..         MOV       A,?V8
   \   000188   C0E0         PUSH      A
   \   00018A   EA           MOV       A,R2
   \   00018B   240C         ADD       A,#0xc
   \   00018D   F582         MOV       DPL,A
   \   00018F   E4           CLR       A
   \   000190   3B           ADDC      A,R3
   \   000191   F583         MOV       DPH,A
   \   000193   D0E0         POP       A
   \   000195   F0           MOVX      @DPTR,A
    634            pAesKey[13] = BREAK_UINT32( responseID, 2 );
   \   000196   85....       MOV       ?V8,?V0
   \   000199   85....       MOV       ?V9,?V1
   \   00019C   85....       MOV       ?V10,?V2
   \   00019F   85....       MOV       ?V11,?V3
   \   0001A2   7410         MOV       A,#0x10
   \   0001A4   78..         MOV       R0,#?V8
   \   0001A6   12....       LCALL     ?UL_SHR
   \   0001A9   E5..         MOV       A,?V8
   \   0001AB   C0E0         PUSH      A
   \   0001AD   EA           MOV       A,R2
   \   0001AE   240D         ADD       A,#0xd
   \   0001B0   F582         MOV       DPL,A
   \   0001B2   E4           CLR       A
   \   0001B3   3B           ADDC      A,R3
   \   0001B4   F583         MOV       DPH,A
   \   0001B6   D0E0         POP       A
   \   0001B8   F0           MOVX      @DPTR,A
    635            pAesKey[14] = BREAK_UINT32( responseID, 1 );
   \   0001B9   AC..         MOV       R4,?V0
   \   0001BB   AD..         MOV       R5,?V1
   \   0001BD   E4           CLR       A
   \   0001BE   CD           XCH       A,R5
   \   0001BF   FC           MOV       R4,A
   \   0001C0   EC           MOV       A,R4
   \   0001C1   C0E0         PUSH      A
   \   0001C3   EA           MOV       A,R2
   \   0001C4   240E         ADD       A,#0xe
   \   0001C6   F582         MOV       DPL,A
   \   0001C8   E4           CLR       A
   \   0001C9   3B           ADDC      A,R3
   \   0001CA   F583         MOV       DPH,A
   \   0001CC   D0E0         POP       A
   \   0001CE   F0           MOVX      @DPTR,A
    636            pAesKey[15] = BREAK_UINT32( responseID, 0 );
   \   0001CF   AC..         MOV       R4,?V0
   \   0001D1   AD..         MOV       R5,?V1
   \   0001D3   EC           MOV       A,R4
   \   0001D4   C0E0         PUSH      A
   \   0001D6   EA           MOV       A,R2
   \   0001D7   240F         ADD       A,#0xf
   \   0001D9   F582         MOV       DPL,A
   \   0001DB   E4           CLR       A
   \   0001DC   3B           ADDC      A,R3
   \   0001DD   F583         MOV       DPH,A
   \   0001DF   D0E0         POP       A
   \   0001E1   F0           MOVX      @DPTR,A
    637          }
   \   0001E2   7F0C         MOV       R7,#0xc
   \   0001E4   02....       LJMP      ?BANKED_LEAVE_XDATA
    638          
    639          /*********************************************************************
    640           * @fn      touchLink_UpdateNwkKey
    641           *
    642           * @brief   Update the network key.
    643           *
    644           * @param   pNwkParams - pointer to new network key
    645           * @param   keyIndex - key index
    646           *
    647           * @return  none
    648           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    649          void touchLink_UpdateNwkKey( uint8 *pNwkKey, uint8 keyIndex )
   \                     touchLink_UpdateNwkKey:
    650          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V0,R1
    651            uint32 nwkFrameCounterTmp;
    652            (void)keyIndex;
    653          
    654            // To prevent Framecounter out of sync issues, store the lastkey
    655            nwkFrameCounterTmp = nwkFrameCounter;  // (Global in SSP).
   \   00000B   90....       MOV       DPTR,#nwkFrameCounter
   \   00000E   78..         MOV       R0,#?V8
   \   000010   12....       LCALL     ?L_MOV_X
   \   000013   85....       MOV       ?V4,?V8
   \   000016   85....       MOV       ?V5,?V9
   \   000019   85....       MOV       ?V6,?V10
   \   00001C   85....       MOV       ?V7,?V11
    656          
    657            // Update the network key
    658            SSP_UpdateNwkKey( pNwkKey, 0 );
   \   00001F                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   00001F   7900         MOV       R1,#0x0
   \   000021   EE           MOV       A,R6
   \   000022   FA           MOV       R2,A
   \   000023   EF           MOV       A,R7
   \   000024   FB           MOV       R3,A
   \   000025   12....       LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
    659          
    660            SSP_SwitchNwkKey( 0 );
   \   000028                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   000028   7900         MOV       R1,#0x0
   \   00002A   12....       LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
    661          
    662            nwkFrameCounter  = nwkFrameCounterTmp; // restore
   \   00002D   90....       MOV       DPTR,#nwkFrameCounter
   \   000030   78..         MOV       R0,#?V4
   \   000032   12....       LCALL     ?L_MOV_TO_X
    663          
    664            // Save off the security
    665            ZDApp_SaveNwkKey();
   \   000035                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000035   12....       LCALL     `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    666          }
   \   000038   7F0C         MOV       R7,#0xc
   \   00003A   02....       LJMP      ?BANKED_LEAVE_XDATA
    667          
    668          /*********************************************************************
    669           * @fn      touchLink_GetNwkKeyBitmask
    670           *
    671           * @brief   Get the supported network key bitmask.
    672           *
    673           * @param   none
    674           *
    675           * @return  network key bitmask
    676           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    677          uint16 touchLink_GetNwkKeyBitmask( void )
   \                     touchLink_GetNwkKeyBitmask:
    678          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    679            return ( (uint16)1 << TOUCHLINK_KEY_INDEX );
   \   000000   7A10         MOV       R2,#0x10
   \   000002   7B00         MOV       R3,#0x0
   \   000004   02....       LJMP      ?BRET
    680          }
    681          
    682          /*********************************************************************
    683           * @fn      touchLink_GenerateRandNum
    684           *
    685           * @brief   Fill buffer with random bytes.
    686           *
    687           * input parameter
    688           *
    689           * @param   numSize - size of buffer in bytes
    690           *
    691           * output parameter
    692           *
    693           * @param   pNum - pointer to buffer to be filled with random values
    694           *
    695           * @return  none
    696           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    697          void touchLink_GenerateRandNum( uint8 *pNum, uint8 numSize )
   \                     touchLink_GenerateRandNum:
    698          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V2,R1
    699            if ( pNum && numSize )
   \   00000B   EE           MOV       A,R6
   \   00000C   4F           ORL       A,R7
   \   00000D   6071         JZ        ??touchLink_GenerateRandNum_0
   \   00000F   E5..         MOV       A,?V2
   \   000011   606D         JZ        ??touchLink_GenerateRandNum_0
    700            {
    701              uint8 lastByte = ( numSize - 1 );
   \   000013   74FF         MOV       A,#-0x1
   \   000015   25..         ADD       A,?V2
   \   000017   F5..         MOV       ?V1,A
    702              for ( uint8 i = 0; i < lastByte; i += 2 )
   \   000019   75..00       MOV       ?V0,#0x0
   \                     ??touchLink_GenerateRandNum_1:
   \   00001C   E5..         MOV       A,?V0
   \   00001E   C3           CLR       C
   \   00001F   95..         SUBB      A,?V1
   \   000021   503D         JNC       ??touchLink_GenerateRandNum_2
    703              {
    704                uint16 rand = osal_rand();
   \   000023                ; Setup parameters for call to function osal_rand
   \   000023   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000026   8A..         MOV       ?V4,R2
   \   000028   8B..         MOV       ?V5,R3
   \   00002A   A8..         MOV       R0,?V4
   \   00002C   A9..         MOV       R1,?V5
    705                pNum[i]   = LO_UINT16( rand );
   \   00002E   E8           MOV       A,R0
   \   00002F   C0E0         PUSH      A
   \   000031   E5..         MOV       A,?V0
   \   000033   FA           MOV       R2,A
   \   000034   7B00         MOV       R3,#0x0
   \   000036   EE           MOV       A,R6
   \   000037   2A           ADD       A,R2
   \   000038   F582         MOV       DPL,A
   \   00003A   EF           MOV       A,R7
   \   00003B   3B           ADDC      A,R3
   \   00003C   F583         MOV       DPH,A
   \   00003E   D0E0         POP       A
   \   000040   F0           MOVX      @DPTR,A
    706                pNum[i+1] = HI_UINT16( rand );
   \   000041   E4           CLR       A
   \   000042   C9           XCH       A,R1
   \   000043   F8           MOV       R0,A
   \   000044   E8           MOV       A,R0
   \   000045   C0E0         PUSH      A
   \   000047   E5..         MOV       A,?V0
   \   000049   F8           MOV       R0,A
   \   00004A   7900         MOV       R1,#0x0
   \   00004C   EE           MOV       A,R6
   \   00004D   28           ADD       A,R0
   \   00004E   F582         MOV       DPL,A
   \   000050   EF           MOV       A,R7
   \   000051   39           ADDC      A,R1
   \   000052   F583         MOV       DPH,A
   \   000054   A3           INC       DPTR
   \   000055   D0E0         POP       A
   \   000057   F0           MOVX      @DPTR,A
    707              }
   \   000058   7402         MOV       A,#0x2
   \   00005A   25..         ADD       A,?V0
   \   00005C   F5..         MOV       ?V0,A
   \   00005E   80BC         SJMP      ??touchLink_GenerateRandNum_1
    708          
    709              // In case the number is odd
    710              if ( numSize % 2 )
   \                     ??touchLink_GenerateRandNum_2:
   \   000060   E5..         MOV       A,?V2
   \   000062   75F002       MOV       B,#0x2
   \   000065   84           DIV       AB
   \   000066   E5F0         MOV       A,B
   \   000068   6016         JZ        ??touchLink_GenerateRandNum_0
    711              {
    712                pNum[lastByte] = LO_UINT16( osal_rand() );
   \   00006A                ; Setup parameters for call to function osal_rand
   \   00006A   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   00006D   EA           MOV       A,R2
   \   00006E   C0E0         PUSH      A
   \   000070   E5..         MOV       A,?V1
   \   000072   F8           MOV       R0,A
   \   000073   7900         MOV       R1,#0x0
   \   000075   EE           MOV       A,R6
   \   000076   28           ADD       A,R0
   \   000077   F582         MOV       DPL,A
   \   000079   EF           MOV       A,R7
   \   00007A   39           ADDC      A,R1
   \   00007B   F583         MOV       DPH,A
   \   00007D   D0E0         POP       A
   \   00007F   F0           MOVX      @DPTR,A
    713              }
    714            }
    715          }
   \                     ??touchLink_GenerateRandNum_0:
   \   000080   7F06         MOV       R7,#0x6
   \   000082   02....       LJMP      ?BANKED_LEAVE_XDATA
    716          
    717          /*********************************************************************
    718           * @fn      touchLink_GetRandPrimaryChannel
    719           *
    720           * @brief   Get randomly chosen TOUCHLINK primary channel.
    721           *
    722           * @return  channel
    723           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    724          uint8 touchLink_GetRandPrimaryChannel()
   \                     touchLink_GetRandPrimaryChannel:
    725          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    726            uint8 channel = osal_rand() & 0x1F;
   \   000004                ; Setup parameters for call to function osal_rand
   \   000004   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000007   EA           MOV       A,R2
   \   000008   541F         ANL       A,#0x1f
   \   00000A   F9           MOV       R1,A
    727            if ( channel <= TOUCHLINK_FIRST_CHANNEL )
   \   00000B   E9           MOV       A,R1
   \   00000C   C3           CLR       C
   \   00000D   940C         SUBB      A,#0xc
   \   00000F   5004         JNC       ??touchLink_GetRandPrimaryChannel_0
    728            {
    729              channel = TOUCHLINK_FIRST_CHANNEL;
   \   000011   790B         MOV       R1,#0xb
   \   000013   8016         SJMP      ??touchLink_GetRandPrimaryChannel_1
    730            }
    731            else if ( channel <= TOUCHLINK_SECOND_CHANNEL )
   \                     ??touchLink_GetRandPrimaryChannel_0:
   \   000015   E9           MOV       A,R1
   \   000016   C3           CLR       C
   \   000017   9410         SUBB      A,#0x10
   \   000019   5004         JNC       ??touchLink_GetRandPrimaryChannel_2
    732            {
    733              channel = TOUCHLINK_SECOND_CHANNEL;
   \   00001B   790F         MOV       R1,#0xf
   \   00001D   800C         SJMP      ??touchLink_GetRandPrimaryChannel_1
    734            }
    735            else if ( channel <= TOUCHLINK_THIRD_CHANNEL )
   \                     ??touchLink_GetRandPrimaryChannel_2:
   \   00001F   E9           MOV       A,R1
   \   000020   C3           CLR       C
   \   000021   9415         SUBB      A,#0x15
   \   000023   5004         JNC       ??touchLink_GetRandPrimaryChannel_3
    736            {
    737              channel = TOUCHLINK_THIRD_CHANNEL;
   \   000025   7914         MOV       R1,#0x14
   \   000027   8002         SJMP      ??touchLink_GetRandPrimaryChannel_1
    738            }
    739            else
    740            {
    741              channel = TOUCHLINK_FOURTH_CHANNEL;
   \                     ??touchLink_GetRandPrimaryChannel_3:
   \   000029   7919         MOV       R1,#0x19
    742            }
    743          #ifdef TOUCHLINK_DEV_SELECT_FIRST_CHANNEL
    744          #warning The device will always select the first primary channel
    745            channel = TOUCHLINK_FIRST_CHANNEL;
    746          #endif
    747            return channel;
   \                     ??touchLink_GetRandPrimaryChannel_1:
   \   00002B   D083         POP       DPH
   \   00002D   D082         POP       DPL
   \   00002F   02....       LJMP      ?BRET
    748          }
    749          
    750          /*********************************************************************
    751           * @fn      touchLink_SetNIB
    752           *
    753           * @brief   Copy new Network Parameters to the NIB.
    754           *
    755           * @param   nwkState - network state
    756           * @param   nwkAddr - short address
    757           * @param   pExtendedPANID - pointer to extended PAN ID
    758           * @param   logicalChannel - channel
    759           * @param   panId - PAN identifier
    760           * @param   nwkUpdateId - nwtwork update identifier
    761           *
    762           * @return      void
    763           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    764          void touchLink_SetNIB( nwk_states_t nwkState, uint16 nwkAddr, uint8 *pExtendedPANID,
   \                     touchLink_SetNIB:
    765                           uint8 logicalChannel, uint16 panId, uint8 nwkUpdateId )
    766          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
   \   000007   8A..         MOV       ?V8,R2
   \   000009   8B..         MOV       ?V9,R3
   \   00000B   8C..         MOV       ?V10,R4
   \   00000D   8D..         MOV       ?V11,R5
   \   00000F   7414         MOV       A,#0x14
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V4,A
   \   000017   7415         MOV       A,#0x15
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V6,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V7,A
   \   000023   7417         MOV       A,#0x17
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   E0           MOVX      A,@DPTR
   \   000029   FE           MOV       R6,A
    767            // Copy the new network parameters to NIB
    768            _NIB.nwkState = nwkState;
   \   00002A   EF           MOV       A,R7
   \   00002B   90....       MOV       DPTR,#_NIB + 35
   \   00002E   F0           MOVX      @DPTR,A
    769            _NIB.nwkDevAddress = nwkAddr;
   \   00002F   90....       MOV       DPTR,#_NIB + 20
   \   000032   E5..         MOV       A,?V8
   \   000034   F0           MOVX      @DPTR,A
   \   000035   A3           INC       DPTR
   \   000036   E5..         MOV       A,?V9
   \   000038   F0           MOVX      @DPTR,A
    770            _NIB.nwkLogicalChannel = logicalChannel;
   \   000039   E5..         MOV       A,?V4
   \   00003B   90....       MOV       DPTR,#_NIB + 22
   \   00003E   F0           MOVX      @DPTR,A
    771            _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
   \   00003F   90....       MOV       DPTR,#_NIB + 23
   \   000042   74FE         MOV       A,#-0x2
   \   000044   F0           MOVX      @DPTR,A
   \   000045   A3           INC       DPTR
   \   000046   74FF         MOV       A,#-0x1
   \   000048   F0           MOVX      @DPTR,A
    772            _NIB.channelList = (uint32)1 << logicalChannel;
   \   000049   75..01       MOV       ?V0,#0x1
   \   00004C   75..00       MOV       ?V1,#0x0
   \   00004F   75..00       MOV       ?V2,#0x0
   \   000052   75..00       MOV       ?V3,#0x0
   \   000055   E5..         MOV       A,?V4
   \   000057   78..         MOV       R0,#?V0
   \   000059   12....       LCALL     ?L_SHL
   \   00005C   90....       MOV       DPTR,#_NIB + 36
   \   00005F   78..         MOV       R0,#?V0
   \   000061   12....       LCALL     ?L_MOV_TO_X
    773            _NIB.nwkPanId = panId;
   \   000064   90....       MOV       DPTR,#_NIB + 33
   \   000067   E5..         MOV       A,?V6
   \   000069   F0           MOVX      @DPTR,A
   \   00006A   A3           INC       DPTR
   \   00006B   E5..         MOV       A,?V7
   \   00006D   F0           MOVX      @DPTR,A
    774            _NIB.nodeDepth = 1;
   \   00006E   90....       MOV       DPTR,#_NIB + 52
   \   000071   7401         MOV       A,#0x1
   \   000073   F0           MOVX      @DPTR,A
    775            _NIB.MaxRouters = (uint8)gNWK_MAX_DEVICE_LIST;
   \   000074   90....       MOV       DPTR,#gNWK_MAX_DEVICE_LIST
   \   000077   E4           CLR       A
   \   000078   93           MOVC      A,@A+DPTR
   \   000079   90....       MOV       DPTR,#_NIB + 5
   \   00007C   F0           MOVX      @DPTR,A
    776            _NIB.MaxChildren = (uint8)gNWK_MAX_DEVICE_LIST;
   \   00007D   90....       MOV       DPTR,#gNWK_MAX_DEVICE_LIST
   \   000080   E4           CLR       A
   \   000081   93           MOVC      A,@A+DPTR
   \   000082   90....       MOV       DPTR,#_NIB + 3
   \   000085   F0           MOVX      @DPTR,A
    777            _NIB.allocatedRouterAddresses = 1;
   \   000086   90....       MOV       DPTR,#_NIB + 44
   \   000089   7401         MOV       A,#0x1
   \   00008B   F0           MOVX      @DPTR,A
   \   00008C   A3           INC       DPTR
   \   00008D   7400         MOV       A,#0x0
   \   00008F   F0           MOVX      @DPTR,A
   \   000090   A3           INC       DPTR
   \   000091   7400         MOV       A,#0x0
   \   000093   F0           MOVX      @DPTR,A
   \   000094   A3           INC       DPTR
   \   000095   7400         MOV       A,#0x0
   \   000097   F0           MOVX      @DPTR,A
    778            _NIB.allocatedEndDeviceAddresses = 1;
   \   000098   90....       MOV       DPTR,#_NIB + 48
   \   00009B   7401         MOV       A,#0x1
   \   00009D   F0           MOVX      @DPTR,A
   \   00009E   A3           INC       DPTR
   \   00009F   7400         MOV       A,#0x0
   \   0000A1   F0           MOVX      @DPTR,A
   \   0000A2   A3           INC       DPTR
   \   0000A3   7400         MOV       A,#0x0
   \   0000A5   F0           MOVX      @DPTR,A
   \   0000A6   A3           INC       DPTR
   \   0000A7   7400         MOV       A,#0x0
   \   0000A9   F0           MOVX      @DPTR,A
    779          
    780            if ( _NIB.nwkUpdateId != nwkUpdateId )
   \   0000AA   90....       MOV       DPTR,#_NIB + 109
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   6E           XRL       A,R6
   \   0000AF   6005         JZ        ??touchLink_SetNIB_0
    781            {
    782              NLME_SetUpdateID( nwkUpdateId );
   \   0000B1                ; Setup parameters for call to function NLME_SetUpdateID
   \   0000B1   EE           MOV       A,R6
   \   0000B2   F9           MOV       R1,A
   \   0000B3   12....       LCALL     `??NLME_SetUpdateID::?relay`; Banked call to: NLME_SetUpdateID
    783            }
    784          
    785            osal_cpyExtAddr( _NIB.extendedPANID, pExtendedPANID );
   \                     ??touchLink_SetNIB_0:
   \   0000B6                ; Setup parameters for call to function sAddrExtCpy
   \   0000B6   AC..         MOV       R4,?V10
   \   0000B8   AD..         MOV       R5,?V11
   \   0000BA   7A..         MOV       R2,#(_NIB + 53) & 0xff
   \   0000BC   7B..         MOV       R3,#((_NIB + 53) >> 8) & 0xff
   \   0000BE   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    786          
    787            // Save the NIB
    788            if ( ( nwkState == NWK_ROUTER ) || ( nwkState == NWK_ENDDEVICE ) )
   \   0000C1   7408         MOV       A,#0x8
   \   0000C3   6F           XRL       A,R7
   \   0000C4   6005         JZ        ??touchLink_SetNIB_1
   \   0000C6   7404         MOV       A,#0x4
   \   0000C8   6F           XRL       A,R7
   \   0000C9   7005         JNZ       ??touchLink_SetNIB_2
    789            {
    790              touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_NIB );
   \                     ??touchLink_SetNIB_1:
   \   0000CB                ; Setup parameters for call to function touchLink_UpdateNV
   \   0000CB   7901         MOV       R1,#0x1
   \   0000CD   12....       LCALL     `??touchLink_UpdateNV::?relay`; Banked call to: touchLink_UpdateNV
    791            }
    792            // else will be updated when ED joins its parent
    793          }
   \                     ??touchLink_SetNIB_2:
   \   0000D0   7F0C         MOV       R7,#0xc
   \   0000D2   02....       LJMP      ?BANKED_LEAVE_XDATA
    794          
    795          /*********************************************************************
    796           * @fn      touchLink_ProcessNwkUpdate
    797           *
    798           * @brief   Update our local network update id and logical channel.
    799           *
    800           * @param   nwkUpdateId - new network update id
    801           * @param   logicalChannel - new logical channel
    802           *
    803           * @return  void
    804           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    805          void touchLink_ProcessNwkUpdate( uint8 nwkUpdateId, uint8 logicalChannel )
   \                     touchLink_ProcessNwkUpdate:
    806          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
    807            // Update the network update id
    808            NLME_SetUpdateID( nwkUpdateId );
   \   000009                ; Setup parameters for call to function NLME_SetUpdateID
   \   000009   EF           MOV       A,R7
   \   00000A   F9           MOV       R1,A
   \   00000B   12....       LCALL     `??NLME_SetUpdateID::?relay`; Banked call to: NLME_SetUpdateID
    809          
    810            // Switch channel
    811            if ( _NIB.nwkLogicalChannel != logicalChannel )
   \   00000E   90....       MOV       DPTR,#_NIB + 22
   \   000011   E0           MOVX      A,@DPTR
   \   000012   6E           XRL       A,R6
   \   000013   600A         JZ        ??touchLink_ProcessNwkUpdate_0
    812            {
    813              _NIB.nwkLogicalChannel = logicalChannel;
   \   000015   EE           MOV       A,R6
   \   000016   90....       MOV       DPTR,#_NIB + 22
   \   000019   F0           MOVX      @DPTR,A
    814              touchLink_SetChannel( logicalChannel );
   \   00001A                ; Setup parameters for call to function touchLink_SetChannel
   \   00001A   EE           MOV       A,R6
   \   00001B   F9           MOV       R1,A
   \   00001C   12....       LCALL     `??touchLink_SetChannel::?relay`; Banked call to: touchLink_SetChannel
    815            }
    816          
    817            // Update channel list
    818            _NIB.channelList = (uint32)1 << logicalChannel;
   \                     ??touchLink_ProcessNwkUpdate_0:
   \   00001F   75..01       MOV       ?V0,#0x1
   \   000022   75..00       MOV       ?V1,#0x0
   \   000025   75..00       MOV       ?V2,#0x0
   \   000028   75..00       MOV       ?V3,#0x0
   \   00002B   EE           MOV       A,R6
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?L_SHL
   \   000031   90....       MOV       DPTR,#_NIB + 36
   \   000034   78..         MOV       R0,#?V0
   \   000036   12....       LCALL     ?L_MOV_TO_X
    819          
    820            // Our Channel has been changed -- notify to save info into NV
    821            ZDApp_NwkStateUpdateCB();
   \   000039                ; Setup parameters for call to function ZDApp_NwkStateUpdateCB
   \   000039   12....       LCALL     `??ZDApp_NwkStateUpdateCB::?relay`; Banked call to: ZDApp_NwkStateUpdateCB
    822            touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_NIB );
   \   00003C                ; Setup parameters for call to function touchLink_UpdateNV
   \   00003C   7901         MOV       R1,#0x1
   \   00003E   12....       LCALL     `??touchLink_UpdateNV::?relay`; Banked call to: touchLink_UpdateNV
    823          
    824            // Reset the total transmit count and the transmit failure counters
    825            _NIB.nwkTotalTransmissions = 0;
   \   000041   90....       MOV       DPTR,#_NIB + 107
   \   000044   7400         MOV       A,#0x0
   \   000046   F0           MOVX      @DPTR,A
   \   000047   A3           INC       DPTR
   \   000048   7400         MOV       A,#0x0
   \   00004A   F0           MOVX      @DPTR,A
    826            nwkTransmissionFailures( TRUE );
   \   00004B                ; Setup parameters for call to function nwkTransmissionFailures
   \   00004B   7901         MOV       R1,#0x1
   \   00004D   12....       LCALL     `??nwkTransmissionFailures::?relay`; Banked call to: nwkTransmissionFailures
    827          }
   \   000050   7F04         MOV       R7,#0x4
   \   000052   02....       LJMP      ?BANKED_LEAVE_XDATA
    828          
    829          /*********************************************************************
    830           * @fn      touchLink_UpdateNV
    831           *
    832           * @brief   Updates NV with NIB and free ranges items
    833           *
    834           * @param   enables - specifies what to update
    835           *
    836           * @return  none
    837           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    838          void touchLink_UpdateNV( uint8 enables )
   \                     touchLink_UpdateNV:
    839          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    840          #if defined ( NV_RESTORE )
    841          
    842           #if defined ( NV_TURN_OFF_RADIO )
    843            // Turn off the radio's receiver during an NV update
    844            uint8 RxOnIdle;
    845            uint8 x = FALSE;
    846            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
    847            ZMacSetReq( ZMacRxOnIdle, &x );
    848           #endif
    849          
    850            if ( enables & TOUCHLINK_UPDATE_NV_NIB )
   \   000007   EE           MOV       A,R6
   \   000008   A2E0         MOV       C,0xE0 /* A   */.0
   \   00000A   502F         JNC       ??touchLink_UpdateNV_0
    851            {
    852              // Update NIB in NV
    853              osal_nv_write( ZCD_NV_NIB, 0, sizeof( nwkIB_t ), &_NIB );
   \   00000C                ; Setup parameters for call to function osal_nv_write
   \   00000C   75....       MOV       ?V0,#_NIB & 0xff
   \   00000F   75....       MOV       ?V1,#(_NIB >> 8) & 0xff
   \   000012   78..         MOV       R0,#?V0
   \   000014   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000017   75..6E       MOV       ?V0,#0x6e
   \   00001A   75..00       MOV       ?V1,#0x0
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000022   7C00         MOV       R4,#0x0
   \   000024   7D00         MOV       R5,#0x0
   \   000026   7A21         MOV       R2,#0x21
   \   000028   7B00         MOV       R3,#0x0
   \   00002A   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00002D   7404         MOV       A,#0x4
   \   00002F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000032   E9           MOV       A,R1
    854          
    855              // Reset the NV startup option to resume from NV by clearing
    856              // the "New" join option.
    857              zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000033                ; Setup parameters for call to function zgWriteStartupOptions
   \   000033   7A02         MOV       R2,#0x2
   \   000035   7900         MOV       R1,#0x0
   \   000037   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   \   00003A   E9           MOV       A,R1
    858            }
    859          
    860            if ( enables & TOUCHLINK_UPDATE_NV_RANGES )
   \                     ??touchLink_UpdateNV_0:
   \   00003B   EE           MOV       A,R6
   \   00003C   A2E1         MOV       C,0xE0 /* A   */.1
   \   00003E   4003         JC        $+5
   \   000040   02....       LJMP      ??touchLink_UpdateNV_1 & 0xFFFF
    861            {
    862              // Store our free network address and group ID ranges
    863              osal_nv_write( ZCD_NV_MIN_FREE_NWK_ADDR, 0, sizeof( touchLinkFreeNwkAddrBegin ), &touchLinkFreeNwkAddrBegin );
   \   000043                ; Setup parameters for call to function osal_nv_write
   \   000043   75....       MOV       ?V0,#touchLinkFreeNwkAddrBegin & 0xff
   \   000046   75....       MOV       ?V1,#(touchLinkFreeNwkAddrBegin >> 8) & 0xff
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   75..02       MOV       ?V0,#0x2
   \   000051   75..00       MOV       ?V1,#0x0
   \   000054   78..         MOV       R0,#?V0
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000059   7C00         MOV       R4,#0x0
   \   00005B   7D00         MOV       R5,#0x0
   \   00005D   7A92         MOV       R2,#-0x6e
   \   00005F   7B00         MOV       R3,#0x0
   \   000061   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000064   7404         MOV       A,#0x4
   \   000066   12....       LCALL     ?DEALLOC_XSTACK8
   \   000069   E9           MOV       A,R1
    864              osal_nv_write( ZCD_NV_MAX_FREE_NWK_ADDR, 0, sizeof( touchLinkFreeNwkAddrEnd ), &touchLinkFreeNwkAddrEnd );
   \   00006A                ; Setup parameters for call to function osal_nv_write
   \   00006A   75....       MOV       ?V0,#touchLinkFreeNwkAddrEnd & 0xff
   \   00006D   75....       MOV       ?V1,#(touchLinkFreeNwkAddrEnd >> 8) & 0xff
   \   000070   78..         MOV       R0,#?V0
   \   000072   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000075   75..02       MOV       ?V0,#0x2
   \   000078   75..00       MOV       ?V1,#0x0
   \   00007B   78..         MOV       R0,#?V0
   \   00007D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000080   7C00         MOV       R4,#0x0
   \   000082   7D00         MOV       R5,#0x0
   \   000084   7A93         MOV       R2,#-0x6d
   \   000086   7B00         MOV       R3,#0x0
   \   000088   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00008B   7404         MOV       A,#0x4
   \   00008D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000090   E9           MOV       A,R1
    865              osal_nv_write( ZCD_NV_MIN_FREE_GRP_ID, 0, sizeof( touchLinkFreeGrpIdBegin ), &touchLinkFreeGrpIdBegin );
   \   000091                ; Setup parameters for call to function osal_nv_write
   \   000091   75....       MOV       ?V0,#touchLinkFreeGrpIdBegin & 0xff
   \   000094   75....       MOV       ?V1,#(touchLinkFreeGrpIdBegin >> 8) & 0xff
   \   000097   78..         MOV       R0,#?V0
   \   000099   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009C   75..02       MOV       ?V0,#0x2
   \   00009F   75..00       MOV       ?V1,#0x0
   \   0000A2   78..         MOV       R0,#?V0
   \   0000A4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A7   7C00         MOV       R4,#0x0
   \   0000A9   7D00         MOV       R5,#0x0
   \   0000AB   7A94         MOV       R2,#-0x6c
   \   0000AD   7B00         MOV       R3,#0x0
   \   0000AF   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000B2   7404         MOV       A,#0x4
   \   0000B4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B7   E9           MOV       A,R1
    866              osal_nv_write( ZCD_NV_MAX_FREE_GRP_ID, 0, sizeof( touchLinkFreeGrpIdEnd ), &touchLinkFreeGrpIdEnd );
   \   0000B8                ; Setup parameters for call to function osal_nv_write
   \   0000B8   75....       MOV       ?V0,#touchLinkFreeGrpIdEnd & 0xff
   \   0000BB   75....       MOV       ?V1,#(touchLinkFreeGrpIdEnd >> 8) & 0xff
   \   0000BE   78..         MOV       R0,#?V0
   \   0000C0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C3   75..02       MOV       ?V0,#0x2
   \   0000C6   75..00       MOV       ?V1,#0x0
   \   0000C9   78..         MOV       R0,#?V0
   \   0000CB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CE   7C00         MOV       R4,#0x0
   \   0000D0   7D00         MOV       R5,#0x0
   \   0000D2   7A95         MOV       R2,#-0x6b
   \   0000D4   7B00         MOV       R3,#0x0
   \   0000D6   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000D9   7404         MOV       A,#0x4
   \   0000DB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DE   E9           MOV       A,R1
    867          
    868              // Store our group ID range
    869              osal_nv_write( ZCD_NV_MIN_GRP_IDS, 0, sizeof( touchLinkGrpIDsBegin ), &touchLinkGrpIDsBegin );
   \   0000DF                ; Setup parameters for call to function osal_nv_write
   \   0000DF   75....       MOV       ?V0,#touchLinkGrpIDsBegin & 0xff
   \   0000E2   75....       MOV       ?V1,#(touchLinkGrpIDsBegin >> 8) & 0xff
   \   0000E5   78..         MOV       R0,#?V0
   \   0000E7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000EA   75..02       MOV       ?V0,#0x2
   \   0000ED   75..00       MOV       ?V1,#0x0
   \   0000F0   78..         MOV       R0,#?V0
   \   0000F2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F5   7C00         MOV       R4,#0x0
   \   0000F7   7D00         MOV       R5,#0x0
   \   0000F9   7A96         MOV       R2,#-0x6a
   \   0000FB   7B00         MOV       R3,#0x0
   \   0000FD   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000100   7404         MOV       A,#0x4
   \   000102   12....       LCALL     ?DEALLOC_XSTACK8
   \   000105   E9           MOV       A,R1
    870              osal_nv_write( ZCD_NV_MAX_GRP_IDS, 0, sizeof( touchLinkGrpIDsEnd ), &touchLinkGrpIDsEnd );
   \   000106                ; Setup parameters for call to function osal_nv_write
   \   000106   75....       MOV       ?V0,#touchLinkGrpIDsEnd & 0xff
   \   000109   75....       MOV       ?V1,#(touchLinkGrpIDsEnd >> 8) & 0xff
   \   00010C   78..         MOV       R0,#?V0
   \   00010E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000111   75..02       MOV       ?V0,#0x2
   \   000114   75..00       MOV       ?V1,#0x0
   \   000117   78..         MOV       R0,#?V0
   \   000119   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011C   7C00         MOV       R4,#0x0
   \   00011E   7D00         MOV       R5,#0x0
   \   000120   7A97         MOV       R2,#-0x69
   \   000122   7B00         MOV       R3,#0x0
   \   000124   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000127   7404         MOV       A,#0x4
   \   000129   12....       LCALL     ?DEALLOC_XSTACK8
   \   00012C   E9           MOV       A,R1
    871            }
    872          
    873           #if defined ( NV_TURN_OFF_RADIO )
    874            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    875           #endif
    876          
    877          #endif // NV_RESTORE
    878          }
   \                     ??touchLink_UpdateNV_1:
   \   00012D   7F02         MOV       R7,#0x2
   \   00012F   02....       LJMP      ?BANKED_LEAVE_XDATA
    879          
    880          /*********************************************************************
    881           * @fn          touchLink_InitNV
    882           *
    883           * @brief       Initialize free range RAM variables from NV. If NV items
    884           *              don't exist, then the NV is initialize with what is in
    885           *              RAM variables.
    886           *
    887           * @param       none
    888           *
    889           * @return      none
    890           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    891          static void touchLink_InitNV( void )
   \                     touchLink_InitNV:
    892          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    893            // Initialize our free network address and group ID ranges
    894            touchLink_ItemInit( ZCD_NV_MIN_FREE_NWK_ADDR, sizeof( touchLinkFreeNwkAddrBegin ), &touchLinkFreeNwkAddrBegin );
   \   000005                ; Setup parameters for call to function touchLink_ItemInit
   \   000005   75....       MOV       ?V0,#touchLinkFreeNwkAddrBegin & 0xff
   \   000008   75....       MOV       ?V1,#(touchLinkFreeNwkAddrBegin >> 8) & 0xff
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000010   7C02         MOV       R4,#0x2
   \   000012   7D00         MOV       R5,#0x0
   \   000014   7A92         MOV       R2,#-0x6e
   \   000016   7B00         MOV       R3,#0x0
   \   000018   12....       LCALL     `??touchLink_ItemInit::?relay`; Banked call to: touchLink_ItemInit
   \   00001B   7402         MOV       A,#0x2
   \   00001D   12....       LCALL     ?DEALLOC_XSTACK8
    895            touchLink_ItemInit( ZCD_NV_MAX_FREE_NWK_ADDR, sizeof( touchLinkFreeNwkAddrEnd ), &touchLinkFreeNwkAddrEnd );
   \   000020                ; Setup parameters for call to function touchLink_ItemInit
   \   000020   75....       MOV       ?V0,#touchLinkFreeNwkAddrEnd & 0xff
   \   000023   75....       MOV       ?V1,#(touchLinkFreeNwkAddrEnd >> 8) & 0xff
   \   000026   78..         MOV       R0,#?V0
   \   000028   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002B   7C02         MOV       R4,#0x2
   \   00002D   7D00         MOV       R5,#0x0
   \   00002F   7A93         MOV       R2,#-0x6d
   \   000031   7B00         MOV       R3,#0x0
   \   000033   12....       LCALL     `??touchLink_ItemInit::?relay`; Banked call to: touchLink_ItemInit
   \   000036   7402         MOV       A,#0x2
   \   000038   12....       LCALL     ?DEALLOC_XSTACK8
    896            touchLink_ItemInit( ZCD_NV_MIN_FREE_GRP_ID, sizeof( touchLinkFreeGrpIdBegin ), &touchLinkFreeGrpIdBegin );
   \   00003B                ; Setup parameters for call to function touchLink_ItemInit
   \   00003B   75....       MOV       ?V0,#touchLinkFreeGrpIdBegin & 0xff
   \   00003E   75....       MOV       ?V1,#(touchLinkFreeGrpIdBegin >> 8) & 0xff
   \   000041   78..         MOV       R0,#?V0
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000046   7C02         MOV       R4,#0x2
   \   000048   7D00         MOV       R5,#0x0
   \   00004A   7A94         MOV       R2,#-0x6c
   \   00004C   7B00         MOV       R3,#0x0
   \   00004E   12....       LCALL     `??touchLink_ItemInit::?relay`; Banked call to: touchLink_ItemInit
   \   000051   7402         MOV       A,#0x2
   \   000053   12....       LCALL     ?DEALLOC_XSTACK8
    897            touchLink_ItemInit( ZCD_NV_MAX_FREE_GRP_ID, sizeof( touchLinkFreeGrpIdEnd ), &touchLinkFreeGrpIdEnd );
   \   000056                ; Setup parameters for call to function touchLink_ItemInit
   \   000056   75....       MOV       ?V0,#touchLinkFreeGrpIdEnd & 0xff
   \   000059   75....       MOV       ?V1,#(touchLinkFreeGrpIdEnd >> 8) & 0xff
   \   00005C   78..         MOV       R0,#?V0
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000061   7C02         MOV       R4,#0x2
   \   000063   7D00         MOV       R5,#0x0
   \   000065   7A95         MOV       R2,#-0x6b
   \   000067   7B00         MOV       R3,#0x0
   \   000069   12....       LCALL     `??touchLink_ItemInit::?relay`; Banked call to: touchLink_ItemInit
   \   00006C   7402         MOV       A,#0x2
   \   00006E   12....       LCALL     ?DEALLOC_XSTACK8
    898          
    899            // Initialize our group ID range
    900            touchLink_ItemInit( ZCD_NV_MIN_GRP_IDS, sizeof( touchLinkGrpIDsBegin ), &touchLinkGrpIDsBegin );
   \   000071                ; Setup parameters for call to function touchLink_ItemInit
   \   000071   75....       MOV       ?V0,#touchLinkGrpIDsBegin & 0xff
   \   000074   75....       MOV       ?V1,#(touchLinkGrpIDsBegin >> 8) & 0xff
   \   000077   78..         MOV       R0,#?V0
   \   000079   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007C   7C02         MOV       R4,#0x2
   \   00007E   7D00         MOV       R5,#0x0
   \   000080   7A96         MOV       R2,#-0x6a
   \   000082   7B00         MOV       R3,#0x0
   \   000084   12....       LCALL     `??touchLink_ItemInit::?relay`; Banked call to: touchLink_ItemInit
   \   000087   7402         MOV       A,#0x2
   \   000089   12....       LCALL     ?DEALLOC_XSTACK8
    901            touchLink_ItemInit( ZCD_NV_MAX_GRP_IDS, sizeof( touchLinkGrpIDsEnd ), &touchLinkGrpIDsEnd );
   \   00008C                ; Setup parameters for call to function touchLink_ItemInit
   \   00008C   75....       MOV       ?V0,#touchLinkGrpIDsEnd & 0xff
   \   00008F   75....       MOV       ?V1,#(touchLinkGrpIDsEnd >> 8) & 0xff
   \   000092   78..         MOV       R0,#?V0
   \   000094   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000097   7C02         MOV       R4,#0x2
   \   000099   7D00         MOV       R5,#0x0
   \   00009B   7A97         MOV       R2,#-0x69
   \   00009D   7B00         MOV       R3,#0x0
   \   00009F   12....       LCALL     `??touchLink_ItemInit::?relay`; Banked call to: touchLink_ItemInit
   \   0000A2   7402         MOV       A,#0x2
   \   0000A4   12....       LCALL     ?DEALLOC_XSTACK8
    902          }
   \   0000A7   7F02         MOV       R7,#0x2
   \   0000A9   02....       LJMP      ?BANKED_LEAVE_XDATA
    903          
    904          /*********************************************************************
    905           * @fn      touchLink_ItemInit
    906           *
    907           * @brief   Initialize an NV item. If the item doesn't exist in NV memory,
    908           *          write the default (value passed in) into NV memory. But if
    909           *          it exists, set the item to the value stored in NV memory.
    910           *
    911           * @param   id - item id
    912           * @param   len - item len
    913           * @param   buf - pointer to the item
    914           *
    915           * @return  none
    916           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    917          void touchLink_ItemInit( uint16 id, uint16 len, void *pBuf )
   \                     touchLink_ItemInit:
    918          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   \   00000D   740C         MOV       A,#0xc
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F5..         MOV       ?V0,A
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F5..         MOV       ?V1,A
    919          #if defined ( NV_RESTORE )
    920            // If the item doesn't exist in NV memory, create and initialize
    921            // it with the value passed in.
    922            if ( osal_nv_item_init( id, len, pBuf ) == ZSuccess )
   \   000019                ; Setup parameters for call to function osal_nv_item_init
   \   000019   78..         MOV       R0,#?V0
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001E   AC..         MOV       R4,?V2
   \   000020   AD..         MOV       R5,?V3
   \   000022   EE           MOV       A,R6
   \   000023   FA           MOV       R2,A
   \   000024   EF           MOV       A,R7
   \   000025   FB           MOV       R3,A
   \   000026   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000029   7402         MOV       A,#0x2
   \   00002B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002E   E9           MOV       A,R1
   \   00002F   701B         JNZ       ??touchLink_ItemInit_0
    923            {
    924              // The item already exists in NV memory, read it from NV memory
    925              osal_nv_read( id, 0, len, pBuf );
   \   000031                ; Setup parameters for call to function osal_nv_read
   \   000031   78..         MOV       R0,#?V0
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000036   78..         MOV       R0,#?V2
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   7C00         MOV       R4,#0x0
   \   00003D   7D00         MOV       R5,#0x0
   \   00003F   EE           MOV       A,R6
   \   000040   FA           MOV       R2,A
   \   000041   EF           MOV       A,R7
   \   000042   FB           MOV       R3,A
   \   000043   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000046   7404         MOV       A,#0x4
   \   000048   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004B   E9           MOV       A,R1
    926            }
    927          #endif // NV_RESTORE
    928          }
   \                     ??touchLink_ItemInit_0:
   \   00004C   7F04         MOV       R7,#0x4
   \   00004E   02....       LJMP      ?BANKED_LEAVE_XDATA
    929          
    930          /*********************************************************************
    931           * @fn      touchLink_SetMacNwkParams
    932           *
    933           * @brief   Configure MAC with our Network Parameters.
    934           *
    935           * @param   nwkAddr - network address
    936           * @param   panId - PAN identifier
    937           * @param   channel
    938           *
    939           * @return  void
    940           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    941          void touchLink_SetMacNwkParams( uint16 nwkAddr, uint16 panId, uint8 channel )
   \                     touchLink_SetMacNwkParams:
    942          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   85..82       MOV       DPL,?XSP + 0
   \   000017   85..83       MOV       DPH,?XSP + 1
   \   00001A   EC           MOV       A,R4
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   A3           INC       DPTR
   \   00001D   ED           MOV       A,R5
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   E9           MOV       A,R1
   \   000020   FE           MOV       R6,A
    943            // Set our short address
    944            ZMacSetReq( ZMacShortAddress, (byte*)&nwkAddr );
   \   000021                ; Setup parameters for call to function ZMacSetReq
   \   000021   7402         MOV       A,#0x2
   \   000023   12....       LCALL     ?XSTACK_DISP101_8
   \   000026   7953         MOV       R1,#0x53
   \   000028   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   00002B   E9           MOV       A,R1
    945          
    946            // Set our PAN ID
    947            ZMacSetReq( ZMacPanId, (byte*)&panId );
   \   00002C                ; Setup parameters for call to function ZMacSetReq
   \   00002C   AA..         MOV       R2,?XSP + 0
   \   00002E   AB..         MOV       R3,?XSP + 1
   \   000030   7950         MOV       R1,#0x50
   \   000032   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000035   E9           MOV       A,R1
    948          
    949            // Tune to the selected logical channel
    950            touchLink_SetChannel( channel );
   \   000036                ; Setup parameters for call to function touchLink_SetChannel
   \   000036   EE           MOV       A,R6
   \   000037   F9           MOV       R1,A
   \   000038   12....       LCALL     `??touchLink_SetChannel::?relay`; Banked call to: touchLink_SetChannel
    951          }
   \   00003B   7404         MOV       A,#0x4
   \   00003D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000040   7F01         MOV       R7,#0x1
   \   000042   02....       LJMP      ?BANKED_LEAVE_XDATA
    952          
    953          /*********************************************************************
    954           * @fn      touchLink_SetChannel
    955           *
    956           * @brief   Set our channel.
    957           *
    958           * @param   channel - new channel to change to
    959           *
    960           * @return  void
    961           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    962          void touchLink_SetChannel( uint8 channel )
   \                     touchLink_SetChannel:
    963          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   C0E0         PUSH      A
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   D0E0         POP       A
   \   000015   F0           MOVX      @DPTR,A
    964            bdb_setChannel( (uint32) ( 1L << channel ) );
   \   000016                ; Setup parameters for call to function bdb_setChannel
   \   000016   75..01       MOV       ?V0,#0x1
   \   000019   75..00       MOV       ?V1,#0x0
   \   00001C   75..00       MOV       ?V2,#0x0
   \   00001F   75..00       MOV       ?V3,#0x0
   \   000022   85..82       MOV       DPL,?XSP + 0
   \   000025   85..83       MOV       DPH,?XSP + 1
   \   000028   E0           MOVX      A,@DPTR
   \   000029   78..         MOV       R0,#?V0
   \   00002B   12....       LCALL     ?L_SHL
   \   00002E   AA..         MOV       R2,?V0
   \   000030   AB..         MOV       R3,?V1
   \   000032   AC..         MOV       R4,?V2
   \   000034   AD..         MOV       R5,?V3
   \   000036   12....       LCALL     `??bdb_setChannel::?relay`; Banked call to: bdb_setChannel
    965          
    966            // Set the new channel
    967            ZMacSetReq( ZMacChannel, &channel );
   \   000039                ; Setup parameters for call to function ZMacSetReq
   \   000039   AA..         MOV       R2,?XSP + 0
   \   00003B   AB..         MOV       R3,?XSP + 1
   \   00003D   79E1         MOV       R1,#-0x1f
   \   00003F   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000042   E9           MOV       A,R1
    968          }
   \   000043   7401         MOV       A,#0x1
   \   000045   12....       LCALL     ?DEALLOC_XSTACK8
   \   000048   7F04         MOV       R7,#0x4
   \   00004A   02....       LJMP      ?BANKED_LEAVE_XDATA
    969          
    970          /*********************************************************************
    971           * @fn      touchLink_SendDeviceInfoRsp
    972           *
    973           * @brief   Send out a Device Information Response command.
    974           *
    975           * @param   srcEP - sender's endpoint
    976           * @param   dstAddr - destination address
    977           * @param   startIndex - start index
    978           * @param   transID - received transaction id
    979           * @param   seqNum - received sequence number
    980           *
    981           * @return  ZStatus_t
    982           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    983          uint8 touchLink_SendDeviceInfoRsp( uint8 srcEP, afAddrType_t *dstAddr, uint8 startIndex,
   \                     touchLink_SendDeviceInfoRsp:
    984                                       uint32 transID, uint8 seqNum )
    985          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V3,R1
   \   000007   8A..         MOV       ?V10,R2
   \   000009   8B..         MOV       ?V11,R3
   \   00000B   8C..         MOV       ?V2,R4
   \   00000D   8D..         MOV       ?V8,R5
   \   00000F   7418         MOV       A,#0x18
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   78..         MOV       R0,#?V4
   \   000016   12....       LCALL     ?L_MOV_X
   \   000019   85....       MOV       ?V12,?V4
   \   00001C   85....       MOV       ?V13,?V5
   \   00001F   85....       MOV       ?V14,?V6
   \   000022   85....       MOV       ?V15,?V7
    986            bdbTLDeviceInfoRsp_t *pRsp;
    987            uint8 cnt;
    988            uint8 rspLen;
    989            uint8 status = ZSuccess;
   \   000025   75..00       MOV       ?V0,#0x0
    990          
    991            cnt = touchLink_GetNumSubDevices( startIndex );
   \   000028                ; Setup parameters for call to function touchLink_GetNumSubDevices
   \   000028   A9..         MOV       R1,?V2
   \   00002A   12....       LCALL     `??touchLink_GetNumSubDevices::?relay`; Banked call to: touchLink_GetNumSubDevices
   \   00002D   E9           MOV       A,R1
   \   00002E   F5..         MOV       ?V1,A
    992            if ( cnt > TOUCHLINK_DEVICE_INFO_RSP_REC_COUNT_MAX )
   \   000030   E5..         MOV       A,?V1
   \   000032   C3           CLR       C
   \   000033   9406         SUBB      A,#0x6
   \   000035   4003         JC        ??touchLink_SendDeviceInfoRsp_0
    993            {
    994              cnt = TOUCHLINK_DEVICE_INFO_RSP_REC_COUNT_MAX; // should be between 0x00-0x05
   \   000037   75..05       MOV       ?V1,#0x5
    995            }
    996          
    997            rspLen = sizeof( bdbTLDeviceInfoRsp_t ) + ( cnt * sizeof( devInfoRec_t ) );
   \                     ??touchLink_SendDeviceInfoRsp_0:
   \   00003A   75F010       MOV       B,#0x10
   \   00003D   E5..         MOV       A,?V1
   \   00003F   A4           MUL       AB
   \   000040   2417         ADD       A,#0x17
   \   000042   F5..         MOV       ?V6,A
    998          
    999            pRsp = (bdbTLDeviceInfoRsp_t *)osal_mem_alloc( rspLen );
   \   000044                ; Setup parameters for call to function osal_mem_alloc
   \   000044   E5..         MOV       A,?V6
   \   000046   FA           MOV       R2,A
   \   000047   7B00         MOV       R3,#0x0
   \   000049   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00004C   8A..         MOV       ?V4,R2
   \   00004E   8B..         MOV       ?V5,R3
   \   000050   AE..         MOV       R6,?V4
   \   000052   AF..         MOV       R7,?V5
   1000            if ( pRsp )
   \   000054   EE           MOV       A,R6
   \   000055   4F           ORL       A,R7
   \   000056   7003         JNZ       $+5
   \   000058   02....       LJMP      ??touchLink_SendDeviceInfoRsp_1 & 0xFFFF
   1001            {
   1002              pRsp->transID = transID;
   \   00005B   8E82         MOV       DPL,R6
   \   00005D   8F83         MOV       DPH,R7
   \   00005F   78..         MOV       R0,#?V12
   \   000061   12....       LCALL     ?L_MOV_TO_X
   1003          
   1004              pRsp->numSubDevices = touchLink_GetNumSubDevices( 0 );
   \   000064                ; Setup parameters for call to function touchLink_GetNumSubDevices
   \   000064   7900         MOV       R1,#0x0
   \   000066   12....       LCALL     `??touchLink_GetNumSubDevices::?relay`; Banked call to: touchLink_GetNumSubDevices
   \   000069   E9           MOV       A,R1
   \   00006A   C0E0         PUSH      A
   \   00006C   8E82         MOV       DPL,R6
   \   00006E   8F83         MOV       DPH,R7
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   D0E0         POP       A
   \   000076   F0           MOVX      @DPTR,A
   1005              pRsp->startIndex = startIndex;
   \   000077   E5..         MOV       A,?V2
   \   000079   C0E0         PUSH      A
   \   00007B   8E82         MOV       DPL,R6
   \   00007D   8F83         MOV       DPH,R7
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   D0E0         POP       A
   \   000086   F0           MOVX      @DPTR,A
   1006              pRsp->cnt = cnt;
   \   000087   E5..         MOV       A,?V1
   \   000089   C0E0         PUSH      A
   \   00008B   8E82         MOV       DPL,R6
   \   00008D   8F83         MOV       DPH,R7
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   D0E0         POP       A
   \   000097   F0           MOVX      @DPTR,A
   1007          
   1008              for ( uint8 i = 0; i < cnt; i++ )
   \   000098   75..00       MOV       ?V7,#0x0
   \                     ??touchLink_SendDeviceInfoRsp_2:
   \   00009B   E5..         MOV       A,?V7
   \   00009D   C3           CLR       C
   \   00009E   95..         SUBB      A,?V1
   \   0000A0   505A         JNC       ??touchLink_SendDeviceInfoRsp_3
   1009              {
   1010                devInfoRec_t *pRec = &(pRsp->devInfoRec[i]);
   \   0000A2   E5..         MOV       A,?V7
   \   0000A4   F8           MOV       R0,A
   \   0000A5   7900         MOV       R1,#0x0
   \   0000A7   E8           MOV       A,R0
   \   0000A8   75F010       MOV       B,#0x10
   \   0000AB   A4           MUL       AB
   \   0000AC   C8           XCH       A,R0
   \   0000AD   AAF0         MOV       R2,B
   \   0000AF   75F000       MOV       B,#0x0
   \   0000B2   A4           MUL       AB
   \   0000B3   2A           ADD       A,R2
   \   0000B4   FA           MOV       R2,A
   \   0000B5   75F010       MOV       B,#0x10
   \   0000B8   E9           MOV       A,R1
   \   0000B9   A4           MUL       AB
   \   0000BA   2A           ADD       A,R2
   \   0000BB   F9           MOV       R1,A
   \   0000BC   EE           MOV       A,R6
   \   0000BD   28           ADD       A,R0
   \   0000BE   F8           MOV       R0,A
   \   0000BF   EF           MOV       A,R7
   \   0000C0   39           ADDC      A,R1
   \   0000C1   F9           MOV       R1,A
   \   0000C2   E8           MOV       A,R0
   \   0000C3   2407         ADD       A,#0x7
   \   0000C5   F5..         MOV       ?V4,A
   \   0000C7   E4           CLR       A
   \   0000C8   39           ADDC      A,R1
   \   0000C9   F5..         MOV       ?V5,A
   1011          
   1012                osal_cpyExtAddr( pRec->ieeeAddr, NLME_GetExtAddr() );
   \   0000CB                ; Setup parameters for call to function sAddrExtCpy
   \   0000CB                ; Setup parameters for call to function NLME_GetExtAddr
   \   0000CB   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   0000CE   EA           MOV       A,R2
   \   0000CF   FC           MOV       R4,A
   \   0000D0   EB           MOV       A,R3
   \   0000D1   FD           MOV       R5,A
   \   0000D2   AA..         MOV       R2,?V4
   \   0000D4   AB..         MOV       R3,?V5
   \   0000D6   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1013          
   1014                touchLink_GetSubDeviceInfo( startIndex + i, &(pRec->deviceInfo) );
   \   0000D9                ; Setup parameters for call to function touchLink_GetSubDeviceInfo
   \   0000D9   E5..         MOV       A,?V4
   \   0000DB   2408         ADD       A,#0x8
   \   0000DD   FA           MOV       R2,A
   \   0000DE   E4           CLR       A
   \   0000DF   35..         ADDC      A,?V5
   \   0000E1   FB           MOV       R3,A
   \   0000E2   E5..         MOV       A,?V2
   \   0000E4   25..         ADD       A,?V7
   \   0000E6   F9           MOV       R1,A
   \   0000E7   12....       LCALL     `??touchLink_GetSubDeviceInfo::?relay`; Banked call to: touchLink_GetSubDeviceInfo
   1015          
   1016                pRec->sort = 0;
   \   0000EA   E5..         MOV       A,?V4
   \   0000EC   240F         ADD       A,#0xf
   \   0000EE   F582         MOV       DPL,A
   \   0000F0   E4           CLR       A
   \   0000F1   35..         ADDC      A,?V5
   \   0000F3   F583         MOV       DPH,A
   \   0000F5   7400         MOV       A,#0x0
   \   0000F7   F0           MOVX      @DPTR,A
   1017              }
   \   0000F8   05..         INC       ?V7
   \   0000FA   809F         SJMP      ??touchLink_SendDeviceInfoRsp_2
   1018          
   1019              // Send a response back
   1020              status = bdbTL_Send_DeviceInfoRsp( srcEP, dstAddr, pRsp, seqNum );
   \                     ??touchLink_SendDeviceInfoRsp_3:
   \   0000FC                ; Setup parameters for call to function bdbTL_Send_DeviceInfoRsp
   \   0000FC   E5..         MOV       A,?V8
   \   0000FE   F5..         MOV       ?V4,A
   \   000100   78..         MOV       R0,#?V4
   \   000102   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000105   EE           MOV       A,R6
   \   000106   FC           MOV       R4,A
   \   000107   EF           MOV       A,R7
   \   000108   FD           MOV       R5,A
   \   000109   AA..         MOV       R2,?V10
   \   00010B   AB..         MOV       R3,?V11
   \   00010D   A9..         MOV       R1,?V3
   \   00010F   12....       LCALL     `??bdbTL_Send_DeviceInfoRsp::?relay`; Banked call to: bdbTL_Send_DeviceInfoRsp
   \   000112   7401         MOV       A,#0x1
   \   000114   12....       LCALL     ?DEALLOC_XSTACK8
   \   000117   E9           MOV       A,R1
   \   000118   F5..         MOV       ?V0,A
   1021          
   1022              osal_mem_free( pRsp );
   \   00011A                ; Setup parameters for call to function osal_mem_free
   \   00011A   EE           MOV       A,R6
   \   00011B   FA           MOV       R2,A
   \   00011C   EF           MOV       A,R7
   \   00011D   FB           MOV       R3,A
   \   00011E   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000121   8003         SJMP      ??touchLink_SendDeviceInfoRsp_4
   1023            }
   1024            else
   1025            {
   1026              status = ZMemError;
   \                     ??touchLink_SendDeviceInfoRsp_1:
   \   000123   75..10       MOV       ?V0,#0x10
   1027            }
   1028          
   1029            return ( status );
   \                     ??touchLink_SendDeviceInfoRsp_4:
   \   000126   A9..         MOV       R1,?V0
   \   000128   7F10         MOV       R7,#0x10
   \   00012A   02....       LJMP      ?BANKED_LEAVE_XDATA
   1030          }
   1031          
   1032          /*********************************************************************
   1033           * @fn      touchLink_SendLeaveReq
   1034           *
   1035           * @brief   Send out a Leave Request command.
   1036           *
   1037           * @param   void
   1038           *
   1039           * @return  ZStatus_t
   1040           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1041          ZStatus_t touchLink_SendLeaveReq( void )
   \                     touchLink_SendLeaveReq:
   1042          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 5
   \   000004   74FB         MOV       A,#-0x5
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   1043            NLME_LeaveReq_t leaveReq;
   1044            
   1045            // Set every field to 0
   1046            osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   7C05         MOV       R4,#0x5
   \   00000B   7D00         MOV       R5,#0x0
   \   00000D   7900         MOV       R1,#0x0
   \   00000F   AA..         MOV       R2,?XSP + 0
   \   000011   AB..         MOV       R3,?XSP + 1
   \   000013   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1047            
   1048            // Send out our leave
   1049            return ( NLME_LeaveReq( &leaveReq ) );
   \   000016                ; Setup parameters for call to function NLME_LeaveReq
   \   000016   AA..         MOV       R2,?XSP + 0
   \   000018   AB..         MOV       R3,?XSP + 1
   \   00001A   12....       LCALL     `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   00001D   7405         MOV       A,#0x5
   \   00001F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000022   D083         POP       DPH
   \   000024   D082         POP       DPL
   \   000026   02....       LJMP      ?BRET
   1050          }
   1051          
   1052          /*********************************************************************
   1053           * @fn      touchLink_GetMsgRssi
   1054           *
   1055           * @brief   Get the RSSI of the message just received through a ZCL callback.
   1056           *
   1057           * @param   none
   1058           *
   1059           * @return  RSSI if AF message was received, TOUCHLINK_WORST_RSSI otherwise.
   1060           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1061          int8 touchLink_GetMsgRssi( void )
   \                     touchLink_GetMsgRssi:
   1062          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1063            afIncomingMSGPacket_t *pAF = zcl_getRawAFMsg();
   \   000005                ; Setup parameters for call to function zcl_getRawAFMsg
   \   000005   12....       LCALL     `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
   \   000008   8A..         MOV       ?V0,R2
   \   00000A   8B..         MOV       ?V1,R3
   \   00000C   AA..         MOV       R2,?V0
   \   00000E   AB..         MOV       R3,?V1
   1064          
   1065            if ( pAF != NULL )
   \   000010   EA           MOV       A,R2
   \   000011   4B           ORL       A,R3
   \   000012   600D         JZ        ??touchLink_GetMsgRssi_0
   1066            {
   1067              return ( pAF->rssi );
   \   000014   EA           MOV       A,R2
   \   000015   2418         ADD       A,#0x18
   \   000017   F582         MOV       DPL,A
   \   000019   E4           CLR       A
   \   00001A   3B           ADDC      A,R3
   \   00001B   F583         MOV       DPH,A
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F9           MOV       R1,A
   \   00001F   8002         SJMP      ??touchLink_GetMsgRssi_1
   1068            }
   1069          
   1070            return ( TOUCHLINK_WORST_RSSI );
   \                     ??touchLink_GetMsgRssi_0:
   \   000021   79E2         MOV       R1,#-0x1e
   \                     ??touchLink_GetMsgRssi_1:
   \   000023   7F02         MOV       R7,#0x2
   \   000025   02....       LJMP      ?BANKED_LEAVE_XDATA
   1071          }
   1072          
   1073          /*********************************************************************
   1074           * @fn      touchLink_NewNwkUpdateId
   1075           *
   1076           * @brief   Determine the new network update id. The nwkUpdateId attribute
   1077           *          can take the value of 0x00 - 0xff and may wrap around so care
   1078           *          must be taken when comparing for newness.
   1079           *
   1080           * @param   ID1 - first nwk update id
   1081           * @param   ID2 - second nwk update id
   1082           *
   1083           * @return  new nwk update ID
   1084           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1085          uint8 touchLink_NewNwkUpdateId( uint8 ID1, uint8 ID2 )
   \                     touchLink_NewNwkUpdateId:
   1086          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   \   000001   FB           MOV       R3,A
   1087            if ( ( (ID1 >= ID2) && ((ID1 - ID2) > 200) )
   1088                || ( (ID1 < ID2) && ((ID2 - ID1) > 200) ) )
   \   000002   EB           MOV       A,R3
   \   000003   C3           CLR       C
   \   000004   9A           SUBB      A,R2
   \   000005   401D         JC        ??touchLink_NewNwkUpdateId_0
   \   000007   EB           MOV       A,R3
   \   000008   FC           MOV       R4,A
   \   000009   7D00         MOV       R5,#0x0
   \   00000B   EA           MOV       A,R2
   \   00000C   F8           MOV       R0,A
   \   00000D   7900         MOV       R1,#0x0
   \   00000F   EC           MOV       A,R4
   \   000010   C3           CLR       C
   \   000011   98           SUBB      A,R0
   \   000012   F8           MOV       R0,A
   \   000013   ED           MOV       A,R5
   \   000014   99           SUBB      A,R1
   \   000015   F9           MOV       R1,A
   \   000016   C3           CLR       C
   \   000017   E8           MOV       A,R0
   \   000018   94C9         SUBB      A,#-0x37
   \   00001A   E9           MOV       A,R1
   \   00001B   9400         SUBB      A,#0x0
   \   00001D   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00001F   65D0         XRL       A,PSW
   \   000021   33           RLC       A
   \   000022   5022         JNC       ??touchLink_NewNwkUpdateId_1
   \                     ??touchLink_NewNwkUpdateId_0:
   \   000024   EB           MOV       A,R3
   \   000025   C3           CLR       C
   \   000026   9A           SUBB      A,R2
   \   000027   502C         JNC       ??touchLink_NewNwkUpdateId_2
   \   000029   EA           MOV       A,R2
   \   00002A   FC           MOV       R4,A
   \   00002B   7D00         MOV       R5,#0x0
   \   00002D   EB           MOV       A,R3
   \   00002E   F8           MOV       R0,A
   \   00002F   7900         MOV       R1,#0x0
   \   000031   EC           MOV       A,R4
   \   000032   C3           CLR       C
   \   000033   98           SUBB      A,R0
   \   000034   F8           MOV       R0,A
   \   000035   ED           MOV       A,R5
   \   000036   99           SUBB      A,R1
   \   000037   F9           MOV       R1,A
   \   000038   C3           CLR       C
   \   000039   E8           MOV       A,R0
   \   00003A   94C9         SUBB      A,#-0x37
   \   00003C   E9           MOV       A,R1
   \   00003D   9400         SUBB      A,#0x0
   \   00003F   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000041   65D0         XRL       A,PSW
   \   000043   33           RLC       A
   \   000044   400F         JC        ??touchLink_NewNwkUpdateId_2
   1089            {
   1090              return ( MIN( ID1, ID2 ) );
   \                     ??touchLink_NewNwkUpdateId_1:
   \   000046   EB           MOV       A,R3
   \   000047   C3           CLR       C
   \   000048   9A           SUBB      A,R2
   \   000049   5004         JNC       ??touchLink_NewNwkUpdateId_3
   \   00004B   EB           MOV       A,R3
   \   00004C   F8           MOV       R0,A
   \   00004D   8002         SJMP      ??touchLink_NewNwkUpdateId_4
   \                     ??touchLink_NewNwkUpdateId_3:
   \   00004F   EA           MOV       A,R2
   \   000050   F8           MOV       R0,A
   \                     ??touchLink_NewNwkUpdateId_4:
   \   000051   E8           MOV       A,R0
   \   000052   F9           MOV       R1,A
   \   000053   800B         SJMP      ??touchLink_NewNwkUpdateId_5
   1091            }
   1092          
   1093            return ( MAX( ID1, ID2 ) );
   \                     ??touchLink_NewNwkUpdateId_2:
   \   000055   EB           MOV       A,R3
   \   000056   C3           CLR       C
   \   000057   9A           SUBB      A,R2
   \   000058   5004         JNC       ??touchLink_NewNwkUpdateId_6
   \   00005A   EA           MOV       A,R2
   \   00005B   F9           MOV       R1,A
   \   00005C   8002         SJMP      ??touchLink_NewNwkUpdateId_5
   \                     ??touchLink_NewNwkUpdateId_6:
   \   00005E   EB           MOV       A,R3
   \   00005F   F9           MOV       R1,A
   \                     ??touchLink_NewNwkUpdateId_5:
   \   000060   02....       LJMP      ?BRET
   1094          }
   1095          
   1096          /*********************************************************************
   1097           * @fn      touchLink_SetTouchLinkTaskId
   1098           *
   1099           * @brief   Register Target/Initiator taskID for commissioning events
   1100           *
   1101           * @param   taskID
   1102           *
   1103           * @return  none
   1104           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1105          void touchLink_SetTouchLinkTaskId( uint8 taskID )
   \                     touchLink_SetTouchLinkTaskId:
   1106          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   1107            touchLinkTaskId = taskID;
   \   000007   EE           MOV       A,R6
   \   000008   90....       MOV       DPTR,#touchLinkTaskId
   \   00000B   F0           MOVX      @DPTR,A
   1108          
   1109            // register internal EP for TOUCHLINK messages
   1110            bdb_RegisterSimpleDescriptor( &touchLink_EP_SimpleDesc );
   \   00000C                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   00000C   7A..         MOV       R2,#touchLink_EP_SimpleDesc & 0xff
   \   00000E   7B..         MOV       R3,#(touchLink_EP_SimpleDesc >> 8) & 0xff
   \   000010   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
   1111          
   1112          #if defined( INTER_PAN )
   1113            // Register with Stub APS
   1114            StubAPS_RegisterApp( &touchLink_EP );
   \   000013                ; Setup parameters for call to function StubAPS_RegisterApp
   \   000013   7A..         MOV       R2,#touchLink_EP & 0xff
   \   000015   7B..         MOV       R3,#(touchLink_EP >> 8) & 0xff
   \   000017   12....       LCALL     `??StubAPS_RegisterApp::?relay`; Banked call to: StubAPS_RegisterApp
   1115          #endif // INTER_PAN
   1116          }
   \   00001A   7F01         MOV       R7,#0x1
   \   00001C   02....       LJMP      ?BANKED_LEAVE_XDATA
   1117          
   1118          /*********************************************************************
   1119           * @fn      touchLink_PerformNetworkDisc
   1120           *
   1121           * @brief   Perform a Network Discovery scan.
   1122           *          Scan results will be stored locally to analyze.
   1123           *
   1124           * @param   scanChannelList - channels to perform discovery scan
   1125           *
   1126           * @return  void
   1127           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1128          void touchLink_PerformNetworkDisc( uint32 scanChannelList )
   \                     touchLink_PerformNetworkDisc:
   1129          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV       A,#-0x7
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   8C..         MOV       ?V2,R4
   \   000010   8D..         MOV       ?V3,R5
   1130            NLME_ScanFields_t scan;
   1131          
   1132            scan.channels = scanChannelList;
   \   000012   85..82       MOV       DPL,?XSP + 0
   \   000015   85..83       MOV       DPH,?XSP + 1
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?L_MOV_TO_X
   1133            scan.duration = BEACON_ORDER_240_MSEC;
   \   00001D   7404         MOV       A,#0x4
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   7404         MOV       A,#0x4
   \   000024   F0           MOVX      @DPTR,A
   1134            scan.scanType = ZMAC_ACTIVE_SCAN;
   \   000025   7405         MOV       A,#0x5
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   7401         MOV       A,#0x1
   \   00002C   F0           MOVX      @DPTR,A
   1135            scan.scanApp  = NLME_DISC_SCAN;
   \   00002D   7406         MOV       A,#0x6
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   7401         MOV       A,#0x1
   \   000034   F0           MOVX      @DPTR,A
   1136          
   1137            if ( NLME_NwkDiscReq2( &scan ) == ZSuccess )
   \   000035                ; Setup parameters for call to function NLME_NwkDiscReq2
   \   000035   AA..         MOV       R2,?XSP + 0
   \   000037   AB..         MOV       R3,?XSP + 1
   \   000039   12....       LCALL     `??NLME_NwkDiscReq2::?relay`; Banked call to: NLME_NwkDiscReq2
   \   00003C   E9           MOV       A,R1
   \   00003D   7016         JNZ       ??touchLink_PerformNetworkDisc_0
   1138            {
   1139              // Register ZDO callback to handle the network discovery confirm and
   1140              // beacon notification confirm
   1141              ZDO_RegisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID, touchLink_NwkDiscoveryCnfCB );
   \   00003F                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   00003F   7A..         MOV       R2,#`??touchLink_NwkDiscoveryCnfCB::?relay` & 0xff
   \   000041   7B..         MOV       R3,#(`??touchLink_NwkDiscoveryCnfCB::?relay` >> 8) & 0xff
   \   000043   7902         MOV       R1,#0x2
   \   000045   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   \   000048   E9           MOV       A,R1
   1142              ZDO_RegisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID, touchLink_BeaconIndCB );
   \   000049                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000049   7A..         MOV       R2,#`??touchLink_BeaconIndCB::?relay` & 0xff
   \   00004B   7B..         MOV       R3,#(`??touchLink_BeaconIndCB::?relay` >> 8) & 0xff
   \   00004D   7903         MOV       R1,#0x3
   \   00004F   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   \   000052   E9           MOV       A,R1
   \   000053   8003         SJMP      ??touchLink_PerformNetworkDisc_1
   1143            }
   1144            else
   1145            {
   1146              NLME_NwkDiscTerm();
   \                     ??touchLink_PerformNetworkDisc_0:
   \   000055                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000055   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1147            }
   1148          }
   \                     ??touchLink_PerformNetworkDisc_1:
   \   000058   7407         MOV       A,#0x7
   \   00005A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005D   7F04         MOV       R7,#0x4
   \   00005F   02....       LJMP      ?BANKED_LEAVE_XDATA
   1149          
   1150          /*********************************************************************
   1151           * @fn      touchLink_BeaconIndCB
   1152           *
   1153           * @brief   Process the incoming beacon indication.
   1154           *
   1155           * @param   param -  pointer to a parameter and a structure of parameters
   1156           *
   1157           * @return  void
   1158           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1159          static void *touchLink_BeaconIndCB ( void *param )
   \                     touchLink_BeaconIndCB:
   1160          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   1161            NLME_beaconInd_t *pBeacon = param;
   \   000009   85....       MOV       ?V0,?V6
   \   00000C   85....       MOV       ?V1,?V7
   1162            touchLinkDiscoveredNwkParam_t *pParam = pDiscoveredNwkParamList;
   \   00000F   90....       MOV       DPTR,#pDiscoveredNwkParamList
   \   000012   E0           MOVX      A,@DPTR
   \   000013   FE           MOV       R6,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   FF           MOV       R7,A
   1163            touchLinkDiscoveredNwkParam_t *pLastParam;
   1164            uint8 found = FALSE;
   \   000017   75..00       MOV       ?V2,#0x0
   1165          
   1166          
   1167            // Add the network parameter to the Network Parameter List
   1168            while ( pParam != NULL )
   \                     ??touchLink_BeaconIndCB_0:
   \   00001A   EE           MOV       A,R6
   \   00001B   4F           ORL       A,R7
   \   00001C   6048         JZ        ??touchLink_BeaconIndCB_1
   1169            {
   1170              if ( ( pParam->PANID == pBeacon->panID ) &&
   1171                  ( pParam->logicalChannel == pBeacon->logicalChannel ) )
   \   00001E   8E82         MOV       DPL,R6
   \   000020   8F83         MOV       DPH,R7
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F8           MOV       R0,A
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F9           MOV       R1,A
   \   000029   85..82       MOV       DPL,?V0
   \   00002C   85..83       MOV       DPH,?V1
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   68           XRL       A,R0
   \   000033   7003         JNZ       ??touchLink_BeaconIndCB_2
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   69           XRL       A,R1
   \                     ??touchLink_BeaconIndCB_2:
   \   000038   701D         JNZ       ??touchLink_BeaconIndCB_3
   \   00003A   8E82         MOV       DPL,R6
   \   00003C   8F83         MOV       DPH,R7
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F8           MOV       R0,A
   \   000044   85..82       MOV       DPL,?V0
   \   000047   85..83       MOV       DPH,?V1
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   68           XRL       A,R0
   \   000050   7005         JNZ       ??touchLink_BeaconIndCB_3
   1172              {
   1173                found = TRUE;
   \   000052   75..01       MOV       ?V2,#0x1
   1174                break;
   \   000055   800F         SJMP      ??touchLink_BeaconIndCB_1
   1175              }
   1176              
   1177              pLastParam = pParam;
   \                     ??touchLink_BeaconIndCB_3:
   \   000057   8E..         MOV       ?V4,R6
   \   000059   8F..         MOV       ?V5,R7
   1178              pParam = pParam->nextParam;
   \   00005B   8E82         MOV       DPL,R6
   \   00005D   8F83         MOV       DPH,R7
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   FE           MOV       R6,A
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   FF           MOV       R7,A
   \   000064   80B4         SJMP      ??touchLink_BeaconIndCB_0
   1179            }
   1180            
   1181            // If no existing parameter found, make a new one and add to the list
   1182            if ( found == FALSE )
   \                     ??touchLink_BeaconIndCB_1:
   \   000066   E5..         MOV       A,?V2
   \   000068   7064         JNZ       ??touchLink_BeaconIndCB_4
   1183            {
   1184              pParam = osal_mem_alloc( sizeof( touchLinkDiscoveredNwkParam_t ) );
   \   00006A                ; Setup parameters for call to function osal_mem_alloc
   \   00006A   7A13         MOV       R2,#0x13
   \   00006C   7B00         MOV       R3,#0x0
   \   00006E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000071   8A..         MOV       ?V8,R2
   \   000073   8B..         MOV       ?V9,R3
   \   000075   AE..         MOV       R6,?V8
   \   000077   AF..         MOV       R7,?V9
   1185              if ( pParam == NULL )
   \   000079   EE           MOV       A,R6
   \   00007A   4F           ORL       A,R7
   \   00007B   7007         JNZ       ??touchLink_BeaconIndCB_5
   1186              {
   1187                // Memory alloc failed, discard this beacon
   1188                return ( NULL );
   \   00007D   7A00         MOV       R2,#0x0
   \   00007F   7B00         MOV       R3,#0x0
   \   000081   02....       LJMP      ??touchLink_BeaconIndCB_6 & 0xFFFF
   1189              }
   1190              
   1191              // Clear the network descriptor
   1192              osal_memset( pParam, 0, sizeof( touchLinkDiscoveredNwkParam_t )  );
   \                     ??touchLink_BeaconIndCB_5:
   \   000084                ; Setup parameters for call to function osal_memset
   \   000084   7C13         MOV       R4,#0x13
   \   000086   7D00         MOV       R5,#0x0
   \   000088   7900         MOV       R1,#0x0
   \   00008A   EE           MOV       A,R6
   \   00008B   FA           MOV       R2,A
   \   00008C   EF           MOV       A,R7
   \   00008D   FB           MOV       R3,A
   \   00008E   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1193              
   1194              // Initialize the descriptor
   1195              pParam->chosenRouter = INVALID_NODE_ADDR;
   \   000091   EE           MOV       A,R6
   \   000092   240D         ADD       A,#0xd
   \   000094   F582         MOV       DPL,A
   \   000096   E4           CLR       A
   \   000097   3F           ADDC      A,R7
   \   000098   F583         MOV       DPH,A
   \   00009A   74FE         MOV       A,#-0x2
   \   00009C   F0           MOVX      @DPTR,A
   \   00009D   A3           INC       DPTR
   \   00009E   74FF         MOV       A,#-0x1
   \   0000A0   F0           MOVX      @DPTR,A
   1196              pParam->chosenRouterDepth = 0xFF;
   \   0000A1   EE           MOV       A,R6
   \   0000A2   2410         ADD       A,#0x10
   \   0000A4   F582         MOV       DPL,A
   \   0000A6   E4           CLR       A
   \   0000A7   3F           ADDC      A,R7
   \   0000A8   F583         MOV       DPH,A
   \   0000AA   74FF         MOV       A,#-0x1
   \   0000AC   F0           MOVX      @DPTR,A
   1197              
   1198              // Save new entry into the descriptor list
   1199              if ( pDiscoveredNwkParamList == NULL )
   \   0000AD   90....       MOV       DPTR,#pDiscoveredNwkParamList
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   F8           MOV       R0,A
   \   0000B2   A3           INC       DPTR
   \   0000B3   E0           MOVX      A,@DPTR
   \   0000B4   F9           MOV       R1,A
   \   0000B5   E8           MOV       A,R0
   \   0000B6   49           ORL       A,R1
   \   0000B7   700A         JNZ       ??touchLink_BeaconIndCB_7
   1200              {
   1201                // First element in the list
   1202                pDiscoveredNwkParamList = pParam;
   \   0000B9   90....       MOV       DPTR,#pDiscoveredNwkParamList
   \   0000BC   EE           MOV       A,R6
   \   0000BD   F0           MOVX      @DPTR,A
   \   0000BE   A3           INC       DPTR
   \   0000BF   EF           MOV       A,R7
   \   0000C0   F0           MOVX      @DPTR,A
   \   0000C1   800B         SJMP      ??touchLink_BeaconIndCB_4
   1203              }
   1204              else
   1205              {
   1206                // Last element in the list
   1207                pLastParam->nextParam = pParam;
   \                     ??touchLink_BeaconIndCB_7:
   \   0000C3   85..82       MOV       DPL,?V4
   \   0000C6   85..83       MOV       DPH,?V5
   \   0000C9   EE           MOV       A,R6
   \   0000CA   F0           MOVX      @DPTR,A
   \   0000CB   A3           INC       DPTR
   \   0000CC   EF           MOV       A,R7
   \   0000CD   F0           MOVX      @DPTR,A
   1208              }
   1209            }
   1210            
   1211            // Update the descriptor with the incoming beacon
   1212            pParam->logicalChannel = pBeacon->logicalChannel;
   \                     ??touchLink_BeaconIndCB_4:
   \   0000CE   85..82       MOV       DPL,?V0
   \   0000D1   85..83       MOV       DPH,?V1
   \   0000D4   A3           INC       DPTR
   \   0000D5   A3           INC       DPTR
   \   0000D6   A3           INC       DPTR
   \   0000D7   A3           INC       DPTR
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   C0E0         PUSH      A
   \   0000DB   8E82         MOV       DPL,R6
   \   0000DD   8F83         MOV       DPH,R7
   \   0000DF   A3           INC       DPTR
   \   0000E0   A3           INC       DPTR
   \   0000E1   A3           INC       DPTR
   \   0000E2   A3           INC       DPTR
   \   0000E3   D0E0         POP       A
   \   0000E5   F0           MOVX      @DPTR,A
   1213            pParam->PANID          = pBeacon->panID;
   \   0000E6   85..82       MOV       DPL,?V0
   \   0000E9   85..83       MOV       DPH,?V1
   \   0000EC   A3           INC       DPTR
   \   0000ED   A3           INC       DPTR
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   F8           MOV       R0,A
   \   0000F0   A3           INC       DPTR
   \   0000F1   E0           MOVX      A,@DPTR
   \   0000F2   F9           MOV       R1,A
   \   0000F3   8E82         MOV       DPL,R6
   \   0000F5   8F83         MOV       DPH,R7
   \   0000F7   A3           INC       DPTR
   \   0000F8   A3           INC       DPTR
   \   0000F9   E8           MOV       A,R0
   \   0000FA   F0           MOVX      @DPTR,A
   \   0000FB   A3           INC       DPTR
   \   0000FC   E9           MOV       A,R1
   \   0000FD   F0           MOVX      @DPTR,A
   1214            
   1215            // Save the extended PAN ID from the beacon payload only if 1.1 version network
   1216            if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
   \   0000FE   85..82       MOV       DPL,?V0
   \   000101   85..83       MOV       DPH,?V1
   \   000104   A3           INC       DPTR
   \   000105   A3           INC       DPTR
   \   000106   A3           INC       DPTR
   \   000107   A3           INC       DPTR
   \   000108   A3           INC       DPTR
   \   000109   A3           INC       DPTR
   \   00010A   A3           INC       DPTR
   \   00010B   A3           INC       DPTR
   \   00010C   E0           MOVX      A,@DPTR
   \   00010D   6401         XRL       A,#0x1
   \   00010F   6015         JZ        ??touchLink_BeaconIndCB_8
   1217            {
   1218              osal_cpyExtAddr( pParam->extendedPANID, pBeacon->extendedPanID );
   \   000111                ; Setup parameters for call to function sAddrExtCpy
   \   000111   E5..         MOV       A,?V0
   \   000113   240D         ADD       A,#0xd
   \   000115   FC           MOV       R4,A
   \   000116   E4           CLR       A
   \   000117   35..         ADDC      A,?V1
   \   000119   FD           MOV       R5,A
   \   00011A   EE           MOV       A,R6
   \   00011B   2405         ADD       A,#0x5
   \   00011D   FA           MOV       R2,A
   \   00011E   E4           CLR       A
   \   00011F   3F           ADDC      A,R7
   \   000120   FB           MOV       R3,A
   \   000121   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000124   8010         SJMP      ??touchLink_BeaconIndCB_9
   1219            }
   1220            else
   1221            {
   1222              osal_memset( pParam->extendedPANID, 0xFF, Z_EXTADDR_LEN );
   \                     ??touchLink_BeaconIndCB_8:
   \   000126                ; Setup parameters for call to function osal_memset
   \   000126   7C08         MOV       R4,#0x8
   \   000128   7D00         MOV       R5,#0x0
   \   00012A   79FF         MOV       R1,#-0x1
   \   00012C   EE           MOV       A,R6
   \   00012D   2405         ADD       A,#0x5
   \   00012F   FA           MOV       R2,A
   \   000130   E4           CLR       A
   \   000131   3F           ADDC      A,R7
   \   000132   FB           MOV       R3,A
   \   000133   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1223            }
   1224            
   1225            // check if this device is a better choice to join...
   1226            // ...dont bother checking assocPermit flag is doing a rejoin
   1227            if ( pBeacon->LQI > gMIN_TREE_LQI )
   \                     ??touchLink_BeaconIndCB_9:
   \   000136   85..82       MOV       DPL,?V0
   \   000139   85..83       MOV       DPH,?V1
   \   00013C   A3           INC       DPTR
   \   00013D   A3           INC       DPTR
   \   00013E   A3           INC       DPTR
   \   00013F   A3           INC       DPTR
   \   000140   A3           INC       DPTR
   \   000141   A3           INC       DPTR
   \   000142   A3           INC       DPTR
   \   000143   A3           INC       DPTR
   \   000144   A3           INC       DPTR
   \   000145   A3           INC       DPTR
   \   000146   E0           MOVX      A,@DPTR
   \   000147   F8           MOV       R0,A
   \   000148   90....       MOV       DPTR,#gMIN_TREE_LQI
   \   00014B   E0           MOVX      A,@DPTR
   \   00014C   C3           CLR       C
   \   00014D   98           SUBB      A,R0
   \   00014E   4003         JC        $+5
   \   000150   02....       LJMP      ??touchLink_BeaconIndCB_10 & 0xFFFF
   1228            {
   1229              uint8 selected = FALSE;
   \   000153   7800         MOV       R0,#0x0
   1230              uint8 capacity = FALSE;
   \   000155   7900         MOV       R1,#0x0
   1231              
   1232              if ( _NIB.spare3 == ZIGBEEPRO )
   \   000157   90....       MOV       DPTR,#_NIB + 96
   \   00015A   E0           MOVX      A,@DPTR
   \   00015B   6401         XRL       A,#0x1
   \   00015D   706F         JNZ       ??touchLink_BeaconIndCB_11
   1233              {
   1234                if ( ((pBeacon->LQI   > pParam->chosenRouterLinkQuality) &&
   1235                      (pBeacon->depth < MAX_NODE_DEPTH)) ||
   1236                    ((pBeacon->LQI   == pParam->chosenRouterLinkQuality) &&
   1237                     (pBeacon->depth < pParam->chosenRouterDepth)) )
   \   00015F   85..82       MOV       DPL,?V0
   \   000162   85..83       MOV       DPH,?V1
   \   000165   A3           INC       DPTR
   \   000166   A3           INC       DPTR
   \   000167   A3           INC       DPTR
   \   000168   A3           INC       DPTR
   \   000169   A3           INC       DPTR
   \   00016A   A3           INC       DPTR
   \   00016B   A3           INC       DPTR
   \   00016C   A3           INC       DPTR
   \   00016D   A3           INC       DPTR
   \   00016E   A3           INC       DPTR
   \   00016F   E0           MOVX      A,@DPTR
   \   000170   FA           MOV       R2,A
   \   000171   EE           MOV       A,R6
   \   000172   240F         ADD       A,#0xf
   \   000174   F582         MOV       DPL,A
   \   000176   E4           CLR       A
   \   000177   3F           ADDC      A,R7
   \   000178   F583         MOV       DPH,A
   \   00017A   E0           MOVX      A,@DPTR
   \   00017B   C3           CLR       C
   \   00017C   9A           SUBB      A,R2
   \   00017D   5011         JNC       ??touchLink_BeaconIndCB_12
   \   00017F   E5..         MOV       A,?V0
   \   000181   240B         ADD       A,#0xb
   \   000183   F582         MOV       DPL,A
   \   000185   E4           CLR       A
   \   000186   35..         ADDC      A,?V1
   \   000188   F583         MOV       DPH,A
   \   00018A   E0           MOVX      A,@DPTR
   \   00018B   C3           CLR       C
   \   00018C   9414         SUBB      A,#0x14
   \   00018E   403A         JC        ??touchLink_BeaconIndCB_13
   \                     ??touchLink_BeaconIndCB_12:
   \   000190   85..82       MOV       DPL,?V0
   \   000193   85..83       MOV       DPH,?V1
   \   000196   A3           INC       DPTR
   \   000197   A3           INC       DPTR
   \   000198   A3           INC       DPTR
   \   000199   A3           INC       DPTR
   \   00019A   A3           INC       DPTR
   \   00019B   A3           INC       DPTR
   \   00019C   A3           INC       DPTR
   \   00019D   A3           INC       DPTR
   \   00019E   A3           INC       DPTR
   \   00019F   A3           INC       DPTR
   \   0001A0   E0           MOVX      A,@DPTR
   \   0001A1   FA           MOV       R2,A
   \   0001A2   EE           MOV       A,R6
   \   0001A3   240F         ADD       A,#0xf
   \   0001A5   F582         MOV       DPL,A
   \   0001A7   E4           CLR       A
   \   0001A8   3F           ADDC      A,R7
   \   0001A9   F583         MOV       DPH,A
   \   0001AB   E0           MOVX      A,@DPTR
   \   0001AC   6A           XRL       A,R2
   \   0001AD   703C         JNZ       ??touchLink_BeaconIndCB_14
   \   0001AF   EE           MOV       A,R6
   \   0001B0   2410         ADD       A,#0x10
   \   0001B2   F582         MOV       DPL,A
   \   0001B4   E4           CLR       A
   \   0001B5   3F           ADDC      A,R7
   \   0001B6   F583         MOV       DPH,A
   \   0001B8   E0           MOVX      A,@DPTR
   \   0001B9   FA           MOV       R2,A
   \   0001BA   E5..         MOV       A,?V0
   \   0001BC   240B         ADD       A,#0xb
   \   0001BE   F582         MOV       DPL,A
   \   0001C0   E4           CLR       A
   \   0001C1   35..         ADDC      A,?V1
   \   0001C3   F583         MOV       DPH,A
   \   0001C5   E0           MOVX      A,@DPTR
   \   0001C6   C3           CLR       C
   \   0001C7   9A           SUBB      A,R2
   \   0001C8   5021         JNC       ??touchLink_BeaconIndCB_14
   1238                {
   1239                  selected = TRUE;
   \                     ??touchLink_BeaconIndCB_13:
   \   0001CA   7801         MOV       R0,#0x1
   \   0001CC   801D         SJMP      ??touchLink_BeaconIndCB_14
   1240                }
   1241              }
   1242              else
   1243              {
   1244                if ( pBeacon->depth < pParam->chosenRouterDepth )
   \                     ??touchLink_BeaconIndCB_11:
   \   0001CE   EE           MOV       A,R6
   \   0001CF   2410         ADD       A,#0x10
   \   0001D1   F582         MOV       DPL,A
   \   0001D3   E4           CLR       A
   \   0001D4   3F           ADDC      A,R7
   \   0001D5   F583         MOV       DPH,A
   \   0001D7   E0           MOVX      A,@DPTR
   \   0001D8   FA           MOV       R2,A
   \   0001D9   E5..         MOV       A,?V0
   \   0001DB   240B         ADD       A,#0xb
   \   0001DD   F582         MOV       DPL,A
   \   0001DF   E4           CLR       A
   \   0001E0   35..         ADDC      A,?V1
   \   0001E2   F583         MOV       DPH,A
   \   0001E4   E0           MOVX      A,@DPTR
   \   0001E5   C3           CLR       C
   \   0001E6   9A           SUBB      A,R2
   \   0001E7   5002         JNC       ??touchLink_BeaconIndCB_14
   1245                {
   1246                  selected = TRUE;
   \   0001E9   7801         MOV       R0,#0x1
   1247                }
   1248              }
   1249              
   1250              capacity = pBeacon->routerCapacity;
   \                     ??touchLink_BeaconIndCB_14:
   \   0001EB   85..82       MOV       DPL,?V0
   \   0001EE   85..83       MOV       DPH,?V1
   \   0001F1   A3           INC       DPTR
   \   0001F2   A3           INC       DPTR
   \   0001F3   A3           INC       DPTR
   \   0001F4   A3           INC       DPTR
   \   0001F5   A3           INC       DPTR
   \   0001F6   A3           INC       DPTR
   \   0001F7   E0           MOVX      A,@DPTR
   \   0001F8   F9           MOV       R1,A
   1251              
   1252              if ( (capacity) && (selected) )
   \   0001F9   E9           MOV       A,R1
   \   0001FA   6055         JZ        ??touchLink_BeaconIndCB_15
   \   0001FC   E8           MOV       A,R0
   \   0001FD   6052         JZ        ??touchLink_BeaconIndCB_15
   1253              {
   1254                // this is the new chosen router for joining...
   1255                pParam->chosenRouter            = pBeacon->sourceAddr;
   \   0001FF   85..82       MOV       DPL,?V0
   \   000202   85..83       MOV       DPH,?V1
   \   000205   E0           MOVX      A,@DPTR
   \   000206   FA           MOV       R2,A
   \   000207   A3           INC       DPTR
   \   000208   E0           MOVX      A,@DPTR
   \   000209   FB           MOV       R3,A
   \   00020A   EE           MOV       A,R6
   \   00020B   240D         ADD       A,#0xd
   \   00020D   F582         MOV       DPL,A
   \   00020F   E4           CLR       A
   \   000210   3F           ADDC      A,R7
   \   000211   F583         MOV       DPH,A
   \   000213   EA           MOV       A,R2
   \   000214   F0           MOVX      @DPTR,A
   \   000215   A3           INC       DPTR
   \   000216   EB           MOV       A,R3
   \   000217   F0           MOVX      @DPTR,A
   1256                pParam->chosenRouterLinkQuality = pBeacon->LQI;
   \   000218   85..82       MOV       DPL,?V0
   \   00021B   85..83       MOV       DPH,?V1
   \   00021E   A3           INC       DPTR
   \   00021F   A3           INC       DPTR
   \   000220   A3           INC       DPTR
   \   000221   A3           INC       DPTR
   \   000222   A3           INC       DPTR
   \   000223   A3           INC       DPTR
   \   000224   A3           INC       DPTR
   \   000225   A3           INC       DPTR
   \   000226   A3           INC       DPTR
   \   000227   A3           INC       DPTR
   \   000228   E0           MOVX      A,@DPTR
   \   000229   C0E0         PUSH      A
   \   00022B   EE           MOV       A,R6
   \   00022C   240F         ADD       A,#0xf
   \   00022E   F582         MOV       DPL,A
   \   000230   E4           CLR       A
   \   000231   3F           ADDC      A,R7
   \   000232   F583         MOV       DPH,A
   \   000234   D0E0         POP       A
   \   000236   F0           MOVX      @DPTR,A
   1257                pParam->chosenRouterDepth       = pBeacon->depth;
   \   000237   E5..         MOV       A,?V0
   \   000239   240B         ADD       A,#0xb
   \   00023B   F582         MOV       DPL,A
   \   00023D   E4           CLR       A
   \   00023E   35..         ADDC      A,?V1
   \   000240   F583         MOV       DPH,A
   \   000242   E0           MOVX      A,@DPTR
   \   000243   C0E0         PUSH      A
   \   000245   EE           MOV       A,R6
   \   000246   2410         ADD       A,#0x10
   \   000248   F582         MOV       DPL,A
   \   00024A   E4           CLR       A
   \   00024B   3F           ADDC      A,R7
   \   00024C   F583         MOV       DPH,A
   \   00024E   D0E0         POP       A
   \   000250   F0           MOVX      @DPTR,A
   1258              }
   1259              
   1260              if ( pBeacon->deviceCapacity )
   \                     ??touchLink_BeaconIndCB_15:
   \   000251   85..82       MOV       DPL,?V0
   \   000254   85..83       MOV       DPH,?V1
   \   000257   A3           INC       DPTR
   \   000258   A3           INC       DPTR
   \   000259   A3           INC       DPTR
   \   00025A   A3           INC       DPTR
   \   00025B   A3           INC       DPTR
   \   00025C   A3           INC       DPTR
   \   00025D   A3           INC       DPTR
   \   00025E   E0           MOVX      A,@DPTR
   \   00025F   600C         JZ        ??touchLink_BeaconIndCB_16
   1261                pParam->deviceCapacity = 1;
   \   000261   EE           MOV       A,R6
   \   000262   2412         ADD       A,#0x12
   \   000264   F582         MOV       DPL,A
   \   000266   E4           CLR       A
   \   000267   3F           ADDC      A,R7
   \   000268   F583         MOV       DPH,A
   \   00026A   7401         MOV       A,#0x1
   \   00026C   F0           MOVX      @DPTR,A
   1262              
   1263              if ( pBeacon->routerCapacity )
   \                     ??touchLink_BeaconIndCB_16:
   \   00026D   85..82       MOV       DPL,?V0
   \   000270   85..83       MOV       DPH,?V1
   \   000273   A3           INC       DPTR
   \   000274   A3           INC       DPTR
   \   000275   A3           INC       DPTR
   \   000276   A3           INC       DPTR
   \   000277   A3           INC       DPTR
   \   000278   A3           INC       DPTR
   \   000279   E0           MOVX      A,@DPTR
   \   00027A   600C         JZ        ??touchLink_BeaconIndCB_10
   1264                pParam->routerCapacity = 1;
   \   00027C   EE           MOV       A,R6
   \   00027D   2411         ADD       A,#0x11
   \   00027F   F582         MOV       DPL,A
   \   000281   E4           CLR       A
   \   000282   3F           ADDC      A,R7
   \   000283   F583         MOV       DPH,A
   \   000285   7401         MOV       A,#0x1
   \   000287   F0           MOVX      @DPTR,A
   1265            }
   1266              
   1267            return ( NULL );
   \                     ??touchLink_BeaconIndCB_10:
   \   000288   7A00         MOV       R2,#0x0
   \   00028A   7B00         MOV       R3,#0x0
   \                     ??touchLink_BeaconIndCB_6:
   \   00028C   7F0A         MOV       R7,#0xa
   \   00028E   02....       LJMP      ?BANKED_LEAVE_XDATA
   1268          }
   1269          
   1270          /*********************************************************************
   1271           * @fn      touchLink_NwkDiscoveryCnfCB
   1272           *
   1273           * @brief   Send an event to inform the target the completion of
   1274           *          network discovery scan
   1275           *
   1276           * @param   param - pointer to a parameter and a structure of parameters
   1277           *
   1278           * @return  void
   1279           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1280          static void *touchLink_NwkDiscoveryCnfCB ( void *param )
   \                     touchLink_NwkDiscoveryCnfCB:
   1281          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1282          #if ( BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE )
   1283            // Scan completed. De-register the callbacks with ZDO
   1284            ZDO_DeregisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID );
   \   000009                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   000009   7902         MOV       R1,#0x2
   \   00000B   12....       LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   \   00000E   E9           MOV       A,R1
   1285            ZDO_DeregisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID );
   \   00000F                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   00000F   7903         MOV       R1,#0x3
   \   000011   12....       LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   \   000014   E9           MOV       A,R1
   1286          
   1287            NLME_NwkDiscTerm();
   \   000015                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000015   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1288          
   1289            if ( pDiscoveredNwkParamList != NULL )
   \   000018   90....       MOV       DPTR,#pDiscoveredNwkParamList
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F8           MOV       R0,A
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F9           MOV       R1,A
   \   000020   E8           MOV       A,R0
   \   000021   49           ORL       A,R1
   \   000022   600F         JZ        ??touchLink_NwkDiscoveryCnfCB_0
   1290            {
   1291              // proceed to join the network, otherwise
   1292              // Notify our task
   1293              osal_set_event( touchLinkTaskId, TOUCHLINK_NWK_DISC_CNF_EVT );
   \   000024                ; Setup parameters for call to function osal_set_event
   \   000024   7A01         MOV       R2,#0x1
   \   000026   7B00         MOV       R3,#0x0
   \   000028   90....       MOV       DPTR,#touchLinkTaskId
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F9           MOV       R1,A
   \   00002D   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000030   E9           MOV       A,R1
   \   000031   801A         SJMP      ??touchLink_NwkDiscoveryCnfCB_1
   1294            }
   1295            else
   1296            {
   1297              // no suitable network in secondary channel list, then just wait for touchlink
   1298          #if ( ZSTACK_ROUTER_BUILD )
   1299              // Try to create a new distributed network
   1300              osal_set_event( touchLinkTaskId, TOUCHLINK_NWK_DISC_CNF_EVT );
   1301          #elif ( ZSTACK_END_DEVICE_BUILD )
   1302              // Notify the BDB state machine 
   1303              bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   \                     ??touchLink_NwkDiscoveryCnfCB_0:
   \   000033   90....       MOV       DPTR,#bdbAttributes + 10
   \   000036   7402         MOV       A,#0x2
   \   000038   F0           MOVX      @DPTR,A
   1304              bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, FALSE );
   \   000039                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000039   7A00         MOV       R2,#0x0
   \   00003B   7902         MOV       R1,#0x2
   \   00003D   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   1305              // No parent to join in 
   1306              bdbCommissioningProcedureState.bdbCommissioningState = BDB_PARENT_LOST;
   \   000040   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000043   7408         MOV       A,#0x8
   \   000045   F0           MOVX      @DPTR,A
   1307              NLME_OrphanStateSet( );
   \   000046                ; Setup parameters for call to function NLME_OrphanStateSet
   \   000046   12....       LCALL     `??NLME_OrphanStateSet::?relay`; Banked call to: NLME_OrphanStateSet
   1308              bdb_ZedAttemptRecoverNwk( );
   \   000049                ; Setup parameters for call to function bdb_ZedAttemptRecoverNwk
   \   000049   12....       LCALL     `??bdb_ZedAttemptRecoverNwk::?relay`; Banked call to: bdb_ZedAttemptRecoverNwk
   \   00004C   E9           MOV       A,R1
   1309          #endif
   1310            }
   1311          
   1312          #else
   1313            (void)touchLinkTaskId;
   1314            (void)param;
   1315          #endif
   1316            return ( NULL );
   \                     ??touchLink_NwkDiscoveryCnfCB_1:
   \   00004D   7A00         MOV       R2,#0x0
   \   00004F   7B00         MOV       R3,#0x0
   \   000051   7F01         MOV       R7,#0x1
   \   000053   02....       LJMP      ?BANKED_LEAVE_XDATA
   1317          }
   1318          
   1319          /****************************************************************************
   1320           * @fn      touchLink_FreeNwkParamList
   1321           *
   1322           * @brief   This function frees any network discovery data.
   1323           *
   1324           * @param   none
   1325           *
   1326           * @return  none
   1327           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1328          void touchLink_FreeNwkParamList( void )
   \                     touchLink_FreeNwkParamList:
   1329          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1330            touchLinkDiscoveredNwkParam_t *pParam = pDiscoveredNwkParamList;
   \   000005   90....       MOV       DPTR,#pDiscoveredNwkParamList
   \   000008   E0           MOVX      A,@DPTR
   \   000009   FE           MOV       R6,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   FF           MOV       R7,A
   1331            touchLinkDiscoveredNwkParam_t *pNextParam;
   1332          
   1333            // deallocate the pDiscoveredNwkParamList memory
   1334            while ( pParam != NULL )
   \                     ??touchLink_FreeNwkParamList_0:
   \   00000D   EE           MOV       A,R6
   \   00000E   4F           ORL       A,R7
   \   00000F   601E         JZ        ??touchLink_FreeNwkParamList_1
   1335            {
   1336              pNextParam = pParam->nextParam;
   \   000011   8E82         MOV       DPL,R6
   \   000013   8F83         MOV       DPH,R7
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F8           MOV       R0,A
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F9           MOV       R1,A
   \   00001A   88..         MOV       ?V0,R0
   \   00001C   89..         MOV       ?V1,R1
   1337          
   1338              osal_mem_free( pParam );
   \   00001E                ; Setup parameters for call to function osal_mem_free
   \   00001E   EE           MOV       A,R6
   \   00001F   FA           MOV       R2,A
   \   000020   EF           MOV       A,R7
   \   000021   FB           MOV       R3,A
   \   000022   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1339          
   1340              pParam = pNextParam;
   \   000025   A8..         MOV       R0,?V0
   \   000027   A9..         MOV       R1,?V1
   \   000029   E8           MOV       A,R0
   \   00002A   FE           MOV       R6,A
   \   00002B   E9           MOV       A,R1
   \   00002C   FF           MOV       R7,A
   \   00002D   80DE         SJMP      ??touchLink_FreeNwkParamList_0
   1341            }
   1342          
   1343            pDiscoveredNwkParamList = NULL;
   \                     ??touchLink_FreeNwkParamList_1:
   \   00002F   90....       MOV       DPTR,#pDiscoveredNwkParamList
   \   000032   7400         MOV       A,#0x0
   \   000034   F0           MOVX      @DPTR,A
   \   000035   A3           INC       DPTR
   \   000036   7400         MOV       A,#0x0
   \   000038   F0           MOVX      @DPTR,A
   1344          }
   \   000039   7F02         MOV       R7,#0x2
   \   00003B   02....       LJMP      ?BANKED_LEAVE_XDATA
   1345          
   1346          /****************************************************************************
   1347           * @fn      touchLink_IsValidTransID
   1348           *
   1349           * @brief   Transaction ID Filter for Touch-Link received commands.
   1350           *
   1351           * @param   transID - received transaction ID
   1352           *
   1353           * @return  FALSE if not matching current or transaction expired
   1354           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1355          bool touchLink_IsValidTransID( uint32 transID )
   \                     touchLink_IsValidTransID:
   1356          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   1357            if ( ( touchLinkTransID == 0 ) || ( ( touchLinkTransID != transID ) && ( touchLinkLastAcceptedTransID != transID ) ) )
   \   00000D   90....       MOV       DPTR,#touchLinkTransID
   \   000010   12....       LCALL     ?XLOAD_R0123
   \   000013   E8           MOV       A,R0
   \   000014   49           ORL       A,R1
   \   000015   4A           ORL       A,R2
   \   000016   4B           ORL       A,R3
   \   000017   6014         JZ        ??touchLink_IsValidTransID_0
   \   000019   90....       MOV       DPTR,#touchLinkTransID
   \   00001C   78..         MOV       R0,#?V0
   \   00001E   12....       LCALL     ?L_EQ_X
   \   000021   600E         JZ        ??touchLink_IsValidTransID_1
   \   000023   90....       MOV       DPTR,#touchLinkLastAcceptedTransID
   \   000026   78..         MOV       R0,#?V0
   \   000028   12....       LCALL     ?L_EQ_X
   \   00002B   6004         JZ        ??touchLink_IsValidTransID_1
   1358            {
   1359              return ( FALSE );
   \                     ??touchLink_IsValidTransID_0:
   \   00002D   7900         MOV       R1,#0x0
   \   00002F   8002         SJMP      ??touchLink_IsValidTransID_2
   1360            }
   1361            return ( TRUE );
   \                     ??touchLink_IsValidTransID_1:
   \   000031   7901         MOV       R1,#0x1
   \                     ??touchLink_IsValidTransID_2:
   \   000033   7F04         MOV       R7,#0x4
   \   000035   02....       LJMP      ?BANKED_LEAVE_XDATA
   1362          }
   1363          
   1364          /*********************************************************************
   1365           * @fn      touchLink_RouterProcessZDOMsg
   1366           *
   1367           * @brief   Process incoming ZDO messages (for routers)
   1368           *
   1369           * @param   inMsg - message to process
   1370           *
   1371           * @return  none
   1372           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1373          void touchLink_RouterProcessZDOMsg( zdoIncomingMsg_t *inMsg )
   \                     touchLink_RouterProcessZDOMsg:
   1374          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1375            ZDO_DeviceAnnce_t devAnnce;
   1376          
   1377            switch ( inMsg->clusterID )
   \   00000E   EE           MOV       A,R6
   \   00000F   240C         ADD       A,#0xc
   \   000011   F582         MOV       DPL,A
   \   000013   E4           CLR       A
   \   000014   3F           ADDC      A,R7
   \   000015   F583         MOV       DPH,A
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V0,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V1,A
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?US_SWITCH_SPARSE
   \                     `?<Jumptable for touchLink_RouterProcessZDOMsg>_0`:
   \   000023   0000         DW        0
   \   000025   0200         DW        2
   \   000027   1300         DW        19
   \   000029   ....         DW        ??touchLink_RouterProcessZDOMsg_0
   \   00002B   3600         DW        54
   \   00002D   ....         DW        ??touchLink_RouterProcessZDOMsg_1
   \   00002F   ....         DW        ??touchLink_RouterProcessZDOMsg_2
   1378            {
   1379              case Device_annce:
   1380                {
   1381                  // all devices should send link status, including the one sending it
   1382                  ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
   \                     ??touchLink_RouterProcessZDOMsg_0:
   \   000031                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   000031   7401         MOV       A,#0x1
   \   000033   12....       LCALL     ?XSTACK_DISP102_8
   \   000036   EE           MOV       A,R6
   \   000037   FA           MOV       R2,A
   \   000038   EF           MOV       A,R7
   \   000039   FB           MOV       R3,A
   \   00003A   12....       LCALL     `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   1383          
   1384                  linkInfo_t *linkInfo;
   1385          
   1386                  // check if entry exists
   1387                  linkInfo = nwkNeighborGetLinkInfo( devAnnce.nwkAddr, _NIB.nwkPanId );
   \   00003D                ; Setup parameters for call to function nwkNeighborGetLinkInfo
   \   00003D   90....       MOV       DPTR,#_NIB + 33
   \   000040   E0           MOVX      A,@DPTR
   \   000041   FC           MOV       R4,A
   \   000042   A3           INC       DPTR
   \   000043   E0           MOVX      A,@DPTR
   \   000044   FD           MOV       R5,A
   \   000045   7401         MOV       A,#0x1
   \   000047   12....       LCALL     ?XSTACK_DISP0_8
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   FA           MOV       R2,A
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   FB           MOV       R3,A
   \   00004F   12....       LCALL     `??nwkNeighborGetLinkInfo::?relay`; Banked call to: nwkNeighborGetLinkInfo
   \   000052   8A..         MOV       ?V2,R2
   \   000054   8B..         MOV       ?V3,R3
   \   000056   85....       MOV       ?V0,?V2
   \   000059   85....       MOV       ?V1,?V3
   1388          
   1389                  // if not, look for a vacant entry to add this node...
   1390                  if ( linkInfo == NULL )
   \   00005C   E5..         MOV       A,?V0
   \   00005E   45..         ORL       A,?V1
   \   000060   705F         JNZ       ??touchLink_RouterProcessZDOMsg_3
   1391                  {
   1392                    nwkNeighborAdd( devAnnce.nwkAddr, _NIB.nwkPanId, DEF_LQI );
   \   000062                ; Setup parameters for call to function nwkNeighborAdd
   \   000062   79AA         MOV       R1,#-0x56
   \   000064   90....       MOV       DPTR,#_NIB + 33
   \   000067   E0           MOVX      A,@DPTR
   \   000068   FC           MOV       R4,A
   \   000069   A3           INC       DPTR
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   FD           MOV       R5,A
   \   00006C   7401         MOV       A,#0x1
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   E0           MOVX      A,@DPTR
   \   000072   FA           MOV       R2,A
   \   000073   A3           INC       DPTR
   \   000074   E0           MOVX      A,@DPTR
   \   000075   FB           MOV       R3,A
   \   000076   12....       LCALL     `??nwkNeighborAdd::?relay`; Banked call to: nwkNeighborAdd
   1393                    linkInfo = nwkNeighborGetLinkInfo( devAnnce.nwkAddr, _NIB.nwkPanId );
   \   000079                ; Setup parameters for call to function nwkNeighborGetLinkInfo
   \   000079   90....       MOV       DPTR,#_NIB + 33
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   FC           MOV       R4,A
   \   00007E   A3           INC       DPTR
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   FD           MOV       R5,A
   \   000081   7401         MOV       A,#0x1
   \   000083   12....       LCALL     ?XSTACK_DISP0_8
   \   000086   E0           MOVX      A,@DPTR
   \   000087   FA           MOV       R2,A
   \   000088   A3           INC       DPTR
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   FB           MOV       R3,A
   \   00008B   12....       LCALL     `??nwkNeighborGetLinkInfo::?relay`; Banked call to: nwkNeighborGetLinkInfo
   \   00008E   8A..         MOV       ?V2,R2
   \   000090   8B..         MOV       ?V3,R3
   \   000092   85....       MOV       ?V0,?V2
   \   000095   85....       MOV       ?V1,?V3
   1394                    linkInfo->txCost = DEF_LINK_COST;
   \   000098   85..82       MOV       DPL,?V0
   \   00009B   85..83       MOV       DPH,?V1
   \   00009E   A3           INC       DPTR
   \   00009F   7401         MOV       A,#0x1
   \   0000A1   F0           MOVX      @DPTR,A
   1395                    linkInfo->rxLqi = MIN_LQI_COST_1; 
   \   0000A2   85..82       MOV       DPL,?V0
   \   0000A5   85..83       MOV       DPH,?V1
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   740C         MOV       A,#0xc
   \   0000AC   F0           MOVX      @DPTR,A
   1396            
   1397                    // if we have end device childs, send link status
   1398                    if ( AssocCount(CHILD_RFD, CHILD_RFD_RX_IDLE) > 0 )
   \   0000AD                ; Setup parameters for call to function AssocCount
   \   0000AD   7A02         MOV       R2,#0x2
   \   0000AF   7901         MOV       R1,#0x1
   \   0000B1   12....       LCALL     `??AssocCount::?relay`; Banked call to: AssocCount
   \   0000B4   8A..         MOV       ?V2,R2
   \   0000B6   8B..         MOV       ?V3,R3
   \   0000B8   E5..         MOV       A,?V2
   \   0000BA   45..         ORL       A,?V3
   \   0000BC   6070         JZ        ??touchLink_RouterProcessZDOMsg_2
   1399                    {
   1400                      NLME_UpdateLinkStatus();
   \   0000BE                ; Setup parameters for call to function NLME_UpdateLinkStatus
   \   0000BE   12....       LCALL     `??NLME_UpdateLinkStatus::?relay`; Banked call to: NLME_UpdateLinkStatus
   1401                    }
   1402                  }
   1403                }
   1404                break;
   \                     ??touchLink_RouterProcessZDOMsg_3:
   \   0000C1   806B         SJMP      ??touchLink_RouterProcessZDOMsg_2
   1405          
   1406              case Mgmt_Permit_Join_req:
   1407                {
   1408                  uint8 duration = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
   \                     ??touchLink_RouterProcessZDOMsg_1:
   \   0000C3   EE           MOV       A,R6
   \   0000C4   2413         ADD       A,#0x13
   \   0000C6   F582         MOV       DPL,A
   \   0000C8   E4           CLR       A
   \   0000C9   3F           ADDC      A,R7
   \   0000CA   F583         MOV       DPH,A
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   F8           MOV       R0,A
   \   0000CE   A3           INC       DPTR
   \   0000CF   E0           MOVX      A,@DPTR
   \   0000D0   F583         MOV       DPH,A
   \   0000D2   8882         MOV       DPL,R0
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   F5..         MOV       ?V0,A
   1409                  ZStatus_t stat = NLME_PermitJoiningRequest( duration );
   \   0000D7                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   0000D7   A9..         MOV       R1,?V0
   \   0000D9   12....       LCALL     `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \   0000DC   E9           MOV       A,R1
   \   0000DD   C0E0         PUSH      A
   \   0000DF   85..82       MOV       DPL,?XSP + 0
   \   0000E2   85..83       MOV       DPH,?XSP + 1
   \   0000E5   D0E0         POP       A
   \   0000E7   F0           MOVX      @DPTR,A
   1410                  // Send a response if unicast
   1411                  if ( !inMsg->wasBroadcast )
   \   0000E8   EE           MOV       A,R6
   \   0000E9   240B         ADD       A,#0xb
   \   0000EB   F582         MOV       DPL,A
   \   0000ED   E4           CLR       A
   \   0000EE   3F           ADDC      A,R7
   \   0000EF   F583         MOV       DPH,A
   \   0000F1   E0           MOVX      A,@DPTR
   \   0000F2   703A         JNZ       ??touchLink_RouterProcessZDOMsg_2
   1412                  {
   1413                    ZDP_MgmtPermitJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   0000F4                ; Setup parameters for call to function ZDP_SendData
   \   0000F4   75..00       MOV       ?V1,#0x0
   \   0000F7   78..         MOV       R0,#?V1
   \   0000F9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FC   7401         MOV       A,#0x1
   \   0000FE   12....       LCALL     ?XSTACK_DISP100_8
   \   000101   88..         MOV       ?V2,R0
   \   000103   89..         MOV       ?V3,R1
   \   000105   78..         MOV       R0,#?V2
   \   000107   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010A   75..36       MOV       ?V2,#0x36
   \   00010D   75..80       MOV       ?V3,#-0x80
   \   000110   78..         MOV       R0,#?V2
   \   000112   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000115   7901         MOV       R1,#0x1
   \   000117   EE           MOV       A,R6
   \   000118   2402         ADD       A,#0x2
   \   00011A   FC           MOV       R4,A
   \   00011B   E4           CLR       A
   \   00011C   3F           ADDC      A,R7
   \   00011D   FD           MOV       R5,A
   \   00011E   EE           MOV       A,R6
   \   00011F   240F         ADD       A,#0xf
   \   000121   FA           MOV       R2,A
   \   000122   E4           CLR       A
   \   000123   3F           ADDC      A,R7
   \   000124   FB           MOV       R3,A
   \   000125   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000128   7405         MOV       A,#0x5
   \   00012A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00012D   E9           MOV       A,R1
   1414                  }
   1415                }
   1416                break;
   1417          
   1418              default:
   1419                break;
   1420            }
   1421          }
   \                     ??touchLink_RouterProcessZDOMsg_2:
   \   00012E   740C         MOV       A,#0xc
   \   000130   12....       LCALL     ?DEALLOC_XSTACK8
   \   000133   7F04         MOV       R7,#0x4
   \   000135   02....       LJMP      ?BANKED_LEAVE_XDATA
   1422          
   1423          /*********************************************************************
   1424           * @fn      touchLink_PermitJoin
   1425           *
   1426           * @brief   Set the router permit join flag, to allow or deny classical
   1427           *          commissioning by other ZigBee devices.
   1428           *
   1429           * @param   duration - enable up to aplcMaxPermitJoinDuration seconds,
   1430           *                     0 to disable
   1431           *
   1432           * @return  status
   1433           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1434          ZStatus_t touchLink_PermitJoin( uint8 duration )
   \                     touchLink_PermitJoin:
   1435          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   1436            if ( duration > APLC_MAX_PERMIT_JOIN_DURATION )
   \   000007   EE           MOV       A,R6
   \   000008   C3           CLR       C
   \   000009   943D         SUBB      A,#0x3d
   \   00000B   4002         JC        ??touchLink_PermitJoin_0
   1437            {
   1438              duration = APLC_MAX_PERMIT_JOIN_DURATION;
   \   00000D   7E3C         MOV       R6,#0x3c
   1439            }
   1440            return NLME_PermitJoiningRequest( duration );
   \                     ??touchLink_PermitJoin_0:
   \   00000F                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   00000F   EE           MOV       A,R6
   \   000010   F9           MOV       R1,A
   \   000011   12....       LCALL     `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \   000014   7F01         MOV       R7,#0x1
   \   000016   02....       LJMP      ?BANKED_LEAVE_XDATA
   1441          }
   1442          
   1443          /*********************************************************************
   1444           * @fn      targetStartRtr
   1445           *
   1446           * @brief   Start operating on the new network.
   1447           *
   1448           * @param   pParams - pointer to received network parameters
   1449           * @param   transID - transaction id
   1450           *
   1451           * @return  none
   1452           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1453          void touchLinkStartRtr( bdbTLNwkParams_t *pParams, uint32 transID )
   \                     touchLinkStartRtr:
   1454          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV       A,#-0xd
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   740D         MOV       A,#0xd
   \   00000B   12....       LCALL     ?XSTACK_DISP0_8
   \   00000E   78..         MOV       R0,#?V0
   \   000010   12....       LCALL     ?L_MOV_X
   1455            // Copy the new network parameters to
   1456            touchLink_SetNIB( NWK_ROUTER, pParams->nwkAddr, pParams->extendedPANID,
   1457                        pParams->logicalChannel, pParams->panId, _NIB.nwkUpdateId );
   \   000013                ; Setup parameters for call to function touchLink_SetNIB
   \   000013   90....       MOV       DPTR,#_NIB + 109
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F5..         MOV       ?V4,A
   \   000019   78..         MOV       R0,#?V4
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00001E   EE           MOV       A,R6
   \   00001F   241A         ADD       A,#0x1a
   \   000021   F582         MOV       DPL,A
   \   000023   E4           CLR       A
   \   000024   3F           ADDC      A,R7
   \   000025   F583         MOV       DPH,A
   \   000027   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00002A   EE           MOV       A,R6
   \   00002B   2419         ADD       A,#0x19
   \   00002D   F582         MOV       DPL,A
   \   00002F   E4           CLR       A
   \   000030   3F           ADDC      A,R7
   \   000031   F583         MOV       DPH,A
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F5..         MOV       ?V4,A
   \   000036   78..         MOV       R0,#?V4
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003B   EE           MOV       A,R6
   \   00003C   FC           MOV       R4,A
   \   00003D   EF           MOV       A,R7
   \   00003E   FD           MOV       R5,A
   \   00003F   EE           MOV       A,R6
   \   000040   241C         ADD       A,#0x1c
   \   000042   F582         MOV       DPL,A
   \   000044   E4           CLR       A
   \   000045   3F           ADDC      A,R7
   \   000046   F583         MOV       DPH,A
   \   000048   E0           MOVX      A,@DPTR
   \   000049   FA           MOV       R2,A
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   FB           MOV       R3,A
   \   00004D   7908         MOV       R1,#0x8
   \   00004F   12....       LCALL     `??touchLink_SetNIB::?relay`; Banked call to: touchLink_SetNIB
   \   000052   7404         MOV       A,#0x4
   \   000054   12....       LCALL     ?DEALLOC_XSTACK8
   1458          
   1459            // Apply the received network key
   1460            touchLink_DecryptNwkKey( pParams->nwkKey, pParams->keyIndex, transID, touchLinkResponseID );
   \   000057                ; Setup parameters for call to function touchLink_DecryptNwkKey
   \   000057   90....       MOV       DPTR,#touchLinkResponseID
   \   00005A   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00005D   78..         MOV       R0,#?V0
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000062   8E82         MOV       DPL,R6
   \   000064   8F83         MOV       DPH,R7
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   F9           MOV       R1,A
   \   000070   EE           MOV       A,R6
   \   000071   2409         ADD       A,#0x9
   \   000073   FA           MOV       R2,A
   \   000074   E4           CLR       A
   \   000075   3F           ADDC      A,R7
   \   000076   FB           MOV       R3,A
   \   000077   12....       LCALL     `??touchLink_DecryptNwkKey::?relay`; Banked call to: touchLink_DecryptNwkKey
   \   00007A   7408         MOV       A,#0x8
   \   00007C   12....       LCALL     ?DEALLOC_XSTACK8
   1461          
   1462            // setting apsTrustCenterAddress to 0xffffffff
   1463            ZDSecMgrUpdateTCAddress( NULL );
   \   00007F                ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
   \   00007F   7A00         MOV       R2,#0x0
   \   000081   7B00         MOV       R3,#0x0
   \   000083   12....       LCALL     `??ZDSecMgrUpdateTCAddress::?relay`; Banked call to: ZDSecMgrUpdateTCAddress
   1464          
   1465            NLME_PermitJoiningRequest(0);
   \   000086                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000086   7900         MOV       R1,#0x0
   \   000088   12....       LCALL     `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \   00008B   E9           MOV       A,R1
   1466            
   1467            // Touchlink distributed network flag
   1468            touchlinkDistNwk = TRUE;
   \   00008C   90....       MOV       DPTR,#touchlinkDistNwk
   \   00008F   7401         MOV       A,#0x1
   \   000091   F0           MOVX      @DPTR,A
   1469          
   1470            // Use the new free ranges
   1471            //touchLink_UpdateFreeRanges( pParams );
   1472          
   1473            // Save free ranges
   1474            touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
   \   000092                ; Setup parameters for call to function touchLink_UpdateNV
   \   000092   7902         MOV       R1,#0x2
   \   000094   12....       LCALL     `??touchLink_UpdateNV::?relay`; Banked call to: touchLink_UpdateNV
   1475          
   1476            // In case we're here after a leave
   1477            touchLinkLeaveInitiated = FALSE;
   \   000097   90....       MOV       DPTR,#touchLinkLeaveInitiated
   \   00009A   7400         MOV       A,#0x0
   \   00009C   F0           MOVX      @DPTR,A
   1478          
   1479            // Clear leave control logic
   1480            ZDApp_LeaveCtrlReset();
   \   00009D                ; Setup parameters for call to function ZDApp_LeaveCtrlReset
   \   00009D   12....       LCALL     `??ZDApp_LeaveCtrlReset::?relay`; Banked call to: ZDApp_LeaveCtrlReset
   1481          
   1482            // Start operating on the new network
   1483            ZDOInitDeviceEx( 0, 1 );
   \   0000A0                ; Setup parameters for call to function ZDOInitDeviceEx
   \   0000A0   7901         MOV       R1,#0x1
   \   0000A2   7A00         MOV       R2,#0x0
   \   0000A4   7B00         MOV       R3,#0x0
   \   0000A6   12....       LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
   \   0000A9   E9           MOV       A,R1
   1484          }
   \   0000AA   7F05         MOV       R7,#0x5
   \   0000AC   02....       LJMP      ?BANKED_LEAVE_XDATA
   1485          
   1486          /*********************************************************************
   1487           * @fn      touchLink_DevRejoin
   1488           *
   1489           * @brief   Perform a network rejoin
   1490           *
   1491           * @param   rejoinInf - pointer to received network parameters
   1492           *
   1493           * @return  none
   1494           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1495          void touchLink_DevRejoin( bdbTLNwkRejoin_t *rejoinInf )
   \                     touchLink_DevRejoin:
   1496          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1497              networkDesc_t *pNwkDesc = NULL;
   \   000009   75..00       MOV       ?V0,#0x0
   \   00000C   75..00       MOV       ?V1,#0x0
   1498               
   1499              // Initialize the security for type of device
   1500              ZDApp_SecInit( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   \   00000F                ; Setup parameters for call to function ZDApp_SecInit
   \   00000F   7900         MOV       R1,#0x0
   \   000011   12....       LCALL     `??ZDApp_SecInit::?relay`; Banked call to: ZDApp_SecInit
   1501              
   1502              pNwkDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
   \   000014                ; Setup parameters for call to function osal_mem_alloc
   \   000014   7A16         MOV       R2,#0x16
   \   000016   7B00         MOV       R3,#0x0
   \   000018   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001B   8A..         MOV       ?V2,R2
   \   00001D   8B..         MOV       ?V3,R3
   \   00001F   85....       MOV       ?V0,?V2
   \   000022   85....       MOV       ?V1,?V3
   1503              if( pNwkDesc == NULL )
   \   000025   E5..         MOV       A,?V0
   \   000027   45..         ORL       A,?V1
   \   000029   7003         JNZ       $+5
   \   00002B   02....       LJMP      ??touchLink_DevRejoin_0 & 0xFFFF
   1504              {
   1505                return;
   1506              }
   1507                   
   1508              NwkDescList = pNwkDesc;
   \   00002E   90....       MOV       DPTR,#NwkDescList
   \   000031   E5..         MOV       A,?V0
   \   000033   F0           MOVX      @DPTR,A
   \   000034   A3           INC       DPTR
   \   000035   E5..         MOV       A,?V1
   \   000037   F0           MOVX      @DPTR,A
   1509              pNwkDesc->panId = rejoinInf->panId;
   \   000038   8E82         MOV       DPL,R6
   \   00003A   8F83         MOV       DPH,R7
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F8           MOV       R0,A
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   F9           MOV       R1,A
   \   00004B   85..82       MOV       DPL,?V0
   \   00004E   85..83       MOV       DPH,?V1
   \   000051   E8           MOV       A,R0
   \   000052   F0           MOVX      @DPTR,A
   \   000053   A3           INC       DPTR
   \   000054   E9           MOV       A,R1
   \   000055   F0           MOVX      @DPTR,A
   1510              pNwkDesc->logicalChannel = rejoinInf->logicalChannel;
   \   000056   8E82         MOV       DPL,R6
   \   000058   8F83         MOV       DPH,R7
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   E0           MOVX      A,@DPTR
   \   000064   C0E0         PUSH      A
   \   000066   85..82       MOV       DPL,?V0
   \   000069   85..83       MOV       DPH,?V1
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   D0E0         POP       A
   \   000070   F0           MOVX      @DPTR,A
   1511              osal_memcpy( pNwkDesc->extendedPANID, rejoinInf->extendedPANID, Z_EXTADDR_LEN);
   \   000071                ; Setup parameters for call to function osal_memcpy
   \   000071   8E..         MOV       ?V4,R6
   \   000073   8F..         MOV       ?V5,R7
   \   000075   75..00       MOV       ?V6,#0x0
   \   000078   78..         MOV       R0,#?V4
   \   00007A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00007D   7C08         MOV       R4,#0x8
   \   00007F   7D00         MOV       R5,#0x0
   \   000081   E5..         MOV       A,?V0
   \   000083   240B         ADD       A,#0xb
   \   000085   FA           MOV       R2,A
   \   000086   E4           CLR       A
   \   000087   35..         ADDC      A,?V1
   \   000089   FB           MOV       R3,A
   \   00008A   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00008D   7403         MOV       A,#0x3
   \   00008F   12....       LCALL     ?DEALLOC_XSTACK8
   1512              pNwkDesc->chosenRouterDepth = 1;
   \   000092   85..82       MOV       DPL,?V0
   \   000095   85..83       MOV       DPH,?V1
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   7401         MOV       A,#0x1
   \   0000A4   F0           MOVX      @DPTR,A
   1513              pNwkDesc->routerCapacity = 1;
   \   0000A5   85..82       MOV       DPL,?V0
   \   0000A8   85..83       MOV       DPH,?V1
   \   0000AB   A3           INC       DPTR
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   7401         MOV       A,#0x1
   \   0000B0   F0           MOVX      @DPTR,A
   1514              pNwkDesc->deviceCapacity = 1;
   \   0000B1   85..82       MOV       DPL,?V0
   \   0000B4   85..83       MOV       DPH,?V1
   \   0000B7   A3           INC       DPTR
   \   0000B8   A3           INC       DPTR
   \   0000B9   A3           INC       DPTR
   \   0000BA   A3           INC       DPTR
   \   0000BB   7401         MOV       A,#0x1
   \   0000BD   F0           MOVX      @DPTR,A
   1515              pNwkDesc->version = 2;
   \   0000BE   85..82       MOV       DPL,?V0
   \   0000C1   85..83       MOV       DPH,?V1
   \   0000C4   A3           INC       DPTR
   \   0000C5   A3           INC       DPTR
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   A3           INC       DPTR
   \   0000C9   7402         MOV       A,#0x2
   \   0000CB   F0           MOVX      @DPTR,A
   1516              pNwkDesc->stackProfile = 2;
   \   0000CC   85..82       MOV       DPL,?V0
   \   0000CF   85..83       MOV       DPH,?V1
   \   0000D2   A3           INC       DPTR
   \   0000D3   A3           INC       DPTR
   \   0000D4   A3           INC       DPTR
   \   0000D5   A3           INC       DPTR
   \   0000D6   A3           INC       DPTR
   \   0000D7   A3           INC       DPTR
   \   0000D8   7402         MOV       A,#0x2
   \   0000DA   F0           MOVX      @DPTR,A
   1517              pNwkDesc->chosenRouterLinkQuality = DEF_LQI;
   \   0000DB   85..82       MOV       DPL,?V0
   \   0000DE   85..83       MOV       DPH,?V1
   \   0000E1   A3           INC       DPTR
   \   0000E2   A3           INC       DPTR
   \   0000E3   A3           INC       DPTR
   \   0000E4   A3           INC       DPTR
   \   0000E5   A3           INC       DPTR
   \   0000E6   A3           INC       DPTR
   \   0000E7   A3           INC       DPTR
   \   0000E8   A3           INC       DPTR
   \   0000E9   A3           INC       DPTR
   \   0000EA   74AA         MOV       A,#-0x56
   \   0000EC   F0           MOVX      @DPTR,A
   1518              pNwkDesc->chosenRouter = rejoinInf->nwkAddr;
   \   0000ED   EE           MOV       A,R6
   \   0000EE   240C         ADD       A,#0xc
   \   0000F0   F582         MOV       DPL,A
   \   0000F2   E4           CLR       A
   \   0000F3   3F           ADDC      A,R7
   \   0000F4   F583         MOV       DPH,A
   \   0000F6   E0           MOVX      A,@DPTR
   \   0000F7   F8           MOV       R0,A
   \   0000F8   A3           INC       DPTR
   \   0000F9   E0           MOVX      A,@DPTR
   \   0000FA   F9           MOV       R1,A
   \   0000FB   85..82       MOV       DPL,?V0
   \   0000FE   85..83       MOV       DPH,?V1
   \   000101   A3           INC       DPTR
   \   000102   A3           INC       DPTR
   \   000103   A3           INC       DPTR
   \   000104   A3           INC       DPTR
   \   000105   A3           INC       DPTR
   \   000106   A3           INC       DPTR
   \   000107   A3           INC       DPTR
   \   000108   E8           MOV       A,R0
   \   000109   F0           MOVX      @DPTR,A
   \   00010A   A3           INC       DPTR
   \   00010B   E9           MOV       A,R1
   \   00010C   F0           MOVX      @DPTR,A
   1519              pNwkDesc->updateId = rejoinInf->nwkUpdateId;
   \   00010D   8E82         MOV       DPL,R6
   \   00010F   8F83         MOV       DPH,R7
   \   000111   A3           INC       DPTR
   \   000112   A3           INC       DPTR
   \   000113   A3           INC       DPTR
   \   000114   A3           INC       DPTR
   \   000115   A3           INC       DPTR
   \   000116   A3           INC       DPTR
   \   000117   A3           INC       DPTR
   \   000118   A3           INC       DPTR
   \   000119   E0           MOVX      A,@DPTR
   \   00011A   C0E0         PUSH      A
   \   00011C   E5..         MOV       A,?V0
   \   00011E   2413         ADD       A,#0x13
   \   000120   F582         MOV       DPL,A
   \   000122   E4           CLR       A
   \   000123   35..         ADDC      A,?V1
   \   000125   F583         MOV       DPH,A
   \   000127   D0E0         POP       A
   \   000129   F0           MOVX      @DPTR,A
   1520              pNwkDesc->nextDesc = NULL;
   \   00012A   E5..         MOV       A,?V0
   \   00012C   2414         ADD       A,#0x14
   \   00012E   F582         MOV       DPL,A
   \   000130   E4           CLR       A
   \   000131   35..         ADDC      A,?V1
   \   000133   F583         MOV       DPH,A
   \   000135   7400         MOV       A,#0x0
   \   000137   F0           MOVX      @DPTR,A
   \   000138   A3           INC       DPTR
   \   000139   7400         MOV       A,#0x0
   \   00013B   F0           MOVX      @DPTR,A
   1521              
   1522              // Save free ranges
   1523              touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
   \   00013C                ; Setup parameters for call to function touchLink_UpdateNV
   \   00013C   7902         MOV       R1,#0x2
   \   00013E   12....       LCALL     `??touchLink_UpdateNV::?relay`; Banked call to: touchLink_UpdateNV
   1524          
   1525              // In case we're here after a leave
   1526              touchLinkLeaveInitiated = FALSE;
   \   000141   90....       MOV       DPTR,#touchLinkLeaveInitiated
   \   000144   7400         MOV       A,#0x0
   \   000146   F0           MOVX      @DPTR,A
   1527          
   1528              // Clear leave control logic
   1529              ZDApp_LeaveCtrlReset();
   \   000147                ; Setup parameters for call to function ZDApp_LeaveCtrlReset
   \   000147   12....       LCALL     `??ZDApp_LeaveCtrlReset::?relay`; Banked call to: ZDApp_LeaveCtrlReset
   1530              
   1531              // Let's join the network started by the target
   1532              NLME_ReJoinRequest( rejoinInf->extendedPANID, _NIB.nwkLogicalChannel);
   \   00014A                ; Setup parameters for call to function NLME_ReJoinRequest
   \   00014A   90....       MOV       DPTR,#_NIB + 22
   \   00014D   E0           MOVX      A,@DPTR
   \   00014E   F9           MOV       R1,A
   \   00014F   EE           MOV       A,R6
   \   000150   FA           MOV       R2,A
   \   000151   EF           MOV       A,R7
   \   000152   FB           MOV       R3,A
   \   000153   12....       LCALL     `??NLME_ReJoinRequest::?relay`; Banked call to: NLME_ReJoinRequest
   \   000156   E9           MOV       A,R1
   1533          }
   \                     ??touchLink_DevRejoin_0:
   \   000157   7F07         MOV       R7,#0x7
   \   000159   02....       LJMP      ?BANKED_LEAVE_XDATA
   1534          
   1535          /*********************************************************************
   1536           * @fn      touchLink_DeviceIsInitiator
   1537           *
   1538           * @brief   Set device initiator flag.
   1539           *
   1540           * @param   initiator - new flag value
   1541           *
   1542           * @return  none
   1543           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1544          void touchLink_DeviceIsInitiator( bool initiator )
   \                     touchLink_DeviceIsInitiator:
   1545          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1546            touchLinkIsInitiator = initiator;
   \   000004   E9           MOV       A,R1
   \   000005   90....       MOV       DPTR,#touchLinkIsInitiator
   \   000008   F0           MOVX      @DPTR,A
   1547          }
   \   000009   D083         POP       DPH
   \   00000B   D082         POP       DPL
   \   00000D   02....       LJMP      ?BRET
   1548          
   1549          /*********************************************************************
   1550           * @fn      touchLink_DeviceIsInitiator
   1551           *
   1552           * @brief   Get device initiator flag.
   1553           *
   1554           * @param   none
   1555           *
   1556           * @return  touchLinkIsInitiator - flag value
   1557           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1558          bool touchLink_GetDeviceInitiator( void )
   \                     touchLink_GetDeviceInitiator:
   1559          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1560            return touchLinkIsInitiator;
   \   000004   90....       MOV       DPTR,#touchLinkIsInitiator
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   D083         POP       DPH
   \   00000B   D082         POP       DPL
   \   00000D   02....       LJMP      ?BRET
   1561          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for touchLink_EP_SimpleDesc>`:
   \   000000   0D           DB 13
   \   000001   5EC0         DW 49246
   \   000003   5EE1         DW 57694
   \   000005   02           DB 2
   \   000006   01           DB 1
   \   000007   ....         DW touchLink_EP_InClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW touchLink_EP_OutClusterList

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for touchLink_EP>`:
   \   000000   0D           DB 13
   \   000001   00           DB 0
   \   000002   ....         DW touchLinkTaskId
   \   000004   0000         DW 0H
   \   000006   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {80, 104, 76, 105, 234, 156, 209, 5`:
   \   000000   50           DB 80
   \   000001   68           DB 104
   \   000002   4C           DB 76
   \   000003   69           DB 105
   \   000004   EA           DB 234
   \   000005   9C           DB 156
   \   000006   D1           DB 209
   \   000007   38           DB 56
   \   000008   43           DB 67
   \   000009   4C           DB 76
   \   00000A   53           DB 83
   \   00000B   4E           DB 78
   \   00000C   8F           DB 143
   \   00000D   8D           DB 141
   \   00000E   BA           DB 186
   \   00000F   B4           DB 180

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {192, 193, 194, 195, 196, 197, 198,`:
   \   000000   C0           DB 192
   \   000001   C1           DB 193
   \   000002   C2           DB 194
   \   000003   C3           DB 195
   \   000004   C4           DB 196
   \   000005   C5           DB 197
   \   000006   C6           DB 198
   \   000007   C7           DB 199
   \   000008   C8           DB 200
   \   000009   C9           DB 201
   \   00000A   CA           DB 202
   \   00000B   CB           DB 203
   \   00000C   CC           DB 204
   \   00000D   CD           DB 205
   \   00000E   CE           DB 206
   \   00000F   CF           DB 207

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {80, 104, 76, 105, 234, 156, 209, 5_1`:
   \   000000   50           DB 80
   \   000001   68           DB 104
   \   000002   4C           DB 76
   \   000003   69           DB 105
   \   000004   EA           DB 234
   \   000005   9C           DB 156
   \   000006   D1           DB 209
   \   000007   38           DB 56
   \   000008   43           DB 67
   \   000009   4C           DB 76
   \   00000A   53           DB 83
   \   00000B   4E           DB 78
   \   00000C   8F           DB 143
   \   00000D   8D           DB 141
   \   00000E   BA           DB 186
   \   00000F   B4           DB 180

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {192, 193, 194, 195, 196, 197, 198,_1`:
   \   000000   C0           DB 192
   \   000001   C1           DB 193
   \   000002   C2           DB 194
   \   000003   C3           DB 195
   \   000004   C4           DB 196
   \   000005   C5           DB 197
   \   000006   C6           DB 198
   \   000007   C7           DB 199
   \   000008   C8           DB 200
   \   000009   C9           DB 201
   \   00000A   CA           DB 202
   \   00000B   CB           DB 203
   \   00000C   CC           DB 204
   \   00000D   CD           DB 205
   \   00000E   CE           DB 206
   \   00000F   CF           DB 207

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1
   1562          
   1563          #endif // BDB_TL_TARGET || BDB_TL_INITIATOR
   1564          
   1565          /*********************************************************************
   1566          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     25   touchLinkStartRtr
        0     13   -> NLME_PermitJoiningRequest
        0     13   -> ZDApp_LeaveCtrlReset
        0     13   -> ZDOInitDeviceEx
        0     13   -> ZDSecMgrUpdateTCAddress
        0     21   -> touchLink_DecryptNwkKey
        0     17   -> touchLink_SetNIB
        0     13   -> touchLink_UpdateNV
      1     18   touchLink_BeaconIndCB
        0     18   -> osal_mem_alloc
        0     18   -> osal_memset
        0     18   -> sAddrExtCpy
      1    119   touchLink_BuildAesKey
      0     97   touchLink_DecryptNwkKey
        0     71   -> osal_memcpy
        0     68   -> sspAesDecrypt
        0     68   -> sspAesEncrypt
        0     76   -> touchLink_BuildAesKey
        0     68   -> touchLink_UpdateNwkKey
      1     18   touchLink_DevRejoin
        0     15   -> NLME_ReJoinRequest
        0     15   -> ZDApp_LeaveCtrlReset
        0     15   -> ZDApp_SecInit
        0     15   -> osal_mem_alloc
        0     18   -> osal_memcpy
        0     15   -> touchLink_UpdateNV
      2      0   touchLink_DeviceIsInitiator
      0    107   touchLink_EncryptNwkKey
        0     91   -> SSP_ReadNwkActiveKey
        0     94   -> osal_memcpy
        0     91   -> sspAesEncrypt
        0     99   -> touchLink_BuildAesKey
        0     91   -> touchLink_GenerateRandNum
      0     10   touchLink_FreeNwkParamList
        0     10   -> osal_mem_free
      1    105   touchLink_GenerateRandNum
        0     14   -> osal_rand
      2      0   touchLink_GerFreeRanges
      2      0   touchLink_GetDeviceInitiator
      0     10   touchLink_GetMsgRssi
        0     10   -> zcl_getRawAFMsg
      2      0   touchLink_GetNumGrpIDs
      2     24   touchLink_GetNumSubDevices
      0      0   touchLink_GetNwkKeyBitmask
      2      0   touchLink_GetRandPrimaryChannel
        2      0   -> osal_rand
      0     36   touchLink_GetSubDeviceInfo
        0     12   -> afFindEndPointDesc
        0     12   -> osal_memset
      2     10   touchLink_InitFreeRanges
      0     22   touchLink_InitNV
        0     12   -> touchLink_ItemInit
      0     14   touchLink_InitVariables
        0     10   -> NLME_SetBroadcastFilter
        0     10   -> osal_memset
        0     14   -> osal_nv_write
        0     10   -> touchLink_InitFreeRanges
        0     10   -> touchLink_InitNV
      4      0   touchLink_IsValidSplitFreeRanges
      0     12   touchLink_IsValidTransID
      0     28   touchLink_ItemInit
        0     14   -> osal_nv_item_init
        0     16   -> osal_nv_read
      0      0   touchLink_NewNwkUpdateId
      0      9   touchLink_NwkDiscoveryCnfCB
        0      9   -> NLME_NwkDiscTerm
        0      9   -> NLME_OrphanStateSet
        0      9   -> ZDO_DeregisterForZdoCB
        0      9   -> bdb_ZedAttemptRecoverNwk
        0      9   -> bdb_reportCommissioningState
        0      9   -> osal_set_event
      0     19   touchLink_PerformNetworkDisc
        0     19   -> NLME_NwkDiscReq2
        0     19   -> NLME_NwkDiscTerm
        0     19   -> ZDO_RegisterForZdoCB
      0      9   touchLink_PermitJoin
        0      9   -> NLME_PermitJoiningRequest
      2     10   touchLink_PopGrpIDRange
      4      0   touchLink_PopNwkAddress
      0     12   touchLink_ProcessNwkUpdate
        0     12   -> NLME_SetUpdateID
        0     12   -> ZDApp_NwkStateUpdateCB
        0     12   -> nwkTransmissionFailures
        0     12   -> touchLink_SetChannel
        0     12   -> touchLink_UpdateNV
      1     29   touchLink_RouterProcessZDOMsg
        0     24   -> AssocCount
        0     24   -> NLME_PermitJoiningRequest
        0     24   -> NLME_UpdateLinkStatus
        0     24   -> ZDO_ParseDeviceAnnce
        0     29   -> ZDP_SendData
        0     24   -> nwkNeighborAdd
        0     24   -> nwkNeighborGetLinkInfo
      1     29   touchLink_SendDeviceInfoRsp
        0     24   -> NLME_GetExtAddr
        0     25   -> bdbTL_Send_DeviceInfoRsp
        0     24   -> osal_mem_alloc
        0     24   -> osal_mem_free
        0     24   -> sAddrExtCpy
        0     24   -> touchLink_GetNumSubDevices
        0     24   -> touchLink_GetSubDeviceInfo
      2      5   touchLink_SendLeaveReq
        2      5   -> NLME_LeaveReq
        2      5   -> osal_memset
      1     26   touchLink_SetChannel
        0     13   -> ZMacSetReq
        0     13   -> bdb_setChannel
      0     13   touchLink_SetMacNwkParams
        0     13   -> ZMacSetReq
        0     13   -> touchLink_SetChannel
      0     37   touchLink_SetNIB
        0     20   -> NLME_SetUpdateID
        0     20   -> sAddrExtCpy
        0     20   -> touchLink_UpdateNV
      0      9   touchLink_SetTouchLinkTaskId
        0      9   -> StubAPS_RegisterApp
        0      9   -> bdb_RegisterSimpleDescriptor
      0     22   touchLink_SplitFreeRanges
      2      0   touchLink_UpdateFreeRanges
      0     34   touchLink_UpdateNV
        0     14   -> osal_nv_write
        0     10   -> zgWriteStartupOptions
      0     88   touchLink_UpdateNwkKey
        0     20   -> SSP_SwitchNwkKey
        0     20   -> SSP_UpdateNwkKey
        0     20   -> ZDApp_SaveNwkKey


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant {192, 193, 194, 195, 196, 197, 198,
      16  ?<Constant {192, 193, 194, 195, 196, 197, 198,_1
      16  ?<Constant {80, 104, 76, 105, 234, 156, 209, 5
      16  ?<Constant {80, 104, 76, 105, 234, 156, 209, 5_1
       7  ?<Initializer for touchLink_EP>
      12  ?<Initializer for touchLink_EP_SimpleDesc>
       4  __Constant_1
       2  pDiscoveredNwkParamList
       2  touchLinkFreeGrpIdBegin
       2  touchLinkFreeGrpIdEnd
       2  touchLinkFreeNwkAddrBegin
       2  touchLinkFreeNwkAddrEnd
       2  touchLinkGrpIDsBegin
       2  touchLinkGrpIDsEnd
       1  touchLinkIsInitiator
       4  touchLinkLastAcceptedTransID
       1  touchLinkLeaveInitiated
       4  touchLinkResponseID
     175  touchLinkStartRtr
      10  touchLinkSubDevicesTbl
       1  touchLinkTaskId
       4  touchLinkTransID
     657  touchLink_BeaconIndCB
     487  touchLink_BuildAesKey
     172  touchLink_DecryptNwkKey
     348  touchLink_DevRejoin
      16  touchLink_DeviceIsInitiator
       7  touchLink_EP
       2  touchLink_EP_InClusterList
       2  touchLink_EP_OutClusterList
      12  touchLink_EP_SimpleDesc
     228  touchLink_EncryptNwkKey
      62  touchLink_FreeNwkParamList
     133  touchLink_GenerateRandNum
     143  touchLink_GerFreeRanges
      16  touchLink_GetDeviceInitiator
      40  touchLink_GetMsgRssi
     120  touchLink_GetNumGrpIDs
      71  touchLink_GetNumSubDevices
       7  touchLink_GetNwkKeyBitmask
      50  touchLink_GetRandPrimaryChannel
     207  touchLink_GetSubDeviceInfo
     134  touchLink_InitFreeRanges
     172  touchLink_InitNV
     143  touchLink_InitVariables
     153  touchLink_IsValidSplitFreeRanges
      56  touchLink_IsValidTransID
      81  touchLink_ItemInit
      99  touchLink_NewNwkUpdateId
      86  touchLink_NwkDiscoveryCnfCB
      98  touchLink_PerformNetworkDisc
      25  touchLink_PermitJoin
     176  touchLink_PopGrpIDRange
      79  touchLink_PopNwkAddress
      85  touchLink_ProcessNwkUpdate
     312  touchLink_RouterProcessZDOMsg
     301  touchLink_SendDeviceInfoRsp
      41  touchLink_SendLeaveReq
      77  touchLink_SetChannel
      69  touchLink_SetMacNwkParams
     213  touchLink_SetNIB
      31  touchLink_SetTouchLinkTaskId
     336  touchLink_SplitFreeRanges
     143  touchLink_UpdateFreeRanges
     306  touchLink_UpdateNV
      61  touchLink_UpdateNwkKey
       1  touchlinkDistNwk
       1  touchlinkFNReset
     246  -- Other

 
 6 209 bytes in segment BANKED_CODE
   246 bytes in segment BANK_RELAYS
    19 bytes in segment XDATA_I
    19 bytes in segment XDATA_ID
    72 bytes in segment XDATA_ROM_C
    41 bytes in segment XDATA_Z
 
   265 bytes of CODE     memory
    68 bytes of CONST    memory (+ 4 bytes shared)
 6 209 bytes of HUGECODE memory
    60 bytes of XDATA    memory

Errors: none
Warnings: none
