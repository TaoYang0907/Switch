###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               31/Jul/2020  16:02:09
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack 3.0.2\Components\services\saddr\saddr.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW413.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\services\saddr\saddr.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D POWER_SAVING -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_GROUPS -D BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=0
#        -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0 -DREJOIN_POLL_RATE=0
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\saddr.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\saddr.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\services\saddr\saddr.c
      1          /****************************************************************************
      2            Filename:       saddr.c
      3            Revised:        $Date: 2014-11-06 11:03:55 -0800 (Thu, 06 Nov 2014) $
      4            Revision:       $Revision: 41021 $
      5          
      6            Description:    Zigbee and 802.15.4 device address utility functions.
      7          
      8          
      9            Copyright 2005-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ****************************************************************************/
     39          
     40          /****************************************************************************
     41           * INCLUDES
     42           */
     43          #include "hal_types.h"
     44          #include "OSAL.h"
     45          #include "saddr.h"
     46          
     47          #include "R2R_FlashJT.h"
     48          #if defined (CC26XX)
     49          #include "R2F_FlashJT.h"
     50          #endif /* CC26XX */
     51          
     52          /****************************************************************************
     53           * @fn          sAddrCmp
     54           *
     55           * @brief       Compare two device addresses.
     56           *
     57           * input parameters
     58           *
     59           * @param       pAddr1        - Pointer to first address.
     60           * @param       pAddr2        - Pointer to second address.
     61           *
     62           * output parameters
     63           *
     64           * @return      TRUE if addresses are equal, FALSE otherwise
     65           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     66          bool sAddrCmp(const sAddr_t *pAddr1, const sAddr_t *pAddr2)
   \                     sAddrCmp:
     67          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
     68            if (pAddr1->addrMode != pAddr2->addrMode)
   \   00000D   85..82       MOV       DPL,?V0
   \   000010   85..83       MOV       DPH,?V1
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F8           MOV       R0,A
   \   00001D   8E82         MOV       DPL,R6
   \   00001F   8F83         MOV       DPH,R7
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   68           XRL       A,R0
   \   00002B   6004         JZ        ??sAddrCmp_0
     69            {
     70              return FALSE;
   \   00002D   7900         MOV       R1,#0x0
   \   00002F   806A         SJMP      ??sAddrCmp_1
     71            }
     72            else if (pAddr1->addrMode == SADDR_MODE_NONE)
   \                     ??sAddrCmp_0:
   \   000031   85..82       MOV       DPL,?V0
   \   000034   85..83       MOV       DPH,?V1
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   7004         JNZ       ??sAddrCmp_2
     73            {
     74              return FALSE;
   \   000042   7900         MOV       R1,#0x0
   \   000044   8055         SJMP      ??sAddrCmp_1
     75            }
     76            else if (pAddr1->addrMode == SADDR_MODE_SHORT)
   \                     ??sAddrCmp_2:
   \   000046   85..82       MOV       DPL,?V0
   \   000049   85..83       MOV       DPH,?V1
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   6402         XRL       A,#0x2
   \   000057   7020         JNZ       ??sAddrCmp_3
     77            {
     78              return (bool) (pAddr1->addr.shortAddr == pAddr2->addr.shortAddr);
   \   000059   85..82       MOV       DPL,?V0
   \   00005C   85..83       MOV       DPH,?V1
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F8           MOV       R0,A
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F9           MOV       R1,A
   \   000064   8E82         MOV       DPL,R6
   \   000066   8F83         MOV       DPH,R7
   \   000068   E0           MOVX      A,@DPTR
   \   000069   68           XRL       A,R0
   \   00006A   7003         JNZ       ??sAddrCmp_4
   \   00006C   A3           INC       DPTR
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   69           XRL       A,R1
   \                     ??sAddrCmp_4:
   \   00006F   7004         JNZ       ??sAddrCmp_5
   \   000071   7901         MOV       R1,#0x1
   \   000073   8026         SJMP      ??sAddrCmp_1
   \                     ??sAddrCmp_5:
   \   000075   7900         MOV       R1,#0x0
   \   000077   8022         SJMP      ??sAddrCmp_1
     79            }
     80            else if (pAddr1->addrMode == SADDR_MODE_EXT)
   \                     ??sAddrCmp_3:
   \   000079   85..82       MOV       DPL,?V0
   \   00007C   85..83       MOV       DPH,?V1
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   E0           MOVX      A,@DPTR
   \   000088   6403         XRL       A,#0x3
   \   00008A   700D         JNZ       ??sAddrCmp_6
     81            {
     82              return (MAP_sAddrExtCmp(pAddr1->addr.extAddr, pAddr2->addr.extAddr));
   \   00008C                ; Setup parameters for call to function sAddrExtCmp
   \   00008C   EE           MOV       A,R6
   \   00008D   FC           MOV       R4,A
   \   00008E   EF           MOV       A,R7
   \   00008F   FD           MOV       R5,A
   \   000090   AA..         MOV       R2,?V0
   \   000092   AB..         MOV       R3,?V1
   \   000094   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000097   8002         SJMP      ??sAddrCmp_1
     83            }
     84            else
     85            {
     86              return FALSE;
   \                     ??sAddrCmp_6:
   \   000099   7900         MOV       R1,#0x0
   \                     ??sAddrCmp_1:
   \   00009B   7F02         MOV       R7,#0x2
   \   00009D   02....       LJMP      ?BANKED_LEAVE_XDATA
     87            }
     88          }
     89          
     90          /****************************************************************************
     91           * @fn          sAddrIden
     92           *
     93           * @brief       Check if two device addresses are identical.
     94           *
     95           *              This routine is virtually the same as sAddrCmp, which is used
     96           *              to determine if two different addresses are the same. However,
     97           *              this routine can be used to determine if an address is the
     98           *              same as a previously stored address. The key difference is in
     99           *              the former case, if the address mode is "none", then the
    100           *              assumption is that the two addresses can not be the same. But
    101           *              in the latter case, the address mode itself is being compared.
    102           *              So two addresses can be identical even if the address mode is
    103           *              "none", as long as the address mode of both addresses being
    104           *              compared is "none".
    105           *
    106           * input parameters
    107           *
    108           * @param       pAddr1        - Pointer to first address.
    109           * @param       pAddr2        - Pointer to second address.
    110           *
    111           * output parameters
    112           *
    113           * @return      TRUE if addresses are identical, FALSE otherwise
    114           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    115          bool sAddrIden(const sAddr_t *pAddr1, const sAddr_t *pAddr2)
   \                     sAddrIden:
    116          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    117            // first check if the address modes are the same
    118            if (pAddr1->addrMode != pAddr2->addrMode)
   \   00000D   85..82       MOV       DPL,?V0
   \   000010   85..83       MOV       DPH,?V1
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F8           MOV       R0,A
   \   00001D   8E82         MOV       DPL,R6
   \   00001F   8F83         MOV       DPH,R7
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   68           XRL       A,R0
   \   00002B   6004         JZ        ??sAddrIden_0
    119            {
    120              // no, so no point in comparing any further
    121              return FALSE;
   \   00002D   7900         MOV       R1,#0x0
   \   00002F   806A         SJMP      ??sAddrIden_1
    122            }
    123            // the address modes are the same; check if there is no address
    124            else if (pAddr1->addrMode == SADDR_MODE_NONE)
   \                     ??sAddrIden_0:
   \   000031   85..82       MOV       DPL,?V0
   \   000034   85..83       MOV       DPH,?V1
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   7004         JNZ       ??sAddrIden_2
    125            {
    126              // no address, so no need to compare any further as both addresses have the
    127              // same address mode but no address, so they are identical
    128              return TRUE;
   \   000042   7901         MOV       R1,#0x1
   \   000044   8055         SJMP      ??sAddrIden_1
    129            }
    130            // there's an address; check if it is short
    131            else if (pAddr1->addrMode == SADDR_MODE_SHORT)
   \                     ??sAddrIden_2:
   \   000046   85..82       MOV       DPL,?V0
   \   000049   85..83       MOV       DPH,?V1
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   6402         XRL       A,#0x2
   \   000057   7020         JNZ       ??sAddrIden_3
    132            {
    133              // compare short addresses
    134              return (bool) (pAddr1->addr.shortAddr == pAddr2->addr.shortAddr);
   \   000059   85..82       MOV       DPL,?V0
   \   00005C   85..83       MOV       DPH,?V1
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F8           MOV       R0,A
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F9           MOV       R1,A
   \   000064   8E82         MOV       DPL,R6
   \   000066   8F83         MOV       DPH,R7
   \   000068   E0           MOVX      A,@DPTR
   \   000069   68           XRL       A,R0
   \   00006A   7003         JNZ       ??sAddrIden_4
   \   00006C   A3           INC       DPTR
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   69           XRL       A,R1
   \                     ??sAddrIden_4:
   \   00006F   7004         JNZ       ??sAddrIden_5
   \   000071   7901         MOV       R1,#0x1
   \   000073   8026         SJMP      ??sAddrIden_1
   \                     ??sAddrIden_5:
   \   000075   7900         MOV       R1,#0x0
   \   000077   8022         SJMP      ??sAddrIden_1
    135            }
    136            // there's an address; check if it is extended
    137            else if (pAddr1->addrMode == SADDR_MODE_EXT)
   \                     ??sAddrIden_3:
   \   000079   85..82       MOV       DPL,?V0
   \   00007C   85..83       MOV       DPH,?V1
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   E0           MOVX      A,@DPTR
   \   000088   6403         XRL       A,#0x3
   \   00008A   700D         JNZ       ??sAddrIden_6
    138            {
    139              // compare extended addresses
    140              return (MAP_sAddrExtCmp(pAddr1->addr.extAddr, pAddr2->addr.extAddr));
   \   00008C                ; Setup parameters for call to function sAddrExtCmp
   \   00008C   EE           MOV       A,R6
   \   00008D   FC           MOV       R4,A
   \   00008E   EF           MOV       A,R7
   \   00008F   FD           MOV       R5,A
   \   000090   AA..         MOV       R2,?V0
   \   000092   AB..         MOV       R3,?V1
   \   000094   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000097   8002         SJMP      ??sAddrIden_1
    141            }
    142            else // unknown error
    143            {
    144              return FALSE;
   \                     ??sAddrIden_6:
   \   000099   7900         MOV       R1,#0x0
   \                     ??sAddrIden_1:
   \   00009B   7F02         MOV       R7,#0x2
   \   00009D   02....       LJMP      ?BANKED_LEAVE_XDATA
    145            }
    146          }
    147          
    148          /****************************************************************************
    149           * @fn          sAddrCpy
    150           *
    151           * @brief       Copy a device address.
    152           *
    153           * input parameters
    154           *
    155           * @param       pSrc         - Pointer to address to copy.
    156           *
    157           * output parameters
    158           *
    159           * @param       pDest        - Pointer to address of copy.
    160           *
    161           * @return      None.
    162           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    163          void sAddrCpy(sAddr_t *pDest, const sAddr_t *pSrc)
   \                     sAddrCpy:
    164          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
    165            pDest->addrMode = pSrc->addrMode;
   \   00000D   85..82       MOV       DPL,?V0
   \   000010   85..83       MOV       DPH,?V1
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   C0E0         PUSH      A
   \   00001E   8E82         MOV       DPL,R6
   \   000020   8F83         MOV       DPH,R7
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   D0E0         POP       A
   \   00002C   F0           MOVX      @DPTR,A
    166          
    167            if (pDest->addrMode == SADDR_MODE_EXT)
   \   00002D   8E82         MOV       DPL,R6
   \   00002F   8F83         MOV       DPH,R7
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   6403         XRL       A,#0x3
   \   00003C   700D         JNZ       ??sAddrCpy_0
    168            {
    169              MAP_sAddrExtCpy(pDest->addr.extAddr, pSrc->addr.extAddr);
   \   00003E                ; Setup parameters for call to function sAddrExtCpy
   \   00003E   AC..         MOV       R4,?V0
   \   000040   AD..         MOV       R5,?V1
   \   000042   EE           MOV       A,R6
   \   000043   FA           MOV       R2,A
   \   000044   EF           MOV       A,R7
   \   000045   FB           MOV       R3,A
   \   000046   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000049   8014         SJMP      ??sAddrCpy_1
    170            }
    171            else
    172            {
    173              pDest->addr.shortAddr = pSrc->addr.shortAddr;
   \                     ??sAddrCpy_0:
   \   00004B   85..82       MOV       DPL,?V0
   \   00004E   85..83       MOV       DPH,?V1
   \   000051   E0           MOVX      A,@DPTR
   \   000052   F8           MOV       R0,A
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   F9           MOV       R1,A
   \   000056   8E82         MOV       DPL,R6
   \   000058   8F83         MOV       DPH,R7
   \   00005A   E8           MOV       A,R0
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   A3           INC       DPTR
   \   00005D   E9           MOV       A,R1
   \   00005E   F0           MOVX      @DPTR,A
    174            }
    175          }
   \                     ??sAddrCpy_1:
   \   00005F   7F02         MOV       R7,#0x2
   \   000061   02....       LJMP      ?BANKED_LEAVE_XDATA
    176          
    177          /****************************************************************************
    178           * @fn          sAddrExtCmp
    179           *
    180           * @brief       Compare two extended addresses.
    181           *
    182           * input parameters
    183           *
    184           * @param       pAddr1        - Pointer to first address.
    185           * @param       pAddr2        - Pointer to second address.
    186           *
    187           * output parameters
    188           *
    189           * @return      TRUE if addresses are equal, FALSE otherwise
    190           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    191          bool sAddrExtCmp(const uint8 * pAddr1, const uint8 * pAddr2)
   \                     sAddrExtCmp:
    192          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    193            uint8 i;
    194          
    195            for (i = SADDR_EXT_LEN; i != 0; i--)
   \   000005   75..08       MOV       ?V0,#0x8
   \                     ??sAddrExtCmp_0:
   \   000008   E5..         MOV       A,?V0
   \   00000A   6030         JZ        ??sAddrExtCmp_1
    196            {
    197              if (*pAddr1++ != *pAddr2++)
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   \   000010   8E82         MOV       DPL,R6
   \   000012   8F83         MOV       DPH,R7
   \   000014   A3           INC       DPTR
   \   000015   AA82         MOV       R2,DPL
   \   000017   AB83         MOV       R3,DPH
   \   000019   EC           MOV       A,R4
   \   00001A   F8           MOV       R0,A
   \   00001B   ED           MOV       A,R5
   \   00001C   F9           MOV       R1,A
   \   00001D   8882         MOV       DPL,R0
   \   00001F   8983         MOV       DPH,R1
   \   000021   A3           INC       DPTR
   \   000022   AC82         MOV       R4,DPL
   \   000024   AD83         MOV       R5,DPH
   \   000026   8E82         MOV       DPL,R6
   \   000028   8F83         MOV       DPH,R7
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   FE           MOV       R6,A
   \   00002C   8882         MOV       DPL,R0
   \   00002E   8983         MOV       DPH,R1
   \   000030   E0           MOVX      A,@DPTR
   \   000031   6E           XRL       A,R6
   \   000032   6004         JZ        ??sAddrExtCmp_2
    198              {
    199                return FALSE;
   \   000034   7900         MOV       R1,#0x0
   \   000036   8006         SJMP      ??sAddrExtCmp_3
    200              }
    201            }
   \                     ??sAddrExtCmp_2:
   \   000038   15..         DEC       ?V0
   \   00003A   80CC         SJMP      ??sAddrExtCmp_0
    202            return TRUE;
   \                     ??sAddrExtCmp_1:
   \   00003C   7901         MOV       R1,#0x1
   \                     ??sAddrExtCmp_3:
   \   00003E   7F02         MOV       R7,#0x2
   \   000040   02....       LJMP      ?BANKED_LEAVE_XDATA
    203          }
    204          
    205          /****************************************************************************
    206           * @fn          sAddrExtCpy
    207           *
    208           * @brief       Copy an extended address.
    209           *
    210           * input parameters
    211           *
    212           * @param       pSrc         - Pointer to address to copy.
    213           *
    214           * output parameters
    215           *
    216           * @param       pDest        - Pointer to address of copy.
    217           *
    218           * @return      pDest + SADDR_EXT_LEN.
    219           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    220          void *sAddrExtCpy(uint8 * pDest, const uint8 * pSrc)
   \                     sAddrExtCpy:
    221          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
    222            return osal_memcpy(pDest, pSrc, SADDR_EXT_LEN);
   \   00000D                ; Setup parameters for call to function osal_memcpy
   \   00000D   85....       MOV       ?V4,?V0
   \   000010   85....       MOV       ?V5,?V1
   \   000013   75..00       MOV       ?V6,#0x0
   \   000016   78..         MOV       R0,#?V4
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00001B   7C08         MOV       R4,#0x8
   \   00001D   7D00         MOV       R5,#0x0
   \   00001F   EE           MOV       A,R6
   \   000020   FA           MOV       R2,A
   \   000021   EF           MOV       A,R7
   \   000022   FB           MOV       R3,A
   \   000023   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000026   7403         MOV       A,#0x3
   \   000028   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002B   7F07         MOV       R7,#0x7
   \   00002D   02....       LJMP      ?BANKED_LEAVE_XDATA
    223          }
    224          
    225          
    226          
    227          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     10   sAddrCmp
        0     10   -> sAddrExtCmp
      1     10   sAddrCpy
        0     10   -> sAddrExtCpy
      0     20   sAddrExtCmp
      0     28   sAddrExtCpy
        0     18   -> osal_memcpy
      0     10   sAddrIden
        0     10   -> sAddrExtCmp


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     160  sAddrCmp
     100  sAddrCpy
      67  sAddrExtCmp
      48  sAddrExtCpy
     160  sAddrIden
      30  -- Other

 
 535 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
 
  30 bytes of CODE     memory
 535 bytes of HUGECODE memory

Errors: none
Warnings: none
