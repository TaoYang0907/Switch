###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               31/Jul/2020  11:47:26
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\AA\Z-Stack 3.0.2\Components\osal\common\OSAL.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EWCDA8.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\osal\common\OSAL.c" -D SECURE=1 -D TC_LINKKEY_JOIN -D
#        NV_INIT -D NV_RESTORE -D POWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D
#        xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_GROUPS -D
#        BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\OSAL.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\OSAL.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\osal\common\OSAL.c
      1          /**************************************************************************************************
      2            Filename:       OSAL.c
      3            Revised:        $Date: 2014-11-04 15:36:27 -0800 (Tue, 04 Nov 2014) $
      4            Revision:       $Revision: 40989 $
      5          
      6            Description:    This API allows the software components in the Z-stack to be written
      7                            independently of the specifics of the operating system, kernel or tasking
      8                            environment (including control loops or connect-to-interrupt systems).
      9          
     10          
     11            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     12          
     13            IMPORTANT: Your use of this Software is limited to those specific rights
     14            granted under the terms of a software license agreement between the user
     15            who downloaded the software, his/her employer (which must be your employer)
     16            and Texas Instruments Incorporated (the "License"). You may not use this
     17            Software unless you agree to abide by the terms of the License. The License
     18            limits your use, and you acknowledge, that the Software may not be modified,
     19            copied or distributed unless embedded on a Texas Instruments microcontroller
     20            or used solely and exclusively in conjunction with a Texas Instruments radio
     21            frequency transceiver, which is integrated into your product. Other than for
     22            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     23            works of, modify, distribute, perform, display or sell this Software and/or
     24            its documentation for any purpose.
     25          
     26            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     27            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     28            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     29            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     30            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     31            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     32            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     33            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     34            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     35            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     36            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     37          
     38            Should you have any questions regarding your right to use this Software,
     39            contact Texas Instruments Incorporated at www.TI.com.
     40          **************************************************************************************************/
     41          
     42          /*********************************************************************
     43           * INCLUDES
     44           */
     45          
     46          #include <string.h>
     47          
     48          #include "comdef.h"
     49          #include "hal_board.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     50          #include "OSAL.h"
     51          #include "OSAL_Tasks.h"
     52          #include "OSAL_Memory.h"
     53          #include "OSAL_PwrMgr.h"
     54          #include "OSAL_Clock.h"
     55          
     56          #include "OnBoard.h"
     57          
     58          /* HAL */
     59          #include "hal_drivers.h"
     60          
     61          #ifdef IAR_ARMCM3_LM
     62            #include "FreeRTOSConfig.h"
     63            #include "osal_task.h"
     64          #endif
     65          
     66          #ifdef USE_ICALL
     67            #include <ICall.h>
     68          #endif /* USE_ICALL */
     69          
     70          /*********************************************************************
     71           * MACROS
     72           */
     73          
     74          /*********************************************************************
     75           * CONSTANTS
     76           */
     77          #ifdef USE_ICALL
     78          // A bit mask to use to indicate a proxy OSAL task ID.
     79          #define OSAL_PROXY_ID_FLAG       0x80
     80          #endif // USE_ICALL
     81          
     82          /*********************************************************************
     83           * TYPEDEFS
     84           */
     85          
     86          /*********************************************************************
     87           * GLOBAL VARIABLES
     88           */
     89          
     90          // Message Pool Definitions

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     91          osal_msg_q_t osal_qHead;
   \                     osal_qHead:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     92          
     93          #ifdef USE_ICALL
     94          // OSAL event loop hook function pointer 
     95          void (*osal_eventloop_hook)(void) = NULL;
     96          #endif /* USE_ICALL */
     97          
     98          /*********************************************************************
     99           * EXTERNAL VARIABLES
    100           */
    101          
    102          /*********************************************************************
    103           * EXTERNAL FUNCTIONS
    104           */
    105          
    106          /*********************************************************************
    107           * LOCAL VARIABLES
    108           */
    109          
    110          // Index of active task

   \                                 In  segment XDATA_I, align 1, keep-with-next
    111          static uint8 activeTaskID = TASK_NO_TASK;
   \                     activeTaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for activeTaskID>`
   \   000001                REQUIRE __INIT_XDATA_I
    112          
    113          #ifdef USE_ICALL
    114          // Maximum number of proxy tasks
    115          #ifndef OSAL_MAX_NUM_PROXY_TASKS
    116          #define OSAL_MAX_NUM_PROXY_TASKS 2
    117          #endif // OSAL_MAX_NUM_PROXY_TASKS
    118          
    119          // ICall entity ID value used to indicate invalid value
    120          #define OSAL_INVALID_DISPATCH_ID 0xffu
    121          
    122          // Semaphore associated with OSAL RTOS thread receive queue
    123          ICall_Semaphore osal_semaphore;
    124          
    125          // Entity ID that OSAL RTOS thread has registered with
    126          ICall_EntityID osal_entity;
    127          
    128          // Last read tick count value reflected into the OSAL timer
    129          uint_least32_t osal_last_timestamp;
    130          
    131          // RTOS tick period in microseconds
    132          uint_least32_t osal_tickperiod;
    133          
    134          // Maximum timeout value in milliseconds that can be used with an RTOS timer
    135          uint_least32_t osal_max_msecs;
    136          
    137          // Timer ID for RTOS timer as backend engine for OSAL timer
    138          static ICall_TimerID osal_timerid_msec_timer;
    139          
    140          // Timer callback sequence tracking counter to handle race condition
    141          static unsigned osal_msec_timer_seq = 0;
    142          
    143          // proxy task ID map
    144          static uint8 osal_proxy_tasks[OSAL_MAX_NUM_PROXY_TASKS];
    145          
    146          // service dispatcher entity IDs corresponding to OSAL tasks
    147          static uint8 *osal_dispatch_entities;
    148          
    149          static uint8 osal_notask_entity;
    150          
    151          #endif // USE_ICALL
    152          
    153          /*********************************************************************
    154           * LOCAL FUNCTION PROTOTYPES
    155           */
    156          
    157          static uint8 osal_msg_enqueue_push( uint8 destination_task, uint8 *msg_ptr, uint8 urgent );
    158          
    159          #ifdef USE_ICALL
    160          static uint8 osal_alien2proxy(ICall_EntityID entity);
    161          static ICall_EntityID osal_proxy2alien(uint8 proxyid);
    162          static uint8 osal_dispatch2id(ICall_EntityID entity);
    163          static void osal_msec_timer_cback(void *arg);
    164          #endif // USE_ICALL
    165          
    166          /*********************************************************************
    167           * HELPER FUNCTIONS
    168           */
    169          /* very ugly stub so Keil can compile */
    170          #ifdef __KEIL__
    171          char *  itoa ( int value, char * buffer, int radix )
    172          {
    173            return(buffer);
    174          }
    175          #endif
    176          
    177          /*********************************************************************
    178           * @fn      osal_strlen
    179           *
    180           * @brief
    181           *
    182           *   Calculates the length of a string.  The string must be null
    183           *   terminated.
    184           *
    185           * @param   char *pString - pointer to text string
    186           *
    187           * @return  int - number of characters
    188           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    189          int osal_strlen( char *pString )
   \                     osal_strlen:
    190          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    191            return (int)( strlen( pString ) );
   \   000009                ; Setup parameters for call to function strlen
   \   000009   EE           MOV       A,R6
   \   00000A   FA           MOV       R2,A
   \   00000B   EF           MOV       A,R7
   \   00000C   FB           MOV       R3,A
   \   00000D   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   000010   7F01         MOV       R7,#0x1
   \   000012   02....       LJMP      ?BANKED_LEAVE_XDATA
    192          }
    193          
    194          /*********************************************************************
    195           * @fn      osal_memcpy
    196           *
    197           * @brief
    198           *
    199           *   Generic memory copy.
    200           *
    201           *   Note: This function differs from the standard memcpy(), since
    202           *         it returns the pointer to the next destination uint8. The
    203           *         standard memcpy() returns the original destination address.
    204           *
    205           * @param   dst - destination address
    206           * @param   src - source address
    207           * @param   len - number of bytes to copy
    208           *
    209           * @return  pointer to end of destination buffer
    210           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    211          void *osal_memcpy( void *dst, const void GENERIC *src, unsigned int len )
   \                     osal_memcpy:
    212          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   740F         MOV       A,#0xf
   \   00000B   12....       LCALL     ?XSTACK_DISP0_8
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F5..         MOV       ?V4,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F5..         MOV       ?V5,A
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F5..         MOV       ?V6,A
    213            uint8 *pDst;
    214            const uint8 GENERIC *pSrc;
    215          
    216            pSrc = src;
   \   000019   85....       MOV       ?V0,?V4
   \   00001C   85....       MOV       ?V1,?V5
   \   00001F   85....       MOV       ?V2,?V6
    217            pDst = dst;
   \   000022   8E82         MOV       DPL,R6
   \   000024   8F83         MOV       DPH,R7
    218          
    219            while ( len-- )
   \                     ??osal_memcpy_0:
   \   000026   EC           MOV       A,R4
   \   000027   F8           MOV       R0,A
   \   000028   ED           MOV       A,R5
   \   000029   F9           MOV       R1,A
   \   00002A   E8           MOV       A,R0
   \   00002B   24FF         ADD       A,#-0x1
   \   00002D   FC           MOV       R4,A
   \   00002E   E9           MOV       A,R1
   \   00002F   34FF         ADDC      A,#-0x1
   \   000031   FD           MOV       R5,A
   \   000032   E8           MOV       A,R0
   \   000033   49           ORL       A,R1
   \   000034   601D         JZ        ??osal_memcpy_1
    220              *pDst++ = *pSrc++;
   \   000036   A9..         MOV       R1,?V0
   \   000038   AA..         MOV       R2,?V1
   \   00003A   AB..         MOV       R3,?V2
   \   00003C   12....       LCALL     ?C_GPTR_LOAD
   \   00003F   C0E0         PUSH      A
   \   000041   D0E0         POP       A
   \   000043   F0           MOVX      @DPTR,A
   \   000044   E5..         MOV       A,?V0
   \   000046   2401         ADD       A,#0x1
   \   000048   F5..         MOV       ?V0,A
   \   00004A   E5..         MOV       A,?V1
   \   00004C   3400         ADDC      A,#0x0
   \   00004E   F5..         MOV       ?V1,A
   \   000050   A3           INC       DPTR
   \   000051   80D3         SJMP      ??osal_memcpy_0
    221          
    222            return ( pDst );
   \                     ??osal_memcpy_1:
   \   000053   AA82         MOV       R2,DPL
   \   000055   AB83         MOV       R3,DPH
   \   000057   7F07         MOV       R7,#0x7
   \   000059   02....       LJMP      ?BANKED_LEAVE_XDATA
    223          }
    224          
    225          /*********************************************************************
    226           * @fn      osal_revmemcpy
    227           *
    228           * @brief   Generic reverse memory copy.  Starts at the end of the
    229           *   source buffer, by taking the source address pointer and moving
    230           *   pointer ahead "len" bytes, then decrementing the pointer.
    231           *
    232           *   Note: This function differs from the standard memcpy(), since
    233           *         it returns the pointer to the next destination uint8. The
    234           *         standard memcpy() returns the original destination address.
    235           *
    236           * @param   dst - destination address
    237           * @param   src - source address
    238           * @param   len - number of bytes to copy
    239           *
    240           * @return  pointer to end of destination buffer
    241           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    242          void *osal_revmemcpy( void *dst, const void GENERIC *src, unsigned int len )
   \                     osal_revmemcpy:
    243          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   \   00000D   740F         MOV       A,#0xf
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F5..         MOV       ?V4,A
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F5..         MOV       ?V5,A
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V6,A
    244            uint8 *pDst;
    245            const uint8 GENERIC *pSrc;
    246          
    247            pSrc = src;
   \   00001D   AC..         MOV       R4,?V4
   \   00001F   AD..         MOV       R5,?V5
   \   000021   AE..         MOV       R6,?V6
    248            pSrc += (len-1);
   \   000023   EC           MOV       A,R4
   \   000024   25..         ADD       A,?V2
   \   000026   FC           MOV       R4,A
   \   000027   ED           MOV       A,R5
   \   000028   35..         ADDC      A,?V3
   \   00002A   FD           MOV       R5,A
   \   00002B   EC           MOV       A,R4
   \   00002C   24FF         ADD       A,#-0x1
   \   00002E   FC           MOV       R4,A
   \   00002F   ED           MOV       A,R5
   \   000030   34FF         ADDC      A,#-0x1
   \   000032   FD           MOV       R5,A
    249            pDst = dst;
   \   000033   85..82       MOV       DPL,?V0
   \   000036   85..83       MOV       DPH,?V1
    250          
    251            while ( len-- )
   \                     ??osal_revmemcpy_0:
   \   000039   A8..         MOV       R0,?V2
   \   00003B   A9..         MOV       R1,?V3
   \   00003D   E8           MOV       A,R0
   \   00003E   24FF         ADD       A,#-0x1
   \   000040   F5..         MOV       ?V2,A
   \   000042   E9           MOV       A,R1
   \   000043   34FF         ADDC      A,#-0x1
   \   000045   F5..         MOV       ?V3,A
   \   000047   E8           MOV       A,R0
   \   000048   49           ORL       A,R1
   \   000049   6019         JZ        ??osal_revmemcpy_1
    252              *pDst++ = *pSrc--;
   \   00004B   EC           MOV       A,R4
   \   00004C   F9           MOV       R1,A
   \   00004D   ED           MOV       A,R5
   \   00004E   FA           MOV       R2,A
   \   00004F   EE           MOV       A,R6
   \   000050   FB           MOV       R3,A
   \   000051   12....       LCALL     ?C_GPTR_LOAD
   \   000054   C0E0         PUSH      A
   \   000056   D0E0         POP       A
   \   000058   F0           MOVX      @DPTR,A
   \   000059   EC           MOV       A,R4
   \   00005A   24FF         ADD       A,#-0x1
   \   00005C   FC           MOV       R4,A
   \   00005D   ED           MOV       A,R5
   \   00005E   34FF         ADDC      A,#-0x1
   \   000060   FD           MOV       R5,A
   \   000061   A3           INC       DPTR
   \   000062   80D5         SJMP      ??osal_revmemcpy_0
    253          
    254            return ( pDst );
   \                     ??osal_revmemcpy_1:
   \   000064   AA82         MOV       R2,DPL
   \   000066   AB83         MOV       R3,DPH
   \   000068   7F07         MOV       R7,#0x7
   \   00006A   02....       LJMP      ?BANKED_LEAVE_XDATA
    255          }
    256          
    257          /*********************************************************************
    258           * @fn      osal_memdup
    259           *
    260           * @brief   Allocates a buffer [with osal_mem_alloc()] and copies
    261           *          the src buffer into the newly allocated space.
    262           *
    263           * @param   src - source address
    264           * @param   len - number of bytes to copy
    265           *
    266           * @return  pointer to the new allocated buffer, or NULL if
    267           *          allocation problem.
    268           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    269          void *osal_memdup( const void GENERIC *src, unsigned int len )
   \                     osal_memdup:
    270          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V4,R1
   \   000007   8A..         MOV       ?V5,R2
   \   000009   8B..         MOV       ?V6,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
    271            uint8 *pDst;
    272          
    273            pDst = osal_mem_alloc( len );
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   EE           MOV       A,R6
   \   000010   FA           MOV       R2,A
   \   000011   EF           MOV       A,R7
   \   000012   FB           MOV       R3,A
   \   000013   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000016   8A..         MOV       ?V2,R2
   \   000018   8B..         MOV       ?V3,R3
   \   00001A   85....       MOV       ?V0,?V2
   \   00001D   85....       MOV       ?V1,?V3
    274            if ( pDst )
   \   000020   E5..         MOV       A,?V0
   \   000022   45..         ORL       A,?V1
   \   000024   601F         JZ        ??osal_memdup_0
    275            {
    276              VOID osal_memcpy( pDst, src, len );
   \   000026                ; Setup parameters for call to function osal_memcpy
   \   000026   78..         MOV       R0,#?V4
   \   000028   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00002B   EE           MOV       A,R6
   \   00002C   FC           MOV       R4,A
   \   00002D   EF           MOV       A,R7
   \   00002E   FD           MOV       R5,A
   \   00002F   AA..         MOV       R2,?V0
   \   000031   AB..         MOV       R3,?V1
   \   000033   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000036   7403         MOV       A,#0x3
   \   000038   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003B   8A..         MOV       ?V2,R2
   \   00003D   8B..         MOV       ?V3,R3
   \   00003F   85..82       MOV       DPL,?V2
   \   000042   85..83       MOV       DPH,?V3
    277            }
    278          
    279            return ( (void *)pDst );
   \                     ??osal_memdup_0:
   \   000045   AA..         MOV       R2,?V0
   \   000047   AB..         MOV       R3,?V1
   \   000049   7F07         MOV       R7,#0x7
   \   00004B   02....       LJMP      ?BANKED_LEAVE_XDATA
    280          }
    281          
    282          /*********************************************************************
    283           * @fn      osal_memcmp
    284           *
    285           * @brief
    286           *
    287           *   Generic memory compare.
    288           *
    289           * @param   src1 - source 1 addrexx
    290           * @param   src2 - source 2 address
    291           * @param   len - number of bytes to compare
    292           *
    293           * @return  TRUE - same, FALSE - different
    294           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    295          uint8 osal_memcmp( const void GENERIC *src1, const void GENERIC *src2, unsigned int len )
   \                     osal_memcmp:
    296          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000   74E9         MOV       A,#-0x17
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   E9           MOV       A,R1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   EA           MOV       A,R2
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   EB           MOV       A,R3
   \   000017   F0           MOVX      @DPTR,A
   \   000018   741A         MOV       A,#0x1a
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F5..         MOV       ?V8,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F5..         MOV       ?V9,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F5..         MOV       ?V10,A
    297            const uint8 GENERIC *pSrc1;
    298            const uint8 GENERIC *pSrc2;
    299          
    300            pSrc1 = src1;
   \   000028   85..82       MOV       DPL,?XSP + 0
   \   00002B   85..83       MOV       DPH,?XSP + 1
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F5..         MOV       ?V4,A
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   F5..         MOV       ?V5,A
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F5..         MOV       ?V6,A
    301            pSrc2 = src2;
   \   000039   85....       MOV       ?V0,?V8
   \   00003C   85....       MOV       ?V1,?V9
   \   00003F   85....       MOV       ?V2,?V10
    302          
    303            while ( len-- )
   \                     ??osal_memcmp_0:
   \   000042   EC           MOV       A,R4
   \   000043   F8           MOV       R0,A
   \   000044   ED           MOV       A,R5
   \   000045   F9           MOV       R1,A
   \   000046   E8           MOV       A,R0
   \   000047   24FF         ADD       A,#-0x1
   \   000049   FC           MOV       R4,A
   \   00004A   E9           MOV       A,R1
   \   00004B   34FF         ADDC      A,#-0x1
   \   00004D   FD           MOV       R5,A
   \   00004E   E8           MOV       A,R0
   \   00004F   49           ORL       A,R1
   \   000050   604A         JZ        ??osal_memcmp_1
    304            {
    305              if( *pSrc1++ != *pSrc2++ )
   \   000052   A9..         MOV       R1,?V4
   \   000054   AA..         MOV       R2,?V5
   \   000056   AB..         MOV       R3,?V6
   \   000058   89..         MOV       ?V4,R1
   \   00005A   8A..         MOV       ?V5,R2
   \   00005C   8B..         MOV       ?V6,R3
   \   00005E   E5..         MOV       A,?V4
   \   000060   2401         ADD       A,#0x1
   \   000062   F5..         MOV       ?V4,A
   \   000064   E5..         MOV       A,?V5
   \   000066   3400         ADDC      A,#0x0
   \   000068   F5..         MOV       ?V5,A
   \   00006A   85....       MOV       ?V12,?V0
   \   00006D   85....       MOV       ?V13,?V1
   \   000070   85....       MOV       ?V14,?V2
   \   000073   85....       MOV       ?V0,?V12
   \   000076   85....       MOV       ?V1,?V13
   \   000079   85....       MOV       ?V2,?V14
   \   00007C   E5..         MOV       A,?V0
   \   00007E   2401         ADD       A,#0x1
   \   000080   F5..         MOV       ?V0,A
   \   000082   E5..         MOV       A,?V1
   \   000084   3400         ADDC      A,#0x0
   \   000086   F5..         MOV       ?V1,A
   \   000088   12....       LCALL     ?C_GPTR_LOAD
   \   00008B   F8           MOV       R0,A
   \   00008C   A9..         MOV       R1,?V12
   \   00008E   AA..         MOV       R2,?V13
   \   000090   AB..         MOV       R3,?V14
   \   000092   12....       LCALL     ?C_GPTR_LOAD
   \   000095   68           XRL       A,R0
   \   000096   60AA         JZ        ??osal_memcmp_0
    306                return FALSE;
   \   000098   7900         MOV       R1,#0x0
   \   00009A   8002         SJMP      ??osal_memcmp_2
    307            }
    308            return TRUE;
   \                     ??osal_memcmp_1:
   \   00009C   7901         MOV       R1,#0x1
   \                     ??osal_memcmp_2:
   \   00009E   7403         MOV       A,#0x3
   \   0000A0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A3   7F0F         MOV       R7,#0xf
   \   0000A5   02....       LJMP      ?BANKED_LEAVE_XDATA
    309          }
    310          
    311          
    312          /*********************************************************************
    313           * @fn      osal_memset
    314           *
    315           * @brief
    316           *
    317           *   Set memory buffer to value.
    318           *
    319           * @param   dest - pointer to buffer
    320           * @param   value - what to set each uint8 of the message
    321           * @param   size - how big
    322           *
    323           * @return  pointer to destination buffer
    324           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    325          void *osal_memset( void *dest, uint8 value, int len )
   \                     osal_memset:
    326          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V2,R1
   \   00000B   8C..         MOV       ?V0,R4
   \   00000D   8D..         MOV       ?V1,R5
    327            return memset( dest, value, len );
   \   00000F                ; Setup parameters for call to function memset
   \   00000F   78..         MOV       R0,#?V0
   \   000011   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000014   E5..         MOV       A,?V2
   \   000016   FC           MOV       R4,A
   \   000017   7D00         MOV       R5,#0x0
   \   000019   EE           MOV       A,R6
   \   00001A   FA           MOV       R2,A
   \   00001B   EF           MOV       A,R7
   \   00001C   FB           MOV       R3,A
   \   00001D   12....       LCALL     `??memset::?relay`; Banked call to: memset
   \   000020   7402         MOV       A,#0x2
   \   000022   12....       LCALL     ?DEALLOC_XSTACK8
   \   000025   7F03         MOV       R7,#0x3
   \   000027   02....       LJMP      ?BANKED_LEAVE_XDATA
    328          }
    329          
    330          /*********************************************************************
    331           * @fn      osal_build_uint16
    332           *
    333           * @brief
    334           *
    335           *   Build a uint16 out of 2 bytes (0 then 1).
    336           *
    337           * @param   swapped - 0 then 1
    338           *
    339           * @return  uint16
    340           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    341          uint16 osal_build_uint16( uint8 *swapped )
   \                     osal_build_uint16:
    342          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    343            return ( BUILD_UINT16( swapped[0], swapped[1] ) );
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   E0           MOVX      A,@DPTR
   \   000009   FC           MOV       R4,A
   \   00000A   7D00         MOV       R5,#0x0
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F8           MOV       R0,A
   \   000013   7900         MOV       R1,#0x0
   \   000015   E4           CLR       A
   \   000016   C8           XCH       A,R0
   \   000017   F9           MOV       R1,A
   \   000018   EC           MOV       A,R4
   \   000019   28           ADD       A,R0
   \   00001A   FA           MOV       R2,A
   \   00001B   ED           MOV       A,R5
   \   00001C   39           ADDC      A,R1
   \   00001D   FB           MOV       R3,A
   \   00001E   D083         POP       DPH
   \   000020   D082         POP       DPL
   \   000022   02....       LJMP      ?BRET
    344          }
    345          
    346          /*********************************************************************
    347           * @fn      osal_build_uint32
    348           *
    349           * @brief
    350           *
    351           *   Build a uint32 out of sequential bytes.
    352           *
    353           * @param   swapped - sequential bytes
    354           * @param   len - number of bytes in the uint8 array
    355           *
    356           * @return  uint32
    357           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    358          uint32 osal_build_uint32( uint8 *swapped, uint8 len )
   \                     osal_build_uint32:
    359          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    360            if ( len == 2 )
   \   000007   7402         MOV       A,#0x2
   \   000009   6E           XRL       A,R6
   \   00000A   7036         JNZ       ??osal_build_uint32_0
    361              return ( BUILD_UINT32( swapped[0], swapped[1], 0L, 0L ) );
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F5..         MOV       ?V0,A
   \   000013   E4           CLR       A
   \   000014   F5..         MOV       ?V1,A
   \   000016   F5..         MOV       ?V2,A
   \   000018   F5..         MOV       ?V3,A
   \   00001A   8A82         MOV       DPL,R2
   \   00001C   8B83         MOV       DPH,R3
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V4,A
   \   000022   E4           CLR       A
   \   000023   F5..         MOV       ?V5,A
   \   000025   F5..         MOV       ?V6,A
   \   000027   F5..         MOV       ?V7,A
   \   000029   7408         MOV       A,#0x8
   \   00002B   78..         MOV       R0,#?V4
   \   00002D   12....       LCALL     ?L_SHL
   \   000030   78..         MOV       R0,#?V0
   \   000032   79..         MOV       R1,#?V4
   \   000034   12....       LCALL     ?L_ADD
   \   000037   AA..         MOV       R2,?V0
   \   000039   AB..         MOV       R3,?V1
   \   00003B   AC..         MOV       R4,?V2
   \   00003D   AD..         MOV       R5,?V3
   \   00003F   02....       LJMP      ??osal_build_uint32_1 & 0xFFFF
    362            else if ( len == 3 )
   \                     ??osal_build_uint32_0:
   \   000042   7403         MOV       A,#0x3
   \   000044   6E           XRL       A,R6
   \   000045   7054         JNZ       ??osal_build_uint32_2
    363              return ( BUILD_UINT32( swapped[0], swapped[1], swapped[2], 0L ) );
   \   000047   8A82         MOV       DPL,R2
   \   000049   8B83         MOV       DPH,R3
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   F5..         MOV       ?V0,A
   \   00004E   E4           CLR       A
   \   00004F   F5..         MOV       ?V1,A
   \   000051   F5..         MOV       ?V2,A
   \   000053   F5..         MOV       ?V3,A
   \   000055   8A82         MOV       DPL,R2
   \   000057   8B83         MOV       DPH,R3
   \   000059   A3           INC       DPTR
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   F5..         MOV       ?V4,A
   \   00005D   E4           CLR       A
   \   00005E   F5..         MOV       ?V5,A
   \   000060   F5..         MOV       ?V6,A
   \   000062   F5..         MOV       ?V7,A
   \   000064   7408         MOV       A,#0x8
   \   000066   78..         MOV       R0,#?V4
   \   000068   12....       LCALL     ?L_SHL
   \   00006B   78..         MOV       R0,#?V0
   \   00006D   79..         MOV       R1,#?V4
   \   00006F   12....       LCALL     ?L_ADD
   \   000072   8A82         MOV       DPL,R2
   \   000074   8B83         MOV       DPH,R3
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   E0           MOVX      A,@DPTR
   \   000079   F5..         MOV       ?V4,A
   \   00007B   E4           CLR       A
   \   00007C   F5..         MOV       ?V5,A
   \   00007E   F5..         MOV       ?V6,A
   \   000080   F5..         MOV       ?V7,A
   \   000082   7410         MOV       A,#0x10
   \   000084   78..         MOV       R0,#?V4
   \   000086   12....       LCALL     ?L_SHL
   \   000089   78..         MOV       R0,#?V0
   \   00008B   79..         MOV       R1,#?V4
   \   00008D   12....       LCALL     ?L_ADD
   \   000090   AA..         MOV       R2,?V0
   \   000092   AB..         MOV       R3,?V1
   \   000094   AC..         MOV       R4,?V2
   \   000096   AD..         MOV       R5,?V3
   \   000098   02....       LJMP      ??osal_build_uint32_1 & 0xFFFF
    364            else if ( len == 4 )
   \                     ??osal_build_uint32_2:
   \   00009B   7404         MOV       A,#0x4
   \   00009D   6E           XRL       A,R6
   \   00009E   7072         JNZ       ??osal_build_uint32_3
    365              return ( BUILD_UINT32( swapped[0], swapped[1], swapped[2], swapped[3] ) );
   \   0000A0   8A82         MOV       DPL,R2
   \   0000A2   8B83         MOV       DPH,R3
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   F5..         MOV       ?V0,A
   \   0000A7   E4           CLR       A
   \   0000A8   F5..         MOV       ?V1,A
   \   0000AA   F5..         MOV       ?V2,A
   \   0000AC   F5..         MOV       ?V3,A
   \   0000AE   8A82         MOV       DPL,R2
   \   0000B0   8B83         MOV       DPH,R3
   \   0000B2   A3           INC       DPTR
   \   0000B3   E0           MOVX      A,@DPTR
   \   0000B4   F5..         MOV       ?V4,A
   \   0000B6   E4           CLR       A
   \   0000B7   F5..         MOV       ?V5,A
   \   0000B9   F5..         MOV       ?V6,A
   \   0000BB   F5..         MOV       ?V7,A
   \   0000BD   7408         MOV       A,#0x8
   \   0000BF   78..         MOV       R0,#?V4
   \   0000C1   12....       LCALL     ?L_SHL
   \   0000C4   78..         MOV       R0,#?V0
   \   0000C6   79..         MOV       R1,#?V4
   \   0000C8   12....       LCALL     ?L_ADD
   \   0000CB   8A82         MOV       DPL,R2
   \   0000CD   8B83         MOV       DPH,R3
   \   0000CF   A3           INC       DPTR
   \   0000D0   A3           INC       DPTR
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   F5..         MOV       ?V4,A
   \   0000D4   E4           CLR       A
   \   0000D5   F5..         MOV       ?V5,A
   \   0000D7   F5..         MOV       ?V6,A
   \   0000D9   F5..         MOV       ?V7,A
   \   0000DB   7410         MOV       A,#0x10
   \   0000DD   78..         MOV       R0,#?V4
   \   0000DF   12....       LCALL     ?L_SHL
   \   0000E2   78..         MOV       R0,#?V0
   \   0000E4   79..         MOV       R1,#?V4
   \   0000E6   12....       LCALL     ?L_ADD
   \   0000E9   8A82         MOV       DPL,R2
   \   0000EB   8B83         MOV       DPH,R3
   \   0000ED   A3           INC       DPTR
   \   0000EE   A3           INC       DPTR
   \   0000EF   A3           INC       DPTR
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   F5..         MOV       ?V4,A
   \   0000F3   E4           CLR       A
   \   0000F4   F5..         MOV       ?V5,A
   \   0000F6   F5..         MOV       ?V6,A
   \   0000F8   F5..         MOV       ?V7,A
   \   0000FA   7418         MOV       A,#0x18
   \   0000FC   78..         MOV       R0,#?V4
   \   0000FE   12....       LCALL     ?L_SHL
   \   000101   78..         MOV       R0,#?V0
   \   000103   79..         MOV       R1,#?V4
   \   000105   12....       LCALL     ?L_ADD
   \   000108   AA..         MOV       R2,?V0
   \   00010A   AB..         MOV       R3,?V1
   \   00010C   AC..         MOV       R4,?V2
   \   00010E   AD..         MOV       R5,?V3
   \   000110   800D         SJMP      ??osal_build_uint32_1
    366            else
    367              return ( (uint32)swapped[0] );
   \                     ??osal_build_uint32_3:
   \   000112   8A82         MOV       DPL,R2
   \   000114   8B83         MOV       DPH,R3
   \   000116   E0           MOVX      A,@DPTR
   \   000117   F5..         MOV       ?V0,A
   \   000119   AA..         MOV       R2,?V0
   \   00011B   E4           CLR       A
   \   00011C   FB           MOV       R3,A
   \   00011D   FC           MOV       R4,A
   \   00011E   FD           MOV       R5,A
   \                     ??osal_build_uint32_1:
   \   00011F   7F08         MOV       R7,#0x8
   \   000121   02....       LJMP      ?BANKED_LEAVE_XDATA
    368          }
    369          
    370          #if !defined ( ZBIT ) && !defined ( ZBIT2 ) && !defined (UBIT)
    371          /*********************************************************************
    372           * @fn      _ltoa
    373           *
    374           * @brief
    375           *
    376           *   convert a long unsigned int to a string.
    377           *
    378           * @param  l - long to convert
    379           * @param  buf - buffer to convert to
    380           * @param  radix - 10 dec, 16 hex
    381           *
    382           * @return  pointer to buffer
    383           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    384          unsigned char * _ltoa(unsigned long l, unsigned char *buf, unsigned char radix)
   \                     _ltoa:
    385          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV       A,#-0x20
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   \   00000E   8C..         MOV       ?V6,R4
   \   000010   8D..         MOV       ?V7,R5
   \   000012   89..         MOV       ?V15,R1
    386          #if defined (__TI_COMPILER_VERSION)
    387            return ( (unsigned char*)ltoa( l, (char *)buf ) );
    388          #elif defined( __GNUC__ )
    389            return ( (char*)ltoa( l, buf, radix ) );
    390          #else
    391            unsigned char tmp1[10] = "", tmp2[10] = "", tmp3[10] = "";
   \   000014   90....       MOV       DPTR,#`?<Constant "">`
   \   000017   7402         MOV       A,#0x2
   \   000019   12....       LCALL     ?XSTACK_DISP102_8
   \   00001C   740A         MOV       A,#0xa
   \   00001E   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   000021   90....       MOV       DPTR,#`?<Constant "">_1`
   \   000024   740C         MOV       A,#0xc
   \   000026   12....       LCALL     ?XSTACK_DISP102_8
   \   000029   740A         MOV       A,#0xa
   \   00002B   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   00002E   90....       MOV       DPTR,#`?<Constant "">_2`
   \   000031   7416         MOV       A,#0x16
   \   000033   12....       LCALL     ?XSTACK_DISP102_8
   \   000036   740A         MOV       A,#0xa
   \   000038   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    392            unsigned short num1, num2, num3;
    393            unsigned char i;
    394          
    395            buf[0] = '\0';
   \   00003B   7438         MOV       A,#0x38
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   E0           MOVX      A,@DPTR
   \   000041   F8           MOV       R0,A
   \   000042   A3           INC       DPTR
   \   000043   E0           MOVX      A,@DPTR
   \   000044   F583         MOV       DPH,A
   \   000046   8882         MOV       DPL,R0
   \   000048   7400         MOV       A,#0x0
   \   00004A   F0           MOVX      @DPTR,A
    396          
    397            if ( radix == 10 )
   \   00004B   740A         MOV       A,#0xa
   \   00004D   65..         XRL       A,?V15
   \   00004F   6003         JZ        $+5
   \   000051   02....       LJMP      ??_ltoa_0 & 0xFFFF
    398            {
    399              num1 = l % 10000;
   \   000054   85....       MOV       ?V0,?V4
   \   000057   85....       MOV       ?V1,?V5
   \   00005A   85....       MOV       ?V2,?V6
   \   00005D   85....       MOV       ?V3,?V7
   \   000060   90....       MOV       DPTR,#__Constant_2710
   \   000063   78..         MOV       R0,#?V8
   \   000065   12....       LCALL     ?L_MOV_X
   \   000068   78..         MOV       R0,#?V0
   \   00006A   79..         MOV       R1,#?V8
   \   00006C   12....       LCALL     ?UL_DIV_MOD
   \   00006F   85....       MOV       ?V12,?V8
   \   000072   85....       MOV       ?V13,?V9
    400              num2 = (l / 10000) % 10000;
   \   000075   85....       MOV       ?V0,?V4
   \   000078   85....       MOV       ?V1,?V5
   \   00007B   85....       MOV       ?V2,?V6
   \   00007E   85....       MOV       ?V3,?V7
   \   000081   90....       MOV       DPTR,#__Constant_2710
   \   000084   78..         MOV       R0,#?V8
   \   000086   12....       LCALL     ?L_MOV_X
   \   000089   78..         MOV       R0,#?V0
   \   00008B   79..         MOV       R1,#?V8
   \   00008D   12....       LCALL     ?UL_DIV_MOD
   \   000090   90....       MOV       DPTR,#__Constant_2710
   \   000093   78..         MOV       R0,#?V8
   \   000095   12....       LCALL     ?L_MOV_X
   \   000098   78..         MOV       R0,#?V0
   \   00009A   79..         MOV       R1,#?V8
   \   00009C   12....       LCALL     ?UL_DIV_MOD
   \   00009F   AE..         MOV       R6,?V8
   \   0000A1   AF..         MOV       R7,?V9
    401              num3 = (unsigned short)(l / 100000000);
   \   0000A3   85....       MOV       ?V8,?V4
   \   0000A6   85....       MOV       ?V9,?V5
   \   0000A9   85....       MOV       ?V10,?V6
   \   0000AC   85....       MOV       ?V11,?V7
   \   0000AF   90....       MOV       DPTR,#__Constant_5f5e100
   \   0000B2   78..         MOV       R0,#?V0
   \   0000B4   12....       LCALL     ?L_MOV_X
   \   0000B7   78..         MOV       R0,#?V8
   \   0000B9   79..         MOV       R1,#?V0
   \   0000BB   12....       LCALL     ?UL_DIV_MOD
   \   0000BE   85..82       MOV       DPL,?XSP + 0
   \   0000C1   85..83       MOV       DPH,?XSP + 1
   \   0000C4   E5..         MOV       A,?V8
   \   0000C6   F0           MOVX      @DPTR,A
   \   0000C7   A3           INC       DPTR
   \   0000C8   E5..         MOV       A,?V9
   \   0000CA   F0           MOVX      @DPTR,A
    402          
    403              if (num3) _itoa(num3, tmp3, 10);
   \   0000CB   85..82       MOV       DPL,?XSP + 0
   \   0000CE   85..83       MOV       DPH,?XSP + 1
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   F8           MOV       R0,A
   \   0000D3   A3           INC       DPTR
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   F9           MOV       R1,A
   \   0000D6   E8           MOV       A,R0
   \   0000D7   49           ORL       A,R1
   \   0000D8   6015         JZ        ??_ltoa_1
   \   0000DA                ; Setup parameters for call to function _itoa
   \   0000DA   790A         MOV       R1,#0xa
   \   0000DC   7416         MOV       A,#0x16
   \   0000DE   12....       LCALL     ?XSTACK_DISP102_8
   \   0000E1   85..82       MOV       DPL,?XSP + 0
   \   0000E4   85..83       MOV       DPH,?XSP + 1
   \   0000E7   E0           MOVX      A,@DPTR
   \   0000E8   FA           MOV       R2,A
   \   0000E9   A3           INC       DPTR
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   FB           MOV       R3,A
   \   0000EC   12....       LCALL     `??_itoa::?relay`; Banked call to: _itoa
    404              if (num2) _itoa(num2, tmp2, 10);
   \                     ??_ltoa_1:
   \   0000EF   EE           MOV       A,R6
   \   0000F0   4F           ORL       A,R7
   \   0000F1   600E         JZ        ??_ltoa_2
   \   0000F3                ; Setup parameters for call to function _itoa
   \   0000F3   790A         MOV       R1,#0xa
   \   0000F5   740C         MOV       A,#0xc
   \   0000F7   12....       LCALL     ?XSTACK_DISP102_8
   \   0000FA   EE           MOV       A,R6
   \   0000FB   FA           MOV       R2,A
   \   0000FC   EF           MOV       A,R7
   \   0000FD   FB           MOV       R3,A
   \   0000FE   12....       LCALL     `??_itoa::?relay`; Banked call to: _itoa
    405              if (num1) _itoa(num1, tmp1, 10);
   \                     ??_ltoa_2:
   \   000101   E5..         MOV       A,?V12
   \   000103   45..         ORL       A,?V13
   \   000105   600E         JZ        ??_ltoa_3
   \   000107                ; Setup parameters for call to function _itoa
   \   000107   790A         MOV       R1,#0xa
   \   000109   7402         MOV       A,#0x2
   \   00010B   12....       LCALL     ?XSTACK_DISP102_8
   \   00010E   AA..         MOV       R2,?V12
   \   000110   AB..         MOV       R3,?V13
   \   000112   12....       LCALL     `??_itoa::?relay`; Banked call to: _itoa
    406          
    407              if (num3)
   \                     ??_ltoa_3:
   \   000115   85..82       MOV       DPL,?XSP + 0
   \   000118   85..83       MOV       DPH,?XSP + 1
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   F8           MOV       R0,A
   \   00011D   A3           INC       DPTR
   \   00011E   E0           MOVX      A,@DPTR
   \   00011F   F9           MOV       R1,A
   \   000120   E8           MOV       A,R0
   \   000121   49           ORL       A,R1
   \   000122   6051         JZ        ??_ltoa_4
    408              {
    409                strcpy((char*)buf, (char const*)tmp3);
   \   000124                ; Setup parameters for call to function strcpy
   \   000124   7416         MOV       A,#0x16
   \   000126   12....       LCALL     ?XSTACK_DISP102_8
   \   000129   7438         MOV       A,#0x38
   \   00012B   12....       LCALL     ?XSTACK_DISP0_8
   \   00012E   E0           MOVX      A,@DPTR
   \   00012F   FA           MOV       R2,A
   \   000130   A3           INC       DPTR
   \   000131   E0           MOVX      A,@DPTR
   \   000132   FB           MOV       R3,A
   \   000133   12....       LCALL     `??strcpy::?relay`; Banked call to: strcpy
    410                for (i = 0; i < 4 - strlen((char const*)tmp2); i++)
   \   000136   75..00       MOV       ?V14,#0x0
   \                     ??_ltoa_5:
   \   000139   E5..         MOV       A,?V14
   \   00013B   F5..         MOV       ?V0,A
   \   00013D   75..00       MOV       ?V1,#0x0
   \   000140                ; Setup parameters for call to function strlen
   \   000140   740C         MOV       A,#0xc
   \   000142   12....       LCALL     ?XSTACK_DISP101_8
   \   000145   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   000148   8A..         MOV       ?V2,R2
   \   00014A   8B..         MOV       ?V3,R3
   \   00014C   7404         MOV       A,#0x4
   \   00014E   C3           CLR       C
   \   00014F   95..         SUBB      A,?V2
   \   000151   F8           MOV       R0,A
   \   000152   7400         MOV       A,#0x0
   \   000154   95..         SUBB      A,?V3
   \   000156   F9           MOV       R1,A
   \   000157   C3           CLR       C
   \   000158   E5..         MOV       A,?V0
   \   00015A   98           SUBB      A,R0
   \   00015B   E5..         MOV       A,?V1
   \   00015D   99           SUBB      A,R1
   \   00015E   5015         JNC       ??_ltoa_4
    411                  strcat((char*)buf, "0");
   \   000160                ; Setup parameters for call to function strcat
   \   000160   7C..         MOV       R4,#`?<Constant "0">` & 0xff
   \   000162   7D..         MOV       R5,#(`?<Constant "0">` >> 8) & 0xff
   \   000164   7438         MOV       A,#0x38
   \   000166   12....       LCALL     ?XSTACK_DISP0_8
   \   000169   E0           MOVX      A,@DPTR
   \   00016A   FA           MOV       R2,A
   \   00016B   A3           INC       DPTR
   \   00016C   E0           MOVX      A,@DPTR
   \   00016D   FB           MOV       R3,A
   \   00016E   12....       LCALL     `??strcat::?relay`; Banked call to: strcat
   \   000171   05..         INC       ?V14
   \   000173   80C4         SJMP      ??_ltoa_5
    412              }
    413              strcat((char*)buf, (char const*)tmp2);
   \                     ??_ltoa_4:
   \   000175                ; Setup parameters for call to function strcat
   \   000175   740C         MOV       A,#0xc
   \   000177   12....       LCALL     ?XSTACK_DISP102_8
   \   00017A   7438         MOV       A,#0x38
   \   00017C   12....       LCALL     ?XSTACK_DISP0_8
   \   00017F   E0           MOVX      A,@DPTR
   \   000180   FA           MOV       R2,A
   \   000181   A3           INC       DPTR
   \   000182   E0           MOVX      A,@DPTR
   \   000183   FB           MOV       R3,A
   \   000184   12....       LCALL     `??strcat::?relay`; Banked call to: strcat
    414              if (num3 || num2)
   \   000187   85..82       MOV       DPL,?XSP + 0
   \   00018A   85..83       MOV       DPH,?XSP + 1
   \   00018D   E0           MOVX      A,@DPTR
   \   00018E   F8           MOV       R0,A
   \   00018F   A3           INC       DPTR
   \   000190   E0           MOVX      A,@DPTR
   \   000191   F9           MOV       R1,A
   \   000192   E8           MOV       A,R0
   \   000193   49           ORL       A,R1
   \   000194   7004         JNZ       ??_ltoa_6
   \   000196   EE           MOV       A,R6
   \   000197   4F           ORL       A,R7
   \   000198   603F         JZ        ??_ltoa_7
    415              {
    416                for (i = 0; i < 4 - strlen((char const*)tmp1); i++)
   \                     ??_ltoa_6:
   \   00019A   75..00       MOV       ?V14,#0x0
   \                     ??_ltoa_8:
   \   00019D   E5..         MOV       A,?V14
   \   00019F   F5..         MOV       ?V0,A
   \   0001A1   75..00       MOV       ?V1,#0x0
   \   0001A4                ; Setup parameters for call to function strlen
   \   0001A4   7402         MOV       A,#0x2
   \   0001A6   12....       LCALL     ?XSTACK_DISP101_8
   \   0001A9   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   0001AC   8A..         MOV       ?V2,R2
   \   0001AE   8B..         MOV       ?V3,R3
   \   0001B0   7404         MOV       A,#0x4
   \   0001B2   C3           CLR       C
   \   0001B3   95..         SUBB      A,?V2
   \   0001B5   F8           MOV       R0,A
   \   0001B6   7400         MOV       A,#0x0
   \   0001B8   95..         SUBB      A,?V3
   \   0001BA   F9           MOV       R1,A
   \   0001BB   C3           CLR       C
   \   0001BC   E5..         MOV       A,?V0
   \   0001BE   98           SUBB      A,R0
   \   0001BF   E5..         MOV       A,?V1
   \   0001C1   99           SUBB      A,R1
   \   0001C2   5015         JNC       ??_ltoa_7
    417                  strcat((char*)buf, "0");
   \   0001C4                ; Setup parameters for call to function strcat
   \   0001C4   7C..         MOV       R4,#`?<Constant "0">` & 0xff
   \   0001C6   7D..         MOV       R5,#(`?<Constant "0">` >> 8) & 0xff
   \   0001C8   7438         MOV       A,#0x38
   \   0001CA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CD   E0           MOVX      A,@DPTR
   \   0001CE   FA           MOV       R2,A
   \   0001CF   A3           INC       DPTR
   \   0001D0   E0           MOVX      A,@DPTR
   \   0001D1   FB           MOV       R3,A
   \   0001D2   12....       LCALL     `??strcat::?relay`; Banked call to: strcat
   \   0001D5   05..         INC       ?V14
   \   0001D7   80C4         SJMP      ??_ltoa_8
    418              }
    419              strcat((char*)buf, (char const*)tmp1);
   \                     ??_ltoa_7:
   \   0001D9                ; Setup parameters for call to function strcat
   \   0001D9   7402         MOV       A,#0x2
   \   0001DB   12....       LCALL     ?XSTACK_DISP102_8
   \   0001DE   7438         MOV       A,#0x38
   \   0001E0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E3   E0           MOVX      A,@DPTR
   \   0001E4   FA           MOV       R2,A
   \   0001E5   A3           INC       DPTR
   \   0001E6   E0           MOVX      A,@DPTR
   \   0001E7   FB           MOV       R3,A
   \   0001E8   12....       LCALL     `??strcat::?relay`; Banked call to: strcat
    420              if (!num3 && !num2 && !num1)
   \   0001EB   85..82       MOV       DPL,?XSP + 0
   \   0001EE   85..83       MOV       DPH,?XSP + 1
   \   0001F1   E0           MOVX      A,@DPTR
   \   0001F2   F8           MOV       R0,A
   \   0001F3   A3           INC       DPTR
   \   0001F4   E0           MOVX      A,@DPTR
   \   0001F5   F9           MOV       R1,A
   \   0001F6   E8           MOV       A,R0
   \   0001F7   49           ORL       A,R1
   \   0001F8   6003         JZ        $+5
   \   0001FA   02....       LJMP      ??_ltoa_9 & 0xFFFF
   \   0001FD   EE           MOV       A,R6
   \   0001FE   4F           ORL       A,R7
   \   0001FF   6003         JZ        $+5
   \   000201   02....       LJMP      ??_ltoa_9 & 0xFFFF
   \   000204   E5..         MOV       A,?V12
   \   000206   45..         ORL       A,?V13
   \   000208   6003         JZ        $+5
   \   00020A   02....       LJMP      ??_ltoa_9 & 0xFFFF
    421                strcpy((char*)buf, "0");
   \   00020D                ; Setup parameters for call to function strcpy
   \   00020D   7C..         MOV       R4,#`?<Constant "0">` & 0xff
   \   00020F   7D..         MOV       R5,#(`?<Constant "0">` >> 8) & 0xff
   \   000211   7438         MOV       A,#0x38
   \   000213   12....       LCALL     ?XSTACK_DISP0_8
   \   000216   E0           MOVX      A,@DPTR
   \   000217   FA           MOV       R2,A
   \   000218   A3           INC       DPTR
   \   000219   E0           MOVX      A,@DPTR
   \   00021A   FB           MOV       R3,A
   \   00021B   12....       LCALL     `??strcpy::?relay`; Banked call to: strcpy
   \   00021E   02....       LJMP      ??_ltoa_9 & 0xFFFF
    422            }
    423            else if ( radix == 16 )
   \                     ??_ltoa_0:
   \   000221   7410         MOV       A,#0x10
   \   000223   65..         XRL       A,?V15
   \   000225   6003         JZ        $+5
   \   000227   02....       LJMP      ??_ltoa_10 & 0xFFFF
    424            {
    425              num1 = l & 0x0000FFFF;
   \   00022A   85....       MOV       ?V0,?V4
   \   00022D   85....       MOV       ?V1,?V5
   \   000230   85....       MOV       ?V12,?V0
   \   000233   85....       MOV       ?V13,?V1
    426              num2 = l >> 16;
   \   000236   85....       MOV       ?V0,?V4
   \   000239   85....       MOV       ?V1,?V5
   \   00023C   85....       MOV       ?V2,?V6
   \   00023F   85....       MOV       ?V3,?V7
   \   000242   7410         MOV       A,#0x10
   \   000244   78..         MOV       R0,#?V0
   \   000246   12....       LCALL     ?UL_SHR
   \   000249   AE..         MOV       R6,?V0
   \   00024B   AF..         MOV       R7,?V1
    427          
    428              if (num2) _itoa(num2, tmp2, 16);
   \   00024D   EE           MOV       A,R6
   \   00024E   4F           ORL       A,R7
   \   00024F   600E         JZ        ??_ltoa_11
   \   000251                ; Setup parameters for call to function _itoa
   \   000251   7910         MOV       R1,#0x10
   \   000253   740C         MOV       A,#0xc
   \   000255   12....       LCALL     ?XSTACK_DISP102_8
   \   000258   EE           MOV       A,R6
   \   000259   FA           MOV       R2,A
   \   00025A   EF           MOV       A,R7
   \   00025B   FB           MOV       R3,A
   \   00025C   12....       LCALL     `??_itoa::?relay`; Banked call to: _itoa
    429              if (num1) _itoa(num1, tmp1, 16);
   \                     ??_ltoa_11:
   \   00025F   E5..         MOV       A,?V12
   \   000261   45..         ORL       A,?V13
   \   000263   600E         JZ        ??_ltoa_12
   \   000265                ; Setup parameters for call to function _itoa
   \   000265   7910         MOV       R1,#0x10
   \   000267   7402         MOV       A,#0x2
   \   000269   12....       LCALL     ?XSTACK_DISP102_8
   \   00026C   AA..         MOV       R2,?V12
   \   00026E   AB..         MOV       R3,?V13
   \   000270   12....       LCALL     `??_itoa::?relay`; Banked call to: _itoa
    430          
    431              if (num2)
   \                     ??_ltoa_12:
   \   000273   EE           MOV       A,R6
   \   000274   4F           ORL       A,R7
   \   000275   6051         JZ        ??_ltoa_13
    432              {
    433                strcpy((char*)buf,(char const*)tmp2);
   \   000277                ; Setup parameters for call to function strcpy
   \   000277   740C         MOV       A,#0xc
   \   000279   12....       LCALL     ?XSTACK_DISP102_8
   \   00027C   7438         MOV       A,#0x38
   \   00027E   12....       LCALL     ?XSTACK_DISP0_8
   \   000281   E0           MOVX      A,@DPTR
   \   000282   FA           MOV       R2,A
   \   000283   A3           INC       DPTR
   \   000284   E0           MOVX      A,@DPTR
   \   000285   FB           MOV       R3,A
   \   000286   12....       LCALL     `??strcpy::?relay`; Banked call to: strcpy
    434                for (i = 0; i < 4 - strlen((char const*)tmp1); i++)
   \   000289   75..00       MOV       ?V14,#0x0
   \                     ??_ltoa_14:
   \   00028C   E5..         MOV       A,?V14
   \   00028E   F5..         MOV       ?V0,A
   \   000290   75..00       MOV       ?V1,#0x0
   \   000293                ; Setup parameters for call to function strlen
   \   000293   7402         MOV       A,#0x2
   \   000295   12....       LCALL     ?XSTACK_DISP101_8
   \   000298   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   00029B   8A..         MOV       ?V2,R2
   \   00029D   8B..         MOV       ?V3,R3
   \   00029F   7404         MOV       A,#0x4
   \   0002A1   C3           CLR       C
   \   0002A2   95..         SUBB      A,?V2
   \   0002A4   F8           MOV       R0,A
   \   0002A5   7400         MOV       A,#0x0
   \   0002A7   95..         SUBB      A,?V3
   \   0002A9   F9           MOV       R1,A
   \   0002AA   C3           CLR       C
   \   0002AB   E5..         MOV       A,?V0
   \   0002AD   98           SUBB      A,R0
   \   0002AE   E5..         MOV       A,?V1
   \   0002B0   99           SUBB      A,R1
   \   0002B1   5015         JNC       ??_ltoa_13
    435                  strcat((char*)buf, "0");
   \   0002B3                ; Setup parameters for call to function strcat
   \   0002B3   7C..         MOV       R4,#`?<Constant "0">` & 0xff
   \   0002B5   7D..         MOV       R5,#(`?<Constant "0">` >> 8) & 0xff
   \   0002B7   7438         MOV       A,#0x38
   \   0002B9   12....       LCALL     ?XSTACK_DISP0_8
   \   0002BC   E0           MOVX      A,@DPTR
   \   0002BD   FA           MOV       R2,A
   \   0002BE   A3           INC       DPTR
   \   0002BF   E0           MOVX      A,@DPTR
   \   0002C0   FB           MOV       R3,A
   \   0002C1   12....       LCALL     `??strcat::?relay`; Banked call to: strcat
   \   0002C4   05..         INC       ?V14
   \   0002C6   80C4         SJMP      ??_ltoa_14
    436              }
    437              strcat((char*)buf, (char const*)tmp1);
   \                     ??_ltoa_13:
   \   0002C8                ; Setup parameters for call to function strcat
   \   0002C8   7402         MOV       A,#0x2
   \   0002CA   12....       LCALL     ?XSTACK_DISP102_8
   \   0002CD   7438         MOV       A,#0x38
   \   0002CF   12....       LCALL     ?XSTACK_DISP0_8
   \   0002D2   E0           MOVX      A,@DPTR
   \   0002D3   FA           MOV       R2,A
   \   0002D4   A3           INC       DPTR
   \   0002D5   E0           MOVX      A,@DPTR
   \   0002D6   FB           MOV       R3,A
   \   0002D7   12....       LCALL     `??strcat::?relay`; Banked call to: strcat
    438              if (!num2 && !num1)
   \   0002DA   EE           MOV       A,R6
   \   0002DB   4F           ORL       A,R7
   \   0002DC   701F         JNZ       ??_ltoa_9
   \   0002DE   E5..         MOV       A,?V12
   \   0002E0   45..         ORL       A,?V13
   \   0002E2   7019         JNZ       ??_ltoa_9
    439                strcpy((char*)buf, "0");
   \   0002E4                ; Setup parameters for call to function strcpy
   \   0002E4   7C..         MOV       R4,#`?<Constant "0">` & 0xff
   \   0002E6   7D..         MOV       R5,#(`?<Constant "0">` >> 8) & 0xff
   \   0002E8   7438         MOV       A,#0x38
   \   0002EA   12....       LCALL     ?XSTACK_DISP0_8
   \   0002ED   E0           MOVX      A,@DPTR
   \   0002EE   FA           MOV       R2,A
   \   0002EF   A3           INC       DPTR
   \   0002F0   E0           MOVX      A,@DPTR
   \   0002F1   FB           MOV       R3,A
   \   0002F2   12....       LCALL     `??strcpy::?relay`; Banked call to: strcpy
   \   0002F5   8006         SJMP      ??_ltoa_9
    440            }
    441            else
    442              return NULL;
   \                     ??_ltoa_10:
   \   0002F7   7A00         MOV       R2,#0x0
   \   0002F9   7B00         MOV       R3,#0x0
   \   0002FB   800A         SJMP      ??_ltoa_15
    443          
    444            return buf;
   \                     ??_ltoa_9:
   \   0002FD   7438         MOV       A,#0x38
   \   0002FF   12....       LCALL     ?XSTACK_DISP0_8
   \   000302   E0           MOVX      A,@DPTR
   \   000303   FA           MOV       R2,A
   \   000304   A3           INC       DPTR
   \   000305   E0           MOVX      A,@DPTR
   \   000306   FB           MOV       R3,A
   \                     ??_ltoa_15:
   \   000307   7420         MOV       A,#0x20
   \   000309   12....       LCALL     ?DEALLOC_XSTACK8
   \   00030C   7F10         MOV       R7,#0x10
   \   00030E   02....       LJMP      ?BANKED_LEAVE_XDATA
    445          #endif
    446          }
    447          #endif // !defined(ZBIT) && !defined(ZBIT2)
    448          
    449          /*********************************************************************
    450           * @fn        osal_rand
    451           *
    452           * @brief    Random number generator
    453           *
    454           * @param   none
    455           *
    456           * @return  uint16 - new random number
    457           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    458          uint16 osal_rand( void )
   \                     osal_rand:
    459          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    460            return ( Onboard_rand() );
   \   000004                ; Setup parameters for call to function Onboard_rand
   \   000004   12....       LCALL     `??Onboard_rand::?relay`; Banked call to: Onboard_rand
   \   000007   D083         POP       DPH
   \   000009   D082         POP       DPL
   \   00000B   02....       LJMP      ?BRET
    461          }
    462          
    463          /*********************************************************************
    464           * API FUNCTIONS
    465           *********************************************************************/
    466          
    467          #ifdef USE_ICALL
    468          /*********************************************************************
    469           * @fn      osal_prepare_svc_enroll
    470           *
    471           * @brief   Initialize data structures that map OSAL task ids to
    472           *          ICall entity ids.
    473           *
    474           * @param   none
    475           *
    476           * @return  none
    477           */
    478          static void osal_prepare_svc_enroll(void)
    479          {
    480            osal_dispatch_entities = (uint8 *) osal_mem_alloc(tasksCnt * 2);
    481            osal_memset(osal_dispatch_entities, OSAL_INVALID_DISPATCH_ID, tasksCnt * 2);
    482            osal_memset(osal_proxy_tasks, OSAL_INVALID_DISPATCH_ID,
    483                        OSAL_MAX_NUM_PROXY_TASKS);
    484          }
    485          
    486          /*********************************************************************
    487           * @fn      osal_enroll_dispatchid
    488           *
    489           * @brief   Map a task id to an ICall entity id for messaging in
    490           *          both directions (sending and receiving).
    491           *
    492           * @param   taskid       OSAL task id
    493           * @param   dispatchid   ICall entity id
    494           *
    495           * @return  none
    496           */
    497          void osal_enroll_dispatchid(uint8 taskid, ICall_EntityID dispatchid)
    498          {
    499            osal_dispatch_entities[taskid] = dispatchid;
    500            osal_dispatch_entities[tasksCnt + taskid] = dispatchid;
    501          }
    502          
    503          /*********************************************************************
    504           * @fn      osal_enroll_senderid
    505           *
    506           * @brief   Map a task id to an ICall entity id, which shall be used
    507           *          just for sending a message from an OSAL task.
    508           *          Note that osal_enroll_dispatchid() must never be called
    509           *          with the same OSAL task id used in this function call.
    510           *          However, it is OK to call osal_enroll_dispatchid()
    511           *          with the same ICall entity id and a different OSAL task id.
    512           *
    513           * @param   taskid       OSAL task id
    514           * @param   dispatchid   ICall entity id
    515           *
    516           * @return  none
    517           */
    518          void osal_enroll_senderid(uint8 taskid, ICall_EntityID dispatchid)
    519          {
    520            osal_dispatch_entities[tasksCnt + taskid] = dispatchid;
    521          }
    522          
    523          /*********************************************************************
    524           * @fn      osal_enroll_notasksender
    525           *
    526           * @brief   Map no task id to an ICall entity id, which shall be used
    527           *          just for sending a message from non-OSAL task.
    528           *
    529           * @param   dispatchid   ICall entity id
    530           *
    531           * @return  none
    532           */
    533          void osal_enroll_notasksender(ICall_EntityID dispatchid)
    534          {
    535            osal_notask_entity = dispatchid;
    536          }
    537          #endif /* USE_ICALL */
    538          
    539          /*********************************************************************
    540           * @fn      osal_msg_allocate
    541           *
    542           * @brief
    543           *
    544           *    This function is called by a task to allocate a message buffer
    545           *    into which the task will encode the particular message it wishes
    546           *    to send.  This common buffer scheme is used to strictly limit the
    547           *    creation of message buffers within the system due to RAM size
    548           *    limitations on the microprocessor.   Note that all message buffers
    549           *    are a fixed size (at least initially).  The parameter len is kept
    550           *    in case a message pool with varying fixed message sizes is later
    551           *    created (for example, a pool of message buffers of size LARGE,
    552           *    MEDIUM and SMALL could be maintained and allocated based on request
    553           *    from the tasks).
    554           *
    555           *
    556           * @param   uint8 len  - wanted buffer length
    557           *
    558           *
    559           * @return  pointer to allocated buffer or NULL if allocation failed.
    560           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    561          uint8 * osal_msg_allocate( uint16 len )
   \                     osal_msg_allocate:
    562          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    563            osal_msg_hdr_t *hdr;
    564          
    565            if ( len == 0 )
   \   000009   E5..         MOV       A,?V0
   \   00000B   45..         ORL       A,?V1
   \   00000D   7006         JNZ       ??osal_msg_allocate_0
    566              return ( NULL );
   \   00000F   7A00         MOV       R2,#0x0
   \   000011   7B00         MOV       R3,#0x0
   \   000013   8048         SJMP      ??osal_msg_allocate_1
    567          
    568            hdr = (osal_msg_hdr_t *) osal_mem_alloc( (short)(len + sizeof( osal_msg_hdr_t )) );
   \                     ??osal_msg_allocate_0:
   \   000015                ; Setup parameters for call to function osal_mem_alloc
   \   000015   E5..         MOV       A,?V0
   \   000017   2405         ADD       A,#0x5
   \   000019   FA           MOV       R2,A
   \   00001A   E4           CLR       A
   \   00001B   35..         ADDC      A,?V1
   \   00001D   FB           MOV       R3,A
   \   00001E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000021   8A..         MOV       ?V2,R2
   \   000023   8B..         MOV       ?V3,R3
   \   000025   AE..         MOV       R6,?V2
   \   000027   AF..         MOV       R7,?V3
    569            if ( hdr )
   \   000029   EE           MOV       A,R6
   \   00002A   4F           ORL       A,R7
   \   00002B   602C         JZ        ??osal_msg_allocate_2
    570            {
    571              hdr->next = NULL;
   \   00002D   8E82         MOV       DPL,R6
   \   00002F   8F83         MOV       DPH,R7
   \   000031   7400         MOV       A,#0x0
   \   000033   F0           MOVX      @DPTR,A
   \   000034   A3           INC       DPTR
   \   000035   7400         MOV       A,#0x0
   \   000037   F0           MOVX      @DPTR,A
    572              hdr->len = len;
   \   000038   8E82         MOV       DPL,R6
   \   00003A   8F83         MOV       DPH,R7
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   E5..         MOV       A,?V0
   \   000040   F0           MOVX      @DPTR,A
   \   000041   A3           INC       DPTR
   \   000042   E5..         MOV       A,?V1
   \   000044   F0           MOVX      @DPTR,A
    573              hdr->dest_id = TASK_NO_TASK;
   \   000045   8E82         MOV       DPL,R6
   \   000047   8F83         MOV       DPH,R7
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   74FF         MOV       A,#-0x1
   \   00004F   F0           MOVX      @DPTR,A
    574              return ( (uint8 *) (hdr + 1) );
   \   000050   EE           MOV       A,R6
   \   000051   2405         ADD       A,#0x5
   \   000053   FA           MOV       R2,A
   \   000054   E4           CLR       A
   \   000055   3F           ADDC      A,R7
   \   000056   FB           MOV       R3,A
   \   000057   8004         SJMP      ??osal_msg_allocate_1
    575            }
    576            else
    577              return ( NULL );
   \                     ??osal_msg_allocate_2:
   \   000059   7A00         MOV       R2,#0x0
   \   00005B   7B00         MOV       R3,#0x0
   \                     ??osal_msg_allocate_1:
   \   00005D   7F04         MOV       R7,#0x4
   \   00005F   02....       LJMP      ?BANKED_LEAVE_XDATA
    578          }
    579          
    580          /*********************************************************************
    581           * @fn      osal_msg_deallocate
    582           *
    583           * @brief
    584           *
    585           *    This function is used to deallocate a message buffer. This function
    586           *    is called by a task (or processing element) after it has finished
    587           *    processing a received message.
    588           *
    589           *
    590           * @param   uint8 *msg_ptr - pointer to new message buffer
    591           *
    592           * @return  SUCCESS, INVALID_MSG_POINTER
    593           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    594          uint8 osal_msg_deallocate( uint8 *msg_ptr )
   \                     osal_msg_deallocate:
    595          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    596            uint8 *x;
    597          
    598            if ( msg_ptr == NULL )
   \   000009   EE           MOV       A,R6
   \   00000A   4F           ORL       A,R7
   \   00000B   7004         JNZ       ??osal_msg_deallocate_0
    599              return ( INVALID_MSG_POINTER );
   \   00000D   7905         MOV       R1,#0x5
   \   00000F   8028         SJMP      ??osal_msg_deallocate_1
    600          
    601            // don't deallocate queued buffer
    602            if ( OSAL_MSG_ID( msg_ptr ) != TASK_NO_TASK )
   \                     ??osal_msg_deallocate_0:
   \   000011   EE           MOV       A,R6
   \   000012   24FF         ADD       A,#-0x1
   \   000014   F582         MOV       DPL,A
   \   000016   EF           MOV       A,R7
   \   000017   34FF         ADDC      A,#-0x1
   \   000019   F583         MOV       DPH,A
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   64FF         XRL       A,#0xff
   \   00001E   6004         JZ        ??osal_msg_deallocate_2
    603              return ( MSG_BUFFER_NOT_AVAIL );
   \   000020   7904         MOV       R1,#0x4
   \   000022   8015         SJMP      ??osal_msg_deallocate_1
    604          
    605            x = (uint8 *)((uint8 *)msg_ptr - sizeof( osal_msg_hdr_t ));
   \                     ??osal_msg_deallocate_2:
   \   000024   EE           MOV       A,R6
   \   000025   24FB         ADD       A,#-0x5
   \   000027   F8           MOV       R0,A
   \   000028   EF           MOV       A,R7
   \   000029   34FF         ADDC      A,#-0x1
   \   00002B   F9           MOV       R1,A
   \   00002C   88..         MOV       ?V0,R0
   \   00002E   89..         MOV       ?V1,R1
    606          
    607            osal_mem_free( (void *)x );
   \   000030                ; Setup parameters for call to function osal_mem_free
   \   000030   AA..         MOV       R2,?V0
   \   000032   AB..         MOV       R3,?V1
   \   000034   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    608          
    609            return ( SUCCESS );
   \   000037   7900         MOV       R1,#0x0
   \                     ??osal_msg_deallocate_1:
   \   000039   7F02         MOV       R7,#0x2
   \   00003B   02....       LJMP      ?BANKED_LEAVE_XDATA
    610          }
    611          
    612          /*********************************************************************
    613           * @fn      osal_msg_send
    614           *
    615           * @brief
    616           *
    617           *    This function is called by a task to send a command message to
    618           *    another task or processing element.  The sending_task field must
    619           *    refer to a valid task, since the task ID will be used
    620           *    for the response message.  This function will also set a message
    621           *    ready event in the destination tasks event list.
    622           *
    623           *
    624           * @param   uint8 destination_task - Send msg to Task ID
    625           * @param   uint8 *msg_ptr - pointer to new message buffer
    626           *
    627           * @return  SUCCESS, INVALID_TASK, INVALID_MSG_POINTER
    628           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    629          uint8 osal_msg_send( uint8 destination_task, uint8 *msg_ptr )
   \                     osal_msg_send:
    630          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    631          #ifdef USE_ICALL
    632            if (destination_task & OSAL_PROXY_ID_FLAG)
    633            {
    634              /* Destination is a proxy task */
    635              osal_msg_hdr_t *hdr = (osal_msg_hdr_t *)msg_ptr - 1;
    636              ICall_EntityID src, dst;
    637          
    638              uint8 taskid = osal_self();
    639              if (taskid == TASK_NO_TASK)
    640              {
    641                /* Call must have been made from either an ISR or a user-thread */
    642                src = osal_notask_entity;
    643              }
    644              else
    645              {
    646                src = (ICall_EntityID) osal_dispatch_entities[taskid + tasksCnt];
    647              }
    648              if (src == OSAL_INVALID_DISPATCH_ID)
    649              {
    650                /* The source entity is not registered */
    651                /* abort */
    652                ICall_abort();
    653                return FAILURE;
    654              }
    655              dst = osal_proxy2alien(destination_task);
    656              hdr->dest_id = TASK_NO_TASK;
    657              if (ICall_send(src, dst, ICALL_MSG_FORMAT_KEEP, msg_ptr) ==
    658                  ICALL_ERRNO_SUCCESS)
    659              {
    660                return SUCCESS;
    661              }
    662              osal_msg_deallocate(msg_ptr);
    663              return FAILURE;
    664            }
    665          #endif /* USE_ICALL */
    666            return ( osal_msg_enqueue_push( destination_task, msg_ptr, FALSE ) );
   \   00000B                ; Setup parameters for call to function osal_msg_enqueue_push
   \   00000B   7C00         MOV       R4,#0x0
   \   00000D   EE           MOV       A,R6
   \   00000E   FA           MOV       R2,A
   \   00000F   EF           MOV       A,R7
   \   000010   FB           MOV       R3,A
   \   000011   A9..         MOV       R1,?V0
   \   000013   12....       LCALL     `??osal_msg_enqueue_push::?relay`; Banked call to: osal_msg_enqueue_push
   \   000016   7F01         MOV       R7,#0x1
   \   000018   02....       LJMP      ?BANKED_LEAVE_XDATA
    667          }
    668          
    669          /*********************************************************************
    670           * @fn      osal_msg_push_front
    671           *
    672           * @brief
    673           *
    674           *    This function is called by a task to push a command message
    675           *    to the head of the OSAL queue. The destination_task field
    676           *    must refer to a valid task, since the task ID will be used to
    677           *    send the message to. This function will also set a message
    678           *    ready event in the destination task's event list.
    679           *
    680           * @param   uint8 destination_task - Send msg to Task ID
    681           * @param   uint8 *msg_ptr - pointer to message buffer
    682           *
    683           * @return  SUCCESS, INVALID_TASK, INVALID_MSG_POINTER
    684           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    685          uint8 osal_msg_push_front( uint8 destination_task, uint8 *msg_ptr )
   \                     osal_msg_push_front:
    686          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    687            return ( osal_msg_enqueue_push( destination_task, msg_ptr, TRUE ) );
   \   00000B                ; Setup parameters for call to function osal_msg_enqueue_push
   \   00000B   7C01         MOV       R4,#0x1
   \   00000D   EE           MOV       A,R6
   \   00000E   FA           MOV       R2,A
   \   00000F   EF           MOV       A,R7
   \   000010   FB           MOV       R3,A
   \   000011   A9..         MOV       R1,?V0
   \   000013   12....       LCALL     `??osal_msg_enqueue_push::?relay`; Banked call to: osal_msg_enqueue_push
   \   000016   7F01         MOV       R7,#0x1
   \   000018   02....       LJMP      ?BANKED_LEAVE_XDATA
    688          }
    689          
    690          /*********************************************************************
    691           * @fn      osal_msg_enqueue_push
    692           *
    693           * @brief
    694           *
    695           *    This function is called by a task to either enqueue (append to
    696           *    queue) or push (prepend to queue) a command message to the OSAL
    697           *    queue. The destination_task field must refer to a valid task,
    698           *    since the task ID will be used to send the message to. This 
    699           *    function will also set a message ready event in the destination
    700           *    task's event list.
    701           *
    702           * @param   uint8 destination_task - Send msg to Task ID
    703           * @param   uint8 *msg_ptr - pointer to message buffer
    704           * @param   uint8 push - TRUE to push, otherwise enqueue
    705           *
    706           * @return  SUCCESS, INVALID_TASK, INVALID_MSG_POINTER
    707           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    708          static uint8 osal_msg_enqueue_push( uint8 destination_task, uint8 *msg_ptr, uint8 push )
   \                     osal_msg_enqueue_push:
    709          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
   \   00000B   8C..         MOV       ?V1,R4
    710            if ( msg_ptr == NULL )
   \   00000D   EE           MOV       A,R6
   \   00000E   4F           ORL       A,R7
   \   00000F   7005         JNZ       ??osal_msg_enqueue_push_0
    711            {
    712              return ( INVALID_MSG_POINTER );
   \   000011   7905         MOV       R1,#0x5
   \   000013   02....       LJMP      ??osal_msg_enqueue_push_1 & 0xFFFF
    713            }
    714          
    715          #ifdef USE_ICALL
    716            if (destination_task & OSAL_PROXY_ID_FLAG)
    717            {
    718              ICall_abort();
    719            }
    720          #endif /* USE_ICALL */
    721          
    722            if ( destination_task >= tasksCnt )
   \                     ??osal_msg_enqueue_push_0:
   \   000016   90....       MOV       DPTR,#tasksCnt
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F8           MOV       R0,A
   \   00001B   E5..         MOV       A,?V0
   \   00001D   C3           CLR       C
   \   00001E   98           SUBB      A,R0
   \   00001F   400C         JC        ??osal_msg_enqueue_push_2
    723            {
    724              osal_msg_deallocate( msg_ptr );
   \   000021                ; Setup parameters for call to function osal_msg_deallocate
   \   000021   EE           MOV       A,R6
   \   000022   FA           MOV       R2,A
   \   000023   EF           MOV       A,R7
   \   000024   FB           MOV       R3,A
   \   000025   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \   000028   E9           MOV       A,R1
    725              return ( INVALID_TASK );
   \   000029   7903         MOV       R1,#0x3
   \   00002B   8069         SJMP      ??osal_msg_enqueue_push_1
    726            }
    727          
    728            // Check the message header
    729            if ( OSAL_MSG_NEXT( msg_ptr ) != NULL ||
    730                 OSAL_MSG_ID( msg_ptr ) != TASK_NO_TASK )
   \                     ??osal_msg_enqueue_push_2:
   \   00002D   EE           MOV       A,R6
   \   00002E   24FB         ADD       A,#-0x5
   \   000030   F582         MOV       DPL,A
   \   000032   EF           MOV       A,R7
   \   000033   34FF         ADDC      A,#-0x1
   \   000035   F583         MOV       DPH,A
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F8           MOV       R0,A
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F9           MOV       R1,A
   \   00003C   E8           MOV       A,R0
   \   00003D   49           ORL       A,R1
   \   00003E   700F         JNZ       ??osal_msg_enqueue_push_3
   \   000040   EE           MOV       A,R6
   \   000041   24FF         ADD       A,#-0x1
   \   000043   F582         MOV       DPL,A
   \   000045   EF           MOV       A,R7
   \   000046   34FF         ADDC      A,#-0x1
   \   000048   F583         MOV       DPH,A
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   64FF         XRL       A,#0xff
   \   00004D   600C         JZ        ??osal_msg_enqueue_push_4
    731            {
    732              osal_msg_deallocate( msg_ptr );
   \                     ??osal_msg_enqueue_push_3:
   \   00004F                ; Setup parameters for call to function osal_msg_deallocate
   \   00004F   EE           MOV       A,R6
   \   000050   FA           MOV       R2,A
   \   000051   EF           MOV       A,R7
   \   000052   FB           MOV       R3,A
   \   000053   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \   000056   E9           MOV       A,R1
    733              return ( INVALID_MSG_POINTER );
   \   000057   7905         MOV       R1,#0x5
   \   000059   803B         SJMP      ??osal_msg_enqueue_push_1
    734            }
    735          
    736            OSAL_MSG_ID( msg_ptr ) = destination_task;
   \                     ??osal_msg_enqueue_push_4:
   \   00005B   E5..         MOV       A,?V0
   \   00005D   C0E0         PUSH      A
   \   00005F   EE           MOV       A,R6
   \   000060   24FF         ADD       A,#-0x1
   \   000062   F582         MOV       DPL,A
   \   000064   EF           MOV       A,R7
   \   000065   34FF         ADDC      A,#-0x1
   \   000067   F583         MOV       DPH,A
   \   000069   D0E0         POP       A
   \   00006B   F0           MOVX      @DPTR,A
    737          
    738            if ( push == TRUE )
   \   00006C   7401         MOV       A,#0x1
   \   00006E   65..         XRL       A,?V1
   \   000070   700D         JNZ       ??osal_msg_enqueue_push_5
    739            {
    740              // prepend the message
    741              osal_msg_push( &osal_qHead, msg_ptr );
   \   000072                ; Setup parameters for call to function osal_msg_push
   \   000072   EE           MOV       A,R6
   \   000073   FC           MOV       R4,A
   \   000074   EF           MOV       A,R7
   \   000075   FD           MOV       R5,A
   \   000076   7A..         MOV       R2,#osal_qHead & 0xff
   \   000078   7B..         MOV       R3,#(osal_qHead >> 8) & 0xff
   \   00007A   12....       LCALL     `??osal_msg_push::?relay`; Banked call to: osal_msg_push
   \   00007D   800B         SJMP      ??osal_msg_enqueue_push_6
    742            }
    743            else
    744            {
    745              // append the message
    746              osal_msg_enqueue( &osal_qHead, msg_ptr );
   \                     ??osal_msg_enqueue_push_5:
   \   00007F                ; Setup parameters for call to function osal_msg_enqueue
   \   00007F   EE           MOV       A,R6
   \   000080   FC           MOV       R4,A
   \   000081   EF           MOV       A,R7
   \   000082   FD           MOV       R5,A
   \   000083   7A..         MOV       R2,#osal_qHead & 0xff
   \   000085   7B..         MOV       R3,#(osal_qHead >> 8) & 0xff
   \   000087   12....       LCALL     `??osal_msg_enqueue::?relay`; Banked call to: osal_msg_enqueue
    747            }
    748          
    749            // Signal the task that a message is waiting
    750            osal_set_event( destination_task, SYS_EVENT_MSG );
   \                     ??osal_msg_enqueue_push_6:
   \   00008A                ; Setup parameters for call to function osal_set_event
   \   00008A   7A00         MOV       R2,#0x0
   \   00008C   7B80         MOV       R3,#-0x80
   \   00008E   A9..         MOV       R1,?V0
   \   000090   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000093   E9           MOV       A,R1
    751          
    752            return ( SUCCESS );
   \   000094   7900         MOV       R1,#0x0
   \                     ??osal_msg_enqueue_push_1:
   \   000096   7F02         MOV       R7,#0x2
   \   000098   02....       LJMP      ?BANKED_LEAVE_XDATA
    753          }
    754          
    755          /*********************************************************************
    756           * @fn      osal_msg_receive
    757           *
    758           * @brief
    759           *
    760           *    This function is called by a task to retrieve a received command
    761           *    message. The calling task must deallocate the message buffer after
    762           *    processing the message using the osal_msg_deallocate() call.
    763           *
    764           * @param   uint8 task_id - receiving tasks ID
    765           *
    766           * @return  *uint8 - message information or NULL if no message
    767           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    768          uint8 *osal_msg_receive( uint8 task_id )
   \                     osal_msg_receive:
    769          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V3,R1
    770            osal_msg_hdr_t *listHdr;
    771            osal_msg_hdr_t *prevHdr = NULL;
   \   000007   75..00       MOV       ?V4,#0x0
   \   00000A   75..00       MOV       ?V5,#0x0
    772            osal_msg_hdr_t *foundHdr = NULL;
   \   00000D   7E00         MOV       R6,#0x0
   \   00000F   7F00         MOV       R7,#0x0
    773            halIntState_t   intState;
    774          
    775            // Hold off interrupts
    776            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000011   A2AF         MOV       C,0xa8.7
   \   000013   E4           CLR       A
   \   000014   33           RLC       A
   \   000015   F5..         MOV       ?V2,A
   \   000017   C2AF         CLR       0xa8.7
    777          
    778            // Point to the top of the queue
    779            listHdr = osal_qHead;
   \   000019   90....       MOV       DPTR,#osal_qHead
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F8           MOV       R0,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F9           MOV       R1,A
   \   000021   88..         MOV       ?V0,R0
   \   000023   89..         MOV       ?V1,R1
    780          
    781            // Look through the queue for a message that belongs to the asking task
    782            while ( listHdr != NULL )
   \                     ??osal_msg_receive_0:
   \   000025   E5..         MOV       A,?V0
   \   000027   45..         ORL       A,?V1
   \   000029   6038         JZ        ??osal_msg_receive_1
    783            {
    784              if ( (listHdr - 1)->dest_id == task_id )
   \   00002B   E5..         MOV       A,?V0
   \   00002D   24FF         ADD       A,#-0x1
   \   00002F   F582         MOV       DPL,A
   \   000031   E5..         MOV       A,?V1
   \   000033   34FF         ADDC      A,#-0x1
   \   000035   F583         MOV       DPH,A
   \   000037   E0           MOVX      A,@DPTR
   \   000038   65..         XRL       A,?V3
   \   00003A   7008         JNZ       ??osal_msg_receive_2
    785              {
    786                if ( foundHdr == NULL )
   \   00003C   EE           MOV       A,R6
   \   00003D   4F           ORL       A,R7
   \   00003E   7023         JNZ       ??osal_msg_receive_1
    787                {
    788                  // Save the first one
    789                  foundHdr = listHdr;
   \   000040   AE..         MOV       R6,?V0
   \   000042   AF..         MOV       R7,?V1
    790                }
    791                else
    792                {
    793                  // Second msg found, stop looking
    794                  break;
    795                }
    796              }
    797              if ( foundHdr == NULL )
   \                     ??osal_msg_receive_2:
   \   000044   EE           MOV       A,R6
   \   000045   4F           ORL       A,R7
   \   000046   7006         JNZ       ??osal_msg_receive_3
    798              {
    799                prevHdr = listHdr;
   \   000048   85....       MOV       ?V4,?V0
   \   00004B   85....       MOV       ?V5,?V1
    800              }
    801              listHdr = OSAL_MSG_NEXT( listHdr );
   \                     ??osal_msg_receive_3:
   \   00004E   E5..         MOV       A,?V0
   \   000050   24FB         ADD       A,#-0x5
   \   000052   F582         MOV       DPL,A
   \   000054   E5..         MOV       A,?V1
   \   000056   34FF         ADDC      A,#-0x1
   \   000058   F583         MOV       DPH,A
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   F5..         MOV       ?V0,A
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F5..         MOV       ?V1,A
   \   000061   80C2         SJMP      ??osal_msg_receive_0
    802            }
    803          
    804            // Is there more than one?
    805            if ( listHdr != NULL )
   \                     ??osal_msg_receive_1:
   \   000063   E5..         MOV       A,?V0
   \   000065   45..         ORL       A,?V1
   \   000067   600C         JZ        ??osal_msg_receive_4
    806            {
    807              // Yes, Signal the task that a message is waiting
    808              osal_set_event( task_id, SYS_EVENT_MSG );
   \   000069                ; Setup parameters for call to function osal_set_event
   \   000069   7A00         MOV       R2,#0x0
   \   00006B   7B80         MOV       R3,#-0x80
   \   00006D   A9..         MOV       R1,?V3
   \   00006F   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000072   E9           MOV       A,R1
   \   000073   800A         SJMP      ??osal_msg_receive_5
    809            }
    810            else
    811            {
    812              // No more
    813              osal_clear_event( task_id, SYS_EVENT_MSG );
   \                     ??osal_msg_receive_4:
   \   000075                ; Setup parameters for call to function osal_clear_event
   \   000075   7A00         MOV       R2,#0x0
   \   000077   7B80         MOV       R3,#-0x80
   \   000079   A9..         MOV       R1,?V3
   \   00007B   12....       LCALL     `??osal_clear_event::?relay`; Banked call to: osal_clear_event
   \   00007E   E9           MOV       A,R1
    814            }
    815          
    816            // Did we find a message?
    817            if ( foundHdr != NULL )
   \                     ??osal_msg_receive_5:
   \   00007F   EE           MOV       A,R6
   \   000080   4F           ORL       A,R7
   \   000081   6015         JZ        ??osal_msg_receive_6
    818            {
    819              // Take out of the link list
    820              osal_msg_extract( &osal_qHead, foundHdr, prevHdr );
   \   000083                ; Setup parameters for call to function osal_msg_extract
   \   000083   78..         MOV       R0,#?V4
   \   000085   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000088   EE           MOV       A,R6
   \   000089   FC           MOV       R4,A
   \   00008A   EF           MOV       A,R7
   \   00008B   FD           MOV       R5,A
   \   00008C   7A..         MOV       R2,#osal_qHead & 0xff
   \   00008E   7B..         MOV       R3,#(osal_qHead >> 8) & 0xff
   \   000090   12....       LCALL     `??osal_msg_extract::?relay`; Banked call to: osal_msg_extract
   \   000093   7402         MOV       A,#0x2
   \   000095   12....       LCALL     ?DEALLOC_XSTACK8
    821            }
    822          
    823            // Release interrupts
    824            HAL_EXIT_CRITICAL_SECTION(intState);
   \                     ??osal_msg_receive_6:
   \   000098   E5..         MOV       A,?V2
   \   00009A   A2E0         MOV       C,0xE0 /* A   */.0
   \   00009C   92AF         MOV       0xa8.7,C
    825          
    826            return ( (uint8*) foundHdr );
   \   00009E   EE           MOV       A,R6
   \   00009F   FA           MOV       R2,A
   \   0000A0   EF           MOV       A,R7
   \   0000A1   FB           MOV       R3,A
   \   0000A2   7F06         MOV       R7,#0x6
   \   0000A4   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   0000A7                REQUIRE _A_IEN0
    827          }
    828          
    829          /**************************************************************************************************
    830           * @fn          osal_msg_find
    831           *
    832           * @brief       This function finds in place an OSAL message matching the task_id and event
    833           *              parameters.
    834           *
    835           * input parameters
    836           *
    837           * @param       task_id - The OSAL task id that the enqueued OSAL message must match.
    838           * @param       event - The OSAL event id that the enqueued OSAL message must match.
    839           *
    840           * output parameters
    841           *
    842           * None.
    843           *
    844           * @return      NULL if no match, otherwise an in place pointer to the matching OSAL message.
    845           **************************************************************************************************
    846           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    847          osal_event_hdr_t *osal_msg_find(uint8 task_id, uint8 event)
   \                     osal_msg_find:
    848          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
    849            osal_msg_hdr_t *pHdr;
    850            halIntState_t intState;
    851          
    852            HAL_ENTER_CRITICAL_SECTION(intState);  // Hold off interrupts.
   \   000007   A2AF         MOV       C,0xa8.7
   \   000009   E4           CLR       A
   \   00000A   33           RLC       A
   \   00000B   F8           MOV       R0,A
   \   00000C   C2AF         CLR       0xa8.7
    853          
    854            pHdr = osal_qHead;  // Point to the top of the queue.
   \   00000E   90....       MOV       DPTR,#osal_qHead
   \   000011   E0           MOVX      A,@DPTR
   \   000012   FC           MOV       R4,A
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   FD           MOV       R5,A
   \   000016   EC           MOV       A,R4
   \   000017   FA           MOV       R2,A
   \   000018   ED           MOV       A,R5
   \   000019   FB           MOV       R3,A
    855          
    856            // Look through the queue for a message that matches the task_id and event parameters.
    857            while (pHdr != NULL)
   \                     ??osal_msg_find_0:
   \   00001A   EA           MOV       A,R2
   \   00001B   4B           ORL       A,R3
   \   00001C   6027         JZ        ??osal_msg_find_1
    858            {
    859              if (((pHdr-1)->dest_id == task_id) && (((osal_event_hdr_t *)pHdr)->event == event))
   \   00001E   EA           MOV       A,R2
   \   00001F   24FF         ADD       A,#-0x1
   \   000021   F582         MOV       DPL,A
   \   000023   EB           MOV       A,R3
   \   000024   34FF         ADDC      A,#-0x1
   \   000026   F583         MOV       DPH,A
   \   000028   E0           MOVX      A,@DPTR
   \   000029   69           XRL       A,R1
   \   00002A   7008         JNZ       ??osal_msg_find_2
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   E0           MOVX      A,@DPTR
   \   000031   6E           XRL       A,R6
   \   000032   6011         JZ        ??osal_msg_find_1
    860              {
    861                break;
    862              }
    863          
    864              pHdr = OSAL_MSG_NEXT(pHdr);
   \                     ??osal_msg_find_2:
   \   000034   EA           MOV       A,R2
   \   000035   24FB         ADD       A,#-0x5
   \   000037   F582         MOV       DPL,A
   \   000039   EB           MOV       A,R3
   \   00003A   34FF         ADDC      A,#-0x1
   \   00003C   F583         MOV       DPH,A
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   FA           MOV       R2,A
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   FB           MOV       R3,A
   \   000043   80D5         SJMP      ??osal_msg_find_0
    865            }
    866          
    867            HAL_EXIT_CRITICAL_SECTION(intState);  // Release interrupts.
   \                     ??osal_msg_find_1:
   \   000045   E8           MOV       A,R0
   \   000046   A2E0         MOV       C,0xE0 /* A   */.0
   \   000048   92AF         MOV       0xa8.7,C
    868          
    869            return (osal_event_hdr_t *)pHdr;
   \   00004A   7F01         MOV       R7,#0x1
   \   00004C   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   00004F                REQUIRE _A_IEN0
    870          }
    871          
    872          /**************************************************************************************************
    873           * @fn          osal_msg_count
    874           *
    875           * @brief       This function counts the number of messages, in the OSAL message queue with a
    876           *              a given task ID and message event type.
    877           *
    878           * input parameters
    879           *
    880           * @param       task_id - The OSAL task id that the enqueued OSAL message must match.
    881           * @param       event - The OSAL event id that the enqueued OSAL message must match. 0xFF for 
    882           *              all events.
    883           *
    884           * output parameters
    885           *
    886           * None.
    887           *
    888           * @return      The number of OSAL messages that match the task ID and Event.
    889           **************************************************************************************************
    890           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    891          uint8 osal_msg_count( uint8 task_id, uint8 event )
   \                     osal_msg_count:
    892          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FB           MOV       R3,A
    893            uint8 count = 0;
   \   000007   7900         MOV       R1,#0x0
    894            osal_msg_hdr_t *pHdr;
    895            halIntState_t intState;
    896          
    897            HAL_ENTER_CRITICAL_SECTION(intState);  // Hold off interrupts.
   \   000009   A2AF         MOV       C,0xa8.7
   \   00000B   E4           CLR       A
   \   00000C   33           RLC       A
   \   00000D   F8           MOV       R0,A
   \   00000E   C2AF         CLR       0xa8.7
    898          
    899            pHdr = osal_qHead;  // Point to the top of the queue.
   \   000010   90....       MOV       DPTR,#osal_qHead
   \   000013   E0           MOVX      A,@DPTR
   \   000014   FE           MOV       R6,A
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   FF           MOV       R7,A
   \   000018   EE           MOV       A,R6
   \   000019   FC           MOV       R4,A
   \   00001A   EF           MOV       A,R7
   \   00001B   FD           MOV       R5,A
    900          
    901            // Look through the queue for a message that matches the task_id and event parameters.
    902            while (pHdr != NULL)
   \                     ??osal_msg_count_0:
   \   00001C   EC           MOV       A,R4
   \   00001D   4D           ORL       A,R5
   \   00001E   602D         JZ        ??osal_msg_count_1
    903            {
    904              if ( ((pHdr-1)->dest_id == task_id) 
    905                  && ((event == 0xFF) || (((osal_event_hdr_t *)pHdr)->event == event)) )
   \   000020   EC           MOV       A,R4
   \   000021   24FF         ADD       A,#-0x1
   \   000023   F582         MOV       DPL,A
   \   000025   ED           MOV       A,R5
   \   000026   34FF         ADDC      A,#-0x1
   \   000028   F583         MOV       DPH,A
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   6B           XRL       A,R3
   \   00002C   700E         JNZ       ??osal_msg_count_2
   \   00002E   74FF         MOV       A,#-0x1
   \   000030   6A           XRL       A,R2
   \   000031   6008         JZ        ??osal_msg_count_3
   \   000033   8C82         MOV       DPL,R4
   \   000035   8D83         MOV       DPH,R5
   \   000037   E0           MOVX      A,@DPTR
   \   000038   6A           XRL       A,R2
   \   000039   7001         JNZ       ??osal_msg_count_2
    906              {
    907                count++;
   \                     ??osal_msg_count_3:
   \   00003B   09           INC       R1
    908              }
    909          
    910              pHdr = OSAL_MSG_NEXT(pHdr);
   \                     ??osal_msg_count_2:
   \   00003C   EC           MOV       A,R4
   \   00003D   24FB         ADD       A,#-0x5
   \   00003F   F582         MOV       DPL,A
   \   000041   ED           MOV       A,R5
   \   000042   34FF         ADDC      A,#-0x1
   \   000044   F583         MOV       DPH,A
   \   000046   E0           MOVX      A,@DPTR
   \   000047   FC           MOV       R4,A
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   FD           MOV       R5,A
   \   00004B   80CF         SJMP      ??osal_msg_count_0
    911            }
    912          
    913            HAL_EXIT_CRITICAL_SECTION(intState);  // Release interrupts.
   \                     ??osal_msg_count_1:
   \   00004D   E8           MOV       A,R0
   \   00004E   A2E0         MOV       C,0xE0 /* A   */.0
   \   000050   92AF         MOV       0xa8.7,C
    914          
    915            return ( count );
   \   000052   7F01         MOV       R7,#0x1
   \   000054   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000057                REQUIRE _A_IEN0
    916          }
    917          
    918          /*********************************************************************
    919           * @fn      osal_msg_enqueue
    920           *
    921           * @brief
    922           *
    923           *    This function enqueues an OSAL message into an OSAL queue.
    924           *
    925           * @param   osal_msg_q_t *q_ptr - OSAL queue
    926           * @param   void *msg_ptr  - OSAL message
    927           *
    928           * @return  none
    929           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    930          void osal_msg_enqueue( osal_msg_q_t *q_ptr, void *msg_ptr )
   \                     osal_msg_enqueue:
    931          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    932            void *list;
    933            halIntState_t intState;
    934          
    935            // Hold off interrupts
    936            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000005   A2AF         MOV       C,0xa8.7
   \   000007   E4           CLR       A
   \   000008   33           RLC       A
   \   000009   F5..         MOV       ?V0,A
   \   00000B   C2AF         CLR       0xa8.7
    937          
    938            OSAL_MSG_NEXT( msg_ptr ) = NULL;
   \   00000D   EC           MOV       A,R4
   \   00000E   24FB         ADD       A,#-0x5
   \   000010   F582         MOV       DPL,A
   \   000012   ED           MOV       A,R5
   \   000013   34FF         ADDC      A,#-0x1
   \   000015   F583         MOV       DPH,A
   \   000017   7400         MOV       A,#0x0
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   A3           INC       DPTR
   \   00001B   7400         MOV       A,#0x0
   \   00001D   F0           MOVX      @DPTR,A
    939            // If first message in queue
    940            if ( *q_ptr == NULL )
   \   00001E   8A82         MOV       DPL,R2
   \   000020   8B83         MOV       DPH,R3
   \   000022   E0           MOVX      A,@DPTR
   \   000023   FE           MOV       R6,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   FF           MOV       R7,A
   \   000027   EE           MOV       A,R6
   \   000028   4F           ORL       A,R7
   \   000029   700B         JNZ       ??osal_msg_enqueue_0
    941            {
    942              *q_ptr = msg_ptr;
   \   00002B   8A82         MOV       DPL,R2
   \   00002D   8B83         MOV       DPH,R3
   \   00002F   EC           MOV       A,R4
   \   000030   F0           MOVX      @DPTR,A
   \   000031   A3           INC       DPTR
   \   000032   ED           MOV       A,R5
   \   000033   F0           MOVX      @DPTR,A
   \   000034   8040         SJMP      ??osal_msg_enqueue_1
    943            }
    944            else
    945            {
    946              // Find end of queue
    947              for ( list = *q_ptr; OSAL_MSG_NEXT( list ) != NULL; list = OSAL_MSG_NEXT( list ) );
   \                     ??osal_msg_enqueue_0:
   \   000036   8A82         MOV       DPL,R2
   \   000038   8B83         MOV       DPH,R3
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   FE           MOV       R6,A
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   FF           MOV       R7,A
   \   00003F   EE           MOV       A,R6
   \   000040   F8           MOV       R0,A
   \   000041   EF           MOV       A,R7
   \   000042   F9           MOV       R1,A
   \                     ??osal_msg_enqueue_2:
   \   000043   E8           MOV       A,R0
   \   000044   24FB         ADD       A,#-0x5
   \   000046   F582         MOV       DPL,A
   \   000048   E9           MOV       A,R1
   \   000049   34FF         ADDC      A,#-0x1
   \   00004B   F583         MOV       DPH,A
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   FE           MOV       R6,A
   \   00004F   A3           INC       DPTR
   \   000050   E0           MOVX      A,@DPTR
   \   000051   FF           MOV       R7,A
   \   000052   EE           MOV       A,R6
   \   000053   4F           ORL       A,R7
   \   000054   6011         JZ        ??osal_msg_enqueue_3
   \   000056   E8           MOV       A,R0
   \   000057   24FB         ADD       A,#-0x5
   \   000059   F582         MOV       DPL,A
   \   00005B   E9           MOV       A,R1
   \   00005C   34FF         ADDC      A,#-0x1
   \   00005E   F583         MOV       DPH,A
   \   000060   E0           MOVX      A,@DPTR
   \   000061   F8           MOV       R0,A
   \   000062   A3           INC       DPTR
   \   000063   E0           MOVX      A,@DPTR
   \   000064   F9           MOV       R1,A
   \   000065   80DC         SJMP      ??osal_msg_enqueue_2
    948          
    949              // Add message to end of queue
    950              OSAL_MSG_NEXT( list ) = msg_ptr;
   \                     ??osal_msg_enqueue_3:
   \   000067   E8           MOV       A,R0
   \   000068   24FB         ADD       A,#-0x5
   \   00006A   F582         MOV       DPL,A
   \   00006C   E9           MOV       A,R1
   \   00006D   34FF         ADDC      A,#-0x1
   \   00006F   F583         MOV       DPH,A
   \   000071   EC           MOV       A,R4
   \   000072   F0           MOVX      @DPTR,A
   \   000073   A3           INC       DPTR
   \   000074   ED           MOV       A,R5
   \   000075   F0           MOVX      @DPTR,A
    951            }
    952          
    953            // Re-enable interrupts
    954            HAL_EXIT_CRITICAL_SECTION(intState);
   \                     ??osal_msg_enqueue_1:
   \   000076   E5..         MOV       A,?V0
   \   000078   A2E0         MOV       C,0xE0 /* A   */.0
   \   00007A   92AF         MOV       0xa8.7,C
    955          }
   \   00007C   7F01         MOV       R7,#0x1
   \   00007E   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000081                REQUIRE _A_IEN0
    956          
    957          /*********************************************************************
    958           * @fn      osal_msg_dequeue
    959           *
    960           * @brief
    961           *
    962           *    This function dequeues an OSAL message from an OSAL queue.
    963           *
    964           * @param   osal_msg_q_t *q_ptr - OSAL queue
    965           *
    966           * @return  void * - pointer to OSAL message or NULL of queue is empty.
    967           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    968          void *osal_msg_dequeue( osal_msg_q_t *q_ptr )
   \                     osal_msg_dequeue:
    969          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   F8           MOV       R0,A
   \   000007   EB           MOV       A,R3
   \   000008   F9           MOV       R1,A
    970            void *msg_ptr = NULL;
   \   000009   7A00         MOV       R2,#0x0
   \   00000B   7B00         MOV       R3,#0x0
    971            halIntState_t intState;
    972          
    973            // Hold off interrupts
    974            HAL_ENTER_CRITICAL_SECTION(intState);
   \   00000D   A2AF         MOV       C,0xa8.7
   \   00000F   E4           CLR       A
   \   000010   33           RLC       A
   \   000011   FE           MOV       R6,A
   \   000012   C2AF         CLR       0xa8.7
    975          
    976            if ( *q_ptr != NULL )
   \   000014   8882         MOV       DPL,R0
   \   000016   8983         MOV       DPH,R1
   \   000018   E0           MOVX      A,@DPTR
   \   000019   FC           MOV       R4,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   FD           MOV       R5,A
   \   00001D   EC           MOV       A,R4
   \   00001E   4D           ORL       A,R5
   \   00001F   6043         JZ        ??osal_msg_dequeue_0
    977            {
    978              // Dequeue message
    979              msg_ptr = *q_ptr;
   \   000021   8882         MOV       DPL,R0
   \   000023   8983         MOV       DPH,R1
   \   000025   E0           MOVX      A,@DPTR
   \   000026   FC           MOV       R4,A
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   FD           MOV       R5,A
   \   00002A   EC           MOV       A,R4
   \   00002B   FA           MOV       R2,A
   \   00002C   ED           MOV       A,R5
   \   00002D   FB           MOV       R3,A
    980              *q_ptr = OSAL_MSG_NEXT( msg_ptr );
   \   00002E   EA           MOV       A,R2
   \   00002F   24FB         ADD       A,#-0x5
   \   000031   F582         MOV       DPL,A
   \   000033   EB           MOV       A,R3
   \   000034   34FF         ADDC      A,#-0x1
   \   000036   F583         MOV       DPH,A
   \   000038   E0           MOVX      A,@DPTR
   \   000039   FC           MOV       R4,A
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   FD           MOV       R5,A
   \   00003D   8882         MOV       DPL,R0
   \   00003F   8983         MOV       DPH,R1
   \   000041   EC           MOV       A,R4
   \   000042   F0           MOVX      @DPTR,A
   \   000043   A3           INC       DPTR
   \   000044   ED           MOV       A,R5
   \   000045   F0           MOVX      @DPTR,A
    981              OSAL_MSG_NEXT( msg_ptr ) = NULL;
   \   000046   EA           MOV       A,R2
   \   000047   24FB         ADD       A,#-0x5
   \   000049   F582         MOV       DPL,A
   \   00004B   EB           MOV       A,R3
   \   00004C   34FF         ADDC      A,#-0x1
   \   00004E   F583         MOV       DPH,A
   \   000050   7400         MOV       A,#0x0
   \   000052   F0           MOVX      @DPTR,A
   \   000053   A3           INC       DPTR
   \   000054   7400         MOV       A,#0x0
   \   000056   F0           MOVX      @DPTR,A
    982              OSAL_MSG_ID( msg_ptr ) = TASK_NO_TASK;
   \   000057   EA           MOV       A,R2
   \   000058   24FF         ADD       A,#-0x1
   \   00005A   F582         MOV       DPL,A
   \   00005C   EB           MOV       A,R3
   \   00005D   34FF         ADDC      A,#-0x1
   \   00005F   F583         MOV       DPH,A
   \   000061   74FF         MOV       A,#-0x1
   \   000063   F0           MOVX      @DPTR,A
    983            }
    984          
    985            // Re-enable interrupts
    986            HAL_EXIT_CRITICAL_SECTION(intState);
   \                     ??osal_msg_dequeue_0:
   \   000064   EE           MOV       A,R6
   \   000065   A2E0         MOV       C,0xE0 /* A   */.0
   \   000067   92AF         MOV       0xa8.7,C
    987          
    988            return msg_ptr;
   \   000069   7F01         MOV       R7,#0x1
   \   00006B   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   00006E                REQUIRE _A_IEN0
    989          }
    990          
    991          /*********************************************************************
    992           * @fn      osal_msg_push
    993           *
    994           * @brief
    995           *
    996           *    This function pushes an OSAL message to the head of an OSAL
    997           *    queue.
    998           *
    999           * @param   osal_msg_q_t *q_ptr - OSAL queue
   1000           * @param   void *msg_ptr  - OSAL message
   1001           *
   1002           * @return  none
   1003           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1004          void osal_msg_push( osal_msg_q_t *q_ptr, void *msg_ptr )
   \                     osal_msg_push:
   1005          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1006            halIntState_t intState;
   1007          
   1008            // Hold off interrupts
   1009            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000005   A2AF         MOV       C,0xa8.7
   \   000007   E4           CLR       A
   \   000008   33           RLC       A
   \   000009   F8           MOV       R0,A
   \   00000A   C2AF         CLR       0xa8.7
   1010          
   1011            // Push message to head of queue
   1012            OSAL_MSG_NEXT( msg_ptr ) = *q_ptr;
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   E0           MOVX      A,@DPTR
   \   000011   FE           MOV       R6,A
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   FF           MOV       R7,A
   \   000015   EC           MOV       A,R4
   \   000016   24FB         ADD       A,#-0x5
   \   000018   F582         MOV       DPL,A
   \   00001A   ED           MOV       A,R5
   \   00001B   34FF         ADDC      A,#-0x1
   \   00001D   F583         MOV       DPH,A
   \   00001F   EE           MOV       A,R6
   \   000020   F0           MOVX      @DPTR,A
   \   000021   A3           INC       DPTR
   \   000022   EF           MOV       A,R7
   \   000023   F0           MOVX      @DPTR,A
   1013            *q_ptr = msg_ptr;
   \   000024   8A82         MOV       DPL,R2
   \   000026   8B83         MOV       DPH,R3
   \   000028   EC           MOV       A,R4
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   ED           MOV       A,R5
   \   00002C   F0           MOVX      @DPTR,A
   1014          
   1015            // Re-enable interrupts
   1016            HAL_EXIT_CRITICAL_SECTION(intState);
   \   00002D   E8           MOV       A,R0
   \   00002E   A2E0         MOV       C,0xE0 /* A   */.0
   \   000030   92AF         MOV       0xa8.7,C
   1017          }
   \   000032   7F01         MOV       R7,#0x1
   \   000034   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000037                REQUIRE _A_IEN0
   1018          
   1019          /*********************************************************************
   1020           * @fn      osal_msg_extract
   1021           *
   1022           * @brief
   1023           *
   1024           *    This function extracts and removes an OSAL message from the
   1025           *    middle of an OSAL queue.
   1026           *
   1027           * @param   osal_msg_q_t *q_ptr - OSAL queue
   1028           * @param   void *msg_ptr  - OSAL message to be extracted
   1029           * @param   void *prev_ptr  - OSAL message before msg_ptr in queue
   1030           *
   1031           * @return  none
   1032           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1033          void osal_msg_extract( osal_msg_q_t *q_ptr, void *msg_ptr, void *prev_ptr )
   \                     osal_msg_extract:
   1034          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   740A         MOV       A,#0xa
   \   000007   12....       LCALL     ?XSTACK_DISP0_8
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F8           MOV       R0,A
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F9           MOV       R1,A
   1035            halIntState_t intState;
   1036          
   1037            // Hold off interrupts
   1038            HAL_ENTER_CRITICAL_SECTION(intState);
   \   00000F   A2AF         MOV       C,0xa8.7
   \   000011   E4           CLR       A
   \   000012   33           RLC       A
   \   000013   F5..         MOV       ?V0,A
   \   000015   C2AF         CLR       0xa8.7
   1039          
   1040            if ( msg_ptr == *q_ptr )
   \   000017   8A82         MOV       DPL,R2
   \   000019   8B83         MOV       DPH,R3
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   FE           MOV       R6,A
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   FF           MOV       R7,A
   \   000020   EC           MOV       A,R4
   \   000021   6E           XRL       A,R6
   \   000022   7002         JNZ       ??osal_msg_extract_0
   \   000024   ED           MOV       A,R5
   \   000025   6F           XRL       A,R7
   \                     ??osal_msg_extract_0:
   \   000026   701A         JNZ       ??osal_msg_extract_1
   1041            {
   1042              // remove from first
   1043              *q_ptr = OSAL_MSG_NEXT( msg_ptr );
   \   000028   EC           MOV       A,R4
   \   000029   24FB         ADD       A,#-0x5
   \   00002B   F582         MOV       DPL,A
   \   00002D   ED           MOV       A,R5
   \   00002E   34FF         ADDC      A,#-0x1
   \   000030   F583         MOV       DPH,A
   \   000032   E0           MOVX      A,@DPTR
   \   000033   FE           MOV       R6,A
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   FF           MOV       R7,A
   \   000037   8A82         MOV       DPL,R2
   \   000039   8B83         MOV       DPH,R3
   \   00003B   EE           MOV       A,R6
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   EF           MOV       A,R7
   \   00003F   F0           MOVX      @DPTR,A
   \   000040   801E         SJMP      ??osal_msg_extract_2
   1044            }
   1045            else
   1046            {
   1047              // remove from middle
   1048              OSAL_MSG_NEXT( prev_ptr ) = OSAL_MSG_NEXT( msg_ptr );
   \                     ??osal_msg_extract_1:
   \   000042   EC           MOV       A,R4
   \   000043   24FB         ADD       A,#-0x5
   \   000045   F582         MOV       DPL,A
   \   000047   ED           MOV       A,R5
   \   000048   34FF         ADDC      A,#-0x1
   \   00004A   F583         MOV       DPH,A
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   FE           MOV       R6,A
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   FF           MOV       R7,A
   \   000051   E8           MOV       A,R0
   \   000052   24FB         ADD       A,#-0x5
   \   000054   F582         MOV       DPL,A
   \   000056   E9           MOV       A,R1
   \   000057   34FF         ADDC      A,#-0x1
   \   000059   F583         MOV       DPH,A
   \   00005B   EE           MOV       A,R6
   \   00005C   F0           MOVX      @DPTR,A
   \   00005D   A3           INC       DPTR
   \   00005E   EF           MOV       A,R7
   \   00005F   F0           MOVX      @DPTR,A
   1049            }
   1050            OSAL_MSG_NEXT( msg_ptr ) = NULL;
   \                     ??osal_msg_extract_2:
   \   000060   EC           MOV       A,R4
   \   000061   24FB         ADD       A,#-0x5
   \   000063   F582         MOV       DPL,A
   \   000065   ED           MOV       A,R5
   \   000066   34FF         ADDC      A,#-0x1
   \   000068   F583         MOV       DPH,A
   \   00006A   7400         MOV       A,#0x0
   \   00006C   F0           MOVX      @DPTR,A
   \   00006D   A3           INC       DPTR
   \   00006E   7400         MOV       A,#0x0
   \   000070   F0           MOVX      @DPTR,A
   1051            OSAL_MSG_ID( msg_ptr ) = TASK_NO_TASK;
   \   000071   EC           MOV       A,R4
   \   000072   24FF         ADD       A,#-0x1
   \   000074   F582         MOV       DPL,A
   \   000076   ED           MOV       A,R5
   \   000077   34FF         ADDC      A,#-0x1
   \   000079   F583         MOV       DPH,A
   \   00007B   74FF         MOV       A,#-0x1
   \   00007D   F0           MOVX      @DPTR,A
   1052          
   1053            // Re-enable interrupts
   1054            HAL_EXIT_CRITICAL_SECTION(intState);
   \   00007E   E5..         MOV       A,?V0
   \   000080   A2E0         MOV       C,0xE0 /* A   */.0
   \   000082   92AF         MOV       0xa8.7,C
   1055          }
   \   000084   7F02         MOV       R7,#0x2
   \   000086   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000089                REQUIRE _A_IEN0
   1056          
   1057          /*********************************************************************
   1058           * @fn      osal_msg_enqueue_max
   1059           *
   1060           * @brief
   1061           *
   1062           *    This function enqueues an OSAL message into an OSAL queue if
   1063           *    the length of the queue is less than max.
   1064           *
   1065           * @param   osal_msg_q_t *q_ptr - OSAL queue
   1066           * @param   void *msg_ptr  - OSAL message
   1067           * @param   uint8 max - maximum length of queue
   1068           *
   1069           * @return  TRUE if message was enqueued, FALSE otherwise
   1070           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1071          uint8 osal_msg_enqueue_max( osal_msg_q_t *q_ptr, void *msg_ptr, uint8 max )
   \                     osal_msg_enqueue_max:
   1072          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V2,R1
   1073            void *list;
   1074            uint8 ret = FALSE;
   \   00000B   7900         MOV       R1,#0x0
   1075            halIntState_t intState;
   1076          
   1077            // Hold off interrupts
   1078            HAL_ENTER_CRITICAL_SECTION(intState);
   \   00000D   A2AF         MOV       C,0xa8.7
   \   00000F   E4           CLR       A
   \   000010   33           RLC       A
   \   000011   F8           MOV       R0,A
   \   000012   C2AF         CLR       0xa8.7
   1079          
   1080            // If first message in queue
   1081            if ( *q_ptr == NULL )
   \   000014   8E82         MOV       DPL,R6
   \   000016   8F83         MOV       DPH,R7
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V0,A
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V1,A
   \   00001F   E5..         MOV       A,?V0
   \   000021   45..         ORL       A,?V1
   \   000023   700D         JNZ       ??osal_msg_enqueue_max_0
   1082            {
   1083              *q_ptr = msg_ptr;
   \   000025   8E82         MOV       DPL,R6
   \   000027   8F83         MOV       DPH,R7
   \   000029   EC           MOV       A,R4
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   A3           INC       DPTR
   \   00002C   ED           MOV       A,R5
   \   00002D   F0           MOVX      @DPTR,A
   1084              ret = TRUE;
   \   00002E   7901         MOV       R1,#0x1
   \   000030   8054         SJMP      ??osal_msg_enqueue_max_1
   1085            }
   1086            else
   1087            {
   1088              // Find end of queue or max
   1089              list = *q_ptr;
   \                     ??osal_msg_enqueue_max_0:
   \   000032   8E82         MOV       DPL,R6
   \   000034   8F83         MOV       DPH,R7
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F5..         MOV       ?V0,A
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F5..         MOV       ?V1,A
   \   00003D   AA..         MOV       R2,?V0
   \   00003F   AB..         MOV       R3,?V1
   1090              max--;
   \   000041   15..         DEC       ?V2
   1091              while ( (OSAL_MSG_NEXT( list ) != NULL) && (max > 0) )
   \                     ??osal_msg_enqueue_max_2:
   \   000043   EA           MOV       A,R2
   \   000044   24FB         ADD       A,#-0x5
   \   000046   F582         MOV       DPL,A
   \   000048   EB           MOV       A,R3
   \   000049   34FF         ADDC      A,#-0x1
   \   00004B   F583         MOV       DPH,A
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   F5..         MOV       ?V0,A
   \   000050   A3           INC       DPTR
   \   000051   E0           MOVX      A,@DPTR
   \   000052   F5..         MOV       ?V1,A
   \   000054   E5..         MOV       A,?V0
   \   000056   45..         ORL       A,?V1
   \   000058   6017         JZ        ??osal_msg_enqueue_max_3
   \   00005A   E5..         MOV       A,?V2
   \   00005C   6013         JZ        ??osal_msg_enqueue_max_3
   1092              {
   1093                list = OSAL_MSG_NEXT( list );
   \   00005E   EA           MOV       A,R2
   \   00005F   24FB         ADD       A,#-0x5
   \   000061   F582         MOV       DPL,A
   \   000063   EB           MOV       A,R3
   \   000064   34FF         ADDC      A,#-0x1
   \   000066   F583         MOV       DPH,A
   \   000068   E0           MOVX      A,@DPTR
   \   000069   FA           MOV       R2,A
   \   00006A   A3           INC       DPTR
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   FB           MOV       R3,A
   1094                max--;
   \   00006D   15..         DEC       ?V2
   \   00006F   80D2         SJMP      ??osal_msg_enqueue_max_2
   1095              }
   1096          
   1097              // Add message to end of queue if max not reached
   1098              if ( max != 0 )
   \                     ??osal_msg_enqueue_max_3:
   \   000071   E5..         MOV       A,?V2
   \   000073   6011         JZ        ??osal_msg_enqueue_max_1
   1099              {
   1100                OSAL_MSG_NEXT( list ) = msg_ptr;
   \   000075   EA           MOV       A,R2
   \   000076   24FB         ADD       A,#-0x5
   \   000078   F582         MOV       DPL,A
   \   00007A   EB           MOV       A,R3
   \   00007B   34FF         ADDC      A,#-0x1
   \   00007D   F583         MOV       DPH,A
   \   00007F   EC           MOV       A,R4
   \   000080   F0           MOVX      @DPTR,A
   \   000081   A3           INC       DPTR
   \   000082   ED           MOV       A,R5
   \   000083   F0           MOVX      @DPTR,A
   1101                ret = TRUE;
   \   000084   7901         MOV       R1,#0x1
   1102              }
   1103            }
   1104          
   1105            // Re-enable interrupts
   1106            HAL_EXIT_CRITICAL_SECTION(intState);
   \                     ??osal_msg_enqueue_max_1:
   \   000086   E8           MOV       A,R0
   \   000087   A2E0         MOV       C,0xE0 /* A   */.0
   \   000089   92AF         MOV       0xa8.7,C
   1107          
   1108            return ret;
   \   00008B   7F03         MOV       R7,#0x3
   \   00008D   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000090                REQUIRE _A_IEN0
   1109          }
   1110          
   1111          /*********************************************************************
   1112           * @fn      osal_set_event
   1113           *
   1114           * @brief
   1115           *
   1116           *    This function is called to set the event flags for a task. The
   1117           *    event passed in is OR'd into the task's event variable.
   1118           *
   1119           * @param   uint8 task_id - receiving tasks ID
   1120           * @param   uint8 event_flag - what event to set
   1121           *
   1122           * @return  SUCCESS, MSG_BUFFER_NOT_AVAIL, FAILURE, INVALID_TASK
   1123           */
   1124          #ifdef OSAL_PORT2TIRTOS
   1125          uint8 osal_set_event_raw( uint8 task_id, uint16 event_flag )
   1126          #else /* OSAL_PORT2TIRTOS */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1127          uint8 osal_set_event( uint8 task_id, uint16 event_flag )
   \                     osal_set_event:
   1128          #endif /* OSAL_PORT2TIRTOS */
   1129          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   1130          #ifdef USE_ICALL
   1131            if (task_id & OSAL_PROXY_ID_FLAG)
   1132            {
   1133              /* Destination is a proxy task */
   1134              osal_msg_hdr_t *hdr;
   1135              ICall_EntityID src, dst;
   1136              uint8 taskid;
   1137          
   1138              struct _osal_event_msg_t
   1139              {
   1140                uint16 signature;
   1141                uint16 event_flag;
   1142              } *msg_ptr = (struct _osal_event_msg_t *)
   1143                osal_msg_allocate(sizeof(*msg_ptr));
   1144          
   1145              if (!msg_ptr)
   1146              {
   1147                return MSG_BUFFER_NOT_AVAIL;
   1148              }
   1149              msg_ptr->signature = 0xffffu;
   1150              msg_ptr->event_flag = event_flag;
   1151              hdr = (osal_msg_hdr_t *)msg_ptr - 1;
   1152          
   1153              taskid = osal_self();
   1154              if (taskid == TASK_NO_TASK)
   1155              {
   1156                /* Call must have been made from either an ISR or a user-thread */
   1157                src = osal_notask_entity;
   1158              }
   1159              else
   1160              {
   1161                src = (ICall_EntityID) osal_dispatch_entities[taskid + tasksCnt];
   1162              }
   1163          
   1164              if (src == OSAL_INVALID_DISPATCH_ID)
   1165              {
   1166                /* The source entity is not registered */
   1167                osal_msg_deallocate((uint8 *) msg_ptr);
   1168                ICall_abort();
   1169                return FAILURE;
   1170              }
   1171              dst = osal_proxy2alien(task_id);
   1172              hdr->dest_id = TASK_NO_TASK;
   1173              if (ICall_send(src, dst,
   1174                             ICALL_MSG_FORMAT_KEEP, msg_ptr) ==
   1175                  ICALL_ERRNO_SUCCESS)
   1176              {
   1177                return SUCCESS;
   1178              }
   1179              osal_msg_deallocate((uint8 *) msg_ptr);
   1180              return FAILURE;
   1181            }
   1182          #endif /* USE_ICALL */
   1183          
   1184            if ( task_id < tasksCnt )
   \   000007   90....       MOV       DPTR,#tasksCnt
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F8           MOV       R0,A
   \   00000C   EE           MOV       A,R6
   \   00000D   C3           CLR       C
   \   00000E   98           SUBB      A,R0
   \   00000F   503D         JNC       ??osal_set_event_0
   1185            {
   1186              halIntState_t   intState;
   1187              HAL_ENTER_CRITICAL_SECTION(intState);    // Hold off interrupts
   \   000011   A2AF         MOV       C,0xa8.7
   \   000013   E4           CLR       A
   \   000014   33           RLC       A
   \   000015   FC           MOV       R4,A
   \   000016   C2AF         CLR       0xa8.7
   1188              tasksEvents[task_id] |= event_flag;  // Stuff the event bit(s)
   \   000018   EE           MOV       A,R6
   \   000019   F8           MOV       R0,A
   \   00001A   7900         MOV       R1,#0x0
   \   00001C   E8           MOV       A,R0
   \   00001D   75F002       MOV       B,#0x2
   \   000020   A4           MUL       AB
   \   000021   C8           XCH       A,R0
   \   000022   ADF0         MOV       R5,B
   \   000024   75F000       MOV       B,#0x0
   \   000027   A4           MUL       AB
   \   000028   2D           ADD       A,R5
   \   000029   FD           MOV       R5,A
   \   00002A   75F002       MOV       B,#0x2
   \   00002D   E9           MOV       A,R1
   \   00002E   A4           MUL       AB
   \   00002F   2D           ADD       A,R5
   \   000030   F9           MOV       R1,A
   \   000031   90....       MOV       DPTR,#tasksEvents
   \   000034   E0           MOVX      A,@DPTR
   \   000035   28           ADD       A,R0
   \   000036   FD           MOV       R5,A
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   39           ADDC      A,R1
   \   00003A   8D82         MOV       DPL,R5
   \   00003C   F583         MOV       DPH,A
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   4A           ORL       A,R2
   \   000040   F0           MOVX      @DPTR,A
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   4B           ORL       A,R3
   \   000044   F0           MOVX      @DPTR,A
   1189              HAL_EXIT_CRITICAL_SECTION(intState);     // Release interrupts
   \   000045   EC           MOV       A,R4
   \   000046   A2E0         MOV       C,0xE0 /* A   */.0
   \   000048   92AF         MOV       0xa8.7,C
   1190          #ifdef USE_ICALL
   1191              ICall_signal(osal_semaphore);
   1192          #endif /* USE_ICALL */
   1193              return ( SUCCESS );
   \   00004A   7900         MOV       R1,#0x0
   \   00004C   8002         SJMP      ??osal_set_event_1
   1194            }
   1195             else
   1196            {
   1197              return ( INVALID_TASK );
   \                     ??osal_set_event_0:
   \   00004E   7903         MOV       R1,#0x3
   \                     ??osal_set_event_1:
   \   000050   7F01         MOV       R7,#0x1
   \   000052   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000055                REQUIRE _A_IEN0
   1198            }
   1199          }
   1200          
   1201          /*********************************************************************
   1202           * @fn      osal_clear_event
   1203           *
   1204           * @brief
   1205           *
   1206           *    This function is called to clear the event flags for a task. The
   1207           *    event passed in is masked out of the task's event variable.
   1208           *
   1209           * @param   uint8 task_id - receiving tasks ID
   1210           * @param   uint8 event_flag - what event to clear
   1211           *
   1212           * @return  SUCCESS, INVALID_TASK
   1213           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1214          uint8 osal_clear_event( uint8 task_id, uint16 event_flag )
   \                     osal_clear_event:
   1215          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   1216            if ( task_id < tasksCnt )
   \   000007   90....       MOV       DPTR,#tasksCnt
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F8           MOV       R0,A
   \   00000C   E5..         MOV       A,?V0
   \   00000E   C3           CLR       C
   \   00000F   98           SUBB      A,R0
   \   000010   5044         JNC       ??osal_clear_event_0
   1217            {
   1218              halIntState_t   intState;
   1219              HAL_ENTER_CRITICAL_SECTION(intState);    // Hold off interrupts
   \   000012   A2AF         MOV       C,0xa8.7
   \   000014   E4           CLR       A
   \   000015   33           RLC       A
   \   000016   FE           MOV       R6,A
   \   000017   C2AF         CLR       0xa8.7
   1220              tasksEvents[task_id] &= ~(event_flag);   // Clear the event bit(s)
   \   000019   EA           MOV       A,R2
   \   00001A   F4           CPL       A
   \   00001B   FC           MOV       R4,A
   \   00001C   EB           MOV       A,R3
   \   00001D   F4           CPL       A
   \   00001E   FD           MOV       R5,A
   \   00001F   E5..         MOV       A,?V0
   \   000021   F8           MOV       R0,A
   \   000022   7900         MOV       R1,#0x0
   \   000024   E8           MOV       A,R0
   \   000025   75F002       MOV       B,#0x2
   \   000028   A4           MUL       AB
   \   000029   C8           XCH       A,R0
   \   00002A   AFF0         MOV       R7,B
   \   00002C   75F000       MOV       B,#0x0
   \   00002F   A4           MUL       AB
   \   000030   2F           ADD       A,R7
   \   000031   FF           MOV       R7,A
   \   000032   75F002       MOV       B,#0x2
   \   000035   E9           MOV       A,R1
   \   000036   A4           MUL       AB
   \   000037   2F           ADD       A,R7
   \   000038   F9           MOV       R1,A
   \   000039   90....       MOV       DPTR,#tasksEvents
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   28           ADD       A,R0
   \   00003E   FF           MOV       R7,A
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   39           ADDC      A,R1
   \   000042   8F82         MOV       DPL,R7
   \   000044   F583         MOV       DPH,A
   \   000046   E0           MOVX      A,@DPTR
   \   000047   5C           ANL       A,R4
   \   000048   F0           MOVX      @DPTR,A
   \   000049   A3           INC       DPTR
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   5D           ANL       A,R5
   \   00004C   F0           MOVX      @DPTR,A
   1221              HAL_EXIT_CRITICAL_SECTION(intState);     // Release interrupts
   \   00004D   EE           MOV       A,R6
   \   00004E   A2E0         MOV       C,0xE0 /* A   */.0
   \   000050   92AF         MOV       0xa8.7,C
   1222              return ( SUCCESS );
   \   000052   7900         MOV       R1,#0x0
   \   000054   8002         SJMP      ??osal_clear_event_1
   1223            }
   1224             else
   1225            {
   1226              return ( INVALID_TASK );
   \                     ??osal_clear_event_0:
   \   000056   7903         MOV       R1,#0x3
   \                     ??osal_clear_event_1:
   \   000058   7F01         MOV       R7,#0x1
   \   00005A   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   00005D                REQUIRE _A_IEN0
   1227            }
   1228          }
   1229          
   1230          /*********************************************************************
   1231           * @fn      osal_isr_register
   1232           *
   1233           * @brief
   1234           *
   1235           *   This function is called to register a service routine with an
   1236           *   interrupt. When the interrupt occurs, this service routine is called.
   1237           *
   1238           * @param   uint8 interrupt_id - Interrupt number
   1239           * @param   void (*isr_ptr)( uint8* ) - function pointer to ISR
   1240           *
   1241           * @return  SUCCESS, INVALID_INTERRUPT_ID,
   1242           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1243          uint8 osal_isr_register( uint8 interrupt_id, void (*isr_ptr)( uint8* ) )
   \                     osal_isr_register:
   1244          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   \   000001   F8           MOV       R0,A
   1245            // Remove these statements when functionality is complete
   1246            (void)interrupt_id;
   1247            (void)isr_ptr;
   1248            return ( SUCCESS );
   \   000002   7900         MOV       R1,#0x0
   \   000004   02....       LJMP      ?BRET
   1249          }
   1250          
   1251          /*********************************************************************
   1252           * @fn      osal_int_enable
   1253           *
   1254           * @brief
   1255           *
   1256           *   This function is called to enable an interrupt. Once enabled,
   1257           *   occurrence of the interrupt causes the service routine associated
   1258           *   with that interrupt to be called.
   1259           *
   1260           *   If INTS_ALL is the interrupt_id, interrupts (in general) are enabled.
   1261           *   If a single interrupt is passed in, then interrupts still have
   1262           *   to be enabled with another call to INTS_ALL.
   1263           *
   1264           * @param   uint8 interrupt_id - Interrupt number
   1265           *
   1266           * @return  SUCCESS or INVALID_INTERRUPT_ID
   1267           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1268          uint8 osal_int_enable( uint8 interrupt_id )
   \                     osal_int_enable:
   1269          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   \   000001   F8           MOV       R0,A
   1270          
   1271            if ( interrupt_id == INTS_ALL )
   \   000002   74FF         MOV       A,#-0x1
   \   000004   68           XRL       A,R0
   \   000005   7006         JNZ       ??osal_int_enable_0
   1272            {
   1273              HAL_ENABLE_INTERRUPTS();
   \   000007   D2AF         SETB      0xa8.7
   1274              return ( SUCCESS );
   \   000009   7900         MOV       R1,#0x0
   \   00000B   8002         SJMP      ??osal_int_enable_1
   1275            }
   1276            else
   1277            {
   1278              return ( INVALID_INTERRUPT_ID );
   \                     ??osal_int_enable_0:
   \   00000D   7907         MOV       R1,#0x7
   \                     ??osal_int_enable_1:
   \   00000F   02....       LJMP      ?BRET
   \   000012                REQUIRE _A_IEN0
   1279            }
   1280          }
   1281          
   1282          /*********************************************************************
   1283           * @fn      osal_int_disable
   1284           *
   1285           * @brief
   1286           *
   1287           *   This function is called to disable an interrupt. When a disabled
   1288           *   interrupt occurs, the service routine associated with that
   1289           *   interrupt is not called.
   1290           *
   1291           *   If INTS_ALL is the interrupt_id, interrupts (in general) are disabled.
   1292           *   If a single interrupt is passed in, then just that interrupt is disabled.
   1293           *
   1294           * @param   uint8 interrupt_id - Interrupt number
   1295           *
   1296           * @return  SUCCESS or INVALID_INTERRUPT_ID
   1297           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1298          uint8 osal_int_disable( uint8 interrupt_id )
   \                     osal_int_disable:
   1299          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   \   000001   F8           MOV       R0,A
   1300          
   1301            if ( interrupt_id == INTS_ALL )
   \   000002   74FF         MOV       A,#-0x1
   \   000004   68           XRL       A,R0
   \   000005   7006         JNZ       ??osal_int_disable_0
   1302            {
   1303              HAL_DISABLE_INTERRUPTS();
   \   000007   C2AF         CLR       0xa8.7
   1304              return ( SUCCESS );
   \   000009   7900         MOV       R1,#0x0
   \   00000B   8002         SJMP      ??osal_int_disable_1
   1305            }
   1306            else
   1307            {
   1308              return ( INVALID_INTERRUPT_ID );
   \                     ??osal_int_disable_0:
   \   00000D   7907         MOV       R1,#0x7
   \                     ??osal_int_disable_1:
   \   00000F   02....       LJMP      ?BRET
   \   000012                REQUIRE _A_IEN0
   1309            }
   1310          }
   1311          
   1312          /*********************************************************************
   1313           * @fn      osal_init_system
   1314           *
   1315           * @brief
   1316           *
   1317           *   This function initializes the "task" system by creating the
   1318           *   tasks defined in the task table (OSAL_Tasks.h).
   1319           *
   1320           * @param   void
   1321           *
   1322           * @return  SUCCESS
   1323           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1324          uint8 osal_init_system( void )
   \                     osal_init_system:
   1325          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1326          #if !defined USE_ICALL && !defined OSAL_PORT2TIRTOS
   1327            // Initialize the Memory Allocation System
   1328            osal_mem_init();
   \   000004                ; Setup parameters for call to function osal_mem_init
   \   000004   12....       LCALL     `??osal_mem_init::?relay`; Banked call to: osal_mem_init
   1329          #endif /* !defined USE_ICALL && !defined OSAL_PORT2TIRTOS */
   1330          
   1331            // Initialize the message queue
   1332            osal_qHead = NULL;
   \   000007   90....       MOV       DPTR,#osal_qHead
   \   00000A   7400         MOV       A,#0x0
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   A3           INC       DPTR
   \   00000E   7400         MOV       A,#0x0
   \   000010   F0           MOVX      @DPTR,A
   1333          
   1334            // Initialize the timers
   1335            osalTimerInit();
   \   000011                ; Setup parameters for call to function osalTimerInit
   \   000011   12....       LCALL     `??osalTimerInit::?relay`; Banked call to: osalTimerInit
   1336          
   1337            // Initialize the Power Management System
   1338            osal_pwrmgr_init();
   \   000014                ; Setup parameters for call to function osal_pwrmgr_init
   \   000014   12....       LCALL     `??osal_pwrmgr_init::?relay`; Banked call to: osal_pwrmgr_init
   1339          
   1340          #ifdef USE_ICALL
   1341            /* Prepare memory space for service enrollment */
   1342            osal_prepare_svc_enroll();
   1343          #endif /* USE_ICALL */
   1344          
   1345            // Initialize the system tasks.
   1346            osalInitTasks();
   \   000017                ; Setup parameters for call to function osalInitTasks
   \   000017   12....       LCALL     `??osalInitTasks::?relay`; Banked call to: osalInitTasks
   1347          
   1348          #if !defined USE_ICALL && !defined OSAL_PORT2TIRTOS
   1349            // Setup efficient search for the first free block of heap.
   1350            osal_mem_kick();
   \   00001A                ; Setup parameters for call to function osal_mem_kick
   \   00001A   12....       LCALL     `??osal_mem_kick::?relay`; Banked call to: osal_mem_kick
   1351          #endif /* !defined USE_ICALL && !defined OSAL_PORT2TIRTOS */
   1352          
   1353          #ifdef USE_ICALL
   1354            // Initialize variables used to track timing and provide OSAL timer service
   1355            osal_last_timestamp = (uint_least32_t) ICall_getTicks();
   1356            osal_tickperiod = (uint_least32_t) ICall_getTickPeriod();
   1357            osal_max_msecs = (uint_least32_t) ICall_getMaxMSecs();
   1358            /* Reduce ceiling considering potential latency */
   1359            osal_max_msecs -= 2;
   1360          #endif /* USE_ICALL */
   1361          
   1362            return ( SUCCESS );
   \   00001D   7900         MOV       R1,#0x0
   \   00001F   D083         POP       DPH
   \   000021   D082         POP       DPL
   \   000023   02....       LJMP      ?BRET
   1363          }
   1364          
   1365          /*********************************************************************
   1366           * @fn      osal_start_system
   1367           *
   1368           * @brief
   1369           *
   1370           *   This function is the main loop function of the task system (if
   1371           *   ZBIT and UBIT are not defined). This Function doesn't return.
   1372           *
   1373           * @param   void
   1374           *
   1375           * @return  none
   1376           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1377          void osal_start_system( void )
   \                     osal_start_system:
   1378          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1379          #ifdef USE_ICALL
   1380            /* Kick off timer service in order to allocate resources upfront.
   1381             * The first timeout is required to schedule next OSAL timer event
   1382             * as well. */
   1383            ICall_Errno errno = ICall_setTimer(1, osal_msec_timer_cback,
   1384                                               (void *) osal_msec_timer_seq,
   1385                                               &osal_timerid_msec_timer);
   1386            if (errno != ICALL_ERRNO_SUCCESS)
   1387            {
   1388              ICall_abort();
   1389            }
   1390          #endif /* USE_ICALL */
   1391          
   1392          #if !defined ( ZBIT ) && !defined ( UBIT )
   1393            for(;;)  // Forever Loop
   1394          #endif
   1395            {
   1396              osal_run_system();
   \                     ??osal_start_system_0:
   \   000004                ; Setup parameters for call to function osal_run_system
   \   000004   12....       LCALL     `??osal_run_system::?relay`; Banked call to: osal_run_system
   \   000007   80FB         SJMP      ??osal_start_system_0
   1397          
   1398          #ifdef USE_ICALL
   1399              ICall_wait(ICALL_TIMEOUT_FOREVER);
   1400          #endif /* USE_ICALL */
   1401            }
   1402          }
   1403          
   1404          #ifdef USE_ICALL
   1405          /*********************************************************************
   1406           * @fn      osal_alien2proxy
   1407           *
   1408           * @brief
   1409           *
   1410           *   Assign or retrieve a proxy OSAL task id for an external ICall entity.
   1411           *
   1412           * @param   origid  ICall entity id
   1413           *
   1414           * @return  proxy OSAL task id
   1415           */
   1416          static uint8 osal_alien2proxy(ICall_EntityID origid)
   1417          {
   1418            size_t i;
   1419          
   1420            for (i = 0; i < OSAL_MAX_NUM_PROXY_TASKS; i++)
   1421            {
   1422              if (osal_proxy_tasks[i] == OSAL_INVALID_DISPATCH_ID)
   1423              {
   1424                /* proxy not found. Create a new one */
   1425                osal_proxy_tasks[i] = (uint8) origid;
   1426                return (OSAL_PROXY_ID_FLAG | i);
   1427              }
   1428              else if ((ICall_EntityID) osal_proxy_tasks[i] == origid)
   1429              {
   1430                return (OSAL_PROXY_ID_FLAG | i);
   1431              }
   1432            }
   1433            /* abort */
   1434            ICall_abort();
   1435            return TASK_NO_TASK;
   1436          }
   1437          
   1438          /*********************************************************************
   1439           * @fn      osal_proxy2alien
   1440           *
   1441           * @brief
   1442           *
   1443           *   Retrieve the ICall entity id for a proxy OSAL task id
   1444           *
   1445           * @param   proxyid  Proxy OSAL task id
   1446           *
   1447           * @return  ICall entity id
   1448           */
   1449          static ICall_EntityID osal_proxy2alien(uint8 proxyid)
   1450          {
   1451            proxyid ^= OSAL_PROXY_ID_FLAG;
   1452            if (proxyid >= OSAL_MAX_NUM_PROXY_TASKS)
   1453            {
   1454              /* abort */
   1455              ICall_abort();
   1456            }
   1457            return (ICall_EntityID) osal_proxy_tasks[proxyid];
   1458          }
   1459          
   1460          /*********************************************************************
   1461           * @fn      osal_dispatch2id
   1462           *
   1463           * @brief
   1464           *
   1465           *   Retrieve OSAL task id mapped to a designated ICall entity id
   1466           *
   1467           * @param   entity  ICall entity id
   1468           *
   1469           * @return  OSAL task id
   1470           */
   1471          static uint8 osal_dispatch2id(ICall_EntityID entity)
   1472          {
   1473            size_t i;
   1474          
   1475            for (i = 0; i < tasksCnt; i++)
   1476            {
   1477              if ((ICall_EntityID) osal_dispatch_entities[i] == entity)
   1478              {
   1479                return i;
   1480              }
   1481            }
   1482            return TASK_NO_TASK;
   1483          }
   1484          
   1485          /*********************************************************************
   1486           * @fn      osal_msec_timer_cback
   1487           *
   1488           * @brief
   1489           *
   1490           *   This function is a callback function for ICall_setTimer() service
   1491           *   used to implement OSAL timer
   1492           *
   1493           * @param   arg  In this case, the timer sequence number is passed.
   1494           *
   1495           * @return  None
   1496           */
   1497          static void osal_msec_timer_cback(void *arg)
   1498          {
   1499            unsigned seq = (unsigned) arg;
   1500            halIntState_t intState;
   1501          
   1502            HAL_ENTER_CRITICAL_SECTION(intState);
   1503            if (seq == osal_msec_timer_seq)
   1504            {
   1505              ICall_signal(osal_semaphore);
   1506            }
   1507            HAL_EXIT_CRITICAL_SECTION(intState);
   1508          }
   1509          
   1510          /*********************************************************************
   1511           * @fn      osal_service_entry
   1512           *
   1513           * @brief
   1514           *
   1515           *   This function is service function for messaging service
   1516           *
   1517           * @param   args  arguments.
   1518           *
   1519           * @return  ICall error code
   1520           */
   1521          ICall_Errno osal_service_entry(ICall_FuncArgsHdr *args)
   1522          {
   1523            if (args->func == ICALL_MSG_FUNC_GET_LOCAL_MSG_ENTITY_ID)
   1524            {
   1525              /* Get proxy ID */
   1526              ((ICall_GetLocalMsgEntityIdArgs *)args)->localId =
   1527                osal_alien2proxy(((ICall_GetLocalMsgEntityIdArgs *)args)->entity);
   1528              if (((ICall_GetLocalMsgEntityIdArgs *)args)->localId == TASK_NO_TASK)
   1529              {
   1530                return ICALL_ERRNO_NO_RESOURCE;
   1531              }
   1532            }
   1533            else
   1534            {
   1535              return ICALL_ERRNO_INVALID_FUNCTION;
   1536            }
   1537            return ICALL_ERRNO_SUCCESS;
   1538          }
   1539          #endif /* USE_ICALL */
   1540          
   1541          /*********************************************************************
   1542           * @fn      osal_run_system
   1543           *
   1544           * @brief
   1545           *
   1546           *   This function will make one pass through the OSAL taskEvents table
   1547           *   and call the task_event_processor() function for the first task that
   1548           *   is found with at least one event pending. If there are no pending
   1549           *   events (all tasks), this function puts the processor into Sleep.
   1550           *
   1551           * @param   void
   1552           *
   1553           * @return  none
   1554           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1555          void osal_run_system( void )
   \                     osal_run_system:
   1556          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   1557            uint8 idx = 0;
   \   000005   75..00       MOV       ?V1,#0x0
   1558          
   1559          #ifdef USE_ICALL
   1560            uint32 next_timeout_prior = osal_next_timeout();
   1561          #else /* USE_ICALL */
   1562          #ifndef HAL_BOARD_CC2538
   1563            osalTimeUpdate();
   \   000008                ; Setup parameters for call to function osalTimeUpdate
   \   000008   12....       LCALL     `??osalTimeUpdate::?relay`; Banked call to: osalTimeUpdate
   1564          #endif
   1565          
   1566            Hal_ProcessPoll();
   \   00000B                ; Setup parameters for call to function Hal_ProcessPoll
   \   00000B   12....       LCALL     `??Hal_ProcessPoll::?relay`; Banked call to: Hal_ProcessPoll
   1567          #endif /* USE_ICALL */
   1568          
   1569          #ifdef USE_ICALL
   1570            {
   1571              /* Update osal timers to the latest before running any OSAL processes
   1572               * regardless of wakeup callback from ICall because OSAL timers are added
   1573               * relative to the current time. */
   1574              unsigned long newtimestamp = ICall_getTicks();
   1575              uint32 milliseconds;
   1576          
   1577              if (osal_tickperiod == 1000)
   1578              {
   1579                milliseconds = newtimestamp - osal_last_timestamp;
   1580                osal_last_timestamp = newtimestamp;
   1581              }
   1582              else
   1583              {
   1584                unsigned long long delta = (unsigned long long)
   1585                  ((newtimestamp - osal_last_timestamp) & 0xfffffffful);
   1586                delta *= osal_tickperiod;
   1587                delta /= 1000;
   1588                milliseconds = (uint32) delta;
   1589                osal_last_timestamp += (uint32) (delta * 1000 / osal_tickperiod);
   1590              }
   1591              osalAdjustTimer(milliseconds);
   1592              /* Set a value that will never match osal_next_timeout()
   1593               * return value so that the next time can be scheduled.
   1594               */
   1595              next_timeout_prior = 0xfffffffful;
   1596            }
   1597            if (osal_eventloop_hook)
   1598            {
   1599              osal_eventloop_hook();
   1600            }
   1601          
   1602            for (;;)
   1603            {
   1604              void *msg;
   1605              ICall_EntityID src, dst;
   1606              osal_msg_hdr_t *hdr;
   1607              uint8 dest_id;
   1608          
   1609              if (ICall_fetchMsg(&src, &dst, &msg) != ICALL_ERRNO_SUCCESS)
   1610              {
   1611                break;
   1612              }
   1613              hdr = (osal_msg_hdr_t *) msg - 1;
   1614              dest_id = osal_dispatch2id(dst);
   1615              if (dest_id == TASK_NO_TASK)
   1616              {
   1617                /* Something wrong */
   1618                ICall_abort();
   1619              }
   1620              else
   1621              {
   1622                /* Message towards one of the tasks */
   1623                /* Create a proxy task ID if necessary and
   1624                 * queue the message to the OSAL internal queue.
   1625                 */
   1626                uint8 proxyid = osal_alien2proxy(hdr->srcentity);
   1627          
   1628                if (hdr->format == ICALL_MSG_FORMAT_1ST_CHAR_TASK_ID)
   1629                {
   1630                  uint8 *bytes = msg;
   1631                  *bytes = proxyid;
   1632                }
   1633                else if (hdr->format == ICALL_MSG_FORMAT_3RD_CHAR_TASK_ID)
   1634                {
   1635                  uint8 *bytes = msg;
   1636                  bytes[2] = proxyid;
   1637                }
   1638                /* now queue the message to the OSAL queue */
   1639                osal_msg_send(dest_id, msg);
   1640              }
   1641            }
   1642          #endif /* USE_ICALL */
   1643          
   1644            do {
   1645              if (tasksEvents[idx])  // Task is highest priority that is ready.
   \                     ??osal_run_system_0:
   \   00000E   E5..         MOV       A,?V1
   \   000010   F8           MOV       R0,A
   \   000011   7900         MOV       R1,#0x0
   \   000013   E8           MOV       A,R0
   \   000014   75F002       MOV       B,#0x2
   \   000017   A4           MUL       AB
   \   000018   C8           XCH       A,R0
   \   000019   AAF0         MOV       R2,B
   \   00001B   75F000       MOV       B,#0x0
   \   00001E   A4           MUL       AB
   \   00001F   2A           ADD       A,R2
   \   000020   FA           MOV       R2,A
   \   000021   75F002       MOV       B,#0x2
   \   000024   E9           MOV       A,R1
   \   000025   A4           MUL       AB
   \   000026   2A           ADD       A,R2
   \   000027   F9           MOV       R1,A
   \   000028   90....       MOV       DPTR,#tasksEvents
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   28           ADD       A,R0
   \   00002D   FA           MOV       R2,A
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   39           ADDC      A,R1
   \   000031   8A82         MOV       DPL,R2
   \   000033   F583         MOV       DPH,A
   \   000035   E0           MOVX      A,@DPTR
   \   000036   F8           MOV       R0,A
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F9           MOV       R1,A
   \   00003A   E8           MOV       A,R0
   \   00003B   49           ORL       A,R1
   \   00003C   700D         JNZ       ??osal_run_system_1
   1646              {
   1647                break;
   1648              }
   1649            } while (++idx < tasksCnt);
   \   00003E   05..         INC       ?V1
   \   000040   90....       MOV       DPTR,#tasksCnt
   \   000043   E0           MOVX      A,@DPTR
   \   000044   F8           MOV       R0,A
   \   000045   E5..         MOV       A,?V1
   \   000047   C3           CLR       C
   \   000048   98           SUBB      A,R0
   \   000049   40C3         JC        ??osal_run_system_0
   1650          
   1651            if (idx < tasksCnt)
   \                     ??osal_run_system_1:
   \   00004B   90....       MOV       DPTR,#tasksCnt
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   F8           MOV       R0,A
   \   000050   E5..         MOV       A,?V1
   \   000052   C3           CLR       C
   \   000053   98           SUBB      A,R0
   \   000054   4003         JC        $+5
   \   000056   02....       LJMP      ??osal_run_system_2 & 0xFFFF
   1652            {
   1653              uint16 events;
   1654              halIntState_t intState;
   1655          
   1656              HAL_ENTER_CRITICAL_SECTION(intState);
   \   000059   A2AF         MOV       C,0xa8.7
   \   00005B   E4           CLR       A
   \   00005C   33           RLC       A
   \   00005D   F5..         MOV       ?V0,A
   \   00005F   C2AF         CLR       0xa8.7
   1657              events = tasksEvents[idx];
   \   000061   E5..         MOV       A,?V1
   \   000063   F8           MOV       R0,A
   \   000064   7900         MOV       R1,#0x0
   \   000066   E8           MOV       A,R0
   \   000067   75F002       MOV       B,#0x2
   \   00006A   A4           MUL       AB
   \   00006B   C8           XCH       A,R0
   \   00006C   AAF0         MOV       R2,B
   \   00006E   75F000       MOV       B,#0x0
   \   000071   A4           MUL       AB
   \   000072   2A           ADD       A,R2
   \   000073   FA           MOV       R2,A
   \   000074   75F002       MOV       B,#0x2
   \   000077   E9           MOV       A,R1
   \   000078   A4           MUL       AB
   \   000079   2A           ADD       A,R2
   \   00007A   F9           MOV       R1,A
   \   00007B   90....       MOV       DPTR,#tasksEvents
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   28           ADD       A,R0
   \   000080   FA           MOV       R2,A
   \   000081   A3           INC       DPTR
   \   000082   E0           MOVX      A,@DPTR
   \   000083   39           ADDC      A,R1
   \   000084   8A82         MOV       DPL,R2
   \   000086   F583         MOV       DPH,A
   \   000088   E0           MOVX      A,@DPTR
   \   000089   FE           MOV       R6,A
   \   00008A   A3           INC       DPTR
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   FF           MOV       R7,A
   1658              tasksEvents[idx] = 0;  // Clear the Events for this task.
   \   00008D   E5..         MOV       A,?V1
   \   00008F   F8           MOV       R0,A
   \   000090   7900         MOV       R1,#0x0
   \   000092   E8           MOV       A,R0
   \   000093   75F002       MOV       B,#0x2
   \   000096   A4           MUL       AB
   \   000097   C8           XCH       A,R0
   \   000098   AAF0         MOV       R2,B
   \   00009A   75F000       MOV       B,#0x0
   \   00009D   A4           MUL       AB
   \   00009E   2A           ADD       A,R2
   \   00009F   FA           MOV       R2,A
   \   0000A0   75F002       MOV       B,#0x2
   \   0000A3   E9           MOV       A,R1
   \   0000A4   A4           MUL       AB
   \   0000A5   2A           ADD       A,R2
   \   0000A6   F9           MOV       R1,A
   \   0000A7   90....       MOV       DPTR,#tasksEvents
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   28           ADD       A,R0
   \   0000AC   FA           MOV       R2,A
   \   0000AD   A3           INC       DPTR
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   39           ADDC      A,R1
   \   0000B0   8A82         MOV       DPL,R2
   \   0000B2   F583         MOV       DPH,A
   \   0000B4   7400         MOV       A,#0x0
   \   0000B6   F0           MOVX      @DPTR,A
   \   0000B7   A3           INC       DPTR
   \   0000B8   7400         MOV       A,#0x0
   \   0000BA   F0           MOVX      @DPTR,A
   1659              HAL_EXIT_CRITICAL_SECTION(intState);
   \   0000BB   E5..         MOV       A,?V0
   \   0000BD   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000BF   92AF         MOV       0xa8.7,C
   1660          
   1661              activeTaskID = idx;
   \   0000C1   E5..         MOV       A,?V1
   \   0000C3   90....       MOV       DPTR,#activeTaskID
   \   0000C6   F0           MOVX      @DPTR,A
   1662              events = (tasksArr[idx])( idx, events );
   \   0000C7                ; Setup parameters for indirect call
   \   0000C7   EE           MOV       A,R6
   \   0000C8   FA           MOV       R2,A
   \   0000C9   EF           MOV       A,R7
   \   0000CA   FB           MOV       R3,A
   \   0000CB   A9..         MOV       R1,?V1
   \   0000CD   E5..         MOV       A,?V1
   \   0000CF   FC           MOV       R4,A
   \   0000D0   7D00         MOV       R5,#0x0
   \   0000D2   EC           MOV       A,R4
   \   0000D3   75F002       MOV       B,#0x2
   \   0000D6   A4           MUL       AB
   \   0000D7   CC           XCH       A,R4
   \   0000D8   A8F0         MOV       R0,B
   \   0000DA   75F000       MOV       B,#0x0
   \   0000DD   A4           MUL       AB
   \   0000DE   28           ADD       A,R0
   \   0000DF   F8           MOV       R0,A
   \   0000E0   75F002       MOV       B,#0x2
   \   0000E3   ED           MOV       A,R5
   \   0000E4   A4           MUL       AB
   \   0000E5   28           ADD       A,R0
   \   0000E6   FD           MOV       R5,A
   \   0000E7   74..         MOV       A,#tasksArr & 0xff
   \   0000E9   2C           ADD       A,R4
   \   0000EA   F582         MOV       DPL,A
   \   0000EC   74..         MOV       A,#(tasksArr >> 8) & 0xff
   \   0000EE   3D           ADDC      A,R5
   \   0000EF   F583         MOV       DPH,A
   \   0000F1   E0           MOVX      A,@DPTR
   \   0000F2   F8           MOV       R0,A
   \   0000F3   A3           INC       DPTR
   \   0000F4   E0           MOVX      A,@DPTR
   \   0000F5   F583         MOV       DPH,A
   \   0000F7   8882         MOV       DPL,R0
   \   0000F9   12....       LCALL     ?CALL_IND
   \   0000FC   8A..         MOV       ?V2,R2
   \   0000FE   8B..         MOV       ?V3,R3
   \   000100   AE..         MOV       R6,?V2
   \   000102   AF..         MOV       R7,?V3
   1663              activeTaskID = TASK_NO_TASK;
   \   000104   90....       MOV       DPTR,#activeTaskID
   \   000107   74FF         MOV       A,#-0x1
   \   000109   F0           MOVX      @DPTR,A
   1664          
   1665              HAL_ENTER_CRITICAL_SECTION(intState);
   \   00010A   A2AF         MOV       C,0xa8.7
   \   00010C   E4           CLR       A
   \   00010D   33           RLC       A
   \   00010E   F5..         MOV       ?V0,A
   \   000110   C2AF         CLR       0xa8.7
   1666              tasksEvents[idx] |= events;  // Add back unprocessed events to the current task.
   \   000112   E5..         MOV       A,?V1
   \   000114   F8           MOV       R0,A
   \   000115   7900         MOV       R1,#0x0
   \   000117   E8           MOV       A,R0
   \   000118   75F002       MOV       B,#0x2
   \   00011B   A4           MUL       AB
   \   00011C   C8           XCH       A,R0
   \   00011D   AAF0         MOV       R2,B
   \   00011F   75F000       MOV       B,#0x0
   \   000122   A4           MUL       AB
   \   000123   2A           ADD       A,R2
   \   000124   FA           MOV       R2,A
   \   000125   75F002       MOV       B,#0x2
   \   000128   E9           MOV       A,R1
   \   000129   A4           MUL       AB
   \   00012A   2A           ADD       A,R2
   \   00012B   F9           MOV       R1,A
   \   00012C   90....       MOV       DPTR,#tasksEvents
   \   00012F   E0           MOVX      A,@DPTR
   \   000130   28           ADD       A,R0
   \   000131   FA           MOV       R2,A
   \   000132   A3           INC       DPTR
   \   000133   E0           MOVX      A,@DPTR
   \   000134   39           ADDC      A,R1
   \   000135   8A82         MOV       DPL,R2
   \   000137   F583         MOV       DPH,A
   \   000139   E0           MOVX      A,@DPTR
   \   00013A   4E           ORL       A,R6
   \   00013B   F0           MOVX      @DPTR,A
   \   00013C   A3           INC       DPTR
   \   00013D   E0           MOVX      A,@DPTR
   \   00013E   4F           ORL       A,R7
   \   00013F   F0           MOVX      @DPTR,A
   1667              HAL_EXIT_CRITICAL_SECTION(intState);
   \   000140   E5..         MOV       A,?V0
   \   000142   A2E0         MOV       C,0xE0 /* A   */.0
   \   000144   92AF         MOV       0xa8.7,C
   \   000146   8003         SJMP      ??osal_run_system_3
   1668            }
   1669          #if defined( POWER_SAVING ) && !defined(USE_ICALL)
   1670            else  // Complete pass through all task events with no activity?
   1671            {
   1672              osal_pwrmgr_powerconserve();  // Put the processor/system into sleep
   \                     ??osal_run_system_2:
   \   000148                ; Setup parameters for call to function osal_pwrmgr_powerconserve
   \   000148   12....       LCALL     `??osal_pwrmgr_powerconserve::?relay`; Banked call to: osal_pwrmgr_powerconserve
   1673            }
   1674          #endif
   1675          
   1676            /* Yield in case cooperative scheduling is being used. */
   1677          #if defined (configUSE_PREEMPTION) && (configUSE_PREEMPTION == 0)
   1678            {
   1679              osal_task_yield();
   1680            }
   1681          #endif
   1682          
   1683          #if defined USE_ICALL
   1684            /* Note that scheduling wakeup at this point instead of
   1685             * scheduling it upon ever OSAL start timer request,
   1686             * would only work if OSAL start timer call is made
   1687             * from OSAL tasks, but not from either ISR or
   1688             * non-OSAL application thread.
   1689             * In case, OSAL start timer is called from non-OSAL
   1690             * task, the scheduling should be part of OSAL_Timers
   1691             * module.
   1692             * Such a change to OSAL_Timers module was not made
   1693             * in order not to diverge the OSAL implementations
   1694             * too drastically between pure OSAL solution vs.
   1695             * OSAL upon service dispatcher (RTOS).
   1696             * TODO: reconsider the above statement.
   1697             */
   1698            {
   1699              halIntState_t intState;
   1700          
   1701              uint32 next_timeout_post = osal_next_timeout();
   1702              if (next_timeout_post != next_timeout_prior)
   1703              {
   1704                /* Next wakeup time has to be scheduled */
   1705                if (next_timeout_post == 0)
   1706                {
   1707                  /* No timer. Set time to the max */
   1708                  next_timeout_post = OSAL_TIMERS_MAX_TIMEOUT;
   1709                }
   1710                if (next_timeout_post > osal_max_msecs)
   1711                {
   1712                  next_timeout_post = osal_max_msecs;
   1713                }
   1714                /* Restart timer */
   1715                HAL_ENTER_CRITICAL_SECTION(intState);
   1716                ICall_stopTimer(osal_timerid_msec_timer);
   1717                ICall_setTimerMSecs(next_timeout_post, osal_msec_timer_cback,
   1718                                    (void *) (++osal_msec_timer_seq),
   1719                                    &osal_timerid_msec_timer);
   1720                HAL_EXIT_CRITICAL_SECTION(intState);
   1721              }
   1722            }
   1723          #endif /* USE_ICALL */
   1724          }
   \                     ??osal_run_system_3:
   \   00014B   7F04         MOV       R7,#0x4
   \   00014D   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000150                REQUIRE _A_IEN0
   1725          
   1726          /*********************************************************************
   1727           * @fn      osal_buffer_uint32
   1728           *
   1729           * @brief
   1730           *
   1731           *   Buffer an uint32 value - LSB first.
   1732           *
   1733           * @param   buf - buffer
   1734           * @param   val - uint32 value
   1735           *
   1736           * @return  pointer to end of destination buffer
   1737           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1738          uint8* osal_buffer_uint32( uint8 *buf, uint32 val )
   \                     osal_buffer_uint32:
   1739          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   7410         MOV       A,#0x10
   \   000007   12....       LCALL     ?XSTACK_DISP0_8
   \   00000A   78..         MOV       R0,#?V4
   \   00000C   12....       LCALL     ?L_MOV_X
   1740            *buf++ = BREAK_UINT32( val, 0 );
   \   00000F   A8..         MOV       R0,?V4
   \   000011   A9..         MOV       R1,?V5
   \   000013   E8           MOV       A,R0
   \   000014   C0E0         PUSH      A
   \   000016   8A82         MOV       DPL,R2
   \   000018   8B83         MOV       DPH,R3
   \   00001A   D0E0         POP       A
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   8A82         MOV       DPL,R2
   \   00001F   8B83         MOV       DPH,R3
   \   000021   A3           INC       DPTR
   \   000022   AA82         MOV       R2,DPL
   \   000024   AB83         MOV       R3,DPH
   1741            *buf++ = BREAK_UINT32( val, 1 );
   \   000026   85....       MOV       ?V0,?V4
   \   000029   85....       MOV       ?V1,?V5
   \   00002C   E4           CLR       A
   \   00002D   C5..         XCH       A,?V1
   \   00002F   F5..         MOV       ?V0,A
   \   000031   E5..         MOV       A,?V0
   \   000033   C0E0         PUSH      A
   \   000035   8A82         MOV       DPL,R2
   \   000037   8B83         MOV       DPH,R3
   \   000039   D0E0         POP       A
   \   00003B   F0           MOVX      @DPTR,A
   \   00003C   8A82         MOV       DPL,R2
   \   00003E   8B83         MOV       DPH,R3
   \   000040   A3           INC       DPTR
   \   000041   AA82         MOV       R2,DPL
   \   000043   AB83         MOV       R3,DPH
   1742            *buf++ = BREAK_UINT32( val, 2 );
   \   000045   85....       MOV       ?V0,?V4
   \   000048   85....       MOV       ?V1,?V5
   \   00004B   85....       MOV       ?V2,?V6
   \   00004E   85....       MOV       ?V3,?V7
   \   000051   7410         MOV       A,#0x10
   \   000053   78..         MOV       R0,#?V0
   \   000055   12....       LCALL     ?UL_SHR
   \   000058   E5..         MOV       A,?V0
   \   00005A   C0E0         PUSH      A
   \   00005C   8A82         MOV       DPL,R2
   \   00005E   8B83         MOV       DPH,R3
   \   000060   D0E0         POP       A
   \   000062   F0           MOVX      @DPTR,A
   \   000063   8A82         MOV       DPL,R2
   \   000065   8B83         MOV       DPH,R3
   \   000067   A3           INC       DPTR
   \   000068   AA82         MOV       R2,DPL
   \   00006A   AB83         MOV       R3,DPH
   1743            *buf++ = BREAK_UINT32( val, 3 );
   \   00006C   85....       MOV       ?V0,?V4
   \   00006F   85....       MOV       ?V1,?V5
   \   000072   85....       MOV       ?V2,?V6
   \   000075   85....       MOV       ?V3,?V7
   \   000078   7418         MOV       A,#0x18
   \   00007A   78..         MOV       R0,#?V0
   \   00007C   12....       LCALL     ?UL_SHR
   \   00007F   E5..         MOV       A,?V0
   \   000081   C0E0         PUSH      A
   \   000083   8A82         MOV       DPL,R2
   \   000085   8B83         MOV       DPH,R3
   \   000087   D0E0         POP       A
   \   000089   F0           MOVX      @DPTR,A
   \   00008A   8A82         MOV       DPL,R2
   \   00008C   8B83         MOV       DPH,R3
   \   00008E   A3           INC       DPTR
   \   00008F   AA82         MOV       R2,DPL
   \   000091   AB83         MOV       R3,DPH
   1744          
   1745            return buf;
   \   000093   7F08         MOV       R7,#0x8
   \   000095   02....       LJMP      ?BANKED_LEAVE_XDATA
   1746          }
   1747          
   1748          /*********************************************************************
   1749           * @fn      osal_buffer_uint24
   1750           *
   1751           * @brief
   1752           *
   1753           *   Buffer an uint24 value - LSB first. Note that type uint24 is
   1754           *   typedef to uint32 in comdef.h
   1755           *
   1756           * @param   buf - buffer
   1757           * @param   val - uint24 value
   1758           *
   1759           * @return  pointer to end of destination buffer
   1760           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1761          uint8* osal_buffer_uint24( uint8 *buf, uint24 val )
   \                     osal_buffer_uint24:
   1762          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   7410         MOV       A,#0x10
   \   000007   12....       LCALL     ?XSTACK_DISP0_8
   \   00000A   78..         MOV       R0,#?V4
   \   00000C   12....       LCALL     ?L_MOV_X
   1763            *buf++ = BREAK_UINT32( val, 0 );
   \   00000F   A8..         MOV       R0,?V4
   \   000011   A9..         MOV       R1,?V5
   \   000013   E8           MOV       A,R0
   \   000014   C0E0         PUSH      A
   \   000016   8A82         MOV       DPL,R2
   \   000018   8B83         MOV       DPH,R3
   \   00001A   D0E0         POP       A
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   8A82         MOV       DPL,R2
   \   00001F   8B83         MOV       DPH,R3
   \   000021   A3           INC       DPTR
   \   000022   AA82         MOV       R2,DPL
   \   000024   AB83         MOV       R3,DPH
   1764            *buf++ = BREAK_UINT32( val, 1 );
   \   000026   85....       MOV       ?V0,?V4
   \   000029   85....       MOV       ?V1,?V5
   \   00002C   E4           CLR       A
   \   00002D   C5..         XCH       A,?V1
   \   00002F   F5..         MOV       ?V0,A
   \   000031   E5..         MOV       A,?V0
   \   000033   C0E0         PUSH      A
   \   000035   8A82         MOV       DPL,R2
   \   000037   8B83         MOV       DPH,R3
   \   000039   D0E0         POP       A
   \   00003B   F0           MOVX      @DPTR,A
   \   00003C   8A82         MOV       DPL,R2
   \   00003E   8B83         MOV       DPH,R3
   \   000040   A3           INC       DPTR
   \   000041   AA82         MOV       R2,DPL
   \   000043   AB83         MOV       R3,DPH
   1765            *buf++ = BREAK_UINT32( val, 2 );
   \   000045   85....       MOV       ?V0,?V4
   \   000048   85....       MOV       ?V1,?V5
   \   00004B   85....       MOV       ?V2,?V6
   \   00004E   85....       MOV       ?V3,?V7
   \   000051   7410         MOV       A,#0x10
   \   000053   78..         MOV       R0,#?V0
   \   000055   12....       LCALL     ?UL_SHR
   \   000058   E5..         MOV       A,?V0
   \   00005A   C0E0         PUSH      A
   \   00005C   8A82         MOV       DPL,R2
   \   00005E   8B83         MOV       DPH,R3
   \   000060   D0E0         POP       A
   \   000062   F0           MOVX      @DPTR,A
   \   000063   8A82         MOV       DPL,R2
   \   000065   8B83         MOV       DPH,R3
   \   000067   A3           INC       DPTR
   \   000068   AA82         MOV       R2,DPL
   \   00006A   AB83         MOV       R3,DPH
   1766          
   1767            return buf;
   \   00006C   7F08         MOV       R7,#0x8
   \   00006E   02....       LJMP      ?BANKED_LEAVE_XDATA
   1768          }
   1769          
   1770          /*********************************************************************
   1771           * @fn      osal_isbufset
   1772           *
   1773           * @brief
   1774           *
   1775           *   Is all of the array elements set to a value?
   1776           *
   1777           * @param   buf - buffer to check
   1778           * @param   val - value to check each array element for
   1779           * @param   len - length to check
   1780           *
   1781           * @return  TRUE if all "val"
   1782           *          FALSE otherwise
   1783           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1784          uint8 osal_isbufset( uint8 *buf, uint8 val, uint8 len )
   \                     osal_isbufset:
   1785          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FD           MOV       R5,A
   1786            uint8 x;
   1787          
   1788            if ( buf == NULL )
   \   000007   EA           MOV       A,R2
   \   000008   4B           ORL       A,R3
   \   000009   7004         JNZ       ??osal_isbufset_0
   1789            {
   1790              return ( FALSE );
   \   00000B   7900         MOV       R1,#0x0
   \   00000D   8020         SJMP      ??osal_isbufset_1
   1791            }
   1792          
   1793            for ( x = 0; x < len; x++ )
   \                     ??osal_isbufset_0:
   \   00000F   7800         MOV       R0,#0x0
   \                     ??osal_isbufset_2:
   \   000011   E8           MOV       A,R0
   \   000012   C3           CLR       C
   \   000013   9C           SUBB      A,R4
   \   000014   5017         JNC       ??osal_isbufset_3
   1794            {
   1795              // Check for non-initialized value
   1796              if ( buf[x] != val )
   \   000016   E8           MOV       A,R0
   \   000017   FE           MOV       R6,A
   \   000018   7F00         MOV       R7,#0x0
   \   00001A   EA           MOV       A,R2
   \   00001B   2E           ADD       A,R6
   \   00001C   F582         MOV       DPL,A
   \   00001E   EB           MOV       A,R3
   \   00001F   3F           ADDC      A,R7
   \   000020   F583         MOV       DPH,A
   \   000022   E0           MOVX      A,@DPTR
   \   000023   6D           XRL       A,R5
   \   000024   6004         JZ        ??osal_isbufset_4
   1797              {
   1798                return ( FALSE );
   \   000026   7900         MOV       R1,#0x0
   \   000028   8005         SJMP      ??osal_isbufset_1
   1799              }
   1800            }
   \                     ??osal_isbufset_4:
   \   00002A   08           INC       R0
   \   00002B   80E4         SJMP      ??osal_isbufset_2
   1801            return ( TRUE );
   \                     ??osal_isbufset_3:
   \   00002D   7901         MOV       R1,#0x1
   \                     ??osal_isbufset_1:
   \   00002F   7F01         MOV       R7,#0x1
   \   000031   02....       LJMP      ?BANKED_LEAVE_XDATA
   1802          }
   1803          
   1804          /*********************************************************************
   1805           * @fn      osal_self
   1806           *
   1807           * @brief
   1808           *
   1809           *   This function returns the task ID of the current (active) task.
   1810           *
   1811           * @param   void
   1812           *
   1813           * @return   active task ID or TASK_NO_TASK if no task is active
   1814           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1815          uint8 osal_self( void )
   \                     osal_self:
   1816          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1817            return ( activeTaskID );
   \   000004   90....       MOV       DPTR,#activeTaskID
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   D083         POP       DPH
   \   00000B   D082         POP       DPL
   \   00000D   02....       LJMP      ?BRET
   1818          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for activeTaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">`:
   \   000000   00           DB ""
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">_1`:
   \   000000   00           DB ""
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">_2`:
   \   000000   00           DB ""
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0">`:
   \   000000   3000         DB "0"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2710:
   \   000000   10270000     DD 10000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_5f5e100:
   \   000000   00E1F505     DD 100000000
   1819          
   1820          /*********************************************************************
   1821           */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     58   _ltoa
        0     56   -> _itoa
        0     56   -> strcat
        0     56   -> strcpy
        0     56   -> strlen
      1     20   osal_buffer_uint24
      1     20   osal_buffer_uint32
      2      0   osal_build_uint16
      0     16   osal_build_uint32
      0     23   osal_clear_event
      2      0   osal_init_system
        2      0   -> osalInitTasks
        2      0   -> osalTimerInit
        2      0   -> osal_mem_init
        2      0   -> osal_mem_kick
        2      0   -> osal_pwrmgr_init
      0      0   osal_int_disable
      0      0   osal_int_enable
      0      9   osal_isbufset
      0      0   osal_isr_register
      0     29   osal_memcmp
      1     33   osal_memcpy
      0     18   osal_memdup
        0     15   -> osal_mem_alloc
        0     18   -> osal_memcpy
      0     13   osal_memset
        0     13   -> memset
      0     12   osal_msg_allocate
        0     12   -> osal_mem_alloc
      0      9   osal_msg_count
      0     20   osal_msg_deallocate
        0     10   -> osal_mem_free
      0      9   osal_msg_dequeue
      0     19   osal_msg_enqueue
      0     11   osal_msg_enqueue_max
      1     19   osal_msg_enqueue_push
        0     10   -> osal_msg_deallocate
        0     10   -> osal_msg_enqueue
        0     10   -> osal_msg_push
        0     10   -> osal_set_event
      0     26   osal_msg_extract
      0      9   osal_msg_find
      0     19   osal_msg_push
      0      9   osal_msg_push_front
        0      9   -> osal_msg_enqueue_push
      0     16   osal_msg_receive
        0     14   -> osal_clear_event
        0     16   -> osal_msg_extract
        0     14   -> osal_set_event
      0      9   osal_msg_send
        0      9   -> osal_msg_enqueue_push
      2      0   osal_rand
        2      0   -> Onboard_rand
      1     18   osal_revmemcpy
      0     12   osal_run_system
        0     12   -> Hal_ProcessPoll
        0     12   -> osalTimeUpdate
        0     12   -> osal_pwrmgr_powerconserve
      2      0   osal_self
      0     23   osal_set_event
      2      0   osal_start_system
        2      0   -> osal_run_system
      0      9   osal_strlen
        0      9   -> strlen


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?<Constant "">
      10  ?<Constant "">_1
      10  ?<Constant "">_2
       2  ?<Constant "0">
       1  ?<Initializer for activeTaskID>
       1  _A_IEN0
       4  __Constant_2710
       4  __Constant_5f5e100
     785  _ltoa
       1  activeTaskID
     113  osal_buffer_uint24
     152  osal_buffer_uint32
      37  osal_build_uint16
     292  osal_build_uint32
      93  osal_clear_event
      38  osal_init_system
      18  osal_int_disable
      18  osal_int_enable
      52  osal_isbufset
       7  osal_isr_register
     168  osal_memcmp
      92  osal_memcpy
      78  osal_memdup
      42  osal_memset
      98  osal_msg_allocate
      87  osal_msg_count
      62  osal_msg_deallocate
     110  osal_msg_dequeue
     129  osal_msg_enqueue
     144  osal_msg_enqueue_max
     155  osal_msg_enqueue_push
     137  osal_msg_extract
      79  osal_msg_find
      55  osal_msg_push
      27  osal_msg_push_front
     167  osal_msg_receive
      27  osal_msg_send
       2  osal_qHead
      14  osal_rand
     109  osal_revmemcpy
     336  osal_run_system
      16  osal_self
      85  osal_set_event
       9  osal_start_system
      21  osal_strlen
     210  -- Other

 
 3 852 bytes in segment BANKED_CODE
   210 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
    40 bytes in segment XDATA_ROM_C
     2 bytes in segment XDATA_Z
 
   211 bytes of CODE     memory
    32 bytes of CONST    memory (+ 8 bytes shared)
     0 bytes of DATA     memory (+ 1 byte  shared)
 3 852 bytes of HUGECODE memory
     3 bytes of XDATA    memory

Errors: none
Warnings: none
