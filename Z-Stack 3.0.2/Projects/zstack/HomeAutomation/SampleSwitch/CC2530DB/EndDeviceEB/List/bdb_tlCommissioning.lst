###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               05/Aug/2020  22:50:56
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack 3.0.2\Components\stack\bdb\bdb_tlCommissioning.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EWDA0.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\stack\bdb\bdb_tlCommissioning.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D POWER_SAVING -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_GROUPS -D BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=0
#        -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0 -DREJOIN_POLL_RATE=0
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\bdb_tlCommissioning.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\bdb_tlCommissioning.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\stack\bdb\bdb_tlCommissioning.c
      1          /**************************************************************************************************
      2            Filename:       bdb_tlCommissioning.c
      3            Revised:        $Date: 2013-09-10 17:57:03 -0700 (Tue, 10 Sep 2013) $
      4            Revision:       $Revision: 35271 $
      5          
      6            Description:    Zigbee Cluster Library - Light Link commissioning cluster.
      7          
      8          
      9            Copyright 2011-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          #include "zcl.h"
     45          #include "zcl_general.h"
     46          #include "bdb_tlCommissioning.h"
     47          #include "bdb.h"
     48          #include "bdb_interface.h"
     49          #include "bdb_touchlink.h"
     50          
     51          #include "stub_aps.h"
     52          
     53          #if defined ( BDB_TL_TARGET ) || defined ( BDB_TL_INITIATOR )
     54             
     55          /*********************************************************************
     56           * MACROS
     57           */
     58          
     59          /*********************************************************************
     60           * CONSTANTS
     61           */
     62          
     63          /*********************************************************************
     64           * TYPEDEFS
     65           */
     66          
     67          typedef struct bdbTLCBRec
     68          {
     69            struct bdbTLCBRec     *next;
     70            uint8 endpoint;               // Used to link it into the endpoint descriptor
     71            bdbTL_AppCallbacks_t  *CBs;   // Pointer to Callback function
     72          } bdbTLCBRec_t;
     73          
     74          /*********************************************************************
     75           * GLOBAL VARIABLES
     76           */
     77          
     78          /*********************************************************************
     79           * GLOBAL FUNCTIONS
     80           */
     81          
     82          /*********************************************************************
     83           * LOCAL VARIABLES
     84           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     85          static bdbTLCBRec_t *bdbTLCBs = (bdbTLCBRec_t *)NULL;
   \                     bdbTLCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     86          static uint8 bdbTLPluginRegisted = FALSE;
   \                     bdbTLPluginRegisted:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     87          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     88          static bdbTL_InterPANCallbacks_t *pInterPANCBs = (bdbTL_InterPANCallbacks_t *)NULL;
   \                     pInterPANCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     89          
     90          /*********************************************************************
     91           * LOCAL FUNCTIONS
     92           */
     93          
     94          static ZStatus_t bdbTL_SendInterPANCommand( uint8 srcEP, afAddrType_t *destAddr, uint8 cmd,
     95                                                      uint8 direction, uint8 seqNum, uint16 cmdFormatLen, 
     96                                                      uint8 *cmdFormat );
     97          static bdbTL_AppCallbacks_t *bdbTL_FindCallbacks( uint8 endpoint );
     98          static ZStatus_t bdbTL_HdlIncoming( zclIncoming_t *pInMsg );
     99          static ZStatus_t bdbTL_HdlInSpecificCommands( zclIncoming_t *pInMsg );
    100          static ZStatus_t bdbTL_ProcessInLLCmds( zclIncoming_t *pInMsg, bdbTL_AppCallbacks_t *pCBs );
    101          
    102          static ZStatus_t bdbTL_ProcessInCmd_GetGrpIDsReq( zclIncoming_t *pInMsg, bdbTL_AppCallbacks_t *pCBs );
    103          static ZStatus_t bdbTL_ProcessInCmd_GetEPListReq( zclIncoming_t *pInMsg, bdbTL_AppCallbacks_t *pCBs );
    104          
    105          static ZStatus_t bdbTL_ProcessInCmd_EndpointInfo( zclIncoming_t *pInMsg, bdbTL_AppCallbacks_t *pCBs );
    106          static ZStatus_t bdbTL_ProcessInCmd_GetGrpIDsRsp( zclIncoming_t *pInMsg, bdbTL_AppCallbacks_t *pCBs );
    107          static ZStatus_t bdbTL_ProcessInCmd_GetEPListRsp( zclIncoming_t *pInMsg, bdbTL_AppCallbacks_t *pCBs );
    108          
    109          static ZStatus_t bdbTL_HdlInInterPANCommands( zclIncoming_t *pInMsg );
    110          static ZStatus_t bdbTL_ProcessInLLInterPANCmds( zclIncoming_t *pInMsg );
    111          
    112          static void bdbTL_ParseInCmd_NwkJoinReq( uint8 *pBuf, bdbTLNwkJoinReq_t *pReq );
    113          
    114          static ZStatus_t bdbTL_ProcessInCmd_ScanReq( zclIncoming_t *pInMsg );
    115          static ZStatus_t bdbTL_ProcessInCmd_DeviceInfoReq( zclIncoming_t *pInMsg );
    116          static ZStatus_t bdbTL_ProcessInCmd_IdentifyReq( zclIncoming_t *pInMsg );
    117          static ZStatus_t bdbTL_ProcessInCmd_ResetToFNReq( zclIncoming_t *pInMsg );
    118          static ZStatus_t bdbTL_ProcessInCmd_NwkStartReq( zclIncoming_t *pInMsg );
    119          static ZStatus_t bdbTL_ProcessInCmd_NwkJoinRtrReq( zclIncoming_t *pInMsg );
    120          static ZStatus_t bdbTL_ProcessInCmd_NwkJoinEDReq( zclIncoming_t *pInMsg );
    121          static ZStatus_t bdbTL_ProcessInCmd_NwkUpdateReq( zclIncoming_t *pInMsg );
    122          
    123          static ZStatus_t bdbTL_ProcessInCmd_ScanRsp( zclIncoming_t *pInMsg );
    124          static ZStatus_t bdbTL_ProcessInCmd_DeviceInfoRsp( zclIncoming_t *pInMsg );
    125          static ZStatus_t bdbTL_ProcessInCmd_NwkStartRsp( zclIncoming_t *pInMsg );
    126          static ZStatus_t bdbTL_ProcessInCmd_NwkJoinRtrRsp( zclIncoming_t *pInMsg );
    127          static ZStatus_t bdbTL_ProcessInCmd_NwkJoinEDRsp( zclIncoming_t *pInMsg );
    128          
    129          
    130          /*********************************************************************
    131           * @fn      bdbTL_RegisterCmdCallbacks
    132           *
    133           * @brief   Register an applications command callbacks
    134           *
    135           * @param   endpoint - application's endpoint
    136           * @param   callbacks - pointer to the callback record.
    137           *
    138           * @return  ZMemError if not able to allocate
    139           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    140          ZStatus_t bdbTL_RegisterCmdCallbacks( uint8 endpoint, bdbTL_AppCallbacks_t *callbacks )
   \                     bdbTL_RegisterCmdCallbacks:
    141          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V4,R1
   \   000007   8A..         MOV       ?V2,R2
   \   000009   8B..         MOV       ?V3,R3
    142            bdbTLCBRec_t *pNewItem;
    143            bdbTLCBRec_t *pLoop;
    144          
    145            // Register as a ZCL Plugin
    146            if ( !bdbTLPluginRegisted )
   \   00000B   90....       MOV       DPTR,#bdbTLPluginRegisted
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   7022         JNZ       ??bdbTL_RegisterCmdCallbacks_0
    147            {
    148              zcl_registerPlugin( ZCL_CLUSTER_ID_TOUCHLINK,
    149                                  ZCL_CLUSTER_ID_TOUCHLINK,
    150                                  bdbTL_HdlIncoming );
   \   000011                ; Setup parameters for call to function zcl_registerPlugin
   \   000011   75....       MOV       ?V6,#`??bdbTL_HdlIncoming::?relay` & 0xff
   \   000014   75....       MOV       ?V7,#(`??bdbTL_HdlIncoming::?relay` >> 8) & 0xff
   \   000017   78..         MOV       R0,#?V6
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   7C00         MOV       R4,#0x0
   \   00001E   7D10         MOV       R5,#0x10
   \   000020   7A00         MOV       R2,#0x0
   \   000022   7B10         MOV       R3,#0x10
   \   000024   12....       LCALL     `??zcl_registerPlugin::?relay`; Banked call to: zcl_registerPlugin
   \   000027   7402         MOV       A,#0x2
   \   000029   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002C   E9           MOV       A,R1
    151              bdbTLPluginRegisted = TRUE;
   \   00002D   90....       MOV       DPTR,#bdbTLPluginRegisted
   \   000030   7401         MOV       A,#0x1
   \   000032   F0           MOVX      @DPTR,A
    152            }
    153          
    154            // Fill in the new profile list
    155            pNewItem = zcl_mem_alloc( sizeof( bdbTLCBRec_t ) );
   \                     ??bdbTL_RegisterCmdCallbacks_0:
   \   000033                ; Setup parameters for call to function osal_mem_alloc
   \   000033   7A05         MOV       R2,#0x5
   \   000035   7B00         MOV       R3,#0x0
   \   000037   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003A   8A..         MOV       ?V6,R2
   \   00003C   8B..         MOV       ?V7,R3
   \   00003E   AE..         MOV       R6,?V6
   \   000040   AF..         MOV       R7,?V7
    156            if ( pNewItem == NULL )
   \   000042   EE           MOV       A,R6
   \   000043   4F           ORL       A,R7
   \   000044   7004         JNZ       ??bdbTL_RegisterCmdCallbacks_1
    157              return (ZMemError);
   \   000046   7910         MOV       R1,#0x10
   \   000048   8073         SJMP      ??bdbTL_RegisterCmdCallbacks_2
    158          
    159            pNewItem->next = (bdbTLCBRec_t *)NULL;
   \                     ??bdbTL_RegisterCmdCallbacks_1:
   \   00004A   8E82         MOV       DPL,R6
   \   00004C   8F83         MOV       DPH,R7
   \   00004E   7400         MOV       A,#0x0
   \   000050   F0           MOVX      @DPTR,A
   \   000051   A3           INC       DPTR
   \   000052   7400         MOV       A,#0x0
   \   000054   F0           MOVX      @DPTR,A
    160            pNewItem->endpoint = endpoint;
   \   000055   E5..         MOV       A,?V4
   \   000057   C0E0         PUSH      A
   \   000059   8E82         MOV       DPL,R6
   \   00005B   8F83         MOV       DPH,R7
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   D0E0         POP       A
   \   000061   F0           MOVX      @DPTR,A
    161            pNewItem->CBs = callbacks;
   \   000062   8E82         MOV       DPL,R6
   \   000064   8F83         MOV       DPH,R7
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   E5..         MOV       A,?V2
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   A3           INC       DPTR
   \   00006D   E5..         MOV       A,?V3
   \   00006F   F0           MOVX      @DPTR,A
    162          
    163            // Find spot in list
    164            if ( bdbTLCBs == NULL )
   \   000070   90....       MOV       DPTR,#bdbTLCBs
   \   000073   E0           MOVX      A,@DPTR
   \   000074   F8           MOV       R0,A
   \   000075   A3           INC       DPTR
   \   000076   E0           MOVX      A,@DPTR
   \   000077   F9           MOV       R1,A
   \   000078   E8           MOV       A,R0
   \   000079   49           ORL       A,R1
   \   00007A   700A         JNZ       ??bdbTL_RegisterCmdCallbacks_3
    165            {
    166              bdbTLCBs = pNewItem;
   \   00007C   90....       MOV       DPTR,#bdbTLCBs
   \   00007F   EE           MOV       A,R6
   \   000080   F0           MOVX      @DPTR,A
   \   000081   A3           INC       DPTR
   \   000082   EF           MOV       A,R7
   \   000083   F0           MOVX      @DPTR,A
   \   000084   8035         SJMP      ??bdbTL_RegisterCmdCallbacks_4
    167            }
    168            else
    169            {
    170              // Look for end of list
    171              pLoop = bdbTLCBs;
   \                     ??bdbTL_RegisterCmdCallbacks_3:
   \   000086   90....       MOV       DPTR,#bdbTLCBs
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   F8           MOV       R0,A
   \   00008B   A3           INC       DPTR
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   F9           MOV       R1,A
   \   00008E   88..         MOV       ?V0,R0
   \   000090   89..         MOV       ?V1,R1
    172              while ( pLoop->next != NULL )
   \                     ??bdbTL_RegisterCmdCallbacks_5:
   \   000092   85..82       MOV       DPL,?V0
   \   000095   85..83       MOV       DPH,?V1
   \   000098   E0           MOVX      A,@DPTR
   \   000099   F8           MOV       R0,A
   \   00009A   A3           INC       DPTR
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   F9           MOV       R1,A
   \   00009D   E8           MOV       A,R0
   \   00009E   49           ORL       A,R1
   \   00009F   600F         JZ        ??bdbTL_RegisterCmdCallbacks_6
    173                pLoop = pLoop->next;
   \   0000A1   85..82       MOV       DPL,?V0
   \   0000A4   85..83       MOV       DPH,?V1
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   F5..         MOV       ?V0,A
   \   0000AA   A3           INC       DPTR
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   F5..         MOV       ?V1,A
   \   0000AE   80E2         SJMP      ??bdbTL_RegisterCmdCallbacks_5
    174          
    175              // Put new item at end of list
    176              pLoop->next = pNewItem;
   \                     ??bdbTL_RegisterCmdCallbacks_6:
   \   0000B0   85..82       MOV       DPL,?V0
   \   0000B3   85..83       MOV       DPH,?V1
   \   0000B6   EE           MOV       A,R6
   \   0000B7   F0           MOVX      @DPTR,A
   \   0000B8   A3           INC       DPTR
   \   0000B9   EF           MOV       A,R7
   \   0000BA   F0           MOVX      @DPTR,A
    177            }
    178          
    179            return ( ZSuccess );
   \                     ??bdbTL_RegisterCmdCallbacks_4:
   \   0000BB   7900         MOV       R1,#0x0
   \                     ??bdbTL_RegisterCmdCallbacks_2:
   \   0000BD   7F08         MOV       R7,#0x8
   \   0000BF   02....       LJMP      ?BANKED_LEAVE_XDATA
    180          }
    181          
    182          /*********************************************************************
    183           * @fn      bdbTL_RegisterInterPANCmdCallbacks
    184           *
    185           * @brief   Register an applications Inter-PAN command callbacks
    186           *
    187           * @param   callbacks - pointer to the callback record.
    188           *
    189           * @return  ZSuccess
    190           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    191          ZStatus_t bdbTL_RegisterInterPANCmdCallbacks( bdbTL_InterPANCallbacks_t *callbacks )
   \                     bdbTL_RegisterInterPANCmdCallbacks:
    192          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    193            // Register as a ZCL Plugin
    194            if ( !bdbTLPluginRegisted )
   \   000009   90....       MOV       DPTR,#bdbTLPluginRegisted
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   7022         JNZ       ??bdbTL_RegisterInterPANCmdCallbacks_0
    195            {
    196              zcl_registerPlugin( ZCL_CLUSTER_ID_TOUCHLINK,
    197                                  ZCL_CLUSTER_ID_TOUCHLINK,
    198                                  bdbTL_HdlIncoming );
   \   00000F                ; Setup parameters for call to function zcl_registerPlugin
   \   00000F   75....       MOV       ?V0,#`??bdbTL_HdlIncoming::?relay` & 0xff
   \   000012   75....       MOV       ?V1,#(`??bdbTL_HdlIncoming::?relay` >> 8) & 0xff
   \   000015   78..         MOV       R0,#?V0
   \   000017   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001A   7C00         MOV       R4,#0x0
   \   00001C   7D10         MOV       R5,#0x10
   \   00001E   7A00         MOV       R2,#0x0
   \   000020   7B10         MOV       R3,#0x10
   \   000022   12....       LCALL     `??zcl_registerPlugin::?relay`; Banked call to: zcl_registerPlugin
   \   000025   7402         MOV       A,#0x2
   \   000027   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002A   E9           MOV       A,R1
    199              bdbTLPluginRegisted = TRUE;
   \   00002B   90....       MOV       DPTR,#bdbTLPluginRegisted
   \   00002E   7401         MOV       A,#0x1
   \   000030   F0           MOVX      @DPTR,A
    200            }
    201            pInterPANCBs = callbacks;
   \                     ??bdbTL_RegisterInterPANCmdCallbacks_0:
   \   000031   90....       MOV       DPTR,#pInterPANCBs
   \   000034   EE           MOV       A,R6
   \   000035   F0           MOVX      @DPTR,A
   \   000036   A3           INC       DPTR
   \   000037   EF           MOV       A,R7
   \   000038   F0           MOVX      @DPTR,A
    202          
    203            return ( ZSuccess );
   \   000039   7900         MOV       R1,#0x0
   \   00003B   7F02         MOV       R7,#0x2
   \   00003D   02....       LJMP      ?BANKED_LEAVE_XDATA
    204          }
    205          
    206          /*********************************************************************
    207           * @fn      bdbTL_Send_ScanReq
    208           *
    209           * @brief   Call to send out an Scan Request command
    210           *
    211           * @param   srcEP - sending application's endpoint
    212           * @param   dstAddr - where you want the message to go
    213           * @param   pReq - request parameters
    214           * @param   seqNum - sequence number
    215           *
    216           * @return  ZStatus_t
    217           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    218          ZStatus_t bdbTL_Send_ScanReq( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_ScanReq:
    219                                        bdbTLScanReq_t *pReq, uint8 seqNum )
    220          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V1,R1
   \   00000C   8A..         MOV       ?V2,R2
   \   00000E   8B..         MOV       ?V3,R3
   \   000010   EC           MOV       A,R4
   \   000011   FE           MOV       R6,A
   \   000012   ED           MOV       A,R5
   \   000013   FF           MOV       R7,A
   \   000014   7416         MOV       A,#0x16
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V0,A
    221            uint8 buf[TOUCHLINK_CMDLEN_SCAN_REQ];
    222          
    223            VOID zcl_buffer_uint32( buf, pReq->transID );
   \   00001C                ; Setup parameters for call to function osal_buffer_uint32
   \   00001C   8E82         MOV       DPL,R6
   \   00001E   8F83         MOV       DPH,R7
   \   000020   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000023   7404         MOV       A,#0x4
   \   000025   12....       LCALL     ?XSTACK_DISP101_8
   \   000028   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00002B   7404         MOV       A,#0x4
   \   00002D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000030   8A..         MOV       ?V6,R2
   \   000032   8B..         MOV       ?V7,R3
   \   000034   85....       MOV       ?V4,?V6
   \   000037   85....       MOV       ?V5,?V7
    224          
    225            buf[4] = pReq->zInfo.zInfoByte;
   \   00003A   8E82         MOV       DPL,R6
   \   00003C   8F83         MOV       DPH,R7
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   C0E0         PUSH      A
   \   000045   7404         MOV       A,#0x4
   \   000047   12....       LCALL     ?XSTACK_DISP0_8
   \   00004A   D0E0         POP       A
   \   00004C   F0           MOVX      @DPTR,A
    226            buf[5] = pReq->touchLinkInfo.touchLinkInfoByte;
   \   00004D   8E82         MOV       DPL,R6
   \   00004F   8F83         MOV       DPH,R7
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   E0           MOVX      A,@DPTR
   \   000058   C0E0         PUSH      A
   \   00005A   7405         MOV       A,#0x5
   \   00005C   12....       LCALL     ?XSTACK_DISP0_8
   \   00005F   D0E0         POP       A
   \   000061   F0           MOVX      @DPTR,A
    227          
    228            return bdbTL_SendInterPANCommand( srcEP, dstAddr, COMMAND_TOUCHLINK_SCAN_REQ,
    229                                              ZCL_FRAME_CLIENT_SERVER_DIR, seqNum, TOUCHLINK_CMDLEN_SCAN_REQ, buf );
   \   000062                ; Setup parameters for call to function bdbTL_SendInterPANCommand
   \   000062   A8..         MOV       R0,?XSP + 0
   \   000064   A9..         MOV       R1,?XSP + 1
   \   000066   88..         MOV       ?V6,R0
   \   000068   89..         MOV       ?V7,R1
   \   00006A   78..         MOV       R0,#?V6
   \   00006C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006F   75..06       MOV       ?V6,#0x6
   \   000072   75..00       MOV       ?V7,#0x0
   \   000075   78..         MOV       R0,#?V6
   \   000077   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007A   E5..         MOV       A,?V0
   \   00007C   F5..         MOV       ?V6,A
   \   00007E   78..         MOV       R0,#?V6
   \   000080   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000083   7D00         MOV       R5,#0x0
   \   000085   7C00         MOV       R4,#0x0
   \   000087   AA..         MOV       R2,?V2
   \   000089   AB..         MOV       R3,?V3
   \   00008B   A9..         MOV       R1,?V1
   \   00008D   12....       LCALL     `??bdbTL_SendInterPANCommand::?relay`; Banked call to: bdbTL_SendInterPANCommand
   \   000090   7405         MOV       A,#0x5
   \   000092   12....       LCALL     ?DEALLOC_XSTACK8
   \   000095   7406         MOV       A,#0x6
   \   000097   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009A   7F08         MOV       R7,#0x8
   \   00009C   02....       LJMP      ?BANKED_LEAVE_XDATA
    230          }
    231          
    232          /*********************************************************************
    233           * @fn      bdbTL_Send_DeviceInfoReq
    234           *
    235           * @brief   Call to send out a Device Information Request command
    236           *
    237           * @param   srcEP - sending application's endpoint
    238           * @param   dstAddr - where you want the message to go
    239           * @param   pReq - request parameters
    240           * @param   seqNum - sequence number
    241           *
    242           * @return  ZStatus_t
    243           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    244          ZStatus_t bdbTL_Send_DeviceInfoReq( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_DeviceInfoReq:
    245                                              bdbTLDeviceInfoReq_t *pReq, uint8 seqNum )
    246          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V1,R1
   \   00000C   8A..         MOV       ?V2,R2
   \   00000E   8B..         MOV       ?V3,R3
   \   000010   EC           MOV       A,R4
   \   000011   FE           MOV       R6,A
   \   000012   ED           MOV       A,R5
   \   000013   FF           MOV       R7,A
   \   000014   7415         MOV       A,#0x15
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V0,A
    247            uint8 buf[TOUCHLINK_CMDLEN_DEVICE_INFO_REQ];
    248          
    249            VOID zcl_buffer_uint32( buf, pReq->transID );
   \   00001C                ; Setup parameters for call to function osal_buffer_uint32
   \   00001C   8E82         MOV       DPL,R6
   \   00001E   8F83         MOV       DPH,R7
   \   000020   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000023   7404         MOV       A,#0x4
   \   000025   12....       LCALL     ?XSTACK_DISP101_8
   \   000028   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00002B   7404         MOV       A,#0x4
   \   00002D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000030   8A..         MOV       ?V6,R2
   \   000032   8B..         MOV       ?V7,R3
   \   000034   85....       MOV       ?V4,?V6
   \   000037   85....       MOV       ?V5,?V7
    250          
    251            buf[4] = pReq->startIndex;
   \   00003A   8E82         MOV       DPL,R6
   \   00003C   8F83         MOV       DPH,R7
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   C0E0         PUSH      A
   \   000045   7404         MOV       A,#0x4
   \   000047   12....       LCALL     ?XSTACK_DISP0_8
   \   00004A   D0E0         POP       A
   \   00004C   F0           MOVX      @DPTR,A
    252          
    253            return bdbTL_SendInterPANCommand( srcEP, dstAddr, COMMAND_TOUCHLINK_DEVICE_INFO_REQ,
    254                                              ZCL_FRAME_CLIENT_SERVER_DIR, seqNum, TOUCHLINK_CMDLEN_DEVICE_INFO_REQ, buf );
   \   00004D                ; Setup parameters for call to function bdbTL_SendInterPANCommand
   \   00004D   A8..         MOV       R0,?XSP + 0
   \   00004F   A9..         MOV       R1,?XSP + 1
   \   000051   88..         MOV       ?V6,R0
   \   000053   89..         MOV       ?V7,R1
   \   000055   78..         MOV       R0,#?V6
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005A   75..05       MOV       ?V6,#0x5
   \   00005D   75..00       MOV       ?V7,#0x0
   \   000060   78..         MOV       R0,#?V6
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000065   E5..         MOV       A,?V0
   \   000067   F5..         MOV       ?V6,A
   \   000069   78..         MOV       R0,#?V6
   \   00006B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006E   7D00         MOV       R5,#0x0
   \   000070   7C02         MOV       R4,#0x2
   \   000072   AA..         MOV       R2,?V2
   \   000074   AB..         MOV       R3,?V3
   \   000076   A9..         MOV       R1,?V1
   \   000078   12....       LCALL     `??bdbTL_SendInterPANCommand::?relay`; Banked call to: bdbTL_SendInterPANCommand
   \   00007B   7405         MOV       A,#0x5
   \   00007D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000080   7405         MOV       A,#0x5
   \   000082   12....       LCALL     ?DEALLOC_XSTACK8
   \   000085   7F08         MOV       R7,#0x8
   \   000087   02....       LJMP      ?BANKED_LEAVE_XDATA
    255          }
    256          
    257          /*********************************************************************
    258           * @fn      bdbTL_Send_IndentifyReq
    259           *
    260           * @brief   Call to send out a Identify Request command
    261           *
    262           * @param   srcEP - sending application's endpoint
    263           * @param   dstAddr - where you want the message to go
    264           * @param   pReq - request parameters
    265           * @param   seqNum - sequence number
    266           *
    267           * @return  ZStatus_t
    268           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    269          ZStatus_t bdbTL_Send_IndentifyReq( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_IndentifyReq:
    270                                             bdbTLIdentifyReq_t *pReq, uint8 seqNum )
    271          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V1,R1
   \   00000C   8A..         MOV       ?V2,R2
   \   00000E   8B..         MOV       ?V3,R3
   \   000010   EC           MOV       A,R4
   \   000011   FE           MOV       R6,A
   \   000012   ED           MOV       A,R5
   \   000013   FF           MOV       R7,A
   \   000014   7416         MOV       A,#0x16
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V0,A
    272            uint8 buf[TOUCHLINK_CMDLEN_IDENTIFY_REQ];
    273          
    274            VOID zcl_buffer_uint32( buf, pReq->transID );
   \   00001C                ; Setup parameters for call to function osal_buffer_uint32
   \   00001C   8E82         MOV       DPL,R6
   \   00001E   8F83         MOV       DPH,R7
   \   000020   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000023   7404         MOV       A,#0x4
   \   000025   12....       LCALL     ?XSTACK_DISP101_8
   \   000028   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00002B   7404         MOV       A,#0x4
   \   00002D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000030   8A..         MOV       ?V6,R2
   \   000032   8B..         MOV       ?V7,R3
   \   000034   85....       MOV       ?V4,?V6
   \   000037   85....       MOV       ?V5,?V7
    275          
    276            buf[4] = LO_UINT16( pReq->IdDuration );
   \   00003A   8E82         MOV       DPL,R6
   \   00003C   8F83         MOV       DPH,R7
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F8           MOV       R0,A
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F9           MOV       R1,A
   \   000047   E8           MOV       A,R0
   \   000048   C0E0         PUSH      A
   \   00004A   7404         MOV       A,#0x4
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   D0E0         POP       A
   \   000051   F0           MOVX      @DPTR,A
    277            buf[5] = HI_UINT16( pReq->IdDuration );
   \   000052   8E82         MOV       DPL,R6
   \   000054   8F83         MOV       DPH,R7
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   F8           MOV       R0,A
   \   00005C   A3           INC       DPTR
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   F9           MOV       R1,A
   \   00005F   E4           CLR       A
   \   000060   C9           XCH       A,R1
   \   000061   F8           MOV       R0,A
   \   000062   E8           MOV       A,R0
   \   000063   C0E0         PUSH      A
   \   000065   7405         MOV       A,#0x5
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   D0E0         POP       A
   \   00006C   F0           MOVX      @DPTR,A
    278          
    279            return bdbTL_SendInterPANCommand( srcEP, dstAddr, COMMAND_TOUCHLINK_IDENTIFY_REQ,
    280                                              ZCL_FRAME_CLIENT_SERVER_DIR, seqNum, TOUCHLINK_CMDLEN_IDENTIFY_REQ, buf );
   \   00006D                ; Setup parameters for call to function bdbTL_SendInterPANCommand
   \   00006D   A8..         MOV       R0,?XSP + 0
   \   00006F   A9..         MOV       R1,?XSP + 1
   \   000071   88..         MOV       ?V6,R0
   \   000073   89..         MOV       ?V7,R1
   \   000075   78..         MOV       R0,#?V6
   \   000077   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007A   75..06       MOV       ?V6,#0x6
   \   00007D   75..00       MOV       ?V7,#0x0
   \   000080   78..         MOV       R0,#?V6
   \   000082   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000085   E5..         MOV       A,?V0
   \   000087   F5..         MOV       ?V6,A
   \   000089   78..         MOV       R0,#?V6
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008E   7D00         MOV       R5,#0x0
   \   000090   7C06         MOV       R4,#0x6
   \   000092   AA..         MOV       R2,?V2
   \   000094   AB..         MOV       R3,?V3
   \   000096   A9..         MOV       R1,?V1
   \   000098   12....       LCALL     `??bdbTL_SendInterPANCommand::?relay`; Banked call to: bdbTL_SendInterPANCommand
   \   00009B   7405         MOV       A,#0x5
   \   00009D   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A0   7406         MOV       A,#0x6
   \   0000A2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A5   7F08         MOV       R7,#0x8
   \   0000A7   02....       LJMP      ?BANKED_LEAVE_XDATA
    281          }
    282          
    283          /*********************************************************************
    284           * @fn      bdbTL_Send_ResetToFNReq
    285           *
    286           * @brief   Call to send out a Reset to Factory New Request command
    287           *
    288           * @param   srcEP - sending application's endpoint
    289           * @param   dstAddr - where you want the message to go
    290           * @param   pReq - request parameters
    291           * @param   seqNum - sequence number
    292           *
    293           * @return  ZStatus_t
    294           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    295          ZStatus_t bdbTL_Send_ResetToFNReq( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_ResetToFNReq:
    296                                             bdbTLResetToFNReq_t *pReq, uint8 seqNum )
    297          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   \   000010   8C..         MOV       ?V0,R4
   \   000012   8D..         MOV       ?V1,R5
   \   000014   7414         MOV       A,#0x14
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V3,A
    298            uint8 buf[TOUCHLINK_CMDLEN_RESET_TO_FN_REQ];
    299          
    300            VOID zcl_buffer_uint32( buf, pReq->transID );
   \   00001C                ; Setup parameters for call to function osal_buffer_uint32
   \   00001C   85..82       MOV       DPL,?V0
   \   00001F   85..83       MOV       DPH,?V1
   \   000022   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000025   7404         MOV       A,#0x4
   \   000027   12....       LCALL     ?XSTACK_DISP101_8
   \   00002A   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00002D   7404         MOV       A,#0x4
   \   00002F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000032   8A..         MOV       ?V6,R2
   \   000034   8B..         MOV       ?V7,R3
   \   000036   85....       MOV       ?V4,?V6
   \   000039   85....       MOV       ?V5,?V7
    301          
    302            return bdbTL_SendInterPANCommand( srcEP, dstAddr, COMMAND_TOUCHLINK_RESET_TO_FN_REQ,
    303                                              ZCL_FRAME_CLIENT_SERVER_DIR, seqNum, TOUCHLINK_CMDLEN_RESET_TO_FN_REQ, buf );
   \   00003C                ; Setup parameters for call to function bdbTL_SendInterPANCommand
   \   00003C   A8..         MOV       R0,?XSP + 0
   \   00003E   A9..         MOV       R1,?XSP + 1
   \   000040   88..         MOV       ?V6,R0
   \   000042   89..         MOV       ?V7,R1
   \   000044   78..         MOV       R0,#?V6
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000049   75..04       MOV       ?V6,#0x4
   \   00004C   75..00       MOV       ?V7,#0x0
   \   00004F   78..         MOV       R0,#?V6
   \   000051   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000054   E5..         MOV       A,?V3
   \   000056   F5..         MOV       ?V6,A
   \   000058   78..         MOV       R0,#?V6
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005D   7D00         MOV       R5,#0x0
   \   00005F   7C07         MOV       R4,#0x7
   \   000061   EE           MOV       A,R6
   \   000062   FA           MOV       R2,A
   \   000063   EF           MOV       A,R7
   \   000064   FB           MOV       R3,A
   \   000065   A9..         MOV       R1,?V2
   \   000067   12....       LCALL     `??bdbTL_SendInterPANCommand::?relay`; Banked call to: bdbTL_SendInterPANCommand
   \   00006A   7405         MOV       A,#0x5
   \   00006C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006F   7404         MOV       A,#0x4
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
   \   000074   7F08         MOV       R7,#0x8
   \   000076   02....       LJMP      ?BANKED_LEAVE_XDATA
    304          }
    305          
    306          /*********************************************************************
    307           * @fn      bdbTL_Send_NwkStartReq
    308           *
    309           * @brief   Call to send out a Network Start Request command
    310           *
    311           * @param   srcEP - sending application's endpoint
    312           * @param   dstAddr - where you want the message to go
    313           * @param   pRsp - response parameters
    314           * @param   seqNum - sequence number
    315           *
    316           * @return  ZStatus_t
    317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    318          ZStatus_t bdbTL_Send_NwkStartReq( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_NwkStartReq:
    319                                            bdbTLNwkStartReq_t *pRsp, uint8 seqNum )
    320          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V10,R1
   \   000007   8A..         MOV       ?V8,R2
   \   000009   8B..         MOV       ?V9,R3
   \   00000B   8C..         MOV       ?V0,R4
   \   00000D   8D..         MOV       ?V1,R5
   \   00000F   7414         MOV       A,#0x14
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V11,A
    321            uint8 *buf;
    322            uint8 *pBuf;
    323            ZStatus_t status;
    324          
    325            buf = zcl_mem_alloc( TOUCHLINK_CMDLEN_NWK_START_REQ );
   \   000017                ; Setup parameters for call to function osal_mem_alloc
   \   000017   7A38         MOV       R2,#0x38
   \   000019   7B00         MOV       R3,#0x0
   \   00001B   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001E   8A..         MOV       ?V4,R2
   \   000020   8B..         MOV       ?V5,R3
   \   000022   85....       MOV       ?V2,?V4
   \   000025   85....       MOV       ?V3,?V5
    326            if ( buf != NULL )
   \   000028   E5..         MOV       A,?V2
   \   00002A   45..         ORL       A,?V3
   \   00002C   7003         JNZ       $+5
   \   00002E   02....       LJMP      ??bdbTL_Send_NwkStartReq_0 & 0xFFFF
    327            {
    328              pBuf = buf;
   \   000031   AE..         MOV       R6,?V2
   \   000033   AF..         MOV       R7,?V3
    329          
    330              pBuf = zcl_buffer_uint32( pBuf, pRsp->transID );
   \   000035                ; Setup parameters for call to function osal_buffer_uint32
   \   000035   85..82       MOV       DPL,?V0
   \   000038   85..83       MOV       DPH,?V1
   \   00003B   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00003E   EE           MOV       A,R6
   \   00003F   FA           MOV       R2,A
   \   000040   EF           MOV       A,R7
   \   000041   FB           MOV       R3,A
   \   000042   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000045   7404         MOV       A,#0x4
   \   000047   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004A   8A..         MOV       ?V4,R2
   \   00004C   8B..         MOV       ?V5,R3
   \   00004E   AE..         MOV       R6,?V4
   \   000050   AF..         MOV       R7,?V5
    331              pBuf = zcl_cpyExtAddr( pBuf, pRsp->nwkParams.extendedPANID );
   \   000052                ; Setup parameters for call to function sAddrExtCpy
   \   000052   E5..         MOV       A,?V0
   \   000054   2404         ADD       A,#0x4
   \   000056   FC           MOV       R4,A
   \   000057   E4           CLR       A
   \   000058   35..         ADDC      A,?V1
   \   00005A   FD           MOV       R5,A
   \   00005B   EE           MOV       A,R6
   \   00005C   FA           MOV       R2,A
   \   00005D   EF           MOV       A,R7
   \   00005E   FB           MOV       R3,A
   \   00005F   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000062   8A..         MOV       ?V4,R2
   \   000064   8B..         MOV       ?V5,R3
   \   000066   AE..         MOV       R6,?V4
   \   000068   AF..         MOV       R7,?V5
    332          
    333              *pBuf++ = pRsp->nwkParams.keyIndex;
   \   00006A   E5..         MOV       A,?V0
   \   00006C   240C         ADD       A,#0xc
   \   00006E   F582         MOV       DPL,A
   \   000070   E4           CLR       A
   \   000071   35..         ADDC      A,?V1
   \   000073   F583         MOV       DPH,A
   \   000075   E0           MOVX      A,@DPTR
   \   000076   C0E0         PUSH      A
   \   000078   8E82         MOV       DPL,R6
   \   00007A   8F83         MOV       DPH,R7
   \   00007C   D0E0         POP       A
   \   00007E   F0           MOVX      @DPTR,A
   \   00007F   8E82         MOV       DPL,R6
   \   000081   8F83         MOV       DPH,R7
   \   000083   A3           INC       DPTR
   \   000084   AE82         MOV       R6,DPL
   \   000086   AF83         MOV       R7,DPH
    334          
    335              pBuf = zcl_memcpy( pBuf, pRsp->nwkParams.nwkKey, SEC_KEY_LEN );
   \   000088                ; Setup parameters for call to function osal_memcpy
   \   000088   E5..         MOV       A,?V0
   \   00008A   240D         ADD       A,#0xd
   \   00008C   F5..         MOV       ?V4,A
   \   00008E   E4           CLR       A
   \   00008F   35..         ADDC      A,?V1
   \   000091   F5..         MOV       ?V5,A
   \   000093   75..00       MOV       ?V6,#0x0
   \   000096   78..         MOV       R0,#?V4
   \   000098   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00009B   7C10         MOV       R4,#0x10
   \   00009D   7D00         MOV       R5,#0x0
   \   00009F   EE           MOV       A,R6
   \   0000A0   FA           MOV       R2,A
   \   0000A1   EF           MOV       A,R7
   \   0000A2   FB           MOV       R3,A
   \   0000A3   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000A6   7403         MOV       A,#0x3
   \   0000A8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AB   8A..         MOV       ?V4,R2
   \   0000AD   8B..         MOV       ?V5,R3
   \   0000AF   AE..         MOV       R6,?V4
   \   0000B1   AF..         MOV       R7,?V5
    336          
    337              *pBuf++ = pRsp->nwkParams.logicalChannel;
   \   0000B3   E5..         MOV       A,?V0
   \   0000B5   241D         ADD       A,#0x1d
   \   0000B7   F582         MOV       DPL,A
   \   0000B9   E4           CLR       A
   \   0000BA   35..         ADDC      A,?V1
   \   0000BC   F583         MOV       DPH,A
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   C0E0         PUSH      A
   \   0000C1   8E82         MOV       DPL,R6
   \   0000C3   8F83         MOV       DPH,R7
   \   0000C5   D0E0         POP       A
   \   0000C7   F0           MOVX      @DPTR,A
   \   0000C8   8E82         MOV       DPL,R6
   \   0000CA   8F83         MOV       DPH,R7
   \   0000CC   A3           INC       DPTR
   \   0000CD   AE82         MOV       R6,DPL
   \   0000CF   AF83         MOV       R7,DPH
    338          
    339              *pBuf++ = LO_UINT16( pRsp->nwkParams.panId );
   \   0000D1   E5..         MOV       A,?V0
   \   0000D3   241E         ADD       A,#0x1e
   \   0000D5   F582         MOV       DPL,A
   \   0000D7   E4           CLR       A
   \   0000D8   35..         ADDC      A,?V1
   \   0000DA   F583         MOV       DPH,A
   \   0000DC   E0           MOVX      A,@DPTR
   \   0000DD   F8           MOV       R0,A
   \   0000DE   A3           INC       DPTR
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   F9           MOV       R1,A
   \   0000E1   E8           MOV       A,R0
   \   0000E2   C0E0         PUSH      A
   \   0000E4   8E82         MOV       DPL,R6
   \   0000E6   8F83         MOV       DPH,R7
   \   0000E8   D0E0         POP       A
   \   0000EA   F0           MOVX      @DPTR,A
   \   0000EB   8E82         MOV       DPL,R6
   \   0000ED   8F83         MOV       DPH,R7
   \   0000EF   A3           INC       DPTR
   \   0000F0   AE82         MOV       R6,DPL
   \   0000F2   AF83         MOV       R7,DPH
    340              *pBuf++ = HI_UINT16( pRsp->nwkParams.panId );
   \   0000F4   E5..         MOV       A,?V0
   \   0000F6   241E         ADD       A,#0x1e
   \   0000F8   F582         MOV       DPL,A
   \   0000FA   E4           CLR       A
   \   0000FB   35..         ADDC      A,?V1
   \   0000FD   F583         MOV       DPH,A
   \   0000FF   E0           MOVX      A,@DPTR
   \   000100   F8           MOV       R0,A
   \   000101   A3           INC       DPTR
   \   000102   E0           MOVX      A,@DPTR
   \   000103   F9           MOV       R1,A
   \   000104   E4           CLR       A
   \   000105   C9           XCH       A,R1
   \   000106   F8           MOV       R0,A
   \   000107   E8           MOV       A,R0
   \   000108   C0E0         PUSH      A
   \   00010A   8E82         MOV       DPL,R6
   \   00010C   8F83         MOV       DPH,R7
   \   00010E   D0E0         POP       A
   \   000110   F0           MOVX      @DPTR,A
   \   000111   8E82         MOV       DPL,R6
   \   000113   8F83         MOV       DPH,R7
   \   000115   A3           INC       DPTR
   \   000116   AE82         MOV       R6,DPL
   \   000118   AF83         MOV       R7,DPH
    341          
    342              *pBuf++ = LO_UINT16( pRsp->nwkParams.nwkAddr );
   \   00011A   E5..         MOV       A,?V0
   \   00011C   2420         ADD       A,#0x20
   \   00011E   F582         MOV       DPL,A
   \   000120   E4           CLR       A
   \   000121   35..         ADDC      A,?V1
   \   000123   F583         MOV       DPH,A
   \   000125   E0           MOVX      A,@DPTR
   \   000126   F8           MOV       R0,A
   \   000127   A3           INC       DPTR
   \   000128   E0           MOVX      A,@DPTR
   \   000129   F9           MOV       R1,A
   \   00012A   E8           MOV       A,R0
   \   00012B   C0E0         PUSH      A
   \   00012D   8E82         MOV       DPL,R6
   \   00012F   8F83         MOV       DPH,R7
   \   000131   D0E0         POP       A
   \   000133   F0           MOVX      @DPTR,A
   \   000134   8E82         MOV       DPL,R6
   \   000136   8F83         MOV       DPH,R7
   \   000138   A3           INC       DPTR
   \   000139   AE82         MOV       R6,DPL
   \   00013B   AF83         MOV       R7,DPH
    343              *pBuf++ = HI_UINT16( pRsp->nwkParams.nwkAddr );
   \   00013D   E5..         MOV       A,?V0
   \   00013F   2420         ADD       A,#0x20
   \   000141   F582         MOV       DPL,A
   \   000143   E4           CLR       A
   \   000144   35..         ADDC      A,?V1
   \   000146   F583         MOV       DPH,A
   \   000148   E0           MOVX      A,@DPTR
   \   000149   F8           MOV       R0,A
   \   00014A   A3           INC       DPTR
   \   00014B   E0           MOVX      A,@DPTR
   \   00014C   F9           MOV       R1,A
   \   00014D   E4           CLR       A
   \   00014E   C9           XCH       A,R1
   \   00014F   F8           MOV       R0,A
   \   000150   E8           MOV       A,R0
   \   000151   C0E0         PUSH      A
   \   000153   8E82         MOV       DPL,R6
   \   000155   8F83         MOV       DPH,R7
   \   000157   D0E0         POP       A
   \   000159   F0           MOVX      @DPTR,A
   \   00015A   8E82         MOV       DPL,R6
   \   00015C   8F83         MOV       DPH,R7
   \   00015E   A3           INC       DPTR
   \   00015F   AE82         MOV       R6,DPL
   \   000161   AF83         MOV       R7,DPH
    344          
    345              *pBuf++ = LO_UINT16( pRsp->nwkParams.grpIDsBegin );
   \   000163   E5..         MOV       A,?V0
   \   000165   2422         ADD       A,#0x22
   \   000167   F582         MOV       DPL,A
   \   000169   E4           CLR       A
   \   00016A   35..         ADDC      A,?V1
   \   00016C   F583         MOV       DPH,A
   \   00016E   E0           MOVX      A,@DPTR
   \   00016F   F8           MOV       R0,A
   \   000170   A3           INC       DPTR
   \   000171   E0           MOVX      A,@DPTR
   \   000172   F9           MOV       R1,A
   \   000173   E8           MOV       A,R0
   \   000174   C0E0         PUSH      A
   \   000176   8E82         MOV       DPL,R6
   \   000178   8F83         MOV       DPH,R7
   \   00017A   D0E0         POP       A
   \   00017C   F0           MOVX      @DPTR,A
   \   00017D   8E82         MOV       DPL,R6
   \   00017F   8F83         MOV       DPH,R7
   \   000181   A3           INC       DPTR
   \   000182   AE82         MOV       R6,DPL
   \   000184   AF83         MOV       R7,DPH
    346              *pBuf++ = HI_UINT16( pRsp->nwkParams.grpIDsBegin );
   \   000186   E5..         MOV       A,?V0
   \   000188   2422         ADD       A,#0x22
   \   00018A   F582         MOV       DPL,A
   \   00018C   E4           CLR       A
   \   00018D   35..         ADDC      A,?V1
   \   00018F   F583         MOV       DPH,A
   \   000191   E0           MOVX      A,@DPTR
   \   000192   F8           MOV       R0,A
   \   000193   A3           INC       DPTR
   \   000194   E0           MOVX      A,@DPTR
   \   000195   F9           MOV       R1,A
   \   000196   E4           CLR       A
   \   000197   C9           XCH       A,R1
   \   000198   F8           MOV       R0,A
   \   000199   E8           MOV       A,R0
   \   00019A   C0E0         PUSH      A
   \   00019C   8E82         MOV       DPL,R6
   \   00019E   8F83         MOV       DPH,R7
   \   0001A0   D0E0         POP       A
   \   0001A2   F0           MOVX      @DPTR,A
   \   0001A3   8E82         MOV       DPL,R6
   \   0001A5   8F83         MOV       DPH,R7
   \   0001A7   A3           INC       DPTR
   \   0001A8   AE82         MOV       R6,DPL
   \   0001AA   AF83         MOV       R7,DPH
    347          
    348              *pBuf++ = LO_UINT16( pRsp->nwkParams.grpIDsEnd );
   \   0001AC   E5..         MOV       A,?V0
   \   0001AE   2424         ADD       A,#0x24
   \   0001B0   F582         MOV       DPL,A
   \   0001B2   E4           CLR       A
   \   0001B3   35..         ADDC      A,?V1
   \   0001B5   F583         MOV       DPH,A
   \   0001B7   E0           MOVX      A,@DPTR
   \   0001B8   F8           MOV       R0,A
   \   0001B9   A3           INC       DPTR
   \   0001BA   E0           MOVX      A,@DPTR
   \   0001BB   F9           MOV       R1,A
   \   0001BC   E8           MOV       A,R0
   \   0001BD   C0E0         PUSH      A
   \   0001BF   8E82         MOV       DPL,R6
   \   0001C1   8F83         MOV       DPH,R7
   \   0001C3   D0E0         POP       A
   \   0001C5   F0           MOVX      @DPTR,A
   \   0001C6   8E82         MOV       DPL,R6
   \   0001C8   8F83         MOV       DPH,R7
   \   0001CA   A3           INC       DPTR
   \   0001CB   AE82         MOV       R6,DPL
   \   0001CD   AF83         MOV       R7,DPH
    349              *pBuf++ = HI_UINT16( pRsp->nwkParams.grpIDsEnd );
   \   0001CF   E5..         MOV       A,?V0
   \   0001D1   2424         ADD       A,#0x24
   \   0001D3   F582         MOV       DPL,A
   \   0001D5   E4           CLR       A
   \   0001D6   35..         ADDC      A,?V1
   \   0001D8   F583         MOV       DPH,A
   \   0001DA   E0           MOVX      A,@DPTR
   \   0001DB   F8           MOV       R0,A
   \   0001DC   A3           INC       DPTR
   \   0001DD   E0           MOVX      A,@DPTR
   \   0001DE   F9           MOV       R1,A
   \   0001DF   E4           CLR       A
   \   0001E0   C9           XCH       A,R1
   \   0001E1   F8           MOV       R0,A
   \   0001E2   E8           MOV       A,R0
   \   0001E3   C0E0         PUSH      A
   \   0001E5   8E82         MOV       DPL,R6
   \   0001E7   8F83         MOV       DPH,R7
   \   0001E9   D0E0         POP       A
   \   0001EB   F0           MOVX      @DPTR,A
   \   0001EC   8E82         MOV       DPL,R6
   \   0001EE   8F83         MOV       DPH,R7
   \   0001F0   A3           INC       DPTR
   \   0001F1   AE82         MOV       R6,DPL
   \   0001F3   AF83         MOV       R7,DPH
    350          
    351              *pBuf++ = LO_UINT16( pRsp->nwkParams.freeNwkAddrBegin );
   \   0001F5   E5..         MOV       A,?V0
   \   0001F7   2426         ADD       A,#0x26
   \   0001F9   F582         MOV       DPL,A
   \   0001FB   E4           CLR       A
   \   0001FC   35..         ADDC      A,?V1
   \   0001FE   F583         MOV       DPH,A
   \   000200   E0           MOVX      A,@DPTR
   \   000201   F8           MOV       R0,A
   \   000202   A3           INC       DPTR
   \   000203   E0           MOVX      A,@DPTR
   \   000204   F9           MOV       R1,A
   \   000205   E8           MOV       A,R0
   \   000206   C0E0         PUSH      A
   \   000208   8E82         MOV       DPL,R6
   \   00020A   8F83         MOV       DPH,R7
   \   00020C   D0E0         POP       A
   \   00020E   F0           MOVX      @DPTR,A
   \   00020F   8E82         MOV       DPL,R6
   \   000211   8F83         MOV       DPH,R7
   \   000213   A3           INC       DPTR
   \   000214   AE82         MOV       R6,DPL
   \   000216   AF83         MOV       R7,DPH
    352              *pBuf++ = HI_UINT16( pRsp->nwkParams.freeNwkAddrBegin );
   \   000218   E5..         MOV       A,?V0
   \   00021A   2426         ADD       A,#0x26
   \   00021C   F582         MOV       DPL,A
   \   00021E   E4           CLR       A
   \   00021F   35..         ADDC      A,?V1
   \   000221   F583         MOV       DPH,A
   \   000223   E0           MOVX      A,@DPTR
   \   000224   F8           MOV       R0,A
   \   000225   A3           INC       DPTR
   \   000226   E0           MOVX      A,@DPTR
   \   000227   F9           MOV       R1,A
   \   000228   E4           CLR       A
   \   000229   C9           XCH       A,R1
   \   00022A   F8           MOV       R0,A
   \   00022B   E8           MOV       A,R0
   \   00022C   C0E0         PUSH      A
   \   00022E   8E82         MOV       DPL,R6
   \   000230   8F83         MOV       DPH,R7
   \   000232   D0E0         POP       A
   \   000234   F0           MOVX      @DPTR,A
   \   000235   8E82         MOV       DPL,R6
   \   000237   8F83         MOV       DPH,R7
   \   000239   A3           INC       DPTR
   \   00023A   AE82         MOV       R6,DPL
   \   00023C   AF83         MOV       R7,DPH
    353          
    354              *pBuf++ = LO_UINT16( pRsp->nwkParams.freeNwkAddrEnd );
   \   00023E   E5..         MOV       A,?V0
   \   000240   2428         ADD       A,#0x28
   \   000242   F582         MOV       DPL,A
   \   000244   E4           CLR       A
   \   000245   35..         ADDC      A,?V1
   \   000247   F583         MOV       DPH,A
   \   000249   E0           MOVX      A,@DPTR
   \   00024A   F8           MOV       R0,A
   \   00024B   A3           INC       DPTR
   \   00024C   E0           MOVX      A,@DPTR
   \   00024D   F9           MOV       R1,A
   \   00024E   E8           MOV       A,R0
   \   00024F   C0E0         PUSH      A
   \   000251   8E82         MOV       DPL,R6
   \   000253   8F83         MOV       DPH,R7
   \   000255   D0E0         POP       A
   \   000257   F0           MOVX      @DPTR,A
   \   000258   8E82         MOV       DPL,R6
   \   00025A   8F83         MOV       DPH,R7
   \   00025C   A3           INC       DPTR
   \   00025D   AE82         MOV       R6,DPL
   \   00025F   AF83         MOV       R7,DPH
    355              *pBuf++ = HI_UINT16( pRsp->nwkParams.freeNwkAddrEnd );
   \   000261   E5..         MOV       A,?V0
   \   000263   2428         ADD       A,#0x28
   \   000265   F582         MOV       DPL,A
   \   000267   E4           CLR       A
   \   000268   35..         ADDC      A,?V1
   \   00026A   F583         MOV       DPH,A
   \   00026C   E0           MOVX      A,@DPTR
   \   00026D   F8           MOV       R0,A
   \   00026E   A3           INC       DPTR
   \   00026F   E0           MOVX      A,@DPTR
   \   000270   F9           MOV       R1,A
   \   000271   E4           CLR       A
   \   000272   C9           XCH       A,R1
   \   000273   F8           MOV       R0,A
   \   000274   E8           MOV       A,R0
   \   000275   C0E0         PUSH      A
   \   000277   8E82         MOV       DPL,R6
   \   000279   8F83         MOV       DPH,R7
   \   00027B   D0E0         POP       A
   \   00027D   F0           MOVX      @DPTR,A
   \   00027E   8E82         MOV       DPL,R6
   \   000280   8F83         MOV       DPH,R7
   \   000282   A3           INC       DPTR
   \   000283   AE82         MOV       R6,DPL
   \   000285   AF83         MOV       R7,DPH
    356          
    357              *pBuf++ = LO_UINT16( pRsp->nwkParams.freeGrpIDBegin );
   \   000287   E5..         MOV       A,?V0
   \   000289   242A         ADD       A,#0x2a
   \   00028B   F582         MOV       DPL,A
   \   00028D   E4           CLR       A
   \   00028E   35..         ADDC      A,?V1
   \   000290   F583         MOV       DPH,A
   \   000292   E0           MOVX      A,@DPTR
   \   000293   F8           MOV       R0,A
   \   000294   A3           INC       DPTR
   \   000295   E0           MOVX      A,@DPTR
   \   000296   F9           MOV       R1,A
   \   000297   E8           MOV       A,R0
   \   000298   C0E0         PUSH      A
   \   00029A   8E82         MOV       DPL,R6
   \   00029C   8F83         MOV       DPH,R7
   \   00029E   D0E0         POP       A
   \   0002A0   F0           MOVX      @DPTR,A
   \   0002A1   8E82         MOV       DPL,R6
   \   0002A3   8F83         MOV       DPH,R7
   \   0002A5   A3           INC       DPTR
   \   0002A6   AE82         MOV       R6,DPL
   \   0002A8   AF83         MOV       R7,DPH
    358              *pBuf++ = HI_UINT16( pRsp->nwkParams.freeGrpIDBegin );
   \   0002AA   E5..         MOV       A,?V0
   \   0002AC   242A         ADD       A,#0x2a
   \   0002AE   F582         MOV       DPL,A
   \   0002B0   E4           CLR       A
   \   0002B1   35..         ADDC      A,?V1
   \   0002B3   F583         MOV       DPH,A
   \   0002B5   E0           MOVX      A,@DPTR
   \   0002B6   F8           MOV       R0,A
   \   0002B7   A3           INC       DPTR
   \   0002B8   E0           MOVX      A,@DPTR
   \   0002B9   F9           MOV       R1,A
   \   0002BA   E4           CLR       A
   \   0002BB   C9           XCH       A,R1
   \   0002BC   F8           MOV       R0,A
   \   0002BD   E8           MOV       A,R0
   \   0002BE   C0E0         PUSH      A
   \   0002C0   8E82         MOV       DPL,R6
   \   0002C2   8F83         MOV       DPH,R7
   \   0002C4   D0E0         POP       A
   \   0002C6   F0           MOVX      @DPTR,A
   \   0002C7   8E82         MOV       DPL,R6
   \   0002C9   8F83         MOV       DPH,R7
   \   0002CB   A3           INC       DPTR
   \   0002CC   AE82         MOV       R6,DPL
   \   0002CE   AF83         MOV       R7,DPH
    359          
    360              *pBuf++ = LO_UINT16( pRsp->nwkParams.freeGrpIDEnd );
   \   0002D0   E5..         MOV       A,?V0
   \   0002D2   242C         ADD       A,#0x2c
   \   0002D4   F582         MOV       DPL,A
   \   0002D6   E4           CLR       A
   \   0002D7   35..         ADDC      A,?V1
   \   0002D9   F583         MOV       DPH,A
   \   0002DB   E0           MOVX      A,@DPTR
   \   0002DC   F8           MOV       R0,A
   \   0002DD   A3           INC       DPTR
   \   0002DE   E0           MOVX      A,@DPTR
   \   0002DF   F9           MOV       R1,A
   \   0002E0   E8           MOV       A,R0
   \   0002E1   C0E0         PUSH      A
   \   0002E3   8E82         MOV       DPL,R6
   \   0002E5   8F83         MOV       DPH,R7
   \   0002E7   D0E0         POP       A
   \   0002E9   F0           MOVX      @DPTR,A
   \   0002EA   8E82         MOV       DPL,R6
   \   0002EC   8F83         MOV       DPH,R7
   \   0002EE   A3           INC       DPTR
   \   0002EF   AE82         MOV       R6,DPL
   \   0002F1   AF83         MOV       R7,DPH
    361              *pBuf++ = HI_UINT16( pRsp->nwkParams.freeGrpIDEnd );
   \   0002F3   E5..         MOV       A,?V0
   \   0002F5   242C         ADD       A,#0x2c
   \   0002F7   F582         MOV       DPL,A
   \   0002F9   E4           CLR       A
   \   0002FA   35..         ADDC      A,?V1
   \   0002FC   F583         MOV       DPH,A
   \   0002FE   E0           MOVX      A,@DPTR
   \   0002FF   F8           MOV       R0,A
   \   000300   A3           INC       DPTR
   \   000301   E0           MOVX      A,@DPTR
   \   000302   F9           MOV       R1,A
   \   000303   E4           CLR       A
   \   000304   C9           XCH       A,R1
   \   000305   F8           MOV       R0,A
   \   000306   E8           MOV       A,R0
   \   000307   C0E0         PUSH      A
   \   000309   8E82         MOV       DPL,R6
   \   00030B   8F83         MOV       DPH,R7
   \   00030D   D0E0         POP       A
   \   00030F   F0           MOVX      @DPTR,A
   \   000310   8E82         MOV       DPL,R6
   \   000312   8F83         MOV       DPH,R7
   \   000314   A3           INC       DPTR
   \   000315   AE82         MOV       R6,DPL
   \   000317   AF83         MOV       R7,DPH
    362          
    363              pBuf = zcl_cpyExtAddr( pBuf, pRsp->initiatorIeeeAddr );
   \   000319                ; Setup parameters for call to function sAddrExtCpy
   \   000319   E5..         MOV       A,?V0
   \   00031B   242E         ADD       A,#0x2e
   \   00031D   FC           MOV       R4,A
   \   00031E   E4           CLR       A
   \   00031F   35..         ADDC      A,?V1
   \   000321   FD           MOV       R5,A
   \   000322   EE           MOV       A,R6
   \   000323   FA           MOV       R2,A
   \   000324   EF           MOV       A,R7
   \   000325   FB           MOV       R3,A
   \   000326   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000329   8A..         MOV       ?V4,R2
   \   00032B   8B..         MOV       ?V5,R3
   \   00032D   AE..         MOV       R6,?V4
   \   00032F   AF..         MOV       R7,?V5
    364          
    365              *pBuf++ = LO_UINT16( pRsp->initiatorNwkAddr );
   \   000331   E5..         MOV       A,?V0
   \   000333   2436         ADD       A,#0x36
   \   000335   F582         MOV       DPL,A
   \   000337   E4           CLR       A
   \   000338   35..         ADDC      A,?V1
   \   00033A   F583         MOV       DPH,A
   \   00033C   E0           MOVX      A,@DPTR
   \   00033D   F8           MOV       R0,A
   \   00033E   A3           INC       DPTR
   \   00033F   E0           MOVX      A,@DPTR
   \   000340   F9           MOV       R1,A
   \   000341   E8           MOV       A,R0
   \   000342   C0E0         PUSH      A
   \   000344   8E82         MOV       DPL,R6
   \   000346   8F83         MOV       DPH,R7
   \   000348   D0E0         POP       A
   \   00034A   F0           MOVX      @DPTR,A
   \   00034B   8E82         MOV       DPL,R6
   \   00034D   8F83         MOV       DPH,R7
   \   00034F   A3           INC       DPTR
   \   000350   AE82         MOV       R6,DPL
   \   000352   AF83         MOV       R7,DPH
    366              *pBuf++ = HI_UINT16( pRsp->initiatorNwkAddr );
   \   000354   E5..         MOV       A,?V0
   \   000356   2436         ADD       A,#0x36
   \   000358   F582         MOV       DPL,A
   \   00035A   E4           CLR       A
   \   00035B   35..         ADDC      A,?V1
   \   00035D   F583         MOV       DPH,A
   \   00035F   E0           MOVX      A,@DPTR
   \   000360   F8           MOV       R0,A
   \   000361   A3           INC       DPTR
   \   000362   E0           MOVX      A,@DPTR
   \   000363   F9           MOV       R1,A
   \   000364   E4           CLR       A
   \   000365   C9           XCH       A,R1
   \   000366   F8           MOV       R0,A
   \   000367   E8           MOV       A,R0
   \   000368   C0E0         PUSH      A
   \   00036A   8E82         MOV       DPL,R6
   \   00036C   8F83         MOV       DPH,R7
   \   00036E   D0E0         POP       A
   \   000370   F0           MOVX      @DPTR,A
   \   000371   8E82         MOV       DPL,R6
   \   000373   8F83         MOV       DPH,R7
   \   000375   A3           INC       DPTR
   \   000376   AE82         MOV       R6,DPL
   \   000378   AF83         MOV       R7,DPH
    367          
    368              status = bdbTL_SendInterPANCommand( srcEP, dstAddr, COMMAND_TOUCHLINK_NWK_START_REQ,
    369                                                  ZCL_FRAME_CLIENT_SERVER_DIR, seqNum, TOUCHLINK_CMDLEN_NWK_START_REQ, buf );
   \   00037A                ; Setup parameters for call to function bdbTL_SendInterPANCommand
   \   00037A   78..         MOV       R0,#?V2
   \   00037C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00037F   75..38       MOV       ?V4,#0x38
   \   000382   75..00       MOV       ?V5,#0x0
   \   000385   78..         MOV       R0,#?V4
   \   000387   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00038A   E5..         MOV       A,?V11
   \   00038C   F5..         MOV       ?V4,A
   \   00038E   78..         MOV       R0,#?V4
   \   000390   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000393   7D00         MOV       R5,#0x0
   \   000395   7C10         MOV       R4,#0x10
   \   000397   AA..         MOV       R2,?V8
   \   000399   AB..         MOV       R3,?V9
   \   00039B   A9..         MOV       R1,?V10
   \   00039D   12....       LCALL     `??bdbTL_SendInterPANCommand::?relay`; Banked call to: bdbTL_SendInterPANCommand
   \   0003A0   7405         MOV       A,#0x5
   \   0003A2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003A5   E9           MOV       A,R1
   \   0003A6   F5..         MOV       ?V7,A
    370              zcl_mem_free( buf );
   \   0003A8                ; Setup parameters for call to function osal_mem_free
   \   0003A8   AA..         MOV       R2,?V2
   \   0003AA   AB..         MOV       R3,?V3
   \   0003AC   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0003AF   8003         SJMP      ??bdbTL_Send_NwkStartReq_1
    371            }
    372            else
    373            {
    374              status = ZMemError;
   \                     ??bdbTL_Send_NwkStartReq_0:
   \   0003B1   75..10       MOV       ?V7,#0x10
    375            }
    376          
    377            return ( status );
   \                     ??bdbTL_Send_NwkStartReq_1:
   \   0003B4   A9..         MOV       R1,?V7
   \   0003B6   7F0C         MOV       R7,#0xc
   \   0003B8   02....       LJMP      ?BANKED_LEAVE_XDATA
    378          }
    379          
    380          /*********************************************************************
    381           * @fn      bdbTL_Send_NwkJoinReq
    382           *
    383           * @brief   Call to send out a Network Join Router/End Device Request command
    384           *
    385           * @param   srcEP - sending application's endpoint
    386           * @param   dstAddr - where you want the message to go
    387           * @param   pRsp - response parameters
    388           * @param   cmd - COMMAND_TOUCHLINK_NWK_JOIN_RTR_REQ or COMMAND_TOUCHLINK_NWK_JOIN_ED_REQ
    389           * @param   seqNum - sequence number
    390           *
    391           * @return  ZStatus_t
    392           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    393          ZStatus_t bdbTL_Send_NwkJoinReq( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_NwkJoinReq:
    394                                           bdbTLNwkJoinReq_t *pRsp, uint8 cmd, uint8 seqNum )
    395          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V9,R1
   \   000007   8A..         MOV       ?V12,R2
   \   000009   8B..         MOV       ?V13,R3
   \   00000B   8C..         MOV       ?V0,R4
   \   00000D   8D..         MOV       ?V1,R5
   \   00000F   7416         MOV       A,#0x16
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V8,A
   \   000017   7417         MOV       A,#0x17
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V10,A
    396            uint8 *buf;
    397            uint8 *pBuf;
    398            ZStatus_t status;
    399          
    400            buf = zcl_mem_alloc( TOUCHLINK_CMDLEN_NWK_JOIN_REQ );
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   7A2F         MOV       R2,#0x2f
   \   000021   7B00         MOV       R3,#0x0
   \   000023   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000026   8A..         MOV       ?V4,R2
   \   000028   8B..         MOV       ?V5,R3
   \   00002A   85....       MOV       ?V2,?V4
   \   00002D   85....       MOV       ?V3,?V5
    401            if ( buf != NULL )
   \   000030   E5..         MOV       A,?V2
   \   000032   45..         ORL       A,?V3
   \   000034   7003         JNZ       $+5
   \   000036   02....       LJMP      ??bdbTL_Send_NwkJoinReq_0 & 0xFFFF
    402            {
    403              pBuf = buf;
   \   000039   AE..         MOV       R6,?V2
   \   00003B   AF..         MOV       R7,?V3
    404          
    405              pBuf = zcl_buffer_uint32( pBuf, pRsp->transID );
   \   00003D                ; Setup parameters for call to function osal_buffer_uint32
   \   00003D   85..82       MOV       DPL,?V0
   \   000040   85..83       MOV       DPH,?V1
   \   000043   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000046   EE           MOV       A,R6
   \   000047   FA           MOV       R2,A
   \   000048   EF           MOV       A,R7
   \   000049   FB           MOV       R3,A
   \   00004A   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00004D   7404         MOV       A,#0x4
   \   00004F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000052   8A..         MOV       ?V4,R2
   \   000054   8B..         MOV       ?V5,R3
   \   000056   AE..         MOV       R6,?V4
   \   000058   AF..         MOV       R7,?V5
    406              pBuf = zcl_cpyExtAddr( pBuf, pRsp->nwkParams.extendedPANID );
   \   00005A                ; Setup parameters for call to function sAddrExtCpy
   \   00005A   E5..         MOV       A,?V0
   \   00005C   2404         ADD       A,#0x4
   \   00005E   FC           MOV       R4,A
   \   00005F   E4           CLR       A
   \   000060   35..         ADDC      A,?V1
   \   000062   FD           MOV       R5,A
   \   000063   EE           MOV       A,R6
   \   000064   FA           MOV       R2,A
   \   000065   EF           MOV       A,R7
   \   000066   FB           MOV       R3,A
   \   000067   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00006A   8A..         MOV       ?V4,R2
   \   00006C   8B..         MOV       ?V5,R3
   \   00006E   AE..         MOV       R6,?V4
   \   000070   AF..         MOV       R7,?V5
    407          
    408              *pBuf++ = pRsp->nwkParams.keyIndex;
   \   000072   E5..         MOV       A,?V0
   \   000074   240C         ADD       A,#0xc
   \   000076   F582         MOV       DPL,A
   \   000078   E4           CLR       A
   \   000079   35..         ADDC      A,?V1
   \   00007B   F583         MOV       DPH,A
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   C0E0         PUSH      A
   \   000080   8E82         MOV       DPL,R6
   \   000082   8F83         MOV       DPH,R7
   \   000084   D0E0         POP       A
   \   000086   F0           MOVX      @DPTR,A
   \   000087   8E82         MOV       DPL,R6
   \   000089   8F83         MOV       DPH,R7
   \   00008B   A3           INC       DPTR
   \   00008C   AE82         MOV       R6,DPL
   \   00008E   AF83         MOV       R7,DPH
    409          
    410              pBuf = zcl_memcpy( pBuf, pRsp->nwkParams.nwkKey, SEC_KEY_LEN );
   \   000090                ; Setup parameters for call to function osal_memcpy
   \   000090   E5..         MOV       A,?V0
   \   000092   240D         ADD       A,#0xd
   \   000094   F5..         MOV       ?V4,A
   \   000096   E4           CLR       A
   \   000097   35..         ADDC      A,?V1
   \   000099   F5..         MOV       ?V5,A
   \   00009B   75..00       MOV       ?V6,#0x0
   \   00009E   78..         MOV       R0,#?V4
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000A3   7C10         MOV       R4,#0x10
   \   0000A5   7D00         MOV       R5,#0x0
   \   0000A7   EE           MOV       A,R6
   \   0000A8   FA           MOV       R2,A
   \   0000A9   EF           MOV       A,R7
   \   0000AA   FB           MOV       R3,A
   \   0000AB   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000AE   7403         MOV       A,#0x3
   \   0000B0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B3   8A..         MOV       ?V4,R2
   \   0000B5   8B..         MOV       ?V5,R3
   \   0000B7   AE..         MOV       R6,?V4
   \   0000B9   AF..         MOV       R7,?V5
    411          
    412              *pBuf++ = pRsp->nwkUpdateId;
   \   0000BB   E5..         MOV       A,?V0
   \   0000BD   242E         ADD       A,#0x2e
   \   0000BF   F582         MOV       DPL,A
   \   0000C1   E4           CLR       A
   \   0000C2   35..         ADDC      A,?V1
   \   0000C4   F583         MOV       DPH,A
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   C0E0         PUSH      A
   \   0000C9   8E82         MOV       DPL,R6
   \   0000CB   8F83         MOV       DPH,R7
   \   0000CD   D0E0         POP       A
   \   0000CF   F0           MOVX      @DPTR,A
   \   0000D0   8E82         MOV       DPL,R6
   \   0000D2   8F83         MOV       DPH,R7
   \   0000D4   A3           INC       DPTR
   \   0000D5   AE82         MOV       R6,DPL
   \   0000D7   AF83         MOV       R7,DPH
    413              *pBuf++ = pRsp->nwkParams.logicalChannel;
   \   0000D9   E5..         MOV       A,?V0
   \   0000DB   241D         ADD       A,#0x1d
   \   0000DD   F582         MOV       DPL,A
   \   0000DF   E4           CLR       A
   \   0000E0   35..         ADDC      A,?V1
   \   0000E2   F583         MOV       DPH,A
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   C0E0         PUSH      A
   \   0000E7   8E82         MOV       DPL,R6
   \   0000E9   8F83         MOV       DPH,R7
   \   0000EB   D0E0         POP       A
   \   0000ED   F0           MOVX      @DPTR,A
   \   0000EE   8E82         MOV       DPL,R6
   \   0000F0   8F83         MOV       DPH,R7
   \   0000F2   A3           INC       DPTR
   \   0000F3   AE82         MOV       R6,DPL
   \   0000F5   AF83         MOV       R7,DPH
    414          
    415              *pBuf++ = LO_UINT16( pRsp->nwkParams.panId );
   \   0000F7   E5..         MOV       A,?V0
   \   0000F9   241E         ADD       A,#0x1e
   \   0000FB   F582         MOV       DPL,A
   \   0000FD   E4           CLR       A
   \   0000FE   35..         ADDC      A,?V1
   \   000100   F583         MOV       DPH,A
   \   000102   E0           MOVX      A,@DPTR
   \   000103   F8           MOV       R0,A
   \   000104   A3           INC       DPTR
   \   000105   E0           MOVX      A,@DPTR
   \   000106   F9           MOV       R1,A
   \   000107   E8           MOV       A,R0
   \   000108   C0E0         PUSH      A
   \   00010A   8E82         MOV       DPL,R6
   \   00010C   8F83         MOV       DPH,R7
   \   00010E   D0E0         POP       A
   \   000110   F0           MOVX      @DPTR,A
   \   000111   8E82         MOV       DPL,R6
   \   000113   8F83         MOV       DPH,R7
   \   000115   A3           INC       DPTR
   \   000116   AE82         MOV       R6,DPL
   \   000118   AF83         MOV       R7,DPH
    416              *pBuf++ = HI_UINT16( pRsp->nwkParams.panId );
   \   00011A   E5..         MOV       A,?V0
   \   00011C   241E         ADD       A,#0x1e
   \   00011E   F582         MOV       DPL,A
   \   000120   E4           CLR       A
   \   000121   35..         ADDC      A,?V1
   \   000123   F583         MOV       DPH,A
   \   000125   E0           MOVX      A,@DPTR
   \   000126   F8           MOV       R0,A
   \   000127   A3           INC       DPTR
   \   000128   E0           MOVX      A,@DPTR
   \   000129   F9           MOV       R1,A
   \   00012A   E4           CLR       A
   \   00012B   C9           XCH       A,R1
   \   00012C   F8           MOV       R0,A
   \   00012D   E8           MOV       A,R0
   \   00012E   C0E0         PUSH      A
   \   000130   8E82         MOV       DPL,R6
   \   000132   8F83         MOV       DPH,R7
   \   000134   D0E0         POP       A
   \   000136   F0           MOVX      @DPTR,A
   \   000137   8E82         MOV       DPL,R6
   \   000139   8F83         MOV       DPH,R7
   \   00013B   A3           INC       DPTR
   \   00013C   AE82         MOV       R6,DPL
   \   00013E   AF83         MOV       R7,DPH
    417          
    418              *pBuf++ = LO_UINT16( pRsp->nwkParams.nwkAddr );
   \   000140   E5..         MOV       A,?V0
   \   000142   2420         ADD       A,#0x20
   \   000144   F582         MOV       DPL,A
   \   000146   E4           CLR       A
   \   000147   35..         ADDC      A,?V1
   \   000149   F583         MOV       DPH,A
   \   00014B   E0           MOVX      A,@DPTR
   \   00014C   F8           MOV       R0,A
   \   00014D   A3           INC       DPTR
   \   00014E   E0           MOVX      A,@DPTR
   \   00014F   F9           MOV       R1,A
   \   000150   E8           MOV       A,R0
   \   000151   C0E0         PUSH      A
   \   000153   8E82         MOV       DPL,R6
   \   000155   8F83         MOV       DPH,R7
   \   000157   D0E0         POP       A
   \   000159   F0           MOVX      @DPTR,A
   \   00015A   8E82         MOV       DPL,R6
   \   00015C   8F83         MOV       DPH,R7
   \   00015E   A3           INC       DPTR
   \   00015F   AE82         MOV       R6,DPL
   \   000161   AF83         MOV       R7,DPH
    419              *pBuf++ = HI_UINT16( pRsp->nwkParams.nwkAddr );
   \   000163   E5..         MOV       A,?V0
   \   000165   2420         ADD       A,#0x20
   \   000167   F582         MOV       DPL,A
   \   000169   E4           CLR       A
   \   00016A   35..         ADDC      A,?V1
   \   00016C   F583         MOV       DPH,A
   \   00016E   E0           MOVX      A,@DPTR
   \   00016F   F8           MOV       R0,A
   \   000170   A3           INC       DPTR
   \   000171   E0           MOVX      A,@DPTR
   \   000172   F9           MOV       R1,A
   \   000173   E4           CLR       A
   \   000174   C9           XCH       A,R1
   \   000175   F8           MOV       R0,A
   \   000176   E8           MOV       A,R0
   \   000177   C0E0         PUSH      A
   \   000179   8E82         MOV       DPL,R6
   \   00017B   8F83         MOV       DPH,R7
   \   00017D   D0E0         POP       A
   \   00017F   F0           MOVX      @DPTR,A
   \   000180   8E82         MOV       DPL,R6
   \   000182   8F83         MOV       DPH,R7
   \   000184   A3           INC       DPTR
   \   000185   AE82         MOV       R6,DPL
   \   000187   AF83         MOV       R7,DPH
    420          
    421              *pBuf++ = LO_UINT16( pRsp->nwkParams.grpIDsBegin );
   \   000189   E5..         MOV       A,?V0
   \   00018B   2422         ADD       A,#0x22
   \   00018D   F582         MOV       DPL,A
   \   00018F   E4           CLR       A
   \   000190   35..         ADDC      A,?V1
   \   000192   F583         MOV       DPH,A
   \   000194   E0           MOVX      A,@DPTR
   \   000195   F8           MOV       R0,A
   \   000196   A3           INC       DPTR
   \   000197   E0           MOVX      A,@DPTR
   \   000198   F9           MOV       R1,A
   \   000199   E8           MOV       A,R0
   \   00019A   C0E0         PUSH      A
   \   00019C   8E82         MOV       DPL,R6
   \   00019E   8F83         MOV       DPH,R7
   \   0001A0   D0E0         POP       A
   \   0001A2   F0           MOVX      @DPTR,A
   \   0001A3   8E82         MOV       DPL,R6
   \   0001A5   8F83         MOV       DPH,R7
   \   0001A7   A3           INC       DPTR
   \   0001A8   AE82         MOV       R6,DPL
   \   0001AA   AF83         MOV       R7,DPH
    422              *pBuf++ = HI_UINT16( pRsp->nwkParams.grpIDsBegin );
   \   0001AC   E5..         MOV       A,?V0
   \   0001AE   2422         ADD       A,#0x22
   \   0001B0   F582         MOV       DPL,A
   \   0001B2   E4           CLR       A
   \   0001B3   35..         ADDC      A,?V1
   \   0001B5   F583         MOV       DPH,A
   \   0001B7   E0           MOVX      A,@DPTR
   \   0001B8   F8           MOV       R0,A
   \   0001B9   A3           INC       DPTR
   \   0001BA   E0           MOVX      A,@DPTR
   \   0001BB   F9           MOV       R1,A
   \   0001BC   E4           CLR       A
   \   0001BD   C9           XCH       A,R1
   \   0001BE   F8           MOV       R0,A
   \   0001BF   E8           MOV       A,R0
   \   0001C0   C0E0         PUSH      A
   \   0001C2   8E82         MOV       DPL,R6
   \   0001C4   8F83         MOV       DPH,R7
   \   0001C6   D0E0         POP       A
   \   0001C8   F0           MOVX      @DPTR,A
   \   0001C9   8E82         MOV       DPL,R6
   \   0001CB   8F83         MOV       DPH,R7
   \   0001CD   A3           INC       DPTR
   \   0001CE   AE82         MOV       R6,DPL
   \   0001D0   AF83         MOV       R7,DPH
    423          
    424              *pBuf++ = LO_UINT16( pRsp->nwkParams.grpIDsEnd );
   \   0001D2   E5..         MOV       A,?V0
   \   0001D4   2424         ADD       A,#0x24
   \   0001D6   F582         MOV       DPL,A
   \   0001D8   E4           CLR       A
   \   0001D9   35..         ADDC      A,?V1
   \   0001DB   F583         MOV       DPH,A
   \   0001DD   E0           MOVX      A,@DPTR
   \   0001DE   F8           MOV       R0,A
   \   0001DF   A3           INC       DPTR
   \   0001E0   E0           MOVX      A,@DPTR
   \   0001E1   F9           MOV       R1,A
   \   0001E2   E8           MOV       A,R0
   \   0001E3   C0E0         PUSH      A
   \   0001E5   8E82         MOV       DPL,R6
   \   0001E7   8F83         MOV       DPH,R7
   \   0001E9   D0E0         POP       A
   \   0001EB   F0           MOVX      @DPTR,A
   \   0001EC   8E82         MOV       DPL,R6
   \   0001EE   8F83         MOV       DPH,R7
   \   0001F0   A3           INC       DPTR
   \   0001F1   AE82         MOV       R6,DPL
   \   0001F3   AF83         MOV       R7,DPH
    425              *pBuf++ = HI_UINT16( pRsp->nwkParams.grpIDsEnd );
   \   0001F5   E5..         MOV       A,?V0
   \   0001F7   2424         ADD       A,#0x24
   \   0001F9   F582         MOV       DPL,A
   \   0001FB   E4           CLR       A
   \   0001FC   35..         ADDC      A,?V1
   \   0001FE   F583         MOV       DPH,A
   \   000200   E0           MOVX      A,@DPTR
   \   000201   F8           MOV       R0,A
   \   000202   A3           INC       DPTR
   \   000203   E0           MOVX      A,@DPTR
   \   000204   F9           MOV       R1,A
   \   000205   E4           CLR       A
   \   000206   C9           XCH       A,R1
   \   000207   F8           MOV       R0,A
   \   000208   E8           MOV       A,R0
   \   000209   C0E0         PUSH      A
   \   00020B   8E82         MOV       DPL,R6
   \   00020D   8F83         MOV       DPH,R7
   \   00020F   D0E0         POP       A
   \   000211   F0           MOVX      @DPTR,A
   \   000212   8E82         MOV       DPL,R6
   \   000214   8F83         MOV       DPH,R7
   \   000216   A3           INC       DPTR
   \   000217   AE82         MOV       R6,DPL
   \   000219   AF83         MOV       R7,DPH
    426          
    427              *pBuf++ = LO_UINT16( pRsp->nwkParams.freeNwkAddrBegin );
   \   00021B   E5..         MOV       A,?V0
   \   00021D   2426         ADD       A,#0x26
   \   00021F   F582         MOV       DPL,A
   \   000221   E4           CLR       A
   \   000222   35..         ADDC      A,?V1
   \   000224   F583         MOV       DPH,A
   \   000226   E0           MOVX      A,@DPTR
   \   000227   F8           MOV       R0,A
   \   000228   A3           INC       DPTR
   \   000229   E0           MOVX      A,@DPTR
   \   00022A   F9           MOV       R1,A
   \   00022B   E8           MOV       A,R0
   \   00022C   C0E0         PUSH      A
   \   00022E   8E82         MOV       DPL,R6
   \   000230   8F83         MOV       DPH,R7
   \   000232   D0E0         POP       A
   \   000234   F0           MOVX      @DPTR,A
   \   000235   8E82         MOV       DPL,R6
   \   000237   8F83         MOV       DPH,R7
   \   000239   A3           INC       DPTR
   \   00023A   AE82         MOV       R6,DPL
   \   00023C   AF83         MOV       R7,DPH
    428              *pBuf++ = HI_UINT16( pRsp->nwkParams.freeNwkAddrBegin );
   \   00023E   E5..         MOV       A,?V0
   \   000240   2426         ADD       A,#0x26
   \   000242   F582         MOV       DPL,A
   \   000244   E4           CLR       A
   \   000245   35..         ADDC      A,?V1
   \   000247   F583         MOV       DPH,A
   \   000249   E0           MOVX      A,@DPTR
   \   00024A   F8           MOV       R0,A
   \   00024B   A3           INC       DPTR
   \   00024C   E0           MOVX      A,@DPTR
   \   00024D   F9           MOV       R1,A
   \   00024E   E4           CLR       A
   \   00024F   C9           XCH       A,R1
   \   000250   F8           MOV       R0,A
   \   000251   E8           MOV       A,R0
   \   000252   C0E0         PUSH      A
   \   000254   8E82         MOV       DPL,R6
   \   000256   8F83         MOV       DPH,R7
   \   000258   D0E0         POP       A
   \   00025A   F0           MOVX      @DPTR,A
   \   00025B   8E82         MOV       DPL,R6
   \   00025D   8F83         MOV       DPH,R7
   \   00025F   A3           INC       DPTR
   \   000260   AE82         MOV       R6,DPL
   \   000262   AF83         MOV       R7,DPH
    429          
    430              *pBuf++ = LO_UINT16( pRsp->nwkParams.freeNwkAddrEnd );
   \   000264   E5..         MOV       A,?V0
   \   000266   2428         ADD       A,#0x28
   \   000268   F582         MOV       DPL,A
   \   00026A   E4           CLR       A
   \   00026B   35..         ADDC      A,?V1
   \   00026D   F583         MOV       DPH,A
   \   00026F   E0           MOVX      A,@DPTR
   \   000270   F8           MOV       R0,A
   \   000271   A3           INC       DPTR
   \   000272   E0           MOVX      A,@DPTR
   \   000273   F9           MOV       R1,A
   \   000274   E8           MOV       A,R0
   \   000275   C0E0         PUSH      A
   \   000277   8E82         MOV       DPL,R6
   \   000279   8F83         MOV       DPH,R7
   \   00027B   D0E0         POP       A
   \   00027D   F0           MOVX      @DPTR,A
   \   00027E   8E82         MOV       DPL,R6
   \   000280   8F83         MOV       DPH,R7
   \   000282   A3           INC       DPTR
   \   000283   AE82         MOV       R6,DPL
   \   000285   AF83         MOV       R7,DPH
    431              *pBuf++ = HI_UINT16( pRsp->nwkParams.freeNwkAddrEnd );
   \   000287   E5..         MOV       A,?V0
   \   000289   2428         ADD       A,#0x28
   \   00028B   F582         MOV       DPL,A
   \   00028D   E4           CLR       A
   \   00028E   35..         ADDC      A,?V1
   \   000290   F583         MOV       DPH,A
   \   000292   E0           MOVX      A,@DPTR
   \   000293   F8           MOV       R0,A
   \   000294   A3           INC       DPTR
   \   000295   E0           MOVX      A,@DPTR
   \   000296   F9           MOV       R1,A
   \   000297   E4           CLR       A
   \   000298   C9           XCH       A,R1
   \   000299   F8           MOV       R0,A
   \   00029A   E8           MOV       A,R0
   \   00029B   C0E0         PUSH      A
   \   00029D   8E82         MOV       DPL,R6
   \   00029F   8F83         MOV       DPH,R7
   \   0002A1   D0E0         POP       A
   \   0002A3   F0           MOVX      @DPTR,A
   \   0002A4   8E82         MOV       DPL,R6
   \   0002A6   8F83         MOV       DPH,R7
   \   0002A8   A3           INC       DPTR
   \   0002A9   AE82         MOV       R6,DPL
   \   0002AB   AF83         MOV       R7,DPH
    432          
    433              *pBuf++ = LO_UINT16( pRsp->nwkParams.freeGrpIDBegin );
   \   0002AD   E5..         MOV       A,?V0
   \   0002AF   242A         ADD       A,#0x2a
   \   0002B1   F582         MOV       DPL,A
   \   0002B3   E4           CLR       A
   \   0002B4   35..         ADDC      A,?V1
   \   0002B6   F583         MOV       DPH,A
   \   0002B8   E0           MOVX      A,@DPTR
   \   0002B9   F8           MOV       R0,A
   \   0002BA   A3           INC       DPTR
   \   0002BB   E0           MOVX      A,@DPTR
   \   0002BC   F9           MOV       R1,A
   \   0002BD   E8           MOV       A,R0
   \   0002BE   C0E0         PUSH      A
   \   0002C0   8E82         MOV       DPL,R6
   \   0002C2   8F83         MOV       DPH,R7
   \   0002C4   D0E0         POP       A
   \   0002C6   F0           MOVX      @DPTR,A
   \   0002C7   8E82         MOV       DPL,R6
   \   0002C9   8F83         MOV       DPH,R7
   \   0002CB   A3           INC       DPTR
   \   0002CC   AE82         MOV       R6,DPL
   \   0002CE   AF83         MOV       R7,DPH
    434              *pBuf++ = HI_UINT16( pRsp->nwkParams.freeGrpIDBegin );
   \   0002D0   E5..         MOV       A,?V0
   \   0002D2   242A         ADD       A,#0x2a
   \   0002D4   F582         MOV       DPL,A
   \   0002D6   E4           CLR       A
   \   0002D7   35..         ADDC      A,?V1
   \   0002D9   F583         MOV       DPH,A
   \   0002DB   E0           MOVX      A,@DPTR
   \   0002DC   F8           MOV       R0,A
   \   0002DD   A3           INC       DPTR
   \   0002DE   E0           MOVX      A,@DPTR
   \   0002DF   F9           MOV       R1,A
   \   0002E0   E4           CLR       A
   \   0002E1   C9           XCH       A,R1
   \   0002E2   F8           MOV       R0,A
   \   0002E3   E8           MOV       A,R0
   \   0002E4   C0E0         PUSH      A
   \   0002E6   8E82         MOV       DPL,R6
   \   0002E8   8F83         MOV       DPH,R7
   \   0002EA   D0E0         POP       A
   \   0002EC   F0           MOVX      @DPTR,A
   \   0002ED   8E82         MOV       DPL,R6
   \   0002EF   8F83         MOV       DPH,R7
   \   0002F1   A3           INC       DPTR
   \   0002F2   AE82         MOV       R6,DPL
   \   0002F4   AF83         MOV       R7,DPH
    435          
    436              *pBuf++ = LO_UINT16( pRsp->nwkParams.freeGrpIDEnd );
   \   0002F6   E5..         MOV       A,?V0
   \   0002F8   242C         ADD       A,#0x2c
   \   0002FA   F582         MOV       DPL,A
   \   0002FC   E4           CLR       A
   \   0002FD   35..         ADDC      A,?V1
   \   0002FF   F583         MOV       DPH,A
   \   000301   E0           MOVX      A,@DPTR
   \   000302   F8           MOV       R0,A
   \   000303   A3           INC       DPTR
   \   000304   E0           MOVX      A,@DPTR
   \   000305   F9           MOV       R1,A
   \   000306   E8           MOV       A,R0
   \   000307   C0E0         PUSH      A
   \   000309   8E82         MOV       DPL,R6
   \   00030B   8F83         MOV       DPH,R7
   \   00030D   D0E0         POP       A
   \   00030F   F0           MOVX      @DPTR,A
   \   000310   8E82         MOV       DPL,R6
   \   000312   8F83         MOV       DPH,R7
   \   000314   A3           INC       DPTR
   \   000315   AE82         MOV       R6,DPL
   \   000317   AF83         MOV       R7,DPH
    437              *pBuf++ = HI_UINT16( pRsp->nwkParams.freeGrpIDEnd );
   \   000319   E5..         MOV       A,?V0
   \   00031B   242C         ADD       A,#0x2c
   \   00031D   F582         MOV       DPL,A
   \   00031F   E4           CLR       A
   \   000320   35..         ADDC      A,?V1
   \   000322   F583         MOV       DPH,A
   \   000324   E0           MOVX      A,@DPTR
   \   000325   F8           MOV       R0,A
   \   000326   A3           INC       DPTR
   \   000327   E0           MOVX      A,@DPTR
   \   000328   F9           MOV       R1,A
   \   000329   E4           CLR       A
   \   00032A   C9           XCH       A,R1
   \   00032B   F8           MOV       R0,A
   \   00032C   E8           MOV       A,R0
   \   00032D   C0E0         PUSH      A
   \   00032F   8E82         MOV       DPL,R6
   \   000331   8F83         MOV       DPH,R7
   \   000333   D0E0         POP       A
   \   000335   F0           MOVX      @DPTR,A
   \   000336   8E82         MOV       DPL,R6
   \   000338   8F83         MOV       DPH,R7
   \   00033A   A3           INC       DPTR
   \   00033B   AE82         MOV       R6,DPL
   \   00033D   AF83         MOV       R7,DPH
    438          
    439              status = bdbTL_SendInterPANCommand( srcEP, dstAddr, cmd, ZCL_FRAME_CLIENT_SERVER_DIR, seqNum,
    440                                                  TOUCHLINK_CMDLEN_NWK_JOIN_REQ, buf );
   \   00033F                ; Setup parameters for call to function bdbTL_SendInterPANCommand
   \   00033F   78..         MOV       R0,#?V2
   \   000341   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000344   75..2F       MOV       ?V4,#0x2f
   \   000347   75..00       MOV       ?V5,#0x0
   \   00034A   78..         MOV       R0,#?V4
   \   00034C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00034F   E5..         MOV       A,?V10
   \   000351   F5..         MOV       ?V4,A
   \   000353   78..         MOV       R0,#?V4
   \   000355   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000358   7D00         MOV       R5,#0x0
   \   00035A   AC..         MOV       R4,?V8
   \   00035C   AA..         MOV       R2,?V12
   \   00035E   AB..         MOV       R3,?V13
   \   000360   A9..         MOV       R1,?V9
   \   000362   12....       LCALL     `??bdbTL_SendInterPANCommand::?relay`; Banked call to: bdbTL_SendInterPANCommand
   \   000365   7405         MOV       A,#0x5
   \   000367   12....       LCALL     ?DEALLOC_XSTACK8
   \   00036A   E9           MOV       A,R1
   \   00036B   F5..         MOV       ?V7,A
    441              zcl_mem_free( buf );
   \   00036D                ; Setup parameters for call to function osal_mem_free
   \   00036D   AA..         MOV       R2,?V2
   \   00036F   AB..         MOV       R3,?V3
   \   000371   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000374   8003         SJMP      ??bdbTL_Send_NwkJoinReq_1
    442            }
    443            else
    444            {
    445              status = ZMemError;
   \                     ??bdbTL_Send_NwkJoinReq_0:
   \   000376   75..10       MOV       ?V7,#0x10
    446            }
    447          
    448            return ( status );
   \                     ??bdbTL_Send_NwkJoinReq_1:
   \   000379   A9..         MOV       R1,?V7
   \   00037B   7F0E         MOV       R7,#0xe
   \   00037D   02....       LJMP      ?BANKED_LEAVE_XDATA
    449          }
    450          
    451          /*********************************************************************
    452           * @fn      bdbTL_Send_NwkUpdateReq
    453           *
    454           * @brief   Call to send out a Network Update Request command
    455           *
    456           * @param   srcEP - sending application's endpoint
    457           * @param   dstAddr - where you want the message to go
    458           * @param   pReq - response parameters
    459           * @param   seqNum - sequence number
    460           *
    461           * @return  ZStatus_t
    462           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    463          ZStatus_t bdbTL_Send_NwkUpdateReq( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_NwkUpdateReq:
    464                                             bdbTLNwkUpdateReq_t *pReq, uint8 seqNum )
    465          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V3,R1
   \   000007   8A..         MOV       ?V6,R2
   \   000009   8B..         MOV       ?V7,R3
   \   00000B   8C..         MOV       ?V0,R4
   \   00000D   8D..         MOV       ?V1,R5
   \   00000F   7414         MOV       A,#0x14
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V4,A
    466            uint8 *buf;
    467            uint8 *pBuf;
    468            ZStatus_t status;
    469          
    470            buf = zcl_mem_alloc( TOUCHLINK_CMDLEN_NWK_UPDATE_REQ );
   \   000017                ; Setup parameters for call to function osal_mem_alloc
   \   000017   7A12         MOV       R2,#0x12
   \   000019   7B00         MOV       R3,#0x0
   \   00001B   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001E   8A..         MOV       ?V10,R2
   \   000020   8B..         MOV       ?V11,R3
   \   000022   85....       MOV       ?V8,?V10
   \   000025   85....       MOV       ?V9,?V11
    471            if ( buf != NULL )
   \   000028   E5..         MOV       A,?V8
   \   00002A   45..         ORL       A,?V9
   \   00002C   7003         JNZ       $+5
   \   00002E   02....       LJMP      ??bdbTL_Send_NwkUpdateReq_0 & 0xFFFF
    472            {
    473              pBuf = buf;
   \   000031   AE..         MOV       R6,?V8
   \   000033   AF..         MOV       R7,?V9
    474          
    475              pBuf = zcl_buffer_uint32( pBuf, pReq->transID );
   \   000035                ; Setup parameters for call to function osal_buffer_uint32
   \   000035   85..82       MOV       DPL,?V0
   \   000038   85..83       MOV       DPH,?V1
   \   00003B   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00003E   EE           MOV       A,R6
   \   00003F   FA           MOV       R2,A
   \   000040   EF           MOV       A,R7
   \   000041   FB           MOV       R3,A
   \   000042   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000045   7404         MOV       A,#0x4
   \   000047   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004A   8A..         MOV       ?V10,R2
   \   00004C   8B..         MOV       ?V11,R3
   \   00004E   AE..         MOV       R6,?V10
   \   000050   AF..         MOV       R7,?V11
    476              pBuf = zcl_cpyExtAddr( pBuf, pReq->extendedPANID );
   \   000052                ; Setup parameters for call to function sAddrExtCpy
   \   000052   E5..         MOV       A,?V0
   \   000054   2404         ADD       A,#0x4
   \   000056   FC           MOV       R4,A
   \   000057   E4           CLR       A
   \   000058   35..         ADDC      A,?V1
   \   00005A   FD           MOV       R5,A
   \   00005B   EE           MOV       A,R6
   \   00005C   FA           MOV       R2,A
   \   00005D   EF           MOV       A,R7
   \   00005E   FB           MOV       R3,A
   \   00005F   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000062   8A..         MOV       ?V10,R2
   \   000064   8B..         MOV       ?V11,R3
   \   000066   AE..         MOV       R6,?V10
   \   000068   AF..         MOV       R7,?V11
    477          
    478              *pBuf++ = pReq->nwkUpdateId;
   \   00006A   E5..         MOV       A,?V0
   \   00006C   240C         ADD       A,#0xc
   \   00006E   F582         MOV       DPL,A
   \   000070   E4           CLR       A
   \   000071   35..         ADDC      A,?V1
   \   000073   F583         MOV       DPH,A
   \   000075   E0           MOVX      A,@DPTR
   \   000076   C0E0         PUSH      A
   \   000078   8E82         MOV       DPL,R6
   \   00007A   8F83         MOV       DPH,R7
   \   00007C   D0E0         POP       A
   \   00007E   F0           MOVX      @DPTR,A
   \   00007F   8E82         MOV       DPL,R6
   \   000081   8F83         MOV       DPH,R7
   \   000083   A3           INC       DPTR
   \   000084   AE82         MOV       R6,DPL
   \   000086   AF83         MOV       R7,DPH
    479              *pBuf++ = pReq->logicalChannel;
   \   000088   E5..         MOV       A,?V0
   \   00008A   240D         ADD       A,#0xd
   \   00008C   F582         MOV       DPL,A
   \   00008E   E4           CLR       A
   \   00008F   35..         ADDC      A,?V1
   \   000091   F583         MOV       DPH,A
   \   000093   E0           MOVX      A,@DPTR
   \   000094   C0E0         PUSH      A
   \   000096   8E82         MOV       DPL,R6
   \   000098   8F83         MOV       DPH,R7
   \   00009A   D0E0         POP       A
   \   00009C   F0           MOVX      @DPTR,A
   \   00009D   8E82         MOV       DPL,R6
   \   00009F   8F83         MOV       DPH,R7
   \   0000A1   A3           INC       DPTR
   \   0000A2   AE82         MOV       R6,DPL
   \   0000A4   AF83         MOV       R7,DPH
    480          
    481              *pBuf++ = LO_UINT16( pReq->PANID );
   \   0000A6   E5..         MOV       A,?V0
   \   0000A8   240E         ADD       A,#0xe
   \   0000AA   F582         MOV       DPL,A
   \   0000AC   E4           CLR       A
   \   0000AD   35..         ADDC      A,?V1
   \   0000AF   F583         MOV       DPH,A
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   F8           MOV       R0,A
   \   0000B3   A3           INC       DPTR
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   F9           MOV       R1,A
   \   0000B6   E8           MOV       A,R0
   \   0000B7   C0E0         PUSH      A
   \   0000B9   8E82         MOV       DPL,R6
   \   0000BB   8F83         MOV       DPH,R7
   \   0000BD   D0E0         POP       A
   \   0000BF   F0           MOVX      @DPTR,A
   \   0000C0   8E82         MOV       DPL,R6
   \   0000C2   8F83         MOV       DPH,R7
   \   0000C4   A3           INC       DPTR
   \   0000C5   AE82         MOV       R6,DPL
   \   0000C7   AF83         MOV       R7,DPH
    482              *pBuf++ = HI_UINT16( pReq->PANID );
   \   0000C9   E5..         MOV       A,?V0
   \   0000CB   240E         ADD       A,#0xe
   \   0000CD   F582         MOV       DPL,A
   \   0000CF   E4           CLR       A
   \   0000D0   35..         ADDC      A,?V1
   \   0000D2   F583         MOV       DPH,A
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   F8           MOV       R0,A
   \   0000D6   A3           INC       DPTR
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   F9           MOV       R1,A
   \   0000D9   E4           CLR       A
   \   0000DA   C9           XCH       A,R1
   \   0000DB   F8           MOV       R0,A
   \   0000DC   E8           MOV       A,R0
   \   0000DD   C0E0         PUSH      A
   \   0000DF   8E82         MOV       DPL,R6
   \   0000E1   8F83         MOV       DPH,R7
   \   0000E3   D0E0         POP       A
   \   0000E5   F0           MOVX      @DPTR,A
   \   0000E6   8E82         MOV       DPL,R6
   \   0000E8   8F83         MOV       DPH,R7
   \   0000EA   A3           INC       DPTR
   \   0000EB   AE82         MOV       R6,DPL
   \   0000ED   AF83         MOV       R7,DPH
    483          
    484              *pBuf++ = LO_UINT16( pReq->nwkAddr );
   \   0000EF   E5..         MOV       A,?V0
   \   0000F1   2410         ADD       A,#0x10
   \   0000F3   F582         MOV       DPL,A
   \   0000F5   E4           CLR       A
   \   0000F6   35..         ADDC      A,?V1
   \   0000F8   F583         MOV       DPH,A
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   F8           MOV       R0,A
   \   0000FC   A3           INC       DPTR
   \   0000FD   E0           MOVX      A,@DPTR
   \   0000FE   F9           MOV       R1,A
   \   0000FF   E8           MOV       A,R0
   \   000100   C0E0         PUSH      A
   \   000102   8E82         MOV       DPL,R6
   \   000104   8F83         MOV       DPH,R7
   \   000106   D0E0         POP       A
   \   000108   F0           MOVX      @DPTR,A
   \   000109   8E82         MOV       DPL,R6
   \   00010B   8F83         MOV       DPH,R7
   \   00010D   A3           INC       DPTR
   \   00010E   AE82         MOV       R6,DPL
   \   000110   AF83         MOV       R7,DPH
    485              *pBuf++ = HI_UINT16( pReq->nwkAddr );
   \   000112   E5..         MOV       A,?V0
   \   000114   2410         ADD       A,#0x10
   \   000116   F582         MOV       DPL,A
   \   000118   E4           CLR       A
   \   000119   35..         ADDC      A,?V1
   \   00011B   F583         MOV       DPH,A
   \   00011D   E0           MOVX      A,@DPTR
   \   00011E   F8           MOV       R0,A
   \   00011F   A3           INC       DPTR
   \   000120   E0           MOVX      A,@DPTR
   \   000121   F9           MOV       R1,A
   \   000122   E4           CLR       A
   \   000123   C9           XCH       A,R1
   \   000124   F8           MOV       R0,A
   \   000125   E8           MOV       A,R0
   \   000126   C0E0         PUSH      A
   \   000128   8E82         MOV       DPL,R6
   \   00012A   8F83         MOV       DPH,R7
   \   00012C   D0E0         POP       A
   \   00012E   F0           MOVX      @DPTR,A
   \   00012F   8E82         MOV       DPL,R6
   \   000131   8F83         MOV       DPH,R7
   \   000133   A3           INC       DPTR
   \   000134   AE82         MOV       R6,DPL
   \   000136   AF83         MOV       R7,DPH
    486          
    487              status = bdbTL_SendInterPANCommand( srcEP, dstAddr, COMMAND_TOUCHLINK_NWK_UPDATE_REQ,
    488                                                  ZCL_FRAME_CLIENT_SERVER_DIR, seqNum, TOUCHLINK_CMDLEN_NWK_UPDATE_REQ, buf );
   \   000138                ; Setup parameters for call to function bdbTL_SendInterPANCommand
   \   000138   78..         MOV       R0,#?V8
   \   00013A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00013D   75..12       MOV       ?V10,#0x12
   \   000140   75..00       MOV       ?V11,#0x0
   \   000143   78..         MOV       R0,#?V10
   \   000145   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000148   E5..         MOV       A,?V4
   \   00014A   F5..         MOV       ?V5,A
   \   00014C   78..         MOV       R0,#?V5
   \   00014E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000151   7D00         MOV       R5,#0x0
   \   000153   7C16         MOV       R4,#0x16
   \   000155   AA..         MOV       R2,?V6
   \   000157   AB..         MOV       R3,?V7
   \   000159   A9..         MOV       R1,?V3
   \   00015B   12....       LCALL     `??bdbTL_SendInterPANCommand::?relay`; Banked call to: bdbTL_SendInterPANCommand
   \   00015E   7405         MOV       A,#0x5
   \   000160   12....       LCALL     ?DEALLOC_XSTACK8
   \   000163   E9           MOV       A,R1
   \   000164   F5..         MOV       ?V2,A
    489              zcl_mem_free( buf );
   \   000166                ; Setup parameters for call to function osal_mem_free
   \   000166   AA..         MOV       R2,?V8
   \   000168   AB..         MOV       R3,?V9
   \   00016A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00016D   8003         SJMP      ??bdbTL_Send_NwkUpdateReq_1
    490            }
    491            else
    492            {
    493              status = ZMemError;
   \                     ??bdbTL_Send_NwkUpdateReq_0:
   \   00016F   75..10       MOV       ?V2,#0x10
    494            }
    495          
    496            return ( status );
   \                     ??bdbTL_Send_NwkUpdateReq_1:
   \   000172   A9..         MOV       R1,?V2
   \   000174   7F0C         MOV       R7,#0xc
   \   000176   02....       LJMP      ?BANKED_LEAVE_XDATA
    497          }
    498          
    499          /*********************************************************************
    500           * @fn      bdbTL_Send_ScanRsp
    501           *
    502           * @brief   Call to send out an Scan Response command
    503           *
    504           * @param   srcEP - sending application's endpoint
    505           * @param   dstAddr - where you want the message to go
    506           * @param   pRsp - response parameters
    507           * @param   seqNum - sequence number
    508           *
    509           * @return  ZStatus_t
    510           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    511          ZStatus_t bdbTL_Send_ScanRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_ScanRsp:
    512                                        bdbTLScanRsp_t *pRsp, uint8 seqNum )
    513          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V8,R1
   \   000007   8A..         MOV       ?V6,R2
   \   000009   8B..         MOV       ?V7,R3
   \   00000B   8C..         MOV       ?V0,R4
   \   00000D   8D..         MOV       ?V1,R5
   \   00000F   7414         MOV       A,#0x14
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V9,A
    514            uint8 *buf;
    515            uint8 bufLen = TOUCHLINK_CMDLEN_SCAN_RSP;
   \   000017   75..1D       MOV       ?V5,#0x1d
    516            ZStatus_t status;
    517          
    518            // Calculate the total length needed
    519            if ( pRsp->numSubDevices == 1 )
   \   00001A   E5..         MOV       A,?V0
   \   00001C   241D         ADD       A,#0x1d
   \   00001E   F582         MOV       DPL,A
   \   000020   E4           CLR       A
   \   000021   35..         ADDC      A,?V1
   \   000023   F583         MOV       DPH,A
   \   000025   E0           MOVX      A,@DPTR
   \   000026   6401         XRL       A,#0x1
   \   000028   7006         JNZ       ??bdbTL_Send_ScanRsp_0
    520            {
    521              bufLen += TOUCHLINK_CMDLENOPTIONAL_SCAN_RSP;
   \   00002A   7407         MOV       A,#0x7
   \   00002C   25..         ADD       A,?V5
   \   00002E   F5..         MOV       ?V5,A
    522            }
    523          
    524            buf = zcl_mem_alloc( bufLen );
   \                     ??bdbTL_Send_ScanRsp_0:
   \   000030                ; Setup parameters for call to function osal_mem_alloc
   \   000030   E5..         MOV       A,?V5
   \   000032   FA           MOV       R2,A
   \   000033   7B00         MOV       R3,#0x0
   \   000035   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000038   8A..         MOV       ?V10,R2
   \   00003A   8B..         MOV       ?V11,R3
   \   00003C   85....       MOV       ?V2,?V10
   \   00003F   85....       MOV       ?V3,?V11
    525            if ( buf != NULL )
   \   000042   E5..         MOV       A,?V2
   \   000044   45..         ORL       A,?V3
   \   000046   7003         JNZ       $+5
   \   000048   02....       LJMP      ??bdbTL_Send_ScanRsp_1 & 0xFFFF
    526            {
    527              uint8 *pBuf = buf;
   \   00004B   AE..         MOV       R6,?V2
   \   00004D   AF..         MOV       R7,?V3
    528          
    529              pBuf = zcl_buffer_uint32( pBuf, pRsp->transID );
   \   00004F                ; Setup parameters for call to function osal_buffer_uint32
   \   00004F   85..82       MOV       DPL,?V0
   \   000052   85..83       MOV       DPH,?V1
   \   000055   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000058   EE           MOV       A,R6
   \   000059   FA           MOV       R2,A
   \   00005A   EF           MOV       A,R7
   \   00005B   FB           MOV       R3,A
   \   00005C   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00005F   7404         MOV       A,#0x4
   \   000061   12....       LCALL     ?DEALLOC_XSTACK8
   \   000064   8A..         MOV       ?V10,R2
   \   000066   8B..         MOV       ?V11,R3
   \   000068   AE..         MOV       R6,?V10
   \   00006A   AF..         MOV       R7,?V11
    530          
    531              *pBuf++ = pRsp->rssiCorrection;
   \   00006C   85..82       MOV       DPL,?V0
   \   00006F   85..83       MOV       DPH,?V1
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   E0           MOVX      A,@DPTR
   \   000077   C0E0         PUSH      A
   \   000079   8E82         MOV       DPL,R6
   \   00007B   8F83         MOV       DPH,R7
   \   00007D   D0E0         POP       A
   \   00007F   F0           MOVX      @DPTR,A
   \   000080   8E82         MOV       DPL,R6
   \   000082   8F83         MOV       DPH,R7
   \   000084   A3           INC       DPTR
   \   000085   AE82         MOV       R6,DPL
   \   000087   AF83         MOV       R7,DPH
    532              *pBuf++ = pRsp->zInfo.zInfoByte;
   \   000089   85..82       MOV       DPL,?V0
   \   00008C   85..83       MOV       DPH,?V1
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   E0           MOVX      A,@DPTR
   \   000095   C0E0         PUSH      A
   \   000097   8E82         MOV       DPL,R6
   \   000099   8F83         MOV       DPH,R7
   \   00009B   D0E0         POP       A
   \   00009D   F0           MOVX      @DPTR,A
   \   00009E   8E82         MOV       DPL,R6
   \   0000A0   8F83         MOV       DPH,R7
   \   0000A2   A3           INC       DPTR
   \   0000A3   AE82         MOV       R6,DPL
   \   0000A5   AF83         MOV       R7,DPH
    533              *pBuf++ = pRsp->touchLinkInfo.touchLinkInfoByte;
   \   0000A7   85..82       MOV       DPL,?V0
   \   0000AA   85..83       MOV       DPH,?V1
   \   0000AD   A3           INC       DPTR
   \   0000AE   A3           INC       DPTR
   \   0000AF   A3           INC       DPTR
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   A3           INC       DPTR
   \   0000B3   A3           INC       DPTR
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   C0E0         PUSH      A
   \   0000B7   8E82         MOV       DPL,R6
   \   0000B9   8F83         MOV       DPH,R7
   \   0000BB   D0E0         POP       A
   \   0000BD   F0           MOVX      @DPTR,A
   \   0000BE   8E82         MOV       DPL,R6
   \   0000C0   8F83         MOV       DPH,R7
   \   0000C2   A3           INC       DPTR
   \   0000C3   AE82         MOV       R6,DPL
   \   0000C5   AF83         MOV       R7,DPH
    534          
    535              *pBuf++ = LO_UINT16( pRsp->keyBitmask );
   \   0000C7   85..82       MOV       DPL,?V0
   \   0000CA   85..83       MOV       DPH,?V1
   \   0000CD   A3           INC       DPTR
   \   0000CE   A3           INC       DPTR
   \   0000CF   A3           INC       DPTR
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   A3           INC       DPTR
   \   0000D3   A3           INC       DPTR
   \   0000D4   A3           INC       DPTR
   \   0000D5   A3           INC       DPTR
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   F8           MOV       R0,A
   \   0000D8   A3           INC       DPTR
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   F9           MOV       R1,A
   \   0000DB   E8           MOV       A,R0
   \   0000DC   C0E0         PUSH      A
   \   0000DE   8E82         MOV       DPL,R6
   \   0000E0   8F83         MOV       DPH,R7
   \   0000E2   D0E0         POP       A
   \   0000E4   F0           MOVX      @DPTR,A
   \   0000E5   8E82         MOV       DPL,R6
   \   0000E7   8F83         MOV       DPH,R7
   \   0000E9   A3           INC       DPTR
   \   0000EA   AE82         MOV       R6,DPL
   \   0000EC   AF83         MOV       R7,DPH
    536              *pBuf++ = HI_UINT16( pRsp->keyBitmask );
   \   0000EE   85..82       MOV       DPL,?V0
   \   0000F1   85..83       MOV       DPH,?V1
   \   0000F4   A3           INC       DPTR
   \   0000F5   A3           INC       DPTR
   \   0000F6   A3           INC       DPTR
   \   0000F7   A3           INC       DPTR
   \   0000F8   A3           INC       DPTR
   \   0000F9   A3           INC       DPTR
   \   0000FA   A3           INC       DPTR
   \   0000FB   A3           INC       DPTR
   \   0000FC   A3           INC       DPTR
   \   0000FD   E0           MOVX      A,@DPTR
   \   0000FE   F8           MOV       R0,A
   \   0000FF   A3           INC       DPTR
   \   000100   E0           MOVX      A,@DPTR
   \   000101   F9           MOV       R1,A
   \   000102   E4           CLR       A
   \   000103   C9           XCH       A,R1
   \   000104   F8           MOV       R0,A
   \   000105   E8           MOV       A,R0
   \   000106   C0E0         PUSH      A
   \   000108   8E82         MOV       DPL,R6
   \   00010A   8F83         MOV       DPH,R7
   \   00010C   D0E0         POP       A
   \   00010E   F0           MOVX      @DPTR,A
   \   00010F   8E82         MOV       DPL,R6
   \   000111   8F83         MOV       DPH,R7
   \   000113   A3           INC       DPTR
   \   000114   AE82         MOV       R6,DPL
   \   000116   AF83         MOV       R7,DPH
    537          
    538              pBuf = zcl_buffer_uint32( pBuf, pRsp->responseID );
   \   000118                ; Setup parameters for call to function osal_buffer_uint32
   \   000118   E5..         MOV       A,?V0
   \   00011A   240B         ADD       A,#0xb
   \   00011C   F582         MOV       DPL,A
   \   00011E   E4           CLR       A
   \   00011F   35..         ADDC      A,?V1
   \   000121   F583         MOV       DPH,A
   \   000123   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000126   EE           MOV       A,R6
   \   000127   FA           MOV       R2,A
   \   000128   EF           MOV       A,R7
   \   000129   FB           MOV       R3,A
   \   00012A   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00012D   7404         MOV       A,#0x4
   \   00012F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000132   8A..         MOV       ?V10,R2
   \   000134   8B..         MOV       ?V11,R3
   \   000136   AE..         MOV       R6,?V10
   \   000138   AF..         MOV       R7,?V11
    539              pBuf = zcl_cpyExtAddr( pBuf, pRsp->extendedPANID );
   \   00013A                ; Setup parameters for call to function sAddrExtCpy
   \   00013A   E5..         MOV       A,?V0
   \   00013C   240F         ADD       A,#0xf
   \   00013E   FC           MOV       R4,A
   \   00013F   E4           CLR       A
   \   000140   35..         ADDC      A,?V1
   \   000142   FD           MOV       R5,A
   \   000143   EE           MOV       A,R6
   \   000144   FA           MOV       R2,A
   \   000145   EF           MOV       A,R7
   \   000146   FB           MOV       R3,A
   \   000147   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00014A   8A..         MOV       ?V10,R2
   \   00014C   8B..         MOV       ?V11,R3
   \   00014E   AE..         MOV       R6,?V10
   \   000150   AF..         MOV       R7,?V11
    540          
    541              *pBuf++ = pRsp->nwkUpdateId;
   \   000152   E5..         MOV       A,?V0
   \   000154   2417         ADD       A,#0x17
   \   000156   F582         MOV       DPL,A
   \   000158   E4           CLR       A
   \   000159   35..         ADDC      A,?V1
   \   00015B   F583         MOV       DPH,A
   \   00015D   E0           MOVX      A,@DPTR
   \   00015E   C0E0         PUSH      A
   \   000160   8E82         MOV       DPL,R6
   \   000162   8F83         MOV       DPH,R7
   \   000164   D0E0         POP       A
   \   000166   F0           MOVX      @DPTR,A
   \   000167   8E82         MOV       DPL,R6
   \   000169   8F83         MOV       DPH,R7
   \   00016B   A3           INC       DPTR
   \   00016C   AE82         MOV       R6,DPL
   \   00016E   AF83         MOV       R7,DPH
    542              *pBuf++ = pRsp->logicalChannel;
   \   000170   E5..         MOV       A,?V0
   \   000172   2418         ADD       A,#0x18
   \   000174   F582         MOV       DPL,A
   \   000176   E4           CLR       A
   \   000177   35..         ADDC      A,?V1
   \   000179   F583         MOV       DPH,A
   \   00017B   E0           MOVX      A,@DPTR
   \   00017C   C0E0         PUSH      A
   \   00017E   8E82         MOV       DPL,R6
   \   000180   8F83         MOV       DPH,R7
   \   000182   D0E0         POP       A
   \   000184   F0           MOVX      @DPTR,A
   \   000185   8E82         MOV       DPL,R6
   \   000187   8F83         MOV       DPH,R7
   \   000189   A3           INC       DPTR
   \   00018A   AE82         MOV       R6,DPL
   \   00018C   AF83         MOV       R7,DPH
    543          
    544              *pBuf++ = LO_UINT16( pRsp->PANID );
   \   00018E   E5..         MOV       A,?V0
   \   000190   2419         ADD       A,#0x19
   \   000192   F582         MOV       DPL,A
   \   000194   E4           CLR       A
   \   000195   35..         ADDC      A,?V1
   \   000197   F583         MOV       DPH,A
   \   000199   E0           MOVX      A,@DPTR
   \   00019A   F8           MOV       R0,A
   \   00019B   A3           INC       DPTR
   \   00019C   E0           MOVX      A,@DPTR
   \   00019D   F9           MOV       R1,A
   \   00019E   E8           MOV       A,R0
   \   00019F   C0E0         PUSH      A
   \   0001A1   8E82         MOV       DPL,R6
   \   0001A3   8F83         MOV       DPH,R7
   \   0001A5   D0E0         POP       A
   \   0001A7   F0           MOVX      @DPTR,A
   \   0001A8   8E82         MOV       DPL,R6
   \   0001AA   8F83         MOV       DPH,R7
   \   0001AC   A3           INC       DPTR
   \   0001AD   AE82         MOV       R6,DPL
   \   0001AF   AF83         MOV       R7,DPH
    545              *pBuf++ = HI_UINT16( pRsp->PANID );
   \   0001B1   E5..         MOV       A,?V0
   \   0001B3   2419         ADD       A,#0x19
   \   0001B5   F582         MOV       DPL,A
   \   0001B7   E4           CLR       A
   \   0001B8   35..         ADDC      A,?V1
   \   0001BA   F583         MOV       DPH,A
   \   0001BC   E0           MOVX      A,@DPTR
   \   0001BD   F8           MOV       R0,A
   \   0001BE   A3           INC       DPTR
   \   0001BF   E0           MOVX      A,@DPTR
   \   0001C0   F9           MOV       R1,A
   \   0001C1   E4           CLR       A
   \   0001C2   C9           XCH       A,R1
   \   0001C3   F8           MOV       R0,A
   \   0001C4   E8           MOV       A,R0
   \   0001C5   C0E0         PUSH      A
   \   0001C7   8E82         MOV       DPL,R6
   \   0001C9   8F83         MOV       DPH,R7
   \   0001CB   D0E0         POP       A
   \   0001CD   F0           MOVX      @DPTR,A
   \   0001CE   8E82         MOV       DPL,R6
   \   0001D0   8F83         MOV       DPH,R7
   \   0001D2   A3           INC       DPTR
   \   0001D3   AE82         MOV       R6,DPL
   \   0001D5   AF83         MOV       R7,DPH
    546          
    547              *pBuf++ = LO_UINT16( pRsp->nwkAddr );
   \   0001D7   E5..         MOV       A,?V0
   \   0001D9   241B         ADD       A,#0x1b
   \   0001DB   F582         MOV       DPL,A
   \   0001DD   E4           CLR       A
   \   0001DE   35..         ADDC      A,?V1
   \   0001E0   F583         MOV       DPH,A
   \   0001E2   E0           MOVX      A,@DPTR
   \   0001E3   F8           MOV       R0,A
   \   0001E4   A3           INC       DPTR
   \   0001E5   E0           MOVX      A,@DPTR
   \   0001E6   F9           MOV       R1,A
   \   0001E7   E8           MOV       A,R0
   \   0001E8   C0E0         PUSH      A
   \   0001EA   8E82         MOV       DPL,R6
   \   0001EC   8F83         MOV       DPH,R7
   \   0001EE   D0E0         POP       A
   \   0001F0   F0           MOVX      @DPTR,A
   \   0001F1   8E82         MOV       DPL,R6
   \   0001F3   8F83         MOV       DPH,R7
   \   0001F5   A3           INC       DPTR
   \   0001F6   AE82         MOV       R6,DPL
   \   0001F8   AF83         MOV       R7,DPH
    548              *pBuf++ = HI_UINT16( pRsp->nwkAddr );
   \   0001FA   E5..         MOV       A,?V0
   \   0001FC   241B         ADD       A,#0x1b
   \   0001FE   F582         MOV       DPL,A
   \   000200   E4           CLR       A
   \   000201   35..         ADDC      A,?V1
   \   000203   F583         MOV       DPH,A
   \   000205   E0           MOVX      A,@DPTR
   \   000206   F8           MOV       R0,A
   \   000207   A3           INC       DPTR
   \   000208   E0           MOVX      A,@DPTR
   \   000209   F9           MOV       R1,A
   \   00020A   E4           CLR       A
   \   00020B   C9           XCH       A,R1
   \   00020C   F8           MOV       R0,A
   \   00020D   E8           MOV       A,R0
   \   00020E   C0E0         PUSH      A
   \   000210   8E82         MOV       DPL,R6
   \   000212   8F83         MOV       DPH,R7
   \   000214   D0E0         POP       A
   \   000216   F0           MOVX      @DPTR,A
   \   000217   8E82         MOV       DPL,R6
   \   000219   8F83         MOV       DPH,R7
   \   00021B   A3           INC       DPTR
   \   00021C   AE82         MOV       R6,DPL
   \   00021E   AF83         MOV       R7,DPH
    549          
    550              *pBuf++ = pRsp->numSubDevices;
   \   000220   E5..         MOV       A,?V0
   \   000222   241D         ADD       A,#0x1d
   \   000224   F582         MOV       DPL,A
   \   000226   E4           CLR       A
   \   000227   35..         ADDC      A,?V1
   \   000229   F583         MOV       DPH,A
   \   00022B   E0           MOVX      A,@DPTR
   \   00022C   C0E0         PUSH      A
   \   00022E   8E82         MOV       DPL,R6
   \   000230   8F83         MOV       DPH,R7
   \   000232   D0E0         POP       A
   \   000234   F0           MOVX      @DPTR,A
   \   000235   8E82         MOV       DPL,R6
   \   000237   8F83         MOV       DPH,R7
   \   000239   A3           INC       DPTR
   \   00023A   AE82         MOV       R6,DPL
   \   00023C   AF83         MOV       R7,DPH
    551              *pBuf++ = pRsp->totalGrpIDs;
   \   00023E   E5..         MOV       A,?V0
   \   000240   241E         ADD       A,#0x1e
   \   000242   F582         MOV       DPL,A
   \   000244   E4           CLR       A
   \   000245   35..         ADDC      A,?V1
   \   000247   F583         MOV       DPH,A
   \   000249   E0           MOVX      A,@DPTR
   \   00024A   C0E0         PUSH      A
   \   00024C   8E82         MOV       DPL,R6
   \   00024E   8F83         MOV       DPH,R7
   \   000250   D0E0         POP       A
   \   000252   F0           MOVX      @DPTR,A
   \   000253   8E82         MOV       DPL,R6
   \   000255   8F83         MOV       DPH,R7
   \   000257   A3           INC       DPTR
   \   000258   AE82         MOV       R6,DPL
   \   00025A   AF83         MOV       R7,DPH
    552          
    553              if ( pRsp->numSubDevices == 1 )
   \   00025C   E5..         MOV       A,?V0
   \   00025E   241D         ADD       A,#0x1d
   \   000260   F582         MOV       DPL,A
   \   000262   E4           CLR       A
   \   000263   35..         ADDC      A,?V1
   \   000265   F583         MOV       DPH,A
   \   000267   E0           MOVX      A,@DPTR
   \   000268   6401         XRL       A,#0x1
   \   00026A   6003         JZ        $+5
   \   00026C   02....       LJMP      ??bdbTL_Send_ScanRsp_2 & 0xFFFF
    554              {
    555                *pBuf++ = pRsp->deviceInfo.endpoint;
   \   00026F   E5..         MOV       A,?V0
   \   000271   241F         ADD       A,#0x1f
   \   000273   F582         MOV       DPL,A
   \   000275   E4           CLR       A
   \   000276   35..         ADDC      A,?V1
   \   000278   F583         MOV       DPH,A
   \   00027A   E0           MOVX      A,@DPTR
   \   00027B   C0E0         PUSH      A
   \   00027D   8E82         MOV       DPL,R6
   \   00027F   8F83         MOV       DPH,R7
   \   000281   D0E0         POP       A
   \   000283   F0           MOVX      @DPTR,A
   \   000284   8E82         MOV       DPL,R6
   \   000286   8F83         MOV       DPH,R7
   \   000288   A3           INC       DPTR
   \   000289   AE82         MOV       R6,DPL
   \   00028B   AF83         MOV       R7,DPH
    556          
    557                *pBuf++ = LO_UINT16( pRsp->deviceInfo.profileID );
   \   00028D   E5..         MOV       A,?V0
   \   00028F   2420         ADD       A,#0x20
   \   000291   F582         MOV       DPL,A
   \   000293   E4           CLR       A
   \   000294   35..         ADDC      A,?V1
   \   000296   F583         MOV       DPH,A
   \   000298   E0           MOVX      A,@DPTR
   \   000299   F8           MOV       R0,A
   \   00029A   A3           INC       DPTR
   \   00029B   E0           MOVX      A,@DPTR
   \   00029C   F9           MOV       R1,A
   \   00029D   E8           MOV       A,R0
   \   00029E   C0E0         PUSH      A
   \   0002A0   8E82         MOV       DPL,R6
   \   0002A2   8F83         MOV       DPH,R7
   \   0002A4   D0E0         POP       A
   \   0002A6   F0           MOVX      @DPTR,A
   \   0002A7   8E82         MOV       DPL,R6
   \   0002A9   8F83         MOV       DPH,R7
   \   0002AB   A3           INC       DPTR
   \   0002AC   AE82         MOV       R6,DPL
   \   0002AE   AF83         MOV       R7,DPH
    558                *pBuf++ = HI_UINT16( pRsp->deviceInfo.profileID );
   \   0002B0   E5..         MOV       A,?V0
   \   0002B2   2420         ADD       A,#0x20
   \   0002B4   F582         MOV       DPL,A
   \   0002B6   E4           CLR       A
   \   0002B7   35..         ADDC      A,?V1
   \   0002B9   F583         MOV       DPH,A
   \   0002BB   E0           MOVX      A,@DPTR
   \   0002BC   F8           MOV       R0,A
   \   0002BD   A3           INC       DPTR
   \   0002BE   E0           MOVX      A,@DPTR
   \   0002BF   F9           MOV       R1,A
   \   0002C0   E4           CLR       A
   \   0002C1   C9           XCH       A,R1
   \   0002C2   F8           MOV       R0,A
   \   0002C3   E8           MOV       A,R0
   \   0002C4   C0E0         PUSH      A
   \   0002C6   8E82         MOV       DPL,R6
   \   0002C8   8F83         MOV       DPH,R7
   \   0002CA   D0E0         POP       A
   \   0002CC   F0           MOVX      @DPTR,A
   \   0002CD   8E82         MOV       DPL,R6
   \   0002CF   8F83         MOV       DPH,R7
   \   0002D1   A3           INC       DPTR
   \   0002D2   AE82         MOV       R6,DPL
   \   0002D4   AF83         MOV       R7,DPH
    559          
    560                *pBuf++ = LO_UINT16( pRsp->deviceInfo.deviceID );
   \   0002D6   E5..         MOV       A,?V0
   \   0002D8   2422         ADD       A,#0x22
   \   0002DA   F582         MOV       DPL,A
   \   0002DC   E4           CLR       A
   \   0002DD   35..         ADDC      A,?V1
   \   0002DF   F583         MOV       DPH,A
   \   0002E1   E0           MOVX      A,@DPTR
   \   0002E2   F8           MOV       R0,A
   \   0002E3   A3           INC       DPTR
   \   0002E4   E0           MOVX      A,@DPTR
   \   0002E5   F9           MOV       R1,A
   \   0002E6   E8           MOV       A,R0
   \   0002E7   C0E0         PUSH      A
   \   0002E9   8E82         MOV       DPL,R6
   \   0002EB   8F83         MOV       DPH,R7
   \   0002ED   D0E0         POP       A
   \   0002EF   F0           MOVX      @DPTR,A
   \   0002F0   8E82         MOV       DPL,R6
   \   0002F2   8F83         MOV       DPH,R7
   \   0002F4   A3           INC       DPTR
   \   0002F5   AE82         MOV       R6,DPL
   \   0002F7   AF83         MOV       R7,DPH
    561                *pBuf++ = HI_UINT16( pRsp->deviceInfo.deviceID );
   \   0002F9   E5..         MOV       A,?V0
   \   0002FB   2422         ADD       A,#0x22
   \   0002FD   F582         MOV       DPL,A
   \   0002FF   E4           CLR       A
   \   000300   35..         ADDC      A,?V1
   \   000302   F583         MOV       DPH,A
   \   000304   E0           MOVX      A,@DPTR
   \   000305   F8           MOV       R0,A
   \   000306   A3           INC       DPTR
   \   000307   E0           MOVX      A,@DPTR
   \   000308   F9           MOV       R1,A
   \   000309   E4           CLR       A
   \   00030A   C9           XCH       A,R1
   \   00030B   F8           MOV       R0,A
   \   00030C   E8           MOV       A,R0
   \   00030D   C0E0         PUSH      A
   \   00030F   8E82         MOV       DPL,R6
   \   000311   8F83         MOV       DPH,R7
   \   000313   D0E0         POP       A
   \   000315   F0           MOVX      @DPTR,A
   \   000316   8E82         MOV       DPL,R6
   \   000318   8F83         MOV       DPH,R7
   \   00031A   A3           INC       DPTR
   \   00031B   AE82         MOV       R6,DPL
   \   00031D   AF83         MOV       R7,DPH
    562          
    563                *pBuf++ = pRsp->deviceInfo.version;
   \   00031F   E5..         MOV       A,?V0
   \   000321   2424         ADD       A,#0x24
   \   000323   F582         MOV       DPL,A
   \   000325   E4           CLR       A
   \   000326   35..         ADDC      A,?V1
   \   000328   F583         MOV       DPH,A
   \   00032A   E0           MOVX      A,@DPTR
   \   00032B   C0E0         PUSH      A
   \   00032D   8E82         MOV       DPL,R6
   \   00032F   8F83         MOV       DPH,R7
   \   000331   D0E0         POP       A
   \   000333   F0           MOVX      @DPTR,A
   \   000334   8E82         MOV       DPL,R6
   \   000336   8F83         MOV       DPH,R7
   \   000338   A3           INC       DPTR
   \   000339   AE82         MOV       R6,DPL
   \   00033B   AF83         MOV       R7,DPH
    564                *pBuf++ = pRsp->deviceInfo.grpIdCnt;
   \   00033D   E5..         MOV       A,?V0
   \   00033F   2425         ADD       A,#0x25
   \   000341   F582         MOV       DPL,A
   \   000343   E4           CLR       A
   \   000344   35..         ADDC      A,?V1
   \   000346   F583         MOV       DPH,A
   \   000348   E0           MOVX      A,@DPTR
   \   000349   C0E0         PUSH      A
   \   00034B   8E82         MOV       DPL,R6
   \   00034D   8F83         MOV       DPH,R7
   \   00034F   D0E0         POP       A
   \   000351   F0           MOVX      @DPTR,A
   \   000352   8E82         MOV       DPL,R6
   \   000354   8F83         MOV       DPH,R7
   \   000356   A3           INC       DPTR
   \   000357   AE82         MOV       R6,DPL
   \   000359   AF83         MOV       R7,DPH
    565              }
    566          
    567              status = bdbTL_SendInterPANCommand( srcEP, dstAddr, COMMAND_TOUCHLINK_SCAN_RSP,
    568                                                  ZCL_FRAME_SERVER_CLIENT_DIR, seqNum, bufLen, buf );
   \                     ??bdbTL_Send_ScanRsp_2:
   \   00035B                ; Setup parameters for call to function bdbTL_SendInterPANCommand
   \   00035B   78..         MOV       R0,#?V2
   \   00035D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000360   E5..         MOV       A,?V5
   \   000362   F5..         MOV       ?V10,A
   \   000364   75..00       MOV       ?V11,#0x0
   \   000367   78..         MOV       R0,#?V10
   \   000369   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00036C   E5..         MOV       A,?V9
   \   00036E   F5..         MOV       ?V10,A
   \   000370   78..         MOV       R0,#?V10
   \   000372   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000375   7D01         MOV       R5,#0x1
   \   000377   7C01         MOV       R4,#0x1
   \   000379   AA..         MOV       R2,?V6
   \   00037B   AB..         MOV       R3,?V7
   \   00037D   A9..         MOV       R1,?V8
   \   00037F   12....       LCALL     `??bdbTL_SendInterPANCommand::?relay`; Banked call to: bdbTL_SendInterPANCommand
   \   000382   7405         MOV       A,#0x5
   \   000384   12....       LCALL     ?DEALLOC_XSTACK8
   \   000387   E9           MOV       A,R1
   \   000388   F5..         MOV       ?V4,A
    569              zcl_mem_free( buf );
   \   00038A                ; Setup parameters for call to function osal_mem_free
   \   00038A   AA..         MOV       R2,?V2
   \   00038C   AB..         MOV       R3,?V3
   \   00038E   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000391   8003         SJMP      ??bdbTL_Send_ScanRsp_3
    570            }
    571            else
    572            {
    573              status = ZMemError;
   \                     ??bdbTL_Send_ScanRsp_1:
   \   000393   75..10       MOV       ?V4,#0x10
    574            }
    575          
    576            return ( status );
   \                     ??bdbTL_Send_ScanRsp_3:
   \   000396   A9..         MOV       R1,?V4
   \   000398   7F0C         MOV       R7,#0xc
   \   00039A   02....       LJMP      ?BANKED_LEAVE_XDATA
    577          }
    578          
    579          /*********************************************************************
    580           * @fn      bdbTL_Send_DeviceInfoRsp
    581           *
    582           * @brief   Call to send out a Device Information Response command
    583           *
    584           * @param   srcEP - sending application's endpoint
    585           * @param   dstAddr - where you want the message to go
    586           * @param   pRsp - response parameters
    587           * @param   seqNum - sequence number
    588           *
    589           * @return  ZStatus_t
    590           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    591          ZStatus_t bdbTL_Send_DeviceInfoRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_DeviceInfoRsp:
    592                                              bdbTLDeviceInfoRsp_t *pRsp, uint8 seqNum )
    593          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V7,R1
   \   000007   8A..         MOV       ?V14,R2
   \   000009   8B..         MOV       ?V15,R3
   \   00000B   8C..         MOV       ?V0,R4
   \   00000D   8D..         MOV       ?V1,R5
   \   00000F   7418         MOV       A,#0x18
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V12,A
    594            uint8 *buf;
    595            uint8 bufLen = TOUCHLINK_CMDLEN_DEVICE_INFO_RSP;
   \   000017   75..07       MOV       ?V6,#0x7
    596            ZStatus_t status;
    597          
    598            // Calculate the total length needed
    599            bufLen += ( pRsp->cnt * TOUCHLINK_CMDLENOPTIONAL_DEVICE_INFO_RSP );
   \   00001A   75F010       MOV       B,#0x10
   \   00001D   85..82       MOV       DPL,?V0
   \   000020   85..83       MOV       DPH,?V1
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   A4           MUL       AB
   \   00002B   25..         ADD       A,?V6
   \   00002D   F5..         MOV       ?V6,A
    600          
    601            buf = zcl_mem_alloc( bufLen );
   \   00002F                ; Setup parameters for call to function osal_mem_alloc
   \   00002F   E5..         MOV       A,?V6
   \   000031   FA           MOV       R2,A
   \   000032   7B00         MOV       R3,#0x0
   \   000034   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000037   8A..         MOV       ?V2,R2
   \   000039   8B..         MOV       ?V3,R3
   \   00003B   85....       MOV       ?V8,?V2
   \   00003E   85....       MOV       ?V9,?V3
    602            if ( buf != NULL )
   \   000041   E5..         MOV       A,?V8
   \   000043   45..         ORL       A,?V9
   \   000045   7003         JNZ       $+5
   \   000047   02....       LJMP      ??bdbTL_Send_DeviceInfoRsp_0 & 0xFFFF
    603            {
    604              uint8 *pBuf = buf;
   \   00004A   AE..         MOV       R6,?V8
   \   00004C   AF..         MOV       R7,?V9
    605              uint8 i;
    606          
    607              pBuf = zcl_buffer_uint32( pBuf, pRsp->transID );
   \   00004E                ; Setup parameters for call to function osal_buffer_uint32
   \   00004E   85..82       MOV       DPL,?V0
   \   000051   85..83       MOV       DPH,?V1
   \   000054   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000057   EE           MOV       A,R6
   \   000058   FA           MOV       R2,A
   \   000059   EF           MOV       A,R7
   \   00005A   FB           MOV       R3,A
   \   00005B   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00005E   7404         MOV       A,#0x4
   \   000060   12....       LCALL     ?DEALLOC_XSTACK8
   \   000063   8A..         MOV       ?V2,R2
   \   000065   8B..         MOV       ?V3,R3
   \   000067   AE..         MOV       R6,?V2
   \   000069   AF..         MOV       R7,?V3
    608          
    609              *pBuf++ = pRsp->numSubDevices;
   \   00006B   85..82       MOV       DPL,?V0
   \   00006E   85..83       MOV       DPH,?V1
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   E0           MOVX      A,@DPTR
   \   000076   C0E0         PUSH      A
   \   000078   8E82         MOV       DPL,R6
   \   00007A   8F83         MOV       DPH,R7
   \   00007C   D0E0         POP       A
   \   00007E   F0           MOVX      @DPTR,A
   \   00007F   8E82         MOV       DPL,R6
   \   000081   8F83         MOV       DPH,R7
   \   000083   A3           INC       DPTR
   \   000084   AE82         MOV       R6,DPL
   \   000086   AF83         MOV       R7,DPH
    610              *pBuf++ = pRsp->startIndex;
   \   000088   85..82       MOV       DPL,?V0
   \   00008B   85..83       MOV       DPH,?V1
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   E0           MOVX      A,@DPTR
   \   000094   C0E0         PUSH      A
   \   000096   8E82         MOV       DPL,R6
   \   000098   8F83         MOV       DPH,R7
   \   00009A   D0E0         POP       A
   \   00009C   F0           MOVX      @DPTR,A
   \   00009D   8E82         MOV       DPL,R6
   \   00009F   8F83         MOV       DPH,R7
   \   0000A1   A3           INC       DPTR
   \   0000A2   AE82         MOV       R6,DPL
   \   0000A4   AF83         MOV       R7,DPH
    611              *pBuf++ = pRsp->cnt;
   \   0000A6   85..82       MOV       DPL,?V0
   \   0000A9   85..83       MOV       DPH,?V1
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   A3           INC       DPTR
   \   0000AF   A3           INC       DPTR
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   C0E0         PUSH      A
   \   0000B5   8E82         MOV       DPL,R6
   \   0000B7   8F83         MOV       DPH,R7
   \   0000B9   D0E0         POP       A
   \   0000BB   F0           MOVX      @DPTR,A
   \   0000BC   8E82         MOV       DPL,R6
   \   0000BE   8F83         MOV       DPH,R7
   \   0000C0   A3           INC       DPTR
   \   0000C1   AE82         MOV       R6,DPL
   \   0000C3   AF83         MOV       R7,DPH
    612          
    613              // Device information record
    614              for ( i = 0; i < pRsp->cnt; i++ )
   \   0000C5   75..00       MOV       ?V4,#0x0
   \                     ??bdbTL_Send_DeviceInfoRsp_1:
   \   0000C8   85..82       MOV       DPL,?V0
   \   0000CB   85..83       MOV       DPH,?V1
   \   0000CE   A3           INC       DPTR
   \   0000CF   A3           INC       DPTR
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   A3           INC       DPTR
   \   0000D3   A3           INC       DPTR
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   F8           MOV       R0,A
   \   0000D6   E5..         MOV       A,?V4
   \   0000D8   C3           CLR       C
   \   0000D9   98           SUBB      A,R0
   \   0000DA   4003         JC        $+5
   \   0000DC   02....       LJMP      ??bdbTL_Send_DeviceInfoRsp_2 & 0xFFFF
    615              {
    616                devInfoRec_t *pRec = &(pRsp->devInfoRec[i]);
   \   0000DF   E5..         MOV       A,?V4
   \   0000E1   F8           MOV       R0,A
   \   0000E2   7900         MOV       R1,#0x0
   \   0000E4   E8           MOV       A,R0
   \   0000E5   75F010       MOV       B,#0x10
   \   0000E8   A4           MUL       AB
   \   0000E9   C8           XCH       A,R0
   \   0000EA   AAF0         MOV       R2,B
   \   0000EC   75F000       MOV       B,#0x0
   \   0000EF   A4           MUL       AB
   \   0000F0   2A           ADD       A,R2
   \   0000F1   FA           MOV       R2,A
   \   0000F2   75F010       MOV       B,#0x10
   \   0000F5   E9           MOV       A,R1
   \   0000F6   A4           MUL       AB
   \   0000F7   2A           ADD       A,R2
   \   0000F8   F9           MOV       R1,A
   \   0000F9   E5..         MOV       A,?V0
   \   0000FB   28           ADD       A,R0
   \   0000FC   F8           MOV       R0,A
   \   0000FD   E5..         MOV       A,?V1
   \   0000FF   39           ADDC      A,R1
   \   000100   F9           MOV       R1,A
   \   000101   E8           MOV       A,R0
   \   000102   2407         ADD       A,#0x7
   \   000104   F5..         MOV       ?V2,A
   \   000106   E4           CLR       A
   \   000107   39           ADDC      A,R1
   \   000108   F5..         MOV       ?V3,A
    617          
    618                pBuf = zcl_cpyExtAddr( pBuf, pRec->ieeeAddr );
   \   00010A                ; Setup parameters for call to function sAddrExtCpy
   \   00010A   AC..         MOV       R4,?V2
   \   00010C   AD..         MOV       R5,?V3
   \   00010E   EE           MOV       A,R6
   \   00010F   FA           MOV       R2,A
   \   000110   EF           MOV       A,R7
   \   000111   FB           MOV       R3,A
   \   000112   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000115   8A..         MOV       ?V10,R2
   \   000117   8B..         MOV       ?V11,R3
   \   000119   AE..         MOV       R6,?V10
   \   00011B   AF..         MOV       R7,?V11
    619          
    620                *pBuf++ = pRec->deviceInfo.endpoint;
   \   00011D   85..82       MOV       DPL,?V2
   \   000120   85..83       MOV       DPH,?V3
   \   000123   A3           INC       DPTR
   \   000124   A3           INC       DPTR
   \   000125   A3           INC       DPTR
   \   000126   A3           INC       DPTR
   \   000127   A3           INC       DPTR
   \   000128   A3           INC       DPTR
   \   000129   A3           INC       DPTR
   \   00012A   A3           INC       DPTR
   \   00012B   E0           MOVX      A,@DPTR
   \   00012C   C0E0         PUSH      A
   \   00012E   8E82         MOV       DPL,R6
   \   000130   8F83         MOV       DPH,R7
   \   000132   D0E0         POP       A
   \   000134   F0           MOVX      @DPTR,A
   \   000135   8E82         MOV       DPL,R6
   \   000137   8F83         MOV       DPH,R7
   \   000139   A3           INC       DPTR
   \   00013A   AE82         MOV       R6,DPL
   \   00013C   AF83         MOV       R7,DPH
    621          
    622                *pBuf++ = LO_UINT16( pRec->deviceInfo.profileID );
   \   00013E   85..82       MOV       DPL,?V2
   \   000141   85..83       MOV       DPH,?V3
   \   000144   A3           INC       DPTR
   \   000145   A3           INC       DPTR
   \   000146   A3           INC       DPTR
   \   000147   A3           INC       DPTR
   \   000148   A3           INC       DPTR
   \   000149   A3           INC       DPTR
   \   00014A   A3           INC       DPTR
   \   00014B   A3           INC       DPTR
   \   00014C   A3           INC       DPTR
   \   00014D   E0           MOVX      A,@DPTR
   \   00014E   F8           MOV       R0,A
   \   00014F   A3           INC       DPTR
   \   000150   E0           MOVX      A,@DPTR
   \   000151   F9           MOV       R1,A
   \   000152   E8           MOV       A,R0
   \   000153   C0E0         PUSH      A
   \   000155   8E82         MOV       DPL,R6
   \   000157   8F83         MOV       DPH,R7
   \   000159   D0E0         POP       A
   \   00015B   F0           MOVX      @DPTR,A
   \   00015C   8E82         MOV       DPL,R6
   \   00015E   8F83         MOV       DPH,R7
   \   000160   A3           INC       DPTR
   \   000161   AE82         MOV       R6,DPL
   \   000163   AF83         MOV       R7,DPH
    623                *pBuf++ = HI_UINT16( pRec->deviceInfo.profileID );
   \   000165   85..82       MOV       DPL,?V2
   \   000168   85..83       MOV       DPH,?V3
   \   00016B   A3           INC       DPTR
   \   00016C   A3           INC       DPTR
   \   00016D   A3           INC       DPTR
   \   00016E   A3           INC       DPTR
   \   00016F   A3           INC       DPTR
   \   000170   A3           INC       DPTR
   \   000171   A3           INC       DPTR
   \   000172   A3           INC       DPTR
   \   000173   A3           INC       DPTR
   \   000174   E0           MOVX      A,@DPTR
   \   000175   F8           MOV       R0,A
   \   000176   A3           INC       DPTR
   \   000177   E0           MOVX      A,@DPTR
   \   000178   F9           MOV       R1,A
   \   000179   E4           CLR       A
   \   00017A   C9           XCH       A,R1
   \   00017B   F8           MOV       R0,A
   \   00017C   E8           MOV       A,R0
   \   00017D   C0E0         PUSH      A
   \   00017F   8E82         MOV       DPL,R6
   \   000181   8F83         MOV       DPH,R7
   \   000183   D0E0         POP       A
   \   000185   F0           MOVX      @DPTR,A
   \   000186   8E82         MOV       DPL,R6
   \   000188   8F83         MOV       DPH,R7
   \   00018A   A3           INC       DPTR
   \   00018B   AE82         MOV       R6,DPL
   \   00018D   AF83         MOV       R7,DPH
    624          
    625                *pBuf++ = LO_UINT16( pRec->deviceInfo.deviceID );
   \   00018F   E5..         MOV       A,?V2
   \   000191   240B         ADD       A,#0xb
   \   000193   F582         MOV       DPL,A
   \   000195   E4           CLR       A
   \   000196   35..         ADDC      A,?V3
   \   000198   F583         MOV       DPH,A
   \   00019A   E0           MOVX      A,@DPTR
   \   00019B   F8           MOV       R0,A
   \   00019C   A3           INC       DPTR
   \   00019D   E0           MOVX      A,@DPTR
   \   00019E   F9           MOV       R1,A
   \   00019F   E8           MOV       A,R0
   \   0001A0   C0E0         PUSH      A
   \   0001A2   8E82         MOV       DPL,R6
   \   0001A4   8F83         MOV       DPH,R7
   \   0001A6   D0E0         POP       A
   \   0001A8   F0           MOVX      @DPTR,A
   \   0001A9   8E82         MOV       DPL,R6
   \   0001AB   8F83         MOV       DPH,R7
   \   0001AD   A3           INC       DPTR
   \   0001AE   AE82         MOV       R6,DPL
   \   0001B0   AF83         MOV       R7,DPH
    626                *pBuf++ = HI_UINT16( pRec->deviceInfo.deviceID );
   \   0001B2   E5..         MOV       A,?V2
   \   0001B4   240B         ADD       A,#0xb
   \   0001B6   F582         MOV       DPL,A
   \   0001B8   E4           CLR       A
   \   0001B9   35..         ADDC      A,?V3
   \   0001BB   F583         MOV       DPH,A
   \   0001BD   E0           MOVX      A,@DPTR
   \   0001BE   F8           MOV       R0,A
   \   0001BF   A3           INC       DPTR
   \   0001C0   E0           MOVX      A,@DPTR
   \   0001C1   F9           MOV       R1,A
   \   0001C2   E4           CLR       A
   \   0001C3   C9           XCH       A,R1
   \   0001C4   F8           MOV       R0,A
   \   0001C5   E8           MOV       A,R0
   \   0001C6   C0E0         PUSH      A
   \   0001C8   8E82         MOV       DPL,R6
   \   0001CA   8F83         MOV       DPH,R7
   \   0001CC   D0E0         POP       A
   \   0001CE   F0           MOVX      @DPTR,A
   \   0001CF   8E82         MOV       DPL,R6
   \   0001D1   8F83         MOV       DPH,R7
   \   0001D3   A3           INC       DPTR
   \   0001D4   AE82         MOV       R6,DPL
   \   0001D6   AF83         MOV       R7,DPH
    627          
    628                *pBuf++ = pRec->deviceInfo.version;
   \   0001D8   E5..         MOV       A,?V2
   \   0001DA   240D         ADD       A,#0xd
   \   0001DC   F582         MOV       DPL,A
   \   0001DE   E4           CLR       A
   \   0001DF   35..         ADDC      A,?V3
   \   0001E1   F583         MOV       DPH,A
   \   0001E3   E0           MOVX      A,@DPTR
   \   0001E4   C0E0         PUSH      A
   \   0001E6   8E82         MOV       DPL,R6
   \   0001E8   8F83         MOV       DPH,R7
   \   0001EA   D0E0         POP       A
   \   0001EC   F0           MOVX      @DPTR,A
   \   0001ED   8E82         MOV       DPL,R6
   \   0001EF   8F83         MOV       DPH,R7
   \   0001F1   A3           INC       DPTR
   \   0001F2   AE82         MOV       R6,DPL
   \   0001F4   AF83         MOV       R7,DPH
    629                *pBuf++ = pRec->deviceInfo.grpIdCnt;
   \   0001F6   E5..         MOV       A,?V2
   \   0001F8   240E         ADD       A,#0xe
   \   0001FA   F582         MOV       DPL,A
   \   0001FC   E4           CLR       A
   \   0001FD   35..         ADDC      A,?V3
   \   0001FF   F583         MOV       DPH,A
   \   000201   E0           MOVX      A,@DPTR
   \   000202   C0E0         PUSH      A
   \   000204   8E82         MOV       DPL,R6
   \   000206   8F83         MOV       DPH,R7
   \   000208   D0E0         POP       A
   \   00020A   F0           MOVX      @DPTR,A
   \   00020B   8E82         MOV       DPL,R6
   \   00020D   8F83         MOV       DPH,R7
   \   00020F   A3           INC       DPTR
   \   000210   AE82         MOV       R6,DPL
   \   000212   AF83         MOV       R7,DPH
    630          
    631                *pBuf++ = pRec->sort;
   \   000214   E5..         MOV       A,?V2
   \   000216   240F         ADD       A,#0xf
   \   000218   F582         MOV       DPL,A
   \   00021A   E4           CLR       A
   \   00021B   35..         ADDC      A,?V3
   \   00021D   F583         MOV       DPH,A
   \   00021F   E0           MOVX      A,@DPTR
   \   000220   C0E0         PUSH      A
   \   000222   8E82         MOV       DPL,R6
   \   000224   8F83         MOV       DPH,R7
   \   000226   D0E0         POP       A
   \   000228   F0           MOVX      @DPTR,A
   \   000229   8E82         MOV       DPL,R6
   \   00022B   8F83         MOV       DPH,R7
   \   00022D   A3           INC       DPTR
   \   00022E   AE82         MOV       R6,DPL
   \   000230   AF83         MOV       R7,DPH
    632              }
   \   000232   05..         INC       ?V4
   \   000234   02....       LJMP      ??bdbTL_Send_DeviceInfoRsp_1 & 0xFFFF
    633          
    634              status = bdbTL_SendInterPANCommand( srcEP, dstAddr, COMMAND_TOUCHLINK_DEVICE_INFO_RSP,
    635                                                  ZCL_FRAME_SERVER_CLIENT_DIR, seqNum, bufLen, buf );
   \                     ??bdbTL_Send_DeviceInfoRsp_2:
   \   000237                ; Setup parameters for call to function bdbTL_SendInterPANCommand
   \   000237   78..         MOV       R0,#?V8
   \   000239   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00023C   E5..         MOV       A,?V6
   \   00023E   F5..         MOV       ?V2,A
   \   000240   75..00       MOV       ?V3,#0x0
   \   000243   78..         MOV       R0,#?V2
   \   000245   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000248   E5..         MOV       A,?V12
   \   00024A   F5..         MOV       ?V2,A
   \   00024C   78..         MOV       R0,#?V2
   \   00024E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000251   7D01         MOV       R5,#0x1
   \   000253   7C03         MOV       R4,#0x3
   \   000255   AA..         MOV       R2,?V14
   \   000257   AB..         MOV       R3,?V15
   \   000259   A9..         MOV       R1,?V7
   \   00025B   12....       LCALL     `??bdbTL_SendInterPANCommand::?relay`; Banked call to: bdbTL_SendInterPANCommand
   \   00025E   7405         MOV       A,#0x5
   \   000260   12....       LCALL     ?DEALLOC_XSTACK8
   \   000263   E9           MOV       A,R1
   \   000264   F5..         MOV       ?V5,A
    636              zcl_mem_free( buf );
   \   000266                ; Setup parameters for call to function osal_mem_free
   \   000266   AA..         MOV       R2,?V8
   \   000268   AB..         MOV       R3,?V9
   \   00026A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00026D   8003         SJMP      ??bdbTL_Send_DeviceInfoRsp_3
    637            }
    638            else
    639            {
    640              status = ZMemError;
   \                     ??bdbTL_Send_DeviceInfoRsp_0:
   \   00026F   75..10       MOV       ?V5,#0x10
    641            }
    642          
    643            return ( status );
   \                     ??bdbTL_Send_DeviceInfoRsp_3:
   \   000272   A9..         MOV       R1,?V5
   \   000274   7F10         MOV       R7,#0x10
   \   000276   02....       LJMP      ?BANKED_LEAVE_XDATA
    644          }
    645          
    646          /*********************************************************************
    647           * @fn      bdbTL_Send_NwkStartRsp
    648           *
    649           * @brief   Call to send out a Network Start Response command
    650           *
    651           * @param   srcEP - sending application's endpoint
    652           * @param   dstAddr - where you want the message to go
    653           * @param   pRsp - response parameters
    654           * @param   seqNum - sequence number
    655           *
    656           * @return  ZStatus_t
    657           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    658          ZStatus_t bdbTL_Send_NwkStartRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_NwkStartRsp:
    659                                            bdbTLNwkStartRsp_t *pRsp, uint8 seqNum )
    660          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V3,R1
   \   000007   8A..         MOV       ?V6,R2
   \   000009   8B..         MOV       ?V7,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   \   00000F   7414         MOV       A,#0x14
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V4,A
    661            uint8 *buf;
    662            ZStatus_t status;
    663          
    664            buf = zcl_mem_alloc( TOUCHLINK_CMDLEN_NWK_START_RSP );
   \   000017                ; Setup parameters for call to function osal_mem_alloc
   \   000017   7A11         MOV       R2,#0x11
   \   000019   7B00         MOV       R3,#0x0
   \   00001B   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001E   8A..         MOV       ?V0,R2
   \   000020   8B..         MOV       ?V1,R3
   \   000022   85....       MOV       ?V8,?V0
   \   000025   85....       MOV       ?V9,?V1
    665            if ( buf != NULL )
   \   000028   E5..         MOV       A,?V8
   \   00002A   45..         ORL       A,?V9
   \   00002C   7003         JNZ       $+5
   \   00002E   02....       LJMP      ??bdbTL_Send_NwkStartRsp_0 & 0xFFFF
    666            {
    667              uint8 *pBuf = buf;
   \   000031   85....       MOV       ?V0,?V8
   \   000034   85....       MOV       ?V1,?V9
    668          
    669              pBuf = zcl_buffer_uint32( pBuf, pRsp->transID );
   \   000037                ; Setup parameters for call to function osal_buffer_uint32
   \   000037   8E82         MOV       DPL,R6
   \   000039   8F83         MOV       DPH,R7
   \   00003B   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00003E   AA..         MOV       R2,?V0
   \   000040   AB..         MOV       R3,?V1
   \   000042   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000045   7404         MOV       A,#0x4
   \   000047   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004A   8A..         MOV       ?V10,R2
   \   00004C   8B..         MOV       ?V11,R3
   \   00004E   85....       MOV       ?V0,?V10
   \   000051   85....       MOV       ?V1,?V11
    670          
    671              *pBuf++ = pRsp->status;
   \   000054   8E82         MOV       DPL,R6
   \   000056   8F83         MOV       DPH,R7
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   C0E0         PUSH      A
   \   00005F   85..82       MOV       DPL,?V0
   \   000062   85..83       MOV       DPH,?V1
   \   000065   D0E0         POP       A
   \   000067   F0           MOVX      @DPTR,A
   \   000068   85..82       MOV       DPL,?V0
   \   00006B   85..83       MOV       DPH,?V1
   \   00006E   A3           INC       DPTR
   \   00006F   8582..       MOV       ?V0,DPL
   \   000072   8583..       MOV       ?V1,DPH
    672          
    673              pBuf = zcl_cpyExtAddr( pBuf, pRsp->extendedPANID );
   \   000075                ; Setup parameters for call to function sAddrExtCpy
   \   000075   EE           MOV       A,R6
   \   000076   2405         ADD       A,#0x5
   \   000078   FC           MOV       R4,A
   \   000079   E4           CLR       A
   \   00007A   3F           ADDC      A,R7
   \   00007B   FD           MOV       R5,A
   \   00007C   AA..         MOV       R2,?V0
   \   00007E   AB..         MOV       R3,?V1
   \   000080   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000083   8A..         MOV       ?V10,R2
   \   000085   8B..         MOV       ?V11,R3
   \   000087   85....       MOV       ?V0,?V10
   \   00008A   85....       MOV       ?V1,?V11
    674          
    675              *pBuf++ = pRsp->nwkUpdateId;
   \   00008D   EE           MOV       A,R6
   \   00008E   240D         ADD       A,#0xd
   \   000090   F582         MOV       DPL,A
   \   000092   E4           CLR       A
   \   000093   3F           ADDC      A,R7
   \   000094   F583         MOV       DPH,A
   \   000096   E0           MOVX      A,@DPTR
   \   000097   C0E0         PUSH      A
   \   000099   85..82       MOV       DPL,?V0
   \   00009C   85..83       MOV       DPH,?V1
   \   00009F   D0E0         POP       A
   \   0000A1   F0           MOVX      @DPTR,A
   \   0000A2   85..82       MOV       DPL,?V0
   \   0000A5   85..83       MOV       DPH,?V1
   \   0000A8   A3           INC       DPTR
   \   0000A9   8582..       MOV       ?V0,DPL
   \   0000AC   8583..       MOV       ?V1,DPH
    676              *pBuf++ = pRsp->logicalChannel;
   \   0000AF   EE           MOV       A,R6
   \   0000B0   240E         ADD       A,#0xe
   \   0000B2   F582         MOV       DPL,A
   \   0000B4   E4           CLR       A
   \   0000B5   3F           ADDC      A,R7
   \   0000B6   F583         MOV       DPH,A
   \   0000B8   E0           MOVX      A,@DPTR
   \   0000B9   C0E0         PUSH      A
   \   0000BB   85..82       MOV       DPL,?V0
   \   0000BE   85..83       MOV       DPH,?V1
   \   0000C1   D0E0         POP       A
   \   0000C3   F0           MOVX      @DPTR,A
   \   0000C4   85..82       MOV       DPL,?V0
   \   0000C7   85..83       MOV       DPH,?V1
   \   0000CA   A3           INC       DPTR
   \   0000CB   8582..       MOV       ?V0,DPL
   \   0000CE   8583..       MOV       ?V1,DPH
    677          
    678              *pBuf++ = LO_UINT16( pRsp->panId );
   \   0000D1   EE           MOV       A,R6
   \   0000D2   240F         ADD       A,#0xf
   \   0000D4   F582         MOV       DPL,A
   \   0000D6   E4           CLR       A
   \   0000D7   3F           ADDC      A,R7
   \   0000D8   F583         MOV       DPH,A
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   F8           MOV       R0,A
   \   0000DC   A3           INC       DPTR
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   F9           MOV       R1,A
   \   0000DF   E8           MOV       A,R0
   \   0000E0   C0E0         PUSH      A
   \   0000E2   85..82       MOV       DPL,?V0
   \   0000E5   85..83       MOV       DPH,?V1
   \   0000E8   D0E0         POP       A
   \   0000EA   F0           MOVX      @DPTR,A
   \   0000EB   85..82       MOV       DPL,?V0
   \   0000EE   85..83       MOV       DPH,?V1
   \   0000F1   A3           INC       DPTR
   \   0000F2   8582..       MOV       ?V0,DPL
   \   0000F5   8583..       MOV       ?V1,DPH
    679              *pBuf++ = HI_UINT16( pRsp->panId );
   \   0000F8   EE           MOV       A,R6
   \   0000F9   240F         ADD       A,#0xf
   \   0000FB   F582         MOV       DPL,A
   \   0000FD   E4           CLR       A
   \   0000FE   3F           ADDC      A,R7
   \   0000FF   F583         MOV       DPH,A
   \   000101   E0           MOVX      A,@DPTR
   \   000102   F8           MOV       R0,A
   \   000103   A3           INC       DPTR
   \   000104   E0           MOVX      A,@DPTR
   \   000105   F9           MOV       R1,A
   \   000106   E4           CLR       A
   \   000107   C9           XCH       A,R1
   \   000108   F8           MOV       R0,A
   \   000109   E8           MOV       A,R0
   \   00010A   C0E0         PUSH      A
   \   00010C   85..82       MOV       DPL,?V0
   \   00010F   85..83       MOV       DPH,?V1
   \   000112   D0E0         POP       A
   \   000114   F0           MOVX      @DPTR,A
   \   000115   85..82       MOV       DPL,?V0
   \   000118   85..83       MOV       DPH,?V1
   \   00011B   A3           INC       DPTR
   \   00011C   8582..       MOV       ?V0,DPL
   \   00011F   8583..       MOV       ?V1,DPH
    680          
    681              status = bdbTL_SendInterPANCommand( srcEP, dstAddr, COMMAND_TOUCHLINK_NWK_START_RSP,
    682                                                  ZCL_FRAME_SERVER_CLIENT_DIR, seqNum, TOUCHLINK_CMDLEN_NWK_START_RSP, buf );
   \   000122                ; Setup parameters for call to function bdbTL_SendInterPANCommand
   \   000122   78..         MOV       R0,#?V8
   \   000124   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000127   75..11       MOV       ?V10,#0x11
   \   00012A   75..00       MOV       ?V11,#0x0
   \   00012D   78..         MOV       R0,#?V10
   \   00012F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000132   E5..         MOV       A,?V4
   \   000134   F5..         MOV       ?V5,A
   \   000136   78..         MOV       R0,#?V5
   \   000138   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00013B   7D01         MOV       R5,#0x1
   \   00013D   7C11         MOV       R4,#0x11
   \   00013F   AA..         MOV       R2,?V6
   \   000141   AB..         MOV       R3,?V7
   \   000143   A9..         MOV       R1,?V3
   \   000145   12....       LCALL     `??bdbTL_SendInterPANCommand::?relay`; Banked call to: bdbTL_SendInterPANCommand
   \   000148   7405         MOV       A,#0x5
   \   00014A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00014D   E9           MOV       A,R1
   \   00014E   F5..         MOV       ?V2,A
    683              zcl_mem_free( buf );
   \   000150                ; Setup parameters for call to function osal_mem_free
   \   000150   AA..         MOV       R2,?V8
   \   000152   AB..         MOV       R3,?V9
   \   000154   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000157   8003         SJMP      ??bdbTL_Send_NwkStartRsp_1
    684            }
    685            else
    686            {
    687              status = ZMemError;
   \                     ??bdbTL_Send_NwkStartRsp_0:
   \   000159   75..10       MOV       ?V2,#0x10
    688            }
    689          
    690            return ( status );
   \                     ??bdbTL_Send_NwkStartRsp_1:
   \   00015C   A9..         MOV       R1,?V2
   \   00015E   7F0C         MOV       R7,#0xc
   \   000160   02....       LJMP      ?BANKED_LEAVE_XDATA
    691          }
    692          
    693          /*********************************************************************
    694           * @fn      bdbTL_Send_NwkJoinRsp
    695           *
    696           * @brief   Call to send out a Network Join Response command
    697           *
    698           * @param   srcEP - sending application's endpoint
    699           * @param   dstAddr - where you want the message to go
    700           * @param   pRsp - response parameters
    701           * @param   cmd - COMMAND_TOUCHLINK_NWK_JOIN_RTR_RSP or COMMAND_TOUCHLINK_NWK_JOIN_ED_RSP
    702           * @param   seqNum - sequence number
    703           *
    704           * @return  ZStatus_t
    705           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    706          ZStatus_t bdbTL_Send_NwkJoinRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_NwkJoinRsp:
    707                                           bdbTLNwkJoinRsp_t *pRsp, uint8 cmd, uint8 seqNum )
    708          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V1,R1
   \   00000C   8A..         MOV       ?V2,R2
   \   00000E   8B..         MOV       ?V3,R3
   \   000010   EC           MOV       A,R4
   \   000011   FE           MOV       R6,A
   \   000012   ED           MOV       A,R5
   \   000013   FF           MOV       R7,A
   \   000014   7417         MOV       A,#0x17
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V4,A
   \   00001C   7418         MOV       A,#0x18
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F5..         MOV       ?V0,A
    709            uint8 buf[TOUCHLINK_CMDLEN_NWK_JOIN_RSP];
    710          
    711            VOID zcl_buffer_uint32( buf, pRsp->transID );
   \   000024                ; Setup parameters for call to function osal_buffer_uint32
   \   000024   8E82         MOV       DPL,R6
   \   000026   8F83         MOV       DPH,R7
   \   000028   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00002B   7404         MOV       A,#0x4
   \   00002D   12....       LCALL     ?XSTACK_DISP101_8
   \   000030   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000033   7404         MOV       A,#0x4
   \   000035   12....       LCALL     ?DEALLOC_XSTACK8
   \   000038   8A..         MOV       ?V8,R2
   \   00003A   8B..         MOV       ?V9,R3
   \   00003C   85....       MOV       ?V6,?V8
   \   00003F   85....       MOV       ?V7,?V9
    712          
    713            buf[4] = pRsp->status;
   \   000042   8E82         MOV       DPL,R6
   \   000044   8F83         MOV       DPH,R7
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   C0E0         PUSH      A
   \   00004D   7404         MOV       A,#0x4
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   D0E0         POP       A
   \   000054   F0           MOVX      @DPTR,A
    714          
    715            return bdbTL_SendInterPANCommand( srcEP, dstAddr, cmd, ZCL_FRAME_SERVER_CLIENT_DIR, seqNum,
    716                                              TOUCHLINK_CMDLEN_NWK_JOIN_RSP, buf );
   \   000055                ; Setup parameters for call to function bdbTL_SendInterPANCommand
   \   000055   A8..         MOV       R0,?XSP + 0
   \   000057   A9..         MOV       R1,?XSP + 1
   \   000059   88..         MOV       ?V8,R0
   \   00005B   89..         MOV       ?V9,R1
   \   00005D   78..         MOV       R0,#?V8
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000062   75..05       MOV       ?V8,#0x5
   \   000065   75..00       MOV       ?V9,#0x0
   \   000068   78..         MOV       R0,#?V8
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006D   E5..         MOV       A,?V0
   \   00006F   F5..         MOV       ?V5,A
   \   000071   78..         MOV       R0,#?V5
   \   000073   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000076   7D01         MOV       R5,#0x1
   \   000078   AC..         MOV       R4,?V4
   \   00007A   AA..         MOV       R2,?V2
   \   00007C   AB..         MOV       R3,?V3
   \   00007E   A9..         MOV       R1,?V1
   \   000080   12....       LCALL     `??bdbTL_SendInterPANCommand::?relay`; Banked call to: bdbTL_SendInterPANCommand
   \   000083   7405         MOV       A,#0x5
   \   000085   12....       LCALL     ?DEALLOC_XSTACK8
   \   000088   7405         MOV       A,#0x5
   \   00008A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008D   7F0A         MOV       R7,#0xa
   \   00008F   02....       LJMP      ?BANKED_LEAVE_XDATA
    717          }
    718          
    719          /*********************************************************************
    720           * @fn      bdbTL_Send_EndpointInfo
    721           *
    722           * @brief   Call to send out an Endpoint Information command
    723           *
    724           * @param   srcEP - sending application's endpoint
    725           * @param   dstAddr - where you want the message to go
    726           * @param   pCmd - cmd parameters
    727           * @param   disableDefaultRsp - whether to disable the Default Response command
    728           * @param   seqNum - sequence number
    729           *
    730           * @return  ZStatus_t
    731           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    732          ZStatus_t bdbTL_Send_EndpointInfo( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_EndpointInfo:
    733                                             bdbTLEndpointInfo_t *pCmd,
    734                                             uint8 disableDefaultRsp, uint8 seqNum )
    735          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V5,R1
   \   000007   8A..         MOV       ?V10,R2
   \   000009   8B..         MOV       ?V11,R3
   \   00000B   8C..         MOV       ?V0,R4
   \   00000D   8D..         MOV       ?V1,R5
   \   00000F   7414         MOV       A,#0x14
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V7,A
   \   000017   7415         MOV       A,#0x15
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V6,A
    736            uint8 *buf;
    737            ZStatus_t status;
    738          
    739            buf = zcl_mem_alloc( TOUCHLINK_CMDLEN_EP_INFO );
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   7A10         MOV       R2,#0x10
   \   000021   7B00         MOV       R3,#0x0
   \   000023   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000026   8A..         MOV       ?V8,R2
   \   000028   8B..         MOV       ?V9,R3
   \   00002A   85....       MOV       ?V2,?V8
   \   00002D   85....       MOV       ?V3,?V9
    740            if ( buf != NULL )
   \   000030   E5..         MOV       A,?V2
   \   000032   45..         ORL       A,?V3
   \   000034   7003         JNZ       $+5
   \   000036   02....       LJMP      ??bdbTL_Send_EndpointInfo_0 & 0xFFFF
    741            {
    742              uint8 *pBuf = buf;
   \   000039   AE..         MOV       R6,?V2
   \   00003B   AF..         MOV       R7,?V3
    743          
    744              pBuf = zcl_cpyExtAddr( pBuf, pCmd->ieeeAddr );
   \   00003D                ; Setup parameters for call to function sAddrExtCpy
   \   00003D   AC..         MOV       R4,?V0
   \   00003F   AD..         MOV       R5,?V1
   \   000041   EE           MOV       A,R6
   \   000042   FA           MOV       R2,A
   \   000043   EF           MOV       A,R7
   \   000044   FB           MOV       R3,A
   \   000045   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000048   8A..         MOV       ?V8,R2
   \   00004A   8B..         MOV       ?V9,R3
   \   00004C   AE..         MOV       R6,?V8
   \   00004E   AF..         MOV       R7,?V9
    745          
    746              *pBuf++ = LO_UINT16( pCmd->nwkAddr );
   \   000050   85..82       MOV       DPL,?V0
   \   000053   85..83       MOV       DPH,?V1
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F8           MOV       R0,A
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   F9           MOV       R1,A
   \   000063   E8           MOV       A,R0
   \   000064   C0E0         PUSH      A
   \   000066   8E82         MOV       DPL,R6
   \   000068   8F83         MOV       DPH,R7
   \   00006A   D0E0         POP       A
   \   00006C   F0           MOVX      @DPTR,A
   \   00006D   8E82         MOV       DPL,R6
   \   00006F   8F83         MOV       DPH,R7
   \   000071   A3           INC       DPTR
   \   000072   AE82         MOV       R6,DPL
   \   000074   AF83         MOV       R7,DPH
    747              *pBuf++ = HI_UINT16( pCmd->nwkAddr );
   \   000076   85..82       MOV       DPL,?V0
   \   000079   85..83       MOV       DPH,?V1
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   E0           MOVX      A,@DPTR
   \   000085   F8           MOV       R0,A
   \   000086   A3           INC       DPTR
   \   000087   E0           MOVX      A,@DPTR
   \   000088   F9           MOV       R1,A
   \   000089   E4           CLR       A
   \   00008A   C9           XCH       A,R1
   \   00008B   F8           MOV       R0,A
   \   00008C   E8           MOV       A,R0
   \   00008D   C0E0         PUSH      A
   \   00008F   8E82         MOV       DPL,R6
   \   000091   8F83         MOV       DPH,R7
   \   000093   D0E0         POP       A
   \   000095   F0           MOVX      @DPTR,A
   \   000096   8E82         MOV       DPL,R6
   \   000098   8F83         MOV       DPH,R7
   \   00009A   A3           INC       DPTR
   \   00009B   AE82         MOV       R6,DPL
   \   00009D   AF83         MOV       R7,DPH
    748          
    749              *pBuf++ = pCmd->endpoint;
   \   00009F   85..82       MOV       DPL,?V0
   \   0000A2   85..83       MOV       DPH,?V1
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   A3           INC       DPTR
   \   0000AB   A3           INC       DPTR
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   A3           INC       DPTR
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   C0E0         PUSH      A
   \   0000B2   8E82         MOV       DPL,R6
   \   0000B4   8F83         MOV       DPH,R7
   \   0000B6   D0E0         POP       A
   \   0000B8   F0           MOVX      @DPTR,A
   \   0000B9   8E82         MOV       DPL,R6
   \   0000BB   8F83         MOV       DPH,R7
   \   0000BD   A3           INC       DPTR
   \   0000BE   AE82         MOV       R6,DPL
   \   0000C0   AF83         MOV       R7,DPH
    750          
    751              *pBuf++ = LO_UINT16( pCmd->profileID );
   \   0000C2   E5..         MOV       A,?V0
   \   0000C4   240B         ADD       A,#0xb
   \   0000C6   F582         MOV       DPL,A
   \   0000C8   E4           CLR       A
   \   0000C9   35..         ADDC      A,?V1
   \   0000CB   F583         MOV       DPH,A
   \   0000CD   E0           MOVX      A,@DPTR
   \   0000CE   F8           MOV       R0,A
   \   0000CF   A3           INC       DPTR
   \   0000D0   E0           MOVX      A,@DPTR
   \   0000D1   F9           MOV       R1,A
   \   0000D2   E8           MOV       A,R0
   \   0000D3   C0E0         PUSH      A
   \   0000D5   8E82         MOV       DPL,R6
   \   0000D7   8F83         MOV       DPH,R7
   \   0000D9   D0E0         POP       A
   \   0000DB   F0           MOVX      @DPTR,A
   \   0000DC   8E82         MOV       DPL,R6
   \   0000DE   8F83         MOV       DPH,R7
   \   0000E0   A3           INC       DPTR
   \   0000E1   AE82         MOV       R6,DPL
   \   0000E3   AF83         MOV       R7,DPH
    752              *pBuf++ = HI_UINT16( pCmd->profileID );
   \   0000E5   E5..         MOV       A,?V0
   \   0000E7   240B         ADD       A,#0xb
   \   0000E9   F582         MOV       DPL,A
   \   0000EB   E4           CLR       A
   \   0000EC   35..         ADDC      A,?V1
   \   0000EE   F583         MOV       DPH,A
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   F8           MOV       R0,A
   \   0000F2   A3           INC       DPTR
   \   0000F3   E0           MOVX      A,@DPTR
   \   0000F4   F9           MOV       R1,A
   \   0000F5   E4           CLR       A
   \   0000F6   C9           XCH       A,R1
   \   0000F7   F8           MOV       R0,A
   \   0000F8   E8           MOV       A,R0
   \   0000F9   C0E0         PUSH      A
   \   0000FB   8E82         MOV       DPL,R6
   \   0000FD   8F83         MOV       DPH,R7
   \   0000FF   D0E0         POP       A
   \   000101   F0           MOVX      @DPTR,A
   \   000102   8E82         MOV       DPL,R6
   \   000104   8F83         MOV       DPH,R7
   \   000106   A3           INC       DPTR
   \   000107   AE82         MOV       R6,DPL
   \   000109   AF83         MOV       R7,DPH
    753          
    754              *pBuf++ = LO_UINT16( pCmd->deviceID );
   \   00010B   E5..         MOV       A,?V0
   \   00010D   240D         ADD       A,#0xd
   \   00010F   F582         MOV       DPL,A
   \   000111   E4           CLR       A
   \   000112   35..         ADDC      A,?V1
   \   000114   F583         MOV       DPH,A
   \   000116   E0           MOVX      A,@DPTR
   \   000117   F8           MOV       R0,A
   \   000118   A3           INC       DPTR
   \   000119   E0           MOVX      A,@DPTR
   \   00011A   F9           MOV       R1,A
   \   00011B   E8           MOV       A,R0
   \   00011C   C0E0         PUSH      A
   \   00011E   8E82         MOV       DPL,R6
   \   000120   8F83         MOV       DPH,R7
   \   000122   D0E0         POP       A
   \   000124   F0           MOVX      @DPTR,A
   \   000125   8E82         MOV       DPL,R6
   \   000127   8F83         MOV       DPH,R7
   \   000129   A3           INC       DPTR
   \   00012A   AE82         MOV       R6,DPL
   \   00012C   AF83         MOV       R7,DPH
    755              *pBuf++ = HI_UINT16( pCmd->deviceID );
   \   00012E   E5..         MOV       A,?V0
   \   000130   240D         ADD       A,#0xd
   \   000132   F582         MOV       DPL,A
   \   000134   E4           CLR       A
   \   000135   35..         ADDC      A,?V1
   \   000137   F583         MOV       DPH,A
   \   000139   E0           MOVX      A,@DPTR
   \   00013A   F8           MOV       R0,A
   \   00013B   A3           INC       DPTR
   \   00013C   E0           MOVX      A,@DPTR
   \   00013D   F9           MOV       R1,A
   \   00013E   E4           CLR       A
   \   00013F   C9           XCH       A,R1
   \   000140   F8           MOV       R0,A
   \   000141   E8           MOV       A,R0
   \   000142   C0E0         PUSH      A
   \   000144   8E82         MOV       DPL,R6
   \   000146   8F83         MOV       DPH,R7
   \   000148   D0E0         POP       A
   \   00014A   F0           MOVX      @DPTR,A
   \   00014B   8E82         MOV       DPL,R6
   \   00014D   8F83         MOV       DPH,R7
   \   00014F   A3           INC       DPTR
   \   000150   AE82         MOV       R6,DPL
   \   000152   AF83         MOV       R7,DPH
    756          
    757              *pBuf++ = pCmd->version;
   \   000154   E5..         MOV       A,?V0
   \   000156   240F         ADD       A,#0xf
   \   000158   F582         MOV       DPL,A
   \   00015A   E4           CLR       A
   \   00015B   35..         ADDC      A,?V1
   \   00015D   F583         MOV       DPH,A
   \   00015F   E0           MOVX      A,@DPTR
   \   000160   C0E0         PUSH      A
   \   000162   8E82         MOV       DPL,R6
   \   000164   8F83         MOV       DPH,R7
   \   000166   D0E0         POP       A
   \   000168   F0           MOVX      @DPTR,A
   \   000169   8E82         MOV       DPL,R6
   \   00016B   8F83         MOV       DPH,R7
   \   00016D   A3           INC       DPTR
   \   00016E   AE82         MOV       R6,DPL
   \   000170   AF83         MOV       R7,DPH
    758          
    759              status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_TOUCHLINK,
    760                                        COMMAND_TOUCHLINK_EP_INFO, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    761                                        disableDefaultRsp, 0, seqNum, TOUCHLINK_CMDLEN_EP_INFO, buf );
   \   000172                ; Setup parameters for call to function zcl_SendCommand
   \   000172   78..         MOV       R0,#?V2
   \   000174   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000177   75..10       MOV       ?V8,#0x10
   \   00017A   75..00       MOV       ?V9,#0x0
   \   00017D   78..         MOV       R0,#?V8
   \   00017F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000182   E5..         MOV       A,?V6
   \   000184   F5..         MOV       ?V8,A
   \   000186   78..         MOV       R0,#?V8
   \   000188   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00018B   E4           CLR       A
   \   00018C   F5..         MOV       ?V8,A
   \   00018E   F5..         MOV       ?V9,A
   \   000190   78..         MOV       R0,#?V8
   \   000192   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000195   E5..         MOV       A,?V7
   \   000197   F5..         MOV       ?V8,A
   \   000199   78..         MOV       R0,#?V8
   \   00019B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00019E   75..01       MOV       ?V8,#0x1
   \   0001A1   78..         MOV       R0,#?V8
   \   0001A3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001A6   75..01       MOV       ?V8,#0x1
   \   0001A9   78..         MOV       R0,#?V8
   \   0001AB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001AE   75..40       MOV       ?V8,#0x40
   \   0001B1   78..         MOV       R0,#?V8
   \   0001B3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001B6   7C00         MOV       R4,#0x0
   \   0001B8   7D10         MOV       R5,#0x10
   \   0001BA   AA..         MOV       R2,?V10
   \   0001BC   AB..         MOV       R3,?V11
   \   0001BE   A9..         MOV       R1,?V5
   \   0001C0   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0001C3   740B         MOV       A,#0xb
   \   0001C5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001C8   E9           MOV       A,R1
   \   0001C9   F5..         MOV       ?V4,A
    762              zcl_mem_free( buf );
   \   0001CB                ; Setup parameters for call to function osal_mem_free
   \   0001CB   AA..         MOV       R2,?V2
   \   0001CD   AB..         MOV       R3,?V3
   \   0001CF   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001D2   8003         SJMP      ??bdbTL_Send_EndpointInfo_1
    763            }
    764            else
    765            {
    766              status = ZMemError;
   \                     ??bdbTL_Send_EndpointInfo_0:
   \   0001D4   75..10       MOV       ?V4,#0x10
    767            }
    768          
    769            return ( status );
   \                     ??bdbTL_Send_EndpointInfo_1:
   \   0001D7   A9..         MOV       R1,?V4
   \   0001D9   7F0C         MOV       R7,#0xc
   \   0001DB   02....       LJMP      ?BANKED_LEAVE_XDATA
    770          }
    771          
    772          /*********************************************************************
    773           * @fn      bdbTL_Send_GetGrpIDsRsp
    774           *
    775           * @brief   Call to send out a Get Group Identifiers Response command
    776           *
    777           * @param   srcEP - sending application's endpoint
    778           * @param   dstAddr - where you want the message to go
    779           * @param   pRsp - response parameters
    780           * @param   disableDefaultRsp - whether to disable the Default Response command
    781           * @param   seqNum - sequence number
    782           *
    783           * @return  ZStatus_t
    784           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    785          ZStatus_t bdbTL_Send_GetGrpIDsRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_GetGrpIDsRsp:
    786                                              bdbTLGetGrpIDsRsp_t *pRsp,
    787                                              uint8 disableDefaultRsp, uint8 seqNum )
    788          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V5,R1
   \   000007   8A..         MOV       ?V12,R2
   \   000009   8B..         MOV       ?V13,R3
   \   00000B   8C..         MOV       ?V0,R4
   \   00000D   8D..         MOV       ?V1,R5
   \   00000F   7416         MOV       A,#0x16
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V11,A
   \   000017   7417         MOV       A,#0x17
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V10,A
    789            uint8 *buf;
    790            uint8 bufLen = TOUCHLINK_CMDLEN_GET_GRP_IDS_RSP;
   \   00001F   75..03       MOV       ?V4,#0x3
    791            ZStatus_t status;
    792          
    793            // Calculate the total length needed
    794            bufLen += ( pRsp->cnt * TOUCHLINK_CMDLENOPTIONAL_GET_GRP_IDS_RSP );
   \   000022   75F003       MOV       B,#0x3
   \   000025   85..82       MOV       DPL,?V0
   \   000028   85..83       MOV       DPH,?V1
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   A4           MUL       AB
   \   00002F   25..         ADD       A,?V4
   \   000031   F5..         MOV       ?V4,A
    795          
    796            buf = zcl_mem_alloc( bufLen );
   \   000033                ; Setup parameters for call to function osal_mem_alloc
   \   000033   E5..         MOV       A,?V4
   \   000035   FA           MOV       R2,A
   \   000036   7B00         MOV       R3,#0x0
   \   000038   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003B   8A..         MOV       ?V8,R2
   \   00003D   8B..         MOV       ?V9,R3
   \   00003F   85....       MOV       ?V6,?V8
   \   000042   85....       MOV       ?V7,?V9
    797            if ( buf != NULL )
   \   000045   E5..         MOV       A,?V6
   \   000047   45..         ORL       A,?V7
   \   000049   7003         JNZ       $+5
   \   00004B   02....       LJMP      ??bdbTL_Send_GetGrpIDsRsp_0 & 0xFFFF
    798            {
    799              uint8 *pBuf = buf;
   \   00004E   AE..         MOV       R6,?V6
   \   000050   AF..         MOV       R7,?V7
    800              uint8 i;
    801          
    802              *pBuf++ = pRsp->total;
   \   000052   85..82       MOV       DPL,?V0
   \   000055   85..83       MOV       DPH,?V1
   \   000058   E0           MOVX      A,@DPTR
   \   000059   C0E0         PUSH      A
   \   00005B   8E82         MOV       DPL,R6
   \   00005D   8F83         MOV       DPH,R7
   \   00005F   D0E0         POP       A
   \   000061   F0           MOVX      @DPTR,A
   \   000062   8E82         MOV       DPL,R6
   \   000064   8F83         MOV       DPH,R7
   \   000066   A3           INC       DPTR
   \   000067   AE82         MOV       R6,DPL
   \   000069   AF83         MOV       R7,DPH
    803              *pBuf++ = pRsp->startIndex;
   \   00006B   85..82       MOV       DPL,?V0
   \   00006E   85..83       MOV       DPH,?V1
   \   000071   A3           INC       DPTR
   \   000072   E0           MOVX      A,@DPTR
   \   000073   C0E0         PUSH      A
   \   000075   8E82         MOV       DPL,R6
   \   000077   8F83         MOV       DPH,R7
   \   000079   D0E0         POP       A
   \   00007B   F0           MOVX      @DPTR,A
   \   00007C   8E82         MOV       DPL,R6
   \   00007E   8F83         MOV       DPH,R7
   \   000080   A3           INC       DPTR
   \   000081   AE82         MOV       R6,DPL
   \   000083   AF83         MOV       R7,DPH
    804              *pBuf++ = pRsp->cnt;
   \   000085   85..82       MOV       DPL,?V0
   \   000088   85..83       MOV       DPH,?V1
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   C0E0         PUSH      A
   \   000090   8E82         MOV       DPL,R6
   \   000092   8F83         MOV       DPH,R7
   \   000094   D0E0         POP       A
   \   000096   F0           MOVX      @DPTR,A
   \   000097   8E82         MOV       DPL,R6
   \   000099   8F83         MOV       DPH,R7
   \   00009B   A3           INC       DPTR
   \   00009C   AE82         MOV       R6,DPL
   \   00009E   AF83         MOV       R7,DPH
    805          
    806              // Group information record
    807              for ( i = 0; i < pRsp->cnt; i++ )
   \   0000A0   75..00       MOV       ?V2,#0x0
   \                     ??bdbTL_Send_GetGrpIDsRsp_1:
   \   0000A3   85..82       MOV       DPL,?V0
   \   0000A6   85..83       MOV       DPH,?V1
   \   0000A9   A3           INC       DPTR
   \   0000AA   A3           INC       DPTR
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   F8           MOV       R0,A
   \   0000AD   E5..         MOV       A,?V2
   \   0000AF   C3           CLR       C
   \   0000B0   98           SUBB      A,R0
   \   0000B1   4003         JC        $+5
   \   0000B3   02....       LJMP      ??bdbTL_Send_GetGrpIDsRsp_2 & 0xFFFF
    808              {
    809                grpInfoRec_t *pRec = &(pRsp->grpInfoRec[i]);
   \   0000B6   E5..         MOV       A,?V2
   \   0000B8   F8           MOV       R0,A
   \   0000B9   7900         MOV       R1,#0x0
   \   0000BB   E8           MOV       A,R0
   \   0000BC   75F003       MOV       B,#0x3
   \   0000BF   A4           MUL       AB
   \   0000C0   C8           XCH       A,R0
   \   0000C1   AAF0         MOV       R2,B
   \   0000C3   75F000       MOV       B,#0x0
   \   0000C6   A4           MUL       AB
   \   0000C7   2A           ADD       A,R2
   \   0000C8   FA           MOV       R2,A
   \   0000C9   75F003       MOV       B,#0x3
   \   0000CC   E9           MOV       A,R1
   \   0000CD   A4           MUL       AB
   \   0000CE   2A           ADD       A,R2
   \   0000CF   F9           MOV       R1,A
   \   0000D0   85..82       MOV       DPL,?V0
   \   0000D3   85..83       MOV       DPH,?V1
   \   0000D6   A3           INC       DPTR
   \   0000D7   A3           INC       DPTR
   \   0000D8   A3           INC       DPTR
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   28           ADD       A,R0
   \   0000DB   F8           MOV       R0,A
   \   0000DC   A3           INC       DPTR
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   39           ADDC      A,R1
   \   0000DF   F9           MOV       R1,A
    810          
    811                *pBuf++ = LO_UINT16( pRec->grpID );
   \   0000E0   8882         MOV       DPL,R0
   \   0000E2   8983         MOV       DPH,R1
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   FA           MOV       R2,A
   \   0000E6   A3           INC       DPTR
   \   0000E7   E0           MOVX      A,@DPTR
   \   0000E8   FB           MOV       R3,A
   \   0000E9   EA           MOV       A,R2
   \   0000EA   C0E0         PUSH      A
   \   0000EC   8E82         MOV       DPL,R6
   \   0000EE   8F83         MOV       DPH,R7
   \   0000F0   D0E0         POP       A
   \   0000F2   F0           MOVX      @DPTR,A
   \   0000F3   8E82         MOV       DPL,R6
   \   0000F5   8F83         MOV       DPH,R7
   \   0000F7   A3           INC       DPTR
   \   0000F8   AE82         MOV       R6,DPL
   \   0000FA   AF83         MOV       R7,DPH
    812                *pBuf++ = HI_UINT16( pRec->grpID );
   \   0000FC   8882         MOV       DPL,R0
   \   0000FE   8983         MOV       DPH,R1
   \   000100   E0           MOVX      A,@DPTR
   \   000101   FA           MOV       R2,A
   \   000102   A3           INC       DPTR
   \   000103   E0           MOVX      A,@DPTR
   \   000104   FB           MOV       R3,A
   \   000105   E4           CLR       A
   \   000106   CB           XCH       A,R3
   \   000107   FA           MOV       R2,A
   \   000108   EA           MOV       A,R2
   \   000109   C0E0         PUSH      A
   \   00010B   8E82         MOV       DPL,R6
   \   00010D   8F83         MOV       DPH,R7
   \   00010F   D0E0         POP       A
   \   000111   F0           MOVX      @DPTR,A
   \   000112   8E82         MOV       DPL,R6
   \   000114   8F83         MOV       DPH,R7
   \   000116   A3           INC       DPTR
   \   000117   AE82         MOV       R6,DPL
   \   000119   AF83         MOV       R7,DPH
    813          
    814                *pBuf++ = pRec->grpType;
   \   00011B   8882         MOV       DPL,R0
   \   00011D   8983         MOV       DPH,R1
   \   00011F   A3           INC       DPTR
   \   000120   A3           INC       DPTR
   \   000121   E0           MOVX      A,@DPTR
   \   000122   C0E0         PUSH      A
   \   000124   8E82         MOV       DPL,R6
   \   000126   8F83         MOV       DPH,R7
   \   000128   D0E0         POP       A
   \   00012A   F0           MOVX      @DPTR,A
   \   00012B   8E82         MOV       DPL,R6
   \   00012D   8F83         MOV       DPH,R7
   \   00012F   A3           INC       DPTR
   \   000130   AE82         MOV       R6,DPL
   \   000132   AF83         MOV       R7,DPH
    815              }
   \   000134   05..         INC       ?V2
   \   000136   02....       LJMP      ??bdbTL_Send_GetGrpIDsRsp_1 & 0xFFFF
    816          
    817              status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_TOUCHLINK,
    818                                        COMMAND_TOUCHLINK_GET_GRP_IDS_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    819                                        disableDefaultRsp, 0, seqNum, bufLen, buf );
   \                     ??bdbTL_Send_GetGrpIDsRsp_2:
   \   000139                ; Setup parameters for call to function zcl_SendCommand
   \   000139   78..         MOV       R0,#?V6
   \   00013B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00013E   E5..         MOV       A,?V4
   \   000140   F5..         MOV       ?V8,A
   \   000142   75..00       MOV       ?V9,#0x0
   \   000145   78..         MOV       R0,#?V8
   \   000147   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014A   E5..         MOV       A,?V10
   \   00014C   F5..         MOV       ?V8,A
   \   00014E   78..         MOV       R0,#?V8
   \   000150   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000153   E4           CLR       A
   \   000154   F5..         MOV       ?V8,A
   \   000156   F5..         MOV       ?V9,A
   \   000158   78..         MOV       R0,#?V8
   \   00015A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00015D   E5..         MOV       A,?V11
   \   00015F   F5..         MOV       ?V8,A
   \   000161   78..         MOV       R0,#?V8
   \   000163   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000166   75..01       MOV       ?V8,#0x1
   \   000169   78..         MOV       R0,#?V8
   \   00016B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00016E   75..01       MOV       ?V8,#0x1
   \   000171   78..         MOV       R0,#?V8
   \   000173   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000176   75..41       MOV       ?V8,#0x41
   \   000179   78..         MOV       R0,#?V8
   \   00017B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00017E   7C00         MOV       R4,#0x0
   \   000180   7D10         MOV       R5,#0x10
   \   000182   AA..         MOV       R2,?V12
   \   000184   AB..         MOV       R3,?V13
   \   000186   A9..         MOV       R1,?V5
   \   000188   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00018B   740B         MOV       A,#0xb
   \   00018D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000190   E9           MOV       A,R1
   \   000191   F5..         MOV       ?V3,A
    820              zcl_mem_free( buf );
   \   000193                ; Setup parameters for call to function osal_mem_free
   \   000193   AA..         MOV       R2,?V6
   \   000195   AB..         MOV       R3,?V7
   \   000197   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00019A   8003         SJMP      ??bdbTL_Send_GetGrpIDsRsp_3
    821            }
    822            else
    823            {
    824              status = ZMemError;
   \                     ??bdbTL_Send_GetGrpIDsRsp_0:
   \   00019C   75..10       MOV       ?V3,#0x10
    825            }
    826          
    827            return ( status );
   \                     ??bdbTL_Send_GetGrpIDsRsp_3:
   \   00019F   A9..         MOV       R1,?V3
   \   0001A1   7F0E         MOV       R7,#0xe
   \   0001A3   02....       LJMP      ?BANKED_LEAVE_XDATA
    828          }
    829          
    830          /*********************************************************************
    831           * @fn      bdbTL_Send_GetEPListRsp
    832           *
    833           * @brief   Call to send out a Get Endpoint List Response command
    834           *
    835           * @param   srcEP - sending application's endpoint
    836           * @param   dstAddr - where you want the message to go
    837           * @param   pRsp - response parameters
    838           * @param   disableDefaultRsp - whether to disable the Default Response command
    839           * @param   seqNum - sequence number
    840           *
    841           * @return  ZStatus_t
    842           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    843          ZStatus_t bdbTL_Send_GetEPListRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     bdbTL_Send_GetEPListRsp:
    844                                             bdbTLGetEPListRsp_t *pRsp,
    845                                             uint8 disableDefaultRsp, uint8 seqNum )
    846          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V7,R1
   \   000007   8A..         MOV       ?V12,R2
   \   000009   8B..         MOV       ?V13,R3
   \   00000B   8C..         MOV       ?V0,R4
   \   00000D   8D..         MOV       ?V1,R5
   \   00000F   7416         MOV       A,#0x16
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V11,A
   \   000017   7417         MOV       A,#0x17
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V10,A
    847            uint8 *buf;
    848            uint8 bufLen = TOUCHLINK_CMDLEN_GET_EP_LIST_RSP;
   \   00001F   75..03       MOV       ?V6,#0x3
    849            ZStatus_t status;
    850          
    851            // Calculate the total length needed
    852            bufLen += ( pRsp->cnt * TOUCHLINK_CMDLENOPTIONAL_GET_EP_LIST_RSP );
   \   000022   75F008       MOV       B,#0x8
   \   000025   85..82       MOV       DPL,?V0
   \   000028   85..83       MOV       DPH,?V1
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   A4           MUL       AB
   \   00002F   25..         ADD       A,?V6
   \   000031   F5..         MOV       ?V6,A
    853          
    854            buf = zcl_mem_alloc( bufLen );
   \   000033                ; Setup parameters for call to function osal_mem_alloc
   \   000033   E5..         MOV       A,?V6
   \   000035   FA           MOV       R2,A
   \   000036   7B00         MOV       R3,#0x0
   \   000038   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003B   8A..         MOV       ?V8,R2
   \   00003D   8B..         MOV       ?V9,R3
   \   00003F   85....       MOV       ?V2,?V8
   \   000042   85....       MOV       ?V3,?V9
    855            if ( buf != NULL )
   \   000045   E5..         MOV       A,?V2
   \   000047   45..         ORL       A,?V3
   \   000049   7003         JNZ       $+5
   \   00004B   02....       LJMP      ??bdbTL_Send_GetEPListRsp_0 & 0xFFFF
    856            {
    857              uint8 *pBuf = buf;
   \   00004E   AE..         MOV       R6,?V2
   \   000050   AF..         MOV       R7,?V3
    858              uint8 i;
    859          
    860              *pBuf++ = pRsp->total;
   \   000052   85..82       MOV       DPL,?V0
   \   000055   85..83       MOV       DPH,?V1
   \   000058   E0           MOVX      A,@DPTR
   \   000059   C0E0         PUSH      A
   \   00005B   8E82         MOV       DPL,R6
   \   00005D   8F83         MOV       DPH,R7
   \   00005F   D0E0         POP       A
   \   000061   F0           MOVX      @DPTR,A
   \   000062   8E82         MOV       DPL,R6
   \   000064   8F83         MOV       DPH,R7
   \   000066   A3           INC       DPTR
   \   000067   AE82         MOV       R6,DPL
   \   000069   AF83         MOV       R7,DPH
    861              *pBuf++ = pRsp->startIndex;
   \   00006B   85..82       MOV       DPL,?V0
   \   00006E   85..83       MOV       DPH,?V1
   \   000071   A3           INC       DPTR
   \   000072   E0           MOVX      A,@DPTR
   \   000073   C0E0         PUSH      A
   \   000075   8E82         MOV       DPL,R6
   \   000077   8F83         MOV       DPH,R7
   \   000079   D0E0         POP       A
   \   00007B   F0           MOVX      @DPTR,A
   \   00007C   8E82         MOV       DPL,R6
   \   00007E   8F83         MOV       DPH,R7
   \   000080   A3           INC       DPTR
   \   000081   AE82         MOV       R6,DPL
   \   000083   AF83         MOV       R7,DPH
    862              *pBuf++ = pRsp->cnt;
   \   000085   85..82       MOV       DPL,?V0
   \   000088   85..83       MOV       DPH,?V1
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   C0E0         PUSH      A
   \   000090   8E82         MOV       DPL,R6
   \   000092   8F83         MOV       DPH,R7
   \   000094   D0E0         POP       A
   \   000096   F0           MOVX      @DPTR,A
   \   000097   8E82         MOV       DPL,R6
   \   000099   8F83         MOV       DPH,R7
   \   00009B   A3           INC       DPTR
   \   00009C   AE82         MOV       R6,DPL
   \   00009E   AF83         MOV       R7,DPH
    863          
    864              // Endpoint information record
    865              for ( i = 0; i < pRsp->cnt; i++ )
   \   0000A0   75..00       MOV       ?V4,#0x0
   \                     ??bdbTL_Send_GetEPListRsp_1:
   \   0000A3   85..82       MOV       DPL,?V0
   \   0000A6   85..83       MOV       DPH,?V1
   \   0000A9   A3           INC       DPTR
   \   0000AA   A3           INC       DPTR
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   F8           MOV       R0,A
   \   0000AD   E5..         MOV       A,?V4
   \   0000AF   C3           CLR       C
   \   0000B0   98           SUBB      A,R0
   \   0000B1   4003         JC        $+5
   \   0000B3   02....       LJMP      ??bdbTL_Send_GetEPListRsp_2 & 0xFFFF
    866              {
    867                epInfoRec_t *pRec = &(pRsp->epInfoRec[i]);
   \   0000B6   E5..         MOV       A,?V4
   \   0000B8   F8           MOV       R0,A
   \   0000B9   7900         MOV       R1,#0x0
   \   0000BB   E8           MOV       A,R0
   \   0000BC   75F008       MOV       B,#0x8
   \   0000BF   A4           MUL       AB
   \   0000C0   C8           XCH       A,R0
   \   0000C1   AAF0         MOV       R2,B
   \   0000C3   75F000       MOV       B,#0x0
   \   0000C6   A4           MUL       AB
   \   0000C7   2A           ADD       A,R2
   \   0000C8   FA           MOV       R2,A
   \   0000C9   75F008       MOV       B,#0x8
   \   0000CC   E9           MOV       A,R1
   \   0000CD   A4           MUL       AB
   \   0000CE   2A           ADD       A,R2
   \   0000CF   F9           MOV       R1,A
   \   0000D0   85..82       MOV       DPL,?V0
   \   0000D3   85..83       MOV       DPH,?V1
   \   0000D6   A3           INC       DPTR
   \   0000D7   A3           INC       DPTR
   \   0000D8   A3           INC       DPTR
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   28           ADD       A,R0
   \   0000DB   F8           MOV       R0,A
   \   0000DC   A3           INC       DPTR
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   39           ADDC      A,R1
   \   0000DF   F9           MOV       R1,A
    868          
    869                *pBuf++ = LO_UINT16( pRec->nwkAddr );
   \   0000E0   8882         MOV       DPL,R0
   \   0000E2   8983         MOV       DPH,R1
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   FA           MOV       R2,A
   \   0000E6   A3           INC       DPTR
   \   0000E7   E0           MOVX      A,@DPTR
   \   0000E8   FB           MOV       R3,A
   \   0000E9   EA           MOV       A,R2
   \   0000EA   C0E0         PUSH      A
   \   0000EC   8E82         MOV       DPL,R6
   \   0000EE   8F83         MOV       DPH,R7
   \   0000F0   D0E0         POP       A
   \   0000F2   F0           MOVX      @DPTR,A
   \   0000F3   8E82         MOV       DPL,R6
   \   0000F5   8F83         MOV       DPH,R7
   \   0000F7   A3           INC       DPTR
   \   0000F8   AE82         MOV       R6,DPL
   \   0000FA   AF83         MOV       R7,DPH
    870                *pBuf++ = HI_UINT16( pRec->nwkAddr );
   \   0000FC   8882         MOV       DPL,R0
   \   0000FE   8983         MOV       DPH,R1
   \   000100   E0           MOVX      A,@DPTR
   \   000101   FA           MOV       R2,A
   \   000102   A3           INC       DPTR
   \   000103   E0           MOVX      A,@DPTR
   \   000104   FB           MOV       R3,A
   \   000105   E4           CLR       A
   \   000106   CB           XCH       A,R3
   \   000107   FA           MOV       R2,A
   \   000108   EA           MOV       A,R2
   \   000109   C0E0         PUSH      A
   \   00010B   8E82         MOV       DPL,R6
   \   00010D   8F83         MOV       DPH,R7
   \   00010F   D0E0         POP       A
   \   000111   F0           MOVX      @DPTR,A
   \   000112   8E82         MOV       DPL,R6
   \   000114   8F83         MOV       DPH,R7
   \   000116   A3           INC       DPTR
   \   000117   AE82         MOV       R6,DPL
   \   000119   AF83         MOV       R7,DPH
    871          
    872                *pBuf++ = pRec->endpoint;
   \   00011B   8882         MOV       DPL,R0
   \   00011D   8983         MOV       DPH,R1
   \   00011F   A3           INC       DPTR
   \   000120   A3           INC       DPTR
   \   000121   E0           MOVX      A,@DPTR
   \   000122   C0E0         PUSH      A
   \   000124   8E82         MOV       DPL,R6
   \   000126   8F83         MOV       DPH,R7
   \   000128   D0E0         POP       A
   \   00012A   F0           MOVX      @DPTR,A
   \   00012B   8E82         MOV       DPL,R6
   \   00012D   8F83         MOV       DPH,R7
   \   00012F   A3           INC       DPTR
   \   000130   AE82         MOV       R6,DPL
   \   000132   AF83         MOV       R7,DPH
    873          
    874                *pBuf++ = LO_UINT16( pRec->profileID );
   \   000134   8882         MOV       DPL,R0
   \   000136   8983         MOV       DPH,R1
   \   000138   A3           INC       DPTR
   \   000139   A3           INC       DPTR
   \   00013A   A3           INC       DPTR
   \   00013B   E0           MOVX      A,@DPTR
   \   00013C   FA           MOV       R2,A
   \   00013D   A3           INC       DPTR
   \   00013E   E0           MOVX      A,@DPTR
   \   00013F   FB           MOV       R3,A
   \   000140   EA           MOV       A,R2
   \   000141   C0E0         PUSH      A
   \   000143   8E82         MOV       DPL,R6
   \   000145   8F83         MOV       DPH,R7
   \   000147   D0E0         POP       A
   \   000149   F0           MOVX      @DPTR,A
   \   00014A   8E82         MOV       DPL,R6
   \   00014C   8F83         MOV       DPH,R7
   \   00014E   A3           INC       DPTR
   \   00014F   AE82         MOV       R6,DPL
   \   000151   AF83         MOV       R7,DPH
    875                *pBuf++ = HI_UINT16( pRec->profileID );
   \   000153   8882         MOV       DPL,R0
   \   000155   8983         MOV       DPH,R1
   \   000157   A3           INC       DPTR
   \   000158   A3           INC       DPTR
   \   000159   A3           INC       DPTR
   \   00015A   E0           MOVX      A,@DPTR
   \   00015B   FA           MOV       R2,A
   \   00015C   A3           INC       DPTR
   \   00015D   E0           MOVX      A,@DPTR
   \   00015E   FB           MOV       R3,A
   \   00015F   E4           CLR       A
   \   000160   CB           XCH       A,R3
   \   000161   FA           MOV       R2,A
   \   000162   EA           MOV       A,R2
   \   000163   C0E0         PUSH      A
   \   000165   8E82         MOV       DPL,R6
   \   000167   8F83         MOV       DPH,R7
   \   000169   D0E0         POP       A
   \   00016B   F0           MOVX      @DPTR,A
   \   00016C   8E82         MOV       DPL,R6
   \   00016E   8F83         MOV       DPH,R7
   \   000170   A3           INC       DPTR
   \   000171   AE82         MOV       R6,DPL
   \   000173   AF83         MOV       R7,DPH
    876          
    877                *pBuf++ = LO_UINT16( pRec->deviceID );
   \   000175   8882         MOV       DPL,R0
   \   000177   8983         MOV       DPH,R1
   \   000179   A3           INC       DPTR
   \   00017A   A3           INC       DPTR
   \   00017B   A3           INC       DPTR
   \   00017C   A3           INC       DPTR
   \   00017D   A3           INC       DPTR
   \   00017E   E0           MOVX      A,@DPTR
   \   00017F   FA           MOV       R2,A
   \   000180   A3           INC       DPTR
   \   000181   E0           MOVX      A,@DPTR
   \   000182   FB           MOV       R3,A
   \   000183   EA           MOV       A,R2
   \   000184   C0E0         PUSH      A
   \   000186   8E82         MOV       DPL,R6
   \   000188   8F83         MOV       DPH,R7
   \   00018A   D0E0         POP       A
   \   00018C   F0           MOVX      @DPTR,A
   \   00018D   8E82         MOV       DPL,R6
   \   00018F   8F83         MOV       DPH,R7
   \   000191   A3           INC       DPTR
   \   000192   AE82         MOV       R6,DPL
   \   000194   AF83         MOV       R7,DPH
    878                *pBuf++ = HI_UINT16( pRec->deviceID );
   \   000196   8882         MOV       DPL,R0
   \   000198   8983         MOV       DPH,R1
   \   00019A   A3           INC       DPTR
   \   00019B   A3           INC       DPTR
   \   00019C   A3           INC       DPTR
   \   00019D   A3           INC       DPTR
   \   00019E   A3           INC       DPTR
   \   00019F   E0           MOVX      A,@DPTR
   \   0001A0   FA           MOV       R2,A
   \   0001A1   A3           INC       DPTR
   \   0001A2   E0           MOVX      A,@DPTR
   \   0001A3   FB           MOV       R3,A
   \   0001A4   E4           CLR       A
   \   0001A5   CB           XCH       A,R3
   \   0001A6   FA           MOV       R2,A
   \   0001A7   EA           MOV       A,R2
   \   0001A8   C0E0         PUSH      A
   \   0001AA   8E82         MOV       DPL,R6
   \   0001AC   8F83         MOV       DPH,R7
   \   0001AE   D0E0         POP       A
   \   0001B0   F0           MOVX      @DPTR,A
   \   0001B1   8E82         MOV       DPL,R6
   \   0001B3   8F83         MOV       DPH,R7
   \   0001B5   A3           INC       DPTR
   \   0001B6   AE82         MOV       R6,DPL
   \   0001B8   AF83         MOV       R7,DPH
    879          
    880                *pBuf++ = pRec->version;
   \   0001BA   8882         MOV       DPL,R0
   \   0001BC   8983         MOV       DPH,R1
   \   0001BE   A3           INC       DPTR
   \   0001BF   A3           INC       DPTR
   \   0001C0   A3           INC       DPTR
   \   0001C1   A3           INC       DPTR
   \   0001C2   A3           INC       DPTR
   \   0001C3   A3           INC       DPTR
   \   0001C4   A3           INC       DPTR
   \   0001C5   E0           MOVX      A,@DPTR
   \   0001C6   C0E0         PUSH      A
   \   0001C8   8E82         MOV       DPL,R6
   \   0001CA   8F83         MOV       DPH,R7
   \   0001CC   D0E0         POP       A
   \   0001CE   F0           MOVX      @DPTR,A
   \   0001CF   8E82         MOV       DPL,R6
   \   0001D1   8F83         MOV       DPH,R7
   \   0001D3   A3           INC       DPTR
   \   0001D4   AE82         MOV       R6,DPL
   \   0001D6   AF83         MOV       R7,DPH
    881              }
   \   0001D8   05..         INC       ?V4
   \   0001DA   02....       LJMP      ??bdbTL_Send_GetEPListRsp_1 & 0xFFFF
    882          
    883              status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_TOUCHLINK,
    884                                        COMMAND_TOUCHLINK_GET_EP_LIST_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    885                                        disableDefaultRsp, 0, seqNum, bufLen, buf );
   \                     ??bdbTL_Send_GetEPListRsp_2:
   \   0001DD                ; Setup parameters for call to function zcl_SendCommand
   \   0001DD   78..         MOV       R0,#?V2
   \   0001DF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001E2   E5..         MOV       A,?V6
   \   0001E4   F5..         MOV       ?V8,A
   \   0001E6   75..00       MOV       ?V9,#0x0
   \   0001E9   78..         MOV       R0,#?V8
   \   0001EB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001EE   E5..         MOV       A,?V10
   \   0001F0   F5..         MOV       ?V8,A
   \   0001F2   78..         MOV       R0,#?V8
   \   0001F4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001F7   E4           CLR       A
   \   0001F8   F5..         MOV       ?V8,A
   \   0001FA   F5..         MOV       ?V9,A
   \   0001FC   78..         MOV       R0,#?V8
   \   0001FE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000201   E5..         MOV       A,?V11
   \   000203   F5..         MOV       ?V8,A
   \   000205   78..         MOV       R0,#?V8
   \   000207   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00020A   75..01       MOV       ?V8,#0x1
   \   00020D   78..         MOV       R0,#?V8
   \   00020F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000212   75..01       MOV       ?V8,#0x1
   \   000215   78..         MOV       R0,#?V8
   \   000217   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00021A   75..42       MOV       ?V8,#0x42
   \   00021D   78..         MOV       R0,#?V8
   \   00021F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000222   7C00         MOV       R4,#0x0
   \   000224   7D10         MOV       R5,#0x10
   \   000226   AA..         MOV       R2,?V12
   \   000228   AB..         MOV       R3,?V13
   \   00022A   A9..         MOV       R1,?V7
   \   00022C   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00022F   740B         MOV       A,#0xb
   \   000231   12....       LCALL     ?DEALLOC_XSTACK8
   \   000234   E9           MOV       A,R1
   \   000235   F5..         MOV       ?V5,A
    886              zcl_mem_free( buf );
   \   000237                ; Setup parameters for call to function osal_mem_free
   \   000237   AA..         MOV       R2,?V2
   \   000239   AB..         MOV       R3,?V3
   \   00023B   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00023E   8003         SJMP      ??bdbTL_Send_GetEPListRsp_3
    887            }
    888            else
    889            {
    890              status = ZMemError;
   \                     ??bdbTL_Send_GetEPListRsp_0:
   \   000240   75..10       MOV       ?V5,#0x10
    891            }
    892          
    893            return ( status );
   \                     ??bdbTL_Send_GetEPListRsp_3:
   \   000243   A9..         MOV       R1,?V5
   \   000245   7F0E         MOV       R7,#0xe
   \   000247   02....       LJMP      ?BANKED_LEAVE_XDATA
    894          }
    895          
    896          /*********************************************************************
    897           * @fn      bdbTL_SendInterPANCommand
    898           *
    899           * @brief   Used to send TOUCHLINK Profile and Cluster Specific Inter-PAN Command
    900           *          messages.
    901           *
    902           *          NOTE: The calling application is responsible for incrementing
    903           *                the Sequence Number.
    904           *
    905           * @param   srcEp - source endpoint
    906           * @param   destAddr - destination address
    907           * @param   cmd - command ID
    908           * @param   direction - direction of the command
    909           * @param   seqNumber - identification number for the transaction
    910           * @param   cmdFormatLen - length of the command to be sent
    911           * @param   cmdFormat - command to be sent
    912           *
    913           * @return  ZSuccess if OK
    914           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    915          ZStatus_t bdbTL_SendInterPANCommand( uint8 srcEP, afAddrType_t *destAddr, uint8 cmd,
   \                     bdbTL_SendInterPANCommand:
    916                                               uint8 direction, uint8 seqNum, uint16 cmdFormatLen, uint8 *cmdFormat )
    917          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V1,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
   \   00000B   8C..         MOV       ?V4,R4
   \   00000D   8D..         MOV       ?V5,R5
   \   00000F   7412         MOV       A,#0x12
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V0,A
   \   000017   7413         MOV       A,#0x13
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V6,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V7,A
   \   000023   7415         MOV       A,#0x15
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F5..         MOV       ?V2,A
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F5..         MOV       ?V3,A
    918            //
    919            // Note: TOUCHLINK Frame Control has a defferent format than ZCL Frame Control
    920            //
    921          
    922            // TOUCHLINK Header Format:
    923            // - Frame control (1 octect):
    924            //   * b3-b0: TOUCHLINK version (0b0000)
    925            //   * b7-b4: Reserved (0b0000)
    926            // - Transaction sequence number (1 octet)
    927            // - Command identifier (1 octect)
    928            return zcl_SendCommand( srcEP, destAddr, ZCL_CLUSTER_ID_TOUCHLINK,
    929                                    cmd, TRUE, direction, TRUE, 0,
    930                                    seqNum, cmdFormatLen, cmdFormat );
   \   00002F                ; Setup parameters for call to function zcl_SendCommand
   \   00002F   78..         MOV       R0,#?V2
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000034   78..         MOV       R0,#?V6
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000039   E5..         MOV       A,?V0
   \   00003B   F5..         MOV       ?V8,A
   \   00003D   78..         MOV       R0,#?V8
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000042   E4           CLR       A
   \   000043   F5..         MOV       ?V8,A
   \   000045   F5..         MOV       ?V9,A
   \   000047   78..         MOV       R0,#?V8
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004C   75..01       MOV       ?V8,#0x1
   \   00004F   78..         MOV       R0,#?V8
   \   000051   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000054   E5..         MOV       A,?V5
   \   000056   F5..         MOV       ?V8,A
   \   000058   78..         MOV       R0,#?V8
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005D   75..01       MOV       ?V8,#0x1
   \   000060   78..         MOV       R0,#?V8
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000065   E5..         MOV       A,?V4
   \   000067   F5..         MOV       ?V8,A
   \   000069   78..         MOV       R0,#?V8
   \   00006B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006E   7C00         MOV       R4,#0x0
   \   000070   7D10         MOV       R5,#0x10
   \   000072   EE           MOV       A,R6
   \   000073   FA           MOV       R2,A
   \   000074   EF           MOV       A,R7
   \   000075   FB           MOV       R3,A
   \   000076   A9..         MOV       R1,?V1
   \   000078   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00007B   740B         MOV       A,#0xb
   \   00007D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000080   7F0A         MOV       R7,#0xa
   \   000082   02....       LJMP      ?BANKED_LEAVE_XDATA
    931          }
    932          
    933          /*********************************************************************
    934           * @fn      bdbTL_FindCallbacks
    935           *
    936           * @brief   Find the callbacks for an endpoint
    937           *
    938           * @param   endpoint
    939           *
    940           * @return  pointer to the callbacks
    941           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    942          static bdbTL_AppCallbacks_t *bdbTL_FindCallbacks( uint8 endpoint )
   \                     bdbTL_FindCallbacks:
    943          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    944            bdbTLCBRec_t *pCBs;
    945          
    946            pCBs = bdbTLCBs;
   \   000004   90....       MOV       DPTR,#bdbTLCBs
   \   000007   E0           MOVX      A,@DPTR
   \   000008   FA           MOV       R2,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   FB           MOV       R3,A
   \   00000C   EA           MOV       A,R2
   \   00000D   FC           MOV       R4,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FD           MOV       R5,A
    947            while ( pCBs )
   \                     ??bdbTL_FindCallbacks_0:
   \   000010   EC           MOV       A,R4
   \   000011   4D           ORL       A,R5
   \   000012   6027         JZ        ??bdbTL_FindCallbacks_1
    948            {
    949              if ( pCBs->endpoint == endpoint )
   \   000014   8C82         MOV       DPL,R4
   \   000016   8D83         MOV       DPH,R5
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   69           XRL       A,R1
   \   00001C   700E         JNZ       ??bdbTL_FindCallbacks_2
    950                return ( pCBs->CBs );
   \   00001E   8C82         MOV       DPL,R4
   \   000020   8D83         MOV       DPH,R5
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   FA           MOV       R2,A
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   FB           MOV       R3,A
   \   00002A   8013         SJMP      ??bdbTL_FindCallbacks_3
    951              pCBs = pCBs->next;
   \                     ??bdbTL_FindCallbacks_2:
   \   00002C   8C82         MOV       DPL,R4
   \   00002E   8D83         MOV       DPH,R5
   \   000030   E0           MOVX      A,@DPTR
   \   000031   FA           MOV       R2,A
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   FB           MOV       R3,A
   \   000035   EA           MOV       A,R2
   \   000036   FC           MOV       R4,A
   \   000037   EB           MOV       A,R3
   \   000038   FD           MOV       R5,A
   \   000039   80D5         SJMP      ??bdbTL_FindCallbacks_0
    952            }
    953          
    954            return ( (bdbTL_AppCallbacks_t *)NULL );
   \                     ??bdbTL_FindCallbacks_1:
   \   00003B   7A00         MOV       R2,#0x0
   \   00003D   7B00         MOV       R3,#0x0
   \                     ??bdbTL_FindCallbacks_3:
   \   00003F   D083         POP       DPH
   \   000041   D082         POP       DPL
   \   000043   02....       LJMP      ?BRET
    955          }
    956          
    957          /*********************************************************************
    958           * @fn      bdbTL_HdlIncoming
    959           *
    960           * @brief   Callback from ZCL to process incoming Commands specific
    961           *          to this cluster library or Profile commands for attributes
    962           *          that aren't in the attribute list
    963           *
    964           * @param   pInMsg - pointer to the incoming message
    965           *
    966           * @return  ZStatus_t
    967           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    968          static ZStatus_t bdbTL_HdlIncoming(  zclIncoming_t *pInMsg )
   \                     bdbTL_HdlIncoming:
    969          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    970            ZStatus_t status = ZSuccess;
   \   000009   75..00       MOV       ?V0,#0x0
    971          
    972            if ( StubAPS_InterPan( pInMsg->msg->srcAddr.panId, pInMsg->msg->srcAddr.endPoint ) )
   \   00000C                ; Setup parameters for call to function StubAPS_InterPan
   \   00000C   8E82         MOV       DPL,R6
   \   00000E   8F83         MOV       DPH,R7
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F8           MOV       R0,A
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   C8           XCH       A,R0
   \   000015   240F         ADD       A,#0xf
   \   000017   F582         MOV       DPL,A
   \   000019   C8           XCH       A,R0
   \   00001A   3400         ADDC      A,#0x0
   \   00001C   F583         MOV       DPH,A
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F9           MOV       R1,A
   \   000020   8E82         MOV       DPL,R6
   \   000022   8F83         MOV       DPH,R7
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F8           MOV       R0,A
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   C8           XCH       A,R0
   \   000029   2410         ADD       A,#0x10
   \   00002B   F582         MOV       DPL,A
   \   00002D   C8           XCH       A,R0
   \   00002E   3400         ADDC      A,#0x0
   \   000030   F583         MOV       DPH,A
   \   000032   E0           MOVX      A,@DPTR
   \   000033   FA           MOV       R2,A
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   FB           MOV       R3,A
   \   000037   12....       LCALL     `??StubAPS_InterPan::?relay`; Banked call to: StubAPS_InterPan
   \   00003A   E9           MOV       A,R1
   \   00003B   6009         JZ        ??bdbTL_HdlIncoming_0
    973            {
    974              return ( bdbTL_HdlInInterPANCommands( pInMsg ) );
   \   00003D                ; Setup parameters for call to function bdbTL_HdlInInterPANCommands
   \   00003D   EE           MOV       A,R6
   \   00003E   FA           MOV       R2,A
   \   00003F   EF           MOV       A,R7
   \   000040   FB           MOV       R3,A
   \   000041   12....       LCALL     `??bdbTL_HdlInInterPANCommands::?relay`; Banked call to: bdbTL_HdlInInterPANCommands
   \   000044   8040         SJMP      ??bdbTL_HdlIncoming_1
    975            }
    976          
    977            if ( zcl_ClusterCmd( pInMsg->hdr.fc.type ) )
   \                     ??bdbTL_HdlIncoming_0:
   \   000046   8E82         MOV       DPL,R6
   \   000048   8F83         MOV       DPH,R7
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   5403         ANL       A,#0x3
   \   00004F   F8           MOV       R0,A
   \   000050   A3           INC       DPTR
   \   000051   E0           MOVX      A,@DPTR
   \   000052   5400         ANL       A,#0x0
   \   000054   F9           MOV       R1,A
   \   000055   E8           MOV       A,R0
   \   000056   6401         XRL       A,#0x1
   \   000058   7027         JNZ       ??bdbTL_HdlIncoming_2
    978            {
    979              // Is this a manufacturer specific command?
    980              if ( pInMsg->hdr.fc.manuSpecific == 0 )
   \   00005A   8E82         MOV       DPL,R6
   \   00005C   8F83         MOV       DPH,R7
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   E0           MOVX      A,@DPTR
   \   000061   F8           MOV       R0,A
   \   000062   A3           INC       DPTR
   \   000063   E0           MOVX      A,@DPTR
   \   000064   F9           MOV       R1,A
   \   000065   E8           MOV       A,R0
   \   000066   13           RRC       A
   \   000067   13           RRC       A
   \   000068   543F         ANL       A,#0x3f
   \   00006A   5401         ANL       A,#0x1
   \   00006C   A2E0         MOV       C,0xE0 /* A   */.0
   \   00006E   400C         JC        ??bdbTL_HdlIncoming_3
    981              {
    982                status = bdbTL_HdlInSpecificCommands( pInMsg );
   \   000070                ; Setup parameters for call to function bdbTL_HdlInSpecificCommands
   \   000070   EE           MOV       A,R6
   \   000071   FA           MOV       R2,A
   \   000072   EF           MOV       A,R7
   \   000073   FB           MOV       R3,A
   \   000074   12....       LCALL     `??bdbTL_HdlInSpecificCommands::?relay`; Banked call to: bdbTL_HdlInSpecificCommands
   \   000077   E9           MOV       A,R1
   \   000078   F5..         MOV       ?V0,A
   \   00007A   8008         SJMP      ??bdbTL_HdlIncoming_4
    983              }
    984              else
    985              {
    986                // We don't support any manufacturer specific command.
    987                status = ZFailure;
   \                     ??bdbTL_HdlIncoming_3:
   \   00007C   75..01       MOV       ?V0,#0x1
   \   00007F   8003         SJMP      ??bdbTL_HdlIncoming_4
    988              }
    989            }
    990            else
    991            {
    992              // Handle all the normal (Read, Write...) commands -- should never get here
    993              status = ZFailure;
   \                     ??bdbTL_HdlIncoming_2:
   \   000081   75..01       MOV       ?V0,#0x1
    994            }
    995            return ( status );
   \                     ??bdbTL_HdlIncoming_4:
   \   000084   A9..         MOV       R1,?V0
   \                     ??bdbTL_HdlIncoming_1:
   \   000086   7F01         MOV       R7,#0x1
   \   000088   02....       LJMP      ?BANKED_LEAVE_XDATA
    996          }
    997          
    998          /*********************************************************************
    999           * @fn      bdbTL_HdlInSpecificCommands
   1000           *
   1001           * @brief   Callback from ZCL to process incoming Commands specific
   1002           *          to this cluster library
   1003           *
   1004           * @param   pInMsg - pointer to the incoming message
   1005           *
   1006           * @return  ZStatus_t
   1007           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1008          static ZStatus_t bdbTL_HdlInSpecificCommands( zclIncoming_t *pInMsg )
   \                     bdbTL_HdlInSpecificCommands:
   1009          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1010            ZStatus_t status;
   1011            bdbTL_AppCallbacks_t *pCBs;
   1012          
   1013            // make sure endpoint exists
   1014            pCBs = bdbTL_FindCallbacks( pInMsg->msg->endPoint );
   \   000009                ; Setup parameters for call to function bdbTL_FindCallbacks
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F8           MOV       R0,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   C8           XCH       A,R0
   \   000012   2414         ADD       A,#0x14
   \   000014   F582         MOV       DPL,A
   \   000016   C8           XCH       A,R0
   \   000017   3400         ADDC      A,#0x0
   \   000019   F583         MOV       DPH,A
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F9           MOV       R1,A
   \   00001D   12....       LCALL     `??bdbTL_FindCallbacks::?relay`; Banked call to: bdbTL_FindCallbacks
   \   000020   8A..         MOV       ?V4,R2
   \   000022   8B..         MOV       ?V5,R3
   \   000024   85....       MOV       ?V0,?V4
   \   000027   85....       MOV       ?V1,?V5
   1015            if ( pCBs == NULL )
   \   00002A   E5..         MOV       A,?V0
   \   00002C   45..         ORL       A,?V1
   \   00002E   7004         JNZ       ??bdbTL_HdlInSpecificCommands_0
   1016              return ( ZFailure );
   \   000030   7901         MOV       R1,#0x1
   \   000032   8030         SJMP      ??bdbTL_HdlInSpecificCommands_1
   1017          
   1018            switch ( pInMsg->msg->clusterId )
   \                     ??bdbTL_HdlInSpecificCommands_0:
   \   000034   8E82         MOV       DPL,R6
   \   000036   8F83         MOV       DPH,R7
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F8           MOV       R0,A
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F583         MOV       DPH,A
   \   00003E   8882         MOV       DPL,R0
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   E0           MOVX      A,@DPTR
   \   000045   6400         XRL       A,#0x0
   \   000047   7004         JNZ       ??bdbTL_HdlInSpecificCommands_2
   \   000049   A3           INC       DPTR
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   6410         XRL       A,#0x10
   \                     ??bdbTL_HdlInSpecificCommands_2:
   \   00004D   7010         JNZ       ??bdbTL_HdlInSpecificCommands_3
   1019            {
   1020              case ZCL_CLUSTER_ID_TOUCHLINK:
   1021                status = bdbTL_ProcessInLLCmds( pInMsg, pCBs );
   \   00004F                ; Setup parameters for call to function bdbTL_ProcessInLLCmds
   \   00004F   AC..         MOV       R4,?V0
   \   000051   AD..         MOV       R5,?V1
   \   000053   EE           MOV       A,R6
   \   000054   FA           MOV       R2,A
   \   000055   EF           MOV       A,R7
   \   000056   FB           MOV       R3,A
   \   000057   12....       LCALL     `??bdbTL_ProcessInLLCmds::?relay`; Banked call to: bdbTL_ProcessInLLCmds
   \   00005A   E9           MOV       A,R1
   \   00005B   F5..         MOV       ?V2,A
   1022                break;
   \   00005D   8003         SJMP      ??bdbTL_HdlInSpecificCommands_4
   1023          
   1024              default:
   1025                status = ZFailure;
   \                     ??bdbTL_HdlInSpecificCommands_3:
   \   00005F   75..01       MOV       ?V2,#0x1
   1026                break;
   1027            }
   1028          
   1029            return ( status );
   \                     ??bdbTL_HdlInSpecificCommands_4:
   \   000062   A9..         MOV       R1,?V2
   \                     ??bdbTL_HdlInSpecificCommands_1:
   \   000064   7F06         MOV       R7,#0x6
   \   000066   02....       LJMP      ?BANKED_LEAVE_XDATA
   1030          }
   1031          
   1032          /*********************************************************************
   1033           * @fn      bdbTL_ProcessInLLCmds
   1034           *
   1035           * @brief   Callback from ZCL to process incoming Commands specific
   1036           *          to this cluster library on a command ID basis
   1037           *
   1038           * @param   pInMsg - pointer to the incoming message
   1039           * @param   pCBs - pointer to callbacks
   1040           *
   1041           * @return  ZStatus_t
   1042           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1043          static ZStatus_t bdbTL_ProcessInLLCmds( zclIncoming_t *pInMsg, bdbTL_AppCallbacks_t *pCBs )
   \                     bdbTL_ProcessInLLCmds:
   1044          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   1045            ZStatus_t status = SUCCESS;
   \   00000D   75..00       MOV       ?V2,#0x0
   1046          
   1047            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \   000010   8E82         MOV       DPL,R6
   \   000012   8F83         MOV       DPH,R7
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F8           MOV       R0,A
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F9           MOV       R1,A
   \   00001B   E8           MOV       A,R0
   \   00001C   13           RRC       A
   \   00001D   13           RRC       A
   \   00001E   13           RRC       A
   \   00001F   541F         ANL       A,#0x1f
   \   000021   5401         ANL       A,#0x1
   \   000023   A2E0         MOV       C,0xE0 /* A   */.0
   \   000025   403A         JC        ??bdbTL_ProcessInLLCmds_0
   1048            {
   1049              switch ( pInMsg->hdr.commandID )
   \   000027   8E82         MOV       DPL,R6
   \   000029   8F83         MOV       DPH,R7
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   24BF         ADD       A,#-0x41
   \   000035   6005         JZ        ??bdbTL_ProcessInLLCmds_1
   \   000037   14           DEC       A
   \   000038   6012         JZ        ??bdbTL_ProcessInLLCmds_2
   \   00003A   8020         SJMP      ??bdbTL_ProcessInLLCmds_3
   1050              {
   1051                case COMMAND_TOUCHLINK_GET_GRP_IDS_REQ:
   1052                  status = bdbTL_ProcessInCmd_GetGrpIDsReq( pInMsg, pCBs );
   \                     ??bdbTL_ProcessInLLCmds_1:
   \   00003C                ; Setup parameters for call to function bdbTL_ProcessInCmd_GetGrpIDsReq
   \   00003C   AC..         MOV       R4,?V0
   \   00003E   AD..         MOV       R5,?V1
   \   000040   EE           MOV       A,R6
   \   000041   FA           MOV       R2,A
   \   000042   EF           MOV       A,R7
   \   000043   FB           MOV       R3,A
   \   000044   12....       LCALL     `??bdbTL_ProcessInCmd_GetGrpIDsReq::?relay`; Banked call to: bdbTL_ProcessInCmd_GetGrpIDsReq
   \   000047   E9           MOV       A,R1
   \   000048   F5..         MOV       ?V2,A
   1053                  break;
   \   00004A   8060         SJMP      ??bdbTL_ProcessInLLCmds_4
   1054          
   1055                case COMMAND_TOUCHLINK_GET_EP_LIST_REQ:
   1056                  status = bdbTL_ProcessInCmd_GetEPListReq( pInMsg, pCBs );
   \                     ??bdbTL_ProcessInLLCmds_2:
   \   00004C                ; Setup parameters for call to function bdbTL_ProcessInCmd_GetEPListReq
   \   00004C   AC..         MOV       R4,?V0
   \   00004E   AD..         MOV       R5,?V1
   \   000050   EE           MOV       A,R6
   \   000051   FA           MOV       R2,A
   \   000052   EF           MOV       A,R7
   \   000053   FB           MOV       R3,A
   \   000054   12....       LCALL     `??bdbTL_ProcessInCmd_GetEPListReq::?relay`; Banked call to: bdbTL_ProcessInCmd_GetEPListReq
   \   000057   E9           MOV       A,R1
   \   000058   F5..         MOV       ?V2,A
   1057                  break;
   \   00005A   8050         SJMP      ??bdbTL_ProcessInLLCmds_4
   1058          
   1059                default:
   1060                  status = ZFailure;   // Error ignore the command
   \                     ??bdbTL_ProcessInLLCmds_3:
   \   00005C   75..01       MOV       ?V2,#0x1
   1061                  break;
   \   00005F   804B         SJMP      ??bdbTL_ProcessInLLCmds_4
   1062               }
   1063            }
   1064            else // Client Commands
   1065            {
   1066              switch ( pInMsg->hdr.commandID )
   \                     ??bdbTL_ProcessInLLCmds_0:
   \   000061   8E82         MOV       DPL,R6
   \   000063   8F83         MOV       DPH,R7
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   24C0         ADD       A,#-0x40
   \   00006F   6008         JZ        ??bdbTL_ProcessInLLCmds_5
   \   000071   14           DEC       A
   \   000072   6015         JZ        ??bdbTL_ProcessInLLCmds_6
   \   000074   14           DEC       A
   \   000075   6022         JZ        ??bdbTL_ProcessInLLCmds_7
   \   000077   8030         SJMP      ??bdbTL_ProcessInLLCmds_8
   1067              {
   1068                case COMMAND_TOUCHLINK_EP_INFO:
   1069                  status = bdbTL_ProcessInCmd_EndpointInfo( pInMsg, pCBs );
   \                     ??bdbTL_ProcessInLLCmds_5:
   \   000079                ; Setup parameters for call to function bdbTL_ProcessInCmd_EndpointInfo
   \   000079   AC..         MOV       R4,?V0
   \   00007B   AD..         MOV       R5,?V1
   \   00007D   EE           MOV       A,R6
   \   00007E   FA           MOV       R2,A
   \   00007F   EF           MOV       A,R7
   \   000080   FB           MOV       R3,A
   \   000081   12....       LCALL     `??bdbTL_ProcessInCmd_EndpointInfo::?relay`; Banked call to: bdbTL_ProcessInCmd_EndpointInfo
   \   000084   E9           MOV       A,R1
   \   000085   F5..         MOV       ?V2,A
   1070                  break;
   \   000087   8023         SJMP      ??bdbTL_ProcessInLLCmds_4
   1071          
   1072                case COMMAND_TOUCHLINK_GET_GRP_IDS_RSP:
   1073                  status = bdbTL_ProcessInCmd_GetGrpIDsRsp( pInMsg, pCBs );
   \                     ??bdbTL_ProcessInLLCmds_6:
   \   000089                ; Setup parameters for call to function bdbTL_ProcessInCmd_GetGrpIDsRsp
   \   000089   AC..         MOV       R4,?V0
   \   00008B   AD..         MOV       R5,?V1
   \   00008D   EE           MOV       A,R6
   \   00008E   FA           MOV       R2,A
   \   00008F   EF           MOV       A,R7
   \   000090   FB           MOV       R3,A
   \   000091   12....       LCALL     `??bdbTL_ProcessInCmd_GetGrpIDsRsp::?relay`; Banked call to: bdbTL_ProcessInCmd_GetGrpIDsRsp
   \   000094   E9           MOV       A,R1
   \   000095   F5..         MOV       ?V2,A
   1074                  break;
   \   000097   8013         SJMP      ??bdbTL_ProcessInLLCmds_4
   1075          
   1076                case COMMAND_TOUCHLINK_GET_EP_LIST_RSP:
   1077                  status = bdbTL_ProcessInCmd_GetEPListRsp( pInMsg, pCBs );
   \                     ??bdbTL_ProcessInLLCmds_7:
   \   000099                ; Setup parameters for call to function bdbTL_ProcessInCmd_GetEPListRsp
   \   000099   AC..         MOV       R4,?V0
   \   00009B   AD..         MOV       R5,?V1
   \   00009D   EE           MOV       A,R6
   \   00009E   FA           MOV       R2,A
   \   00009F   EF           MOV       A,R7
   \   0000A0   FB           MOV       R3,A
   \   0000A1   12....       LCALL     `??bdbTL_ProcessInCmd_GetEPListRsp::?relay`; Banked call to: bdbTL_ProcessInCmd_GetEPListRsp
   \   0000A4   E9           MOV       A,R1
   \   0000A5   F5..         MOV       ?V2,A
   1078                  break;
   \   0000A7   8003         SJMP      ??bdbTL_ProcessInLLCmds_4
   1079          
   1080                default:
   1081                  status = ZFailure;   // Error ignore the command
   \                     ??bdbTL_ProcessInLLCmds_8:
   \   0000A9   75..01       MOV       ?V2,#0x1
   1082                  break;
   1083              }
   1084            }
   1085          
   1086            return ( status );
   \                     ??bdbTL_ProcessInLLCmds_4:
   \   0000AC   A9..         MOV       R1,?V2
   \   0000AE   7F03         MOV       R7,#0x3
   \   0000B0   02....       LJMP      ?BANKED_LEAVE_XDATA
   1087          }
   1088          
   1089          
   1090          /*********************************************************************
   1091           * @fn      bdbTL_ProcessInCmd_GetGrpIDsReq
   1092           *
   1093           * @brief   Process in the received Get Group Identifiers Request command.
   1094           *
   1095           * @param   pInMsg - pointer to the incoming message
   1096           * @param   pCBs - pointer to the application callbacks
   1097           *
   1098           * @return  ZStatus_t
   1099           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1100          static ZStatus_t bdbTL_ProcessInCmd_GetGrpIDsReq( zclIncoming_t *pInMsg,
   \                     bdbTL_ProcessInCmd_GetGrpIDsReq:
   1101                                                            bdbTL_AppCallbacks_t *pCBs )
   1102          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
   1103            if ( pCBs->pfnGetGrpIDsReq )
   \   000012   85..82       MOV       DPL,?V0
   \   000015   85..83       MOV       DPH,?V1
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F8           MOV       R0,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F9           MOV       R1,A
   \   00001D   E8           MOV       A,R0
   \   00001E   49           ORL       A,R1
   \   00001F   6055         JZ        ??bdbTL_ProcessInCmd_GetGrpIDsReq_0
   1104            {
   1105              bdbTLGetGrpIDsReq_t req;
   1106          
   1107              req.startIndex = pInMsg->pData[0];
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F8           MOV       R0,A
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F583         MOV       DPH,A
   \   000033   8882         MOV       DPL,R0
   \   000035   E0           MOVX      A,@DPTR
   \   000036   C0E0         PUSH      A
   \   000038   85..82       MOV       DPL,?XSP + 0
   \   00003B   85..83       MOV       DPH,?XSP + 1
   \   00003E   D0E0         POP       A
   \   000040   F0           MOVX      @DPTR,A
   1108          
   1109              if ( pCBs->pfnGetGrpIDsReq( &(pInMsg->msg->srcAddr), &req, pInMsg->hdr.transSeqNum ) == ZSuccess )
   \   000041                ; Setup parameters for indirect call
   \   000041   8E82         MOV       DPL,R6
   \   000043   8F83         MOV       DPH,R7
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   F9           MOV       R1,A
   \   00004D   AC..         MOV       R4,?XSP + 0
   \   00004F   AD..         MOV       R5,?XSP + 1
   \   000051   8E82         MOV       DPL,R6
   \   000053   8F83         MOV       DPH,R7
   \   000055   E0           MOVX      A,@DPTR
   \   000056   2406         ADD       A,#0x6
   \   000058   FA           MOV       R2,A
   \   000059   A3           INC       DPTR
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   3400         ADDC      A,#0x0
   \   00005D   FB           MOV       R3,A
   \   00005E   85..82       MOV       DPL,?V0
   \   000061   85..83       MOV       DPH,?V1
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F8           MOV       R0,A
   \   000066   A3           INC       DPTR
   \   000067   E0           MOVX      A,@DPTR
   \   000068   F583         MOV       DPH,A
   \   00006A   8882         MOV       DPL,R0
   \   00006C   12....       LCALL     ?CALL_IND
   \   00006F   E9           MOV       A,R1
   \   000070   7004         JNZ       ??bdbTL_ProcessInCmd_GetGrpIDsReq_0
   1110              {
   1111                return ( ZCL_STATUS_CMD_HAS_RSP );
   \   000072   79FF         MOV       R1,#-0x1
   \   000074   8002         SJMP      ??bdbTL_ProcessInCmd_GetGrpIDsReq_1
   1112              }
   1113            }
   1114          
   1115            return ( ZFailure );
   \                     ??bdbTL_ProcessInCmd_GetGrpIDsReq_0:
   \   000076   7901         MOV       R1,#0x1
   \                     ??bdbTL_ProcessInCmd_GetGrpIDsReq_1:
   \   000078   7401         MOV       A,#0x1
   \   00007A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007D   7F02         MOV       R7,#0x2
   \   00007F   02....       LJMP      ?BANKED_LEAVE_XDATA
   1116          }
   1117          
   1118          /*********************************************************************
   1119           * @fn      bdbTL_ProcessInCmd_GetEPListReq
   1120           *
   1121           * @brief   Process in the received Get Endpoint List Request command.
   1122           *
   1123           * @param   pInMsg - pointer to the incoming message
   1124           * @param   pCBs - pointer to the application callbacks
   1125           *
   1126           * @return  ZStatus_t
   1127           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1128          static ZStatus_t bdbTL_ProcessInCmd_GetEPListReq( zclIncoming_t *pInMsg,
   \                     bdbTL_ProcessInCmd_GetEPListReq:
   1129                                                            bdbTL_AppCallbacks_t *pCBs )
   1130          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
   1131            if ( pCBs->pfnGetEPListReq )
   \   000012   85..82       MOV       DPL,?V0
   \   000015   85..83       MOV       DPH,?V1
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F8           MOV       R0,A
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F9           MOV       R1,A
   \   00001F   E8           MOV       A,R0
   \   000020   49           ORL       A,R1
   \   000021   6057         JZ        ??bdbTL_ProcessInCmd_GetEPListReq_0
   1132            {
   1133              bdbTLGetEPListReq_t req;
   1134          
   1135              req.startIndex = pInMsg->pData[0];
   \   000023   8E82         MOV       DPL,R6
   \   000025   8F83         MOV       DPH,R7
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F8           MOV       R0,A
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   F583         MOV       DPH,A
   \   000035   8882         MOV       DPL,R0
   \   000037   E0           MOVX      A,@DPTR
   \   000038   C0E0         PUSH      A
   \   00003A   85..82       MOV       DPL,?XSP + 0
   \   00003D   85..83       MOV       DPH,?XSP + 1
   \   000040   D0E0         POP       A
   \   000042   F0           MOVX      @DPTR,A
   1136          
   1137              if ( pCBs->pfnGetEPListReq( &(pInMsg->msg->srcAddr), &req, pInMsg->hdr.transSeqNum ) == ZSuccess )
   \   000043                ; Setup parameters for indirect call
   \   000043   8E82         MOV       DPL,R6
   \   000045   8F83         MOV       DPH,R7
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   F9           MOV       R1,A
   \   00004F   AC..         MOV       R4,?XSP + 0
   \   000051   AD..         MOV       R5,?XSP + 1
   \   000053   8E82         MOV       DPL,R6
   \   000055   8F83         MOV       DPH,R7
   \   000057   E0           MOVX      A,@DPTR
   \   000058   2406         ADD       A,#0x6
   \   00005A   FA           MOV       R2,A
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   3400         ADDC      A,#0x0
   \   00005F   FB           MOV       R3,A
   \   000060   85..82       MOV       DPL,?V0
   \   000063   85..83       MOV       DPH,?V1
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   F8           MOV       R0,A
   \   00006A   A3           INC       DPTR
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   F583         MOV       DPH,A
   \   00006E   8882         MOV       DPL,R0
   \   000070   12....       LCALL     ?CALL_IND
   \   000073   E9           MOV       A,R1
   \   000074   7004         JNZ       ??bdbTL_ProcessInCmd_GetEPListReq_0
   1138              {
   1139                return ( ZCL_STATUS_CMD_HAS_RSP );
   \   000076   79FF         MOV       R1,#-0x1
   \   000078   8002         SJMP      ??bdbTL_ProcessInCmd_GetEPListReq_1
   1140              }
   1141            }
   1142          
   1143            return ( ZFailure );
   \                     ??bdbTL_ProcessInCmd_GetEPListReq_0:
   \   00007A   7901         MOV       R1,#0x1
   \                     ??bdbTL_ProcessInCmd_GetEPListReq_1:
   \   00007C   7401         MOV       A,#0x1
   \   00007E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000081   7F02         MOV       R7,#0x2
   \   000083   02....       LJMP      ?BANKED_LEAVE_XDATA
   1144          }
   1145          
   1146          
   1147          /*********************************************************************
   1148           * @fn      bdbTL_ProcessInCmd_EndpointInfo
   1149           *
   1150           * @brief   Process in the received Endpoint Information command.
   1151           *
   1152           * @param   pInMsg - pointer to the incoming message
   1153           * @param   pCBs - pointer to the application callbacks
   1154           *
   1155           * @return  ZStatus_t
   1156           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1157          static ZStatus_t bdbTL_ProcessInCmd_EndpointInfo( zclIncoming_t *pInMsg,
   \                     bdbTL_ProcessInCmd_EndpointInfo:
   1158                                                            bdbTL_AppCallbacks_t *pCBs )
   1159          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   \   000009   8C..         MOV       ?V4,R4
   \   00000B   8D..         MOV       ?V5,R5
   1160            ZStatus_t status = ZFailure;
   \   00000D   75..01       MOV       ?V2,#0x1
   1161          
   1162            if ( pCBs->pfnEndpointInfo )
   \   000010   85..82       MOV       DPL,?V4
   \   000013   85..83       MOV       DPH,?V5
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F8           MOV       R0,A
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F9           MOV       R1,A
   \   00001F   E8           MOV       A,R0
   \   000020   49           ORL       A,R1
   \   000021   7003         JNZ       $+5
   \   000023   02....       LJMP      ??bdbTL_ProcessInCmd_EndpointInfo_0 & 0xFFFF
   1163            {
   1164              bdbTLEndpointInfo_t *pCmd;
   1165          
   1166              pCmd = (bdbTLEndpointInfo_t *)zcl_mem_alloc( sizeof( bdbTLEndpointInfo_t ) );
   \   000026                ; Setup parameters for call to function osal_mem_alloc
   \   000026   7A10         MOV       R2,#0x10
   \   000028   7B00         MOV       R3,#0x0
   \   00002A   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002D   8A..         MOV       ?V8,R2
   \   00002F   8B..         MOV       ?V9,R3
   \   000031   85....       MOV       ?V0,?V8
   \   000034   85....       MOV       ?V1,?V9
   1167              if ( pCmd )
   \   000037   E5..         MOV       A,?V0
   \   000039   45..         ORL       A,?V1
   \   00003B   7003         JNZ       $+5
   \   00003D   02....       LJMP      ??bdbTL_ProcessInCmd_EndpointInfo_1 & 0xFFFF
   1168              {
   1169                uint8 *pBuf = pInMsg->pData;
   \   000040   85..82       MOV       DPL,?V6
   \   000043   85..83       MOV       DPH,?V7
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   FE           MOV       R6,A
   \   000050   A3           INC       DPTR
   \   000051   E0           MOVX      A,@DPTR
   \   000052   FF           MOV       R7,A
   1170          
   1171                zcl_cpyExtAddr( pCmd->ieeeAddr, pBuf );
   \   000053                ; Setup parameters for call to function sAddrExtCpy
   \   000053   EE           MOV       A,R6
   \   000054   FC           MOV       R4,A
   \   000055   EF           MOV       A,R7
   \   000056   FD           MOV       R5,A
   \   000057   AA..         MOV       R2,?V0
   \   000059   AB..         MOV       R3,?V1
   \   00005B   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1172                pBuf += Z_EXTADDR_LEN;
   \   00005E   EE           MOV       A,R6
   \   00005F   2408         ADD       A,#0x8
   \   000061   FE           MOV       R6,A
   \   000062   5001         JNC       ??bdbTL_ProcessInCmd_EndpointInfo_2
   \   000064   0F           INC       R7
   1173          
   1174                pCmd->nwkAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_EndpointInfo_2:
   \   000065   8E82         MOV       DPL,R6
   \   000067   8F83         MOV       DPH,R7
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   FA           MOV       R2,A
   \   00006B   7B00         MOV       R3,#0x0
   \   00006D   8E82         MOV       DPL,R6
   \   00006F   8F83         MOV       DPH,R7
   \   000071   A3           INC       DPTR
   \   000072   E0           MOVX      A,@DPTR
   \   000073   F8           MOV       R0,A
   \   000074   7900         MOV       R1,#0x0
   \   000076   E4           CLR       A
   \   000077   C8           XCH       A,R0
   \   000078   F9           MOV       R1,A
   \   000079   EA           MOV       A,R2
   \   00007A   28           ADD       A,R0
   \   00007B   F8           MOV       R0,A
   \   00007C   EB           MOV       A,R3
   \   00007D   39           ADDC      A,R1
   \   00007E   F9           MOV       R1,A
   \   00007F   85..82       MOV       DPL,?V0
   \   000082   85..83       MOV       DPH,?V1
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   E8           MOV       A,R0
   \   00008E   F0           MOVX      @DPTR,A
   \   00008F   A3           INC       DPTR
   \   000090   E9           MOV       A,R1
   \   000091   F0           MOVX      @DPTR,A
   1175                pBuf += 2;
   \   000092   EE           MOV       A,R6
   \   000093   2402         ADD       A,#0x2
   \   000095   FE           MOV       R6,A
   \   000096   5001         JNC       ??bdbTL_ProcessInCmd_EndpointInfo_3
   \   000098   0F           INC       R7
   1176          
   1177                pCmd->endpoint = *pBuf++;
   \                     ??bdbTL_ProcessInCmd_EndpointInfo_3:
   \   000099   8E82         MOV       DPL,R6
   \   00009B   8F83         MOV       DPH,R7
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   C0E0         PUSH      A
   \   0000A0   85..82       MOV       DPL,?V0
   \   0000A3   85..83       MOV       DPH,?V1
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   A3           INC       DPTR
   \   0000AB   A3           INC       DPTR
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   A3           INC       DPTR
   \   0000AF   A3           INC       DPTR
   \   0000B0   D0E0         POP       A
   \   0000B2   F0           MOVX      @DPTR,A
   \   0000B3   8E82         MOV       DPL,R6
   \   0000B5   8F83         MOV       DPH,R7
   \   0000B7   A3           INC       DPTR
   \   0000B8   AE82         MOV       R6,DPL
   \   0000BA   AF83         MOV       R7,DPH
   1178          
   1179                pCmd->profileID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   0000BC   8E82         MOV       DPL,R6
   \   0000BE   8F83         MOV       DPH,R7
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   FA           MOV       R2,A
   \   0000C2   7B00         MOV       R3,#0x0
   \   0000C4   8E82         MOV       DPL,R6
   \   0000C6   8F83         MOV       DPH,R7
   \   0000C8   A3           INC       DPTR
   \   0000C9   E0           MOVX      A,@DPTR
   \   0000CA   F8           MOV       R0,A
   \   0000CB   7900         MOV       R1,#0x0
   \   0000CD   E4           CLR       A
   \   0000CE   C8           XCH       A,R0
   \   0000CF   F9           MOV       R1,A
   \   0000D0   EA           MOV       A,R2
   \   0000D1   28           ADD       A,R0
   \   0000D2   F8           MOV       R0,A
   \   0000D3   EB           MOV       A,R3
   \   0000D4   39           ADDC      A,R1
   \   0000D5   F9           MOV       R1,A
   \   0000D6   E5..         MOV       A,?V0
   \   0000D8   240B         ADD       A,#0xb
   \   0000DA   F582         MOV       DPL,A
   \   0000DC   E4           CLR       A
   \   0000DD   35..         ADDC      A,?V1
   \   0000DF   F583         MOV       DPH,A
   \   0000E1   E8           MOV       A,R0
   \   0000E2   F0           MOVX      @DPTR,A
   \   0000E3   A3           INC       DPTR
   \   0000E4   E9           MOV       A,R1
   \   0000E5   F0           MOVX      @DPTR,A
   1180                pBuf += 2;
   \   0000E6   EE           MOV       A,R6
   \   0000E7   2402         ADD       A,#0x2
   \   0000E9   FE           MOV       R6,A
   \   0000EA   5001         JNC       ??bdbTL_ProcessInCmd_EndpointInfo_4
   \   0000EC   0F           INC       R7
   1181          
   1182                pCmd->deviceID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_EndpointInfo_4:
   \   0000ED   8E82         MOV       DPL,R6
   \   0000EF   8F83         MOV       DPH,R7
   \   0000F1   E0           MOVX      A,@DPTR
   \   0000F2   FA           MOV       R2,A
   \   0000F3   7B00         MOV       R3,#0x0
   \   0000F5   8E82         MOV       DPL,R6
   \   0000F7   8F83         MOV       DPH,R7
   \   0000F9   A3           INC       DPTR
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   F8           MOV       R0,A
   \   0000FC   7900         MOV       R1,#0x0
   \   0000FE   E4           CLR       A
   \   0000FF   C8           XCH       A,R0
   \   000100   F9           MOV       R1,A
   \   000101   EA           MOV       A,R2
   \   000102   28           ADD       A,R0
   \   000103   F8           MOV       R0,A
   \   000104   EB           MOV       A,R3
   \   000105   39           ADDC      A,R1
   \   000106   F9           MOV       R1,A
   \   000107   E5..         MOV       A,?V0
   \   000109   240D         ADD       A,#0xd
   \   00010B   F582         MOV       DPL,A
   \   00010D   E4           CLR       A
   \   00010E   35..         ADDC      A,?V1
   \   000110   F583         MOV       DPH,A
   \   000112   E8           MOV       A,R0
   \   000113   F0           MOVX      @DPTR,A
   \   000114   A3           INC       DPTR
   \   000115   E9           MOV       A,R1
   \   000116   F0           MOVX      @DPTR,A
   1183                pBuf += 2;
   \   000117   EE           MOV       A,R6
   \   000118   2402         ADD       A,#0x2
   \   00011A   FE           MOV       R6,A
   \   00011B   5001         JNC       ??bdbTL_ProcessInCmd_EndpointInfo_5
   \   00011D   0F           INC       R7
   1184          
   1185                pCmd->version = *pBuf++;
   \                     ??bdbTL_ProcessInCmd_EndpointInfo_5:
   \   00011E   8E82         MOV       DPL,R6
   \   000120   8F83         MOV       DPH,R7
   \   000122   E0           MOVX      A,@DPTR
   \   000123   C0E0         PUSH      A
   \   000125   E5..         MOV       A,?V0
   \   000127   240F         ADD       A,#0xf
   \   000129   F582         MOV       DPL,A
   \   00012B   E4           CLR       A
   \   00012C   35..         ADDC      A,?V1
   \   00012E   F583         MOV       DPH,A
   \   000130   D0E0         POP       A
   \   000132   F0           MOVX      @DPTR,A
   \   000133   8E82         MOV       DPL,R6
   \   000135   8F83         MOV       DPH,R7
   \   000137   A3           INC       DPTR
   \   000138   AE82         MOV       R6,DPL
   \   00013A   AF83         MOV       R7,DPH
   1186          
   1187                status = pCBs->pfnEndpointInfo( &(pInMsg->msg->srcAddr), pCmd );
   \   00013C                ; Setup parameters for indirect call
   \   00013C   AC..         MOV       R4,?V0
   \   00013E   AD..         MOV       R5,?V1
   \   000140   85..82       MOV       DPL,?V6
   \   000143   85..83       MOV       DPH,?V7
   \   000146   E0           MOVX      A,@DPTR
   \   000147   2406         ADD       A,#0x6
   \   000149   FA           MOV       R2,A
   \   00014A   A3           INC       DPTR
   \   00014B   E0           MOVX      A,@DPTR
   \   00014C   3400         ADDC      A,#0x0
   \   00014E   FB           MOV       R3,A
   \   00014F   85..82       MOV       DPL,?V4
   \   000152   85..83       MOV       DPH,?V5
   \   000155   A3           INC       DPTR
   \   000156   A3           INC       DPTR
   \   000157   A3           INC       DPTR
   \   000158   A3           INC       DPTR
   \   000159   E0           MOVX      A,@DPTR
   \   00015A   F8           MOV       R0,A
   \   00015B   A3           INC       DPTR
   \   00015C   E0           MOVX      A,@DPTR
   \   00015D   F583         MOV       DPH,A
   \   00015F   8882         MOV       DPL,R0
   \   000161   12....       LCALL     ?CALL_IND
   \   000164   E9           MOV       A,R1
   \   000165   F5..         MOV       ?V2,A
   1188          
   1189                zcl_mem_free( pCmd );
   \   000167                ; Setup parameters for call to function osal_mem_free
   \   000167   AA..         MOV       R2,?V0
   \   000169   AB..         MOV       R3,?V1
   \   00016B   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00016E   8003         SJMP      ??bdbTL_ProcessInCmd_EndpointInfo_1
   1190              }
   1191            }
   1192            else
   1193            {
   1194              status = ZSuccess;
   \                     ??bdbTL_ProcessInCmd_EndpointInfo_0:
   \   000170   75..00       MOV       ?V2,#0x0
   1195            }
   1196          
   1197            return ( status );
   \                     ??bdbTL_ProcessInCmd_EndpointInfo_1:
   \   000173   A9..         MOV       R1,?V2
   \   000175   7F0A         MOV       R7,#0xa
   \   000177   02....       LJMP      ?BANKED_LEAVE_XDATA
   1198          }
   1199          
   1200          /*********************************************************************
   1201           * @fn      bdbTL_ProcessInCmd_GetGrpIDsRsp
   1202           *
   1203           * @brief   Process in the received Get Group Identifiers Response command.
   1204           *
   1205           * @param   pInMsg - pointer to the incoming message
   1206           * @param   pCBs - pointer to the application callbacks
   1207           *
   1208           * @return  ZStatus_t
   1209           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1210          static ZStatus_t bdbTL_ProcessInCmd_GetGrpIDsRsp( zclIncoming_t *pInMsg,
   \                     bdbTL_ProcessInCmd_GetGrpIDsRsp:
   1211                                                            bdbTL_AppCallbacks_t *pCBs )
   1212          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   \   000009   8C..         MOV       ?V8,R4
   \   00000B   8D..         MOV       ?V9,R5
   1213            ZStatus_t status = ZFailure;
   \   00000D   75..01       MOV       ?V2,#0x1
   1214          
   1215            if ( pCBs->pfnGetGrpIDsRsp )
   \   000010   85..82       MOV       DPL,?V8
   \   000013   85..83       MOV       DPH,?V9
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F8           MOV       R0,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F9           MOV       R1,A
   \   000021   E8           MOV       A,R0
   \   000022   49           ORL       A,R1
   \   000023   7003         JNZ       $+5
   \   000025   02....       LJMP      ??bdbTL_ProcessInCmd_GetGrpIDsRsp_0 & 0xFFFF
   1216            {
   1217              bdbTLGetGrpIDsRsp_t *pRsp;
   1218              uint8 cnt = pInMsg->pData[TOUCHLINK_CMDLEN_GET_GRP_IDS_RSP-1];
   \   000028   85..82       MOV       DPL,?V6
   \   00002B   85..83       MOV       DPH,?V7
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F8           MOV       R0,A
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F583         MOV       DPH,A
   \   00003C   8882         MOV       DPL,R0
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   F5..         MOV       ?V4,A
   1219              uint8 rspLen = sizeof( bdbTLGetGrpIDsRsp_t ) + ( cnt * sizeof( grpInfoRec_t ) );
   \   000043   75F003       MOV       B,#0x3
   \   000046   E5..         MOV       A,?V4
   \   000048   A4           MUL       AB
   \   000049   2405         ADD       A,#0x5
   \   00004B   F5..         MOV       ?V5,A
   1220          
   1221              pRsp = (bdbTLGetGrpIDsRsp_t *)zcl_mem_alloc( rspLen );
   \   00004D                ; Setup parameters for call to function osal_mem_alloc
   \   00004D   E5..         MOV       A,?V5
   \   00004F   FA           MOV       R2,A
   \   000050   7B00         MOV       R3,#0x0
   \   000052   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000055   8A..         MOV       ?V10,R2
   \   000057   8B..         MOV       ?V11,R3
   \   000059   85....       MOV       ?V0,?V10
   \   00005C   85....       MOV       ?V1,?V11
   1222              if ( pRsp )
   \   00005F   E5..         MOV       A,?V0
   \   000061   45..         ORL       A,?V1
   \   000063   7003         JNZ       $+5
   \   000065   02....       LJMP      ??bdbTL_ProcessInCmd_GetGrpIDsRsp_0 & 0xFFFF
   1223              {
   1224                uint8 *pBuf = pInMsg->pData;
   \   000068   85..82       MOV       DPL,?V6
   \   00006B   85..83       MOV       DPH,?V7
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   E0           MOVX      A,@DPTR
   \   000077   FE           MOV       R6,A
   \   000078   A3           INC       DPTR
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   FF           MOV       R7,A
   1225                uint8 i;
   1226          
   1227                pRsp->total = *pBuf++;
   \   00007B   8E82         MOV       DPL,R6
   \   00007D   8F83         MOV       DPH,R7
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   C0E0         PUSH      A
   \   000082   85..82       MOV       DPL,?V0
   \   000085   85..83       MOV       DPH,?V1
   \   000088   D0E0         POP       A
   \   00008A   F0           MOVX      @DPTR,A
   \   00008B   8E82         MOV       DPL,R6
   \   00008D   8F83         MOV       DPH,R7
   \   00008F   A3           INC       DPTR
   \   000090   AE82         MOV       R6,DPL
   \   000092   AF83         MOV       R7,DPH
   1228                pRsp->startIndex = *pBuf++;
   \   000094   8E82         MOV       DPL,R6
   \   000096   8F83         MOV       DPH,R7
   \   000098   E0           MOVX      A,@DPTR
   \   000099   C0E0         PUSH      A
   \   00009B   85..82       MOV       DPL,?V0
   \   00009E   85..83       MOV       DPH,?V1
   \   0000A1   A3           INC       DPTR
   \   0000A2   D0E0         POP       A
   \   0000A4   F0           MOVX      @DPTR,A
   \   0000A5   8E82         MOV       DPL,R6
   \   0000A7   8F83         MOV       DPH,R7
   \   0000A9   A3           INC       DPTR
   \   0000AA   AE82         MOV       R6,DPL
   \   0000AC   AF83         MOV       R7,DPH
   1229                pRsp->cnt = *pBuf++;
   \   0000AE   8E82         MOV       DPL,R6
   \   0000B0   8F83         MOV       DPH,R7
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   C0E0         PUSH      A
   \   0000B5   85..82       MOV       DPL,?V0
   \   0000B8   85..83       MOV       DPH,?V1
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   D0E0         POP       A
   \   0000BF   F0           MOVX      @DPTR,A
   \   0000C0   8E82         MOV       DPL,R6
   \   0000C2   8F83         MOV       DPH,R7
   \   0000C4   A3           INC       DPTR
   \   0000C5   AE82         MOV       R6,DPL
   \   0000C7   AF83         MOV       R7,DPH
   1230                pRsp->grpInfoRec = (grpInfoRec_t *)(pRsp+1);
   \   0000C9   E5..         MOV       A,?V0
   \   0000CB   2405         ADD       A,#0x5
   \   0000CD   F8           MOV       R0,A
   \   0000CE   E4           CLR       A
   \   0000CF   35..         ADDC      A,?V1
   \   0000D1   F9           MOV       R1,A
   \   0000D2   85..82       MOV       DPL,?V0
   \   0000D5   85..83       MOV       DPH,?V1
   \   0000D8   A3           INC       DPTR
   \   0000D9   A3           INC       DPTR
   \   0000DA   A3           INC       DPTR
   \   0000DB   E8           MOV       A,R0
   \   0000DC   F0           MOVX      @DPTR,A
   \   0000DD   A3           INC       DPTR
   \   0000DE   E9           MOV       A,R1
   \   0000DF   F0           MOVX      @DPTR,A
   1231          
   1232                for ( i = 0; i < cnt; i++ )
   \   0000E0   75..00       MOV       ?V3,#0x0
   \                     ??bdbTL_ProcessInCmd_GetGrpIDsRsp_1:
   \   0000E3   E5..         MOV       A,?V3
   \   0000E5   C3           CLR       C
   \   0000E6   95..         SUBB      A,?V4
   \   0000E8   5071         JNC       ??bdbTL_ProcessInCmd_GetGrpIDsRsp_2
   1233                {
   1234                  grpInfoRec_t *pRec = &(pRsp->grpInfoRec[i]);
   \   0000EA   E5..         MOV       A,?V3
   \   0000EC   F8           MOV       R0,A
   \   0000ED   7900         MOV       R1,#0x0
   \   0000EF   E8           MOV       A,R0
   \   0000F0   75F003       MOV       B,#0x3
   \   0000F3   A4           MUL       AB
   \   0000F4   C8           XCH       A,R0
   \   0000F5   AAF0         MOV       R2,B
   \   0000F7   75F000       MOV       B,#0x0
   \   0000FA   A4           MUL       AB
   \   0000FB   2A           ADD       A,R2
   \   0000FC   FA           MOV       R2,A
   \   0000FD   75F003       MOV       B,#0x3
   \   000100   E9           MOV       A,R1
   \   000101   A4           MUL       AB
   \   000102   2A           ADD       A,R2
   \   000103   F9           MOV       R1,A
   \   000104   85..82       MOV       DPL,?V0
   \   000107   85..83       MOV       DPH,?V1
   \   00010A   A3           INC       DPTR
   \   00010B   A3           INC       DPTR
   \   00010C   A3           INC       DPTR
   \   00010D   E0           MOVX      A,@DPTR
   \   00010E   28           ADD       A,R0
   \   00010F   F8           MOV       R0,A
   \   000110   A3           INC       DPTR
   \   000111   E0           MOVX      A,@DPTR
   \   000112   39           ADDC      A,R1
   \   000113   F9           MOV       R1,A
   1235          
   1236                  pRec->grpID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000114   8E82         MOV       DPL,R6
   \   000116   8F83         MOV       DPH,R7
   \   000118   E0           MOVX      A,@DPTR
   \   000119   FC           MOV       R4,A
   \   00011A   7D00         MOV       R5,#0x0
   \   00011C   8E82         MOV       DPL,R6
   \   00011E   8F83         MOV       DPH,R7
   \   000120   A3           INC       DPTR
   \   000121   E0           MOVX      A,@DPTR
   \   000122   FA           MOV       R2,A
   \   000123   7B00         MOV       R3,#0x0
   \   000125   E4           CLR       A
   \   000126   CA           XCH       A,R2
   \   000127   FB           MOV       R3,A
   \   000128   EC           MOV       A,R4
   \   000129   2A           ADD       A,R2
   \   00012A   FA           MOV       R2,A
   \   00012B   ED           MOV       A,R5
   \   00012C   3B           ADDC      A,R3
   \   00012D   FB           MOV       R3,A
   \   00012E   8882         MOV       DPL,R0
   \   000130   8983         MOV       DPH,R1
   \   000132   EA           MOV       A,R2
   \   000133   F0           MOVX      @DPTR,A
   \   000134   A3           INC       DPTR
   \   000135   EB           MOV       A,R3
   \   000136   F0           MOVX      @DPTR,A
   1237                  pBuf += 2;
   \   000137   EE           MOV       A,R6
   \   000138   2402         ADD       A,#0x2
   \   00013A   FE           MOV       R6,A
   \   00013B   5001         JNC       ??bdbTL_ProcessInCmd_GetGrpIDsRsp_3
   \   00013D   0F           INC       R7
   1238          
   1239                  pRec->grpType = *pBuf++;
   \                     ??bdbTL_ProcessInCmd_GetGrpIDsRsp_3:
   \   00013E   8E82         MOV       DPL,R6
   \   000140   8F83         MOV       DPH,R7
   \   000142   E0           MOVX      A,@DPTR
   \   000143   C0E0         PUSH      A
   \   000145   8882         MOV       DPL,R0
   \   000147   8983         MOV       DPH,R1
   \   000149   A3           INC       DPTR
   \   00014A   A3           INC       DPTR
   \   00014B   D0E0         POP       A
   \   00014D   F0           MOVX      @DPTR,A
   \   00014E   8E82         MOV       DPL,R6
   \   000150   8F83         MOV       DPH,R7
   \   000152   A3           INC       DPTR
   \   000153   AE82         MOV       R6,DPL
   \   000155   AF83         MOV       R7,DPH
   1240                }
   \   000157   05..         INC       ?V3
   \   000159   8088         SJMP      ??bdbTL_ProcessInCmd_GetGrpIDsRsp_1
   1241          
   1242                status = pCBs->pfnGetGrpIDsRsp( &(pInMsg->msg->srcAddr), pRsp );
   \                     ??bdbTL_ProcessInCmd_GetGrpIDsRsp_2:
   \   00015B                ; Setup parameters for indirect call
   \   00015B   AC..         MOV       R4,?V0
   \   00015D   AD..         MOV       R5,?V1
   \   00015F   85..82       MOV       DPL,?V6
   \   000162   85..83       MOV       DPH,?V7
   \   000165   E0           MOVX      A,@DPTR
   \   000166   2406         ADD       A,#0x6
   \   000168   FA           MOV       R2,A
   \   000169   A3           INC       DPTR
   \   00016A   E0           MOVX      A,@DPTR
   \   00016B   3400         ADDC      A,#0x0
   \   00016D   FB           MOV       R3,A
   \   00016E   85..82       MOV       DPL,?V8
   \   000171   85..83       MOV       DPH,?V9
   \   000174   A3           INC       DPTR
   \   000175   A3           INC       DPTR
   \   000176   A3           INC       DPTR
   \   000177   A3           INC       DPTR
   \   000178   A3           INC       DPTR
   \   000179   A3           INC       DPTR
   \   00017A   E0           MOVX      A,@DPTR
   \   00017B   F8           MOV       R0,A
   \   00017C   A3           INC       DPTR
   \   00017D   E0           MOVX      A,@DPTR
   \   00017E   F583         MOV       DPH,A
   \   000180   8882         MOV       DPL,R0
   \   000182   12....       LCALL     ?CALL_IND
   \   000185   E9           MOV       A,R1
   \   000186   F5..         MOV       ?V2,A
   1243          
   1244                zcl_mem_free( pRsp );
   \   000188                ; Setup parameters for call to function osal_mem_free
   \   000188   AA..         MOV       R2,?V0
   \   00018A   AB..         MOV       R3,?V1
   \   00018C   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1245              }
   1246            }
   1247          
   1248            return ( status );
   \                     ??bdbTL_ProcessInCmd_GetGrpIDsRsp_0:
   \   00018F   A9..         MOV       R1,?V2
   \   000191   7F0C         MOV       R7,#0xc
   \   000193   02....       LJMP      ?BANKED_LEAVE_XDATA
   1249          }
   1250          
   1251          /*********************************************************************
   1252           * @fn      bdbTL_ProcessInCmd_GetEPListRsp
   1253           *
   1254           * @brief   Process in the received Get Endpoint List Response command.
   1255           *
   1256           * @param   pInMsg - pointer to the incoming message
   1257           * @param   pCBs - pointer to the application callbacks
   1258           *
   1259           * @return  ZStatus_t
   1260           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1261          static ZStatus_t bdbTL_ProcessInCmd_GetEPListRsp( zclIncoming_t *pInMsg,
   \                     bdbTL_ProcessInCmd_GetEPListRsp:
   1262                                                            bdbTL_AppCallbacks_t *pCBs )
   1263          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   \   000009   8C..         MOV       ?V8,R4
   \   00000B   8D..         MOV       ?V9,R5
   1264            ZStatus_t status = ZFailure;
   \   00000D   75..01       MOV       ?V3,#0x1
   1265          
   1266            if ( pCBs->pfnGetEPListRsp )
   \   000010   85..82       MOV       DPL,?V8
   \   000013   85..83       MOV       DPH,?V9
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F8           MOV       R0,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   E8           MOV       A,R0
   \   000024   49           ORL       A,R1
   \   000025   7003         JNZ       $+5
   \   000027   02....       LJMP      ??bdbTL_ProcessInCmd_GetEPListRsp_0 & 0xFFFF
   1267            {
   1268              bdbTLGetEPListRsp_t *pRsp;
   1269              uint8 cnt = pInMsg->pData[TOUCHLINK_CMDLEN_GET_EP_LIST_RSP-1];
   \   00002A   85..82       MOV       DPL,?V4
   \   00002D   85..83       MOV       DPH,?V5
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F8           MOV       R0,A
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F583         MOV       DPH,A
   \   00003E   8882         MOV       DPL,R0
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F5..         MOV       ?V6,A
   1270              uint8 rspLen = sizeof( bdbTLGetEPListRsp_t ) + ( cnt * sizeof( epInfoRec_t ) );
   \   000045   75F008       MOV       B,#0x8
   \   000048   E5..         MOV       A,?V6
   \   00004A   A4           MUL       AB
   \   00004B   2405         ADD       A,#0x5
   \   00004D   F5..         MOV       ?V7,A
   1271          
   1272              pRsp = (bdbTLGetEPListRsp_t *)zcl_mem_alloc( rspLen );
   \   00004F                ; Setup parameters for call to function osal_mem_alloc
   \   00004F   E5..         MOV       A,?V7
   \   000051   FA           MOV       R2,A
   \   000052   7B00         MOV       R3,#0x0
   \   000054   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000057   8A..         MOV       ?V10,R2
   \   000059   8B..         MOV       ?V11,R3
   \   00005B   85....       MOV       ?V0,?V10
   \   00005E   85....       MOV       ?V1,?V11
   1273              if ( pRsp )
   \   000061   E5..         MOV       A,?V0
   \   000063   45..         ORL       A,?V1
   \   000065   7003         JNZ       $+5
   \   000067   02....       LJMP      ??bdbTL_ProcessInCmd_GetEPListRsp_0 & 0xFFFF
   1274              {
   1275                uint8 *pBuf = pInMsg->pData;
   \   00006A   85..82       MOV       DPL,?V4
   \   00006D   85..83       MOV       DPH,?V5
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   E0           MOVX      A,@DPTR
   \   000079   FE           MOV       R6,A
   \   00007A   A3           INC       DPTR
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   FF           MOV       R7,A
   1276                uint8 i;
   1277          
   1278                pRsp->total = *pBuf++;
   \   00007D   8E82         MOV       DPL,R6
   \   00007F   8F83         MOV       DPH,R7
   \   000081   E0           MOVX      A,@DPTR
   \   000082   C0E0         PUSH      A
   \   000084   85..82       MOV       DPL,?V0
   \   000087   85..83       MOV       DPH,?V1
   \   00008A   D0E0         POP       A
   \   00008C   F0           MOVX      @DPTR,A
   \   00008D   8E82         MOV       DPL,R6
   \   00008F   8F83         MOV       DPH,R7
   \   000091   A3           INC       DPTR
   \   000092   AE82         MOV       R6,DPL
   \   000094   AF83         MOV       R7,DPH
   1279                pRsp->startIndex = *pBuf++;
   \   000096   8E82         MOV       DPL,R6
   \   000098   8F83         MOV       DPH,R7
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   C0E0         PUSH      A
   \   00009D   85..82       MOV       DPL,?V0
   \   0000A0   85..83       MOV       DPH,?V1
   \   0000A3   A3           INC       DPTR
   \   0000A4   D0E0         POP       A
   \   0000A6   F0           MOVX      @DPTR,A
   \   0000A7   8E82         MOV       DPL,R6
   \   0000A9   8F83         MOV       DPH,R7
   \   0000AB   A3           INC       DPTR
   \   0000AC   AE82         MOV       R6,DPL
   \   0000AE   AF83         MOV       R7,DPH
   1280                pRsp->cnt = *pBuf++;
   \   0000B0   8E82         MOV       DPL,R6
   \   0000B2   8F83         MOV       DPH,R7
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   C0E0         PUSH      A
   \   0000B7   85..82       MOV       DPL,?V0
   \   0000BA   85..83       MOV       DPH,?V1
   \   0000BD   A3           INC       DPTR
   \   0000BE   A3           INC       DPTR
   \   0000BF   D0E0         POP       A
   \   0000C1   F0           MOVX      @DPTR,A
   \   0000C2   8E82         MOV       DPL,R6
   \   0000C4   8F83         MOV       DPH,R7
   \   0000C6   A3           INC       DPTR
   \   0000C7   AE82         MOV       R6,DPL
   \   0000C9   AF83         MOV       R7,DPH
   1281                pRsp->epInfoRec = (epInfoRec_t *)(pRsp+1);
   \   0000CB   E5..         MOV       A,?V0
   \   0000CD   2405         ADD       A,#0x5
   \   0000CF   F8           MOV       R0,A
   \   0000D0   E4           CLR       A
   \   0000D1   35..         ADDC      A,?V1
   \   0000D3   F9           MOV       R1,A
   \   0000D4   85..82       MOV       DPL,?V0
   \   0000D7   85..83       MOV       DPH,?V1
   \   0000DA   A3           INC       DPTR
   \   0000DB   A3           INC       DPTR
   \   0000DC   A3           INC       DPTR
   \   0000DD   E8           MOV       A,R0
   \   0000DE   F0           MOVX      @DPTR,A
   \   0000DF   A3           INC       DPTR
   \   0000E0   E9           MOV       A,R1
   \   0000E1   F0           MOVX      @DPTR,A
   1282          
   1283                for ( i = 0; i < cnt; i++ )
   \   0000E2   75..00       MOV       ?V2,#0x0
   \                     ??bdbTL_ProcessInCmd_GetEPListRsp_1:
   \   0000E5   E5..         MOV       A,?V2
   \   0000E7   C3           CLR       C
   \   0000E8   95..         SUBB      A,?V6
   \   0000EA   4003         JC        $+5
   \   0000EC   02....       LJMP      ??bdbTL_ProcessInCmd_GetEPListRsp_2 & 0xFFFF
   1284                {
   1285                  epInfoRec_t *pRec = &(pRsp->epInfoRec[i]);
   \   0000EF   E5..         MOV       A,?V2
   \   0000F1   F8           MOV       R0,A
   \   0000F2   7900         MOV       R1,#0x0
   \   0000F4   E8           MOV       A,R0
   \   0000F5   75F008       MOV       B,#0x8
   \   0000F8   A4           MUL       AB
   \   0000F9   C8           XCH       A,R0
   \   0000FA   AAF0         MOV       R2,B
   \   0000FC   75F000       MOV       B,#0x0
   \   0000FF   A4           MUL       AB
   \   000100   2A           ADD       A,R2
   \   000101   FA           MOV       R2,A
   \   000102   75F008       MOV       B,#0x8
   \   000105   E9           MOV       A,R1
   \   000106   A4           MUL       AB
   \   000107   2A           ADD       A,R2
   \   000108   F9           MOV       R1,A
   \   000109   85..82       MOV       DPL,?V0
   \   00010C   85..83       MOV       DPH,?V1
   \   00010F   A3           INC       DPTR
   \   000110   A3           INC       DPTR
   \   000111   A3           INC       DPTR
   \   000112   E0           MOVX      A,@DPTR
   \   000113   28           ADD       A,R0
   \   000114   F8           MOV       R0,A
   \   000115   A3           INC       DPTR
   \   000116   E0           MOVX      A,@DPTR
   \   000117   39           ADDC      A,R1
   \   000118   F9           MOV       R1,A
   1286          
   1287                  pRec->nwkAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000119   8E82         MOV       DPL,R6
   \   00011B   8F83         MOV       DPH,R7
   \   00011D   E0           MOVX      A,@DPTR
   \   00011E   FC           MOV       R4,A
   \   00011F   7D00         MOV       R5,#0x0
   \   000121   8E82         MOV       DPL,R6
   \   000123   8F83         MOV       DPH,R7
   \   000125   A3           INC       DPTR
   \   000126   E0           MOVX      A,@DPTR
   \   000127   FA           MOV       R2,A
   \   000128   7B00         MOV       R3,#0x0
   \   00012A   E4           CLR       A
   \   00012B   CA           XCH       A,R2
   \   00012C   FB           MOV       R3,A
   \   00012D   EC           MOV       A,R4
   \   00012E   2A           ADD       A,R2
   \   00012F   FA           MOV       R2,A
   \   000130   ED           MOV       A,R5
   \   000131   3B           ADDC      A,R3
   \   000132   FB           MOV       R3,A
   \   000133   8882         MOV       DPL,R0
   \   000135   8983         MOV       DPH,R1
   \   000137   EA           MOV       A,R2
   \   000138   F0           MOVX      @DPTR,A
   \   000139   A3           INC       DPTR
   \   00013A   EB           MOV       A,R3
   \   00013B   F0           MOVX      @DPTR,A
   1288                  pBuf += 2;
   \   00013C   EE           MOV       A,R6
   \   00013D   2402         ADD       A,#0x2
   \   00013F   FE           MOV       R6,A
   \   000140   5001         JNC       ??bdbTL_ProcessInCmd_GetEPListRsp_3
   \   000142   0F           INC       R7
   1289          
   1290                  pRec->endpoint = *pBuf++;
   \                     ??bdbTL_ProcessInCmd_GetEPListRsp_3:
   \   000143   8E82         MOV       DPL,R6
   \   000145   8F83         MOV       DPH,R7
   \   000147   E0           MOVX      A,@DPTR
   \   000148   C0E0         PUSH      A
   \   00014A   8882         MOV       DPL,R0
   \   00014C   8983         MOV       DPH,R1
   \   00014E   A3           INC       DPTR
   \   00014F   A3           INC       DPTR
   \   000150   D0E0         POP       A
   \   000152   F0           MOVX      @DPTR,A
   \   000153   8E82         MOV       DPL,R6
   \   000155   8F83         MOV       DPH,R7
   \   000157   A3           INC       DPTR
   \   000158   AE82         MOV       R6,DPL
   \   00015A   AF83         MOV       R7,DPH
   1291          
   1292                  pRec->profileID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   00015C   8E82         MOV       DPL,R6
   \   00015E   8F83         MOV       DPH,R7
   \   000160   E0           MOVX      A,@DPTR
   \   000161   FC           MOV       R4,A
   \   000162   7D00         MOV       R5,#0x0
   \   000164   8E82         MOV       DPL,R6
   \   000166   8F83         MOV       DPH,R7
   \   000168   A3           INC       DPTR
   \   000169   E0           MOVX      A,@DPTR
   \   00016A   FA           MOV       R2,A
   \   00016B   7B00         MOV       R3,#0x0
   \   00016D   E4           CLR       A
   \   00016E   CA           XCH       A,R2
   \   00016F   FB           MOV       R3,A
   \   000170   EC           MOV       A,R4
   \   000171   2A           ADD       A,R2
   \   000172   FA           MOV       R2,A
   \   000173   ED           MOV       A,R5
   \   000174   3B           ADDC      A,R3
   \   000175   FB           MOV       R3,A
   \   000176   8882         MOV       DPL,R0
   \   000178   8983         MOV       DPH,R1
   \   00017A   A3           INC       DPTR
   \   00017B   A3           INC       DPTR
   \   00017C   A3           INC       DPTR
   \   00017D   EA           MOV       A,R2
   \   00017E   F0           MOVX      @DPTR,A
   \   00017F   A3           INC       DPTR
   \   000180   EB           MOV       A,R3
   \   000181   F0           MOVX      @DPTR,A
   1293                  pBuf += 2;
   \   000182   EE           MOV       A,R6
   \   000183   2402         ADD       A,#0x2
   \   000185   FE           MOV       R6,A
   \   000186   5001         JNC       ??bdbTL_ProcessInCmd_GetEPListRsp_4
   \   000188   0F           INC       R7
   1294          
   1295                  pRec->deviceID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_GetEPListRsp_4:
   \   000189   8E82         MOV       DPL,R6
   \   00018B   8F83         MOV       DPH,R7
   \   00018D   E0           MOVX      A,@DPTR
   \   00018E   FC           MOV       R4,A
   \   00018F   7D00         MOV       R5,#0x0
   \   000191   8E82         MOV       DPL,R6
   \   000193   8F83         MOV       DPH,R7
   \   000195   A3           INC       DPTR
   \   000196   E0           MOVX      A,@DPTR
   \   000197   FA           MOV       R2,A
   \   000198   7B00         MOV       R3,#0x0
   \   00019A   E4           CLR       A
   \   00019B   CA           XCH       A,R2
   \   00019C   FB           MOV       R3,A
   \   00019D   EC           MOV       A,R4
   \   00019E   2A           ADD       A,R2
   \   00019F   FA           MOV       R2,A
   \   0001A0   ED           MOV       A,R5
   \   0001A1   3B           ADDC      A,R3
   \   0001A2   FB           MOV       R3,A
   \   0001A3   8882         MOV       DPL,R0
   \   0001A5   8983         MOV       DPH,R1
   \   0001A7   A3           INC       DPTR
   \   0001A8   A3           INC       DPTR
   \   0001A9   A3           INC       DPTR
   \   0001AA   A3           INC       DPTR
   \   0001AB   A3           INC       DPTR
   \   0001AC   EA           MOV       A,R2
   \   0001AD   F0           MOVX      @DPTR,A
   \   0001AE   A3           INC       DPTR
   \   0001AF   EB           MOV       A,R3
   \   0001B0   F0           MOVX      @DPTR,A
   1296                  pBuf += 2;
   \   0001B1   EE           MOV       A,R6
   \   0001B2   2402         ADD       A,#0x2
   \   0001B4   FE           MOV       R6,A
   \   0001B5   5001         JNC       ??bdbTL_ProcessInCmd_GetEPListRsp_5
   \   0001B7   0F           INC       R7
   1297          
   1298                  pRec->version = *pBuf++;
   \                     ??bdbTL_ProcessInCmd_GetEPListRsp_5:
   \   0001B8   8E82         MOV       DPL,R6
   \   0001BA   8F83         MOV       DPH,R7
   \   0001BC   E0           MOVX      A,@DPTR
   \   0001BD   C0E0         PUSH      A
   \   0001BF   8882         MOV       DPL,R0
   \   0001C1   8983         MOV       DPH,R1
   \   0001C3   A3           INC       DPTR
   \   0001C4   A3           INC       DPTR
   \   0001C5   A3           INC       DPTR
   \   0001C6   A3           INC       DPTR
   \   0001C7   A3           INC       DPTR
   \   0001C8   A3           INC       DPTR
   \   0001C9   A3           INC       DPTR
   \   0001CA   D0E0         POP       A
   \   0001CC   F0           MOVX      @DPTR,A
   \   0001CD   8E82         MOV       DPL,R6
   \   0001CF   8F83         MOV       DPH,R7
   \   0001D1   A3           INC       DPTR
   \   0001D2   AE82         MOV       R6,DPL
   \   0001D4   AF83         MOV       R7,DPH
   1299                }
   \   0001D6   05..         INC       ?V2
   \   0001D8   02....       LJMP      ??bdbTL_ProcessInCmd_GetEPListRsp_1 & 0xFFFF
   1300          
   1301                status = pCBs->pfnGetEPListRsp( &(pInMsg->msg->srcAddr), pRsp );
   \                     ??bdbTL_ProcessInCmd_GetEPListRsp_2:
   \   0001DB                ; Setup parameters for indirect call
   \   0001DB   AC..         MOV       R4,?V0
   \   0001DD   AD..         MOV       R5,?V1
   \   0001DF   85..82       MOV       DPL,?V4
   \   0001E2   85..83       MOV       DPH,?V5
   \   0001E5   E0           MOVX      A,@DPTR
   \   0001E6   2406         ADD       A,#0x6
   \   0001E8   FA           MOV       R2,A
   \   0001E9   A3           INC       DPTR
   \   0001EA   E0           MOVX      A,@DPTR
   \   0001EB   3400         ADDC      A,#0x0
   \   0001ED   FB           MOV       R3,A
   \   0001EE   85..82       MOV       DPL,?V8
   \   0001F1   85..83       MOV       DPH,?V9
   \   0001F4   A3           INC       DPTR
   \   0001F5   A3           INC       DPTR
   \   0001F6   A3           INC       DPTR
   \   0001F7   A3           INC       DPTR
   \   0001F8   A3           INC       DPTR
   \   0001F9   A3           INC       DPTR
   \   0001FA   A3           INC       DPTR
   \   0001FB   A3           INC       DPTR
   \   0001FC   E0           MOVX      A,@DPTR
   \   0001FD   F8           MOV       R0,A
   \   0001FE   A3           INC       DPTR
   \   0001FF   E0           MOVX      A,@DPTR
   \   000200   F583         MOV       DPH,A
   \   000202   8882         MOV       DPL,R0
   \   000204   12....       LCALL     ?CALL_IND
   \   000207   E9           MOV       A,R1
   \   000208   F5..         MOV       ?V3,A
   1302          
   1303                zcl_mem_free( pRsp );
   \   00020A                ; Setup parameters for call to function osal_mem_free
   \   00020A   AA..         MOV       R2,?V0
   \   00020C   AB..         MOV       R3,?V1
   \   00020E   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1304              }
   1305            }
   1306          
   1307            return ( status );
   \                     ??bdbTL_ProcessInCmd_GetEPListRsp_0:
   \   000211   A9..         MOV       R1,?V3
   \   000213   7F0C         MOV       R7,#0xc
   \   000215   02....       LJMP      ?BANKED_LEAVE_XDATA
   1308          }
   1309          
   1310          /*********************************************************************
   1311          * Inter-PAN functions
   1312          **********************************************************************/
   1313          
   1314          /*********************************************************************
   1315           * @fn      bdbTL_HdlInInterPANCommands
   1316           *
   1317           * @brief   Callback from ZCL to process incoming Inter-PAN Commands
   1318           *          specific to this cluster library
   1319          
   1320           * @param   pInMsg - pointer to the incoming message
   1321           *
   1322           * @return  ZStatus_t
   1323           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1324          static ZStatus_t bdbTL_HdlInInterPANCommands( zclIncoming_t *pInMsg )
   \                     bdbTL_HdlInInterPANCommands:
   1325          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1326            ZStatus_t status;
   1327          
   1328            // make sure Inter-PAN callbacks exist
   1329            if ( pInterPANCBs == NULL )
   \   000009   90....       MOV       DPTR,#pInterPANCBs
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F8           MOV       R0,A
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F9           MOV       R1,A
   \   000011   E8           MOV       A,R0
   \   000012   49           ORL       A,R1
   \   000013   7004         JNZ       ??bdbTL_HdlInInterPANCommands_0
   1330              return ( ZFailure );
   \   000015   7901         MOV       R1,#0x1
   \   000017   802C         SJMP      ??bdbTL_HdlInInterPANCommands_1
   1331          
   1332            switch ( pInMsg->msg->clusterId )
   \                     ??bdbTL_HdlInInterPANCommands_0:
   \   000019   8E82         MOV       DPL,R6
   \   00001B   8F83         MOV       DPH,R7
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F8           MOV       R0,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F583         MOV       DPH,A
   \   000023   8882         MOV       DPL,R0
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   6400         XRL       A,#0x0
   \   00002C   7004         JNZ       ??bdbTL_HdlInInterPANCommands_2
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   6410         XRL       A,#0x10
   \                     ??bdbTL_HdlInInterPANCommands_2:
   \   000032   700C         JNZ       ??bdbTL_HdlInInterPANCommands_3
   1333            {
   1334              case ZCL_CLUSTER_ID_TOUCHLINK:
   1335                status = bdbTL_ProcessInLLInterPANCmds( pInMsg );
   \   000034                ; Setup parameters for call to function bdbTL_ProcessInLLInterPANCmds
   \   000034   EE           MOV       A,R6
   \   000035   FA           MOV       R2,A
   \   000036   EF           MOV       A,R7
   \   000037   FB           MOV       R3,A
   \   000038   12....       LCALL     `??bdbTL_ProcessInLLInterPANCmds::?relay`; Banked call to: bdbTL_ProcessInLLInterPANCmds
   \   00003B   E9           MOV       A,R1
   \   00003C   F5..         MOV       ?V0,A
   1336                break;
   \   00003E   8003         SJMP      ??bdbTL_HdlInInterPANCommands_4
   1337          
   1338              default:
   1339                status = ZFailure;
   \                     ??bdbTL_HdlInInterPANCommands_3:
   \   000040   75..01       MOV       ?V0,#0x1
   1340                break;
   1341            }
   1342          
   1343            return ( status );
   \                     ??bdbTL_HdlInInterPANCommands_4:
   \   000043   A9..         MOV       R1,?V0
   \                     ??bdbTL_HdlInInterPANCommands_1:
   \   000045   7F01         MOV       R7,#0x1
   \   000047   02....       LJMP      ?BANKED_LEAVE_XDATA
   1344          }
   1345          
   1346          /*********************************************************************
   1347           * @fn      bdbTL_ProcessInLLInterPANCmds
   1348           *
   1349           * @brief   Callback from ZCL to process incoming Inter-PAN Commands
   1350           *          specific to this cluster library on a command ID basis
   1351           *
   1352           * @param   pInMsg - pointer to the incoming message
   1353           *
   1354           * @return  ZStatus_t
   1355           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1356          static ZStatus_t bdbTL_ProcessInLLInterPANCmds( zclIncoming_t *pInMsg )
   \                     bdbTL_ProcessInLLInterPANCmds:
   1357          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1358            ZStatus_t status = SUCCESS;
   \   000009   75..00       MOV       ?V0,#0x0
   1359            
   1360          #if ( defined ( BDB_TL_TARGET ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) )
   1361            if ( touchLinkTargetEnabled == FALSE )
   1362            {
   1363              return status;
   1364            }
   1365          #endif
   1366            
   1367            switch ( pInMsg->hdr.commandID )
   \   00000C   8E82         MOV       DPL,R6
   \   00000E   8F83         MOV       DPH,R7
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   6038         JZ        ??bdbTL_ProcessInLLInterPANCmds_0
   \   00001A   14           DEC       A
   \   00001B   7003         JNZ       $+5
   \   00001D   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_1 & 0xFFFF
   \   000020   14           DEC       A
   \   000021   603C         JZ        ??bdbTL_ProcessInLLInterPANCmds_2
   \   000023   14           DEC       A
   \   000024   7003         JNZ       $+5
   \   000026   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_3 & 0xFFFF
   \   000029   24FD         ADD       A,#-0x3
   \   00002B   603F         JZ        ??bdbTL_ProcessInLLInterPANCmds_4
   \   00002D   14           DEC       A
   \   00002E   6048         JZ        ??bdbTL_ProcessInLLInterPANCmds_5
   \   000030   24F7         ADD       A,#-0x9
   \   000032   6050         JZ        ??bdbTL_ProcessInLLInterPANCmds_6
   \   000034   14           DEC       A
   \   000035   7003         JNZ       $+5
   \   000037   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_7 & 0xFFFF
   \   00003A   14           DEC       A
   \   00003B   6053         JZ        ??bdbTL_ProcessInLLInterPANCmds_8
   \   00003D   14           DEC       A
   \   00003E   7003         JNZ       $+5
   \   000040   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_9 & 0xFFFF
   \   000043   14           DEC       A
   \   000044   6056         JZ        ??bdbTL_ProcessInLLInterPANCmds_10
   \   000046   14           DEC       A
   \   000047   7003         JNZ       $+5
   \   000049   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_11 & 0xFFFF
   \   00004C   14           DEC       A
   \   00004D   6059         JZ        ??bdbTL_ProcessInLLInterPANCmds_12
   \   00004F   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_13 & 0xFFFF
   1368            {
   1369              case COMMAND_TOUCHLINK_SCAN_REQ:
   1370                status = bdbTL_ProcessInCmd_ScanReq( pInMsg );
   \                     ??bdbTL_ProcessInLLInterPANCmds_0:
   \   000052                ; Setup parameters for call to function bdbTL_ProcessInCmd_ScanReq
   \   000052   EE           MOV       A,R6
   \   000053   FA           MOV       R2,A
   \   000054   EF           MOV       A,R7
   \   000055   FB           MOV       R3,A
   \   000056   12....       LCALL     `??bdbTL_ProcessInCmd_ScanReq::?relay`; Banked call to: bdbTL_ProcessInCmd_ScanReq
   \   000059   E9           MOV       A,R1
   \   00005A   F5..         MOV       ?V0,A
   1371                break;
   \   00005C   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_14 & 0xFFFF
   1372          
   1373              case COMMAND_TOUCHLINK_DEVICE_INFO_REQ:
   1374                status = bdbTL_ProcessInCmd_DeviceInfoReq( pInMsg );
   \                     ??bdbTL_ProcessInLLInterPANCmds_2:
   \   00005F                ; Setup parameters for call to function bdbTL_ProcessInCmd_DeviceInfoReq
   \   00005F   EE           MOV       A,R6
   \   000060   FA           MOV       R2,A
   \   000061   EF           MOV       A,R7
   \   000062   FB           MOV       R3,A
   \   000063   12....       LCALL     `??bdbTL_ProcessInCmd_DeviceInfoReq::?relay`; Banked call to: bdbTL_ProcessInCmd_DeviceInfoReq
   \   000066   E9           MOV       A,R1
   \   000067   F5..         MOV       ?V0,A
   1375                break;
   \   000069   02....       LJMP      ??bdbTL_ProcessInLLInterPANCmds_14 & 0xFFFF
   1376          
   1377              case COMMAND_TOUCHLINK_IDENTIFY_REQ:
   1378                status = bdbTL_ProcessInCmd_IdentifyReq( pInMsg );
   \                     ??bdbTL_ProcessInLLInterPANCmds_4:
   \   00006C                ; Setup parameters for call to function bdbTL_ProcessInCmd_IdentifyReq
   \   00006C   EE           MOV       A,R6
   \   00006D   FA           MOV       R2,A
   \   00006E   EF           MOV       A,R7
   \   00006F   FB           MOV       R3,A
   \   000070   12....       LCALL     `??bdbTL_ProcessInCmd_IdentifyReq::?relay`; Banked call to: bdbTL_ProcessInCmd_IdentifyReq
   \   000073   E9           MOV       A,R1
   \   000074   F5..         MOV       ?V0,A
   1379                break;
   \   000076   807B         SJMP      ??bdbTL_ProcessInLLInterPANCmds_14
   1380          
   1381              case COMMAND_TOUCHLINK_RESET_TO_FN_REQ:
   1382                status = bdbTL_ProcessInCmd_ResetToFNReq( pInMsg );
   \                     ??bdbTL_ProcessInLLInterPANCmds_5:
   \   000078                ; Setup parameters for call to function bdbTL_ProcessInCmd_ResetToFNReq
   \   000078   EE           MOV       A,R6
   \   000079   FA           MOV       R2,A
   \   00007A   EF           MOV       A,R7
   \   00007B   FB           MOV       R3,A
   \   00007C   12....       LCALL     `??bdbTL_ProcessInCmd_ResetToFNReq::?relay`; Banked call to: bdbTL_ProcessInCmd_ResetToFNReq
   \   00007F   E9           MOV       A,R1
   \   000080   F5..         MOV       ?V0,A
   1383                break;
   \   000082   806F         SJMP      ??bdbTL_ProcessInLLInterPANCmds_14
   1384          
   1385              case COMMAND_TOUCHLINK_NWK_START_REQ:
   1386                status = bdbTL_ProcessInCmd_NwkStartReq( pInMsg );
   \                     ??bdbTL_ProcessInLLInterPANCmds_6:
   \   000084                ; Setup parameters for call to function bdbTL_ProcessInCmd_NwkStartReq
   \   000084   EE           MOV       A,R6
   \   000085   FA           MOV       R2,A
   \   000086   EF           MOV       A,R7
   \   000087   FB           MOV       R3,A
   \   000088   12....       LCALL     `??bdbTL_ProcessInCmd_NwkStartReq::?relay`; Banked call to: bdbTL_ProcessInCmd_NwkStartReq
   \   00008B   E9           MOV       A,R1
   \   00008C   F5..         MOV       ?V0,A
   1387                break;
   \   00008E   8063         SJMP      ??bdbTL_ProcessInLLInterPANCmds_14
   1388          
   1389              case COMMAND_TOUCHLINK_NWK_JOIN_RTR_REQ:
   1390                status = bdbTL_ProcessInCmd_NwkJoinRtrReq( pInMsg );
   \                     ??bdbTL_ProcessInLLInterPANCmds_8:
   \   000090                ; Setup parameters for call to function bdbTL_ProcessInCmd_NwkJoinRtrReq
   \   000090   EE           MOV       A,R6
   \   000091   FA           MOV       R2,A
   \   000092   EF           MOV       A,R7
   \   000093   FB           MOV       R3,A
   \   000094   12....       LCALL     `??bdbTL_ProcessInCmd_NwkJoinRtrReq::?relay`; Banked call to: bdbTL_ProcessInCmd_NwkJoinRtrReq
   \   000097   E9           MOV       A,R1
   \   000098   F5..         MOV       ?V0,A
   1391                break;
   \   00009A   8057         SJMP      ??bdbTL_ProcessInLLInterPANCmds_14
   1392          
   1393              case COMMAND_TOUCHLINK_NWK_JOIN_ED_REQ:
   1394                status = bdbTL_ProcessInCmd_NwkJoinEDReq( pInMsg );
   \                     ??bdbTL_ProcessInLLInterPANCmds_10:
   \   00009C                ; Setup parameters for call to function bdbTL_ProcessInCmd_NwkJoinEDReq
   \   00009C   EE           MOV       A,R6
   \   00009D   FA           MOV       R2,A
   \   00009E   EF           MOV       A,R7
   \   00009F   FB           MOV       R3,A
   \   0000A0   12....       LCALL     `??bdbTL_ProcessInCmd_NwkJoinEDReq::?relay`; Banked call to: bdbTL_ProcessInCmd_NwkJoinEDReq
   \   0000A3   E9           MOV       A,R1
   \   0000A4   F5..         MOV       ?V0,A
   1395                break;
   \   0000A6   804B         SJMP      ??bdbTL_ProcessInLLInterPANCmds_14
   1396          
   1397              case COMMAND_TOUCHLINK_NWK_UPDATE_REQ:
   1398                status = bdbTL_ProcessInCmd_NwkUpdateReq( pInMsg );
   \                     ??bdbTL_ProcessInLLInterPANCmds_12:
   \   0000A8                ; Setup parameters for call to function bdbTL_ProcessInCmd_NwkUpdateReq
   \   0000A8   EE           MOV       A,R6
   \   0000A9   FA           MOV       R2,A
   \   0000AA   EF           MOV       A,R7
   \   0000AB   FB           MOV       R3,A
   \   0000AC   12....       LCALL     `??bdbTL_ProcessInCmd_NwkUpdateReq::?relay`; Banked call to: bdbTL_ProcessInCmd_NwkUpdateReq
   \   0000AF   E9           MOV       A,R1
   \   0000B0   F5..         MOV       ?V0,A
   1399                break;
   \   0000B2   803F         SJMP      ??bdbTL_ProcessInLLInterPANCmds_14
   1400          
   1401              case COMMAND_TOUCHLINK_SCAN_RSP:
   1402                status = bdbTL_ProcessInCmd_ScanRsp( pInMsg );
   \                     ??bdbTL_ProcessInLLInterPANCmds_1:
   \   0000B4                ; Setup parameters for call to function bdbTL_ProcessInCmd_ScanRsp
   \   0000B4   EE           MOV       A,R6
   \   0000B5   FA           MOV       R2,A
   \   0000B6   EF           MOV       A,R7
   \   0000B7   FB           MOV       R3,A
   \   0000B8   12....       LCALL     `??bdbTL_ProcessInCmd_ScanRsp::?relay`; Banked call to: bdbTL_ProcessInCmd_ScanRsp
   \   0000BB   E9           MOV       A,R1
   \   0000BC   F5..         MOV       ?V0,A
   1403                break;
   \   0000BE   8033         SJMP      ??bdbTL_ProcessInLLInterPANCmds_14
   1404          
   1405              case COMMAND_TOUCHLINK_DEVICE_INFO_RSP:
   1406                status = bdbTL_ProcessInCmd_DeviceInfoRsp( pInMsg );
   \                     ??bdbTL_ProcessInLLInterPANCmds_3:
   \   0000C0                ; Setup parameters for call to function bdbTL_ProcessInCmd_DeviceInfoRsp
   \   0000C0   EE           MOV       A,R6
   \   0000C1   FA           MOV       R2,A
   \   0000C2   EF           MOV       A,R7
   \   0000C3   FB           MOV       R3,A
   \   0000C4   12....       LCALL     `??bdbTL_ProcessInCmd_DeviceInfoRsp::?relay`; Banked call to: bdbTL_ProcessInCmd_DeviceInfoRsp
   \   0000C7   E9           MOV       A,R1
   \   0000C8   F5..         MOV       ?V0,A
   1407                break;
   \   0000CA   8027         SJMP      ??bdbTL_ProcessInLLInterPANCmds_14
   1408          
   1409              case COMMAND_TOUCHLINK_NWK_START_RSP:
   1410                status = bdbTL_ProcessInCmd_NwkStartRsp( pInMsg );
   \                     ??bdbTL_ProcessInLLInterPANCmds_7:
   \   0000CC                ; Setup parameters for call to function bdbTL_ProcessInCmd_NwkStartRsp
   \   0000CC   EE           MOV       A,R6
   \   0000CD   FA           MOV       R2,A
   \   0000CE   EF           MOV       A,R7
   \   0000CF   FB           MOV       R3,A
   \   0000D0   12....       LCALL     `??bdbTL_ProcessInCmd_NwkStartRsp::?relay`; Banked call to: bdbTL_ProcessInCmd_NwkStartRsp
   \   0000D3   E9           MOV       A,R1
   \   0000D4   F5..         MOV       ?V0,A
   1411                break;
   \   0000D6   801B         SJMP      ??bdbTL_ProcessInLLInterPANCmds_14
   1412          
   1413              case COMMAND_TOUCHLINK_NWK_JOIN_RTR_RSP:
   1414                status = bdbTL_ProcessInCmd_NwkJoinRtrRsp( pInMsg );
   \                     ??bdbTL_ProcessInLLInterPANCmds_9:
   \   0000D8                ; Setup parameters for call to function bdbTL_ProcessInCmd_NwkJoinRtrRsp
   \   0000D8   EE           MOV       A,R6
   \   0000D9   FA           MOV       R2,A
   \   0000DA   EF           MOV       A,R7
   \   0000DB   FB           MOV       R3,A
   \   0000DC   12....       LCALL     `??bdbTL_ProcessInCmd_NwkJoinRtrRsp::?relay`; Banked call to: bdbTL_ProcessInCmd_NwkJoinRtrRsp
   \   0000DF   E9           MOV       A,R1
   \   0000E0   F5..         MOV       ?V0,A
   1415                break;
   \   0000E2   800F         SJMP      ??bdbTL_ProcessInLLInterPANCmds_14
   1416          
   1417              case COMMAND_TOUCHLINK_NWK_JOIN_ED_RSP:
   1418                status = bdbTL_ProcessInCmd_NwkJoinEDRsp( pInMsg );
   \                     ??bdbTL_ProcessInLLInterPANCmds_11:
   \   0000E4                ; Setup parameters for call to function bdbTL_ProcessInCmd_NwkJoinEDRsp
   \   0000E4   EE           MOV       A,R6
   \   0000E5   FA           MOV       R2,A
   \   0000E6   EF           MOV       A,R7
   \   0000E7   FB           MOV       R3,A
   \   0000E8   12....       LCALL     `??bdbTL_ProcessInCmd_NwkJoinEDRsp::?relay`; Banked call to: bdbTL_ProcessInCmd_NwkJoinEDRsp
   \   0000EB   E9           MOV       A,R1
   \   0000EC   F5..         MOV       ?V0,A
   1419                break;
   \   0000EE   8003         SJMP      ??bdbTL_ProcessInLLInterPANCmds_14
   1420          
   1421              default:
   1422                status = ZFailure;   // Error ignore the command
   \                     ??bdbTL_ProcessInLLInterPANCmds_13:
   \   0000F0   75..01       MOV       ?V0,#0x1
   1423                break;
   1424            }
   1425          
   1426            return ( status );
   \                     ??bdbTL_ProcessInLLInterPANCmds_14:
   \   0000F3   A9..         MOV       R1,?V0
   \   0000F5   7F01         MOV       R7,#0x1
   \   0000F7   02....       LJMP      ?BANKED_LEAVE_XDATA
   1427          }
   1428          
   1429          /*********************************************************************
   1430           * @fn      bdbTL_ProcessInCmd_ScanReq
   1431           *
   1432           * @brief   Process in the received Scan Request command.
   1433           *
   1434           * @param   pInMsg - pointer to the incoming message
   1435           *
   1436           * @return  ZStatus_t
   1437           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1438          static ZStatus_t bdbTL_ProcessInCmd_ScanReq( zclIncoming_t *pInMsg )
   \                     bdbTL_ProcessInCmd_ScanReq:
   1439          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1440            if ( pInterPANCBs->pfnScanReq )
   \   00000E   90....       MOV       DPTR,#pInterPANCBs
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F8           MOV       R0,A
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F583         MOV       DPH,A
   \   000017   8882         MOV       DPL,R0
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F8           MOV       R0,A
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F9           MOV       R1,A
   \   00001E   E8           MOV       A,R0
   \   00001F   49           ORL       A,R1
   \   000020   7003         JNZ       $+5
   \   000022   02....       LJMP      ??bdbTL_ProcessInCmd_ScanReq_0 & 0xFFFF
   1441            {
   1442              bdbTLScanReq_t req;
   1443          
   1444              req.transID = zcl_build_uint32( pInMsg->pData, 4 );
   \   000025                ; Setup parameters for call to function osal_build_uint32
   \   000025   7904         MOV       R1,#0x4
   \   000027   8E82         MOV       DPL,R6
   \   000029   8F83         MOV       DPH,R7
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   FA           MOV       R2,A
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   FB           MOV       R3,A
   \   000038   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00003B   EA           MOV       A,R2
   \   00003C   F8           MOV       R0,A
   \   00003D   EB           MOV       A,R3
   \   00003E   F9           MOV       R1,A
   \   00003F   EC           MOV       A,R4
   \   000040   FA           MOV       R2,A
   \   000041   ED           MOV       A,R5
   \   000042   FB           MOV       R3,A
   \   000043   85..82       MOV       DPL,?XSP + 0
   \   000046   85..83       MOV       DPH,?XSP + 1
   \   000049   12....       LCALL     ?XSTORE_R0123
   1445          
   1446              req.zInfo.zInfoByte = pInMsg->pData[4];
   \   00004C   8E82         MOV       DPL,R6
   \   00004E   8F83         MOV       DPH,R7
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   E0           MOVX      A,@DPTR
   \   000059   F8           MOV       R0,A
   \   00005A   A3           INC       DPTR
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F583         MOV       DPH,A
   \   00005E   8882         MOV       DPL,R0
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   C0E0         PUSH      A
   \   000067   7404         MOV       A,#0x4
   \   000069   12....       LCALL     ?XSTACK_DISP0_8
   \   00006C   D0E0         POP       A
   \   00006E   F0           MOVX      @DPTR,A
   1447              req.touchLinkInfo.touchLinkInfoByte = pInMsg->pData[5];
   \   00006F   8E82         MOV       DPL,R6
   \   000071   8F83         MOV       DPH,R7
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   F8           MOV       R0,A
   \   00007D   A3           INC       DPTR
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   F583         MOV       DPH,A
   \   000081   8882         MOV       DPL,R0
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   E0           MOVX      A,@DPTR
   \   000089   C0E0         PUSH      A
   \   00008B   7406         MOV       A,#0x6
   \   00008D   12....       LCALL     ?XSTACK_DISP0_8
   \   000090   D0E0         POP       A
   \   000092   F0           MOVX      @DPTR,A
   1448          
   1449              return ( pInterPANCBs->pfnScanReq( &(pInMsg->msg->srcAddr), &req,
   1450                                                 pInMsg->hdr.transSeqNum ) );
   \   000093                ; Setup parameters for indirect call
   \   000093   8E82         MOV       DPL,R6
   \   000095   8F83         MOV       DPH,R7
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   F9           MOV       R1,A
   \   00009F   AC..         MOV       R4,?XSP + 0
   \   0000A1   AD..         MOV       R5,?XSP + 1
   \   0000A3   8E82         MOV       DPL,R6
   \   0000A5   8F83         MOV       DPH,R7
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   2406         ADD       A,#0x6
   \   0000AA   FA           MOV       R2,A
   \   0000AB   A3           INC       DPTR
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   3400         ADDC      A,#0x0
   \   0000AF   FB           MOV       R3,A
   \   0000B0   90....       MOV       DPTR,#pInterPANCBs
   \   0000B3   E0           MOVX      A,@DPTR
   \   0000B4   F8           MOV       R0,A
   \   0000B5   A3           INC       DPTR
   \   0000B6   E0           MOVX      A,@DPTR
   \   0000B7   F583         MOV       DPH,A
   \   0000B9   8882         MOV       DPL,R0
   \   0000BB   E0           MOVX      A,@DPTR
   \   0000BC   F8           MOV       R0,A
   \   0000BD   A3           INC       DPTR
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   F583         MOV       DPH,A
   \   0000C1   8882         MOV       DPL,R0
   \   0000C3   12....       LCALL     ?CALL_IND
   \   0000C6   8002         SJMP      ??bdbTL_ProcessInCmd_ScanReq_1
   1451            }
   1452          
   1453            return ( ZSuccess );
   \                     ??bdbTL_ProcessInCmd_ScanReq_0:
   \   0000C8   7900         MOV       R1,#0x0
   \                     ??bdbTL_ProcessInCmd_ScanReq_1:
   \   0000CA   7408         MOV       A,#0x8
   \   0000CC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000CF   7F01         MOV       R7,#0x1
   \   0000D1   02....       LJMP      ?BANKED_LEAVE_XDATA
   1454          }
   1455          
   1456          /*********************************************************************
   1457           * @fn      bdbTL_ProcessInCmd_DeviceInfoReq
   1458           *
   1459           * @brief   Process in the received Device Information Request command.
   1460           *
   1461           * @param   pInMsg - pointer to the incoming message
   1462           *
   1463           * @return  ZStatus_t
   1464           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1465          static ZStatus_t bdbTL_ProcessInCmd_DeviceInfoReq( zclIncoming_t *pInMsg )
   \                     bdbTL_ProcessInCmd_DeviceInfoReq:
   1466          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1467            if ( pInterPANCBs->pfnDeviceInfoReq )
   \   00000E   90....       MOV       DPTR,#pInterPANCBs
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F8           MOV       R0,A
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F583         MOV       DPH,A
   \   000017   8882         MOV       DPL,R0
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F8           MOV       R0,A
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F9           MOV       R1,A
   \   000020   E8           MOV       A,R0
   \   000021   49           ORL       A,R1
   \   000022   7003         JNZ       $+5
   \   000024   02....       LJMP      ??bdbTL_ProcessInCmd_DeviceInfoReq_0 & 0xFFFF
   1468            {
   1469              bdbTLDeviceInfoReq_t req;
   1470          
   1471              req.transID = zcl_build_uint32( pInMsg->pData, 4 );
   \   000027                ; Setup parameters for call to function osal_build_uint32
   \   000027   7904         MOV       R1,#0x4
   \   000029   8E82         MOV       DPL,R6
   \   00002B   8F83         MOV       DPH,R7
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   FA           MOV       R2,A
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   FB           MOV       R3,A
   \   00003A   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00003D   EA           MOV       A,R2
   \   00003E   F8           MOV       R0,A
   \   00003F   EB           MOV       A,R3
   \   000040   F9           MOV       R1,A
   \   000041   EC           MOV       A,R4
   \   000042   FA           MOV       R2,A
   \   000043   ED           MOV       A,R5
   \   000044   FB           MOV       R3,A
   \   000045   85..82       MOV       DPL,?XSP + 0
   \   000048   85..83       MOV       DPH,?XSP + 1
   \   00004B   12....       LCALL     ?XSTORE_R0123
   1472          
   1473              req.startIndex = pInMsg->pData[4];
   \   00004E   8E82         MOV       DPL,R6
   \   000050   8F83         MOV       DPH,R7
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   F8           MOV       R0,A
   \   00005C   A3           INC       DPTR
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   F583         MOV       DPH,A
   \   000060   8882         MOV       DPL,R0
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   E0           MOVX      A,@DPTR
   \   000067   C0E0         PUSH      A
   \   000069   7404         MOV       A,#0x4
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   D0E0         POP       A
   \   000070   F0           MOVX      @DPTR,A
   1474          
   1475              return ( pInterPANCBs->pfnDeviceInfoReq( &(pInMsg->msg->srcAddr), &req,
   1476                                                       pInMsg->hdr.transSeqNum ) );
   \   000071                ; Setup parameters for indirect call
   \   000071   8E82         MOV       DPL,R6
   \   000073   8F83         MOV       DPH,R7
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   F9           MOV       R1,A
   \   00007D   AC..         MOV       R4,?XSP + 0
   \   00007F   AD..         MOV       R5,?XSP + 1
   \   000081   8E82         MOV       DPL,R6
   \   000083   8F83         MOV       DPH,R7
   \   000085   E0           MOVX      A,@DPTR
   \   000086   2406         ADD       A,#0x6
   \   000088   FA           MOV       R2,A
   \   000089   A3           INC       DPTR
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   3400         ADDC      A,#0x0
   \   00008D   FB           MOV       R3,A
   \   00008E   90....       MOV       DPTR,#pInterPANCBs
   \   000091   E0           MOVX      A,@DPTR
   \   000092   F8           MOV       R0,A
   \   000093   A3           INC       DPTR
   \   000094   E0           MOVX      A,@DPTR
   \   000095   F583         MOV       DPH,A
   \   000097   8882         MOV       DPL,R0
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   F8           MOV       R0,A
   \   00009D   A3           INC       DPTR
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   F583         MOV       DPH,A
   \   0000A1   8882         MOV       DPL,R0
   \   0000A3   12....       LCALL     ?CALL_IND
   \   0000A6   8002         SJMP      ??bdbTL_ProcessInCmd_DeviceInfoReq_1
   1477            }
   1478          
   1479            return ( ZSuccess );
   \                     ??bdbTL_ProcessInCmd_DeviceInfoReq_0:
   \   0000A8   7900         MOV       R1,#0x0
   \                     ??bdbTL_ProcessInCmd_DeviceInfoReq_1:
   \   0000AA   7405         MOV       A,#0x5
   \   0000AC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AF   7F01         MOV       R7,#0x1
   \   0000B1   02....       LJMP      ?BANKED_LEAVE_XDATA
   1480          }
   1481          
   1482          
   1483          /*********************************************************************
   1484           * @fn      bdbTL_ProcessInCmd_IdentifyReq
   1485           *
   1486           * @brief   Process in the received Identify Request command.
   1487           *
   1488           * @param   pInMsg - pointer to the incoming message
   1489           *
   1490           * @return  ZStatus_t
   1491           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1492          static ZStatus_t bdbTL_ProcessInCmd_IdentifyReq( zclIncoming_t *pInMsg )
   \                     bdbTL_ProcessInCmd_IdentifyReq:
   1493          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1494            if ( pInterPANCBs->pfnIdentifyReq )
   \   00000E   90....       MOV       DPTR,#pInterPANCBs
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F8           MOV       R0,A
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F583         MOV       DPH,A
   \   000017   8882         MOV       DPL,R0
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F8           MOV       R0,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F9           MOV       R1,A
   \   000022   E8           MOV       A,R0
   \   000023   49           ORL       A,R1
   \   000024   7003         JNZ       $+5
   \   000026   02....       LJMP      ??bdbTL_ProcessInCmd_IdentifyReq_0 & 0xFFFF
   1495            {
   1496              bdbTLIdentifyReq_t req;
   1497          
   1498              req.transID = zcl_build_uint32( pInMsg->pData, 4 );
   \   000029                ; Setup parameters for call to function osal_build_uint32
   \   000029   7904         MOV       R1,#0x4
   \   00002B   8E82         MOV       DPL,R6
   \   00002D   8F83         MOV       DPH,R7
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   FA           MOV       R2,A
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   FB           MOV       R3,A
   \   00003C   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00003F   EA           MOV       A,R2
   \   000040   F8           MOV       R0,A
   \   000041   EB           MOV       A,R3
   \   000042   F9           MOV       R1,A
   \   000043   EC           MOV       A,R4
   \   000044   FA           MOV       R2,A
   \   000045   ED           MOV       A,R5
   \   000046   FB           MOV       R3,A
   \   000047   85..82       MOV       DPL,?XSP + 0
   \   00004A   85..83       MOV       DPH,?XSP + 1
   \   00004D   12....       LCALL     ?XSTORE_R0123
   1499          
   1500              req.IdDuration = BUILD_UINT16( pInMsg->pData[4], pInMsg->pData[5] );
   \   000050   8E82         MOV       DPL,R6
   \   000052   8F83         MOV       DPH,R7
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   F8           MOV       R0,A
   \   00005E   A3           INC       DPTR
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F583         MOV       DPH,A
   \   000062   8882         MOV       DPL,R0
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   FA           MOV       R2,A
   \   00006A   7B00         MOV       R3,#0x0
   \   00006C   8E82         MOV       DPL,R6
   \   00006E   8F83         MOV       DPH,R7
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   E0           MOVX      A,@DPTR
   \   000079   F8           MOV       R0,A
   \   00007A   A3           INC       DPTR
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   F583         MOV       DPH,A
   \   00007E   8882         MOV       DPL,R0
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   E0           MOVX      A,@DPTR
   \   000086   F8           MOV       R0,A
   \   000087   7900         MOV       R1,#0x0
   \   000089   E4           CLR       A
   \   00008A   C8           XCH       A,R0
   \   00008B   F9           MOV       R1,A
   \   00008C   EA           MOV       A,R2
   \   00008D   28           ADD       A,R0
   \   00008E   F8           MOV       R0,A
   \   00008F   EB           MOV       A,R3
   \   000090   39           ADDC      A,R1
   \   000091   F9           MOV       R1,A
   \   000092   7404         MOV       A,#0x4
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   E8           MOV       A,R0
   \   000098   F0           MOVX      @DPTR,A
   \   000099   A3           INC       DPTR
   \   00009A   E9           MOV       A,R1
   \   00009B   F0           MOVX      @DPTR,A
   1501          
   1502              return ( pInterPANCBs->pfnIdentifyReq( &(pInMsg->msg->srcAddr), &req ) );
   \   00009C                ; Setup parameters for indirect call
   \   00009C   AC..         MOV       R4,?XSP + 0
   \   00009E   AD..         MOV       R5,?XSP + 1
   \   0000A0   8E82         MOV       DPL,R6
   \   0000A2   8F83         MOV       DPH,R7
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   2406         ADD       A,#0x6
   \   0000A7   FA           MOV       R2,A
   \   0000A8   A3           INC       DPTR
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   3400         ADDC      A,#0x0
   \   0000AC   FB           MOV       R3,A
   \   0000AD   90....       MOV       DPTR,#pInterPANCBs
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   F8           MOV       R0,A
   \   0000B2   A3           INC       DPTR
   \   0000B3   E0           MOVX      A,@DPTR
   \   0000B4   F583         MOV       DPH,A
   \   0000B6   8882         MOV       DPL,R0
   \   0000B8   A3           INC       DPTR
   \   0000B9   A3           INC       DPTR
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   E0           MOVX      A,@DPTR
   \   0000BD   F8           MOV       R0,A
   \   0000BE   A3           INC       DPTR
   \   0000BF   E0           MOVX      A,@DPTR
   \   0000C0   F583         MOV       DPH,A
   \   0000C2   8882         MOV       DPL,R0
   \   0000C4   12....       LCALL     ?CALL_IND
   \   0000C7   8002         SJMP      ??bdbTL_ProcessInCmd_IdentifyReq_1
   1503            }
   1504          
   1505            return ( ZSuccess );
   \                     ??bdbTL_ProcessInCmd_IdentifyReq_0:
   \   0000C9   7900         MOV       R1,#0x0
   \                     ??bdbTL_ProcessInCmd_IdentifyReq_1:
   \   0000CB   7406         MOV       A,#0x6
   \   0000CD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D0   7F01         MOV       R7,#0x1
   \   0000D2   02....       LJMP      ?BANKED_LEAVE_XDATA
   1506          }
   1507          
   1508          /*********************************************************************
   1509           * @fn      bdbTL_ProcessInCmd_ResetToFNReq
   1510           *
   1511           * @brief   Process in the received Reset to Factory New Request command.
   1512           *
   1513           * @param   pInMsg - pointer to the incoming message
   1514           *
   1515           * @return  ZStatus_t
   1516           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1517          static ZStatus_t bdbTL_ProcessInCmd_ResetToFNReq( zclIncoming_t *pInMsg )
   \                     bdbTL_ProcessInCmd_ResetToFNReq:
   1518          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1519            if ( pInterPANCBs->pfnResetToFNReq )
   \   00000E   90....       MOV       DPTR,#pInterPANCBs
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F8           MOV       R0,A
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   C8           XCH       A,R0
   \   000016   2406         ADD       A,#0x6
   \   000018   F582         MOV       DPL,A
   \   00001A   C8           XCH       A,R0
   \   00001B   3400         ADDC      A,#0x0
   \   00001D   F583         MOV       DPH,A
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F8           MOV       R0,A
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F9           MOV       R1,A
   \   000024   E8           MOV       A,R0
   \   000025   49           ORL       A,R1
   \   000026   6056         JZ        ??bdbTL_ProcessInCmd_ResetToFNReq_0
   1520            {
   1521              bdbTLResetToFNReq_t req;
   1522          
   1523              req.transID = zcl_build_uint32( pInMsg->pData, 4 );
   \   000028                ; Setup parameters for call to function osal_build_uint32
   \   000028   7904         MOV       R1,#0x4
   \   00002A   8E82         MOV       DPL,R6
   \   00002C   8F83         MOV       DPH,R7
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   FA           MOV       R2,A
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   FB           MOV       R3,A
   \   00003B   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00003E   EA           MOV       A,R2
   \   00003F   F8           MOV       R0,A
   \   000040   EB           MOV       A,R3
   \   000041   F9           MOV       R1,A
   \   000042   EC           MOV       A,R4
   \   000043   FA           MOV       R2,A
   \   000044   ED           MOV       A,R5
   \   000045   FB           MOV       R3,A
   \   000046   85..82       MOV       DPL,?XSP + 0
   \   000049   85..83       MOV       DPH,?XSP + 1
   \   00004C   12....       LCALL     ?XSTORE_R0123
   1524          
   1525              return ( pInterPANCBs->pfnResetToFNReq( &(pInMsg->msg->srcAddr), &req ) );
   \   00004F                ; Setup parameters for indirect call
   \   00004F   AC..         MOV       R4,?XSP + 0
   \   000051   AD..         MOV       R5,?XSP + 1
   \   000053   8E82         MOV       DPL,R6
   \   000055   8F83         MOV       DPH,R7
   \   000057   E0           MOVX      A,@DPTR
   \   000058   2406         ADD       A,#0x6
   \   00005A   FA           MOV       R2,A
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   3400         ADDC      A,#0x0
   \   00005F   FB           MOV       R3,A
   \   000060   90....       MOV       DPTR,#pInterPANCBs
   \   000063   E0           MOVX      A,@DPTR
   \   000064   F8           MOV       R0,A
   \   000065   A3           INC       DPTR
   \   000066   E0           MOVX      A,@DPTR
   \   000067   C8           XCH       A,R0
   \   000068   2406         ADD       A,#0x6
   \   00006A   F582         MOV       DPL,A
   \   00006C   C8           XCH       A,R0
   \   00006D   3400         ADDC      A,#0x0
   \   00006F   F583         MOV       DPH,A
   \   000071   E0           MOVX      A,@DPTR
   \   000072   F8           MOV       R0,A
   \   000073   A3           INC       DPTR
   \   000074   E0           MOVX      A,@DPTR
   \   000075   F583         MOV       DPH,A
   \   000077   8882         MOV       DPL,R0
   \   000079   12....       LCALL     ?CALL_IND
   \   00007C   8002         SJMP      ??bdbTL_ProcessInCmd_ResetToFNReq_1
   1526            }
   1527          
   1528            return ( ZSuccess );
   \                     ??bdbTL_ProcessInCmd_ResetToFNReq_0:
   \   00007E   7900         MOV       R1,#0x0
   \                     ??bdbTL_ProcessInCmd_ResetToFNReq_1:
   \   000080   7404         MOV       A,#0x4
   \   000082   12....       LCALL     ?DEALLOC_XSTACK8
   \   000085   7F01         MOV       R7,#0x1
   \   000087   02....       LJMP      ?BANKED_LEAVE_XDATA
   1529          }
   1530          
   1531          /*********************************************************************
   1532           * @fn      bdbTL_ProcessInCmd_NwkStartReq
   1533           *
   1534           * @brief   Process in the received Network Start Request command.
   1535           *
   1536           * @param   pInMsg - pointer to the incoming message
   1537           *
   1538           * @return  ZStatus_t
   1539           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1540          static ZStatus_t bdbTL_ProcessInCmd_NwkStartReq( zclIncoming_t *pInMsg )
   \                     bdbTL_ProcessInCmd_NwkStartReq:
   1541          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V8,R2
   \   000007   8B..         MOV       ?V9,R3
   1542            uint8 status = ZSuccess;
   \   000009   75..00       MOV       ?V2,#0x0
   1543          
   1544            if ( pInterPANCBs->pfnNwkStartReq )
   \   00000C   90....       MOV       DPTR,#pInterPANCBs
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F8           MOV       R0,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   C8           XCH       A,R0
   \   000014   2408         ADD       A,#0x8
   \   000016   F582         MOV       DPL,A
   \   000018   C8           XCH       A,R0
   \   000019   3400         ADDC      A,#0x0
   \   00001B   F583         MOV       DPH,A
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F8           MOV       R0,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F9           MOV       R1,A
   \   000022   E8           MOV       A,R0
   \   000023   49           ORL       A,R1
   \   000024   7003         JNZ       $+5
   \   000026   02....       LJMP      ??bdbTL_ProcessInCmd_NwkStartReq_0 & 0xFFFF
   1545            {
   1546              bdbTLNwkStartReq_t *pReq;
   1547          
   1548              pReq = (bdbTLNwkStartReq_t *)zcl_mem_alloc( sizeof( bdbTLNwkStartReq_t ) );
   \   000029                ; Setup parameters for call to function osal_mem_alloc
   \   000029   7A38         MOV       R2,#0x38
   \   00002B   7B00         MOV       R3,#0x0
   \   00002D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000030   8A..         MOV       ?V4,R2
   \   000032   8B..         MOV       ?V5,R3
   \   000034   85....       MOV       ?V0,?V4
   \   000037   85....       MOV       ?V1,?V5
   1549              if ( pReq )
   \   00003A   E5..         MOV       A,?V0
   \   00003C   45..         ORL       A,?V1
   \   00003E   7003         JNZ       $+5
   \   000040   02....       LJMP      ??bdbTL_ProcessInCmd_NwkStartReq_0 & 0xFFFF
   1550              {
   1551                uint8 *pBuf = pInMsg->pData;
   \   000043   85..82       MOV       DPL,?V8
   \   000046   85..83       MOV       DPH,?V9
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   E0           MOVX      A,@DPTR
   \   000052   FE           MOV       R6,A
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   FF           MOV       R7,A
   1552          
   1553                pReq->transID = zcl_build_uint32( pBuf, 4 );
   \   000056                ; Setup parameters for call to function osal_build_uint32
   \   000056   7904         MOV       R1,#0x4
   \   000058   EE           MOV       A,R6
   \   000059   FA           MOV       R2,A
   \   00005A   EF           MOV       A,R7
   \   00005B   FB           MOV       R3,A
   \   00005C   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00005F   EA           MOV       A,R2
   \   000060   F8           MOV       R0,A
   \   000061   EB           MOV       A,R3
   \   000062   F9           MOV       R1,A
   \   000063   EC           MOV       A,R4
   \   000064   FA           MOV       R2,A
   \   000065   ED           MOV       A,R5
   \   000066   FB           MOV       R3,A
   \   000067   85..82       MOV       DPL,?V0
   \   00006A   85..83       MOV       DPH,?V1
   \   00006D   12....       LCALL     ?XSTORE_R0123
   1554                pBuf += 4;
   \   000070   EE           MOV       A,R6
   \   000071   2404         ADD       A,#0x4
   \   000073   FE           MOV       R6,A
   \   000074   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartReq_1
   \   000076   0F           INC       R7
   1555          
   1556                zcl_cpyExtAddr( pReq->nwkParams.extendedPANID, pBuf );
   \                     ??bdbTL_ProcessInCmd_NwkStartReq_1:
   \   000077                ; Setup parameters for call to function sAddrExtCpy
   \   000077   EE           MOV       A,R6
   \   000078   FC           MOV       R4,A
   \   000079   EF           MOV       A,R7
   \   00007A   FD           MOV       R5,A
   \   00007B   E5..         MOV       A,?V0
   \   00007D   2404         ADD       A,#0x4
   \   00007F   FA           MOV       R2,A
   \   000080   E4           CLR       A
   \   000081   35..         ADDC      A,?V1
   \   000083   FB           MOV       R3,A
   \   000084   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1557                pBuf += Z_EXTADDR_LEN;
   \   000087   EE           MOV       A,R6
   \   000088   2408         ADD       A,#0x8
   \   00008A   FE           MOV       R6,A
   \   00008B   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartReq_2
   \   00008D   0F           INC       R7
   1558          
   1559                pReq->nwkParams.keyIndex = *pBuf++;
   \                     ??bdbTL_ProcessInCmd_NwkStartReq_2:
   \   00008E   8E82         MOV       DPL,R6
   \   000090   8F83         MOV       DPH,R7
   \   000092   E0           MOVX      A,@DPTR
   \   000093   C0E0         PUSH      A
   \   000095   E5..         MOV       A,?V0
   \   000097   240C         ADD       A,#0xc
   \   000099   F582         MOV       DPL,A
   \   00009B   E4           CLR       A
   \   00009C   35..         ADDC      A,?V1
   \   00009E   F583         MOV       DPH,A
   \   0000A0   D0E0         POP       A
   \   0000A2   F0           MOVX      @DPTR,A
   \   0000A3   8E82         MOV       DPL,R6
   \   0000A5   8F83         MOV       DPH,R7
   \   0000A7   A3           INC       DPTR
   \   0000A8   AE82         MOV       R6,DPL
   \   0000AA   AF83         MOV       R7,DPH
   1560          
   1561                zcl_memcpy( pReq->nwkParams.nwkKey, pBuf, SEC_KEY_LEN );
   \   0000AC                ; Setup parameters for call to function osal_memcpy
   \   0000AC   8E..         MOV       ?V4,R6
   \   0000AE   8F..         MOV       ?V5,R7
   \   0000B0   75..00       MOV       ?V6,#0x0
   \   0000B3   78..         MOV       R0,#?V4
   \   0000B5   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000B8   7C10         MOV       R4,#0x10
   \   0000BA   7D00         MOV       R5,#0x0
   \   0000BC   E5..         MOV       A,?V0
   \   0000BE   240D         ADD       A,#0xd
   \   0000C0   FA           MOV       R2,A
   \   0000C1   E4           CLR       A
   \   0000C2   35..         ADDC      A,?V1
   \   0000C4   FB           MOV       R3,A
   \   0000C5   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000C8   7403         MOV       A,#0x3
   \   0000CA   12....       LCALL     ?DEALLOC_XSTACK8
   1562                pBuf += SEC_KEY_LEN;
   \   0000CD   EE           MOV       A,R6
   \   0000CE   2410         ADD       A,#0x10
   \   0000D0   FE           MOV       R6,A
   \   0000D1   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartReq_3
   \   0000D3   0F           INC       R7
   1563          
   1564                pReq->nwkParams.logicalChannel = *pBuf++;
   \                     ??bdbTL_ProcessInCmd_NwkStartReq_3:
   \   0000D4   8E82         MOV       DPL,R6
   \   0000D6   8F83         MOV       DPH,R7
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   C0E0         PUSH      A
   \   0000DB   E5..         MOV       A,?V0
   \   0000DD   241D         ADD       A,#0x1d
   \   0000DF   F582         MOV       DPL,A
   \   0000E1   E4           CLR       A
   \   0000E2   35..         ADDC      A,?V1
   \   0000E4   F583         MOV       DPH,A
   \   0000E6   D0E0         POP       A
   \   0000E8   F0           MOVX      @DPTR,A
   \   0000E9   8E82         MOV       DPL,R6
   \   0000EB   8F83         MOV       DPH,R7
   \   0000ED   A3           INC       DPTR
   \   0000EE   AE82         MOV       R6,DPL
   \   0000F0   AF83         MOV       R7,DPH
   1565          
   1566                pReq->nwkParams.panId = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   0000F2   8E82         MOV       DPL,R6
   \   0000F4   8F83         MOV       DPH,R7
   \   0000F6   E0           MOVX      A,@DPTR
   \   0000F7   FA           MOV       R2,A
   \   0000F8   7B00         MOV       R3,#0x0
   \   0000FA   8E82         MOV       DPL,R6
   \   0000FC   8F83         MOV       DPH,R7
   \   0000FE   A3           INC       DPTR
   \   0000FF   E0           MOVX      A,@DPTR
   \   000100   F8           MOV       R0,A
   \   000101   7900         MOV       R1,#0x0
   \   000103   E4           CLR       A
   \   000104   C8           XCH       A,R0
   \   000105   F9           MOV       R1,A
   \   000106   EA           MOV       A,R2
   \   000107   28           ADD       A,R0
   \   000108   F8           MOV       R0,A
   \   000109   EB           MOV       A,R3
   \   00010A   39           ADDC      A,R1
   \   00010B   F9           MOV       R1,A
   \   00010C   E5..         MOV       A,?V0
   \   00010E   241E         ADD       A,#0x1e
   \   000110   F582         MOV       DPL,A
   \   000112   E4           CLR       A
   \   000113   35..         ADDC      A,?V1
   \   000115   F583         MOV       DPH,A
   \   000117   E8           MOV       A,R0
   \   000118   F0           MOVX      @DPTR,A
   \   000119   A3           INC       DPTR
   \   00011A   E9           MOV       A,R1
   \   00011B   F0           MOVX      @DPTR,A
   1567                pBuf += 2;
   \   00011C   EE           MOV       A,R6
   \   00011D   2402         ADD       A,#0x2
   \   00011F   FE           MOV       R6,A
   \   000120   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartReq_4
   \   000122   0F           INC       R7
   1568          
   1569                pReq->nwkParams.nwkAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_NwkStartReq_4:
   \   000123   8E82         MOV       DPL,R6
   \   000125   8F83         MOV       DPH,R7
   \   000127   E0           MOVX      A,@DPTR
   \   000128   FA           MOV       R2,A
   \   000129   7B00         MOV       R3,#0x0
   \   00012B   8E82         MOV       DPL,R6
   \   00012D   8F83         MOV       DPH,R7
   \   00012F   A3           INC       DPTR
   \   000130   E0           MOVX      A,@DPTR
   \   000131   F8           MOV       R0,A
   \   000132   7900         MOV       R1,#0x0
   \   000134   E4           CLR       A
   \   000135   C8           XCH       A,R0
   \   000136   F9           MOV       R1,A
   \   000137   EA           MOV       A,R2
   \   000138   28           ADD       A,R0
   \   000139   F8           MOV       R0,A
   \   00013A   EB           MOV       A,R3
   \   00013B   39           ADDC      A,R1
   \   00013C   F9           MOV       R1,A
   \   00013D   E5..         MOV       A,?V0
   \   00013F   2420         ADD       A,#0x20
   \   000141   F582         MOV       DPL,A
   \   000143   E4           CLR       A
   \   000144   35..         ADDC      A,?V1
   \   000146   F583         MOV       DPH,A
   \   000148   E8           MOV       A,R0
   \   000149   F0           MOVX      @DPTR,A
   \   00014A   A3           INC       DPTR
   \   00014B   E9           MOV       A,R1
   \   00014C   F0           MOVX      @DPTR,A
   1570                pBuf += 2;
   \   00014D   EE           MOV       A,R6
   \   00014E   2402         ADD       A,#0x2
   \   000150   FE           MOV       R6,A
   \   000151   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartReq_5
   \   000153   0F           INC       R7
   1571          
   1572                pReq->nwkParams.grpIDsBegin = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_NwkStartReq_5:
   \   000154   8E82         MOV       DPL,R6
   \   000156   8F83         MOV       DPH,R7
   \   000158   E0           MOVX      A,@DPTR
   \   000159   FA           MOV       R2,A
   \   00015A   7B00         MOV       R3,#0x0
   \   00015C   8E82         MOV       DPL,R6
   \   00015E   8F83         MOV       DPH,R7
   \   000160   A3           INC       DPTR
   \   000161   E0           MOVX      A,@DPTR
   \   000162   F8           MOV       R0,A
   \   000163   7900         MOV       R1,#0x0
   \   000165   E4           CLR       A
   \   000166   C8           XCH       A,R0
   \   000167   F9           MOV       R1,A
   \   000168   EA           MOV       A,R2
   \   000169   28           ADD       A,R0
   \   00016A   F8           MOV       R0,A
   \   00016B   EB           MOV       A,R3
   \   00016C   39           ADDC      A,R1
   \   00016D   F9           MOV       R1,A
   \   00016E   E5..         MOV       A,?V0
   \   000170   2422         ADD       A,#0x22
   \   000172   F582         MOV       DPL,A
   \   000174   E4           CLR       A
   \   000175   35..         ADDC      A,?V1
   \   000177   F583         MOV       DPH,A
   \   000179   E8           MOV       A,R0
   \   00017A   F0           MOVX      @DPTR,A
   \   00017B   A3           INC       DPTR
   \   00017C   E9           MOV       A,R1
   \   00017D   F0           MOVX      @DPTR,A
   1573                pBuf += 2;
   \   00017E   EE           MOV       A,R6
   \   00017F   2402         ADD       A,#0x2
   \   000181   FE           MOV       R6,A
   \   000182   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartReq_6
   \   000184   0F           INC       R7
   1574          
   1575                pReq->nwkParams.grpIDsEnd = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_NwkStartReq_6:
   \   000185   8E82         MOV       DPL,R6
   \   000187   8F83         MOV       DPH,R7
   \   000189   E0           MOVX      A,@DPTR
   \   00018A   FA           MOV       R2,A
   \   00018B   7B00         MOV       R3,#0x0
   \   00018D   8E82         MOV       DPL,R6
   \   00018F   8F83         MOV       DPH,R7
   \   000191   A3           INC       DPTR
   \   000192   E0           MOVX      A,@DPTR
   \   000193   F8           MOV       R0,A
   \   000194   7900         MOV       R1,#0x0
   \   000196   E4           CLR       A
   \   000197   C8           XCH       A,R0
   \   000198   F9           MOV       R1,A
   \   000199   EA           MOV       A,R2
   \   00019A   28           ADD       A,R0
   \   00019B   F8           MOV       R0,A
   \   00019C   EB           MOV       A,R3
   \   00019D   39           ADDC      A,R1
   \   00019E   F9           MOV       R1,A
   \   00019F   E5..         MOV       A,?V0
   \   0001A1   2424         ADD       A,#0x24
   \   0001A3   F582         MOV       DPL,A
   \   0001A5   E4           CLR       A
   \   0001A6   35..         ADDC      A,?V1
   \   0001A8   F583         MOV       DPH,A
   \   0001AA   E8           MOV       A,R0
   \   0001AB   F0           MOVX      @DPTR,A
   \   0001AC   A3           INC       DPTR
   \   0001AD   E9           MOV       A,R1
   \   0001AE   F0           MOVX      @DPTR,A
   1576                pBuf += 2;
   \   0001AF   EE           MOV       A,R6
   \   0001B0   2402         ADD       A,#0x2
   \   0001B2   FE           MOV       R6,A
   \   0001B3   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartReq_7
   \   0001B5   0F           INC       R7
   1577          
   1578                pReq->nwkParams.freeNwkAddrBegin = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_NwkStartReq_7:
   \   0001B6   8E82         MOV       DPL,R6
   \   0001B8   8F83         MOV       DPH,R7
   \   0001BA   E0           MOVX      A,@DPTR
   \   0001BB   FA           MOV       R2,A
   \   0001BC   7B00         MOV       R3,#0x0
   \   0001BE   8E82         MOV       DPL,R6
   \   0001C0   8F83         MOV       DPH,R7
   \   0001C2   A3           INC       DPTR
   \   0001C3   E0           MOVX      A,@DPTR
   \   0001C4   F8           MOV       R0,A
   \   0001C5   7900         MOV       R1,#0x0
   \   0001C7   E4           CLR       A
   \   0001C8   C8           XCH       A,R0
   \   0001C9   F9           MOV       R1,A
   \   0001CA   EA           MOV       A,R2
   \   0001CB   28           ADD       A,R0
   \   0001CC   F8           MOV       R0,A
   \   0001CD   EB           MOV       A,R3
   \   0001CE   39           ADDC      A,R1
   \   0001CF   F9           MOV       R1,A
   \   0001D0   E5..         MOV       A,?V0
   \   0001D2   2426         ADD       A,#0x26
   \   0001D4   F582         MOV       DPL,A
   \   0001D6   E4           CLR       A
   \   0001D7   35..         ADDC      A,?V1
   \   0001D9   F583         MOV       DPH,A
   \   0001DB   E8           MOV       A,R0
   \   0001DC   F0           MOVX      @DPTR,A
   \   0001DD   A3           INC       DPTR
   \   0001DE   E9           MOV       A,R1
   \   0001DF   F0           MOVX      @DPTR,A
   1579                pBuf += 2;
   \   0001E0   EE           MOV       A,R6
   \   0001E1   2402         ADD       A,#0x2
   \   0001E3   FE           MOV       R6,A
   \   0001E4   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartReq_8
   \   0001E6   0F           INC       R7
   1580          
   1581                pReq->nwkParams.freeNwkAddrEnd = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_NwkStartReq_8:
   \   0001E7   8E82         MOV       DPL,R6
   \   0001E9   8F83         MOV       DPH,R7
   \   0001EB   E0           MOVX      A,@DPTR
   \   0001EC   FA           MOV       R2,A
   \   0001ED   7B00         MOV       R3,#0x0
   \   0001EF   8E82         MOV       DPL,R6
   \   0001F1   8F83         MOV       DPH,R7
   \   0001F3   A3           INC       DPTR
   \   0001F4   E0           MOVX      A,@DPTR
   \   0001F5   F8           MOV       R0,A
   \   0001F6   7900         MOV       R1,#0x0
   \   0001F8   E4           CLR       A
   \   0001F9   C8           XCH       A,R0
   \   0001FA   F9           MOV       R1,A
   \   0001FB   EA           MOV       A,R2
   \   0001FC   28           ADD       A,R0
   \   0001FD   F8           MOV       R0,A
   \   0001FE   EB           MOV       A,R3
   \   0001FF   39           ADDC      A,R1
   \   000200   F9           MOV       R1,A
   \   000201   E5..         MOV       A,?V0
   \   000203   2428         ADD       A,#0x28
   \   000205   F582         MOV       DPL,A
   \   000207   E4           CLR       A
   \   000208   35..         ADDC      A,?V1
   \   00020A   F583         MOV       DPH,A
   \   00020C   E8           MOV       A,R0
   \   00020D   F0           MOVX      @DPTR,A
   \   00020E   A3           INC       DPTR
   \   00020F   E9           MOV       A,R1
   \   000210   F0           MOVX      @DPTR,A
   1582                pBuf += 2;
   \   000211   EE           MOV       A,R6
   \   000212   2402         ADD       A,#0x2
   \   000214   FE           MOV       R6,A
   \   000215   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartReq_9
   \   000217   0F           INC       R7
   1583          
   1584                pReq->nwkParams.freeGrpIDBegin = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_NwkStartReq_9:
   \   000218   8E82         MOV       DPL,R6
   \   00021A   8F83         MOV       DPH,R7
   \   00021C   E0           MOVX      A,@DPTR
   \   00021D   FA           MOV       R2,A
   \   00021E   7B00         MOV       R3,#0x0
   \   000220   8E82         MOV       DPL,R6
   \   000222   8F83         MOV       DPH,R7
   \   000224   A3           INC       DPTR
   \   000225   E0           MOVX      A,@DPTR
   \   000226   F8           MOV       R0,A
   \   000227   7900         MOV       R1,#0x0
   \   000229   E4           CLR       A
   \   00022A   C8           XCH       A,R0
   \   00022B   F9           MOV       R1,A
   \   00022C   EA           MOV       A,R2
   \   00022D   28           ADD       A,R0
   \   00022E   F8           MOV       R0,A
   \   00022F   EB           MOV       A,R3
   \   000230   39           ADDC      A,R1
   \   000231   F9           MOV       R1,A
   \   000232   E5..         MOV       A,?V0
   \   000234   242A         ADD       A,#0x2a
   \   000236   F582         MOV       DPL,A
   \   000238   E4           CLR       A
   \   000239   35..         ADDC      A,?V1
   \   00023B   F583         MOV       DPH,A
   \   00023D   E8           MOV       A,R0
   \   00023E   F0           MOVX      @DPTR,A
   \   00023F   A3           INC       DPTR
   \   000240   E9           MOV       A,R1
   \   000241   F0           MOVX      @DPTR,A
   1585                pBuf += 2;
   \   000242   EE           MOV       A,R6
   \   000243   2402         ADD       A,#0x2
   \   000245   FE           MOV       R6,A
   \   000246   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartReq_10
   \   000248   0F           INC       R7
   1586          
   1587                pReq->nwkParams.freeGrpIDEnd = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_NwkStartReq_10:
   \   000249   8E82         MOV       DPL,R6
   \   00024B   8F83         MOV       DPH,R7
   \   00024D   E0           MOVX      A,@DPTR
   \   00024E   FA           MOV       R2,A
   \   00024F   7B00         MOV       R3,#0x0
   \   000251   8E82         MOV       DPL,R6
   \   000253   8F83         MOV       DPH,R7
   \   000255   A3           INC       DPTR
   \   000256   E0           MOVX      A,@DPTR
   \   000257   F8           MOV       R0,A
   \   000258   7900         MOV       R1,#0x0
   \   00025A   E4           CLR       A
   \   00025B   C8           XCH       A,R0
   \   00025C   F9           MOV       R1,A
   \   00025D   EA           MOV       A,R2
   \   00025E   28           ADD       A,R0
   \   00025F   F8           MOV       R0,A
   \   000260   EB           MOV       A,R3
   \   000261   39           ADDC      A,R1
   \   000262   F9           MOV       R1,A
   \   000263   E5..         MOV       A,?V0
   \   000265   242C         ADD       A,#0x2c
   \   000267   F582         MOV       DPL,A
   \   000269   E4           CLR       A
   \   00026A   35..         ADDC      A,?V1
   \   00026C   F583         MOV       DPH,A
   \   00026E   E8           MOV       A,R0
   \   00026F   F0           MOVX      @DPTR,A
   \   000270   A3           INC       DPTR
   \   000271   E9           MOV       A,R1
   \   000272   F0           MOVX      @DPTR,A
   1588                pBuf += 2;
   \   000273   EE           MOV       A,R6
   \   000274   2402         ADD       A,#0x2
   \   000276   FE           MOV       R6,A
   \   000277   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartReq_11
   \   000279   0F           INC       R7
   1589          
   1590                zcl_cpyExtAddr( pReq->initiatorIeeeAddr, pBuf );
   \                     ??bdbTL_ProcessInCmd_NwkStartReq_11:
   \   00027A                ; Setup parameters for call to function sAddrExtCpy
   \   00027A   EE           MOV       A,R6
   \   00027B   FC           MOV       R4,A
   \   00027C   EF           MOV       A,R7
   \   00027D   FD           MOV       R5,A
   \   00027E   E5..         MOV       A,?V0
   \   000280   242E         ADD       A,#0x2e
   \   000282   FA           MOV       R2,A
   \   000283   E4           CLR       A
   \   000284   35..         ADDC      A,?V1
   \   000286   FB           MOV       R3,A
   \   000287   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1591                pBuf += Z_EXTADDR_LEN;
   \   00028A   EE           MOV       A,R6
   \   00028B   2408         ADD       A,#0x8
   \   00028D   FE           MOV       R6,A
   \   00028E   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartReq_12
   \   000290   0F           INC       R7
   1592          
   1593                pReq->initiatorNwkAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_NwkStartReq_12:
   \   000291   8E82         MOV       DPL,R6
   \   000293   8F83         MOV       DPH,R7
   \   000295   E0           MOVX      A,@DPTR
   \   000296   FA           MOV       R2,A
   \   000297   7B00         MOV       R3,#0x0
   \   000299   8E82         MOV       DPL,R6
   \   00029B   8F83         MOV       DPH,R7
   \   00029D   A3           INC       DPTR
   \   00029E   E0           MOVX      A,@DPTR
   \   00029F   F8           MOV       R0,A
   \   0002A0   7900         MOV       R1,#0x0
   \   0002A2   E4           CLR       A
   \   0002A3   C8           XCH       A,R0
   \   0002A4   F9           MOV       R1,A
   \   0002A5   EA           MOV       A,R2
   \   0002A6   28           ADD       A,R0
   \   0002A7   F8           MOV       R0,A
   \   0002A8   EB           MOV       A,R3
   \   0002A9   39           ADDC      A,R1
   \   0002AA   F9           MOV       R1,A
   \   0002AB   E5..         MOV       A,?V0
   \   0002AD   2436         ADD       A,#0x36
   \   0002AF   F582         MOV       DPL,A
   \   0002B1   E4           CLR       A
   \   0002B2   35..         ADDC      A,?V1
   \   0002B4   F583         MOV       DPH,A
   \   0002B6   E8           MOV       A,R0
   \   0002B7   F0           MOVX      @DPTR,A
   \   0002B8   A3           INC       DPTR
   \   0002B9   E9           MOV       A,R1
   \   0002BA   F0           MOVX      @DPTR,A
   1594          
   1595                status = pInterPANCBs->pfnNwkStartReq( &(pInMsg->msg->srcAddr), pReq,
   1596                                                       pInMsg->hdr.transSeqNum );
   \   0002BB                ; Setup parameters for indirect call
   \   0002BB   85..82       MOV       DPL,?V8
   \   0002BE   85..83       MOV       DPH,?V9
   \   0002C1   A3           INC       DPTR
   \   0002C2   A3           INC       DPTR
   \   0002C3   A3           INC       DPTR
   \   0002C4   A3           INC       DPTR
   \   0002C5   A3           INC       DPTR
   \   0002C6   A3           INC       DPTR
   \   0002C7   E0           MOVX      A,@DPTR
   \   0002C8   F9           MOV       R1,A
   \   0002C9   AC..         MOV       R4,?V0
   \   0002CB   AD..         MOV       R5,?V1
   \   0002CD   85..82       MOV       DPL,?V8
   \   0002D0   85..83       MOV       DPH,?V9
   \   0002D3   E0           MOVX      A,@DPTR
   \   0002D4   2406         ADD       A,#0x6
   \   0002D6   FA           MOV       R2,A
   \   0002D7   A3           INC       DPTR
   \   0002D8   E0           MOVX      A,@DPTR
   \   0002D9   3400         ADDC      A,#0x0
   \   0002DB   FB           MOV       R3,A
   \   0002DC   90....       MOV       DPTR,#pInterPANCBs
   \   0002DF   E0           MOVX      A,@DPTR
   \   0002E0   F8           MOV       R0,A
   \   0002E1   A3           INC       DPTR
   \   0002E2   E0           MOVX      A,@DPTR
   \   0002E3   C8           XCH       A,R0
   \   0002E4   2408         ADD       A,#0x8
   \   0002E6   F582         MOV       DPL,A
   \   0002E8   C8           XCH       A,R0
   \   0002E9   3400         ADDC      A,#0x0
   \   0002EB   F583         MOV       DPH,A
   \   0002ED   E0           MOVX      A,@DPTR
   \   0002EE   F8           MOV       R0,A
   \   0002EF   A3           INC       DPTR
   \   0002F0   E0           MOVX      A,@DPTR
   \   0002F1   F583         MOV       DPH,A
   \   0002F3   8882         MOV       DPL,R0
   \   0002F5   12....       LCALL     ?CALL_IND
   \   0002F8   E9           MOV       A,R1
   \   0002F9   F5..         MOV       ?V2,A
   1597          
   1598                zcl_mem_free( pReq );
   \   0002FB                ; Setup parameters for call to function osal_mem_free
   \   0002FB   AA..         MOV       R2,?V0
   \   0002FD   AB..         MOV       R3,?V1
   \   0002FF   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1599              }
   1600            }
   1601          
   1602            return ( status );
   \                     ??bdbTL_ProcessInCmd_NwkStartReq_0:
   \   000302   A9..         MOV       R1,?V2
   \   000304   7F0A         MOV       R7,#0xa
   \   000306   02....       LJMP      ?BANKED_LEAVE_XDATA
   1603          }
   1604          
   1605          /*********************************************************************
   1606           * @fn      bdbTL_ParseInCmd_NwkJoinReq
   1607           *
   1608           * @brief   Parse in the received Network Router/End Device Join Request command.
   1609           *
   1610           * @param   pBuf - pointer to the incoming message
   1611           *
   1612           * @return  void
   1613           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1614          static void bdbTL_ParseInCmd_NwkJoinReq( uint8 *pBuf, bdbTLNwkJoinReq_t *pReq )
   \                     bdbTL_ParseInCmd_NwkJoinReq:
   1615          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   1616            pReq->transID = zcl_build_uint32( pBuf, 4 );
   \   00000D                ; Setup parameters for call to function osal_build_uint32
   \   00000D   7904         MOV       R1,#0x4
   \   00000F   EE           MOV       A,R6
   \   000010   FA           MOV       R2,A
   \   000011   EF           MOV       A,R7
   \   000012   FB           MOV       R3,A
   \   000013   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000016   EA           MOV       A,R2
   \   000017   F8           MOV       R0,A
   \   000018   EB           MOV       A,R3
   \   000019   F9           MOV       R1,A
   \   00001A   EC           MOV       A,R4
   \   00001B   FA           MOV       R2,A
   \   00001C   ED           MOV       A,R5
   \   00001D   FB           MOV       R3,A
   \   00001E   85..82       MOV       DPL,?V0
   \   000021   85..83       MOV       DPH,?V1
   \   000024   12....       LCALL     ?XSTORE_R0123
   1617            pBuf += 4;
   \   000027   EE           MOV       A,R6
   \   000028   2404         ADD       A,#0x4
   \   00002A   FE           MOV       R6,A
   \   00002B   5001         JNC       ??bdbTL_ParseInCmd_NwkJoinReq_0
   \   00002D   0F           INC       R7
   1618          
   1619            zcl_cpyExtAddr( pReq->nwkParams.extendedPANID, pBuf );
   \                     ??bdbTL_ParseInCmd_NwkJoinReq_0:
   \   00002E                ; Setup parameters for call to function sAddrExtCpy
   \   00002E   EE           MOV       A,R6
   \   00002F   FC           MOV       R4,A
   \   000030   EF           MOV       A,R7
   \   000031   FD           MOV       R5,A
   \   000032   E5..         MOV       A,?V0
   \   000034   2404         ADD       A,#0x4
   \   000036   FA           MOV       R2,A
   \   000037   E4           CLR       A
   \   000038   35..         ADDC      A,?V1
   \   00003A   FB           MOV       R3,A
   \   00003B   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1620            pBuf += Z_EXTADDR_LEN;
   \   00003E   EE           MOV       A,R6
   \   00003F   2408         ADD       A,#0x8
   \   000041   FE           MOV       R6,A
   \   000042   5001         JNC       ??bdbTL_ParseInCmd_NwkJoinReq_1
   \   000044   0F           INC       R7
   1621          
   1622            pReq->nwkParams.keyIndex = *pBuf++;
   \                     ??bdbTL_ParseInCmd_NwkJoinReq_1:
   \   000045   8E82         MOV       DPL,R6
   \   000047   8F83         MOV       DPH,R7
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   C0E0         PUSH      A
   \   00004C   E5..         MOV       A,?V0
   \   00004E   240C         ADD       A,#0xc
   \   000050   F582         MOV       DPL,A
   \   000052   E4           CLR       A
   \   000053   35..         ADDC      A,?V1
   \   000055   F583         MOV       DPH,A
   \   000057   D0E0         POP       A
   \   000059   F0           MOVX      @DPTR,A
   \   00005A   8E82         MOV       DPL,R6
   \   00005C   8F83         MOV       DPH,R7
   \   00005E   A3           INC       DPTR
   \   00005F   AE82         MOV       R6,DPL
   \   000061   AF83         MOV       R7,DPH
   1623          
   1624            zcl_memcpy( pReq->nwkParams.nwkKey, pBuf, SEC_KEY_LEN );
   \   000063                ; Setup parameters for call to function osal_memcpy
   \   000063   8E..         MOV       ?V4,R6
   \   000065   8F..         MOV       ?V5,R7
   \   000067   75..00       MOV       ?V6,#0x0
   \   00006A   78..         MOV       R0,#?V4
   \   00006C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00006F   7C10         MOV       R4,#0x10
   \   000071   7D00         MOV       R5,#0x0
   \   000073   E5..         MOV       A,?V0
   \   000075   240D         ADD       A,#0xd
   \   000077   FA           MOV       R2,A
   \   000078   E4           CLR       A
   \   000079   35..         ADDC      A,?V1
   \   00007B   FB           MOV       R3,A
   \   00007C   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00007F   7403         MOV       A,#0x3
   \   000081   12....       LCALL     ?DEALLOC_XSTACK8
   1625            pBuf += SEC_KEY_LEN;
   \   000084   EE           MOV       A,R6
   \   000085   2410         ADD       A,#0x10
   \   000087   FE           MOV       R6,A
   \   000088   5001         JNC       ??bdbTL_ParseInCmd_NwkJoinReq_2
   \   00008A   0F           INC       R7
   1626          
   1627            pReq->nwkUpdateId = *pBuf++;
   \                     ??bdbTL_ParseInCmd_NwkJoinReq_2:
   \   00008B   8E82         MOV       DPL,R6
   \   00008D   8F83         MOV       DPH,R7
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   C0E0         PUSH      A
   \   000092   E5..         MOV       A,?V0
   \   000094   242E         ADD       A,#0x2e
   \   000096   F582         MOV       DPL,A
   \   000098   E4           CLR       A
   \   000099   35..         ADDC      A,?V1
   \   00009B   F583         MOV       DPH,A
   \   00009D   D0E0         POP       A
   \   00009F   F0           MOVX      @DPTR,A
   \   0000A0   8E82         MOV       DPL,R6
   \   0000A2   8F83         MOV       DPH,R7
   \   0000A4   A3           INC       DPTR
   \   0000A5   AE82         MOV       R6,DPL
   \   0000A7   AF83         MOV       R7,DPH
   1628            pReq->nwkParams.logicalChannel = *pBuf++;
   \   0000A9   8E82         MOV       DPL,R6
   \   0000AB   8F83         MOV       DPH,R7
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   C0E0         PUSH      A
   \   0000B0   E5..         MOV       A,?V0
   \   0000B2   241D         ADD       A,#0x1d
   \   0000B4   F582         MOV       DPL,A
   \   0000B6   E4           CLR       A
   \   0000B7   35..         ADDC      A,?V1
   \   0000B9   F583         MOV       DPH,A
   \   0000BB   D0E0         POP       A
   \   0000BD   F0           MOVX      @DPTR,A
   \   0000BE   8E82         MOV       DPL,R6
   \   0000C0   8F83         MOV       DPH,R7
   \   0000C2   A3           INC       DPTR
   \   0000C3   AE82         MOV       R6,DPL
   \   0000C5   AF83         MOV       R7,DPH
   1629          
   1630            pReq->nwkParams.panId = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   0000C7   8E82         MOV       DPL,R6
   \   0000C9   8F83         MOV       DPH,R7
   \   0000CB   E0           MOVX      A,@DPTR
   \   0000CC   FA           MOV       R2,A
   \   0000CD   7B00         MOV       R3,#0x0
   \   0000CF   8E82         MOV       DPL,R6
   \   0000D1   8F83         MOV       DPH,R7
   \   0000D3   A3           INC       DPTR
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   F8           MOV       R0,A
   \   0000D6   7900         MOV       R1,#0x0
   \   0000D8   E4           CLR       A
   \   0000D9   C8           XCH       A,R0
   \   0000DA   F9           MOV       R1,A
   \   0000DB   EA           MOV       A,R2
   \   0000DC   28           ADD       A,R0
   \   0000DD   F8           MOV       R0,A
   \   0000DE   EB           MOV       A,R3
   \   0000DF   39           ADDC      A,R1
   \   0000E0   F9           MOV       R1,A
   \   0000E1   E5..         MOV       A,?V0
   \   0000E3   241E         ADD       A,#0x1e
   \   0000E5   F582         MOV       DPL,A
   \   0000E7   E4           CLR       A
   \   0000E8   35..         ADDC      A,?V1
   \   0000EA   F583         MOV       DPH,A
   \   0000EC   E8           MOV       A,R0
   \   0000ED   F0           MOVX      @DPTR,A
   \   0000EE   A3           INC       DPTR
   \   0000EF   E9           MOV       A,R1
   \   0000F0   F0           MOVX      @DPTR,A
   1631            pBuf += 2;
   \   0000F1   EE           MOV       A,R6
   \   0000F2   2402         ADD       A,#0x2
   \   0000F4   FE           MOV       R6,A
   \   0000F5   5001         JNC       ??bdbTL_ParseInCmd_NwkJoinReq_3
   \   0000F7   0F           INC       R7
   1632          
   1633            pReq->nwkParams.nwkAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ParseInCmd_NwkJoinReq_3:
   \   0000F8   8E82         MOV       DPL,R6
   \   0000FA   8F83         MOV       DPH,R7
   \   0000FC   E0           MOVX      A,@DPTR
   \   0000FD   FA           MOV       R2,A
   \   0000FE   7B00         MOV       R3,#0x0
   \   000100   8E82         MOV       DPL,R6
   \   000102   8F83         MOV       DPH,R7
   \   000104   A3           INC       DPTR
   \   000105   E0           MOVX      A,@DPTR
   \   000106   F8           MOV       R0,A
   \   000107   7900         MOV       R1,#0x0
   \   000109   E4           CLR       A
   \   00010A   C8           XCH       A,R0
   \   00010B   F9           MOV       R1,A
   \   00010C   EA           MOV       A,R2
   \   00010D   28           ADD       A,R0
   \   00010E   F8           MOV       R0,A
   \   00010F   EB           MOV       A,R3
   \   000110   39           ADDC      A,R1
   \   000111   F9           MOV       R1,A
   \   000112   E5..         MOV       A,?V0
   \   000114   2420         ADD       A,#0x20
   \   000116   F582         MOV       DPL,A
   \   000118   E4           CLR       A
   \   000119   35..         ADDC      A,?V1
   \   00011B   F583         MOV       DPH,A
   \   00011D   E8           MOV       A,R0
   \   00011E   F0           MOVX      @DPTR,A
   \   00011F   A3           INC       DPTR
   \   000120   E9           MOV       A,R1
   \   000121   F0           MOVX      @DPTR,A
   1634            pBuf += 2;
   \   000122   EE           MOV       A,R6
   \   000123   2402         ADD       A,#0x2
   \   000125   FE           MOV       R6,A
   \   000126   5001         JNC       ??bdbTL_ParseInCmd_NwkJoinReq_4
   \   000128   0F           INC       R7
   1635          
   1636            pReq->nwkParams.grpIDsBegin = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ParseInCmd_NwkJoinReq_4:
   \   000129   8E82         MOV       DPL,R6
   \   00012B   8F83         MOV       DPH,R7
   \   00012D   E0           MOVX      A,@DPTR
   \   00012E   FA           MOV       R2,A
   \   00012F   7B00         MOV       R3,#0x0
   \   000131   8E82         MOV       DPL,R6
   \   000133   8F83         MOV       DPH,R7
   \   000135   A3           INC       DPTR
   \   000136   E0           MOVX      A,@DPTR
   \   000137   F8           MOV       R0,A
   \   000138   7900         MOV       R1,#0x0
   \   00013A   E4           CLR       A
   \   00013B   C8           XCH       A,R0
   \   00013C   F9           MOV       R1,A
   \   00013D   EA           MOV       A,R2
   \   00013E   28           ADD       A,R0
   \   00013F   F8           MOV       R0,A
   \   000140   EB           MOV       A,R3
   \   000141   39           ADDC      A,R1
   \   000142   F9           MOV       R1,A
   \   000143   E5..         MOV       A,?V0
   \   000145   2422         ADD       A,#0x22
   \   000147   F582         MOV       DPL,A
   \   000149   E4           CLR       A
   \   00014A   35..         ADDC      A,?V1
   \   00014C   F583         MOV       DPH,A
   \   00014E   E8           MOV       A,R0
   \   00014F   F0           MOVX      @DPTR,A
   \   000150   A3           INC       DPTR
   \   000151   E9           MOV       A,R1
   \   000152   F0           MOVX      @DPTR,A
   1637            pBuf += 2;
   \   000153   EE           MOV       A,R6
   \   000154   2402         ADD       A,#0x2
   \   000156   FE           MOV       R6,A
   \   000157   5001         JNC       ??bdbTL_ParseInCmd_NwkJoinReq_5
   \   000159   0F           INC       R7
   1638          
   1639            pReq->nwkParams.grpIDsEnd = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ParseInCmd_NwkJoinReq_5:
   \   00015A   8E82         MOV       DPL,R6
   \   00015C   8F83         MOV       DPH,R7
   \   00015E   E0           MOVX      A,@DPTR
   \   00015F   FA           MOV       R2,A
   \   000160   7B00         MOV       R3,#0x0
   \   000162   8E82         MOV       DPL,R6
   \   000164   8F83         MOV       DPH,R7
   \   000166   A3           INC       DPTR
   \   000167   E0           MOVX      A,@DPTR
   \   000168   F8           MOV       R0,A
   \   000169   7900         MOV       R1,#0x0
   \   00016B   E4           CLR       A
   \   00016C   C8           XCH       A,R0
   \   00016D   F9           MOV       R1,A
   \   00016E   EA           MOV       A,R2
   \   00016F   28           ADD       A,R0
   \   000170   F8           MOV       R0,A
   \   000171   EB           MOV       A,R3
   \   000172   39           ADDC      A,R1
   \   000173   F9           MOV       R1,A
   \   000174   E5..         MOV       A,?V0
   \   000176   2424         ADD       A,#0x24
   \   000178   F582         MOV       DPL,A
   \   00017A   E4           CLR       A
   \   00017B   35..         ADDC      A,?V1
   \   00017D   F583         MOV       DPH,A
   \   00017F   E8           MOV       A,R0
   \   000180   F0           MOVX      @DPTR,A
   \   000181   A3           INC       DPTR
   \   000182   E9           MOV       A,R1
   \   000183   F0           MOVX      @DPTR,A
   1640            pBuf += 2;
   \   000184   EE           MOV       A,R6
   \   000185   2402         ADD       A,#0x2
   \   000187   FE           MOV       R6,A
   \   000188   5001         JNC       ??bdbTL_ParseInCmd_NwkJoinReq_6
   \   00018A   0F           INC       R7
   1641          
   1642            pReq->nwkParams.freeNwkAddrBegin = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ParseInCmd_NwkJoinReq_6:
   \   00018B   8E82         MOV       DPL,R6
   \   00018D   8F83         MOV       DPH,R7
   \   00018F   E0           MOVX      A,@DPTR
   \   000190   FA           MOV       R2,A
   \   000191   7B00         MOV       R3,#0x0
   \   000193   8E82         MOV       DPL,R6
   \   000195   8F83         MOV       DPH,R7
   \   000197   A3           INC       DPTR
   \   000198   E0           MOVX      A,@DPTR
   \   000199   F8           MOV       R0,A
   \   00019A   7900         MOV       R1,#0x0
   \   00019C   E4           CLR       A
   \   00019D   C8           XCH       A,R0
   \   00019E   F9           MOV       R1,A
   \   00019F   EA           MOV       A,R2
   \   0001A0   28           ADD       A,R0
   \   0001A1   F8           MOV       R0,A
   \   0001A2   EB           MOV       A,R3
   \   0001A3   39           ADDC      A,R1
   \   0001A4   F9           MOV       R1,A
   \   0001A5   E5..         MOV       A,?V0
   \   0001A7   2426         ADD       A,#0x26
   \   0001A9   F582         MOV       DPL,A
   \   0001AB   E4           CLR       A
   \   0001AC   35..         ADDC      A,?V1
   \   0001AE   F583         MOV       DPH,A
   \   0001B0   E8           MOV       A,R0
   \   0001B1   F0           MOVX      @DPTR,A
   \   0001B2   A3           INC       DPTR
   \   0001B3   E9           MOV       A,R1
   \   0001B4   F0           MOVX      @DPTR,A
   1643            pBuf += 2;
   \   0001B5   EE           MOV       A,R6
   \   0001B6   2402         ADD       A,#0x2
   \   0001B8   FE           MOV       R6,A
   \   0001B9   5001         JNC       ??bdbTL_ParseInCmd_NwkJoinReq_7
   \   0001BB   0F           INC       R7
   1644          
   1645            pReq->nwkParams.freeNwkAddrEnd = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ParseInCmd_NwkJoinReq_7:
   \   0001BC   8E82         MOV       DPL,R6
   \   0001BE   8F83         MOV       DPH,R7
   \   0001C0   E0           MOVX      A,@DPTR
   \   0001C1   FA           MOV       R2,A
   \   0001C2   7B00         MOV       R3,#0x0
   \   0001C4   8E82         MOV       DPL,R6
   \   0001C6   8F83         MOV       DPH,R7
   \   0001C8   A3           INC       DPTR
   \   0001C9   E0           MOVX      A,@DPTR
   \   0001CA   F8           MOV       R0,A
   \   0001CB   7900         MOV       R1,#0x0
   \   0001CD   E4           CLR       A
   \   0001CE   C8           XCH       A,R0
   \   0001CF   F9           MOV       R1,A
   \   0001D0   EA           MOV       A,R2
   \   0001D1   28           ADD       A,R0
   \   0001D2   F8           MOV       R0,A
   \   0001D3   EB           MOV       A,R3
   \   0001D4   39           ADDC      A,R1
   \   0001D5   F9           MOV       R1,A
   \   0001D6   E5..         MOV       A,?V0
   \   0001D8   2428         ADD       A,#0x28
   \   0001DA   F582         MOV       DPL,A
   \   0001DC   E4           CLR       A
   \   0001DD   35..         ADDC      A,?V1
   \   0001DF   F583         MOV       DPH,A
   \   0001E1   E8           MOV       A,R0
   \   0001E2   F0           MOVX      @DPTR,A
   \   0001E3   A3           INC       DPTR
   \   0001E4   E9           MOV       A,R1
   \   0001E5   F0           MOVX      @DPTR,A
   1646            pBuf += 2;
   \   0001E6   EE           MOV       A,R6
   \   0001E7   2402         ADD       A,#0x2
   \   0001E9   FE           MOV       R6,A
   \   0001EA   5001         JNC       ??bdbTL_ParseInCmd_NwkJoinReq_8
   \   0001EC   0F           INC       R7
   1647          
   1648            pReq->nwkParams.freeGrpIDBegin = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ParseInCmd_NwkJoinReq_8:
   \   0001ED   8E82         MOV       DPL,R6
   \   0001EF   8F83         MOV       DPH,R7
   \   0001F1   E0           MOVX      A,@DPTR
   \   0001F2   FA           MOV       R2,A
   \   0001F3   7B00         MOV       R3,#0x0
   \   0001F5   8E82         MOV       DPL,R6
   \   0001F7   8F83         MOV       DPH,R7
   \   0001F9   A3           INC       DPTR
   \   0001FA   E0           MOVX      A,@DPTR
   \   0001FB   F8           MOV       R0,A
   \   0001FC   7900         MOV       R1,#0x0
   \   0001FE   E4           CLR       A
   \   0001FF   C8           XCH       A,R0
   \   000200   F9           MOV       R1,A
   \   000201   EA           MOV       A,R2
   \   000202   28           ADD       A,R0
   \   000203   F8           MOV       R0,A
   \   000204   EB           MOV       A,R3
   \   000205   39           ADDC      A,R1
   \   000206   F9           MOV       R1,A
   \   000207   E5..         MOV       A,?V0
   \   000209   242A         ADD       A,#0x2a
   \   00020B   F582         MOV       DPL,A
   \   00020D   E4           CLR       A
   \   00020E   35..         ADDC      A,?V1
   \   000210   F583         MOV       DPH,A
   \   000212   E8           MOV       A,R0
   \   000213   F0           MOVX      @DPTR,A
   \   000214   A3           INC       DPTR
   \   000215   E9           MOV       A,R1
   \   000216   F0           MOVX      @DPTR,A
   1649            pBuf += 2;
   \   000217   EE           MOV       A,R6
   \   000218   2402         ADD       A,#0x2
   \   00021A   FE           MOV       R6,A
   \   00021B   5001         JNC       ??bdbTL_ParseInCmd_NwkJoinReq_9
   \   00021D   0F           INC       R7
   1650          
   1651            pReq->nwkParams.freeGrpIDEnd = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ParseInCmd_NwkJoinReq_9:
   \   00021E   8E82         MOV       DPL,R6
   \   000220   8F83         MOV       DPH,R7
   \   000222   E0           MOVX      A,@DPTR
   \   000223   FA           MOV       R2,A
   \   000224   7B00         MOV       R3,#0x0
   \   000226   8E82         MOV       DPL,R6
   \   000228   8F83         MOV       DPH,R7
   \   00022A   A3           INC       DPTR
   \   00022B   E0           MOVX      A,@DPTR
   \   00022C   F8           MOV       R0,A
   \   00022D   7900         MOV       R1,#0x0
   \   00022F   E4           CLR       A
   \   000230   C8           XCH       A,R0
   \   000231   F9           MOV       R1,A
   \   000232   EA           MOV       A,R2
   \   000233   28           ADD       A,R0
   \   000234   F8           MOV       R0,A
   \   000235   EB           MOV       A,R3
   \   000236   39           ADDC      A,R1
   \   000237   F9           MOV       R1,A
   \   000238   E5..         MOV       A,?V0
   \   00023A   242C         ADD       A,#0x2c
   \   00023C   F582         MOV       DPL,A
   \   00023E   E4           CLR       A
   \   00023F   35..         ADDC      A,?V1
   \   000241   F583         MOV       DPH,A
   \   000243   E8           MOV       A,R0
   \   000244   F0           MOVX      @DPTR,A
   \   000245   A3           INC       DPTR
   \   000246   E9           MOV       A,R1
   \   000247   F0           MOVX      @DPTR,A
   1652          }
   \   000248   7F07         MOV       R7,#0x7
   \   00024A   02....       LJMP      ?BANKED_LEAVE_XDATA
   1653          
   1654          /*********************************************************************
   1655           * @fn      bdbTL_ProcessInCmd_NwkJoinRtrReq
   1656           *
   1657           * @brief   Process in the received Network Join Router Request command.
   1658           *
   1659           * @param   pInMsg - pointer to the incoming message
   1660           *
   1661           * @return  ZStatus_t
   1662           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1663          static ZStatus_t bdbTL_ProcessInCmd_NwkJoinRtrReq( zclIncoming_t *pInMsg )
   \                     bdbTL_ProcessInCmd_NwkJoinRtrReq:
   1664          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1665            ZStatus_t status = ZSuccess;
   \   000009   75..00       MOV       ?V2,#0x0
   1666          
   1667            if ( pInterPANCBs->pfnNwkJoinRtrReq )
   \   00000C   90....       MOV       DPTR,#pInterPANCBs
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F8           MOV       R0,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   C8           XCH       A,R0
   \   000014   240A         ADD       A,#0xa
   \   000016   F582         MOV       DPL,A
   \   000018   C8           XCH       A,R0
   \   000019   3400         ADDC      A,#0x0
   \   00001B   F583         MOV       DPH,A
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F8           MOV       R0,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F9           MOV       R1,A
   \   000022   E8           MOV       A,R0
   \   000023   49           ORL       A,R1
   \   000024   6072         JZ        ??bdbTL_ProcessInCmd_NwkJoinRtrReq_0
   1668            {
   1669              bdbTLNwkJoinReq_t *pReq;
   1670          
   1671              pReq = (bdbTLNwkJoinReq_t *)zcl_mem_alloc( sizeof( bdbTLNwkJoinReq_t ) );
   \   000026                ; Setup parameters for call to function osal_mem_alloc
   \   000026   7A2F         MOV       R2,#0x2f
   \   000028   7B00         MOV       R3,#0x0
   \   00002A   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002D   8A..         MOV       ?V4,R2
   \   00002F   8B..         MOV       ?V5,R3
   \   000031   85....       MOV       ?V0,?V4
   \   000034   85....       MOV       ?V1,?V5
   1672              if ( pReq )
   \   000037   E5..         MOV       A,?V0
   \   000039   45..         ORL       A,?V1
   \   00003B   605B         JZ        ??bdbTL_ProcessInCmd_NwkJoinRtrReq_0
   1673              {
   1674                bdbTL_ParseInCmd_NwkJoinReq( pInMsg->pData, pReq );
   \   00003D                ; Setup parameters for call to function bdbTL_ParseInCmd_NwkJoinReq
   \   00003D   AC..         MOV       R4,?V0
   \   00003F   AD..         MOV       R5,?V1
   \   000041   8E82         MOV       DPL,R6
   \   000043   8F83         MOV       DPH,R7
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   FA           MOV       R2,A
   \   00004F   A3           INC       DPTR
   \   000050   E0           MOVX      A,@DPTR
   \   000051   FB           MOV       R3,A
   \   000052   12....       LCALL     `??bdbTL_ParseInCmd_NwkJoinReq::?relay`; Banked call to: bdbTL_ParseInCmd_NwkJoinReq
   1675          
   1676                status = pInterPANCBs->pfnNwkJoinRtrReq( &(pInMsg->msg->srcAddr), pReq,
   1677                                                         pInMsg->hdr.transSeqNum  );
   \   000055                ; Setup parameters for indirect call
   \   000055   8E82         MOV       DPL,R6
   \   000057   8F83         MOV       DPH,R7
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F9           MOV       R1,A
   \   000061   AC..         MOV       R4,?V0
   \   000063   AD..         MOV       R5,?V1
   \   000065   8E82         MOV       DPL,R6
   \   000067   8F83         MOV       DPH,R7
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   2406         ADD       A,#0x6
   \   00006C   FA           MOV       R2,A
   \   00006D   A3           INC       DPTR
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   3400         ADDC      A,#0x0
   \   000071   FB           MOV       R3,A
   \   000072   90....       MOV       DPTR,#pInterPANCBs
   \   000075   E0           MOVX      A,@DPTR
   \   000076   F8           MOV       R0,A
   \   000077   A3           INC       DPTR
   \   000078   E0           MOVX      A,@DPTR
   \   000079   C8           XCH       A,R0
   \   00007A   240A         ADD       A,#0xa
   \   00007C   F582         MOV       DPL,A
   \   00007E   C8           XCH       A,R0
   \   00007F   3400         ADDC      A,#0x0
   \   000081   F583         MOV       DPH,A
   \   000083   E0           MOVX      A,@DPTR
   \   000084   F8           MOV       R0,A
   \   000085   A3           INC       DPTR
   \   000086   E0           MOVX      A,@DPTR
   \   000087   F583         MOV       DPH,A
   \   000089   8882         MOV       DPL,R0
   \   00008B   12....       LCALL     ?CALL_IND
   \   00008E   E9           MOV       A,R1
   \   00008F   F5..         MOV       ?V2,A
   1678                zcl_mem_free( pReq );
   \   000091                ; Setup parameters for call to function osal_mem_free
   \   000091   AA..         MOV       R2,?V0
   \   000093   AB..         MOV       R3,?V1
   \   000095   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1679              }
   1680            }
   1681          
   1682            return ( status );
   \                     ??bdbTL_ProcessInCmd_NwkJoinRtrReq_0:
   \   000098   A9..         MOV       R1,?V2
   \   00009A   7F06         MOV       R7,#0x6
   \   00009C   02....       LJMP      ?BANKED_LEAVE_XDATA
   1683          }
   1684          
   1685          /*********************************************************************
   1686           * @fn      bdbTL_ProcessInCmd_NwkJoinEDReq
   1687           *
   1688           * @brief   Process in the received Network Join End Device  Request command.
   1689           *
   1690           * @param   pInMsg - pointer to the incoming message
   1691           *
   1692           * @return  ZStatus_t
   1693           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1694          static ZStatus_t bdbTL_ProcessInCmd_NwkJoinEDReq( zclIncoming_t *pInMsg )
   \                     bdbTL_ProcessInCmd_NwkJoinEDReq:
   1695          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1696            ZStatus_t status = ZSuccess;
   \   000009   75..00       MOV       ?V2,#0x0
   1697          
   1698            if ( pInterPANCBs->pfnNwkJoinEDReq )
   \   00000C   90....       MOV       DPTR,#pInterPANCBs
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F8           MOV       R0,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   C8           XCH       A,R0
   \   000014   240C         ADD       A,#0xc
   \   000016   F582         MOV       DPL,A
   \   000018   C8           XCH       A,R0
   \   000019   3400         ADDC      A,#0x0
   \   00001B   F583         MOV       DPH,A
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F8           MOV       R0,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F9           MOV       R1,A
   \   000022   E8           MOV       A,R0
   \   000023   49           ORL       A,R1
   \   000024   6072         JZ        ??bdbTL_ProcessInCmd_NwkJoinEDReq_0
   1699            {
   1700              bdbTLNwkJoinReq_t *pReq;
   1701          
   1702              pReq = (bdbTLNwkJoinReq_t *)zcl_mem_alloc( sizeof( bdbTLNwkJoinReq_t ) );
   \   000026                ; Setup parameters for call to function osal_mem_alloc
   \   000026   7A2F         MOV       R2,#0x2f
   \   000028   7B00         MOV       R3,#0x0
   \   00002A   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002D   8A..         MOV       ?V4,R2
   \   00002F   8B..         MOV       ?V5,R3
   \   000031   85....       MOV       ?V0,?V4
   \   000034   85....       MOV       ?V1,?V5
   1703              if ( pReq )
   \   000037   E5..         MOV       A,?V0
   \   000039   45..         ORL       A,?V1
   \   00003B   605B         JZ        ??bdbTL_ProcessInCmd_NwkJoinEDReq_0
   1704              {
   1705                bdbTL_ParseInCmd_NwkJoinReq( pInMsg->pData, pReq );
   \   00003D                ; Setup parameters for call to function bdbTL_ParseInCmd_NwkJoinReq
   \   00003D   AC..         MOV       R4,?V0
   \   00003F   AD..         MOV       R5,?V1
   \   000041   8E82         MOV       DPL,R6
   \   000043   8F83         MOV       DPH,R7
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   FA           MOV       R2,A
   \   00004F   A3           INC       DPTR
   \   000050   E0           MOVX      A,@DPTR
   \   000051   FB           MOV       R3,A
   \   000052   12....       LCALL     `??bdbTL_ParseInCmd_NwkJoinReq::?relay`; Banked call to: bdbTL_ParseInCmd_NwkJoinReq
   1706          
   1707                status = pInterPANCBs->pfnNwkJoinEDReq( &(pInMsg->msg->srcAddr), pReq,
   1708                                                        pInMsg->hdr.transSeqNum );
   \   000055                ; Setup parameters for indirect call
   \   000055   8E82         MOV       DPL,R6
   \   000057   8F83         MOV       DPH,R7
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F9           MOV       R1,A
   \   000061   AC..         MOV       R4,?V0
   \   000063   AD..         MOV       R5,?V1
   \   000065   8E82         MOV       DPL,R6
   \   000067   8F83         MOV       DPH,R7
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   2406         ADD       A,#0x6
   \   00006C   FA           MOV       R2,A
   \   00006D   A3           INC       DPTR
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   3400         ADDC      A,#0x0
   \   000071   FB           MOV       R3,A
   \   000072   90....       MOV       DPTR,#pInterPANCBs
   \   000075   E0           MOVX      A,@DPTR
   \   000076   F8           MOV       R0,A
   \   000077   A3           INC       DPTR
   \   000078   E0           MOVX      A,@DPTR
   \   000079   C8           XCH       A,R0
   \   00007A   240C         ADD       A,#0xc
   \   00007C   F582         MOV       DPL,A
   \   00007E   C8           XCH       A,R0
   \   00007F   3400         ADDC      A,#0x0
   \   000081   F583         MOV       DPH,A
   \   000083   E0           MOVX      A,@DPTR
   \   000084   F8           MOV       R0,A
   \   000085   A3           INC       DPTR
   \   000086   E0           MOVX      A,@DPTR
   \   000087   F583         MOV       DPH,A
   \   000089   8882         MOV       DPL,R0
   \   00008B   12....       LCALL     ?CALL_IND
   \   00008E   E9           MOV       A,R1
   \   00008F   F5..         MOV       ?V2,A
   1709                zcl_mem_free( pReq );
   \   000091                ; Setup parameters for call to function osal_mem_free
   \   000091   AA..         MOV       R2,?V0
   \   000093   AB..         MOV       R3,?V1
   \   000095   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1710              }
   1711            }
   1712          
   1713            return ( status );
   \                     ??bdbTL_ProcessInCmd_NwkJoinEDReq_0:
   \   000098   A9..         MOV       R1,?V2
   \   00009A   7F06         MOV       R7,#0x6
   \   00009C   02....       LJMP      ?BANKED_LEAVE_XDATA
   1714          }
   1715          
   1716          /*********************************************************************
   1717           * @fn      bdbTL_ProcessInCmd_NwkUpdateReq
   1718           *
   1719           * @brief   Process in the received Network Update Request command.
   1720           *
   1721           * @param   pInMsg - pointer to the incoming message
   1722           *
   1723           * @return  ZStatus_t
   1724           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1725          static ZStatus_t bdbTL_ProcessInCmd_NwkUpdateReq( zclIncoming_t *pInMsg )
   \                     bdbTL_ProcessInCmd_NwkUpdateReq:
   1726          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   1727            ZStatus_t status = ZSuccess;
   \   000009   75..00       MOV       ?V2,#0x0
   1728          
   1729            if ( pInterPANCBs->pfnNwkUpdateReq )
   \   00000C   90....       MOV       DPTR,#pInterPANCBs
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F8           MOV       R0,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   C8           XCH       A,R0
   \   000014   240E         ADD       A,#0xe
   \   000016   F582         MOV       DPL,A
   \   000018   C8           XCH       A,R0
   \   000019   3400         ADDC      A,#0x0
   \   00001B   F583         MOV       DPH,A
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F8           MOV       R0,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F9           MOV       R1,A
   \   000022   E8           MOV       A,R0
   \   000023   49           ORL       A,R1
   \   000024   7003         JNZ       $+5
   \   000026   02....       LJMP      ??bdbTL_ProcessInCmd_NwkUpdateReq_0 & 0xFFFF
   1730            {
   1731              bdbTLNwkUpdateReq_t *pReq;
   1732          
   1733              pReq = (bdbTLNwkUpdateReq_t *)zcl_mem_alloc( sizeof( bdbTLNwkUpdateReq_t ) );
   \   000029                ; Setup parameters for call to function osal_mem_alloc
   \   000029   7A12         MOV       R2,#0x12
   \   00002B   7B00         MOV       R3,#0x0
   \   00002D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000030   8A..         MOV       ?V6,R2
   \   000032   8B..         MOV       ?V7,R3
   \   000034   85....       MOV       ?V0,?V6
   \   000037   85....       MOV       ?V1,?V7
   1734              if ( pReq )
   \   00003A   E5..         MOV       A,?V0
   \   00003C   45..         ORL       A,?V1
   \   00003E   7003         JNZ       $+5
   \   000040   02....       LJMP      ??bdbTL_ProcessInCmd_NwkUpdateReq_0 & 0xFFFF
   1735              {
   1736                uint8 *pBuf = pInMsg->pData;
   \   000043   85..82       MOV       DPL,?V4
   \   000046   85..83       MOV       DPH,?V5
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   E0           MOVX      A,@DPTR
   \   000052   FE           MOV       R6,A
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   FF           MOV       R7,A
   1737          
   1738                pReq->transID = zcl_build_uint32( pBuf, 4 );
   \   000056                ; Setup parameters for call to function osal_build_uint32
   \   000056   7904         MOV       R1,#0x4
   \   000058   EE           MOV       A,R6
   \   000059   FA           MOV       R2,A
   \   00005A   EF           MOV       A,R7
   \   00005B   FB           MOV       R3,A
   \   00005C   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00005F   EA           MOV       A,R2
   \   000060   F8           MOV       R0,A
   \   000061   EB           MOV       A,R3
   \   000062   F9           MOV       R1,A
   \   000063   EC           MOV       A,R4
   \   000064   FA           MOV       R2,A
   \   000065   ED           MOV       A,R5
   \   000066   FB           MOV       R3,A
   \   000067   85..82       MOV       DPL,?V0
   \   00006A   85..83       MOV       DPH,?V1
   \   00006D   12....       LCALL     ?XSTORE_R0123
   1739                pBuf += 4;
   \   000070   EE           MOV       A,R6
   \   000071   2404         ADD       A,#0x4
   \   000073   FE           MOV       R6,A
   \   000074   5001         JNC       ??bdbTL_ProcessInCmd_NwkUpdateReq_1
   \   000076   0F           INC       R7
   1740          
   1741                zcl_cpyExtAddr( pReq->extendedPANID, pBuf );
   \                     ??bdbTL_ProcessInCmd_NwkUpdateReq_1:
   \   000077                ; Setup parameters for call to function sAddrExtCpy
   \   000077   EE           MOV       A,R6
   \   000078   FC           MOV       R4,A
   \   000079   EF           MOV       A,R7
   \   00007A   FD           MOV       R5,A
   \   00007B   E5..         MOV       A,?V0
   \   00007D   2404         ADD       A,#0x4
   \   00007F   FA           MOV       R2,A
   \   000080   E4           CLR       A
   \   000081   35..         ADDC      A,?V1
   \   000083   FB           MOV       R3,A
   \   000084   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1742                pBuf += Z_EXTADDR_LEN;
   \   000087   EE           MOV       A,R6
   \   000088   2408         ADD       A,#0x8
   \   00008A   FE           MOV       R6,A
   \   00008B   5001         JNC       ??bdbTL_ProcessInCmd_NwkUpdateReq_2
   \   00008D   0F           INC       R7
   1743          
   1744                pReq->nwkUpdateId = *pBuf++;
   \                     ??bdbTL_ProcessInCmd_NwkUpdateReq_2:
   \   00008E   8E82         MOV       DPL,R6
   \   000090   8F83         MOV       DPH,R7
   \   000092   E0           MOVX      A,@DPTR
   \   000093   C0E0         PUSH      A
   \   000095   E5..         MOV       A,?V0
   \   000097   240C         ADD       A,#0xc
   \   000099   F582         MOV       DPL,A
   \   00009B   E4           CLR       A
   \   00009C   35..         ADDC      A,?V1
   \   00009E   F583         MOV       DPH,A
   \   0000A0   D0E0         POP       A
   \   0000A2   F0           MOVX      @DPTR,A
   \   0000A3   8E82         MOV       DPL,R6
   \   0000A5   8F83         MOV       DPH,R7
   \   0000A7   A3           INC       DPTR
   \   0000A8   AE82         MOV       R6,DPL
   \   0000AA   AF83         MOV       R7,DPH
   1745                pReq->logicalChannel = *pBuf++;
   \   0000AC   8E82         MOV       DPL,R6
   \   0000AE   8F83         MOV       DPH,R7
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   C0E0         PUSH      A
   \   0000B3   E5..         MOV       A,?V0
   \   0000B5   240D         ADD       A,#0xd
   \   0000B7   F582         MOV       DPL,A
   \   0000B9   E4           CLR       A
   \   0000BA   35..         ADDC      A,?V1
   \   0000BC   F583         MOV       DPH,A
   \   0000BE   D0E0         POP       A
   \   0000C0   F0           MOVX      @DPTR,A
   \   0000C1   8E82         MOV       DPL,R6
   \   0000C3   8F83         MOV       DPH,R7
   \   0000C5   A3           INC       DPTR
   \   0000C6   AE82         MOV       R6,DPL
   \   0000C8   AF83         MOV       R7,DPH
   1746          
   1747                pReq->PANID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   0000CA   8E82         MOV       DPL,R6
   \   0000CC   8F83         MOV       DPH,R7
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   FA           MOV       R2,A
   \   0000D0   7B00         MOV       R3,#0x0
   \   0000D2   8E82         MOV       DPL,R6
   \   0000D4   8F83         MOV       DPH,R7
   \   0000D6   A3           INC       DPTR
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   F8           MOV       R0,A
   \   0000D9   7900         MOV       R1,#0x0
   \   0000DB   E4           CLR       A
   \   0000DC   C8           XCH       A,R0
   \   0000DD   F9           MOV       R1,A
   \   0000DE   EA           MOV       A,R2
   \   0000DF   28           ADD       A,R0
   \   0000E0   F8           MOV       R0,A
   \   0000E1   EB           MOV       A,R3
   \   0000E2   39           ADDC      A,R1
   \   0000E3   F9           MOV       R1,A
   \   0000E4   E5..         MOV       A,?V0
   \   0000E6   240E         ADD       A,#0xe
   \   0000E8   F582         MOV       DPL,A
   \   0000EA   E4           CLR       A
   \   0000EB   35..         ADDC      A,?V1
   \   0000ED   F583         MOV       DPH,A
   \   0000EF   E8           MOV       A,R0
   \   0000F0   F0           MOVX      @DPTR,A
   \   0000F1   A3           INC       DPTR
   \   0000F2   E9           MOV       A,R1
   \   0000F3   F0           MOVX      @DPTR,A
   1748                pBuf += 2;
   \   0000F4   EE           MOV       A,R6
   \   0000F5   2402         ADD       A,#0x2
   \   0000F7   FE           MOV       R6,A
   \   0000F8   5001         JNC       ??bdbTL_ProcessInCmd_NwkUpdateReq_3
   \   0000FA   0F           INC       R7
   1749          
   1750                pReq->nwkAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_NwkUpdateReq_3:
   \   0000FB   8E82         MOV       DPL,R6
   \   0000FD   8F83         MOV       DPH,R7
   \   0000FF   E0           MOVX      A,@DPTR
   \   000100   FA           MOV       R2,A
   \   000101   7B00         MOV       R3,#0x0
   \   000103   8E82         MOV       DPL,R6
   \   000105   8F83         MOV       DPH,R7
   \   000107   A3           INC       DPTR
   \   000108   E0           MOVX      A,@DPTR
   \   000109   F8           MOV       R0,A
   \   00010A   7900         MOV       R1,#0x0
   \   00010C   E4           CLR       A
   \   00010D   C8           XCH       A,R0
   \   00010E   F9           MOV       R1,A
   \   00010F   EA           MOV       A,R2
   \   000110   28           ADD       A,R0
   \   000111   F8           MOV       R0,A
   \   000112   EB           MOV       A,R3
   \   000113   39           ADDC      A,R1
   \   000114   F9           MOV       R1,A
   \   000115   E5..         MOV       A,?V0
   \   000117   2410         ADD       A,#0x10
   \   000119   F582         MOV       DPL,A
   \   00011B   E4           CLR       A
   \   00011C   35..         ADDC      A,?V1
   \   00011E   F583         MOV       DPH,A
   \   000120   E8           MOV       A,R0
   \   000121   F0           MOVX      @DPTR,A
   \   000122   A3           INC       DPTR
   \   000123   E9           MOV       A,R1
   \   000124   F0           MOVX      @DPTR,A
   1751                pBuf += 2;
   \   000125   EE           MOV       A,R6
   \   000126   2402         ADD       A,#0x2
   \   000128   FE           MOV       R6,A
   \   000129   5001         JNC       ??bdbTL_ProcessInCmd_NwkUpdateReq_4
   \   00012B   0F           INC       R7
   1752          
   1753                status = pInterPANCBs->pfnNwkUpdateReq( &(pInMsg->msg->srcAddr), pReq );
   \                     ??bdbTL_ProcessInCmd_NwkUpdateReq_4:
   \   00012C                ; Setup parameters for indirect call
   \   00012C   AC..         MOV       R4,?V0
   \   00012E   AD..         MOV       R5,?V1
   \   000130   85..82       MOV       DPL,?V4
   \   000133   85..83       MOV       DPH,?V5
   \   000136   E0           MOVX      A,@DPTR
   \   000137   2406         ADD       A,#0x6
   \   000139   FA           MOV       R2,A
   \   00013A   A3           INC       DPTR
   \   00013B   E0           MOVX      A,@DPTR
   \   00013C   3400         ADDC      A,#0x0
   \   00013E   FB           MOV       R3,A
   \   00013F   90....       MOV       DPTR,#pInterPANCBs
   \   000142   E0           MOVX      A,@DPTR
   \   000143   F8           MOV       R0,A
   \   000144   A3           INC       DPTR
   \   000145   E0           MOVX      A,@DPTR
   \   000146   C8           XCH       A,R0
   \   000147   240E         ADD       A,#0xe
   \   000149   F582         MOV       DPL,A
   \   00014B   C8           XCH       A,R0
   \   00014C   3400         ADDC      A,#0x0
   \   00014E   F583         MOV       DPH,A
   \   000150   E0           MOVX      A,@DPTR
   \   000151   F8           MOV       R0,A
   \   000152   A3           INC       DPTR
   \   000153   E0           MOVX      A,@DPTR
   \   000154   F583         MOV       DPH,A
   \   000156   8882         MOV       DPL,R0
   \   000158   12....       LCALL     ?CALL_IND
   \   00015B   E9           MOV       A,R1
   \   00015C   F5..         MOV       ?V2,A
   1754          
   1755                zcl_mem_free( pReq );
   \   00015E                ; Setup parameters for call to function osal_mem_free
   \   00015E   AA..         MOV       R2,?V0
   \   000160   AB..         MOV       R3,?V1
   \   000162   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1756              }
   1757            }
   1758          
   1759            return ( status );
   \                     ??bdbTL_ProcessInCmd_NwkUpdateReq_0:
   \   000165   A9..         MOV       R1,?V2
   \   000167   7F08         MOV       R7,#0x8
   \   000169   02....       LJMP      ?BANKED_LEAVE_XDATA
   1760          }
   1761          
   1762          /*********************************************************************
   1763           * @fn      bdbTL_ProcessInCmd_ScanRsp
   1764           *
   1765           * @brief   Process in the received Scan Response command.
   1766           *
   1767           * @param   pInMsg - pointer to the incoming message
   1768           *
   1769           * @return  ZStatus_t
   1770           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1771          static ZStatus_t bdbTL_ProcessInCmd_ScanRsp( zclIncoming_t *pInMsg )
   \                     bdbTL_ProcessInCmd_ScanRsp:
   1772          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   1773            ZStatus_t status = ZSuccess;
   \   000009   75..00       MOV       ?V2,#0x0
   1774          
   1775            if ( pInterPANCBs->pfnScanRsp )
   \   00000C   90....       MOV       DPTR,#pInterPANCBs
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F8           MOV       R0,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   C8           XCH       A,R0
   \   000014   2410         ADD       A,#0x10
   \   000016   F582         MOV       DPL,A
   \   000018   C8           XCH       A,R0
   \   000019   3400         ADDC      A,#0x0
   \   00001B   F583         MOV       DPH,A
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F8           MOV       R0,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F9           MOV       R1,A
   \   000022   E8           MOV       A,R0
   \   000023   49           ORL       A,R1
   \   000024   7003         JNZ       $+5
   \   000026   02....       LJMP      ??bdbTL_ProcessInCmd_ScanRsp_0 & 0xFFFF
   1776            {
   1777              bdbTLScanRsp_t *pRsp;
   1778          
   1779              pRsp = (bdbTLScanRsp_t *)zcl_mem_alloc( sizeof( bdbTLScanRsp_t ) );
   \   000029                ; Setup parameters for call to function osal_mem_alloc
   \   000029   7A26         MOV       R2,#0x26
   \   00002B   7B00         MOV       R3,#0x0
   \   00002D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000030   8A..         MOV       ?V6,R2
   \   000032   8B..         MOV       ?V7,R3
   \   000034   85....       MOV       ?V0,?V6
   \   000037   85....       MOV       ?V1,?V7
   1780              if ( pRsp )
   \   00003A   E5..         MOV       A,?V0
   \   00003C   45..         ORL       A,?V1
   \   00003E   7003         JNZ       $+5
   \   000040   02....       LJMP      ??bdbTL_ProcessInCmd_ScanRsp_0 & 0xFFFF
   1781              {
   1782                uint8 *pBuf = pInMsg->pData;
   \   000043   85..82       MOV       DPL,?V4
   \   000046   85..83       MOV       DPH,?V5
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   E0           MOVX      A,@DPTR
   \   000052   FE           MOV       R6,A
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   FF           MOV       R7,A
   1783          
   1784                zcl_memset( pRsp, 0, sizeof( bdbTLScanRsp_t ) );
   \   000056                ; Setup parameters for call to function osal_memset
   \   000056   7C26         MOV       R4,#0x26
   \   000058   7D00         MOV       R5,#0x0
   \   00005A   7900         MOV       R1,#0x0
   \   00005C   AA..         MOV       R2,?V0
   \   00005E   AB..         MOV       R3,?V1
   \   000060   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1785          
   1786                pRsp->transID = zcl_build_uint32( pBuf, 4 );
   \   000063                ; Setup parameters for call to function osal_build_uint32
   \   000063   7904         MOV       R1,#0x4
   \   000065   EE           MOV       A,R6
   \   000066   FA           MOV       R2,A
   \   000067   EF           MOV       A,R7
   \   000068   FB           MOV       R3,A
   \   000069   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00006C   EA           MOV       A,R2
   \   00006D   F8           MOV       R0,A
   \   00006E   EB           MOV       A,R3
   \   00006F   F9           MOV       R1,A
   \   000070   EC           MOV       A,R4
   \   000071   FA           MOV       R2,A
   \   000072   ED           MOV       A,R5
   \   000073   FB           MOV       R3,A
   \   000074   85..82       MOV       DPL,?V0
   \   000077   85..83       MOV       DPH,?V1
   \   00007A   12....       LCALL     ?XSTORE_R0123
   1787                pBuf += 4;
   \   00007D   EE           MOV       A,R6
   \   00007E   2404         ADD       A,#0x4
   \   000080   FE           MOV       R6,A
   \   000081   5001         JNC       ??bdbTL_ProcessInCmd_ScanRsp_1
   \   000083   0F           INC       R7
   1788          
   1789                pRsp->rssiCorrection = *pBuf++;
   \                     ??bdbTL_ProcessInCmd_ScanRsp_1:
   \   000084   8E82         MOV       DPL,R6
   \   000086   8F83         MOV       DPH,R7
   \   000088   E0           MOVX      A,@DPTR
   \   000089   C0E0         PUSH      A
   \   00008B   85..82       MOV       DPL,?V0
   \   00008E   85..83       MOV       DPH,?V1
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   D0E0         POP       A
   \   000097   F0           MOVX      @DPTR,A
   \   000098   8E82         MOV       DPL,R6
   \   00009A   8F83         MOV       DPH,R7
   \   00009C   A3           INC       DPTR
   \   00009D   AE82         MOV       R6,DPL
   \   00009F   AF83         MOV       R7,DPH
   1790                pRsp->zInfo.zInfoByte = *pBuf++;
   \   0000A1   8E82         MOV       DPL,R6
   \   0000A3   8F83         MOV       DPH,R7
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   C0E0         PUSH      A
   \   0000A8   85..82       MOV       DPL,?V0
   \   0000AB   85..83       MOV       DPH,?V1
   \   0000AE   A3           INC       DPTR
   \   0000AF   A3           INC       DPTR
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   A3           INC       DPTR
   \   0000B3   D0E0         POP       A
   \   0000B5   F0           MOVX      @DPTR,A
   \   0000B6   8E82         MOV       DPL,R6
   \   0000B8   8F83         MOV       DPH,R7
   \   0000BA   A3           INC       DPTR
   \   0000BB   AE82         MOV       R6,DPL
   \   0000BD   AF83         MOV       R7,DPH
   1791                pRsp->touchLinkInfo.touchLinkInfoByte = *pBuf++;
   \   0000BF   8E82         MOV       DPL,R6
   \   0000C1   8F83         MOV       DPH,R7
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   C0E0         PUSH      A
   \   0000C6   85..82       MOV       DPL,?V0
   \   0000C9   85..83       MOV       DPH,?V1
   \   0000CC   A3           INC       DPTR
   \   0000CD   A3           INC       DPTR
   \   0000CE   A3           INC       DPTR
   \   0000CF   A3           INC       DPTR
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   A3           INC       DPTR
   \   0000D3   D0E0         POP       A
   \   0000D5   F0           MOVX      @DPTR,A
   \   0000D6   8E82         MOV       DPL,R6
   \   0000D8   8F83         MOV       DPH,R7
   \   0000DA   A3           INC       DPTR
   \   0000DB   AE82         MOV       R6,DPL
   \   0000DD   AF83         MOV       R7,DPH
   1792          
   1793                pRsp->keyBitmask = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   0000DF   8E82         MOV       DPL,R6
   \   0000E1   8F83         MOV       DPH,R7
   \   0000E3   E0           MOVX      A,@DPTR
   \   0000E4   FA           MOV       R2,A
   \   0000E5   7B00         MOV       R3,#0x0
   \   0000E7   8E82         MOV       DPL,R6
   \   0000E9   8F83         MOV       DPH,R7
   \   0000EB   A3           INC       DPTR
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   F8           MOV       R0,A
   \   0000EE   7900         MOV       R1,#0x0
   \   0000F0   E4           CLR       A
   \   0000F1   C8           XCH       A,R0
   \   0000F2   F9           MOV       R1,A
   \   0000F3   EA           MOV       A,R2
   \   0000F4   28           ADD       A,R0
   \   0000F5   F8           MOV       R0,A
   \   0000F6   EB           MOV       A,R3
   \   0000F7   39           ADDC      A,R1
   \   0000F8   F9           MOV       R1,A
   \   0000F9   85..82       MOV       DPL,?V0
   \   0000FC   85..83       MOV       DPH,?V1
   \   0000FF   A3           INC       DPTR
   \   000100   A3           INC       DPTR
   \   000101   A3           INC       DPTR
   \   000102   A3           INC       DPTR
   \   000103   A3           INC       DPTR
   \   000104   A3           INC       DPTR
   \   000105   A3           INC       DPTR
   \   000106   A3           INC       DPTR
   \   000107   A3           INC       DPTR
   \   000108   E8           MOV       A,R0
   \   000109   F0           MOVX      @DPTR,A
   \   00010A   A3           INC       DPTR
   \   00010B   E9           MOV       A,R1
   \   00010C   F0           MOVX      @DPTR,A
   1794                pBuf += 2;
   \   00010D   EE           MOV       A,R6
   \   00010E   2402         ADD       A,#0x2
   \   000110   FE           MOV       R6,A
   \   000111   5001         JNC       ??bdbTL_ProcessInCmd_ScanRsp_2
   \   000113   0F           INC       R7
   1795          
   1796                pRsp->responseID = zcl_build_uint32( pBuf, 4 );
   \                     ??bdbTL_ProcessInCmd_ScanRsp_2:
   \   000114                ; Setup parameters for call to function osal_build_uint32
   \   000114   7904         MOV       R1,#0x4
   \   000116   EE           MOV       A,R6
   \   000117   FA           MOV       R2,A
   \   000118   EF           MOV       A,R7
   \   000119   FB           MOV       R3,A
   \   00011A   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00011D   E5..         MOV       A,?V0
   \   00011F   240B         ADD       A,#0xb
   \   000121   F582         MOV       DPL,A
   \   000123   E4           CLR       A
   \   000124   35..         ADDC      A,?V1
   \   000126   F583         MOV       DPH,A
   \   000128   12....       LCALL     ?XSTORE_R2345
   1797                pBuf += 4;
   \   00012B   EE           MOV       A,R6
   \   00012C   2404         ADD       A,#0x4
   \   00012E   FE           MOV       R6,A
   \   00012F   5001         JNC       ??bdbTL_ProcessInCmd_ScanRsp_3
   \   000131   0F           INC       R7
   1798          
   1799                zcl_cpyExtAddr( pRsp->extendedPANID, pBuf );
   \                     ??bdbTL_ProcessInCmd_ScanRsp_3:
   \   000132                ; Setup parameters for call to function sAddrExtCpy
   \   000132   EE           MOV       A,R6
   \   000133   FC           MOV       R4,A
   \   000134   EF           MOV       A,R7
   \   000135   FD           MOV       R5,A
   \   000136   E5..         MOV       A,?V0
   \   000138   240F         ADD       A,#0xf
   \   00013A   FA           MOV       R2,A
   \   00013B   E4           CLR       A
   \   00013C   35..         ADDC      A,?V1
   \   00013E   FB           MOV       R3,A
   \   00013F   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1800                pBuf += Z_EXTADDR_LEN;
   \   000142   EE           MOV       A,R6
   \   000143   2408         ADD       A,#0x8
   \   000145   FE           MOV       R6,A
   \   000146   5001         JNC       ??bdbTL_ProcessInCmd_ScanRsp_4
   \   000148   0F           INC       R7
   1801          
   1802                pRsp->nwkUpdateId = *pBuf++;
   \                     ??bdbTL_ProcessInCmd_ScanRsp_4:
   \   000149   8E82         MOV       DPL,R6
   \   00014B   8F83         MOV       DPH,R7
   \   00014D   E0           MOVX      A,@DPTR
   \   00014E   C0E0         PUSH      A
   \   000150   E5..         MOV       A,?V0
   \   000152   2417         ADD       A,#0x17
   \   000154   F582         MOV       DPL,A
   \   000156   E4           CLR       A
   \   000157   35..         ADDC      A,?V1
   \   000159   F583         MOV       DPH,A
   \   00015B   D0E0         POP       A
   \   00015D   F0           MOVX      @DPTR,A
   \   00015E   8E82         MOV       DPL,R6
   \   000160   8F83         MOV       DPH,R7
   \   000162   A3           INC       DPTR
   \   000163   AE82         MOV       R6,DPL
   \   000165   AF83         MOV       R7,DPH
   1803                pRsp->logicalChannel = *pBuf++;
   \   000167   8E82         MOV       DPL,R6
   \   000169   8F83         MOV       DPH,R7
   \   00016B   E0           MOVX      A,@DPTR
   \   00016C   C0E0         PUSH      A
   \   00016E   E5..         MOV       A,?V0
   \   000170   2418         ADD       A,#0x18
   \   000172   F582         MOV       DPL,A
   \   000174   E4           CLR       A
   \   000175   35..         ADDC      A,?V1
   \   000177   F583         MOV       DPH,A
   \   000179   D0E0         POP       A
   \   00017B   F0           MOVX      @DPTR,A
   \   00017C   8E82         MOV       DPL,R6
   \   00017E   8F83         MOV       DPH,R7
   \   000180   A3           INC       DPTR
   \   000181   AE82         MOV       R6,DPL
   \   000183   AF83         MOV       R7,DPH
   1804          
   1805                pRsp->PANID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000185   8E82         MOV       DPL,R6
   \   000187   8F83         MOV       DPH,R7
   \   000189   E0           MOVX      A,@DPTR
   \   00018A   FA           MOV       R2,A
   \   00018B   7B00         MOV       R3,#0x0
   \   00018D   8E82         MOV       DPL,R6
   \   00018F   8F83         MOV       DPH,R7
   \   000191   A3           INC       DPTR
   \   000192   E0           MOVX      A,@DPTR
   \   000193   F8           MOV       R0,A
   \   000194   7900         MOV       R1,#0x0
   \   000196   E4           CLR       A
   \   000197   C8           XCH       A,R0
   \   000198   F9           MOV       R1,A
   \   000199   EA           MOV       A,R2
   \   00019A   28           ADD       A,R0
   \   00019B   F8           MOV       R0,A
   \   00019C   EB           MOV       A,R3
   \   00019D   39           ADDC      A,R1
   \   00019E   F9           MOV       R1,A
   \   00019F   E5..         MOV       A,?V0
   \   0001A1   2419         ADD       A,#0x19
   \   0001A3   F582         MOV       DPL,A
   \   0001A5   E4           CLR       A
   \   0001A6   35..         ADDC      A,?V1
   \   0001A8   F583         MOV       DPH,A
   \   0001AA   E8           MOV       A,R0
   \   0001AB   F0           MOVX      @DPTR,A
   \   0001AC   A3           INC       DPTR
   \   0001AD   E9           MOV       A,R1
   \   0001AE   F0           MOVX      @DPTR,A
   1806                pBuf += 2;
   \   0001AF   EE           MOV       A,R6
   \   0001B0   2402         ADD       A,#0x2
   \   0001B2   FE           MOV       R6,A
   \   0001B3   5001         JNC       ??bdbTL_ProcessInCmd_ScanRsp_5
   \   0001B5   0F           INC       R7
   1807          
   1808                pRsp->nwkAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_ScanRsp_5:
   \   0001B6   8E82         MOV       DPL,R6
   \   0001B8   8F83         MOV       DPH,R7
   \   0001BA   E0           MOVX      A,@DPTR
   \   0001BB   FA           MOV       R2,A
   \   0001BC   7B00         MOV       R3,#0x0
   \   0001BE   8E82         MOV       DPL,R6
   \   0001C0   8F83         MOV       DPH,R7
   \   0001C2   A3           INC       DPTR
   \   0001C3   E0           MOVX      A,@DPTR
   \   0001C4   F8           MOV       R0,A
   \   0001C5   7900         MOV       R1,#0x0
   \   0001C7   E4           CLR       A
   \   0001C8   C8           XCH       A,R0
   \   0001C9   F9           MOV       R1,A
   \   0001CA   EA           MOV       A,R2
   \   0001CB   28           ADD       A,R0
   \   0001CC   F8           MOV       R0,A
   \   0001CD   EB           MOV       A,R3
   \   0001CE   39           ADDC      A,R1
   \   0001CF   F9           MOV       R1,A
   \   0001D0   E5..         MOV       A,?V0
   \   0001D2   241B         ADD       A,#0x1b
   \   0001D4   F582         MOV       DPL,A
   \   0001D6   E4           CLR       A
   \   0001D7   35..         ADDC      A,?V1
   \   0001D9   F583         MOV       DPH,A
   \   0001DB   E8           MOV       A,R0
   \   0001DC   F0           MOVX      @DPTR,A
   \   0001DD   A3           INC       DPTR
   \   0001DE   E9           MOV       A,R1
   \   0001DF   F0           MOVX      @DPTR,A
   1809                pBuf += 2;
   \   0001E0   EE           MOV       A,R6
   \   0001E1   2402         ADD       A,#0x2
   \   0001E3   FE           MOV       R6,A
   \   0001E4   5001         JNC       ??bdbTL_ProcessInCmd_ScanRsp_6
   \   0001E6   0F           INC       R7
   1810          
   1811                pRsp->numSubDevices = *pBuf++;
   \                     ??bdbTL_ProcessInCmd_ScanRsp_6:
   \   0001E7   8E82         MOV       DPL,R6
   \   0001E9   8F83         MOV       DPH,R7
   \   0001EB   E0           MOVX      A,@DPTR
   \   0001EC   C0E0         PUSH      A
   \   0001EE   E5..         MOV       A,?V0
   \   0001F0   241D         ADD       A,#0x1d
   \   0001F2   F582         MOV       DPL,A
   \   0001F4   E4           CLR       A
   \   0001F5   35..         ADDC      A,?V1
   \   0001F7   F583         MOV       DPH,A
   \   0001F9   D0E0         POP       A
   \   0001FB   F0           MOVX      @DPTR,A
   \   0001FC   8E82         MOV       DPL,R6
   \   0001FE   8F83         MOV       DPH,R7
   \   000200   A3           INC       DPTR
   \   000201   AE82         MOV       R6,DPL
   \   000203   AF83         MOV       R7,DPH
   1812                pRsp->totalGrpIDs = *pBuf++;
   \   000205   8E82         MOV       DPL,R6
   \   000207   8F83         MOV       DPH,R7
   \   000209   E0           MOVX      A,@DPTR
   \   00020A   C0E0         PUSH      A
   \   00020C   E5..         MOV       A,?V0
   \   00020E   241E         ADD       A,#0x1e
   \   000210   F582         MOV       DPL,A
   \   000212   E4           CLR       A
   \   000213   35..         ADDC      A,?V1
   \   000215   F583         MOV       DPH,A
   \   000217   D0E0         POP       A
   \   000219   F0           MOVX      @DPTR,A
   \   00021A   8E82         MOV       DPL,R6
   \   00021C   8F83         MOV       DPH,R7
   \   00021E   A3           INC       DPTR
   \   00021F   AE82         MOV       R6,DPL
   \   000221   AF83         MOV       R7,DPH
   1813          
   1814                if ( pRsp->numSubDevices == 1 )
   \   000223   E5..         MOV       A,?V0
   \   000225   241D         ADD       A,#0x1d
   \   000227   F582         MOV       DPL,A
   \   000229   E4           CLR       A
   \   00022A   35..         ADDC      A,?V1
   \   00022C   F583         MOV       DPH,A
   \   00022E   E0           MOVX      A,@DPTR
   \   00022F   6401         XRL       A,#0x1
   \   000231   6003         JZ        $+5
   \   000233   02....       LJMP      ??bdbTL_ProcessInCmd_ScanRsp_7 & 0xFFFF
   1815                {
   1816                  pRsp->deviceInfo.endpoint = *pBuf++;
   \   000236   8E82         MOV       DPL,R6
   \   000238   8F83         MOV       DPH,R7
   \   00023A   E0           MOVX      A,@DPTR
   \   00023B   C0E0         PUSH      A
   \   00023D   E5..         MOV       A,?V0
   \   00023F   241F         ADD       A,#0x1f
   \   000241   F582         MOV       DPL,A
   \   000243   E4           CLR       A
   \   000244   35..         ADDC      A,?V1
   \   000246   F583         MOV       DPH,A
   \   000248   D0E0         POP       A
   \   00024A   F0           MOVX      @DPTR,A
   \   00024B   8E82         MOV       DPL,R6
   \   00024D   8F83         MOV       DPH,R7
   \   00024F   A3           INC       DPTR
   \   000250   AE82         MOV       R6,DPL
   \   000252   AF83         MOV       R7,DPH
   1817          
   1818                  pRsp->deviceInfo.profileID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000254   8E82         MOV       DPL,R6
   \   000256   8F83         MOV       DPH,R7
   \   000258   E0           MOVX      A,@DPTR
   \   000259   FA           MOV       R2,A
   \   00025A   7B00         MOV       R3,#0x0
   \   00025C   8E82         MOV       DPL,R6
   \   00025E   8F83         MOV       DPH,R7
   \   000260   A3           INC       DPTR
   \   000261   E0           MOVX      A,@DPTR
   \   000262   F8           MOV       R0,A
   \   000263   7900         MOV       R1,#0x0
   \   000265   E4           CLR       A
   \   000266   C8           XCH       A,R0
   \   000267   F9           MOV       R1,A
   \   000268   EA           MOV       A,R2
   \   000269   28           ADD       A,R0
   \   00026A   F8           MOV       R0,A
   \   00026B   EB           MOV       A,R3
   \   00026C   39           ADDC      A,R1
   \   00026D   F9           MOV       R1,A
   \   00026E   E5..         MOV       A,?V0
   \   000270   2420         ADD       A,#0x20
   \   000272   F582         MOV       DPL,A
   \   000274   E4           CLR       A
   \   000275   35..         ADDC      A,?V1
   \   000277   F583         MOV       DPH,A
   \   000279   E8           MOV       A,R0
   \   00027A   F0           MOVX      @DPTR,A
   \   00027B   A3           INC       DPTR
   \   00027C   E9           MOV       A,R1
   \   00027D   F0           MOVX      @DPTR,A
   1819                  pBuf += 2;
   \   00027E   EE           MOV       A,R6
   \   00027F   2402         ADD       A,#0x2
   \   000281   FE           MOV       R6,A
   \   000282   5001         JNC       ??bdbTL_ProcessInCmd_ScanRsp_8
   \   000284   0F           INC       R7
   1820          
   1821                  pRsp->deviceInfo.deviceID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_ScanRsp_8:
   \   000285   8E82         MOV       DPL,R6
   \   000287   8F83         MOV       DPH,R7
   \   000289   E0           MOVX      A,@DPTR
   \   00028A   FA           MOV       R2,A
   \   00028B   7B00         MOV       R3,#0x0
   \   00028D   8E82         MOV       DPL,R6
   \   00028F   8F83         MOV       DPH,R7
   \   000291   A3           INC       DPTR
   \   000292   E0           MOVX      A,@DPTR
   \   000293   F8           MOV       R0,A
   \   000294   7900         MOV       R1,#0x0
   \   000296   E4           CLR       A
   \   000297   C8           XCH       A,R0
   \   000298   F9           MOV       R1,A
   \   000299   EA           MOV       A,R2
   \   00029A   28           ADD       A,R0
   \   00029B   F8           MOV       R0,A
   \   00029C   EB           MOV       A,R3
   \   00029D   39           ADDC      A,R1
   \   00029E   F9           MOV       R1,A
   \   00029F   E5..         MOV       A,?V0
   \   0002A1   2422         ADD       A,#0x22
   \   0002A3   F582         MOV       DPL,A
   \   0002A5   E4           CLR       A
   \   0002A6   35..         ADDC      A,?V1
   \   0002A8   F583         MOV       DPH,A
   \   0002AA   E8           MOV       A,R0
   \   0002AB   F0           MOVX      @DPTR,A
   \   0002AC   A3           INC       DPTR
   \   0002AD   E9           MOV       A,R1
   \   0002AE   F0           MOVX      @DPTR,A
   1822                  pBuf += 2;
   \   0002AF   EE           MOV       A,R6
   \   0002B0   2402         ADD       A,#0x2
   \   0002B2   FE           MOV       R6,A
   \   0002B3   5001         JNC       ??bdbTL_ProcessInCmd_ScanRsp_9
   \   0002B5   0F           INC       R7
   1823          
   1824                  pRsp->deviceInfo.version = *pBuf++;
   \                     ??bdbTL_ProcessInCmd_ScanRsp_9:
   \   0002B6   8E82         MOV       DPL,R6
   \   0002B8   8F83         MOV       DPH,R7
   \   0002BA   E0           MOVX      A,@DPTR
   \   0002BB   C0E0         PUSH      A
   \   0002BD   E5..         MOV       A,?V0
   \   0002BF   2424         ADD       A,#0x24
   \   0002C1   F582         MOV       DPL,A
   \   0002C3   E4           CLR       A
   \   0002C4   35..         ADDC      A,?V1
   \   0002C6   F583         MOV       DPH,A
   \   0002C8   D0E0         POP       A
   \   0002CA   F0           MOVX      @DPTR,A
   \   0002CB   8E82         MOV       DPL,R6
   \   0002CD   8F83         MOV       DPH,R7
   \   0002CF   A3           INC       DPTR
   \   0002D0   AE82         MOV       R6,DPL
   \   0002D2   AF83         MOV       R7,DPH
   1825                  pRsp->deviceInfo.grpIdCnt = *pBuf;
   \   0002D4   8E82         MOV       DPL,R6
   \   0002D6   8F83         MOV       DPH,R7
   \   0002D8   E0           MOVX      A,@DPTR
   \   0002D9   C0E0         PUSH      A
   \   0002DB   E5..         MOV       A,?V0
   \   0002DD   2425         ADD       A,#0x25
   \   0002DF   F582         MOV       DPL,A
   \   0002E1   E4           CLR       A
   \   0002E2   35..         ADDC      A,?V1
   \   0002E4   F583         MOV       DPH,A
   \   0002E6   D0E0         POP       A
   \   0002E8   F0           MOVX      @DPTR,A
   1826                }
   1827          
   1828                status = pInterPANCBs->pfnScanRsp( &(pInMsg->msg->srcAddr), pRsp );
   \                     ??bdbTL_ProcessInCmd_ScanRsp_7:
   \   0002E9                ; Setup parameters for indirect call
   \   0002E9   AC..         MOV       R4,?V0
   \   0002EB   AD..         MOV       R5,?V1
   \   0002ED   85..82       MOV       DPL,?V4
   \   0002F0   85..83       MOV       DPH,?V5
   \   0002F3   E0           MOVX      A,@DPTR
   \   0002F4   2406         ADD       A,#0x6
   \   0002F6   FA           MOV       R2,A
   \   0002F7   A3           INC       DPTR
   \   0002F8   E0           MOVX      A,@DPTR
   \   0002F9   3400         ADDC      A,#0x0
   \   0002FB   FB           MOV       R3,A
   \   0002FC   90....       MOV       DPTR,#pInterPANCBs
   \   0002FF   E0           MOVX      A,@DPTR
   \   000300   F8           MOV       R0,A
   \   000301   A3           INC       DPTR
   \   000302   E0           MOVX      A,@DPTR
   \   000303   C8           XCH       A,R0
   \   000304   2410         ADD       A,#0x10
   \   000306   F582         MOV       DPL,A
   \   000308   C8           XCH       A,R0
   \   000309   3400         ADDC      A,#0x0
   \   00030B   F583         MOV       DPH,A
   \   00030D   E0           MOVX      A,@DPTR
   \   00030E   F8           MOV       R0,A
   \   00030F   A3           INC       DPTR
   \   000310   E0           MOVX      A,@DPTR
   \   000311   F583         MOV       DPH,A
   \   000313   8882         MOV       DPL,R0
   \   000315   12....       LCALL     ?CALL_IND
   \   000318   E9           MOV       A,R1
   \   000319   F5..         MOV       ?V2,A
   1829                zcl_mem_free( pRsp );
   \   00031B                ; Setup parameters for call to function osal_mem_free
   \   00031B   AA..         MOV       R2,?V0
   \   00031D   AB..         MOV       R3,?V1
   \   00031F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1830              }
   1831            }
   1832          
   1833            return ( status );
   \                     ??bdbTL_ProcessInCmd_ScanRsp_0:
   \   000322   A9..         MOV       R1,?V2
   \   000324   7F08         MOV       R7,#0x8
   \   000326   02....       LJMP      ?BANKED_LEAVE_XDATA
   1834          }
   1835          
   1836          /*********************************************************************
   1837           * @fn      bdbTL_ProcessInCmd_DeviceInfoRsp
   1838           *
   1839           * @brief   Process in the received Device Information Response command.
   1840           *
   1841           * @param   pInMsg - pointer to the incoming message
   1842           *
   1843           * @return  ZStatus_t
   1844           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1845          static ZStatus_t bdbTL_ProcessInCmd_DeviceInfoRsp( zclIncoming_t *pInMsg )
   \                     bdbTL_ProcessInCmd_DeviceInfoRsp:
   1846          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   1847            ZStatus_t status = ZSuccess;
   \   000009   75..00       MOV       ?V3,#0x0
   1848          
   1849            if ( pInterPANCBs->pfnDeviceInfoRsp )
   \   00000C   90....       MOV       DPTR,#pInterPANCBs
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F8           MOV       R0,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   C8           XCH       A,R0
   \   000014   2412         ADD       A,#0x12
   \   000016   F582         MOV       DPL,A
   \   000018   C8           XCH       A,R0
   \   000019   3400         ADDC      A,#0x0
   \   00001B   F583         MOV       DPH,A
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F8           MOV       R0,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F9           MOV       R1,A
   \   000022   E8           MOV       A,R0
   \   000023   49           ORL       A,R1
   \   000024   7003         JNZ       $+5
   \   000026   02....       LJMP      ??bdbTL_ProcessInCmd_DeviceInfoRsp_0 & 0xFFFF
   1850            {
   1851              bdbTLDeviceInfoRsp_t *pRsp;
   1852              uint8 cnt = pInMsg->pData[TOUCHLINK_CMDLEN_DEVICE_INFO_RSP-1];
   \   000029   85..82       MOV       DPL,?V6
   \   00002C   85..83       MOV       DPH,?V7
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F8           MOV       R0,A
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   C8           XCH       A,R0
   \   00003C   2406         ADD       A,#0x6
   \   00003E   F582         MOV       DPL,A
   \   000040   C8           XCH       A,R0
   \   000041   3400         ADDC      A,#0x0
   \   000043   F583         MOV       DPH,A
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F5..         MOV       ?V8,A
   1853              uint8 rspLen = sizeof( bdbTLDeviceInfoRsp_t ) + ( cnt * sizeof( devInfoRec_t ) );
   \   000048   75F010       MOV       B,#0x10
   \   00004B   E5..         MOV       A,?V8
   \   00004D   A4           MUL       AB
   \   00004E   2417         ADD       A,#0x17
   \   000050   F5..         MOV       ?V9,A
   1854          
   1855              pRsp = (bdbTLDeviceInfoRsp_t *)zcl_mem_alloc( rspLen );
   \   000052                ; Setup parameters for call to function osal_mem_alloc
   \   000052   E5..         MOV       A,?V9
   \   000054   FA           MOV       R2,A
   \   000055   7B00         MOV       R3,#0x0
   \   000057   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00005A   8A..         MOV       ?V4,R2
   \   00005C   8B..         MOV       ?V5,R3
   \   00005E   85....       MOV       ?V0,?V4
   \   000061   85....       MOV       ?V1,?V5
   1856              if ( pRsp )
   \   000064   E5..         MOV       A,?V0
   \   000066   45..         ORL       A,?V1
   \   000068   7003         JNZ       $+5
   \   00006A   02....       LJMP      ??bdbTL_ProcessInCmd_DeviceInfoRsp_0 & 0xFFFF
   1857              {
   1858                uint8 *pBuf = pInMsg->pData;
   \   00006D   85..82       MOV       DPL,?V6
   \   000070   85..83       MOV       DPH,?V7
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   FE           MOV       R6,A
   \   00007D   A3           INC       DPTR
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   FF           MOV       R7,A
   1859                uint8 i;
   1860          
   1861                pRsp->transID = zcl_build_uint32( pBuf, 4 );
   \   000080                ; Setup parameters for call to function osal_build_uint32
   \   000080   7904         MOV       R1,#0x4
   \   000082   EE           MOV       A,R6
   \   000083   FA           MOV       R2,A
   \   000084   EF           MOV       A,R7
   \   000085   FB           MOV       R3,A
   \   000086   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000089   EA           MOV       A,R2
   \   00008A   F8           MOV       R0,A
   \   00008B   EB           MOV       A,R3
   \   00008C   F9           MOV       R1,A
   \   00008D   EC           MOV       A,R4
   \   00008E   FA           MOV       R2,A
   \   00008F   ED           MOV       A,R5
   \   000090   FB           MOV       R3,A
   \   000091   85..82       MOV       DPL,?V0
   \   000094   85..83       MOV       DPH,?V1
   \   000097   12....       LCALL     ?XSTORE_R0123
   1862                pBuf += 4;
   \   00009A   EE           MOV       A,R6
   \   00009B   2404         ADD       A,#0x4
   \   00009D   FE           MOV       R6,A
   \   00009E   5001         JNC       ??bdbTL_ProcessInCmd_DeviceInfoRsp_1
   \   0000A0   0F           INC       R7
   1863          
   1864                pRsp->numSubDevices = *pBuf++;
   \                     ??bdbTL_ProcessInCmd_DeviceInfoRsp_1:
   \   0000A1   8E82         MOV       DPL,R6
   \   0000A3   8F83         MOV       DPH,R7
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   C0E0         PUSH      A
   \   0000A8   85..82       MOV       DPL,?V0
   \   0000AB   85..83       MOV       DPH,?V1
   \   0000AE   A3           INC       DPTR
   \   0000AF   A3           INC       DPTR
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   D0E0         POP       A
   \   0000B4   F0           MOVX      @DPTR,A
   \   0000B5   8E82         MOV       DPL,R6
   \   0000B7   8F83         MOV       DPH,R7
   \   0000B9   A3           INC       DPTR
   \   0000BA   AE82         MOV       R6,DPL
   \   0000BC   AF83         MOV       R7,DPH
   1865                pRsp->startIndex = *pBuf++;
   \   0000BE   8E82         MOV       DPL,R6
   \   0000C0   8F83         MOV       DPH,R7
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   C0E0         PUSH      A
   \   0000C5   85..82       MOV       DPL,?V0
   \   0000C8   85..83       MOV       DPH,?V1
   \   0000CB   A3           INC       DPTR
   \   0000CC   A3           INC       DPTR
   \   0000CD   A3           INC       DPTR
   \   0000CE   A3           INC       DPTR
   \   0000CF   A3           INC       DPTR
   \   0000D0   D0E0         POP       A
   \   0000D2   F0           MOVX      @DPTR,A
   \   0000D3   8E82         MOV       DPL,R6
   \   0000D5   8F83         MOV       DPH,R7
   \   0000D7   A3           INC       DPTR
   \   0000D8   AE82         MOV       R6,DPL
   \   0000DA   AF83         MOV       R7,DPH
   1866                pRsp->cnt = *pBuf++;
   \   0000DC   8E82         MOV       DPL,R6
   \   0000DE   8F83         MOV       DPH,R7
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   C0E0         PUSH      A
   \   0000E3   85..82       MOV       DPL,?V0
   \   0000E6   85..83       MOV       DPH,?V1
   \   0000E9   A3           INC       DPTR
   \   0000EA   A3           INC       DPTR
   \   0000EB   A3           INC       DPTR
   \   0000EC   A3           INC       DPTR
   \   0000ED   A3           INC       DPTR
   \   0000EE   A3           INC       DPTR
   \   0000EF   D0E0         POP       A
   \   0000F1   F0           MOVX      @DPTR,A
   \   0000F2   8E82         MOV       DPL,R6
   \   0000F4   8F83         MOV       DPH,R7
   \   0000F6   A3           INC       DPTR
   \   0000F7   AE82         MOV       R6,DPL
   \   0000F9   AF83         MOV       R7,DPH
   1867          
   1868                for ( i = 0; i < cnt; i++ )
   \   0000FB   75..00       MOV       ?V2,#0x0
   \                     ??bdbTL_ProcessInCmd_DeviceInfoRsp_2:
   \   0000FE   E5..         MOV       A,?V2
   \   000100   C3           CLR       C
   \   000101   95..         SUBB      A,?V8
   \   000103   4003         JC        $+5
   \   000105   02....       LJMP      ??bdbTL_ProcessInCmd_DeviceInfoRsp_3 & 0xFFFF
   1869                {
   1870                  devInfoRec_t *pRec = &(pRsp->devInfoRec[i]);
   \   000108   E5..         MOV       A,?V2
   \   00010A   F8           MOV       R0,A
   \   00010B   7900         MOV       R1,#0x0
   \   00010D   E8           MOV       A,R0
   \   00010E   75F010       MOV       B,#0x10
   \   000111   A4           MUL       AB
   \   000112   C8           XCH       A,R0
   \   000113   AAF0         MOV       R2,B
   \   000115   75F000       MOV       B,#0x0
   \   000118   A4           MUL       AB
   \   000119   2A           ADD       A,R2
   \   00011A   FA           MOV       R2,A
   \   00011B   75F010       MOV       B,#0x10
   \   00011E   E9           MOV       A,R1
   \   00011F   A4           MUL       AB
   \   000120   2A           ADD       A,R2
   \   000121   F9           MOV       R1,A
   \   000122   E5..         MOV       A,?V0
   \   000124   28           ADD       A,R0
   \   000125   F8           MOV       R0,A
   \   000126   E5..         MOV       A,?V1
   \   000128   39           ADDC      A,R1
   \   000129   F9           MOV       R1,A
   \   00012A   E8           MOV       A,R0
   \   00012B   2407         ADD       A,#0x7
   \   00012D   F5..         MOV       ?V4,A
   \   00012F   E4           CLR       A
   \   000130   39           ADDC      A,R1
   \   000131   F5..         MOV       ?V5,A
   1871          
   1872                  zcl_cpyExtAddr( pRec->ieeeAddr, pBuf );
   \   000133                ; Setup parameters for call to function sAddrExtCpy
   \   000133   EE           MOV       A,R6
   \   000134   FC           MOV       R4,A
   \   000135   EF           MOV       A,R7
   \   000136   FD           MOV       R5,A
   \   000137   AA..         MOV       R2,?V4
   \   000139   AB..         MOV       R3,?V5
   \   00013B   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1873                  pBuf += Z_EXTADDR_LEN;
   \   00013E   EE           MOV       A,R6
   \   00013F   2408         ADD       A,#0x8
   \   000141   FE           MOV       R6,A
   \   000142   5001         JNC       ??bdbTL_ProcessInCmd_DeviceInfoRsp_4
   \   000144   0F           INC       R7
   1874          
   1875                  pRec->deviceInfo.endpoint = *pBuf++;
   \                     ??bdbTL_ProcessInCmd_DeviceInfoRsp_4:
   \   000145   8E82         MOV       DPL,R6
   \   000147   8F83         MOV       DPH,R7
   \   000149   E0           MOVX      A,@DPTR
   \   00014A   C0E0         PUSH      A
   \   00014C   85..82       MOV       DPL,?V4
   \   00014F   85..83       MOV       DPH,?V5
   \   000152   A3           INC       DPTR
   \   000153   A3           INC       DPTR
   \   000154   A3           INC       DPTR
   \   000155   A3           INC       DPTR
   \   000156   A3           INC       DPTR
   \   000157   A3           INC       DPTR
   \   000158   A3           INC       DPTR
   \   000159   A3           INC       DPTR
   \   00015A   D0E0         POP       A
   \   00015C   F0           MOVX      @DPTR,A
   \   00015D   8E82         MOV       DPL,R6
   \   00015F   8F83         MOV       DPH,R7
   \   000161   A3           INC       DPTR
   \   000162   AE82         MOV       R6,DPL
   \   000164   AF83         MOV       R7,DPH
   1876          
   1877                  pRec->deviceInfo.profileID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000166   8E82         MOV       DPL,R6
   \   000168   8F83         MOV       DPH,R7
   \   00016A   E0           MOVX      A,@DPTR
   \   00016B   FA           MOV       R2,A
   \   00016C   7B00         MOV       R3,#0x0
   \   00016E   8E82         MOV       DPL,R6
   \   000170   8F83         MOV       DPH,R7
   \   000172   A3           INC       DPTR
   \   000173   E0           MOVX      A,@DPTR
   \   000174   F8           MOV       R0,A
   \   000175   7900         MOV       R1,#0x0
   \   000177   E4           CLR       A
   \   000178   C8           XCH       A,R0
   \   000179   F9           MOV       R1,A
   \   00017A   EA           MOV       A,R2
   \   00017B   28           ADD       A,R0
   \   00017C   F8           MOV       R0,A
   \   00017D   EB           MOV       A,R3
   \   00017E   39           ADDC      A,R1
   \   00017F   F9           MOV       R1,A
   \   000180   85..82       MOV       DPL,?V4
   \   000183   85..83       MOV       DPH,?V5
   \   000186   A3           INC       DPTR
   \   000187   A3           INC       DPTR
   \   000188   A3           INC       DPTR
   \   000189   A3           INC       DPTR
   \   00018A   A3           INC       DPTR
   \   00018B   A3           INC       DPTR
   \   00018C   A3           INC       DPTR
   \   00018D   A3           INC       DPTR
   \   00018E   A3           INC       DPTR
   \   00018F   E8           MOV       A,R0
   \   000190   F0           MOVX      @DPTR,A
   \   000191   A3           INC       DPTR
   \   000192   E9           MOV       A,R1
   \   000193   F0           MOVX      @DPTR,A
   1878                  pBuf += 2;
   \   000194   EE           MOV       A,R6
   \   000195   2402         ADD       A,#0x2
   \   000197   FE           MOV       R6,A
   \   000198   5001         JNC       ??bdbTL_ProcessInCmd_DeviceInfoRsp_5
   \   00019A   0F           INC       R7
   1879          
   1880                  pRec->deviceInfo.deviceID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??bdbTL_ProcessInCmd_DeviceInfoRsp_5:
   \   00019B   8E82         MOV       DPL,R6
   \   00019D   8F83         MOV       DPH,R7
   \   00019F   E0           MOVX      A,@DPTR
   \   0001A0   FA           MOV       R2,A
   \   0001A1   7B00         MOV       R3,#0x0
   \   0001A3   8E82         MOV       DPL,R6
   \   0001A5   8F83         MOV       DPH,R7
   \   0001A7   A3           INC       DPTR
   \   0001A8   E0           MOVX      A,@DPTR
   \   0001A9   F8           MOV       R0,A
   \   0001AA   7900         MOV       R1,#0x0
   \   0001AC   E4           CLR       A
   \   0001AD   C8           XCH       A,R0
   \   0001AE   F9           MOV       R1,A
   \   0001AF   EA           MOV       A,R2
   \   0001B0   28           ADD       A,R0
   \   0001B1   F8           MOV       R0,A
   \   0001B2   EB           MOV       A,R3
   \   0001B3   39           ADDC      A,R1
   \   0001B4   F9           MOV       R1,A
   \   0001B5   E5..         MOV       A,?V4
   \   0001B7   240B         ADD       A,#0xb
   \   0001B9   F582         MOV       DPL,A
   \   0001BB   E4           CLR       A
   \   0001BC   35..         ADDC      A,?V5
   \   0001BE   F583         MOV       DPH,A
   \   0001C0   E8           MOV       A,R0
   \   0001C1   F0           MOVX      @DPTR,A
   \   0001C2   A3           INC       DPTR
   \   0001C3   E9           MOV       A,R1
   \   0001C4   F0           MOVX      @DPTR,A
   1881                  pBuf += 2;
   \   0001C5   EE           MOV       A,R6
   \   0001C6   2402         ADD       A,#0x2
   \   0001C8   FE           MOV       R6,A
   \   0001C9   5001         JNC       ??bdbTL_ProcessInCmd_DeviceInfoRsp_6
   \   0001CB   0F           INC       R7
   1882          
   1883                  pRec->deviceInfo.version = *pBuf++;
   \                     ??bdbTL_ProcessInCmd_DeviceInfoRsp_6:
   \   0001CC   8E82         MOV       DPL,R6
   \   0001CE   8F83         MOV       DPH,R7
   \   0001D0   E0           MOVX      A,@DPTR
   \   0001D1   C0E0         PUSH      A
   \   0001D3   E5..         MOV       A,?V4
   \   0001D5   240D         ADD       A,#0xd
   \   0001D7   F582         MOV       DPL,A
   \   0001D9   E4           CLR       A
   \   0001DA   35..         ADDC      A,?V5
   \   0001DC   F583         MOV       DPH,A
   \   0001DE   D0E0         POP       A
   \   0001E0   F0           MOVX      @DPTR,A
   \   0001E1   8E82         MOV       DPL,R6
   \   0001E3   8F83         MOV       DPH,R7
   \   0001E5   A3           INC       DPTR
   \   0001E6   AE82         MOV       R6,DPL
   \   0001E8   AF83         MOV       R7,DPH
   1884                  pRec->deviceInfo.grpIdCnt = *pBuf++;
   \   0001EA   8E82         MOV       DPL,R6
   \   0001EC   8F83         MOV       DPH,R7
   \   0001EE   E0           MOVX      A,@DPTR
   \   0001EF   C0E0         PUSH      A
   \   0001F1   E5..         MOV       A,?V4
   \   0001F3   240E         ADD       A,#0xe
   \   0001F5   F582         MOV       DPL,A
   \   0001F7   E4           CLR       A
   \   0001F8   35..         ADDC      A,?V5
   \   0001FA   F583         MOV       DPH,A
   \   0001FC   D0E0         POP       A
   \   0001FE   F0           MOVX      @DPTR,A
   \   0001FF   8E82         MOV       DPL,R6
   \   000201   8F83         MOV       DPH,R7
   \   000203   A3           INC       DPTR
   \   000204   AE82         MOV       R6,DPL
   \   000206   AF83         MOV       R7,DPH
   1885          
   1886                  pRec->sort = *pBuf++;
   \   000208   8E82         MOV       DPL,R6
   \   00020A   8F83         MOV       DPH,R7
   \   00020C   E0           MOVX      A,@DPTR
   \   00020D   C0E0         PUSH      A
   \   00020F   E5..         MOV       A,?V4
   \   000211   240F         ADD       A,#0xf
   \   000213   F582         MOV       DPL,A
   \   000215   E4           CLR       A
   \   000216   35..         ADDC      A,?V5
   \   000218   F583         MOV       DPH,A
   \   00021A   D0E0         POP       A
   \   00021C   F0           MOVX      @DPTR,A
   \   00021D   8E82         MOV       DPL,R6
   \   00021F   8F83         MOV       DPH,R7
   \   000221   A3           INC       DPTR
   \   000222   AE82         MOV       R6,DPL
   \   000224   AF83         MOV       R7,DPH
   1887                }
   \   000226   05..         INC       ?V2
   \   000228   02....       LJMP      ??bdbTL_ProcessInCmd_DeviceInfoRsp_2 & 0xFFFF
   1888          
   1889                status = pInterPANCBs->pfnDeviceInfoRsp( &(pInMsg->msg->srcAddr), pRsp );
   \                     ??bdbTL_ProcessInCmd_DeviceInfoRsp_3:
   \   00022B                ; Setup parameters for indirect call
   \   00022B   AC..         MOV       R4,?V0
   \   00022D   AD..         MOV       R5,?V1
   \   00022F   85..82       MOV       DPL,?V6
   \   000232   85..83       MOV       DPH,?V7
   \   000235   E0           MOVX      A,@DPTR
   \   000236   2406         ADD       A,#0x6
   \   000238   FA           MOV       R2,A
   \   000239   A3           INC       DPTR
   \   00023A   E0           MOVX      A,@DPTR
   \   00023B   3400         ADDC      A,#0x0
   \   00023D   FB           MOV       R3,A
   \   00023E   90....       MOV       DPTR,#pInterPANCBs
   \   000241   E0           MOVX      A,@DPTR
   \   000242   F8           MOV       R0,A
   \   000243   A3           INC       DPTR
   \   000244   E0           MOVX      A,@DPTR
   \   000245   C8           XCH       A,R0
   \   000246   2412         ADD       A,#0x12
   \   000248   F582         MOV       DPL,A
   \   00024A   C8           XCH       A,R0
   \   00024B   3400         ADDC      A,#0x0
   \   00024D   F583         MOV       DPH,A
   \   00024F   E0           MOVX      A,@DPTR
   \   000250   F8           MOV       R0,A
   \   000251   A3           INC       DPTR
   \   000252   E0           MOVX      A,@DPTR
   \   000253   F583         MOV       DPH,A
   \   000255   8882         MOV       DPL,R0
   \   000257   12....       LCALL     ?CALL_IND
   \   00025A   E9           MOV       A,R1
   \   00025B   F5..         MOV       ?V3,A
   1890          
   1891                zcl_mem_free( pRsp );
   \   00025D                ; Setup parameters for call to function osal_mem_free
   \   00025D   AA..         MOV       R2,?V0
   \   00025F   AB..         MOV       R3,?V1
   \   000261   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1892              }
   1893            }
   1894          
   1895            return ( status );
   \                     ??bdbTL_ProcessInCmd_DeviceInfoRsp_0:
   \   000264   A9..         MOV       R1,?V3
   \   000266   7F0A         MOV       R7,#0xa
   \   000268   02....       LJMP      ?BANKED_LEAVE_XDATA
   1896          }
   1897          
   1898          /*********************************************************************
   1899           * @fn      bdbTL_ProcessInCmd_NwkStartRsp
   1900           *
   1901           * @brief   Process in the received Network Start Response command.
   1902           *
   1903           * @param   pInMsg - pointer to the incoming message
   1904           *
   1905           * @return  ZStatus_t
   1906           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1907          static ZStatus_t bdbTL_ProcessInCmd_NwkStartRsp( zclIncoming_t *pInMsg )
   \                     bdbTL_ProcessInCmd_NwkStartRsp:
   1908          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   1909            ZStatus_t status = ZSuccess;
   \   000009   75..00       MOV       ?V2,#0x0
   1910          
   1911            if ( pInterPANCBs->pfnNwkStartRsp )
   \   00000C   90....       MOV       DPTR,#pInterPANCBs
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F8           MOV       R0,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   C8           XCH       A,R0
   \   000014   2414         ADD       A,#0x14
   \   000016   F582         MOV       DPL,A
   \   000018   C8           XCH       A,R0
   \   000019   3400         ADDC      A,#0x0
   \   00001B   F583         MOV       DPH,A
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F8           MOV       R0,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F9           MOV       R1,A
   \   000022   E8           MOV       A,R0
   \   000023   49           ORL       A,R1
   \   000024   7003         JNZ       $+5
   \   000026   02....       LJMP      ??bdbTL_ProcessInCmd_NwkStartRsp_0 & 0xFFFF
   1912            {
   1913              bdbTLNwkStartRsp_t *pRsp;
   1914          
   1915              pRsp = (bdbTLNwkStartRsp_t *)zcl_mem_alloc( sizeof( bdbTLNwkStartRsp_t ) );
   \   000029                ; Setup parameters for call to function osal_mem_alloc
   \   000029   7A11         MOV       R2,#0x11
   \   00002B   7B00         MOV       R3,#0x0
   \   00002D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000030   8A..         MOV       ?V6,R2
   \   000032   8B..         MOV       ?V7,R3
   \   000034   85....       MOV       ?V0,?V6
   \   000037   85....       MOV       ?V1,?V7
   1916              if ( pRsp )
   \   00003A   E5..         MOV       A,?V0
   \   00003C   45..         ORL       A,?V1
   \   00003E   7003         JNZ       $+5
   \   000040   02....       LJMP      ??bdbTL_ProcessInCmd_NwkStartRsp_0 & 0xFFFF
   1917              {
   1918                uint8 *pBuf = pInMsg->pData;
   \   000043   85..82       MOV       DPL,?V4
   \   000046   85..83       MOV       DPH,?V5
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   E0           MOVX      A,@DPTR
   \   000052   FE           MOV       R6,A
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   FF           MOV       R7,A
   1919          
   1920                pRsp->transID = zcl_build_uint32( pBuf, 4 );
   \   000056                ; Setup parameters for call to function osal_build_uint32
   \   000056   7904         MOV       R1,#0x4
   \   000058   EE           MOV       A,R6
   \   000059   FA           MOV       R2,A
   \   00005A   EF           MOV       A,R7
   \   00005B   FB           MOV       R3,A
   \   00005C   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00005F   EA           MOV       A,R2
   \   000060   F8           MOV       R0,A
   \   000061   EB           MOV       A,R3
   \   000062   F9           MOV       R1,A
   \   000063   EC           MOV       A,R4
   \   000064   FA           MOV       R2,A
   \   000065   ED           MOV       A,R5
   \   000066   FB           MOV       R3,A
   \   000067   85..82       MOV       DPL,?V0
   \   00006A   85..83       MOV       DPH,?V1
   \   00006D   12....       LCALL     ?XSTORE_R0123
   1921                pBuf += 4;
   \   000070   EE           MOV       A,R6
   \   000071   2404         ADD       A,#0x4
   \   000073   FE           MOV       R6,A
   \   000074   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartRsp_1
   \   000076   0F           INC       R7
   1922          
   1923                pRsp->status = *pBuf++;
   \                     ??bdbTL_ProcessInCmd_NwkStartRsp_1:
   \   000077   8E82         MOV       DPL,R6
   \   000079   8F83         MOV       DPH,R7
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   C0E0         PUSH      A
   \   00007E   85..82       MOV       DPL,?V0
   \   000081   85..83       MOV       DPH,?V1
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   D0E0         POP       A
   \   00008A   F0           MOVX      @DPTR,A
   \   00008B   8E82         MOV       DPL,R6
   \   00008D   8F83         MOV       DPH,R7
   \   00008F   A3           INC       DPTR
   \   000090   AE82         MOV       R6,DPL
   \   000092   AF83         MOV       R7,DPH
   1924          
   1925                zcl_cpyExtAddr( pRsp->extendedPANID, pBuf );
   \   000094                ; Setup parameters for call to function sAddrExtCpy
   \   000094   EE           MOV       A,R6
   \   000095   FC           MOV       R4,A
   \   000096   EF           MOV       A,R7
   \   000097   FD           MOV       R5,A
   \   000098   E5..         MOV       A,?V0
   \   00009A   2405         ADD       A,#0x5
   \   00009C   FA           MOV       R2,A
   \   00009D   E4           CLR       A
   \   00009E   35..         ADDC      A,?V1
   \   0000A0   FB           MOV       R3,A
   \   0000A1   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1926                pBuf += Z_EXTADDR_LEN;
   \   0000A4   EE           MOV       A,R6
   \   0000A5   2408         ADD       A,#0x8
   \   0000A7   FE           MOV       R6,A
   \   0000A8   5001         JNC       ??bdbTL_ProcessInCmd_NwkStartRsp_2
   \   0000AA   0F           INC       R7
   1927          
   1928                pRsp->nwkUpdateId = *pBuf++;
   \                     ??bdbTL_ProcessInCmd_NwkStartRsp_2:
   \   0000AB   8E82         MOV       DPL,R6
   \   0000AD   8F83         MOV       DPH,R7
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   C0E0         PUSH      A
   \   0000B2   E5..         MOV       A,?V0
   \   0000B4   240D         ADD       A,#0xd
   \   0000B6   F582         MOV       DPL,A
   \   0000B8   E4           CLR       A
   \   0000B9   35..         ADDC      A,?V1
   \   0000BB   F583         MOV       DPH,A
   \   0000BD   D0E0         POP       A
   \   0000BF   F0           MOVX      @DPTR,A
   \   0000C0   8E82         MOV       DPL,R6
   \   0000C2   8F83         MOV       DPH,R7
   \   0000C4   A3           INC       DPTR
   \   0000C5   AE82         MOV       R6,DPL
   \   0000C7   AF83         MOV       R7,DPH
   1929                pRsp->logicalChannel = *pBuf++;
   \   0000C9   8E82         MOV       DPL,R6
   \   0000CB   8F83         MOV       DPH,R7
   \   0000CD   E0           MOVX      A,@DPTR
   \   0000CE   C0E0         PUSH      A
   \   0000D0   E5..         MOV       A,?V0
   \   0000D2   240E         ADD       A,#0xe
   \   0000D4   F582         MOV       DPL,A
   \   0000D6   E4           CLR       A
   \   0000D7   35..         ADDC      A,?V1
   \   0000D9   F583         MOV       DPH,A
   \   0000DB   D0E0         POP       A
   \   0000DD   F0           MOVX      @DPTR,A
   \   0000DE   8E82         MOV       DPL,R6
   \   0000E0   8F83         MOV       DPH,R7
   \   0000E2   A3           INC       DPTR
   \   0000E3   AE82         MOV       R6,DPL
   \   0000E5   AF83         MOV       R7,DPH
   1930          
   1931                pRsp->panId = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   0000E7   8E82         MOV       DPL,R6
   \   0000E9   8F83         MOV       DPH,R7
   \   0000EB   E0           MOVX      A,@DPTR
   \   0000EC   FA           MOV       R2,A
   \   0000ED   7B00         MOV       R3,#0x0
   \   0000EF   8E82         MOV       DPL,R6
   \   0000F1   8F83         MOV       DPH,R7
   \   0000F3   A3           INC       DPTR
   \   0000F4   E0           MOVX      A,@DPTR
   \   0000F5   F8           MOV       R0,A
   \   0000F6   7900         MOV       R1,#0x0
   \   0000F8   E4           CLR       A
   \   0000F9   C8           XCH       A,R0
   \   0000FA   F9           MOV       R1,A
   \   0000FB   EA           MOV       A,R2
   \   0000FC   28           ADD       A,R0
   \   0000FD   F8           MOV       R0,A
   \   0000FE   EB           MOV       A,R3
   \   0000FF   39           ADDC      A,R1
   \   000100   F9           MOV       R1,A
   \   000101   E5..         MOV       A,?V0
   \   000103   240F         ADD       A,#0xf
   \   000105   F582         MOV       DPL,A
   \   000107   E4           CLR       A
   \   000108   35..         ADDC      A,?V1
   \   00010A   F583         MOV       DPH,A
   \   00010C   E8           MOV       A,R0
   \   00010D   F0           MOVX      @DPTR,A
   \   00010E   A3           INC       DPTR
   \   00010F   E9           MOV       A,R1
   \   000110   F0           MOVX      @DPTR,A
   1932          
   1933                status = pInterPANCBs->pfnNwkStartRsp( &(pInMsg->msg->srcAddr), pRsp );
   \   000111                ; Setup parameters for indirect call
   \   000111   AC..         MOV       R4,?V0
   \   000113   AD..         MOV       R5,?V1
   \   000115   85..82       MOV       DPL,?V4
   \   000118   85..83       MOV       DPH,?V5
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   2406         ADD       A,#0x6
   \   00011E   FA           MOV       R2,A
   \   00011F   A3           INC       DPTR
   \   000120   E0           MOVX      A,@DPTR
   \   000121   3400         ADDC      A,#0x0
   \   000123   FB           MOV       R3,A
   \   000124   90....       MOV       DPTR,#pInterPANCBs
   \   000127   E0           MOVX      A,@DPTR
   \   000128   F8           MOV       R0,A
   \   000129   A3           INC       DPTR
   \   00012A   E0           MOVX      A,@DPTR
   \   00012B   C8           XCH       A,R0
   \   00012C   2414         ADD       A,#0x14
   \   00012E   F582         MOV       DPL,A
   \   000130   C8           XCH       A,R0
   \   000131   3400         ADDC      A,#0x0
   \   000133   F583         MOV       DPH,A
   \   000135   E0           MOVX      A,@DPTR
   \   000136   F8           MOV       R0,A
   \   000137   A3           INC       DPTR
   \   000138   E0           MOVX      A,@DPTR
   \   000139   F583         MOV       DPH,A
   \   00013B   8882         MOV       DPL,R0
   \   00013D   12....       LCALL     ?CALL_IND
   \   000140   E9           MOV       A,R1
   \   000141   F5..         MOV       ?V2,A
   1934          
   1935                zcl_mem_free( pRsp );
   \   000143                ; Setup parameters for call to function osal_mem_free
   \   000143   AA..         MOV       R2,?V0
   \   000145   AB..         MOV       R3,?V1
   \   000147   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1936              }
   1937            }
   1938          
   1939            return ( status );
   \                     ??bdbTL_ProcessInCmd_NwkStartRsp_0:
   \   00014A   A9..         MOV       R1,?V2
   \   00014C   7F08         MOV       R7,#0x8
   \   00014E   02....       LJMP      ?BANKED_LEAVE_XDATA
   1940          }
   1941          
   1942          /*********************************************************************
   1943           * @fn      bdbTL_ProcessInCmd_NwkJoinRtrRsp
   1944           *
   1945           * @brief   Process in the received Network Join Router Response command.
   1946           *
   1947           * @param   pInMsg - pointer to the incoming message
   1948           *
   1949           * @return  ZStatus_t
   1950           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1951          static ZStatus_t bdbTL_ProcessInCmd_NwkJoinRtrRsp( zclIncoming_t *pInMsg )
   \                     bdbTL_ProcessInCmd_NwkJoinRtrRsp:
   1952          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1953            if ( pInterPANCBs->pfnNwkJoinRtrRsp )
   \   00000E   90....       MOV       DPTR,#pInterPANCBs
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F8           MOV       R0,A
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   C8           XCH       A,R0
   \   000016   2416         ADD       A,#0x16
   \   000018   F582         MOV       DPL,A
   \   00001A   C8           XCH       A,R0
   \   00001B   3400         ADDC      A,#0x0
   \   00001D   F583         MOV       DPH,A
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F8           MOV       R0,A
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F9           MOV       R1,A
   \   000024   E8           MOV       A,R0
   \   000025   49           ORL       A,R1
   \   000026   6079         JZ        ??bdbTL_ProcessInCmd_NwkJoinRtrRsp_0
   1954            {
   1955              bdbTLNwkJoinRsp_t rsp;
   1956          
   1957              rsp.transID = zcl_build_uint32( pInMsg->pData, 4 );
   \   000028                ; Setup parameters for call to function osal_build_uint32
   \   000028   7904         MOV       R1,#0x4
   \   00002A   8E82         MOV       DPL,R6
   \   00002C   8F83         MOV       DPH,R7
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   FA           MOV       R2,A
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   FB           MOV       R3,A
   \   00003B   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00003E   EA           MOV       A,R2
   \   00003F   F8           MOV       R0,A
   \   000040   EB           MOV       A,R3
   \   000041   F9           MOV       R1,A
   \   000042   EC           MOV       A,R4
   \   000043   FA           MOV       R2,A
   \   000044   ED           MOV       A,R5
   \   000045   FB           MOV       R3,A
   \   000046   85..82       MOV       DPL,?XSP + 0
   \   000049   85..83       MOV       DPH,?XSP + 1
   \   00004C   12....       LCALL     ?XSTORE_R0123
   1958          
   1959              rsp.status = pInMsg->pData[4];
   \   00004F   8E82         MOV       DPL,R6
   \   000051   8F83         MOV       DPH,R7
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F8           MOV       R0,A
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F583         MOV       DPH,A
   \   000061   8882         MOV       DPL,R0
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   E0           MOVX      A,@DPTR
   \   000068   C0E0         PUSH      A
   \   00006A   7404         MOV       A,#0x4
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   D0E0         POP       A
   \   000071   F0           MOVX      @DPTR,A
   1960          
   1961              return ( pInterPANCBs->pfnNwkJoinRtrRsp( &(pInMsg->msg->srcAddr), &rsp ) );
   \   000072                ; Setup parameters for indirect call
   \   000072   AC..         MOV       R4,?XSP + 0
   \   000074   AD..         MOV       R5,?XSP + 1
   \   000076   8E82         MOV       DPL,R6
   \   000078   8F83         MOV       DPH,R7
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   2406         ADD       A,#0x6
   \   00007D   FA           MOV       R2,A
   \   00007E   A3           INC       DPTR
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   3400         ADDC      A,#0x0
   \   000082   FB           MOV       R3,A
   \   000083   90....       MOV       DPTR,#pInterPANCBs
   \   000086   E0           MOVX      A,@DPTR
   \   000087   F8           MOV       R0,A
   \   000088   A3           INC       DPTR
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   C8           XCH       A,R0
   \   00008B   2416         ADD       A,#0x16
   \   00008D   F582         MOV       DPL,A
   \   00008F   C8           XCH       A,R0
   \   000090   3400         ADDC      A,#0x0
   \   000092   F583         MOV       DPH,A
   \   000094   E0           MOVX      A,@DPTR
   \   000095   F8           MOV       R0,A
   \   000096   A3           INC       DPTR
   \   000097   E0           MOVX      A,@DPTR
   \   000098   F583         MOV       DPH,A
   \   00009A   8882         MOV       DPL,R0
   \   00009C   12....       LCALL     ?CALL_IND
   \   00009F   8002         SJMP      ??bdbTL_ProcessInCmd_NwkJoinRtrRsp_1
   1962            }
   1963          
   1964            return ( ZSuccess );
   \                     ??bdbTL_ProcessInCmd_NwkJoinRtrRsp_0:
   \   0000A1   7900         MOV       R1,#0x0
   \                     ??bdbTL_ProcessInCmd_NwkJoinRtrRsp_1:
   \   0000A3   7405         MOV       A,#0x5
   \   0000A5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A8   7F01         MOV       R7,#0x1
   \   0000AA   02....       LJMP      ?BANKED_LEAVE_XDATA
   1965          }
   1966          
   1967          
   1968          /*********************************************************************
   1969           * @fn      bdbTL_ProcessInCmd_NwkJoinEDRsp
   1970           *
   1971           * @brief   Process in the received Network Join End Device Response command.
   1972           *
   1973           * @param   pInMsg - pointer to the incoming message
   1974           *
   1975           * @return  ZStatus_t
   1976           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1977          static ZStatus_t bdbTL_ProcessInCmd_NwkJoinEDRsp( zclIncoming_t *pInMsg )
   \                     bdbTL_ProcessInCmd_NwkJoinEDRsp:
   1978          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1979            if ( pInterPANCBs->pfnNwkJoinEDRsp )
   \   00000E   90....       MOV       DPTR,#pInterPANCBs
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F8           MOV       R0,A
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   C8           XCH       A,R0
   \   000016   2418         ADD       A,#0x18
   \   000018   F582         MOV       DPL,A
   \   00001A   C8           XCH       A,R0
   \   00001B   3400         ADDC      A,#0x0
   \   00001D   F583         MOV       DPH,A
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F8           MOV       R0,A
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F9           MOV       R1,A
   \   000024   E8           MOV       A,R0
   \   000025   49           ORL       A,R1
   \   000026   6079         JZ        ??bdbTL_ProcessInCmd_NwkJoinEDRsp_0
   1980            {
   1981              bdbTLNwkJoinRsp_t rsp;
   1982          
   1983              rsp.transID = zcl_build_uint32( pInMsg->pData, 4 );
   \   000028                ; Setup parameters for call to function osal_build_uint32
   \   000028   7904         MOV       R1,#0x4
   \   00002A   8E82         MOV       DPL,R6
   \   00002C   8F83         MOV       DPH,R7
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   FA           MOV       R2,A
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   FB           MOV       R3,A
   \   00003B   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00003E   EA           MOV       A,R2
   \   00003F   F8           MOV       R0,A
   \   000040   EB           MOV       A,R3
   \   000041   F9           MOV       R1,A
   \   000042   EC           MOV       A,R4
   \   000043   FA           MOV       R2,A
   \   000044   ED           MOV       A,R5
   \   000045   FB           MOV       R3,A
   \   000046   85..82       MOV       DPL,?XSP + 0
   \   000049   85..83       MOV       DPH,?XSP + 1
   \   00004C   12....       LCALL     ?XSTORE_R0123
   1984          
   1985              rsp.status = pInMsg->pData[4];
   \   00004F   8E82         MOV       DPL,R6
   \   000051   8F83         MOV       DPH,R7
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F8           MOV       R0,A
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F583         MOV       DPH,A
   \   000061   8882         MOV       DPL,R0
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   E0           MOVX      A,@DPTR
   \   000068   C0E0         PUSH      A
   \   00006A   7404         MOV       A,#0x4
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   D0E0         POP       A
   \   000071   F0           MOVX      @DPTR,A
   1986          
   1987              return ( pInterPANCBs->pfnNwkJoinEDRsp( &(pInMsg->msg->srcAddr), &rsp ) );
   \   000072                ; Setup parameters for indirect call
   \   000072   AC..         MOV       R4,?XSP + 0
   \   000074   AD..         MOV       R5,?XSP + 1
   \   000076   8E82         MOV       DPL,R6
   \   000078   8F83         MOV       DPH,R7
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   2406         ADD       A,#0x6
   \   00007D   FA           MOV       R2,A
   \   00007E   A3           INC       DPTR
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   3400         ADDC      A,#0x0
   \   000082   FB           MOV       R3,A
   \   000083   90....       MOV       DPTR,#pInterPANCBs
   \   000086   E0           MOVX      A,@DPTR
   \   000087   F8           MOV       R0,A
   \   000088   A3           INC       DPTR
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   C8           XCH       A,R0
   \   00008B   2418         ADD       A,#0x18
   \   00008D   F582         MOV       DPL,A
   \   00008F   C8           XCH       A,R0
   \   000090   3400         ADDC      A,#0x0
   \   000092   F583         MOV       DPH,A
   \   000094   E0           MOVX      A,@DPTR
   \   000095   F8           MOV       R0,A
   \   000096   A3           INC       DPTR
   \   000097   E0           MOVX      A,@DPTR
   \   000098   F583         MOV       DPH,A
   \   00009A   8882         MOV       DPL,R0
   \   00009C   12....       LCALL     ?CALL_IND
   \   00009F   8002         SJMP      ??bdbTL_ProcessInCmd_NwkJoinEDRsp_1
   1988            }
   1989          
   1990            return ( ZSuccess );
   \                     ??bdbTL_ProcessInCmd_NwkJoinEDRsp_0:
   \   0000A1   7900         MOV       R1,#0x0
   \                     ??bdbTL_ProcessInCmd_NwkJoinEDRsp_1:
   \   0000A3   7405         MOV       A,#0x5
   \   0000A5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A8   7F01         MOV       R7,#0x1
   \   0000AA   02....       LJMP      ?BANKED_LEAVE_XDATA
   1991          }
   1992          
   1993          #endif // BDB_TL_TARGET || BDB_TL_INITIATOR
   1994          
   1995          /********************************************************************************************
   1996          *********************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     14   bdbTL_FindCallbacks
      0     18   bdbTL_HdlInInterPANCommands
        0      9   -> bdbTL_ProcessInLLInterPANCmds
      0     23   bdbTL_HdlInSpecificCommands
        0     14   -> bdbTL_FindCallbacks
        0     14   -> bdbTL_ProcessInLLCmds
      0      9   bdbTL_HdlIncoming
        0      9   -> StubAPS_InterPan
        0      9   -> bdbTL_HdlInInterPANCommands
        0      9   -> bdbTL_HdlInSpecificCommands
      1     32   bdbTL_ParseInCmd_NwkJoinReq
        0     15   -> osal_build_uint32
        0     18   -> osal_memcpy
        0     15   -> sAddrExtCpy
      1     23   bdbTL_ProcessInCmd_DeviceInfoReq
        0     14   -> osal_build_uint32
      1     27   bdbTL_ProcessInCmd_DeviceInfoRsp
        0     18   -> osal_build_uint32
        0     18   -> osal_mem_alloc
        0     18   -> osal_mem_free
        0     18   -> sAddrExtCpy
      1     29   bdbTL_ProcessInCmd_EndpointInfo
        0     18   -> osal_mem_alloc
        0     18   -> osal_mem_free
        0     18   -> sAddrExtCpy
      1     22   bdbTL_ProcessInCmd_GetEPListReq
      1     31   bdbTL_ProcessInCmd_GetEPListRsp
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
      1     22   bdbTL_ProcessInCmd_GetGrpIDsReq
      1     31   bdbTL_ProcessInCmd_GetGrpIDsRsp
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
      0     24   bdbTL_ProcessInCmd_IdentifyReq
        0     15   -> osal_build_uint32
      0     23   bdbTL_ProcessInCmd_NwkJoinEDReq
        0     14   -> bdbTL_ParseInCmd_NwkJoinReq
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
      1     23   bdbTL_ProcessInCmd_NwkJoinEDRsp
        0     14   -> osal_build_uint32
      0     23   bdbTL_ProcessInCmd_NwkJoinRtrReq
        0     14   -> bdbTL_ParseInCmd_NwkJoinReq
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
      1     23   bdbTL_ProcessInCmd_NwkJoinRtrRsp
        0     14   -> osal_build_uint32
      1     30   bdbTL_ProcessInCmd_NwkStartReq
        0     18   -> osal_build_uint32
        0     18   -> osal_mem_alloc
        0     18   -> osal_mem_free
        0     21   -> osal_memcpy
        0     18   -> sAddrExtCpy
      1     25   bdbTL_ProcessInCmd_NwkStartRsp
        0     16   -> osal_build_uint32
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
        0     16   -> sAddrExtCpy
      1     25   bdbTL_ProcessInCmd_NwkUpdateReq
        0     16   -> osal_build_uint32
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
        0     16   -> sAddrExtCpy
      0     22   bdbTL_ProcessInCmd_ResetToFNReq
        0     13   -> osal_build_uint32
      1     26   bdbTL_ProcessInCmd_ScanReq
        0     17   -> osal_build_uint32
      1     25   bdbTL_ProcessInCmd_ScanRsp
        0     16   -> osal_build_uint32
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
        0     16   -> osal_memset
        0     16   -> sAddrExtCpy
      0     25   bdbTL_ProcessInLLCmds
        0     11   -> bdbTL_ProcessInCmd_EndpointInfo
        0     11   -> bdbTL_ProcessInCmd_GetEPListReq
        0     11   -> bdbTL_ProcessInCmd_GetEPListRsp
        0     11   -> bdbTL_ProcessInCmd_GetGrpIDsReq
        0     11   -> bdbTL_ProcessInCmd_GetGrpIDsRsp
      0     18   bdbTL_ProcessInLLInterPANCmds
        0      9   -> bdbTL_ProcessInCmd_DeviceInfoReq
        0      9   -> bdbTL_ProcessInCmd_DeviceInfoRsp
        0      9   -> bdbTL_ProcessInCmd_IdentifyReq
        0      9   -> bdbTL_ProcessInCmd_NwkJoinEDReq
        0      9   -> bdbTL_ProcessInCmd_NwkJoinEDRsp
        0      9   -> bdbTL_ProcessInCmd_NwkJoinRtrReq
        0      9   -> bdbTL_ProcessInCmd_NwkJoinRtrRsp
        0      9   -> bdbTL_ProcessInCmd_NwkStartReq
        0      9   -> bdbTL_ProcessInCmd_NwkStartRsp
        0      9   -> bdbTL_ProcessInCmd_NwkUpdateReq
        0      9   -> bdbTL_ProcessInCmd_ResetToFNReq
        0      9   -> bdbTL_ProcessInCmd_ScanReq
        0      9   -> bdbTL_ProcessInCmd_ScanRsp
      1     18   bdbTL_RegisterCmdCallbacks
        0     16   -> osal_mem_alloc
        0     18   -> zcl_registerPlugin
      0     12   bdbTL_RegisterInterPANCmdCallbacks
        0     12   -> zcl_registerPlugin
      0     58   bdbTL_SendInterPANCommand
        0     29   -> zcl_SendCommand
      1     27   bdbTL_Send_DeviceInfoReq
        0     26   -> bdbTL_SendInterPANCommand
        0     25   -> osal_buffer_uint32
      1     30   bdbTL_Send_DeviceInfoRsp
        0     29   -> bdbTL_SendInterPANCommand
        0     28   -> osal_buffer_uint32
        0     24   -> osal_mem_alloc
        0     24   -> osal_mem_free
        0     24   -> sAddrExtCpy
      1     33   bdbTL_Send_EndpointInfo
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     20   -> sAddrExtCpy
        0     31   -> zcl_SendCommand
      1     35   bdbTL_Send_GetEPListRsp
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     33   -> zcl_SendCommand
      1     35   bdbTL_Send_GetGrpIDsRsp
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     33   -> zcl_SendCommand
      1     28   bdbTL_Send_IndentifyReq
        0     27   -> bdbTL_SendInterPANCommand
        0     26   -> osal_buffer_uint32
      1     29   bdbTL_Send_NwkJoinReq
        0     27   -> bdbTL_SendInterPANCommand
        0     26   -> osal_buffer_uint32
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     25   -> osal_memcpy
        0     22   -> sAddrExtCpy
      1     30   bdbTL_Send_NwkJoinRsp
        0     28   -> bdbTL_SendInterPANCommand
        0     27   -> osal_buffer_uint32
      1     26   bdbTL_Send_NwkStartReq
        0     25   -> bdbTL_SendInterPANCommand
        0     24   -> osal_buffer_uint32
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     23   -> osal_memcpy
        0     20   -> sAddrExtCpy
      1     26   bdbTL_Send_NwkStartRsp
        0     25   -> bdbTL_SendInterPANCommand
        0     24   -> osal_buffer_uint32
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     20   -> sAddrExtCpy
      1     26   bdbTL_Send_NwkUpdateReq
        0     25   -> bdbTL_SendInterPANCommand
        0     24   -> osal_buffer_uint32
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     20   -> sAddrExtCpy
      0     26   bdbTL_Send_ResetToFNReq
        0     25   -> bdbTL_SendInterPANCommand
        0     24   -> osal_buffer_uint32
      1     28   bdbTL_Send_ScanReq
        0     27   -> bdbTL_SendInterPANCommand
        0     26   -> osal_buffer_uint32
      1     26   bdbTL_Send_ScanRsp
        0     25   -> bdbTL_SendInterPANCommand
        0     24   -> osal_buffer_uint32
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     20   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  bdbTLCBs
       1  bdbTLPluginRegisted
      70  bdbTL_FindCallbacks
      74  bdbTL_HdlInInterPANCommands
     105  bdbTL_HdlInSpecificCommands
     139  bdbTL_HdlIncoming
     589  bdbTL_ParseInCmd_NwkJoinReq
     180  bdbTL_ProcessInCmd_DeviceInfoReq
     619  bdbTL_ProcessInCmd_DeviceInfoRsp
     378  bdbTL_ProcessInCmd_EndpointInfo
     134  bdbTL_ProcessInCmd_GetEPListReq
     536  bdbTL_ProcessInCmd_GetEPListRsp
     130  bdbTL_ProcessInCmd_GetGrpIDsReq
     406  bdbTL_ProcessInCmd_GetGrpIDsRsp
     213  bdbTL_ProcessInCmd_IdentifyReq
     159  bdbTL_ProcessInCmd_NwkJoinEDReq
     173  bdbTL_ProcessInCmd_NwkJoinEDRsp
     159  bdbTL_ProcessInCmd_NwkJoinRtrReq
     173  bdbTL_ProcessInCmd_NwkJoinRtrRsp
     777  bdbTL_ProcessInCmd_NwkStartReq
     337  bdbTL_ProcessInCmd_NwkStartRsp
     364  bdbTL_ProcessInCmd_NwkUpdateReq
     138  bdbTL_ProcessInCmd_ResetToFNReq
     212  bdbTL_ProcessInCmd_ScanReq
     809  bdbTL_ProcessInCmd_ScanRsp
     179  bdbTL_ProcessInLLCmds
     250  bdbTL_ProcessInLLInterPANCmds
     194  bdbTL_RegisterCmdCallbacks
      64  bdbTL_RegisterInterPANCmdCallbacks
     133  bdbTL_SendInterPANCommand
     138  bdbTL_Send_DeviceInfoReq
     633  bdbTL_Send_DeviceInfoRsp
     478  bdbTL_Send_EndpointInfo
     586  bdbTL_Send_GetEPListRsp
     422  bdbTL_Send_GetGrpIDsRsp
     170  bdbTL_Send_IndentifyReq
     896  bdbTL_Send_NwkJoinReq
     146  bdbTL_Send_NwkJoinRsp
     955  bdbTL_Send_NwkStartReq
     355  bdbTL_Send_NwkStartRsp
     377  bdbTL_Send_NwkUpdateReq
     121  bdbTL_Send_ResetToFNReq
     159  bdbTL_Send_ScanReq
     925  bdbTL_Send_ScanRsp
       2  pInterPANCBs
     252  -- Other

 
 14 055 bytes in segment BANKED_CODE
    252 bytes in segment BANK_RELAYS
      5 bytes in segment XDATA_Z
 
    252 bytes of CODE     memory
 14 055 bytes of HUGECODE memory
      5 bytes of XDATA    memory

Errors: none
Warnings: none
