///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              30/Jul/2020  15:22:23
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\AA\Z-Stack 3.0.2\Components\stack\zdo\ZDProfile.c
//    Command line       =  
//        -f C:\Users\sunli\AppData\Local\Temp\EW3AA1.tmp ("D:\AA\Z-Stack
//        3.0.2\Components\stack\zdo\ZDProfile.c" -D SECURE=1 -D
//        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xPOWER_SAVING -D
//        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D
//        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
//        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
//        -D ZCL_GROUPS -D BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
//        -lA "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
//        "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -On --require_prototypes --no_cse --no_unroll --no_inline
//        --no_code_motion --no_tbaa --no_cross_call)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\ZDProfile.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME ZDProfile

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?V14
        EXTERN ?V15
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SHR
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??ZDO_RegisterForZDOMsg::?relay`
        FUNCTION `??ZDO_RegisterForZDOMsg::?relay`,0203H
        PUBLIC `??ZDO_RemoveRegisteredCB::?relay`
        FUNCTION `??ZDO_RemoveRegisteredCB::?relay`,0203H
        PUBLIC `??ZDO_SendMsgCBs::?relay`
        FUNCTION `??ZDO_SendMsgCBs::?relay`,0203H
        PUBLIC `??ZDP_BindUnbindReq::?relay`
        FUNCTION `??ZDP_BindUnbindReq::?relay`,0203H
        PUBLIC `??ZDP_DeviceAnnce::?relay`
        FUNCTION `??ZDP_DeviceAnnce::?relay`,0203H
        PUBLIC `??ZDP_EPRsp::?relay`
        FUNCTION `??ZDP_EPRsp::?relay`,0203H
        PUBLIC `??ZDP_EndDeviceBindReq::?relay`
        FUNCTION `??ZDP_EndDeviceBindReq::?relay`,0203H
        PUBLIC `??ZDP_GenericRsp::?relay`
        FUNCTION `??ZDP_GenericRsp::?relay`,0203H
        PUBLIC `??ZDP_IEEEAddrReq::?relay`
        FUNCTION `??ZDP_IEEEAddrReq::?relay`,0203H
        PUBLIC `??ZDP_IncomingData::?relay`
        FUNCTION `??ZDP_IncomingData::?relay`,0203H
        PUBLIC `??ZDP_MatchDescReq::?relay`
        FUNCTION `??ZDP_MatchDescReq::?relay`,0203H
        PUBLIC `??ZDP_MgmtBindRsp::?relay`
        FUNCTION `??ZDP_MgmtBindRsp::?relay`,0203H
        PUBLIC `??ZDP_MgmtDirectJoinReq::?relay`
        FUNCTION `??ZDP_MgmtDirectJoinReq::?relay`,0203H
        PUBLIC `??ZDP_MgmtLeaveReq::?relay`
        FUNCTION `??ZDP_MgmtLeaveReq::?relay`,0203H
        PUBLIC `??ZDP_MgmtLqiRsp::?relay`
        FUNCTION `??ZDP_MgmtLqiRsp::?relay`,0203H
        PUBLIC `??ZDP_MgmtNwkDiscReq::?relay`
        FUNCTION `??ZDP_MgmtNwkDiscReq::?relay`,0203H
        PUBLIC `??ZDP_MgmtNwkDiscRsp::?relay`
        FUNCTION `??ZDP_MgmtNwkDiscRsp::?relay`,0203H
        PUBLIC `??ZDP_MgmtNwkUpdateNotify::?relay`
        FUNCTION `??ZDP_MgmtNwkUpdateNotify::?relay`,0203H
        PUBLIC `??ZDP_MgmtNwkUpdateReq::?relay`
        FUNCTION `??ZDP_MgmtNwkUpdateReq::?relay`,0203H
        PUBLIC `??ZDP_MgmtPermitJoinReq::?relay`
        FUNCTION `??ZDP_MgmtPermitJoinReq::?relay`,0203H
        PUBLIC `??ZDP_MgmtRtgRsp::?relay`
        FUNCTION `??ZDP_MgmtRtgRsp::?relay`,0203H
        PUBLIC `??ZDP_NWKAddrOfInterestReq::?relay`
        FUNCTION `??ZDP_NWKAddrOfInterestReq::?relay`,0203H
        PUBLIC `??ZDP_NodeDescMsg::?relay`
        FUNCTION `??ZDP_NodeDescMsg::?relay`,0203H
        PUBLIC `??ZDP_NwkAddrReq::?relay`
        FUNCTION `??ZDP_NwkAddrReq::?relay`,0203H
        PUBLIC `??ZDP_ParentAnnce::?relay`
        FUNCTION `??ZDP_ParentAnnce::?relay`,0203H
        PUBLIC `??ZDP_PowerDescMsg::?relay`
        FUNCTION `??ZDP_PowerDescMsg::?relay`,0203H
        PUBLIC `??ZDP_SendData::?relay`
        FUNCTION `??ZDP_SendData::?relay`,0203H
        PUBLIC `??ZDP_ServerDiscReq::?relay`
        FUNCTION `??ZDP_ServerDiscReq::?relay`,0203H
        PUBLIC `??ZDP_ServerDiscRsp::?relay`
        FUNCTION `??ZDP_ServerDiscRsp::?relay`,0203H
        PUBLIC `??ZDP_SimpleDescMsg::?relay`
        FUNCTION `??ZDP_SimpleDescMsg::?relay`,0203H
        PUBLIC `??ZDP_SimpleDescReq::?relay`
        FUNCTION `??ZDP_SimpleDescReq::?relay`,0203H
        PUBLIC `??ZDP_UserDescRsp::?relay`
        FUNCTION `??ZDP_UserDescRsp::?relay`,0203H
        PUBLIC `??ZDP_UserDescSet::?relay`
        FUNCTION `??ZDP_UserDescSet::?relay`,0203H
        FUNCTION `??fillAndSend::?relay`,0203H
        PUBLIC `??zdpProcessAddrReq::?relay`
        FUNCTION `??zdpProcessAddrReq::?relay`,0203H
        PUBLIC ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDO_RemoveRegisteredCB
        FUNCTION ZDO_RemoveRegisteredCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDO_SendMsgCBs
        FUNCTION ZDO_SendMsgCBs,0a1203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDP_AF_ENDPOINT
        PUBLIC ZDP_BindUnbindReq
        FUNCTION ZDP_BindUnbindReq,0a1203H
        ARGFRAME XSTACK, 8, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC ZDP_DeviceAnnce
        FUNCTION ZDP_DeviceAnnce,0a1203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC ZDP_EPRsp
        FUNCTION ZDP_EPRsp,0a1203H
        ARGFRAME XSTACK, 7, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 28, STACK
        PUBLIC ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0a1203H
        ARGFRAME XSTACK, 9, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC ZDP_GenericRsp
        FUNCTION ZDP_GenericRsp,0a1203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDP_IEEEAddrReq
        FUNCTION ZDP_IEEEAddrReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC ZDP_IncomingData
        FUNCTION ZDP_IncomingData,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC ZDP_MatchDescReq
        FUNCTION ZDP_MatchDescReq,0a1203H
        ARGFRAME XSTACK, 8, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC ZDP_MgmtBindRsp
        FUNCTION ZDP_MgmtBindRsp,0a1203H
        ARGFRAME XSTACK, 5, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC ZDP_MgmtDirectJoinReq
        FUNCTION ZDP_MgmtDirectJoinReq,0a1203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDP_MgmtLeaveReq
        FUNCTION ZDP_MgmtLeaveReq,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDP_MgmtLqiRsp
        FUNCTION ZDP_MgmtLqiRsp,0a1203H
        ARGFRAME XSTACK, 5, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC ZDP_MgmtNwkDiscReq
        FUNCTION ZDP_MgmtNwkDiscReq,0a1203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC ZDP_MgmtNwkDiscRsp
        FUNCTION ZDP_MgmtNwkDiscRsp,0a1203H
        ARGFRAME XSTACK, 5, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC ZDP_MgmtNwkUpdateNotify
        FUNCTION ZDP_MgmtNwkUpdateNotify,0a1203H
        ARGFRAME XSTACK, 12, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZDP_MgmtNwkUpdateReq
        FUNCTION ZDP_MgmtNwkUpdateReq,0a1203H
        ARGFRAME XSTACK, 6, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC ZDP_MgmtPermitJoinReq
        FUNCTION ZDP_MgmtPermitJoinReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC ZDP_MgmtRtgRsp
        FUNCTION ZDP_MgmtRtgRsp,0a1203H
        ARGFRAME XSTACK, 5, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC ZDP_NWKAddrOfInterestReq
        FUNCTION ZDP_NWKAddrOfInterestReq,0a1203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDP_NodeDescMsg
        FUNCTION ZDP_NodeDescMsg,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDP_NwkAddrReq
        FUNCTION ZDP_NwkAddrReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC ZDP_ParentAnnce
        FUNCTION ZDP_ParentAnnce,0a1203H
        ARGFRAME XSTACK, 5, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 28, STACK
        PUBLIC ZDP_PowerDescMsg
        FUNCTION ZDP_PowerDescMsg,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDP_SendData
        FUNCTION ZDP_SendData,0a1203H
        ARGFRAME XSTACK, 5, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC ZDP_ServerDiscReq
        FUNCTION ZDP_ServerDiscReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC ZDP_ServerDiscRsp
        FUNCTION ZDP_ServerDiscRsp,0a1203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC ZDP_SimpleDescMsg
        FUNCTION ZDP_SimpleDescMsg,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDP_SimpleDescReq
        FUNCTION ZDP_SimpleDescReq,0a1203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDP_TransID
        PUBLIC ZDP_TxOptions
        PUBLIC ZDP_UserDescRsp
        FUNCTION ZDP_UserDescRsp,0a1203H
        ARGFRAME XSTACK, 3, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC ZDP_UserDescSet
        FUNCTION ZDP_UserDescSet,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBWEAK __Constant_a
        PUBLIC childIndex
        FUNCTION fillAndSend,0a1203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 37, STACK
        PUBLIC zdoMsgCBs
        PUBLIC zdpMsgProcs
        PUBLIC zdpProcessAddrReq
        FUNCTION zdpProcessAddrReq,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 30, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
AF_DataRequest      SYMBOL "AF_DataRequest"
`??AF_DataRequest::?relay` SYMBOL "?relay", AF_DataRequest
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
`??NLME_GetExtAddr::?relay` SYMBOL "?relay", NLME_GetExtAddr
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
ZDApp_InMsgCB       SYMBOL "ZDApp_InMsgCB"
`??ZDApp_InMsgCB::?relay` SYMBOL "?relay", ZDApp_InMsgCB
ZDApp_SetParentAnnceTimer SYMBOL "ZDApp_SetParentAnnceTimer"
`??ZDApp_SetParentAnnceTimer::?relay` SYMBOL "?relay", ZDApp_SetParentAnnceTimer
`?<Name ZDO_ProcessActiveEPR 10>` SYMBOL "ZDO_ProcessActiveEPReq"
`??ZDO_ProcessActiveEPReq::?relay` SYMBOL "?relay", `?<Name ZDO_ProcessActiveEPR 10>`
`?<Name ZDO_ProcessMatchDesc 12>` SYMBOL "ZDO_ProcessMatchDescReq"
`??ZDO_ProcessMatchDescReq::?relay` SYMBOL "?relay", `?<Name ZDO_ProcessMatchDesc 12>`
`?<Name ZDO_ProcessMgmtBindR 14>` SYMBOL "ZDO_ProcessMgmtBindReq"
`??ZDO_ProcessMgmtBindReq::?relay` SYMBOL "?relay", `?<Name ZDO_ProcessMgmtBindR 14>`
`?<Name ZDO_ProcessMgmtLeave 16>` SYMBOL "ZDO_ProcessMgmtLeaveReq"
`??ZDO_ProcessMgmtLeaveReq::?relay` SYMBOL "?relay", `?<Name ZDO_ProcessMgmtLeave 16>`
`?<Name ZDO_ProcessMgmtLqiRe 18>` SYMBOL "ZDO_ProcessMgmtLqiReq"
`??ZDO_ProcessMgmtLqiReq::?relay` SYMBOL "?relay", `?<Name ZDO_ProcessMgmtLqiRe 18>`
`?<Name ZDO_ProcessNodeDescR 20>` SYMBOL "ZDO_ProcessNodeDescReq"
`??ZDO_ProcessNodeDescReq::?relay` SYMBOL "?relay", `?<Name ZDO_ProcessNodeDescR 20>`
`?<Name ZDO_ProcessNodeDescR 22>` SYMBOL "ZDO_ProcessNodeDescRsp"
`??ZDO_ProcessNodeDescRsp::?relay` SYMBOL "?relay", `?<Name ZDO_ProcessNodeDescR 22>`
`?<Name ZDO_ProcessPowerDesc 24>` SYMBOL "ZDO_ProcessPowerDescReq"
`??ZDO_ProcessPowerDescReq::?relay` SYMBOL "?relay", `?<Name ZDO_ProcessPowerDesc 24>`
`?<Name ZDO_ProcessSimpleDes 26>` SYMBOL "ZDO_ProcessSimpleDescReq"
`??ZDO_ProcessSimpleDescReq::?relay` SYMBOL "?relay", `?<Name ZDO_ProcessSimpleDes 26>`
`?<Name ZDO_ProcessSimpleDes 28>` SYMBOL "ZDO_ProcessSimpleDescRsp"
`??ZDO_ProcessSimpleDescRsp::?relay` SYMBOL "?relay", `?<Name ZDO_ProcessSimpleDes 28>`
osal_buffer_uint32  SYMBOL "osal_buffer_uint32"
`??osal_buffer_uint32::?relay` SYMBOL "?relay", osal_buffer_uint32
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
sAddrExtCmp         SYMBOL "sAddrExtCmp"
`??sAddrExtCmp::?relay` SYMBOL "?relay", sAddrExtCmp
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
`??ZDO_RegisterForZDOMsg::?relay` SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDO_RemoveRegisteredCB SYMBOL "ZDO_RemoveRegisteredCB"
`??ZDO_RemoveRegisteredCB::?relay` SYMBOL "?relay", ZDO_RemoveRegisteredCB
ZDO_SendMsgCBs      SYMBOL "ZDO_SendMsgCBs"
`??ZDO_SendMsgCBs::?relay` SYMBOL "?relay", ZDO_SendMsgCBs
ZDP_BindUnbindReq   SYMBOL "ZDP_BindUnbindReq"
`??ZDP_BindUnbindReq::?relay` SYMBOL "?relay", ZDP_BindUnbindReq
ZDP_DeviceAnnce     SYMBOL "ZDP_DeviceAnnce"
`??ZDP_DeviceAnnce::?relay` SYMBOL "?relay", ZDP_DeviceAnnce
ZDP_EPRsp           SYMBOL "ZDP_EPRsp"
`??ZDP_EPRsp::?relay` SYMBOL "?relay", ZDP_EPRsp
ZDP_EndDeviceBindReq SYMBOL "ZDP_EndDeviceBindReq"
`??ZDP_EndDeviceBindReq::?relay` SYMBOL "?relay", ZDP_EndDeviceBindReq
ZDP_GenericRsp      SYMBOL "ZDP_GenericRsp"
`??ZDP_GenericRsp::?relay` SYMBOL "?relay", ZDP_GenericRsp
ZDP_IEEEAddrReq     SYMBOL "ZDP_IEEEAddrReq"
`??ZDP_IEEEAddrReq::?relay` SYMBOL "?relay", ZDP_IEEEAddrReq
ZDP_IncomingData    SYMBOL "ZDP_IncomingData"
`??ZDP_IncomingData::?relay` SYMBOL "?relay", ZDP_IncomingData
ZDP_MatchDescReq    SYMBOL "ZDP_MatchDescReq"
`??ZDP_MatchDescReq::?relay` SYMBOL "?relay", ZDP_MatchDescReq
ZDP_MgmtBindRsp     SYMBOL "ZDP_MgmtBindRsp"
`??ZDP_MgmtBindRsp::?relay` SYMBOL "?relay", ZDP_MgmtBindRsp
ZDP_MgmtDirectJoinReq SYMBOL "ZDP_MgmtDirectJoinReq"
`??ZDP_MgmtDirectJoinReq::?relay` SYMBOL "?relay", ZDP_MgmtDirectJoinReq
ZDP_MgmtLeaveReq    SYMBOL "ZDP_MgmtLeaveReq"
`??ZDP_MgmtLeaveReq::?relay` SYMBOL "?relay", ZDP_MgmtLeaveReq
ZDP_MgmtLqiRsp      SYMBOL "ZDP_MgmtLqiRsp"
`??ZDP_MgmtLqiRsp::?relay` SYMBOL "?relay", ZDP_MgmtLqiRsp
ZDP_MgmtNwkDiscReq  SYMBOL "ZDP_MgmtNwkDiscReq"
`??ZDP_MgmtNwkDiscReq::?relay` SYMBOL "?relay", ZDP_MgmtNwkDiscReq
ZDP_MgmtNwkDiscRsp  SYMBOL "ZDP_MgmtNwkDiscRsp"
`??ZDP_MgmtNwkDiscRsp::?relay` SYMBOL "?relay", ZDP_MgmtNwkDiscRsp
ZDP_MgmtNwkUpdateNotify SYMBOL "ZDP_MgmtNwkUpdateNotify"
`??ZDP_MgmtNwkUpdateNotify::?relay` SYMBOL "?relay", ZDP_MgmtNwkUpdateNotify
ZDP_MgmtNwkUpdateReq SYMBOL "ZDP_MgmtNwkUpdateReq"
`??ZDP_MgmtNwkUpdateReq::?relay` SYMBOL "?relay", ZDP_MgmtNwkUpdateReq
ZDP_MgmtPermitJoinReq SYMBOL "ZDP_MgmtPermitJoinReq"
`??ZDP_MgmtPermitJoinReq::?relay` SYMBOL "?relay", ZDP_MgmtPermitJoinReq
ZDP_MgmtRtgRsp      SYMBOL "ZDP_MgmtRtgRsp"
`??ZDP_MgmtRtgRsp::?relay` SYMBOL "?relay", ZDP_MgmtRtgRsp
ZDP_NWKAddrOfInterestReq SYMBOL "ZDP_NWKAddrOfInterestReq"
`??ZDP_NWKAddrOfInterestReq::?relay` SYMBOL "?relay", ZDP_NWKAddrOfInterestReq
ZDP_NodeDescMsg     SYMBOL "ZDP_NodeDescMsg"
`??ZDP_NodeDescMsg::?relay` SYMBOL "?relay", ZDP_NodeDescMsg
ZDP_NwkAddrReq      SYMBOL "ZDP_NwkAddrReq"
`??ZDP_NwkAddrReq::?relay` SYMBOL "?relay", ZDP_NwkAddrReq
ZDP_ParentAnnce     SYMBOL "ZDP_ParentAnnce"
`??ZDP_ParentAnnce::?relay` SYMBOL "?relay", ZDP_ParentAnnce
ZDP_PowerDescMsg    SYMBOL "ZDP_PowerDescMsg"
`??ZDP_PowerDescMsg::?relay` SYMBOL "?relay", ZDP_PowerDescMsg
ZDP_SendData        SYMBOL "ZDP_SendData"
`??ZDP_SendData::?relay` SYMBOL "?relay", ZDP_SendData
ZDP_ServerDiscReq   SYMBOL "ZDP_ServerDiscReq"
`??ZDP_ServerDiscReq::?relay` SYMBOL "?relay", ZDP_ServerDiscReq
ZDP_ServerDiscRsp   SYMBOL "ZDP_ServerDiscRsp"
`??ZDP_ServerDiscRsp::?relay` SYMBOL "?relay", ZDP_ServerDiscRsp
ZDP_SimpleDescMsg   SYMBOL "ZDP_SimpleDescMsg"
`??ZDP_SimpleDescMsg::?relay` SYMBOL "?relay", ZDP_SimpleDescMsg
ZDP_SimpleDescReq   SYMBOL "ZDP_SimpleDescReq"
`??ZDP_SimpleDescReq::?relay` SYMBOL "?relay", ZDP_SimpleDescReq
ZDP_UserDescRsp     SYMBOL "ZDP_UserDescRsp"
`??ZDP_UserDescRsp::?relay` SYMBOL "?relay", ZDP_UserDescRsp
ZDP_UserDescSet     SYMBOL "ZDP_UserDescSet"
`??ZDP_UserDescSet::?relay` SYMBOL "?relay", ZDP_UserDescSet
zdpProcessAddrReq   SYMBOL "zdpProcessAddrReq"
`??zdpProcessAddrReq::?relay` SYMBOL "?relay", zdpProcessAddrReq

        EXTERN `??AF_DataRequest::?relay`
        FUNCTION `??AF_DataRequest::?relay`,00H
        EXTERN `??NLME_GetExtAddr::?relay`
        FUNCTION `??NLME_GetExtAddr::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??ZDApp_InMsgCB::?relay`
        FUNCTION `??ZDApp_InMsgCB::?relay`,00H
        EXTERN `??ZDApp_SetParentAnnceTimer::?relay`
        FUNCTION `??ZDApp_SetParentAnnceTimer::?relay`,00H
        EXTERN `??ZDO_ProcessActiveEPReq::?relay`
        FUNCTION `??ZDO_ProcessActiveEPReq::?relay`,00H
        EXTERN `??ZDO_ProcessMatchDescReq::?relay`
        FUNCTION `??ZDO_ProcessMatchDescReq::?relay`,00H
        EXTERN `??ZDO_ProcessMgmtBindReq::?relay`
        FUNCTION `??ZDO_ProcessMgmtBindReq::?relay`,00H
        EXTERN `??ZDO_ProcessMgmtLeaveReq::?relay`
        FUNCTION `??ZDO_ProcessMgmtLeaveReq::?relay`,00H
        EXTERN `??ZDO_ProcessMgmtLqiReq::?relay`
        FUNCTION `??ZDO_ProcessMgmtLqiReq::?relay`,00H
        EXTERN `??ZDO_ProcessNodeDescReq::?relay`
        FUNCTION `??ZDO_ProcessNodeDescReq::?relay`,00H
        EXTERN `??ZDO_ProcessNodeDescRsp::?relay`
        FUNCTION `??ZDO_ProcessNodeDescRsp::?relay`,00H
        EXTERN `??ZDO_ProcessPowerDescReq::?relay`
        FUNCTION `??ZDO_ProcessPowerDescReq::?relay`,00H
        EXTERN `??ZDO_ProcessSimpleDescReq::?relay`
        FUNCTION `??ZDO_ProcessSimpleDescReq::?relay`,00H
        EXTERN `??ZDO_ProcessSimpleDescRsp::?relay`
        FUNCTION `??ZDO_ProcessSimpleDescRsp::?relay`,00H
        EXTERN `??osal_buffer_uint32::?relay`
        FUNCTION `??osal_buffer_uint32::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??sAddrExtCmp::?relay`
        FUNCTION `??sAddrExtCmp::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDAppNwkAddr
        EXTERN ZDAppTaskID
        EXTERN ZDApp_InMsgCB
        FUNCTION ZDApp_InMsgCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_SetParentAnnceTimer
        FUNCTION ZDApp_SetParentAnnceTimer,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_epDesc
        EXTERN osal_buffer_uint32
        FUNCTION osal_buffer_uint32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCmp
        FUNCTION sAddrExtCmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN saveExtAddr

// D:\AA\Z-Stack 3.0.2\Components\stack\zdo\ZDProfile.c
//    1 /**************************************************************************************************
//    2   Filename:       ZDProfile.c
//    3   Revised:        $Date: 2015-10-14 11:48:06 -0700 (Wed, 14 Oct 2015) $
//    4   Revision:       $Revision: 44530 $
//    5 
//    6   Description:    This is the Zigbee Device Profile.
//    7 
//    8 
//    9   Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 #include "ZComDef.h"
//   44 #include "OSAL.h"
//   45 #include "AF.h"
//   46 #include "NLMEDE.h"
//   47 #include "nwk_util.h"
//   48 #include "APS.h"
//   49 
//   50 #include "AddrMgr.h"
//   51 #include "ZDConfig.h"
//   52 #include "ZDProfile.h"
//   53 #include "ZDObject.h"
//   54 #include "ZDNwkMgr.h"
//   55 
//   56 #if defined( LCD_SUPPORTED )
//   57   #include "OnBoard.h"
//   58 #endif
//   59 
//   60 #include "nwk_util.h"
//   61 
//   62 #if defined( MT_ZDO_FUNC )
//   63   #include "MT_ZDO.h"
//   64 #endif
//   65 
//   66 /*********************************************************************
//   67  * MACROS
//   68  */
//   69 
//   70 #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \ 
//   71   (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \ 
//   72   (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \ 
//   73   (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \ 
//   74 }
//   75 
//   76 #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \ 
//   77   afStatus_t stat;                                    \ 
//   78   ZDP_TmpBuf = (BUF)+1;                               \ 
//   79   stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \ 
//   80   osal_mem_free( (BUF) );                             \ 
//   81   ZDP_TmpBuf = ZDP_Buf+1;                             \ 
//   82   return stat;                                        \ 
//   83 }
//   84 
//   85 #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \ 
//   86   afStatus_t stat;                                    \ 
//   87   ZDP_TxOptions = (TxO);                              \ 
//   88   stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \ 
//   89   ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \ 
//   90   return stat;                                        \ 
//   91 }
//   92 
//   93 #define FillAndSendBufferTxOptions( TRANSSEQ, ADDR, ID, LEN, BUF, TxO ) { \ 
//   94   afStatus_t stat;                                    \ 
//   95   ZDP_TmpBuf = (BUF)+1;                               \ 
//   96   ZDP_TxOptions = (TxO);                              \ 
//   97   stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \ 
//   98   osal_mem_free( (BUF) );                             \ 
//   99   ZDP_TmpBuf = ZDP_Buf+1;                             \ 
//  100   ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \ 
//  101   return stat;                                        \ 
//  102 }
//  103 
//  104 /*********************************************************************
//  105  * CONSTANTS
//  106  */
//  107 
//  108 #define ZDP_BUF_SZ          80
//  109 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  110 CONST byte ZDP_AF_ENDPOINT = 0;
ZDP_AF_ENDPOINT:
        DB 0
//  111 
//  112 // Routing table options
//  113 #define ZP_RTG_RECORD       0x04       // Routing table indication that a route record is needed
//  114 #define ZP_MTO_ROUTE_RC     0x08       // Concentrator with routing cache
//  115 #define ZP_MTO_ROUTE_NRC    0x10       // Concentrator with limited cache
//  116 
//  117 
//  118 /*********************************************************************
//  119  * TYPEDEFS
//  120  */
//  121 typedef struct
//  122 {
//  123   void *next;
//  124   uint8 taskID;
//  125   uint16 clusterID;
//  126 } ZDO_MsgCB_t;
//  127 
//  128 
//  129 /*********************************************************************
//  130  * GLOBAL VARIABLES
//  131  */
//  132 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  133 byte ZDP_TransID = 0;
ZDP_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  134 uint8 childIndex = 0;
childIndex:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  135 
//  136 /*********************************************************************
//  137  * EXTERNAL VARIABLES
//  138  */
//  139 
//  140 extern endPointDesc_t ZDApp_epDesc;
//  141 
//  142 /*********************************************************************
//  143  * EXTERNAL FUNCTIONS
//  144  */
//  145 extern void ZDApp_SetParentAnnceTimer( void );
//  146 
//  147 /*********************************************************************
//  148  * LOCAL FUNCTIONS
//  149  */
//  150 
//  151 static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
//  152 uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg );
//  153 void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg );
//  154 
//  155 /*********************************************************************
//  156  * LOCAL VARIABLES
//  157  */
//  158 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  159 static uint8  ZDP_Buf[ ZDP_BUF_SZ ];
ZDP_Buf:
        DS 80
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  160 static uint8 *ZDP_TmpBuf = ZDP_Buf+1;
ZDP_TmpBuf:
        DATA16
        DS 2
        REQUIRE `?<Initializer for ZDP_TmpBuf>`
        REQUIRE __INIT_XDATA_I
//  161 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  162 byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
ZDP_TxOptions:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  163 ZDO_MsgCB_t *zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
zdoMsgCBs:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  164 
//  165 /*********************************************************************
//  166  * ZDO Message Processing table
//  167  */
//  168 
//  169 typedef void (*pfnZDPMsgProcessor)( zdoIncomingMsg_t *inMsg );
//  170 
//  171 typedef struct
//  172 {
//  173   uint16                clusterID;
//  174   pfnZDPMsgProcessor    pFn;
//  175 } zdpMsgProcItem_t;
//  176 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  177 CONST zdpMsgProcItem_t zdpMsgProcs[] =
zdpMsgProcs:
        DATA16
        DW 0
        DW `??zdpProcessAddrReq::?relay`
        DW 1
        DW `??zdpProcessAddrReq::?relay`
        DW 2
        DW `??ZDO_ProcessNodeDescReq::?relay`
        DW 32770
        DW `??ZDO_ProcessNodeDescRsp::?relay`
        DW 3
        DW `??ZDO_ProcessPowerDescReq::?relay`
        DW 4
        DW `??ZDO_ProcessSimpleDescReq::?relay`
        DW 32772
        DW `??ZDO_ProcessSimpleDescRsp::?relay`
        DW 5
        DW `??ZDO_ProcessActiveEPReq::?relay`
        DW 6
        DW `??ZDO_ProcessMatchDescReq::?relay`
        DW 49
        DW `??ZDO_ProcessMgmtLqiReq::?relay`
        DW 51
        DW `??ZDO_ProcessMgmtBindReq::?relay`
        DW 52
        DW `??ZDO_ProcessMgmtLeaveReq::?relay`
        DW 65535
        DW 0H
//  178 {
//  179 #if ( RFD_RCVC_ALWAYS_ON==TRUE ) || ( ZG_BUILD_RTR_TYPE )
//  180   // These aren't processed by sleeping end devices.
//  181   { Device_annce,           ZDO_ProcessDeviceAnnce },
//  182 #endif
//  183 #if ( ZG_BUILD_RTR_TYPE )
//  184   // These aren't processed by end devices.
//  185   { Parent_annce,           ZDO_ProcessParentAnnce },
//  186   { Parent_annce_rsp,       ZDO_ProcessParentAnnceRsp },
//  187 #endif
//  188   { NWK_addr_req,           zdpProcessAddrReq },
//  189   { IEEE_addr_req,          zdpProcessAddrReq },
//  190   { Node_Desc_req,          ZDO_ProcessNodeDescReq },
//  191   { Node_Desc_rsp,          ZDO_ProcessNodeDescRsp },
//  192   { Power_Desc_req,         ZDO_ProcessPowerDescReq },
//  193   { Simple_Desc_req,        ZDO_ProcessSimpleDescReq },
//  194   { Simple_Desc_rsp,        ZDO_ProcessSimpleDescRsp },
//  195   { Active_EP_req,          ZDO_ProcessActiveEPReq },
//  196   { Match_Desc_req,         ZDO_ProcessMatchDescReq },
//  197 #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
//  198   { Mgmt_NWK_Disc_req,      ZDO_ProcessMgmtNwkDiscReq },
//  199 #endif
//  200 #if defined ( ZDO_MGMT_LQI_RESPONSE ) && ( ZG_BUILD_RTR_TYPE || ZG_BUILD_ENDDEVICE_TYPE )
//  201   { Mgmt_Lqi_req,           ZDO_ProcessMgmtLqiReq },
//  202 #endif
//  203 #if defined ( ZDO_MGMT_RTG_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
//  204   { Mgmt_Rtg_req,           ZDO_ProcessMgmtRtgReq },
//  205 #endif
//  206 #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
//  207   { Mgmt_Bind_req,          ZDO_ProcessMgmtBindReq },
//  208 #endif
//  209 #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
//  210   { Mgmt_Direct_Join_req,   ZDO_ProcessMgmtDirectJoinReq },
//  211 #endif
//  212 #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
//  213   { Mgmt_Leave_req,         ZDO_ProcessMgmtLeaveReq },
//  214 #endif
//  215 #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && ( ZG_BUILD_RTR_TYPE )
//  216   { Mgmt_Permit_Join_req,   ZDO_ProcessMgmtPermitJoinReq },
//  217 #endif
//  218 #if defined ( ZDO_USERDESC_RESPONSE )
//  219   { User_Desc_req,          ZDO_ProcessUserDescReq },
//  220 #endif
//  221 #if defined ( ZDO_USERDESCSET_RESPONSE )
//  222   { User_Desc_set,          ZDO_ProcessUserDescSet },
//  223 #endif
//  224 #if defined ( ZDO_SERVERDISC_RESPONSE )
//  225   { Server_Discovery_req,   ZDO_ProcessServerDiscReq },
//  226 #endif
//  227   {0xFFFF, NULL} // Last
//  228 };
//  229 
//  230 /*********************************************************************
//  231  * @fn          fillAndSend
//  232  *
//  233  * @brief       Combined to reduce space
//  234  *
//  235  * @param
//  236  * @param
//  237  *
//  238  * @return      afStatus_t
//  239  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  240 static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
fillAndSend:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function fillAndSend
        CODE
//  241 {
        FUNCALL fillAndSend, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL fillAndSend, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 12
        MOV       A,#-0xc
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
        MOV       ?V0,R1
        MOV       A,#0x1c
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V5,A
//  242   afAddrType_t afAddr;
//  243 
//  244   osal_memset( &afAddr, 0, sizeof(afAddrType_t) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0xc
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  245   ZADDR_TO_AFADDR( addr, afAddr );
        MOV       DPTR,#ZDP_AF_ENDPOINT
        CLR       A
        MOVC      A,@A+DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  246 
//  247   *(ZDP_TmpBuf-1) = *transSeq;
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#-0x1
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#-0x1
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  248 
//  249   return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
//  250                            (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
//  251                            transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
        ; Setup parameters for call to function AF_DataRequest
        MOV       ?V1,#0x1e
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        ADD       A,#-0x1
        MOV       ?V6,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#-0x1
        MOV       ?V7,A
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       A,?V0
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,R0
        ADD       A,#0x1
        MOV       ?V6,A
        CLR       A
        ADDC      A,R1
        MOV       ?V7,A
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 37)
        MOV       DPTR,#ZDP_TxOptions
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       R4,#ZDApp_epDesc & 0xff
        MOV       R5,#(ZDApp_epDesc >> 8) & 0xff
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,#0xc
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
//  252 
//  253 }
          CFI EndBlock cfiBlock0
//  254 
//  255 /*********************************************************************
//  256  * @fn          ZDP_SendData
//  257  *
//  258  * @brief       This builds and send a request message that has
//  259  *              NWKAddrOfInterest as its only parameter.
//  260  *
//  261  * @param       dstAddr - destination address
//  262  * @param       cmd - clusterID
//  263  * @param       dataLen - number of bytes of data
//  264  * @param       data - pointer to the data
//  265  * @param       SecurityEnable - Security Options
//  266  *
//  267  * @return      afStatus_t
//  268  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  269 afStatus_t ZDP_SendData( uint8 *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
ZDP_SendData:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function ZDP_SendData
        CODE
//  270                         byte len, uint8 *buf, byte SecurityEnable )
//  271 {
        FUNCALL ZDP_SendData, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV       A,#-0x16
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 0
        MOV       ?V12,R2
        MOV       ?V13,R3
        MOV       ?V10,R4
        MOV       ?V11,R5
        MOV       ?V3,R1
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V8,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V9,A
        MOV       A,#0x18
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       A,#0x1a
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V6,A
//  272   uint8 *pBuf = ZDP_TmpBuf;
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
//  273   byte cnt = len;
        MOV       ?V2,?V3
//  274 
//  275   while ( cnt-- )
??ZDP_SendData_0:
        MOV       ?V4,?V2
        MOV       A,#-0x1
        ADD       A,?V4
        MOV       ?V2,A
        MOV       A,?V4
        JZ        ??ZDP_SendData_1
//  276   {
//  277     *pBuf++ = *buf++;
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        MOV       ?V0,DPL
        MOV       ?V1,DPH
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
        SJMP      ??ZDP_SendData_0
//  278   }
//  279 
//  280   FillAndSendTxOptions( TransSeq, dstAddr, cmd, len, ((SecurityEnable) ? AF_EN_SECURITY : 0) );
??ZDP_SendData_1:
        MOV       A,?V6
        JZ        ??ZDP_SendData_2
        MOV       DPTR,#ZDP_TxOptions
        MOV       A,#0x40
        MOVX      @DPTR,A
        SJMP      ??ZDP_SendData_3
??ZDP_SendData_2:
        MOV       DPTR,#ZDP_TxOptions
        MOV       A,#0x0
        MOVX      @DPTR,A
??ZDP_SendData_3:
        ; Setup parameters for call to function fillAndSend
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R1,?V3
        MOV       R4,?V10
        MOV       R5,?V11
        MOV       R2,?V12
        MOV       R3,?V13
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R1
        MOV       ?V5,A
        MOV       DPTR,#ZDP_TxOptions
        MOV       A,#0x0
        MOVX      @DPTR,A
        MOV       R1,?V5
        MOV       R7,#0xe
        LJMP      ?BANKED_LEAVE_XDATA
//  281 }
          CFI EndBlock cfiBlock1
//  282 
//  283 /*********************************************************************
//  284  * @fn          ZDP_NWKAddrOfInterestReq
//  285  *
//  286  * @brief       This builds and send a request message that has
//  287  *              NWKAddrOfInterest as its only parameter.
//  288  *
//  289  * @param       dstAddr - destination address
//  290  * @param       nwkAddr - 16 bit address
//  291  * @param       SecurityEnable - Security Options
//  292  *
//  293  * @return      afStatus_t
//  294  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  295 afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
ZDP_NWKAddrOfInterestReq:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function ZDP_NWKAddrOfInterestReq
        CODE
//  296                                      byte cmd, byte SecurityEnable )
//  297 {
        FUNCALL ZDP_NWKAddrOfInterestReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
        MOV       ?V2,R1
//  298   (void)SecurityEnable;  // Intentionally unreferenced parameter
//  299 
//  300   ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
        MOV       A,?V0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  301   ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
        MOV       R0,?V0
        MOV       R1,?V1
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  302 
//  303   return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
        ; Setup parameters for call to function fillAndSend
        MOV       A,?V2
        MOV       ?V4,A
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R1,#0x2
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R2,#ZDP_TransID & 0xff
        MOV       R3,#(ZDP_TransID >> 8) & 0xff
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
//  304 }
          CFI EndBlock cfiBlock2
//  305 
//  306 /*********************************************************************
//  307  * Address Requests
//  308  */
//  309 
//  310 /*********************************************************************
//  311  * @fn          ZDP_NwkAddrReq
//  312  *
//  313  * @brief       This builds and send a NWK_addr_req message.  This
//  314  *              function sends a broadcast message looking for a 16
//  315  *              bit address with a 64 bit address as bait.
//  316  *
//  317  * @param       IEEEAddress - looking for this device
//  318  * @param       SecurityEnable - Security Options
//  319  *
//  320  * @return      afStatus_t
//  321  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  322 afStatus_t ZDP_NwkAddrReq( uint8 *IEEEAddress, byte ReqType,
ZDP_NwkAddrReq:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function ZDP_NwkAddrReq
        CODE
//  323                            byte StartIndex, byte SecurityEnable )
//  324 {
        FUNCALL ZDP_NwkAddrReq, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_NwkAddrReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_NwkAddrReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       ?V1,R1
        MOV       ?V2,R4
        MOV       ?V3,R5
//  325   uint8 *pBuf = ZDP_TmpBuf;
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
//  326   byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
        MOV       ?V0,#0xa
//  327   zAddrType_t dstAddr;
//  328 
//  329   (void)SecurityEnable;  // Intentionally unreferenced parameter
//  330 
//  331   if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
        ; Setup parameters for call to function sAddrExtCmp
        MOV       R4,?V4
        MOV       R5,?V5
        MOV       R2,#saveExtAddr & 0xff
        MOV       R3,#(saveExtAddr >> 8) & 0xff
        LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV       A,R1
        JNZ       ??ZDP_NwkAddrReq_0
//  332   {
//  333     dstAddr.addrMode = AddrBroadcast;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0xf
        MOVX      @DPTR,A
//  334     dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x3
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#-0x1
        MOVX      @DPTR,A
        SJMP      ??ZDP_NwkAddrReq_1
//  335   }
//  336   else
//  337   {
//  338     dstAddr.addrMode = Addr16Bit;
??ZDP_NwkAddrReq_0:
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
//  339     dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
        MOV       DPTR,#ZDAppNwkAddr
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  340   }
//  341 
//  342   pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
??ZDP_NwkAddrReq_1:
        ; Setup parameters for call to function sAddrExtCpy
        MOV       R4,?V4
        MOV       R5,?V5
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        MOV       ?V6,R2
        MOV       ?V7,R3
        MOV       R6,?V6
        MOV       R7,?V7
//  343 
//  344   *pBuf++ = ReqType;
        MOV       A,?V1
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  345   *pBuf++ = StartIndex;
        MOV       A,?V2
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  346 
//  347   return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
        ; Setup parameters for call to function fillAndSend
        CLR       A
        MOV       ?V6,A
        MOV       ?V7,A
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       R1,?V0
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,#ZDP_TransID & 0xff
        MOV       R3,#(ZDP_TransID >> 8) & 0xff
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
//  348 }
          CFI EndBlock cfiBlock3
//  349 
//  350 /*********************************************************************
//  351  * @fn          ZDP_IEEEAddrReq
//  352  *
//  353  * @brief       This builds and send a IEEE_addr_req message.  This
//  354  *              function sends a unicast message looking for a 64
//  355  *              bit IEEE address with a 16 bit address as bait.
//  356  *
//  357  * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
//  358  *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
//  359  * @param       SecurityEnable - Security Options
//  360  *
//  361  * @return      afStatus_t
//  362  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  363 afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
ZDP_IEEEAddrReq:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function ZDP_IEEEAddrReq
        CODE
//  364                             byte StartIndex, byte SecurityEnable )
//  365 {
        FUNCALL ZDP_IEEEAddrReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R1
        MOV       ?V3,R4
        MOV       ?V4,R5
//  366   uint8 *pBuf = ZDP_TmpBuf;
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
//  367   byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
        MOV       ?V5,#0x4
//  368   zAddrType_t dstAddr;
//  369 
//  370   (void)SecurityEnable;  // Intentionally unreferenced parameter
//  371 
//  372   dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
//  373   dstAddr.addr.shortAddr = shortAddr;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
//  374 
//  375   *pBuf++ = LO_UINT16( shortAddr );
        MOV       A,?V0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  376   *pBuf++ = HI_UINT16( shortAddr );
        MOV       R0,?V0
        MOV       R1,?V1
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  377 
//  378   *pBuf++ = ReqType;
        MOV       A,?V2
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  379   *pBuf++ = StartIndex;
        MOV       A,?V3
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  380 
//  381   return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
        ; Setup parameters for call to function fillAndSend
        MOV       ?V6,#0x1
        MOV       ?V7,#0x0
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       R1,?V5
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,#ZDP_TransID & 0xff
        MOV       R3,#(ZDP_TransID >> 8) & 0xff
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
//  382 }
          CFI EndBlock cfiBlock4
//  383 
//  384 /*********************************************************************
//  385  * @fn          ZDP_MatchDescReq
//  386  *
//  387  * @brief       This builds and send a Match_Desc_req message.  This
//  388  *              function sends a broadcast or unicast message
//  389  *              requesting the list of endpoint/interfaces that
//  390  *              match profile ID and cluster IDs.
//  391  *
//  392  * @param       dstAddr - destination address
//  393  * @param       nwkAddr - network address of interest
//  394  * @param       ProfileID - Profile ID
//  395  * @param       NumInClusters - number of input clusters
//  396  * @param       InClusterList - input cluster ID list
//  397  * @param       NumOutClusters - number of output clusters
//  398  * @param       OutClusterList - output cluster ID list
//  399  * @param       SecurityEnable - Security Options
//  400  *
//  401  * @return      afStatus_t
//  402  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  403 afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
ZDP_MatchDescReq:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function ZDP_MatchDescReq
        CODE
//  404                                 uint16 ProfileID,
//  405                                 byte NumInClusters, cId_t *InClusterList,
//  406                                 byte NumOutClusters, cId_t *OutClusterList,
//  407                                 byte SecurityEnable )
//  408 {
        FUNCALL ZDP_MatchDescReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV       A,#-0x18
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 0
        MOV       ?V6,R2
        MOV       ?V7,R3
        MOV       ?V0,R4
        MOV       ?V1,R5
        MOV       ?V8,R1
        MOV       A,#0x18
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       A,#0x1a
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V14,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V15,A
        MOV       A,#0x1c
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V5,A
        MOV       A,#0x1d
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V12,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V13,A
//  409   uint8 *pBuf = ZDP_TmpBuf;
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
//  410   // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
//  411   byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
        MOV       ?V9,#0x6
//  412 
//  413   (void)SecurityEnable;  // Intentionally unreferenced parameter
//  414 
//  415   len += (NumInClusters + NumOutClusters) * sizeof(uint16);
        MOV       B,#0x2
        MOV       A,?V8
        MOV       R2,A
        MOV       R3,#0x0
        MOV       A,?V5
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,R2
        ADD       A,R0
        MOV       R0,A
        MOV       A,R3
        ADDC      A,R1
        MOV       R1,A
        MOV       A,R0
        MUL       AB
        ADD       A,?V9
        MOV       ?V9,A
//  416 
//  417   if ( len >= ZDP_BUF_SZ-1 )
        MOV       A,?V9
        CLR       C
        SUBB      A,#0x4f
        JC        ??ZDP_MatchDescReq_0
//  418   {
//  419     return afStatus_MEM_FAIL;
        MOV       R1,#0x10
        LJMP      ??ZDP_MatchDescReq_1 & 0xFFFF
//  420   }
//  421 
//  422   // The spec changed in Zigbee 2007 (2.4.3.1.7.1) to not allow sending
//  423   // this command to 0xFFFF.  So, here we will filter this and replace
//  424   // with 0xFFFD to only send to devices with RX ON.  This includes the
//  425   // network address of interest.
//  426   if ( ((dstAddr->addrMode == AddrBroadcast) || (dstAddr->addrMode == Addr16Bit))
//  427       && (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL) )
??ZDP_MatchDescReq_0:
        MOV       DPL,?V6
        MOV       DPH,?V7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0xf
        JZ        ??ZDP_MatchDescReq_2
        MOV       DPL,?V6
        MOV       DPH,?V7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??ZDP_MatchDescReq_3
??ZDP_MatchDescReq_2:
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        XRL       A,#0xff
        JNZ       ??ZDP_MatchDescReq_4
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0xff
??ZDP_MatchDescReq_4:
        JNZ       ??ZDP_MatchDescReq_3
//  428   {
//  429     dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOV       A,#-0x3
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#-0x1
        MOVX      @DPTR,A
//  430   }
//  431   if ( nwkAddr == NWK_BROADCAST_SHORTADDR_DEVALL )
??ZDP_MatchDescReq_3:
        MOV       A,#-0x1
        XRL       A,?V0
        JNZ       ??ZDP_MatchDescReq_5
        MOV       A,#-0x1
        XRL       A,?V1
??ZDP_MatchDescReq_5:
        JNZ       ??ZDP_MatchDescReq_6
//  432   {
//  433     nwkAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
        MOV       ?V0,#-0x3
        MOV       ?V1,#-0x1
//  434   }
//  435 
//  436   *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
??ZDP_MatchDescReq_6:
        MOV       A,?V0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  437   *pBuf++ = HI_UINT16( nwkAddr );
        MOV       R0,?V0
        MOV       R1,?V1
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  438 
//  439   *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
        MOV       A,?V2
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  440   *pBuf++ = HI_UINT16( ProfileID );
        MOV       R0,?V2
        MOV       R1,?V3
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  441 
//  442   *pBuf++ = NumInClusters; // Input cluster list
        MOV       A,?V8
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  443   if ( NumInClusters )
        MOV       A,?V8
        JNZ       $+5
        LJMP      ??ZDP_MatchDescReq_7 & 0xFFFF
//  444   {
//  445     for (i=0; i<NumInClusters; ++i)  {
        MOV       ?V4,#0x0
??ZDP_MatchDescReq_8:
        MOV       A,?V4
        CLR       C
        SUBB      A,?V8
        JC        $+5
        LJMP      ??ZDP_MatchDescReq_7 & 0xFFFF
//  446       *pBuf++ = LO_UINT16( InClusterList[i] );
        MOV       A,?V4
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,R0
        MOV       B,#0x2
        MUL       AB
        XCH       A,R0
        MOV       R2,B
        MOV       B,#0x0
        MUL       AB
        ADD       A,R2
        MOV       R2,A
        MOV       B,#0x2
        MOV       A,R1
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       A,?V14
        ADD       A,R0
        MOV       DPL,A
        MOV       A,?V15
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  447       *pBuf++ = HI_UINT16( InClusterList[i] );
        MOV       A,?V4
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,R0
        MOV       B,#0x2
        MUL       AB
        XCH       A,R0
        MOV       R2,B
        MOV       B,#0x0
        MUL       AB
        ADD       A,R2
        MOV       R2,A
        MOV       B,#0x2
        MOV       A,R1
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       A,?V14
        ADD       A,R0
        MOV       DPL,A
        MOV       A,?V15
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  448     }
        INC       ?V4
        LJMP      ??ZDP_MatchDescReq_8 & 0xFFFF
//  449   }
//  450 
//  451   *pBuf++ = NumOutClusters; // Output cluster list
??ZDP_MatchDescReq_7:
        MOV       A,?V5
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  452   if ( NumOutClusters )
        MOV       A,?V5
        JNZ       $+5
        LJMP      ??ZDP_MatchDescReq_9 & 0xFFFF
//  453   {
//  454     for (i=0; i<NumOutClusters; ++i)  {
        MOV       ?V4,#0x0
??ZDP_MatchDescReq_10:
        MOV       A,?V4
        CLR       C
        SUBB      A,?V5
        JC        $+5
        LJMP      ??ZDP_MatchDescReq_9 & 0xFFFF
//  455       *pBuf++ = LO_UINT16( OutClusterList[i] );
        MOV       A,?V4
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,R0
        MOV       B,#0x2
        MUL       AB
        XCH       A,R0
        MOV       R2,B
        MOV       B,#0x0
        MUL       AB
        ADD       A,R2
        MOV       R2,A
        MOV       B,#0x2
        MOV       A,R1
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       A,?V12
        ADD       A,R0
        MOV       DPL,A
        MOV       A,?V13
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  456       *pBuf++ = HI_UINT16( OutClusterList[i] );
        MOV       A,?V4
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,R0
        MOV       B,#0x2
        MUL       AB
        XCH       A,R0
        MOV       R2,B
        MOV       B,#0x0
        MUL       AB
        ADD       A,R2
        MOV       R2,A
        MOV       B,#0x2
        MOV       A,R1
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       A,?V12
        ADD       A,R0
        MOV       DPL,A
        MOV       A,?V13
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  457     }
        INC       ?V4
        LJMP      ??ZDP_MatchDescReq_10 & 0xFFFF
//  458   }
//  459 
//  460   return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
??ZDP_MatchDescReq_9:
        ; Setup parameters for call to function fillAndSend
        MOV       ?V10,#0x6
        MOV       ?V11,#0x0
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R1,?V9
        MOV       R4,?V6
        MOV       R5,?V7
        MOV       R2,#ZDP_TransID & 0xff
        MOV       R3,#(ZDP_TransID >> 8) & 0xff
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
??ZDP_MatchDescReq_1:
        MOV       R7,#0x10
        LJMP      ?BANKED_LEAVE_XDATA
//  461 }
          CFI EndBlock cfiBlock5
//  462 
//  463 /*********************************************************************
//  464  * @fn          ZDP_SimpleDescReq
//  465  *
//  466  * @brief       This builds and send a NWK_Simple_Desc_req
//  467  *              message.  This function sends unicast message to the
//  468  *              destination device.
//  469  *
//  470  * @param       dstAddr - destination address
//  471  * @param       nwkAddr - 16 bit address
//  472  * @param       epIntf - endpoint/interface
//  473  * @param       SecurityEnable - Security Options
//  474  *
//  475  * @return      afStatus_t
//  476  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  477 afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
ZDP_SimpleDescReq:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function ZDP_SimpleDescReq
        CODE
//  478                                     byte endPoint, byte SecurityEnable )
//  479 
//  480 {
        FUNCALL ZDP_SimpleDescReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
        MOV       ?V2,R1
//  481   (void)SecurityEnable;  // Intentionally unreferenced parameter
//  482 
//  483   ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
        MOV       A,?V0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  484   ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
        MOV       R0,?V0
        MOV       R1,?V1
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  485   ZDP_TmpBuf[2] = endPoint;
        MOV       A,?V2
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  486 
//  487   return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
        ; Setup parameters for call to function fillAndSend
        MOV       ?V4,#0x4
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R1,#0x3
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R2,#ZDP_TransID & 0xff
        MOV       R3,#(ZDP_TransID >> 8) & 0xff
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
//  488 }
          CFI EndBlock cfiBlock6
//  489 
//  490 /*********************************************************************
//  491  * @fn          ZDP_UserDescSet
//  492  *
//  493  * @brief       This builds and send a User_Desc_set message to set
//  494  *              the user descriptor.  This function sends unicast
//  495  *              message to the destination device.
//  496  *
//  497  * @param       dstAddr - destination address
//  498  * @param       nwkAddr - 16 bit address
//  499  * @param       UserDescriptor - user descriptor
//  500  * @param       SecurityEnable - Security Options
//  501  *
//  502  * @return      afStatus_t
//  503  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  504 afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
ZDP_UserDescSet:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function ZDP_UserDescSet
        CODE
//  505                           UserDescriptorFormat_t *UserDescriptor,
//  506                           byte SecurityEnable )
//  507 {
        FUNCALL ZDP_UserDescSet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_UserDescSet, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_UserDescSet, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV       A,#-0x14
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV       ?V10,R2
        MOV       ?V11,R3
        MOV       ?V0,R4
        MOV       ?V1,R5
        MOV       ?V7,R1
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V8,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V9,A
//  508   uint8 *pBuf = ZDP_TmpBuf;
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
//  509   byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
//  510               UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0x10
        JNC       ??ZDP_UserDescSet_0
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOVX      A,@DPTR
        MOV       ?V2,A
        SJMP      ??ZDP_UserDescSet_1
??ZDP_UserDescSet_0:
        MOV       ?V2,#0x10
//  511   byte addrLen = 2;
??ZDP_UserDescSet_1:
        MOV       ?V3,#0x2
//  512 
//  513   (void)SecurityEnable;  // Intentionally unreferenced parameter
//  514 
//  515   *pBuf++ = LO_UINT16( nwkAddr );
        MOV       A,?V0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  516   *pBuf++ = HI_UINT16( nwkAddr );
        MOV       R0,?V0
        MOV       R1,?V1
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  517 
//  518   *pBuf++ = len;
        MOV       A,?V2
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  519   addrLen = 3;
        MOV       ?V3,#0x3
//  520 
//  521   pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,?V8
        MOV       DPH,?V9
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       R3,#0x0
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,R3
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       A,?V2
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R6,?V4
        MOV       R7,?V5
//  522   osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
        ; Setup parameters for call to function osal_memset
        MOV       A,?V2
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,#0x10
        CLR       C
        SUBB      A,R0
        MOV       R4,A
        MOV       A,#0x0
        SUBB      A,R1
        MOV       R5,A
        MOV       R1,#0x20
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  523 
//  524   return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
        ; Setup parameters for call to function fillAndSend
        MOV       ?V4,#0x14
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,#0x10
        ADD       A,?V3
        MOV       R1,A
        MOV       R4,?V10
        MOV       R5,?V11
        MOV       R2,#ZDP_TransID & 0xff
        MOV       R3,#(ZDP_TransID >> 8) & 0xff
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R7,#0xc
        LJMP      ?BANKED_LEAVE_XDATA
//  525 }
          CFI EndBlock cfiBlock7
//  526 
//  527 /*********************************************************************
//  528  * @fn          ZDP_ServerDiscReq
//  529  *
//  530  * @brief       Build and send a Server_Discovery_req request message.
//  531  *
//  532  * @param       serverMask - 16-bit bit-mask of server services being sought.
//  533  * @param       SecurityEnable - Security Options
//  534  *
//  535  * @return      afStatus_t
//  536  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  537 afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
ZDP_ServerDiscReq:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function ZDP_ServerDiscReq
        CODE
//  538 {
        FUNCALL ZDP_ServerDiscReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R1
//  539   uint8 *pBuf = ZDP_TmpBuf;
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
//  540   zAddrType_t dstAddr;
//  541 
//  542   dstAddr.addrMode = AddrBroadcast;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0xf
        MOVX      @DPTR,A
//  543   dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x3
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#-0x1
        MOVX      @DPTR,A
//  544 
//  545   *pBuf++ = LO_UINT16( serverMask );
        MOV       A,?V0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  546   *pBuf = HI_UINT16( serverMask );
        MOV       R0,?V0
        MOV       R1,?V1
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  547 
//  548   FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
//  549              ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
        MOV       A,?V2
        JZ        ??ZDP_ServerDiscReq_0
        MOV       DPTR,#ZDP_TxOptions
        MOV       A,#0x40
        MOVX      @DPTR,A
        SJMP      ??ZDP_ServerDiscReq_1
??ZDP_ServerDiscReq_0:
        MOV       DPTR,#ZDP_TxOptions
        MOV       A,#0x0
        MOVX      @DPTR,A
??ZDP_ServerDiscReq_1:
        ; Setup parameters for call to function fillAndSend
        MOV       ?V4,#0x15
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R1,#0x2
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,#ZDP_TransID & 0xff
        MOV       R3,#(ZDP_TransID >> 8) & 0xff
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       A,R1
        MOV       ?V3,A
        MOV       DPTR,#ZDP_TxOptions
        MOV       A,#0x0
        MOVX      @DPTR,A
        MOV       R1,?V3
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
//  550 }
          CFI EndBlock cfiBlock8
//  551 
//  552 /*********************************************************************
//  553  * @fn          ZDP_DeviceAnnce
//  554  *
//  555  * @brief       This builds and send a Device_Annce message.  This
//  556  *              function sends a broadcast message.
//  557  *
//  558  * @param       nwkAddr - 16 bit address of the device
//  559  * @param       IEEEAddr - 64 bit address of the device
//  560  * @param       capabilities - device capabilities.  This field is only
//  561  *                 sent for v1.1 networks.
//  562  * @param       SecurityEnable - Security Options
//  563  *
//  564  * @return      afStatus_t
//  565  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  566 afStatus_t ZDP_DeviceAnnce( uint16 nwkAddr, uint8 *IEEEAddr,
ZDP_DeviceAnnce:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function ZDP_DeviceAnnce
        CODE
//  567                               byte capabilities, byte SecurityEnable )
//  568 {
        FUNCALL ZDP_DeviceAnnce, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_DeviceAnnce, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V2,R4
        MOV       ?V3,R5
        MOV       ?V1,R1
//  569   zAddrType_t dstAddr;
//  570   uint8 len;
//  571 
//  572   (void)SecurityEnable;  // Intentionally unreferenced parameter
//  573 
//  574   dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0xf
        MOVX      @DPTR,A
//  575   dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x3
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#-0x1
        MOVX      @DPTR,A
//  576 
//  577   ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
        MOV       A,R6
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  578   ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
        MOV       A,R6
        MOV       R0,A
        MOV       A,R7
        MOV       R1,A
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  579   osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       R4,?V2
        MOV       R5,?V3
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        ADD       A,#0x2
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R3,A
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
//  580   len = 2 + Z_EXTADDR_LEN;
        MOV       ?V0,#0xa
//  581 
//  582   ZDP_TmpBuf[10] = capabilities;
        MOV       A,?V1
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0xa
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  583   len++;
        INC       ?V0
//  584 
//  585   return fillAndSend( &ZDP_TransID, &dstAddr, Device_annce, len );
        ; Setup parameters for call to function fillAndSend
        MOV       ?V4,#0x13
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R1,?V0
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,#ZDP_TransID & 0xff
        MOV       R3,#(ZDP_TransID >> 8) & 0xff
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
//  586 }
          CFI EndBlock cfiBlock9
//  587 
//  588 /*********************************************************************
//  589  * @fn          ZDP_ParentAnnce
//  590  *
//  591  * @brief       This builds and send a Parent_Annce and Parent_Annce_Rsp
//  592  *              messages, it will depend on the clusterID parameter.
//  593  *
//  594  * @param       TransSeq - ZDP Transaction Sequence Number
//  595  * @param       dstAddr - destination address
//  596  * @param       numberOfChildren - 8 bit number of children
//  597  * @param       childInfo - list of children information (ExtAddr and Age)
//  598  * @param       clusterID - Parent_annce or Parent_annce_rsp
//  599  * @param       SecurityEnable - Security Options
//  600  *
//  601  * @return      afStatus_t
//  602  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  603 afStatus_t ZDP_ParentAnnce( uint8 *TransSeq,
ZDP_ParentAnnce:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function ZDP_ParentAnnce
        CODE
//  604                             zAddrType_t *dstAddr,
//  605                             uint8 numberOfChildren,
//  606                             uint8 *childInfo,
//  607                             cId_t clusterID,
//  608                             uint8 SecurityEnable )
//  609 {
        FUNCALL ZDP_ParentAnnce, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_ParentAnnce, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_ParentAnnce, ZDApp_SetParentAnnceTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_ParentAnnce, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_ParentAnnce, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV       A,#-0x18
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 0
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       ?V4,R4
        MOV       ?V5,R5
        MOV       ?V6,R1
        MOV       A,#0x1a
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
//  610   uint8 *pBuf = ZDP_TmpBuf;
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
//  611   ZDO_ChildInfo_t *pChildInfo;
//  612   uint8 i, len;
//  613   uint8 *numOfChild;
//  614 
//  615   (void)SecurityEnable;  // Intentionally unreferenced parameter
//  616 
//  617   pChildInfo = (ZDO_ChildInfo_t *)childInfo;
        MOV       A,#0x18
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       ?V14,R0
        MOV       ?V15,R1
//  618 
//  619   if ( dstAddr->addrMode == AddrBroadcast )
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0xf
        JNZ       ??ZDP_ParentAnnce_0
//  620   {
//  621     // Make sure is sent to 0xFFFC
//  622     dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOV       A,#-0x4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#-0x1
        MOVX      @DPTR,A
//  623   }
//  624   len = 1;
??ZDP_ParentAnnce_0:
        MOV       ?V2,#0x1
//  625   if ( clusterID == Parent_annce_rsp )
        MOV       A,#0x1f
        XRL       A,R6
        JNZ       ??ZDP_ParentAnnce_1
        MOV       A,#-0x80
        XRL       A,R7
??ZDP_ParentAnnce_1:
        JNZ       ??ZDP_ParentAnnce_2
//  626   {
//  627     // + Status Byte
//  628     len += 1;
        INC       ?V2
//  629     // Set the status bit to success
//  630     *pBuf++ = 0;
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOV       A,#0x0
        MOVX      @DPTR,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        MOV       ?V0,DPL
        MOV       ?V1,DPH
//  631   }
//  632   
//  633   numOfChild = pBuf;
??ZDP_ParentAnnce_2:
        MOV       ?V12,?V0
        MOV       ?V13,?V1
//  634   *pBuf++ = numberOfChildren;
        MOV       A,?V6
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?V0
        MOV       DPH,?V1
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        MOV       ?V0,DPL
        MOV       ?V1,DPH
//  635 
//  636   for ( i = 0; i < MAX_PARENT_ANNCE_CHILD; i++ )
        MOV       ?V3,#0x0
??ZDP_ParentAnnce_3:
        MOV       A,?V3
        CLR       C
        SUBB      A,#0xa
        JC        $+5
        LJMP      ??ZDP_ParentAnnce_4 & 0xFFFF
//  637   {
//  638     pBuf = osal_cpyExtAddr( pBuf, pChildInfo[childIndex].extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       DPTR,#childIndex
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,R0
        MOV       B,#0x8
        MUL       AB
        XCH       A,R0
        MOV       R2,B
        MOV       B,#0x0
        MUL       AB
        ADD       A,R2
        MOV       R2,A
        MOV       B,#0x8
        MOV       A,R1
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       A,?V14
        ADD       A,R0
        MOV       R4,A
        MOV       A,?V15
        ADDC      A,R1
        MOV       R5,A
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        MOV       ?V10,R2
        MOV       ?V11,R3
        MOV       ?V0,?V10
        MOV       ?V1,?V11
//  639     childIndex++;
        MOV       DPTR,#childIndex
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOVX      @DPTR,A
//  640     
//  641     len += Z_EXTADDR_LEN;
        MOV       A,#0x8
        ADD       A,?V2
        MOV       ?V2,A
//  642     
//  643     if ( childIndex == numberOfChildren )
        MOV       DPTR,#childIndex
        MOVX      A,@DPTR
        XRL       A,?V6
        JNZ       ??ZDP_ParentAnnce_5
//  644     {
//  645       pBuf = numOfChild;
        MOV       ?V0,?V12
        MOV       ?V1,?V13
//  646       *pBuf = i + 1;
        MOV       A,#0x1
        ADD       A,?V3
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?V0
        MOV       DPH,?V1
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  647       // All childs are taken, restart index and go out
//  648       childIndex = 0;
        MOV       DPTR,#childIndex
        MOV       A,#0x0
        MOVX      @DPTR,A
//  649       return fillAndSend( TransSeq, dstAddr, clusterID, len );
        ; Setup parameters for call to function fillAndSend
        MOV       ?V10,R6
        MOV       ?V11,R7
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R1,?V2
        MOV       R4,?V4
        MOV       R5,?V5
        MOV       R2,?V8
        MOV       R3,?V9
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        SJMP      ??ZDP_ParentAnnce_6
//  650     }
//  651   }
??ZDP_ParentAnnce_5:
        INC       ?V3
        LJMP      ??ZDP_ParentAnnce_3 & 0xFFFF
//  652   
//  653   pBuf = numOfChild;
??ZDP_ParentAnnce_4:
        MOV       ?V0,?V12
        MOV       ?V1,?V13
//  654   *pBuf = MAX_PARENT_ANNCE_CHILD;
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOV       A,#0xa
        MOVX      @DPTR,A
//  655   if ( childIndex < numberOfChildren )
        MOV       DPTR,#childIndex
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,?V6
        JNC       ??ZDP_ParentAnnce_7
//  656   {
//  657     if ( clusterID == Parent_annce )
        MOV       A,#0x1f
        XRL       A,R6
        JNZ       ??ZDP_ParentAnnce_8
        MOV       A,#0x0
        XRL       A,R7
??ZDP_ParentAnnce_8:
        JNZ       ??ZDP_ParentAnnce_9
//  658     {
//  659       ZDApp_SetParentAnnceTimer();
        ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
        LCALL     `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
//  660     }
//  661     if ( clusterID == Parent_annce_rsp )
??ZDP_ParentAnnce_9:
        MOV       A,#0x1f
        XRL       A,R6
        JNZ       ??ZDP_ParentAnnce_10
        MOV       A,#-0x80
        XRL       A,R7
??ZDP_ParentAnnce_10:
        JNZ       ??ZDP_ParentAnnce_7
//  662     {
//  663       osal_start_timerEx( ZDAppTaskID, ZDO_PARENT_ANNCE_EVT, 10 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_a
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R2,#0x0
        MOV       R3,#0x40
        MOV       DPTR,#ZDAppTaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,R1
//  664     }
//  665   }
//  666 
//  667   return fillAndSend( TransSeq, dstAddr, clusterID, len );
??ZDP_ParentAnnce_7:
        ; Setup parameters for call to function fillAndSend
        MOV       ?V10,R6
        MOV       ?V11,R7
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R1,?V2
        MOV       R4,?V4
        MOV       R5,?V5
        MOV       R2,?V8
        MOV       R3,?V9
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
??ZDP_ParentAnnce_6:
        MOV       R7,#0x10
        LJMP      ?BANKED_LEAVE_XDATA
//  668 }
          CFI EndBlock cfiBlock10
//  669 
//  670 /*********************************************************************
//  671  * Address Responses
//  672  */
//  673 
//  674 /*********************************************************************
//  675  * @fn      zdpProcessAddrReq
//  676  *
//  677  * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
//  678  *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
//  679  *
//  680  * @param   inMsg - incoming message
//  681  *
//  682  * @return  none
//  683  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  684 void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg )
zdpProcessAddrReq:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function zdpProcessAddrReq
        CODE
//  685 {
        FUNCALL zdpProcessAddrReq, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zdpProcessAddrReq, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zdpProcessAddrReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zdpProcessAddrReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V10
        REQUIRE ?V11
        MOV       A,#-0x14
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 8
        MOV       A,#-0x8
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V4,R2
        MOV       ?V5,R3
//  686   associated_devices_t *pAssoc;
//  687   uint8 reqType;
//  688   uint16 aoi = INVALID_NODE_ADDR;
        MOV       R6,#-0x2
        MOV       R7,#-0x1
//  689   uint8 *ieee = NULL;
        MOV       ?V6,#0x0
        MOV       ?V7,#0x0
//  690 
//  691   reqType = inMsg->asdu[(inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
        MOV       A,?V4
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,?V5
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       ??zdpProcessAddrReq_0
        MOV       R0,#0x8
        MOV       R1,#0x0
        SJMP      ??zdpProcessAddrReq_1
??zdpProcessAddrReq_0:
        MOV       R0,#0x2
        MOV       R1,#0x0
??zdpProcessAddrReq_1:
        MOV       A,?V4
        ADD       A,#0x13
        MOV       DPL,A
        CLR       A
        ADDC      A,?V5
        MOV       DPH,A
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,R2
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V3,A
//  692 
//  693   if ( inMsg->clusterID == NWK_addr_req )
        MOV       A,?V4
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,?V5
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       ??zdpProcessAddrReq_2
//  694 
//  695   {
//  696     ieee = inMsg->asdu;
        MOV       A,?V4
        ADD       A,#0x13
        MOV       DPL,A
        CLR       A
        ADDC      A,?V5
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       ?V6,R0
        MOV       ?V7,R1
//  697 
//  698     if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
        ; Setup parameters for call to function sAddrExtCmp
        MOV       R4,?V6
        MOV       R5,?V7
        MOV       R2,#saveExtAddr & 0xff
        MOV       R3,#(saveExtAddr >> 8) & 0xff
        LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV       A,R1
        JZ        ??zdpProcessAddrReq_3
//  699     {
//  700       aoi = ZDAppNwkAddr.addr.shortAddr;
        MOV       DPTR,#ZDAppNwkAddr
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        SJMP      ??zdpProcessAddrReq_3
//  701     }
//  702     // Handle response for sleeping end devices
//  703     else if ( (ZSTACK_ROUTER_BUILD)
//  704       && (((pAssoc = AssocGetWithExt( ieee )) != NULL)
//  705              && ((pAssoc->nodeRelation == CHILD_RFD) || (pAssoc->nodeRelation == CHILD_RFD_RX_IDLE)) ) )
//  706     {
//  707       aoi = pAssoc->shortAddr;
//  708       if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
//  709         reqType = 0xFF; // Force Invalid
//  710     }
//  711   }
//  712   else  // if ( inMsg->clusterID == IEEE_addr_req )
//  713   {
//  714     aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
??zdpProcessAddrReq_2:
        MOV       A,?V4
        ADD       A,#0x13
        MOV       DPL,A
        CLR       A
        ADDC      A,?V5
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       R3,#0x0
        MOV       A,?V4
        ADD       A,#0x13
        MOV       DPL,A
        CLR       A
        ADDC      A,?V5
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       R1,#0x0
        CLR       A
        XCH       A,R0
        MOV       R1,A
        MOV       A,R2
        ADD       A,R0
        MOV       R0,A
        MOV       A,R3
        ADDC      A,R1
        MOV       R1,A
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
//  715 
//  716     if ( aoi == ZDAppNwkAddr.addr.shortAddr )
        MOV       DPTR,#ZDAppNwkAddr
        MOVX      A,@DPTR
        XRL       A,R6
        JNZ       ??zdpProcessAddrReq_4
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R7
??zdpProcessAddrReq_4:
        JNZ       ??zdpProcessAddrReq_3
//  717     {
//  718       ieee = saveExtAddr;
        MOV       ?V6,#saveExtAddr & 0xff
        MOV       ?V7,#(saveExtAddr >> 8) & 0xff
//  719     }
//  720     else if ( (ZSTACK_ROUTER_BUILD)
//  721       && (((pAssoc = AssocGetWithShort( aoi )) != NULL)
//  722              && (pAssoc->nodeRelation == CHILD_RFD)) )
//  723     {
//  724       AddrMgrEntry_t addrEntry;
//  725       addrEntry.user = ADDRMGR_USER_DEFAULT;
//  726       addrEntry.index = pAssoc->addrIdx;
//  727       if ( AddrMgrEntryGet( &addrEntry ) )
//  728       {
//  729         ieee = addrEntry.extAddr;
//  730       }
//  731 
//  732       if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
//  733         reqType = 0xFF; // Force Invalid
//  734     }
//  735   }
//  736 
//  737   if ( ((aoi != INVALID_NODE_ADDR) && (ieee != NULL)) || (inMsg->wasBroadcast == FALSE) )
??zdpProcessAddrReq_3:
        MOV       A,#-0x2
        XRL       A,R6
        JNZ       ??zdpProcessAddrReq_5
        MOV       A,#-0x1
        XRL       A,R7
??zdpProcessAddrReq_5:
        JZ        ??zdpProcessAddrReq_6
        MOV       A,?V6
        ORL       A,?V7
        JNZ       ??zdpProcessAddrReq_7
??zdpProcessAddrReq_6:
        MOV       A,?V4
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,?V5
        MOV       DPH,A
        MOVX      A,@DPTR
        JZ        $+5
        LJMP      ??zdpProcessAddrReq_8 & 0xFFFF
//  738   {
//  739     uint8 stat;
//  740     uint8 *pBuf = ZDP_TmpBuf;
??zdpProcessAddrReq_7:
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
//  741     // Status + IEEE-Addr + Nwk-Addr.
//  742     uint8 len = 1 + Z_EXTADDR_LEN + 2;
        MOV       ?V8,#0xb
//  743 
//  744     // If aoi and iee are both setup, we found results
//  745     if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
        MOV       A,#-0x2
        XRL       A,R6
        JNZ       ??zdpProcessAddrReq_9
        MOV       A,#-0x1
        XRL       A,R7
??zdpProcessAddrReq_9:
        JZ        ??zdpProcessAddrReq_10
        MOV       A,?V6
        ORL       A,?V7
        JZ        ??zdpProcessAddrReq_10
//  746     {
//  747       stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) || (reqType == ZDP_ADDR_REQTYPE_EXTENDED))
//  748                     ? ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
        MOV       A,?V3
        JZ        ??zdpProcessAddrReq_11
        MOV       A,#0x1
        XRL       A,?V3
        JNZ       ??zdpProcessAddrReq_12
??zdpProcessAddrReq_11:
        MOV       ?V2,#0x0
        SJMP      ??zdpProcessAddrReq_13
??zdpProcessAddrReq_12:
        MOV       ?V2,#-0x80
//  749               
//  750       if(stat == ZDP_INVALID_REQTYPE)
??zdpProcessAddrReq_13:
        MOV       A,#-0x80
        XRL       A,?V2
        JNZ       ??zdpProcessAddrReq_14
//  751       {
//  752         //R21 Errata update CCB 2111 
//  753         if(inMsg->wasBroadcast == TRUE)
        MOV       A,?V4
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,?V5
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       $+5
        LJMP      ??zdpProcessAddrReq_8 & 0xFFFF
//  754         {
//  755           return;
//  756         }
//  757         
//  758         stat = ZDP_INVALID_REQTYPE;
        MOV       ?V2,#-0x80
        SJMP      ??zdpProcessAddrReq_14
//  759       }
//  760     }
//  761     else
//  762     {
//  763       // not found and the req was unicast to this device
//  764       stat = ZDP_DEVICE_NOT_FOUND;
??zdpProcessAddrReq_10:
        MOV       ?V2,#-0x7f
//  765 
//  766       // Fill in the missing field with this device's address
//  767       if ( inMsg->clusterID == NWK_addr_req )
        MOV       A,?V4
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,?V5
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       ??zdpProcessAddrReq_15
//  768       {
//  769         //CCB 2112 Zigbee Core spec
//  770         aoi = 0xFFFF;
        MOV       R6,#-0x1
        MOV       R7,#-0x1
        SJMP      ??zdpProcessAddrReq_14
//  771       }
//  772       else
//  773       {
//  774         //CCB 2113 Zigbee Core spec
//  775         uint8 invalidIEEEAddr[Z_EXTADDR_LEN];
//  776         osal_memset(invalidIEEEAddr,0xFF,Z_EXTADDR_LEN);
??zdpProcessAddrReq_15:
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,#-0x1
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  777         ieee = invalidIEEEAddr;
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V10,R0
        MOV       ?V11,R1
        MOV       ?V6,?V10
        MOV       ?V7,?V11
//  778       }
//  779     }
//  780 
//  781     *pBuf++ = stat;
??zdpProcessAddrReq_14:
        MOV       A,?V2
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?V0
        MOV       DPH,?V1
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        MOV       ?V0,DPL
        MOV       ?V1,DPH
//  782 
//  783     pBuf = osal_cpyExtAddr( pBuf, ieee );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       R4,?V6
        MOV       R5,?V7
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        MOV       ?V10,R2
        MOV       ?V11,R3
        MOV       ?V0,?V10
        MOV       ?V1,?V11
//  784 
//  785     *pBuf++ = LO_UINT16( aoi );
        MOV       A,R6
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?V0
        MOV       DPH,?V1
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        MOV       ?V0,DPL
        MOV       ?V1,DPH
//  786     *pBuf++ = HI_UINT16( aoi );
        MOV       A,R6
        MOV       R0,A
        MOV       A,R7
        MOV       R1,A
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?V0
        MOV       DPH,?V1
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        MOV       ?V0,DPL
        MOV       ?V1,DPH
//  787 
//  788     if ( ZSTACK_ROUTER_BUILD )
//  789     {
//  790       if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) && (aoi == ZDAppNwkAddr.addr.shortAddr)
//  791            && (stat == ZDP_SUCCESS) )
//  792       {
//  793         uint8  cnt = 0;
//  794         
//  795         //Updated to only search for ZED devices as per R21 spec (2.4.3.1.1.2)
//  796         uint16 *list = AssocMakeList( &cnt );
//  797 
//  798         if ( list != NULL )
//  799         {
//  800           byte idx = inMsg->asdu[(((inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
//  801           uint16 *pList = list + idx;
//  802 
//  803           // NumAssocDev field is only present on success.
//  804           if ( cnt > idx )
//  805           {
//  806             cnt -= idx;
//  807             len += (cnt * sizeof( uint16 ));
//  808           }
//  809           else
//  810           {
//  811             cnt = 0;
//  812           }
//  813           *pBuf++ = cnt;
//  814           len++;
//  815 
//  816           // StartIndex field is only present if NumAssocDev field is non-zero.
//  817           *pBuf++ = idx;
//  818           len++;
//  819 
//  820           while ( cnt != 0 )
//  821           {
//  822             *pBuf++ = LO_UINT16( *pList );
//  823             *pBuf++ = HI_UINT16( *pList );
//  824             pList++;
//  825             cnt--;
//  826           }
//  827 
//  828           osal_mem_free( (uint8 *)list );
//  829         }
//  830         else
//  831         {
//  832           // NumAssocDev field is only present on success.
//  833           *pBuf++ = 0;
//  834           len++;
//  835         }
//  836       }
//  837     }
//  838 
//  839     ZDP_TxOptions = AF_MSG_ACK_REQUEST;
        MOV       DPTR,#ZDP_TxOptions
        MOV       A,#0x10
        MOVX      @DPTR,A
//  840     fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), (cId_t)(inMsg->clusterID | ZDO_RESPONSE_BIT), len );
        ; Setup parameters for call to function fillAndSend
        MOV       A,?V4
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,?V5
        MOV       DPH,A
        MOVX      A,@DPTR
        ORL       A,#0x0
        MOV       ?V10,A
        INC       DPTR
        MOVX      A,@DPTR
        ORL       A,#0x80
        MOV       ?V11,A
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R1,?V8
        MOV       A,?V4
        ADD       A,#0x2
        MOV       R4,A
        CLR       A
        ADDC      A,?V5
        MOV       R5,A
        MOV       A,?V4
        ADD       A,#0xf
        MOV       R2,A
        CLR       A
        ADDC      A,?V5
        MOV       R3,A
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,R1
//  841     ZDP_TxOptions = AF_TX_OPTIONS_NONE;
        MOV       DPTR,#ZDP_TxOptions
        MOV       A,#0x0
        MOVX      @DPTR,A
//  842   }
//  843 }
??zdpProcessAddrReq_8:
        MOV       A,#0x8
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R7,#0xc
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock11
//  844 
//  845 /*********************************************************************
//  846  * @fn          ZDP_NodeDescMsg
//  847  *
//  848  * @brief       Builds and sends a Node Descriptor message, unicast to the
//  849  *              specified device.
//  850  *
//  851  * @param       inMsg - incoming message
//  852  * @param       nwkAddr - 16 bit network address for device
//  853  * @param       pNodeDesc - pointer to the node descriptor
//  854  *
//  855  * @return      afStatus_t
//  856  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  857 afStatus_t ZDP_NodeDescMsg( zdoIncomingMsg_t *inMsg,
ZDP_NodeDescMsg:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function ZDP_NodeDescMsg
        CODE
//  858                            uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc )
//  859 {
        FUNCALL ZDP_NodeDescMsg, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        MOV       A,#-0x12
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
//  860   uint8 *pBuf = ZDP_TmpBuf;
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
//  861   byte len;
//  862 
//  863   len = 1 + 2 + 13;  // Status + nwkAddr + Node descriptor
        MOV       ?V6,#0x10
//  864 
//  865   *pBuf++ = ZDP_SUCCESS;
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,#0x0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  866 
//  867   *pBuf++ = LO_UINT16( nwkAddr );
        MOV       A,?V2
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  868   *pBuf++ = HI_UINT16( nwkAddr );
        MOV       R0,?V2
        MOV       R1,?V3
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  869 
//  870   *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
//  871                      (pNodeDesc->UserDescAvail << 4) |
//  872                      (pNodeDesc->LogicalType & 0x07));
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        ANL       A,#0x7
        MOV       R1,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.4
        CLR       A
        RLC       A
        SWAP      A
        ANL       A,#0xf0
        MOV       R0,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.3
        CLR       A
        RLC       A
        RLC       A
        RLC       A
        RLC       A
        ANL       A,#0xf8
        ORL       A,R0
        ORL       A,R1
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  873 
//  874   *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,#0x7
        MOV       R0,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        MOVX      A,@DPTR
        RRC       A
        RRC       A
        RRC       A
        ANL       A,#0x1f
        RLC       A
        RLC       A
        RLC       A
        ANL       A,#0xf8
        ORL       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  875   *pBuf++ = pNodeDesc->CapabilityFlags;
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  876   *pBuf++ = pNodeDesc->ManufacturerCode[0];
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  877   *pBuf++ = pNodeDesc->ManufacturerCode[1];
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  878   *pBuf++ = pNodeDesc->MaxBufferSize;
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  879   *pBuf++ = pNodeDesc->MaxInTransferSize[0];
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  880   *pBuf++ = pNodeDesc->MaxInTransferSize[1];
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  881 
//  882   *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  883   *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  884   *pBuf++ = pNodeDesc->MaxOutTransferSize[0];
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  885   *pBuf++ = pNodeDesc->MaxOutTransferSize[1];
        MOV       A,?V0
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  886   *pBuf = pNodeDesc->DescriptorCapability;
        MOV       A,?V0
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  887 
//  888   return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Node_Desc_rsp, len );
        ; Setup parameters for call to function fillAndSend
        MOV       ?V8,#0x2
        MOV       ?V9,#-0x80
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R1,?V6
        MOV       A,?V4
        ADD       A,#0x2
        MOV       R4,A
        CLR       A
        ADDC      A,?V5
        MOV       R5,A
        MOV       A,?V4
        ADD       A,#0xf
        MOV       R2,A
        CLR       A
        ADDC      A,?V5
        MOV       R3,A
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R7,#0xa
        LJMP      ?BANKED_LEAVE_XDATA
//  889 }
          CFI EndBlock cfiBlock12
//  890 
//  891 /*********************************************************************
//  892  * @fn          ZDP_PowerDescMsg
//  893  *
//  894  * @brief       Builds and sends a Power Descriptor message, unicast to the
//  895  *              specified device.
//  896  *
//  897  * @param       inMsg - incoming message (request)
//  898  * @param       nwkAddr - 16 bit network address for device
//  899  * @param       pPowerDesc - pointer to the node descriptor
//  900  *
//  901  * @return      afStatus_t
//  902  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  903 afStatus_t ZDP_PowerDescMsg( zdoIncomingMsg_t *inMsg,
ZDP_PowerDescMsg:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function ZDP_PowerDescMsg
        CODE
//  904                      uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc )
//  905 {
        FUNCALL ZDP_PowerDescMsg, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        MOV       A,#-0x12
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       ?V0,R4
        MOV       ?V1,R5
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
//  906   uint8 *pBuf = ZDP_TmpBuf;
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
//  907   byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
        MOV       ?V6,#0x5
//  908 
//  909   *pBuf++ = ZDP_SUCCESS;
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,#0x0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  910 
//  911   *pBuf++ = LO_UINT16( nwkAddr );
        MOV       A,?V0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  912   *pBuf++ = HI_UINT16( nwkAddr );
        MOV       R0,?V0
        MOV       R1,?V1
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  913 
//  914   *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
//  915                     | (pPowerDesc->PowerMode & 0x0F));
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ANL       A,#0xf
        MOV       R2,A
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        SWAP      A
        ANL       A,#0xf
        SWAP      A
        ANL       A,#0xf0
        ORL       A,R2
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  916   *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
//  917                     | (pPowerDesc->CurrentPowerSource & 0x0F));
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        ANL       A,#0xf
        MOV       R0,A
        MOV       A,R1
        ANL       A,#0x0
        MOV       R1,A
        MOV       A,R0
        MOV       R1,A
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       ?V8,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V9,A
        MOV       A,#0xc
        MOV       R0,#?V8
        LCALL     ?US_SHR
        MOV       A,?V8
        SWAP      A
        ANL       A,#0xf0
        ORL       A,R1
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  918 
//  919   return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Power_Desc_rsp, len );
        ; Setup parameters for call to function fillAndSend
        MOV       ?V8,#0x3
        MOV       ?V9,#-0x80
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R1,?V6
        MOV       A,?V4
        ADD       A,#0x2
        MOV       R4,A
        CLR       A
        ADDC      A,?V5
        MOV       R5,A
        MOV       A,?V4
        ADD       A,#0xf
        MOV       R2,A
        CLR       A
        ADDC      A,?V5
        MOV       R3,A
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R7,#0xa
        LJMP      ?BANKED_LEAVE_XDATA
//  920 }
          CFI EndBlock cfiBlock13
//  921 
//  922 /*********************************************************************
//  923  * @fn          ZDP_SimpleDescMsg
//  924  *
//  925  * @brief       Builds and sends a Simple Descriptor message, unicast to the
//  926  *              specified device.
//  927  *
//  928  * @param       inMsg - incoming message (request)
//  929  * @param       Status - message status (ZDP_SUCCESS or other)
//  930  * @param       pSimpleDesc - pointer to the node descriptor
//  931  *
//  932  * @return      afStatus_t
//  933  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  934 afStatus_t ZDP_SimpleDescMsg( zdoIncomingMsg_t *inMsg, byte Status,
ZDP_SimpleDescMsg:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function ZDP_SimpleDescMsg
        CODE
//  935                               SimpleDescriptionFormat_t *pSimpleDesc )
//  936 {
        FUNCALL ZDP_SimpleDescMsg, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        MOV       A,#-0x12
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       ?V6,R1
        MOV       ?V0,R4
        MOV       ?V1,R5
//  937   uint8 *pBuf = ZDP_TmpBuf;
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
//  938   uint8 i, len;
//  939 
//  940   if ( Status == ZDP_SUCCESS && pSimpleDesc )
        MOV       A,?V6
        JNZ       ??ZDP_SimpleDescMsg_0
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??ZDP_SimpleDescMsg_0
//  941   {
//  942     // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
//  943     len = 1 + 2 + 1 + 8;
        MOV       ?V3,#0xc
//  944     len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters) * sizeof ( uint16 );
        MOV       B,#0x2
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       R1,#0x0
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       R3,#0x0
        MOV       A,R0
        ADD       A,R2
        MOV       R0,A
        MOV       A,R1
        ADDC      A,R3
        MOV       R1,A
        MOV       A,R0
        MUL       AB
        ADD       A,?V3
        MOV       ?V3,A
        SJMP      ??ZDP_SimpleDescMsg_1
//  945   }
//  946   else
//  947   {
//  948     len = 1 + 2 + 1; // Status + desc length
??ZDP_SimpleDescMsg_0:
        MOV       ?V3,#0x4
//  949   }
//  950   if ( len >= ZDP_BUF_SZ-1 )
??ZDP_SimpleDescMsg_1:
        MOV       A,?V3
        CLR       C
        SUBB      A,#0x4f
        JC        ??ZDP_SimpleDescMsg_2
//  951   {
//  952     return afStatus_MEM_FAIL;
        MOV       R1,#0x10
        LJMP      ??ZDP_SimpleDescMsg_3 & 0xFFFF
//  953   }
//  954 
//  955   *pBuf++ = Status;
??ZDP_SimpleDescMsg_2:
        MOV       A,?V6
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  956   
//  957   //From spec 2.4.3.1.5 The NWKAddrOfInterest field shall match 
//  958   //that specified in the original Simple_Desc_req command
//  959   *pBuf++ = inMsg->asdu[0];  
        MOV       A,?V4
        ADD       A,#0x13
        MOV       DPL,A
        CLR       A
        ADDC      A,?V5
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  960   *pBuf++ = inMsg->asdu[1];
        MOV       A,?V4
        ADD       A,#0x13
        MOV       DPL,A
        CLR       A
        ADDC      A,?V5
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  961 
//  962   if ( len > 4 )
        MOV       A,?V3
        CLR       C
        SUBB      A,#0x5
        JNC       $+5
        LJMP      ??ZDP_SimpleDescMsg_4 & 0xFFFF
//  963   {
//  964     *pBuf++ = len - 4;   // Simple descriptor length
        MOV       A,#-0x4
        ADD       A,?V3
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  965 
//  966     *pBuf++ = pSimpleDesc->EndPoint;
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  967     *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  968     *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  969     *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  970     *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  971 
//  972     *pBuf++ = (byte)(pSimpleDesc->AppDevVer & 0x0F);
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,#0xf
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  973 
//  974     *pBuf++ = pSimpleDesc->AppNumInClusters;
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  975     if ( pSimpleDesc->AppNumInClusters )
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??ZDP_SimpleDescMsg_5 & 0xFFFF
//  976     {
//  977       for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
        MOV       ?V2,#0x0
??ZDP_SimpleDescMsg_6:
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,?V2
        CLR       C
        SUBB      A,R0
        JC        $+5
        LJMP      ??ZDP_SimpleDescMsg_5 & 0xFFFF
//  978       {
//  979         *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
        MOV       A,?V2
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,R0
        MOV       B,#0x2
        MUL       AB
        XCH       A,R0
        MOV       R2,B
        MOV       B,#0x0
        MUL       AB
        ADD       A,R2
        MOV       R2,A
        MOV       B,#0x2
        MOV       A,R1
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,R2
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  980         *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
        MOV       A,?V2
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,R0
        MOV       B,#0x2
        MUL       AB
        XCH       A,R0
        MOV       R2,B
        MOV       B,#0x0
        MUL       AB
        ADD       A,R2
        MOV       R2,A
        MOV       B,#0x2
        MOV       A,R1
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,R2
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  981       }
        INC       ?V2
        LJMP      ??ZDP_SimpleDescMsg_6 & 0xFFFF
//  982     }
//  983 
//  984     *pBuf++ = pSimpleDesc->AppNumOutClusters;
??ZDP_SimpleDescMsg_5:
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  985     if ( pSimpleDesc->AppNumOutClusters )
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??ZDP_SimpleDescMsg_7 & 0xFFFF
//  986     {
//  987       for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
        MOV       ?V2,#0x0
??ZDP_SimpleDescMsg_8:
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,?V2
        CLR       C
        SUBB      A,R0
        JC        $+5
        LJMP      ??ZDP_SimpleDescMsg_7 & 0xFFFF
//  988       {
//  989         *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
        MOV       A,?V2
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,R0
        MOV       B,#0x2
        MUL       AB
        XCH       A,R0
        MOV       R2,B
        MOV       B,#0x0
        MUL       AB
        ADD       A,R2
        MOV       R2,A
        MOV       B,#0x2
        MOV       A,R1
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,R2
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  990         *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
        MOV       A,?V2
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,R0
        MOV       B,#0x2
        MUL       AB
        XCH       A,R0
        MOV       R2,B
        MOV       B,#0x0
        MUL       AB
        ADD       A,R2
        MOV       R2,A
        MOV       B,#0x2
        MOV       A,R1
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,R2
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  991       }
        INC       ?V2
        LJMP      ??ZDP_SimpleDescMsg_8 & 0xFFFF
//  992     }
//  993   }
//  994 
//  995   else
//  996   {
//  997     *pBuf = 0; // Description Length = 0;
??ZDP_SimpleDescMsg_4:
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,#0x0
        MOVX      @DPTR,A
//  998   }
//  999 
// 1000   return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Simple_Desc_rsp, len );
??ZDP_SimpleDescMsg_7:
        ; Setup parameters for call to function fillAndSend
        MOV       ?V8,#0x4
        MOV       ?V9,#-0x80
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R1,?V3
        MOV       A,?V4
        ADD       A,#0x2
        MOV       R4,A
        CLR       A
        ADDC      A,?V5
        MOV       R5,A
        MOV       A,?V4
        ADD       A,#0xf
        MOV       R2,A
        CLR       A
        ADDC      A,?V5
        MOV       R3,A
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
??ZDP_SimpleDescMsg_3:
        MOV       R7,#0xa
        LJMP      ?BANKED_LEAVE_XDATA
// 1001 }
          CFI EndBlock cfiBlock14
// 1002 
// 1003 /*********************************************************************
// 1004  * @fn          ZDP_EPRsp
// 1005  *
// 1006  * @brief       This builds and send an endpoint list. Used in
// 1007  *              Active_EP_rsp and Match_Desc_Rsp
// 1008  *              message.  This function sends unicast message to the
// 1009  *              requesting device.
// 1010  *
// 1011  * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
// 1012  * @param       dstAddr - destination address
// 1013  * @param       Status - message status (ZDP_SUCCESS or other)
// 1014  * @param       nwkAddr - Device's short address that this response describes
// 1015  * @param       Count - number of endpoint/interfaces in list
// 1016  * @param       pEPIntfList - Array of Endpoint/Interfaces
// 1017  * @param       SecurityEnable - Security Options
// 1018  *
// 1019  * @return      afStatus_t
// 1020  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1021 afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
ZDP_EPRsp:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function ZDP_EPRsp
        CODE
// 1022                         byte Status, uint16 nwkAddr, byte Count,
// 1023                         uint8 *pEPList,
// 1024                         byte SecurityEnable )
// 1025 {
        FUNCALL ZDP_EPRsp, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_EPRsp, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV       A,#-0x18
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,R1
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       ?V14,R4
        MOV       ?V15,R5
        MOV       A,#0x19
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V10,A
        MOV       A,#0x1a
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       A,#0x1c
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V7,A
        MOV       A,#0x1d
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V12,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V13,A
// 1026   uint8 *pBuf = ZDP_TmpBuf;
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
// 1027   byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
        MOV       ?V9,#0x4
// 1028   byte txOptions;
// 1029 
// 1030   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1031 
// 1032   if ( MsgType == Match_Desc_rsp )
        MOV       A,#0x6
        XRL       A,?V2
        JNZ       ??ZDP_EPRsp_0
        MOV       A,#-0x80
        XRL       A,?V3
??ZDP_EPRsp_0:
        JNZ       ??ZDP_EPRsp_1
// 1033     txOptions = AF_MSG_ACK_REQUEST;
        MOV       ?V8,#0x10
        SJMP      ??ZDP_EPRsp_2
// 1034   else
// 1035     txOptions = 0;
??ZDP_EPRsp_1:
        MOV       ?V8,#0x0
// 1036 
// 1037     *pBuf++ = Status;
??ZDP_EPRsp_2:
        MOV       A,?V10
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1038   *pBuf++ = LO_UINT16( nwkAddr );
        MOV       A,?V0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1039   *pBuf++ = HI_UINT16( nwkAddr );
        MOV       R0,?V0
        MOV       R1,?V1
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1040 
// 1041   *pBuf++ = Count;   // Endpoint/Interface count
        MOV       A,?V7
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1042 
// 1043   if ( Count )
        MOV       A,?V7
        JZ        ??ZDP_EPRsp_3
// 1044   {
// 1045     len += Count;
        MOV       A,?V7
        ADD       A,?V9
        MOV       ?V9,A
// 1046     osal_memcpy( pBuf, pEPList, Count );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,?V12
        MOV       ?V5,?V13
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,?V7
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
// 1047   }
// 1048 
// 1049   FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
??ZDP_EPRsp_3:
        MOV       A,?V8
        MOV       DPTR,#ZDP_TxOptions
        MOVX      @DPTR,A
        ; Setup parameters for call to function fillAndSend
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       R1,?V9
        MOV       R4,?V14
        MOV       R5,?V15
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,R1
        MOV       ?V4,A
        MOV       DPTR,#ZDP_TxOptions
        MOV       A,#0x0
        MOVX      @DPTR,A
        MOV       R1,?V4
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R7,#0x10
        LJMP      ?BANKED_LEAVE_XDATA
// 1050 }
          CFI EndBlock cfiBlock15
// 1051 
// 1052 /*********************************************************************
// 1053  * @fn          ZDP_UserDescRsp
// 1054  *
// 1055  * @brief       Build and send the User Decriptor Response.
// 1056  *
// 1057  *
// 1058  * @param       dstAddr - destination address
// 1059  * @param       nwkAddrOfInterest -
// 1060  * @param       userDesc -
// 1061  * @param       SecurityEnable - Security Options
// 1062  *
// 1063  * @return      ZStatus_t
// 1064  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1065 ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
ZDP_UserDescRsp:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function ZDP_UserDescRsp
        CODE
// 1066                 uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
// 1067                 byte SecurityEnable )
// 1068 {
        FUNCALL ZDP_UserDescRsp, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_UserDescRsp, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV       A,#-0x14
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,R1
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       ?V10,R2
        MOV       ?V11,R3
        MOV       ?V0,R4
        MOV       ?V1,R5
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V8,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V9,A
// 1069   uint8 *pBuf = ZDP_TmpBuf;
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
// 1070   byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
        MOV       ?V2,#0x4
// 1071 
// 1072   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1073 
// 1074   len += userDesc->len;
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOVX      A,@DPTR
        ADD       A,?V2
        MOV       ?V2,A
// 1075 
// 1076   *pBuf++ = ZSUCCESS;
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,#0x0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1077 
// 1078   *pBuf++ = LO_UINT16( nwkAddrOfInterest );
        MOV       A,?V0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1079   *pBuf++ = HI_UINT16( nwkAddrOfInterest );
        MOV       R0,?V0
        MOV       R1,?V1
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1080 
// 1081   *pBuf++ = userDesc->len;
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1082   osal_memcpy( pBuf, userDesc->desc, userDesc->len );
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,?V8
        MOV       DPH,?V9
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       R3,#0x0
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,R3
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
// 1083 
// 1084   return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
        ; Setup parameters for call to function fillAndSend
        MOV       ?V4,#0x11
        MOV       ?V5,#-0x80
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       R1,?V2
        MOV       R4,?V10
        MOV       R5,?V11
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R7,#0xc
        LJMP      ?BANKED_LEAVE_XDATA
// 1085 }
          CFI EndBlock cfiBlock16
// 1086 
// 1087 /*********************************************************************
// 1088  * @fn          ZDP_ServerDiscRsp
// 1089  *
// 1090  * @brief       Build and send the Server_Discovery_rsp response.
// 1091  *
// 1092  * @param       transID - Transaction sequence number of request.
// 1093  * @param       dstAddr - Network Destination Address.
// 1094  * @param       status - Status of response to request.
// 1095  * @param       aoi - Network Address of Interest of request.
// 1096  * @param       serverMask - Bit map of service(s) being sought.
// 1097  * @param       SecurityEnable - Security Options
// 1098  *
// 1099  * @return      ZStatus_t
// 1100  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1101 ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
ZDP_ServerDiscRsp:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function ZDP_ServerDiscRsp
        CODE
// 1102                            uint16 aoi, uint16 serverMask, byte SecurityEnable )
// 1103 {
        FUNCALL ZDP_ServerDiscRsp, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV       A,#-0x12
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       A,R1
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       ?V6,R2
        MOV       ?V7,R3
        MOV       ?V3,R4
        MOV       ?V5,R5
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
// 1104   const byte len = 1  + 2;  // status + aoi + mask.
        MOV       ?V4,#0x3
// 1105   uint8 *pBuf = ZDP_TmpBuf;
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
// 1106   ZStatus_t stat;
// 1107 
// 1108   // Intentionally unreferenced parameters
// 1109   (void)aoi;
// 1110   (void)SecurityEnable;
// 1111 
// 1112   *pBuf++ = status;
        MOV       A,?V3
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1113 
// 1114   *pBuf++ = LO_UINT16( serverMask );
        MOV       A,?V0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1115   *pBuf++ = HI_UINT16( serverMask );
        MOV       R0,?V0
        MOV       R1,?V1
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1116 
// 1117   ZDP_TxOptions = AF_MSG_ACK_REQUEST;
        MOV       DPTR,#ZDP_TxOptions
        MOV       A,#0x10
        MOVX      @DPTR,A
// 1118   stat = fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
        ; Setup parameters for call to function fillAndSend
        MOV       ?V8,#0x15
        MOV       ?V9,#-0x80
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       R1,?V4
        MOV       R4,?V6
        MOV       R5,?V7
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       A,R1
        MOV       ?V2,A
// 1119   ZDP_TxOptions = AF_TX_OPTIONS_NONE;
        MOV       DPTR,#ZDP_TxOptions
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1120 
// 1121   return ( stat );
        MOV       R1,?V2
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R7,#0xa
        LJMP      ?BANKED_LEAVE_XDATA
// 1122 }
          CFI EndBlock cfiBlock17
// 1123 
// 1124 /*********************************************************************
// 1125  * @fn          ZDP_GenericRsp
// 1126  *
// 1127  * @brief       Sends a response message with only the parameter status
// 1128  *              byte and the addr of interest for data.
// 1129  *              This function sends unicast message to the
// 1130  *              requesting device.
// 1131  *
// 1132  * @param       dstAddr - destination address
// 1133  * @param       status  - generic status for response
// 1134  * @param       aoi     - address of interest
// 1135  * @param       dstAddr - destination address
// 1136  * @param       rspId   - response cluster ID
// 1137  * @param       SecurityEnable - Security Options
// 1138  *
// 1139  * @return      afStatus_t
// 1140  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1141 afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
ZDP_GenericRsp:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function ZDP_GenericRsp
        CODE
// 1142                      byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
// 1143 {
        FUNCALL ZDP_GenericRsp, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       A,R1
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V3,R4
        MOV       ?V2,R5
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V7,A
// 1144   uint8 len;
// 1145 
// 1146   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1147 
// 1148   ZDP_TmpBuf[0] = status;
        MOV       A,?V3
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1149   ZDP_TmpBuf[1] = LO_UINT16( aoi );
        MOV       A,R6
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1150   ZDP_TmpBuf[2] = HI_UINT16( aoi );
        MOV       A,R6
        MOV       R0,A
        MOV       A,R7
        MOV       R1,A
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1151 
// 1152   // Length byte
// 1153   ZDP_TmpBuf[3] = 0;
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1154   len = 4;
        MOV       ?V4,#0x4
// 1155 
// 1156   return fillAndSend( &TransSeq, dstAddr, rspID, len );
        ; Setup parameters for call to function fillAndSend
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R1,?V4
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
// 1157 }
          CFI EndBlock cfiBlock18
// 1158 
// 1159 /*********************************************************************
// 1160  * Binding
// 1161  */
// 1162 /*********************************************************************
// 1163  * @fn          ZDP_EndDeviceBindReq
// 1164  *
// 1165  * @brief       This builds and sends a End_Device_Bind_req message.
// 1166  *              This function sends a unicast message.
// 1167  *
// 1168  * @param       dstAddr - destination address
// 1169  * @param       LocalCoordinator - short address of local coordinator
// 1170  * @param       epIntf - Endpoint/Interface of Simple Desc
// 1171  * @param       ProfileID - Profile ID
// 1172  *
// 1173  *   The Input cluster list is the opposite of what you would think.
// 1174  *   This is the output cluster list of this device
// 1175  * @param       NumInClusters - number of input clusters
// 1176  * @param       InClusterList - input cluster ID list
// 1177  *
// 1178  *   The Output cluster list is the opposite of what you would think.
// 1179  *   This is the input cluster list of this device
// 1180  * @param       NumOutClusters - number of output clusters
// 1181  * @param       OutClusterList - output cluster ID list
// 1182  *
// 1183  * @param       SecurityEnable - Security Options
// 1184  *
// 1185  * @return      afStatus_t
// 1186  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1187 afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
ZDP_EndDeviceBindReq:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function ZDP_EndDeviceBindReq
        CODE
// 1188                                  uint16 LocalCoordinator,
// 1189                                  byte endPoint,
// 1190                                  uint16 ProfileID,
// 1191                                  byte NumInClusters, cId_t *InClusterList,
// 1192                                  byte NumOutClusters, cId_t *OutClusterList,
// 1193                                  byte SecurityEnable )
// 1194 {
        FUNCALL ZDP_EndDeviceBindReq, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_EndDeviceBindReq, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_EndDeviceBindReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_EndDeviceBindReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        MOV       A,#-0x17
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 23)
        ; Saved register size: 23
        ; Auto size: 4
        MOV       A,#-0x4
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       ?V0,R4
        MOV       ?V1,R5
        MOV       ?V14,R1
        MOV       A,#0x1b
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       A,#0x1d
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V7,A
        MOV       A,#0x1e
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V12,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V13,A
        MOV       A,#0x20
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V6,A
        MOV       A,#0x21
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V10,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V11,A
// 1195   uint8 *pBuf = ZDP_TmpBuf;
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
// 1196   uint8 i, len;
// 1197   uint8 *ieeeAddr;
// 1198 
// 1199   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1200 
// 1201   // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
// 1202   len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
        MOV       ?V5,#0xf
// 1203   len += (NumInClusters + NumOutClusters) * sizeof ( uint16 );
        MOV       B,#0x2
        MOV       A,?V7
        MOV       R2,A
        MOV       R3,#0x0
        MOV       A,?V6
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,R2
        ADD       A,R0
        MOV       R0,A
        MOV       A,R3
        ADDC      A,R1
        MOV       R1,A
        MOV       A,R0
        MUL       AB
        ADD       A,?V5
        MOV       ?V5,A
// 1204 
// 1205   if ( len >= ZDP_BUF_SZ-1 )
        MOV       A,?V5
        CLR       C
        SUBB      A,#0x4f
        JC        ??ZDP_EndDeviceBindReq_0
// 1206   {
// 1207     return afStatus_MEM_FAIL;
        MOV       R1,#0x10
        LJMP      ??ZDP_EndDeviceBindReq_1 & 0xFFFF
// 1208   }
// 1209 
// 1210   if ( LocalCoordinator != NLME_GetShortAddr() )
??ZDP_EndDeviceBindReq_0:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       A,?V8
        XRL       A,?V0
        JNZ       ??ZDP_EndDeviceBindReq_2
        MOV       A,?V9
        XRL       A,?V1
??ZDP_EndDeviceBindReq_2:
        JZ        ??ZDP_EndDeviceBindReq_3
// 1211   {
// 1212     return afStatus_INVALID_PARAMETER;
        MOV       R1,#0x2
        LJMP      ??ZDP_EndDeviceBindReq_1 & 0xFFFF
// 1213   }
// 1214 
// 1215   *pBuf++ = LO_UINT16( LocalCoordinator );
??ZDP_EndDeviceBindReq_3:
        MOV       A,?V0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1216   *pBuf++ = HI_UINT16( LocalCoordinator );
        MOV       R0,?V0
        MOV       R1,?V1
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1217 
// 1218   ieeeAddr = NLME_GetExtAddr();
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 1219   pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       R6,?V8
        MOV       R7,?V9
// 1220 
// 1221   *pBuf++ = endPoint;
        MOV       A,?V14
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1222 
// 1223   *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
        MOV       A,?V2
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1224   *pBuf++ = HI_UINT16( ProfileID );
        MOV       R0,?V2
        MOV       R1,?V3
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1225 
// 1226   *pBuf++ = NumInClusters; // Input cluster list
        MOV       A,?V7
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1227   for ( i = 0; i < NumInClusters; ++i )
        MOV       ?V4,#0x0
??ZDP_EndDeviceBindReq_4:
        MOV       A,?V4
        CLR       C
        SUBB      A,?V7
        JC        $+5
        LJMP      ??ZDP_EndDeviceBindReq_5 & 0xFFFF
// 1228   {
// 1229     *pBuf++ = LO_UINT16(InClusterList[i]);
        MOV       A,?V4
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,R0
        MOV       B,#0x2
        MUL       AB
        XCH       A,R0
        MOV       R2,B
        MOV       B,#0x0
        MUL       AB
        ADD       A,R2
        MOV       R2,A
        MOV       B,#0x2
        MOV       A,R1
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       A,?V12
        ADD       A,R0
        MOV       DPL,A
        MOV       A,?V13
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1230     *pBuf++ = HI_UINT16(InClusterList[i]);
        MOV       A,?V4
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,R0
        MOV       B,#0x2
        MUL       AB
        XCH       A,R0
        MOV       R2,B
        MOV       B,#0x0
        MUL       AB
        ADD       A,R2
        MOV       R2,A
        MOV       B,#0x2
        MOV       A,R1
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       A,?V12
        ADD       A,R0
        MOV       DPL,A
        MOV       A,?V13
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1231   }
        INC       ?V4
        LJMP      ??ZDP_EndDeviceBindReq_4 & 0xFFFF
// 1232 
// 1233   *pBuf++ = NumOutClusters; // Output cluster list
??ZDP_EndDeviceBindReq_5:
        MOV       A,?V6
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1234   for ( i = 0; i < NumOutClusters; ++i )
        MOV       ?V4,#0x0
??ZDP_EndDeviceBindReq_6:
        MOV       A,?V4
        CLR       C
        SUBB      A,?V6
        JC        $+5
        LJMP      ??ZDP_EndDeviceBindReq_7 & 0xFFFF
// 1235   {
// 1236     *pBuf++ = LO_UINT16(OutClusterList[i]);
        MOV       A,?V4
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,R0
        MOV       B,#0x2
        MUL       AB
        XCH       A,R0
        MOV       R2,B
        MOV       B,#0x0
        MUL       AB
        ADD       A,R2
        MOV       R2,A
        MOV       B,#0x2
        MOV       A,R1
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       A,?V10
        ADD       A,R0
        MOV       DPL,A
        MOV       A,?V11
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1237     *pBuf++ = HI_UINT16(OutClusterList[i]);
        MOV       A,?V4
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,R0
        MOV       B,#0x2
        MUL       AB
        XCH       A,R0
        MOV       R2,B
        MOV       B,#0x0
        MUL       AB
        ADD       A,R2
        MOV       R2,A
        MOV       B,#0x2
        MOV       A,R1
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       A,?V10
        ADD       A,R0
        MOV       DPL,A
        MOV       A,?V11
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1238   }
        INC       ?V4
        LJMP      ??ZDP_EndDeviceBindReq_6 & 0xFFFF
// 1239 
// 1240   return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
??ZDP_EndDeviceBindReq_7:
        ; Setup parameters for call to function fillAndSend
        MOV       ?V8,#0x20
        MOV       ?V9,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       R1,?V5
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       R2,#ZDP_TransID & 0xff
        MOV       R3,#(ZDP_TransID >> 8) & 0xff
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
??ZDP_EndDeviceBindReq_1:
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       R7,#0xf
        LJMP      ?BANKED_LEAVE_XDATA
// 1241 }
          CFI EndBlock cfiBlock19
// 1242 
// 1243 /*********************************************************************
// 1244  * @fn          ZDP_BindUnbindReq
// 1245  *
// 1246  * @brief       This builds and send a Bind_req or Unbind_req message
// 1247  *              Depending on the ClusterID. This function
// 1248  *              sends a unicast message to the local coordinator.
// 1249  *
// 1250  * @param       BindOrUnbind - either Bind_req or Unbind_req
// 1251  * @param       dstAddr - destination address of the message
// 1252  * @param       SourceAddr - source 64 bit address of the binding
// 1253  * @param       SrcEPIntf - Source endpoint/interface
// 1254  * @param       ClusterID - Binding cluster ID
// 1255  * @param       DestinationAddr - destination 64 bit addr of binding
// 1256  * @param       DstEPIntf - destination endpoint/interface
// 1257  * @param       SecurityEnable - Security Options
// 1258  *
// 1259  * @return      afStatus_t
// 1260  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1261 afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
ZDP_BindUnbindReq:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function ZDP_BindUnbindReq
        CODE
// 1262                               uint8 *SourceAddr, byte SrcEndPoint,
// 1263                               cId_t ClusterID,
// 1264                               zAddrType_t *destinationAddr, byte DstEndPoint,
// 1265                               byte SecurityEnable )
// 1266 {
        FUNCALL ZDP_BindUnbindReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_BindUnbindReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_BindUnbindReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV       A,#-0x18
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 0
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       ?V12,R4
        MOV       ?V13,R5
        MOV       ?V9,R1
        MOV       A,#0x18
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V14,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V15,A
        MOV       A,#0x1a
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       A,#0x1c
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V5,A
        MOV       A,#0x1e
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V8,A
// 1267   uint8 *pBuf = ZDP_TmpBuf;
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
// 1268   byte len;
// 1269 
// 1270   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1271 
// 1272   // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
// 1273   len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
        MOV       ?V6,#0xc
// 1274   if ( destinationAddr->addrMode == Addr64Bit )
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x3
        JNZ       ??ZDP_BindUnbindReq_0
// 1275     len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
        MOV       A,#0x9
        ADD       A,?V6
        MOV       ?V6,A
        SJMP      ??ZDP_BindUnbindReq_1
// 1276   else if ( destinationAddr->addrMode == AddrGroup )
??ZDP_BindUnbindReq_0:
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDP_BindUnbindReq_1
// 1277     len += sizeof ( uint16 );
        MOV       A,#0x2
        ADD       A,?V6
        MOV       ?V6,A
// 1278 
// 1279   pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
??ZDP_BindUnbindReq_1:
        ; Setup parameters for call to function sAddrExtCpy
        MOV       R4,?V14
        MOV       R5,?V15
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        MOV       ?V10,R2
        MOV       ?V11,R3
        MOV       R6,?V10
        MOV       R7,?V11
// 1280   *pBuf++ = SrcEndPoint;
        MOV       A,?V9
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1281 
// 1282   *pBuf++ = LO_UINT16( ClusterID );
        MOV       A,?V0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1283 
// 1284   *pBuf++ = HI_UINT16( ClusterID );
        MOV       R0,?V0
        MOV       R1,?V1
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1285   *pBuf++ = destinationAddr->addrMode;
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1286   if ( destinationAddr->addrMode == Addr64Bit )
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x3
        JNZ       ??ZDP_BindUnbindReq_2
// 1287   {
// 1288     pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       R4,?V4
        MOV       R5,?V5
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        MOV       ?V10,R2
        MOV       ?V11,R3
        MOV       R6,?V10
        MOV       R7,?V11
// 1289     *pBuf = DstEndPoint;
        MOV       A,?V8
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        SJMP      ??ZDP_BindUnbindReq_3
// 1290   }
// 1291   else if ( destinationAddr->addrMode == AddrGroup )
??ZDP_BindUnbindReq_2:
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDP_BindUnbindReq_3
// 1292   {
// 1293     *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1294     *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1295   }
// 1296 
// 1297   FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
??ZDP_BindUnbindReq_3:
        MOV       DPTR,#ZDP_TxOptions
        MOV       A,#0x10
        MOVX      @DPTR,A
        ; Setup parameters for call to function fillAndSend
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R1,?V6
        MOV       R4,?V12
        MOV       R5,?V13
        MOV       R2,#ZDP_TransID & 0xff
        MOV       R3,#(ZDP_TransID >> 8) & 0xff
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,R1
        MOV       ?V7,A
        MOV       DPTR,#ZDP_TxOptions
        MOV       A,#0x0
        MOVX      @DPTR,A
        MOV       R1,?V7
        MOV       R7,#0x10
        LJMP      ?BANKED_LEAVE_XDATA
// 1298 }
          CFI EndBlock cfiBlock20
// 1299 
// 1300 /*********************************************************************
// 1301  * Network Management
// 1302  */
// 1303 
// 1304 /*********************************************************************
// 1305  * @fn          ZDP_MgmtNwkDiscReq
// 1306  *
// 1307  * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
// 1308  *              function sends a unicast message.
// 1309  *
// 1310  * @param       dstAddr - destination address of the message
// 1311  * @param       ScanChannels - 32 bit address bit map
// 1312  * @param       StartIndex - Starting index within the reporting network
// 1313  *                           list
// 1314  * @param       SecurityEnable - Security Options
// 1315  *
// 1316  * @return      afStatus_t
// 1317  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1318 afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
ZDP_MgmtNwkDiscReq:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function ZDP_MgmtNwkDiscReq
        CODE
// 1319                                uint32 ScanChannels,
// 1320                                byte ScanDuration,
// 1321                                byte StartIndex,
// 1322                                byte SecurityEnable )
// 1323 {
        FUNCALL ZDP_MgmtNwkDiscReq, osal_buffer_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtNwkDiscReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV       A,#-0x16
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 0
        MOV       ?V12,R2
        MOV       ?V13,R3
        MOV       A,R1
        MOV       R6,A
        MOV       A,R4
        MOV       R7,A
        MOV       ?V8,R5
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       ?V4,?V0
        MOV       ?V5,?V1
        MOV       ?V6,?V2
        MOV       ?V7,?V3
// 1324   uint8 *pBuf = ZDP_TmpBuf;
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
// 1325   byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
        MOV       ?V2,#0x6
// 1326 
// 1327   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1328 
// 1329   pBuf = osal_buffer_uint32( pBuf, ScanChannels );
        ; Setup parameters for call to function osal_buffer_uint32
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V10,R2
        MOV       ?V11,R3
        MOV       ?V0,?V10
        MOV       ?V1,?V11
// 1330 
// 1331   *pBuf++ = ScanDuration;
        MOV       A,R6
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?V0
        MOV       DPH,?V1
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        MOV       ?V0,DPL
        MOV       ?V1,DPH
// 1332   *pBuf = StartIndex;
        MOV       A,R7
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?V0
        MOV       DPH,?V1
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1333 
// 1334   return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
        ; Setup parameters for call to function fillAndSend
        MOV       ?V10,#0x30
        MOV       ?V11,#0x0
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R1,?V2
        MOV       R4,?V12
        MOV       R5,?V13
        MOV       R2,#ZDP_TransID & 0xff
        MOV       R3,#(ZDP_TransID >> 8) & 0xff
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R7,#0xe
        LJMP      ?BANKED_LEAVE_XDATA
// 1335 }
          CFI EndBlock cfiBlock21
// 1336 
// 1337 /*********************************************************************
// 1338  * @fn          ZDP_MgmtDirectJoinReq
// 1339  *
// 1340  * @brief       This builds and send a Mgmt_Direct_Join_req message. This
// 1341  *              function sends a unicast message.
// 1342  *
// 1343  * @param       dstAddr - destination address of the message
// 1344  * @param       deviceAddr - 64 bit IEEE Address
// 1345  * @param       SecurityEnable - Security Options
// 1346  *
// 1347  * @return      afStatus_t
// 1348  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1349 afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
ZDP_MgmtDirectJoinReq:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function ZDP_MgmtDirectJoinReq
        CODE
// 1350                                uint8 *deviceAddr,
// 1351                                byte capInfo,
// 1352                                byte SecurityEnable )
// 1353 {
        FUNCALL ZDP_MgmtDirectJoinReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtDirectJoinReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
        MOV       ?V2,R1
// 1354   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1355 
// 1356   osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 1357   ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
        MOV       A,?V2
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x8
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1358 
// 1359   return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
        ; Setup parameters for call to function fillAndSend
        MOV       ?V4,#0x35
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R1,#0x9
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       R2,#ZDP_TransID & 0xff
        MOV       R3,#(ZDP_TransID >> 8) & 0xff
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
// 1360 }
          CFI EndBlock cfiBlock22
// 1361 
// 1362 /*********************************************************************
// 1363  * @fn          ZDP_MgmtPermitJoinReq
// 1364  *
// 1365  * @brief       This builds and send a Mgmt_Permit_Join_req message.
// 1366  *
// 1367  * @param       dstAddr - destination address of the message
// 1368  * @param       duration - Permit duration
// 1369  * @param       TcSignificance - Trust Center Significance
// 1370  *
// 1371  * @return      afStatus_t
// 1372  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1373 afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
ZDP_MgmtPermitJoinReq:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function ZDP_MgmtPermitJoinReq
        CODE
// 1374                                   byte TcSignificance, byte SecurityEnable )
// 1375 {
        FUNCALL ZDP_MgmtPermitJoinReq, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtPermitJoinReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtPermitJoinReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V1,R1
        MOV       ?V2,R4
        MOV       ?V0,R5
// 1376   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1377 
// 1378   // Build buffer
// 1379   ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
        MOV       A,?V1
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1380   ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
        MOV       A,?V2
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1381 
// 1382   // Check of this is a broadcast message
// 1383   if ( (dstAddr) && ((dstAddr->addrMode == Addr16Bit) || (dstAddr->addrMode == AddrBroadcast))
// 1384       && ((dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL)
// 1385           || (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR)
// 1386           || (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVRXON)) )
        MOV       A,R6
        ORL       A,R7
        JNZ       $+5
        LJMP      ??ZDP_MgmtPermitJoinReq_0 & 0xFFFF
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x2
        JZ        ??ZDP_MgmtPermitJoinReq_1
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0xf
        JNZ       ??ZDP_MgmtPermitJoinReq_0
??ZDP_MgmtPermitJoinReq_1:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        XRL       A,#0xff
        JNZ       ??ZDP_MgmtPermitJoinReq_2
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0xff
??ZDP_MgmtPermitJoinReq_2:
        JZ        ??ZDP_MgmtPermitJoinReq_3
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        XRL       A,#0xfc
        JNZ       ??ZDP_MgmtPermitJoinReq_4
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0xff
??ZDP_MgmtPermitJoinReq_4:
        JZ        ??ZDP_MgmtPermitJoinReq_3
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        XRL       A,#0xfd
        JNZ       ??ZDP_MgmtPermitJoinReq_5
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0xff
??ZDP_MgmtPermitJoinReq_5:
        JNZ       ??ZDP_MgmtPermitJoinReq_0
// 1387   {
// 1388     // Send this to our self as well as broadcast to network
// 1389     zAddrType_t tmpAddr;
// 1390 
// 1391     tmpAddr.addrMode = Addr16Bit;
??ZDP_MgmtPermitJoinReq_3:
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
// 1392     tmpAddr.addr.shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 1393 
// 1394     fillAndSend( &ZDP_TransID, &tmpAddr, Mgmt_Permit_Join_req,
// 1395                       ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
        ; Setup parameters for call to function fillAndSend
        MOV       ?V4,#0x36
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R1,#0x2
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,#ZDP_TransID & 0xff
        MOV       R3,#(ZDP_TransID >> 8) & 0xff
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       A,R1
// 1396   }
// 1397 
// 1398   // Send the message
// 1399   return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
// 1400                       ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
??ZDP_MgmtPermitJoinReq_0:
        ; Setup parameters for call to function fillAndSend
        MOV       ?V4,#0x36
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R1,#0x2
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R2,#ZDP_TransID & 0xff
        MOV       R3,#(ZDP_TransID >> 8) & 0xff
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
// 1401 }
          CFI EndBlock cfiBlock23
// 1402 
// 1403 /*********************************************************************
// 1404  * @fn          ZDP_MgmtLeaveReq
// 1405  *
// 1406  * @brief       This builds and send a Mgmt_Leave_req message.
// 1407  *
// 1408  * @param       dstAddr - destination address of the message
// 1409  *              IEEEAddr - IEEE adddress of device that is removed
// 1410  *              RemoveChildren - set to 1 to remove the children of the
// 1411  *                                device as well. 0 otherwise.
// 1412  *              Rejoin - set to 1 if the removed device should rejoin
// 1413                          afterwards. 0 otherwise.
// 1414  *
// 1415  * @return      afStatus_t
// 1416  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1417 afStatus_t ZDP_MgmtLeaveReq( zAddrType_t *dstAddr, uint8 *IEEEAddr, uint8 RemoveChildren,
ZDP_MgmtLeaveReq:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function ZDP_MgmtLeaveReq
        CODE
// 1418                  uint8 Rejoin, uint8 SecurityEnable )
// 1419 
// 1420 {
        FUNCALL ZDP_MgmtLeaveReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtLeaveReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
        MOV       ?V3,R1
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V2,A
// 1421   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1422 
// 1423   osal_cpyExtAddr( ZDP_TmpBuf, IEEEAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 1424   ZDP_TmpBuf[Z_EXTADDR_LEN] = 0;
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x8
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1425 
// 1426   if ( RemoveChildren == TRUE )
        MOV       A,#0x1
        XRL       A,?V3
        JNZ       ??ZDP_MgmtLeaveReq_0
// 1427   {
// 1428     ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_RC;
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x8
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.6
        MOVX      @DPTR,A
// 1429   }
// 1430   if ( Rejoin == TRUE )
??ZDP_MgmtLeaveReq_0:
        MOV       A,#0x1
        XRL       A,?V2
        JNZ       ??ZDP_MgmtLeaveReq_1
// 1431   {
// 1432     ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_REJOIN;
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x8
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.7
        MOVX      @DPTR,A
// 1433   }
// 1434 
// 1435   return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Leave_req, (Z_EXTADDR_LEN + 1) );
??ZDP_MgmtLeaveReq_1:
        ; Setup parameters for call to function fillAndSend
        MOV       ?V4,#0x34
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R1,#0x9
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R2,#ZDP_TransID & 0xff
        MOV       R3,#(ZDP_TransID >> 8) & 0xff
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
// 1436 }
          CFI EndBlock cfiBlock24
// 1437 
// 1438 /*********************************************************************
// 1439  * @fn          ZDP_MgmtNwkUpdateReq
// 1440  *
// 1441  * @brief       This builds and send a Mgmt_NWK_Update_req message. This
// 1442  *              function sends a unicast or broadcast message.
// 1443  *
// 1444  * @param       dstAddr - destination address of the message
// 1445  * @param       ChannelMask - 32 bit address bit map
// 1446  * @param       ScanDuration - length of time to spend scanning each channel
// 1447  * @param       ScanCount - number of energy scans to be conducted
// 1448  * @param       NwkUpdateId - NWk Update Id value
// 1449  * @param       NwkManagerAddr - NWK address for device with Network Manager
// 1450  *                               bit set in its Node Descriptor
// 1451  *
// 1452  * @return      afStatus_t
// 1453  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1454 afStatus_t ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
ZDP_MgmtNwkUpdateReq:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function ZDP_MgmtNwkUpdateReq
        CODE
// 1455                                  uint32 ChannelMask,
// 1456                                  uint8 ScanDuration,
// 1457                                  uint8 ScanCount,
// 1458                                  uint8 NwkUpdateId,
// 1459                                  uint16 NwkManagerAddr )
// 1460 {
        FUNCALL ZDP_MgmtNwkUpdateReq, osal_buffer_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtNwkUpdateReq, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV       A,#-0x16
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 0
        MOV       ?V12,R2
        MOV       ?V13,R3
        MOV       A,R1
        MOV       R7,A
        MOV       ?V9,R4
        MOV       ?V8,R5
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       A,#0x1a
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
// 1461   uint8 *pBuf = ZDP_TmpBuf;
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
// 1462   byte len = sizeof( uint32 ) + 1;  // ChannelMask + ScanDuration
        MOV       R6,#0x5
// 1463 
// 1464   pBuf = osal_buffer_uint32( pBuf, ChannelMask );
        ; Setup parameters for call to function osal_buffer_uint32
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V10,R2
        MOV       ?V11,R3
        MOV       ?V0,?V10
        MOV       ?V1,?V11
// 1465 
// 1466   *pBuf++ = ScanDuration;
        MOV       A,R7
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?V0
        MOV       DPH,?V1
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        MOV       ?V0,DPL
        MOV       ?V1,DPH
// 1467 
// 1468   if ( ScanDuration <= 0x05 )
        MOV       A,R7
        CLR       C
        SUBB      A,#0x6
        JNC       ??ZDP_MgmtNwkUpdateReq_0
// 1469   {
// 1470     // Request is to scan over channelMask
// 1471     len += sizeof( uint8 );
        INC       R6
// 1472 
// 1473     *pBuf++ = ScanCount;
        MOV       A,?V9
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?V0
        MOV       DPH,?V1
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        MOV       ?V0,DPL
        MOV       ?V1,DPH
        SJMP      ??ZDP_MgmtNwkUpdateReq_1
// 1474   }
// 1475   else if ( ( ScanDuration == 0xFE ) || ( ScanDuration == 0xFF ) )
??ZDP_MgmtNwkUpdateReq_0:
        MOV       A,#-0x2
        XRL       A,R7
        JZ        ??ZDP_MgmtNwkUpdateReq_2
        MOV       A,#-0x1
        XRL       A,R7
        JNZ       ??ZDP_MgmtNwkUpdateReq_1
// 1476   {
// 1477     // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
// 1478     len += sizeof( uint8 );
??ZDP_MgmtNwkUpdateReq_2:
        INC       R6
// 1479 
// 1480     *pBuf++ = NwkUpdateId;
        MOV       A,?V8
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?V0
        MOV       DPH,?V1
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        MOV       ?V0,DPL
        MOV       ?V1,DPH
// 1481 
// 1482     if ( ScanDuration == 0xFF )
        MOV       A,#-0x1
        XRL       A,R7
        JNZ       ??ZDP_MgmtNwkUpdateReq_1
// 1483     {
// 1484       len += sizeof( uint16 );
        MOV       A,#0x2
        ADD       A,R6
        MOV       R6,A
// 1485 
// 1486       *pBuf++  = LO_UINT16( NwkManagerAddr );
        MOV       A,?V2
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?V0
        MOV       DPH,?V1
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        MOV       ?V0,DPL
        MOV       ?V1,DPH
// 1487       *pBuf++  = HI_UINT16( NwkManagerAddr );
        MOV       R0,?V2
        MOV       R1,?V3
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?V0
        MOV       DPH,?V1
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        MOV       ?V0,DPL
        MOV       ?V1,DPH
// 1488     }
// 1489   }
// 1490 
// 1491   return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Update_req, len );
??ZDP_MgmtNwkUpdateReq_1:
        ; Setup parameters for call to function fillAndSend
        MOV       ?V10,#0x38
        MOV       ?V11,#0x0
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,R6
        MOV       R1,A
        MOV       R4,?V12
        MOV       R5,?V13
        MOV       R2,#ZDP_TransID & 0xff
        MOV       R3,#(ZDP_TransID >> 8) & 0xff
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R7,#0xe
        LJMP      ?BANKED_LEAVE_XDATA
// 1492 }
          CFI EndBlock cfiBlock25
// 1493 
// 1494 
// 1495 /*********************************************************************
// 1496  * Network Management Responses
// 1497  */
// 1498 
// 1499 /*********************************************************************
// 1500  * @fn          ZDP_MgmtNwkDiscRsp
// 1501  *
// 1502  * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
// 1503  *              function sends a unicast message.
// 1504  *
// 1505  * @param       dstAddr - destination address of the message
// 1506  * @param       Status - message status (ZDP_SUCCESS or other)
// 1507  * @param       NetworkCount - Total number of networks found
// 1508  * @param       StartIndex - Starting index within the reporting network
// 1509  *                           list
// 1510  * @param       NetworkListCount - number of network lists included
// 1511  *                                 in this message
// 1512  * @param       NetworkList - List of network descriptors
// 1513  * @param       SecurityEnable - Security Options
// 1514  *
// 1515  * @return      afStatus_t
// 1516  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1517 afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
ZDP_MgmtNwkDiscRsp:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function ZDP_MgmtNwkDiscRsp
        CODE
// 1518                             byte Status,
// 1519                             byte NetworkCount,
// 1520                             byte StartIndex,
// 1521                             byte NetworkListCount,
// 1522                             networkDesc_t *NetworkList,
// 1523                             byte SecurityEnable )
// 1524 {
        FUNCALL ZDP_MgmtNwkDiscRsp, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtNwkDiscRsp, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtNwkDiscRsp, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtNwkDiscRsp, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V14
        REQUIRE ?V15
        MOV       A,#-0x18
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,R1
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       ?V14,R2
        MOV       ?V15,R3
        MOV       ?V12,R4
        MOV       ?V11,R5
        MOV       A,#0x19
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V10,A
        MOV       A,#0x1a
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       A,#0x1b
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
// 1525   uint8 *buf;
// 1526   uint8 *pBuf;
// 1527   byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
        MOV       ?V2,#0x4
// 1528   byte idx;
// 1529 
// 1530   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1531 
// 1532   len += (NetworkListCount * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
        MOV       B,#0xc
        MOV       A,?V3
        MUL       AB
        ADD       A,?V2
        MOV       ?V2,A
// 1533 
// 1534   buf = osal_mem_alloc( len+1 );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       A,?V2
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,R0
        ADD       A,#0x1
        MOV       R2,A
        CLR       A
        ADDC      A,R1
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       ?V6,?V8
        MOV       ?V7,?V9
// 1535   if ( buf == NULL )
        MOV       A,?V6
        ORL       A,?V7
        JNZ       ??ZDP_MgmtNwkDiscRsp_0
// 1536   {
// 1537     return afStatus_MEM_FAIL;
        MOV       R1,#0x10
        LJMP      ??ZDP_MgmtNwkDiscRsp_1 & 0xFFFF
// 1538   }
// 1539 
// 1540   pBuf = buf+1;
??ZDP_MgmtNwkDiscRsp_0:
        MOV       DPL,?V6
        MOV       DPH,?V7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1541 
// 1542   *pBuf++ = Status;
        MOV       A,?V12
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1543   *pBuf++ = NetworkCount;
        MOV       A,?V11
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1544   *pBuf++ = StartIndex;
        MOV       A,?V10
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1545   *pBuf++ = NetworkListCount;
        MOV       A,?V3
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1546 
// 1547   for ( idx = 0; idx < NetworkListCount; idx++ )
        MOV       ?V4,#0x0
??ZDP_MgmtNwkDiscRsp_2:
        MOV       A,?V4
        CLR       C
        SUBB      A,?V3
        JC        $+5
        LJMP      ??ZDP_MgmtNwkDiscRsp_3 & 0xFFFF
// 1548   {
// 1549     osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
        ; Setup parameters for call to function sAddrExtCpy
        MOV       A,?V0
        ADD       A,#0xb
        MOV       R4,A
        CLR       A
        ADDC      A,?V1
        MOV       R5,A
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 1550     pBuf += Z_EXTADDR_LEN;
        MOV       A,R6
        ADD       A,#0x8
        MOV       R6,A
        JNC       ??ZDP_MgmtNwkDiscRsp_4
        INC       R7
// 1551 
// 1552     *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
??ZDP_MgmtNwkDiscRsp_4:
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1553     *pBuf    = NetworkList->stackProfile;                  // Stack profile
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1554     *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        SWAP      A
        ANL       A,#0xf0
        MOV       R0,A
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        ORL       A,R0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1555     *pBuf    = BEACON_ORDER_NO_BEACONS;                    // Beacon Order
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,#0xf
        MOVX      @DPTR,A
// 1556     *pBuf++ |= (uint8)(BEACON_ORDER_NO_BEACONS << 4);      // Superframe Order
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        ORL       A,#0xf0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1557 
// 1558     if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0xfe
        JNZ       ??ZDP_MgmtNwkDiscRsp_5
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0xff
??ZDP_MgmtNwkDiscRsp_5:
        JZ        ??ZDP_MgmtNwkDiscRsp_6
// 1559     {
// 1560       *pBuf++ = TRUE;                         // Permit Joining
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,#0x1
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
        SJMP      ??ZDP_MgmtNwkDiscRsp_7
// 1561     }
// 1562     else
// 1563     {
// 1564       *pBuf++ = FALSE;
??ZDP_MgmtNwkDiscRsp_6:
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,#0x0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1565     }
// 1566 
// 1567     NetworkList = NetworkList->nextDesc;    // Move to next list entry
??ZDP_MgmtNwkDiscRsp_7:
        MOV       A,?V0
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
// 1568   }
        INC       ?V4
        LJMP      ??ZDP_MgmtNwkDiscRsp_2 & 0xFFFF
// 1569 
// 1570   FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
??ZDP_MgmtNwkDiscRsp_3:
        MOV       DPL,?V6
        MOV       DPH,?V7
        INC       DPTR
        MOV       R0,DPL
        MOV       R1,DPH
        MOV       DPTR,#ZDP_TmpBuf
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        ; Setup parameters for call to function fillAndSend
        MOV       ?V8,#0x30
        MOV       ?V9,#-0x80
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       R1,?V2
        MOV       R4,?V14
        MOV       R5,?V15
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,R1
        MOV       ?V5,A
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        MOV       DPTR,#ZDP_TmpBuf
        MOV       A,#(ZDP_Buf + 1) & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#((ZDP_Buf + 1) >> 8) & 0xff
        MOVX      @DPTR,A
        MOV       R1,?V5
??ZDP_MgmtNwkDiscRsp_1:
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R7,#0x10
        LJMP      ?BANKED_LEAVE_XDATA
// 1571 }
          CFI EndBlock cfiBlock26
// 1572 
// 1573 /*********************************************************************
// 1574  * @fn          ZDP_MgmtLqiRsp
// 1575  *
// 1576  * @brief       This builds and send a Mgmt_Lqi_rsp message. This
// 1577  *              function sends a unicast message.
// 1578  *
// 1579  * @param       dstAddr - destination address of the message
// 1580  * @param       Status - message status (ZDP_SUCCESS or other)
// 1581  * @param       NeighborLqiEntries - Total number of entries found
// 1582  * @param       StartIndex - Starting index within the reporting list
// 1583  * @param       NeighborLqiCount - number of lists included
// 1584  *                                 in this message
// 1585  * @param       NeighborLqiList - List of NeighborLqiItems.  This list
// 1586  *                is the list to be sent, not the entire list
// 1587  * @param       SecurityEnable - true if secure
// 1588  *
// 1589  * @return      ZStatus_t
// 1590  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1591 ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
ZDP_MgmtLqiRsp:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function ZDP_MgmtLqiRsp
        CODE
// 1592                           byte Status,
// 1593                           byte NeighborLqiEntries,
// 1594                           byte StartIndex,
// 1595                           byte NeighborLqiCount,
// 1596                           ZDP_MgmtLqiItem_t* NeighborList,
// 1597                           byte SecurityEnable )
// 1598 {
        FUNCALL ZDP_MgmtLqiRsp, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtLqiRsp, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtLqiRsp, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtLqiRsp, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtLqiRsp, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtLqiRsp, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V14
        REQUIRE ?V15
        MOV       A,#-0x18
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,R1
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       ?V14,R2
        MOV       ?V15,R3
        MOV       ?V4,R4
        MOV       ?V12,R5
        MOV       A,#0x19
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V11,A
        MOV       A,#0x1a
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V6,A
// 1599   ZDP_MgmtLqiItem_t* list = NeighborList;
        MOV       A,#0x1b
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
// 1600   uint8 *buf, *pBuf;
// 1601   byte len, x;
// 1602 
// 1603   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1604 
// 1605   if ( ZSuccess != Status )
        MOV       A,?V4
        JZ        ??ZDP_MgmtLqiRsp_0
// 1606   {
// 1607     ZDP_TmpBuf[0] = Status;
        MOV       A,?V4
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPTR,#ZDP_TmpBuf
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1608     return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
        ; Setup parameters for call to function fillAndSend
        MOV       ?V8,#0x31
        MOV       ?V9,#-0x80
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       R1,#0x1
        MOV       R4,?V14
        MOV       R5,?V15
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        LJMP      ??ZDP_MgmtLqiRsp_1 & 0xFFFF
// 1609   }
// 1610 
// 1611   // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
// 1612   //  neighbor LQI data.
// 1613   len = (1 + 1 + 1 + 1) + (NeighborLqiCount * ZDP_MGMTLQI_EXTENDED_SIZE);
??ZDP_MgmtLqiRsp_0:
        MOV       B,#0x16
        MOV       A,?V6
        MUL       AB
        ADD       A,#0x4
        MOV       ?V10,A
// 1614 
// 1615   buf = osal_mem_alloc( len+1 );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       A,?V10
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,R0
        ADD       A,#0x1
        MOV       R2,A
        CLR       A
        ADDC      A,R1
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       ?V2,?V8
        MOV       ?V3,?V9
// 1616   if ( buf == NULL )
        MOV       A,?V2
        ORL       A,?V3
        JNZ       ??ZDP_MgmtLqiRsp_2
// 1617   {
// 1618     return afStatus_MEM_FAIL;
        MOV       R1,#0x10
        LJMP      ??ZDP_MgmtLqiRsp_1 & 0xFFFF
// 1619   }
// 1620 
// 1621   pBuf = buf+1;
??ZDP_MgmtLqiRsp_2:
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1622 
// 1623   *pBuf++ = Status;
        MOV       A,?V4
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1624   *pBuf++ = NeighborLqiEntries;
        MOV       A,?V12
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1625   *pBuf++ = StartIndex;
        MOV       A,?V11
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1626   *pBuf++ = NeighborLqiCount;
        MOV       A,?V6
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1627 
// 1628   for ( x = 0; x < NeighborLqiCount; x++ )
        MOV       ?V7,#0x0
??ZDP_MgmtLqiRsp_3:
        MOV       A,?V7
        CLR       C
        SUBB      A,?V6
        JC        $+5
        LJMP      ??ZDP_MgmtLqiRsp_4 & 0xFFFF
// 1629   {
// 1630     osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
        ; Setup parameters for call to function sAddrExtCpy
        MOV       A,?V0
        ADD       A,#0x2
        MOV       R4,A
        CLR       A
        ADDC      A,?V1
        MOV       R5,A
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 1631     pBuf += Z_EXTADDR_LEN;
        MOV       A,R6
        ADD       A,#0x8
        MOV       R6,A
        JNC       ??ZDP_MgmtLqiRsp_5
        INC       R7
// 1632 
// 1633     // EXTADDR
// 1634     pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
??ZDP_MgmtLqiRsp_5:
        ; Setup parameters for call to function sAddrExtCpy
        MOV       A,?V0
        ADD       A,#0xa
        MOV       R4,A
        CLR       A
        ADDC      A,?V1
        MOV       R5,A
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       R6,?V8
        MOV       R7,?V9
// 1635 
// 1636     // NWKADDR
// 1637     *pBuf++ = LO_UINT16( list->nwkAddr );
        MOV       A,?V0
        ADD       A,#0x12
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1638     *pBuf++ = HI_UINT16( list->nwkAddr );
        MOV       A,?V0
        ADD       A,#0x12
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1639 
// 1640     // DEVICETYPE
// 1641     *pBuf = list->devType;
        MOV       A,?V0
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1642 
// 1643     // RXONIDLE
// 1644     *pBuf |= (uint8)(list->rxOnIdle << 2);
        MOV       A,?V0
        ADD       A,#0x15
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        RLC       A
        RLC       A
        ANL       A,#0xfc
        MOV       R0,A
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        ORL       A,R0
        MOVX      @DPTR,A
// 1645 
// 1646     // RELATIONSHIP
// 1647     *pBuf++ |= (uint8)(list->relation << 4);
        MOV       A,?V0
        ADD       A,#0x16
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        SWAP      A
        ANL       A,#0xf0
        MOV       R0,A
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        ORL       A,R0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1648 
// 1649     // PERMITJOINING
// 1650     *pBuf++ = (uint8)(list->permit);
        MOV       A,?V0
        ADD       A,#0x17
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1651 
// 1652     // DEPTH
// 1653     *pBuf++ = list->depth;
        MOV       A,?V0
        ADD       A,#0x18
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1654 
// 1655     // LQI
// 1656     *pBuf++ = list->lqi;
        MOV       A,?V0
        ADD       A,#0x19
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1657 
// 1658     list++; // next list entry
        MOV       A,?V0
        ADD       A,#0x1a
        MOV       ?V0,A
        JNC       ??ZDP_MgmtLqiRsp_6
        INC       ?V1
// 1659   }
??ZDP_MgmtLqiRsp_6:
        INC       ?V7
        LJMP      ??ZDP_MgmtLqiRsp_3 & 0xFFFF
// 1660 
// 1661   FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
??ZDP_MgmtLqiRsp_4:
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        MOV       R0,DPL
        MOV       R1,DPH
        MOV       DPTR,#ZDP_TmpBuf
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        ; Setup parameters for call to function fillAndSend
        MOV       ?V8,#0x31
        MOV       ?V9,#-0x80
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       R1,?V10
        MOV       R4,?V14
        MOV       R5,?V15
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,R1
        MOV       ?V5,A
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V2
        MOV       R3,?V3
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        MOV       DPTR,#ZDP_TmpBuf
        MOV       A,#(ZDP_Buf + 1) & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#((ZDP_Buf + 1) >> 8) & 0xff
        MOVX      @DPTR,A
        MOV       R1,?V5
??ZDP_MgmtLqiRsp_1:
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R7,#0x10
        LJMP      ?BANKED_LEAVE_XDATA
// 1662 }
          CFI EndBlock cfiBlock27
// 1663 
// 1664 /*********************************************************************
// 1665  * @fn          ZDP_MgmtRtgRsp
// 1666  *
// 1667  * @brief       This builds and send a Mgmt_Rtg_rsp message. This
// 1668  *              function sends a unicast message.
// 1669  *
// 1670  * @param       dstAddr - destination address of the message
// 1671  * @param       Status - message status (ZDP_SUCCESS or other)
// 1672  * @param       RoutingTableEntries - Total number of entries
// 1673  * @param       StartIndex - Starting index within the reporting list
// 1674  * @param       RoutingTableListCount - number of entries included
// 1675  *                                      in this message
// 1676  * @param       RoutingTableList - List of Routing Table entries
// 1677  * @param       SecurityEnable - true to enable security for this message
// 1678  *
// 1679  * @return      ZStatus_t
// 1680  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1681 ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
ZDP_MgmtRtgRsp:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI Function ZDP_MgmtRtgRsp
        CODE
// 1682                             byte Status,
// 1683                             byte RoutingTableEntries,
// 1684                             byte StartIndex,
// 1685                             byte RoutingListCount,
// 1686                             rtgItem_t *RoutingTableList,
// 1687                             byte SecurityEnable )
// 1688 {
        FUNCALL ZDP_MgmtRtgRsp, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtRtgRsp, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtRtgRsp, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V14
        REQUIRE ?V15
        MOV       A,#-0x18
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,R1
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       ?V14,R2
        MOV       ?V15,R3
        MOV       ?V12,R4
        MOV       ?V11,R5
        MOV       A,#0x19
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V10,A
        MOV       A,#0x1a
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       A,#0x1b
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
// 1689   uint8 *buf;
// 1690   uint8 *pBuf;
// 1691   // Status + RoutingTableEntries + StartIndex + RoutingListCount.
// 1692   byte len = 1 + 1 + 1 + 1;
        MOV       ?V2,#0x4
// 1693   byte x;
// 1694 
// 1695   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1696 
// 1697   // Add an array for Routing List data
// 1698   len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
        MOV       B,#0x5
        MOV       A,?V3
        MUL       AB
        ADD       A,?V2
        MOV       ?V2,A
// 1699 
// 1700   buf = osal_mem_alloc( (short)(len+1) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       A,?V2
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,R0
        ADD       A,#0x1
        MOV       R2,A
        CLR       A
        ADDC      A,R1
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       ?V4,?V8
        MOV       ?V5,?V9
// 1701   if ( buf == NULL )
        MOV       A,?V4
        ORL       A,?V5
        JNZ       ??ZDP_MgmtRtgRsp_0
// 1702   {
// 1703     return afStatus_MEM_FAIL;
        MOV       R1,#0x10
        LJMP      ??ZDP_MgmtRtgRsp_1 & 0xFFFF
// 1704   }
// 1705 
// 1706   pBuf = buf+1;
??ZDP_MgmtRtgRsp_0:
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1707 
// 1708   *pBuf++ = Status;
        MOV       A,?V12
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1709   *pBuf++ = RoutingTableEntries;
        MOV       A,?V11
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1710   *pBuf++ = StartIndex;
        MOV       A,?V10
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1711   *pBuf++ = RoutingListCount;
        MOV       A,?V3
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1712 
// 1713   for ( x = 0; x < RoutingListCount; x++ )
        MOV       ?V6,#0x0
??ZDP_MgmtRtgRsp_2:
        MOV       A,?V6
        CLR       C
        SUBB      A,?V3
        JC        $+5
        LJMP      ??ZDP_MgmtRtgRsp_3 & 0xFFFF
// 1714   {
// 1715     *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1716     *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1717 
// 1718     *pBuf = (RoutingTableList->status & 0x07);
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,#0x7
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1719     if ( RoutingTableList->options & (ZP_MTO_ROUTE_RC | ZP_MTO_ROUTE_NRC) )
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,#0x18
        JZ        ??ZDP_MgmtRtgRsp_4
// 1720     {
// 1721       uint8 options = 0;
        MOV       R0,#0x0
// 1722       options |= ZDO_MGMT_RTG_ENTRY_MANYTOONE;
        SETB      C
        MOV       A,R0
        MOV       0xE0 /* A   */.1,C
        MOV       R0,A
// 1723 
// 1724       if ( RoutingTableList->options & ZP_RTG_RECORD )
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.2
        JNC       ??ZDP_MgmtRtgRsp_5
// 1725       {
// 1726         options |= ZDO_MGMT_RTG_ENTRY_ROUTE_RECORD_REQUIRED;
        SETB      C
        MOV       A,R0
        MOV       0xE0 /* A   */.2,C
        MOV       R0,A
// 1727       }
// 1728 
// 1729       if ( RoutingTableList->options & ZP_MTO_ROUTE_NRC )
??ZDP_MgmtRtgRsp_5:
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.4
        JNC       ??ZDP_MgmtRtgRsp_6
// 1730       {
// 1731         options |= ZDO_MGMT_RTG_ENTRY_MEMORY_CONSTRAINED;
        SETB      C
        MOV       A,R0
        MOV       0xE0 /* A   */.0,C
        MOV       R0,A
// 1732       }
// 1733 
// 1734       *pBuf |= (options << 3);
??ZDP_MgmtRtgRsp_6:
        MOV       A,R0
        RLC       A
        RLC       A
        RLC       A
        ANL       A,#0xf8
        MOV       R0,A
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        ORL       A,R0
        MOVX      @DPTR,A
// 1735     }
// 1736     pBuf++;
??ZDP_MgmtRtgRsp_4:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1737 
// 1738     *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1739     *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1740     RoutingTableList++;    // Move to next list entry
        MOV       A,?V0
        ADD       A,#0x7
        MOV       ?V0,A
        JNC       ??ZDP_MgmtRtgRsp_7
        INC       ?V1
// 1741   }
??ZDP_MgmtRtgRsp_7:
        INC       ?V6
        LJMP      ??ZDP_MgmtRtgRsp_2 & 0xFFFF
// 1742 
// 1743   FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
??ZDP_MgmtRtgRsp_3:
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        MOV       R0,DPL
        MOV       R1,DPH
        MOV       DPTR,#ZDP_TmpBuf
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        ; Setup parameters for call to function fillAndSend
        MOV       ?V8,#0x32
        MOV       ?V9,#-0x80
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       R1,?V2
        MOV       R4,?V14
        MOV       R5,?V15
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,R1
        MOV       ?V7,A
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V4
        MOV       R3,?V5
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        MOV       DPTR,#ZDP_TmpBuf
        MOV       A,#(ZDP_Buf + 1) & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#((ZDP_Buf + 1) >> 8) & 0xff
        MOVX      @DPTR,A
        MOV       R1,?V7
??ZDP_MgmtRtgRsp_1:
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R7,#0x10
        LJMP      ?BANKED_LEAVE_XDATA
// 1744 }
          CFI EndBlock cfiBlock28
// 1745 
// 1746 /*********************************************************************
// 1747  * @fn          ZDP_MgmtBindRsp
// 1748  *
// 1749  * @brief       This builds and send a Mgmt_Bind_rsp message. This
// 1750  *              function sends a unicast message.
// 1751  *
// 1752  * @param       dstAddr - destination address of the message
// 1753  * @param       Status - message status (ZDP_SUCCESS or other)
// 1754  * @param       BindingTableEntries - Total number of entries
// 1755  * @param       StartIndex - Starting index within the reporting list
// 1756  * @param       BindingTableListCount - number of entries included
// 1757  *                                 in this message
// 1758  * @param       BindingTableList - List of Binding Table entries
// 1759  * @param       SecurityEnable - Security Options
// 1760  *
// 1761  * @return      ZStatus_t
// 1762  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1763 ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
ZDP_MgmtBindRsp:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function ZDP_MgmtBindRsp
        CODE
// 1764                             byte Status,
// 1765                             byte BindingTableEntries,
// 1766                             byte StartIndex,
// 1767                             byte BindingTableListCount,
// 1768                             apsBindingItem_t *BindingTableList,
// 1769                             byte SecurityEnable )
// 1770 {
        FUNCALL ZDP_MgmtBindRsp, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtBindRsp, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtBindRsp, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtBindRsp, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtBindRsp, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV       A,#-0x18
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 3
        MOV       A,#-0x3
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,R1
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       ?V14,R4
        MOV       ?V13,R5
        MOV       A,#0x1b
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V12,A
        MOV       A,#0x1c
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V6,A
        MOV       A,#0x1d
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
// 1771   uint8 *buf;
// 1772   uint8 *pBuf;
// 1773   uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
// 1774   uint8 len;    // Actual length varies due to different addrMode
// 1775   uint8 x;
// 1776   byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
        MOV       ?V11,#0x15
// 1777   byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
        MOV       ?V15,#0xe
// 1778 
// 1779   (void)SecurityEnable;  // Intentionally unreferenced parameter
// 1780 
// 1781   // Status + BindingTableEntries + StartIndex + BindingTableListCount.
// 1782   maxLen = 1 + 1 + 1 + 1;
        MOV       ?V10,#0x4
// 1783   maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
        MOV       A,?V11
        MOV       B,A
        MOV       A,?V6
        MUL       AB
        ADD       A,?V10
        MOV       ?V10,A
// 1784   buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
        ; Setup parameters for call to function osal_mem_alloc
        MOV       A,?V10
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,R0
        ADD       A,#0x1
        MOV       R2,A
        CLR       A
        ADDC      A,R1
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       ?V4,?V8
        MOV       ?V5,?V9
// 1785 
// 1786   if ( buf == NULL )
        MOV       A,?V4
        ORL       A,?V5
        JNZ       ??ZDP_MgmtBindRsp_0
// 1787   {
// 1788     return afStatus_MEM_FAIL;
        MOV       R1,#0x10
        LJMP      ??ZDP_MgmtBindRsp_1 & 0xFFFF
// 1789   }
// 1790 
// 1791   pBuf = buf+1;
??ZDP_MgmtBindRsp_0:
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1792 
// 1793   *pBuf++ = Status;
        MOV       A,?V14
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1794   *pBuf++ = BindingTableEntries;
        MOV       A,?V13
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1795   *pBuf++ = StartIndex;
        MOV       A,?V12
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1796   *pBuf++ = BindingTableListCount;
        MOV       A,?V6
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1797 
// 1798   // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
// 1799   // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
// 1800   //           extZdpBindEntrySize     -- Version 1.1 extended address mode
// 1801   //           shortZdpBindEntrySize   -- Version 1.1 group address mode
// 1802 
// 1803   len = 1 + 1 + 1 + 1;
        MOV       ?V2,#0x4
// 1804   for ( x = 0; x < BindingTableListCount; x++ )
        MOV       ?V7,#0x0
??ZDP_MgmtBindRsp_2:
        MOV       A,?V7
        CLR       C
        SUBB      A,?V6
        JC        $+5
        LJMP      ??ZDP_MgmtBindRsp_3 & 0xFFFF
// 1805   {
// 1806     pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       R6,?V8
        MOV       R7,?V9
// 1807     *pBuf++ = BindingTableList->srcEP;
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1808 
// 1809     // Cluster ID
// 1810     *pBuf++ = LO_UINT16( BindingTableList->clusterID );
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1811     *pBuf++ = HI_UINT16( BindingTableList->clusterID );
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1812 
// 1813     *pBuf++ = BindingTableList->dstAddr.addrMode;
        MOV       A,?V0
        ADD       A,#0x13
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1814     if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
        MOV       A,?V0
        ADD       A,#0x13
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,#0x3
        JNZ       ??ZDP_MgmtBindRsp_4
// 1815     {
// 1816       len += extZdpBindEntrySize;
        MOV       A,?V11
        ADD       A,?V2
        MOV       ?V2,A
// 1817       pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       A,?V0
        ADD       A,#0xb
        MOV       R4,A
        CLR       A
        ADDC      A,?V1
        MOV       R5,A
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       R6,?V8
        MOV       R7,?V9
// 1818       *pBuf++ = BindingTableList->dstEP;
        MOV       A,?V0
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
        SJMP      ??ZDP_MgmtBindRsp_5
// 1819     }
// 1820     else
// 1821     {
// 1822       len += shortZdpBindEntrySize;
??ZDP_MgmtBindRsp_4:
        MOV       A,?V15
        ADD       A,?V2
        MOV       ?V2,A
// 1823       *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
        MOV       A,?V0
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1824       *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
        MOV       A,?V0
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1825     }
// 1826     BindingTableList++;    // Move to next list entry
??ZDP_MgmtBindRsp_5:
        MOV       A,?V0
        ADD       A,#0x15
        MOV       ?V0,A
        JNC       ??ZDP_MgmtBindRsp_6
        INC       ?V1
// 1827   }
??ZDP_MgmtBindRsp_6:
        INC       ?V7
        LJMP      ??ZDP_MgmtBindRsp_2 & 0xFFFF
// 1828 
// 1829   FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
??ZDP_MgmtBindRsp_3:
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        MOV       R0,DPL
        MOV       R1,DPH
        MOV       DPTR,#ZDP_TmpBuf
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        ; Setup parameters for call to function fillAndSend
        MOV       ?V8,#0x33
        MOV       ?V9,#-0x80
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       R1,?V2
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,R1
        MOV       ?V3,A
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V4
        MOV       R3,?V5
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        MOV       DPTR,#ZDP_TmpBuf
        MOV       A,#(ZDP_Buf + 1) & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#((ZDP_Buf + 1) >> 8) & 0xff
        MOVX      @DPTR,A
        MOV       R1,?V3
??ZDP_MgmtBindRsp_1:
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R7,#0x10
        LJMP      ?BANKED_LEAVE_XDATA
// 1830 }
          CFI EndBlock cfiBlock29
// 1831 
// 1832 /*********************************************************************
// 1833  * @fn          ZDP_MgmtNwkUpdateNotify
// 1834  *
// 1835  * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
// 1836  *              function sends a unicast message.
// 1837  *
// 1838  * @param       dstAddr - destination address of the message
// 1839  * @param       status - message status (ZDP_SUCCESS or other)
// 1840  * @param       scannedChannels - List of channels scanned by the request
// 1841  * @param       totalTransmissions - Total transmissions
// 1842  * @param       transmissionFailures - Sum of transmission failures
// 1843  * @param       listCount - Number of records contained in the energyValues list
// 1844  * @param       energyValues - List of descriptors, one for each of ListCount,
// 1845  *                             of the enegry detect descriptors
// 1846  * @param       txOptions - Transmit options
// 1847  * @param       securityEnable - Security options
// 1848  *
// 1849  * @return      afStatus_t
// 1850  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1851 afStatus_t ZDP_MgmtNwkUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
ZDP_MgmtNwkUpdateNotify:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function ZDP_MgmtNwkUpdateNotify
        CODE
// 1852                                     uint8 status, uint32 scannedChannels,
// 1853                                     uint16 totalTransmissions, uint16 transmissionFailures,
// 1854                                     uint8 listCount, uint8 *energyValues, uint8 txOptions,
// 1855                                     uint8 securityEnable )
// 1856 {
        FUNCALL ZDP_MgmtNwkUpdateNotify, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtNwkUpdateNotify, osal_buffer_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtNwkUpdateNotify, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtNwkUpdateNotify, fillAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_MgmtNwkUpdateNotify, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV       A,#-0x18
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 3
        MOV       A,#-0x3
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,R1
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       ?V15,R4
        MOV       ?V11,R5
        MOV       A,#0x1b
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       A,#0x1f
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       A,#0x21
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
// 1857   uint8 *buf;
// 1858   uint8 *pBuf;
// 1859   uint8 len;
// 1860 
// 1861   (void)securityEnable;  // Intentionally unreferenced parameter
// 1862 
// 1863   // Status + ScannedChannels + totalTransmissions + transmissionFailures + ListCount + energyValues
// 1864   len = 1 + 4 + 2 + 2 + 1 + listCount;
        MOV       A,#0xa
        ADD       A,?V11
        MOV       ?V14,A
// 1865 
// 1866   buf = osal_mem_alloc( len+1 ); // +1 for transaction ID
        ; Setup parameters for call to function osal_mem_alloc
        MOV       A,?V14
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,R0
        ADD       A,#0x1
        MOV       R2,A
        CLR       A
        ADDC      A,R1
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       ?V12,?V8
        MOV       ?V13,?V9
// 1867   if ( buf == NULL )
        MOV       A,?V12
        ORL       A,?V13
        JNZ       ??ZDP_MgmtNwkUpdateNotify_0
// 1868   {
// 1869     return afStatus_MEM_FAIL;
        MOV       R1,#0x10
        LJMP      ??ZDP_MgmtNwkUpdateNotify_1 & 0xFFFF
// 1870   }
// 1871 
// 1872   pBuf = buf+1;
??ZDP_MgmtNwkUpdateNotify_0:
        MOV       DPL,?V12
        MOV       DPH,?V13
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1873 
// 1874   *pBuf++ = status;
        MOV       A,?V15
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1875 
// 1876   pBuf = osal_buffer_uint32( pBuf, scannedChannels );
        ; Setup parameters for call to function osal_buffer_uint32
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       R6,?V8
        MOV       R7,?V9
// 1877 
// 1878   *pBuf++ = LO_UINT16( totalTransmissions );
        MOV       A,?V2
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1879   *pBuf++ = HI_UINT16( totalTransmissions );
        MOV       R0,?V2
        MOV       R1,?V3
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1880 
// 1881   *pBuf++ = LO_UINT16( transmissionFailures );
        MOV       A,?V0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1882   *pBuf++ = HI_UINT16( transmissionFailures );
        MOV       R0,?V0
        MOV       R1,?V1
        CLR       A
        XCH       A,R1
        MOV       R0,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1883 
// 1884   *pBuf++ = listCount;
        MOV       A,?V11
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1885 
// 1886   if ( listCount > 0 )
        MOV       A,?V11
        JZ        ??ZDP_MgmtNwkUpdateNotify_2
// 1887     osal_memcpy( pBuf, energyValues, listCount );
        ; Setup parameters for call to function osal_memcpy
        MOV       A,#0x23
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V8,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V9,A
        MOV       ?V10,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,?V11
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1888 
// 1889   FillAndSendBufferTxOptions( &TransSeq, dstAddr, Mgmt_NWK_Update_notify, len, buf, txOptions );
??ZDP_MgmtNwkUpdateNotify_2:
        MOV       DPL,?V12
        MOV       DPH,?V13
        INC       DPTR
        MOV       R0,DPL
        MOV       R1,DPH
        MOV       DPTR,#ZDP_TmpBuf
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        MOV       A,#0x25
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       DPTR,#ZDP_TxOptions
        MOVX      @DPTR,A
        ; Setup parameters for call to function fillAndSend
        MOV       ?V8,#0x38
        MOV       ?V9,#-0x80
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       R1,?V14
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,R1
        MOV       ?V10,A
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V12
        MOV       R3,?V13
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        MOV       DPTR,#ZDP_TmpBuf
        MOV       A,#(ZDP_Buf + 1) & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#((ZDP_Buf + 1) >> 8) & 0xff
        MOVX      @DPTR,A
        MOV       DPTR,#ZDP_TxOptions
        MOV       A,#0x0
        MOVX      @DPTR,A
        MOV       R1,?V10
??ZDP_MgmtNwkUpdateNotify_1:
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R7,#0x10
        LJMP      ?BANKED_LEAVE_XDATA
// 1890 }
          CFI EndBlock cfiBlock30
// 1891 
// 1892 /*********************************************************************
// 1893  * Functions to register for ZDO Over-the-air messages
// 1894  */
// 1895 
// 1896 /*********************************************************************
// 1897  * @fn          ZDO_RegisterForZDOMsg
// 1898  *
// 1899  * @brief       Call this function to register of an incoming over
// 1900  *              the air ZDO message - probably a response message
// 1901  *              but requests can also be received.
// 1902  *              Messages are delivered to the task with ZDO_CB_MSG
// 1903  *              as the message ID.
// 1904  *
// 1905  * @param       taskID - Where you would like the message delivered
// 1906  * @param       clusterID - What message?
// 1907  *                          ZDO_ALL_MSGS_CLUSTERID - all responses
// 1908  *                          and device announce
// 1909  *
// 1910  * @return      ZSuccess - successful, ZMemError if not
// 1911  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1912 ZStatus_t ZDO_RegisterForZDOMsg( uint8 taskID, uint16 clusterID )
ZDO_RegisterForZDOMsg:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI Function ZDO_RegisterForZDOMsg
        CODE
// 1913 {
        FUNCALL ZDO_RegisterForZDOMsg, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        MOV       A,#-0x12
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV       ?V6,R1
        MOV       ?V4,R2
        MOV       ?V5,R3
// 1914   ZDO_MsgCB_t *pList;
// 1915   ZDO_MsgCB_t *pLast;
// 1916   ZDO_MsgCB_t *pNew;
// 1917 
// 1918   // Look for duplicate
// 1919   pList = pLast = zdoMsgCBs;
        MOV       DPTR,#zdoMsgCBs
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R6,?V2
        MOV       R7,?V3
// 1920   while ( pList )
??ZDO_RegisterForZDOMsg_0:
        MOV       A,R6
        ORL       A,R7
        JZ        ??ZDO_RegisterForZDOMsg_1
// 1921   {
// 1922     if ( pList->taskID == taskID && pList->clusterID == clusterID )
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,?V6
        JNZ       ??ZDO_RegisterForZDOMsg_2
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,?V4
        JNZ       ??ZDO_RegisterForZDOMsg_3
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,?V5
??ZDO_RegisterForZDOMsg_3:
        JNZ       ??ZDO_RegisterForZDOMsg_2
// 1923       return ( ZSuccess );
        MOV       R1,#0x0
        LJMP      ??ZDO_RegisterForZDOMsg_4 & 0xFFFF
// 1924     pLast = pList;
??ZDO_RegisterForZDOMsg_2:
        MOV       A,R6
        MOV       R0,A
        MOV       A,R7
        MOV       R1,A
        MOV       ?V2,R0
        MOV       ?V3,R1
// 1925     pList = (ZDO_MsgCB_t *)pList->next;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        SJMP      ??ZDO_RegisterForZDOMsg_0
// 1926   }
// 1927 
// 1928   // Add to the list
// 1929   pNew = (ZDO_MsgCB_t *)osal_mem_alloc( sizeof ( ZDO_MsgCB_t ) );
??ZDO_RegisterForZDOMsg_1:
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x5
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       ?V0,?V8
        MOV       ?V1,?V9
// 1930   if ( pNew )
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??ZDO_RegisterForZDOMsg_5
// 1931   {
// 1932     pNew->taskID = taskID;
        MOV       A,?V6
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1933     pNew->clusterID = clusterID;
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,?V4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V5
        MOVX      @DPTR,A
// 1934     pNew->next = NULL;
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1935     if ( zdoMsgCBs )
        MOV       DPTR,#zdoMsgCBs
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??ZDO_RegisterForZDOMsg_6
// 1936     {
// 1937       pLast->next = pNew;
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
        SJMP      ??ZDO_RegisterForZDOMsg_7
// 1938     }
// 1939     else
// 1940       zdoMsgCBs = pNew;
??ZDO_RegisterForZDOMsg_6:
        MOV       DPTR,#zdoMsgCBs
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
// 1941     return ( ZSuccess );
??ZDO_RegisterForZDOMsg_7:
        MOV       R1,#0x0
        SJMP      ??ZDO_RegisterForZDOMsg_4
// 1942   }
// 1943   else
// 1944     return ( ZMemError );
??ZDO_RegisterForZDOMsg_5:
        MOV       R1,#0x10
??ZDO_RegisterForZDOMsg_4:
        MOV       R7,#0xa
        LJMP      ?BANKED_LEAVE_XDATA
// 1945 }
          CFI EndBlock cfiBlock31
// 1946 
// 1947 /*********************************************************************
// 1948  * @fn          ZDO_RemoveRegisteredCB
// 1949  *
// 1950  * @brief       Call this function if you don't want to receive the
// 1951  *              incoming message.
// 1952  *
// 1953  * @param       taskID - Where the messages are being delivered.
// 1954  * @param       clusterID - What message?
// 1955  *
// 1956  * @return      ZSuccess - successful, ZFailure if not found
// 1957  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1958 ZStatus_t ZDO_RemoveRegisteredCB( uint8 taskID, uint16 clusterID )
ZDO_RemoveRegisteredCB:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI Function ZDO_RemoveRegisteredCB
        CODE
// 1959 {
        FUNCALL ZDO_RemoveRegisteredCB, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        MOV       A,#-0xd
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV       ?V4,R1
        MOV       ?V2,R2
        MOV       ?V3,R3
// 1960   ZDO_MsgCB_t *pList;
// 1961   ZDO_MsgCB_t *pLast = NULL;
        MOV       ?V0,#0x0
        MOV       ?V1,#0x0
// 1962 
// 1963   pList = zdoMsgCBs;
        MOV       DPTR,#zdoMsgCBs
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
// 1964   while ( pList )
??ZDO_RemoveRegisteredCB_0:
        MOV       A,R6
        ORL       A,R7
        JNZ       $+5
        LJMP      ??ZDO_RemoveRegisteredCB_1 & 0xFFFF
// 1965   {
// 1966     if ( pList->taskID == taskID && pList->clusterID == clusterID )
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,?V4
        JNZ       ??ZDO_RemoveRegisteredCB_2
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,?V2
        JNZ       ??ZDO_RemoveRegisteredCB_3
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,?V3
??ZDO_RemoveRegisteredCB_3:
        JNZ       ??ZDO_RemoveRegisteredCB_2
// 1967     {
// 1968       if ( pLast )
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??ZDO_RemoveRegisteredCB_4
// 1969       {
// 1970         // remove this one from the linked list
// 1971         pLast->next = pList->next;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        SJMP      ??ZDO_RemoveRegisteredCB_5
// 1972       }
// 1973       else if ( pList->next )
??ZDO_RemoveRegisteredCB_4:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??ZDO_RemoveRegisteredCB_6
// 1974       {
// 1975         // remove the first one from the linked list
// 1976         zdoMsgCBs = pList->next;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#zdoMsgCBs
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        SJMP      ??ZDO_RemoveRegisteredCB_5
// 1977       }
// 1978       else
// 1979       {
// 1980         // remove the only item from the list
// 1981         zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
??ZDO_RemoveRegisteredCB_6:
        MOV       DPTR,#zdoMsgCBs
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1982       }
// 1983       osal_mem_free( pList );
??ZDO_RemoveRegisteredCB_5:
        ; Setup parameters for call to function osal_mem_free
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1984       return ( ZSuccess );
        MOV       R1,#0x0
        SJMP      ??ZDO_RemoveRegisteredCB_7
// 1985     }
// 1986     pLast = pList;
??ZDO_RemoveRegisteredCB_2:
        MOV       A,R6
        MOV       R0,A
        MOV       A,R7
        MOV       R1,A
        MOV       ?V0,R0
        MOV       ?V1,R1
// 1987     pList = pList->next;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        LJMP      ??ZDO_RemoveRegisteredCB_0 & 0xFFFF
// 1988   }
// 1989 
// 1990   return ( ZFailure );
??ZDO_RemoveRegisteredCB_1:
        MOV       R1,#0x1
??ZDO_RemoveRegisteredCB_7:
        MOV       R7,#0x5
        LJMP      ?BANKED_LEAVE_XDATA
// 1991 }
          CFI EndBlock cfiBlock32
// 1992 
// 1993 /*********************************************************************
// 1994  * @fn          ZDO_SendMsgCBs
// 1995  *
// 1996  * @brief       This function sends messages to registered tasks.
// 1997  *              Local to ZDO and shouldn't be called outside of ZDO.
// 1998  *
// 1999  * @param       inMsg - incoming message
// 2000  *
// 2001  * @return      TRUE if sent to at least 1 task, FALSE if not
// 2002  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2003 uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg )
ZDO_SendMsgCBs:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI Function ZDO_SendMsgCBs
        CODE
// 2004 {
        FUNCALL ZDO_SendMsgCBs, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_SendMsgCBs, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_SendMsgCBs, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_SendMsgCBs, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
// 2005   uint8 ret = FALSE;
        MOV       ?V7,#0x0
// 2006   ZDO_MsgCB_t *pList = zdoMsgCBs;
        MOV       DPTR,#zdoMsgCBs
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
// 2007   while ( pList )
??ZDO_SendMsgCBs_0:
        MOV       A,?V2
        ORL       A,?V3
        JNZ       $+5
        LJMP      ??ZDO_SendMsgCBs_1 & 0xFFFF
// 2008   {
// 2009     if ( (pList->clusterID == inMsg->clusterID)
// 2010        || ((pList->clusterID == ZDO_ALL_MSGS_CLUSTERID)
// 2011            && ((inMsg->clusterID & ZDO_RESPONSE_BIT) || (inMsg->clusterID == Device_annce))) )
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,?V0
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??ZDO_SendMsgCBs_2
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
??ZDO_SendMsgCBs_2:
        JZ        ??ZDO_SendMsgCBs_3
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0xff
        JNZ       ??ZDO_SendMsgCBs_4
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0xff
??ZDO_SendMsgCBs_4:
        JZ        $+5
        LJMP      ??ZDO_SendMsgCBs_5 & 0xFFFF
        MOV       A,?V0
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        ANL       A,#0x0
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,#0x80
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       ??ZDO_SendMsgCBs_3
        MOV       A,?V0
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,#0x13
        JNZ       ??ZDO_SendMsgCBs_6
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x0
??ZDO_SendMsgCBs_6:
        JZ        $+5
        LJMP      ??ZDO_SendMsgCBs_5 & 0xFFFF
// 2012     {
// 2013       zdoIncomingMsg_t *msgPtr;
// 2014 
// 2015       // Send the address to the task
// 2016       msgPtr = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + inMsg->asduLen );
??ZDO_SendMsgCBs_3:
        ; Setup parameters for call to function osal_msg_allocate
        MOV       A,?V0
        ADD       A,#0x10
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,R0
        ADD       A,#0x17
        MOV       R2,A
        CLR       A
        ADDC      A,R1
        MOV       R3,A
        LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R6,?V4
        MOV       R7,?V5
// 2017       if ( msgPtr )
        MOV       A,R6
        ORL       A,R7
        JNZ       $+5
        LJMP      ??ZDO_SendMsgCBs_5 & 0xFFFF
// 2018       {
// 2019         // copy struct
// 2020         osal_memcpy( msgPtr, inMsg, sizeof( zdoIncomingMsg_t ));
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,?V0
        MOV       ?V5,?V1
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R4,#0x17
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 2021 
// 2022         if ( inMsg->asduLen )
        MOV       A,?V0
        ADD       A,#0x10
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        JZ        ??ZDO_SendMsgCBs_7
// 2023         {
// 2024           msgPtr->asdu = (byte*)(((byte*)msgPtr) + sizeof( zdoIncomingMsg_t ));
        MOV       A,R6
        ADD       A,#0x17
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       R1,A
        MOV       A,R6
        ADD       A,#0x13
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 2025           osal_memcpy( msgPtr->asdu, inMsg->asdu, inMsg->asduLen );
        ; Setup parameters for call to function osal_memcpy
        MOV       A,?V0
        ADD       A,#0x13
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V5,A
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       A,?V0
        ADD       A,#0x10
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,R6
        ADD       A,#0x13
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 2026         }
// 2027 
// 2028         msgPtr->hdr.event = ZDO_CB_MSG;
??ZDO_SendMsgCBs_7:
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,#-0x2d
        MOVX      @DPTR,A
// 2029         osal_msg_send( pList->taskID, (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
        MOV       A,R1
// 2030         ret = TRUE;
        MOV       ?V7,#0x1
// 2031       }
// 2032     }
// 2033     pList = (ZDO_MsgCB_t *)pList->next;
??ZDO_SendMsgCBs_5:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
        LJMP      ??ZDO_SendMsgCBs_0 & 0xFFFF
// 2034   }
// 2035   return ( ret );
??ZDO_SendMsgCBs_1:
        MOV       R1,?V7
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
// 2036 }
          CFI EndBlock cfiBlock33
// 2037 
// 2038 /*********************************************************************
// 2039  * Incoming message processor
// 2040  */
// 2041 
// 2042 /*********************************************************************
// 2043  * @fn          ZDP_IncomingData
// 2044  *
// 2045  * @brief       This function indicates the transfer of a data PDU (ASDU)
// 2046  *              from the APS sub-layer to the ZDO.
// 2047  *
// 2048  * @param       pData - Incoming Message
// 2049  *
// 2050  * @return      none
// 2051  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2052 void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
ZDP_IncomingData:
          CFI Block cfiBlock34 Using cfiCommon0
          CFI Function ZDP_IncomingData
        CODE
// 2053 {
        FUNCALL ZDP_IncomingData, ZDO_SendMsgCBs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDP_IncomingData, ZDApp_InMsgCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 23
        MOV       A,#-0x17
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2054   uint8 x = 0;
        MOV       ?V0,#0x0
// 2055   uint8 handled;
// 2056   zdoIncomingMsg_t inMsg;
// 2057 
// 2058   inMsg.srcAddr.addrMode = Addr16Bit;
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
// 2059   inMsg.srcAddr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 2060   inMsg.wasBroadcast = pData->wasBroadcast;
        MOV       A,R6
        ADD       A,#0x15
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2061   inMsg.clusterID = pData->clusterId;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 2062   inMsg.SecurityUse = pData->SecurityUse;
        MOV       A,R6
        ADD       A,#0x19
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2063 
// 2064   inMsg.asduLen = pData->cmd.DataLength-1;
        MOV       A,R6
        ADD       A,#0x20
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ADD       A,#-0x1
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2065   inMsg.asdu = pData->cmd.Data+1;
        MOV       A,R6
        ADD       A,#0x22
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R1,A
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 2066   inMsg.TransSeq = pData->cmd.Data[0];
        MOV       A,R6
        ADD       A,#0x22
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2067   inMsg.macDestAddr = pData->macDestAddr;
        MOV       A,R6
        ADD       A,#0x12
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 2068   inMsg.macSrcAddr = pData->macSrcAddr;
        MOV       A,R6
        ADD       A,#0x24
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 2069 
// 2070   handled = ZDO_SendMsgCBs( &inMsg );
        ; Setup parameters for call to function ZDO_SendMsgCBs
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??ZDO_SendMsgCBs::?relay`; Banked call to: ZDO_SendMsgCBs
        MOV       A,R1
        MOV       ?V1,A
// 2071 
// 2072 #if (defined MT_ZDO_CB_FUNC)
// 2073 #if !defined MT_TASK
// 2074   if (zgZdoDirectCB)
// 2075 #endif
// 2076   {
// 2077     MT_ZdoDirectCB( pData, &inMsg );
// 2078   }
// 2079 #endif
// 2080 
// 2081   while ( zdpMsgProcs[x].clusterID != 0xFFFF )
??ZDP_IncomingData_0:
        MOV       A,?V0
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,R0
        MOV       B,#0x4
        MUL       AB
        XCH       A,R0
        MOV       R2,B
        MOV       B,#0x0
        MUL       AB
        ADD       A,R2
        MOV       R2,A
        MOV       B,#0x4
        MOV       A,R1
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       A,#zdpMsgProcs & 0xff
        ADD       A,R0
        MOV       DPL,A
        MOV       A,#(zdpMsgProcs >> 8) & 0xff
        ADDC      A,R1
        MOV       DPH,A
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       R1,A
        MOV       A,#-0x1
        XRL       A,R0
        JNZ       ??ZDP_IncomingData_1
        MOV       A,#-0x1
        XRL       A,R1
??ZDP_IncomingData_1:
        JZ        ??ZDP_IncomingData_2
// 2082   {
// 2083     if ( zdpMsgProcs[x].clusterID == inMsg.clusterID )
        MOV       A,?V0
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,R0
        MOV       B,#0x4
        MUL       AB
        XCH       A,R0
        MOV       R2,B
        MOV       B,#0x0
        MUL       AB
        ADD       A,R2
        MOV       R2,A
        MOV       B,#0x4
        MOV       A,R1
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       A,#zdpMsgProcs & 0xff
        ADD       A,R0
        MOV       DPL,A
        MOV       A,#(zdpMsgProcs >> 8) & 0xff
        ADDC      A,R1
        MOV       DPH,A
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       R1,A
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??ZDP_IncomingData_3
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
??ZDP_IncomingData_3:
        JNZ       ??ZDP_IncomingData_4
// 2084     {
// 2085       zdpMsgProcs[x].pFn( &inMsg );
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       A,?V0
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,R0
        MOV       B,#0x4
        MUL       AB
        XCH       A,R0
        MOV       R4,B
        MOV       B,#0x0
        MUL       AB
        ADD       A,R4
        MOV       R4,A
        MOV       B,#0x4
        MOV       A,R1
        MUL       AB
        ADD       A,R4
        MOV       R1,A
        MOV       A,#(zdpMsgProcs + 2) & 0xff
        ADD       A,R0
        MOV       DPL,A
        MOV       A,#((zdpMsgProcs + 2) >> 8) & 0xff
        ADDC      A,R1
        MOV       DPH,A
        CLR       A
        MOVC      A,@A+DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       DPH,A
        POP       DPL
          CFI CFA_SP SP+0
        LCALL     ?CALL_IND
// 2086       return;
        SJMP      ??ZDP_IncomingData_5
// 2087     }
// 2088     x++;
??ZDP_IncomingData_4:
        INC       ?V0
        LJMP      ??ZDP_IncomingData_0 & 0xFFFF
// 2089   }
// 2090 
// 2091   // Handle unhandled messages
// 2092   if ( !handled )
??ZDP_IncomingData_2:
        MOV       A,?V1
        JNZ       ??ZDP_IncomingData_5
// 2093     ZDApp_InMsgCB( &inMsg );
        ; Setup parameters for call to function ZDApp_InMsgCB
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??ZDApp_InMsgCB::?relay`; Banked call to: ZDApp_InMsgCB
// 2094 }
??ZDP_IncomingData_5:
        MOV       A,#0x17
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock34

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ZDP_TmpBuf>`:
        DATA16
        DW ZDP_Buf + 1H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_a:
        DD 10

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??fillAndSend::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    fillAndSend

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_SendData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_SendData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_NWKAddrOfInterestReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_NWKAddrOfInterestReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_NwkAddrReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_NwkAddrReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_IEEEAddrReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_IEEEAddrReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_MatchDescReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_MatchDescReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_SimpleDescReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_SimpleDescReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_UserDescSet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_UserDescSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_ServerDiscReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_ServerDiscReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_DeviceAnnce::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_DeviceAnnce

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_ParentAnnce::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_ParentAnnce

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zdpProcessAddrReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zdpProcessAddrReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_NodeDescMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_NodeDescMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_PowerDescMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_PowerDescMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_SimpleDescMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_SimpleDescMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_EPRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_EPRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_UserDescRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_UserDescRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_ServerDiscRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_ServerDiscRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_GenericRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_GenericRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_EndDeviceBindReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_EndDeviceBindReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_BindUnbindReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_BindUnbindReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_MgmtNwkDiscReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_MgmtNwkDiscReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_MgmtDirectJoinReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_MgmtDirectJoinReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_MgmtPermitJoinReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_MgmtPermitJoinReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_MgmtLeaveReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_MgmtLeaveReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_MgmtNwkUpdateReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_MgmtNwkUpdateReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_MgmtNwkDiscRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_MgmtNwkDiscRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_MgmtLqiRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_MgmtLqiRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_MgmtRtgRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_MgmtRtgRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_MgmtBindRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_MgmtBindRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_MgmtNwkUpdateNotify::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_MgmtNwkUpdateNotify

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_RegisterForZDOMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_RegisterForZDOMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_RemoveRegisteredCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_RemoveRegisteredCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_SendMsgCBs::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_SendMsgCBs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDP_IncomingData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDP_IncomingData

        END
// 2095 
// 2096 /*********************************************************************
// 2097 *********************************************************************/
// 2098 
// 
// 11 737 bytes in segment BANKED_CODE
//    210 bytes in segment BANK_RELAYS
//     53 bytes in segment CODE_C
//      2 bytes in segment XDATA_I
//      2 bytes in segment XDATA_ID
//      4 bytes in segment XDATA_ROM_C
//     85 bytes in segment XDATA_Z
// 
//    265 bytes of CODE     memory
//      0 bytes of CONST    memory (+ 4 bytes shared)
// 11 737 bytes of HUGECODE memory
//     87 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
