###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               31/Jul/2020  16:02:08
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack 3.0.2\Components\osal\mcu\cc2530\OSAL_Nv.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EWFF0E.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\osal\mcu\cc2530\OSAL_Nv.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D POWER_SAVING -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_GROUPS -D BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=0
#        -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0 -DREJOIN_POLL_RATE=0
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\OSAL_Nv.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\OSAL_Nv.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\osal\mcu\cc2530\OSAL_Nv.c
      1          /******************************************************************************
      2            Filename:       OSAL_Nv.c
      3            Revised:        $Date: 2014-12-19 13:07:30 -0800 (Fri, 19 Dec 2014) $
      4            Revision:       $Revision: 41556 $
      5          
      6            Description:    This module contains the OSAL non-volatile memory functions.
      7          
      8          
      9            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          /******************************************************************************
     41            Notes:
     42              - A trick buried deep in initPage() requires that the MSB of the NV Item Id
     43                is to be reserved for use by this module.
     44          ******************************************************************************/
     45          
     46          /*********************************************************************
     47           * INCLUDES
     48           */
     49          
     50          #include "hal_adc.h"
     51          #include "hal_flash.h"
     52          #include "hal_types.h"
     53          #include "OSAL_Nv.h"
     54          #include "ZComDef.h"
     55          #ifdef HAL_MCU_CC2533
     56          #include "hal_batmon.h"
     57          #endif
     58          #include "OnBoard.h"
     59          
     60          /*********************************************************************
     61           * CONSTANTS
     62           */
     63          
     64          #define OSAL_NV_PAGE_SIZE       HAL_FLASH_PAGE_SIZE
     65          #define OSAL_NV_PAGES_USED      HAL_NV_PAGE_CNT
     66          #define OSAL_NV_PAGE_BEG        HAL_NV_PAGE_BEG
     67          #define OSAL_NV_PAGE_END       (OSAL_NV_PAGE_BEG + OSAL_NV_PAGES_USED - 1)
     68          
     69          #define OSAL_NV_ACTIVE          0x00
     70          #define OSAL_NV_ERASED          0xFF
     71          #define OSAL_NV_ERASED_ID       0xFFFF
     72          #define OSAL_NV_ZEROED_ID       0x0000
     73          // Reserve MSB of Id to signal a search for the "old" source copy (new write interrupted/failed.)
     74          #define OSAL_NV_SOURCE_ID       0x8000
     75          
     76          // In case pages 0-1 are ever used, define a null page value.
     77          #define OSAL_NV_PAGE_NULL       0
     78          
     79          // In case item Id 0 is ever used, define a null item value.
     80          #define OSAL_NV_ITEM_NULL       0
     81          
     82          #define OSAL_NV_WORD_SIZE       HAL_FLASH_WORD_SIZE
     83          
     84          #define OSAL_NV_PAGE_HDR_OFFSET 0
     85          
     86          #define OSAL_NV_MAX_HOT         3

   \                                 In  segment XDATA_ROM_C, align 1
     87          static const uint16 hotIds[OSAL_NV_MAX_HOT] = {
   \                     hotIds:
   \   000000   8200         DW 130
   \   000002   3A00         DW 58
   \   000004   3B00         DW 59
     88            ZCD_NV_NWKKEY,
     89            ZCD_NV_NWK_ACTIVE_KEY_INFO,
     90            ZCD_NV_NWK_ALTERN_KEY_INFO,
     91          };
     92          
     93          /*********************************************************************
     94           * MACROS
     95           */
     96          
     97          #if (defined HAL_MCU_CC2530 || defined HAL_MCU_CC2531)
     98          #define OSAL_NV_CHECK_BUS_VOLTAGE  OnBoard_CheckVoltage()
     99          #elif defined HAL_MCU_CC2533
    100          # define  OSAL_NV_CHECK_BUS_VOLTAGE  (HalBatMonRead( HAL_BATMON_MIN_FLASH ))
    101          #else
    102          # warning No implementation of a low Vdd check.
    103          # define  OSAL_NV_CHECK_BUS_VOLTAGE
    104          #endif
    105          
    106          #define OSAL_NV_DATA_SIZE( LEN )                      \
    107            (((LEN) >= ((uint16)(65536UL - OSAL_NV_WORD_SIZE))) ? \
    108                       ((uint16)(65536UL - OSAL_NV_WORD_SIZE))  : \
    109                       ((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE))
    110          
    111          #define OSAL_NV_ITEM_SIZE( LEN )                                         \
    112            (((LEN) >= ((uint16)(65536UL - OSAL_NV_WORD_SIZE - OSAL_NV_HDR_SIZE))) ? \
    113                       ((uint16)(65536UL - OSAL_NV_WORD_SIZE))                     : \
    114            (((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE) + OSAL_NV_HDR_SIZE))
    115          
    116          #define COMPACT_PAGE_CLEANUP( COM_PG ) st ( \
    117            /* In order to recover from a page compaction that is interrupted,\
    118             * the logic in osal_nv_init() depends upon the following order:\
    119             * 1. State of the target of compaction is changed to ePgInUse.\
    120             * 2. Compacted page is erased.\
    121             */\
    122            setPageUse( pgRes, TRUE );  /* Mark the reserve page as being in use. */\
    123            erasePage( (COM_PG) ); \
    124            \
    125            pgRes = (COM_PG);           /* Set the reserve page to be the newly erased page. */\
    126          )
    127          
    128          /*********************************************************************
    129           * TYPEDEFS
    130           */
    131          
    132          typedef struct
    133          {
    134            uint16 id;
    135            uint16 len;   // Enforce Flash-WORD size on len.
    136            uint16 chk;   // Byte-wise checksum of the 'len' data bytes of the item.
    137            uint16 stat;  // Item status.
    138          } osalNvHdr_t;
    139          // Struct member offsets.
    140          #define OSAL_NV_HDR_ID    0
    141          #define OSAL_NV_HDR_LEN   2
    142          #define OSAL_NV_HDR_CHK   4
    143          #define OSAL_NV_HDR_STAT  6
    144          
    145          #define OSAL_NV_HDR_ITEM  2  // Length of any item of a header struct.
    146          #define OSAL_NV_HDR_SIZE  8
    147          #define OSAL_NV_HDR_HALF (OSAL_NV_HDR_SIZE / 2)
    148          
    149          typedef struct
    150          {
    151            uint16 active;
    152            uint16 inUse;
    153            uint16 xfer;
    154            uint16 spare;
    155          } osalNvPgHdr_t;
    156          // Struct member offsets.
    157          #define OSAL_NV_PG_ACTIVE 0
    158          #define OSAL_NV_PG_INUSE  2
    159          #define OSAL_NV_PG_XFER   4
    160          #define OSAL_NV_PG_SPARE  6
    161          
    162          #define OSAL_NV_PAGE_HDR_SIZE  8
    163          #define OSAL_NV_PAGE_HDR_HALF (OSAL_NV_PAGE_HDR_SIZE / 2)
    164          
    165          typedef enum
    166          {
    167            eNvXfer,
    168            eNvZero
    169          } eNvHdrEnum;
    170          
    171          typedef enum
    172          {
    173            ePgActive,
    174            ePgInUse,
    175            ePgXfer,
    176            ePgSpare
    177          } ePgHdrEnum;
    178          
    179          /*********************************************************************
    180           * GLOBAL VARIABLES
    181           */
    182          
    183          #ifndef OAD_KEEP_NV_PAGES
    184          // When NV pages are to remain intact during OAD download,
    185          // the image itself should not include NV pages.
    186          #pragma location="ZIGNV_ADDRESS_SPACE"

   \                                 In  segment ZIGNV_ADDRESS_SPACE, align 1
    187          __no_init uint8 _nvBuf[OSAL_NV_PAGES_USED * OSAL_NV_PAGE_SIZE];
   \                     _nvBuf:
   \   000000                DS 12288
    188          #pragma required=_nvBuf
    189          #endif // OAD_KEEP_NV_PAGES
    190          
    191          /*********************************************************************
    192           * LOCAL VARIABLES
    193           */
    194          
    195          // Offset into the page of the first available erased space.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    196          static uint16 pgOff[OSAL_NV_PAGES_USED];
   \                     pgOff:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
   \   00000C                REQUIRE _nvBuf
    197          
    198          // Count of the bytes lost for the zeroed-out items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    199          static uint16 pgLost[OSAL_NV_PAGES_USED];
   \                     pgLost:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    200          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    201          static uint8 pgRes;  // Page reserved for item compacting transfer.
   \                     pgRes:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    202          
    203          // Saving ~100 code bytes to move a uint8* parameter/return value from findItem() to a global.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    204          static uint8 findPg;
   \                     findPg:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    205          
    206          // NV page and offsets for hot items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    207          static uint8 hotPg[OSAL_NV_MAX_HOT];
   \                     hotPg:
   \   000000                DS 3
   \   000003                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    208          static uint16 hotOff[OSAL_NV_MAX_HOT];
   \                     hotOff:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    209          
    210          /*********************************************************************
    211           * LOCAL FUNCTIONS
    212           */
    213          
    214          static uint8  initNV( void );
    215          
    216          static void   setPageUse( uint8 pg, uint8 inUse );
    217          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups );
    218          static void   erasePage( uint8 pg );
    219          static uint8  compactPage( uint8 srcPg, uint16 skipId );
    220          
    221          static uint16 findItem( uint16 id );
    222          static uint8  initItem( uint8 flag, uint16 id, uint16 len, void *buf );
    223          static void   setItem( uint8 pg, uint16 offset, eNvHdrEnum stat );
    224          static uint16 setChk( uint8 pg, uint16 offset, uint16 chk );
    225          
    226          static uint16 calcChkB( uint16 len, uint8 *buf );
    227          static uint16 calcChkF( uint8 pg, uint16 offset, uint16 len );
    228          
    229          static void   writeWord( uint8 pg, uint16 offset, uint8 *buf );
    230          static void   writeWordH( uint8 pg, uint16 offset, uint8 *buf );
    231          static void   writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt );
    232          static void   writeBuf( uint8 pg, uint16 offset, uint16 len, uint8 *buf );
    233          static void   xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len );
    234          
    235          static uint8  writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag );
    236          static uint8  hotItem(uint16 id);
    237          static void   hotItemUpdate(uint8 pg, uint16 off, uint16 id);
    238          
    239          /*********************************************************************
    240           * @fn      initNV
    241           *
    242           * @brief   Initialize the NV flash pages.
    243           *
    244           * @param   none
    245           *
    246           * @return  TRUE
    247           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    248          static uint8 initNV( void )
   \                     initNV:
    249          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    250            osalNvPgHdr_t pgHdr;
    251            uint8 oldPg = OSAL_NV_PAGE_NULL;
   \   00000A   75..00       MOV       ?V0,#0x0
    252            uint8 findDups = FALSE;
   \   00000D   7F00         MOV       R7,#0x0
    253            uint8 pg;
    254          
    255            pgRes = OSAL_NV_PAGE_NULL;
   \   00000F   90....       MOV       DPTR,#pgRes
   \   000012   7400         MOV       A,#0x0
   \   000014   F0           MOVX      @DPTR,A
    256          
    257            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   000015   7E79         MOV       R6,#0x79
   \                     ??initNV_0:
   \   000017   EE           MOV       A,R6
   \   000018   C3           CLR       C
   \   000019   947F         SUBB      A,#0x7f
   \   00001B   505A         JNC       ??initNV_1
    258            {
    259              HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_HDR_SIZE);
   \   00001D                ; Setup parameters for call to function HalFlashRead
   \   00001D   75..08       MOV       ?V2,#0x8
   \   000020   75..00       MOV       ?V3,#0x0
   \   000023   78..         MOV       R0,#?V2
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   7402         MOV       A,#0x2
   \   00002A   12....       LCALL     ?XSTACK_DISP102_8
   \   00002D   7A00         MOV       R2,#0x0
   \   00002F   7B00         MOV       R3,#0x0
   \   000031   EE           MOV       A,R6
   \   000032   F9           MOV       R1,A
   \   000033   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000036   7402         MOV       A,#0x2
   \   000038   12....       LCALL     ?DEALLOC_XSTACK8
    260          
    261              if ( pgHdr.active == OSAL_NV_ERASED_ID )
   \   00003B   85..82       MOV       DPL,?XSP + 0
   \   00003E   85..83       MOV       DPH,?XSP + 1
   \   000041   E0           MOVX      A,@DPTR
   \   000042   64FF         XRL       A,#0xff
   \   000044   7004         JNZ       ??initNV_2
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   64FF         XRL       A,#0xff
   \                     ??initNV_2:
   \   00004A   7016         JNZ       ??initNV_3
    262              {
    263                if ( pgRes == OSAL_NV_PAGE_NULL )
   \   00004C   90....       MOV       DPTR,#pgRes
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   7007         JNZ       ??initNV_4
    264                {
    265                  pgRes = pg;
   \   000052   EE           MOV       A,R6
   \   000053   90....       MOV       DPTR,#pgRes
   \   000056   F0           MOVX      @DPTR,A
   \   000057   801B         SJMP      ??initNV_5
    266                }
    267                else
    268                {
    269                  setPageUse( pg, TRUE );
   \                     ??initNV_4:
   \   000059                ; Setup parameters for call to function setPageUse
   \   000059   7A01         MOV       R2,#0x1
   \   00005B   EE           MOV       A,R6
   \   00005C   F9           MOV       R1,A
   \   00005D   12....       LCALL     `??setPageUse::?relay`; Banked call to: setPageUse
   \   000060   8012         SJMP      ??initNV_5
    270                }
    271              }
    272              // An Xfer from this page was in progress.
    273              else if ( pgHdr.xfer != OSAL_NV_ERASED_ID )
   \                     ??initNV_3:
   \   000062   7404         MOV       A,#0x4
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   E0           MOVX      A,@DPTR
   \   000068   64FF         XRL       A,#0xff
   \   00006A   7004         JNZ       ??initNV_6
   \   00006C   A3           INC       DPTR
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   64FF         XRL       A,#0xff
   \                     ??initNV_6:
   \   000070   6002         JZ        ??initNV_5
    274              {
    275                oldPg = pg;
   \   000072   8E..         MOV       ?V0,R6
    276              }
    277            }
   \                     ??initNV_5:
   \   000074   0E           INC       R6
   \   000075   80A0         SJMP      ??initNV_0
    278          
    279            // If a page compaction was interrupted before the old page was erased.
    280            if ( oldPg != OSAL_NV_PAGE_NULL )
   \                     ??initNV_1:
   \   000077   E5..         MOV       A,?V0
   \   000079   6027         JZ        ??initNV_7
    281            {
    282              /* Interrupted compaction before the target of compaction was put in use;
    283               * so erase the target of compaction and start again.
    284               */
    285              if ( pgRes != OSAL_NV_PAGE_NULL )
   \   00007B   90....       MOV       DPTR,#pgRes
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   6014         JZ        ??initNV_8
    286              {
    287                erasePage( pgRes );
   \   000081                ; Setup parameters for call to function erasePage
   \   000081   90....       MOV       DPTR,#pgRes
   \   000084   E0           MOVX      A,@DPTR
   \   000085   F9           MOV       R1,A
   \   000086   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
    288                (void)compactPage( oldPg, OSAL_NV_ITEM_NULL );
   \   000089                ; Setup parameters for call to function compactPage
   \   000089   7A00         MOV       R2,#0x0
   \   00008B   7B00         MOV       R3,#0x0
   \   00008D   A9..         MOV       R1,?V0
   \   00008F   12....       LCALL     `??compactPage::?relay`; Banked call to: compactPage
   \   000092   E9           MOV       A,R1
   \   000093   801B         SJMP      ??initNV_9
    289              }
    290              /* Interrupted compaction after the target of compaction was put in use,
    291               * but before the old page was erased; so erase it now and create a new reserve page.
    292               */
    293              else
    294              {
    295                erasePage( oldPg );
   \                     ??initNV_8:
   \   000095                ; Setup parameters for call to function erasePage
   \   000095   A9..         MOV       R1,?V0
   \   000097   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
    296                pgRes = oldPg;
   \   00009A   E5..         MOV       A,?V0
   \   00009C   90....       MOV       DPTR,#pgRes
   \   00009F   F0           MOVX      @DPTR,A
   \   0000A0   800E         SJMP      ??initNV_9
    297              }
    298            }
    299            else if ( pgRes != OSAL_NV_PAGE_NULL )
   \                     ??initNV_7:
   \   0000A2   90....       MOV       DPTR,#pgRes
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   6008         JZ        ??initNV_9
    300            {
    301              erasePage( pgRes );  // The last page erase could have been interrupted by a power-cycle.
   \   0000A8                ; Setup parameters for call to function erasePage
   \   0000A8   90....       MOV       DPTR,#pgRes
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   F9           MOV       R1,A
   \   0000AD   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
    302            }
    303            /* else if there is no reserve page, COMPACT_PAGE_CLEANUP() must have succeeded to put the old
    304             * reserve page (i.e. the target of the compacted items) into use but got interrupted by a reset
    305             * while trying to erase the page to be compacted. Such a page should only contain duplicate items
    306             * (i.e. all items will be marked 'Xfer') and thus should have the lost count equal to the page
    307             * size less the page header.
    308             */
    309          
    310            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \                     ??initNV_9:
   \   0000B0   7E79         MOV       R6,#0x79
   \                     ??initNV_10:
   \   0000B2   EE           MOV       A,R6
   \   0000B3   C3           CLR       C
   \   0000B4   947F         SUBB      A,#0x7f
   \   0000B6   501C         JNC       ??initNV_11
    311            {
    312              // Calculate page offset and lost bytes - any "old" item triggers an N^2 re-scan from start.
    313              if ( initPage( pg, OSAL_NV_ITEM_NULL, findDups ) != OSAL_NV_ITEM_NULL )
   \   0000B8                ; Setup parameters for call to function initPage
   \   0000B8   EF           MOV       A,R7
   \   0000B9   FC           MOV       R4,A
   \   0000BA   7A00         MOV       R2,#0x0
   \   0000BC   7B00         MOV       R3,#0x0
   \   0000BE   EE           MOV       A,R6
   \   0000BF   F9           MOV       R1,A
   \   0000C0   12....       LCALL     `??initPage::?relay`; Banked call to: initPage
   \   0000C3   8A..         MOV       ?V2,R2
   \   0000C5   8B..         MOV       ?V3,R3
   \   0000C7   E5..         MOV       A,?V2
   \   0000C9   45..         ORL       A,?V3
   \   0000CB   6004         JZ        ??initNV_12
    314              {
    315                findDups = TRUE;
   \   0000CD   7F01         MOV       R7,#0x1
    316                pg = (OSAL_NV_PAGE_BEG - 1);  // Pre-decrement so that loop increment will start over at zero.
   \   0000CF   7E78         MOV       R6,#0x78
    317                continue;
    318              }
    319            }
   \                     ??initNV_12:
   \   0000D1   0E           INC       R6
   \   0000D2   80DE         SJMP      ??initNV_10
    320          
    321            if (findDups)
   \                     ??initNV_11:
   \   0000D4   EF           MOV       A,R7
   \   0000D5   601E         JZ        ??initNV_13
    322            {
    323              // Final pass to calculate page lost after invalidating duplicate items.
    324              for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   0000D7   7E79         MOV       R6,#0x79
   \                     ??initNV_14:
   \   0000D9   EE           MOV       A,R6
   \   0000DA   C3           CLR       C
   \   0000DB   947F         SUBB      A,#0x7f
   \   0000DD   5016         JNC       ??initNV_13
    325              {
    326                (void)initPage( pg, OSAL_NV_ITEM_NULL, FALSE );
   \   0000DF                ; Setup parameters for call to function initPage
   \   0000DF   7C00         MOV       R4,#0x0
   \   0000E1   7A00         MOV       R2,#0x0
   \   0000E3   7B00         MOV       R3,#0x0
   \   0000E5   EE           MOV       A,R6
   \   0000E6   F9           MOV       R1,A
   \   0000E7   12....       LCALL     `??initPage::?relay`; Banked call to: initPage
   \   0000EA   8A..         MOV       ?V2,R2
   \   0000EC   8B..         MOV       ?V3,R3
   \   0000EE   A8..         MOV       R0,?V2
   \   0000F0   A9..         MOV       R1,?V3
    327              }
   \   0000F2   0E           INC       R6
   \   0000F3   80E4         SJMP      ??initNV_14
    328            }
    329          
    330            if ( pgRes == OSAL_NV_PAGE_NULL )
   \                     ??initNV_13:
   \   0000F5   90....       MOV       DPTR,#pgRes
   \   0000F8   E0           MOVX      A,@DPTR
   \   0000F9   6003         JZ        $+5
   \   0000FB   02....       LJMP      ??initNV_15 & 0xFFFF
    331            {
    332              uint8 idx, mostLost = 0;
   \   0000FE   75..00       MOV       ?V2,#0x0
    333          
    334              for ( idx = 0; idx < OSAL_NV_PAGES_USED; idx++ )
   \   000101   75..00       MOV       ?V1,#0x0
   \                     ??initNV_16:
   \   000104   E5..         MOV       A,?V1
   \   000106   C3           CLR       C
   \   000107   9406         SUBB      A,#0x6
   \   000109   4003         JC        $+5
   \   00010B   02....       LJMP      ??initNV_17 & 0xFFFF
    335              {
    336                // Is this the page that was compacted?
    337                if (pgLost[idx] == (OSAL_NV_PAGE_SIZE - OSAL_NV_PAGE_HDR_SIZE))
   \   00010E   E5..         MOV       A,?V1
   \   000110   F8           MOV       R0,A
   \   000111   7900         MOV       R1,#0x0
   \   000113   E8           MOV       A,R0
   \   000114   75F002       MOV       B,#0x2
   \   000117   A4           MUL       AB
   \   000118   C8           XCH       A,R0
   \   000119   AAF0         MOV       R2,B
   \   00011B   75F000       MOV       B,#0x0
   \   00011E   A4           MUL       AB
   \   00011F   2A           ADD       A,R2
   \   000120   FA           MOV       R2,A
   \   000121   75F002       MOV       B,#0x2
   \   000124   E9           MOV       A,R1
   \   000125   A4           MUL       AB
   \   000126   2A           ADD       A,R2
   \   000127   F9           MOV       R1,A
   \   000128   74..         MOV       A,#pgLost & 0xff
   \   00012A   28           ADD       A,R0
   \   00012B   F582         MOV       DPL,A
   \   00012D   74..         MOV       A,#(pgLost >> 8) & 0xff
   \   00012F   39           ADDC      A,R1
   \   000130   F583         MOV       DPH,A
   \   000132   E0           MOVX      A,@DPTR
   \   000133   64F8         XRL       A,#0xf8
   \   000135   7004         JNZ       ??initNV_18
   \   000137   A3           INC       DPTR
   \   000138   E0           MOVX      A,@DPTR
   \   000139   6407         XRL       A,#0x7
   \                     ??initNV_18:
   \   00013B   7005         JNZ       ??initNV_19
    338                {
    339                  mostLost = idx;
   \   00013D   85....       MOV       ?V2,?V1
    340                  break;
   \   000140   8065         SJMP      ??initNV_17
    341                }
    342                /* This check is not expected to be necessary because the above test should always succeed
    343                 * with an early loop exit.
    344                 */
    345                else if (pgLost[idx] > pgLost[mostLost])
   \                     ??initNV_19:
   \   000142   E5..         MOV       A,?V2
   \   000144   F8           MOV       R0,A
   \   000145   7900         MOV       R1,#0x0
   \   000147   E8           MOV       A,R0
   \   000148   75F002       MOV       B,#0x2
   \   00014B   A4           MUL       AB
   \   00014C   C8           XCH       A,R0
   \   00014D   AAF0         MOV       R2,B
   \   00014F   75F000       MOV       B,#0x0
   \   000152   A4           MUL       AB
   \   000153   2A           ADD       A,R2
   \   000154   FA           MOV       R2,A
   \   000155   75F002       MOV       B,#0x2
   \   000158   E9           MOV       A,R1
   \   000159   A4           MUL       AB
   \   00015A   2A           ADD       A,R2
   \   00015B   F9           MOV       R1,A
   \   00015C   74..         MOV       A,#pgLost & 0xff
   \   00015E   28           ADD       A,R0
   \   00015F   F582         MOV       DPL,A
   \   000161   74..         MOV       A,#(pgLost >> 8) & 0xff
   \   000163   39           ADDC      A,R1
   \   000164   F583         MOV       DPH,A
   \   000166   C082         PUSH      DPL
   \   000168   C083         PUSH      DPH
   \   00016A   E5..         MOV       A,?V1
   \   00016C   F8           MOV       R0,A
   \   00016D   7900         MOV       R1,#0x0
   \   00016F   E8           MOV       A,R0
   \   000170   75F002       MOV       B,#0x2
   \   000173   A4           MUL       AB
   \   000174   C8           XCH       A,R0
   \   000175   AAF0         MOV       R2,B
   \   000177   75F000       MOV       B,#0x0
   \   00017A   A4           MUL       AB
   \   00017B   2A           ADD       A,R2
   \   00017C   FA           MOV       R2,A
   \   00017D   75F002       MOV       B,#0x2
   \   000180   E9           MOV       A,R1
   \   000181   A4           MUL       AB
   \   000182   2A           ADD       A,R2
   \   000183   F9           MOV       R1,A
   \   000184   74..         MOV       A,#pgLost & 0xff
   \   000186   28           ADD       A,R0
   \   000187   F582         MOV       DPL,A
   \   000189   74..         MOV       A,#(pgLost >> 8) & 0xff
   \   00018B   39           ADDC      A,R1
   \   00018C   F583         MOV       DPH,A
   \   00018E   E0           MOVX      A,@DPTR
   \   00018F   F8           MOV       R0,A
   \   000190   A3           INC       DPTR
   \   000191   E0           MOVX      A,@DPTR
   \   000192   F9           MOV       R1,A
   \   000193   D083         POP       DPH
   \   000195   D082         POP       DPL
   \   000197   C3           CLR       C
   \   000198   E0           MOVX      A,@DPTR
   \   000199   98           SUBB      A,R0
   \   00019A   A3           INC       DPTR
   \   00019B   E0           MOVX      A,@DPTR
   \   00019C   99           SUBB      A,R1
   \   00019D   5003         JNC       ??initNV_20
    346                {
    347                  mostLost = idx;
   \   00019F   85....       MOV       ?V2,?V1
    348                }
    349              }
   \                     ??initNV_20:
   \   0001A2   05..         INC       ?V1
   \   0001A4   02....       LJMP      ??initNV_16 & 0xFFFF
    350          
    351              pgRes = mostLost + OSAL_NV_PAGE_BEG;
   \                     ??initNV_17:
   \   0001A7   7479         MOV       A,#0x79
   \   0001A9   25..         ADD       A,?V2
   \   0001AB   90....       MOV       DPTR,#pgRes
   \   0001AE   F0           MOVX      @DPTR,A
    352              erasePage( pgRes );  // The last page erase had been interrupted by a power-cycle.
   \   0001AF                ; Setup parameters for call to function erasePage
   \   0001AF   90....       MOV       DPTR,#pgRes
   \   0001B2   E0           MOVX      A,@DPTR
   \   0001B3   F9           MOV       R1,A
   \   0001B4   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
    353            }
    354          
    355            return TRUE;
   \                     ??initNV_15:
   \   0001B7   7901         MOV       R1,#0x1
   \   0001B9   7408         MOV       A,#0x8
   \   0001BB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001BE   7F04         MOV       R7,#0x4
   \   0001C0   02....       LJMP      ?BANKED_LEAVE_XDATA
    356          }
    357          
    358          /*********************************************************************
    359           * @fn      setPageUse
    360           *
    361           * @brief   Set page header active/inUse state according to 'inUse'.
    362           *
    363           * @param   pg - Valid NV page to verify and init.
    364           * @param   inUse - Boolean TRUE if inUse, FALSE if only active.
    365           *
    366           * @return  none
    367           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    368          static void setPageUse( uint8 pg, uint8 inUse )
   \                     setPageUse:
    369          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EA           MOV       A,R2
   \   00000D   FF           MOV       R7,A
    370            osalNvPgHdr_t pgHdr;
    371          
    372            pgHdr.active = OSAL_NV_ZEROED_ID;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   7400         MOV       A,#0x0
   \   000016   F0           MOVX      @DPTR,A
   \   000017   A3           INC       DPTR
   \   000018   7400         MOV       A,#0x0
   \   00001A   F0           MOVX      @DPTR,A
    373          
    374            if ( inUse )
   \   00001B   EF           MOV       A,R7
   \   00001C   600E         JZ        ??setPageUse_0
    375            {
    376              pgHdr.inUse = OSAL_NV_ZEROED_ID;
   \   00001E   7402         MOV       A,#0x2
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   7400         MOV       A,#0x0
   \   000025   F0           MOVX      @DPTR,A
   \   000026   A3           INC       DPTR
   \   000027   7400         MOV       A,#0x0
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   800C         SJMP      ??setPageUse_1
    377            }
    378            else
    379            {
    380              pgHdr.inUse = OSAL_NV_ERASED_ID;
   \                     ??setPageUse_0:
   \   00002C   7402         MOV       A,#0x2
   \   00002E   12....       LCALL     ?XSTACK_DISP0_8
   \   000031   74FF         MOV       A,#-0x1
   \   000033   F0           MOVX      @DPTR,A
   \   000034   A3           INC       DPTR
   \   000035   74FF         MOV       A,#-0x1
   \   000037   F0           MOVX      @DPTR,A
    381            }
    382          
    383            writeWord( pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8*)(&pgHdr) );
   \                     ??setPageUse_1:
   \   000038                ; Setup parameters for call to function writeWord
   \   000038   AC..         MOV       R4,?XSP + 0
   \   00003A   AD..         MOV       R5,?XSP + 1
   \   00003C   7A00         MOV       R2,#0x0
   \   00003E   7B00         MOV       R3,#0x0
   \   000040   EE           MOV       A,R6
   \   000041   F9           MOV       R1,A
   \   000042   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
    384          }
   \   000045   7408         MOV       A,#0x8
   \   000047   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004A   7F01         MOV       R7,#0x1
   \   00004C   02....       LJMP      ?BANKED_LEAVE_XDATA
    385          
    386          /*********************************************************************
    387           * @fn      initPage
    388           *
    389           * @brief   Walk the page items; calculate checksums, lost bytes & page offset.
    390           *
    391           * @param   pg - Valid NV page to verify and init.
    392           * @param   id - Valid NV item Id to use function as a "findItem".
    393           *               If set to NULL then just perform the page initialization.
    394           * @param   findDups - TRUE on recursive call from initNV() to find and zero-out duplicate items
    395           *                     left from a write that is interrupted by a reset/power-cycle.
    396           *                     FALSE otherwise.
    397           *
    398           * @return  If 'id' is non-NULL and good checksums are found, return the offset
    399           *          of the data corresponding to item Id; else OSAL_NV_ITEM_NULL.
    400           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    401          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups )
   \                     initPage:
    402          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   8A..         MOV       ?V4,R2
   \   00000E   8B..         MOV       ?V5,R3
   \   000010   8C..         MOV       ?V3,R4
    403            uint16 offset = OSAL_NV_PAGE_HDR_SIZE;
   \   000012   7E08         MOV       R6,#0x8
   \   000014   7F00         MOV       R7,#0x0
    404            uint16 sz, lost = 0;
   \   000016   75..00       MOV       ?V0,#0x0
   \   000019   75..00       MOV       ?V1,#0x0
    405            osalNvHdr_t hdr;
    406          
    407            do
    408            {
    409              HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??initPage_0:
   \   00001C                ; Setup parameters for call to function HalFlashRead
   \   00001C   75..08       MOV       ?V6,#0x8
   \   00001F   75..00       MOV       ?V7,#0x0
   \   000022   78..         MOV       R0,#?V6
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000027   7402         MOV       A,#0x2
   \   000029   12....       LCALL     ?XSTACK_DISP102_8
   \   00002C   EE           MOV       A,R6
   \   00002D   FA           MOV       R2,A
   \   00002E   EF           MOV       A,R7
   \   00002F   FB           MOV       R3,A
   \   000030   A9..         MOV       R1,?V2
   \   000032   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000035   7402         MOV       A,#0x2
   \   000037   12....       LCALL     ?DEALLOC_XSTACK8
    410          
    411              if ( hdr.id == OSAL_NV_ERASED_ID )
   \   00003A   85..82       MOV       DPL,?XSP + 0
   \   00003D   85..83       MOV       DPH,?XSP + 1
   \   000040   E0           MOVX      A,@DPTR
   \   000041   64FF         XRL       A,#0xff
   \   000043   7004         JNZ       ??initPage_1
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   64FF         XRL       A,#0xff
   \                     ??initPage_1:
   \   000049   7003         JNZ       $+5
   \   00004B   02....       LJMP      ??initPage_2 & 0xFFFF
    412              {
    413                break;
    414              }
    415          
    416              // Get the actual size in bytes which is the ceiling(hdr.len)
    417              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \   00004E   7402         MOV       A,#0x2
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   C3           CLR       C
   \   000054   E0           MOVX      A,@DPTR
   \   000055   94FC         SUBB      A,#-0x4
   \   000057   A3           INC       DPTR
   \   000058   E0           MOVX      A,@DPTR
   \   000059   94FF         SUBB      A,#-0x1
   \   00005B   4008         JC        ??initPage_3
   \   00005D   75..FC       MOV       ?V8,#-0x4
   \   000060   75..FF       MOV       ?V9,#-0x1
   \   000063   8030         SJMP      ??initPage_4
   \                     ??initPage_3:
   \   000065   7402         MOV       A,#0x2
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   2403         ADD       A,#0x3
   \   00006D   F5..         MOV       ?V8,A
   \   00006F   A3           INC       DPTR
   \   000070   E0           MOVX      A,@DPTR
   \   000071   3400         ADDC      A,#0x0
   \   000073   F5..         MOV       ?V9,A
   \   000075   7402         MOV       A,#0x2
   \   000077   78..         MOV       R0,#?V8
   \   000079   12....       LCALL     ?US_SHR
   \   00007C   E5..         MOV       A,?V8
   \   00007E   75F004       MOV       B,#0x4
   \   000081   A4           MUL       AB
   \   000082   C5..         XCH       A,?V8
   \   000084   A8F0         MOV       R0,B
   \   000086   75F000       MOV       B,#0x0
   \   000089   A4           MUL       AB
   \   00008A   28           ADD       A,R0
   \   00008B   F8           MOV       R0,A
   \   00008C   75F004       MOV       B,#0x4
   \   00008F   E5..         MOV       A,?V9
   \   000091   A4           MUL       AB
   \   000092   28           ADD       A,R0
   \   000093   F5..         MOV       ?V9,A
    418          
    419              // A bad 'len' write has blown away the rest of the page.
    420              if (sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - offset))
   \                     ??initPage_4:
   \   000095   74F8         MOV       A,#-0x8
   \   000097   C3           CLR       C
   \   000098   9E           SUBB      A,R6
   \   000099   F8           MOV       R0,A
   \   00009A   7407         MOV       A,#0x7
   \   00009C   9F           SUBB      A,R7
   \   00009D   F9           MOV       R1,A
   \   00009E   C3           CLR       C
   \   00009F   E8           MOV       A,R0
   \   0000A0   95..         SUBB      A,?V8
   \   0000A2   E9           MOV       A,R1
   \   0000A3   95..         SUBB      A,?V9
   \   0000A5   501E         JNC       ??initPage_5
    421              {
    422                lost += (OSAL_NV_PAGE_SIZE - offset);
   \   0000A7   E5..         MOV       A,?V0
   \   0000A9   2400         ADD       A,#0x0
   \   0000AB   F5..         MOV       ?V0,A
   \   0000AD   E5..         MOV       A,?V1
   \   0000AF   3408         ADDC      A,#0x8
   \   0000B1   F5..         MOV       ?V1,A
   \   0000B3   C3           CLR       C
   \   0000B4   E5..         MOV       A,?V0
   \   0000B6   9E           SUBB      A,R6
   \   0000B7   F5..         MOV       ?V0,A
   \   0000B9   E5..         MOV       A,?V1
   \   0000BB   9F           SUBB      A,R7
   \   0000BC   F5..         MOV       ?V1,A
    423                offset = OSAL_NV_PAGE_SIZE;
   \   0000BE   7E00         MOV       R6,#0x0
   \   0000C0   7F08         MOV       R7,#0x8
    424                break;
   \   0000C2   02....       LJMP      ??initPage_2 & 0xFFFF
    425              }
    426          
    427              offset += OSAL_NV_HDR_SIZE;
   \                     ??initPage_5:
   \   0000C5   EE           MOV       A,R6
   \   0000C6   2408         ADD       A,#0x8
   \   0000C8   FE           MOV       R6,A
   \   0000C9   EF           MOV       A,R7
   \   0000CA   3400         ADDC      A,#0x0
   \   0000CC   FF           MOV       R7,A
    428          
    429              if ( hdr.id != OSAL_NV_ZEROED_ID )
   \   0000CD   85..82       MOV       DPL,?XSP + 0
   \   0000D0   85..83       MOV       DPH,?XSP + 1
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   F8           MOV       R0,A
   \   0000D5   A3           INC       DPTR
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   F9           MOV       R1,A
   \   0000D8   E8           MOV       A,R0
   \   0000D9   49           ORL       A,R1
   \   0000DA   7003         JNZ       $+5
   \   0000DC   02....       LJMP      ??initPage_6 & 0xFFFF
    430              {
    431                /* This trick allows function to do double duty for findItem() without
    432                 * compromising its essential functionality at powerup initialization.
    433                 */
    434                if ( id != OSAL_NV_ITEM_NULL )
   \   0000DF   E5..         MOV       A,?V4
   \   0000E1   45..         ORL       A,?V5
   \   0000E3   6065         JZ        ??initPage_7
    435                {
    436                  /* This trick allows asking to find the old/transferred item in case
    437                   * of a successful new item write that gets interrupted before the
    438                   * old item can be zeroed out.
    439                   */
    440                  if ( (id & 0x7fff) == hdr.id )
   \   0000E5   E5..         MOV       A,?V4
   \   0000E7   54FF         ANL       A,#0xff
   \   0000E9   F8           MOV       R0,A
   \   0000EA   E5..         MOV       A,?V5
   \   0000EC   547F         ANL       A,#0x7f
   \   0000EE   F9           MOV       R1,A
   \   0000EF   85..82       MOV       DPL,?XSP + 0
   \   0000F2   85..83       MOV       DPH,?XSP + 1
   \   0000F5   E0           MOVX      A,@DPTR
   \   0000F6   68           XRL       A,R0
   \   0000F7   7003         JNZ       ??initPage_8
   \   0000F9   A3           INC       DPTR
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   69           XRL       A,R1
   \                     ??initPage_8:
   \   0000FC   6003         JZ        $+5
   \   0000FE   02....       LJMP      ??initPage_9 & 0xFFFF
    441                  {
    442                    if ( (((id & OSAL_NV_SOURCE_ID) == 0) && (hdr.stat == OSAL_NV_ERASED_ID)) ||
    443                         (((id & OSAL_NV_SOURCE_ID) != 0) && (hdr.stat != OSAL_NV_ERASED_ID)) )
   \   000101   E5..         MOV       A,?V4
   \   000103   5400         ANL       A,#0x0
   \   000105   F8           MOV       R0,A
   \   000106   E5..         MOV       A,?V5
   \   000108   5480         ANL       A,#0x80
   \   00010A   F9           MOV       R1,A
   \   00010B   E8           MOV       A,R0
   \   00010C   49           ORL       A,R1
   \   00010D   7010         JNZ       ??initPage_10
   \   00010F   7406         MOV       A,#0x6
   \   000111   12....       LCALL     ?XSTACK_DISP0_8
   \   000114   E0           MOVX      A,@DPTR
   \   000115   64FF         XRL       A,#0xff
   \   000117   7004         JNZ       ??initPage_11
   \   000119   A3           INC       DPTR
   \   00011A   E0           MOVX      A,@DPTR
   \   00011B   64FF         XRL       A,#0xff
   \                     ??initPage_11:
   \   00011D   6024         JZ        ??initPage_12
   \                     ??initPage_10:
   \   00011F   E5..         MOV       A,?V4
   \   000121   5400         ANL       A,#0x0
   \   000123   F8           MOV       R0,A
   \   000124   E5..         MOV       A,?V5
   \   000126   5480         ANL       A,#0x80
   \   000128   F9           MOV       R1,A
   \   000129   E8           MOV       A,R0
   \   00012A   49           ORL       A,R1
   \   00012B   7003         JNZ       $+5
   \   00012D   02....       LJMP      ??initPage_9 & 0xFFFF
   \   000130   7406         MOV       A,#0x6
   \   000132   12....       LCALL     ?XSTACK_DISP0_8
   \   000135   E0           MOVX      A,@DPTR
   \   000136   64FF         XRL       A,#0xff
   \   000138   7004         JNZ       ??initPage_13
   \   00013A   A3           INC       DPTR
   \   00013B   E0           MOVX      A,@DPTR
   \   00013C   64FF         XRL       A,#0xff
   \                     ??initPage_13:
   \   00013E   7003         JNZ       $+5
   \   000140   02....       LJMP      ??initPage_9 & 0xFFFF
    444                    {
    445                      return offset;
   \                     ??initPage_12:
   \   000143   EE           MOV       A,R6
   \   000144   FA           MOV       R2,A
   \   000145   EF           MOV       A,R7
   \   000146   FB           MOV       R3,A
   \   000147   02....       LJMP      ??initPage_14 & 0xFFFF
    446                    }
    447                  }
    448                }
    449                // When invoked from the osal_nv_init(), verify checksums and find & zero any duplicates.
    450                else
    451                {
    452                  if ( hdr.chk == calcChkF( pg, offset, hdr.len ) )
   \                     ??initPage_7:
   \   00014A                ; Setup parameters for call to function calcChkF
   \   00014A   7402         MOV       A,#0x2
   \   00014C   12....       LCALL     ?XSTACK_DISP0_8
   \   00014F   E0           MOVX      A,@DPTR
   \   000150   FC           MOV       R4,A
   \   000151   A3           INC       DPTR
   \   000152   E0           MOVX      A,@DPTR
   \   000153   FD           MOV       R5,A
   \   000154   EE           MOV       A,R6
   \   000155   FA           MOV       R2,A
   \   000156   EF           MOV       A,R7
   \   000157   FB           MOV       R3,A
   \   000158   A9..         MOV       R1,?V2
   \   00015A   12....       LCALL     `??calcChkF::?relay`; Banked call to: calcChkF
   \   00015D   8A..         MOV       ?V6,R2
   \   00015F   8B..         MOV       ?V7,R3
   \   000161   A8..         MOV       R0,?V6
   \   000163   A9..         MOV       R1,?V7
   \   000165   7404         MOV       A,#0x4
   \   000167   12....       LCALL     ?XSTACK_DISP0_8
   \   00016A   E0           MOVX      A,@DPTR
   \   00016B   68           XRL       A,R0
   \   00016C   7003         JNZ       ??initPage_15
   \   00016E   A3           INC       DPTR
   \   00016F   E0           MOVX      A,@DPTR
   \   000170   69           XRL       A,R1
   \                     ??initPage_15:
   \   000171   705D         JNZ       ??initPage_16
    453                  {
    454                    if ( findDups )
   \   000173   E5..         MOV       A,?V3
   \   000175   6042         JZ        ??initPage_17
    455                    {
    456                      if ( hdr.stat == OSAL_NV_ERASED_ID )
   \   000177   7406         MOV       A,#0x6
   \   000179   12....       LCALL     ?XSTACK_DISP0_8
   \   00017C   E0           MOVX      A,@DPTR
   \   00017D   64FF         XRL       A,#0xff
   \   00017F   7004         JNZ       ??initPage_18
   \   000181   A3           INC       DPTR
   \   000182   E0           MOVX      A,@DPTR
   \   000183   64FF         XRL       A,#0xff
   \                     ??initPage_18:
   \   000185   707C         JNZ       ??initPage_9
    457                      {
    458                        /* The trick of setting the MSB of the item Id causes the logic
    459                         * immediately above to return a valid page only if the header 'stat'
    460                         * indicates that it was the older item being transferred.
    461                         */
    462                        uint16 off = findItem( (hdr.id | OSAL_NV_SOURCE_ID) );
   \   000187                ; Setup parameters for call to function findItem
   \   000187   85..82       MOV       DPL,?XSP + 0
   \   00018A   85..83       MOV       DPH,?XSP + 1
   \   00018D   E0           MOVX      A,@DPTR
   \   00018E   4400         ORL       A,#0x0
   \   000190   FA           MOV       R2,A
   \   000191   A3           INC       DPTR
   \   000192   E0           MOVX      A,@DPTR
   \   000193   4480         ORL       A,#0x80
   \   000195   FB           MOV       R3,A
   \   000196   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   000199   8A..         MOV       ?V10,R2
   \   00019B   8B..         MOV       ?V11,R3
   \   00019D   85....       MOV       ?V6,?V10
   \   0001A0   85....       MOV       ?V7,?V11
    463          
    464                        if ( off != OSAL_NV_ITEM_NULL )
   \   0001A3   E5..         MOV       A,?V6
   \   0001A5   45..         ORL       A,?V7
   \   0001A7   605A         JZ        ??initPage_9
    465                        {
    466                          setItem( findPg, off, eNvZero );  // Mark old duplicate as invalid.
   \   0001A9                ; Setup parameters for call to function setItem
   \   0001A9   7C01         MOV       R4,#0x1
   \   0001AB   AA..         MOV       R2,?V6
   \   0001AD   AB..         MOV       R3,?V7
   \   0001AF   90....       MOV       DPTR,#findPg
   \   0001B2   E0           MOVX      A,@DPTR
   \   0001B3   F9           MOV       R1,A
   \   0001B4   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
   \   0001B7   804A         SJMP      ??initPage_9
    467                        }
    468                      }
    469                    }
    470                    // Any "old" item immediately exits and triggers the N^2 exhaustive initialization.
    471                    else if ( hdr.stat != OSAL_NV_ERASED_ID )
   \                     ??initPage_17:
   \   0001B9   7406         MOV       A,#0x6
   \   0001BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BE   E0           MOVX      A,@DPTR
   \   0001BF   64FF         XRL       A,#0xff
   \   0001C1   7004         JNZ       ??initPage_19
   \   0001C3   A3           INC       DPTR
   \   0001C4   E0           MOVX      A,@DPTR
   \   0001C5   64FF         XRL       A,#0xff
   \                     ??initPage_19:
   \   0001C7   603A         JZ        ??initPage_9
    472                    {
    473                      return OSAL_NV_ERASED_ID;
   \   0001C9   7AFF         MOV       R2,#-0x1
   \   0001CB   7BFF         MOV       R3,#-0x1
   \   0001CD   02....       LJMP      ??initPage_14 & 0xFFFF
    474                    }
    475                  }
    476                  else
    477                  {
    478                    setItem( pg, offset, eNvZero );  // Mark bad checksum as invalid.
   \                     ??initPage_16:
   \   0001D0                ; Setup parameters for call to function setItem
   \   0001D0   7C01         MOV       R4,#0x1
   \   0001D2   EE           MOV       A,R6
   \   0001D3   FA           MOV       R2,A
   \   0001D4   EF           MOV       A,R7
   \   0001D5   FB           MOV       R3,A
   \   0001D6   A9..         MOV       R1,?V2
   \   0001D8   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
    479                    lost += (OSAL_NV_HDR_SIZE + sz);
   \   0001DB   E5..         MOV       A,?V8
   \   0001DD   2408         ADD       A,#0x8
   \   0001DF   F8           MOV       R0,A
   \   0001E0   E4           CLR       A
   \   0001E1   35..         ADDC      A,?V9
   \   0001E3   F9           MOV       R1,A
   \   0001E4   E5..         MOV       A,?V0
   \   0001E6   28           ADD       A,R0
   \   0001E7   F5..         MOV       ?V0,A
   \   0001E9   E5..         MOV       A,?V1
   \   0001EB   39           ADDC      A,R1
   \   0001EC   F5..         MOV       ?V1,A
   \   0001EE   8013         SJMP      ??initPage_9
    480                  }
    481                }
    482              }
    483              else
    484              {
    485                lost += (OSAL_NV_HDR_SIZE + sz);
   \                     ??initPage_6:
   \   0001F0   E5..         MOV       A,?V8
   \   0001F2   2408         ADD       A,#0x8
   \   0001F4   F8           MOV       R0,A
   \   0001F5   E4           CLR       A
   \   0001F6   35..         ADDC      A,?V9
   \   0001F8   F9           MOV       R1,A
   \   0001F9   E5..         MOV       A,?V0
   \   0001FB   28           ADD       A,R0
   \   0001FC   F5..         MOV       ?V0,A
   \   0001FE   E5..         MOV       A,?V1
   \   000200   39           ADDC      A,R1
   \   000201   F5..         MOV       ?V1,A
    486              }
    487              offset += sz;
   \                     ??initPage_9:
   \   000203   EE           MOV       A,R6
   \   000204   25..         ADD       A,?V8
   \   000206   FE           MOV       R6,A
   \   000207   EF           MOV       A,R7
   \   000208   35..         ADDC      A,?V9
   \   00020A   FF           MOV       R7,A
    488          
    489            } while (offset < (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE));
   \   00020B   C3           CLR       C
   \   00020C   EE           MOV       A,R6
   \   00020D   94F8         SUBB      A,#-0x8
   \   00020F   EF           MOV       A,R7
   \   000210   9407         SUBB      A,#0x7
   \   000212   5003         JNC       $+5
   \   000214   02....       LJMP      ??initPage_0 & 0xFFFF
    490          
    491            pgOff[pg - OSAL_NV_PAGE_BEG] = offset;
   \                     ??initPage_2:
   \   000217   E5..         MOV       A,?V2
   \   000219   F8           MOV       R0,A
   \   00021A   7900         MOV       R1,#0x0
   \   00021C   E8           MOV       A,R0
   \   00021D   75F002       MOV       B,#0x2
   \   000220   A4           MUL       AB
   \   000221   C8           XCH       A,R0
   \   000222   AAF0         MOV       R2,B
   \   000224   75F000       MOV       B,#0x0
   \   000227   A4           MUL       AB
   \   000228   2A           ADD       A,R2
   \   000229   FA           MOV       R2,A
   \   00022A   75F002       MOV       B,#0x2
   \   00022D   E9           MOV       A,R1
   \   00022E   A4           MUL       AB
   \   00022F   2A           ADD       A,R2
   \   000230   F9           MOV       R1,A
   \   000231   74..         MOV       A,#(pgOff + 14) & 0xff
   \   000233   28           ADD       A,R0
   \   000234   F582         MOV       DPL,A
   \   000236   74..         MOV       A,#((pgOff - 242) >> 8) & 0xff
   \   000238   39           ADDC      A,R1
   \   000239   F583         MOV       DPH,A
   \   00023B   EE           MOV       A,R6
   \   00023C   F0           MOVX      @DPTR,A
   \   00023D   A3           INC       DPTR
   \   00023E   EF           MOV       A,R7
   \   00023F   F0           MOVX      @DPTR,A
    492            pgLost[pg - OSAL_NV_PAGE_BEG] = lost;
   \   000240   E5..         MOV       A,?V2
   \   000242   F8           MOV       R0,A
   \   000243   7900         MOV       R1,#0x0
   \   000245   E8           MOV       A,R0
   \   000246   75F002       MOV       B,#0x2
   \   000249   A4           MUL       AB
   \   00024A   C8           XCH       A,R0
   \   00024B   AAF0         MOV       R2,B
   \   00024D   75F000       MOV       B,#0x0
   \   000250   A4           MUL       AB
   \   000251   2A           ADD       A,R2
   \   000252   FA           MOV       R2,A
   \   000253   75F002       MOV       B,#0x2
   \   000256   E9           MOV       A,R1
   \   000257   A4           MUL       AB
   \   000258   2A           ADD       A,R2
   \   000259   F9           MOV       R1,A
   \   00025A   74..         MOV       A,#(pgLost + 14) & 0xff
   \   00025C   28           ADD       A,R0
   \   00025D   F582         MOV       DPL,A
   \   00025F   74..         MOV       A,#((pgLost - 242) >> 8) & 0xff
   \   000261   39           ADDC      A,R1
   \   000262   F583         MOV       DPH,A
   \   000264   E5..         MOV       A,?V0
   \   000266   F0           MOVX      @DPTR,A
   \   000267   A3           INC       DPTR
   \   000268   E5..         MOV       A,?V1
   \   00026A   F0           MOVX      @DPTR,A
    493          
    494            return OSAL_NV_ITEM_NULL;
   \   00026B   7A00         MOV       R2,#0x0
   \   00026D   7B00         MOV       R3,#0x0
   \                     ??initPage_14:
   \   00026F   7408         MOV       A,#0x8
   \   000271   12....       LCALL     ?DEALLOC_XSTACK8
   \   000274   7F0C         MOV       R7,#0xc
   \   000276   02....       LJMP      ?BANKED_LEAVE_XDATA
    495          }
    496          
    497          /*********************************************************************
    498           * @fn      erasePage
    499           *
    500           * @brief   Erases a page in Flash.
    501           *
    502           * @param   pg - Valid NV page to erase.
    503           *
    504           * @return  none
    505           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    506          static void erasePage( uint8 pg )
   \                     erasePage:
    507          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    508            HalFlashErase(pg);
   \   000007                ; Setup parameters for call to function HalFlashErase
   \   000007   EE           MOV       A,R6
   \   000008   F9           MOV       R1,A
   \   000009   12....       LCALL     `??HalFlashErase::?relay`; Banked call to: HalFlashErase
    509          
    510            pgOff[pg - OSAL_NV_PAGE_BEG] = OSAL_NV_PAGE_HDR_SIZE;
   \   00000C   EE           MOV       A,R6
   \   00000D   F8           MOV       R0,A
   \   00000E   7900         MOV       R1,#0x0
   \   000010   E8           MOV       A,R0
   \   000011   75F002       MOV       B,#0x2
   \   000014   A4           MUL       AB
   \   000015   C8           XCH       A,R0
   \   000016   AAF0         MOV       R2,B
   \   000018   75F000       MOV       B,#0x0
   \   00001B   A4           MUL       AB
   \   00001C   2A           ADD       A,R2
   \   00001D   FA           MOV       R2,A
   \   00001E   75F002       MOV       B,#0x2
   \   000021   E9           MOV       A,R1
   \   000022   A4           MUL       AB
   \   000023   2A           ADD       A,R2
   \   000024   F9           MOV       R1,A
   \   000025   74..         MOV       A,#(pgOff + 14) & 0xff
   \   000027   28           ADD       A,R0
   \   000028   F582         MOV       DPL,A
   \   00002A   74..         MOV       A,#((pgOff - 242) >> 8) & 0xff
   \   00002C   39           ADDC      A,R1
   \   00002D   F583         MOV       DPH,A
   \   00002F   7408         MOV       A,#0x8
   \   000031   F0           MOVX      @DPTR,A
   \   000032   A3           INC       DPTR
   \   000033   7400         MOV       A,#0x0
   \   000035   F0           MOVX      @DPTR,A
    511            pgLost[pg - OSAL_NV_PAGE_BEG] = 0;
   \   000036   EE           MOV       A,R6
   \   000037   F8           MOV       R0,A
   \   000038   7900         MOV       R1,#0x0
   \   00003A   E8           MOV       A,R0
   \   00003B   75F002       MOV       B,#0x2
   \   00003E   A4           MUL       AB
   \   00003F   C8           XCH       A,R0
   \   000040   AAF0         MOV       R2,B
   \   000042   75F000       MOV       B,#0x0
   \   000045   A4           MUL       AB
   \   000046   2A           ADD       A,R2
   \   000047   FA           MOV       R2,A
   \   000048   75F002       MOV       B,#0x2
   \   00004B   E9           MOV       A,R1
   \   00004C   A4           MUL       AB
   \   00004D   2A           ADD       A,R2
   \   00004E   F9           MOV       R1,A
   \   00004F   74..         MOV       A,#(pgLost + 14) & 0xff
   \   000051   28           ADD       A,R0
   \   000052   F582         MOV       DPL,A
   \   000054   74..         MOV       A,#((pgLost - 242) >> 8) & 0xff
   \   000056   39           ADDC      A,R1
   \   000057   F583         MOV       DPH,A
   \   000059   7400         MOV       A,#0x0
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   A3           INC       DPTR
   \   00005D   7400         MOV       A,#0x0
   \   00005F   F0           MOVX      @DPTR,A
    512          }
   \   000060   7F01         MOV       R7,#0x1
   \   000062   02....       LJMP      ?BANKED_LEAVE_XDATA
    513          
    514          /*********************************************************************
    515           * @fn      compactPage
    516           *
    517           * @brief   Compacts the page specified.
    518           *
    519           * @param   srcPg - Valid NV page to erase.
    520           * @param   skipId - Item Id to not compact.
    521           *
    522           * @return  TRUE if valid items from 'srcPg' are successully compacted onto the 'pgRes';
    523           *          FALSE otherwise.
    524           *          Note that on a failure, this could loop, re-erasing the 'pgRes' and re-compacting with
    525           *          the risk of infinitely looping on HAL flash failure.
    526           *          Worst case scenario: HAL flash starts failing in general, perhaps low Vdd?
    527           *          All page compactions will fail which will cause all osal_nv_write() calls to return
    528           *          NV_OPER_FAILED.
    529           *          Eventually, all pages in use may also be in the state of "pending compaction" where
    530           *          the page header member OSAL_NV_PG_XFER is zeroed out.
    531           *          During this "HAL flash brown-out", the code will run and OTA should work (until low Vdd
    532           *          causes an actual chip brown-out, of course.) Although no new NV items will be created
    533           *          or written, the last value written with a return value of SUCCESS can continue to be
    534           *          read successfully.
    535           *          If eventually HAL flash starts working again, all of the pages marked as
    536           *          "pending compaction" may or may not be eventually compacted. But, initNV() will
    537           *          deterministically clean-up one page pending compaction per power-cycle
    538           *          (if HAL flash is working.) Nevertheless, one erased reserve page will be maintained
    539           *          through such a scenario.
    540           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    541          static uint8 compactPage( uint8 srcPg, uint16 skipId )
   \                     compactPage:
    542          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   8A..         MOV       ?V2,R2
   \   00000E   8B..         MOV       ?V3,R3
    543            uint16 srcOff;
    544            uint8 rtrn;
    545          
    546            // To minimize code size, only check for a clean page here where it's absolutely required.
    547            for (srcOff = 0; srcOff < OSAL_NV_PAGE_SIZE; srcOff++)
   \   000010   7E00         MOV       R6,#0x0
   \   000012   7F00         MOV       R7,#0x0
   \                     ??compactPage_0:
   \   000014   C3           CLR       C
   \   000015   EE           MOV       A,R6
   \   000016   9400         SUBB      A,#0x0
   \   000018   EF           MOV       A,R7
   \   000019   9408         SUBB      A,#0x8
   \   00001B   5040         JNC       ??compactPage_1
    548            {
    549              HalFlashRead(pgRes, srcOff, &rtrn, 1);
   \   00001D                ; Setup parameters for call to function HalFlashRead
   \   00001D   75..01       MOV       ?V4,#0x1
   \   000020   75..00       MOV       ?V5,#0x0
   \   000023   78..         MOV       R0,#?V4
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   7402         MOV       A,#0x2
   \   00002A   12....       LCALL     ?XSTACK_DISP102_8
   \   00002D   EE           MOV       A,R6
   \   00002E   FA           MOV       R2,A
   \   00002F   EF           MOV       A,R7
   \   000030   FB           MOV       R3,A
   \   000031   90....       MOV       DPTR,#pgRes
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F9           MOV       R1,A
   \   000036   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000039   7402         MOV       A,#0x2
   \   00003B   12....       LCALL     ?DEALLOC_XSTACK8
    550              if (rtrn != OSAL_NV_ERASED)
   \   00003E   85..82       MOV       DPL,?XSP + 0
   \   000041   85..83       MOV       DPH,?XSP + 1
   \   000044   E0           MOVX      A,@DPTR
   \   000045   64FF         XRL       A,#0xff
   \   000047   600D         JZ        ??compactPage_2
    551              {
    552                erasePage(pgRes);
   \   000049                ; Setup parameters for call to function erasePage
   \   000049   90....       MOV       DPTR,#pgRes
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   F9           MOV       R1,A
   \   00004E   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
    553                return FALSE;
   \   000051   7900         MOV       R1,#0x0
   \   000053   02....       LJMP      ??compactPage_3 & 0xFFFF
    554              }
    555            }
   \                     ??compactPage_2:
   \   000056   0E           INC       R6
   \   000057   EE           MOV       A,R6
   \   000058   70BA         JNZ       ??compactPage_0
   \   00005A   0F           INC       R7
   \   00005B   80B7         SJMP      ??compactPage_0
    556          
    557            srcOff = OSAL_NV_PAGE_HDR_SIZE;
   \                     ??compactPage_1:
   \   00005D   7E08         MOV       R6,#0x8
   \   00005F   7F00         MOV       R7,#0x0
    558            rtrn = TRUE;
   \   000061   85..82       MOV       DPL,?XSP + 0
   \   000064   85..83       MOV       DPH,?XSP + 1
   \   000067   7401         MOV       A,#0x1
   \   000069   F0           MOVX      @DPTR,A
    559          
    560            while ( srcOff < (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE ) )
   \                     ??compactPage_4:
   \   00006A   C3           CLR       C
   \   00006B   EE           MOV       A,R6
   \   00006C   94F8         SUBB      A,#-0x8
   \   00006E   EF           MOV       A,R7
   \   00006F   9407         SUBB      A,#0x7
   \   000071   4003         JC        $+5
   \   000073   02....       LJMP      ??compactPage_5 & 0xFFFF
    561            {
    562              osalNvHdr_t hdr;
    563              uint16 sz, dstOff = pgOff[pgRes-OSAL_NV_PAGE_BEG];
   \   000076   90....       MOV       DPTR,#pgRes
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   F8           MOV       R0,A
   \   00007B   7900         MOV       R1,#0x0
   \   00007D   E8           MOV       A,R0
   \   00007E   75F002       MOV       B,#0x2
   \   000081   A4           MUL       AB
   \   000082   C8           XCH       A,R0
   \   000083   AAF0         MOV       R2,B
   \   000085   75F000       MOV       B,#0x0
   \   000088   A4           MUL       AB
   \   000089   2A           ADD       A,R2
   \   00008A   FA           MOV       R2,A
   \   00008B   75F002       MOV       B,#0x2
   \   00008E   E9           MOV       A,R1
   \   00008F   A4           MUL       AB
   \   000090   2A           ADD       A,R2
   \   000091   F9           MOV       R1,A
   \   000092   74..         MOV       A,#(pgOff + 14) & 0xff
   \   000094   28           ADD       A,R0
   \   000095   F582         MOV       DPL,A
   \   000097   74..         MOV       A,#((pgOff - 242) >> 8) & 0xff
   \   000099   39           ADDC      A,R1
   \   00009A   F583         MOV       DPH,A
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   F5..         MOV       ?V6,A
   \   00009F   A3           INC       DPTR
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   F5..         MOV       ?V7,A
    564          
    565              HalFlashRead(srcPg, srcOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   0000A3                ; Setup parameters for call to function HalFlashRead
   \   0000A3   75..08       MOV       ?V8,#0x8
   \   0000A6   75..00       MOV       ?V9,#0x0
   \   0000A9   78..         MOV       R0,#?V8
   \   0000AB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AE   7403         MOV       A,#0x3
   \   0000B0   12....       LCALL     ?XSTACK_DISP102_8
   \   0000B3   EE           MOV       A,R6
   \   0000B4   FA           MOV       R2,A
   \   0000B5   EF           MOV       A,R7
   \   0000B6   FB           MOV       R3,A
   \   0000B7   A9..         MOV       R1,?V0
   \   0000B9   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   0000BC   7402         MOV       A,#0x2
   \   0000BE   12....       LCALL     ?DEALLOC_XSTACK8
    566          
    567              if ( hdr.id == OSAL_NV_ERASED_ID )
   \   0000C1   7401         MOV       A,#0x1
   \   0000C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   64FF         XRL       A,#0xff
   \   0000C9   7004         JNZ       ??compactPage_6
   \   0000CB   A3           INC       DPTR
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   64FF         XRL       A,#0xff
   \                     ??compactPage_6:
   \   0000CF   7003         JNZ       $+5
   \   0000D1   02....       LJMP      ??compactPage_5 & 0xFFFF
    568              {
    569                break;
    570              }
    571          
    572              // Get the actual size in bytes which is the ceiling(hdr.len)
    573              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \   0000D4   7403         MOV       A,#0x3
   \   0000D6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D9   C3           CLR       C
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   94FC         SUBB      A,#-0x4
   \   0000DD   A3           INC       DPTR
   \   0000DE   E0           MOVX      A,@DPTR
   \   0000DF   94FF         SUBB      A,#-0x1
   \   0000E1   4008         JC        ??compactPage_7
   \   0000E3   75..FC       MOV       ?V4,#-0x4
   \   0000E6   75..FF       MOV       ?V5,#-0x1
   \   0000E9   8030         SJMP      ??compactPage_8
   \                     ??compactPage_7:
   \   0000EB   7403         MOV       A,#0x3
   \   0000ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   2403         ADD       A,#0x3
   \   0000F3   F5..         MOV       ?V4,A
   \   0000F5   A3           INC       DPTR
   \   0000F6   E0           MOVX      A,@DPTR
   \   0000F7   3400         ADDC      A,#0x0
   \   0000F9   F5..         MOV       ?V5,A
   \   0000FB   7402         MOV       A,#0x2
   \   0000FD   78..         MOV       R0,#?V4
   \   0000FF   12....       LCALL     ?US_SHR
   \   000102   E5..         MOV       A,?V4
   \   000104   75F004       MOV       B,#0x4
   \   000107   A4           MUL       AB
   \   000108   C5..         XCH       A,?V4
   \   00010A   A8F0         MOV       R0,B
   \   00010C   75F000       MOV       B,#0x0
   \   00010F   A4           MUL       AB
   \   000110   28           ADD       A,R0
   \   000111   F8           MOV       R0,A
   \   000112   75F004       MOV       B,#0x4
   \   000115   E5..         MOV       A,?V5
   \   000117   A4           MUL       AB
   \   000118   28           ADD       A,R0
   \   000119   F5..         MOV       ?V5,A
    574          
    575              if ( sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - srcOff) )
   \                     ??compactPage_8:
   \   00011B   74F8         MOV       A,#-0x8
   \   00011D   C3           CLR       C
   \   00011E   9E           SUBB      A,R6
   \   00011F   F8           MOV       R0,A
   \   000120   7407         MOV       A,#0x7
   \   000122   9F           SUBB      A,R7
   \   000123   F9           MOV       R1,A
   \   000124   C3           CLR       C
   \   000125   E8           MOV       A,R0
   \   000126   95..         SUBB      A,?V4
   \   000128   E9           MOV       A,R1
   \   000129   95..         SUBB      A,?V5
   \   00012B   5003         JNC       $+5
   \   00012D   02....       LJMP      ??compactPage_5 & 0xFFFF
    576              {
    577                break;
    578              }
    579          
    580              if ( sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - dstOff) )
   \   000130   74F8         MOV       A,#-0x8
   \   000132   C3           CLR       C
   \   000133   95..         SUBB      A,?V6
   \   000135   F8           MOV       R0,A
   \   000136   7407         MOV       A,#0x7
   \   000138   95..         SUBB      A,?V7
   \   00013A   F9           MOV       R1,A
   \   00013B   C3           CLR       C
   \   00013C   E8           MOV       A,R0
   \   00013D   95..         SUBB      A,?V4
   \   00013F   E9           MOV       A,R1
   \   000140   95..         SUBB      A,?V5
   \   000142   500C         JNC       ??compactPage_9
    581              {
    582                rtrn = FALSE;
   \   000144   85..82       MOV       DPL,?XSP + 0
   \   000147   85..83       MOV       DPH,?XSP + 1
   \   00014A   7400         MOV       A,#0x0
   \   00014C   F0           MOVX      @DPTR,A
    583                break;
   \   00014D   02....       LJMP      ??compactPage_5 & 0xFFFF
    584              }
    585          
    586              srcOff += OSAL_NV_HDR_SIZE;
   \                     ??compactPage_9:
   \   000150   EE           MOV       A,R6
   \   000151   2408         ADD       A,#0x8
   \   000153   FE           MOV       R6,A
   \   000154   EF           MOV       A,R7
   \   000155   3400         ADDC      A,#0x0
   \   000157   FF           MOV       R7,A
    587          
    588              if ( (hdr.id != OSAL_NV_ZEROED_ID) && (hdr.id != skipId) )
   \   000158   7401         MOV       A,#0x1
   \   00015A   12....       LCALL     ?XSTACK_DISP0_8
   \   00015D   E0           MOVX      A,@DPTR
   \   00015E   F8           MOV       R0,A
   \   00015F   A3           INC       DPTR
   \   000160   E0           MOVX      A,@DPTR
   \   000161   F9           MOV       R1,A
   \   000162   E8           MOV       A,R0
   \   000163   49           ORL       A,R1
   \   000164   7003         JNZ       $+5
   \   000166   02....       LJMP      ??compactPage_10 & 0xFFFF
   \   000169   7401         MOV       A,#0x1
   \   00016B   12....       LCALL     ?XSTACK_DISP0_8
   \   00016E   E0           MOVX      A,@DPTR
   \   00016F   65..         XRL       A,?V2
   \   000171   7004         JNZ       ??compactPage_11
   \   000173   A3           INC       DPTR
   \   000174   E0           MOVX      A,@DPTR
   \   000175   65..         XRL       A,?V3
   \                     ??compactPage_11:
   \   000177   7003         JNZ       $+5
   \   000179   02....       LJMP      ??compactPage_10 & 0xFFFF
    589              {
    590                if ( hdr.chk == calcChkF( srcPg, srcOff, hdr.len ) )
   \   00017C                ; Setup parameters for call to function calcChkF
   \   00017C   7403         MOV       A,#0x3
   \   00017E   12....       LCALL     ?XSTACK_DISP0_8
   \   000181   E0           MOVX      A,@DPTR
   \   000182   FC           MOV       R4,A
   \   000183   A3           INC       DPTR
   \   000184   E0           MOVX      A,@DPTR
   \   000185   FD           MOV       R5,A
   \   000186   EE           MOV       A,R6
   \   000187   FA           MOV       R2,A
   \   000188   EF           MOV       A,R7
   \   000189   FB           MOV       R3,A
   \   00018A   A9..         MOV       R1,?V0
   \   00018C   12....       LCALL     `??calcChkF::?relay`; Banked call to: calcChkF
   \   00018F   8A..         MOV       ?V8,R2
   \   000191   8B..         MOV       ?V9,R3
   \   000193   A8..         MOV       R0,?V8
   \   000195   A9..         MOV       R1,?V9
   \   000197   7405         MOV       A,#0x5
   \   000199   12....       LCALL     ?XSTACK_DISP0_8
   \   00019C   E0           MOVX      A,@DPTR
   \   00019D   68           XRL       A,R0
   \   00019E   7003         JNZ       ??compactPage_12
   \   0001A0   A3           INC       DPTR
   \   0001A1   E0           MOVX      A,@DPTR
   \   0001A2   69           XRL       A,R1
   \                     ??compactPage_12:
   \   0001A3   6003         JZ        $+5
   \   0001A5   02....       LJMP      ??compactPage_10 & 0xFFFF
    591                {
    592                  /* Prevent excessive re-writes to item header caused by numerous, rapid, & successive
    593                   * OSAL_Nv interruptions caused by resets.
    594                   */
    595                  if ( hdr.stat == OSAL_NV_ERASED_ID )
   \   0001A8   7407         MOV       A,#0x7
   \   0001AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AD   E0           MOVX      A,@DPTR
   \   0001AE   64FF         XRL       A,#0xff
   \   0001B0   7004         JNZ       ??compactPage_13
   \   0001B2   A3           INC       DPTR
   \   0001B3   E0           MOVX      A,@DPTR
   \   0001B4   64FF         XRL       A,#0xff
   \                     ??compactPage_13:
   \   0001B6   700B         JNZ       ??compactPage_14
    596                  {
    597                    setItem( srcPg, srcOff, eNvXfer );
   \   0001B8                ; Setup parameters for call to function setItem
   \   0001B8   7C00         MOV       R4,#0x0
   \   0001BA   EE           MOV       A,R6
   \   0001BB   FA           MOV       R2,A
   \   0001BC   EF           MOV       A,R7
   \   0001BD   FB           MOV       R3,A
   \   0001BE   A9..         MOV       R1,?V0
   \   0001C0   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
    598                  }
    599          
    600                  if ( writeItem( pgRes, hdr.id, hdr.len, NULL, FALSE ) )
   \                     ??compactPage_14:
   \   0001C3                ; Setup parameters for call to function writeItem
   \   0001C3   75..00       MOV       ?V1,#0x0
   \   0001C6   78..         MOV       R0,#?V1
   \   0001C8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001CB   E4           CLR       A
   \   0001CC   F5..         MOV       ?V8,A
   \   0001CE   F5..         MOV       ?V9,A
   \   0001D0   78..         MOV       R0,#?V8
   \   0001D2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001D5   7406         MOV       A,#0x6
   \   0001D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001DA   E0           MOVX      A,@DPTR
   \   0001DB   FC           MOV       R4,A
   \   0001DC   A3           INC       DPTR
   \   0001DD   E0           MOVX      A,@DPTR
   \   0001DE   FD           MOV       R5,A
   \   0001DF   7404         MOV       A,#0x4
   \   0001E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E4   E0           MOVX      A,@DPTR
   \   0001E5   FA           MOV       R2,A
   \   0001E6   A3           INC       DPTR
   \   0001E7   E0           MOVX      A,@DPTR
   \   0001E8   FB           MOV       R3,A
   \   0001E9   90....       MOV       DPTR,#pgRes
   \   0001EC   E0           MOVX      A,@DPTR
   \   0001ED   F9           MOV       R1,A
   \   0001EE   12....       LCALL     `??writeItem::?relay`; Banked call to: writeItem
   \   0001F1   7403         MOV       A,#0x3
   \   0001F3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001F6   E9           MOV       A,R1
   \   0001F7   7003         JNZ       $+5
   \   0001F9   02....       LJMP      ??compactPage_15 & 0xFFFF
    601                  {
    602                    dstOff += OSAL_NV_HDR_SIZE;
   \   0001FC   E5..         MOV       A,?V6
   \   0001FE   2408         ADD       A,#0x8
   \   000200   F5..         MOV       ?V6,A
   \   000202   E5..         MOV       A,?V7
   \   000204   3400         ADDC      A,#0x0
   \   000206   F5..         MOV       ?V7,A
    603                    xferBuf( srcPg, srcOff, pgRes, dstOff, sz );
   \   000208                ; Setup parameters for call to function xferBuf
   \   000208   78..         MOV       R0,#?V4
   \   00020A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00020D   78..         MOV       R0,#?V6
   \   00020F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000212   90....       MOV       DPTR,#pgRes
   \   000215   E0           MOVX      A,@DPTR
   \   000216   FC           MOV       R4,A
   \   000217   EE           MOV       A,R6
   \   000218   FA           MOV       R2,A
   \   000219   EF           MOV       A,R7
   \   00021A   FB           MOV       R3,A
   \   00021B   A9..         MOV       R1,?V0
   \   00021D   12....       LCALL     `??xferBuf::?relay`; Banked call to: xferBuf
   \   000220   7404         MOV       A,#0x4
   \   000222   12....       LCALL     ?DEALLOC_XSTACK8
    604                    // Calculate and write the new checksum.
    605                    if (hdr.chk == calcChkF(pgRes, dstOff, hdr.len))
   \   000225                ; Setup parameters for call to function calcChkF
   \   000225   7403         MOV       A,#0x3
   \   000227   12....       LCALL     ?XSTACK_DISP0_8
   \   00022A   E0           MOVX      A,@DPTR
   \   00022B   FC           MOV       R4,A
   \   00022C   A3           INC       DPTR
   \   00022D   E0           MOVX      A,@DPTR
   \   00022E   FD           MOV       R5,A
   \   00022F   AA..         MOV       R2,?V6
   \   000231   AB..         MOV       R3,?V7
   \   000233   90....       MOV       DPTR,#pgRes
   \   000236   E0           MOVX      A,@DPTR
   \   000237   F9           MOV       R1,A
   \   000238   12....       LCALL     `??calcChkF::?relay`; Banked call to: calcChkF
   \   00023B   8A..         MOV       ?V8,R2
   \   00023D   8B..         MOV       ?V9,R3
   \   00023F   A8..         MOV       R0,?V8
   \   000241   A9..         MOV       R1,?V9
   \   000243   7405         MOV       A,#0x5
   \   000245   12....       LCALL     ?XSTACK_DISP0_8
   \   000248   E0           MOVX      A,@DPTR
   \   000249   68           XRL       A,R0
   \   00024A   7003         JNZ       ??compactPage_16
   \   00024C   A3           INC       DPTR
   \   00024D   E0           MOVX      A,@DPTR
   \   00024E   69           XRL       A,R1
   \                     ??compactPage_16:
   \   00024F   704F         JNZ       ??compactPage_17
    606                    {
    607                      if ( hdr.chk != setChk( pgRes, dstOff, hdr.chk ) )
   \   000251                ; Setup parameters for call to function setChk
   \   000251   7405         MOV       A,#0x5
   \   000253   12....       LCALL     ?XSTACK_DISP0_8
   \   000256   E0           MOVX      A,@DPTR
   \   000257   FC           MOV       R4,A
   \   000258   A3           INC       DPTR
   \   000259   E0           MOVX      A,@DPTR
   \   00025A   FD           MOV       R5,A
   \   00025B   AA..         MOV       R2,?V6
   \   00025D   AB..         MOV       R3,?V7
   \   00025F   90....       MOV       DPTR,#pgRes
   \   000262   E0           MOVX      A,@DPTR
   \   000263   F9           MOV       R1,A
   \   000264   12....       LCALL     `??setChk::?relay`; Banked call to: setChk
   \   000267   8A..         MOV       ?V8,R2
   \   000269   8B..         MOV       ?V9,R3
   \   00026B   A8..         MOV       R0,?V8
   \   00026D   A9..         MOV       R1,?V9
   \   00026F   7405         MOV       A,#0x5
   \   000271   12....       LCALL     ?XSTACK_DISP0_8
   \   000274   E0           MOVX      A,@DPTR
   \   000275   68           XRL       A,R0
   \   000276   7003         JNZ       ??compactPage_18
   \   000278   A3           INC       DPTR
   \   000279   E0           MOVX      A,@DPTR
   \   00027A   69           XRL       A,R1
   \                     ??compactPage_18:
   \   00027B   600B         JZ        ??compactPage_19
    608                      {
    609                        rtrn = FALSE;
   \   00027D   85..82       MOV       DPL,?XSP + 0
   \   000280   85..83       MOV       DPH,?XSP + 1
   \   000283   7400         MOV       A,#0x0
   \   000285   F0           MOVX      @DPTR,A
    610                        break;
   \   000286   8039         SJMP      ??compactPage_5
    611                      }
    612                      else
    613                      {
    614                        hotItemUpdate(pgRes, dstOff, hdr.id);
   \                     ??compactPage_19:
   \   000288                ; Setup parameters for call to function hotItemUpdate
   \   000288   7401         MOV       A,#0x1
   \   00028A   12....       LCALL     ?XSTACK_DISP0_8
   \   00028D   E0           MOVX      A,@DPTR
   \   00028E   FC           MOV       R4,A
   \   00028F   A3           INC       DPTR
   \   000290   E0           MOVX      A,@DPTR
   \   000291   FD           MOV       R5,A
   \   000292   AA..         MOV       R2,?V6
   \   000294   AB..         MOV       R3,?V7
   \   000296   90....       MOV       DPTR,#pgRes
   \   000299   E0           MOVX      A,@DPTR
   \   00029A   F9           MOV       R1,A
   \   00029B   12....       LCALL     `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   \   00029E   8016         SJMP      ??compactPage_10
    615                      }
    616                    }
    617                    else
    618                    {
    619                      rtrn = FALSE;
   \                     ??compactPage_17:
   \   0002A0   85..82       MOV       DPL,?XSP + 0
   \   0002A3   85..83       MOV       DPH,?XSP + 1
   \   0002A6   7400         MOV       A,#0x0
   \   0002A8   F0           MOVX      @DPTR,A
    620                      break;
   \   0002A9   8016         SJMP      ??compactPage_5
    621                    }
    622                  }
    623                  else
    624                  {
    625                    rtrn = FALSE;
   \                     ??compactPage_15:
   \   0002AB   85..82       MOV       DPL,?XSP + 0
   \   0002AE   85..83       MOV       DPH,?XSP + 1
   \   0002B1   7400         MOV       A,#0x0
   \   0002B3   F0           MOVX      @DPTR,A
    626                    break;
   \   0002B4   800B         SJMP      ??compactPage_5
    627                  }
    628                }
    629              }
    630          
    631              srcOff += sz;
   \                     ??compactPage_10:
   \   0002B6   EE           MOV       A,R6
   \   0002B7   25..         ADD       A,?V4
   \   0002B9   FE           MOV       R6,A
   \   0002BA   EF           MOV       A,R7
   \   0002BB   35..         ADDC      A,?V5
   \   0002BD   FF           MOV       R7,A
   \   0002BE   02....       LJMP      ??compactPage_4 & 0xFFFF
    632            }
    633          
    634            if (rtrn == FALSE)
   \                     ??compactPage_5:
   \   0002C1   85..82       MOV       DPL,?XSP + 0
   \   0002C4   85..83       MOV       DPH,?XSP + 1
   \   0002C7   E0           MOVX      A,@DPTR
   \   0002C8   700A         JNZ       ??compactPage_20
    635            {
    636              erasePage(pgRes);
   \   0002CA                ; Setup parameters for call to function erasePage
   \   0002CA   90....       MOV       DPTR,#pgRes
   \   0002CD   E0           MOVX      A,@DPTR
   \   0002CE   F9           MOV       R1,A
   \   0002CF   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
   \   0002D2   801B         SJMP      ??compactPage_21
    637            }
    638            else if (skipId == OSAL_NV_ITEM_NULL)
   \                     ??compactPage_20:
   \   0002D4   E5..         MOV       A,?V2
   \   0002D6   45..         ORL       A,?V3
   \   0002D8   7015         JNZ       ??compactPage_21
    639            {
    640              COMPACT_PAGE_CLEANUP(srcPg);
   \   0002DA                ; Setup parameters for call to function setPageUse
   \   0002DA   7A01         MOV       R2,#0x1
   \   0002DC   90....       MOV       DPTR,#pgRes
   \   0002DF   E0           MOVX      A,@DPTR
   \   0002E0   F9           MOV       R1,A
   \   0002E1   12....       LCALL     `??setPageUse::?relay`; Banked call to: setPageUse
   \   0002E4                ; Setup parameters for call to function erasePage
   \   0002E4   A9..         MOV       R1,?V0
   \   0002E6   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
   \   0002E9   E5..         MOV       A,?V0
   \   0002EB   90....       MOV       DPTR,#pgRes
   \   0002EE   F0           MOVX      @DPTR,A
    641            }
    642            // else invoking function must cleanup.
    643          
    644            return rtrn;
   \                     ??compactPage_21:
   \   0002EF   85..82       MOV       DPL,?XSP + 0
   \   0002F2   85..83       MOV       DPH,?XSP + 1
   \   0002F5   E0           MOVX      A,@DPTR
   \   0002F6   F9           MOV       R1,A
   \                     ??compactPage_3:
   \   0002F7   7409         MOV       A,#0x9
   \   0002F9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002FC   7F0A         MOV       R7,#0xa
   \   0002FE   02....       LJMP      ?BANKED_LEAVE_XDATA
    645          }
    646          
    647          /*********************************************************************
    648           * @fn      findItem
    649           *
    650           * @brief   Find an item Id in NV and return the page and offset to its data.
    651           *
    652           * @param   id - Valid NV item Id.
    653           *
    654           * @return  Offset of data corresponding to item Id, if found;
    655           *          otherwise OSAL_NV_ITEM_NULL.
    656           *
    657           *          The page containing the item, if found;
    658           *          otherwise no valid assignment made - left equal to item Id.
    659           *
    660           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    661          static uint16 findItem( uint16 id )
   \                     findItem:
    662          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    663            uint16 off;
    664            uint8 pg;
    665          
    666            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   000009   75..79       MOV       ?V2,#0x79
   \                     ??findItem_0:
   \   00000C   E5..         MOV       A,?V2
   \   00000E   C3           CLR       C
   \   00000F   947F         SUBB      A,#0x7f
   \   000011   502B         JNC       ??findItem_1
    667            {
    668              if ( (off = initPage( pg, id, FALSE )) != OSAL_NV_ITEM_NULL )
   \   000013                ; Setup parameters for call to function initPage
   \   000013   7C00         MOV       R4,#0x0
   \   000015   EE           MOV       A,R6
   \   000016   FA           MOV       R2,A
   \   000017   EF           MOV       A,R7
   \   000018   FB           MOV       R3,A
   \   000019   A9..         MOV       R1,?V2
   \   00001B   12....       LCALL     `??initPage::?relay`; Banked call to: initPage
   \   00001E   8A..         MOV       ?V4,R2
   \   000020   8B..         MOV       ?V5,R3
   \   000022   A8..         MOV       R0,?V4
   \   000024   A9..         MOV       R1,?V5
   \   000026   88..         MOV       ?V0,R0
   \   000028   89..         MOV       ?V1,R1
   \   00002A   E8           MOV       A,R0
   \   00002B   49           ORL       A,R1
   \   00002C   600C         JZ        ??findItem_2
    669              {
    670                findPg = pg;
   \   00002E   E5..         MOV       A,?V2
   \   000030   90....       MOV       DPTR,#findPg
   \   000033   F0           MOVX      @DPTR,A
    671                return off;
   \   000034   AA..         MOV       R2,?V0
   \   000036   AB..         MOV       R3,?V1
   \   000038   8027         SJMP      ??findItem_3
    672              }
    673            }
   \                     ??findItem_2:
   \   00003A   05..         INC       ?V2
   \   00003C   80CE         SJMP      ??findItem_0
    674          
    675            // Now attempt to find the item as the "old" item of a failed/interrupted NV write.
    676            if ( (id & OSAL_NV_SOURCE_ID) == 0 )
   \                     ??findItem_1:
   \   00003E   EE           MOV       A,R6
   \   00003F   5400         ANL       A,#0x0
   \   000041   F8           MOV       R0,A
   \   000042   EF           MOV       A,R7
   \   000043   5480         ANL       A,#0x80
   \   000045   F9           MOV       R1,A
   \   000046   E8           MOV       A,R0
   \   000047   49           ORL       A,R1
   \   000048   700D         JNZ       ??findItem_4
    677            {
    678              return findItem( id | OSAL_NV_SOURCE_ID );
   \   00004A                ; Setup parameters for call to function findItem
   \   00004A   EE           MOV       A,R6
   \   00004B   4400         ORL       A,#0x0
   \   00004D   FA           MOV       R2,A
   \   00004E   EF           MOV       A,R7
   \   00004F   4480         ORL       A,#0x80
   \   000051   FB           MOV       R3,A
   \   000052   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   000055   800A         SJMP      ??findItem_3
    679            }
    680            else
    681            {
    682              findPg = OSAL_NV_PAGE_NULL;
   \                     ??findItem_4:
   \   000057   90....       MOV       DPTR,#findPg
   \   00005A   7400         MOV       A,#0x0
   \   00005C   F0           MOVX      @DPTR,A
    683              return OSAL_NV_ITEM_NULL;
   \   00005D   7A00         MOV       R2,#0x0
   \   00005F   7B00         MOV       R3,#0x0
   \                     ??findItem_3:
   \   000061   7F06         MOV       R7,#0x6
   \   000063   02....       LJMP      ?BANKED_LEAVE_XDATA
    684            }
    685          }
    686          
    687          /*********************************************************************
    688           * @fn      initItem
    689           *
    690           * @brief   An NV item is created and initialized with the data passed to the function, if any.
    691           *
    692           * @param   flag - TRUE if the 'buf' parameter contains data for the call to writeItem().
    693           *                 (i.e. if invoked from osal_nv_item_init() ).
    694           *                 FALSE if writeItem() should just write the header and the 'buf' parameter
    695           *                 is ok to use as a return value of the page number to be cleaned with
    696           *                 COMPACT_PAGE_CLEANUP().
    697           *                 (i.e. if invoked from osal_nv_write() ).
    698           * @param   id  - Valid NV item Id.
    699           * @param   len - Item data length.
    700           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
    701           *
    702           * @return  The OSAL Nv page number if item write and read back checksums ok;
    703           *          OSAL_NV_PAGE_NULL otherwise.
    704           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    705          static uint8 initItem( uint8 flag, uint16 id, uint16 len, void *buf )
   \                     initItem:
    706          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V1,R1
   \   00000C   8A..         MOV       ?V4,R2
   \   00000E   8B..         MOV       ?V5,R3
   \   000010   8C..         MOV       ?V2,R4
   \   000012   8D..         MOV       ?V3,R5
   \   000014   741C         MOV       A,#0x1c
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V6,A
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F5..         MOV       ?V7,A
    707            uint16 sz = OSAL_NV_ITEM_SIZE( len );
   \   000020   C3           CLR       C
   \   000021   E5..         MOV       A,?V2
   \   000023   94F4         SUBB      A,#-0xc
   \   000025   E5..         MOV       A,?V3
   \   000027   94FF         SUBB      A,#-0x1
   \   000029   400F         JC        ??initItem_0
   \   00002B   85..82       MOV       DPL,?XSP + 0
   \   00002E   85..83       MOV       DPH,?XSP + 1
   \   000031   74FC         MOV       A,#-0x4
   \   000033   F0           MOVX      @DPTR,A
   \   000034   A3           INC       DPTR
   \   000035   74FF         MOV       A,#-0x1
   \   000037   F0           MOVX      @DPTR,A
   \   000038   803F         SJMP      ??initItem_1
   \                     ??initItem_0:
   \   00003A   E5..         MOV       A,?V2
   \   00003C   2403         ADD       A,#0x3
   \   00003E   F5..         MOV       ?V8,A
   \   000040   E4           CLR       A
   \   000041   35..         ADDC      A,?V3
   \   000043   F5..         MOV       ?V9,A
   \   000045   7402         MOV       A,#0x2
   \   000047   78..         MOV       R0,#?V8
   \   000049   12....       LCALL     ?US_SHR
   \   00004C   E5..         MOV       A,?V8
   \   00004E   75F004       MOV       B,#0x4
   \   000051   A4           MUL       AB
   \   000052   C5..         XCH       A,?V8
   \   000054   A8F0         MOV       R0,B
   \   000056   75F000       MOV       B,#0x0
   \   000059   A4           MUL       AB
   \   00005A   28           ADD       A,R0
   \   00005B   F8           MOV       R0,A
   \   00005C   75F004       MOV       B,#0x4
   \   00005F   E5..         MOV       A,?V9
   \   000061   A4           MUL       AB
   \   000062   28           ADD       A,R0
   \   000063   F5..         MOV       ?V9,A
   \   000065   E5..         MOV       A,?V8
   \   000067   2408         ADD       A,#0x8
   \   000069   F8           MOV       R0,A
   \   00006A   E4           CLR       A
   \   00006B   35..         ADDC      A,?V9
   \   00006D   F9           MOV       R1,A
   \   00006E   85..82       MOV       DPL,?XSP + 0
   \   000071   85..83       MOV       DPH,?XSP + 1
   \   000074   E8           MOV       A,R0
   \   000075   F0           MOVX      @DPTR,A
   \   000076   A3           INC       DPTR
   \   000077   E9           MOV       A,R1
   \   000078   F0           MOVX      @DPTR,A
    708            uint8 rtrn = OSAL_NV_PAGE_NULL;
   \                     ??initItem_1:
   \   000079   7F00         MOV       R7,#0x0
    709            uint8 cnt = OSAL_NV_PAGES_USED;
   \   00007B   75..06       MOV       ?V0,#0x6
    710            uint8 pg = pgRes+1;  // Set to 1 after the reserve page to even wear across all available pages.
   \   00007E   90....       MOV       DPTR,#pgRes
   \   000081   E0           MOVX      A,@DPTR
   \   000082   2401         ADD       A,#0x1
   \   000084   FE           MOV       R6,A
    711          
    712            do {
    713              if (pg >= OSAL_NV_PAGE_BEG+OSAL_NV_PAGES_USED)
   \                     ??initItem_2:
   \   000085   EE           MOV       A,R6
   \   000086   C3           CLR       C
   \   000087   947F         SUBB      A,#0x7f
   \   000089   4002         JC        ??initItem_3
    714              {
    715                pg = OSAL_NV_PAGE_BEG;
   \   00008B   7E79         MOV       R6,#0x79
    716              }
    717              if ( pg != pgRes )
   \                     ??initItem_3:
   \   00008D   90....       MOV       DPTR,#pgRes
   \   000090   E0           MOVX      A,@DPTR
   \   000091   6E           XRL       A,R6
   \   000092   6071         JZ        ??initItem_4
    718              {
    719                uint8 idx = pg - OSAL_NV_PAGE_BEG;
   \   000094   7487         MOV       A,#-0x79
   \   000096   2E           ADD       A,R6
   \   000097   FC           MOV       R4,A
    720                if ( sz <= (OSAL_NV_PAGE_SIZE - pgOff[idx] + pgLost[idx]) )
   \   000098   EC           MOV       A,R4
   \   000099   F8           MOV       R0,A
   \   00009A   7900         MOV       R1,#0x0
   \   00009C   E8           MOV       A,R0
   \   00009D   75F002       MOV       B,#0x2
   \   0000A0   A4           MUL       AB
   \   0000A1   C8           XCH       A,R0
   \   0000A2   AAF0         MOV       R2,B
   \   0000A4   75F000       MOV       B,#0x0
   \   0000A7   A4           MUL       AB
   \   0000A8   2A           ADD       A,R2
   \   0000A9   FA           MOV       R2,A
   \   0000AA   75F002       MOV       B,#0x2
   \   0000AD   E9           MOV       A,R1
   \   0000AE   A4           MUL       AB
   \   0000AF   2A           ADD       A,R2
   \   0000B0   F9           MOV       R1,A
   \   0000B1   74..         MOV       A,#pgOff & 0xff
   \   0000B3   28           ADD       A,R0
   \   0000B4   F582         MOV       DPL,A
   \   0000B6   74..         MOV       A,#(pgOff >> 8) & 0xff
   \   0000B8   39           ADDC      A,R1
   \   0000B9   F583         MOV       DPH,A
   \   0000BB   E0           MOVX      A,@DPTR
   \   0000BC   F8           MOV       R0,A
   \   0000BD   A3           INC       DPTR
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   F9           MOV       R1,A
   \   0000C0   7400         MOV       A,#0x0
   \   0000C2   C3           CLR       C
   \   0000C3   98           SUBB      A,R0
   \   0000C4   F8           MOV       R0,A
   \   0000C5   7408         MOV       A,#0x8
   \   0000C7   99           SUBB      A,R1
   \   0000C8   F9           MOV       R1,A
   \   0000C9   EC           MOV       A,R4
   \   0000CA   FA           MOV       R2,A
   \   0000CB   7B00         MOV       R3,#0x0
   \   0000CD   EA           MOV       A,R2
   \   0000CE   75F002       MOV       B,#0x2
   \   0000D1   A4           MUL       AB
   \   0000D2   CA           XCH       A,R2
   \   0000D3   ADF0         MOV       R5,B
   \   0000D5   75F000       MOV       B,#0x0
   \   0000D8   A4           MUL       AB
   \   0000D9   2D           ADD       A,R5
   \   0000DA   FD           MOV       R5,A
   \   0000DB   75F002       MOV       B,#0x2
   \   0000DE   EB           MOV       A,R3
   \   0000DF   A4           MUL       AB
   \   0000E0   2D           ADD       A,R5
   \   0000E1   FB           MOV       R3,A
   \   0000E2   74..         MOV       A,#pgLost & 0xff
   \   0000E4   2A           ADD       A,R2
   \   0000E5   F582         MOV       DPL,A
   \   0000E7   74..         MOV       A,#(pgLost >> 8) & 0xff
   \   0000E9   3B           ADDC      A,R3
   \   0000EA   F583         MOV       DPH,A
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   28           ADD       A,R0
   \   0000EE   FA           MOV       R2,A
   \   0000EF   A3           INC       DPTR
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   39           ADDC      A,R1
   \   0000F2   FB           MOV       R3,A
   \   0000F3   85..82       MOV       DPL,?XSP + 0
   \   0000F6   85..83       MOV       DPH,?XSP + 1
   \   0000F9   E0           MOVX      A,@DPTR
   \   0000FA   F8           MOV       R0,A
   \   0000FB   A3           INC       DPTR
   \   0000FC   E0           MOVX      A,@DPTR
   \   0000FD   F9           MOV       R1,A
   \   0000FE   C3           CLR       C
   \   0000FF   EA           MOV       A,R2
   \   000100   98           SUBB      A,R0
   \   000101   EB           MOV       A,R3
   \   000102   99           SUBB      A,R1
   \   000103   500A         JNC       ??initItem_5
    721                {
    722                  break;
    723                }
    724              }
    725              pg++;
   \                     ??initItem_4:
   \   000105   0E           INC       R6
    726            } while (--cnt);
   \   000106   15..         DEC       ?V0
   \   000108   E5..         MOV       A,?V0
   \   00010A   6003         JZ        $+5
   \   00010C   02....       LJMP      ??initItem_2 & 0xFFFF
    727          
    728            if (cnt)
   \                     ??initItem_5:
   \   00010F   E5..         MOV       A,?V0
   \   000111   7003         JNZ       $+5
   \   000113   02....       LJMP      ??initItem_6 & 0xFFFF
    729            {
    730              // Item fits if an old page is compacted.
    731              if ( sz > (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]) )
   \   000116   EE           MOV       A,R6
   \   000117   F8           MOV       R0,A
   \   000118   7900         MOV       R1,#0x0
   \   00011A   E8           MOV       A,R0
   \   00011B   75F002       MOV       B,#0x2
   \   00011E   A4           MUL       AB
   \   00011F   C8           XCH       A,R0
   \   000120   AAF0         MOV       R2,B
   \   000122   75F000       MOV       B,#0x0
   \   000125   A4           MUL       AB
   \   000126   2A           ADD       A,R2
   \   000127   FA           MOV       R2,A
   \   000128   75F002       MOV       B,#0x2
   \   00012B   E9           MOV       A,R1
   \   00012C   A4           MUL       AB
   \   00012D   2A           ADD       A,R2
   \   00012E   F9           MOV       R1,A
   \   00012F   74..         MOV       A,#(pgOff + 14) & 0xff
   \   000131   28           ADD       A,R0
   \   000132   F582         MOV       DPL,A
   \   000134   74..         MOV       A,#((pgOff - 242) >> 8) & 0xff
   \   000136   39           ADDC      A,R1
   \   000137   F583         MOV       DPH,A
   \   000139   E0           MOVX      A,@DPTR
   \   00013A   F8           MOV       R0,A
   \   00013B   A3           INC       DPTR
   \   00013C   E0           MOVX      A,@DPTR
   \   00013D   F9           MOV       R1,A
   \   00013E   7400         MOV       A,#0x0
   \   000140   C3           CLR       C
   \   000141   98           SUBB      A,R0
   \   000142   FA           MOV       R2,A
   \   000143   7408         MOV       A,#0x8
   \   000145   99           SUBB      A,R1
   \   000146   FB           MOV       R3,A
   \   000147   85..82       MOV       DPL,?XSP + 0
   \   00014A   85..83       MOV       DPH,?XSP + 1
   \   00014D   E0           MOVX      A,@DPTR
   \   00014E   F8           MOV       R0,A
   \   00014F   A3           INC       DPTR
   \   000150   E0           MOVX      A,@DPTR
   \   000151   F9           MOV       R1,A
   \   000152   C3           CLR       C
   \   000153   EA           MOV       A,R2
   \   000154   98           SUBB      A,R0
   \   000155   EB           MOV       A,R3
   \   000156   99           SUBB      A,R1
   \   000157   4003         JC        $+5
   \   000159   02....       LJMP      ??initItem_7 & 0xFFFF
    732              {
    733                osalNvPgHdr_t pgHdr;
    734          
    735                /* Prevent excessive re-writes to page header caused by numerous, rapid, & successive
    736                 * OSAL_Nv interruptions caused by resets.
    737                 */
    738                HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_PAGE_HDR_SIZE);
   \   00015C                ; Setup parameters for call to function HalFlashRead
   \   00015C   75..08       MOV       ?V8,#0x8
   \   00015F   75..00       MOV       ?V9,#0x0
   \   000162   78..         MOV       R0,#?V8
   \   000164   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000167   7404         MOV       A,#0x4
   \   000169   12....       LCALL     ?XSTACK_DISP102_8
   \   00016C   7A00         MOV       R2,#0x0
   \   00016E   7B00         MOV       R3,#0x0
   \   000170   EE           MOV       A,R6
   \   000171   F9           MOV       R1,A
   \   000172   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000175   7402         MOV       A,#0x2
   \   000177   12....       LCALL     ?DEALLOC_XSTACK8
    739                if ( pgHdr.xfer == OSAL_NV_ERASED_ID )
   \   00017A   7406         MOV       A,#0x6
   \   00017C   12....       LCALL     ?XSTACK_DISP0_8
   \   00017F   E0           MOVX      A,@DPTR
   \   000180   64FF         XRL       A,#0xff
   \   000182   7004         JNZ       ??initItem_8
   \   000184   A3           INC       DPTR
   \   000185   E0           MOVX      A,@DPTR
   \   000186   64FF         XRL       A,#0xff
   \                     ??initItem_8:
   \   000188   701A         JNZ       ??initItem_9
    740                {
    741                  // Mark the old page as being in process of compaction.
    742                  sz = OSAL_NV_ZEROED_ID;
   \   00018A   85..82       MOV       DPL,?XSP + 0
   \   00018D   85..83       MOV       DPH,?XSP + 1
   \   000190   7400         MOV       A,#0x0
   \   000192   F0           MOVX      @DPTR,A
   \   000193   A3           INC       DPTR
   \   000194   7400         MOV       A,#0x0
   \   000196   F0           MOVX      @DPTR,A
    743                  writeWordH( pg, OSAL_NV_PG_XFER, (uint8*)(&sz) );
   \   000197                ; Setup parameters for call to function writeWordH
   \   000197   AC..         MOV       R4,?XSP + 0
   \   000199   AD..         MOV       R5,?XSP + 1
   \   00019B   7A04         MOV       R2,#0x4
   \   00019D   7B00         MOV       R3,#0x0
   \   00019F   EE           MOV       A,R6
   \   0001A0   F9           MOV       R1,A
   \   0001A1   12....       LCALL     `??writeWordH::?relay`; Banked call to: writeWordH
    744                }
    745          
    746                /* First the old page is compacted, then the new item will be the last one written to what
    747                 * had been the reserved page.
    748                 */
    749                if (compactPage( pg, id ))
   \                     ??initItem_9:
   \   0001A4                ; Setup parameters for call to function compactPage
   \   0001A4   AA..         MOV       R2,?V4
   \   0001A6   AB..         MOV       R3,?V5
   \   0001A8   EE           MOV       A,R6
   \   0001A9   F9           MOV       R1,A
   \   0001AA   12....       LCALL     `??compactPage::?relay`; Banked call to: compactPage
   \   0001AD   E9           MOV       A,R1
   \   0001AE   6078         JZ        ??initItem_6
    750                {
    751                  if ( writeItem( pgRes, id, len, buf, flag ) )
   \   0001B0                ; Setup parameters for call to function writeItem
   \   0001B0   E5..         MOV       A,?V1
   \   0001B2   F5..         MOV       ?V8,A
   \   0001B4   78..         MOV       R0,#?V8
   \   0001B6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001B9   78..         MOV       R0,#?V6
   \   0001BB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001BE   AC..         MOV       R4,?V2
   \   0001C0   AD..         MOV       R5,?V3
   \   0001C2   AA..         MOV       R2,?V4
   \   0001C4   AB..         MOV       R3,?V5
   \   0001C6   90....       MOV       DPTR,#pgRes
   \   0001C9   E0           MOVX      A,@DPTR
   \   0001CA   F9           MOV       R1,A
   \   0001CB   12....       LCALL     `??writeItem::?relay`; Banked call to: writeItem
   \   0001CE   7403         MOV       A,#0x3
   \   0001D0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001D3   E9           MOV       A,R1
   \   0001D4   6005         JZ        ??initItem_10
    752                  {
    753                    rtrn = pgRes;
   \   0001D6   90....       MOV       DPTR,#pgRes
   \   0001D9   E0           MOVX      A,@DPTR
   \   0001DA   FF           MOV       R7,A
    754                  }
    755          
    756                  if ( flag == FALSE )
   \                     ??initItem_10:
   \   0001DB   E5..         MOV       A,?V1
   \   0001DD   700E         JNZ       ??initItem_11
    757                  {
    758                    /* Overload 'buf' as an OUT parameter to pass back to the calling function
    759                     * the old page to be cleaned up.
    760                     */
    761                    *(uint8 *)buf = pg;
   \   0001DF   EE           MOV       A,R6
   \   0001E0   C0E0         PUSH      A
   \   0001E2   85..82       MOV       DPL,?V6
   \   0001E5   85..83       MOV       DPH,?V7
   \   0001E8   D0E0         POP       A
   \   0001EA   F0           MOVX      @DPTR,A
   \   0001EB   803B         SJMP      ??initItem_6
    762                  }
    763                  else
    764                  {
    765                    /* Safe to do the compacted page cleanup even if writeItem() above failed because the
    766                     * item does not yet exist since this call with flag==TRUE is from osal_nv_item_init().
    767                     */
    768                    COMPACT_PAGE_CLEANUP( pg );
   \                     ??initItem_11:
   \   0001ED                ; Setup parameters for call to function setPageUse
   \   0001ED   7A01         MOV       R2,#0x1
   \   0001EF   90....       MOV       DPTR,#pgRes
   \   0001F2   E0           MOVX      A,@DPTR
   \   0001F3   F9           MOV       R1,A
   \   0001F4   12....       LCALL     `??setPageUse::?relay`; Banked call to: setPageUse
   \   0001F7                ; Setup parameters for call to function erasePage
   \   0001F7   EE           MOV       A,R6
   \   0001F8   F9           MOV       R1,A
   \   0001F9   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
   \   0001FC   EE           MOV       A,R6
   \   0001FD   90....       MOV       DPTR,#pgRes
   \   000200   F0           MOVX      @DPTR,A
   \   000201   8025         SJMP      ??initItem_6
    769                  }
    770                }
    771              }
    772              else
    773              {
    774                if ( writeItem( pg, id, len, buf, flag ) )
   \                     ??initItem_7:
   \   000203                ; Setup parameters for call to function writeItem
   \   000203   E5..         MOV       A,?V1
   \   000205   F5..         MOV       ?V8,A
   \   000207   78..         MOV       R0,#?V8
   \   000209   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00020C   78..         MOV       R0,#?V6
   \   00020E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000211   AC..         MOV       R4,?V2
   \   000213   AD..         MOV       R5,?V3
   \   000215   AA..         MOV       R2,?V4
   \   000217   AB..         MOV       R3,?V5
   \   000219   EE           MOV       A,R6
   \   00021A   F9           MOV       R1,A
   \   00021B   12....       LCALL     `??writeItem::?relay`; Banked call to: writeItem
   \   00021E   7403         MOV       A,#0x3
   \   000220   12....       LCALL     ?DEALLOC_XSTACK8
   \   000223   E9           MOV       A,R1
   \   000224   6002         JZ        ??initItem_6
    775                {
    776                  rtrn = pg;
   \   000226   EE           MOV       A,R6
   \   000227   FF           MOV       R7,A
    777                }
    778              }
    779            }
    780          
    781            return rtrn;
   \                     ??initItem_6:
   \   000228   EF           MOV       A,R7
   \   000229   F9           MOV       R1,A
   \   00022A   740A         MOV       A,#0xa
   \   00022C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00022F   7F0A         MOV       R7,#0xa
   \   000231   02....       LJMP      ?BANKED_LEAVE_XDATA
    782          }
    783          
    784          /*********************************************************************
    785           * @fn      setItem
    786           *
    787           * @brief   Set an item Id or status to mark its state.
    788           *
    789           * @param   pg - Valid NV page.
    790           * @param   offset - Valid offset into the page of the item data - the header
    791           *                   offset is calculated from this.
    792           * @param   stat - Valid enum value for the item status.
    793           *
    794           * @return  none
    795           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    796          static void setItem( uint8 pg, uint16 offset, eNvHdrEnum stat )
   \                     setItem:
    797          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   \   000010   8C..         MOV       ?V3,R4
    798            osalNvHdr_t hdr;
    799          
    800            offset -= OSAL_NV_HDR_SIZE;
   \   000012   EE           MOV       A,R6
   \   000013   24F8         ADD       A,#-0x8
   \   000015   FE           MOV       R6,A
   \   000016   EF           MOV       A,R7
   \   000017   34FF         ADDC      A,#-0x1
   \   000019   FF           MOV       R7,A
    801            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   00001A                ; Setup parameters for call to function HalFlashRead
   \   00001A   75..08       MOV       ?V0,#0x8
   \   00001D   75..00       MOV       ?V1,#0x0
   \   000020   78..         MOV       R0,#?V0
   \   000022   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000025   7402         MOV       A,#0x2
   \   000027   12....       LCALL     ?XSTACK_DISP102_8
   \   00002A   EE           MOV       A,R6
   \   00002B   FA           MOV       R2,A
   \   00002C   EF           MOV       A,R7
   \   00002D   FB           MOV       R3,A
   \   00002E   A9..         MOV       R1,?V2
   \   000030   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000033   7402         MOV       A,#0x2
   \   000035   12....       LCALL     ?DEALLOC_XSTACK8
    802          
    803            if ( stat == eNvXfer )
   \   000038   E5..         MOV       A,?V3
   \   00003A   7024         JNZ       ??setItem_0
    804            {
    805              hdr.stat = OSAL_NV_ACTIVE;
   \   00003C   7406         MOV       A,#0x6
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   7400         MOV       A,#0x0
   \   000043   F0           MOVX      @DPTR,A
   \   000044   A3           INC       DPTR
   \   000045   7400         MOV       A,#0x0
   \   000047   F0           MOVX      @DPTR,A
    806              /* Write status to flash. Total of 4 bytes written to Flash 
    807               * ( 2 bytes of checksum and 2 bytes of status) 
    808               */
    809              writeWord( pg, offset+OSAL_NV_HDR_CHK, (uint8*)(&(hdr.chk)) );
   \   000048                ; Setup parameters for call to function writeWord
   \   000048   7404         MOV       A,#0x4
   \   00004A   12....       LCALL     ?XSTACK_DISP0_8
   \   00004D   AC82         MOV       R4,DPL
   \   00004F   AD83         MOV       R5,DPH
   \   000051   EE           MOV       A,R6
   \   000052   2404         ADD       A,#0x4
   \   000054   FA           MOV       R2,A
   \   000055   E4           CLR       A
   \   000056   3F           ADDC      A,R7
   \   000057   FB           MOV       R3,A
   \   000058   A9..         MOV       R1,?V2
   \   00005A   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   \   00005D   02....       LJMP      ??setItem_1 & 0xFFFF
    810            }
    811            else // if ( stat == eNvZero )
    812            {
    813              uint16 sz = ((hdr.len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE +
    814                                                                                    OSAL_NV_HDR_SIZE;
   \                     ??setItem_0:
   \   000060   7402         MOV       A,#0x2
   \   000062   12....       LCALL     ?XSTACK_DISP0_8
   \   000065   E0           MOVX      A,@DPTR
   \   000066   2403         ADD       A,#0x3
   \   000068   F5..         MOV       ?V0,A
   \   00006A   A3           INC       DPTR
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   3400         ADDC      A,#0x0
   \   00006E   F5..         MOV       ?V1,A
   \   000070   7402         MOV       A,#0x2
   \   000072   78..         MOV       R0,#?V0
   \   000074   12....       LCALL     ?US_SHR
   \   000077   E5..         MOV       A,?V0
   \   000079   75F004       MOV       B,#0x4
   \   00007C   A4           MUL       AB
   \   00007D   C5..         XCH       A,?V0
   \   00007F   A8F0         MOV       R0,B
   \   000081   75F000       MOV       B,#0x0
   \   000084   A4           MUL       AB
   \   000085   28           ADD       A,R0
   \   000086   F8           MOV       R0,A
   \   000087   75F004       MOV       B,#0x4
   \   00008A   E5..         MOV       A,?V1
   \   00008C   A4           MUL       AB
   \   00008D   28           ADD       A,R0
   \   00008E   F5..         MOV       ?V1,A
   \   000090   E5..         MOV       A,?V0
   \   000092   2408         ADD       A,#0x8
   \   000094   F5..         MOV       ?V0,A
   \   000096   5002         JNC       ??setItem_2
   \   000098   05..         INC       ?V1
    815              hdr.id = 0;
   \                     ??setItem_2:
   \   00009A   85..82       MOV       DPL,?XSP + 0
   \   00009D   85..83       MOV       DPH,?XSP + 1
   \   0000A0   7400         MOV       A,#0x0
   \   0000A2   F0           MOVX      @DPTR,A
   \   0000A3   A3           INC       DPTR
   \   0000A4   7400         MOV       A,#0x0
   \   0000A6   F0           MOVX      @DPTR,A
    816              writeWord( pg, offset, (uint8 *)(&hdr) );
   \   0000A7                ; Setup parameters for call to function writeWord
   \   0000A7   AC..         MOV       R4,?XSP + 0
   \   0000A9   AD..         MOV       R5,?XSP + 1
   \   0000AB   EE           MOV       A,R6
   \   0000AC   FA           MOV       R2,A
   \   0000AD   EF           MOV       A,R7
   \   0000AE   FB           MOV       R3,A
   \   0000AF   A9..         MOV       R1,?V2
   \   0000B1   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
    817              pgLost[pg-OSAL_NV_PAGE_BEG] += sz;
   \   0000B4   E5..         MOV       A,?V2
   \   0000B6   F8           MOV       R0,A
   \   0000B7   7900         MOV       R1,#0x0
   \   0000B9   E8           MOV       A,R0
   \   0000BA   75F002       MOV       B,#0x2
   \   0000BD   A4           MUL       AB
   \   0000BE   C8           XCH       A,R0
   \   0000BF   AAF0         MOV       R2,B
   \   0000C1   75F000       MOV       B,#0x0
   \   0000C4   A4           MUL       AB
   \   0000C5   2A           ADD       A,R2
   \   0000C6   FA           MOV       R2,A
   \   0000C7   75F002       MOV       B,#0x2
   \   0000CA   E9           MOV       A,R1
   \   0000CB   A4           MUL       AB
   \   0000CC   2A           ADD       A,R2
   \   0000CD   F9           MOV       R1,A
   \   0000CE   74..         MOV       A,#(pgLost + 14) & 0xff
   \   0000D0   28           ADD       A,R0
   \   0000D1   F582         MOV       DPL,A
   \   0000D3   74..         MOV       A,#((pgLost - 242) >> 8) & 0xff
   \   0000D5   39           ADDC      A,R1
   \   0000D6   F583         MOV       DPH,A
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   25..         ADD       A,?V0
   \   0000DB   F0           MOVX      @DPTR,A
   \   0000DC   A3           INC       DPTR
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   35..         ADDC      A,?V1
   \   0000E0   F0           MOVX      @DPTR,A
    818            }
    819          }
   \                     ??setItem_1:
   \   0000E1   7408         MOV       A,#0x8
   \   0000E3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E6   7F04         MOV       R7,#0x4
   \   0000E8   02....       LJMP      ?BANKED_LEAVE_XDATA
    820          
    821          /*********************************************************************
    822           * @fn      setChk
    823           *
    824           * @brief   Set the item header checksum given the data buffer offset.
    825           *
    826           * @param   pg - Valid NV page.
    827           * @param   offset - Valid offset into the page of the item data - the header
    828           *                   offset is calculated from this.
    829           * @param   chk - The checksum to set.
    830           *
    831           * @return  The checksum read back.
    832           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    833          static uint16 setChk( uint8 pg, uint16 offset, uint16 chk )
   \                     setChk:
    834          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EC           MOV       A,R4
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   ED           MOV       A,R5
   \   000014   F0           MOVX      @DPTR,A
   \   000015   89..         MOV       ?V0,R1
   \   000017   EA           MOV       A,R2
   \   000018   FE           MOV       R6,A
   \   000019   EB           MOV       A,R3
   \   00001A   FF           MOV       R7,A
    835            offset -= OSAL_NV_WORD_SIZE;
   \   00001B   EE           MOV       A,R6
   \   00001C   24FC         ADD       A,#-0x4
   \   00001E   FE           MOV       R6,A
   \   00001F   EF           MOV       A,R7
   \   000020   34FF         ADDC      A,#-0x1
   \   000022   FF           MOV       R7,A
    836            writeWordH( pg, offset, (uint8 *)&chk );
   \   000023                ; Setup parameters for call to function writeWordH
   \   000023   AC..         MOV       R4,?XSP + 0
   \   000025   AD..         MOV       R5,?XSP + 1
   \   000027   EE           MOV       A,R6
   \   000028   FA           MOV       R2,A
   \   000029   EF           MOV       A,R7
   \   00002A   FB           MOV       R3,A
   \   00002B   A9..         MOV       R1,?V0
   \   00002D   12....       LCALL     `??writeWordH::?relay`; Banked call to: writeWordH
    837            HalFlashRead( pg, offset, (uint8 *)(&chk), sizeof( chk ) );
   \   000030                ; Setup parameters for call to function HalFlashRead
   \   000030   75..02       MOV       ?V2,#0x2
   \   000033   75..00       MOV       ?V3,#0x0
   \   000036   78..         MOV       R0,#?V2
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   7402         MOV       A,#0x2
   \   00003D   12....       LCALL     ?XSTACK_DISP102_8
   \   000040   EE           MOV       A,R6
   \   000041   FA           MOV       R2,A
   \   000042   EF           MOV       A,R7
   \   000043   FB           MOV       R3,A
   \   000044   A9..         MOV       R1,?V0
   \   000046   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000049   7402         MOV       A,#0x2
   \   00004B   12....       LCALL     ?DEALLOC_XSTACK8
    838          
    839            return chk;
   \   00004E   85..82       MOV       DPL,?XSP + 0
   \   000051   85..83       MOV       DPH,?XSP + 1
   \   000054   E0           MOVX      A,@DPTR
   \   000055   FA           MOV       R2,A
   \   000056   A3           INC       DPTR
   \   000057   E0           MOVX      A,@DPTR
   \   000058   FB           MOV       R3,A
   \   000059   7402         MOV       A,#0x2
   \   00005B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005E   7F04         MOV       R7,#0x4
   \   000060   02....       LJMP      ?BANKED_LEAVE_XDATA
    840          }
    841          
    842          /*********************************************************************
    843           * @fn      calcChkB
    844           *
    845           * @brief   Calculates the data checksum over the 'buf' parameter.
    846           *
    847           * @param   len - Byte count of the data to be checksummed.
    848           * @param   buf - Data buffer to be checksummed.
    849           *
    850           * @return  Calculated checksum of the data bytes.
    851           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    852          static uint16 calcChkB( uint16 len, uint8 *buf )
   \                     calcChkB:
    853          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   F8           MOV       R0,A
   \   000007   EB           MOV       A,R3
   \   000008   F9           MOV       R1,A
   \   000009   8C82         MOV       DPL,R4
   \   00000B   8D83         MOV       DPH,R5
    854            uint8 fill = len % OSAL_NV_WORD_SIZE;
   \   00000D   E8           MOV       A,R0
   \   00000E   5403         ANL       A,#0x3
   \   000010   FE           MOV       R6,A
    855            uint16 chk;
    856          
    857            if ( !buf )
   \   000011   E582         MOV       A,DPL
   \   000013   4583         ORL       A,DPH
   \   000015   701F         JNZ       ??calcChkB_0
    858            {
    859              chk = len * OSAL_NV_ERASED;
   \   000017   E8           MOV       A,R0
   \   000018   FC           MOV       R4,A
   \   000019   E9           MOV       A,R1
   \   00001A   FD           MOV       R5,A
   \   00001B   EC           MOV       A,R4
   \   00001C   75F0FF       MOV       B,#-0x1
   \   00001F   A4           MUL       AB
   \   000020   CC           XCH       A,R4
   \   000021   AFF0         MOV       R7,B
   \   000023   75F000       MOV       B,#0x0
   \   000026   A4           MUL       AB
   \   000027   2F           ADD       A,R7
   \   000028   FF           MOV       R7,A
   \   000029   75F0FF       MOV       B,#-0x1
   \   00002C   ED           MOV       A,R5
   \   00002D   A4           MUL       AB
   \   00002E   2F           ADD       A,R7
   \   00002F   FD           MOV       R5,A
   \   000030   EC           MOV       A,R4
   \   000031   FA           MOV       R2,A
   \   000032   ED           MOV       A,R5
   \   000033   FB           MOV       R3,A
   \   000034   8021         SJMP      ??calcChkB_1
    860            }
    861            else
    862            {
    863              chk = 0;
   \                     ??calcChkB_0:
   \   000036   7A00         MOV       R2,#0x0
   \   000038   7B00         MOV       R3,#0x0
    864              while ( len-- )
   \                     ??calcChkB_2:
   \   00003A   E8           MOV       A,R0
   \   00003B   FC           MOV       R4,A
   \   00003C   E9           MOV       A,R1
   \   00003D   FD           MOV       R5,A
   \   00003E   EC           MOV       A,R4
   \   00003F   24FF         ADD       A,#-0x1
   \   000041   F8           MOV       R0,A
   \   000042   ED           MOV       A,R5
   \   000043   34FF         ADDC      A,#-0x1
   \   000045   F9           MOV       R1,A
   \   000046   EC           MOV       A,R4
   \   000047   4D           ORL       A,R5
   \   000048   600D         JZ        ??calcChkB_1
    865              {
    866                chk += *buf++;
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   FC           MOV       R4,A
   \   00004C   7D00         MOV       R5,#0x0
   \   00004E   EA           MOV       A,R2
   \   00004F   2C           ADD       A,R4
   \   000050   FA           MOV       R2,A
   \   000051   EB           MOV       A,R3
   \   000052   3D           ADDC      A,R5
   \   000053   FB           MOV       R3,A
   \   000054   A3           INC       DPTR
   \   000055   80E3         SJMP      ??calcChkB_2
    867              }
    868            }
    869          
    870            // calcChkF() will calculate over OSAL_NV_WORD_SIZE alignment.
    871            if ( fill )
   \                     ??calcChkB_1:
   \   000057   EE           MOV       A,R6
   \   000058   6028         JZ        ??calcChkB_3
    872            {
    873              chk += (OSAL_NV_WORD_SIZE - fill) * OSAL_NV_ERASED;
   \   00005A   EE           MOV       A,R6
   \   00005B   FC           MOV       R4,A
   \   00005C   7D00         MOV       R5,#0x0
   \   00005E   7404         MOV       A,#0x4
   \   000060   C3           CLR       C
   \   000061   9C           SUBB      A,R4
   \   000062   FC           MOV       R4,A
   \   000063   7400         MOV       A,#0x0
   \   000065   9D           SUBB      A,R5
   \   000066   FD           MOV       R5,A
   \   000067   EC           MOV       A,R4
   \   000068   75F0FF       MOV       B,#-0x1
   \   00006B   A4           MUL       AB
   \   00006C   CC           XCH       A,R4
   \   00006D   AFF0         MOV       R7,B
   \   00006F   75F000       MOV       B,#0x0
   \   000072   A4           MUL       AB
   \   000073   2F           ADD       A,R7
   \   000074   FF           MOV       R7,A
   \   000075   75F0FF       MOV       B,#-0x1
   \   000078   ED           MOV       A,R5
   \   000079   A4           MUL       AB
   \   00007A   2F           ADD       A,R7
   \   00007B   FD           MOV       R5,A
   \   00007C   EA           MOV       A,R2
   \   00007D   2C           ADD       A,R4
   \   00007E   FA           MOV       R2,A
   \   00007F   EB           MOV       A,R3
   \   000080   3D           ADDC      A,R5
   \   000081   FB           MOV       R3,A
    874            }
    875          
    876            return chk;
   \                     ??calcChkB_3:
   \   000082   7F01         MOV       R7,#0x1
   \   000084   02....       LJMP      ?BANKED_LEAVE_XDATA
    877          }
    878          
    879          /*********************************************************************
    880           * @fn      calcChkF
    881           *
    882           * @brief   Calculates the data checksum by reading the data bytes from NV.
    883           *
    884           * @param   pg - A valid NV Flash page.
    885           * @param   offset - A valid offset into the page.
    886           * @param   len - Byte count of the data to be checksummed.
    887           *
    888           * @return  Calculated checksum of the data bytes.
    889           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    890          static uint16 calcChkF( uint8 pg, uint16 offset, uint16 len )
   \                     calcChkF:
    891          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V5,R1
   \   00000C   8A..         MOV       ?V2,R2
   \   00000E   8B..         MOV       ?V3,R3
   \   000010   EC           MOV       A,R4
   \   000011   FE           MOV       R6,A
   \   000012   ED           MOV       A,R5
   \   000013   FF           MOV       R7,A
    892            uint16 chk = 0;
   \   000014   75..00       MOV       ?V0,#0x0
   \   000017   75..00       MOV       ?V1,#0x0
    893          
    894            len = (len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE;
   \   00001A   EE           MOV       A,R6
   \   00001B   2403         ADD       A,#0x3
   \   00001D   F5..         MOV       ?V6,A
   \   00001F   E4           CLR       A
   \   000020   3F           ADDC      A,R7
   \   000021   F5..         MOV       ?V7,A
   \   000023   7402         MOV       A,#0x2
   \   000025   78..         MOV       R0,#?V6
   \   000027   12....       LCALL     ?US_SHR
   \   00002A   AE..         MOV       R6,?V6
   \   00002C   AF..         MOV       R7,?V7
    895          
    896            while ( len-- )
   \                     ??calcChkF_0:
   \   00002E   EE           MOV       A,R6
   \   00002F   F8           MOV       R0,A
   \   000030   EF           MOV       A,R7
   \   000031   F9           MOV       R1,A
   \   000032   E8           MOV       A,R0
   \   000033   24FF         ADD       A,#-0x1
   \   000035   FE           MOV       R6,A
   \   000036   E9           MOV       A,R1
   \   000037   34FF         ADDC      A,#-0x1
   \   000039   FF           MOV       R7,A
   \   00003A   E8           MOV       A,R0
   \   00003B   49           ORL       A,R1
   \   00003C   605B         JZ        ??calcChkF_1
    897            {
    898              uint8 cnt, tmp[OSAL_NV_WORD_SIZE];
    899          
    900              HalFlashRead(pg, offset, tmp, OSAL_NV_WORD_SIZE);
   \   00003E                ; Setup parameters for call to function HalFlashRead
   \   00003E   75..04       MOV       ?V6,#0x4
   \   000041   75..00       MOV       ?V7,#0x0
   \   000044   78..         MOV       R0,#?V6
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000049   7402         MOV       A,#0x2
   \   00004B   12....       LCALL     ?XSTACK_DISP102_8
   \   00004E   AA..         MOV       R2,?V2
   \   000050   AB..         MOV       R3,?V3
   \   000052   A9..         MOV       R1,?V5
   \   000054   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000057   7402         MOV       A,#0x2
   \   000059   12....       LCALL     ?DEALLOC_XSTACK8
    901              offset += OSAL_NV_WORD_SIZE;
   \   00005C   E5..         MOV       A,?V2
   \   00005E   2404         ADD       A,#0x4
   \   000060   F5..         MOV       ?V2,A
   \   000062   E5..         MOV       A,?V3
   \   000064   3400         ADDC      A,#0x0
   \   000066   F5..         MOV       ?V3,A
    902          
    903              for ( cnt = 0; cnt < OSAL_NV_WORD_SIZE; cnt++ )
   \   000068   75..00       MOV       ?V4,#0x0
   \                     ??calcChkF_2:
   \   00006B   E5..         MOV       A,?V4
   \   00006D   C3           CLR       C
   \   00006E   9404         SUBB      A,#0x4
   \   000070   50BC         JNC       ??calcChkF_0
    904              {
    905                chk += tmp[cnt];
   \   000072   E5..         MOV       A,?V4
   \   000074   F8           MOV       R0,A
   \   000075   7900         MOV       R1,#0x0
   \   000077   85..82       MOV       DPL,?XSP + 0
   \   00007A   85..83       MOV       DPH,?XSP + 1
   \   00007D   E582         MOV       A,DPL
   \   00007F   28           ADD       A,R0
   \   000080   F582         MOV       DPL,A
   \   000082   E583         MOV       A,DPH
   \   000084   39           ADDC      A,R1
   \   000085   F583         MOV       DPH,A
   \   000087   E0           MOVX      A,@DPTR
   \   000088   F8           MOV       R0,A
   \   000089   7900         MOV       R1,#0x0
   \   00008B   E5..         MOV       A,?V0
   \   00008D   28           ADD       A,R0
   \   00008E   F5..         MOV       ?V0,A
   \   000090   E5..         MOV       A,?V1
   \   000092   39           ADDC      A,R1
   \   000093   F5..         MOV       ?V1,A
    906              }
   \   000095   05..         INC       ?V4
   \   000097   80D2         SJMP      ??calcChkF_2
    907            }
    908          
    909            return chk;
   \                     ??calcChkF_1:
   \   000099   AA..         MOV       R2,?V0
   \   00009B   AB..         MOV       R3,?V1
   \   00009D   7404         MOV       A,#0x4
   \   00009F   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A2   7F08         MOV       R7,#0x8
   \   0000A4   02....       LJMP      ?BANKED_LEAVE_XDATA
    910          }
    911          
    912          /*********************************************************************
    913           * @fn      writeWord
    914           *
    915           * @brief   Writes a Flash-WORD to NV.
    916           *
    917           * @param   pg - A valid NV Flash page.
    918           * @param   offset - A valid offset into the page.
    919           * @param   buf - Pointer to source buffer.
    920           *
    921           * @return  none
    922           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    923          static void writeWord( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWord:
    924          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
    925            offset = (offset / HAL_FLASH_WORD_SIZE) +
    926                    ((uint16)pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE));
   \   00000F   7402         MOV       A,#0x2
   \   000011   78..         MOV       R0,#?V0
   \   000013   12....       LCALL     ?US_SHR
   \   000016   E5..         MOV       A,?V2
   \   000018   F8           MOV       R0,A
   \   000019   7900         MOV       R1,#0x0
   \   00001B   E8           MOV       A,R0
   \   00001C   75F000       MOV       B,#0x0
   \   00001F   A4           MUL       AB
   \   000020   C8           XCH       A,R0
   \   000021   AAF0         MOV       R2,B
   \   000023   75F002       MOV       B,#0x2
   \   000026   A4           MUL       AB
   \   000027   2A           ADD       A,R2
   \   000028   FA           MOV       R2,A
   \   000029   75F000       MOV       B,#0x0
   \   00002C   E9           MOV       A,R1
   \   00002D   A4           MUL       AB
   \   00002E   2A           ADD       A,R2
   \   00002F   F9           MOV       R1,A
   \   000030   E5..         MOV       A,?V0
   \   000032   28           ADD       A,R0
   \   000033   F5..         MOV       ?V0,A
   \   000035   E5..         MOV       A,?V1
   \   000037   39           ADDC      A,R1
   \   000038   F5..         MOV       ?V1,A
    927          
    928            HalFlashWrite(offset, buf, 1);
   \   00003A                ; Setup parameters for call to function HalFlashWrite
   \   00003A   75..01       MOV       ?V4,#0x1
   \   00003D   75..00       MOV       ?V5,#0x0
   \   000040   78..         MOV       R0,#?V4
   \   000042   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000045   EE           MOV       A,R6
   \   000046   FC           MOV       R4,A
   \   000047   EF           MOV       A,R7
   \   000048   FD           MOV       R5,A
   \   000049   AA..         MOV       R2,?V0
   \   00004B   AB..         MOV       R3,?V1
   \   00004D   12....       LCALL     `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   000050   7402         MOV       A,#0x2
   \   000052   12....       LCALL     ?DEALLOC_XSTACK8
    929          }
   \   000055   7F06         MOV       R7,#0x6
   \   000057   02....       LJMP      ?BANKED_LEAVE_XDATA
    930          
    931          /*********************************************************************
    932           * @fn      writeWordM
    933           *
    934           * @brief   Writes multiple Flash-WORDs to NV.
    935           *
    936           * @param   pg - A valid NV Flash page.
    937           * @param   offset - A valid offset into the page.
    938           * @param   buf - Pointer to source buffer.
    939           * @param   cnt - Number of 4-byte blocks to write.
    940           *
    941           * @return  none
    942           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    943          static void writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt )
   \                     writeWordM:
    944          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV       A,#-0xd
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V4,R1
   \   000007   8A..         MOV       ?V2,R2
   \   000009   8B..         MOV       ?V3,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   \   00000F   740D         MOV       A,#0xd
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V0,A
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V1,A
    945            offset = (offset / HAL_FLASH_WORD_SIZE) +
    946                    ((uint16)pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE));
   \   00001B   7402         MOV       A,#0x2
   \   00001D   78..         MOV       R0,#?V2
   \   00001F   12....       LCALL     ?US_SHR
   \   000022   E5..         MOV       A,?V4
   \   000024   F8           MOV       R0,A
   \   000025   7900         MOV       R1,#0x0
   \   000027   E8           MOV       A,R0
   \   000028   75F000       MOV       B,#0x0
   \   00002B   A4           MUL       AB
   \   00002C   C8           XCH       A,R0
   \   00002D   AAF0         MOV       R2,B
   \   00002F   75F002       MOV       B,#0x2
   \   000032   A4           MUL       AB
   \   000033   2A           ADD       A,R2
   \   000034   FA           MOV       R2,A
   \   000035   75F000       MOV       B,#0x0
   \   000038   E9           MOV       A,R1
   \   000039   A4           MUL       AB
   \   00003A   2A           ADD       A,R2
   \   00003B   F9           MOV       R1,A
   \   00003C   E5..         MOV       A,?V2
   \   00003E   28           ADD       A,R0
   \   00003F   F5..         MOV       ?V2,A
   \   000041   E5..         MOV       A,?V3
   \   000043   39           ADDC      A,R1
   \   000044   F5..         MOV       ?V3,A
    947            HalFlashWrite(offset, buf, cnt);
   \   000046                ; Setup parameters for call to function HalFlashWrite
   \   000046   78..         MOV       R0,#?V0
   \   000048   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004B   EE           MOV       A,R6
   \   00004C   FC           MOV       R4,A
   \   00004D   EF           MOV       A,R7
   \   00004E   FD           MOV       R5,A
   \   00004F   AA..         MOV       R2,?V2
   \   000051   AB..         MOV       R3,?V3
   \   000053   12....       LCALL     `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   000056   7402         MOV       A,#0x2
   \   000058   12....       LCALL     ?DEALLOC_XSTACK8
    948          }
   \   00005B   7F05         MOV       R7,#0x5
   \   00005D   02....       LJMP      ?BANKED_LEAVE_XDATA
    949          
    950          /*********************************************************************
    951           * @fn      writeWordH
    952           *
    953           * @brief   Writes the 1st half of a Flash-WORD to NV (filling 2nd half with 0xffff).
    954           *
    955           * @param   pg - A valid NV Flash page.
    956           * @param   offset - A valid offset into the page.
    957           * @param   buf - Pointer to source buffer.
    958           *
    959           * @return  none
    960           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    961          static void writeWordH( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWordH:
    962          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   \   000010   8C..         MOV       ?V0,R4
   \   000012   8D..         MOV       ?V1,R5
    963            uint8 tmp[4];
    964          
    965            tmp[0] = buf[0];
   \   000014   85..82       MOV       DPL,?V0
   \   000017   85..83       MOV       DPH,?V1
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   C0E0         PUSH      A
   \   00001D   85..82       MOV       DPL,?XSP + 0
   \   000020   85..83       MOV       DPH,?XSP + 1
   \   000023   D0E0         POP       A
   \   000025   F0           MOVX      @DPTR,A
    966            tmp[1] = buf[1];
   \   000026   85..82       MOV       DPL,?V0
   \   000029   85..83       MOV       DPH,?V1
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   C0E0         PUSH      A
   \   000030   7401         MOV       A,#0x1
   \   000032   12....       LCALL     ?XSTACK_DISP0_8
   \   000035   D0E0         POP       A
   \   000037   F0           MOVX      @DPTR,A
    967            tmp[2] = OSAL_NV_ERASED;
   \   000038   7402         MOV       A,#0x2
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   74FF         MOV       A,#-0x1
   \   00003F   F0           MOVX      @DPTR,A
    968            tmp[3] = OSAL_NV_ERASED;
   \   000040   7403         MOV       A,#0x3
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   74FF         MOV       A,#-0x1
   \   000047   F0           MOVX      @DPTR,A
    969          
    970            writeWord( pg, offset, tmp );
   \   000048                ; Setup parameters for call to function writeWord
   \   000048   AC..         MOV       R4,?XSP + 0
   \   00004A   AD..         MOV       R5,?XSP + 1
   \   00004C   EE           MOV       A,R6
   \   00004D   FA           MOV       R2,A
   \   00004E   EF           MOV       A,R7
   \   00004F   FB           MOV       R3,A
   \   000050   A9..         MOV       R1,?V2
   \   000052   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
    971          }
   \   000055   7404         MOV       A,#0x4
   \   000057   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005A   7F03         MOV       R7,#0x3
   \   00005C   02....       LJMP      ?BANKED_LEAVE_XDATA
    972          
    973          /*********************************************************************
    974           * @fn      writeBuf
    975           *
    976           * @brief   Writes a data buffer to NV.
    977           *
    978           * @param   dstPg - A valid NV Flash page.
    979           * @param   offset - A valid offset into the page.
    980           * @param   len  - Byte count of the data to write.
    981           * @param   buf  - The data to write.
    982           *
    983           * @return  TRUE if data buf checksum matches read back checksum, else FALSE.
    984           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    985          static void writeBuf( uint8 dstPg, uint16 dstOff, uint16 len, uint8 *buf )
   \                     writeBuf:
    986          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FF           MOV       R7,A
   \   00000C   8A..         MOV       ?V4,R2
   \   00000E   8B..         MOV       ?V5,R3
   \   000010   8C..         MOV       ?V6,R4
   \   000012   8D..         MOV       ?V7,R5
   \   000014   7416         MOV       A,#0x16
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V0,A
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F5..         MOV       ?V1,A
    987            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \   000020   E5..         MOV       A,?V4
   \   000022   5403         ANL       A,#0x3
   \   000024   FE           MOV       R6,A
    988            uint8 tmp[OSAL_NV_WORD_SIZE];
    989          
    990            if ( rem )
   \   000025   EE           MOV       A,R6
   \   000026   7003         JNZ       $+5
   \   000028   02....       LJMP      ??writeBuf_0 & 0xFFFF
    991            {
    992              dstOff = (dstOff / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE;
   \   00002B   7402         MOV       A,#0x2
   \   00002D   78..         MOV       R0,#?V4
   \   00002F   12....       LCALL     ?US_SHR
   \   000032   E5..         MOV       A,?V4
   \   000034   75F004       MOV       B,#0x4
   \   000037   A4           MUL       AB
   \   000038   C5..         XCH       A,?V4
   \   00003A   A8F0         MOV       R0,B
   \   00003C   75F000       MOV       B,#0x0
   \   00003F   A4           MUL       AB
   \   000040   28           ADD       A,R0
   \   000041   F8           MOV       R0,A
   \   000042   75F004       MOV       B,#0x4
   \   000045   E5..         MOV       A,?V5
   \   000047   A4           MUL       AB
   \   000048   28           ADD       A,R0
   \   000049   F5..         MOV       ?V5,A
    993              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   00004B                ; Setup parameters for call to function HalFlashRead
   \   00004B   75..04       MOV       ?V2,#0x4
   \   00004E   75..00       MOV       ?V3,#0x0
   \   000051   78..         MOV       R0,#?V2
   \   000053   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000056   7402         MOV       A,#0x2
   \   000058   12....       LCALL     ?XSTACK_DISP102_8
   \   00005B   AA..         MOV       R2,?V4
   \   00005D   AB..         MOV       R3,?V5
   \   00005F   EF           MOV       A,R7
   \   000060   F9           MOV       R1,A
   \   000061   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000064   7402         MOV       A,#0x2
   \   000066   12....       LCALL     ?DEALLOC_XSTACK8
    994          
    995              while ( (rem < OSAL_NV_WORD_SIZE) && len )
   \                     ??writeBuf_1:
   \   000069   EE           MOV       A,R6
   \   00006A   C3           CLR       C
   \   00006B   9404         SUBB      A,#0x4
   \   00006D   5042         JNC       ??writeBuf_2
   \   00006F   E5..         MOV       A,?V6
   \   000071   45..         ORL       A,?V7
   \   000073   603C         JZ        ??writeBuf_2
    996              {
    997                tmp[rem++] = *buf++;
   \   000075   85..82       MOV       DPL,?V0
   \   000078   85..83       MOV       DPH,?V1
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   C0E0         PUSH      A
   \   00007E   EE           MOV       A,R6
   \   00007F   F8           MOV       R0,A
   \   000080   7900         MOV       R1,#0x0
   \   000082   85..82       MOV       DPL,?XSP + 0
   \   000085   85..83       MOV       DPH,?XSP + 1
   \   000088   E582         MOV       A,DPL
   \   00008A   28           ADD       A,R0
   \   00008B   F582         MOV       DPL,A
   \   00008D   E583         MOV       A,DPH
   \   00008F   39           ADDC      A,R1
   \   000090   F583         MOV       DPH,A
   \   000092   D0E0         POP       A
   \   000094   F0           MOVX      @DPTR,A
   \   000095   85..82       MOV       DPL,?V0
   \   000098   85..83       MOV       DPH,?V1
   \   00009B   A3           INC       DPTR
   \   00009C   8582..       MOV       ?V0,DPL
   \   00009F   8583..       MOV       ?V1,DPH
   \   0000A2   0E           INC       R6
    998                len--;
   \   0000A3   E5..         MOV       A,?V6
   \   0000A5   24FF         ADD       A,#-0x1
   \   0000A7   F5..         MOV       ?V6,A
   \   0000A9   E5..         MOV       A,?V7
   \   0000AB   34FF         ADDC      A,#-0x1
   \   0000AD   F5..         MOV       ?V7,A
   \   0000AF   80B8         SJMP      ??writeBuf_1
    999              }
   1000          
   1001              writeWord( dstPg, dstOff, tmp );
   \                     ??writeBuf_2:
   \   0000B1                ; Setup parameters for call to function writeWord
   \   0000B1   AC..         MOV       R4,?XSP + 0
   \   0000B3   AD..         MOV       R5,?XSP + 1
   \   0000B5   AA..         MOV       R2,?V4
   \   0000B7   AB..         MOV       R3,?V5
   \   0000B9   EF           MOV       A,R7
   \   0000BA   F9           MOV       R1,A
   \   0000BB   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   1002              dstOff += OSAL_NV_WORD_SIZE;
   \   0000BE   E5..         MOV       A,?V4
   \   0000C0   2404         ADD       A,#0x4
   \   0000C2   F5..         MOV       ?V4,A
   \   0000C4   E5..         MOV       A,?V5
   \   0000C6   3400         ADDC      A,#0x0
   \   0000C8   F5..         MOV       ?V5,A
   1003            }
   1004          
   1005            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??writeBuf_0:
   \   0000CA   E5..         MOV       A,?V6
   \   0000CC   5403         ANL       A,#0x3
   \   0000CE   FE           MOV       R6,A
   1006            len /= OSAL_NV_WORD_SIZE;
   \   0000CF   85....       MOV       ?V2,?V6
   \   0000D2   85....       MOV       ?V3,?V7
   \   0000D5   7402         MOV       A,#0x2
   \   0000D7   78..         MOV       R0,#?V2
   \   0000D9   12....       LCALL     ?US_SHR
   \   0000DC   85....       MOV       ?V6,?V2
   \   0000DF   85....       MOV       ?V7,?V3
   1007          
   1008            if ( len )
   \   0000E2   E5..         MOV       A,?V6
   \   0000E4   45..         ORL       A,?V7
   \   0000E6   605D         JZ        ??writeBuf_3
   1009            {
   1010              writeWordM( dstPg, dstOff, buf, len );
   \   0000E8                ; Setup parameters for call to function writeWordM
   \   0000E8   78..         MOV       R0,#?V6
   \   0000EA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000ED   AC..         MOV       R4,?V0
   \   0000EF   AD..         MOV       R5,?V1
   \   0000F1   AA..         MOV       R2,?V4
   \   0000F3   AB..         MOV       R3,?V5
   \   0000F5   EF           MOV       A,R7
   \   0000F6   F9           MOV       R1,A
   \   0000F7   12....       LCALL     `??writeWordM::?relay`; Banked call to: writeWordM
   \   0000FA   7402         MOV       A,#0x2
   \   0000FC   12....       LCALL     ?DEALLOC_XSTACK8
   1011              dstOff += OSAL_NV_WORD_SIZE * len;
   \   0000FF   A8..         MOV       R0,?V6
   \   000101   A9..         MOV       R1,?V7
   \   000103   E8           MOV       A,R0
   \   000104   75F004       MOV       B,#0x4
   \   000107   A4           MUL       AB
   \   000108   C8           XCH       A,R0
   \   000109   AAF0         MOV       R2,B
   \   00010B   75F000       MOV       B,#0x0
   \   00010E   A4           MUL       AB
   \   00010F   2A           ADD       A,R2
   \   000110   FA           MOV       R2,A
   \   000111   75F004       MOV       B,#0x4
   \   000114   E9           MOV       A,R1
   \   000115   A4           MUL       AB
   \   000116   2A           ADD       A,R2
   \   000117   F9           MOV       R1,A
   \   000118   E5..         MOV       A,?V4
   \   00011A   28           ADD       A,R0
   \   00011B   F5..         MOV       ?V4,A
   \   00011D   E5..         MOV       A,?V5
   \   00011F   39           ADDC      A,R1
   \   000120   F5..         MOV       ?V5,A
   1012              buf += OSAL_NV_WORD_SIZE * len;
   \   000122   A8..         MOV       R0,?V6
   \   000124   A9..         MOV       R1,?V7
   \   000126   E8           MOV       A,R0
   \   000127   75F004       MOV       B,#0x4
   \   00012A   A4           MUL       AB
   \   00012B   C8           XCH       A,R0
   \   00012C   AAF0         MOV       R2,B
   \   00012E   75F000       MOV       B,#0x0
   \   000131   A4           MUL       AB
   \   000132   2A           ADD       A,R2
   \   000133   FA           MOV       R2,A
   \   000134   75F004       MOV       B,#0x4
   \   000137   E9           MOV       A,R1
   \   000138   A4           MUL       AB
   \   000139   2A           ADD       A,R2
   \   00013A   F9           MOV       R1,A
   \   00013B   E5..         MOV       A,?V0
   \   00013D   28           ADD       A,R0
   \   00013E   F5..         MOV       ?V0,A
   \   000140   E5..         MOV       A,?V1
   \   000142   39           ADDC      A,R1
   \   000143   F5..         MOV       ?V1,A
   1013            }
   1014          
   1015            if ( rem )
   \                     ??writeBuf_3:
   \   000145   EE           MOV       A,R6
   \   000146   606B         JZ        ??writeBuf_4
   1016            {
   1017              uint8 idx = 0;
   \   000148   75..00       MOV       ?V2,#0x0
   1018              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   00014B                ; Setup parameters for call to function HalFlashRead
   \   00014B   75..04       MOV       ?V8,#0x4
   \   00014E   75..00       MOV       ?V9,#0x0
   \   000151   78..         MOV       R0,#?V8
   \   000153   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000156   7402         MOV       A,#0x2
   \   000158   12....       LCALL     ?XSTACK_DISP102_8
   \   00015B   AA..         MOV       R2,?V4
   \   00015D   AB..         MOV       R3,?V5
   \   00015F   EF           MOV       A,R7
   \   000160   F9           MOV       R1,A
   \   000161   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000164   7402         MOV       A,#0x2
   \   000166   12....       LCALL     ?DEALLOC_XSTACK8
   1019              while ( rem-- )
   \                     ??writeBuf_5:
   \   000169   8E..         MOV       ?V3,R6
   \   00016B   74FF         MOV       A,#-0x1
   \   00016D   25..         ADD       A,?V3
   \   00016F   FE           MOV       R6,A
   \   000170   E5..         MOV       A,?V3
   \   000172   6032         JZ        ??writeBuf_6
   1020              {
   1021                tmp[idx++] = *buf++;
   \   000174   85..82       MOV       DPL,?V0
   \   000177   85..83       MOV       DPH,?V1
   \   00017A   E0           MOVX      A,@DPTR
   \   00017B   C0E0         PUSH      A
   \   00017D   E5..         MOV       A,?V2
   \   00017F   F8           MOV       R0,A
   \   000180   7900         MOV       R1,#0x0
   \   000182   85..82       MOV       DPL,?XSP + 0
   \   000185   85..83       MOV       DPH,?XSP + 1
   \   000188   E582         MOV       A,DPL
   \   00018A   28           ADD       A,R0
   \   00018B   F582         MOV       DPL,A
   \   00018D   E583         MOV       A,DPH
   \   00018F   39           ADDC      A,R1
   \   000190   F583         MOV       DPH,A
   \   000192   D0E0         POP       A
   \   000194   F0           MOVX      @DPTR,A
   \   000195   85..82       MOV       DPL,?V0
   \   000198   85..83       MOV       DPH,?V1
   \   00019B   A3           INC       DPTR
   \   00019C   8582..       MOV       ?V0,DPL
   \   00019F   8583..       MOV       ?V1,DPH
   \   0001A2   05..         INC       ?V2
   \   0001A4   80C3         SJMP      ??writeBuf_5
   1022              }
   1023              writeWord( dstPg, dstOff, tmp );
   \                     ??writeBuf_6:
   \   0001A6                ; Setup parameters for call to function writeWord
   \   0001A6   AC..         MOV       R4,?XSP + 0
   \   0001A8   AD..         MOV       R5,?XSP + 1
   \   0001AA   AA..         MOV       R2,?V4
   \   0001AC   AB..         MOV       R3,?V5
   \   0001AE   EF           MOV       A,R7
   \   0001AF   F9           MOV       R1,A
   \   0001B0   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   1024            }
   1025          }
   \                     ??writeBuf_4:
   \   0001B3   7404         MOV       A,#0x4
   \   0001B5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001B8   7F0A         MOV       R7,#0xa
   \   0001BA   02....       LJMP      ?BANKED_LEAVE_XDATA
   1026          
   1027          /*********************************************************************
   1028           * @fn      xferBuf
   1029           *
   1030           * @brief   Xfers an NV buffer from one location to another, enforcing OSAL_NV_WORD_SIZE writes.
   1031           *
   1032           * @return  none
   1033           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1034          static void xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len )
   \                     xferBuf:
   1035          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V10,R1
   \   00000C   8A..         MOV       ?V4,R2
   \   00000E   8B..         MOV       ?V5,R3
   \   000010   8C..         MOV       ?V7,R4
   \   000012   7417         MOV       A,#0x17
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V0,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V1,A
   \   00001E   7419         MOV       A,#0x19
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E0           MOVX      A,@DPTR
   \   000024   FE           MOV       R6,A
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   FF           MOV       R7,A
   1036            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \   000028   E5..         MOV       A,?V0
   \   00002A   5403         ANL       A,#0x3
   \   00002C   F5..         MOV       ?V2,A
   1037            uint8 tmp[OSAL_NV_WORD_SIZE];
   1038          
   1039            if ( rem )
   \   00002E   E5..         MOV       A,?V2
   \   000030   7003         JNZ       $+5
   \   000032   02....       LJMP      ??xferBuf_0 & 0xFFFF
   1040            {
   1041              dstOff -= rem;
   \   000035   E5..         MOV       A,?V2
   \   000037   F8           MOV       R0,A
   \   000038   7900         MOV       R1,#0x0
   \   00003A   C3           CLR       C
   \   00003B   E5..         MOV       A,?V0
   \   00003D   98           SUBB      A,R0
   \   00003E   F5..         MOV       ?V0,A
   \   000040   E5..         MOV       A,?V1
   \   000042   99           SUBB      A,R1
   \   000043   F5..         MOV       ?V1,A
   1042              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000045                ; Setup parameters for call to function HalFlashRead
   \   000045   75..04       MOV       ?V8,#0x4
   \   000048   75..00       MOV       ?V9,#0x0
   \   00004B   78..         MOV       R0,#?V8
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000050   7402         MOV       A,#0x2
   \   000052   12....       LCALL     ?XSTACK_DISP102_8
   \   000055   AA..         MOV       R2,?V0
   \   000057   AB..         MOV       R3,?V1
   \   000059   A9..         MOV       R1,?V7
   \   00005B   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00005E   7402         MOV       A,#0x2
   \   000060   12....       LCALL     ?DEALLOC_XSTACK8
   1043          
   1044              while ( (rem < OSAL_NV_WORD_SIZE) && len )
   \                     ??xferBuf_1:
   \   000063   E5..         MOV       A,?V2
   \   000065   C3           CLR       C
   \   000066   9404         SUBB      A,#0x4
   \   000068   5043         JNC       ??xferBuf_2
   \   00006A   EE           MOV       A,R6
   \   00006B   4F           ORL       A,R7
   \   00006C   603F         JZ        ??xferBuf_2
   1045              {
   1046                HalFlashRead(srcPg, srcOff, tmp+rem, 1);
   \   00006E                ; Setup parameters for call to function HalFlashRead
   \   00006E   75..01       MOV       ?V8,#0x1
   \   000071   75..00       MOV       ?V9,#0x0
   \   000074   78..         MOV       R0,#?V8
   \   000076   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000079   E5..         MOV       A,?V2
   \   00007B   F8           MOV       R0,A
   \   00007C   7900         MOV       R1,#0x0
   \   00007E   7402         MOV       A,#0x2
   \   000080   12....       LCALL     ?XSTACK_DISP0_8
   \   000083   E582         MOV       A,DPL
   \   000085   28           ADD       A,R0
   \   000086   FC           MOV       R4,A
   \   000087   E583         MOV       A,DPH
   \   000089   39           ADDC      A,R1
   \   00008A   FD           MOV       R5,A
   \   00008B   AA..         MOV       R2,?V4
   \   00008D   AB..         MOV       R3,?V5
   \   00008F   A9..         MOV       R1,?V10
   \   000091   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000094   7402         MOV       A,#0x2
   \   000096   12....       LCALL     ?DEALLOC_XSTACK8
   1047                srcOff++;
   \   000099   05..         INC       ?V4
   \   00009B   E5..         MOV       A,?V4
   \   00009D   7002         JNZ       ??xferBuf_3
   \   00009F   05..         INC       ?V5
   1048                rem++;
   \                     ??xferBuf_3:
   \   0000A1   05..         INC       ?V2
   1049                len--;
   \   0000A3   EE           MOV       A,R6
   \   0000A4   24FF         ADD       A,#-0x1
   \   0000A6   FE           MOV       R6,A
   \   0000A7   EF           MOV       A,R7
   \   0000A8   34FF         ADDC      A,#-0x1
   \   0000AA   FF           MOV       R7,A
   \   0000AB   80B6         SJMP      ??xferBuf_1
   1050              }
   1051          
   1052              writeWord( dstPg, dstOff, tmp );
   \                     ??xferBuf_2:
   \   0000AD                ; Setup parameters for call to function writeWord
   \   0000AD   AC..         MOV       R4,?XSP + 0
   \   0000AF   AD..         MOV       R5,?XSP + 1
   \   0000B1   AA..         MOV       R2,?V0
   \   0000B3   AB..         MOV       R3,?V1
   \   0000B5   A9..         MOV       R1,?V7
   \   0000B7   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   1053              dstOff += OSAL_NV_WORD_SIZE;
   \   0000BA   E5..         MOV       A,?V0
   \   0000BC   2404         ADD       A,#0x4
   \   0000BE   F5..         MOV       ?V0,A
   \   0000C0   E5..         MOV       A,?V1
   \   0000C2   3400         ADDC      A,#0x0
   \   0000C4   F5..         MOV       ?V1,A
   1054            }
   1055          
   1056            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??xferBuf_0:
   \   0000C6   EE           MOV       A,R6
   \   0000C7   5403         ANL       A,#0x3
   \   0000C9   F5..         MOV       ?V2,A
   1057            len /= OSAL_NV_WORD_SIZE;
   \   0000CB   8E..         MOV       ?V8,R6
   \   0000CD   8F..         MOV       ?V9,R7
   \   0000CF   7402         MOV       A,#0x2
   \   0000D1   78..         MOV       R0,#?V8
   \   0000D3   12....       LCALL     ?US_SHR
   \   0000D6   AE..         MOV       R6,?V8
   \   0000D8   AF..         MOV       R7,?V9
   1058          
   1059            while ( len-- )
   \                     ??xferBuf_4:
   \   0000DA   EE           MOV       A,R6
   \   0000DB   F8           MOV       R0,A
   \   0000DC   EF           MOV       A,R7
   \   0000DD   F9           MOV       R1,A
   \   0000DE   E8           MOV       A,R0
   \   0000DF   24FF         ADD       A,#-0x1
   \   0000E1   FE           MOV       R6,A
   \   0000E2   E9           MOV       A,R1
   \   0000E3   34FF         ADDC      A,#-0x1
   \   0000E5   FF           MOV       R7,A
   \   0000E6   E8           MOV       A,R0
   \   0000E7   49           ORL       A,R1
   \   0000E8   6045         JZ        ??xferBuf_5
   1060            {
   1061              HalFlashRead(srcPg, srcOff, tmp, OSAL_NV_WORD_SIZE);
   \   0000EA                ; Setup parameters for call to function HalFlashRead
   \   0000EA   75..04       MOV       ?V8,#0x4
   \   0000ED   75..00       MOV       ?V9,#0x0
   \   0000F0   78..         MOV       R0,#?V8
   \   0000F2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F5   7402         MOV       A,#0x2
   \   0000F7   12....       LCALL     ?XSTACK_DISP102_8
   \   0000FA   AA..         MOV       R2,?V4
   \   0000FC   AB..         MOV       R3,?V5
   \   0000FE   A9..         MOV       R1,?V10
   \   000100   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000103   7402         MOV       A,#0x2
   \   000105   12....       LCALL     ?DEALLOC_XSTACK8
   1062              srcOff += OSAL_NV_WORD_SIZE;
   \   000108   E5..         MOV       A,?V4
   \   00010A   2404         ADD       A,#0x4
   \   00010C   F5..         MOV       ?V4,A
   \   00010E   E5..         MOV       A,?V5
   \   000110   3400         ADDC      A,#0x0
   \   000112   F5..         MOV       ?V5,A
   1063              writeWord( dstPg, dstOff, tmp );
   \   000114                ; Setup parameters for call to function writeWord
   \   000114   AC..         MOV       R4,?XSP + 0
   \   000116   AD..         MOV       R5,?XSP + 1
   \   000118   AA..         MOV       R2,?V0
   \   00011A   AB..         MOV       R3,?V1
   \   00011C   A9..         MOV       R1,?V7
   \   00011E   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   1064              dstOff += OSAL_NV_WORD_SIZE;
   \   000121   E5..         MOV       A,?V0
   \   000123   2404         ADD       A,#0x4
   \   000125   F5..         MOV       ?V0,A
   \   000127   E5..         MOV       A,?V1
   \   000129   3400         ADDC      A,#0x0
   \   00012B   F5..         MOV       ?V1,A
   \   00012D   80AB         SJMP      ??xferBuf_4
   1065            }
   1066          
   1067            if ( rem )
   \                     ??xferBuf_5:
   \   00012F   E5..         MOV       A,?V2
   \   000131   6072         JZ        ??xferBuf_6
   1068            {
   1069              uint8 idx = 0;
   \   000133   75..00       MOV       ?V3,#0x0
   1070              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000136                ; Setup parameters for call to function HalFlashRead
   \   000136   75..04       MOV       ?V8,#0x4
   \   000139   75..00       MOV       ?V9,#0x0
   \   00013C   78..         MOV       R0,#?V8
   \   00013E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000141   7402         MOV       A,#0x2
   \   000143   12....       LCALL     ?XSTACK_DISP102_8
   \   000146   AA..         MOV       R2,?V0
   \   000148   AB..         MOV       R3,?V1
   \   00014A   A9..         MOV       R1,?V7
   \   00014C   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00014F   7402         MOV       A,#0x2
   \   000151   12....       LCALL     ?DEALLOC_XSTACK8
   1071              while ( rem-- )
   \                     ??xferBuf_7:
   \   000154   85....       MOV       ?V6,?V2
   \   000157   74FF         MOV       A,#-0x1
   \   000159   25..         ADD       A,?V6
   \   00015B   F5..         MOV       ?V2,A
   \   00015D   E5..         MOV       A,?V6
   \   00015F   6037         JZ        ??xferBuf_8
   1072              {
   1073                HalFlashRead(srcPg, srcOff, tmp+idx, 1);
   \   000161                ; Setup parameters for call to function HalFlashRead
   \   000161   75..01       MOV       ?V8,#0x1
   \   000164   75..00       MOV       ?V9,#0x0
   \   000167   78..         MOV       R0,#?V8
   \   000169   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00016C   E5..         MOV       A,?V3
   \   00016E   F8           MOV       R0,A
   \   00016F   7900         MOV       R1,#0x0
   \   000171   7402         MOV       A,#0x2
   \   000173   12....       LCALL     ?XSTACK_DISP0_8
   \   000176   E582         MOV       A,DPL
   \   000178   28           ADD       A,R0
   \   000179   FC           MOV       R4,A
   \   00017A   E583         MOV       A,DPH
   \   00017C   39           ADDC      A,R1
   \   00017D   FD           MOV       R5,A
   \   00017E   AA..         MOV       R2,?V4
   \   000180   AB..         MOV       R3,?V5
   \   000182   A9..         MOV       R1,?V10
   \   000184   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000187   7402         MOV       A,#0x2
   \   000189   12....       LCALL     ?DEALLOC_XSTACK8
   1074                srcOff++;
   \   00018C   05..         INC       ?V4
   \   00018E   E5..         MOV       A,?V4
   \   000190   7002         JNZ       ??xferBuf_9
   \   000192   05..         INC       ?V5
   1075                idx++;
   \                     ??xferBuf_9:
   \   000194   05..         INC       ?V3
   \   000196   80BC         SJMP      ??xferBuf_7
   1076              }
   1077              writeWord( dstPg, dstOff, tmp );
   \                     ??xferBuf_8:
   \   000198                ; Setup parameters for call to function writeWord
   \   000198   AC..         MOV       R4,?XSP + 0
   \   00019A   AD..         MOV       R5,?XSP + 1
   \   00019C   AA..         MOV       R2,?V0
   \   00019E   AB..         MOV       R3,?V1
   \   0001A0   A9..         MOV       R1,?V7
   \   0001A2   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   1078            }
   1079          }
   \                     ??xferBuf_6:
   \   0001A5   7404         MOV       A,#0x4
   \   0001A7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001AA   7F0B         MOV       R7,#0xb
   \   0001AC   02....       LJMP      ?BANKED_LEAVE_XDATA
   1080          
   1081          /*********************************************************************
   1082           * @fn      writeItem
   1083           *
   1084           * @brief   Writes an item header/data combo to the specified NV page.
   1085           *
   1086           * @param   pg - Valid NV Flash page.
   1087           * @param   id - Valid NV item Id.
   1088           * @param   len  - Byte count of the data to write.
   1089           * @param   buf  - The data to write. If NULL, no data/checksum write.
   1090           * @param   flag - TRUE if the checksum should be written, FALSE otherwise.
   1091           *
   1092           * @return  TRUE if header/data to write matches header/data read back, else FALSE.
   1093           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1094          static uint8 writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag )
   \                     writeItem:
   1095          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   8A..         MOV       ?V8,R2
   \   00000E   8B..         MOV       ?V9,R3
   \   000010   EC           MOV       A,R4
   \   000011   FE           MOV       R6,A
   \   000012   ED           MOV       A,R5
   \   000013   FF           MOV       R7,A
   \   000014   741C         MOV       A,#0x1c
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V6,A
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F5..         MOV       ?V7,A
   \   000020   741E         MOV       A,#0x1e
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F5..         MOV       ?V4,A
   1096            uint16 offset = pgOff[pg-OSAL_NV_PAGE_BEG];
   \   000028   E5..         MOV       A,?V0
   \   00002A   F8           MOV       R0,A
   \   00002B   7900         MOV       R1,#0x0
   \   00002D   E8           MOV       A,R0
   \   00002E   75F002       MOV       B,#0x2
   \   000031   A4           MUL       AB
   \   000032   C8           XCH       A,R0
   \   000033   AAF0         MOV       R2,B
   \   000035   75F000       MOV       B,#0x0
   \   000038   A4           MUL       AB
   \   000039   2A           ADD       A,R2
   \   00003A   FA           MOV       R2,A
   \   00003B   75F002       MOV       B,#0x2
   \   00003E   E9           MOV       A,R1
   \   00003F   A4           MUL       AB
   \   000040   2A           ADD       A,R2
   \   000041   F9           MOV       R1,A
   \   000042   74..         MOV       A,#(pgOff + 14) & 0xff
   \   000044   28           ADD       A,R0
   \   000045   F582         MOV       DPL,A
   \   000047   74..         MOV       A,#((pgOff - 242) >> 8) & 0xff
   \   000049   39           ADDC      A,R1
   \   00004A   F583         MOV       DPH,A
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   F5..         MOV       ?V2,A
   \   00004F   A3           INC       DPTR
   \   000050   E0           MOVX      A,@DPTR
   \   000051   F5..         MOV       ?V3,A
   1097            uint8 rtrn = FALSE;
   \   000053   75..00       MOV       ?V1,#0x0
   1098            osalNvHdr_t hdr;
   1099          
   1100            hdr.id = id;
   \   000056   85..82       MOV       DPL,?XSP + 0
   \   000059   85..83       MOV       DPH,?XSP + 1
   \   00005C   E5..         MOV       A,?V8
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   A3           INC       DPTR
   \   000060   E5..         MOV       A,?V9
   \   000062   F0           MOVX      @DPTR,A
   1101            hdr.len = len;
   \   000063   7402         MOV       A,#0x2
   \   000065   12....       LCALL     ?XSTACK_DISP0_8
   \   000068   EE           MOV       A,R6
   \   000069   F0           MOVX      @DPTR,A
   \   00006A   A3           INC       DPTR
   \   00006B   EF           MOV       A,R7
   \   00006C   F0           MOVX      @DPTR,A
   1102          
   1103            writeWord( pg, offset, (uint8 *)&hdr );
   \   00006D                ; Setup parameters for call to function writeWord
   \   00006D   AC..         MOV       R4,?XSP + 0
   \   00006F   AD..         MOV       R5,?XSP + 1
   \   000071   AA..         MOV       R2,?V2
   \   000073   AB..         MOV       R3,?V3
   \   000075   A9..         MOV       R1,?V0
   \   000077   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   1104            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   00007A                ; Setup parameters for call to function HalFlashRead
   \   00007A   75..08       MOV       ?V10,#0x8
   \   00007D   75..00       MOV       ?V11,#0x0
   \   000080   78..         MOV       R0,#?V10
   \   000082   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000085   7402         MOV       A,#0x2
   \   000087   12....       LCALL     ?XSTACK_DISP102_8
   \   00008A   AA..         MOV       R2,?V2
   \   00008C   AB..         MOV       R3,?V3
   \   00008E   A9..         MOV       R1,?V0
   \   000090   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000093   7402         MOV       A,#0x2
   \   000095   12....       LCALL     ?DEALLOC_XSTACK8
   1105          
   1106            if ( (hdr.id == id) && (hdr.len == len) )
   \   000098   85..82       MOV       DPL,?XSP + 0
   \   00009B   85..83       MOV       DPH,?XSP + 1
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   65..         XRL       A,?V8
   \   0000A1   7004         JNZ       ??writeItem_0
   \   0000A3   A3           INC       DPTR
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   65..         XRL       A,?V9
   \                     ??writeItem_0:
   \   0000A7   6003         JZ        $+5
   \   0000A9   02....       LJMP      ??writeItem_1 & 0xFFFF
   \   0000AC   7402         MOV       A,#0x2
   \   0000AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   6E           XRL       A,R6
   \   0000B3   7003         JNZ       ??writeItem_2
   \   0000B5   A3           INC       DPTR
   \   0000B6   E0           MOVX      A,@DPTR
   \   0000B7   6F           XRL       A,R7
   \                     ??writeItem_2:
   \   0000B8   6003         JZ        $+5
   \   0000BA   02....       LJMP      ??writeItem_1 & 0xFFFF
   1107            {
   1108              if ( flag )
   \   0000BD   E5..         MOV       A,?V4
   \   0000BF   7003         JNZ       $+5
   \   0000C1   02....       LJMP      ??writeItem_3 & 0xFFFF
   1109              {
   1110                hdr.chk = calcChkB( len, buf );
   \   0000C4                ; Setup parameters for call to function calcChkB
   \   0000C4   AC..         MOV       R4,?V6
   \   0000C6   AD..         MOV       R5,?V7
   \   0000C8   EE           MOV       A,R6
   \   0000C9   FA           MOV       R2,A
   \   0000CA   EF           MOV       A,R7
   \   0000CB   FB           MOV       R3,A
   \   0000CC   12....       LCALL     `??calcChkB::?relay`; Banked call to: calcChkB
   \   0000CF   7404         MOV       A,#0x4
   \   0000D1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D4   EA           MOV       A,R2
   \   0000D5   F0           MOVX      @DPTR,A
   \   0000D6   A3           INC       DPTR
   \   0000D7   EB           MOV       A,R3
   \   0000D8   F0           MOVX      @DPTR,A
   1111          
   1112                offset += OSAL_NV_HDR_SIZE;
   \   0000D9   E5..         MOV       A,?V2
   \   0000DB   2408         ADD       A,#0x8
   \   0000DD   F5..         MOV       ?V2,A
   \   0000DF   E5..         MOV       A,?V3
   \   0000E1   3400         ADDC      A,#0x0
   \   0000E3   F5..         MOV       ?V3,A
   1113                if ( buf != NULL )
   \   0000E5   E5..         MOV       A,?V6
   \   0000E7   45..         ORL       A,?V7
   \   0000E9   6017         JZ        ??writeItem_4
   1114                {
   1115                  writeBuf( pg, offset, len, buf );
   \   0000EB                ; Setup parameters for call to function writeBuf
   \   0000EB   78..         MOV       R0,#?V6
   \   0000ED   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F0   EE           MOV       A,R6
   \   0000F1   FC           MOV       R4,A
   \   0000F2   EF           MOV       A,R7
   \   0000F3   FD           MOV       R5,A
   \   0000F4   AA..         MOV       R2,?V2
   \   0000F6   AB..         MOV       R3,?V3
   \   0000F8   A9..         MOV       R1,?V0
   \   0000FA   12....       LCALL     `??writeBuf::?relay`; Banked call to: writeBuf
   \   0000FD   7402         MOV       A,#0x2
   \   0000FF   12....       LCALL     ?DEALLOC_XSTACK8
   1116                }
   1117          
   1118                if ( hdr.chk == calcChkF( pg, offset, len ) )
   \                     ??writeItem_4:
   \   000102                ; Setup parameters for call to function calcChkF
   \   000102   EE           MOV       A,R6
   \   000103   FC           MOV       R4,A
   \   000104   EF           MOV       A,R7
   \   000105   FD           MOV       R5,A
   \   000106   AA..         MOV       R2,?V2
   \   000108   AB..         MOV       R3,?V3
   \   00010A   A9..         MOV       R1,?V0
   \   00010C   12....       LCALL     `??calcChkF::?relay`; Banked call to: calcChkF
   \   00010F   8A..         MOV       ?V10,R2
   \   000111   8B..         MOV       ?V11,R3
   \   000113   A8..         MOV       R0,?V10
   \   000115   A9..         MOV       R1,?V11
   \   000117   7404         MOV       A,#0x4
   \   000119   12....       LCALL     ?XSTACK_DISP0_8
   \   00011C   E0           MOVX      A,@DPTR
   \   00011D   68           XRL       A,R0
   \   00011E   7003         JNZ       ??writeItem_5
   \   000120   A3           INC       DPTR
   \   000121   E0           MOVX      A,@DPTR
   \   000122   69           XRL       A,R1
   \                     ??writeItem_5:
   \   000123   7045         JNZ       ??writeItem_6
   1119                {
   1120                  if ( hdr.chk == setChk( pg, offset, hdr.chk ) )
   \   000125                ; Setup parameters for call to function setChk
   \   000125   7404         MOV       A,#0x4
   \   000127   12....       LCALL     ?XSTACK_DISP0_8
   \   00012A   E0           MOVX      A,@DPTR
   \   00012B   FC           MOV       R4,A
   \   00012C   A3           INC       DPTR
   \   00012D   E0           MOVX      A,@DPTR
   \   00012E   FD           MOV       R5,A
   \   00012F   AA..         MOV       R2,?V2
   \   000131   AB..         MOV       R3,?V3
   \   000133   A9..         MOV       R1,?V0
   \   000135   12....       LCALL     `??setChk::?relay`; Banked call to: setChk
   \   000138   8A..         MOV       ?V10,R2
   \   00013A   8B..         MOV       ?V11,R3
   \   00013C   A8..         MOV       R0,?V10
   \   00013E   A9..         MOV       R1,?V11
   \   000140   7404         MOV       A,#0x4
   \   000142   12....       LCALL     ?XSTACK_DISP0_8
   \   000145   E0           MOVX      A,@DPTR
   \   000146   68           XRL       A,R0
   \   000147   7003         JNZ       ??writeItem_7
   \   000149   A3           INC       DPTR
   \   00014A   E0           MOVX      A,@DPTR
   \   00014B   69           XRL       A,R1
   \                     ??writeItem_7:
   \   00014C   701C         JNZ       ??writeItem_6
   1121                  {
   1122                    hotItemUpdate(pg, offset, hdr.id);
   \   00014E                ; Setup parameters for call to function hotItemUpdate
   \   00014E   85..82       MOV       DPL,?XSP + 0
   \   000151   85..83       MOV       DPH,?XSP + 1
   \   000154   E0           MOVX      A,@DPTR
   \   000155   FC           MOV       R4,A
   \   000156   A3           INC       DPTR
   \   000157   E0           MOVX      A,@DPTR
   \   000158   FD           MOV       R5,A
   \   000159   AA..         MOV       R2,?V2
   \   00015B   AB..         MOV       R3,?V3
   \   00015D   A9..         MOV       R1,?V0
   \   00015F   12....       LCALL     `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   1123                    rtrn = TRUE;
   \   000162   75..01       MOV       ?V1,#0x1
   \   000165   8003         SJMP      ??writeItem_6
   1124                  }
   1125                }
   1126              }
   1127              else
   1128              {
   1129                rtrn = TRUE;
   \                     ??writeItem_3:
   \   000167   75..01       MOV       ?V1,#0x1
   1130              }
   1131          
   1132              len = OSAL_NV_ITEM_SIZE( hdr.len );
   \                     ??writeItem_6:
   \   00016A   7402         MOV       A,#0x2
   \   00016C   12....       LCALL     ?XSTACK_DISP0_8
   \   00016F   C3           CLR       C
   \   000170   E0           MOVX      A,@DPTR
   \   000171   94F4         SUBB      A,#-0xc
   \   000173   A3           INC       DPTR
   \   000174   E0           MOVX      A,@DPTR
   \   000175   94FF         SUBB      A,#-0x1
   \   000177   4007         JC        ??writeItem_8
   \   000179   7EFC         MOV       R6,#-0x4
   \   00017B   7FFF         MOV       R7,#-0x1
   \   00017D   02....       LJMP      ??writeItem_9 & 0xFFFF
   \                     ??writeItem_8:
   \   000180   7402         MOV       A,#0x2
   \   000182   12....       LCALL     ?XSTACK_DISP0_8
   \   000185   E0           MOVX      A,@DPTR
   \   000186   2403         ADD       A,#0x3
   \   000188   F5..         MOV       ?V10,A
   \   00018A   A3           INC       DPTR
   \   00018B   E0           MOVX      A,@DPTR
   \   00018C   3400         ADDC      A,#0x0
   \   00018E   F5..         MOV       ?V11,A
   \   000190   7402         MOV       A,#0x2
   \   000192   78..         MOV       R0,#?V10
   \   000194   12....       LCALL     ?US_SHR
   \   000197   E5..         MOV       A,?V10
   \   000199   75F004       MOV       B,#0x4
   \   00019C   A4           MUL       AB
   \   00019D   C5..         XCH       A,?V10
   \   00019F   A8F0         MOV       R0,B
   \   0001A1   75F000       MOV       B,#0x0
   \   0001A4   A4           MUL       AB
   \   0001A5   28           ADD       A,R0
   \   0001A6   F8           MOV       R0,A
   \   0001A7   75F004       MOV       B,#0x4
   \   0001AA   E5..         MOV       A,?V11
   \   0001AC   A4           MUL       AB
   \   0001AD   28           ADD       A,R0
   \   0001AE   F5..         MOV       ?V11,A
   \   0001B0   E5..         MOV       A,?V10
   \   0001B2   2408         ADD       A,#0x8
   \   0001B4   FE           MOV       R6,A
   \   0001B5   E4           CLR       A
   \   0001B6   35..         ADDC      A,?V11
   \   0001B8   FF           MOV       R7,A
   \   0001B9   02....       LJMP      ??writeItem_9 & 0xFFFF
   1133            }
   1134            else
   1135            {
   1136              len = OSAL_NV_ITEM_SIZE( hdr.len );
   \                     ??writeItem_1:
   \   0001BC   7402         MOV       A,#0x2
   \   0001BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C1   C3           CLR       C
   \   0001C2   E0           MOVX      A,@DPTR
   \   0001C3   94F4         SUBB      A,#-0xc
   \   0001C5   A3           INC       DPTR
   \   0001C6   E0           MOVX      A,@DPTR
   \   0001C7   94FF         SUBB      A,#-0x1
   \   0001C9   4006         JC        ??writeItem_10
   \   0001CB   7EFC         MOV       R6,#-0x4
   \   0001CD   7FFF         MOV       R7,#-0x1
   \   0001CF   8039         SJMP      ??writeItem_11
   \                     ??writeItem_10:
   \   0001D1   7402         MOV       A,#0x2
   \   0001D3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D6   E0           MOVX      A,@DPTR
   \   0001D7   2403         ADD       A,#0x3
   \   0001D9   F5..         MOV       ?V10,A
   \   0001DB   A3           INC       DPTR
   \   0001DC   E0           MOVX      A,@DPTR
   \   0001DD   3400         ADDC      A,#0x0
   \   0001DF   F5..         MOV       ?V11,A
   \   0001E1   7402         MOV       A,#0x2
   \   0001E3   78..         MOV       R0,#?V10
   \   0001E5   12....       LCALL     ?US_SHR
   \   0001E8   E5..         MOV       A,?V10
   \   0001EA   75F004       MOV       B,#0x4
   \   0001ED   A4           MUL       AB
   \   0001EE   C5..         XCH       A,?V10
   \   0001F0   A8F0         MOV       R0,B
   \   0001F2   75F000       MOV       B,#0x0
   \   0001F5   A4           MUL       AB
   \   0001F6   28           ADD       A,R0
   \   0001F7   F8           MOV       R0,A
   \   0001F8   75F004       MOV       B,#0x4
   \   0001FB   E5..         MOV       A,?V11
   \   0001FD   A4           MUL       AB
   \   0001FE   28           ADD       A,R0
   \   0001FF   F5..         MOV       ?V11,A
   \   000201   E5..         MOV       A,?V10
   \   000203   2408         ADD       A,#0x8
   \   000205   FE           MOV       R6,A
   \   000206   E4           CLR       A
   \   000207   35..         ADDC      A,?V11
   \   000209   FF           MOV       R7,A
   1137          
   1138              if (len > (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]))
   \                     ??writeItem_11:
   \   00020A   E5..         MOV       A,?V0
   \   00020C   F8           MOV       R0,A
   \   00020D   7900         MOV       R1,#0x0
   \   00020F   E8           MOV       A,R0
   \   000210   75F002       MOV       B,#0x2
   \   000213   A4           MUL       AB
   \   000214   C8           XCH       A,R0
   \   000215   AAF0         MOV       R2,B
   \   000217   75F000       MOV       B,#0x0
   \   00021A   A4           MUL       AB
   \   00021B   2A           ADD       A,R2
   \   00021C   FA           MOV       R2,A
   \   00021D   75F002       MOV       B,#0x2
   \   000220   E9           MOV       A,R1
   \   000221   A4           MUL       AB
   \   000222   2A           ADD       A,R2
   \   000223   F9           MOV       R1,A
   \   000224   74..         MOV       A,#(pgOff + 14) & 0xff
   \   000226   28           ADD       A,R0
   \   000227   F582         MOV       DPL,A
   \   000229   74..         MOV       A,#((pgOff - 242) >> 8) & 0xff
   \   00022B   39           ADDC      A,R1
   \   00022C   F583         MOV       DPH,A
   \   00022E   E0           MOVX      A,@DPTR
   \   00022F   F8           MOV       R0,A
   \   000230   A3           INC       DPTR
   \   000231   E0           MOVX      A,@DPTR
   \   000232   F9           MOV       R1,A
   \   000233   7400         MOV       A,#0x0
   \   000235   C3           CLR       C
   \   000236   98           SUBB      A,R0
   \   000237   F8           MOV       R0,A
   \   000238   7408         MOV       A,#0x8
   \   00023A   99           SUBB      A,R1
   \   00023B   F9           MOV       R1,A
   \   00023C   C3           CLR       C
   \   00023D   E8           MOV       A,R0
   \   00023E   9E           SUBB      A,R6
   \   00023F   E9           MOV       A,R1
   \   000240   9F           SUBB      A,R7
   \   000241   5036         JNC       ??writeItem_12
   1139              {
   1140                len = (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]);
   \   000243   E5..         MOV       A,?V0
   \   000245   F8           MOV       R0,A
   \   000246   7900         MOV       R1,#0x0
   \   000248   E8           MOV       A,R0
   \   000249   75F002       MOV       B,#0x2
   \   00024C   A4           MUL       AB
   \   00024D   C8           XCH       A,R0
   \   00024E   AAF0         MOV       R2,B
   \   000250   75F000       MOV       B,#0x0
   \   000253   A4           MUL       AB
   \   000254   2A           ADD       A,R2
   \   000255   FA           MOV       R2,A
   \   000256   75F002       MOV       B,#0x2
   \   000259   E9           MOV       A,R1
   \   00025A   A4           MUL       AB
   \   00025B   2A           ADD       A,R2
   \   00025C   F9           MOV       R1,A
   \   00025D   74..         MOV       A,#(pgOff + 14) & 0xff
   \   00025F   28           ADD       A,R0
   \   000260   F582         MOV       DPL,A
   \   000262   74..         MOV       A,#((pgOff - 242) >> 8) & 0xff
   \   000264   39           ADDC      A,R1
   \   000265   F583         MOV       DPH,A
   \   000267   E0           MOVX      A,@DPTR
   \   000268   F8           MOV       R0,A
   \   000269   A3           INC       DPTR
   \   00026A   E0           MOVX      A,@DPTR
   \   00026B   F9           MOV       R1,A
   \   00026C   7400         MOV       A,#0x0
   \   00026E   C3           CLR       C
   \   00026F   98           SUBB      A,R0
   \   000270   F8           MOV       R0,A
   \   000271   7408         MOV       A,#0x8
   \   000273   99           SUBB      A,R1
   \   000274   F9           MOV       R1,A
   \   000275   E8           MOV       A,R0
   \   000276   FE           MOV       R6,A
   \   000277   E9           MOV       A,R1
   \   000278   FF           MOV       R7,A
   1141              }
   1142          
   1143              pgLost[pg - OSAL_NV_PAGE_BEG] += len;
   \                     ??writeItem_12:
   \   000279   E5..         MOV       A,?V0
   \   00027B   F8           MOV       R0,A
   \   00027C   7900         MOV       R1,#0x0
   \   00027E   E8           MOV       A,R0
   \   00027F   75F002       MOV       B,#0x2
   \   000282   A4           MUL       AB
   \   000283   C8           XCH       A,R0
   \   000284   AAF0         MOV       R2,B
   \   000286   75F000       MOV       B,#0x0
   \   000289   A4           MUL       AB
   \   00028A   2A           ADD       A,R2
   \   00028B   FA           MOV       R2,A
   \   00028C   75F002       MOV       B,#0x2
   \   00028F   E9           MOV       A,R1
   \   000290   A4           MUL       AB
   \   000291   2A           ADD       A,R2
   \   000292   F9           MOV       R1,A
   \   000293   74..         MOV       A,#(pgLost + 14) & 0xff
   \   000295   28           ADD       A,R0
   \   000296   F582         MOV       DPL,A
   \   000298   74..         MOV       A,#((pgLost - 242) >> 8) & 0xff
   \   00029A   39           ADDC      A,R1
   \   00029B   F583         MOV       DPH,A
   \   00029D   E0           MOVX      A,@DPTR
   \   00029E   2E           ADD       A,R6
   \   00029F   F0           MOVX      @DPTR,A
   \   0002A0   A3           INC       DPTR
   \   0002A1   E0           MOVX      A,@DPTR
   \   0002A2   3F           ADDC      A,R7
   \   0002A3   F0           MOVX      @DPTR,A
   1144            }
   1145            pgOff[pg - OSAL_NV_PAGE_BEG] += len;
   \                     ??writeItem_9:
   \   0002A4   E5..         MOV       A,?V0
   \   0002A6   F8           MOV       R0,A
   \   0002A7   7900         MOV       R1,#0x0
   \   0002A9   E8           MOV       A,R0
   \   0002AA   75F002       MOV       B,#0x2
   \   0002AD   A4           MUL       AB
   \   0002AE   C8           XCH       A,R0
   \   0002AF   AAF0         MOV       R2,B
   \   0002B1   75F000       MOV       B,#0x0
   \   0002B4   A4           MUL       AB
   \   0002B5   2A           ADD       A,R2
   \   0002B6   FA           MOV       R2,A
   \   0002B7   75F002       MOV       B,#0x2
   \   0002BA   E9           MOV       A,R1
   \   0002BB   A4           MUL       AB
   \   0002BC   2A           ADD       A,R2
   \   0002BD   F9           MOV       R1,A
   \   0002BE   74..         MOV       A,#(pgOff + 14) & 0xff
   \   0002C0   28           ADD       A,R0
   \   0002C1   F582         MOV       DPL,A
   \   0002C3   74..         MOV       A,#((pgOff - 242) >> 8) & 0xff
   \   0002C5   39           ADDC      A,R1
   \   0002C6   F583         MOV       DPH,A
   \   0002C8   E0           MOVX      A,@DPTR
   \   0002C9   2E           ADD       A,R6
   \   0002CA   F0           MOVX      @DPTR,A
   \   0002CB   A3           INC       DPTR
   \   0002CC   E0           MOVX      A,@DPTR
   \   0002CD   3F           ADDC      A,R7
   \   0002CE   F0           MOVX      @DPTR,A
   1146          
   1147            return rtrn;
   \   0002CF   A9..         MOV       R1,?V1
   \   0002D1   7408         MOV       A,#0x8
   \   0002D3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002D6   7F0C         MOV       R7,#0xc
   \   0002D8   02....       LJMP      ?BANKED_LEAVE_XDATA
   1148          }
   1149          
   1150          /*********************************************************************
   1151           * @fn      hotItem
   1152           *
   1153           * @brief   Look for the parameter 'id' in the hot items array.
   1154           *
   1155           * @param   id - A valid NV item Id.
   1156           *
   1157           * @return  A valid index into the hot items if the item is hot; OSAL_NV_MAX_HOT if not.
   1158           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1159          static uint8 hotItem(uint16 id)
   \                     hotItem:
   1160          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1161            uint8 hotIdx;
   1162          
   1163            for (hotIdx = 0; hotIdx < OSAL_NV_MAX_HOT; hotIdx++)
   \   000004   7900         MOV       R1,#0x0
   \                     ??hotItem_0:
   \   000006   E9           MOV       A,R1
   \   000007   C3           CLR       C
   \   000008   9403         SUBB      A,#0x3
   \   00000A   502F         JNC       ??hotItem_1
   1164            {
   1165              if (hotIds[hotIdx] == id)
   \   00000C   E9           MOV       A,R1
   \   00000D   FC           MOV       R4,A
   \   00000E   7D00         MOV       R5,#0x0
   \   000010   EC           MOV       A,R4
   \   000011   75F002       MOV       B,#0x2
   \   000014   A4           MUL       AB
   \   000015   CC           XCH       A,R4
   \   000016   A8F0         MOV       R0,B
   \   000018   75F000       MOV       B,#0x0
   \   00001B   A4           MUL       AB
   \   00001C   28           ADD       A,R0
   \   00001D   F8           MOV       R0,A
   \   00001E   75F002       MOV       B,#0x2
   \   000021   ED           MOV       A,R5
   \   000022   A4           MUL       AB
   \   000023   28           ADD       A,R0
   \   000024   FD           MOV       R5,A
   \   000025   74..         MOV       A,#hotIds & 0xff
   \   000027   2C           ADD       A,R4
   \   000028   F582         MOV       DPL,A
   \   00002A   74..         MOV       A,#(hotIds >> 8) & 0xff
   \   00002C   3D           ADDC      A,R5
   \   00002D   F583         MOV       DPH,A
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   6A           XRL       A,R2
   \   000031   7003         JNZ       ??hotItem_2
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   6B           XRL       A,R3
   \                     ??hotItem_2:
   \   000036   6003         JZ        ??hotItem_1
   1166              {
   1167                break;
   1168              }
   1169            }
   \   000038   09           INC       R1
   \   000039   80CB         SJMP      ??hotItem_0
   1170          
   1171            return hotIdx;
   \                     ??hotItem_1:
   \   00003B   D083         POP       DPH
   \   00003D   D082         POP       DPL
   \   00003F   02....       LJMP      ?BRET
   1172          }
   1173          
   1174          /*********************************************************************
   1175           * @fn      hotItemUpdate
   1176           *
   1177           * @brief   If the parameter 'id' is a hot item, update the corresponding hot item data.
   1178           *
   1179           * @param   pg - The new NV page corresponding to the hot item.
   1180           * @param   off - The new NV page offset corresponding to the hot item.
   1181           * @param   id - A valid NV item Id.
   1182           *
   1183           * @return  none
   1184           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1185          static void hotItemUpdate(uint8 pg, uint16 off, uint16 id)
   \                     hotItemUpdate:
   1186          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   1187            uint8 hotIdx = hotItem(id);
   \   00000F                ; Setup parameters for call to function hotItem
   \   00000F   EE           MOV       A,R6
   \   000010   FA           MOV       R2,A
   \   000011   EF           MOV       A,R7
   \   000012   FB           MOV       R3,A
   \   000013   12....       LCALL     `??hotItem::?relay`; Banked call to: hotItem
   \   000016   E9           MOV       A,R1
   \   000017   FA           MOV       R2,A
   1188          
   1189            if (hotIdx < OSAL_NV_MAX_HOT)
   \   000018   EA           MOV       A,R2
   \   000019   C3           CLR       C
   \   00001A   9403         SUBB      A,#0x3
   \   00001C   503F         JNC       ??hotItemUpdate_0
   1190            {
   1191              {
   1192                hotPg[hotIdx] = pg;
   \   00001E   E5..         MOV       A,?V2
   \   000020   C0E0         PUSH      A
   \   000022   EA           MOV       A,R2
   \   000023   F8           MOV       R0,A
   \   000024   7900         MOV       R1,#0x0
   \   000026   74..         MOV       A,#hotPg & 0xff
   \   000028   28           ADD       A,R0
   \   000029   F582         MOV       DPL,A
   \   00002B   74..         MOV       A,#(hotPg >> 8) & 0xff
   \   00002D   39           ADDC      A,R1
   \   00002E   F583         MOV       DPH,A
   \   000030   D0E0         POP       A
   \   000032   F0           MOVX      @DPTR,A
   1193                hotOff[hotIdx] = off;
   \   000033   EA           MOV       A,R2
   \   000034   F8           MOV       R0,A
   \   000035   7900         MOV       R1,#0x0
   \   000037   E8           MOV       A,R0
   \   000038   75F002       MOV       B,#0x2
   \   00003B   A4           MUL       AB
   \   00003C   C8           XCH       A,R0
   \   00003D   ABF0         MOV       R3,B
   \   00003F   75F000       MOV       B,#0x0
   \   000042   A4           MUL       AB
   \   000043   2B           ADD       A,R3
   \   000044   FB           MOV       R3,A
   \   000045   75F002       MOV       B,#0x2
   \   000048   E9           MOV       A,R1
   \   000049   A4           MUL       AB
   \   00004A   2B           ADD       A,R3
   \   00004B   F9           MOV       R1,A
   \   00004C   74..         MOV       A,#hotOff & 0xff
   \   00004E   28           ADD       A,R0
   \   00004F   F582         MOV       DPL,A
   \   000051   74..         MOV       A,#(hotOff >> 8) & 0xff
   \   000053   39           ADDC      A,R1
   \   000054   F583         MOV       DPH,A
   \   000056   E5..         MOV       A,?V0
   \   000058   F0           MOVX      @DPTR,A
   \   000059   A3           INC       DPTR
   \   00005A   E5..         MOV       A,?V1
   \   00005C   F0           MOVX      @DPTR,A
   1194              }
   1195            }
   1196          }
   \                     ??hotItemUpdate_0:
   \   00005D   7F03         MOV       R7,#0x3
   \   00005F   02....       LJMP      ?BANKED_LEAVE_XDATA
   1197          
   1198          /*********************************************************************
   1199           * @fn      osal_nv_init
   1200           *
   1201           * @brief   Initialize NV service.
   1202           *
   1203           * @param   p - Not used.
   1204           *
   1205           * @return  none
   1206           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1207          void osal_nv_init( void *p )
   \                     osal_nv_init:
   1208          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1209            (void)p;  // Suppress Lint warning.
   1210            (void)initNV();  // Always returns TRUE after pages have been erased.
   \   000009                ; Setup parameters for call to function initNV
   \   000009   12....       LCALL     `??initNV::?relay`; Banked call to: initNV
   \   00000C   E9           MOV       A,R1
   1211          }
   \   00000D   7F01         MOV       R7,#0x1
   \   00000F   02....       LJMP      ?BANKED_LEAVE_XDATA
   1212          
   1213          /*********************************************************************
   1214           * @fn      osal_nv_item_init
   1215           *
   1216           * @brief   If the NV item does not already exist, it is created and
   1217           *          initialized with the data passed to the function, if any.
   1218           *          This function must be called before calling osal_nv_read() or
   1219           *          osal_nv_write().
   1220           *
   1221           * @param   id  - Valid NV item Id.
   1222           * @param   len - Item length.
   1223           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
   1224           *
   1225           * @return  NV_ITEM_UNINIT - Id did not exist and was created successfully.
   1226           *          SUCCESS        - Id already existed, no action taken.
   1227           *          NV_OPER_FAILED - Failure to find or create Id.
   1228           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1229          uint8 osal_nv_item_init( uint16 id, uint16 len, void *buf )
   \                     osal_nv_item_init:
   1230          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   \   00000D   7410         MOV       A,#0x10
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F5..         MOV       ?V4,A
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F5..         MOV       ?V5,A
   1231            uint16 offset;
   1232          
   1233            if ( ( hotItem( id ) < OSAL_NV_MAX_HOT ) && ( !OSAL_NV_CHECK_BUS_VOLTAGE ) )
   \   000019                ; Setup parameters for call to function hotItem
   \   000019   EE           MOV       A,R6
   \   00001A   FA           MOV       R2,A
   \   00001B   EF           MOV       A,R7
   \   00001C   FB           MOV       R3,A
   \   00001D   12....       LCALL     `??hotItem::?relay`; Banked call to: hotItem
   \   000020   E9           MOV       A,R1
   \   000021   C3           CLR       C
   \   000022   9403         SUBB      A,#0x3
   \   000024   500A         JNC       ??osal_nv_item_init_0
   \   000026                ; Setup parameters for call to function OnBoard_CheckVoltage
   \   000026   12....       LCALL     `??OnBoard_CheckVoltage::?relay`; Banked call to: OnBoard_CheckVoltage
   \   000029   E9           MOV       A,R1
   \   00002A   7004         JNZ       ??osal_nv_item_init_0
   1234            {
   1235              return NV_OPER_FAILED;
   \   00002C   790A         MOV       R1,#0xa
   \   00002E   804B         SJMP      ??osal_nv_item_init_1
   1236            }
   1237            else if ((offset = findItem(id)) != OSAL_NV_ITEM_NULL)
   \                     ??osal_nv_item_init_0:
   \   000030                ; Setup parameters for call to function findItem
   \   000030   EE           MOV       A,R6
   \   000031   FA           MOV       R2,A
   \   000032   EF           MOV       A,R7
   \   000033   FB           MOV       R3,A
   \   000034   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   000037   8A..         MOV       ?V6,R2
   \   000039   8B..         MOV       ?V7,R3
   \   00003B   A8..         MOV       R0,?V6
   \   00003D   A9..         MOV       R1,?V7
   \   00003F   88..         MOV       ?V0,R0
   \   000041   89..         MOV       ?V1,R1
   \   000043   E8           MOV       A,R0
   \   000044   49           ORL       A,R1
   \   000045   6014         JZ        ??osal_nv_item_init_2
   1238            {
   1239              // Re-populate the NV hot item data if the corresponding items are already established.
   1240              hotItemUpdate(findPg, offset, id);
   \   000047                ; Setup parameters for call to function hotItemUpdate
   \   000047   EE           MOV       A,R6
   \   000048   FC           MOV       R4,A
   \   000049   EF           MOV       A,R7
   \   00004A   FD           MOV       R5,A
   \   00004B   AA..         MOV       R2,?V0
   \   00004D   AB..         MOV       R3,?V1
   \   00004F   90....       MOV       DPTR,#findPg
   \   000052   E0           MOVX      A,@DPTR
   \   000053   F9           MOV       R1,A
   \   000054   12....       LCALL     `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   1241          
   1242              return SUCCESS;
   \   000057   7900         MOV       R1,#0x0
   \   000059   8020         SJMP      ??osal_nv_item_init_1
   1243            }
   1244            else if ( initItem( TRUE, id, len, buf ) != OSAL_NV_PAGE_NULL )
   \                     ??osal_nv_item_init_2:
   \   00005B                ; Setup parameters for call to function initItem
   \   00005B   78..         MOV       R0,#?V4
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000060   AC..         MOV       R4,?V2
   \   000062   AD..         MOV       R5,?V3
   \   000064   EE           MOV       A,R6
   \   000065   FA           MOV       R2,A
   \   000066   EF           MOV       A,R7
   \   000067   FB           MOV       R3,A
   \   000068   7901         MOV       R1,#0x1
   \   00006A   12....       LCALL     `??initItem::?relay`; Banked call to: initItem
   \   00006D   7402         MOV       A,#0x2
   \   00006F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000072   E9           MOV       A,R1
   \   000073   6004         JZ        ??osal_nv_item_init_3
   1245            {
   1246              return NV_ITEM_UNINIT;
   \   000075   7909         MOV       R1,#0x9
   \   000077   8002         SJMP      ??osal_nv_item_init_1
   1247            }
   1248            else
   1249            {
   1250              return NV_OPER_FAILED;
   \                     ??osal_nv_item_init_3:
   \   000079   790A         MOV       R1,#0xa
   \                     ??osal_nv_item_init_1:
   \   00007B   7F08         MOV       R7,#0x8
   \   00007D   02....       LJMP      ?BANKED_LEAVE_XDATA
   1251            }
   1252          }
   1253          
   1254          /*********************************************************************
   1255           * @fn      osal_nv_item_len
   1256           *
   1257           * @brief   Get the data length of the item stored in NV memory.
   1258           *
   1259           * @param   id  - Valid NV item Id.
   1260           *
   1261           * @return  Item length, if found; zero otherwise.
   1262           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1263          uint16 osal_nv_item_len( uint16 id )
   \                     osal_nv_item_len:
   1264          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   1265            osalNvHdr_t hdr;
   1266            uint16 offset;
   1267            uint8 hotIdx;
   1268          
   1269            if ((hotIdx = hotItem(id)) < OSAL_NV_MAX_HOT)
   \   00000E                ; Setup parameters for call to function hotItem
   \   00000E   AA..         MOV       R2,?V0
   \   000010   AB..         MOV       R3,?V1
   \   000012   12....       LCALL     `??hotItem::?relay`; Banked call to: hotItem
   \   000015   E9           MOV       A,R1
   \   000016   F8           MOV       R0,A
   \   000017   88..         MOV       ?V2,R0
   \   000019   E8           MOV       A,R0
   \   00001A   C3           CLR       C
   \   00001B   9403         SUBB      A,#0x3
   \   00001D   503F         JNC       ??osal_nv_item_len_0
   1270            {
   1271              findPg = hotPg[hotIdx];
   \   00001F   E5..         MOV       A,?V2
   \   000021   F8           MOV       R0,A
   \   000022   7900         MOV       R1,#0x0
   \   000024   74..         MOV       A,#hotPg & 0xff
   \   000026   28           ADD       A,R0
   \   000027   F582         MOV       DPL,A
   \   000029   74..         MOV       A,#(hotPg >> 8) & 0xff
   \   00002B   39           ADDC      A,R1
   \   00002C   F583         MOV       DPH,A
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   90....       MOV       DPTR,#findPg
   \   000032   F0           MOVX      @DPTR,A
   1272              offset = hotOff[hotIdx];
   \   000033   E5..         MOV       A,?V2
   \   000035   F8           MOV       R0,A
   \   000036   7900         MOV       R1,#0x0
   \   000038   E8           MOV       A,R0
   \   000039   75F002       MOV       B,#0x2
   \   00003C   A4           MUL       AB
   \   00003D   C8           XCH       A,R0
   \   00003E   AAF0         MOV       R2,B
   \   000040   75F000       MOV       B,#0x0
   \   000043   A4           MUL       AB
   \   000044   2A           ADD       A,R2
   \   000045   FA           MOV       R2,A
   \   000046   75F002       MOV       B,#0x2
   \   000049   E9           MOV       A,R1
   \   00004A   A4           MUL       AB
   \   00004B   2A           ADD       A,R2
   \   00004C   F9           MOV       R1,A
   \   00004D   74..         MOV       A,#hotOff & 0xff
   \   00004F   28           ADD       A,R0
   \   000050   F582         MOV       DPL,A
   \   000052   74..         MOV       A,#(hotOff >> 8) & 0xff
   \   000054   39           ADDC      A,R1
   \   000055   F583         MOV       DPH,A
   \   000057   E0           MOVX      A,@DPTR
   \   000058   FE           MOV       R6,A
   \   000059   A3           INC       DPTR
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   FF           MOV       R7,A
   \   00005C   801D         SJMP      ??osal_nv_item_len_1
   1273            }
   1274            else if ((offset = findItem(id)) == OSAL_NV_ITEM_NULL)
   \                     ??osal_nv_item_len_0:
   \   00005E                ; Setup parameters for call to function findItem
   \   00005E   AA..         MOV       R2,?V0
   \   000060   AB..         MOV       R3,?V1
   \   000062   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   000065   8A..         MOV       ?V4,R2
   \   000067   8B..         MOV       ?V5,R3
   \   000069   A8..         MOV       R0,?V4
   \   00006B   A9..         MOV       R1,?V5
   \   00006D   E8           MOV       A,R0
   \   00006E   FE           MOV       R6,A
   \   00006F   E9           MOV       A,R1
   \   000070   FF           MOV       R7,A
   \   000071   E8           MOV       A,R0
   \   000072   49           ORL       A,R1
   \   000073   7006         JNZ       ??osal_nv_item_len_1
   1275            {
   1276              return 0;
   \   000075   7A00         MOV       R2,#0x0
   \   000077   7B00         MOV       R3,#0x0
   \   000079   802F         SJMP      ??osal_nv_item_len_2
   1277            }
   1278          
   1279            HalFlashRead(findPg, (offset - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??osal_nv_item_len_1:
   \   00007B                ; Setup parameters for call to function HalFlashRead
   \   00007B   75..08       MOV       ?V4,#0x8
   \   00007E   75..00       MOV       ?V5,#0x0
   \   000081   78..         MOV       R0,#?V4
   \   000083   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000086   7402         MOV       A,#0x2
   \   000088   12....       LCALL     ?XSTACK_DISP102_8
   \   00008B   EE           MOV       A,R6
   \   00008C   24F8         ADD       A,#-0x8
   \   00008E   FA           MOV       R2,A
   \   00008F   EF           MOV       A,R7
   \   000090   34FF         ADDC      A,#-0x1
   \   000092   FB           MOV       R3,A
   \   000093   90....       MOV       DPTR,#findPg
   \   000096   E0           MOVX      A,@DPTR
   \   000097   F9           MOV       R1,A
   \   000098   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00009B   7402         MOV       A,#0x2
   \   00009D   12....       LCALL     ?DEALLOC_XSTACK8
   1280            return hdr.len;
   \   0000A0   7402         MOV       A,#0x2
   \   0000A2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   FA           MOV       R2,A
   \   0000A7   A3           INC       DPTR
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   FB           MOV       R3,A
   \                     ??osal_nv_item_len_2:
   \   0000AA   7408         MOV       A,#0x8
   \   0000AC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AF   7F06         MOV       R7,#0x6
   \   0000B1   02....       LJMP      ?BANKED_LEAVE_XDATA
   1281          }
   1282          
   1283          /*********************************************************************
   1284           * @fn      osal_nv_write
   1285           *
   1286           * @brief   Write a data item to NV. Function can write an entire item to NV or
   1287           *          an element of an item by indexing into the item with an offset.
   1288           *
   1289           * @param   id  - Valid NV item Id.
   1290           * @param   ndx - Index offset into item
   1291           * @param   len - Length of data to write.
   1292           * @param  *buf - Data to write.
   1293           *
   1294           * @return  SUCCESS if successful, NV_ITEM_UNINIT if item did not
   1295           *          exist in NV and offset is non-zero, NV_OPER_FAILED if failure.
   1296           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1297          uint8 osal_nv_write( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_write:
   1298          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV       A,#-0x12
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7410         MOV       A,#0x10
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   8C..         MOV       ?V8,R4
   \   000016   8D..         MOV       ?V9,R5
   \   000018   742A         MOV       A,#0x2a
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F5..         MOV       ?V14,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F5..         MOV       ?V15,A
   1299            uint8 rtrn = SUCCESS;
   \   000024   75..00       MOV       ?V7,#0x0
   1300          
   1301            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \   000027                ; Setup parameters for call to function OnBoard_CheckVoltage
   \   000027   12....       LCALL     `??OnBoard_CheckVoltage::?relay`; Banked call to: OnBoard_CheckVoltage
   \   00002A   E9           MOV       A,R1
   \   00002B   7005         JNZ       ??osal_nv_write_0
   1302            {
   1303              return NV_OPER_FAILED;
   \   00002D   790A         MOV       R1,#0xa
   \   00002F   02....       LJMP      ??osal_nv_write_1 & 0xFFFF
   1304            }
   1305            else if ( len != 0 )
   \                     ??osal_nv_write_0:
   \   000032   E5..         MOV       A,?V14
   \   000034   45..         ORL       A,?V15
   \   000036   7003         JNZ       $+5
   \   000038   02....       LJMP      ??osal_nv_write_2 & 0xFFFF
   1306            {
   1307              osalNvHdr_t hdr;
   1308              uint16 origOff, srcOff;
   1309              uint16 cnt, chk;
   1310              uint8 *ptr, srcPg;
   1311          
   1312              origOff = srcOff = findItem( id );
   \   00003B                ; Setup parameters for call to function findItem
   \   00003B   7410         MOV       A,#0x10
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   E0           MOVX      A,@DPTR
   \   000041   FA           MOV       R2,A
   \   000042   A3           INC       DPTR
   \   000043   E0           MOVX      A,@DPTR
   \   000044   FB           MOV       R3,A
   \   000045   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   000048   8A..         MOV       ?V0,R2
   \   00004A   8B..         MOV       ?V1,R3
   \   00004C   A8..         MOV       R0,?V0
   \   00004E   A9..         MOV       R1,?V1
   \   000050   88..         MOV       ?V4,R0
   \   000052   89..         MOV       ?V5,R1
   \   000054   7406         MOV       A,#0x6
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   E8           MOV       A,R0
   \   00005A   F0           MOVX      @DPTR,A
   \   00005B   A3           INC       DPTR
   \   00005C   E9           MOV       A,R1
   \   00005D   F0           MOVX      @DPTR,A
   1313              srcPg = findPg;
   \   00005E   90....       MOV       DPTR,#findPg
   \   000061   E0           MOVX      A,@DPTR
   \   000062   F5..         MOV       ?V12,A
   1314              if ( srcOff == OSAL_NV_ITEM_NULL )
   \   000064   E5..         MOV       A,?V4
   \   000066   45..         ORL       A,?V5
   \   000068   7005         JNZ       ??osal_nv_write_3
   1315              {
   1316                return NV_ITEM_UNINIT;
   \   00006A   7909         MOV       R1,#0x9
   \   00006C   02....       LJMP      ??osal_nv_write_1 & 0xFFFF
   1317              }
   1318          
   1319              HalFlashRead(srcPg, (srcOff - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??osal_nv_write_3:
   \   00006F                ; Setup parameters for call to function HalFlashRead
   \   00006F   75..08       MOV       ?V0,#0x8
   \   000072   75..00       MOV       ?V1,#0x0
   \   000075   78..         MOV       R0,#?V0
   \   000077   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007A   740A         MOV       A,#0xa
   \   00007C   12....       LCALL     ?XSTACK_DISP102_8
   \   00007F   E5..         MOV       A,?V4
   \   000081   24F8         ADD       A,#-0x8
   \   000083   FA           MOV       R2,A
   \   000084   E5..         MOV       A,?V5
   \   000086   34FF         ADDC      A,#-0x1
   \   000088   FB           MOV       R3,A
   \   000089   A9..         MOV       R1,?V12
   \   00008B   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00008E   7402         MOV       A,#0x2
   \   000090   12....       LCALL     ?DEALLOC_XSTACK8
   1320              if ( hdr.len < (ndx + len) )
   \   000093   740A         MOV       A,#0xa
   \   000095   12....       LCALL     ?XSTACK_DISP0_8
   \   000098   E5..         MOV       A,?V8
   \   00009A   25..         ADD       A,?V14
   \   00009C   F8           MOV       R0,A
   \   00009D   E5..         MOV       A,?V9
   \   00009F   35..         ADDC      A,?V15
   \   0000A1   F9           MOV       R1,A
   \   0000A2   C3           CLR       C
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   98           SUBB      A,R0
   \   0000A5   A3           INC       DPTR
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   99           SUBB      A,R1
   \   0000A8   5005         JNC       ??osal_nv_write_4
   1321              {
   1322                return NV_OPER_FAILED;
   \   0000AA   790A         MOV       R1,#0xa
   \   0000AC   02....       LJMP      ??osal_nv_write_1 & 0xFFFF
   1323              }
   1324          
   1325              srcOff += ndx;
   \                     ??osal_nv_write_4:
   \   0000AF   E5..         MOV       A,?V4
   \   0000B1   25..         ADD       A,?V8
   \   0000B3   F5..         MOV       ?V4,A
   \   0000B5   E5..         MOV       A,?V5
   \   0000B7   35..         ADDC      A,?V9
   \   0000B9   F5..         MOV       ?V5,A
   1326              ptr = buf;
   \   0000BB   742C         MOV       A,#0x2c
   \   0000BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   F8           MOV       R0,A
   \   0000C2   A3           INC       DPTR
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   F9           MOV       R1,A
   \   0000C5   7402         MOV       A,#0x2
   \   0000C7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CA   E8           MOV       A,R0
   \   0000CB   F0           MOVX      @DPTR,A
   \   0000CC   A3           INC       DPTR
   \   0000CD   E9           MOV       A,R1
   \   0000CE   F0           MOVX      @DPTR,A
   1327              cnt = len;
   \   0000CF   85....       MOV       ?V2,?V14
   \   0000D2   85....       MOV       ?V3,?V15
   1328              chk = 0;
   \   0000D5   7404         MOV       A,#0x4
   \   0000D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DA   7400         MOV       A,#0x0
   \   0000DC   F0           MOVX      @DPTR,A
   \   0000DD   A3           INC       DPTR
   \   0000DE   7400         MOV       A,#0x0
   \   0000E0   F0           MOVX      @DPTR,A
   1329              while ( cnt-- )
   \                     ??osal_nv_write_5:
   \   0000E1   A8..         MOV       R0,?V2
   \   0000E3   A9..         MOV       R1,?V3
   \   0000E5   E8           MOV       A,R0
   \   0000E6   24FF         ADD       A,#-0x1
   \   0000E8   F5..         MOV       ?V2,A
   \   0000EA   E9           MOV       A,R1
   \   0000EB   34FF         ADDC      A,#-0x1
   \   0000ED   F5..         MOV       ?V3,A
   \   0000EF   E8           MOV       A,R0
   \   0000F0   49           ORL       A,R1
   \   0000F1   7003         JNZ       $+5
   \   0000F3   02....       LJMP      ??osal_nv_write_6 & 0xFFFF
   1330              {
   1331                uint8 tmp;
   1332                HalFlashRead(srcPg, srcOff, &tmp, 1);
   \   0000F6                ; Setup parameters for call to function HalFlashRead
   \   0000F6   75..01       MOV       ?V0,#0x1
   \   0000F9   75..00       MOV       ?V1,#0x0
   \   0000FC   78..         MOV       R0,#?V0
   \   0000FE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000101   7403         MOV       A,#0x3
   \   000103   12....       LCALL     ?XSTACK_DISP102_8
   \   000106   AA..         MOV       R2,?V4
   \   000108   AB..         MOV       R3,?V5
   \   00010A   A9..         MOV       R1,?V12
   \   00010C   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00010F   7402         MOV       A,#0x2
   \   000111   12....       LCALL     ?DEALLOC_XSTACK8
   1333                if ( tmp != *ptr )
   \   000114   7401         MOV       A,#0x1
   \   000116   12....       LCALL     ?XSTACK_DISP0_8
   \   000119   E0           MOVX      A,@DPTR
   \   00011A   F9           MOV       R1,A
   \   00011B   7402         MOV       A,#0x2
   \   00011D   12....       LCALL     ?XSTACK_DISP0_8
   \   000120   E0           MOVX      A,@DPTR
   \   000121   F8           MOV       R0,A
   \   000122   A3           INC       DPTR
   \   000123   E0           MOVX      A,@DPTR
   \   000124   F583         MOV       DPH,A
   \   000126   8882         MOV       DPL,R0
   \   000128   E0           MOVX      A,@DPTR
   \   000129   69           XRL       A,R1
   \   00012A   603F         JZ        ??osal_nv_write_7
   1334                {
   1335                  chk = 1;  // Mark that at least one byte is different.
   \   00012C   7404         MOV       A,#0x4
   \   00012E   12....       LCALL     ?XSTACK_DISP0_8
   \   000131   7401         MOV       A,#0x1
   \   000133   F0           MOVX      @DPTR,A
   \   000134   A3           INC       DPTR
   \   000135   7400         MOV       A,#0x0
   \   000137   F0           MOVX      @DPTR,A
   1336                  // Calculate expected checksum after transferring old data and writing new data.
   1337                  hdr.chk -= tmp;
   \   000138   7401         MOV       A,#0x1
   \   00013A   12....       LCALL     ?XSTACK_DISP0_8
   \   00013D   E0           MOVX      A,@DPTR
   \   00013E   F8           MOV       R0,A
   \   00013F   7900         MOV       R1,#0x0
   \   000141   740C         MOV       A,#0xc
   \   000143   12....       LCALL     ?XSTACK_DISP0_8
   \   000146   C3           CLR       C
   \   000147   E0           MOVX      A,@DPTR
   \   000148   98           SUBB      A,R0
   \   000149   F0           MOVX      @DPTR,A
   \   00014A   A3           INC       DPTR
   \   00014B   E0           MOVX      A,@DPTR
   \   00014C   99           SUBB      A,R1
   \   00014D   F0           MOVX      @DPTR,A
   1338                  hdr.chk += *ptr;
   \   00014E   7402         MOV       A,#0x2
   \   000150   12....       LCALL     ?XSTACK_DISP0_8
   \   000153   E0           MOVX      A,@DPTR
   \   000154   F8           MOV       R0,A
   \   000155   A3           INC       DPTR
   \   000156   E0           MOVX      A,@DPTR
   \   000157   F583         MOV       DPH,A
   \   000159   8882         MOV       DPL,R0
   \   00015B   E0           MOVX      A,@DPTR
   \   00015C   F8           MOV       R0,A
   \   00015D   7900         MOV       R1,#0x0
   \   00015F   740C         MOV       A,#0xc
   \   000161   12....       LCALL     ?XSTACK_DISP0_8
   \   000164   E0           MOVX      A,@DPTR
   \   000165   28           ADD       A,R0
   \   000166   F0           MOVX      @DPTR,A
   \   000167   A3           INC       DPTR
   \   000168   E0           MOVX      A,@DPTR
   \   000169   39           ADDC      A,R1
   \   00016A   F0           MOVX      @DPTR,A
   1339                }
   1340                srcOff++;
   \                     ??osal_nv_write_7:
   \   00016B   05..         INC       ?V4
   \   00016D   E5..         MOV       A,?V4
   \   00016F   7002         JNZ       ??osal_nv_write_8
   \   000171   05..         INC       ?V5
   1341                ptr++;
   \                     ??osal_nv_write_8:
   \   000173   7402         MOV       A,#0x2
   \   000175   12....       LCALL     ?XSTACK_DISP0_8
   \   000178   E0           MOVX      A,@DPTR
   \   000179   2401         ADD       A,#0x1
   \   00017B   F8           MOV       R0,A
   \   00017C   A3           INC       DPTR
   \   00017D   E0           MOVX      A,@DPTR
   \   00017E   3400         ADDC      A,#0x0
   \   000180   F9           MOV       R1,A
   \   000181   7402         MOV       A,#0x2
   \   000183   12....       LCALL     ?XSTACK_DISP0_8
   \   000186   E8           MOV       A,R0
   \   000187   F0           MOVX      @DPTR,A
   \   000188   A3           INC       DPTR
   \   000189   E9           MOV       A,R1
   \   00018A   F0           MOVX      @DPTR,A
   \   00018B   02....       LJMP      ??osal_nv_write_5 & 0xFFFF
   1342              }
   1343          
   1344              if ( chk != 0 )  // If the buffer to write is different in one or more bytes.
   \                     ??osal_nv_write_6:
   \   00018E   7404         MOV       A,#0x4
   \   000190   12....       LCALL     ?XSTACK_DISP0_8
   \   000193   E0           MOVX      A,@DPTR
   \   000194   F8           MOV       R0,A
   \   000195   A3           INC       DPTR
   \   000196   E0           MOVX      A,@DPTR
   \   000197   F9           MOV       R1,A
   \   000198   E8           MOV       A,R0
   \   000199   49           ORL       A,R1
   \   00019A   7003         JNZ       $+5
   \   00019C   02....       LJMP      ??osal_nv_write_2 & 0xFFFF
   1345              {
   1346                uint8 comPg = OSAL_NV_PAGE_NULL;
   \   00019F   85..82       MOV       DPL,?XSP + 0
   \   0001A2   85..83       MOV       DPH,?XSP + 1
   \   0001A5   7400         MOV       A,#0x0
   \   0001A7   F0           MOVX      @DPTR,A
   1347                uint8 dstPg = initItem( FALSE, id, hdr.len, &comPg );
   \   0001A8                ; Setup parameters for call to function initItem
   \   0001A8   A8..         MOV       R0,?XSP + 0
   \   0001AA   A9..         MOV       R1,?XSP + 1
   \   0001AC   88..         MOV       ?V0,R0
   \   0001AE   89..         MOV       ?V1,R1
   \   0001B0   78..         MOV       R0,#?V0
   \   0001B2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B5   740C         MOV       A,#0xc
   \   0001B7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BA   E0           MOVX      A,@DPTR
   \   0001BB   FC           MOV       R4,A
   \   0001BC   A3           INC       DPTR
   \   0001BD   E0           MOVX      A,@DPTR
   \   0001BE   FD           MOV       R5,A
   \   0001BF   7412         MOV       A,#0x12
   \   0001C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C4   E0           MOVX      A,@DPTR
   \   0001C5   FA           MOV       R2,A
   \   0001C6   A3           INC       DPTR
   \   0001C7   E0           MOVX      A,@DPTR
   \   0001C8   FB           MOV       R3,A
   \   0001C9   7900         MOV       R1,#0x0
   \   0001CB   12....       LCALL     `??initItem::?relay`; Banked call to: initItem
   \   0001CE   7402         MOV       A,#0x2
   \   0001D0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001D3   E9           MOV       A,R1
   \   0001D4   F5..         MOV       ?V6,A
   1348          
   1349                if ( dstPg != OSAL_NV_PAGE_NULL )
   \   0001D6   E5..         MOV       A,?V6
   \   0001D8   7003         JNZ       $+5
   \   0001DA   02....       LJMP      ??osal_nv_write_9 & 0xFFFF
   1350                {
   1351                  uint16 tmp = OSAL_NV_DATA_SIZE( hdr.len );
   \   0001DD   740A         MOV       A,#0xa
   \   0001DF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E2   C3           CLR       C
   \   0001E3   E0           MOVX      A,@DPTR
   \   0001E4   94FC         SUBB      A,#-0x4
   \   0001E6   A3           INC       DPTR
   \   0001E7   E0           MOVX      A,@DPTR
   \   0001E8   94FF         SUBB      A,#-0x1
   \   0001EA   4008         JC        ??osal_nv_write_10
   \   0001EC   75..FC       MOV       ?V0,#-0x4
   \   0001EF   75..FF       MOV       ?V1,#-0x1
   \   0001F2   8030         SJMP      ??osal_nv_write_11
   \                     ??osal_nv_write_10:
   \   0001F4   740A         MOV       A,#0xa
   \   0001F6   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F9   E0           MOVX      A,@DPTR
   \   0001FA   2403         ADD       A,#0x3
   \   0001FC   F5..         MOV       ?V0,A
   \   0001FE   A3           INC       DPTR
   \   0001FF   E0           MOVX      A,@DPTR
   \   000200   3400         ADDC      A,#0x0
   \   000202   F5..         MOV       ?V1,A
   \   000204   7402         MOV       A,#0x2
   \   000206   78..         MOV       R0,#?V0
   \   000208   12....       LCALL     ?US_SHR
   \   00020B   E5..         MOV       A,?V0
   \   00020D   75F004       MOV       B,#0x4
   \   000210   A4           MUL       AB
   \   000211   C5..         XCH       A,?V0
   \   000213   A8F0         MOV       R0,B
   \   000215   75F000       MOV       B,#0x0
   \   000218   A4           MUL       AB
   \   000219   28           ADD       A,R0
   \   00021A   F8           MOV       R0,A
   \   00021B   75F004       MOV       B,#0x4
   \   00021E   E5..         MOV       A,?V1
   \   000220   A4           MUL       AB
   \   000221   28           ADD       A,R0
   \   000222   F5..         MOV       ?V1,A
   1352                  uint16 dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \                     ??osal_nv_write_11:
   \   000224   E5..         MOV       A,?V6
   \   000226   F8           MOV       R0,A
   \   000227   7900         MOV       R1,#0x0
   \   000229   E8           MOV       A,R0
   \   00022A   75F002       MOV       B,#0x2
   \   00022D   A4           MUL       AB
   \   00022E   C8           XCH       A,R0
   \   00022F   AAF0         MOV       R2,B
   \   000231   75F000       MOV       B,#0x0
   \   000234   A4           MUL       AB
   \   000235   2A           ADD       A,R2
   \   000236   FA           MOV       R2,A
   \   000237   75F002       MOV       B,#0x2
   \   00023A   E9           MOV       A,R1
   \   00023B   A4           MUL       AB
   \   00023C   2A           ADD       A,R2
   \   00023D   F9           MOV       R1,A
   \   00023E   74..         MOV       A,#(pgOff + 14) & 0xff
   \   000240   28           ADD       A,R0
   \   000241   F582         MOV       DPL,A
   \   000243   74..         MOV       A,#((pgOff - 242) >> 8) & 0xff
   \   000245   39           ADDC      A,R1
   \   000246   F583         MOV       DPH,A
   \   000248   E0           MOVX      A,@DPTR
   \   000249   C3           CLR       C
   \   00024A   95..         SUBB      A,?V0
   \   00024C   FE           MOV       R6,A
   \   00024D   A3           INC       DPTR
   \   00024E   E0           MOVX      A,@DPTR
   \   00024F   95..         SUBB      A,?V1
   \   000251   FF           MOV       R7,A
   1353                  srcOff = origOff;
   \   000252   7406         MOV       A,#0x6
   \   000254   12....       LCALL     ?XSTACK_DISP0_8
   \   000257   E0           MOVX      A,@DPTR
   \   000258   F5..         MOV       ?V4,A
   \   00025A   A3           INC       DPTR
   \   00025B   E0           MOVX      A,@DPTR
   \   00025C   F5..         MOV       ?V5,A
   1354          
   1355                  /* Prevent excessive re-writes to item header caused by numerous, rapid, & successive
   1356                   * OSAL_Nv interruptions caused by resets.
   1357                   */
   1358                  if ( hdr.stat == OSAL_NV_ERASED_ID )
   \   00025E   740E         MOV       A,#0xe
   \   000260   12....       LCALL     ?XSTACK_DISP0_8
   \   000263   E0           MOVX      A,@DPTR
   \   000264   64FF         XRL       A,#0xff
   \   000266   7004         JNZ       ??osal_nv_write_12
   \   000268   A3           INC       DPTR
   \   000269   E0           MOVX      A,@DPTR
   \   00026A   64FF         XRL       A,#0xff
   \                     ??osal_nv_write_12:
   \   00026C   700B         JNZ       ??osal_nv_write_13
   1359                  {
   1360                    setItem( srcPg, srcOff, eNvXfer );
   \   00026E                ; Setup parameters for call to function setItem
   \   00026E   7C00         MOV       R4,#0x0
   \   000270   AA..         MOV       R2,?V4
   \   000272   AB..         MOV       R3,?V5
   \   000274   A9..         MOV       R1,?V12
   \   000276   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
   1361                  }
   1362          
   1363                  xferBuf( srcPg, srcOff, dstPg, dstOff, ndx );
   \                     ??osal_nv_write_13:
   \   000279                ; Setup parameters for call to function xferBuf
   \   000279   78..         MOV       R0,#?V8
   \   00027B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00027E   8E..         MOV       ?V10,R6
   \   000280   8F..         MOV       ?V11,R7
   \   000282   78..         MOV       R0,#?V10
   \   000284   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000287   AC..         MOV       R4,?V6
   \   000289   AA..         MOV       R2,?V4
   \   00028B   AB..         MOV       R3,?V5
   \   00028D   A9..         MOV       R1,?V12
   \   00028F   12....       LCALL     `??xferBuf::?relay`; Banked call to: xferBuf
   \   000292   7404         MOV       A,#0x4
   \   000294   12....       LCALL     ?DEALLOC_XSTACK8
   1364                  srcOff += ndx;
   \   000297   E5..         MOV       A,?V4
   \   000299   25..         ADD       A,?V8
   \   00029B   F5..         MOV       ?V4,A
   \   00029D   E5..         MOV       A,?V5
   \   00029F   35..         ADDC      A,?V9
   \   0002A1   F5..         MOV       ?V5,A
   1365                  dstOff += ndx;
   \   0002A3   EE           MOV       A,R6
   \   0002A4   25..         ADD       A,?V8
   \   0002A6   FE           MOV       R6,A
   \   0002A7   EF           MOV       A,R7
   \   0002A8   35..         ADDC      A,?V9
   \   0002AA   FF           MOV       R7,A
   1366          
   1367                  writeBuf( dstPg, dstOff, len, buf );
   \   0002AB                ; Setup parameters for call to function writeBuf
   \   0002AB   742C         MOV       A,#0x2c
   \   0002AD   12....       LCALL     ?XSTACK_DISP0_8
   \   0002B0   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0002B3   AC..         MOV       R4,?V14
   \   0002B5   AD..         MOV       R5,?V15
   \   0002B7   EE           MOV       A,R6
   \   0002B8   FA           MOV       R2,A
   \   0002B9   EF           MOV       A,R7
   \   0002BA   FB           MOV       R3,A
   \   0002BB   A9..         MOV       R1,?V6
   \   0002BD   12....       LCALL     `??writeBuf::?relay`; Banked call to: writeBuf
   \   0002C0   7402         MOV       A,#0x2
   \   0002C2   12....       LCALL     ?DEALLOC_XSTACK8
   1368                  srcOff += len;
   \   0002C5   E5..         MOV       A,?V4
   \   0002C7   25..         ADD       A,?V14
   \   0002C9   F5..         MOV       ?V4,A
   \   0002CB   E5..         MOV       A,?V5
   \   0002CD   35..         ADDC      A,?V15
   \   0002CF   F5..         MOV       ?V5,A
   1369                  dstOff += len;
   \   0002D1   EE           MOV       A,R6
   \   0002D2   25..         ADD       A,?V14
   \   0002D4   FE           MOV       R6,A
   \   0002D5   EF           MOV       A,R7
   \   0002D6   35..         ADDC      A,?V15
   \   0002D8   FF           MOV       R7,A
   1370          
   1371                  xferBuf( srcPg, srcOff, dstPg, dstOff, (hdr.len-ndx-len) );
   \   0002D9                ; Setup parameters for call to function xferBuf
   \   0002D9   740A         MOV       A,#0xa
   \   0002DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0002DE   E0           MOVX      A,@DPTR
   \   0002DF   C3           CLR       C
   \   0002E0   95..         SUBB      A,?V8
   \   0002E2   F8           MOV       R0,A
   \   0002E3   A3           INC       DPTR
   \   0002E4   E0           MOVX      A,@DPTR
   \   0002E5   95..         SUBB      A,?V9
   \   0002E7   F9           MOV       R1,A
   \   0002E8   E8           MOV       A,R0
   \   0002E9   C3           CLR       C
   \   0002EA   95..         SUBB      A,?V14
   \   0002EC   F5..         MOV       ?V10,A
   \   0002EE   E9           MOV       A,R1
   \   0002EF   95..         SUBB      A,?V15
   \   0002F1   F5..         MOV       ?V11,A
   \   0002F3   78..         MOV       R0,#?V10
   \   0002F5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002F8   8E..         MOV       ?V10,R6
   \   0002FA   8F..         MOV       ?V11,R7
   \   0002FC   78..         MOV       R0,#?V10
   \   0002FE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000301   AC..         MOV       R4,?V6
   \   000303   AA..         MOV       R2,?V4
   \   000305   AB..         MOV       R3,?V5
   \   000307   A9..         MOV       R1,?V12
   \   000309   12....       LCALL     `??xferBuf::?relay`; Banked call to: xferBuf
   \   00030C   7404         MOV       A,#0x4
   \   00030E   12....       LCALL     ?DEALLOC_XSTACK8
   1372          
   1373                  // Calculate and write the new checksum.
   1374                  dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \   000311   E5..         MOV       A,?V6
   \   000313   F8           MOV       R0,A
   \   000314   7900         MOV       R1,#0x0
   \   000316   E8           MOV       A,R0
   \   000317   75F002       MOV       B,#0x2
   \   00031A   A4           MUL       AB
   \   00031B   C8           XCH       A,R0
   \   00031C   AAF0         MOV       R2,B
   \   00031E   75F000       MOV       B,#0x0
   \   000321   A4           MUL       AB
   \   000322   2A           ADD       A,R2
   \   000323   FA           MOV       R2,A
   \   000324   75F002       MOV       B,#0x2
   \   000327   E9           MOV       A,R1
   \   000328   A4           MUL       AB
   \   000329   2A           ADD       A,R2
   \   00032A   F9           MOV       R1,A
   \   00032B   74..         MOV       A,#(pgOff + 14) & 0xff
   \   00032D   28           ADD       A,R0
   \   00032E   F582         MOV       DPL,A
   \   000330   74..         MOV       A,#((pgOff - 242) >> 8) & 0xff
   \   000332   39           ADDC      A,R1
   \   000333   F583         MOV       DPH,A
   \   000335   E0           MOVX      A,@DPTR
   \   000336   C3           CLR       C
   \   000337   95..         SUBB      A,?V0
   \   000339   F8           MOV       R0,A
   \   00033A   A3           INC       DPTR
   \   00033B   E0           MOVX      A,@DPTR
   \   00033C   95..         SUBB      A,?V1
   \   00033E   F9           MOV       R1,A
   \   00033F   E8           MOV       A,R0
   \   000340   FE           MOV       R6,A
   \   000341   E9           MOV       A,R1
   \   000342   FF           MOV       R7,A
   1375          
   1376                  if ( hdr.chk == calcChkF( dstPg, dstOff, hdr.len ) )
   \   000343                ; Setup parameters for call to function calcChkF
   \   000343   740A         MOV       A,#0xa
   \   000345   12....       LCALL     ?XSTACK_DISP0_8
   \   000348   E0           MOVX      A,@DPTR
   \   000349   FC           MOV       R4,A
   \   00034A   A3           INC       DPTR
   \   00034B   E0           MOVX      A,@DPTR
   \   00034C   FD           MOV       R5,A
   \   00034D   EE           MOV       A,R6
   \   00034E   FA           MOV       R2,A
   \   00034F   EF           MOV       A,R7
   \   000350   FB           MOV       R3,A
   \   000351   A9..         MOV       R1,?V6
   \   000353   12....       LCALL     `??calcChkF::?relay`; Banked call to: calcChkF
   \   000356   8A..         MOV       ?V10,R2
   \   000358   8B..         MOV       ?V11,R3
   \   00035A   A8..         MOV       R0,?V10
   \   00035C   A9..         MOV       R1,?V11
   \   00035E   740C         MOV       A,#0xc
   \   000360   12....       LCALL     ?XSTACK_DISP0_8
   \   000363   E0           MOVX      A,@DPTR
   \   000364   68           XRL       A,R0
   \   000365   7003         JNZ       ??osal_nv_write_14
   \   000367   A3           INC       DPTR
   \   000368   E0           MOVX      A,@DPTR
   \   000369   69           XRL       A,R1
   \                     ??osal_nv_write_14:
   \   00036A   7043         JNZ       ??osal_nv_write_15
   1377                  {
   1378                    if ( hdr.chk != setChk( dstPg, dstOff, hdr.chk ) )
   \   00036C                ; Setup parameters for call to function setChk
   \   00036C   740C         MOV       A,#0xc
   \   00036E   12....       LCALL     ?XSTACK_DISP0_8
   \   000371   E0           MOVX      A,@DPTR
   \   000372   FC           MOV       R4,A
   \   000373   A3           INC       DPTR
   \   000374   E0           MOVX      A,@DPTR
   \   000375   FD           MOV       R5,A
   \   000376   EE           MOV       A,R6
   \   000377   FA           MOV       R2,A
   \   000378   EF           MOV       A,R7
   \   000379   FB           MOV       R3,A
   \   00037A   A9..         MOV       R1,?V6
   \   00037C   12....       LCALL     `??setChk::?relay`; Banked call to: setChk
   \   00037F   8A..         MOV       ?V10,R2
   \   000381   8B..         MOV       ?V11,R3
   \   000383   A8..         MOV       R0,?V10
   \   000385   A9..         MOV       R1,?V11
   \   000387   740C         MOV       A,#0xc
   \   000389   12....       LCALL     ?XSTACK_DISP0_8
   \   00038C   E0           MOVX      A,@DPTR
   \   00038D   68           XRL       A,R0
   \   00038E   7003         JNZ       ??osal_nv_write_16
   \   000390   A3           INC       DPTR
   \   000391   E0           MOVX      A,@DPTR
   \   000392   69           XRL       A,R1
   \                     ??osal_nv_write_16:
   \   000393   6005         JZ        ??osal_nv_write_17
   1379                    {
   1380                      rtrn = NV_OPER_FAILED;
   \   000395   75..0A       MOV       ?V7,#0xa
   \   000398   801D         SJMP      ??osal_nv_write_18
   1381                    }
   1382                    else
   1383                    {
   1384                      hotItemUpdate(dstPg, dstOff, hdr.id);
   \                     ??osal_nv_write_17:
   \   00039A                ; Setup parameters for call to function hotItemUpdate
   \   00039A   7408         MOV       A,#0x8
   \   00039C   12....       LCALL     ?XSTACK_DISP0_8
   \   00039F   E0           MOVX      A,@DPTR
   \   0003A0   FC           MOV       R4,A
   \   0003A1   A3           INC       DPTR
   \   0003A2   E0           MOVX      A,@DPTR
   \   0003A3   FD           MOV       R5,A
   \   0003A4   EE           MOV       A,R6
   \   0003A5   FA           MOV       R2,A
   \   0003A6   EF           MOV       A,R7
   \   0003A7   FB           MOV       R3,A
   \   0003A8   A9..         MOV       R1,?V6
   \   0003AA   12....       LCALL     `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   \   0003AD   8008         SJMP      ??osal_nv_write_18
   1385                    }
   1386                  }
   1387                  else
   1388                  {
   1389                    rtrn = NV_OPER_FAILED;
   \                     ??osal_nv_write_15:
   \   0003AF   75..0A       MOV       ?V7,#0xa
   \   0003B2   8003         SJMP      ??osal_nv_write_18
   1390                  }
   1391                }
   1392                else
   1393                {
   1394                  rtrn = NV_OPER_FAILED;
   \                     ??osal_nv_write_9:
   \   0003B4   75..0A       MOV       ?V7,#0xa
   1395                }
   1396          
   1397                if ( comPg != OSAL_NV_PAGE_NULL )
   \                     ??osal_nv_write_18:
   \   0003B7   85..82       MOV       DPL,?XSP + 0
   \   0003BA   85..83       MOV       DPH,?XSP + 1
   \   0003BD   E0           MOVX      A,@DPTR
   \   0003BE   603B         JZ        ??osal_nv_write_19
   1398                {
   1399                  /* Even though the page compaction succeeded, if the new item is coming from the compacted
   1400                   * page and writing the new value failed, then the compaction must be aborted.
   1401                   */
   1402                  if ( (srcPg == comPg) && (rtrn == NV_OPER_FAILED) )
   \   0003C0   85..82       MOV       DPL,?XSP + 0
   \   0003C3   85..83       MOV       DPH,?XSP + 1
   \   0003C6   E0           MOVX      A,@DPTR
   \   0003C7   65..         XRL       A,?V12
   \   0003C9   7010         JNZ       ??osal_nv_write_20
   \   0003CB   740A         MOV       A,#0xa
   \   0003CD   65..         XRL       A,?V7
   \   0003CF   700A         JNZ       ??osal_nv_write_20
   1403                  {
   1404                    erasePage( pgRes );
   \   0003D1                ; Setup parameters for call to function erasePage
   \   0003D1   90....       MOV       DPTR,#pgRes
   \   0003D4   E0           MOVX      A,@DPTR
   \   0003D5   F9           MOV       R1,A
   \   0003D6   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
   \   0003D9   8020         SJMP      ??osal_nv_write_19
   1405                  }
   1406                  else
   1407                  {
   1408                    COMPACT_PAGE_CLEANUP( comPg );
   \                     ??osal_nv_write_20:
   \   0003DB                ; Setup parameters for call to function setPageUse
   \   0003DB   7A01         MOV       R2,#0x1
   \   0003DD   90....       MOV       DPTR,#pgRes
   \   0003E0   E0           MOVX      A,@DPTR
   \   0003E1   F9           MOV       R1,A
   \   0003E2   12....       LCALL     `??setPageUse::?relay`; Banked call to: setPageUse
   \   0003E5                ; Setup parameters for call to function erasePage
   \   0003E5   85..82       MOV       DPL,?XSP + 0
   \   0003E8   85..83       MOV       DPH,?XSP + 1
   \   0003EB   E0           MOVX      A,@DPTR
   \   0003EC   F9           MOV       R1,A
   \   0003ED   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
   \   0003F0   85..82       MOV       DPL,?XSP + 0
   \   0003F3   85..83       MOV       DPH,?XSP + 1
   \   0003F6   E0           MOVX      A,@DPTR
   \   0003F7   90....       MOV       DPTR,#pgRes
   \   0003FA   F0           MOVX      @DPTR,A
   1409                  }
   1410                }
   1411          
   1412                /* Zero of the old item must wait until after compact page cleanup has finished - if the item
   1413                 * is zeroed before and cleanup is interrupted by a power-cycle, the new item can be lost.
   1414                 */
   1415                if ( (srcPg != comPg) && (rtrn != NV_OPER_FAILED) )
   \                     ??osal_nv_write_19:
   \   0003FB   85..82       MOV       DPL,?XSP + 0
   \   0003FE   85..83       MOV       DPH,?XSP + 1
   \   000401   E0           MOVX      A,@DPTR
   \   000402   65..         XRL       A,?V12
   \   000404   6017         JZ        ??osal_nv_write_2
   \   000406   740A         MOV       A,#0xa
   \   000408   65..         XRL       A,?V7
   \   00040A   6011         JZ        ??osal_nv_write_2
   1416                {
   1417                  setItem( srcPg, origOff, eNvZero );
   \   00040C                ; Setup parameters for call to function setItem
   \   00040C   7C01         MOV       R4,#0x1
   \   00040E   7406         MOV       A,#0x6
   \   000410   12....       LCALL     ?XSTACK_DISP0_8
   \   000413   E0           MOVX      A,@DPTR
   \   000414   FA           MOV       R2,A
   \   000415   A3           INC       DPTR
   \   000416   E0           MOVX      A,@DPTR
   \   000417   FB           MOV       R3,A
   \   000418   A9..         MOV       R1,?V12
   \   00041A   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
   1418                }
   1419              }
   1420            }
   1421          
   1422            return rtrn;
   \                     ??osal_nv_write_2:
   \   00041D   A9..         MOV       R1,?V7
   \                     ??osal_nv_write_1:
   \   00041F   7412         MOV       A,#0x12
   \   000421   12....       LCALL     ?DEALLOC_XSTACK8
   \   000424   7F10         MOV       R7,#0x10
   \   000426   02....       LJMP      ?BANKED_LEAVE_XDATA
   1423          }
   1424          
   1425          /*********************************************************************
   1426           * @fn      osal_nv_read
   1427           *
   1428           * @brief   Read data from NV. This function can be used to read an entire item from NV or
   1429           *          an element of an item by indexing into the item with an offset.
   1430           *          Read data is copied into *buf.
   1431           *
   1432           * @param   id  - Valid NV item Id.
   1433           * @param   ndx - Index offset into item
   1434           * @param   len - Length of data to read.
   1435           * @param  *buf - Data is read into this buffer.
   1436           *
   1437           * @return  SUCCESS if NV data was copied to the parameter 'buf'.
   1438           *          Otherwise, NV_OPER_FAILED for failure.
   1439           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1440          uint8 osal_nv_read( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_read:
   1441          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   \   00000D   7414         MOV       A,#0x14
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F5..         MOV       ?V8,A
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F5..         MOV       ?V9,A
   \   000019   7416         MOV       A,#0x16
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V4,A
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F5..         MOV       ?V5,A
   1442            uint16 offset;
   1443            uint8 hotIdx;
   1444          
   1445            if ((hotIdx = hotItem(id)) < OSAL_NV_MAX_HOT)
   \   000025                ; Setup parameters for call to function hotItem
   \   000025   AA..         MOV       R2,?V2
   \   000027   AB..         MOV       R3,?V3
   \   000029   12....       LCALL     `??hotItem::?relay`; Banked call to: hotItem
   \   00002C   E9           MOV       A,R1
   \   00002D   F8           MOV       R0,A
   \   00002E   88..         MOV       ?V0,R0
   \   000030   E8           MOV       A,R0
   \   000031   C3           CLR       C
   \   000032   9403         SUBB      A,#0x3
   \   000034   5051         JNC       ??osal_nv_read_0
   1446            {
   1447              HalFlashRead(hotPg[hotIdx], hotOff[hotIdx]+ndx, buf, len);
   \   000036                ; Setup parameters for call to function HalFlashRead
   \   000036   78..         MOV       R0,#?V8
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   AC..         MOV       R4,?V4
   \   00003D   AD..         MOV       R5,?V5
   \   00003F   E5..         MOV       A,?V0
   \   000041   F8           MOV       R0,A
   \   000042   7900         MOV       R1,#0x0
   \   000044   E8           MOV       A,R0
   \   000045   75F002       MOV       B,#0x2
   \   000048   A4           MUL       AB
   \   000049   C8           XCH       A,R0
   \   00004A   AAF0         MOV       R2,B
   \   00004C   75F000       MOV       B,#0x0
   \   00004F   A4           MUL       AB
   \   000050   2A           ADD       A,R2
   \   000051   FA           MOV       R2,A
   \   000052   75F002       MOV       B,#0x2
   \   000055   E9           MOV       A,R1
   \   000056   A4           MUL       AB
   \   000057   2A           ADD       A,R2
   \   000058   F9           MOV       R1,A
   \   000059   74..         MOV       A,#hotOff & 0xff
   \   00005B   28           ADD       A,R0
   \   00005C   F582         MOV       DPL,A
   \   00005E   74..         MOV       A,#(hotOff >> 8) & 0xff
   \   000060   39           ADDC      A,R1
   \   000061   F583         MOV       DPH,A
   \   000063   E0           MOVX      A,@DPTR
   \   000064   2E           ADD       A,R6
   \   000065   FA           MOV       R2,A
   \   000066   A3           INC       DPTR
   \   000067   E0           MOVX      A,@DPTR
   \   000068   3F           ADDC      A,R7
   \   000069   FB           MOV       R3,A
   \   00006A   E5..         MOV       A,?V0
   \   00006C   F8           MOV       R0,A
   \   00006D   7900         MOV       R1,#0x0
   \   00006F   74..         MOV       A,#hotPg & 0xff
   \   000071   28           ADD       A,R0
   \   000072   F582         MOV       DPL,A
   \   000074   74..         MOV       A,#(hotPg >> 8) & 0xff
   \   000076   39           ADDC      A,R1
   \   000077   F583         MOV       DPH,A
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   F9           MOV       R1,A
   \   00007B   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00007E   7402         MOV       A,#0x2
   \   000080   12....       LCALL     ?DEALLOC_XSTACK8
   1448              return SUCCESS;
   \   000083   7900         MOV       R1,#0x0
   \   000085   803B         SJMP      ??osal_nv_read_1
   1449            }
   1450          
   1451            if ((offset = findItem(id)) == OSAL_NV_ITEM_NULL)
   \                     ??osal_nv_read_0:
   \   000087                ; Setup parameters for call to function findItem
   \   000087   AA..         MOV       R2,?V2
   \   000089   AB..         MOV       R3,?V3
   \   00008B   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   00008E   8A..         MOV       ?V10,R2
   \   000090   8B..         MOV       ?V11,R3
   \   000092   A8..         MOV       R0,?V10
   \   000094   A9..         MOV       R1,?V11
   \   000096   88..         MOV       ?V6,R0
   \   000098   89..         MOV       ?V7,R1
   \   00009A   E8           MOV       A,R0
   \   00009B   49           ORL       A,R1
   \   00009C   7004         JNZ       ??osal_nv_read_2
   1452            {
   1453              return NV_OPER_FAILED;
   \   00009E   790A         MOV       R1,#0xa
   \   0000A0   8020         SJMP      ??osal_nv_read_1
   1454            }
   1455            else
   1456            {
   1457              HalFlashRead(findPg, offset+ndx, buf, len);
   \                     ??osal_nv_read_2:
   \   0000A2                ; Setup parameters for call to function HalFlashRead
   \   0000A2   78..         MOV       R0,#?V8
   \   0000A4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A7   AC..         MOV       R4,?V4
   \   0000A9   AD..         MOV       R5,?V5
   \   0000AB   E5..         MOV       A,?V6
   \   0000AD   2E           ADD       A,R6
   \   0000AE   FA           MOV       R2,A
   \   0000AF   E5..         MOV       A,?V7
   \   0000B1   3F           ADDC      A,R7
   \   0000B2   FB           MOV       R3,A
   \   0000B3   90....       MOV       DPTR,#findPg
   \   0000B6   E0           MOVX      A,@DPTR
   \   0000B7   F9           MOV       R1,A
   \   0000B8   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   0000BB   7402         MOV       A,#0x2
   \   0000BD   12....       LCALL     ?DEALLOC_XSTACK8
   1458              return SUCCESS;
   \   0000C0   7900         MOV       R1,#0x0
   \                     ??osal_nv_read_1:
   \   0000C2   7F0C         MOV       R7,#0xc
   \   0000C4   02....       LJMP      ?BANKED_LEAVE_XDATA
   1459            }
   1460          }
   1461          
   1462          /*********************************************************************
   1463           * @fn      osal_nv_delete
   1464           *
   1465           * @brief   Delete item from NV. This function will fail if the length
   1466           *          parameter does not match the length of the item in NV.
   1467           *
   1468           * @param   id  - Valid NV item Id.
   1469           * @param   len - Length of item to delete.
   1470           *
   1471           * @return  SUCCESS if item was deleted,
   1472           *          NV_ITEM_UNINIT if item did not exist in NV,
   1473           *          NV_BAD_ITEM_LEN if length parameter not correct,
   1474           *          NV_OPER_FAILED if attempted deletion failed.
   1475           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1476          uint8 osal_nv_delete( uint16 id, uint16 len )
   \                     osal_nv_delete:
   1477          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   1478            uint16 length;
   1479            uint16 offset;
   1480          
   1481            offset = findItem( id );
   \   00000D                ; Setup parameters for call to function findItem
   \   00000D   EE           MOV       A,R6
   \   00000E   FA           MOV       R2,A
   \   00000F   EF           MOV       A,R7
   \   000010   FB           MOV       R3,A
   \   000011   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   000014   8A..         MOV       ?V6,R2
   \   000016   8B..         MOV       ?V7,R3
   \   000018   85....       MOV       ?V4,?V6
   \   00001B   85....       MOV       ?V5,?V7
   1482            if ( offset == OSAL_NV_ITEM_NULL )
   \   00001E   E5..         MOV       A,?V4
   \   000020   45..         ORL       A,?V5
   \   000022   7004         JNZ       ??osal_nv_delete_0
   1483            {
   1484              // NV item does not exist
   1485              return NV_ITEM_UNINIT;
   \   000024   7909         MOV       R1,#0x9
   \   000026   804C         SJMP      ??osal_nv_delete_1
   1486            }
   1487          
   1488            length = osal_nv_item_len( id );
   \                     ??osal_nv_delete_0:
   \   000028                ; Setup parameters for call to function osal_nv_item_len
   \   000028   EE           MOV       A,R6
   \   000029   FA           MOV       R2,A
   \   00002A   EF           MOV       A,R7
   \   00002B   FB           MOV       R3,A
   \   00002C   12....       LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   00002F   8A..         MOV       ?V6,R2
   \   000031   8B..         MOV       ?V7,R3
   \   000033   85....       MOV       ?V0,?V6
   \   000036   85....       MOV       ?V1,?V7
   1489            if ( length != len )
   \   000039   E5..         MOV       A,?V2
   \   00003B   65..         XRL       A,?V0
   \   00003D   7004         JNZ       ??osal_nv_delete_2
   \   00003F   E5..         MOV       A,?V3
   \   000041   65..         XRL       A,?V1
   \                     ??osal_nv_delete_2:
   \   000043   6004         JZ        ??osal_nv_delete_3
   1490            {
   1491              // NV item has different length
   1492              return NV_BAD_ITEM_LEN;
   \   000045   790C         MOV       R1,#0xc
   \   000047   802B         SJMP      ??osal_nv_delete_1
   1493            }
   1494          
   1495            // Set item header ID to zero to 'delete' the item
   1496            setItem( findPg, offset, eNvZero );
   \                     ??osal_nv_delete_3:
   \   000049                ; Setup parameters for call to function setItem
   \   000049   7C01         MOV       R4,#0x1
   \   00004B   AA..         MOV       R2,?V4
   \   00004D   AB..         MOV       R3,?V5
   \   00004F   90....       MOV       DPTR,#findPg
   \   000052   E0           MOVX      A,@DPTR
   \   000053   F9           MOV       R1,A
   \   000054   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
   1497          
   1498            // Verify that item has been removed
   1499            offset = findItem( id );
   \   000057                ; Setup parameters for call to function findItem
   \   000057   EE           MOV       A,R6
   \   000058   FA           MOV       R2,A
   \   000059   EF           MOV       A,R7
   \   00005A   FB           MOV       R3,A
   \   00005B   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   00005E   8A..         MOV       ?V6,R2
   \   000060   8B..         MOV       ?V7,R3
   \   000062   85....       MOV       ?V4,?V6
   \   000065   85....       MOV       ?V5,?V7
   1500            if ( offset != OSAL_NV_ITEM_NULL )
   \   000068   E5..         MOV       A,?V4
   \   00006A   45..         ORL       A,?V5
   \   00006C   6004         JZ        ??osal_nv_delete_4
   1501            {
   1502              // Still there
   1503              return NV_OPER_FAILED;
   \   00006E   790A         MOV       R1,#0xa
   \   000070   8002         SJMP      ??osal_nv_delete_1
   1504            }
   1505            else
   1506            {
   1507              // Yes, it's gone
   1508              return SUCCESS;
   \                     ??osal_nv_delete_4:
   \   000072   7900         MOV       R1,#0x0
   \                     ??osal_nv_delete_1:
   \   000074   7F08         MOV       R7,#0x8
   \   000076   02....       LJMP      ?BANKED_LEAVE_XDATA
   1509            }
   1510          }
   1511          
   1512          /*********************************************************************
   1513           */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     37   calcChkB
      0     64   calcChkF
        0     22   -> HalFlashRead
      0     59   compactPage
        0     29   -> HalFlashRead
        0     27   -> calcChkF
        0     27   -> erasePage
        0     27   -> hotItemUpdate
        0     27   -> setChk
        0     27   -> setItem
        0     27   -> setPageUse
        0     30   -> writeItem
        0     31   -> xferBuf
      0     51   erasePage
        0      9   -> HalFlashErase
      0     56   findItem
        0     14   -> findItem
        0     14   -> initPage
      2     22   hotItem
      1     53   hotItemUpdate
        0     11   -> hotItem
      1     75   initItem
        0     30   -> HalFlashRead
        0     28   -> compactPage
        0     28   -> erasePage
        0     28   -> setPageUse
        0     31   -> writeItem
        0     28   -> writeWordH
      2     31   initNV
        0     22   -> HalFlashRead
        0     20   -> compactPage
        0     20   -> erasePage
        0     20   -> initPage
        0     20   -> setPageUse
      0     50   initPage
        0     30   -> HalFlashRead
        0     28   -> calcChkF
        0     28   -> findItem
        0     28   -> setItem
      0     16   osal_nv_delete
        0     16   -> findItem
        0     16   -> osal_nv_item_len
        0     16   -> setItem
      0      9   osal_nv_init
        0      9   -> initNV
      0     20   osal_nv_item_init
        0     16   -> OnBoard_CheckVoltage
        0     16   -> findItem
        0     16   -> hotItem
        0     16   -> hotItemUpdate
        0     18   -> initItem
      0     40   osal_nv_item_len
        0     24   -> HalFlashRead
        0     22   -> findItem
        0     22   -> hotItem
      0     26   osal_nv_read
        0     22   -> HalFlashRead
        0     20   -> findItem
        0     20   -> hotItem
      0     50   osal_nv_write
        0     44   -> HalFlashRead
        0     42   -> OnBoard_CheckVoltage
        0     42   -> calcChkF
        0     42   -> erasePage
        0     42   -> findItem
        0     42   -> hotItemUpdate
        0     44   -> initItem
        0     42   -> setChk
        0     42   -> setItem
        0     42   -> setPageUse
        0     44   -> writeBuf
        0     46   -> xferBuf
      0     58   setChk
        0     16   -> HalFlashRead
        0     14   -> writeWordH
      0     64   setItem
        0     22   -> HalFlashRead
        0     20   -> writeWord
      0     59   setPageUse
        0     17   -> writeWord
      1     68   writeBuf
        0     24   -> HalFlashRead
        0     22   -> writeWord
        0     24   -> writeWordM
      0     61   writeItem
        0     30   -> HalFlashRead
        0     28   -> calcChkB
        0     28   -> calcChkF
        0     28   -> hotItemUpdate
        0     28   -> setChk
        0     30   -> writeBuf
        0     28   -> writeWord
      0     44   writeWord
        0     16   -> HalFlashWrite
      1     43   writeWordH
        0     15   -> writeWord
      0     39   writeWordM
        0     15   -> HalFlashWrite
      0     71   xferBuf
        0     25   -> HalFlashRead
        0     23   -> writeWord


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
   12288  _nvBuf
     135  calcChkB
     167  calcChkF
     769  compactPage
     101  erasePage
     102  findItem
       1  findPg
       6  hotIds
      66  hotItem
      98  hotItemUpdate
       6  hotOff
       3  hotPg
     564  initItem
     451  initNV
     633  initPage
     121  osal_nv_delete
      18  osal_nv_init
     128  osal_nv_item_init
     180  osal_nv_item_len
     199  osal_nv_read
    1065  osal_nv_write
      12  pgLost
      12  pgOff
       1  pgRes
      99  setChk
     235  setItem
      79  setPageUse
     445  writeBuf
     731  writeItem
      90  writeWord
      95  writeWordH
      96  writeWordM
     431  xferBuf
     150  -- Other

 
  7 098 bytes in segment BANKED_CODE
    150 bytes in segment BANK_RELAYS
      6 bytes in segment XDATA_ROM_C
     35 bytes in segment XDATA_Z
 12 288 bytes in segment ZIGNV_ADDRESS_SPACE
 
    150 bytes of CODE     memory
      6 bytes of CONST    memory
  7 098 bytes of HUGECODE memory
 12 323 bytes of XDATA    memory

Errors: none
Warnings: none
