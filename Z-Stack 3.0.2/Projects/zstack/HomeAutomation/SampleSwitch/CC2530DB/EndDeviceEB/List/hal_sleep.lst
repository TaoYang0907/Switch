###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               31/Jul/2020  18:41:09
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack 3.0.2\Components\hal\target\CC2530EB\hal_sleep.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW97CF.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\hal\target\CC2530EB\hal_sleep.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D POWER_SAVING -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_GROUPS -D BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=0
#        -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0 -DREJOIN_POLL_RATE=0
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\hal_sleep.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\hal_sleep.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\hal\target\CC2530EB\hal_sleep.c
      1          /**************************************************************************************
      2            Filename:       hal_sleep.c
      3            Revised:        $Date: 2014-12-19 13:07:30 -0800 (Fri, 19 Dec 2014) $
      4            Revision:       $Revision: 41556 $
      5          
      6            Description:    This module contains the HAL power management procedures for the CC2530.
      7          
      8          
      9            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          #include "hal_types.h"
     45          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0x87
   \   unsigned char volatile __sfr PCON
   \                     PCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x95
   \   unsigned char volatile __sfr ST0
   \                     ST0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x96
   \   unsigned char volatile __sfr ST1
   \                     ST1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x97
   \   unsigned char volatile __sfr ST2
   \                     ST2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9a
   \   unsigned char volatile __sfr IEN2
   \                     IEN2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xad
   \   unsigned char volatile __sfr STLOAD
   \                     STLOAD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb8
   \   union <unnamed> volatile __sfr _A_IEN1
   \                     _A_IEN1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc0
   \   union <unnamed> volatile __sfr _A_IRCON
   \                     _A_IRCON:
   \   000000                DS 1
     46          #include "hal_board.h"
     47          #include "hal_sleep.h"
     48          #include "hal_led.h"
     49          #include "hal_key.h"
     50          #include "mac_api.h"
     51          #include "OSAL.h"
     52          #include "OSAL_Timers.h"
     53          #include "OSAL_Tasks.h"
     54          #include "OSAL_PwrMgr.h"
     55          #include "OnBoard.h"
     56          #include "hal_drivers.h"
     57          #include "hal_assert.h"
     58          #include "mac_mcu.h"
     59          
     60          #ifndef ZG_BUILD_ENDDEVICE_TYPE
     61          # define ZG_BUILD_ENDDEVICE_TYPE FALSE
     62          #endif
     63          
     64          #if ZG_BUILD_ENDDEVICE_TYPE && defined (NWK_AUTO_POLL)
     65          #include "nwk_globals.h"
     66          #include "ZGlobals.h"
     67          #endif
     68          
     69          /* ------------------------------------------------------------------------------------------------
     70           *                                           Macros
     71           * ------------------------------------------------------------------------------------------------
     72           */
     73          
     74          /* POWER CONSERVATION DEFINITIONS
     75           * Sleep mode H/W definitions (enabled with POWER_SAVING compile option)
     76           */
     77          #define CC2530_PM0            0  /* PM0, Clock oscillators on, voltage regulator on */
     78          #define CC2530_PM1            1  /* PM1, 32.768 kHz oscillators on, voltage regulator on */
     79          #define CC2530_PM2            2  /* PM2, 32.768 kHz oscillators on, voltage regulator off */
     80          #define CC2530_PM3            3  /* PM3, All clock oscillators off, voltage regulator off */
     81          
     82          /* HAL power management mode is set according to the power management state. The default
     83           * setting is HAL_SLEEP_OFF. The actual value is tailored to different HW platform. Both
     84           * HAL_SLEEP_TIMER and HAL_SLEEP_DEEP selections will:
     85           *   1. turn off the system clock, and
     86           *   2. halt the MCU.
     87           * HAL_SLEEP_TIMER can be woken up by sleep timer interrupt, I/O interrupt and reset.
     88           * HAL_SLEEP_DEEP can be woken up by I/O interrupt and reset.
     89           */
     90          #define HAL_SLEEP_OFF         CC2530_PM0
     91          #define HAL_SLEEP_TIMER       CC2530_PM2
     92          #define HAL_SLEEP_DEEP        CC2530_PM3
     93          
     94          /* MAX_SLEEP_TIME calculation:
     95           *   Sleep timer maximum duration = 0xFFFF7F / 32768 Hz = 511.996 seconds
     96           *   Round it to 510 seconds or 510000 ms
     97           */
     98          #define MAX_SLEEP_TIME                   510000             /* maximum time to sleep allowed by ST */
     99          
    100          /* 
    101           * Choosing value to be lower than MAC_BACKOFF_TIMER_DEFAULT_NONBEACON_ROLLOVER
    102           *  The unit is in ms. The back off timer rollover should be greater 
    103           * than the value below
    104           */ 
    105          #define MAX_SLEEP_LOOP_TIME              0x510000           /* ~84 minutes */ 
    106          #define TICKS_SUBTRACTED                 2
    107          
    108          /* minimum time to sleep, this macro is to:
    109           * 1. avoid thrashing in-and-out of sleep with short OSAL timer (~2ms)
    110           * 2. define minimum safe sleep period
    111           */
    112          #if !defined (PM_MIN_SLEEP_TIME)
    113          #define PM_MIN_SLEEP_TIME                2                  /* default to minimum safe sleep time minimum CAP */
    114          #endif
    115          
    116          /* The PCON instruction must be 4-byte aligned. The following code may cause excessive power
    117           * consumption if not aligned. See linker file ".xcl" for actual placement.
    118           */
    119          #pragma location = "SLEEP_CODE"
    120          void halSetSleepMode(void);
    121          
    122          /* This value is used to adjust the sleep timer compare value such that the sleep timer
    123           * compare takes into account the amount of processing time spent in function halSleep().
    124           * The first value is determined by measuring the number of sleep timer ticks it from
    125           * the beginning of the function to entering sleep mode or more precisely, when
    126           * MAC_PwrNextTimeout() is called.  The second value is determined by measuring the number
    127           * of sleep timer ticks from exit of sleep mode to the call to MAC_PwrOnReq() where the
    128           * MAC timer is restarted.
    129           */
    130          #define HAL_SLEEP_ADJ_TICKS   (11 + 12)
    131          
    132          #ifndef HAL_SLEEP_DEBUG_POWER_MODE
    133          /* set CC2530 power mode; always use PM2 */
    134          #define HAL_SLEEP_PREP_POWER_MODE(mode)     st( SLEEPCMD &= ~PMODE; /* clear mode bits */    \
    135                                                          SLEEPCMD |= mode;   /* set mode bits   */    \
    136                                                          while (!(STLOAD & LDRDY));                   \
    137                                                          halSleepPconValue = PCON_IDLE;               \
    138                                                        )
    139          #define HAL_SLEEP_SET_POWER_MODE()          halSetSleepMode()
    140          #else
    141          /* Debug: don't set power mode, just block until sleep timer interrupt */
    142          #define HAL_SLEEP_PREP_POWER_MODE(mode)     /* nothing */
    143          #define HAL_SLEEP_SET_POWER_MODE()          st( while(halSleepInt == FALSE); \
    144                                                          halSleepInt = FALSE;         \
    145                                                          HAL_DISABLE_INTERRUPTS();    \
    146                                                        )
    147          #endif
    148          
    149          /* sleep and external interrupt port masks */
    150          #define STIE_BV                             BV(5)
    151          #define P0IE_BV                             BV(5)
    152          #define P1IE_BV                             BV(4)
    153          #define P2IE_BV                             BV(1)
    154          
    155          /* sleep timer interrupt control */
    156          #define HAL_SLEEP_TIMER_ENABLE_INT()        st(IEN0 |= STIE_BV;)     /* enable sleep timer interrupt */
    157          #define HAL_SLEEP_TIMER_DISABLE_INT()       st(IEN0 &= ~STIE_BV;)    /* disable sleep timer interrupt */
    158          #define HAL_SLEEP_TIMER_CLEAR_INT()         st(STIF = 0;)            /* clear sleep interrupt flag */
    159          
    160          /* backup interrupt enable registers before sleep */
    161          #define HAL_SLEEP_IE_BACKUP_AND_DISABLE(ien0, ien1, ien2) st(ien0  = IEN0;    /* backup IEN0 register */ \
    162                                                                       ien1  = IEN1;    /* backup IEN1 register */ \
    163                                                                       ien2  = IEN2;    /* backup IEN2 register */ \
    164                                                                       IEN0 &= STIE_BV; /* disable IEN0 except STIE */ \
    165                                                                       IEN1 &= P0IE_BV; /* disable IEN1 except P0IE */ \
    166                                                                       IEN2 &= (P1IE_BV|P2IE_BV);) /* disable IEN2 except P1IE, P2IE */
    167          
    168          /* restore interrupt enable registers before sleep */
    169          #define HAL_SLEEP_IE_RESTORE(ien0, ien1, ien2) st(IEN0 = ien0;   /* restore IEN0 register */ \
    170                                                            IEN1 = ien1;   /* restore IEN1 register */ \
    171                                                            IEN2 = ien2;)  /* restore IEN2 register */
    172          
    173          /* convert msec to 320 usec units with round */
    174          #define HAL_SLEEP_MS_TO_320US(ms)           (((((uint32) (ms)) * 100) + 31) / 32)
    175          
    176          /* for optimized indexing of uint32's */
    177          #if HAL_MCU_LITTLE_ENDIAN()
    178          #define UINT32_NDX0   0
    179          #define UINT32_NDX1   1
    180          #define UINT32_NDX2   2
    181          #define UINT32_NDX3   3
    182          #else
    183          #define UINT32_NDX0   3
    184          #define UINT32_NDX1   2
    185          #define UINT32_NDX2   1
    186          #define UINT32_NDX3   0
    187          #endif
    188          
    189          /* ------------------------------------------------------------------------------------------------
    190           *                                        Global Variables
    191           * ------------------------------------------------------------------------------------------------
    192           */
    193          /* PCON register value to program when setting power mode */

   \                                 In  segment DATA_I, align 1, keep-with-next
    194          volatile __data uint8 halSleepPconValue = PCON_IDLE;
   \                     halSleepPconValue:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for halSleepPconValue>`
   \   000001                REQUIRE __INIT_DATA_I
    195          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    196          static uint32 maxSleepLoopTime =  HAL_SLEEP_MS_TO_320US(MAX_SLEEP_LOOP_TIME);
   \                     maxSleepLoopTime:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for maxSleepLoopTime>`
   \   000004                REQUIRE __INIT_XDATA_I
    197          
    198          /* ------------------------------------------------------------------------------------------------
    199           *                                        Local Variables
    200           * ------------------------------------------------------------------------------------------------
    201           */
    202          
    203          /* HAL power management mode is set according to the power management state.
    204           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    205          static uint8 halPwrMgtMode = HAL_SLEEP_OFF;
   \                     halPwrMgtMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    206          
    207          #ifdef HAL_SLEEP_DEBUG_POWER_MODE
    208          static bool halSleepInt = FALSE;
    209          #endif
    210          
    211          /* ------------------------------------------------------------------------------------------------
    212           *                                      Function Prototypes
    213           * ------------------------------------------------------------------------------------------------
    214           */
    215          
    216          void halSleepSetTimer(uint32 timeout);
    217          
    218          /**************************************************************************************************
    219           * @fn          halSetSleepMode
    220           *
    221           * @brief       This function put the CC2530 to sleep. The PCON instruction must be 4-byte aligned.
    222           *              The following code may cause excessive power consumption if not aligned. See linker
    223           *              file ".xcl" for actual placement.
    224           *
    225           * input parameters
    226           *
    227           * @param       None.
    228           *
    229           * output parameters
    230           *
    231           * None.
    232           *
    233           * @return      None.
    234           **************************************************************************************************
    235           */

   \                                 In  segment SLEEP_CODE, align 1, keep-with-next
    236          void halSetSleepMode(void)
   \                     halSetSleepMode:
    237          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    238            //PCON = halSleepPconValue;
    239            PCON = CC2530_PM3;
   \   000000   758703       MOV       0x87,#0x3
    240            HAL_DISABLE_INTERRUPTS();
   \   000003   C2AF         CLR       0xa8.7
    241          }
   \   000005   02....       LJMP      ?BRET
   \   000008                REQUIRE PCON
   \   000008                REQUIRE _A_IEN0
    242          
    243          /**************************************************************************************************
    244           * @fn          halSetMaxSleepLoopTime
    245           *
    246           * @brief       This function is to used to setup the maximum sleep loop time. This sleep loop time
    247           *              should be lesser than T2 rollover so that a maximum of only one rollover occurs
    248           *              when cc2530 is in sleep. This function should be called whenever rolloverTime is
    249           *              changed using the function macBackoffTimerSetRollover(macTimerRollover);
    250           *
    251           * input parameters
    252           *
    253           * @param       rolloverTime.
    254           *
    255           * output parameters
    256           *
    257           * None.
    258           *
    259           * @return      None.
    260           **************************************************************************************************
    261           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    262          void halSetMaxSleepLoopTime(uint32 rolloverTime)
   \                     halSetMaxSleepLoopTime:
    263          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
    264            if( rolloverTime > HAL_SLEEP_MS_TO_320US(MAX_SLEEP_TIME) )
   \   00000D   90....       MOV       DPTR,#__Constant_185197
   \   000010   78..         MOV       R0,#?V0
   \   000012   12....       LCALL     ?UL_GE_X
   \   000015   5010         JNC       ??halSetMaxSleepLoopTime_0
    265            {
    266              rolloverTime = HAL_SLEEP_MS_TO_320US(MAX_SLEEP_TIME);
   \   000017   7896         MOV       R0,#-0x6a
   \   000019   7951         MOV       R1,#0x51
   \   00001B   7A18         MOV       R2,#0x18
   \   00001D   7B00         MOV       R3,#0x0
   \   00001F   88..         MOV       ?V0,R0
   \   000021   89..         MOV       ?V1,R1
   \   000023   8A..         MOV       ?V2,R2
   \   000025   8B..         MOV       ?V3,R3
    267            }
    268            maxSleepLoopTime = (rolloverTime - TICKS_SUBTRACTED);
   \                     ??halSetMaxSleepLoopTime_0:
   \   000027   85....       MOV       ?V4,?V0
   \   00002A   85....       MOV       ?V5,?V1
   \   00002D   85....       MOV       ?V6,?V2
   \   000030   85....       MOV       ?V7,?V3
   \   000033   90....       MOV       DPTR,#__Constant_fffffffe
   \   000036   78..         MOV       R0,#?V4
   \   000038   12....       LCALL     ?L_ADD_X
   \   00003B   90....       MOV       DPTR,#maxSleepLoopTime
   \   00003E   78..         MOV       R0,#?V4
   \   000040   12....       LCALL     ?L_MOV_TO_X
    269          }
   \   000043   7F08         MOV       R7,#0x8
   \   000045   02....       LJMP      ?BANKED_LEAVE_XDATA
    270          
    271          /**************************************************************************************************
    272           * @fn          halSleep
    273           *
    274           * @brief       This function is called from the OSAL task loop using and existing OSAL
    275           *              interface.  It sets the low power mode of the MAC and the CC2530.
    276           *
    277           * input parameters
    278           *
    279           * @param       osal_timeout - Next OSAL timer timeout.
    280           *
    281           * output parameters
    282           *
    283           * None.
    284           *
    285           * @return      None.
    286           **************************************************************************************************
    287           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    288          void halSleep( uint32 osal_timeout )
   \                     halSleep:
    289          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EA           MOV       A,R2
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   EB           MOV       A,R3
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   EC           MOV       A,R4
   \   000017   F0           MOVX      @DPTR,A
   \   000018   A3           INC       DPTR
   \   000019   ED           MOV       A,R5
   \   00001A   F0           MOVX      @DPTR,A
    290            uint32        timeout;
    291            uint32        macTimeout = 0;
   \   00001B   75..00       MOV       ?V8,#0x0
   \   00001E   75..00       MOV       ?V9,#0x0
   \   000021   75..00       MOV       ?V10,#0x0
   \   000024   75..00       MOV       ?V11,#0x0
    292          
    293            /* get next OSAL timer expiration converted to 320 usec units */
    294            timeout = HAL_SLEEP_MS_TO_320US(osal_timeout);
   \   000027   85..82       MOV       DPL,?XSP + 0
   \   00002A   85..83       MOV       DPH,?XSP + 1
   \   00002D   78..         MOV       R0,#?V0
   \   00002F   12....       LCALL     ?L_MOV_X
   \   000032   90....       MOV       DPTR,#__Constant_64
   \   000035   78..         MOV       R0,#?V12
   \   000037   12....       LCALL     ?L_MOV_X
   \   00003A   78..         MOV       R0,#?V0
   \   00003C   79..         MOV       R1,#?V12
   \   00003E   12....       LCALL     ?L_MUL
   \   000041   90....       MOV       DPTR,#__Constant_1f
   \   000044   78..         MOV       R0,#?V0
   \   000046   12....       LCALL     ?L_ADD_X
   \   000049   7405         MOV       A,#0x5
   \   00004B   78..         MOV       R0,#?V0
   \   00004D   12....       LCALL     ?UL_SHR
   \   000050   85....       MOV       ?V4,?V0
   \   000053   85....       MOV       ?V5,?V1
   \   000056   85....       MOV       ?V6,?V2
   \   000059   85....       MOV       ?V7,?V3
    295            if (timeout == 0)
   \   00005C   E5..         MOV       A,?V4
   \   00005E   45..         ORL       A,?V5
   \   000060   45..         ORL       A,?V6
   \   000062   45..         ORL       A,?V7
   \   000064   7019         JNZ       ??halSleep_0
    296            {
    297              timeout = MAC_PwrNextTimeout();
   \   000066                ; Setup parameters for call to function MAC_PwrNextTimeout
   \   000066   12....       LCALL     `??MAC_PwrNextTimeout::?relay`; Banked call to: MAC_PwrNextTimeout
   \   000069   8A..         MOV       ?V0,R2
   \   00006B   8B..         MOV       ?V1,R3
   \   00006D   8C..         MOV       ?V2,R4
   \   00006F   8D..         MOV       ?V3,R5
   \   000071   85....       MOV       ?V4,?V0
   \   000074   85....       MOV       ?V5,?V1
   \   000077   85....       MOV       ?V6,?V2
   \   00007A   85....       MOV       ?V7,?V3
   \   00007D   8036         SJMP      ??halSleep_1
    298            }
    299            else
    300            {
    301              /* get next MAC timer expiration */
    302              macTimeout = MAC_PwrNextTimeout();
   \                     ??halSleep_0:
   \   00007F                ; Setup parameters for call to function MAC_PwrNextTimeout
   \   00007F   12....       LCALL     `??MAC_PwrNextTimeout::?relay`; Banked call to: MAC_PwrNextTimeout
   \   000082   8A..         MOV       ?V0,R2
   \   000084   8B..         MOV       ?V1,R3
   \   000086   8C..         MOV       ?V2,R4
   \   000088   8D..         MOV       ?V3,R5
   \   00008A   85....       MOV       ?V8,?V0
   \   00008D   85....       MOV       ?V9,?V1
   \   000090   85....       MOV       ?V10,?V2
   \   000093   85....       MOV       ?V11,?V3
    303          
    304              /* get lesser of two timeouts */
    305              if ((macTimeout != 0) && (macTimeout < timeout))
   \   000096   E5..         MOV       A,?V8
   \   000098   45..         ORL       A,?V9
   \   00009A   45..         ORL       A,?V10
   \   00009C   45..         ORL       A,?V11
   \   00009E   6015         JZ        ??halSleep_1
   \   0000A0   78..         MOV       R0,#?V4
   \   0000A2   79..         MOV       R1,#?V8
   \   0000A4   12....       LCALL     ?UL_GT
   \   0000A7   500C         JNC       ??halSleep_1
    306              {
    307                timeout = macTimeout;
   \   0000A9   85....       MOV       ?V4,?V8
   \   0000AC   85....       MOV       ?V5,?V9
   \   0000AF   85....       MOV       ?V6,?V10
   \   0000B2   85....       MOV       ?V7,?V11
    308              }
    309            }
    310          
    311            /* HAL_SLEEP_PM2 is entered only if the timeout is zero and
    312             * the device is a stimulated device.
    313             */
    314            halPwrMgtMode = (timeout == 0) ? HAL_SLEEP_DEEP : HAL_SLEEP_TIMER;
   \                     ??halSleep_1:
   \   0000B5   E5..         MOV       A,?V4
   \   0000B7   45..         ORL       A,?V5
   \   0000B9   45..         ORL       A,?V6
   \   0000BB   45..         ORL       A,?V7
   \   0000BD   7008         JNZ       ??halSleep_2
   \   0000BF   90....       MOV       DPTR,#halPwrMgtMode
   \   0000C2   7403         MOV       A,#0x3
   \   0000C4   F0           MOVX      @DPTR,A
   \   0000C5   8006         SJMP      ??halSleep_3
   \                     ??halSleep_2:
   \   0000C7   90....       MOV       DPTR,#halPwrMgtMode
   \   0000CA   7402         MOV       A,#0x2
   \   0000CC   F0           MOVX      @DPTR,A
    315          
    316            /* DEEP sleep can only be entered when zgPollRate == 0.
    317             * This is to eliminate any possibility of entering PM3 between
    318             * two network timers.
    319             */
    320          #if ZG_BUILD_ENDDEVICE_TYPE && defined (NWK_AUTO_POLL)
    321            if ((timeout > HAL_SLEEP_MS_TO_320US(PM_MIN_SLEEP_TIME)) ||
    322                (timeout == 0 && zgPollRate == 0))
    323          #else
    324            if ((timeout > HAL_SLEEP_MS_TO_320US(PM_MIN_SLEEP_TIME)) ||
    325                (timeout == 0))
   \                     ??halSleep_3:
   \   0000CD   90....       MOV       DPTR,#__Constant_8
   \   0000D0   78..         MOV       R0,#?V4
   \   0000D2   12....       LCALL     ?UL_GE_X
   \   0000D5   400D         JC        ??halSleep_4
   \   0000D7   E5..         MOV       A,?V4
   \   0000D9   45..         ORL       A,?V5
   \   0000DB   45..         ORL       A,?V6
   \   0000DD   45..         ORL       A,?V7
   \   0000DF   6003         JZ        $+5
   \   0000E1   02....       LJMP      ??halSleep_5 & 0xFFFF
    326          #endif
    327            {
    328              halIntState_t ien0, ien1, ien2;
    329          
    330              HAL_ASSERT(HAL_INTERRUPTS_ARE_ENABLED());
   \                     ??halSleep_4:
   \   0000E4   A2AF         MOV       C,0xa8.7
   \   0000E6   4003         JC        ??halSleep_6
   \   0000E8                ; Setup parameters for call to function halAssertHandler
   \   0000E8   12....       LCALL     `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    331              HAL_DISABLE_INTERRUPTS();
   \                     ??halSleep_6:
   \   0000EB   C2AF         CLR       0xa8.7
    332          
    333              /* always use "deep sleep" to turn off radio VREG on CC2530 */
    334              if (halSleepPconValue != 0 && MAC_PwrOffReq(MAC_PWR_SLEEP_DEEP) == MAC_SUCCESS)
   \   0000ED   E5..         MOV       A,halSleepPconValue
   \   0000EF   7003         JNZ       $+5
   \   0000F1   02....       LJMP      ??halSleep_7 & 0xFFFF
   \   0000F4                ; Setup parameters for call to function MAC_PwrOffReq
   \   0000F4   7902         MOV       R1,#0x2
   \   0000F6   12....       LCALL     `??MAC_PwrOffReq::?relay`; Banked call to: MAC_PwrOffReq
   \   0000F9   E9           MOV       A,R1
   \   0000FA   6003         JZ        $+5
   \   0000FC   02....       LJMP      ??halSleep_7 & 0xFFFF
    335              {
    336                /* The PCON value is not zero. There is no interrupt overriding the 
    337                 * sleep decision. Also, the radio granted the sleep request.
    338                 */
    339          
    340          #if ((defined HAL_KEY) && (HAL_KEY == TRUE))
    341                /* get peripherals ready for sleep */
    342                HalKeyEnterSleep();
   \   0000FF                ; Setup parameters for call to function HalKeyEnterSleep
   \   0000FF   12....       LCALL     `??HalKeyEnterSleep::?relay`; Banked call to: HalKeyEnterSleep
    343          #endif
    344          
    345          #ifdef HAL_SLEEP_DEBUG_LED
    346                HAL_TURN_OFF_LED3();
    347          #else
    348                /* use this to turn LEDs off during sleep */
    349                HalLedEnterSleep();
   \   000102                ; Setup parameters for call to function HalLedEnterSleep
   \   000102   12....       LCALL     `??HalLedEnterSleep::?relay`; Banked call to: HalLedEnterSleep
    350          #endif
    351                
    352                if(timeout > maxSleepLoopTime)
   \   000105   90....       MOV       DPTR,#maxSleepLoopTime
   \   000108   78..         MOV       R0,#?V4
   \   00010A   12....       LCALL     ?UL_GT_X
   \   00010D   5014         JNC       ??halSleep_8
    353                {
    354                  timeout = maxSleepLoopTime;
   \   00010F   90....       MOV       DPTR,#maxSleepLoopTime
   \   000112   78..         MOV       R0,#?V0
   \   000114   12....       LCALL     ?L_MOV_X
   \   000117   85....       MOV       ?V4,?V0
   \   00011A   85....       MOV       ?V5,?V1
   \   00011D   85....       MOV       ?V6,?V2
   \   000120   85....       MOV       ?V7,?V3
    355                }  
    356                
    357                do
    358                {
    359                  /* enable sleep timer interrupt */
    360                  if(timeout != 0)
   \                     ??halSleep_8:
   \   000123   E5..         MOV       A,?V4
   \   000125   45..         ORL       A,?V5
   \   000127   45..         ORL       A,?V6
   \   000129   45..         ORL       A,?V7
   \   00012B   603C         JZ        ??halSleep_9
    361                  { 
    362                    if (timeout > HAL_SLEEP_MS_TO_320US( MAX_SLEEP_TIME ))
   \   00012D   90....       MOV       DPTR,#__Constant_185197
   \   000130   78..         MOV       R0,#?V4
   \   000132   12....       LCALL     ?UL_GE_X
   \   000135   5013         JNC       ??halSleep_10
    363                    {
    364                      timeout -= HAL_SLEEP_MS_TO_320US( MAX_SLEEP_TIME );
   \   000137   90....       MOV       DPTR,#__Constant_ffe7ae6a
   \   00013A   78..         MOV       R0,#?V4
   \   00013C   12....       LCALL     ?L_ADD_X
    365                      halSleepSetTimer(HAL_SLEEP_MS_TO_320US( MAX_SLEEP_TIME ));
   \   00013F                ; Setup parameters for call to function halSleepSetTimer
   \   00013F   90....       MOV       DPTR,#__Constant_185196
   \   000142   12....       LCALL     ?XLOAD_R2345
   \   000145   12....       LCALL     `??halSleepSetTimer::?relay`; Banked call to: halSleepSetTimer
   \   000148   801B         SJMP      ??halSleep_11
    366                    }
    367                    else
    368                    {
    369                      /* set sleep timer */
    370                      halSleepSetTimer(timeout);
   \                     ??halSleep_10:
   \   00014A                ; Setup parameters for call to function halSleepSetTimer
   \   00014A   AA..         MOV       R2,?V4
   \   00014C   AB..         MOV       R3,?V5
   \   00014E   AC..         MOV       R4,?V6
   \   000150   AD..         MOV       R5,?V7
   \   000152   12....       LCALL     `??halSleepSetTimer::?relay`; Banked call to: halSleepSetTimer
    371                      timeout = 0;
   \   000155   7800         MOV       R0,#0x0
   \   000157   7900         MOV       R1,#0x0
   \   000159   7A00         MOV       R2,#0x0
   \   00015B   7B00         MOV       R3,#0x0
   \   00015D   88..         MOV       ?V4,R0
   \   00015F   89..         MOV       ?V5,R1
   \   000161   8A..         MOV       ?V6,R2
   \   000163   8B..         MOV       ?V7,R3
    372                    }
    373                    
    374                    /* set up sleep timer interrupt */
    375                    HAL_SLEEP_TIMER_CLEAR_INT();
   \                     ??halSleep_11:
   \   000165   C2C7         CLR       0xc0.7
    376                    HAL_SLEEP_TIMER_ENABLE_INT();
   \   000167   D2AD         SETB      0xa8.5
    377                  }
    378          
    379          #ifdef HAL_SLEEP_DEBUG_LED
    380                  if (halPwrMgtMode == CC2530_PM1)
    381                  {
    382                    HAL_TURN_ON_LED1();
    383                  }
    384                  else
    385                  {
    386                    HAL_TURN_OFF_LED1();
    387                  }
    388          #endif
    389                  /* Prep CC2530 power mode */
    390                  HAL_SLEEP_PREP_POWER_MODE(halPwrMgtMode);
   \                     ??halSleep_9:
   \   000169   53BEFC       ANL       0xbe,#0xfc
   \   00016C   90....       MOV       DPTR,#halPwrMgtMode
   \   00016F   E0           MOVX      A,@DPTR
   \   000170   42BE         ORL       0xbe,A
   \                     ??halSleep_12:
   \   000172   E5AD         MOV       A,0xad
   \   000174   A2E0         MOV       C,0xE0 /* A   */.0
   \   000176   50FA         JNC       ??halSleep_12
   \   000178   75..01       MOV       halSleepPconValue,#0x1
    391          
    392                  /* save interrupt enable registers and disable all interrupts */
    393                  HAL_SLEEP_IE_BACKUP_AND_DISABLE(ien0, ien1, ien2);
   \   00017B   85A8..       MOV       ?V12,0xa8+0x0
   \   00017E   AFB8         MOV       R7,0xb8+0x0
   \   000180   AE9A         MOV       R6,0x9a+0x0
   \   000182   53A820       ANL       0xa8,#0x20
   \   000185   53B820       ANL       0xb8,#0x20
   \   000188   539A12       ANL       0x9a,#0x12
    394                  HAL_ENABLE_INTERRUPTS();
   \   00018B   D2AF         SETB      0xa8.7
    395          
    396                  /* set CC2530 power mode, interrupt is disabled after this function
    397                   * Note that an ISR (that could wake up from power mode) which runs
    398                   * between the previous instruction enabling interrupts and before
    399                   * power mode is set would switch the halSleepPconValue so that
    400                   * power mode shall not be entered in such a case. 
    401                   */
    402                  
    403                  HAL_SLEEP_SET_POWER_MODE();
   \   00018D                ; Setup parameters for call to function halSetSleepMode
   \   00018D   12....       LCALL     `??halSetSleepMode::?relay`; Banked call to: halSetSleepMode
    404                  
    405                  /* the interrupt is disabled - see halSetSleepMode() */
    406                  
    407                  /* restore interrupt enable registers */
    408                  HAL_SLEEP_IE_RESTORE(ien0, ien1, ien2);
   \   000190   85..A8       MOV       0xa8,?V12
   \   000193   8FB8         MOV       0xb8,R7
   \   000195   8E9A         MOV       0x9a,R6
    409          
    410                  /* disable sleep timer interrupt */
    411                  HAL_SLEEP_TIMER_DISABLE_INT();
   \   000197   C2AD         CLR       0xa8.5
    412          
    413          #ifdef HAL_SLEEP_DEBUG_LED
    414                  HAL_TURN_ON_LED3();
    415          #else
    416                  /* use this to turn LEDs back on after sleep */
    417                  HalLedExitSleep();
   \   000199                ; Setup parameters for call to function HalLedExitSleep
   \   000199   12....       LCALL     `??HalLedExitSleep::?relay`; Banked call to: HalLedExitSleep
    418          #endif
    419          
    420          #if ((defined HAL_KEY) && (HAL_KEY == TRUE))
    421                  /* handle peripherals */
    422                  if(HalKeyExitSleep())
   \   00019C                ; Setup parameters for call to function HalKeyExitSleep
   \   00019C   12....       LCALL     `??HalKeyExitSleep::?relay`; Banked call to: HalKeyExitSleep
   \   00019F   E9           MOV       A,R1
   \   0001A0   700D         JNZ       ??halSleep_13
    423                  {
    424                    break; 
    425                  }
    426          #endif
    427          
    428                } while(timeout != 0);
   \   0001A2   E5..         MOV       A,?V4
   \   0001A4   45..         ORL       A,?V5
   \   0001A6   45..         ORL       A,?V6
   \   0001A8   45..         ORL       A,?V7
   \   0001AA   6003         JZ        $+5
   \   0001AC   02....       LJMP      ??halSleep_8 & 0xFFFF
    429          
    430                /* power on the MAC; blocks until completion */
    431                MAC_PwrOnReq();
   \                     ??halSleep_13:
   \   0001AF                ; Setup parameters for call to function MAC_PwrOnReq
   \   0001AF   12....       LCALL     `??MAC_PwrOnReq::?relay`; Banked call to: MAC_PwrOnReq
    432          
    433                HAL_ENABLE_INTERRUPTS();
   \   0001B2   D2AF         SETB      0xa8.7
    434          
    435                /* For CC2530, T2 interrupt won’t be generated when the current count is greater than
    436                 * the comparator. The interrupt is only generated when the current count is equal to
    437                 * the comparator. When the CC2530 is waking up from sleep, there is a small window
    438                 * that the count may be grater than the comparator, therefore, missing the interrupt.
    439                 * This workaround will call the T2 ISR when the current T2 count is greater than the
    440                 * comparator. The problem only occurs when POWER_SAVING is turned on, i.e. the 32KHz
    441                 * drives the chip in sleep and SYNC start is used.
    442                 */
    443                macMcuTimer2OverflowWorkaround();
   \   0001B4                ; Setup parameters for call to function macMcuTimer2OverflowWorkaround
   \   0001B4   12....       LCALL     `??macMcuTimer2OverflowWorkaround::?relay`; Banked call to: macMcuTimer2OverflowWorkaround
   \   0001B7   8002         SJMP      ??halSleep_5
    444              }
    445              else
    446              {
    447                /* An interrupt may have changed the sleep decision. Do not sleep at all. Turn on
    448                 * the interrupt, exit normally, and the next sleep will be allowed.
    449                 */
    450                HAL_ENABLE_INTERRUPTS();
   \                     ??halSleep_7:
   \   0001B9   D2AF         SETB      0xa8.7
    451              }
    452            }
    453          }
   \                     ??halSleep_5:
   \   0001BB   7404         MOV       A,#0x4
   \   0001BD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001C0   7F10         MOV       R7,#0x10
   \   0001C2   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   0001C5                REQUIRE _A_IEN0
   \   0001C5                REQUIRE _A_IRCON
   \   0001C5                REQUIRE SLEEPCMD
   \   0001C5                REQUIRE STLOAD
   \   0001C5                REQUIRE _A_IEN1
   \   0001C5                REQUIRE IEN2
    454          
    455          /**************************************************************************************************
    456           * @fn          halSleepSetTimer
    457           *
    458           * @brief       This function sets the CC2530 sleep timer compare value.  First it reads and
    459           *              stores the value of the sleep timer; this value is used later to update OSAL
    460           *              timers.  Then the timeout value is converted from 320 usec units to 32 kHz
    461           *              period units and the compare value is set to the timeout.
    462           *
    463           * input parameters
    464           *
    465           * @param       timeout - Timeout value in 320 usec units.  The sleep timer compare is set to
    466           *                        this value.
    467           *
    468           * output parameters
    469           *
    470           * None.
    471           *
    472           * @return      None.
    473           **************************************************************************************************
    474           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    475          void halSleepSetTimer(uint32 timeout)
   \                     halSleepSetTimer:
    476          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   \   00000E   8C..         MOV       ?V6,R4
   \   000010   8D..         MOV       ?V7,R5
    477            uint32 ticks;
    478          
    479            /* read the sleep timer; ST0 must be read first */
    480            ((uint8 *) &ticks)[UINT32_NDX0] = ST0;
   \   000012   E595         MOV       A,0x95
   \   000014   C0E0         PUSH      A
   \   000016   85..82       MOV       DPL,?XSP + 0
   \   000019   85..83       MOV       DPH,?XSP + 1
   \   00001C   D0E0         POP       A
   \   00001E   F0           MOVX      @DPTR,A
    481            ((uint8 *) &ticks)[UINT32_NDX1] = ST1;
   \   00001F   E596         MOV       A,0x96
   \   000021   C0E0         PUSH      A
   \   000023   7401         MOV       A,#0x1
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   D0E0         POP       A
   \   00002A   F0           MOVX      @DPTR,A
    482            ((uint8 *) &ticks)[UINT32_NDX2] = ST2;
   \   00002B   E597         MOV       A,0x97
   \   00002D   C0E0         PUSH      A
   \   00002F   7402         MOV       A,#0x2
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   D0E0         POP       A
   \   000036   F0           MOVX      @DPTR,A
    483            ((uint8 *) &ticks)[UINT32_NDX3] = 0;
   \   000037   7403         MOV       A,#0x3
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   7400         MOV       A,#0x0
   \   00003E   F0           MOVX      @DPTR,A
    484          
    485            /* Compute sleep timer compare value.  The ratio of 32 kHz ticks to 320 usec ticks
    486             * is 32768/3125 = 10.48576.  This is nearly 671/64 = 10.484375.
    487             */
    488            ticks += (timeout * 671) / 64;
   \   00003F   85....       MOV       ?V0,?V4
   \   000042   85....       MOV       ?V1,?V5
   \   000045   85....       MOV       ?V2,?V6
   \   000048   85....       MOV       ?V3,?V7
   \   00004B   90....       MOV       DPTR,#__Constant_29f
   \   00004E   78..         MOV       R0,#?V8
   \   000050   12....       LCALL     ?L_MOV_X
   \   000053   78..         MOV       R0,#?V0
   \   000055   79..         MOV       R1,#?V8
   \   000057   12....       LCALL     ?L_MUL
   \   00005A   7406         MOV       A,#0x6
   \   00005C   78..         MOV       R0,#?V0
   \   00005E   12....       LCALL     ?UL_SHR
   \   000061   85..82       MOV       DPL,?XSP + 0
   \   000064   85..83       MOV       DPH,?XSP + 1
   \   000067   78..         MOV       R0,#?V0
   \   000069   12....       LCALL     ?L_ADD_TO_X
    489          
    490            /* subtract the processing time spent in function halSleep() */
    491            ticks -= HAL_SLEEP_ADJ_TICKS;
   \   00006C   90....       MOV       DPTR,#__Constant_ffffffe9
   \   00006F   78..         MOV       R0,#?V0
   \   000071   12....       LCALL     ?L_MOV_X
   \   000074   85..82       MOV       DPL,?XSP + 0
   \   000077   85..83       MOV       DPH,?XSP + 1
   \   00007A   78..         MOV       R0,#?V0
   \   00007C   12....       LCALL     ?L_ADD_TO_X
    492          
    493            /* set sleep timer compare; ST0 must be written last */
    494            ST2 = ((uint8 *) &ticks)[UINT32_NDX2];
   \   00007F   7402         MOV       A,#0x2
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   E0           MOVX      A,@DPTR
   \   000085   F597         MOV       0x97,A
    495            ST1 = ((uint8 *) &ticks)[UINT32_NDX1];
   \   000087   7401         MOV       A,#0x1
   \   000089   12....       LCALL     ?XSTACK_DISP0_8
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   F596         MOV       0x96,A
    496            ST0 = ((uint8 *) &ticks)[UINT32_NDX0];
   \   00008F   85..82       MOV       DPL,?XSP + 0
   \   000092   85..83       MOV       DPH,?XSP + 1
   \   000095   E0           MOVX      A,@DPTR
   \   000096   F595         MOV       0x95,A
    497          }
   \   000098   7404         MOV       A,#0x4
   \   00009A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009D   7F0C         MOV       R7,#0xc
   \   00009F   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   0000A2                REQUIRE ST0
   \   0000A2                REQUIRE ST1
   \   0000A2                REQUIRE ST2
    498          
    499          /**************************************************************************************************
    500           * @fn          TimerElapsed
    501           *
    502           * @brief       Determine the number of OSAL timer ticks elapsed during sleep.
    503           *              Deprecated for CC2530 and CC2430 SoC.
    504           *
    505           * input parameters
    506           *
    507           * @param       None.
    508           *
    509           * output parameters
    510           *
    511           * None.
    512           *
    513           * @return      Number of timer ticks elapsed during sleep.
    514           **************************************************************************************************
    515           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    516          uint32 TimerElapsed( void )
   \                     TimerElapsed:
    517          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    518            /* Stubs */
    519            return (0);
   \   000000   7A00         MOV       R2,#0x0
   \   000002   7B00         MOV       R3,#0x0
   \   000004   7C00         MOV       R4,#0x0
   \   000006   7D00         MOV       R5,#0x0
   \   000008   02....       LJMP      ?BRET
    520          }
    521          
    522          /**************************************************************************************************
    523           * @fn          halRestoreSleepLevel
    524           *
    525           * @brief       Restore the deepest timer sleep level.
    526           *
    527           * input parameters
    528           *
    529           * @param       None
    530           *
    531           * output parameters
    532           *
    533           *              None.
    534           *
    535           * @return      None.
    536           **************************************************************************************************
    537           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    538          void halRestoreSleepLevel( void )
   \                     halRestoreSleepLevel:
    539          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    540            /* Stubs */
    541          }
   \   000000   02....       LJMP      ?BRET
    542          
    543          /**************************************************************************************************
    544           * @fn          halSleepTimerIsr
    545           *
    546           * @brief       Sleep timer ISR.
    547           *
    548           * input parameters
    549           *
    550           * None.
    551           *
    552           * output parameters
    553           *
    554           * None.
    555           *
    556           * @return      None.
    557           **************************************************************************************************
    558           */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    559          HAL_ISR_FUNCTION(halSleepTimerIsr, ST_VECTOR)
   \                     halSleepTimerIsr:
    560          {
   \   000000   C0E0         PUSH      A
   \   000002   C0D0         PUSH      PSW
   \   000004   E8           MOV       A,R0
   \   000005   C0E0         PUSH      A
   \   000007                ; Saved register size: 3
   \   000007                ; Auto size: 0
    561            HAL_ENTER_ISR();
   \   000007   A2AF         MOV       C,0xa8.7
   \   000009   E4           CLR       A
   \   00000A   33           RLC       A
   \   00000B   F8           MOV       R0,A
   \   00000C   D2AF         SETB      0xa8.7
    562            HAL_SLEEP_TIMER_CLEAR_INT();
   \   00000E   C2C7         CLR       0xc0.7
    563          
    564          #ifdef HAL_SLEEP_DEBUG_POWER_MODE
    565            halSleepInt = TRUE;
    566          #endif
    567            
    568            CLEAR_SLEEP_MODE();
   \   000010   75..00       MOV       halSleepPconValue,#0x0
    569            HAL_EXIT_ISR();
   \   000013   E8           MOV       A,R0
   \   000014   A2E0         MOV       C,0xE0 /* A   */.0
   \   000016   92AF         MOV       0xa8.7,C
    570          }
   \   000018   D0E0         POP       A
   \   00001A   F8           MOV       R0,A
   \   00001B   D0D0         POP       PSW
   \   00001D   D0E0         POP       A
   \   00001F   32           RETI
   \   000020                REQUIRE _A_IEN0
   \   000020                REQUIRE _A_IRCON
    571          
    572          /**************************************************************************************************
    573           * @fn          halSleepWait
    574           *
    575           * @brief       Perform a blocking wait for the specified number of microseconds.
    576           *              Use assumptions about number of clock cycles needed for the various instructions.
    577           *              This function assumes a 32 MHz clock.
    578           *              NB! This function is highly dependent on architecture and compiler!
    579           *
    580           * input parameters
    581           *
    582           * @param       duration - Duration of wait in microseconds.
    583           *
    584           * output parameters
    585           *
    586           * None.
    587           *
    588           * @return      None.
    589           **************************************************************************************************
    590           */
    591          #pragma optimize=none

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    592          void halSleepWait(uint16 duration)
   \                     halSleepWait:
    593          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    594            duration >>= 1;
   \   000000   EB           MOV       A,R3
   \   000001   C3           CLR       C
   \   000002   13           RRC       A
   \   000003   FB           MOV       R3,A
   \   000004   EA           MOV       A,R2
   \   000005   13           RRC       A
   \   000006   FA           MOV       R2,A
    595          
    596            while (duration-- > 0)
   \                     ??halSleepWait_0:
   \   000007   EA           MOV       A,R2
   \   000008   F8           MOV       R0,A
   \   000009   EB           MOV       A,R3
   \   00000A   F9           MOV       R1,A
   \   00000B   E8           MOV       A,R0
   \   00000C   24FF         ADD       A,#-0x1
   \   00000E   FA           MOV       R2,A
   \   00000F   E9           MOV       A,R1
   \   000010   34FF         ADDC      A,#-0x1
   \   000012   FB           MOV       R3,A
   \   000013   E8           MOV       A,R0
   \   000014   49           ORL       A,R1
   \   000015   601A         JZ        ??halSleepWait_1
    597            {
    598              ASM_NOP; ASM_NOP; ASM_NOP; ASM_NOP; ASM_NOP; ASM_NOP; ASM_NOP; ASM_NOP; ASM_NOP; ASM_NOP; ASM_NOP; ASM_NOP;
   \   000017   00           NOP
   \   000018   00           NOP
   \   000019   00           NOP
   \   00001A   00           NOP
   \   00001B   00           NOP
   \   00001C   00           NOP
   \   00001D   00           NOP
   \   00001E   00           NOP
   \   00001F   00           NOP
   \   000020   00           NOP
   \   000021   00           NOP
   \   000022   00           NOP
    599              ASM_NOP; ASM_NOP; ASM_NOP; ASM_NOP; ASM_NOP; ASM_NOP; ASM_NOP; ASM_NOP; ASM_NOP; ASM_NOP; ASM_NOP; ASM_NOP;
   \   000023   00           NOP
   \   000024   00           NOP
   \   000025   00           NOP
   \   000026   00           NOP
   \   000027   00           NOP
   \   000028   00           NOP
   \   000029   00           NOP
   \   00002A   00           NOP
   \   00002B   00           NOP
   \   00002C   00           NOP
   \   00002D   00           NOP
   \   00002E   00           NOP
   \   00002F   80D6         SJMP      ??halSleepWait_0
    600            }
    601          }
   \                     ??halSleepWait_1:
   \   000031   02....       LJMP      ?BRET

   \                                 In  segment INTVEC, offset 0x2b, root
   \                     `??halSleepTimerIsr::??INTVEC 43`:
   \   00002B   02....       LJMP       (halSleepTimerIsr)

   \                                 In  segment DATA_ID, align 1, keep-with-next
   \                     `?<Initializer for halSleepPconValue>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for maxSleepLoopTime>`:
   \   000000   0020FD00     DD 16588800

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_185197:
   \   000000   97511800     DD 1593751

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_fffffffe:
   \   000000   FEFFFFFF     DD 4294967294

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1f:
   \   000000   1F000000     DD 31

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_8:
   \   000000   08000000     DD 8

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffe7ae6a:
   \   000000   6AAEE7FF     DD 4293373546

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_185196:
   \   000000   96511800     DD 1593750

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_29f:
   \   000000   9F020000     DD 671

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffffffe9:
   \   000000   E9FFFFFF     DD 4294967273

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   TimerElapsed
      0      0   halRestoreSleepLevel
      0     16   halSetMaxSleepLoopTime
      0     28   halSetSleepMode
      0     28   halSleep
        0     28   -> HalKeyEnterSleep
        0     28   -> HalKeyExitSleep
        0     28   -> HalLedEnterSleep
        0     28   -> HalLedExitSleep
        0     28   -> MAC_PwrNextTimeout
        0     28   -> MAC_PwrOffReq
        0     28   -> MAC_PwrOnReq
        0     28   -> halAssertHandler
        0     28   -> halSetSleepMode
        0     28   -> halSleepSetTimer
        0     28   -> macMcuTimer2OverflowWorkaround
      1     52   halSleepSetTimer
      3      0   halSleepTimerIsr
      0      0   halSleepWait


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for halSleepPconValue>
       4  ?<Initializer for maxSleepLoopTime>
       1  IEN2
       1  PCON
       1  SLEEPCMD
       1  ST0
       1  ST1
       1  ST2
       1  STLOAD
      11  TimerElapsed
       1  _A_IEN0
       1  _A_IEN1
       1  _A_IRCON
       4  __Constant_185196
       4  __Constant_185197
       4  __Constant_1f
       4  __Constant_29f
       4  __Constant_64
       4  __Constant_8
       4  __Constant_ffe7ae6a
       4  __Constant_ffffffe9
       4  __Constant_fffffffe
       1  halPwrMgtMode
       3  halRestoreSleepLevel
      72  halSetMaxSleepLoopTime
       8  halSetSleepMode
     453  halSleep
       1  halSleepPconValue
     162  halSleepSetTimer
      32  halSleepTimerIsr
       3  halSleepTimerIsr::??INTVEC 43
      52  halSleepWait
       4  maxSleepLoopTime
      42  -- Other

 
 753 bytes in segment BANKED_CODE
  42 bytes in segment BANK_RELAYS
   1 byte  in segment DATA_I
   1 byte  in segment DATA_ID
   3 bytes in segment INTVEC
  32 bytes in segment NEAR_CODE
  10 bytes in segment SFR_AN
   8 bytes in segment SLEEP_CODE
   4 bytes in segment XDATA_I
   4 bytes in segment XDATA_ID
  36 bytes in segment XDATA_ROM_C
   1 byte  in segment XDATA_Z
 
  79 bytes of CODE     memory (+  3 bytes shared)
   0 bytes of CONST    memory (+ 36 bytes shared)
   1 byte  of DATA     memory (+ 10 bytes shared)
 761 bytes of HUGECODE memory
   5 bytes of XDATA    memory

Errors: none
Warnings: none
