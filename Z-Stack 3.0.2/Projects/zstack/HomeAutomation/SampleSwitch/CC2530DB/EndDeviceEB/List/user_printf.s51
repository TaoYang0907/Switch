///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              31/Jul/2020  11:47:28
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\Source\user_printf.c
//    Command line       =  
//        -f C:\Users\sunli\AppData\Local\Temp\EWD822.tmp ("D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\Source\user_printf.c"
//        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
//        POWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D
//        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
//        xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
//        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
//        ZCL_ON_OFF -D ZCL_GROUPS -D BDB_TL_INITIATOR -D INTER_PAN -lC
//        "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
//        -lA "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
//        "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -On --require_prototypes --no_cse --no_unroll --no_inline
//        --no_code_motion --no_tbaa --no_cross_call)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\user_printf.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME user_printf

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?V14
        EXTERN ?V15
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_DIV_MOD
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8

        FUNCTION `??print::?relay`,0203H
        FUNCTION `??printchar::?relay`,0203H
        PUBLIC `??printf::?relay`
        FUNCTION `??printf::?relay`,0203H
        FUNCTION `??printi::?relay`,0203H
        FUNCTION `??prints::?relay`,0203H
        PUBLIC `??putchar::?relay`
        FUNCTION `??putchar::?relay`,0203H
        PUBLIC `??sprintf::?relay`
        FUNCTION `??sprintf::?relay`,0203H
        FUNCTION print,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 34, STACK
        FUNCTION printchar,0a1203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC printf
        FUNCTION printf,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION printi,0a1203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 36, STACK
        FUNCTION prints,0a1203H
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        PUBLIC putchar
        FUNCTION putchar,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC sprintf
        FUNCTION sprintf,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
HalUARTWrite        SYMBOL "HalUARTWrite"
`??HalUARTWrite::?relay` SYMBOL "?relay", HalUARTWrite
printf              SYMBOL "printf"
`??printf::?relay`  SYMBOL "?relay", printf
putchar             SYMBOL "putchar"
`??putchar::?relay` SYMBOL "?relay", putchar
sprintf             SYMBOL "sprintf"
`??sprintf::?relay` SYMBOL "?relay", sprintf

        EXTERN `??HalUARTWrite::?relay`
        FUNCTION `??HalUARTWrite::?relay`,00H
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\AA\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\Source\user_printf.c
//    1 /*
//    2 	Copyright 2001, 2002 Georges Menie (www.menie.org)
//    3 	stdarg version contributed by Christian Ettinger
//    4 
//    5     This program is free software; you can redistribute it and/or modify
//    6     it under the terms of the GNU Lesser General Public License as published by
//    7     the Free Software Foundation; either version 2 of the License, or
//    8     (at your option) any later version.
//    9 
//   10     This program is distributed in the hope that it will be useful,
//   11     but WITHOUT ANY WARRANTY; without even the implied warranty of
//   12     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   13     GNU Lesser General Public License for more details.
//   14 
//   15     You should have received a copy of the GNU Lesser General Public License
//   16     along with this program; if not, write to the Free Software
//   17     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//   18 */
//   19 
//   20 /*
//   21 	putchar is the only external dependency for this file,
//   22 	if you have a working putchar, leave it commented out.
//   23 	If not, uncomment the define below and
//   24 	replace outbyte(c) by your own function call.
//   25 
//   26 #define putchar(c) outbyte(c)
//   27 */
//   28 
//   29 #include "stdarg.h"
//   30 #include "user_printf.h"
//   31 #include "hal_uart.h"
//   32 
//   33 void putchar(char c);

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   34 void putchar(char c){
putchar:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function putchar
        CODE
        FUNCALL putchar, HalUARTWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 1)
        MOV       A,R1
        PUSH      A
          CFI CFA_SP SP+-6
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        POP       A
          CFI CFA_SP SP+-5
        MOVX      @DPTR,A
//   35   HalUARTWrite(HAL_UART_PORT_0,(uint8*)&c,1);
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0x1
        MOV       R5,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//   36 }
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock0
//   37 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   38 static void printchar(char **str, int c)
printchar:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function printchar
        CODE
//   39 {
        FUNCALL printchar, putchar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
//   40 	extern void putchar(char c);
//   41 	
//   42 	if (str) {
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??printchar_0
//   43 		**str = c;
        MOV       A,R6
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//   44 		++(*str);
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R1,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        SJMP      ??printchar_1
//   45 	}
//   46 	else (void)putchar((char)c);
??printchar_0:
        ; Setup parameters for call to function putchar
        MOV       A,R6
        MOV       R1,A
        LCALL     `??putchar::?relay`; Banked call to: putchar
//   47 }
??printchar_1:
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//   48 
//   49 #define PAD_RIGHT 1
//   50 #define PAD_ZERO 2
//   51 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   52 static int prints(char **out, const char *string, int width, int pad)
prints:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function prints
        CODE
//   53 {
        FUNCALL prints, printchar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prints, printchar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prints, printchar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV       A,#-0x12
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       ?V4,R4
        MOV       ?V5,R5
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
//   54 	register int pc = 0, padchar = ' ';
        MOV       ?V2,#0x0
        MOV       ?V3,#0x0
        MOV       ?V6,#0x20
        MOV       ?V7,#0x0
//   55 
//   56 	if (width > 0) {
        CLR       C
        MOV       A,R6
        SUBB      A,#0x1
        MOV       A,R7
        SUBB      A,#0x0
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        JC        ??prints_0
//   57 		register int len = 0;
        MOV       R0,#0x0
        MOV       R1,#0x0
//   58 		register const char *ptr;
//   59 		for (ptr = string; *ptr; ++ptr) ++len;
        MOV       DPL,?V4
        MOV       DPH,?V5
??prints_1:
        MOVX      A,@DPTR
        JZ        ??prints_2
        INC       R0
        MOV       A,R0
        JNZ       ??prints_3
        INC       R1
??prints_3:
        INC       DPTR
        SJMP      ??prints_1
//   60 		if (len >= width) width = 0;
??prints_2:
        CLR       C
        MOV       A,R0
        SUBB      A,R6
        MOV       A,R1
        SUBB      A,R7
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        JC        ??prints_4
        MOV       R6,#0x0
        MOV       R7,#0x0
        SJMP      ??prints_5
//   61 		else width -= len;
??prints_4:
        CLR       C
        MOV       A,R6
        SUBB      A,R0
        MOV       R6,A
        MOV       A,R7
        SUBB      A,R1
        MOV       R7,A
//   62 		if (pad & PAD_ZERO) padchar = '0';
??prints_5:
        MOV       A,?V0
        ANL       A,#0x2
        JZ        ??prints_0
        MOV       ?V6,#0x30
        MOV       ?V7,#0x0
//   63 	}
//   64 	if (!(pad & PAD_RIGHT)) {
??prints_0:
        MOV       A,?V0
        MOV       C,0xE0 /* A   */.0
        JC        ??prints_6
//   65 		for ( ; width > 0; --width) {
??prints_7:
        CLR       C
        MOV       A,R6
        SUBB      A,#0x1
        MOV       A,R7
        SUBB      A,#0x0
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        JC        ??prints_6
//   66 			printchar (out, padchar);
        ; Setup parameters for call to function printchar
        MOV       R4,?V6
        MOV       R5,?V7
        MOV       R2,?V8
        MOV       R3,?V9
        LCALL     `??printchar::?relay`; Banked call to: printchar
//   67 			++pc;
        INC       ?V2
        MOV       A,?V2
        JNZ       ??prints_8
        INC       ?V3
//   68 		}
??prints_8:
        MOV       A,R6
        ADD       A,#-0x1
        MOV       R6,A
        MOV       A,R7
        ADDC      A,#-0x1
        MOV       R7,A
        SJMP      ??prints_7
//   69 	}
//   70 	for ( ; *string ; ++string) {
??prints_6:
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        JZ        ??prints_9
//   71 		printchar (out, *string);
        ; Setup parameters for call to function printchar
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       R5,#0x0
        MOV       R2,?V8
        MOV       R3,?V9
        LCALL     `??printchar::?relay`; Banked call to: printchar
//   72 		++pc;
        INC       ?V2
        MOV       A,?V2
        JNZ       ??prints_10
        INC       ?V3
//   73 	}
??prints_10:
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        MOV       ?V4,DPL
        MOV       ?V5,DPH
        SJMP      ??prints_6
//   74 	for ( ; width > 0; --width) {
??prints_9:
        CLR       C
        MOV       A,R6
        SUBB      A,#0x1
        MOV       A,R7
        SUBB      A,#0x0
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        JC        ??prints_11
//   75 		printchar (out, padchar);
        ; Setup parameters for call to function printchar
        MOV       R4,?V6
        MOV       R5,?V7
        MOV       R2,?V8
        MOV       R3,?V9
        LCALL     `??printchar::?relay`; Banked call to: printchar
//   76 		++pc;
        INC       ?V2
        MOV       A,?V2
        JNZ       ??prints_12
        INC       ?V3
//   77 	}
??prints_12:
        MOV       A,R6
        ADD       A,#-0x1
        MOV       R6,A
        MOV       A,R7
        ADDC      A,#-0x1
        MOV       R7,A
        SJMP      ??prints_9
//   78 
//   79 	return pc;
??prints_11:
        MOV       R2,?V2
        MOV       R3,?V3
        MOV       R7,#0xa
        LJMP      ?BANKED_LEAVE_XDATA
//   80 }
          CFI EndBlock cfiBlock2
//   81 
//   82 /* the following should be enough for 16 bit int */
//   83 #define PRINT_BUF_LEN 6
//   84 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   85 static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
printi:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function printi
        CODE
//   86 {
        FUNCALL printi, prints
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL printi, printchar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL printi, prints
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV       A,#-0x18
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 8
        MOV       A,#-0x8
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       ?V10,R2
        MOV       ?V11,R3
        MOV       ?V8,R4
        MOV       ?V9,R5
        MOV       A,#0x24
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       A,#0x26
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
//   87 	char print_buf[PRINT_BUF_LEN];
//   88 	register char *s;
//   89 	register int t, neg = 0, pc = 0;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
        MOV       ?V14,#0x0
        MOV       ?V15,#0x0
//   90 	register unsigned int u = i;
        MOV       ?V0,?V8
        MOV       ?V1,?V9
//   91 
//   92 	if (i == 0) {
        MOV       A,?V8
        ORL       A,?V9
        JNZ       ??printi_0
//   93 		print_buf[0] = '0';
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x30
        MOVX      @DPTR,A
//   94 		print_buf[1] = '\0';
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x0
        MOVX      @DPTR,A
//   95 		return prints (out, print_buf, width, pad);
        ; Setup parameters for call to function prints
        MOV       ?V12,R6
        MOV       ?V13,R7
        MOV       R0,#?V12
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,?V10
        MOV       R3,?V11
        LCALL     `??prints::?relay`; Banked call to: prints
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        LJMP      ??printi_1 & 0xFFFF
//   96 	}
//   97 
//   98 	if (sg && b == 10 && i < 0) {
??printi_0:
        MOV       A,#0x22
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??printi_2
        MOV       A,#0x20
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        XRL       A,#0xa
        JNZ       ??printi_3
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x0
??printi_3:
        JNZ       ??printi_2
        CLR       C
        MOV       A,?V8
        SUBB      A,#0x0
        MOV       A,?V9
        SUBB      A,#0x0
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        JNC       ??printi_2
//   99 		neg = 1;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
//  100 		u = -i;
        CLR       C
        CLR       A
        SUBB      A,?V8
        MOV       R0,A
        CLR       A
        SUBB      A,?V9
        MOV       R1,A
        MOV       ?V0,R0
        MOV       ?V1,R1
//  101 	}
//  102 
//  103 	s = print_buf + PRINT_BUF_LEN-1;
??printi_2:
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOV       ?V6,DPL
        MOV       ?V7,DPH
//  104 	*s = '\0';
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOV       A,#0x0
        MOVX      @DPTR,A
//  105 
//  106 	while (u) {
??printi_4:
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??printi_5
//  107 		t = u % b;
        MOV       R0,?V0
        MOV       R1,?V1
        MOV       A,#0x20
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     ?US_DIV_MOD
        MOV       ?V12,R2
        MOV       ?V13,R3
        MOV       ?V4,?V12
        MOV       ?V5,?V13
//  108 		if( t >= 10 )
        CLR       C
        MOV       A,?V4
        SUBB      A,#0xa
        MOV       A,?V5
        SUBB      A,#0x0
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        JC        ??printi_6
//  109 			t += letbase - '0' - 10;
        MOV       A,#0x28
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ADD       A,#-0x3a
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#-0x1
        MOV       R1,A
        MOV       A,?V4
        ADD       A,R0
        MOV       ?V4,A
        MOV       A,?V5
        ADDC      A,R1
        MOV       ?V5,A
//  110 		*--s = t + '0';
??printi_6:
        MOV       A,?V6
        ADD       A,#-0x1
        MOV       ?V6,A
        MOV       A,?V7
        ADDC      A,#-0x1
        MOV       ?V7,A
        MOV       A,?V4
        ADD       A,#0x30
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?V6
        MOV       DPH,?V7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  111 		u /= b;
        MOV       R0,?V0
        MOV       R1,?V1
        MOV       A,#0x20
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     ?US_DIV_MOD
        MOV       ?V12,R0
        MOV       ?V13,R1
        MOV       ?V0,?V12
        MOV       ?V1,?V13
        LJMP      ??printi_4 & 0xFFFF
//  112 	}
//  113 
//  114 	if (neg) {
??printi_5:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??printi_7
//  115 		if( width && (pad & PAD_ZERO) ) {
        MOV       A,?V2
        ORL       A,?V3
        JZ        ??printi_8
        MOV       A,R6
        ANL       A,#0x2
        JZ        ??printi_8
//  116 			printchar (out, '-');
        ; Setup parameters for call to function printchar
        MOV       R4,#0x2d
        MOV       R5,#0x0
        MOV       R2,?V10
        MOV       R3,?V11
        LCALL     `??printchar::?relay`; Banked call to: printchar
//  117 			++pc;
        INC       ?V14
        MOV       A,?V14
        JNZ       ??printi_9
        INC       ?V15
//  118 			--width;
??printi_9:
        MOV       A,?V2
        ADD       A,#-0x1
        MOV       ?V2,A
        MOV       A,?V3
        ADDC      A,#-0x1
        MOV       ?V3,A
        SJMP      ??printi_7
//  119 		}
//  120 		else {
//  121 			*--s = '-';
??printi_8:
        MOV       A,?V6
        ADD       A,#-0x1
        MOV       ?V6,A
        MOV       A,?V7
        ADDC      A,#-0x1
        MOV       ?V7,A
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOV       A,#0x2d
        MOVX      @DPTR,A
//  122 		}
//  123 	}
//  124 
//  125 	return pc + prints (out, s, width, pad);
??printi_7:
        ; Setup parameters for call to function prints
        MOV       ?V12,R6
        MOV       ?V13,R7
        MOV       R0,#?V12
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       R4,?V6
        MOV       R5,?V7
        MOV       R2,?V10
        MOV       R3,?V11
        LCALL     `??prints::?relay`; Banked call to: prints
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       ?V12,R2
        MOV       ?V13,R3
        MOV       A,?V14
        ADD       A,?V12
        MOV       R2,A
        MOV       A,?V15
        ADDC      A,?V13
        MOV       R3,A
??printi_1:
        MOV       A,#0x8
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R7,#0x10
        LJMP      ?BANKED_LEAVE_XDATA
//  126 }
          CFI EndBlock cfiBlock3
//  127 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  128 static int print(char **out, const char *format, va_list args )
print:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function print
        CODE
//  129 {
        FUNCALL print, prints
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL print, printi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL print, printi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL print, printi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL print, printi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL print, prints
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL print, printchar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV       A,#-0x16
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V6,R2
        MOV       ?V7,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
        MOV       A,#0x18
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V8,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V9,A
//  130 	register int width, pad;
//  131 	register int pc = 0;
        MOV       ?V4,#0x0
        MOV       ?V5,#0x0
//  132 	char scr[2];
//  133 
//  134 	for (; *format != 0; ++format) {
??print_0:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??print_1 & 0xFFFF
//  135 		if (*format == '%') {
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        XRL       A,#0x25
        JZ        $+5
        LJMP      ??print_2 & 0xFFFF
//  136 			++format;
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        MOV       ?V2,DPL
        MOV       ?V3,DPH
//  137 			width = pad = 0;
        MOV       ?V0,#0x0
        MOV       ?V1,#0x0
        MOV       R6,?V0
        MOV       R7,?V1
//  138 			if (*format == '\0') break;
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??print_1 & 0xFFFF
//  139 			if (*format == '%') goto out;
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        XRL       A,#0x25
        JNZ       $+5
        LJMP      ??print_2 & 0xFFFF
//  140 			if (*format == '-') {
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        XRL       A,#0x2d
        JNZ       ??print_3
//  141 				++format;
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        MOV       ?V2,DPL
        MOV       ?V3,DPH
//  142 				pad = PAD_RIGHT;
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
//  143 			}
//  144 			while (*format == '0') {
??print_3:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        XRL       A,#0x30
        JNZ       ??print_4
//  145 				++format;
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        MOV       ?V2,DPL
        MOV       ?V3,DPH
//  146 				pad |= PAD_ZERO;
        MOV       A,#0x2
        ORL       A,?V0
        MOV       ?V0,A
        MOV       A,#0x0
        ORL       A,?V1
        MOV       ?V1,A
        SJMP      ??print_3
//  147 			}
//  148 			for ( ; *format >= '0' && *format <= '9'; ++format) {
??print_4:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0x30
        JC        ??print_5
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0x3a
        JNC       ??print_5
//  149 				width *= 10;
        MOV       A,R6
        MOV       B,#0xa
        MUL       AB
        XCH       A,R6
        MOV       R0,B
        MOV       B,#0x0
        MUL       AB
        ADD       A,R0
        MOV       R0,A
        MOV       B,#0xa
        MOV       A,R7
        MUL       AB
        ADD       A,R0
        MOV       R7,A
//  150 				width += *format - '0';
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       R1,#0x0
        MOV       A,R0
        ADD       A,#-0x30
        MOV       R0,A
        MOV       A,R1
        ADDC      A,#-0x1
        MOV       R1,A
        MOV       A,R6
        ADD       A,R0
        MOV       R6,A
        MOV       A,R7
        ADDC      A,R1
        MOV       R7,A
//  151 			}
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        MOV       ?V2,DPL
        MOV       ?V3,DPH
        SJMP      ??print_4
//  152 			if( *format == 's' ) {
??print_5:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        XRL       A,#0x73
        JNZ       ??print_6
//  153 				register char *s = (char *)va_arg( args, int );
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MOV       ?V10,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V11,A
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOVX      A,@DPTR
        ADD       A,#0x2
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R1,A
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  154 				pc += prints (out, s?s:"(null)", width, pad);
        MOV       A,?V10
        ORL       A,?V11
        JZ        ??print_7
        MOV       R4,?V10
        MOV       R5,?V11
        SJMP      ??print_8
??print_7:
        MOV       R4,#`?<Constant "(null)">` & 0xff
        MOV       R5,#(`?<Constant "(null)">` >> 8) & 0xff
??print_8:
        ; Setup parameters for call to function prints
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       ?V12,R6
        MOV       ?V13,R7
        MOV       R0,#?V12
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??prints::?relay`; Banked call to: prints
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V12,R2
        MOV       ?V13,R3
        MOV       A,?V4
        ADD       A,?V12
        MOV       ?V4,A
        MOV       A,?V5
        ADDC      A,?V13
        MOV       ?V5,A
//  155 				continue;
        LJMP      ??print_9 & 0xFFFF
//  156 			}
//  157 			if( *format == 'd' ) {
??print_6:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        XRL       A,#0x64
        JNZ       ??print_10
//  158 				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        MOV       A,R2
        ADD       A,#0x2
        MOV       R0,A
        CLR       A
        ADDC      A,R3
        MOV       R1,A
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        ; Setup parameters for call to function printi
        MOV       ?V10,#0x61
        MOV       ?V11,#0x0
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V10,R6
        MOV       ?V11,R7
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       ?V10,#0x1
        MOV       ?V11,#0x0
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       ?V10,#0xa
        MOV       ?V11,#0x0
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??printi::?relay`; Banked call to: printi
        MOV       A,#0xa
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V10,R2
        MOV       ?V11,R3
        MOV       A,?V4
        ADD       A,?V10
        MOV       ?V4,A
        MOV       A,?V5
        ADDC      A,?V11
        MOV       ?V5,A
//  159 				continue;
        LJMP      ??print_9 & 0xFFFF
//  160 			}
//  161 			if( *format == 'x' ) {
??print_10:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        XRL       A,#0x78
        JNZ       ??print_11
//  162 				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        MOV       A,R2
        ADD       A,#0x2
        MOV       R0,A
        CLR       A
        ADDC      A,R3
        MOV       R1,A
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        ; Setup parameters for call to function printi
        MOV       ?V10,#0x61
        MOV       ?V11,#0x0
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V10,R6
        MOV       ?V11,R7
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        CLR       A
        MOV       ?V10,A
        MOV       ?V11,A
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       ?V10,#0x10
        MOV       ?V11,#0x0
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??printi::?relay`; Banked call to: printi
        MOV       A,#0xa
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V10,R2
        MOV       ?V11,R3
        MOV       A,?V4
        ADD       A,?V10
        MOV       ?V4,A
        MOV       A,?V5
        ADDC      A,?V11
        MOV       ?V5,A
//  163 				continue;
        LJMP      ??print_9 & 0xFFFF
//  164 			}
//  165 			if( *format == 'X' ) {
??print_11:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        XRL       A,#0x58
        JNZ       ??print_12
//  166 				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        MOV       A,R2
        ADD       A,#0x2
        MOV       R0,A
        CLR       A
        ADDC      A,R3
        MOV       R1,A
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        ; Setup parameters for call to function printi
        MOV       ?V10,#0x41
        MOV       ?V11,#0x0
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V10,R6
        MOV       ?V11,R7
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        CLR       A
        MOV       ?V10,A
        MOV       ?V11,A
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       ?V10,#0x10
        MOV       ?V11,#0x0
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??printi::?relay`; Banked call to: printi
        MOV       A,#0xa
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V10,R2
        MOV       ?V11,R3
        MOV       A,?V4
        ADD       A,?V10
        MOV       ?V4,A
        MOV       A,?V5
        ADDC      A,?V11
        MOV       ?V5,A
//  167 				continue;
        LJMP      ??print_9 & 0xFFFF
//  168 			}
//  169 			if( *format == 'u' ) {
??print_12:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        XRL       A,#0x75
        JNZ       ??print_13
//  170 				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        MOV       A,R2
        ADD       A,#0x2
        MOV       R0,A
        CLR       A
        ADDC      A,R3
        MOV       R1,A
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        ; Setup parameters for call to function printi
        MOV       ?V10,#0x61
        MOV       ?V11,#0x0
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V10,R6
        MOV       ?V11,R7
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        CLR       A
        MOV       ?V10,A
        MOV       ?V11,A
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       ?V10,#0xa
        MOV       ?V11,#0x0
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??printi::?relay`; Banked call to: printi
        MOV       A,#0xa
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V10,R2
        MOV       ?V11,R3
        MOV       A,?V4
        ADD       A,?V10
        MOV       ?V4,A
        MOV       A,?V5
        ADDC      A,?V11
        MOV       ?V5,A
//  171 				continue;
        LJMP      ??print_9 & 0xFFFF
//  172 			}
//  173 			if( *format == 'c' ) {
??print_13:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        XRL       A,#0x63
        JZ        $+5
        LJMP      ??print_9 & 0xFFFF
//  174 				/* char are converted to int then pushed on the stack */
//  175 				scr[0] = (char)va_arg( args, int );
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOVX      A,@DPTR
        ADD       A,#0x2
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R1,A
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  176 				scr[1] = '\0';
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x0
        MOVX      @DPTR,A
//  177 				pc += prints (out, scr, width, pad);
        ; Setup parameters for call to function prints
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       ?V10,R6
        MOV       ?V11,R7
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??prints::?relay`; Banked call to: prints
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V10,R2
        MOV       ?V11,R3
        MOV       A,?V4
        ADD       A,?V10
        MOV       ?V4,A
        MOV       A,?V5
        ADDC      A,?V11
        MOV       ?V5,A
//  178 				continue;
        SJMP      ??print_9
//  179 			}
//  180 		}
//  181 		else {
//  182 		out:
//  183 			printchar (out, *format);
??print_2:
        ; Setup parameters for call to function printchar
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       R5,#0x0
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??printchar::?relay`; Banked call to: printchar
//  184 			++pc;
        INC       ?V4
        MOV       A,?V4
        JNZ       ??print_9
        INC       ?V5
//  185 		}
//  186 	}
??print_9:
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        MOV       ?V2,DPL
        MOV       ?V3,DPH
        LJMP      ??print_0 & 0xFFFF
//  187 	if (out) **out = '\0';
??print_1:
        MOV       A,?V6
        ORL       A,?V7
        JZ        ??print_14
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOV       A,#0x0
        MOVX      @DPTR,A
//  188 	va_end( args );
//  189 	return pc;
??print_14:
        MOV       R2,?V4
        MOV       R3,?V5
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R7,#0xe
        LJMP      ?BANKED_LEAVE_XDATA
//  190 }
          CFI EndBlock cfiBlock4
//  191 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  192 int printf(const char *format, ...)
printf:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function printf
        CODE
//  193 {
        FUNCALL printf, print
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  194         va_list args;
//  195         
//  196         va_start( args, format );
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP100_8
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  197         return print( 0, format, args );
        ; Setup parameters for call to function print
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??print::?relay`; Banked call to: print
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
//  198 }
          CFI EndBlock cfiBlock5
//  199 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  200 int sprintf(char *out, const char *format, ...)
sprintf:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function sprintf
        CODE
//  201 {
        FUNCALL sprintf, print
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 4
        MOV       A,#-0x4
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
//  202         va_list args;
//  203         
//  204         va_start( args, format );
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP100_8
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  205         return print( &out, format, args );
        ; Setup parameters for call to function print
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??print::?relay`; Banked call to: print
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
//  206 }
          CFI EndBlock cfiBlock6

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??putchar::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    putchar

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??printchar::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    printchar

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??prints::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    prints

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??printi::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    printi

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??print::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    print

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??printf::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    printf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??sprintf::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    sprintf

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "(null)">`:
        DB "(null)"

        END
//  207 
//  208 #ifdef TEST_PRINTF
//  209 int main(void)
//  210 {
//  211 	char *ptr = "Hello world!";
//  212 	char *np = 0;
//  213 	int i = 5;
//  214 	unsigned int bs = sizeof(int)*8;
//  215 	int mi;
//  216 	//char buf[80];
//  217 
//  218 	mi = (1 << (bs-1)) + 1;
//  219 	printf("%s\n", ptr);
//  220 	printf("printf test\n");
//  221 	printf("%s is null pointer\n", np);
//  222 	printf("%d = 5\n", i);
//  223 	printf("%d = - max int\n", mi);
//  224 	printf("char %c = 'a'\n", 'a');
//  225 	printf("hex %x = ff\n", 0xff);
//  226 	printf("hex %02x = 00\n", 0);
//  227 	printf("signed %d = unsigned %u = hex %x\n", -3, -3, -3);
//  228 	printf("%d %s(s)%", 0, "message");
//  229 	printf("\n");
//  230 	printf("%d %s(s) with %%\n", 0, "message");
//  231 	sprintf(buf, "justif: \"%-10s\"\n", "left"); printf("%s", buf);
//  232 	sprintf(buf, "justif: \"%10s\"\n", "right"); printf("%s", buf);
//  233 	sprintf(buf, " 3: %04d zero padded\n", 3); printf("%s", buf);
//  234 	sprintf(buf, " 3: %-4d left justif.\n", 3); printf("%s", buf);
//  235 	sprintf(buf, " 3: %4d right justif.\n", 3); printf("%s", buf);
//  236 	sprintf(buf, "-3: %04d zero padded\n", -3); printf("%s", buf);
//  237 	sprintf(buf, "-3: %-4d left justif.\n", -3); printf("%s", buf);
//  238 	sprintf(buf, "-3: %4d right justif.\n", -3); printf("%s", buf);
//  239 
//  240 	return 0;
//  241 }
//  242 
//  243 /*
//  244  * if you compile this file with
//  245  *   gcc -Wall $(YOUR_C_OPTIONS) -DTEST_PRINTF -c printf.c
//  246  * you will get a normal warning:
//  247  *   printf.c:214: warning: spurious trailing `%' in format
//  248  * this line is testing an invalid % at the end of the format string.
//  249  *
//  250  * this should display (on 32bit int machine) :
//  251  *
//  252  * Hello world!
//  253  * printf test
//  254  * (null) is null pointer
//  255  * 5 = 5
//  256  * -2147483647 = - max int
//  257  * char a = 'a'
//  258  * hex ff = ff
//  259  * hex 00 = 00
//  260  * signed -3 = unsigned 4294967293 = hex fffffffd
//  261  * 0 message(s)
//  262  * 0 message(s) with %
//  263  * justif: "left      "
//  264  * justif: "     right"
//  265  *  3: 0003 zero padded
//  266  *  3: 3    left justif.
//  267  *  3:    3 right justif.
//  268  * -3: -003 zero padded
//  269  * -3: -3   left justif.
//  270  * -3:   -3 right justif.
//  271  */
//  272 
//  273 #endif
// 
// 2 127 bytes in segment BANKED_CODE
//    42 bytes in segment BANK_RELAYS
//     7 bytes in segment XDATA_ROM_C
// 
//    42 bytes of CODE     memory
//     7 bytes of CONST    memory
// 2 127 bytes of HUGECODE memory
//
//Errors: none
//Warnings: none
