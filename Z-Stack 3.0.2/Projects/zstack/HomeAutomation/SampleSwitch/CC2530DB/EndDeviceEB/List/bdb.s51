///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              31/Jul/2020  18:41:08
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  D:\AA\Z-Stack 3.0.2\Components\stack\bdb\bdb.c
//    Command line       =  
//        -f C:\Users\sunli\AppData\Local\Temp\EW920E.tmp ("D:\AA\Z-Stack
//        3.0.2\Components\stack\bdb\bdb.c" -D SECURE=1 -D TC_LINKKEY_JOIN -D
//        NV_INIT -D NV_RESTORE -D POWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1
//        -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
//        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D
//        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
//        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_GROUPS -D
//        BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
//        -lA "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=0 -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0
//        -DREJOIN_POLL_RATE=0 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
//        "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -On --require_prototypes --no_cse --no_unroll --no_inline
//        --no_code_motion --no_tbaa --no_cross_call)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\bdb.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME bdb

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?V14
        EXTERN ?V15
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?UL_GT
        EXTERN ?US_SHR
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?XLOAD_R0123
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN ?XSTORE_R0123
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??bdb_AddRespondentNode::?relay`
        FUNCTION `??bdb_AddRespondentNode::?relay`,0203H
        PUBLIC `??bdb_CBKETCLinkKeyExchangeAttempt::?relay`
        FUNCTION `??bdb_CBKETCLinkKeyExchangeAttempt::?relay`,0203H
        PUBLIC `??bdb_ClearNetworkParams::?relay`
        FUNCTION `??bdb_ClearNetworkParams::?relay`,0203H
        PUBLIC `??bdb_CreateRespondentList::?relay`
        FUNCTION `??bdb_CreateRespondentList::?relay`,0203H
        PUBLIC `??bdb_GenerateInstallCodeCRC::?relay`
        FUNCTION `??bdb_GenerateInstallCodeCRC::?relay`,0203H
        PUBLIC `??bdb_Init::?relay`
        FUNCTION `??bdb_Init::?relay`,0203H
        PUBLIC `??bdb_NetworkRestoredResumeState::?relay`
        FUNCTION `??bdb_NetworkRestoredResumeState::?relay`,0203H
        PUBLIC `??bdb_NotifyCommissioningModeStart::?relay`
        FUNCTION `??bdb_NotifyCommissioningModeStart::?relay`,0203H
        PUBLIC `??bdb_ProcessNodeDescRsp::?relay`
        FUNCTION `??bdb_ProcessNodeDescRsp::?relay`,0203H
        FUNCTION `??bdb_ProcessOSALMsg::?relay`,0203H
        PUBLIC `??bdb_RegisterCBKETCLinkKeyExchangeCB::?relay`
        FUNCTION `??bdb_RegisterCBKETCLinkKeyExchangeCB::?relay`,0203H
        PUBLIC `??bdb_RegisterCommissioningStatusCB::?relay`
        FUNCTION `??bdb_RegisterCommissioningStatusCB::?relay`,0203H
        PUBLIC `??bdb_RegisterForFilterNwkDescCB::?relay`
        FUNCTION `??bdb_RegisterForFilterNwkDescCB::?relay`,0203H
        PUBLIC `??bdb_RegisterSimpleDescriptor::?relay`
        FUNCTION `??bdb_RegisterSimpleDescriptor::?relay`,0203H
        PUBLIC `??bdb_SendMsg::?relay`
        FUNCTION `??bdb_SendMsg::?relay`,0203H
        PUBLIC `??bdb_StartCommissioning::?relay`
        FUNCTION `??bdb_StartCommissioning::?relay`,0203H
        PUBLIC `??bdb_ZclIdentifyCmdInd::?relay`
        FUNCTION `??bdb_ZclIdentifyCmdInd::?relay`,0203H
        PUBLIC `??bdb_ZedAttemptRecoverNwk::?relay`
        FUNCTION `??bdb_ZedAttemptRecoverNwk::?relay`,0203H
        PUBLIC `??bdb_addInstallCode::?relay`
        FUNCTION `??bdb_addInstallCode::?relay`,0203H
        PUBLIC `??bdb_calculateCCITT_CRC::?relay`
        FUNCTION `??bdb_calculateCCITT_CRC::?relay`,0203H
        PUBLIC `??bdb_crcBitByBitFast::?relay`
        FUNCTION `??bdb_crcBitByBitFast::?relay`,0203H
        PUBLIC `??bdb_crcInit::?relay`
        FUNCTION `??bdb_crcInit::?relay`,0203H
        PUBLIC `??bdb_crcReflect::?relay`
        FUNCTION `??bdb_crcReflect::?relay`,0203H
        PUBLIC `??bdb_doTrustCenterRequireKeyExchange::?relay`
        FUNCTION `??bdb_doTrustCenterRequireKeyExchange::?relay`,0203H
        PUBLIC `??bdb_event_loop::?relay`
        FUNCTION `??bdb_event_loop::?relay`,0203H
        PUBLIC `??bdb_filterNwkDisc::?relay`
        FUNCTION `??bdb_filterNwkDisc::?relay`,0203H
        PUBLIC `??bdb_getZCLFrameCounter::?relay`
        FUNCTION `??bdb_getZCLFrameCounter::?relay`,0203H
        PUBLIC `??bdb_isDeviceNonFactoryNew::?relay`
        FUNCTION `??bdb_isDeviceNonFactoryNew::?relay`,0203H
        PUBLIC `??bdb_joinProcess::?relay`
        FUNCTION `??bdb_joinProcess::?relay`,0203H
        PUBLIC `??bdb_nwkAssocAttemt::?relay`
        FUNCTION `??bdb_nwkAssocAttemt::?relay`,0203H
        PUBLIC `??bdb_nwkDescFree::?relay`
        FUNCTION `??bdb_nwkDescFree::?relay`,0203H
        PUBLIC `??bdb_nwkDiscoveryAttempt::?relay`
        FUNCTION `??bdb_nwkDiscoveryAttempt::?relay`,0203H
        PUBLIC `??bdb_nwkFormationAttempt::?relay`
        FUNCTION `??bdb_nwkFormationAttempt::?relay`,0203H
        FUNCTION `??bdb_nwkJoiningFormation::?relay`,0203H
        FUNCTION `??bdb_nwkSteeringDeviceOnNwk::?relay`,0203H
        PUBLIC `??bdb_parentLost::?relay`
        FUNCTION `??bdb_parentLost::?relay`,0203H
        FUNCTION `??bdb_processTimeout::?relay`,0203H
        FUNCTION `??bdb_processZDOMgs::?relay`,0203H
        PUBLIC `??bdb_rejoinNwk::?relay`
        FUNCTION `??bdb_rejoinNwk::?relay`,0203H
        PUBLIC `??bdb_reportCommissioningState::?relay`
        FUNCTION `??bdb_reportCommissioningState::?relay`,0203H
        FUNCTION `??bdb_requestTCLinkKey::?relay`,0203H
        FUNCTION `??bdb_requestTCStackVersion::?relay`,0203H
        FUNCTION `??bdb_requestVerifyTCLinkKey::?relay`,0203H
        PUBLIC `??bdb_resetLocalAction::?relay`
        FUNCTION `??bdb_resetLocalAction::?relay`,0203H
        PUBLIC `??bdb_setActiveCentralizedLinkKey::?relay`
        FUNCTION `??bdb_setActiveCentralizedLinkKey::?relay`,0203H
        PUBLIC `??bdb_setChannel::?relay`
        FUNCTION `??bdb_setChannel::?relay`,0203H
        PUBLIC `??bdb_setChannelAttribute::?relay`
        FUNCTION `??bdb_setChannelAttribute::?relay`,0203H
        PUBLIC `??bdb_setCommissioningGroupID::?relay`
        FUNCTION `??bdb_setCommissioningGroupID::?relay`,0203H
        PUBLIC `??bdb_setFN::?relay`
        FUNCTION `??bdb_setFN::?relay`,0203H
        PUBLIC `??bdb_setNodeIsOnANetwork::?relay`
        FUNCTION `??bdb_setNodeIsOnANetwork::?relay`,0203H
        PUBLIC `??bdb_setNodeJoinLinkKeyType::?relay`
        FUNCTION `??bdb_setNodeJoinLinkKeyType::?relay`,0203H
        FUNCTION `??bdb_startResumeCommissioningProcess::?relay`,0203H
        PUBLIC `??bdb_tcLinkKeyExchangeAttempt::?relay`
        FUNCTION `??bdb_tcLinkKeyExchangeAttempt::?relay`,0203H
        PUBLIC `??bdb_touchlinkSendFNReset::?relay`
        FUNCTION `??bdb_touchlinkSendFNReset::?relay`,0203H
        FUNCTION `??bdb_tryNwkAssoc::?relay`,0203H
        PUBLIC `??bdb_zclRespondentListClean::?relay`
        FUNCTION `??bdb_zclRespondentListClean::?relay`,0203H
        PUBWEAK __Constant_0
        PUBWEAK __Constant_10
        PUBWEAK __Constant_1388
        PUBWEAK __Constant_32
        PUBWEAK __Constant_3a98
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_bb8
        PUBWEAK __Constant_c8
        PUBLIC bdbAttributes
        PUBLIC bdbCommissioningProcedureState
        PUBLIC bdb_AddRespondentNode
        FUNCTION bdb_AddRespondentNode,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bdb_CBKETCLinkKeyExchangeAttempt
        FUNCTION bdb_CBKETCLinkKeyExchangeAttempt,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bdb_ClearNetworkParams
        FUNCTION bdb_ClearNetworkParams,021203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_CreateRespondentList
        FUNCTION bdb_CreateRespondentList,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bdb_CurrEpDescriptorList
        PUBLIC bdb_FB_InitiatorCurrentCyclesNumber
        PUBLIC bdb_GenerateInstallCodeCRC
        FUNCTION bdb_GenerateInstallCodeCRC,021203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC bdb_HeadEpDescriptorList
        PUBLIC bdb_Init
        FUNCTION bdb_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bdb_NetworkRestoredResumeState
        FUNCTION bdb_NetworkRestoredResumeState,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bdb_NotifyCommissioningModeStart
        FUNCTION bdb_NotifyCommissioningModeStart,0a1203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC bdb_ProcessNodeDescRsp
        FUNCTION bdb_ProcessNodeDescRsp,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 50, STACK
        FUNCTION bdb_ProcessOSALMsg,0a1203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC bdb_RegisterCBKETCLinkKeyExchangeCB
        FUNCTION bdb_RegisterCBKETCLinkKeyExchangeCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_RegisterCommissioningStatusCB
        FUNCTION bdb_RegisterCommissioningStatusCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_RegisterForFilterNwkDescCB
        FUNCTION bdb_RegisterForFilterNwkDescCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_RegisterSimpleDescriptor
        FUNCTION bdb_RegisterSimpleDescriptor,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bdb_SendMsg
        FUNCTION bdb_SendMsg,0a1203H
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC bdb_StartCommissioning
        FUNCTION bdb_StartCommissioning,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        PUBLIC bdb_TaskID
        PUBLIC bdb_ZclIdentifyCmdInd
        FUNCTION bdb_ZclIdentifyCmdInd,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC bdb_ZclTransactionSequenceNumber
        PUBLIC bdb_ZedAttemptRecoverNwk
        FUNCTION bdb_ZedAttemptRecoverNwk,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_addInstallCode
        FUNCTION bdb_addInstallCode,0a1203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 34, STACK
        PUBLIC bdb_calculateCCITT_CRC
        FUNCTION bdb_calculateCCITT_CRC,0a1203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 26, STACK
        PUBLIC bdb_crcBitByBitFast
        FUNCTION bdb_crcBitByBitFast,0a1203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 28, STACK
        PUBLIC bdb_crcInit
        FUNCTION bdb_crcInit,080203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bdb_crcReflect
        FUNCTION bdb_crcReflect,080203H
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bdb_doTrustCenterRequireKeyExchange
        FUNCTION bdb_doTrustCenterRequireKeyExchange,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC bdb_event_loop
        FUNCTION bdb_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC bdb_filterNwkDisc
        FUNCTION bdb_filterNwkDisc,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bdb_getZCLFrameCounter
        FUNCTION bdb_getZCLFrameCounter,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_initialization
        PUBLIC bdb_isDeviceNonFactoryNew
        FUNCTION bdb_isDeviceNonFactoryNew,0203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_joinProcess
        FUNCTION bdb_joinProcess,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC bdb_nwkAssocAttemt
        FUNCTION bdb_nwkAssocAttemt,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bdb_nwkDescFree
        FUNCTION bdb_nwkDescFree,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bdb_nwkDiscoveryAttempt
        FUNCTION bdb_nwkDiscoveryAttempt,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bdb_nwkFormationAttempt
        FUNCTION bdb_nwkFormationAttempt,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION bdb_nwkJoiningFormation,021203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION bdb_nwkSteeringDeviceOnNwk,021203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bdb_parentLost
        FUNCTION bdb_parentLost,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        FUNCTION bdb_processTimeout,021203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION bdb_processZDOMgs,0a1203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bdb_rejoinNwk
        FUNCTION bdb_rejoinNwk,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC bdb_reportCommissioningState
        FUNCTION bdb_reportCommissioningState,0a1203H
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        FUNCTION bdb_requestTCLinkKey,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 17, STACK
        FUNCTION bdb_requestTCStackVersion,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        FUNCTION bdb_requestVerifyTCLinkKey,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC bdb_resetLocalAction
        FUNCTION bdb_resetLocalAction,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 5, STACK
        PUBLIC bdb_setActiveCentralizedLinkKey
        FUNCTION bdb_setActiveCentralizedLinkKey,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC bdb_setChannel
        FUNCTION bdb_setChannel,0a1203H
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        PUBLIC bdb_setChannelAttribute
        FUNCTION bdb_setChannelAttribute,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bdb_setCommissioningGroupID
        FUNCTION bdb_setCommissioningGroupID,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_setFN
        FUNCTION bdb_setFN,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_setNodeIsOnANetwork
        FUNCTION bdb_setNodeIsOnANetwork,0a1203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bdb_setNodeJoinLinkKeyType
        FUNCTION bdb_setNodeJoinLinkKeyType,0203H
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION bdb_startResumeCommissioningProcess,0a1203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 30, STACK
        PUBLIC bdb_tcLinkKeyExchangeAttempt
        FUNCTION bdb_tcLinkKeyExchangeAttempt,0a1203H
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC bdb_touchlinkSendFNReset
        FUNCTION bdb_touchlinkSendFNReset,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION bdb_tryNwkAssoc,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bdb_zclRespondentListClean
        FUNCTION bdb_zclRespondentListClean,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC pRespondentCurr
        PUBLIC pRespondentHead
        PUBLIC pRespondentNext
        PUBLIC touchLinkTargetEnabled
        PUBLIC vDoPrimaryScan
        PUBLIC zgBdbInstallCodeCRC
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
APSME_AddTCLinkKey  SYMBOL "APSME_AddTCLinkKey"
`??APSME_AddTCLinkKey::?relay` SYMBOL "?relay", APSME_AddTCLinkKey
APSME_GetRequest    SYMBOL "APSME_GetRequest"
`??APSME_GetRequest::?relay` SYMBOL "?relay", APSME_GetRequest
APSME_IsDistributedSecurity SYMBOL "APSME_IsDistributedSecurity"
`??APSME_IsDistributedSecurity::?relay` SYMBOL "?relay", APSME_IsDistributedSecurity
APSME_RequestKeyReq SYMBOL "APSME_RequestKeyReq"
`??APSME_RequestKeyReq::?relay` SYMBOL "?relay", APSME_RequestKeyReq
APSME_SetDefaultKey SYMBOL "APSME_SetDefaultKey"
`??APSME_SetDefaultKey::?relay` SYMBOL "?relay", APSME_SetDefaultKey
APSME_VerifyKeyReq  SYMBOL "APSME_VerifyKeyReq"
`??APSME_VerifyKeyReq::?relay` SYMBOL "?relay", APSME_VerifyKeyReq
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_JoinRequest    SYMBOL "NLME_JoinRequest"
`??NLME_JoinRequest::?relay` SYMBOL "?relay", NLME_JoinRequest
NLME_LeaveReq       SYMBOL "NLME_LeaveReq"
`??NLME_LeaveReq::?relay` SYMBOL "?relay", NLME_LeaveReq
NLME_NwkDiscTerm    SYMBOL "NLME_NwkDiscTerm"
`??NLME_NwkDiscTerm::?relay` SYMBOL "?relay", NLME_NwkDiscTerm
NLME_OrphanStateSet SYMBOL "NLME_OrphanStateSet"
`??NLME_OrphanStateSet::?relay` SYMBOL "?relay", NLME_OrphanStateSet
NLME_ReJoinRequest  SYMBOL "NLME_ReJoinRequest"
`??NLME_ReJoinRequest::?relay` SYMBOL "?relay", NLME_ReJoinRequest
NLME_ReJoinRequestUnsecure SYMBOL "NLME_ReJoinRequestUnsecure"
`??NLME_ReJoinRequestUnsecure::?relay` SYMBOL "?relay", NLME_ReJoinRequestUnsecure
NLME_ResetRequest   SYMBOL "NLME_ResetRequest"
`??NLME_ResetRequest::?relay` SYMBOL "?relay", NLME_ResetRequest
NLME_SetPollRate    SYMBOL "NLME_SetPollRate"
`??NLME_SetPollRate::?relay` SYMBOL "?relay", NLME_SetPollRate
NLME_SetQueuedPollRate SYMBOL "NLME_SetQueuedPollRate"
`??NLME_SetQueuedPollRate::?relay` SYMBOL "?relay", NLME_SetQueuedPollRate
NLME_SetResponseRate SYMBOL "NLME_SetResponseRate"
`??NLME_SetResponseRate::?relay` SYMBOL "?relay", NLME_SetResponseRate
ZDApp_ChangeState   SYMBOL "ZDApp_ChangeState"
`??ZDApp_ChangeState::?relay` SYMBOL "?relay", ZDApp_ChangeState
ZDApp_NetworkInit   SYMBOL "ZDApp_NetworkInit"
`??ZDApp_NetworkInit::?relay` SYMBOL "?relay", ZDApp_NetworkInit
ZDApp_NodeProfileSync SYMBOL "ZDApp_NodeProfileSync"
`??ZDApp_NodeProfileSync::?relay` SYMBOL "?relay", ZDApp_NodeProfileSync
ZDApp_ResetTimerStart SYMBOL "ZDApp_ResetTimerStart"
`??ZDApp_ResetTimerStart::?relay` SYMBOL "?relay", ZDApp_ResetTimerStart
ZDApp_RestoreNwkKey SYMBOL "ZDApp_RestoreNwkKey"
`??ZDApp_RestoreNwkKey::?relay` SYMBOL "?relay", ZDApp_RestoreNwkKey
ZDApp_RestoreNwkSecMaterial SYMBOL "ZDApp_RestoreNwkSecMaterial"
`??ZDApp_RestoreNwkSecMaterial::?relay` SYMBOL "?relay", ZDApp_RestoreNwkSecMaterial
ZDOInitDeviceEx     SYMBOL "ZDOInitDeviceEx"
`??ZDOInitDeviceEx::?relay` SYMBOL "?relay", ZDOInitDeviceEx
ZDO_ParseNodeDescRsp SYMBOL "ZDO_ParseNodeDescRsp"
`??ZDO_ParseNodeDescRsp::?relay` SYMBOL "?relay", ZDO_ParseNodeDescRsp
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
`??ZDO_RegisterForZDOMsg::?relay` SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDP_MgmtPermitJoinReq SYMBOL "ZDP_MgmtPermitJoinReq"
`??ZDP_MgmtPermitJoinReq::?relay` SYMBOL "?relay", ZDP_MgmtPermitJoinReq
ZDP_NWKAddrOfInterestReq SYMBOL "ZDP_NWKAddrOfInterestReq"
`??ZDP_NWKAddrOfInterestReq::?relay` SYMBOL "?relay", ZDP_NWKAddrOfInterestReq
ZMacGetReq          SYMBOL "ZMacGetReq"
`??ZMacGetReq::?relay` SYMBOL "?relay", ZMacGetReq
ZMacSetReq          SYMBOL "ZMacSetReq"
`??ZMacSetReq::?relay` SYMBOL "?relay", ZMacSetReq
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
bdb_ProcessIEEEAddrRsp SYMBOL "bdb_ProcessIEEEAddrRsp"
`??bdb_ProcessIEEEAddrRsp::?relay` SYMBOL "?relay", bdb_ProcessIEEEAddrRsp
bdb_ProcessRespondentList SYMBOL "bdb_ProcessRespondentList"
`??bdb_ProcessRespondentList::?relay` SYMBOL "?relay", bdb_ProcessRespondentList
bdb_ProcessSimpleDesc SYMBOL "bdb_ProcessSimpleDesc"
`??bdb_ProcessSimpleDesc::?relay` SYMBOL "?relay", bdb_ProcessSimpleDesc
bdb_SendIdentifyQuery SYMBOL "bdb_SendIdentifyQuery"
`??bdb_SendIdentifyQuery::?relay` SYMBOL "?relay", bdb_SendIdentifyQuery
bdb_exitFindingBindingWStatus SYMBOL "bdb_exitFindingBindingWStatus"
`??bdb_exitFindingBindingWStatus::?relay` SYMBOL "?relay", bdb_exitFindingBindingWStatus
bdb_getRespondentRetry SYMBOL "bdb_getRespondentRetry"
`??bdb_getRespondentRetry::?relay` SYMBOL "?relay", bdb_getRespondentRetry
bdb_setEpDescListToActiveEndpoint SYMBOL "bdb_setEpDescListToActiveEndpoint"
`??bdb_setEpDescListToActiveEndpoint::?relay` SYMBOL "?relay", bdb_setEpDescListToActiveEndpoint
initiatorSelectNwkParams SYMBOL "initiatorSelectNwkParams"
`??initiatorSelectNwkParams::?relay` SYMBOL "?relay", initiatorSelectNwkParams
nwkNeighborInitTable SYMBOL "nwkNeighborInitTable"
`??nwkNeighborInitTable::?relay` SYMBOL "?relay", nwkNeighborInitTable
nwk_ExtPANIDValid   SYMBOL "nwk_ExtPANIDValid"
`??nwk_ExtPANIDValid::?relay` SYMBOL "?relay", nwk_ExtPANIDValid
nwk_desc_list_free  SYMBOL "nwk_desc_list_free"
`??nwk_desc_list_free::?relay` SYMBOL "?relay", nwk_desc_list_free
nwk_desc_list_release SYMBOL "nwk_desc_list_release"
`??nwk_desc_list_release::?relay` SYMBOL "?relay", nwk_desc_list_release
nwk_getNwkDescList  SYMBOL "nwk_getNwkDescList"
`??nwk_getNwkDescList::?relay` SYMBOL "?relay", nwk_getNwkDescList
nwk_setStateIdle    SYMBOL "nwk_setStateIdle"
`??nwk_setStateIdle::?relay` SYMBOL "?relay", nwk_setStateIdle
osal_build_uint16   SYMBOL "osal_build_uint16"
`??osal_build_uint16::?relay` SYMBOL "?relay", osal_build_uint16
osal_get_timeoutEx  SYMBOL "osal_get_timeoutEx"
`??osal_get_timeoutEx::?relay` SYMBOL "?relay", osal_get_timeoutEx
osal_isbufset       SYMBOL "osal_isbufset"
`??osal_isbufset::?relay` SYMBOL "?relay", osal_isbufset
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_pwrmgr_device  SYMBOL "osal_pwrmgr_device"
`??osal_pwrmgr_device::?relay` SYMBOL "?relay", osal_pwrmgr_device
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
sAddrExtCmp         SYMBOL "sAddrExtCmp"
`??sAddrExtCmp::?relay` SYMBOL "?relay", sAddrExtCmp
sspMMOHash          SYMBOL "sspMMOHash"
`??sspMMOHash::?relay` SYMBOL "?relay", sspMMOHash
touchLinkInitiator_InitDevice SYMBOL "touchLinkInitiator_InitDevice"
`??touchLinkInitiator_InitDevice::?relay` SYMBOL "?relay", touchLinkInitiator_InitDevice
touchLinkInitiator_ResetToFNProcedure SYMBOL "touchLinkInitiator_ResetToFNProcedure"
`??touchLinkInitiator_ResetToFNProcedure::?relay` SYMBOL "?relay", touchLinkInitiator_ResetToFNProcedure
touchLinkInitiator_StartDevDisc SYMBOL "touchLinkInitiator_StartDevDisc"
`??touchLinkInitiator_StartDevDisc::?relay` SYMBOL "?relay", touchLinkInitiator_StartDevDisc
touchLink_InitFreeRanges SYMBOL "touchLink_InitFreeRanges"
`??touchLink_InitFreeRanges::?relay` SYMBOL "?relay", touchLink_InitFreeRanges
touchLink_SetMacNwkParams SYMBOL "touchLink_SetMacNwkParams"
`??touchLink_SetMacNwkParams::?relay` SYMBOL "?relay", touchLink_SetMacNwkParams
touchLink_UpdateNV  SYMBOL "touchLink_UpdateNV"
`??touchLink_UpdateNV::?relay` SYMBOL "?relay", touchLink_UpdateNV
zclFindAttrRec      SYMBOL "zclFindAttrRec"
`??zclFindAttrRec::?relay` SYMBOL "?relay", zclFindAttrRec
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions
bdb_AddRespondentNode SYMBOL "bdb_AddRespondentNode"
`??bdb_AddRespondentNode::?relay` SYMBOL "?relay", bdb_AddRespondentNode
bdb_CBKETCLinkKeyExchangeAttempt SYMBOL "bdb_CBKETCLinkKeyExchangeAttempt"
`??bdb_CBKETCLinkKeyExchangeAttempt::?relay` SYMBOL "?relay", bdb_CBKETCLinkKeyExchangeAttempt
bdb_ClearNetworkParams SYMBOL "bdb_ClearNetworkParams"
`??bdb_ClearNetworkParams::?relay` SYMBOL "?relay", bdb_ClearNetworkParams
bdb_CreateRespondentList SYMBOL "bdb_CreateRespondentList"
`??bdb_CreateRespondentList::?relay` SYMBOL "?relay", bdb_CreateRespondentList
bdb_GenerateInstallCodeCRC SYMBOL "bdb_GenerateInstallCodeCRC"
`??bdb_GenerateInstallCodeCRC::?relay` SYMBOL "?relay", bdb_GenerateInstallCodeCRC
bdb_Init            SYMBOL "bdb_Init"
`??bdb_Init::?relay` SYMBOL "?relay", bdb_Init
bdb_NetworkRestoredResumeState SYMBOL "bdb_NetworkRestoredResumeState"
`??bdb_NetworkRestoredResumeState::?relay` SYMBOL "?relay", bdb_NetworkRestoredResumeState
bdb_NotifyCommissioningModeStart SYMBOL "bdb_NotifyCommissioningModeStart"
`??bdb_NotifyCommissioningModeStart::?relay` SYMBOL "?relay", bdb_NotifyCommissioningModeStart
bdb_ProcessNodeDescRsp SYMBOL "bdb_ProcessNodeDescRsp"
`??bdb_ProcessNodeDescRsp::?relay` SYMBOL "?relay", bdb_ProcessNodeDescRsp
bdb_RegisterCBKETCLinkKeyExchangeCB SYMBOL "bdb_RegisterCBKETCLinkKeyExchangeCB"
`??bdb_RegisterCBKETCLinkKeyExchangeCB::?relay` SYMBOL "?relay", bdb_RegisterCBKETCLinkKeyExchangeCB
bdb_RegisterCommissioningStatusCB SYMBOL "bdb_RegisterCommissioningStatusCB"
`??bdb_RegisterCommissioningStatusCB::?relay` SYMBOL "?relay", bdb_RegisterCommissioningStatusCB
bdb_RegisterForFilterNwkDescCB SYMBOL "bdb_RegisterForFilterNwkDescCB"
`??bdb_RegisterForFilterNwkDescCB::?relay` SYMBOL "?relay", bdb_RegisterForFilterNwkDescCB
bdb_RegisterSimpleDescriptor SYMBOL "bdb_RegisterSimpleDescriptor"
`??bdb_RegisterSimpleDescriptor::?relay` SYMBOL "?relay", bdb_RegisterSimpleDescriptor
bdb_SendMsg         SYMBOL "bdb_SendMsg"
`??bdb_SendMsg::?relay` SYMBOL "?relay", bdb_SendMsg
bdb_StartCommissioning SYMBOL "bdb_StartCommissioning"
`??bdb_StartCommissioning::?relay` SYMBOL "?relay", bdb_StartCommissioning
bdb_ZclIdentifyCmdInd SYMBOL "bdb_ZclIdentifyCmdInd"
`??bdb_ZclIdentifyCmdInd::?relay` SYMBOL "?relay", bdb_ZclIdentifyCmdInd
bdb_ZedAttemptRecoverNwk SYMBOL "bdb_ZedAttemptRecoverNwk"
`??bdb_ZedAttemptRecoverNwk::?relay` SYMBOL "?relay", bdb_ZedAttemptRecoverNwk
bdb_addInstallCode  SYMBOL "bdb_addInstallCode"
`??bdb_addInstallCode::?relay` SYMBOL "?relay", bdb_addInstallCode
bdb_calculateCCITT_CRC SYMBOL "bdb_calculateCCITT_CRC"
`??bdb_calculateCCITT_CRC::?relay` SYMBOL "?relay", bdb_calculateCCITT_CRC
bdb_crcBitByBitFast SYMBOL "bdb_crcBitByBitFast"
`??bdb_crcBitByBitFast::?relay` SYMBOL "?relay", bdb_crcBitByBitFast
bdb_crcInit         SYMBOL "bdb_crcInit"
`??bdb_crcInit::?relay` SYMBOL "?relay", bdb_crcInit
bdb_crcReflect      SYMBOL "bdb_crcReflect"
`??bdb_crcReflect::?relay` SYMBOL "?relay", bdb_crcReflect
bdb_doTrustCenterRequireKeyExchange SYMBOL "bdb_doTrustCenterRequireKeyExchange"
`??bdb_doTrustCenterRequireKeyExchange::?relay` SYMBOL "?relay", bdb_doTrustCenterRequireKeyExchange
bdb_event_loop      SYMBOL "bdb_event_loop"
`??bdb_event_loop::?relay` SYMBOL "?relay", bdb_event_loop
bdb_filterNwkDisc   SYMBOL "bdb_filterNwkDisc"
`??bdb_filterNwkDisc::?relay` SYMBOL "?relay", bdb_filterNwkDisc
bdb_getZCLFrameCounter SYMBOL "bdb_getZCLFrameCounter"
`??bdb_getZCLFrameCounter::?relay` SYMBOL "?relay", bdb_getZCLFrameCounter
bdb_isDeviceNonFactoryNew SYMBOL "bdb_isDeviceNonFactoryNew"
`??bdb_isDeviceNonFactoryNew::?relay` SYMBOL "?relay", bdb_isDeviceNonFactoryNew
bdb_joinProcess     SYMBOL "bdb_joinProcess"
`??bdb_joinProcess::?relay` SYMBOL "?relay", bdb_joinProcess
bdb_nwkAssocAttemt  SYMBOL "bdb_nwkAssocAttemt"
`??bdb_nwkAssocAttemt::?relay` SYMBOL "?relay", bdb_nwkAssocAttemt
bdb_nwkDescFree     SYMBOL "bdb_nwkDescFree"
`??bdb_nwkDescFree::?relay` SYMBOL "?relay", bdb_nwkDescFree
bdb_nwkDiscoveryAttempt SYMBOL "bdb_nwkDiscoveryAttempt"
`??bdb_nwkDiscoveryAttempt::?relay` SYMBOL "?relay", bdb_nwkDiscoveryAttempt
bdb_nwkFormationAttempt SYMBOL "bdb_nwkFormationAttempt"
`??bdb_nwkFormationAttempt::?relay` SYMBOL "?relay", bdb_nwkFormationAttempt
bdb_parentLost      SYMBOL "bdb_parentLost"
`??bdb_parentLost::?relay` SYMBOL "?relay", bdb_parentLost
bdb_rejoinNwk       SYMBOL "bdb_rejoinNwk"
`??bdb_rejoinNwk::?relay` SYMBOL "?relay", bdb_rejoinNwk
bdb_reportCommissioningState SYMBOL "bdb_reportCommissioningState"
`??bdb_reportCommissioningState::?relay` SYMBOL "?relay", bdb_reportCommissioningState
bdb_resetLocalAction SYMBOL "bdb_resetLocalAction"
`??bdb_resetLocalAction::?relay` SYMBOL "?relay", bdb_resetLocalAction
bdb_setActiveCentralizedLinkKey SYMBOL "bdb_setActiveCentralizedLinkKey"
`??bdb_setActiveCentralizedLinkKey::?relay` SYMBOL "?relay", bdb_setActiveCentralizedLinkKey
bdb_setChannel      SYMBOL "bdb_setChannel"
`??bdb_setChannel::?relay` SYMBOL "?relay", bdb_setChannel
bdb_setChannelAttribute SYMBOL "bdb_setChannelAttribute"
`??bdb_setChannelAttribute::?relay` SYMBOL "?relay", bdb_setChannelAttribute
bdb_setCommissioningGroupID SYMBOL "bdb_setCommissioningGroupID"
`??bdb_setCommissioningGroupID::?relay` SYMBOL "?relay", bdb_setCommissioningGroupID
bdb_setFN           SYMBOL "bdb_setFN"
`??bdb_setFN::?relay` SYMBOL "?relay", bdb_setFN
bdb_setNodeIsOnANetwork SYMBOL "bdb_setNodeIsOnANetwork"
`??bdb_setNodeIsOnANetwork::?relay` SYMBOL "?relay", bdb_setNodeIsOnANetwork
bdb_setNodeJoinLinkKeyType SYMBOL "bdb_setNodeJoinLinkKeyType"
`??bdb_setNodeJoinLinkKeyType::?relay` SYMBOL "?relay", bdb_setNodeJoinLinkKeyType
bdb_tcLinkKeyExchangeAttempt SYMBOL "bdb_tcLinkKeyExchangeAttempt"
`??bdb_tcLinkKeyExchangeAttempt::?relay` SYMBOL "?relay", bdb_tcLinkKeyExchangeAttempt
bdb_touchlinkSendFNReset SYMBOL "bdb_touchlinkSendFNReset"
`??bdb_touchlinkSendFNReset::?relay` SYMBOL "?relay", bdb_touchlinkSendFNReset
bdb_zclRespondentListClean SYMBOL "bdb_zclRespondentListClean"
`??bdb_zclRespondentListClean::?relay` SYMBOL "?relay", bdb_zclRespondentListClean

        EXTERN `??APSME_AddTCLinkKey::?relay`
        FUNCTION `??APSME_AddTCLinkKey::?relay`,00H
        EXTERN `??APSME_GetRequest::?relay`
        FUNCTION `??APSME_GetRequest::?relay`,00H
        EXTERN `??APSME_IsDistributedSecurity::?relay`
        FUNCTION `??APSME_IsDistributedSecurity::?relay`,00H
        EXTERN `??APSME_RequestKeyReq::?relay`
        FUNCTION `??APSME_RequestKeyReq::?relay`,00H
        EXTERN `??APSME_SetDefaultKey::?relay`
        FUNCTION `??APSME_SetDefaultKey::?relay`,00H
        EXTERN `??APSME_VerifyKeyReq::?relay`
        FUNCTION `??APSME_VerifyKeyReq::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_JoinRequest::?relay`
        FUNCTION `??NLME_JoinRequest::?relay`,00H
        EXTERN `??NLME_LeaveReq::?relay`
        FUNCTION `??NLME_LeaveReq::?relay`,00H
        EXTERN `??NLME_NwkDiscTerm::?relay`
        FUNCTION `??NLME_NwkDiscTerm::?relay`,00H
        EXTERN `??NLME_OrphanStateSet::?relay`
        FUNCTION `??NLME_OrphanStateSet::?relay`,00H
        EXTERN `??NLME_ReJoinRequest::?relay`
        FUNCTION `??NLME_ReJoinRequest::?relay`,00H
        EXTERN `??NLME_ReJoinRequestUnsecure::?relay`
        FUNCTION `??NLME_ReJoinRequestUnsecure::?relay`,00H
        EXTERN `??NLME_ResetRequest::?relay`
        FUNCTION `??NLME_ResetRequest::?relay`,00H
        EXTERN `??NLME_SetPollRate::?relay`
        FUNCTION `??NLME_SetPollRate::?relay`,00H
        EXTERN `??NLME_SetQueuedPollRate::?relay`
        FUNCTION `??NLME_SetQueuedPollRate::?relay`,00H
        EXTERN `??NLME_SetResponseRate::?relay`
        FUNCTION `??NLME_SetResponseRate::?relay`,00H
        EXTERN `??ZDApp_ChangeState::?relay`
        FUNCTION `??ZDApp_ChangeState::?relay`,00H
        EXTERN `??ZDApp_NetworkInit::?relay`
        FUNCTION `??ZDApp_NetworkInit::?relay`,00H
        EXTERN `??ZDApp_NodeProfileSync::?relay`
        FUNCTION `??ZDApp_NodeProfileSync::?relay`,00H
        EXTERN `??ZDApp_ResetTimerStart::?relay`
        FUNCTION `??ZDApp_ResetTimerStart::?relay`,00H
        EXTERN `??ZDApp_RestoreNwkKey::?relay`
        FUNCTION `??ZDApp_RestoreNwkKey::?relay`,00H
        EXTERN `??ZDApp_RestoreNwkSecMaterial::?relay`
        FUNCTION `??ZDApp_RestoreNwkSecMaterial::?relay`,00H
        EXTERN `??ZDOInitDeviceEx::?relay`
        FUNCTION `??ZDOInitDeviceEx::?relay`,00H
        EXTERN `??ZDO_ParseNodeDescRsp::?relay`
        FUNCTION `??ZDO_ParseNodeDescRsp::?relay`,00H
        EXTERN `??ZDO_RegisterForZDOMsg::?relay`
        FUNCTION `??ZDO_RegisterForZDOMsg::?relay`,00H
        EXTERN `??ZDP_MgmtPermitJoinReq::?relay`
        FUNCTION `??ZDP_MgmtPermitJoinReq::?relay`,00H
        EXTERN `??ZDP_NWKAddrOfInterestReq::?relay`
        FUNCTION `??ZDP_NWKAddrOfInterestReq::?relay`,00H
        EXTERN `??ZMacGetReq::?relay`
        FUNCTION `??ZMacGetReq::?relay`,00H
        EXTERN `??ZMacSetReq::?relay`
        FUNCTION `??ZMacSetReq::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??bdb_ProcessIEEEAddrRsp::?relay`
        FUNCTION `??bdb_ProcessIEEEAddrRsp::?relay`,00H
        EXTERN `??bdb_ProcessRespondentList::?relay`
        FUNCTION `??bdb_ProcessRespondentList::?relay`,00H
        EXTERN `??bdb_ProcessSimpleDesc::?relay`
        FUNCTION `??bdb_ProcessSimpleDesc::?relay`,00H
        EXTERN `??bdb_SendIdentifyQuery::?relay`
        FUNCTION `??bdb_SendIdentifyQuery::?relay`,00H
        EXTERN `??bdb_exitFindingBindingWStatus::?relay`
        FUNCTION `??bdb_exitFindingBindingWStatus::?relay`,00H
        EXTERN `??bdb_getRespondentRetry::?relay`
        FUNCTION `??bdb_getRespondentRetry::?relay`,00H
        EXTERN `??bdb_setEpDescListToActiveEndpoint::?relay`
        FUNCTION `??bdb_setEpDescListToActiveEndpoint::?relay`,00H
        EXTERN `??initiatorSelectNwkParams::?relay`
        FUNCTION `??initiatorSelectNwkParams::?relay`,00H
        EXTERN `??nwkNeighborInitTable::?relay`
        FUNCTION `??nwkNeighborInitTable::?relay`,00H
        EXTERN `??nwk_ExtPANIDValid::?relay`
        FUNCTION `??nwk_ExtPANIDValid::?relay`,00H
        EXTERN `??nwk_desc_list_free::?relay`
        FUNCTION `??nwk_desc_list_free::?relay`,00H
        EXTERN `??nwk_desc_list_release::?relay`
        FUNCTION `??nwk_desc_list_release::?relay`,00H
        EXTERN `??nwk_getNwkDescList::?relay`
        FUNCTION `??nwk_getNwkDescList::?relay`,00H
        EXTERN `??nwk_setStateIdle::?relay`
        FUNCTION `??nwk_setStateIdle::?relay`,00H
        EXTERN `??osal_build_uint16::?relay`
        FUNCTION `??osal_build_uint16::?relay`,00H
        EXTERN `??osal_get_timeoutEx::?relay`
        FUNCTION `??osal_get_timeoutEx::?relay`,00H
        EXTERN `??osal_isbufset::?relay`
        FUNCTION `??osal_isbufset::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_pwrmgr_device::?relay`
        FUNCTION `??osal_pwrmgr_device::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??sAddrExtCmp::?relay`
        FUNCTION `??sAddrExtCmp::?relay`,00H
        EXTERN `??sspMMOHash::?relay`
        FUNCTION `??sspMMOHash::?relay`,00H
        EXTERN `??touchLinkInitiator_InitDevice::?relay`
        FUNCTION `??touchLinkInitiator_InitDevice::?relay`,00H
        EXTERN `??touchLinkInitiator_ResetToFNProcedure::?relay`
        FUNCTION `??touchLinkInitiator_ResetToFNProcedure::?relay`,00H
        EXTERN `??touchLinkInitiator_StartDevDisc::?relay`
        FUNCTION `??touchLinkInitiator_StartDevDisc::?relay`,00H
        EXTERN `??touchLink_InitFreeRanges::?relay`
        FUNCTION `??touchLink_InitFreeRanges::?relay`,00H
        EXTERN `??touchLink_SetMacNwkParams::?relay`
        FUNCTION `??touchLink_SetMacNwkParams::?relay`,00H
        EXTERN `??touchLink_UpdateNV::?relay`
        FUNCTION `??touchLink_UpdateNV::?relay`,00H
        EXTERN `??zclFindAttrRec::?relay`
        FUNCTION `??zclFindAttrRec::?relay`,00H
        EXTERN `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,00H
        EXTERN AIB_apsTrustCenterAddress
        EXTERN APSME_AddTCLinkKey
        FUNCTION APSME_AddTCLinkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_GetRequest
        FUNCTION APSME_GetRequest,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_IsDistributedSecurity
        FUNCTION APSME_IsDistributedSecurity,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_RequestKeyReq
        FUNCTION APSME_RequestKeyReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_SetDefaultKey
        FUNCTION APSME_SetDefaultKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_VerifyKeyReq
        FUNCTION APSME_VerifyKeyReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_JoinRequest
        FUNCTION NLME_JoinRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveReq
        FUNCTION NLME_LeaveReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_NwkDiscTerm
        FUNCTION NLME_NwkDiscTerm,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_OrphanStateSet
        FUNCTION NLME_OrphanStateSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_ReJoinRequest
        FUNCTION NLME_ReJoinRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_ReJoinRequestUnsecure
        FUNCTION NLME_ReJoinRequestUnsecure,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_ResetRequest
        FUNCTION NLME_ResetRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetPollRate
        FUNCTION NLME_SetPollRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetQueuedPollRate
        FUNCTION NLME_SetQueuedPollRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetResponseRate
        FUNCTION NLME_SetResponseRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN TCLinkKeyFrmCntr
        EXTERN ZDApp_ChangeState
        FUNCTION ZDApp_ChangeState,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_NetworkInit
        FUNCTION ZDApp_NetworkInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_NodeProfileSync
        FUNCTION ZDApp_NodeProfileSync,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_ResetTimerStart
        FUNCTION ZDApp_ResetTimerStart,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_RestoreNwkKey
        FUNCTION ZDApp_RestoreNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_RestoreNwkSecMaterial
        FUNCTION ZDApp_RestoreNwkSecMaterial,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_SavedPollRate
        EXTERN ZDOInitDeviceEx
        FUNCTION ZDOInitDeviceEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_Config_Node_Descriptor
        EXTERN ZDO_ParseNodeDescRsp
        FUNCTION ZDO_ParseNodeDescRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_UseExtendedPANID
        EXTERN ZDP_MgmtPermitJoinReq
        FUNCTION ZDP_MgmtPermitJoinReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NWKAddrOfInterestReq
        FUNCTION ZDP_NWKAddrOfInterestReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacGetReq
        FUNCTION ZMacGetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdbIndentifyActiveEndpoint
        EXTERN bdb_ProcessIEEEAddrRsp
        FUNCTION bdb_ProcessIEEEAddrRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_ProcessRespondentList
        FUNCTION bdb_ProcessRespondentList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_ProcessSimpleDesc
        FUNCTION bdb_ProcessSimpleDesc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_SendIdentifyQuery
        FUNCTION bdb_SendIdentifyQuery,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_exitFindingBindingWStatus
        FUNCTION bdb_exitFindingBindingWStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_getRespondentRetry
        FUNCTION bdb_getRespondentRetry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_setEpDescListToActiveEndpoint
        FUNCTION bdb_setEpDescListToActiveEndpoint,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN devStartMode
        EXTERN gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY
        EXTERN initiatorSelectNwkParams
        FUNCTION initiatorSelectNwkParams,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwkNeighborInitTable
        FUNCTION nwkNeighborInitTable,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_ExtPANIDValid
        FUNCTION nwk_ExtPANIDValid,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_desc_list_free
        FUNCTION nwk_desc_list_free,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_desc_list_release
        FUNCTION nwk_desc_list_release,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_getNwkDescList
        FUNCTION nwk_getNwkDescList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_setStateIdle
        FUNCTION nwk_setStateIdle,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint16
        FUNCTION osal_build_uint16,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_get_timeoutEx
        FUNCTION osal_get_timeoutEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_isbufset
        FUNCTION osal_isbufset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_pwrmgr_device
        FUNCTION osal_pwrmgr_device,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN pbindAddEntry
        EXTERN pfnIdentifyTimeChangeCB
        EXTERN requestLinkKeyTimeout
        EXTERN requestNewTrustCenterLinkKey
        EXTERN runtimeChannel
        EXTERN sAddrExtCmp
        FUNCTION sAddrExtCmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sspMMOHash
        FUNCTION sspMMOHash,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN touchLinkInitiator_InitDevice
        FUNCTION touchLinkInitiator_InitDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN touchLinkInitiator_ResetToFNProcedure
        FUNCTION touchLinkInitiator_ResetToFNProcedure,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN touchLinkInitiator_StartDevDisc
        FUNCTION touchLinkInitiator_StartDevDisc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN touchLink_InitFreeRanges
        FUNCTION touchLink_InitFreeRanges,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN touchLink_SetMacNwkParams
        FUNCTION touchLink_SetMacNwkParams,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN touchLink_UpdateNV
        FUNCTION touchLink_UpdateNV,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN touchlinkFNReset
        EXTERN zclFindAttrRec
        FUNCTION zclFindAttrRec,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_TaskID
        EXTERN zgChildAgingEnable
        EXTERN zgConfigPANID
        EXTERN zgDefaultChannelList
        EXTERN zgDeviceLogicalType
        EXTERN zgPollRate
        EXTERN zgRejoinPollRate
        EXTERN zgStackProfile
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\AA\Z-Stack 3.0.2\Components\stack\bdb\bdb.c
//    1 /**************************************************************************************************
//    2   Filename:       bdb.c
//    3   Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
//    4   Revision:       $Revision: - $
//    5 
//    6   Description:    This file contains the Base Device Behavior functions and attributes.
//    7 
//    8 
//    9   Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 
//   44 #include "bdb.h"
//   45 #include "ZDApp.h"
//   46 #include "OSAL.h"
//   47 #include "ZDConfig.h"
//   48 #include "hal_led.h"
//   49 #include "ZDObject.h"
//   50 #include "OSAL_Nv.h"
//   51 #include "AddrMgr.h"
//   52 #include "ZDSecMgr.h"
//   53 #include "nwk.h"
//   54 #include "nwk_util.h"
//   55 #include "ssp_hash.h"
//   56 #ifdef BDB_REPORTING
//   57 #include "bdb_Reporting.h"
//   58 #endif 
//   59 
//   60 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
//   61 #include "gp_interface.h"
//   62 #include "gp_common.h"
//   63 #include "dgp_stub.h"
//   64 #endif
//   65 
//   66 #include "bdb_interface.h"
//   67 
//   68 #if defined ( INTER_PAN ) 
//   69 #if defined ( BDB_TL_INITIATOR )  
//   70 #include "bdb_touchlink_initiator.h"
//   71 #endif
//   72 #if defined ( BDB_TL_TARGET )  
//   73 #include "bdb_touchlink_target.h"
//   74 #endif
//   75 #endif
//   76    
//   77 #if defined ( INTER_PAN ) && ( defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET ) )
//   78   #include "bdb_touchlink.h"
//   79 #endif
//   80  
//   81 #ifdef MT_APP_CNF_FUNC
//   82 #include "MT_APP_CONFIG.h"
//   83 #endif
//   84 
//   85 #include "OSAL_PwrMgr.h"
//   86  /*********************************************************************
//   87  * MACROS
//   88  */
//   89 //This is actually the channels used
//   90 #define vScanChannels  zgDefaultChannelList
//   91    
//   92  /*********************************************************************
//   93  * CONSTANTS
//   94  */
//   95 
//   96 #define NUMBER_OF_CHANNELS     16
//   97 
//   98 #define CHANNEL_11_MASK_POS    11
//   99 #define CHANNEL_26_MASK_POS    26
//  100    

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  101 uint8 bdb_FB_InitiatorCurrentCyclesNumber = 0; //last cycle is #1 (i.e. cycles-left = (bdb_FB_InitiatorCurrentCyclesNumber - 1))
bdb_FB_InitiatorCurrentCyclesNumber:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  102 
//  103 /*********************************************************************
//  104  * TYPEDEFS
//  105  */
//  106  
//  107  
//  108  /*********************************************************************
//  109  * GLOBAL VARIABLES
//  110  */
//  111 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  112 byte bdb_TaskID;
bdb_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  113 bdbAttributes_t bdbAttributes = BDB_ATTRIBUTES_DEFAULT_CONFIG;
bdbAttributes:
        DATA8
        DS 19
        REQUIRE `?<Initializer for bdbAttributes>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  114 epList_t *bdb_HeadEpDescriptorList = NULL;
bdb_HeadEpDescriptorList:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  115 epList_t *bdb_CurrEpDescriptorList = NULL;
bdb_CurrEpDescriptorList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  116 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  117 bdbFindingBindingRespondent_t *pRespondentHead = NULL;
pRespondentHead:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  118 bdbFindingBindingRespondent_t *pRespondentCurr = NULL;
pRespondentCurr:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  119 bdbFindingBindingRespondent_t *pRespondentNext = NULL;
pRespondentNext:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  120 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  121 bdbCommissioningProcedureState_t bdbCommissioningProcedureState; 
bdbCommissioningProcedureState:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  122 bool bdb_initialization = FALSE;  //Variable to tell if the initialization process has been started
bdb_initialization:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  123 
//  124 //Nwk formation and nwk steering for nodes not in nwk

        RSEG XDATA_I:XDATA:NOROOT(0)
//  125 bool vDoPrimaryScan = TRUE;
vDoPrimaryScan:
        DATA8
        DS 1
        REQUIRE `?<Initializer for vDoPrimaryScan>`
        REQUIRE __INIT_XDATA_I
//  126 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  127 uint8 zgBdbInstallCodeCRC[INSTALL_CODE_LEN + INSTALL_CODE_CRC_LEN] = {0x83,0xFE,0xD3,0x40,0x7A,0x93,0x97,0x23,0xA5,0xC6,0x39,0xB2,0x69,0x16,0xD5,0x05,0xC3,0xB5};
zgBdbInstallCodeCRC:
        DATA8
        DS 18
        REQUIRE `?<Initializer for zgBdbInstallCodeCRC>`
        REQUIRE __INIT_XDATA_I
//  128 
//  129 //Pointer of the nwk being tried in association process
//  130 #if (ZG_BUILD_JOINING_TYPE)

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  131 static networkDesc_t *pBDBListNwk = NULL;
pBDBListNwk:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  132 #endif
//  133 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  134 uint8 bdb_ZclTransactionSequenceNumber=0x00;
bdb_ZclTransactionSequenceNumber:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  135 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  136 bool touchLinkTargetEnabled = FALSE;
touchLinkTargetEnabled:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  137 
//  138  /*********************************************************************
//  139  * EXTERNAL VARIABLES
//  140  */
//  141 
//  142 extern devStartModes_t devStartMode;
//  143 extern bool  requestNewTrustCenterLinkKey;
//  144 extern uint32 requestLinkKeyTimeout;
//  145 extern uint32 ZDApp_SavedPollRate;
//  146 
//  147 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
//  148 extern bdbGCB_IdentifyTimeChange_t pfnIdentifyTimeChangeCB;
//  149 extern uint8 bdbIndentifyActiveEndpoint;
//  150 #endif
//  151 
//  152 extern bdbFindingBindingRespondent_t *pRespondentNext;
//  153 
//  154 #ifndef DISABLE_GREENPOWER_BASIC_PROXY
//  155 extern ZDO_DeviceAnnce_t aliasConflictAnnce;
//  156 #endif
//  157 
//  158 /*********************************************************************
//  159  * EXTERNAL FUNCTIONS
//  160  */
//  161 
//  162 extern void ZDApp_ResetTimerStart( uint16 delay );
//  163 extern void ZDApp_NodeProfileSync( uint8 stackProfile );
//  164 extern uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt );
//  165 extern uint8 ZDApp_ReadNetworkRestoreState( void );
//  166 
//  167 extern bdbFindingBindingRespondent_t* bdb_getRespondentRetry(bdbFindingBindingRespondent_t* pRespondentHead);
//  168 extern void bdb_ProcessSimpleDesc( zdoIncomingMsg_t *msgPtr );
//  169 extern void bdb_ProcessIEEEAddrRsp(zdoIncomingMsg_t *pMsg);
//  170 
//  171 /*********************************************************************
//  172  * LOCAL VARIABLES
//  173  */
//  174 #if (ZG_BUILD_JOINING_TYPE)

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  175   static uint8 bdb_nwkAssocRetriesCount = 0;
bdb_nwkAssocRetriesCount:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  176 #endif
//  177 #if (ZG_BUILD_COORDINATOR_TYPE)
//  178   static bdb_joiningDeviceList_t *bdb_joiningDeviceList = NULL;
//  179 #endif
//  180   
//  181 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
//  182 //Latch to save the status success of any attempt in the periodic F&B process  

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  183 static uint8 bdb_FBStateSuccessLatch = FALSE;
bdb_FBStateSuccessLatch:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  184 #endif
//  185  /*********************************************************************
//  186  * LOCAL FUNCTIONS
//  187  */
//  188 static void bdb_ProcessOSALMsg(bdbInMsg_t *msgPtr);
//  189 void bdb_NotifyCommissioningModeStart(uint8 commissioningMode);
//  190 static void bdb_processZDOMgs(zdoIncomingMsg_t *pMsg);
//  191 
//  192 #if (ZG_BUILD_JOINING_TYPE)
//  193 static void bdb_requestTCStackVersion(void);
//  194 static void bdb_requestTCLinkKey(void);
//  195 static void bdb_requestVerifyTCLinkKey(void);
//  196 static void bdb_tryNwkAssoc(void);
//  197 #endif
//  198 
//  199 
//  200 static void bdb_processTimeout(void);
//  201 static void bdb_startResumeCommissioningProcess(void);
//  202 static void bdb_nwkSteeringDeviceOnNwk(void);
//  203 static void bdb_nwkJoiningFormation(bool isJoining);
//  204 
//  205 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
//  206 static uint8 gp_ChangeChannelReq(void);
//  207 static void gp_CBInit(void);
//  208 #endif
//  209 
//  210 
//  211 #if (ZG_BUILD_COORDINATOR_TYPE)
//  212 static void bdb_TCProcessJoiningList(void);
//  213 static ZStatus_t bdb_TCJoiningDeviceFree(bdb_joiningDeviceList_t* JoiningDeviceToRemove);
//  214 #endif
//  215 #if (ZG_BUILD_COORDINATOR_TYPE)
//  216 static bdbGCB_TCLinkKeyExchangeProcess_t  pfnTCLinkKeyExchangeProcessCB = NULL;
//  217 #endif

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  218 static bdbGCB_CommissioningStatus_t       pfnCommissioningStatusCB = NULL; 
pfnCommissioningStatusCB:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  219 #if (ZG_BUILD_JOINING_TYPE)

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  220 static bdbGCB_CBKETCLinkKeyExchange_t     pfnCBKETCLinkKeyExchange = NULL;
pfnCBKETCLinkKeyExchange:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  221 static bdbGCB_FilterNwkDesc_t             pfnFilterNwkDesc = NULL;   
pfnFilterNwkDesc:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  222 #endif
//  223 
//  224 
//  225 
//  226 void bdb_calculateCCITT_CRC (uint8 *Mb, uint32 msglen, uint16 *crc);
//  227 void bdb_crcInit(uint16 *crc, uint16 *crcinit_direct, uint16 *crcinit_nondirect);
//  228 uint16 bdb_crcReflect (uint16 crc, uint16 bitnum);
//  229 uint16 bdb_crcBitByBitFast(uint8 * p, uint32 len, uint16 crcinit_direct, uint16 crcinit_nondirect);
//  230 void bdb_ProcessNodeDescRsp(zdoIncomingMsg_t *pMsg);
//  231 
//  232 /*********************************************************************
//  233  * PUBLIC FUNCTIONS
//  234  *********************************************************************/
//  235 void bdb_filterNwkDisc(void);
//  236 ZStatus_t bdb_joinProcess(networkDesc_t *pChosenNwk);
//  237 
//  238 ZStatus_t bdb_TCAddJoiningDevice(uint16 parentAddr, uint8* JoiningExtAddr);
//  239 void bdb_TCjoiningDeviceComplete(uint8* JoiningExtAddr);
//  240 
//  241  /*********************************************************************
//  242  * @fn          bdb_Init
//  243  *
//  244  * @brief       Initialization function for the Base Device Behavior.
//  245  *
//  246  * @param       task_id - bdb_TaskID Task ID
//  247  *
//  248  * @return      none
//  249  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  250 void bdb_Init( byte task_id )
bdb_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function bdb_Init
        CODE
//  251 {
        FUNCALL bdb_Init, osal_pwrmgr_device
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_Init, touchLinkInitiator_InitDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
//  252   bdb_TaskID = task_id;
        MOV       A,R6
        MOV       DPTR,#bdb_TaskID
        MOVX      @DPTR,A
//  253 
//  254   osal_pwrmgr_device(PWRMGR_BATTERY);
        ; Setup parameters for call to function osal_pwrmgr_device
        MOV       R1,#0x1
        LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
//  255 
//  256 #if (ZG_BUILD_COORDINATOR_TYPE)
//  257   if(ZG_DEVICE_COORDINATOR_TYPE)
//  258   {
//  259     if(bdbAttributes.bdbJoinUsesInstallCodeKey)
//  260     {
//  261       zgAllowInstallCodes = ZG_IC_MUST_USED;
//  262     }
//  263   }
//  264 #endif
//  265   
//  266 #if defined ( INTER_PAN ) && defined ( BDB_TL_INITIATOR )  
//  267   touchLinkInitiator_InitDevice( );
        ; Setup parameters for call to function touchLinkInitiator_InitDevice
        LCALL     `??touchLinkInitiator_InitDevice::?relay`; Banked call to: touchLinkInitiator_InitDevice
        MOV       A,R1
//  268 #endif
//  269 
//  270 #if (BDB_REPORTING)
//  271   bdb_RepInit();
//  272 #endif  
//  273   
//  274   //Register ZDO callbacks
//  275   ZDO_RegisterForZDOMsg ( task_id, Node_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x2
        MOV       R3,#-0x80
        MOV       A,R6
        MOV       R1,A
        LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
        MOV       A,R1
//  276 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
//  277   ZDO_RegisterForZDOMsg ( task_id, IEEE_addr_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x1
        MOV       R3,#-0x80
        MOV       A,R6
        MOV       R1,A
        LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
        MOV       A,R1
//  278   ZDO_RegisterForZDOMsg ( task_id, Simple_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x4
        MOV       R3,#-0x80
        MOV       A,R6
        MOV       R1,A
        LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
        MOV       A,R1
//  279 #endif
//  280   
//  281 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
//  282   gp_RegisterGPChangeChannelReqForBDBCB(gp_ChangeChannelReq);
//  283   gp_CBInit();
//  284 #endif
//  285 }
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//  286 
//  287 /*********************************************************************
//  288  * @fn      bdb_RegisterSimpleDescriptor
//  289  *
//  290  * @brief   Register the Simple descriptor. This function also registers 
//  291  *          the profile's cluster conversion table.
//  292  *
//  293  * @param   simpleDesc - a pointer to a valid SimpleDescriptionFormat_t, must not be NULL.
//  294  *
//  295  * @return  none
//  296  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  297 void bdb_RegisterSimpleDescriptor( SimpleDescriptionFormat_t *simpleDesc )
bdb_RegisterSimpleDescriptor:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function bdb_RegisterSimpleDescriptor
        CODE
//  298 {
        FUNCALL bdb_RegisterSimpleDescriptor, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RegisterSimpleDescriptor, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  299   endPointDesc_t *epDesc;
//  300 
//  301   // Register the application's endpoint descriptor
//  302   //  - This memory is allocated and never freed.
//  303   epDesc = osal_mem_alloc( sizeof ( endPointDesc_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x7
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       ?V0,?V2
        MOV       ?V1,?V3
//  304   if ( epDesc )
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??bdb_RegisterSimpleDescriptor_0
//  305   {
//  306     // Fill out the endpoint description.
//  307     epDesc->endPoint = simpleDesc->EndPoint;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?V0
        MOV       DPH,?V1
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  308     epDesc->task_id = &zcl_TaskID;   // all messages get sent to ZCL first
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        MOV       A,#zcl_TaskID & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(zcl_TaskID >> 8) & 0xff
        MOVX      @DPTR,A
//  309     epDesc->simpleDesc = simpleDesc;
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
//  310     epDesc->latencyReq = noLatencyReqs;
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
//  311 
//  312     // Register the endpoint description with the AF
//  313     afRegister( epDesc );
        ; Setup parameters for call to function afRegister
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??afRegister::?relay`; Banked call to: afRegister
        MOV       A,R1
//  314   }
//  315 }
??bdb_RegisterSimpleDescriptor_0:
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  316 
//  317 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
//  318 /*********************************************************************
//  319  * @fn      bdb_ZclIdentifyCmdInd
//  320  *
//  321  * @brief   Callback from the ZCL General Cluster Library when
//  322  *          it received an Identity Command for this application.
//  323  *
//  324  * @param   identifyTime - the number of seconds to identify yourself
//  325  * @param   endpoint - destination endpoint
//  326  *
//  327  * @return  none
//  328  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  329 void bdb_ZclIdentifyCmdInd( uint16 identifyTime, uint8 endpoint )
bdb_ZclIdentifyCmdInd:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function bdb_ZclIdentifyCmdInd
        CODE
//  330 {
        FUNCALL bdb_ZclIdentifyCmdInd, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ZclIdentifyCmdInd, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ZclIdentifyCmdInd, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 8
        MOV       A,#-0x8
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R1
//  331   zclAttrRec_t identifyAttrRec;
//  332   
//  333   if ( zclFindAttrRec( endpoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
//  334                       ATTRID_IDENTIFY_TIME, &identifyAttrRec ) )
        ; Setup parameters for call to function zclFindAttrRec
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x3
        MOV       R3,#0x0
        MOV       R1,?V0
        LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R1
        JNZ       $+5
        LJMP      ??bdb_ZclIdentifyCmdInd_0 & 0xFFFF
//  335   {
//  336     //If we are processing an actual change
//  337     if(*(uint16*)identifyAttrRec.attr.dataPtr != identifyTime)
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        XRL       A,R6
        JNZ       ??bdb_ZclIdentifyCmdInd_1
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R7
??bdb_ZclIdentifyCmdInd_1:
        JZ        ??bdb_ZclIdentifyCmdInd_0
//  338     {
//  339       if ( identifyTime > 0 )
        MOV       A,R6
        ORL       A,R7
        JZ        ??bdb_ZclIdentifyCmdInd_2
//  340       {
//  341         *((uint16*)identifyAttrRec.attr.dataPtr) = identifyTime;
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
//  342         osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3e8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R2,#0x0
        MOV       R3,#0x20
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R1
        SJMP      ??bdb_ZclIdentifyCmdInd_3
//  343       }
//  344       else if ( identifyTime <= 0 )
??bdb_ZclIdentifyCmdInd_2:
        MOV       A,R6
        ORL       A,R7
        JNZ       ??bdb_ZclIdentifyCmdInd_3
//  345       {
//  346         *((uint16*)identifyAttrRec.attr.dataPtr) = 0;
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
//  347         osal_stop_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x20
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
//  348       }
//  349       
//  350       if(pfnIdentifyTimeChangeCB != NULL)
??bdb_ZclIdentifyCmdInd_3:
        MOV       DPTR,#pfnIdentifyTimeChangeCB
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_ZclIdentifyCmdInd_0
//  351       {
//  352         pfnIdentifyTimeChangeCB(endpoint);
        ; Setup parameters for indirect call
        MOV       R1,?V0
        MOV       DPTR,#pfnIdentifyTimeChangeCB
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        LCALL     ?CALL_IND
//  353       }
//  354     }
//  355   }
//  356 }
??bdb_ZclIdentifyCmdInd_0:
        MOV       A,#0x8
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  357 #endif
//  358 
//  359 
//  360 #if (ZG_BUILD_JOINING_TYPE) 
//  361  /*********************************************************************
//  362  * @fn          bdb_setActiveCentralizedLinkKey
//  363  *
//  364  * @brief       Set the active centralized key to be used, Global or IC derived. See zstack_CentralizedLinkKeyModes_t
//  365  *
//  366  * @param       zstack_CentralizedLinkKeyModes - Key to be used for joining centralized network
//  367  * @param       pKey - Key to be used (if any)
//  368  *
//  369  * @return      ZStatus_t - ZFailure when no valid BDB_INSTALL_CODE_USE is used
//  370  *                          ZInvalidParameter when IC buffer is null
//  371  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  372 ZStatus_t bdb_setActiveCentralizedLinkKey(uint8 zstack_CentralizedLinkKeyModes, uint8* pKey)
bdb_setActiveCentralizedLinkKey:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function bdb_setActiveCentralizedLinkKey
        CODE
//  373 {
        FUNCALL bdb_setActiveCentralizedLinkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_setActiveCentralizedLinkKey, APSME_SetDefaultKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_setActiveCentralizedLinkKey, bdb_addInstallCode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_setActiveCentralizedLinkKey, APSME_AddTCLinkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 8
        MOV       A,#-0x8
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       ?V1,R1
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  374   ZStatus_t Status;
//  375 
//  376   uint8 extAddr[Z_EXTADDR_LEN];
//  377 
//  378   osal_memset(extAddr,0x00,Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  379 
//  380   if(pKey == NULL)
        MOV       A,R6
        ORL       A,R7
        JNZ       ??bdb_setActiveCentralizedLinkKey_0
//  381   {
//  382     return ZInvalidParameter;
        MOV       R1,#0x2
        SJMP      ??bdb_setActiveCentralizedLinkKey_1
//  383   }
//  384 
//  385   //Clear it, if the request requires it, it will be set
//  386   gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = FALSE;
??bdb_setActiveCentralizedLinkKey_0:
        MOV       DPTR,#gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY
        MOV       A,#0x0
        MOVX      @DPTR,A
//  387 
//  388   switch(zstack_CentralizedLinkKeyModes)
        MOV       A,?V1
        JZ        ??bdb_setActiveCentralizedLinkKey_2
        DEC       A
        JZ        ??bdb_setActiveCentralizedLinkKey_3
        DEC       A
        JZ        ??bdb_setActiveCentralizedLinkKey_4
        DEC       A
        JZ        ??bdb_setActiveCentralizedLinkKey_5
        DEC       A
        JZ        ??bdb_setActiveCentralizedLinkKey_6
        SJMP      ??bdb_setActiveCentralizedLinkKey_7
//  389   {
//  390     case zstack_UseDefaultGlobalTrustCenterLinkKey:
//  391       //Set the default key to be used in centralized networks as defaultTCLinkKey
//  392       Status = APSME_SetDefaultKey();
??bdb_setActiveCentralizedLinkKey_2:
        ; Setup parameters for call to function APSME_SetDefaultKey
        LCALL     `??APSME_SetDefaultKey::?relay`; Banked call to: APSME_SetDefaultKey
        MOV       A,R1
        MOV       ?V0,A
//  393     break;
        SJMP      ??bdb_setActiveCentralizedLinkKey_8
//  394 
//  395     case zstack_UseInstallCodeWithFallback:
//  396       //same as zstack_UseInstallCode but attempt default TRUE
//  397       gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = TRUE;
??bdb_setActiveCentralizedLinkKey_4:
        MOV       DPTR,#gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY
        MOV       A,#0x1
        MOVX      @DPTR,A
//  398     case zstack_UseInstallCode:
//  399        //Set the install code as default key
//  400       Status = bdb_addInstallCode(pKey,extAddr);
??bdb_setActiveCentralizedLinkKey_3:
        ; Setup parameters for call to function bdb_addInstallCode
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_addInstallCode::?relay`; Banked call to: bdb_addInstallCode
        MOV       A,R1
        MOV       ?V0,A
//  401     break;
        SJMP      ??bdb_setActiveCentralizedLinkKey_8
//  402 
//  403     case zstack_UseAPSKeyWithFallback:
//  404       //same as zstack_UseAPSKey but attempt default TRUE
//  405       gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = TRUE;
??bdb_setActiveCentralizedLinkKey_6:
        MOV       DPTR,#gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY
        MOV       A,#0x1
        MOVX      @DPTR,A
//  406     case zstack_UseAPSKey:
//  407       //Set the key as global default
//  408       Status = APSME_AddTCLinkKey(pKey,extAddr);
??bdb_setActiveCentralizedLinkKey_5:
        ; Setup parameters for call to function APSME_AddTCLinkKey
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??APSME_AddTCLinkKey::?relay`; Banked call to: APSME_AddTCLinkKey
        MOV       A,R1
        MOV       ?V0,A
//  409     break;
        SJMP      ??bdb_setActiveCentralizedLinkKey_8
//  410     
//  411     default:
//  412       Status = ZInvalidParameter;
??bdb_setActiveCentralizedLinkKey_7:
        MOV       ?V0,#0x2
//  413     break;
//  414   }
//  415 
//  416   return Status;
??bdb_setActiveCentralizedLinkKey_8:
        MOV       R1,?V0
??bdb_setActiveCentralizedLinkKey_1:
        MOV       A,#0x8
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
//  417 }
          CFI EndBlock cfiBlock3
//  418 #endif
//  419 
//  420 
//  421     
//  422   
//  423 /******************************************************************************
//  424  * @fn          bdb_addInstallCode
//  425  *
//  426  * @brief       Interface to add an install codes and adds a APS TC Link key.
//  427  *
//  428  * @param       pInstallCode - [in] Install Code with CRC (buffer size of 18 bytes).
//  429  *              pExt - [in] Extended address of the node.
//  430  *
//  431  * @return      ZStatus_t
//  432  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  433 ZStatus_t bdb_addInstallCode(uint8* pInstallCode, uint8* pExt)
bdb_addInstallCode:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function bdb_addInstallCode
        CODE
//  434 {
        FUNCALL bdb_addInstallCode, bdb_GenerateInstallCodeCRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_addInstallCode, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_addInstallCode, sspMMOHash
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_addInstallCode, APSME_AddTCLinkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 16
        MOV       A,#-0x10
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
//  435   uint8  hashOutput[16];
//  436   uint16 CRC;
//  437   
//  438 #if (ZG_BUILD_COORDINATOR_TYPE)
//  439   if(ZG_DEVICE_COORDINATOR_TYPE)
//  440   {
//  441     if(zgAllowInstallCodes == ZG_IC_NOT_SUPPORTED)
//  442     {
//  443       return ZFailure;
//  444     }
//  445   }
//  446 #endif
//  447        
//  448   if((pInstallCode == NULL) || (pExt == NULL))
        MOV       A,R6
        ORL       A,R7
        JZ        ??bdb_addInstallCode_0
        MOV       A,?V0
        ORL       A,?V1
        JNZ       ??bdb_addInstallCode_1
//  449   {
//  450     return ZInvalidParameter;
??bdb_addInstallCode_0:
        MOV       R1,#0x2
        SJMP      ??bdb_addInstallCode_2
//  451   }
//  452   
//  453   CRC = bdb_GenerateInstallCodeCRC(pInstallCode);
??bdb_addInstallCode_1:
        ; Setup parameters for call to function bdb_GenerateInstallCodeCRC
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_GenerateInstallCodeCRC::?relay`; Banked call to: bdb_GenerateInstallCodeCRC
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       ?V2,?V4
        MOV       ?V3,?V5
//  454 
//  455   //Validate CRC
//  456   if(CRC != osal_build_uint16(&pInstallCode[INSTALL_CODE_LEN]))
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R6
        ADD       A,#0x10
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       A,?V4
        XRL       A,?V2
        JNZ       ??bdb_addInstallCode_3
        MOV       A,?V5
        XRL       A,?V3
??bdb_addInstallCode_3:
        JZ        ??bdb_addInstallCode_4
//  457   {
//  458     return ZInvalidParameter;
        MOV       R1,#0x2
        SJMP      ??bdb_addInstallCode_2
//  459   }
//  460 
//  461   sspMMOHash (NULL, 0, pInstallCode,(INSTALL_CODE_LEN + INSTALL_CODE_CRC_LEN) * BITS_PER_BYTE, hashOutput);
??bdb_addInstallCode_4:
        ; Setup parameters for call to function sspMMOHash
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       ?V4,#-0x70
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R1,#0x0
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??sspMMOHash::?relay`; Banked call to: sspMMOHash
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
//  462 
//  463   return APSME_AddTCLinkKey(hashOutput,pExt);
        ; Setup parameters for call to function APSME_AddTCLinkKey
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??APSME_AddTCLinkKey::?relay`; Banked call to: APSME_AddTCLinkKey
??bdb_addInstallCode_2:
        MOV       A,#0x10
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
//  464 }    
          CFI EndBlock cfiBlock4
//  465     
//  466 
//  467 #if (ZG_BUILD_COORDINATOR_TYPE)
//  468  /*********************************************************************
//  469  * @fn      bdb_RegisterTCLinkKeyExchangeProcessCB
//  470  *
//  471  * @brief   Register a callback to receive notifications on the joining devices 
//  472  *          and its status on TC link key exchange
//  473  *
//  474  * @param   bdbGCB_TCLinkKeyExchangeProcess - application callback 
//  475  *          (extended address of device, status: 0 = Joining, 1 = TC link key exchange success, 2 = TC link key exchange failed)
//  476  *
//  477  * @return  none
//  478  */
//  479 void bdb_RegisterTCLinkKeyExchangeProcessCB(bdbGCB_TCLinkKeyExchangeProcess_t bdbGCB_TCLinkKeyExchangeProcess)
//  480 {
//  481   if(bdbGCB_TCLinkKeyExchangeProcess != NULL)
//  482   {
//  483     pfnTCLinkKeyExchangeProcessCB = bdbGCB_TCLinkKeyExchangeProcess;
//  484   }
//  485 }
//  486 
//  487 
//  488 
//  489  /*********************************************************************
//  490  * @fn          bdb_setTCRequireKeyExchange
//  491  *
//  492  * @brief       Set the bdb_setTCRequireKeyExchange attribute
//  493  *
//  494  * @param       isKeyExchangeRequired - True if TC will remove devices that do 
//  495  *              not perform key exchange after bdbTrustCenterNodeJoinTimeout, 
//  496  *              False to not remove devices.
//  497  *
//  498  * @return      none
//  499  */
//  500 void bdb_setTCRequireKeyExchange(bool isKeyExchangeRequired)
//  501 {
//  502   bdbAttributes.bdbTrustCenterRequireKeyExchange = isKeyExchangeRequired;
//  503 }
//  504 
//  505 
//  506 
//  507  /*********************************************************************
//  508  * @fn          bdb_TCAddJoiningDevice
//  509  *
//  510  * @brief       Add a joining device to the list of devices that must request a 
//  511  *              key before bdbTrustCenterNodeJoinTimeout.
//  512  *
//  513  * @param       parentAddr - Address of the parent device
//  514  * @param       JoiningExtAddr - IEEE address of the joining device
//  515  *
//  516  * @return      ZStatus_t - ZFailure No memory to allocate the device in the list
//  517  *                          ZInvalidParameter
//  518  */
//  519 ZStatus_t bdb_TCAddJoiningDevice(uint16 parentAddr, uint8* JoiningExtAddr)
//  520 {
//  521   bdb_joiningDeviceList_t* tempJoiningDescNode;
//  522   
//  523   if((parentAddr == INVALID_NODE_ADDR) || (JoiningExtAddr == NULL))
//  524   {
//  525     return ZInvalidParameter;
//  526   }
//  527   
//  528   //If the list was empty and element was allocated, then start the timer
//  529   if(bdb_joiningDeviceList == NULL)
//  530   {
//  531     bdb_joiningDeviceList = osal_mem_alloc(sizeof(bdb_joiningDeviceList_t));
//  532     if(bdb_joiningDeviceList == NULL)
//  533     {
//  534       return ZFailure;
//  535     }
//  536    
//  537     osal_start_reload_timer(bdb_TaskID,BDB_TC_JOIN_TIMEOUT,1000);
//  538     tempJoiningDescNode = bdb_joiningDeviceList;
//  539   }
//  540   //if the list was not empty then add the entry at the end of the list
//  541   else
//  542   {
//  543     tempJoiningDescNode = bdb_joiningDeviceList;
//  544     
//  545     //Validate that this is not already in the list... somehow
//  546     if(osal_memcmp(JoiningExtAddr,tempJoiningDescNode->bdbJoiningNodeEui64,Z_EXTADDR_LEN))
//  547     {
//  548       //The device added is already in the list, refresh its time and do nothing else
//  549       tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
//  550       return ZSuccess;
//  551     }
//  552     
//  553     while(tempJoiningDescNode->nextDev != NULL)
//  554     {
//  555       tempJoiningDescNode = tempJoiningDescNode->nextDev;
//  556       
//  557       //Validate that this is not already in the list... somehow
//  558       if(osal_memcmp(JoiningExtAddr,tempJoiningDescNode->bdbJoiningNodeEui64,Z_EXTADDR_LEN))
//  559       {
//  560         //The device added is already in the list, refresh its time and do nothing else
//  561         tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
//  562         return ZSuccess;
//  563       }
//  564     }
//  565     
//  566     tempJoiningDescNode->nextDev = osal_mem_alloc(sizeof(bdb_joiningDeviceList_t));
//  567     if(tempJoiningDescNode->nextDev == NULL)
//  568     {
//  569       return ZFailure;
//  570     }
//  571     
//  572     tempJoiningDescNode = tempJoiningDescNode->nextDev;
//  573   }
//  574   
//  575   if(pfnTCLinkKeyExchangeProcessCB)
//  576   {
//  577     bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
//  578     osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
//  579     bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_JOINING;
//  580     
//  581     bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
//  582   }
//  583   
//  584   tempJoiningDescNode->nextDev = NULL;
//  585   tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
//  586   tempJoiningDescNode->parentAddr = parentAddr;
//  587   osal_memcpy(tempJoiningDescNode->bdbJoiningNodeEui64, JoiningExtAddr, Z_EXTADDR_LEN);
//  588   
//  589   return ZSuccess;
//  590 }
//  591 
//  592 /****************************************************************************
//  593  * @fn          bdb_TCProcessJoiningList
//  594  *
//  595  * @brief       Process the timer to handle the joining devices if the TC link 
//  596  *              key is mandatory for all devices
//  597  *
//  598  * @param       none
//  599  *
//  600  * @return      none
//  601  */
//  602 void bdb_TCProcessJoiningList(void)
//  603 {
//  604   bdb_joiningDeviceList_t* tempJoiningDescNode;
//  605   
//  606   if(bdb_joiningDeviceList)
//  607   {
//  608     tempJoiningDescNode = bdb_joiningDeviceList;
//  609   
//  610     while(tempJoiningDescNode)
//  611     {
//  612       if(tempJoiningDescNode->NodeJoinTimeout)
//  613       {
//  614         tempJoiningDescNode->NodeJoinTimeout--;
//  615       }
//  616       
//  617       if(tempJoiningDescNode->NodeJoinTimeout == 0)
//  618       {
//  619         //Check if the key exchange is required 
//  620         if(bdb_doTrustCenterRequireKeyExchange())
//  621         {
//  622             AddrMgrEntry_t entry;
//  623             
//  624             entry.user = ADDRMGR_USER_DEFAULT;
//  625             osal_memcpy(entry.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
//  626             
//  627             if(AddrMgrEntryLookupExt(&entry))
//  628             {
//  629               ZDSecMgrAPSRemove(entry.nwkAddr,entry.extAddr,tempJoiningDescNode->parentAddr);
//  630             }
//  631         }
//  632         
//  633         //Expired device either is legacy device not using the TCLK entry or got 
//  634         //removed from the network because of timeout, eitherway it is not using
//  635         //TCLK entry neither the Security user in the address manager, so free the entry
//  636         //in both tables.
//  637         
//  638         uint16 keyNvIndex;
//  639         uint16 index;        
//  640         APSME_TCLKDevEntry_t TCLKDevEntry;
//  641         uint8 found;
//  642         
//  643         //Remove the entry in address manager
//  644         ZDSecMgrAddrClear(tempJoiningDescNode->bdbJoiningNodeEui64);
//  645         
//  646         //search for the entry in the TCLK table
//  647         keyNvIndex = APSME_SearchTCLinkKeyEntry(tempJoiningDescNode->bdbJoiningNodeEui64,&found, NULL);
//  648         
//  649         //If found, erase it.
//  650         if(found == TRUE)
//  651         {
//  652           osal_memset(&TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
//  653           TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
//  654           
//  655           //Increase the shift by one. Validate the maximum shift of the seed which is 15
//  656           index = keyNvIndex - ZCD_NV_TCLK_TABLE_START;
//  657           
//  658           TCLinkKeyFrmCntr[index].rxFrmCntr = 0;
//  659           TCLinkKeyFrmCntr[index].txFrmCntr = 0;
//  660           
//  661           //Update the entry
//  662           osal_nv_write(keyNvIndex,0,sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
//  663         }
//  664         
//  665         if(pfnTCLinkKeyExchangeProcessCB)
//  666         {
//  667           bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
//  668           osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
//  669           bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_EXCH_FAIL;
//  670           
//  671           bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
//  672         }
//  673        
//  674         //Free the device from the list
//  675         bdb_TCJoiningDeviceFree(tempJoiningDescNode);
//  676       }
//  677       tempJoiningDescNode = tempJoiningDescNode->nextDev;
//  678     }
//  679   }
//  680 
//  681   //we are done with the list
//  682   if(bdb_joiningDeviceList == NULL)
//  683   {
//  684     osal_stop_timerEx(bdb_TaskID,BDB_TC_JOIN_TIMEOUT);
//  685   }
//  686 }
//  687 
//  688 
//  689 
//  690 /****************************************************************************
//  691  * @fn          bdb_TCjoiningDeviceComplete
//  692  *
//  693  * @brief       This function frees a joining device from the list that has 
//  694  *              finished TC link key exchange process
//  695  *
//  696  * @param       JoiningExtAddr - Extended address of the device
//  697  *
//  698  * @return      none
//  699  */
//  700 void bdb_TCjoiningDeviceComplete(uint8* JoiningExtAddr)
//  701 {
//  702   bdb_joiningDeviceList_t* tempJoiningDescNode;
//  703   
//  704   if((bdb_joiningDeviceList != NULL) && (JoiningExtAddr != NULL))
//  705   {
//  706     tempJoiningDescNode = bdb_joiningDeviceList;
//  707     
//  708     while(tempJoiningDescNode != NULL)
//  709     {
//  710       if(osal_memcmp(tempJoiningDescNode->bdbJoiningNodeEui64,JoiningExtAddr,Z_EXTADDR_LEN))
//  711       {
//  712         if(pfnTCLinkKeyExchangeProcessCB)
//  713         {
//  714           bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
//  715           osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
//  716           bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_EXCH_SUCCESS;
//  717           
//  718           bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
//  719         }        
//  720         
//  721         bdb_TCJoiningDeviceFree(tempJoiningDescNode);
//  722         break;
//  723       }
//  724       tempJoiningDescNode = tempJoiningDescNode->nextDev;
//  725     }
//  726    
//  727     if(bdb_joiningDeviceList == NULL)
//  728     {
//  729       osal_stop_timerEx(bdb_TaskID,BDB_TC_JOIN_TIMEOUT);
//  730     }
//  731   }
//  732 }
//  733 
//  734 
//  735 
//  736 /****************************************************************************
//  737  * @fn          bdb_TCJoiningDeviceFree
//  738  *
//  739  * @brief       This function frees a joining device from the list.
//  740  *
//  741  * @param       ZSuccess - If the device was found and erased
//  742  * @param       ZInvalidParameter - Not found
//  743  *
//  744  * @return      none
//  745  */
//  746 ZStatus_t bdb_TCJoiningDeviceFree(bdb_joiningDeviceList_t* JoiningDeviceToRemove)
//  747 {
//  748   bdb_joiningDeviceList_t* descCurrent;
//  749   bdb_joiningDeviceList_t* descPrev;
//  750   
//  751   //validate empty list?
//  752   
//  753   //Is it the first?
//  754   if(osal_memcmp(bdb_joiningDeviceList->bdbJoiningNodeEui64, JoiningDeviceToRemove->bdbJoiningNodeEui64, Z_EXTADDR_LEN))
//  755   {
//  756     descCurrent = bdb_joiningDeviceList;
//  757     bdb_joiningDeviceList = bdb_joiningDeviceList->nextDev;
//  758     osal_mem_free( descCurrent );
//  759     return ZSuccess;
//  760   }
//  761   
//  762   descPrev = NULL;
//  763   descCurrent = bdb_joiningDeviceList;
//  764   
//  765   while(descCurrent != NULL)
//  766   {
//  767     if(osal_memcmp(descCurrent->nextDev->bdbJoiningNodeEui64, JoiningDeviceToRemove->bdbJoiningNodeEui64, Z_EXTADDR_LEN))
//  768     {
//  769       descPrev = descCurrent;
//  770       break;
//  771     }
//  772     descCurrent = descCurrent->nextDev;
//  773   }
//  774   if(descPrev == NULL)
//  775   {
//  776     //Not found
//  777     return ZInvalidParameter;
//  778   }
//  779   
//  780   descPrev->nextDev = descPrev->nextDev->nextDev;
//  781     
//  782   osal_mem_free( JoiningDeviceToRemove );
//  783   return ZSuccess;
//  784 
//  785 }
//  786 
//  787  /*********************************************************************
//  788  * @fn          bdb_setJoinUsesInstallCodeKey
//  789  *
//  790  * @brief       Set BDB attribute bdbJoinUsesInstallCodeKey.
//  791  *
//  792  * @param       set - If TRUE only devices with IC register in TC can join the 
//  793  *              nwk, otherwise devices may or not have a IC register
//  794  *
//  795  * @return      none
//  796  */
//  797 void bdb_setJoinUsesInstallCodeKey(bool set)
//  798 {
//  799   bdbAttributes.bdbJoinUsesInstallCodeKey = set;
//  800   if(set)
//  801   {
//  802     zgAllowInstallCodes = ZG_IC_MUST_USED;
//  803   }
//  804   else
//  805   {
//  806     zgAllowInstallCodes = ZG_IC_SUPPORTED_NOT_REQUIRED;
//  807   }
//  808 }
//  809 #endif
//  810 
//  811  /*********************************************************************
//  812  * @fn          bdb_StartCommissioning
//  813  *
//  814  * @brief       Start the commissioning process setting the commissioning mode given.
//  815  *
//  816  * @param       mode - refer to bdbCommissioningMode
//  817  *
//  818  * @return      none
//  819  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  820 void bdb_StartCommissioning(uint8 mode)
bdb_StartCommissioning:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function bdb_StartCommissioning
        CODE
//  821 {
        FUNCALL bdb_StartCommissioning, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_nwkSteeringDeviceOnNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_isbufset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, APSME_IsDistributedSecurity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, ZDOInitDeviceEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_setNodeIsOnANetwork
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 20
        MOV       A,#-0x14
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       ?V0,R1
//  822   //Application cannot request to set the device in initialization mode or parent lost
//  823   mode &= ~(BDB_COMMISSIONING_MODE_INITIALIZATION | BDB_COMMISSIONING_MODE_PARENT_LOST);
        ANL       ?V0,#0xcf
//  824     
//  825 #ifdef BDB_TL_INITIATOR
//  826   if ( touchlinkFNReset == TRUE )
        MOV       DPTR,#touchlinkFNReset
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       $+5
        LJMP      ??bdb_StartCommissioning_0 & 0xFFFF
//  827   {
//  828     return;
//  829   }
//  830 #else
//  831   //Commissioning mode used only for initiator
//  832   mode &= ~BDB_COMMISSIONING_MODE_INITIATOR_TL;
//  833 #endif
//  834   
//  835 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==0)    
//  836   //Commissioning mode used only for devices with F&B
//  837   mode &= ~BDB_COMMISSIONING_MODE_FINDING_BINDING;
//  838 #endif
//  839  
//  840   //If we have running process or the machine state is triggered, then just append and it will be excecuted
//  841   if((bdbAttributes.bdbCommissioningMode) || (osal_get_timeoutEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE)))
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        JNZ       ??bdb_StartCommissioning_1
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV       A,R2
        ORL       A,R3
        ORL       A,R4
        ORL       A,R5
        JZ        ??bdb_StartCommissioning_2
//  842   {
//  843 #if ZG_BUILD_ENDDEVICE_TYPE
//  844     if(ZG_DEVICE_ENDDEVICE_TYPE)
//  845     {
//  846       //Devices with parent lost are not allowed to perform actions
//  847       if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)
??bdb_StartCommissioning_1:
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.5
        JNC       $+5
        LJMP      ??bdb_StartCommissioning_0 & 0xFFFF
//  848       {
//  849         return;
//  850       }
//  851     }
//  852 #endif
//  853     
//  854     //If we are on the network and got requested to do nwk steering, we do not need to wait other process, 
//  855     // just send permit joining and report the application
//  856     if((bdbAttributes.bdbNodeIsOnANetwork) && (mode & BDB_COMMISSIONING_MODE_NWK_STEERING))
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        JZ        ??bdb_StartCommissioning_3
        MOV       A,?V0
        MOV       C,0xE0 /* A   */.1
        JNC       ??bdb_StartCommissioning_3
//  857     {
//  858       bdb_nwkSteeringDeviceOnNwk();
        ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
        LCALL     `??bdb_nwkSteeringDeviceOnNwk::?relay`; Banked call to: bdb_nwkSteeringDeviceOnNwk
//  859       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x4
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
//  860       
//  861       //Clean nwk steering
//  862       mode ^= BDB_COMMISSIONING_MODE_NWK_STEERING; 
        XRL       ?V0,#0x2
//  863     }
//  864     
//  865     //add the remaining valid commissioning modes requested, those will be process when bdb finish its current process
//  866     bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
??bdb_StartCommissioning_3:
        MOV       A,#0x3f
        ANL       A,?V0
        MOV       R0,A
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        ORL       A,R0
        MOVX      @DPTR,A
//  867     return;      
        LJMP      ??bdb_StartCommissioning_0 & 0xFFFF
//  868   }
//  869 
//  870   //Save the commissioning modes valid requested
//  871   bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
??bdb_StartCommissioning_2:
        MOV       A,#0x3f
        ANL       A,?V0
        MOV       R0,A
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        ORL       A,R0
        MOVX      @DPTR,A
//  872   
//  873   
//  874   //Start processing the initialization, once per power cycle.
//  875   if(!bdb_initialization)
        MOV       DPTR,#bdb_initialization
        MOVX      A,@DPTR
        JZ        $+5
        LJMP      ??bdb_StartCommissioning_4 & 0xFFFF
//  876   {
//  877     bdb_initialization = TRUE;
        MOV       DPTR,#bdb_initialization
        MOV       A,#0x1
        MOVX      @DPTR,A
//  878     
//  879 #ifdef BDB_REPORTING
//  880     //Delete NV data if startup was with factory reset
//  881     if(ZDO_INITDEV_NEW_NETWORK_STATE == ZDApp_ReadNetworkRestoreState())
//  882     {
//  883       //Factory reset bdb reporting NV data
//  884       uint16 attrRepNvLen = osal_nv_item_len( ZCD_NV_BDBREPORTINGCONFIG );
//  885       if ( attrRepNvLen > 0 )
//  886       {
//  887         osal_nv_delete( ZCD_NV_BDBREPORTINGCONFIG, attrRepNvLen );
//  888       }
//  889     }
//  890 
//  891     //Construct the Endpoint-cluster array
//  892     bdb_RepConstructReportingData();
//  893 #endif //BDB_REPORTING
//  894     
//  895     osal_nv_read(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
        ; Setup parameters for call to function osal_nv_read
        MOV       ?V2,#(bdbAttributes + 14) & 0xff
        MOV       ?V3,#((bdbAttributes + 14) >> 8) & 0xff
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V2,#0x1
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x55
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,R1
//  896     
//  897     //Are we on a network
//  898     if(bdbAttributes.bdbNodeIsOnANetwork == TRUE)
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??bdb_StartCommissioning_4 & 0xFFFF
//  899     {
//  900 #ifdef ZG_BUILD_JOINING_TYPE
//  901       //Only for joining devices validate the joining procedure
//  902       if(ZG_DEVICE_JOINING_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??bdb_StartCommissioning_5
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x2
        JZ        $+5
        LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
//  903       {
//  904         //If we got into a network
//  905         if(!osal_isbufset( AIB_apsTrustCenterAddress, 0x00, Z_EXTADDR_LEN ))
??bdb_StartCommissioning_5:
        ; Setup parameters for call to function osal_isbufset
        MOV       R4,#0x8
        MOV       R1,#0x0
        MOV       DPTR,#AIB_apsTrustCenterAddress
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??osal_isbufset::?relay`; Banked call to: osal_isbufset
        MOV       A,R1
        JZ        $+5
        LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
//  906         {
//  907           //Which is not distributed
//  908           if(!APSME_IsDistributedSecurity())
        ; Setup parameters for call to function APSME_IsDistributedSecurity
        LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
        MOV       A,R1
        JZ        $+5
        LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
//  909           {
//  910             uint8 keyAttributes;
//  911             osal_nv_read(ZCD_NV_TCLK_TABLE_START, osal_offsetof(APSME_TCLKDevEntry_t,keyAttributes), sizeof(uint8), &keyAttributes);
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V2,#0x1
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R2,#0x11
        MOV       R3,#0x1
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,R1
//  912             //If we must perform the TCLK exchange and we didn't complete it, then reset to FN
//  913             if(requestNewTrustCenterLinkKey && (keyAttributes != ZG_NON_R21_NWK_JOINED) && (keyAttributes != ZG_VERIFIED_KEY))
        MOV       DPTR,#requestNewTrustCenterLinkKey
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        XRL       A,#0xfd
        JNZ       $+5
        LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       $+5
        LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
//  914             {
//  915               //Force to initialize the entry
//  916               APSME_TCLKDevEntry_t APSME_TCLKDevEntry;
//  917               
//  918               osal_memset(&APSME_TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x13
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  919               APSME_TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x1
        MOVX      @DPTR,A
//  920               osal_nv_write(ZCD_NV_TCLK_TABLE_START, 0, sizeof(APSME_TCLKDevEntry_t), &APSME_TCLKDevEntry);
        ; Setup parameters for call to function osal_nv_write
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V2,#0x13
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x11
        MOV       R3,#0x1
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,R1
//  921               TCLinkKeyFrmCntr[0].txFrmCntr = 0;
        MOV       DPTR,#TCLinkKeyFrmCntr
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
//  922               TCLinkKeyFrmCntr[0].rxFrmCntr = 0;
        MOV       DPTR,#TCLinkKeyFrmCntr + 4
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
//  923               
//  924               
//  925               //reset the device parameters to FN
//  926               bdbAttributes.bdbNodeIsOnANetwork = FALSE;
        MOV       DPTR,#bdbAttributes + 14
        MOV       A,#0x0
        MOVX      @DPTR,A
//  927               osal_nv_write(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V2,#(bdbAttributes + 14) & 0xff
        MOV       ?V3,#((bdbAttributes + 14) >> 8) & 0xff
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V2,#0x1
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x55
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,R1
//  928               zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x3
        MOV       R1,#-0x1
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
        MOV       A,R1
//  929               
//  930               //Then start the commissioning process requested
//  931               bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x0
        MOVX      @DPTR,A
//  932               osal_set_event( bdb_TaskID, BDB_CHANGE_COMMISSIONING_STATE );
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
        MOV       A,R1
//  933               return;
        SJMP      ??bdb_StartCommissioning_0
//  934             }
//  935           }
//  936         }
//  937       }
//  938 #endif //ZG_BUILD_JOINING_TYPE
//  939       
//  940       //Set the initialization
//  941       bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_INITIALIZATION;
??bdb_StartCommissioning_6:
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.4
        MOVX      @DPTR,A
//  942       bdbCommissioningProcedureState.bdbCommissioningState = BDB_INITIALIZATION;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x7
        MOVX      @DPTR,A
//  943       bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
        MOV       A,#0x3f
        ANL       A,?V0
        MOV       R0,A
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        ORL       A,R0
        MOVX      @DPTR,A
//  944       
//  945       if(ZDOInitDevice(0) == ZDO_INITDEV_RESTORED_NETWORK_STATE)
        ; Setup parameters for call to function ZDOInitDeviceEx
        MOV       R1,#0x0
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
        MOV       A,R1
        JZ        ??bdb_StartCommissioning_0
//  946       {
//  947 #ifdef BDB_REPORTING
//  948         //Mark the clusterEndpoint entries that have binding, starts reporting if at least one entry was marked
//  949         bdb_RepUpdateMarkBindings();
//  950 #endif
//  951         return;
//  952       }
//  953       bdb_setNodeIsOnANetwork(FALSE);  
        ; Setup parameters for call to function bdb_setNodeIsOnANetwork
        MOV       R1,#0x0
        LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
//  954       //Not in the network
//  955       bdb_reportCommissioningState(BDB_INITIALIZATION,FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x7
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
//  956       return;
        SJMP      ??bdb_StartCommissioning_0
//  957     }
//  958   }
//  959 
//  960   //Got requested only to initialize, if so, report that it failed
//  961   if(bdbAttributes.bdbCommissioningMode == 0)
??bdb_StartCommissioning_4:
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        JNZ       ??bdb_StartCommissioning_7
//  962   {
//  963     //Set the initialization state and report it to fail
//  964     bdbCommissioningProcedureState.bdbCommissioningState = BDB_INITIALIZATION;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x7
        MOVX      @DPTR,A
//  965     bdb_reportCommissioningState(BDB_INITIALIZATION,FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x7
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
//  966     return;
        SJMP      ??bdb_StartCommissioning_0
//  967   }
//  968 
//  969   
//  970   //Start the commissioning process
//  971   bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
??bdb_StartCommissioning_7:
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x0
        MOVX      @DPTR,A
//  972   osal_set_event( bdb_TaskID, BDB_CHANGE_COMMISSIONING_STATE );
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
        MOV       A,R1
//  973 }
??bdb_StartCommissioning_0:
        MOV       A,#0x14
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock5
//  974 
//  975 
//  976  /*********************************************************************
//  977  * @fn          bdb_NotifyCommissioningModeStart
//  978  *
//  979  * @brief       Notify the user about a commissioning method just started
//  980  *
//  981  * @param       commissioningMode
//  982  *
//  983  * @return      none
//  984  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  985 void bdb_NotifyCommissioningModeStart(uint8 commissioningMode)
bdb_NotifyCommissioningModeStart:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function bdb_NotifyCommissioningModeStart
        CODE
//  986 {
        FUNCALL bdb_NotifyCommissioningModeStart, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 3
        MOV       A,#-0x3
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       A,R1
        MOV       R6,A
//  987   bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
//  988 
//  989   bdbCommissioningModeMsg.bdbCommissioningMode = commissioningMode;
        MOV       A,R6
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  990   bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_IN_PROGRESS;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x1
        MOVX      @DPTR,A
//  991   //Remaining commissioning modes are set just before the call to the application to avoid race conditions
//  992 
//  993   bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
        ; Setup parameters for call to function bdb_SendMsg
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       R4,#0x3
        MOV       R3,#0x0
        MOV       R2,#0xa
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  994 }
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock6
//  995 
//  996 
//  997 
//  998 #if (ZG_BUILD_JOINING_TYPE)
//  999  /*********************************************************************
// 1000  * @fn          bdb_setNodeJoinLinkKeyType
// 1001  *
// 1002  * @brief       Set the key type in use in the network joined. Global centralized key is used by default
// 1003  *
// 1004  * @param       none
// 1005  *
// 1006  * @return      none
// 1007  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1008 void bdb_setNodeJoinLinkKeyType(uint8 KeyType)
bdb_setNodeJoinLinkKeyType:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function bdb_setNodeJoinLinkKeyType
        CODE
// 1009 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1010   bdbAttributes.bdbNodeJoinLinkKeyType = KeyType;
        MOV       A,R1
        MOV       DPTR,#bdbAttributes + 15
        MOVX      @DPTR,A
// 1011 }
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock7
// 1012 #endif
// 1013 
// 1014  /*********************************************************************
// 1015  * @fn          bdb_setFN
// 1016  *
// 1017  * @brief       Set configuration for FN. This FN configuration will be perfome 
// 1018  *              upon call to ZDOInitDevice
// 1019  *
// 1020  * @param       none
// 1021  *
// 1022  * @return      none
// 1023  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1024 void bdb_setFN(void)
bdb_setFN:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function bdb_setFN
        CODE
// 1025 {
        FUNCALL bdb_setFN, bdb_setNodeIsOnANetwork
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_setFN, touchLink_InitFreeRanges
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_setFN, touchLink_UpdateNV
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_setFN, zgWriteStartupOptions
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1026   bdb_setNodeIsOnANetwork(FALSE);
        ; Setup parameters for call to function bdb_setNodeIsOnANetwork
        MOV       R1,#0x0
        LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
// 1027 
// 1028 #if defined ( INTER_PAN ) && defined ( BDB_TL_INITIATOR )
// 1029     touchLink_InitFreeRanges( TRUE );
        ; Setup parameters for call to function touchLink_InitFreeRanges
        MOV       R1,#0x1
        LCALL     `??touchLink_InitFreeRanges::?relay`; Banked call to: touchLink_InitFreeRanges
// 1030     touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
        ; Setup parameters for call to function touchLink_UpdateNV
        MOV       R1,#0x2
        LCALL     `??touchLink_UpdateNV::?relay`; Banked call to: touchLink_UpdateNV
// 1031 #endif
// 1032 #if defined ( INTER_PAN ) && defined ( BDB_TL_TARGET ) 
// 1033     touchLink_InitFreeRanges( FALSE );
// 1034     touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
// 1035 #endif
// 1036 
// 1037   //Set the device as factory new
// 1038   zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x3
        MOV       R1,#-0x1
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
        MOV       A,R1
// 1039 }
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock8
// 1040 
// 1041  /*********************************************************************
// 1042  * @fn          bdb_resetLocalAction
// 1043  *
// 1044  * @brief       Application interface to perform BDB Reset to FN.
// 1045  *
// 1046  * @param       none
// 1047  *
// 1048  * @return      none
// 1049  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1050 void bdb_resetLocalAction(void)
bdb_resetLocalAction:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function bdb_resetLocalAction
        CODE
// 1051 {
        FUNCALL bdb_resetLocalAction, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_resetLocalAction, bdb_setFN
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_resetLocalAction, NLME_LeaveReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_resetLocalAction, bdb_setFN
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_resetLocalAction, ZDApp_ResetTimerStart
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 5
        MOV       A,#-0x5
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 5)
// 1052   //Process reset as nwk leave if the device is on the network and is able to process it
// 1053   if((ZG_BUILD_JOINING_TYPE) && (bdbAttributes.bdbNodeIsOnANetwork) && (!(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)))
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        JZ        ??bdb_resetLocalAction_0
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.5
        JC        ??bdb_resetLocalAction_0
// 1054   {
// 1055     NLME_LeaveReq_t leaveReq;
// 1056     // Set every field to 0
// 1057     osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x5
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 1058     
// 1059     bdb_setFN();
        ; Setup parameters for call to function bdb_setFN
        LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
// 1060       
// 1061     NLME_LeaveReq( &leaveReq );
        ; Setup parameters for call to function NLME_LeaveReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
        MOV       A,R1
// 1062     
// 1063     return;
        SJMP      ??bdb_resetLocalAction_1
// 1064   }
// 1065   else
// 1066   {
// 1067     bdb_setFN();
??bdb_resetLocalAction_0:
        ; Setup parameters for call to function bdb_setFN
        LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
// 1068     
// 1069     ZDApp_ResetTimerStart( 500 );
        ; Setup parameters for call to function ZDApp_ResetTimerStart
        MOV       R2,#-0xc
        MOV       R3,#0x1
        LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
// 1070   }
// 1071 }
??bdb_resetLocalAction_1:
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock9
// 1072 
// 1073 
// 1074  /*********************************************************************
// 1075  * @fn          bdb_parentLost
// 1076  *
// 1077  * @brief       Notify bdb that connection with parent is lost
// 1078  *
// 1079  * @return      none
// 1080  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1081 void bdb_parentLost(void)
bdb_parentLost:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function bdb_parentLost
        CODE
// 1082 {
        FUNCALL bdb_parentLost, bdb_nwkDescFree
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_parentLost, nwk_desc_list_free
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_parentLost, bdb_reportCommissioningState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_parentLost, NLME_OrphanStateSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_parentLost, ZDApp_ChangeState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_parentLost, ZMacSetReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_parentLost, bdb_reportCommissioningState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 1)
// 1083 #if ZG_BUILD_ENDDEVICE_TYPE
// 1084   if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1085   {
// 1086     while(pBDBListNwk)
??bdb_parentLost_0:
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_parentLost_1
// 1087     {
// 1088       bdb_nwkDescFree(pBDBListNwk);
        ; Setup parameters for call to function bdb_nwkDescFree
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
        MOV       A,R1
        SJMP      ??bdb_parentLost_0
// 1089     }
// 1090     
// 1091     nwk_desc_list_free();  
??bdb_parentLost_1:
        ; Setup parameters for call to function nwk_desc_list_free
        LCALL     `??nwk_desc_list_free::?relay`; Banked call to: nwk_desc_list_free
// 1092     if(bdbCommissioningProcedureState.bdbCommissioningState != BDB_PARENT_LOST)
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,#0x8
        JZ        ??bdb_parentLost_2
// 1093     {
// 1094       //If parent lost during TCLK exchange, then report TCLK exchange fail
// 1095       if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE)
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??bdb_parentLost_3
// 1096       {
// 1097         bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x1
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 1098         return;
        SJMP      ??bdb_parentLost_4
// 1099       }
// 1100       bdbCommissioningProcedureState.bdb_ParentLostSavedState = bdbCommissioningProcedureState.bdbCommissioningState;
??bdb_parentLost_3:
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        MOV       DPTR,#bdbCommissioningProcedureState + 3
        MOVX      @DPTR,A
// 1101       
// 1102     }
// 1103     bdbCommissioningProcedureState.bdbCommissioningState = BDB_PARENT_LOST;
??bdb_parentLost_2:
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x8
        MOVX      @DPTR,A
// 1104     NLME_OrphanStateSet();
        ; Setup parameters for call to function NLME_OrphanStateSet
        LCALL     `??NLME_OrphanStateSet::?relay`; Banked call to: NLME_OrphanStateSet
// 1105     ZDApp_ChangeState( DEV_NWK_ORPHAN );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0xa
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1106     
// 1107     // turn receiver off while in orphan state
// 1108     byte temp = FALSE;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1109     ZMacSetReq(ZMacRxOnIdle, &temp);
        ; Setup parameters for call to function ZMacSetReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x52
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
        MOV       A,R1
// 1110     
// 1111     bdb_reportCommissioningState(BDB_PARENT_LOST,FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x8
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 1112   }
// 1113 #endif
// 1114 }
??bdb_parentLost_4:
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock10
// 1115 
// 1116 
// 1117 
// 1118 
// 1119 
// 1120  /*********************************************************************
// 1121  * @fn          bdb_NetworkRestoredResumeState
// 1122  *
// 1123  * @brief       Restore the state of child device after parent lost
// 1124  *
// 1125  * @return      none
// 1126  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1127 void bdb_NetworkRestoredResumeState(void)
bdb_NetworkRestoredResumeState:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function bdb_NetworkRestoredResumeState
        CODE
// 1128 {
        FUNCALL bdb_NetworkRestoredResumeState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1129 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)   
// 1130 #if ZG_BUILD_ENDDEVICE_TYPE
// 1131   if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1132   {
// 1133     uint8 restoreSimpleDesc = FALSE;
        MOV       R6,#0x0
// 1134     //If restored when F&B still enabled, then restore the simple descriptors attempts
// 1135     if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??bdb_NetworkRestoredResumeState_0
// 1136     {
// 1137       bdbFindingBindingRespondent_t  *pRespondentTemp = NULL;
        MOV       R0,#0x0
        MOV       R1,#0x0
// 1138       
// 1139       pRespondentTemp = pRespondentHead;
        MOV       DPTR,#pRespondentHead
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        MOV       R0,A
        MOV       A,R3
        MOV       R1,A
// 1140       
// 1141       while(pRespondentTemp != NULL)
??bdb_NetworkRestoredResumeState_1:
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_NetworkRestoredResumeState_0
// 1142       {
// 1143         if(pRespondentTemp->attempts & FINDING_AND_BINDING_PARENT_LOST)
        MOV       A,R0
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.6
        JNC       ??bdb_NetworkRestoredResumeState_2
// 1144         {
// 1145           pRespondentTemp->attempts &= ~FINDING_AND_BINDING_PARENT_LOST;
        MOV       A,R0
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.6
        MOVX      @DPTR,A
// 1146           restoreSimpleDesc = TRUE;
        MOV       R6,#0x1
// 1147         }
// 1148         pRespondentTemp = pRespondentTemp->pNext;
??bdb_NetworkRestoredResumeState_2:
        MOV       A,R0
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        SJMP      ??bdb_NetworkRestoredResumeState_1
// 1149       }
// 1150     }
// 1151     if(restoreSimpleDesc)
??bdb_NetworkRestoredResumeState_0:
        MOV       A,R6
        JZ        ??bdb_NetworkRestoredResumeState_3
// 1152     {
// 1153       //Restore the simple Descriptor sending after 1 second of restoring the network
// 1154       osal_start_timerEx(bdb_TaskID,BDB_RESPONDENT_PROCESS_TIMEOUT, 1000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3e8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       R2,#0x0
        MOV       R3,#0x40
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        MOV       A,R1
// 1155     }
// 1156   }
// 1157 #endif
// 1158 #endif
// 1159 }
??bdb_NetworkRestoredResumeState_3:
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock11
// 1160 
// 1161 #if ZG_BUILD_ENDDEVICE_TYPE
// 1162  /*********************************************************************
// 1163  * @fn          bdb_ZedAttemptRecoverNwk
// 1164  *
// 1165  * @brief       Instruct the ZED to try to rejoin its previews network
// 1166  *
// 1167  * @return      success if the attempt is being excecuted
// 1168  *              False if device do not have nwk parameters to perform this action
// 1169  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1170 uint8 bdb_ZedAttemptRecoverNwk(void)
bdb_ZedAttemptRecoverNwk:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function bdb_ZedAttemptRecoverNwk
        CODE
// 1171 {
        FUNCALL bdb_ZedAttemptRecoverNwk, ZDOInitDeviceEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1172   if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1173   {
// 1174     if(bdbAttributes.bdbNodeIsOnANetwork)
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        JZ        ??bdb_ZedAttemptRecoverNwk_0
// 1175     {
// 1176       if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST)
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,#0x8
        JNZ       ??bdb_ZedAttemptRecoverNwk_0
// 1177       {
// 1178         if(ZDOInitDevice(0) == ZDO_INITDEV_RESTORED_NETWORK_STATE)
        ; Setup parameters for call to function ZDOInitDeviceEx
        MOV       R1,#0x0
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
        MOV       A,R1
        JNZ       ??bdb_ZedAttemptRecoverNwk_0
// 1179         {
// 1180           return ZSuccess;
        MOV       R1,#0x0
        SJMP      ??bdb_ZedAttemptRecoverNwk_1
// 1181         }
// 1182       }
// 1183     }
// 1184   }
// 1185   return ZFailure;
??bdb_ZedAttemptRecoverNwk_0:
        MOV       R1,#0x1
??bdb_ZedAttemptRecoverNwk_1:
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
// 1186 }
          CFI EndBlock cfiBlock12
// 1187 
// 1188 #endif
// 1189 
// 1190  /*********************************************************************
// 1191  * @fn          bdb_reportCommissioningState
// 1192  *
// 1193  * @brief       Process the result of a BDB main state attempt.
// 1194  *
// 1195  * @param       bdbCommissioningState - MainState that is issuing fail
// 1196  * @param       didSuccess - TRUE if the main state were success, FALSE otherwise
// 1197  *
// 1198  * @return      none
// 1199  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1200 void bdb_reportCommissioningState(uint8 bdbCommissioningState,bool didSuccess)
bdb_reportCommissioningState:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function bdb_reportCommissioningState
        CODE
// 1201 {
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_nwkDescFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_setFN
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, NLME_ResetRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_nwkDescFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_getRespondentRetry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_zclRespondentListClean
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, nwk_setStateIdle
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_RestoreNwkSecMaterial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_isDeviceNonFactoryNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_NetworkRestoredResumeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 4
        MOV       A,#-0x4
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
        MOV       R6,A
        MOV       A,R2
        MOV       R7,A
// 1202   bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
// 1203   //Process only if we are in that state, or if we are on parent lost and processing F&B
// 1204   if((bdbCommissioningProcedureState.bdbCommissioningState == bdbCommissioningState)
// 1205      || ((bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST) && (bdbCommissioningProcedureState.bdb_ParentLostSavedState == BDB_COMMISSIONING_STATE_FINDING_BINDING)))
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,R6
        JZ        ??bdb_reportCommissioningState_0
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,#0x8
        JZ        $+5
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
        MOV       DPTR,#bdbCommissioningProcedureState + 3
        MOVX      A,@DPTR
        XRL       A,#0x6
        JZ        $+5
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
// 1206   {
// 1207     switch(bdbCommissioningState)
??bdb_reportCommissioningState_0:
        MOV       A,R6
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_reportCommissioningState_2 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_reportCommissioningState_3 & 0xFFFF
        DEC       A
        JZ        ??bdb_reportCommissioningState_4
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_reportCommissioningState_5 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_reportCommissioningState_6 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_reportCommissioningState_7 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_reportCommissioningState_8 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_reportCommissioningState_9 & 0xFFFF
        LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
// 1208     {
// 1209 #if (ZG_BUILD_JOINING_TYPE)
// 1210       case BDB_COMMISSIONING_STATE_JOINING:
// 1211         if(ZG_DEVICE_JOINING_TYPE)
??bdb_reportCommissioningState_4:
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??bdb_reportCommissioningState_11
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x2
        JZ        $+5
        LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
// 1212         {
// 1213           //Prepare for the next state or commissioning mode to be excecuted
// 1214           osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
??bdb_reportCommissioningState_11:
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
// 1215 
// 1216           if(didSuccess)
        MOV       A,R7
        JZ        ??bdb_reportCommissioningState_12
// 1217           {
// 1218             //Next state is TC link key exchange
// 1219             bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1220             //Free the list of nwk discovered
// 1221             while(pBDBListNwk)
??bdb_reportCommissioningState_13:
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_reportCommissioningState_14
// 1222             {
// 1223               bdb_nwkDescFree(pBDBListNwk);
        ; Setup parameters for call to function bdb_nwkDescFree
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
        MOV       A,R1
        SJMP      ??bdb_reportCommissioningState_13
// 1224             }
// 1225             
// 1226             //Set the poll rate of the ZED joining device to 1 second to allow TCLK 
// 1227             //exchange be perfomed successfully in cases in which application has a 
// 1228             //slow pollrate
// 1229             NLME_SetPollRate(TCLK_POLL_RATE);
??bdb_reportCommissioningState_14:
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#__Constant_3e8
        LCALL     ?XLOAD_R2345
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1230             
// 1231             //No notification in this step
// 1232             return;
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
// 1233           } 
// 1234           else
// 1235           {
// 1236             uint8 temp = FALSE;
??bdb_reportCommissioningState_12:
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1237             //If fail, then restore poll rate
// 1238             NLME_SetPollRate(POLL_RATE);
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#__Constant_0
        LCALL     ?XLOAD_R2345
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1239             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0x2
        MOVX      @DPTR,A
// 1240             bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1241             bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1242             bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_STEERING;
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.1
        MOVX      @DPTR,A
// 1243             
// 1244             //Turn off the radio
// 1245             ZMacSetReq(ZMacRxOnIdle, &temp);
        ; Setup parameters for call to function ZMacSetReq
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        MOV       R1,#0x52
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
        MOV       A,R1
// 1246             //Set the device to FN, to start as new for subsequent attempts
// 1247             bdb_setFN();
        ; Setup parameters for call to function bdb_setFN
        LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
// 1248             NLME_ResetRequest();
        ; Setup parameters for call to function NLME_ResetRequest
        LCALL     `??NLME_ResetRequest::?relay`; Banked call to: NLME_ResetRequest
        MOV       A,R1
// 1249             ZDApp_ChangeState( DEV_HOLD );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x0
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1250             
// 1251             //Free the list of nwk discovered
// 1252             while(pBDBListNwk)
??bdb_reportCommissioningState_15:
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_reportCommissioningState_16
// 1253             {
// 1254               bdb_nwkDescFree(pBDBListNwk);
        ; Setup parameters for call to function bdb_nwkDescFree
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
        MOV       A,R1
        SJMP      ??bdb_reportCommissioningState_15
// 1255             }
// 1256           }
// 1257         }
// 1258       break;
??bdb_reportCommissioningState_16:
        LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
// 1259 
// 1260       case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
// 1261         if(ZG_DEVICE_JOINING_TYPE)
??bdb_reportCommissioningState_2:
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??bdb_reportCommissioningState_17
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??bdb_reportCommissioningState_18
// 1262         {
// 1263           if(didSuccess)
??bdb_reportCommissioningState_17:
        MOV       A,R7
        JZ        ??bdb_reportCommissioningState_19
// 1264           {
// 1265             //Clear any setting that would set the device as FN
// 1266             zgWriteStartupOptions(ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);            
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x3
        MOV       R1,#0x0
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
        MOV       A,R1
// 1267             
// 1268             //Next state is nwk steering on the nwk (permit joining)
// 1269             bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_STEERING_ON_NWK;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x4
        MOVX      @DPTR,A
// 1270             osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE, 50);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
// 1271             
// 1272             //Set the poll rate to the application default after TCLK success
// 1273             NLME_SetPollRate(POLL_RATE);
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#__Constant_0
        LCALL     ?XLOAD_R2345
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1274 
// 1275             osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x10
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
// 1276             //No notification to the user is needed
// 1277             return;
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
// 1278           }
// 1279           else
// 1280           {
// 1281             bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
??bdb_reportCommissioningState_19:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1282             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_TCLK_EX_FAILURE;
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0x7
        MOVX      @DPTR,A
// 1283             
// 1284             osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x10
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
// 1285            
// 1286             //No process shall be attempted after this fail
// 1287             bdbAttributes.bdbCommissioningMode = 0;
        MOV       DPTR,#bdbAttributes + 11
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1288             
// 1289             //Fill the context for the user notification
// 1290             osal_start_timerEx(bdb_TaskID,BDB_TC_LINK_KEY_EXCHANGE_FAIL,BDB_TC_LINK_KEY_EXCHANGE_FAIL_LEAVE_TIMEOUT);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_1388
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R2,#0x2
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
// 1291           }
// 1292         }
// 1293       break;
??bdb_reportCommissioningState_18:
        LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
// 1294 #endif
// 1295       
// 1296       case BDB_COMMISSIONING_STATE_STEERING_ON_NWK:
// 1297         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
??bdb_reportCommissioningState_5:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1298         if(didSuccess)
        MOV       A,R7
        JZ        ??bdb_reportCommissioningState_20
// 1299         {
// 1300           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1301           
// 1302 #if (ZG_BUILD_RTR_TYPE)          
// 1303           //Update ZDApp state
// 1304           if(ZG_DEVICE_RTRONLY_TYPE)
// 1305           {          
// 1306             ZDApp_ChangeState( DEV_ROUTER );
// 1307           }
// 1308 #endif
// 1309 #if (ZG_BUILD_ENDDEVICE_TYPE)
// 1310           if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1311           {
// 1312             ZDApp_ChangeState( DEV_END_DEVICE );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x6
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1313           }
// 1314 #endif
// 1315         }
// 1316 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1317         else
// 1318         {
// 1319           if(ZG_DEVICE_COORDINATOR_TYPE)
// 1320           {
// 1321             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
// 1322           }
// 1323         }
// 1324 #endif
// 1325         
// 1326         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
??bdb_reportCommissioningState_20:
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1327         osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
// 1328         bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_STEERING;
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.1
        MOVX      @DPTR,A
// 1329       break;
        LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
// 1330       
// 1331       case BDB_COMMISSIONING_STATE_FORMATION:
// 1332         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FORMATION;
??bdb_reportCommissioningState_6:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
// 1333 
// 1334         if(didSuccess)
        MOV       A,R7
        JZ        ??bdb_reportCommissioningState_21
// 1335         {
// 1336           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1337 
// 1338           //Clear any setting that would set the device as FN
// 1339           zgWriteStartupOptions(ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);          
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x3
        MOV       R1,#0x0
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
        MOV       A,R1
        SJMP      ??bdb_reportCommissioningState_22
// 1340           
// 1341            //Update ZDApp State
// 1342 #if (ZG_BUILD_RTR_TYPE)
// 1343           if(ZG_DEVICE_RTRONLY_TYPE)
// 1344           {          
// 1345             ZDApp_ChangeState( DEV_ROUTER );
// 1346           }
// 1347 #endif    
// 1348 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1349           if(ZG_DEVICE_COORDINATOR_TYPE)
// 1350           {          
// 1351             ZDApp_ChangeState( DEV_ZB_COORD );
// 1352           }     
// 1353 #endif
// 1354         }
// 1355         else
// 1356         {
// 1357           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_FORMATION_FAILURE;
??bdb_reportCommissioningState_21:
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0x8
        MOVX      @DPTR,A
// 1358           //If not on the nwk, then restart the nwk parameters
// 1359 #if (ZG_BUILD_RTR_TYPE)
// 1360           if(ZG_DEVICE_RTR_TYPE)
// 1361           {           
// 1362             if(!bdbAttributes.bdbNodeIsOnANetwork)
// 1363             {
// 1364               uint8 temp = FALSE;
// 1365               //Turn off the radio
// 1366               ZMacSetReq(ZMacRxOnIdle, &temp);
// 1367               //Set the device to FN, to start as new for subsequent attempts
// 1368               bdb_setFN();
// 1369               NLME_ResetRequest();
// 1370               ZDApp_ChangeState( DEV_HOLD );
// 1371             }
// 1372           }
// 1373 #endif
// 1374         }
// 1375         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
??bdb_reportCommissioningState_22:
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1376         osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
// 1377         bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_FORMATION;
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.2
        MOVX      @DPTR,A
// 1378       break;  
        LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
// 1379       
// 1380 
// 1381       case BDB_COMMISSIONING_STATE_FINDING_BINDING:
// 1382 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
// 1383         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
??bdb_reportCommissioningState_7:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x3
        MOVX      @DPTR,A
// 1384 
// 1385         //Do not notify the status if we have another identify to send
// 1386         if(bdbAttributes.bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
        MOV       DPTR,#bdbAttributes + 10
        MOVX      A,@DPTR
        JNZ       ??bdb_reportCommissioningState_23
// 1387         {
// 1388           //Success at least once during F&B as initiator, mark it
// 1389           bdb_FBStateSuccessLatch = TRUE;
        MOV       DPTR,#bdb_FBStateSuccessLatch
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1390         }        
// 1391         
// 1392         //Will we process another indentify?
// 1393         if(((FINDING_AND_BINDING_PERIODIC_ENABLE == FALSE) || (bdb_FB_InitiatorCurrentCyclesNumber == 0)) && (bdb_getRespondentRetry(pRespondentHead) == NULL) && (osal_get_timeoutEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT) == 0))
??bdb_reportCommissioningState_23:
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX      A,@DPTR
        JZ        $+5
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
        ; Setup parameters for call to function bdb_getRespondentRetry
        MOV       DPTR,#pRespondentHead
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,?V0
        ORL       A,?V1
        JZ        $+5
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x0
        MOV       R3,#0x40
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV       A,R2
        ORL       A,R3
        ORL       A,R4
        ORL       A,R5
        JZ        $+5
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
// 1394         {
// 1395           // Dealocate respondent list and clean all the F&B process
// 1396           pRespondentCurr = NULL;
        MOV       DPTR,#pRespondentCurr
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1397           pRespondentNext = NULL;
        MOV       DPTR,#pRespondentNext
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1398           bdb_zclRespondentListClean( &pRespondentHead );
        ; Setup parameters for call to function bdb_zclRespondentListClean
        MOV       R2,#pRespondentHead & 0xff
        MOV       R3,#(pRespondentHead >> 8) & 0xff
        LCALL     `??bdb_zclRespondentListClean::?relay`; Banked call to: bdb_zclRespondentListClean
// 1399           osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x40
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
// 1400           
// 1401           //Report success if in any of the attempts we got success, regardless that we did receive no rsp on the last attempt
// 1402           if(bdb_FBStateSuccessLatch && (bdbAttributes.bdbCommissioningStatus == BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE))
        MOV       DPTR,#bdb_FBStateSuccessLatch
        MOVX      A,@DPTR
        JZ        ??bdb_reportCommissioningState_24
        MOV       DPTR,#bdbAttributes + 10
        MOVX      A,@DPTR
        XRL       A,#0xb
        JNZ       ??bdb_reportCommissioningState_24
// 1403           {
// 1404             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1405           }
// 1406           
// 1407           //Set default state
// 1408           bdb_FBStateSuccessLatch = FALSE;
??bdb_reportCommissioningState_24:
        MOV       DPTR,#bdb_FBStateSuccessLatch
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1409           
// 1410           //Resume BDB machine state only if we were in F&B, if we were on parent lost, only clean the commissioning mode and remove from bdb_ParentLostSavedState
// 1411           if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??bdb_reportCommissioningState_25
// 1412           {
// 1413             bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1414             osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50); 
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
        SJMP      ??bdb_reportCommissioningState_26
// 1415           }
// 1416           else if(bdbCommissioningProcedureState.bdb_ParentLostSavedState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
??bdb_reportCommissioningState_25:
        MOV       DPTR,#bdbCommissioningProcedureState + 3
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??bdb_reportCommissioningState_26
// 1417           {
// 1418             bdbCommissioningProcedureState.bdb_ParentLostSavedState = BDB_COMMISSIONING_STATE_START_RESUME;
        MOV       DPTR,#bdbCommissioningProcedureState + 3
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1419           }
// 1420           
// 1421           bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_FINDING_BINDING;
??bdb_reportCommissioningState_26:
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.3
        MOVX      @DPTR,A
// 1422         }
// 1423         else
// 1424         {
// 1425           return;
// 1426         }
// 1427 
// 1428 #endif
// 1429       break;     
        LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
// 1430       case BDB_COMMISSIONING_STATE_TL:
// 1431         // Set NWK task to run
// 1432         nwk_setStateIdle( FALSE );
??bdb_reportCommissioningState_3:
        ; Setup parameters for call to function nwk_setStateIdle
        MOV       R1,#0x0
        LCALL     `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
// 1433         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_TOUCHLINK;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x4
        MOVX      @DPTR,A
// 1434         if(didSuccess)
        MOV       A,R7
        JZ        ??bdb_reportCommissioningState_27
// 1435         {
// 1436           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1437           bdbAttributes.bdbCommissioningMode = BDB_COMMISSIONING_MODE_IDDLE;
        MOV       DPTR,#bdbAttributes + 11
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1438           
// 1439           //Update ZDApp state
// 1440 #if (ZG_BUILD_RTR_TYPE)
// 1441           if(ZG_DEVICE_RTRONLY_TYPE)
// 1442           {          
// 1443             ZDApp_ChangeState( DEV_ROUTER );
// 1444           }
// 1445 #endif
// 1446 #if (ZG_BUILD_ENDDEVICE_TYPE)
// 1447           if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1448           {
// 1449             ZDApp_ChangeState( DEV_END_DEVICE );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x6
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1450           }
// 1451 #endif          
// 1452         }
// 1453         //The fail status is already set from the calling function to report commissioning process
// 1454         
// 1455         // The commissioning FAIL status is set before calling the bdb_reportCommissioningState
// 1456         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
??bdb_reportCommissioningState_27:
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1457         osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50); 
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
// 1458         //Clear the event
// 1459         bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_INITIATOR_TL;
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.0
        MOVX      @DPTR,A
// 1460         
// 1461       break;
        LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
// 1462       
// 1463       case BDB_INITIALIZATION:
// 1464         //Notify user about successfull initialization
// 1465         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_INITIALIZATION;
??bdb_reportCommissioningState_8:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1466         if(didSuccess)
        MOV       A,R7
        JZ        ??bdb_reportCommissioningState_28
// 1467         {
// 1468           //Update ZDApp state
// 1469 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1470           if(ZG_DEVICE_COORDINATOR_TYPE)
// 1471           {          
// 1472             ZDApp_ChangeState( DEV_ZB_COORD );
// 1473           }
// 1474 #endif          
// 1475 #if (ZG_BUILD_ENDDEVICE_TYPE)
// 1476           if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1477           {
// 1478             uint32 pollrate = POLL_RATE;
        MOV       ?V0,#0x0
        MOV       ?V1,#0x0
        MOV       ?V2,#0x0
        MOV       ?V3,#0x0
// 1479             NLME_SetPollRate(pollrate);
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R4,?V2
        MOV       R5,?V3
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1480             ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x4
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1481             
// 1482           }
// 1483 #endif          
// 1484           ZDApp_RestoreNwkSecMaterial();
        ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
        LCALL     `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
// 1485           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NETWORK_RESTORED;
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0xd
        MOVX      @DPTR,A
// 1486           bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1487           osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,200);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_c8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
        SJMP      ??bdb_reportCommissioningState_29
// 1488         }
// 1489         else
// 1490         {
// 1491 #if (ZG_BUILD_ENDDEVICE_TYPE)                   
// 1492           if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1493           {
// 1494             if(bdb_isDeviceNonFactoryNew())
??bdb_reportCommissioningState_28:
        ; Setup parameters for call to function bdb_isDeviceNonFactoryNew
        LCALL     `??bdb_isDeviceNonFactoryNew::?relay`; Banked call to: bdb_isDeviceNonFactoryNew
        MOV       A,R1
        JZ        ??bdb_reportCommissioningState_30
// 1495             {
// 1496               //Notify the user about losing parent
// 1497               bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_PARENT_LOST;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x5
        MOVX      @DPTR,A
// 1498               bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_PARENT_LOST;
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.5
        MOVX      @DPTR,A
// 1499               
// 1500               //Update ZDApp state
// 1501               ZDApp_ChangeState( DEV_NWK_ORPHAN );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0xa
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1502             }
// 1503           }
// 1504 #endif
// 1505           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
??bdb_reportCommissioningState_30:
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0x2
        MOVX      @DPTR,A
// 1506         }
// 1507         bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_INITIALIZATION;
??bdb_reportCommissioningState_29:
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.4
        MOVX      @DPTR,A
// 1508 
// 1509       break;
        SJMP      ??bdb_reportCommissioningState_10
// 1510 #if (ZG_BUILD_ENDDEVICE_TYPE)     
// 1511       case BDB_PARENT_LOST:
// 1512         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_PARENT_LOST;
??bdb_reportCommissioningState_9:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x5
        MOVX      @DPTR,A
// 1513         if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1514         {
// 1515           if(didSuccess)
        MOV       A,R7
        JZ        ??bdb_reportCommissioningState_31
// 1516           {
// 1517             uint32 pollrate = POLL_RATE;
        MOV       ?V0,#0x0
        MOV       ?V1,#0x0
        MOV       ?V2,#0x0
        MOV       ?V3,#0x0
// 1518             bdbCommissioningProcedureState.bdbCommissioningState = bdbCommissioningProcedureState.bdb_ParentLostSavedState;  
        MOV       DPTR,#bdbCommissioningProcedureState + 3
        MOVX      A,@DPTR
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      @DPTR,A
// 1519             bdbCommissioningProcedureState.bdb_ParentLostSavedState = 0;
        MOV       DPTR,#bdbCommissioningProcedureState + 3
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1520             NLME_SetPollRate(pollrate);
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R4,?V2
        MOV       R5,?V3
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1521             bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_PARENT_LOST;
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.5
        MOVX      @DPTR,A
// 1522             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NETWORK_RESTORED;
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0xd
        MOVX      @DPTR,A
// 1523             //Update ZDApp state
// 1524             ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x4
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1525             
// 1526             bdb_NetworkRestoredResumeState();
        ; Setup parameters for call to function bdb_NetworkRestoredResumeState
        LCALL     `??bdb_NetworkRestoredResumeState::?relay`; Banked call to: bdb_NetworkRestoredResumeState
        SJMP      ??bdb_reportCommissioningState_10
// 1527           }
// 1528           else
// 1529           {
// 1530             bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_PARENT_LOST;
??bdb_reportCommissioningState_31:
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.5
        MOVX      @DPTR,A
// 1531             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0x2
        MOVX      @DPTR,A
// 1532             
// 1533             NLME_SetPollRate(0);
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#__Constant_0
        LCALL     ?XLOAD_R2345
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1534             
// 1535           }
// 1536         }
// 1537       break;
// 1538 #endif
// 1539     }
// 1540 #ifdef MT_APP_CNF_FUNC
// 1541     //Notify the user about the status, the main state which has failed
// 1542     bdbCommissioningModeMsg.bdbCommissioningStatus = bdbAttributes.bdbCommissioningStatus;
// 1543     
// 1544     bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
// 1545 #else
// 1546     if(pfnCommissioningStatusCB)
??bdb_reportCommissioningState_10:
        MOV       DPTR,#pfnCommissioningStatusCB
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_reportCommissioningState_1
// 1547     {
// 1548       //Notify the user about the status, the main state which has failed
// 1549       bdbCommissioningModeMsg.bdbCommissioningStatus = bdbAttributes.bdbCommissioningStatus;
        MOV       DPTR,#bdbAttributes + 10
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1550       
// 1551       bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
        ; Setup parameters for call to function bdb_SendMsg
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R4,#0x3
        MOV       R3,#0x0
        MOV       R2,#0xa
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 1552     }
// 1553 #endif
// 1554   }  
// 1555 }
??bdb_reportCommissioningState_1:
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock13
// 1556 
// 1557 
// 1558  /*********************************************************************
// 1559  * @fn          bdb_nwkFormationAttempt
// 1560  *
// 1561  * @brief       Process a nwk formation attempt.
// 1562  *
// 1563  * @param       didSuccess - TRUE if the nwk formation was success, FALSE 
// 1564  *                         otherwise and try secondary channel
// 1565  *
// 1566  * @return      none
// 1567  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1568 void bdb_nwkFormationAttempt(bool didSuccess)
bdb_nwkFormationAttempt:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function bdb_nwkFormationAttempt
        CODE
// 1569 {
        FUNCALL bdb_nwkFormationAttempt, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkFormationAttempt, bdb_nwkJoiningFormation
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkFormationAttempt, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 1570   if(didSuccess)
        MOV       A,R6
        JZ        ??bdb_nwkFormationAttempt_0
// 1571   {
// 1572     bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION,TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x5
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
        SJMP      ??bdb_nwkFormationAttempt_1
// 1573   }
// 1574   else
// 1575   {
// 1576     //Can we try the secondary channel set?
// 1577     if((vDoPrimaryScan) && (bdbAttributes.bdbSecondaryChannelSet))
??bdb_nwkFormationAttempt_0:
        MOV       DPTR,#vDoPrimaryScan
        MOVX      A,@DPTR
        JZ        ??bdb_nwkFormationAttempt_2
        MOV       DPTR,#bdbAttributes
        LCALL     ?XLOAD_R0123
        MOV       A,R0
        ORL       A,R1
        ORL       A,R2
        ORL       A,R3
        JZ        ??bdb_nwkFormationAttempt_2
// 1578     {
// 1579       vDoPrimaryScan = FALSE;
        MOV       DPTR,#vDoPrimaryScan
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1580       bdb_nwkJoiningFormation(FALSE);
        ; Setup parameters for call to function bdb_nwkJoiningFormation
        MOV       R1,#0x0
        LCALL     `??bdb_nwkJoiningFormation::?relay`; Banked call to: bdb_nwkJoiningFormation
        SJMP      ??bdb_nwkFormationAttempt_1
// 1581     }
// 1582     else
// 1583     {
// 1584       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
??bdb_nwkFormationAttempt_2:
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x5
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 1585     }
// 1586   }
// 1587 }
??bdb_nwkFormationAttempt_1:
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock14
// 1588 
// 1589 
// 1590 
// 1591 /*********************************************************************
// 1592  * @fn          bdb_isDeviceNonFactoryNew
// 1593  *
// 1594  * @brief       Returns the state of bdbNodeIsOnANetwork attribute
// 1595  * 
// 1596  * @param       none
// 1597  *
// 1598  * @return      bdbNodeIsOnANetwork
// 1599  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1600 bool bdb_isDeviceNonFactoryNew(void)
bdb_isDeviceNonFactoryNew:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function bdb_isDeviceNonFactoryNew
        CODE
// 1601 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1602   return bdbAttributes.bdbNodeIsOnANetwork;
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        MOV       R1,A
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
// 1603 }
          CFI EndBlock cfiBlock15
// 1604 
// 1605 
// 1606 /*********************************************************************
// 1607  * @fn          bdb_doTrustCenterRequireKeyExchange
// 1608  *
// 1609  * @brief       Returns the state of bdbTrustCenterRequireKeyExchange attribute
// 1610  * 
// 1611  * @param       none
// 1612  *
// 1613  * @return      bdbTrustCenterRequireKeyExchange
// 1614  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1615 bool bdb_doTrustCenterRequireKeyExchange(void)
bdb_doTrustCenterRequireKeyExchange:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function bdb_doTrustCenterRequireKeyExchange
        CODE
// 1616 {
        ; Saved register size: 0
        ; Auto size: 0
// 1617 #if (ZG_BUILD_COORDINATOR_TYPE) 
// 1618   return bdbAttributes.bdbTrustCenterRequireKeyExchange;
// 1619 #else
// 1620   return 0;
        MOV       R1,#0x0
        LJMP      ?BRET
// 1621 #endif
// 1622 }
          CFI EndBlock cfiBlock16
// 1623 
// 1624 /*********************************************************************
// 1625  * @fn      bdb_rejoinNwk
// 1626  *
// 1627  * @brief   Attempt to rejoin/resume a nwk from nv parameters
// 1628  *
// 1629  * @param   none
// 1630  *
// 1631  * @return  ZStatus_t
// 1632  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1633 ZStatus_t bdb_rejoinNwk(void)
bdb_rejoinNwk:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function bdb_rejoinNwk
        CODE
// 1634 {
        FUNCALL bdb_rejoinNwk, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZDApp_RestoreNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZDApp_RestoreNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, NLME_ReJoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, NLME_ReJoinRequestUnsecure
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 1635   ZStatus_t rejoinStatus = ZSuccess;
        MOV       R6,#0x0
// 1636   
// 1637   //Update the seq number
// 1638   _NIB.SequenceNum ++;
        MOV       DPTR,#_NIB
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOVX      @DPTR,A
// 1639   
// 1640   osal_nv_write(ZCD_NV_NIB,osal_offsetof( nwkIB_t, SequenceNum ), sizeof( uint8), &_NIB.SequenceNum );
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V0,#_NIB & 0xff
        MOV       ?V1,#(_NIB >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x21
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       A,R1
// 1641   
// 1642   // Transition state machine to correct rejoin state based on nwk key
// 1643   if ( ZDApp_RestoreNwkKey( FALSE )== TRUE )
        ; Setup parameters for call to function ZDApp_RestoreNwkKey
        MOV       R1,#0x0
        LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??bdb_rejoinNwk_0
// 1644   {
// 1645     ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x4
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
        SJMP      ??bdb_rejoinNwk_1
// 1646   }
// 1647   else
// 1648   {
// 1649     ZDApp_ChangeState( DEV_NWK_TC_REJOIN_CURR_CHANNEL );
??bdb_rejoinNwk_0:
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0xe
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1650   }
// 1651 
// 1652   // Before trying to do rejoin, check if the device has a valid short address
// 1653   // If not, generate a random short address for itself
// 1654   if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
??bdb_rejoinNwk_1:
        MOV       DPTR,#_NIB + 20
        MOVX      A,@DPTR
        XRL       A,#0xfe
        JNZ       ??bdb_rejoinNwk_2
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0xff
??bdb_rejoinNwk_2:
        JNZ       ??bdb_rejoinNwk_3
// 1655   {
// 1656     rejoinStatus = ZFailure;
        MOV       R6,#0x1
// 1657   }
// 1658 
// 1659   // Check if the device has a valid PanID, if not, set it to the discovered Pan
// 1660   if ( _NIB.nwkPanId == 0xFFFF )
??bdb_rejoinNwk_3:
        MOV       DPTR,#_NIB + 33
        MOVX      A,@DPTR
        XRL       A,#0xff
        JNZ       ??bdb_rejoinNwk_4
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0xff
??bdb_rejoinNwk_4:
        JNZ       ??bdb_rejoinNwk_5
// 1661   {
// 1662     rejoinStatus = ZFailure;
        MOV       R6,#0x1
// 1663   }
// 1664 
// 1665   if(rejoinStatus == ZSuccess)
??bdb_rejoinNwk_5:
        MOV       A,R6
        JNZ       ??bdb_rejoinNwk_6
// 1666   {
// 1667     uint8 tmp = true;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1668     ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
        ; Setup parameters for call to function ZMacSetReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x52
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
        MOV       A,R1
// 1669         
// 1670     // Perform Secure or Unsecure Rejoin depending on available configuration
// 1671     if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == TRUE ) )
        ; Setup parameters for call to function ZDApp_RestoreNwkKey
        MOV       R1,#0x1
        LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??bdb_rejoinNwk_7
// 1672     {
// 1673       rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, _NIB.nwkLogicalChannel);
        ; Setup parameters for call to function NLME_ReJoinRequest
        MOV       DPTR,#_NIB + 22
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       R2,#ZDO_UseExtendedPANID & 0xff
        MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL     `??NLME_ReJoinRequest::?relay`; Banked call to: NLME_ReJoinRequest
        MOV       A,R1
        MOV       R6,A
        SJMP      ??bdb_rejoinNwk_6
// 1674     }
// 1675     else
// 1676     {
// 1677       rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, _NIB.nwkLogicalChannel);
??bdb_rejoinNwk_7:
        ; Setup parameters for call to function NLME_ReJoinRequestUnsecure
        MOV       DPTR,#_NIB + 22
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       R2,#ZDO_UseExtendedPANID & 0xff
        MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL     `??NLME_ReJoinRequestUnsecure::?relay`; Banked call to: NLME_ReJoinRequestUnsecure
        MOV       A,R1
        MOV       R6,A
// 1678     }
// 1679   }
// 1680   
// 1681   return rejoinStatus;
??bdb_rejoinNwk_6:
        MOV       A,R6
        MOV       R1,A
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
// 1682 }
          CFI EndBlock cfiBlock17
// 1683 
// 1684 #if (ZG_BUILD_JOINING_TYPE)
// 1685  /*********************************************************************
// 1686  * @fn          bdb_nwkDiscoveryAttempt
// 1687  *
// 1688  * @brief       Process a nwk discovery attempt
// 1689  *
// 1690  * @param       didSuccess - TRUE we found nwk in the scanned channels, FALSE if 
// 1691  *                           no suitable nwks were found, try secondary channel
// 1692  *
// 1693  * @return      none
// 1694  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1695 void bdb_nwkDiscoveryAttempt(bool didSuccess)
bdb_nwkDiscoveryAttempt:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function bdb_nwkDiscoveryAttempt
        CODE
// 1696 {
        FUNCALL bdb_nwkDiscoveryAttempt, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkDiscoveryAttempt, bdb_setChannel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkDiscoveryAttempt, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkDiscoveryAttempt, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       A,R1
        MOV       R6,A
// 1697   uint8 bdbJoinEvent = BDB_JOIN_EVENT_NWK_DISCOVERY;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1698   
// 1699   if(didSuccess)
        MOV       A,R6
        JZ        ??bdb_nwkDiscoveryAttempt_0
// 1700   {
// 1701     bdb_SendMsg(bdb_TaskID, BDB_COMMISSIONING_STATE_JOINING, BDB_MSG_EVENT_SUCCESS,sizeof(bdbJoinEvent),(uint8*)&bdbJoinEvent);
        ; Setup parameters for call to function bdb_SendMsg
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       R4,#0x1
        MOV       R3,#0x0
        MOV       R2,#0x3
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        SJMP      ??bdb_nwkDiscoveryAttempt_1
// 1702   }
// 1703   else
// 1704   {
// 1705     //Can we try the secondary channel set?
// 1706     if((vDoPrimaryScan) && (bdbAttributes.bdbSecondaryChannelSet))
??bdb_nwkDiscoveryAttempt_0:
        MOV       DPTR,#vDoPrimaryScan
        MOVX      A,@DPTR
        JZ        ??bdb_nwkDiscoveryAttempt_2
        MOV       DPTR,#bdbAttributes
        LCALL     ?XLOAD_R0123
        MOV       A,R0
        ORL       A,R1
        ORL       A,R2
        ORL       A,R3
        JZ        ??bdb_nwkDiscoveryAttempt_2
// 1707     {
// 1708       vDoPrimaryScan = FALSE;
        MOV       DPTR,#vDoPrimaryScan
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1709       bdb_setChannel(bdbAttributes.bdbSecondaryChannelSet);
        ; Setup parameters for call to function bdb_setChannel
        MOV       DPTR,#bdbAttributes
        LCALL     ?XLOAD_R2345
        LCALL     `??bdb_setChannel::?relay`; Banked call to: bdb_setChannel
// 1710       
// 1711       ZDApp_NetworkInit( 50 );
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV       R2,#0x32
        MOV       R3,#0x0
        LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
        SJMP      ??bdb_nwkDiscoveryAttempt_1
// 1712     }
// 1713     else
// 1714     {
// 1715       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, FALSE);
??bdb_nwkDiscoveryAttempt_2:
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x3
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 1716     }
// 1717   }
// 1718 }
??bdb_nwkDiscoveryAttempt_1:
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock18
// 1719 
// 1720  /*********************************************************************
// 1721  * @fn          bdb_filterNwkDisc
// 1722  *
// 1723  * @brief       Filter the nwks found and attempt to join the suitable nwks
// 1724  *              Here the application can include nwk filters 
// 1725  *
// 1726  * @param       none
// 1727  *
// 1728  * @return      none
// 1729  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1730 void bdb_filterNwkDisc(void)
bdb_filterNwkDisc:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function bdb_filterNwkDisc
        CODE
// 1731 {
        FUNCALL bdb_filterNwkDisc, nwk_getNwkDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_filterNwkDisc, nwk_desc_list_release
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_filterNwkDisc, nwk_ExtPANIDValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_filterNwkDisc, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_filterNwkDisc, bdb_nwkDescFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_filterNwkDisc, bdb_nwkDescFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_filterNwkDisc, bdb_nwkDescFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_filterNwkDisc, bdb_nwkDescFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 1732   networkDesc_t* pNwkDesc;
// 1733   uint8 i = 0;
        MOV       ?V1,#0x0
// 1734   uint8 ResultCount = 0;
        MOV       ?V0,#0x0
// 1735   uint8 stackProfile = 0;
        MOV       ?V2,#0x0
// 1736   uint8 stackProfilePro = 0;
        MOV       ?V3,#0x0
// 1737   
// 1738   pBDBListNwk  = nwk_getNwkDescList();
        ; Setup parameters for call to function nwk_getNwkDescList
        LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
        MOV       DPTR,#pBDBListNwk
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 1739   nwk_desc_list_release();
        ; Setup parameters for call to function nwk_desc_list_release
        LCALL     `??nwk_desc_list_release::?relay`; Banked call to: nwk_desc_list_release
// 1740   
// 1741   pNwkDesc = pBDBListNwk;
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
// 1742   while (pNwkDesc)
??bdb_filterNwkDisc_0:
        MOV       A,R6
        ORL       A,R7
        JZ        ??bdb_filterNwkDisc_1
// 1743   {
// 1744     ResultCount++;
        INC       ?V0
// 1745     pNwkDesc = pNwkDesc->nextDesc;
        MOV       A,R6
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        SJMP      ??bdb_filterNwkDisc_0
// 1746   }
// 1747   
// 1748   if(pBDBListNwk)
??bdb_filterNwkDisc_1:
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       $+5
        LJMP      ??bdb_filterNwkDisc_2 & 0xFFFF
// 1749   {
// 1750     if(pfnFilterNwkDesc)
        MOV       DPTR,#pfnFilterNwkDesc
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_filterNwkDisc_3
// 1751     {
// 1752       pfnFilterNwkDesc(pBDBListNwk, ResultCount);
        ; Setup parameters for indirect call
        MOV       R1,?V0
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPTR,#pfnFilterNwkDesc
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        LCALL     ?CALL_IND
// 1753     }
// 1754     
// 1755     for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
??bdb_filterNwkDisc_3:
        MOV       ?V2,#0x0
??bdb_filterNwkDisc_4:
        MOV       A,?V2
        CLR       C
        SUBB      A,#0x2
        JC        $+5
        LJMP      ??bdb_filterNwkDisc_2 & 0xFFFF
// 1756     {
// 1757       pNwkDesc = pBDBListNwk;
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
// 1758       
// 1759       if(pNwkDesc)
        MOV       A,R6
        ORL       A,R7
        JNZ       $+5
        LJMP      ??bdb_filterNwkDisc_5 & 0xFFFF
// 1760       {
// 1761         for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
        MOV       ?V1,#0x0
??bdb_filterNwkDisc_6:
        MOV       A,?V1
        CLR       C
        SUBB      A,?V0
        JC        $+5
        LJMP      ??bdb_filterNwkDisc_5 & 0xFFFF
// 1762         {
// 1763           if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
        ; Setup parameters for call to function nwk_ExtPANIDValid
        MOV       R2,#ZDO_UseExtendedPANID & 0xff
        MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??bdb_filterNwkDisc_7
// 1764           {
// 1765             // If the extended Pan ID is commissioned to a non zero value
// 1766             // Only join the Pan that has match EPID
// 1767             if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
        ; Setup parameters for call to function sAddrExtCmp
        MOV       A,R6
        ADD       A,#0xb
        MOV       R4,A
        CLR       A
        ADDC      A,R7
        MOV       R5,A
        MOV       R2,#ZDO_UseExtendedPANID & 0xff
        MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV       A,R1
        JNZ       ??bdb_filterNwkDisc_8
// 1768             {
// 1769               //Remove from the list
// 1770               bdb_nwkDescFree(pNwkDesc);
        ; Setup parameters for call to function bdb_nwkDescFree
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
        MOV       A,R1
// 1771               ResultCount--;
        DEC       ?V0
// 1772               continue;
        LJMP      ??bdb_filterNwkDisc_9 & 0xFFFF
// 1773             }
// 1774           }
// 1775           else if ( zgConfigPANID != 0xFFFF )
??bdb_filterNwkDisc_7:
        MOV       DPTR,#zgConfigPANID
        MOVX      A,@DPTR
        XRL       A,#0xff
        JNZ       ??bdb_filterNwkDisc_10
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0xff
??bdb_filterNwkDisc_10:
        JZ        ??bdb_filterNwkDisc_8
// 1776           {
// 1777             // PAN Id is preconfigured. check if it matches
// 1778             if ( pNwkDesc->panId != zgConfigPANID )
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#zgConfigPANID
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??bdb_filterNwkDisc_11
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
??bdb_filterNwkDisc_11:
        JZ        ??bdb_filterNwkDisc_8
// 1779             {
// 1780               //Remove from the list
// 1781               bdb_nwkDescFree(pNwkDesc);
        ; Setup parameters for call to function bdb_nwkDescFree
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
        MOV       A,R1
// 1782               ResultCount--;
        DEC       ?V0
// 1783               continue;
        LJMP      ??bdb_filterNwkDisc_9 & 0xFFFF
// 1784             }
// 1785           }
// 1786 
// 1787           if ( pNwkDesc->chosenRouter != _NIB.nwkCoordAddress || _NIB.nwkCoordAddress == INVALID_NODE_ADDR )
??bdb_filterNwkDisc_8:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#_NIB + 23
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??bdb_filterNwkDisc_12
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
??bdb_filterNwkDisc_12:
        JNZ       ??bdb_filterNwkDisc_13
        MOV       DPTR,#_NIB + 23
        MOVX      A,@DPTR
        XRL       A,#0xfe
        JNZ       ??bdb_filterNwkDisc_14
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0xff
??bdb_filterNwkDisc_14:
        JNZ       ??bdb_filterNwkDisc_15
// 1788           {
// 1789             // check that network is allowing joining
// 1790             if ( ZSTACK_ROUTER_BUILD )
// 1791             {
// 1792               if ( stackProfilePro == FALSE )
// 1793               {
// 1794                 if ( !pNwkDesc->routerCapacity )
// 1795                 {
// 1796                   //Remove from the list
// 1797                   bdb_nwkDescFree(pNwkDesc);
// 1798                   ResultCount--;
// 1799                   continue;
// 1800                 }
// 1801               }
// 1802               else
// 1803               {
// 1804                 if ( !pNwkDesc->deviceCapacity )
// 1805                 {
// 1806                   //Remove from the list
// 1807                   bdb_nwkDescFree(pNwkDesc);
// 1808                   ResultCount--;
// 1809                   continue;
// 1810                 }
// 1811               }
// 1812             }
// 1813             else if ( ZSTACK_END_DEVICE_BUILD )
// 1814             {
// 1815               if ( !pNwkDesc->deviceCapacity )
??bdb_filterNwkDisc_13:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JNZ       ??bdb_filterNwkDisc_15
// 1816               {
// 1817                 //Remove from the list
// 1818                 bdb_nwkDescFree(pNwkDesc);
        ; Setup parameters for call to function bdb_nwkDescFree
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
        MOV       A,R1
// 1819                 ResultCount--;
        DEC       ?V0
// 1820                 continue;
        SJMP      ??bdb_filterNwkDisc_9
// 1821               }
// 1822             }
// 1823           }
// 1824 
// 1825           // check version of zigbee protocol
// 1826           if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
??bdb_filterNwkDisc_15:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPTR,#_NIB + 17
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??bdb_filterNwkDisc_9
// 1827             continue;
// 1828 
// 1829           // check version of stack profile
// 1830           if ( pNwkDesc->stackProfile != zgStackProfile  )
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPTR,#zgStackProfile
        MOVX      A,@DPTR
        XRL       A,R0
        JZ        ??bdb_filterNwkDisc_9
// 1831           {
// 1832             if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
// 1833                 || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
        MOV       DPTR,#zgStackProfile
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??bdb_filterNwkDisc_16
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x2
        JZ        ??bdb_filterNwkDisc_17
??bdb_filterNwkDisc_16:
        MOV       DPTR,#zgStackProfile
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??bdb_filterNwkDisc_18
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??bdb_filterNwkDisc_18
// 1834             {
// 1835               stackProfilePro = TRUE;
??bdb_filterNwkDisc_17:
        MOV       ?V3,#0x1
// 1836             }
// 1837 
// 1838             if ( stackProfile == 0 )
??bdb_filterNwkDisc_18:
        MOV       A,?V2
        JNZ       ??bdb_filterNwkDisc_9
// 1839             {
// 1840               //Remove from the list
// 1841               bdb_nwkDescFree(pNwkDesc);
        ; Setup parameters for call to function bdb_nwkDescFree
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
        MOV       A,R1
// 1842               ResultCount--;
        DEC       ?V0
// 1843               continue;
// 1844             }
// 1845           }
// 1846         }
??bdb_filterNwkDisc_9:
        INC       ?V1
        MOV       A,R6
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        LJMP      ??bdb_filterNwkDisc_6 & 0xFFFF
// 1847       }
// 1848     }
??bdb_filterNwkDisc_5:
        INC       ?V2
        LJMP      ??bdb_filterNwkDisc_4 & 0xFFFF
// 1849   }
// 1850 }
??bdb_filterNwkDisc_2:
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock19
// 1851       
// 1852  /*********************************************************************
// 1853  * @fn          bdb_tryNwkAssoc
// 1854  *
// 1855  * @brief       Try to associate to the first network in the network descriptor list
// 1856  *
// 1857  * @param       none
// 1858  *
// 1859  * @return      none
// 1860  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1861 static void bdb_tryNwkAssoc(void)
bdb_tryNwkAssoc:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function bdb_tryNwkAssoc
        CODE
// 1862 {
        FUNCALL bdb_tryNwkAssoc, bdb_joinProcess
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_tryNwkAssoc, bdb_nwkDescFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_tryNwkAssoc, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_tryNwkAssoc, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1863   if(pBDBListNwk)
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_tryNwkAssoc_0
// 1864   {
// 1865     bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_ASSOC;
        MOV       DPTR,#bdbCommissioningProcedureState + 2
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1866     
// 1867     //Try the first in the list after the filtering
// 1868     if(ZSuccess != bdb_joinProcess(pBDBListNwk))
        ; Setup parameters for call to function bdb_joinProcess
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??bdb_joinProcess::?relay`; Banked call to: bdb_joinProcess
        MOV       A,R1
        JZ        ??bdb_tryNwkAssoc_1
// 1869     {
// 1870       //If fail, free the first in the list and prepare for futher processing, either next nwk or discover again
// 1871       uint8 bdbJoinEvent = BDB_JOIN_EVENT_ASSOCIATION;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1872       bdb_nwkDescFree(pBDBListNwk);
        ; Setup parameters for call to function bdb_nwkDescFree
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
        MOV       A,R1
// 1873       bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,BDB_MSG_EVENT_FAIL,sizeof(uint8),&bdbJoinEvent);
        ; Setup parameters for call to function bdb_SendMsg
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x1
        MOV       R3,#0x1
        MOV       R2,#0x3
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        SJMP      ??bdb_tryNwkAssoc_1
// 1874     }
// 1875   }
// 1876   else
// 1877   {
// 1878     bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_NWK_DISC;
??bdb_tryNwkAssoc_0:
        MOV       DPTR,#bdbCommissioningProcedureState + 2
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1879     uint8 bdbJoinEvent = BDB_JOIN_EVENT_NWK_DISCOVERY;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1880     
// 1881     bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,BDB_MSG_EVENT_FAIL,sizeof(uint8),&bdbJoinEvent);
        ; Setup parameters for call to function bdb_SendMsg
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x1
        MOV       R3,#0x1
        MOV       R2,#0x3
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1882   }
// 1883 }
??bdb_tryNwkAssoc_1:
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock20
// 1884 
// 1885 
// 1886 
// 1887  /*********************************************************************
// 1888  * @fn          bdb_nwkAssocAttemt
// 1889  *
// 1890  * @brief       Process the result of an attempt to associate to a network 
// 1891  *
// 1892  * @param       didSuccess - bool
// 1893  *
// 1894  * @return      none
// 1895  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1896 void bdb_nwkAssocAttemt(bool didSuccess)
bdb_nwkAssocAttemt:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function bdb_nwkAssocAttemt
        CODE
// 1897 {
        FUNCALL bdb_nwkAssocAttemt, bdb_nwkDescFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkAssocAttemt, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       A,R1
        MOV       R7,A
// 1898   bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_STATE_JOINING;
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0x3
        MOVX      @DPTR,A
// 1899   uint8 bdbJoinEvent = BDB_JOIN_EVENT_ASSOCIATION;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1900   uint8 status;
// 1901   
// 1902   if(didSuccess)
        MOV       A,R7
        JZ        ??bdb_nwkAssocAttemt_0
// 1903   {
// 1904     status = BDB_MSG_EVENT_SUCCESS;
        MOV       R6,#0x0
        SJMP      ??bdb_nwkAssocAttemt_1
// 1905   }
// 1906   else
// 1907   {
// 1908     if(bdb_nwkAssocRetriesCount < BDBC_REC_SAME_NETWORK_RETRY_ATTEMPS)
??bdb_nwkAssocAttemt_0:
        MOV       DPTR,#bdb_nwkAssocRetriesCount
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0x3
        JNC       ??bdb_nwkAssocAttemt_2
// 1909     {
// 1910       bdb_nwkAssocRetriesCount++;
        MOV       DPTR,#bdb_nwkAssocRetriesCount
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOVX      @DPTR,A
        SJMP      ??bdb_nwkAssocAttemt_3
// 1911     }
// 1912     else
// 1913     {
// 1914       //Free the first in the list and prepare for futher processing
// 1915       bdb_nwkDescFree(pBDBListNwk);
??bdb_nwkAssocAttemt_2:
        ; Setup parameters for call to function bdb_nwkDescFree
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
        MOV       A,R1
// 1916       bdb_nwkAssocRetriesCount = 0;
        MOV       DPTR,#bdb_nwkAssocRetriesCount
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1917     }
// 1918     status = BDB_MSG_EVENT_FAIL;
??bdb_nwkAssocAttemt_3:
        MOV       R6,#0x1
// 1919   }
// 1920   bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,status,sizeof(uint8),&bdbJoinEvent);
??bdb_nwkAssocAttemt_1:
        ; Setup parameters for call to function bdb_SendMsg
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       R4,#0x1
        MOV       A,R6
        MOV       R3,A
        MOV       R2,#0x3
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 1921 }
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock21
// 1922                        
// 1923 
// 1924 /****************************************************************************
// 1925  * @fn          bdb_nwkDescFree
// 1926  *
// 1927  * @brief       This function frees one network discovery data.
// 1928  *
// 1929  * @param       ZSuccess - If the device was found and erased
// 1930  * @param       ZInvalidParameter - Not found
// 1931  *
// 1932  * @return      none
// 1933  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1934 ZStatus_t bdb_nwkDescFree(networkDesc_t* nodeDescToRemove)
bdb_nwkDescFree:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function bdb_nwkDescFree
        CODE
// 1935 {
        FUNCALL bdb_nwkDescFree, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
// 1936   networkDesc_t* current_desc;
// 1937   networkDesc_t* prev_desc;
// 1938   
// 1939   current_desc = pBDBListNwk;
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
// 1940 
// 1941   while(current_desc != NULL)
??bdb_nwkDescFree_0:
        MOV       A,R6
        ORL       A,R7
        JZ        ??bdb_nwkDescFree_1
// 1942   {  
// 1943     if(current_desc == nodeDescToRemove)
        MOV       A,?V0
        XRL       A,R6
        JNZ       ??bdb_nwkDescFree_2
        MOV       A,?V1
        XRL       A,R7
??bdb_nwkDescFree_2:
        JNZ       ??bdb_nwkDescFree_3
// 1944     {
// 1945       if (current_desc == pBDBListNwk)
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R6
        XRL       A,R0
        JNZ       ??bdb_nwkDescFree_4
        MOV       A,R7
        XRL       A,R1
??bdb_nwkDescFree_4:
        JNZ       ??bdb_nwkDescFree_5
// 1946       {
// 1947         pBDBListNwk = pBDBListNwk->nextDesc;
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x14
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#pBDBListNwk
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        SJMP      ??bdb_nwkDescFree_6
// 1948       }
// 1949       else
// 1950       {
// 1951         prev_desc->nextDesc = current_desc->nextDesc;
??bdb_nwkDescFree_5:
        MOV       A,R6
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,?V2
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,?V3
        MOV       DPH,A
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 1952       }
// 1953       
// 1954       osal_mem_free( current_desc );
??bdb_nwkDescFree_6:
        ; Setup parameters for call to function osal_mem_free
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1955       
// 1956       return ZSuccess;
        MOV       R1,#0x0
        SJMP      ??bdb_nwkDescFree_7
// 1957     }
// 1958 
// 1959     prev_desc = current_desc;
??bdb_nwkDescFree_3:
        MOV       ?V2,R6
        MOV       ?V3,R7
// 1960     current_desc = current_desc->nextDesc;
        MOV       A,R6
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        SJMP      ??bdb_nwkDescFree_0
// 1961   }
// 1962   
// 1963   return ZInvalidParameter;
??bdb_nwkDescFree_1:
        MOV       R1,#0x2
??bdb_nwkDescFree_7:
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
// 1964 }
          CFI EndBlock cfiBlock22
// 1965 
// 1966 /*********************************************************************
// 1967 * @fn          bdb_joinProcess
// 1968 *
// 1969 * @brief       Start the joining process for the selected nwk
// 1970 *
// 1971 * @return      ZStatus_t
// 1972 */  

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1973 ZStatus_t bdb_joinProcess(networkDesc_t *pChosenNwk)
bdb_joinProcess:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function bdb_joinProcess
        CODE
// 1974 {
        FUNCALL bdb_joinProcess, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_joinProcess, ZDApp_NodeProfileSync
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_joinProcess, NLME_JoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_joinProcess, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_joinProcess, NLME_SetQueuedPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_joinProcess, NLME_SetResponseRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_joinProcess, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1975   ZStatus_t status;
// 1976  
// 1977   ZDApp_ChangeState( DEV_NWK_JOINING );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x3
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1978   ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
        ; Setup parameters for call to function ZDApp_NodeProfileSync
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
// 1979 
// 1980   status =  NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
// 1981                         pChosenNwk->logicalChannel,
// 1982                         ZDO_Config_Node_Descriptor.CapabilityFlags,
// 1983                         pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth );
        ; Setup parameters for call to function NLME_JoinRequest
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R6
        ADD       A,#0xb
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,R1
        MOV       ?V0,A
// 1984   
// 1985   if(status == ZSuccess)
        MOV       A,?V0
        JNZ       ??bdb_joinProcess_0
// 1986   {
// 1987     // The receiver is on, turn network layer polling off.
// 1988     if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.3
        JNC       ??bdb_joinProcess_1
// 1989     {
// 1990       // for an End Device with NO Child Table Management process or for a Router
// 1991       if ( ( ZG_DEVICE_RTR_TYPE )  ||
// 1992            ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        JZ        ??bdb_joinProcess_2
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??bdb_joinProcess_2
        MOV       DPTR,#zgChildAgingEnable
        MOVX      A,@DPTR
        JNZ       ??bdb_joinProcess_0
// 1993       {
// 1994         NLME_SetPollRate( 0 );
??bdb_joinProcess_2:
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#__Constant_0
        LCALL     ?XLOAD_R2345
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1995         NLME_SetQueuedPollRate( 0 );
        ; Setup parameters for call to function NLME_SetQueuedPollRate
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
// 1996         NLME_SetResponseRate( 0 );
        ; Setup parameters for call to function NLME_SetResponseRate
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
        SJMP      ??bdb_joinProcess_0
// 1997       }
// 1998     }
// 1999     else
// 2000     {
// 2001       if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
??bdb_joinProcess_1:
        MOV       DPTR,#devStartMode
        MOVX      A,@DPTR
        JNZ       ??bdb_joinProcess_0
// 2002       {
// 2003         ZDApp_SavedPollRate = zgPollRate;
        MOV       DPTR,#zgPollRate
        LCALL     ?XLOAD_R0123
        MOV       DPTR,#ZDApp_SavedPollRate
        LCALL     ?XSTORE_R0123
// 2004         NLME_SetPollRate( zgRejoinPollRate );
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#zgRejoinPollRate
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       R2,?V2
        MOV       R3,?V3
        CLR       A
        MOV       R4,A
        MOV       R5,A
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 2005       }
// 2006     }
// 2007   }
// 2008   return status;
??bdb_joinProcess_0:
        MOV       R1,?V0
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
// 2009 }
          CFI EndBlock cfiBlock23
// 2010 #endif
// 2011 
// 2012 
// 2013  /*********************************************************************
// 2014  * @fn          bdb_setChannelAttribute
// 2015  *
// 2016  * @brief       Set the primary or seconday channel for discovery or formation procedure
// 2017  *
// 2018  * @param       isPrimaryChannel - True if channel to set is primary,  
// 2019  *                                 False if the channel to set is secondary
// 2020  *
// 2021  * @param       channel - Channel mask
// 2022  *
// 2023  * @return      none
// 2024  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2025 void bdb_setChannelAttribute(bool isPrimaryChannel, uint32 channel)
bdb_setChannelAttribute:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function bdb_setChannelAttribute
        CODE
// 2026 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
// 2027   if(isPrimaryChannel)
        MOV       A,R1
        JZ        ??bdb_setChannelAttribute_0
// 2028   {
// 2029     bdbAttributes.bdbPrimaryChannelSet = channel;
        MOV       DPTR,#bdbAttributes + 4
        MOV       R0,#?V0
        LCALL     ?L_MOV_TO_X
        SJMP      ??bdb_setChannelAttribute_1
// 2030   }
// 2031   else
// 2032   {
// 2033     bdbAttributes.bdbSecondaryChannelSet = channel;
??bdb_setChannelAttribute_0:
        MOV       DPTR,#bdbAttributes
        MOV       R0,#?V0
        LCALL     ?L_MOV_TO_X
// 2034   }
// 2035 }
??bdb_setChannelAttribute_1:
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock24
// 2036 
// 2037  /*********************************************************************
// 2038  * @fn          bdb_setChannel
// 2039  *
// 2040  * @brief       Set channel and save it in Nv for joining/formation operations
// 2041  *
// 2042  * @param       channel - Channel mask
// 2043  *
// 2044  * @return      none
// 2045  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2046 void bdb_setChannel(uint32 channel)
bdb_setChannel:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function bdb_setChannel
        CODE
// 2047 {
        FUNCALL bdb_setChannel, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
// 2048   //Assign the channel and save it into nv
// 2049   vScanChannels = channel;
        MOV       DPTR,#zgDefaultChannelList
        MOV       R0,#?V0
        LCALL     ?L_MOV_TO_X
// 2050   runtimeChannel = channel;
        MOV       DPTR,#runtimeChannel
        MOV       R0,#?V0
        LCALL     ?L_MOV_TO_X
// 2051     
// 2052   osal_nv_write(ZCD_NV_CHANLIST,0,sizeof(uint32),&vScanChannels);
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V4,#zgDefaultChannelList & 0xff
        MOV       ?V5,#(zgDefaultChannelList >> 8) & 0xff
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       ?V4,#0x4
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7c
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R1
// 2053 }
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock25
// 2054 
// 2055 
// 2056  /*********************************************************************
// 2057  * @fn          bdb_nwkJoiningFormation   
// 2058  *
// 2059  * @brief       Performs Joining/Formation operation on primary or secondary channel
// 2060  *
// 2061  * @param       isJoining - TRUE if the device is performing joining, FALSE is performing Formation
// 2062  *
// 2063  * @return      none
// 2064  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2065 void bdb_nwkJoiningFormation(bool isJoining)
bdb_nwkJoiningFormation:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function bdb_nwkJoiningFormation
        CODE
// 2066 {
        FUNCALL bdb_nwkJoiningFormation, bdb_setChannel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, bdb_setChannel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, ZDOInitDeviceEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, ZDOInitDeviceEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, ZDOInitDeviceEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 2067   
// 2068   if((vDoPrimaryScan) && (bdbAttributes.bdbPrimaryChannelSet))
        MOV       DPTR,#vDoPrimaryScan
        MOVX      A,@DPTR
        JZ        ??bdb_nwkJoiningFormation_0
        MOV       DPTR,#bdbAttributes + 4
        LCALL     ?XLOAD_R0123
        MOV       A,R0
        ORL       A,R1
        ORL       A,R2
        ORL       A,R3
        JZ        ??bdb_nwkJoiningFormation_0
// 2069   {
// 2070     bdb_setChannel(bdbAttributes.bdbPrimaryChannelSet);
        ; Setup parameters for call to function bdb_setChannel
        MOV       DPTR,#bdbAttributes + 4
        LCALL     ?XLOAD_R2345
        LCALL     `??bdb_setChannel::?relay`; Banked call to: bdb_setChannel
        SJMP      ??bdb_nwkJoiningFormation_1
// 2071   }
// 2072   else
// 2073   {
// 2074     vDoPrimaryScan = FALSE;
??bdb_nwkJoiningFormation_0:
        MOV       DPTR,#vDoPrimaryScan
        MOV       A,#0x0
        MOVX      @DPTR,A
// 2075     bdb_setChannel(bdbAttributes.bdbSecondaryChannelSet);
        ; Setup parameters for call to function bdb_setChannel
        MOV       DPTR,#bdbAttributes
        LCALL     ?XLOAD_R2345
        LCALL     `??bdb_setChannel::?relay`; Banked call to: bdb_setChannel
// 2076   }
// 2077 
// 2078   if(vScanChannels)
??bdb_nwkJoiningFormation_1:
        MOV       DPTR,#zgDefaultChannelList
        LCALL     ?XLOAD_R0123
        MOV       A,R0
        ORL       A,R1
        ORL       A,R2
        ORL       A,R3
        JZ        ??bdb_nwkJoiningFormation_2
// 2079   {
// 2080     if(ZG_DEVICE_RTRONLY_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??bdb_nwkJoiningFormation_3
// 2081     {
// 2082       if(isJoining)
        MOV       A,R6
        JZ        ??bdb_nwkJoiningFormation_4
// 2083       {
// 2084         ZDOInitDeviceEx(100,0);
        ; Setup parameters for call to function ZDOInitDeviceEx
        MOV       R1,#0x0
        MOV       R2,#0x64
        MOV       R3,#0x0
        LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
        MOV       A,R1
        SJMP      ??bdb_nwkJoiningFormation_5
// 2085       }
// 2086       else
// 2087       {
// 2088         ZDOInitDeviceEx(100,1);
??bdb_nwkJoiningFormation_4:
        ; Setup parameters for call to function ZDOInitDeviceEx
        MOV       R1,#0x1
        MOV       R2,#0x64
        MOV       R3,#0x0
        LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
        MOV       A,R1
        SJMP      ??bdb_nwkJoiningFormation_5
// 2089       }
// 2090     }
// 2091     //ZED can only join, and ZC can only create
// 2092     else
// 2093     {
// 2094       ZDOInitDeviceEx(100,0);
??bdb_nwkJoiningFormation_3:
        ; Setup parameters for call to function ZDOInitDeviceEx
        MOV       R1,#0x0
        MOV       R2,#0x64
        MOV       R3,#0x0
        LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
        MOV       A,R1
        SJMP      ??bdb_nwkJoiningFormation_5
// 2095     }
// 2096   }
// 2097   else
// 2098   {
// 2099     if(isJoining)
??bdb_nwkJoiningFormation_2:
        MOV       A,R6
        JZ        ??bdb_nwkJoiningFormation_6
// 2100     {
// 2101       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x3
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
        SJMP      ??bdb_nwkJoiningFormation_5
// 2102     }
// 2103     else
// 2104     {
// 2105       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
??bdb_nwkJoiningFormation_6:
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x5
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2106     }
// 2107   }
// 2108 }
??bdb_nwkJoiningFormation_5:
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock26
// 2109 
// 2110 #if (ZG_BUILD_JOINING_TYPE)
// 2111  /*********************************************************************
// 2112  * @fn          bdb_tcLinkKeyExchangeAttempt
// 2113  *
// 2114  * @brief       Generic send msg for TC link key exchange process attempts
// 2115  *
// 2116  * @param       didSuccess - FALSE if the step failed/timeout, TRUE otherwise
// 2117  * @param       bdbTCExchangeState - Step in which the attemp was done
// 2118  *
// 2119  * @return      none
// 2120  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2121 void bdb_tcLinkKeyExchangeAttempt(bool didSuccess, uint8 bdbTCExchangeState)
bdb_tcLinkKeyExchangeAttempt:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function bdb_tcLinkKeyExchangeAttempt
        CODE
// 2122 {
        FUNCALL bdb_tcLinkKeyExchangeAttempt, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_tcLinkKeyExchangeAttempt, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       A,R1
        MOV       R7,A
        MOV       ?V0,R2
// 2123   bool bdbEventStatus = BDB_MSG_EVENT_SUCCESS;
        MOV       R6,#0x0
// 2124   uint8 dummy;
// 2125   bdbCommissioningProcedureState.bdbTCExchangeState = bdbTCExchangeState;
        MOV       A,?V0
        MOV       DPTR,#bdbCommissioningProcedureState + 1
        MOVX      @DPTR,A
// 2126   if(didSuccess)
        MOV       A,R7
        JZ        ??bdb_tcLinkKeyExchangeAttempt_0
// 2127   {
// 2128     //Allow try since we are performing a new step.
// 2129     osal_stop_timerEx(bdb_TaskID, BDB_PROCESS_TIMEOUT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x10
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
// 2130     bdbAttributes.bdbTCLinkKeyExchangeAttempts = 0;
        MOV       DPTR,#bdbAttributes + 16
        MOV       A,#0x0
        MOVX      @DPTR,A
        SJMP      ??bdb_tcLinkKeyExchangeAttempt_1
// 2131   }
// 2132   else
// 2133   {
// 2134     bdbEventStatus = BDB_MSG_EVENT_FAIL;
??bdb_tcLinkKeyExchangeAttempt_0:
        MOV       R6,#0x1
// 2135   }
// 2136   bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE,bdbEventStatus,1, &dummy);
??bdb_tcLinkKeyExchangeAttempt_1:
        ; Setup parameters for call to function bdb_SendMsg
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       R4,#0x1
        MOV       A,R6
        MOV       R3,A
        MOV       R2,#0x1
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
// 2137 }
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock27
// 2138 
// 2139 
// 2140  /*********************************************************************
// 2141  * @fn          bdb_requestVerifyTCLinkKey
// 2142  *
// 2143  * @brief       Attempt to verify the TC link key by sending Verify Key Request
// 2144  *
// 2145  * @param       none
// 2146  *
// 2147  * @return      none
// 2148  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2149 void bdb_requestVerifyTCLinkKey(void)
bdb_requestVerifyTCLinkKey:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI Function bdb_requestVerifyTCLinkKey
        CODE
// 2150 {
        FUNCALL bdb_requestVerifyTCLinkKey, APSME_GetRequest
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_requestVerifyTCLinkKey, APSME_VerifyKeyReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_requestVerifyTCLinkKey, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_requestVerifyTCLinkKey, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 11
        MOV       A,#-0xb
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 2151     uint8 TC_ExtAddr[Z_EXTADDR_LEN];
// 2152     APSME_VerifyKeyReq_t vKey;
// 2153     
// 2154     APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
        ; Setup parameters for call to function APSME_GetRequest
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       R1,#-0x55
        LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
        MOV       A,R1
// 2155     
// 2156     vKey.tcExtAddr = TC_ExtAddr;
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP100_8
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 2157     vKey.keyType = KEY_TYPE_TC_LINK;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x4
        MOVX      @DPTR,A
// 2158     
// 2159     APSME_VerifyKeyReq( &vKey );
        ; Setup parameters for call to function APSME_VerifyKeyReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??APSME_VerifyKeyReq::?relay`; Banked call to: APSME_VerifyKeyReq
        MOV       A,R1
// 2160     
// 2161     osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x10
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
// 2162     osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT,BDBC_TC_LINK_KEY_EXANGE_TIMEOUT);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_1388
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       R2,#0x0
        MOV       R3,#0x10
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       A,R1
// 2163     
// 2164 }
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock28
// 2165 
// 2166 /*********************************************************************
// 2167  * @fn          bdb_requestTCLinkKey
// 2168  *
// 2169  * @brief       Attempt to request a TC link key
// 2170  *
// 2171  * @param       none
// 2172  *
// 2173  * @return      none
// 2174  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2175 void bdb_requestTCLinkKey(void)
bdb_requestTCLinkKey:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function bdb_requestTCLinkKey
        CODE
// 2176 {
        FUNCALL bdb_requestTCLinkKey, APSME_RequestKeyReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_requestTCLinkKey, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_requestTCLinkKey, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 13
        MOV       A,#-0xd
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
// 2177   zAddrType_t destAddr;
// 2178   APSME_RequestKeyReq_t req;
// 2179 
// 2180   destAddr.addrMode = Addr16Bit;
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
// 2181   destAddr.addr.shortAddr = 0x0000;
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
// 2182   
// 2183   req.dstAddr = destAddr.addr.shortAddr;
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-6
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        POP       A
          CFI CFA_SP SP+-5
        MOVX      @DPTR,A
// 2184   req.keyType = KEY_TYPE_TC_LINK;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x4
        MOVX      @DPTR,A
// 2185   
// 2186   APSME_RequestKeyReq(&req);
        ; Setup parameters for call to function APSME_RequestKeyReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??APSME_RequestKeyReq::?relay`; Banked call to: APSME_RequestKeyReq
        MOV       A,R1
// 2187   
// 2188   osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x10
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
// 2189   
// 2190   osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT,(uint32)requestLinkKeyTimeout);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#requestLinkKeyTimeout
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       R2,#0x0
        MOV       R3,#0x10
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       A,R1
// 2191 } 
        MOV       A,#0xd
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock29
// 2192 
// 2193 
// 2194 /*********************************************************************
// 2195  * @fn          bdb_requestTCStackVersion
// 2196  *
// 2197  * @brief       Attempt to request the TC stack version using ZDP Node desc if 
// 2198  *              join a Centralized nwk
// 2199  *
// 2200  * @param       none
// 2201  *
// 2202  * @return      none
// 2203  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2204 void bdb_requestTCStackVersion(void)
bdb_requestTCStackVersion:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function bdb_requestTCStackVersion
        CODE
// 2205 {
        FUNCALL bdb_requestTCStackVersion, APSME_IsDistributedSecurity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_requestTCStackVersion, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_requestTCStackVersion, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_requestTCStackVersion, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_requestTCStackVersion, bdb_setNodeJoinLinkKeyType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_requestTCStackVersion, bdb_setNodeJoinLinkKeyType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_requestTCStackVersion, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 2206   if(requestNewTrustCenterLinkKey)
        MOV       DPTR,#requestNewTrustCenterLinkKey
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??bdb_requestTCStackVersion_0 & 0xFFFF
// 2207   {
// 2208     if(!APSME_IsDistributedSecurity())
        ; Setup parameters for call to function APSME_IsDistributedSecurity
        LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
        MOV       A,R1
        JZ        $+5
        LJMP      ??bdb_requestTCStackVersion_1 & 0xFFFF
// 2209     {
// 2210       if(bdbAttributes.bdbTCLinkKeyExchangeMethod == BDB_TC_LINK_KEY_EXCHANGE_APS_KEY)
        MOV       DPTR,#bdbAttributes + 18
        MOVX      A,@DPTR
        JNZ       ??bdb_requestTCStackVersion_2
// 2211       {
// 2212         zAddrType_t destAddr;
// 2213        
// 2214         destAddr.addrMode = Addr16Bit;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
// 2215         destAddr.addr.shortAddr = 0x0000;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
// 2216        
// 2217         ZDP_NodeDescReq( &destAddr, destAddr.addr.shortAddr, 0);  
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R1,#0x2
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,R1
// 2218         
// 2219         osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x10
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
// 2220         osal_start_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT, BDBC_TC_LINK_KEY_EXANGE_TIMEOUT );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_1388
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R2,#0x0
        MOV       R3,#0x10
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,R1
// 2221         return;
        SJMP      ??bdb_requestTCStackVersion_3
// 2222       }
// 2223       else
// 2224       {
// 2225         if(pfnCBKETCLinkKeyExchange)
??bdb_requestTCStackVersion_2:
        MOV       DPTR,#pfnCBKETCLinkKeyExchange
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_requestTCStackVersion_3
// 2226         {
// 2227           pfnCBKETCLinkKeyExchange();
        ; Setup parameters for indirect call
        MOV       DPTR,#pfnCBKETCLinkKeyExchange
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        LCALL     ?CALL_IND
// 2228         }
// 2229         return;
        SJMP      ??bdb_requestTCStackVersion_3
// 2230       }
// 2231     }
// 2232     else
// 2233     {
// 2234       bdb_setNodeJoinLinkKeyType(BDB_DISTRIBUTED_SECURITY_GLOBAL_LINK_KEY);
??bdb_requestTCStackVersion_1:
        ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
        MOV       R1,#0x1
        LCALL     `??bdb_setNodeJoinLinkKeyType::?relay`; Banked call to: bdb_setNodeJoinLinkKeyType
        SJMP      ??bdb_requestTCStackVersion_4
// 2235     }
// 2236   }
// 2237   else
// 2238   {
// 2239     //Key not required, set default which is global
// 2240     bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
??bdb_requestTCStackVersion_0:
        ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
        MOV       R1,#0x0
        LCALL     `??bdb_setNodeJoinLinkKeyType::?relay`; Banked call to: bdb_setNodeJoinLinkKeyType
// 2241   }
// 2242   //TC link key not required or join distributed nwk
// 2243   bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE,TRUE);
??bdb_requestTCStackVersion_4:
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x1
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2244 }
??bdb_requestTCStackVersion_3:
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock30
// 2245 #endif
// 2246 
// 2247 
// 2248 /*********************************************************************
// 2249  * @fn          bdb_nwkSteeringDeviceOnNwk
// 2250  *
// 2251  * @brief       Send ZDP mgmt permit joining
// 2252  *
// 2253  * @param       none
// 2254  *
// 2255  * @return      none
// 2256  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2257 void bdb_nwkSteeringDeviceOnNwk(void)
bdb_nwkSteeringDeviceOnNwk:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI Function bdb_nwkSteeringDeviceOnNwk
        CODE
// 2258 {
        FUNCALL bdb_nwkSteeringDeviceOnNwk, ZDP_MgmtPermitJoinReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
// 2259   zAddrType_t dstAddr;
// 2260   dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 2261   dstAddr.addrMode = AddrBroadcast;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0xf
        MOVX      @DPTR,A
// 2262   // Trust Center significance is always true
// 2263   ZDP_MgmtPermitJoinReq( &dstAddr, BDBC_MIN_COMMISSIONING_TIME, TRUE, FALSE );
        ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
        MOV       R5,#0x0
        MOV       R4,#0x1
        MOV       R1,#-0x4c
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
        MOV       A,R1
// 2264 }
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock31
// 2265 
// 2266 
// 2267 /*********************************************************************
// 2268  * @fn          bdb_startResumeCommissioningProcess
// 2269  *
// 2270  * @brief       Starts or resume the commissioning operations sets in the 
// 2271  *              commissioningMode attribute
// 2272  *
// 2273  * @param       none
// 2274  *
// 2275  * @return      none
// 2276  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2277 void bdb_startResumeCommissioningProcess(void)
bdb_startResumeCommissioningProcess:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI Function bdb_startResumeCommissioningProcess
        CODE
// 2278 {
        FUNCALL bdb_startResumeCommissioningProcess, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, ZMacGetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, initiatorSelectNwkParams
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, touchLinkInitiator_StartDevDisc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_NotifyCommissioningModeStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_ClearNetworkParams
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_nwkSteeringDeviceOnNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_nwkJoiningFormation
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_NotifyCommissioningModeStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_isDeviceNonFactoryNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_setEpDescListToActiveEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_SendIdentifyQuery
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 16
        MOV       A,#-0x10
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
// 2279 
// 2280 #if ( defined ( BDB_TL_INITIATOR ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) ) 
// 2281   if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_INITIATOR_TL)
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??bdb_startResumeCommissioningProcess_0
// 2282   {
// 2283     uint16 nwkAddr;
// 2284 
// 2285     //Does the device supports this commissioning mode?
// 2286     if(bdbAttributes.bdbNodeCommissioningCapability & BDB_TOUCHLINK_CAPABILITY)
        MOV       DPTR,#bdbAttributes + 12
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.3
        JNC       ??bdb_startResumeCommissioningProcess_1
// 2287     {
// 2288       //Clear previous state and substates
// 2289       osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState));
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,#bdbCommissioningProcedureState & 0xff
        MOV       R3,#(bdbCommissioningProcedureState >> 8) & 0xff
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2290       bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_TL;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x2
        MOVX      @DPTR,A
// 2291       
// 2292       // Get our short address
// 2293       ZMacGetReq( ZMacShortAddress, (byte*)&nwkAddr );
        ; Setup parameters for call to function ZMacGetReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x53
        LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
        MOV       A,R1
// 2294       if ( nwkAddr >= NWK_BROADCAST_SHORTADDR_DEVZCZR )
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       C
        MOVX      A,@DPTR
        SUBB      A,#-0x4
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,#-0x1
        JC        ??bdb_startResumeCommissioningProcess_2
// 2295       {
// 2296         initiatorSelectNwkParams();
        ; Setup parameters for call to function initiatorSelectNwkParams
        LCALL     `??initiatorSelectNwkParams::?relay`; Banked call to: initiatorSelectNwkParams
// 2297       }
// 2298       
// 2299       touchLinkInitiator_StartDevDisc( );  
??bdb_startResumeCommissioningProcess_2:
        ; Setup parameters for call to function touchLinkInitiator_StartDevDisc
        LCALL     `??touchLinkInitiator_StartDevDisc::?relay`; Banked call to: touchLinkInitiator_StartDevDisc
        MOV       A,R1
// 2300       
// 2301       bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_TOUCHLINK);
        ; Setup parameters for call to function bdb_NotifyCommissioningModeStart
        MOV       R1,#0x4
        LCALL     `??bdb_NotifyCommissioningModeStart::?relay`; Banked call to: bdb_NotifyCommissioningModeStart
        SJMP      ??bdb_startResumeCommissioningProcess_3
// 2302     }
// 2303     else
// 2304     {
// 2305       //Process the next commissioning mode
// 2306       bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, FALSE );
??bdb_startResumeCommissioningProcess_1:
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x2
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2307     }
// 2308     return;
??bdb_startResumeCommissioningProcess_3:
        LJMP      ??bdb_startResumeCommissioningProcess_4 & 0xFFFF
// 2309   }
// 2310 #endif // BDB_TOUCHLINK_CAPABILITY_ENABLED  
// 2311   
// 2312 #if ZG_BUILD_ENDDEVICE_TYPE
// 2313   if(ZG_DEVICE_ENDDEVICE_TYPE)
// 2314   {
// 2315     if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)
??bdb_startResumeCommissioningProcess_0:
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.5
        JNC       $+5
        LJMP      ??bdb_startResumeCommissioningProcess_4 & 0xFFFF
// 2316     {
// 2317       //No commissioning process can be performed if the ZED has lost its parent
// 2318       return;
// 2319     }
// 2320   }
// 2321 #endif
// 2322   
// 2323   if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_NWK_STEERING)
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JNC       ??bdb_startResumeCommissioningProcess_5
// 2324   {
// 2325     bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_STEERING_ON_NWK;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x4
        MOVX      @DPTR,A
// 2326     
// 2327     if(bdbAttributes.bdbNodeCommissioningCapability & BDB_NETWORK_STEERING_CAPABILITY)
        MOV       DPTR,#bdbAttributes + 12
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??bdb_startResumeCommissioningProcess_6
// 2328     {
// 2329 #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
// 2330       bdb_ClearNetworkParams();
        ; Setup parameters for call to function bdb_ClearNetworkParams
        LCALL     `??bdb_ClearNetworkParams::?relay`; Banked call to: bdb_ClearNetworkParams
// 2331 #endif
// 2332       if(bdbAttributes.bdbNodeIsOnANetwork)
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        JZ        ??bdb_startResumeCommissioningProcess_7
// 2333       {
// 2334         bdb_nwkSteeringDeviceOnNwk();
        ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
        LCALL     `??bdb_nwkSteeringDeviceOnNwk::?relay`; Banked call to: bdb_nwkSteeringDeviceOnNwk
// 2335         bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x4
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
        SJMP      ??bdb_startResumeCommissioningProcess_6
// 2336       }
// 2337 #if (ZG_BUILD_JOINING_TYPE)
// 2338       else
// 2339       {
// 2340         if(ZG_DEVICE_JOINING_TYPE)
??bdb_startResumeCommissioningProcess_7:
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??bdb_startResumeCommissioningProcess_8
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??bdb_startResumeCommissioningProcess_6
// 2341         {
// 2342           vDoPrimaryScan = TRUE;
??bdb_startResumeCommissioningProcess_8:
        MOV       DPTR,#vDoPrimaryScan
        MOV       A,#0x1
        MOVX      @DPTR,A
// 2343           
// 2344           //Initialize the commissioning procedure state, bdbJoinState to nwk discovery and TCLinkKeyExchange to not active
// 2345           osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState_t));
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,#bdbCommissioningProcedureState & 0xff
        MOV       R3,#(bdbCommissioningProcedureState >> 8) & 0xff
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2346           bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_JOINING;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x3
        MOVX      @DPTR,A
// 2347           bdb_nwkJoiningFormation(TRUE);
        ; Setup parameters for call to function bdb_nwkJoiningFormation
        MOV       R1,#0x1
        LCALL     `??bdb_nwkJoiningFormation::?relay`; Banked call to: bdb_nwkJoiningFormation
// 2348           bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_NWK_STEERING);
        ; Setup parameters for call to function bdb_NotifyCommissioningModeStart
        MOV       R1,#0x1
        LCALL     `??bdb_NotifyCommissioningModeStart::?relay`; Banked call to: bdb_NotifyCommissioningModeStart
// 2349         }
// 2350       }
// 2351 #endif
// 2352 #if (ZG_BUILD_COORDINATOR_TYPE)
// 2353       if(ZG_DEVICE_COORDINATOR_TYPE)
// 2354       {
// 2355         bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, FALSE);
// 2356       }
// 2357 #endif
// 2358     }
// 2359     return;
??bdb_startResumeCommissioningProcess_6:
        LJMP      ??bdb_startResumeCommissioningProcess_4 & 0xFFFF
// 2360   }
// 2361   
// 2362   if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_NWK_FORMATION)
??bdb_startResumeCommissioningProcess_5:
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.2
        JNC       ??bdb_startResumeCommissioningProcess_9
// 2363   {
// 2364     bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FORMATION;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x5
        MOVX      @DPTR,A
// 2365     
// 2366     if(bdbAttributes.bdbNodeCommissioningCapability & BDB_NETWORK_FORMATION_CAPABILITY)
// 2367     {
// 2368       if(!bdbAttributes.bdbNodeIsOnANetwork)
// 2369       {
// 2370 #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
// 2371       bdb_ClearNetworkParams();
// 2372 #endif
// 2373         vDoPrimaryScan = TRUE;
// 2374         
// 2375         osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState));
// 2376         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FORMATION;
// 2377 
// 2378         bdb_nwkJoiningFormation(FALSE);
// 2379         bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_FORMATION);
// 2380         return;
// 2381       }
// 2382     }
// 2383     bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x5
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2384     return;
        LJMP      ??bdb_startResumeCommissioningProcess_4 & 0xFFFF
// 2385   }
// 2386 
// 2387 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)    
// 2388   if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_FINDING_BINDING)
??bdb_startResumeCommissioningProcess_9:
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.3
        JC        $+5
        LJMP      ??bdb_startResumeCommissioningProcess_4 & 0xFFFF
// 2389   {
// 2390     bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FINDING_BINDING;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x6
        MOVX      @DPTR,A
// 2391     
// 2392     //Is the device on a network?
// 2393     if(bdb_isDeviceNonFactoryNew())
        ; Setup parameters for call to function bdb_isDeviceNonFactoryNew
        LCALL     `??bdb_isDeviceNonFactoryNew::?relay`; Banked call to: bdb_isDeviceNonFactoryNew
        MOV       A,R1
        JNZ       $+5
        LJMP      ??bdb_startResumeCommissioningProcess_10 & 0xFFFF
// 2394     {
// 2395       zclAttrRec_t attrRec;
// 2396 
// 2397       endPointDesc_t *bdb_CurrEpDescriptor = NULL;
        MOV       R6,#0x0
        MOV       R7,#0x0
// 2398 
// 2399       bdb_CurrEpDescriptor = bdb_setEpDescListToActiveEndpoint();
        ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
        LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R6,?V0
        MOV       R7,?V1
// 2400       
// 2401       //If not found endpoint with Identify cluster is found, then report fail
// 2402       if(bdb_CurrEpDescriptor == NULL)
        MOV       A,R6
        ORL       A,R7
        JNZ       ??bdb_startResumeCommissioningProcess_11
// 2403       {
// 2404         bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xe
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
// 2405         return;
        LJMP      ??bdb_startResumeCommissioningProcess_4 & 0xFFFF
// 2406       }
// 2407       
// 2408       if( bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_TARGET)  //F&B as Target
??bdb_startResumeCommissioningProcess_11:
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JC        $+5
        LJMP      ??bdb_startResumeCommissioningProcess_12 & 0xFFFF
// 2409       {
// 2410         if (zclFindAttrRec( bdb_CurrEpDescriptor->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
// 2411                   ATTRID_IDENTIFY_TIME, &attrRec ) )
        ; Setup parameters for call to function zclFindAttrRec
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x3
        MOV       R3,#0x0
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       A,R1
        JNZ       $+5
        LJMP      ??bdb_startResumeCommissioningProcess_13 & 0xFFFF
// 2412         {
// 2413           //Set it to at less 180 
// 2414           if ( *((uint16*)attrRec.attr.dataPtr) <= BDBC_MIN_COMMISSIONING_TIME )
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        CLR       C
        MOVX      A,@DPTR
        SUBB      A,#-0x4b
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,#0x0
        JNC       ??bdb_startResumeCommissioningProcess_14
// 2415           {
// 2416             *((uint16*)attrRec.attr.dataPtr) = BDBC_MIN_COMMISSIONING_TIME;
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOV       A,#-0x4c
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
// 2417              osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3e8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R2,#0x0
        MOV       R3,#0x20
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       A,R1
// 2418 
// 2419             if(pfnIdentifyTimeChangeCB != NULL)
        MOV       DPTR,#pfnIdentifyTimeChangeCB
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_startResumeCommissioningProcess_14
// 2420             {
// 2421               if(bdbIndentifyActiveEndpoint == 0xFF)
        MOV       DPTR,#bdbIndentifyActiveEndpoint
        MOVX      A,@DPTR
        XRL       A,#0xff
        JNZ       ??bdb_startResumeCommissioningProcess_15
// 2422               {
// 2423                 pfnIdentifyTimeChangeCB(bdbIndentifyActiveEndpoint);  
        ; Setup parameters for indirect call
        MOV       DPTR,#bdbIndentifyActiveEndpoint
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#pfnIdentifyTimeChangeCB
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        LCALL     ?CALL_IND
        SJMP      ??bdb_startResumeCommissioningProcess_14
// 2424               }
// 2425               else
// 2426               {
// 2427                 pfnIdentifyTimeChangeCB(bdb_CurrEpDescriptor->endPoint);
??bdb_startResumeCommissioningProcess_15:
        ; Setup parameters for indirect call
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#pfnIdentifyTimeChangeCB
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        LCALL     ?CALL_IND
// 2428               }
// 2429             }
// 2430           }
// 2431           //Attribute found and set, report success
// 2432           if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR))
??bdb_startResumeCommissioningProcess_14:
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JC        ??bdb_startResumeCommissioningProcess_16
// 2433           {
// 2434             bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FB_TARGET_IN_PROGRESS);
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0x9
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
        SJMP      ??bdb_startResumeCommissioningProcess_12
// 2435           }
// 2436           else
// 2437           {
// 2438             bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
// 2439 
// 2440             bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
??bdb_startResumeCommissioningProcess_16:
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x3
        MOVX      @DPTR,A
// 2441             bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_FB_TARGET_IN_PROGRESS;
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x9
        MOVX      @DPTR,A
// 2442 
// 2443             bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
        ; Setup parameters for call to function bdb_SendMsg
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R4,#0x3
        MOV       R3,#0x0
        MOV       R2,#0xa
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
        SJMP      ??bdb_startResumeCommissioningProcess_12
// 2444           }
// 2445         }
// 2446         else
// 2447         {
// 2448           //Attribute not found and no initiator process, report fail
// 2449           if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR))
??bdb_startResumeCommissioningProcess_13:
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JC        ??bdb_startResumeCommissioningProcess_12
// 2450           {
// 2451             bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xe
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
// 2452           }
// 2453         }
// 2454       }  //F&B Target
// 2455       
// 2456       if( bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR)  //F&B as Initiator
??bdb_startResumeCommissioningProcess_12:
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JC        $+5
        LJMP      ??bdb_startResumeCommissioningProcess_4 & 0xFFFF
// 2457       {
// 2458         bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
// 2459         
// 2460         //If no function to add binds is available then do not process Initiator
// 2461         if(!pbindAddEntry)
        MOV       DPTR,#pbindAddEntry
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       ??bdb_startResumeCommissioningProcess_17
// 2462         {
// 2463           //If no target process, then report fail
// 2464           if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_TARGET))
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JC        ??bdb_startResumeCommissioningProcess_4
// 2465           {
// 2466             bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xe
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
        SJMP      ??bdb_startResumeCommissioningProcess_4
// 2467           }        
// 2468         }
// 2469         else
// 2470         {
// 2471           //Send identify query with the endpoint requested
// 2472           if(bdb_SendIdentifyQuery(bdb_CurrEpDescriptor->endPoint) != ZSuccess)
??bdb_startResumeCommissioningProcess_17:
        ; Setup parameters for call to function bdb_SendIdentifyQuery
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendIdentifyQuery::?relay`; Banked call to: bdb_SendIdentifyQuery
        MOV       A,R1
        JZ        ??bdb_startResumeCommissioningProcess_18
// 2473           {
// 2474             bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xe
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
// 2475           }
// 2476 
// 2477           //If periodic F&B is enabled
// 2478           if ( FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE )
// 2479           {
// 2480             // total F&B time will be at least BDBC_MIN_COMMISSIONING_TIME, and at most (BDBC_MIN_COMMISSIONING_TIME + FINDING_AND_BINDING_PERIODIC_TIME - 1)
// 2481             bdb_FB_InitiatorCurrentCyclesNumber = (BDBC_MIN_COMMISSIONING_TIME + (FINDING_AND_BINDING_PERIODIC_TIME - 1)) / FINDING_AND_BINDING_PERIODIC_TIME;
??bdb_startResumeCommissioningProcess_18:
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOV       A,#0xc
        MOVX      @DPTR,A
// 2482             
// 2483             osal_start_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT, FINDING_AND_BINDING_PERIODIC_TIME * 1000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3a98
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       A,R1
// 2484           }
// 2485 
// 2486           bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x3
        MOVX      @DPTR,A
// 2487           bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_FB_INITITATOR_IN_PROGRESS;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0xa
        MOVX      @DPTR,A
// 2488 
// 2489           bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
        ; Setup parameters for call to function bdb_SendMsg
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R4,#0x3
        MOV       R3,#0x0
        MOV       R2,#0xa
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
        SJMP      ??bdb_startResumeCommissioningProcess_4
// 2490         }
// 2491       } //F&B Initiator
// 2492     }
// 2493     //Not in the network
// 2494     else
// 2495     {
// 2496       bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
??bdb_startResumeCommissioningProcess_10:
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xe
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
// 2497     }
// 2498     
// 2499     return;
// 2500   }
// 2501 #endif
// 2502   
// 2503 }
??bdb_startResumeCommissioningProcess_4:
        MOV       A,#0x10
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock32
// 2504 
// 2505 /*********************************************************************
// 2506  * @fn          bdb_event_loop
// 2507  *
// 2508  * @brief       Main event loop bdb tasks.
// 2509  *
// 2510  * @param       task_id - task id
// 2511  * @param       events - event bitmap
// 2512  *
// 2513  * @return      unprocessed events
// 2514  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2515 UINT16 bdb_event_loop(byte task_id, UINT16 events)
bdb_event_loop:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI Function bdb_event_loop
        CODE
// 2516 {
        FUNCALL bdb_event_loop, bdb_startResumeCommissioningProcess
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_tcLinkKeyExchangeAttempt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_nwkSteeringDeviceOnNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_processZDOMgs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_ProcessOSALMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_processTimeout
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_setNodeIsOnANetwork
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, NLME_LeaveReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_setEpDescListToActiveEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_getRespondentRetry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_SendIdentifyQuery
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_ProcessRespondentList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV       A,#-0x12
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 13
        MOV       A,#-0xd
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       ?V5,R1
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2517   (void)task_id;  // Intentionally unreferenced parameter
// 2518   
// 2519 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
// 2520   endPointDesc_t * bdb_CurrEpDescriptor;
// 2521 #endif
// 2522   
// 2523   if(events & BDB_CHANGE_COMMISSIONING_STATE)
        MOV       A,R6
        ANL       A,#0x4
        JZ        ??bdb_event_loop_0
// 2524   {
// 2525     switch(bdbCommissioningProcedureState.bdbCommissioningState)
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        JZ        ??bdb_event_loop_1
        DEC       A
        JZ        ??bdb_event_loop_2
        ADD       A,#-0x3
        JZ        ??bdb_event_loop_3
        ADD       A,#-0x2
        JZ        ??bdb_event_loop_4
        SJMP      ??bdb_event_loop_5
// 2526     {
// 2527       case BDB_COMMISSIONING_STATE_START_RESUME:
// 2528         bdb_startResumeCommissioningProcess();
??bdb_event_loop_1:
        ; Setup parameters for call to function bdb_startResumeCommissioningProcess
        LCALL     `??bdb_startResumeCommissioningProcess::?relay`; Banked call to: bdb_startResumeCommissioningProcess
// 2529       break;
        SJMP      ??bdb_event_loop_5
// 2530       
// 2531       case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
// 2532         if (ZG_BUILD_JOINING_TYPE)
// 2533         {
// 2534           bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_STACK_VERSION);
??bdb_event_loop_2:
        ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
        MOV       R2,#0x1
        MOV       R1,#0x1
        LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
// 2535         }
// 2536       break;
        SJMP      ??bdb_event_loop_5
// 2537       
// 2538       case BDB_COMMISSIONING_STATE_STEERING_ON_NWK:
// 2539         bdb_nwkSteeringDeviceOnNwk();
??bdb_event_loop_3:
        ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
        LCALL     `??bdb_nwkSteeringDeviceOnNwk::?relay`; Banked call to: bdb_nwkSteeringDeviceOnNwk
// 2540         
// 2541         bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x4
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2542       break;
        SJMP      ??bdb_event_loop_5
// 2543       
// 2544       case BDB_COMMISSIONING_STATE_FINDING_BINDING:
// 2545         bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
??bdb_event_loop_4:
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0x0
        MOVX      @DPTR,A
// 2546         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x0
        MOVX      @DPTR,A
// 2547         osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       A,R1
// 2548       break;
// 2549       
// 2550     }
// 2551     return (events ^ BDB_CHANGE_COMMISSIONING_STATE);
??bdb_event_loop_5:
        MOV       A,R6
        XRL       A,#0x4
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x0
        MOV       R3,A
        LJMP      ??bdb_event_loop_6 & 0xFFFF
// 2552   }
// 2553 
// 2554   if ( events & SYS_EVENT_MSG )
??bdb_event_loop_0:
        MOV       A,R6
        ANL       A,#0x0
        MOV       R0,A
        MOV       A,R7
        ANL       A,#0x80
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       $+5
        LJMP      ??bdb_event_loop_7 & 0xFFFF
// 2555   {
// 2556     uint8 *msg_ptr;
// 2557     
// 2558     while ( (msg_ptr = osal_msg_receive( bdb_TaskID )) )
??bdb_event_loop_8:
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,?V2
        MOV       R1,?V3
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_event_loop_9
// 2559     {
// 2560       //Process the Incomming ZDO messages used by BDB commissioning methods
// 2561       if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_ZDO_CB_MSG)
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        XRL       A,#0xd3
        JNZ       ??bdb_event_loop_10
// 2562       {
// 2563         bdb_processZDOMgs((zdoIncomingMsg_t *)msg_ptr);
        ; Setup parameters for call to function bdb_processZDOMgs
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??bdb_processZDOMgs::?relay`; Banked call to: bdb_processZDOMgs
        SJMP      ??bdb_event_loop_11
// 2564       }
// 2565       
// 2566       //Validate the is receive on the right process
// 2567       else if(((bdbInMsg_t*)msg_ptr)->hdr.event == bdbCommissioningProcedureState.bdbCommissioningState)
??bdb_event_loop_10:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??bdb_event_loop_12
// 2568       {
// 2569         bdb_ProcessOSALMsg( (bdbInMsg_t *)msg_ptr );
        ; Setup parameters for call to function bdb_ProcessOSALMsg
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??bdb_ProcessOSALMsg::?relay`; Banked call to: bdb_ProcessOSALMsg
        SJMP      ??bdb_event_loop_11
// 2570       }
// 2571       //Notify the user
// 2572       else if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_NOTIFY_USER)
??bdb_event_loop_12:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        XRL       A,#0xa
        JNZ       ??bdb_event_loop_11
// 2573       {
// 2574         ((bdbCommissioningModeMsg_t*) ((bdbInMsg_t*)msg_ptr)->buf)->bdbRemainingCommissioningModes = bdbAttributes.bdbCommissioningMode;
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2575         if(pfnCommissioningStatusCB)
        MOV       DPTR,#pfnCommissioningStatusCB
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_event_loop_11
// 2576         {
// 2577           pfnCommissioningStatusCB((bdbCommissioningModeMsg_t*) (((bdbInMsg_t*)msg_ptr)->buf));
        ; Setup parameters for indirect call
        MOV       A,?V0
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,?V1
        MOV       R3,A
        MOV       DPTR,#pfnCommissioningStatusCB
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        LCALL     ?CALL_IND
// 2578         }
// 2579 #ifdef MT_APP_CNF_FUNC
// 2580         //Notify the host processor about the event
// 2581         MT_AppCnfCommissioningNotification((bdbCommissioningModeMsg_t*) (((bdbInMsg_t*)msg_ptr)->buf));
// 2582 #endif
// 2583       }
// 2584 #if (ZG_BUILD_COORDINATOR_TYPE)
// 2585       else
// 2586       {
// 2587         if(ZG_DEVICE_COORDINATOR_TYPE)
// 2588         {
// 2589           //Notify the status 
// 2590           if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_TC_LINK_KEY_EXCHANGE_PROCESS)
// 2591           {
// 2592             pfnTCLinkKeyExchangeProcessCB( (bdb_TCLinkKeyExchProcess_t*) ((bdbInMsg_t*)msg_ptr)->buf);
// 2593           }
// 2594         }
// 2595       }
// 2596 #endif
// 2597       // Release the memory
// 2598       osal_msg_deallocate( msg_ptr );
??bdb_event_loop_11:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
        MOV       A,R1
        LJMP      ??bdb_event_loop_8 & 0xFFFF
// 2599     }
// 2600 
// 2601     // Return unprocessed events
// 2602     return (events ^ SYS_EVENT_MSG);
??bdb_event_loop_9:
        MOV       A,R6
        XRL       A,#0x0
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x80
        MOV       R3,A
        LJMP      ??bdb_event_loop_6 & 0xFFFF
// 2603   }
// 2604   
// 2605 
// 2606   if(events & BDB_PROCESS_TIMEOUT)
??bdb_event_loop_7:
        MOV       A,R6
        ANL       A,#0x0
        MOV       R0,A
        MOV       A,R7
        ANL       A,#0x10
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_event_loop_13
// 2607   {
// 2608     bdb_processTimeout();
        ; Setup parameters for call to function bdb_processTimeout
        LCALL     `??bdb_processTimeout::?relay`; Banked call to: bdb_processTimeout
// 2609     // Return unprocessed events
// 2610     return (events ^ BDB_PROCESS_TIMEOUT);
        MOV       A,R6
        XRL       A,#0x0
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x10
        MOV       R3,A
        LJMP      ??bdb_event_loop_6 & 0xFFFF
// 2611   }
// 2612   
// 2613   if(events &  BDB_REPORT_TIMEOUT){
??bdb_event_loop_13:
        MOV       A,R6
        ANL       A,#0x80
        JZ        ??bdb_event_loop_14
// 2614 #ifdef BDB_REPORTING    
// 2615     bdb_RepProcessEvent();
// 2616 #endif
// 2617     // Return unprocessed events
// 2618     return (events ^ BDB_REPORT_TIMEOUT);
        MOV       A,R6
        XRL       A,#0x80
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x0
        MOV       R3,A
        LJMP      ??bdb_event_loop_6 & 0xFFFF
// 2619   }
// 2620   
// 2621 #if (ZG_BUILD_JOINING_TYPE)
// 2622   if(events & BDB_TC_LINK_KEY_EXCHANGE_FAIL)
??bdb_event_loop_14:
        MOV       A,R6
        ANL       A,#0x2
        JZ        ??bdb_event_loop_15
// 2623   {
// 2624     if(ZG_DEVICE_JOINING_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??bdb_event_loop_16
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??bdb_event_loop_17
// 2625     {
// 2626       NLME_LeaveReq_t leaveReq;
// 2627       // Set every field to 0
// 2628       osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
??bdb_event_loop_16:
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x5
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2629       
// 2630       bdb_setNodeIsOnANetwork(FALSE);
        ; Setup parameters for call to function bdb_setNodeIsOnANetwork
        MOV       R1,#0x0
        LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
// 2631 
// 2632       if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
        ; Setup parameters for call to function NLME_LeaveReq
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
        MOV       A,R1
        JZ        ??bdb_event_loop_17
// 2633       {
// 2634         osal_set_event( bdb_TaskID,BDB_TC_LINK_KEY_EXCHANGE_FAIL);
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x2
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
        MOV       A,R1
// 2635       }
// 2636     }
// 2637     // Return unprocessed events
// 2638     return (events ^ BDB_TC_LINK_KEY_EXCHANGE_FAIL);
??bdb_event_loop_17:
        MOV       A,R6
        XRL       A,#0x2
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x0
        MOV       R3,A
        LJMP      ??bdb_event_loop_6 & 0xFFFF
// 2639   }
// 2640 #endif
// 2641   
// 2642   if(events & BDB_TC_JOIN_TIMEOUT)
??bdb_event_loop_15:
        MOV       A,R6
        ANL       A,#0x0
        MOV       R0,A
        MOV       A,R7
        ANL       A,#0x8
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_event_loop_18
// 2643   {     
// 2644 #if (ZG_BUILD_COORDINATOR_TYPE)
// 2645     if(ZG_DEVICE_COORDINATOR_TYPE)
// 2646     {
// 2647       bdb_TCProcessJoiningList();
// 2648     }
// 2649 #endif    
// 2650     return (events ^ BDB_TC_JOIN_TIMEOUT);
        MOV       A,R6
        XRL       A,#0x0
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x8
        MOV       R3,A
        LJMP      ??bdb_event_loop_6 & 0xFFFF
// 2651   }
// 2652 
// 2653 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
// 2654   
// 2655   if(events & BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT)
??bdb_event_loop_18:
        MOV       A,R6
        ANL       A,#0x40
        JNZ       $+5
        LJMP      ??bdb_event_loop_19 & 0xFFFF
// 2656   {
// 2657     if ( FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE )
// 2658     {
// 2659       bdb_CurrEpDescriptor = bdb_setEpDescListToActiveEndpoint();
        ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
        LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V6,?V0
        MOV       ?V7,?V1
// 2660       
// 2661       //If we have endpoint from which to send the identify command, then proceed, otherwise finish
// 2662       if(bdb_CurrEpDescriptor != NULL) //just a safty check. The fact that we got to this functuon at all means that this cannot be NULL
        MOV       A,?V6
        ORL       A,?V7
        JZ        ??bdb_event_loop_20
// 2663       {
// 2664         //Substract an attempt
// 2665         bdb_FB_InitiatorCurrentCyclesNumber--;
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX      A,@DPTR
        ADD       A,#-0x1
        MOVX      @DPTR,A
// 2666         
// 2667         if(bdb_FB_InitiatorCurrentCyclesNumber > 0)
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX      A,@DPTR
        JZ        ??bdb_event_loop_20
// 2668         {
// 2669           //Only send Identify Query if there is no pending responses from a previous identify query
// 2670           if ((osal_get_timeoutEx(bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT) == 0) && (bdb_getRespondentRetry(pRespondentHead) == NULL))
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x0
        MOV       R3,#0x40
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV       A,R2
        ORL       A,R3
        ORL       A,R4
        ORL       A,R5
        JNZ       ??bdb_event_loop_21
        ; Setup parameters for call to function bdb_getRespondentRetry
        MOV       DPTR,#pRespondentHead
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,?V0
        ORL       A,?V1
        JNZ       ??bdb_event_loop_21
// 2671           {
// 2672             //Send identify query with the endpoint requested
// 2673             bdb_SendIdentifyQuery(bdb_CurrEpDescriptor->endPoint);
        ; Setup parameters for call to function bdb_SendIdentifyQuery
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendIdentifyQuery::?relay`; Banked call to: bdb_SendIdentifyQuery
        MOV       A,R1
// 2674           }
// 2675           osal_start_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT, FINDING_AND_BINDING_PERIODIC_TIME * 1000);
??bdb_event_loop_21:
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3a98
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       A,R1
// 2676         }
// 2677       }
// 2678     }
// 2679 
// 2680     if (bdb_FB_InitiatorCurrentCyclesNumber == 0)
??bdb_event_loop_20:
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX      A,@DPTR
        JNZ       ??bdb_event_loop_22
// 2681     {
// 2682       bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE );
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xb
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
// 2683     }
// 2684     
// 2685     return (events ^ BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
??bdb_event_loop_22:
        MOV       A,R6
        XRL       A,#0x40
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x0
        MOV       R3,A
        LJMP      ??bdb_event_loop_6 & 0xFFFF
// 2686   }
// 2687   
// 2688   if(events & BDB_IDENTIFY_TIMEOUT)
??bdb_event_loop_19:
        MOV       A,R6
        ANL       A,#0x0
        MOV       R0,A
        MOV       A,R7
        ANL       A,#0x20
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       $+5
        LJMP      ??bdb_event_loop_23 & 0xFFFF
// 2689   {
// 2690     zclAttrRec_t identifyAttrRec;
// 2691     epList_t *bdb_CurrEpDescriptorNextInList = NULL;
        MOV       ?V0,#0x0
        MOV       ?V1,#0x0
// 2692     bdb_CurrEpDescriptorNextInList = bdb_HeadEpDescriptorList;
        MOV       DPTR,#bdb_HeadEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       ?V0,R0
        MOV       ?V1,R1
// 2693     
// 2694     bool KeepIdentifyTimerRunning = FALSE;
        MOV       ?V4,#0x0
// 2695     
// 2696     while(bdb_CurrEpDescriptorNextInList != NULL )
??bdb_event_loop_24:
        MOV       A,?V0
        ORL       A,?V1
        JNZ       $+5
        LJMP      ??bdb_event_loop_25 & 0xFFFF
// 2697     {
// 2698       endPointDesc_t *bdb_EpDescriptor = NULL;
        MOV       ?V2,#0x0
        MOV       ?V3,#0x0
// 2699       bdb_EpDescriptor = bdb_CurrEpDescriptorNextInList->epDesc;
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       ?V2,R0
        MOV       ?V3,R1
// 2700     
// 2701       //Do not check ZDO or Zigbee reserved endpoints
// 2702       if((bdb_CurrEpDescriptorNextInList->epDesc->endPoint == 0) || (bdb_CurrEpDescriptorNextInList->epDesc->endPoint >= BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        JZ        ??bdb_event_loop_26
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#-0xf
        JC        ??bdb_event_loop_27
// 2703       {
// 2704         bdb_CurrEpDescriptorNextInList = bdb_CurrEpDescriptorNextInList->nextDesc;
??bdb_event_loop_26:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
// 2705         continue;
        SJMP      ??bdb_event_loop_24
// 2706       }
// 2707       
// 2708       if ( zclFindAttrRec( bdb_EpDescriptor->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
// 2709                         ATTRID_IDENTIFY_TIME, &identifyAttrRec ) )
??bdb_event_loop_27:
        ; Setup parameters for call to function zclFindAttrRec
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V8,R0
        MOV       ?V9,R1
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x3
        MOV       R3,#0x0
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       A,R1
        JZ        ??bdb_event_loop_28
// 2710       {
// 2711         if(*((uint16*)identifyAttrRec.attr.dataPtr) > 0)
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_event_loop_29
// 2712         {
// 2713           (uint16)(*((uint16*)identifyAttrRec.attr.dataPtr))--;
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        ADD       A,#-0x1
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#-0x1
        MOV       R3,A
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 2714           KeepIdentifyTimerRunning = TRUE;
        MOV       ?V4,#0x1
        SJMP      ??bdb_event_loop_28
// 2715         }
// 2716         else
// 2717         {
// 2718           // Use bdb success main state
// 2719           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
??bdb_event_loop_29:
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0x0
        MOVX      @DPTR,A
// 2720           if(pfnIdentifyTimeChangeCB != NULL)
        MOV       DPTR,#pfnIdentifyTimeChangeCB
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_event_loop_28
// 2721           {
// 2722             pfnIdentifyTimeChangeCB(bdb_EpDescriptor->endPoint);
        ; Setup parameters for indirect call
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#pfnIdentifyTimeChangeCB
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        LCALL     ?CALL_IND
// 2723           }
// 2724         }
// 2725       }
// 2726       bdb_CurrEpDescriptorNextInList = bdb_CurrEpDescriptorNextInList->nextDesc;
??bdb_event_loop_28:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        LJMP      ??bdb_event_loop_24 & 0xFFFF
// 2727     }
// 2728     
// 2729     //If any endpoint has identify running, keep the timer on
// 2730     if(KeepIdentifyTimerRunning)
??bdb_event_loop_25:
        MOV       A,?V4
        JZ        ??bdb_event_loop_30
// 2731     {
// 2732       osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3e8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       R2,#0x0
        MOV       R3,#0x20
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       A,R1
        SJMP      ??bdb_event_loop_31
// 2733     }
// 2734     else
// 2735     {
// 2736       osal_stop_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT );
??bdb_event_loop_30:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x20
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
// 2737     }
// 2738     
// 2739     // Return unprocessed events
// 2740     return (events ^ BDB_IDENTIFY_TIMEOUT);
??bdb_event_loop_31:
        MOV       A,R6
        XRL       A,#0x0
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x20
        MOV       R3,A
        SJMP      ??bdb_event_loop_6
// 2741   }
// 2742   
// 2743   if(events & BDB_RESPONDENT_PROCESS_TIMEOUT)
??bdb_event_loop_23:
        MOV       A,R6
        ANL       A,#0x0
        MOV       R0,A
        MOV       A,R7
        ANL       A,#0x40
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_event_loop_32
// 2744   {
// 2745     // Send Simple Descriptor request to a respondent node
// 2746     bdb_ProcessRespondentList();
        ; Setup parameters for call to function bdb_ProcessRespondentList
        LCALL     `??bdb_ProcessRespondentList::?relay`; Banked call to: bdb_ProcessRespondentList
// 2747 
// 2748     return (events ^ BDB_RESPONDENT_PROCESS_TIMEOUT);
        MOV       A,R6
        XRL       A,#0x0
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x40
        MOV       R3,A
        SJMP      ??bdb_event_loop_6
// 2749   }
// 2750 #endif
// 2751   
// 2752   return 0;
??bdb_event_loop_32:
        MOV       R2,#0x0
        MOV       R3,#0x0
??bdb_event_loop_6:
        MOV       A,#0xd
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R7,#0xa
        LJMP      ?BANKED_LEAVE_XDATA
// 2753 }
          CFI EndBlock cfiBlock33
// 2754 
// 2755 /*********************************************************************
// 2756  * @fn          bdb_processZDOMgs
// 2757  *
// 2758  * @brief       Process ZDO messages used as part of BDB commissioning methods
// 2759  *
// 2760  * @param       zdoIncomingMsg_t - ZDO message
// 2761  *
// 2762  * @return      
// 2763  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2764 static void bdb_processZDOMgs(zdoIncomingMsg_t *pMsg)
bdb_processZDOMgs:
          CFI Block cfiBlock34 Using cfiCommon0
          CFI Function bdb_processZDOMgs
        CODE
// 2765 {
        FUNCALL bdb_processZDOMgs, bdb_ProcessIEEEAddrRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_processZDOMgs, bdb_ProcessSimpleDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_processZDOMgs, bdb_ProcessNodeDescRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2766   switch ( pMsg->clusterID )
        MOV       A,R6
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?US_SWITCH_DENSE
`?<Jumptable for bdb_processZDOMgs>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        32769
        DATA
        DATA8
        DATA
        DATA8
        DB        3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??bdb_processZDOMgs_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??bdb_processZDOMgs_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??bdb_processZDOMgs_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??bdb_processZDOMgs_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??bdb_processZDOMgs_3
        CODE
// 2767   {
// 2768 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)      
// 2769     case IEEE_addr_rsp:
// 2770        bdb_ProcessIEEEAddrRsp(pMsg);
??bdb_processZDOMgs_1:
        ; Setup parameters for call to function bdb_ProcessIEEEAddrRsp
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_ProcessIEEEAddrRsp::?relay`; Banked call to: bdb_ProcessIEEEAddrRsp
// 2771     break;
        SJMP      ??bdb_processZDOMgs_0
// 2772     case Simple_Desc_rsp:
// 2773       bdb_ProcessSimpleDesc(pMsg);
??bdb_processZDOMgs_3:
        ; Setup parameters for call to function bdb_ProcessSimpleDesc
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_ProcessSimpleDesc::?relay`; Banked call to: bdb_ProcessSimpleDesc
// 2774     break;
        SJMP      ??bdb_processZDOMgs_0
// 2775 #endif
// 2776 
// 2777 #if (ZG_BUILD_JOINING_TYPE)    
// 2778     case Node_Desc_rsp:
// 2779       bdb_ProcessNodeDescRsp(pMsg);
??bdb_processZDOMgs_2:
        ; Setup parameters for call to function bdb_ProcessNodeDescRsp
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_ProcessNodeDescRsp::?relay`; Banked call to: bdb_ProcessNodeDescRsp
// 2780     break;
// 2781 #endif
// 2782     
// 2783     default:
// 2784     break;
// 2785   }
// 2786 }
??bdb_processZDOMgs_0:
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock34
// 2787 
// 2788 
// 2789 /*********************************************************************
// 2790  * @fn      bdb_ProcessNodeDescRsp
// 2791  *
// 2792  * @brief   Process Node Descriptor response to validate the stack version of the
// 2793  *
// 2794  * @param   zdoIncomingMsg_t *pMsg
// 2795  *
// 2796  * @return  none
// 2797  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2798 void bdb_ProcessNodeDescRsp(zdoIncomingMsg_t *pMsg)
bdb_ProcessNodeDescRsp:
          CFI Block cfiBlock35 Using cfiCommon0
          CFI Function bdb_ProcessNodeDescRsp
        CODE
// 2799 {
        FUNCALL bdb_ProcessNodeDescRsp, APSME_IsDistributedSecurity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, ZDO_ParseNodeDescRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, bdb_tcLinkKeyExchangeAttempt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 50, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, bdb_setNodeJoinLinkKeyType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 35
        MOV       A,#-0x23
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 46)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2800   //Avoid processing unintended messages
// 2801   if(requestNewTrustCenterLinkKey && 
// 2802     (bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE))
        MOV       DPTR,#requestNewTrustCenterLinkKey
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??bdb_ProcessNodeDescRsp_0 & 0xFFFF
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??bdb_ProcessNodeDescRsp_0 & 0xFFFF
// 2803   {
// 2804     if(!APSME_IsDistributedSecurity())
        ; Setup parameters for call to function APSME_IsDistributedSecurity
        LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
        MOV       A,R1
        JZ        $+5
        LJMP      ??bdb_ProcessNodeDescRsp_0 & 0xFFFF
// 2805     {
// 2806       //Is this from the coordinator?
// 2807       if(pMsg->srcAddr.addr.shortAddr == 0x0000)
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        $+5
        LJMP      ??bdb_ProcessNodeDescRsp_0 & 0xFFFF
// 2808       {
// 2809         ZDO_NodeDescRsp_t NDRsp;
// 2810         uint8 StackComplianceRev;
// 2811 
// 2812         //Stop timer to avoid unintended resets
// 2813         osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x10
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
// 2814         
// 2815         ZDO_ParseNodeDescRsp(pMsg, &NDRsp);
        ; Setup parameters for call to function ZDO_ParseNodeDescRsp
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDO_ParseNodeDescRsp::?relay`; Banked call to: ZDO_ParseNodeDescRsp
// 2816         
// 2817         StackComplianceRev = NDRsp.nodeDesc.ServerMask >> STACK_COMPLIANCE_CURRENT_REV_POS;
        MOV       A,#0x1e
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       A,#0x9
        MOV       R0,#?V0
        LCALL     ?US_SHR
        MOV       A,?V0
        MOV       ?V2,A
// 2818         
// 2819         if( StackComplianceRev >= STACK_COMPL_REV_21 )
        MOV       A,?V2
        CLR       C
        SUBB      A,#0x15
        JC        ??bdb_ProcessNodeDescRsp_1
// 2820         {
// 2821           bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_LINK_KEY);
        ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
        MOV       R2,#0x2
        MOV       R1,#0x1
        LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
        SJMP      ??bdb_ProcessNodeDescRsp_0
// 2822         }
// 2823         else
// 2824         {
// 2825           APSME_TCLKDevEntry_t TCLKDevEntry;
// 2826           
// 2827           //Save the KeyAttribute for joining device that it has joined non-R21 nwk
// 2828           TCLKDevEntry.keyAttributes = ZG_NON_R21_NWK_JOINED;
??bdb_ProcessNodeDescRsp_1:
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x3
        MOVX      @DPTR,A
// 2829           osal_nv_write(ZCD_NV_TCLK_TABLE_START,osal_offsetof(APSME_TCLKDevEntry_t,keyAttributes),sizeof(uint8),&TCLKDevEntry.keyAttributes);
        ; Setup parameters for call to function osal_nv_write
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOV       ?V0,DPL
        MOV       ?V1,DPH
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 48)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R2,#0x11
        MOV       R3,#0x1
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 46)
        MOV       A,R1
// 2830           
// 2831           bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
        ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
        MOV       R1,#0x0
        LCALL     `??bdb_setNodeJoinLinkKeyType::?relay`; Banked call to: bdb_setNodeJoinLinkKeyType
// 2832           bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x1
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2833         }
// 2834       }
// 2835     }
// 2836   }
// 2837 }
??bdb_ProcessNodeDescRsp_0:
        MOV       A,#0x23
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       R7,#0x3
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock35
// 2838 
// 2839 
// 2840 /*********************************************************************
// 2841  * @fn          bdb_touchlinkSendFNReset
// 2842  *
// 2843  * @brief       Starts the Factory New Procedure for Initiator
// 2844  *
// 2845  * @param       isOnANetwork - TRUE if the devices is not FN, FALSE otherwise
// 2846  *
// 2847  * @return      none
// 2848  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2849 void bdb_touchlinkSendFNReset( void )
bdb_touchlinkSendFNReset:
          CFI Block cfiBlock36 Using cfiCommon0
          CFI Function bdb_touchlinkSendFNReset
        CODE
// 2850 {
        FUNCALL bdb_touchlinkSendFNReset, touchLinkInitiator_ResetToFNProcedure
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2851 #ifdef BDB_TL_INITIATOR
// 2852   touchLinkInitiator_ResetToFNProcedure( );
        ; Setup parameters for call to function touchLinkInitiator_ResetToFNProcedure
        LCALL     `??touchLinkInitiator_ResetToFNProcedure::?relay`; Banked call to: touchLinkInitiator_ResetToFNProcedure
// 2853 #endif
// 2854 }
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock36
// 2855 
// 2856 
// 2857 /*********************************************************************
// 2858  * @fn          bdb_setNodeIsOnANetwork
// 2859  *
// 2860  * @brief       Sets and saves in Nv bdbNodeIsOnANetwork attribute
// 2861  *
// 2862  * @param       isOnANetwork - TRUE if the devices is not FN, FALSE otherwise
// 2863  *
// 2864  * @return      none
// 2865  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2866 void bdb_setNodeIsOnANetwork(bool isOnANetwork)
bdb_setNodeIsOnANetwork:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function bdb_setNodeIsOnANetwork
        CODE
// 2867 {
        FUNCALL bdb_setNodeIsOnANetwork, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 2868   if((bdbAttributes.bdbNodeIsOnANetwork != isOnANetwork) || (!bdb_initialization))
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        XRL       A,R6
        JNZ       ??bdb_setNodeIsOnANetwork_0
        MOV       DPTR,#bdb_initialization
        MOVX      A,@DPTR
        JNZ       ??bdb_setNodeIsOnANetwork_1
// 2869   {
// 2870     //We lose our network
// 2871     if(!isOnANetwork)
??bdb_setNodeIsOnANetwork_0:
        MOV       A,R6
        JNZ       ??bdb_setNodeIsOnANetwork_2
// 2872     {
// 2873       bdbAttributes.bdbCommissioningMode = 0;
        MOV       DPTR,#bdbAttributes + 11
        MOV       A,#0x0
        MOVX      @DPTR,A
// 2874     }
// 2875     
// 2876     bdbAttributes.bdbNodeIsOnANetwork = isOnANetwork;
??bdb_setNodeIsOnANetwork_2:
        MOV       A,R6
        MOV       DPTR,#bdbAttributes + 14
        MOVX      @DPTR,A
// 2877     
// 2878     osal_nv_write(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V0,#(bdbAttributes + 14) & 0xff
        MOV       ?V1,#((bdbAttributes + 14) >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x55
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       A,R1
// 2879   }
// 2880 }
??bdb_setNodeIsOnANetwork_1:
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock37
// 2881 
// 2882 /*********************************************************************
// 2883  * @fn          bdb_setCommissioningGroupID
// 2884  *
// 2885  * @brief       Sets the commissioning groupd ID
// 2886  *
// 2887  * @param       groupID
// 2888  *
// 2889  * @return      none
// 2890  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2891 void bdb_setCommissioningGroupID(uint16 groupID)
bdb_setCommissioningGroupID:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI Function bdb_setCommissioningGroupID
        CODE
// 2892 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2893   bdbAttributes.bdbCommissioningGroupID = groupID;
        MOV       DPTR,#bdbAttributes + 8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 2894 }
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock38
// 2895 
// 2896 /*********************************************************************
// 2897  * @fn      bdb_CreateRespondentList
// 2898  *
// 2899  * @brief   Create respondent list for finding and binding if empty
// 2900  *
// 2901  * @param   pHead - pointer to a pointer of the list head
// 2902  *
// 2903  * @return  none
// 2904  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2905 void bdb_CreateRespondentList( bdbFindingBindingRespondent_t **pHead )
bdb_CreateRespondentList:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI Function bdb_CreateRespondentList
        CODE
// 2906 {
        FUNCALL bdb_CreateRespondentList, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2907 
// 2908   // Create the list if empty
// 2909   if ( *pHead == NULL )
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       ??bdb_CreateRespondentList_0
// 2910   {
// 2911     *pHead = ( bdbFindingBindingRespondent_t* )osal_mem_alloc( sizeof( bdbFindingBindingRespondent_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x11
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 2912     
// 2913     if ( *pHead != NULL )
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_CreateRespondentList_0
// 2914     {
// 2915       (*pHead)->pNext = NULL;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0xf
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
// 2916     }
// 2917   }
// 2918   return;
??bdb_CreateRespondentList_0:
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
// 2919 }
          CFI EndBlock cfiBlock39
// 2920 
// 2921 /*********************************************************************
// 2922  * @fn      bdb_AddRespondentNode
// 2923  *
// 2924  * @brief   Add node to respondent list for finding and binding
// 2925  *
// 2926  * @param   pHead - pointer to a pointer of the list head
// 2927  *
// 2928  * @return  pointer to new node
// 2929  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2930 bdbFindingBindingRespondent_t* bdb_AddRespondentNode( bdbFindingBindingRespondent_t **pHead, zclIdentifyQueryRsp_t *pCmd )
bdb_AddRespondentNode:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI Function bdb_AddRespondentNode
        CODE
// 2931 {
        FUNCALL bdb_AddRespondentNode, bdb_CreateRespondentList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_AddRespondentNode, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V4,R4
        MOV       ?V5,R5
// 2932   bdbFindingBindingRespondent_t **pCurr;
// 2933   bdbFindingBindingRespondent_t *temp;
// 2934   
// 2935     // Create respondent list if empty
// 2936   if ( *pHead == NULL )
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       ??bdb_AddRespondentNode_0
// 2937   {
// 2938     bdb_CreateRespondentList( pHead );
        ; Setup parameters for call to function bdb_CreateRespondentList
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_CreateRespondentList::?relay`; Banked call to: bdb_CreateRespondentList
// 2939     return *pHead;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LJMP      ??bdb_AddRespondentNode_1 & 0xFFFF
// 2940   }
// 2941   else
// 2942   {
// 2943     // if pCmd is equal to NULL, don't look for duplucates
// 2944     if( pCmd != NULL )
??bdb_AddRespondentNode_0:
        MOV       A,?V4
        ORL       A,?V5
        JNZ       $+5
        LJMP      ??bdb_AddRespondentNode_2 & 0xFFFF
// 2945     {
// 2946       //Find if any duplicate in the list
// 2947       temp = *pHead;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       ?V0,R0
        MOV       ?V1,R1
// 2948       
// 2949       while(temp != NULL)
??bdb_AddRespondentNode_3:
        MOV       A,?V0
        ORL       A,?V1
        JNZ       $+5
        LJMP      ??bdb_AddRespondentNode_2 & 0xFFFF
// 2950       {
// 2951         if((temp->data.endPoint == pCmd->srcAddr->endPoint) && (temp->data.panId == pCmd->srcAddr->panId))
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x9
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,R1
        JNZ       ??bdb_AddRespondentNode_4
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0xa
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,R2
        JNZ       ??bdb_AddRespondentNode_5
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R3
??bdb_AddRespondentNode_5:
        JNZ       ??bdb_AddRespondentNode_4
// 2952         {
// 2953           //Duplicate
// 2954           if(temp->data.addr.shortAddr == pCmd->srcAddr->addr.shortAddr)
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        XRL       A,R2
        JNZ       ??bdb_AddRespondentNode_6
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R3
??bdb_AddRespondentNode_6:
        JNZ       ??bdb_AddRespondentNode_4
// 2955           {
// 2956             return NULL;
        MOV       R2,#0x0
        MOV       R3,#0x0
        LJMP      ??bdb_AddRespondentNode_1 & 0xFFFF
// 2957           }
// 2958         }
// 2959         temp = temp->pNext;
??bdb_AddRespondentNode_4:
        MOV       A,?V0
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        LJMP      ??bdb_AddRespondentNode_3 & 0xFFFF
// 2960       }
// 2961     }
// 2962     
// 2963     pCurr = &((*pHead)->pNext);
??bdb_AddRespondentNode_2:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        ADD       A,#0xf
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R1,A
        MOV       ?V2,R0
        MOV       ?V3,R1
// 2964     
// 2965     while ( *pCurr != NULL )
??bdb_AddRespondentNode_7:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_AddRespondentNode_8
// 2966     {
// 2967       pCurr = &((*pCurr)->pNext);
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        ADD       A,#0xf
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       ?V3,A
        SJMP      ??bdb_AddRespondentNode_7
// 2968     }
// 2969 
// 2970     *pCurr = ( bdbFindingBindingRespondent_t* )osal_mem_alloc( sizeof( bdbFindingBindingRespondent_t ) );
??bdb_AddRespondentNode_8:
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x11
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 2971     
// 2972     if(*pCurr == NULL)
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       ??bdb_AddRespondentNode_9
// 2973     {
// 2974       //No memory
// 2975       return NULL;
        MOV       R2,#0x0
        MOV       R3,#0x0
        SJMP      ??bdb_AddRespondentNode_1
// 2976     }
// 2977     
// 2978     (*pCurr)->pNext = NULL;
??bdb_AddRespondentNode_9:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0xf
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
// 2979   }
// 2980   
// 2981   return *pCurr;
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
??bdb_AddRespondentNode_1:
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
// 2982 }
          CFI EndBlock cfiBlock40
// 2983 
// 2984 /*********************************************************************
// 2985  * @fn      bdb_zclRespondentListClean
// 2986  *
// 2987  * @brief   This function free reserved memory for respondent list
// 2988  *
// 2989  * @param   pHead - begin of the respondent list
// 2990  *
// 2991  * @return  status
// 2992  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2993 void bdb_zclRespondentListClean( bdbFindingBindingRespondent_t **pHead )
bdb_zclRespondentListClean:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI Function bdb_zclRespondentListClean
        CODE
// 2994 {
        FUNCALL bdb_zclRespondentListClean, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2995   bdbFindingBindingRespondent_t **pCurr;
// 2996   bdbFindingBindingRespondent_t **pNext;
// 2997   
// 2998   if ( *pHead == NULL )
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_zclRespondentListClean_0
// 2999   {
// 3000     return;
// 3001   }
// 3002   
// 3003   pCurr = pHead;
        MOV       ?V0,R6
        MOV       ?V1,R7
// 3004   
// 3005   while( *pCurr != NULL )
??bdb_zclRespondentListClean_1:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_zclRespondentListClean_2
// 3006   {
// 3007     pNext = &((*pCurr)->pNext);
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        ADD       A,#0xf
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R1,A
        MOV       ?V2,R0
        MOV       ?V3,R1
// 3008     osal_mem_free( *pCurr );
        ; Setup parameters for call to function osal_mem_free
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 3009     *pCurr = ( bdbFindingBindingRespondent_t* )NULL;
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
// 3010     pCurr = pNext;
        MOV       R0,?V2
        MOV       R1,?V3
        MOV       ?V0,R0
        MOV       ?V1,R1
        SJMP      ??bdb_zclRespondentListClean_1
// 3011   }
// 3012   *pHead = NULL;
??bdb_zclRespondentListClean_2:
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
// 3013 }
??bdb_zclRespondentListClean_0:
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock41
// 3014 
// 3015  /*********************************************************************
// 3016  * PRIVATE FUNCTIONS
// 3017  *********************************************************************/
// 3018 
// 3019 /*********************************************************************
// 3020  * @fn      bdb_ProcessOSALMsg
// 3021  *
// 3022  * @brief   Process the incoming task message.
// 3023  *
// 3024  * @param   msgPtr - message to process
// 3025  *
// 3026  * @return  none
// 3027  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3028 void bdb_ProcessOSALMsg( bdbInMsg_t *msgPtr )
bdb_ProcessOSALMsg:
          CFI Block cfiBlock42 Using cfiCommon0
          CFI Function bdb_ProcessOSALMsg
        CODE
// 3029 {
        FUNCALL bdb_ProcessOSALMsg, bdb_filterNwkDisc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, bdb_tryNwkAssoc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, bdb_nwkDiscoveryAttempt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, nwkNeighborInitTable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, NLME_NwkDiscTerm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, bdb_tryNwkAssoc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, bdb_requestTCStackVersion
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, bdb_requestTCLinkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, bdb_requestVerifyTCLinkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 3030   
// 3031   switch(msgPtr->hdr.event)
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_ProcessOSALMsg_0 & 0xFFFF
        ADD       A,#-0x2
        JZ        $+5
        LJMP      ??bdb_ProcessOSALMsg_1 & 0xFFFF
// 3032   {
// 3033 #if (ZG_BUILD_JOINING_TYPE)
// 3034     case BDB_COMMISSIONING_STATE_JOINING:
// 3035       if(ZG_DEVICE_JOINING_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??bdb_ProcessOSALMsg_2
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x2
        JZ        $+5
        LJMP      ??bdb_ProcessOSALMsg_1 & 0xFFFF
// 3036       {
// 3037         switch(msgPtr->buf[0])
??bdb_ProcessOSALMsg_2:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JZ        ??bdb_ProcessOSALMsg_3
        DEC       A
        JZ        ??bdb_ProcessOSALMsg_4
        LJMP      ??bdb_ProcessOSALMsg_1 & 0xFFFF
// 3038         {
// 3039           case BDB_JOIN_EVENT_NWK_DISCOVERY:
// 3040             if(msgPtr->hdr.status == BDB_MSG_EVENT_SUCCESS)
??bdb_ProcessOSALMsg_3:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOVX      A,@DPTR
        JNZ       ??bdb_ProcessOSALMsg_5
// 3041             {
// 3042               bdb_filterNwkDisc();
        ; Setup parameters for call to function bdb_filterNwkDisc
        LCALL     `??bdb_filterNwkDisc::?relay`; Banked call to: bdb_filterNwkDisc
// 3043               bdb_tryNwkAssoc();
        ; Setup parameters for call to function bdb_tryNwkAssoc
        LCALL     `??bdb_tryNwkAssoc::?relay`; Banked call to: bdb_tryNwkAssoc
        SJMP      ??bdb_ProcessOSALMsg_6
// 3044             }
// 3045             else
// 3046             {
// 3047               bdb_nwkDiscoveryAttempt(FALSE);
??bdb_ProcessOSALMsg_5:
        ; Setup parameters for call to function bdb_nwkDiscoveryAttempt
        MOV       R1,#0x0
        LCALL     `??bdb_nwkDiscoveryAttempt::?relay`; Banked call to: bdb_nwkDiscoveryAttempt
// 3048             }
// 3049           break;
??bdb_ProcessOSALMsg_6:
        SJMP      ??bdb_ProcessOSALMsg_7
// 3050           
// 3051           case BDB_JOIN_EVENT_ASSOCIATION:
// 3052             if(msgPtr->hdr.status == BDB_MSG_EVENT_SUCCESS)
??bdb_ProcessOSALMsg_4:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOVX      A,@DPTR
        JNZ       ??bdb_ProcessOSALMsg_8
// 3053             {
// 3054               bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_WAITING_NWK_KEY;
        MOV       DPTR,#bdbCommissioningProcedureState + 2
        MOV       A,#0x2
        MOVX      @DPTR,A
// 3055               //Nwk key timeout get right timing
// 3056               osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT, BDB_DEFAULT_DEVICE_UNAUTH_TIMEOUT);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_bb8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R2,#0x0
        MOV       R3,#0x10
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,R1
        SJMP      ??bdb_ProcessOSALMsg_7
// 3057             }
// 3058             else
// 3059             {
// 3060               if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
// 3061                    (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
??bdb_ProcessOSALMsg_8:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,#-0x2
        XRL       A,?V0
        JNZ       ??bdb_ProcessOSALMsg_9
        MOV       A,#-0x1
        XRL       A,?V1
??bdb_ProcessOSALMsg_9:
        JNZ       ??bdb_ProcessOSALMsg_10
        MOV       DPTR,#_NIB + 20
        MOVX      A,@DPTR
        XRL       A,#0xfe
        JNZ       ??bdb_ProcessOSALMsg_11
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0xff
??bdb_ProcessOSALMsg_11:
        JZ        ??bdb_ProcessOSALMsg_12
// 3062               {
// 3063                 uint16 addr = INVALID_NODE_ADDR;
??bdb_ProcessOSALMsg_10:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 3064                 // Invalidate nwk addr so end device does not use in its data reqs.
// 3065                 _NIB.nwkDevAddress = INVALID_NODE_ADDR;
        MOV       DPTR,#_NIB + 20
        MOV       A,#-0x2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 3066                 ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
        ; Setup parameters for call to function ZMacSetReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x53
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
        MOV       A,R1
// 3067               }
// 3068 
// 3069               //Clear the neighbor Table and network discovery tables.
// 3070               nwkNeighborInitTable();
??bdb_ProcessOSALMsg_12:
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
// 3071               NLME_NwkDiscTerm();
        ; Setup parameters for call to function NLME_NwkDiscTerm
        LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
// 3072               _NIB.nwkState = NWK_INIT;
        MOV       DPTR,#_NIB + 35
        MOV       A,#0x0
        MOVX      @DPTR,A
// 3073               
// 3074               bdb_tryNwkAssoc();
        ; Setup parameters for call to function bdb_tryNwkAssoc
        LCALL     `??bdb_tryNwkAssoc::?relay`; Banked call to: bdb_tryNwkAssoc
// 3075             }
// 3076           break;
// 3077         }
// 3078       }
// 3079     break;
??bdb_ProcessOSALMsg_7:
        SJMP      ??bdb_ProcessOSALMsg_1
// 3080     
// 3081     case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
// 3082       if(ZG_DEVICE_JOINING_TYPE)
??bdb_ProcessOSALMsg_0:
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??bdb_ProcessOSALMsg_13
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??bdb_ProcessOSALMsg_1
// 3083       {
// 3084         if(msgPtr->hdr.status != BDB_MSG_EVENT_SUCCESS)
??bdb_ProcessOSALMsg_13:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOVX      A,@DPTR
        JZ        ??bdb_ProcessOSALMsg_14
// 3085         {
// 3086           bdbAttributes.bdbTCLinkKeyExchangeAttempts++;
        MOV       DPTR,#bdbAttributes + 16
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOVX      @DPTR,A
// 3087           if(bdbAttributes.bdbTCLinkKeyExchangeAttempts > bdbAttributes.bdbTCLinkKeyExchangeAttemptsMax)
        MOV       DPTR,#bdbAttributes + 16
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPTR,#bdbAttributes + 17
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,R0
        JNC       ??bdb_ProcessOSALMsg_14
// 3088           {
// 3089             //TCLK process fail due to many attempts fails
// 3090             bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x1
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 3091             return;
        SJMP      ??bdb_ProcessOSALMsg_1
// 3092           }
// 3093         }
// 3094         switch(bdbCommissioningProcedureState.bdbTCExchangeState)
??bdb_ProcessOSALMsg_14:
        MOV       DPTR,#bdbCommissioningProcedureState + 1
        MOVX      A,@DPTR
        DEC       A
        JZ        ??bdb_ProcessOSALMsg_15
        DEC       A
        JZ        ??bdb_ProcessOSALMsg_16
        DEC       A
        JZ        ??bdb_ProcessOSALMsg_17
        SJMP      ??bdb_ProcessOSALMsg_1
// 3095         {
// 3096           case BDB_REQ_TC_STACK_VERSION:
// 3097             bdb_requestTCStackVersion();
??bdb_ProcessOSALMsg_15:
        ; Setup parameters for call to function bdb_requestTCStackVersion
        LCALL     `??bdb_requestTCStackVersion::?relay`; Banked call to: bdb_requestTCStackVersion
// 3098           break;
        SJMP      ??bdb_ProcessOSALMsg_1
// 3099           case BDB_REQ_TC_LINK_KEY:
// 3100             bdb_requestTCLinkKey();
??bdb_ProcessOSALMsg_16:
        ; Setup parameters for call to function bdb_requestTCLinkKey
        LCALL     `??bdb_requestTCLinkKey::?relay`; Banked call to: bdb_requestTCLinkKey
// 3101           break;
        SJMP      ??bdb_ProcessOSALMsg_1
// 3102           case BDB_REQ_VERIFY_TC_LINK_KEY:
// 3103             bdb_requestVerifyTCLinkKey();
??bdb_ProcessOSALMsg_17:
        ; Setup parameters for call to function bdb_requestVerifyTCLinkKey
        LCALL     `??bdb_requestVerifyTCLinkKey::?relay`; Banked call to: bdb_requestVerifyTCLinkKey
// 3104           break;
// 3105         }
// 3106       }
// 3107    break;
// 3108 #endif
// 3109    }
// 3110 }
??bdb_ProcessOSALMsg_1:
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock42
// 3111 
// 3112 
// 3113 /*********************************************************************
// 3114  * @fn      bdb_processTimeout
// 3115  *
// 3116  * @brief   Handles timeout of the bdb process
// 3117  *
// 3118  * @param   msgPtr - message to process
// 3119  *
// 3120  * @return  none
// 3121  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3122 void bdb_processTimeout(void)
bdb_processTimeout:
          CFI Block cfiBlock43 Using cfiCommon0
          CFI Function bdb_processTimeout
        CODE
// 3123 {
        FUNCALL bdb_processTimeout, bdb_tcLinkKeyExchangeAttempt
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_processTimeout, bdb_nwkAssocAttemt
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3124 #if (ZG_BUILD_JOINING_TYPE)
// 3125   if(ZG_DEVICE_JOINING_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??bdb_processTimeout_0
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??bdb_processTimeout_1
// 3126   {
// 3127     switch(bdbCommissioningProcedureState.bdbCommissioningState)
??bdb_processTimeout_0:
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        DEC       A
        JZ        ??bdb_processTimeout_2
        ADD       A,#-0x2
        JZ        ??bdb_processTimeout_3
        SJMP      ??bdb_processTimeout_1
// 3128     {
// 3129       case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
// 3130         
// 3131         bdb_tcLinkKeyExchangeAttempt(FALSE,bdbCommissioningProcedureState.bdbTCExchangeState);
??bdb_processTimeout_2:
        ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
        MOV       DPTR,#bdbCommissioningProcedureState + 1
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       R1,#0x0
        LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
// 3132       break;
        SJMP      ??bdb_processTimeout_1
// 3133       case BDB_COMMISSIONING_STATE_JOINING:
// 3134         if(bdbCommissioningProcedureState.bdbJoinState == BDB_JOIN_STATE_WAITING_NWK_KEY)
??bdb_processTimeout_3:
        MOV       DPTR,#bdbCommissioningProcedureState + 2
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??bdb_processTimeout_1
// 3135         {
// 3136           //If nwk key fails, then try association again
// 3137           bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_ASSOC;
        MOV       DPTR,#bdbCommissioningProcedureState + 2
        MOV       A,#0x1
        MOVX      @DPTR,A
// 3138           bdb_nwkAssocAttemt(FALSE);
        ; Setup parameters for call to function bdb_nwkAssocAttemt
        MOV       R1,#0x0
        LCALL     `??bdb_nwkAssocAttemt::?relay`; Banked call to: bdb_nwkAssocAttemt
// 3139         }
// 3140       break;
// 3141     }
// 3142   }
// 3143 #endif
// 3144   
// 3145 }
??bdb_processTimeout_1:
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock43
// 3146 
// 3147 
// 3148 /*********************************************************************
// 3149  * @fn      bdb_SendMsg
// 3150  *
// 3151  * @brief   Send messages to bdb processing with the expected format
// 3152  *
// 3153  * @param   msgPtr - message to process
// 3154  *
// 3155  * @return  none
// 3156  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3157 void bdb_SendMsg(uint8 taskID, uint8 toCommissioningState,uint8 status, uint8 len, uint8 *buf)
bdb_SendMsg:
          CFI Block cfiBlock44 Using cfiCommon0
          CFI Function bdb_SendMsg
        CODE
// 3158 {
        FUNCALL bdb_SendMsg, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_SendMsg, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_SendMsg, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV       A,#-0x12
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV       ?V1,R1
        MOV       ?V3,R2
        MOV       ?V7,R3
        MOV       ?V2,R4
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V8,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V9,A
// 3159   bdbInMsg_t *msgPtr = NULL;
        MOV       R6,#0x0
        MOV       R7,#0x0
// 3160 
// 3161   if ( (len > 0) && (buf != NULL) )
        MOV       A,?V2
        JZ        ??bdb_SendMsg_0
        MOV       A,?V8
        ORL       A,?V9
        JZ        ??bdb_SendMsg_0
// 3162   {
// 3163     uint8 tmpLength;
// 3164     tmpLength = len;
        MOV       ?V0,?V2
// 3165     tmpLength += sizeof(osal_event_hdr_t);
        MOV       A,#0x2
        ADD       A,?V0
        MOV       ?V0,A
// 3166     
// 3167     msgPtr = (bdbInMsg_t *)osal_msg_allocate( tmpLength );
        ; Setup parameters for call to function osal_msg_allocate
        MOV       A,?V0
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R6,?V4
        MOV       R7,?V5
// 3168     
// 3169     if ( msgPtr )
        MOV       A,R6
        ORL       A,R7
        JZ        ??bdb_SendMsg_0
// 3170     {
// 3171       osal_memcpy( msgPtr->buf, buf, len );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,?V8
        MOV       ?V5,?V9
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,?V2
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,R6
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 3172     
// 3173       msgPtr->hdr.event = toCommissioningState;
        MOV       A,?V3
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 3174       msgPtr->hdr.status = status;
        MOV       A,?V7
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 3175       osal_msg_send( taskID, (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       R1,?V1
        LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
        MOV       A,R1
// 3176     }
// 3177   }
// 3178 }
??bdb_SendMsg_0:
        MOV       R7,#0xa
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock44
// 3179 
// 3180 
// 3181 /*********************************************************************
// 3182  * @fn      bdb_RegisterCommissioningStatusCB
// 3183  *
// 3184  * @brief   Register a callback in which the status of the procedures done in
// 3185  *          BDB commissioning process will be reported
// 3186  *
// 3187  * @param   bdbGCB_CommissioningStatus - application callback
// 3188  *
// 3189  * @return  none
// 3190  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3191 void bdb_RegisterCommissioningStatusCB(bdbGCB_CommissioningStatus_t bdbGCB_CommissioningStatus)
bdb_RegisterCommissioningStatusCB:
          CFI Block cfiBlock45 Using cfiCommon0
          CFI Function bdb_RegisterCommissioningStatusCB
        CODE
// 3192 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3193   pfnCommissioningStatusCB = bdbGCB_CommissioningStatus;
        MOV       DPTR,#pfnCommissioningStatusCB
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 3194 }
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock45
// 3195 
// 3196 /*********************************************************************
// 3197  * @fn      bdb_ClearNetworkParams
// 3198  *
// 3199  * @brief   Restore nwk parameters to invalid if the device is not on a network
// 3200  *
// 3201  * @param   void
// 3202  *
// 3203  * @return  void
// 3204  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3205 void bdb_ClearNetworkParams(void)
bdb_ClearNetworkParams:
          CFI Block cfiBlock46 Using cfiCommon0
          CFI Function bdb_ClearNetworkParams
        CODE
// 3206 {
        FUNCALL bdb_ClearNetworkParams, touchLink_SetMacNwkParams
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3207 #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
// 3208   if ( bdbAttributes.bdbNodeIsOnANetwork == FALSE )
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        JNZ       ??bdb_ClearNetworkParams_0
// 3209   {
// 3210     //Clear the event
// 3211     _NIB.nwkPanId = INVALID_NODE_ADDR;
        MOV       DPTR,#_NIB + 33
        MOV       A,#-0x2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 3212     _NIB.nwkLogicalChannel = 0;
        MOV       DPTR,#_NIB + 22
        MOV       A,#0x0
        MOVX      @DPTR,A
// 3213     _NIB.nwkDevAddress = INVALID_NODE_ADDR;
        MOV       DPTR,#_NIB + 20
        MOV       A,#-0x2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 3214     touchLink_SetMacNwkParams( _NIB.nwkDevAddress, _NIB.nwkPanId, _NIB.nwkLogicalChannel );
        ; Setup parameters for call to function touchLink_SetMacNwkParams
        MOV       DPTR,#_NIB + 22
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#_NIB + 33
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       DPTR,#_NIB + 20
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??touchLink_SetMacNwkParams::?relay`; Banked call to: touchLink_SetMacNwkParams
// 3215   }
// 3216 #endif
// 3217 }
??bdb_ClearNetworkParams_0:
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock46
// 3218 
// 3219 /*********************************************************************
// 3220  * @fn      bdb_getZCLFrameCounter
// 3221  *
// 3222  * @brief   Get the next ZCL Frame Counter for packet sequence number
// 3223  *
// 3224  * @param   none
// 3225  *
// 3226  * @return  next ZCL frame counter
// 3227  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3228 uint8 bdb_getZCLFrameCounter(void)
bdb_getZCLFrameCounter:
          CFI Block cfiBlock47 Using cfiCommon0
          CFI Function bdb_getZCLFrameCounter
        CODE
// 3229 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3230   bdb_ZclTransactionSequenceNumber++;
        MOV       DPTR,#bdb_ZclTransactionSequenceNumber
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOVX      @DPTR,A
// 3231   return bdb_ZclTransactionSequenceNumber;
        MOV       DPTR,#bdb_ZclTransactionSequenceNumber
        MOVX      A,@DPTR
        MOV       R1,A
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
// 3232 
// 3233 }
          CFI EndBlock cfiBlock47
// 3234 
// 3235 
// 3236 #if (ZG_BUILD_JOINING_TYPE)
// 3237 /*********************************************************************
// 3238  * @fn      bdb_RegisterCBKETCLinkKeyExchangeCB
// 3239  *
// 3240  * @brief   Register a callback in which the TC link key exchange procedure will 
// 3241  *          be performed by application.
// 3242  *          Upon fail or success bdb must be notified, see bdb_CBKETCLinkKeyExchangeAttempt
// 3243  *
// 3244  * @param   bdbGCB_TCLinkKeyExchangeMethod - application callback
// 3245  *
// 3246  * @return  none
// 3247  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3248 void bdb_RegisterCBKETCLinkKeyExchangeCB(bdbGCB_CBKETCLinkKeyExchange_t bdbGCB_CBKETCLinkKeyExchange)
bdb_RegisterCBKETCLinkKeyExchangeCB:
          CFI Block cfiBlock48 Using cfiCommon0
          CFI Function bdb_RegisterCBKETCLinkKeyExchangeCB
        CODE
// 3249 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3250   if(bdbGCB_CBKETCLinkKeyExchange)
        MOV       A,R2
        ORL       A,R3
        JZ        ??bdb_RegisterCBKETCLinkKeyExchangeCB_0
// 3251   {
// 3252     pfnCBKETCLinkKeyExchange = bdbGCB_CBKETCLinkKeyExchange;
        MOV       DPTR,#pfnCBKETCLinkKeyExchange
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 3253     bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_CBKE;
        MOV       DPTR,#bdbAttributes + 18
        MOV       A,#0x1
        MOVX      @DPTR,A
        SJMP      ??bdb_RegisterCBKETCLinkKeyExchangeCB_1
// 3254   }
// 3255   else
// 3256   {
// 3257     pfnCBKETCLinkKeyExchange = NULL;
??bdb_RegisterCBKETCLinkKeyExchangeCB_0:
        MOV       DPTR,#pfnCBKETCLinkKeyExchange
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
// 3258     bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_APS_KEY;
        MOV       DPTR,#bdbAttributes + 18
        MOV       A,#0x0
        MOVX      @DPTR,A
// 3259   }
// 3260 }
??bdb_RegisterCBKETCLinkKeyExchangeCB_1:
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock48
// 3261 
// 3262 /*********************************************************************
// 3263  * @fn      bdb_RegisterForFilterNwkDescCB
// 3264  *
// 3265  * @brief   Register a callback in which the application gets the list of network
// 3266  *          descriptors got from active scan.
// 3267  *          Use bdb_nwkDescFree to release the network descriptors that are not 
// 3268  *          of interest and leave those which are to be attempted.
// 3269  *
// 3270  * @param   bdbGCB_FilterNwkDesc - application callback
// 3271  *
// 3272  * @return  none
// 3273  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3274 void bdb_RegisterForFilterNwkDescCB(bdbGCB_FilterNwkDesc_t bdbGCB_FilterNwkDesc)
bdb_RegisterForFilterNwkDescCB:
          CFI Block cfiBlock49 Using cfiCommon0
          CFI Function bdb_RegisterForFilterNwkDescCB
        CODE
// 3275 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3276   if(bdbGCB_FilterNwkDesc)
        MOV       A,R2
        ORL       A,R3
        JZ        ??bdb_RegisterForFilterNwkDescCB_0
// 3277   {
// 3278     pfnFilterNwkDesc = bdbGCB_FilterNwkDesc;
        MOV       DPTR,#pfnFilterNwkDesc
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 3279   }
// 3280 }
??bdb_RegisterForFilterNwkDescCB_0:
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock49
// 3281 
// 3282 
// 3283 /*********************************************************************
// 3284  * @fn          bdb_CBKETCLinkKeyExchangeAttempt
// 3285  *
// 3286  * @brief       Tell BDB module the result of the TC link key exchange, to try
// 3287  *              the default process or to keep going with the joining process.
// 3288  *
// 3289  * @param       didSuccess - TRUE if the process was succes, False otherwise
// 3290  *
// 3291  * @return      unprocessed events
// 3292  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3293 void bdb_CBKETCLinkKeyExchangeAttempt(bool didSuccess)
bdb_CBKETCLinkKeyExchangeAttempt:
          CFI Block cfiBlock50 Using cfiCommon0
          CFI Function bdb_CBKETCLinkKeyExchangeAttempt
        CODE
// 3294 {
        FUNCALL bdb_CBKETCLinkKeyExchangeAttempt, bdb_setNodeJoinLinkKeyType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_CBKETCLinkKeyExchangeAttempt, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_CBKETCLinkKeyExchangeAttempt, bdb_tcLinkKeyExchangeAttempt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 3295   if(didSuccess)
        MOV       A,R6
        JZ        ??bdb_CBKETCLinkKeyExchangeAttempt_0
// 3296   {
// 3297     bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
        ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
        MOV       R1,#0x0
        LCALL     `??bdb_setNodeJoinLinkKeyType::?relay`; Banked call to: bdb_setNodeJoinLinkKeyType
// 3298     bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x1
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
        SJMP      ??bdb_CBKETCLinkKeyExchangeAttempt_1
// 3299   }
// 3300   else
// 3301   {
// 3302     bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_APS_KEY;
??bdb_CBKETCLinkKeyExchangeAttempt_0:
        MOV       DPTR,#bdbAttributes + 18
        MOV       A,#0x0
        MOVX      @DPTR,A
// 3303     //We are going back one state to try it again
// 3304     bdbCommissioningProcedureState.bdbTCExchangeState -= BDB_TC_EXCHANGE_NEXT_STATE;
        MOV       DPTR,#bdbCommissioningProcedureState + 1
        MOVX      A,@DPTR
        ADD       A,#-0x1
        MOVX      @DPTR,A
// 3305     bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_STACK_VERSION);
        ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
        MOV       R2,#0x1
        MOV       R1,#0x1
        LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
// 3306   }
// 3307 
// 3308 }
??bdb_CBKETCLinkKeyExchangeAttempt_1:
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock50
// 3309 #endif
// 3310 
// 3311 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
// 3312 
// 3313 /*********************************************************************
// 3314  * @fn      gp_ChangeChannelReq
// 3315  *
// 3316  * @brief   Callback function to notify the BDB about a GP commissioning 
// 3317  * request that will change the current channel for at most 
// 3318  * gpBirectionalCommissioningChangeChannelTimeout ms
// 3319  *
// 3320  * @param   channel - Channel in which the commissioning will take place
// 3321  *
// 3322  * @return  TRUE to allow change channel, FALSE to do not allow
// 3323  */
// 3324 static uint8 gp_ChangeChannelReq(void)
// 3325 {
// 3326   uint8 allowChangeChannel = TRUE;
// 3327   
// 3328   //Do not allow changes of channel if any process is in place
// 3329   if(bdbAttributes.bdbCommissioningMode)
// 3330   {
// 3331     allowChangeChannel = FALSE;
// 3332   }
// 3333   
// 3334   //Check application state to decide if allow change channel or not
// 3335   
// 3336   return allowChangeChannel;
// 3337 }
// 3338 
// 3339 
// 3340 /*********************************************************************
// 3341  * @fn          gp_CBInit
// 3342  *
// 3343  * @brief       Register the callbacks for GP endpoint
// 3344  *
// 3345  * @param       none
// 3346  *
// 3347  * @return      none
// 3348  */
// 3349 void gp_CBInit(void)
// 3350 {
// 3351   GP_DataCnfGCB = GP_DataCnf;
// 3352   GP_endpointInitGCB = gp_endpointInit;  
// 3353   GP_expireDuplicateFilteringGCB = gp_expireDuplicateFiltering;
// 3354   GP_stopCommissioningModeGCB = gp_stopCommissioningMode;
// 3355   GP_returnOperationalChannelGCB = gp_returnOperationalChannel;
// 3356   GP_DataIndGCB = GP_DataInd;
// 3357   GP_SecReqGCB = GP_SecReq;   
// 3358   GP_CheckAnnouncedDeviceGCB = gp_CheckAnnouncedDevice;
// 3359     
// 3360   GP_aliasConflictAnnce = &aliasConflictAnnce;
// 3361   
// 3362   GP_endpointInitGCB();
// 3363 }
// 3364 
// 3365 #endif
// 3366 
// 3367 /*********************************************************************
// 3368 *********************************************************************/
// 3369 
// 3370 
// 3371 /******************************************************************************
// 3372  * @fn          bdb_GenerateInstallCodeCRC
// 3373  *
// 3374  * @brief       Creates a CRC for the install code passed.
// 3375  *
// 3376  * @param       installCode - install code from which CRC will be generated
// 3377  *
// 3378  * @return      CRC
// 3379  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3380 uint16 bdb_GenerateInstallCodeCRC(uint8 *installCode)
bdb_GenerateInstallCodeCRC:
          CFI Block cfiBlock51 Using cfiCommon0
          CFI Function bdb_GenerateInstallCodeCRC
        CODE
// 3381 {
        FUNCALL bdb_GenerateInstallCodeCRC, bdb_calculateCCITT_CRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 3382   uint16 CRC;
// 3383   
// 3384   bdb_calculateCCITT_CRC(installCode, INSTALL_CODE_LEN, &CRC);
        ; Setup parameters for call to function bdb_calculateCCITT_CRC
        MOV       DPTR,#__Constant_10
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_calculateCCITT_CRC::?relay`; Banked call to: bdb_calculateCCITT_CRC
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 3385 
// 3386   return CRC;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
// 3387 }
          CFI EndBlock cfiBlock51
// 3388 
// 3389 /******************************************************************************
// 3390  * @fn          bdb_calculateCCITT_CRC
// 3391  *
// 3392  * @brief       Creates a CRC for the install code passed.
// 3393  *
// 3394  * @param       Mb - install code from which CRC will be generated
// 3395  * @param       msglen - install code length
// 3396  * @param       crc - 
// 3397  *
// 3398  * @return      none
// 3399  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3400 void bdb_calculateCCITT_CRC (uint8 *Mb, uint32 msglen, uint16 *crc)
bdb_calculateCCITT_CRC:
          CFI Block cfiBlock52 Using cfiCommon0
          CFI Function bdb_calculateCCITT_CRC
        CODE
// 3401 {
        FUNCALL bdb_calculateCCITT_CRC, bdb_crcInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_calculateCCITT_CRC, bdb_crcBitByBitFast
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV       A,#-0x4
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
// 3402   uint16 crcinit_direct; 
// 3403   uint16 crcinit_nondirect;
// 3404   bdb_crcInit(crc, &crcinit_direct, &crcinit_nondirect);
        ; Setup parameters for call to function bdb_crcInit
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??bdb_crcInit::?relay`; Banked call to: bdb_crcInit
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
// 3405   *crc = bdb_crcBitByBitFast(Mb, msglen, crcinit_direct, crcinit_nondirect);
        ; Setup parameters for call to function bdb_crcBitByBitFast
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_crcBitByBitFast::?relay`; Banked call to: bdb_crcBitByBitFast
        MOV       A,#0x6
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 3406 }
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock52
// 3407 
// 3408 
// 3409 /******************************************************************************
// 3410  * @fn          bdb_crcInit
// 3411  *
// 3412  * @brief       Initialize CRC calculation
// 3413  *
// 3414  * @param       crc - 
// 3415  * @param       crcinit_direct -
// 3416  * @param       crcinit_nondirect - 
// 3417  *
// 3418  * @return      none
// 3419  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3420 void bdb_crcInit(uint16 *crc, uint16 *crcinit_direct, uint16 *crcinit_nondirect)
bdb_crcInit:
          CFI Block cfiBlock53 Using cfiCommon0
          CFI Function bdb_crcInit
        CODE
// 3421 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        MOV       A,#-0xd
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
// 3422 
// 3423   uint16 i;
// 3424   uint16 bit;
// 3425 
// 3426   *crcinit_direct = CRC_INIT;
        MOV       DPL,R4
        MOV       DPH,R5
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 3427   *crc = CRC_INIT;
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 3428   for (i=0; i<CRC_ORDER; i++) 
        MOV       ?V0,#0x0
        MOV       ?V1,#0x0
??bdb_crcInit_0:
        CLR       C
        MOV       A,?V0
        SUBB      A,#0x10
        MOV       A,?V1
        SUBB      A,#0x0
        JNC       ??bdb_crcInit_1
// 3429   {
// 3430     bit = *crc & 1;
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ANL       A,#0x1
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,#0x0
        MOV       R7,A
        MOV       ?V2,R6
        MOV       ?V3,R7
// 3431     if (bit) *crc^= CRC_POLYNOM;
        MOV       A,?V2
        ORL       A,?V3
        JZ        ??bdb_crcInit_2
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        XRL       A,#0x21
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x10
        MOVX      @DPTR,A
// 3432     *crc >>= 1;
??bdb_crcInit_2:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        MOV       A,R7
        CLR       C
        RRC       A
        MOV       R7,A
        MOV       A,R6
        RRC       A
        MOV       R6,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
// 3433     if (bit) *crc|= CRC_HIGHBIT;
        MOV       A,?V2
        ORL       A,?V3
        JZ        ??bdb_crcInit_3
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ORL       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        ORL       A,#0x80
        MOVX      @DPTR,A
// 3434   }	
??bdb_crcInit_3:
        INC       ?V0
        MOV       A,?V0
        JNZ       ??bdb_crcInit_0
        INC       ?V1
        SJMP      ??bdb_crcInit_0
// 3435   *crcinit_nondirect = *crc;
??bdb_crcInit_1:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
// 3436 
// 3437 }
        MOV       R7,#0x5
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock53
// 3438 
// 3439 
// 3440 /******************************************************************************
// 3441  * @fn          bdb_crcReflect
// 3442  *
// 3443  * @brief       
// 3444  *
// 3445  * @param       crc - 
// 3446  * @param       bitnum -
// 3447  *
// 3448  * @return      none
// 3449  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3450 uint16 bdb_crcReflect (uint16 crc, uint16 bitnum)
bdb_crcReflect:
          CFI Block cfiBlock54 Using cfiCommon0
          CFI Function bdb_crcReflect
        CODE
// 3451 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       ?V2,R2
        MOV       ?V3,R3
// 3452 
// 3453   // reflects the lower 'bitnum' bits of 'crc'
// 3454 
// 3455   uint16 i, j=1, crcout=0;
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R2,#0x0
        MOV       R3,#0x0
// 3456 
// 3457   for (i=(uint16)1<<(bitnum-1); i; i>>=1) {
        MOV       ?V4,#0x1
        MOV       ?V5,#0x0
        MOV       A,R4
        ADD       A,#-0x1
        MOV       R0,#?V4
        LCALL     ?S_SHL
        MOV       R6,?V4
        MOV       R7,?V5
??bdb_crcReflect_0:
        MOV       A,R6
        ORL       A,R7
        JZ        ??bdb_crcReflect_1
// 3458     if (crc & i) crcout|=j;
        MOV       A,?V2
        ANL       A,R6
        MOV       R0,A
        MOV       A,?V3
        ANL       A,R7
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_crcReflect_2
        MOV       A,?V0
        ORL       A,R2
        MOV       R2,A
        MOV       A,?V1
        ORL       A,R3
        MOV       R3,A
// 3459     j<<= 1;
??bdb_crcReflect_2:
        MOV       A,?V0
        ADD       A,?V0
        MOV       ?V0,A
        MOV       A,?V1
        RLC       A
        MOV       ?V1,A
// 3460   }
        MOV       A,R7
        CLR       C
        RRC       A
        MOV       R7,A
        MOV       A,R6
        RRC       A
        MOV       R6,A
        SJMP      ??bdb_crcReflect_0
// 3461   return (crcout);
??bdb_crcReflect_1:
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
// 3462 }
          CFI EndBlock cfiBlock54
// 3463 
// 3464 
// 3465 /******************************************************************************
// 3466  * @fn          bdb_crcBitByBitFast
// 3467  *
// 3468  * @brief       
// 3469  *
// 3470  * @param       p - 
// 3471  * @param       len -
// 3472  * @param       crcinit_direct - 
// 3473  * @param       crcinit_nondirect -
// 3474  *
// 3475  * @return      crc
// 3476  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3477 uint16 bdb_crcBitByBitFast(uint8 * p, uint32 len, uint16 crcinit_direct, uint16 crcinit_nondirect) 
bdb_crcBitByBitFast:
          CFI Block cfiBlock55 Using cfiCommon0
          CFI Function bdb_crcBitByBitFast
        CODE
// 3478 {
        FUNCALL bdb_crcBitByBitFast, bdb_crcReflect
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_crcBitByBitFast, bdb_crcReflect
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV       A,#-0x18
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 4
        MOV       A,#-0x4
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
        MOV       ?V14,R2
        MOV       ?V15,R3
        MOV       A,#0x1c
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,#?V8
        LCALL     ?L_MOV_X
// 3479   // fast bit by bit algorithm without augmented zero bytes.
// 3480   // does not use lookup table, suited for polynom orders between 1...32.
// 3481 
// 3482   uint16 i, j, c, bit;
// 3483   uint16 crc = crcinit_direct;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
// 3484 
// 3485   for (i=0; i<len; i++) {
        MOV       ?V2,#0x0
        MOV       ?V3,#0x0
??bdb_crcBitByBitFast_0:
        MOV       ?V4,?V2
        MOV       ?V5,?V3
        CLR       A
        MOV       ?V6,A
        MOV       ?V7,A
        MOV       R0,#?V8
        MOV       R1,#?V4
        LCALL     ?UL_GT
        JC        $+5
        LJMP      ??bdb_crcBitByBitFast_1 & 0xFFFF
// 3486 
// 3487     c = (uint16)*p++;
        MOV       DPL,?V14
        MOV       DPH,?V15
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       R1,#0x0
        MOV       ?V12,R0
        MOV       ?V13,R1
        MOV       DPL,?V14
        MOV       DPH,?V15
        INC       DPTR
        MOV       ?V14,DPL
        MOV       ?V15,DPH
// 3488     c = bdb_crcReflect(c, 8);
        ; Setup parameters for call to function bdb_crcReflect
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R2,?V12
        MOV       R3,?V13
        LCALL     `??bdb_crcReflect::?relay`; Banked call to: bdb_crcReflect
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       ?V12,?V4
        MOV       ?V13,?V5
// 3489 
// 3490     for (j=0x80; j; j>>=1) {
        MOV       ?V0,#-0x80
        MOV       ?V1,#0x0
??bdb_crcBitByBitFast_2:
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??bdb_crcBitByBitFast_3
// 3491 
// 3492       bit = crc & CRC_HIGHBIT;
        MOV       A,R6
        ANL       A,#0x0
        MOV       R0,A
        MOV       A,R7
        ANL       A,#0x80
        MOV       R1,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 3493       crc<<= 1;
        MOV       A,R6
        ADD       A,R6
        MOV       R6,A
        MOV       A,R7
        RLC       A
        MOV       R7,A
// 3494       if (c & j) bit^= CRC_HIGHBIT;
        MOV       A,?V12
        ANL       A,?V0
        MOV       R0,A
        MOV       A,?V13
        ANL       A,?V1
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_crcBitByBitFast_4
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        XRL       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x80
        MOVX      @DPTR,A
// 3495       if (bit) crc^= CRC_POLYNOM;
??bdb_crcBitByBitFast_4:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_crcBitByBitFast_5
        MOV       A,#0x21
        XRL       A,R6
        MOV       R6,A
        MOV       A,#0x10
        XRL       A,R7
        MOV       R7,A
// 3496     }
??bdb_crcBitByBitFast_5:
        MOV       A,?V1
        CLR       C
        RRC       A
        MOV       ?V1,A
        MOV       A,?V0
        RRC       A
        MOV       ?V0,A
        SJMP      ??bdb_crcBitByBitFast_2
// 3497   }	
??bdb_crcBitByBitFast_3:
        INC       ?V2
        MOV       A,?V2
        JNZ       ??bdb_crcBitByBitFast_6
        INC       ?V3
??bdb_crcBitByBitFast_6:
        LJMP      ??bdb_crcBitByBitFast_0 & 0xFFFF
// 3498 
// 3499   crc=bdb_crcReflect(crc, CRC_ORDER);
??bdb_crcBitByBitFast_1:
        ; Setup parameters for call to function bdb_crcReflect
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_crcReflect::?relay`; Banked call to: bdb_crcReflect
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R6,?V4
        MOV       R7,?V5
// 3500   crc^= CRC_XOR;
        MOV       A,#-0x1
        XRL       A,R6
        MOV       R6,A
        MOV       A,#-0x1
        XRL       A,R7
        MOV       R7,A
// 3501 
// 3502   return(crc);
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R7,#0x10
        LJMP      ?BANKED_LEAVE_XDATA
// 3503 }
          CFI EndBlock cfiBlock55

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for bdbAttributes>`:
        DATA32
        DD 134213632
        DD 2048
        DATA16
        DW 65535
        DATA8
        DB 0
        DB 0
        DB 13
        DB 4
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for vDoPrimaryScan>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgBdbInstallCodeCRC>`:
        DATA8
        DB 131
        DB 254
        DB 211
        DB 64
        DB 122
        DB 147
        DB 151
        DB 35
        DB 165
        DB 198
        DB 57
        DB 178
        DB 105
        DB 22
        DB 213
        DB 5
        DB 195
        DB 181

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_32:
        DD 50

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1388:
        DD 5000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_c8:
        DD 200

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3a98:
        DD 15000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_bb8:
        DD 3000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_10:
        DD 16

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RegisterSimpleDescriptor::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RegisterSimpleDescriptor

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ZclIdentifyCmdInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ZclIdentifyCmdInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setActiveCentralizedLinkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setActiveCentralizedLinkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_addInstallCode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_addInstallCode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_StartCommissioning::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_StartCommissioning

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_NotifyCommissioningModeStart::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_NotifyCommissioningModeStart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setNodeJoinLinkKeyType::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setNodeJoinLinkKeyType

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setFN::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setFN

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_resetLocalAction::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_resetLocalAction

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_parentLost::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_parentLost

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_NetworkRestoredResumeState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_NetworkRestoredResumeState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ZedAttemptRecoverNwk::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ZedAttemptRecoverNwk

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_reportCommissioningState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_reportCommissioningState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_nwkFormationAttempt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_nwkFormationAttempt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_isDeviceNonFactoryNew::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_isDeviceNonFactoryNew

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_doTrustCenterRequireKeyExchange::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_doTrustCenterRequireKeyExchange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_rejoinNwk::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_rejoinNwk

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_nwkDiscoveryAttempt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_nwkDiscoveryAttempt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_filterNwkDisc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_filterNwkDisc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_tryNwkAssoc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_tryNwkAssoc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_nwkAssocAttemt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_nwkAssocAttemt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_nwkDescFree::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_nwkDescFree

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_joinProcess::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_joinProcess

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setChannelAttribute::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setChannelAttribute

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setChannel::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setChannel

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_nwkJoiningFormation::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_nwkJoiningFormation

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_tcLinkKeyExchangeAttempt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_tcLinkKeyExchangeAttempt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_requestVerifyTCLinkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_requestVerifyTCLinkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_requestTCLinkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_requestTCLinkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_requestTCStackVersion::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_requestTCStackVersion

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_nwkSteeringDeviceOnNwk::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_nwkSteeringDeviceOnNwk

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_startResumeCommissioningProcess::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_startResumeCommissioningProcess

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_processZDOMgs::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_processZDOMgs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ProcessNodeDescRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ProcessNodeDescRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_touchlinkSendFNReset::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_touchlinkSendFNReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setNodeIsOnANetwork::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setNodeIsOnANetwork

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setCommissioningGroupID::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setCommissioningGroupID

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_CreateRespondentList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_CreateRespondentList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_AddRespondentNode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_AddRespondentNode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_zclRespondentListClean::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_zclRespondentListClean

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ProcessOSALMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ProcessOSALMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_processTimeout::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_processTimeout

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_SendMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_SendMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RegisterCommissioningStatusCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RegisterCommissioningStatusCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ClearNetworkParams::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ClearNetworkParams

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_getZCLFrameCounter::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_getZCLFrameCounter

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RegisterCBKETCLinkKeyExchangeCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RegisterCBKETCLinkKeyExchangeCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RegisterForFilterNwkDescCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RegisterForFilterNwkDescCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_CBKETCLinkKeyExchangeAttempt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_CBKETCLinkKeyExchangeAttempt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_GenerateInstallCodeCRC::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_GenerateInstallCodeCRC

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_calculateCCITT_CRC::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_calculateCCITT_CRC

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_crcInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_crcInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_crcReflect::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_crcReflect

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_crcBitByBitFast::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_crcBitByBitFast

        END
// 3504 
// 3505 
// 
// 9 163 bytes in segment BANKED_CODE
//   336 bytes in segment BANK_RELAYS
//    38 bytes in segment XDATA_I
//    38 bytes in segment XDATA_ID
//    32 bytes in segment XDATA_ROM_C
//    29 bytes in segment XDATA_Z
// 
//   374 bytes of CODE     memory
//     0 bytes of CONST    memory (+ 32 bytes shared)
// 9 163 bytes of HUGECODE memory
//    67 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
