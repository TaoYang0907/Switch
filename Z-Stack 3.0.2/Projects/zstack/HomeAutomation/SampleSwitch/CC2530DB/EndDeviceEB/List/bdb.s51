///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              30/Jul/2020  16:03:35
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  D:\AA\Z-Stack 3.0.2\Components\stack\bdb\bdb.c
//    Command line       =  
//        -f C:\Users\sunli\AppData\Local\Temp\EWF38E.tmp ("D:\AA\Z-Stack
//        3.0.2\Components\stack\bdb\bdb.c" -D SECURE=1 -D TC_LINKKEY_JOIN -D
//        NV_INIT -D NV_RESTORE -D xPOWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1
//        -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
//        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D
//        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
//        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_GROUPS -D
//        BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
//        -lA "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
//        "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -On --require_prototypes --no_cse --no_unroll --no_inline
//        --no_code_motion --no_tbaa --no_cross_call)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        D:\AA\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\bdb.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME bdb

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?V14
        EXTERN ?V15
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?UL_GT
        EXTERN ?US_SHR
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?XLOAD_R0123
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN ?XSTORE_R0123
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??bdb_AddRespondentNode::?relay`
        FUNCTION `??bdb_AddRespondentNode::?relay`,0203H
        PUBLIC `??bdb_CBKETCLinkKeyExchangeAttempt::?relay`
        FUNCTION `??bdb_CBKETCLinkKeyExchangeAttempt::?relay`,0203H
        PUBLIC `??bdb_ClearNetworkParams::?relay`
        FUNCTION `??bdb_ClearNetworkParams::?relay`,0203H
        PUBLIC `??bdb_CreateRespondentList::?relay`
        FUNCTION `??bdb_CreateRespondentList::?relay`,0203H
        PUBLIC `??bdb_GenerateInstallCodeCRC::?relay`
        FUNCTION `??bdb_GenerateInstallCodeCRC::?relay`,0203H
        PUBLIC `??bdb_Init::?relay`
        FUNCTION `??bdb_Init::?relay`,0203H
        PUBLIC `??bdb_NetworkRestoredResumeState::?relay`
        FUNCTION `??bdb_NetworkRestoredResumeState::?relay`,0203H
        PUBLIC `??bdb_NotifyCommissioningModeStart::?relay`
        FUNCTION `??bdb_NotifyCommissioningModeStart::?relay`,0203H
        PUBLIC `??bdb_ProcessNodeDescRsp::?relay`
        FUNCTION `??bdb_ProcessNodeDescRsp::?relay`,0203H
        FUNCTION `??bdb_ProcessOSALMsg::?relay`,0203H
        PUBLIC `??bdb_RegisterCBKETCLinkKeyExchangeCB::?relay`
        FUNCTION `??bdb_RegisterCBKETCLinkKeyExchangeCB::?relay`,0203H
        PUBLIC `??bdb_RegisterCommissioningStatusCB::?relay`
        FUNCTION `??bdb_RegisterCommissioningStatusCB::?relay`,0203H
        PUBLIC `??bdb_RegisterForFilterNwkDescCB::?relay`
        FUNCTION `??bdb_RegisterForFilterNwkDescCB::?relay`,0203H
        PUBLIC `??bdb_RegisterSimpleDescriptor::?relay`
        FUNCTION `??bdb_RegisterSimpleDescriptor::?relay`,0203H
        PUBLIC `??bdb_SendMsg::?relay`
        FUNCTION `??bdb_SendMsg::?relay`,0203H
        PUBLIC `??bdb_StartCommissioning::?relay`
        FUNCTION `??bdb_StartCommissioning::?relay`,0203H
        PUBLIC `??bdb_ZclIdentifyCmdInd::?relay`
        FUNCTION `??bdb_ZclIdentifyCmdInd::?relay`,0203H
        PUBLIC `??bdb_ZedAttemptRecoverNwk::?relay`
        FUNCTION `??bdb_ZedAttemptRecoverNwk::?relay`,0203H
        PUBLIC `??bdb_addInstallCode::?relay`
        FUNCTION `??bdb_addInstallCode::?relay`,0203H
        PUBLIC `??bdb_calculateCCITT_CRC::?relay`
        FUNCTION `??bdb_calculateCCITT_CRC::?relay`,0203H
        PUBLIC `??bdb_crcBitByBitFast::?relay`
        FUNCTION `??bdb_crcBitByBitFast::?relay`,0203H
        PUBLIC `??bdb_crcInit::?relay`
        FUNCTION `??bdb_crcInit::?relay`,0203H
        PUBLIC `??bdb_crcReflect::?relay`
        FUNCTION `??bdb_crcReflect::?relay`,0203H
        PUBLIC `??bdb_doTrustCenterRequireKeyExchange::?relay`
        FUNCTION `??bdb_doTrustCenterRequireKeyExchange::?relay`,0203H
        PUBLIC `??bdb_event_loop::?relay`
        FUNCTION `??bdb_event_loop::?relay`,0203H
        PUBLIC `??bdb_filterNwkDisc::?relay`
        FUNCTION `??bdb_filterNwkDisc::?relay`,0203H
        PUBLIC `??bdb_getZCLFrameCounter::?relay`
        FUNCTION `??bdb_getZCLFrameCounter::?relay`,0203H
        PUBLIC `??bdb_isDeviceNonFactoryNew::?relay`
        FUNCTION `??bdb_isDeviceNonFactoryNew::?relay`,0203H
        PUBLIC `??bdb_joinProcess::?relay`
        FUNCTION `??bdb_joinProcess::?relay`,0203H
        PUBLIC `??bdb_nwkAssocAttemt::?relay`
        FUNCTION `??bdb_nwkAssocAttemt::?relay`,0203H
        PUBLIC `??bdb_nwkDescFree::?relay`
        FUNCTION `??bdb_nwkDescFree::?relay`,0203H
        PUBLIC `??bdb_nwkDiscoveryAttempt::?relay`
        FUNCTION `??bdb_nwkDiscoveryAttempt::?relay`,0203H
        PUBLIC `??bdb_nwkFormationAttempt::?relay`
        FUNCTION `??bdb_nwkFormationAttempt::?relay`,0203H
        FUNCTION `??bdb_nwkJoiningFormation::?relay`,0203H
        FUNCTION `??bdb_nwkSteeringDeviceOnNwk::?relay`,0203H
        PUBLIC `??bdb_parentLost::?relay`
        FUNCTION `??bdb_parentLost::?relay`,0203H
        FUNCTION `??bdb_processTimeout::?relay`,0203H
        FUNCTION `??bdb_processZDOMgs::?relay`,0203H
        PUBLIC `??bdb_rejoinNwk::?relay`
        FUNCTION `??bdb_rejoinNwk::?relay`,0203H
        PUBLIC `??bdb_reportCommissioningState::?relay`
        FUNCTION `??bdb_reportCommissioningState::?relay`,0203H
        FUNCTION `??bdb_requestTCLinkKey::?relay`,0203H
        FUNCTION `??bdb_requestTCStackVersion::?relay`,0203H
        FUNCTION `??bdb_requestVerifyTCLinkKey::?relay`,0203H
        PUBLIC `??bdb_resetLocalAction::?relay`
        FUNCTION `??bdb_resetLocalAction::?relay`,0203H
        PUBLIC `??bdb_setActiveCentralizedLinkKey::?relay`
        FUNCTION `??bdb_setActiveCentralizedLinkKey::?relay`,0203H
        PUBLIC `??bdb_setChannel::?relay`
        FUNCTION `??bdb_setChannel::?relay`,0203H
        PUBLIC `??bdb_setChannelAttribute::?relay`
        FUNCTION `??bdb_setChannelAttribute::?relay`,0203H
        PUBLIC `??bdb_setCommissioningGroupID::?relay`
        FUNCTION `??bdb_setCommissioningGroupID::?relay`,0203H
        PUBLIC `??bdb_setFN::?relay`
        FUNCTION `??bdb_setFN::?relay`,0203H
        PUBLIC `??bdb_setNodeIsOnANetwork::?relay`
        FUNCTION `??bdb_setNodeIsOnANetwork::?relay`,0203H
        PUBLIC `??bdb_setNodeJoinLinkKeyType::?relay`
        FUNCTION `??bdb_setNodeJoinLinkKeyType::?relay`,0203H
        FUNCTION `??bdb_startResumeCommissioningProcess::?relay`,0203H
        PUBLIC `??bdb_tcLinkKeyExchangeAttempt::?relay`
        FUNCTION `??bdb_tcLinkKeyExchangeAttempt::?relay`,0203H
        PUBLIC `??bdb_touchlinkSendFNReset::?relay`
        FUNCTION `??bdb_touchlinkSendFNReset::?relay`,0203H
        FUNCTION `??bdb_tryNwkAssoc::?relay`,0203H
        PUBLIC `??bdb_zclRespondentListClean::?relay`
        FUNCTION `??bdb_zclRespondentListClean::?relay`,0203H
        PUBWEAK __Constant_0
        PUBWEAK __Constant_10
        PUBWEAK __Constant_1388
        PUBWEAK __Constant_32
        PUBWEAK __Constant_3a98
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_bb8
        PUBWEAK __Constant_c8
        PUBLIC bdbAttributes
        PUBLIC bdbCommissioningProcedureState
        PUBLIC bdb_AddRespondentNode
        FUNCTION bdb_AddRespondentNode,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bdb_CBKETCLinkKeyExchangeAttempt
        FUNCTION bdb_CBKETCLinkKeyExchangeAttempt,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bdb_ClearNetworkParams
        FUNCTION bdb_ClearNetworkParams,021203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_CreateRespondentList
        FUNCTION bdb_CreateRespondentList,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bdb_CurrEpDescriptorList
        PUBLIC bdb_FB_InitiatorCurrentCyclesNumber
        PUBLIC bdb_GenerateInstallCodeCRC
        FUNCTION bdb_GenerateInstallCodeCRC,021203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC bdb_HeadEpDescriptorList
        PUBLIC bdb_Init
        FUNCTION bdb_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bdb_NetworkRestoredResumeState
        FUNCTION bdb_NetworkRestoredResumeState,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bdb_NotifyCommissioningModeStart
        FUNCTION bdb_NotifyCommissioningModeStart,0a1203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC bdb_ProcessNodeDescRsp
        FUNCTION bdb_ProcessNodeDescRsp,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 50, STACK
        FUNCTION bdb_ProcessOSALMsg,0a1203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC bdb_RegisterCBKETCLinkKeyExchangeCB
        FUNCTION bdb_RegisterCBKETCLinkKeyExchangeCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_RegisterCommissioningStatusCB
        FUNCTION bdb_RegisterCommissioningStatusCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_RegisterForFilterNwkDescCB
        FUNCTION bdb_RegisterForFilterNwkDescCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_RegisterSimpleDescriptor
        FUNCTION bdb_RegisterSimpleDescriptor,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bdb_SendMsg
        FUNCTION bdb_SendMsg,0a1203H
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC bdb_StartCommissioning
        FUNCTION bdb_StartCommissioning,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        PUBLIC bdb_TaskID
        PUBLIC bdb_ZclIdentifyCmdInd
        FUNCTION bdb_ZclIdentifyCmdInd,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC bdb_ZclTransactionSequenceNumber
        PUBLIC bdb_ZedAttemptRecoverNwk
        FUNCTION bdb_ZedAttemptRecoverNwk,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_addInstallCode
        FUNCTION bdb_addInstallCode,0a1203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 34, STACK
        PUBLIC bdb_calculateCCITT_CRC
        FUNCTION bdb_calculateCCITT_CRC,0a1203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 26, STACK
        PUBLIC bdb_crcBitByBitFast
        FUNCTION bdb_crcBitByBitFast,0a1203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 28, STACK
        PUBLIC bdb_crcInit
        FUNCTION bdb_crcInit,080203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bdb_crcReflect
        FUNCTION bdb_crcReflect,080203H
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bdb_doTrustCenterRequireKeyExchange
        FUNCTION bdb_doTrustCenterRequireKeyExchange,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC bdb_event_loop
        FUNCTION bdb_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC bdb_filterNwkDisc
        FUNCTION bdb_filterNwkDisc,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bdb_getZCLFrameCounter
        FUNCTION bdb_getZCLFrameCounter,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_initialization
        PUBLIC bdb_isDeviceNonFactoryNew
        FUNCTION bdb_isDeviceNonFactoryNew,0203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_joinProcess
        FUNCTION bdb_joinProcess,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC bdb_nwkAssocAttemt
        FUNCTION bdb_nwkAssocAttemt,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bdb_nwkDescFree
        FUNCTION bdb_nwkDescFree,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bdb_nwkDiscoveryAttempt
        FUNCTION bdb_nwkDiscoveryAttempt,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bdb_nwkFormationAttempt
        FUNCTION bdb_nwkFormationAttempt,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION bdb_nwkJoiningFormation,021203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION bdb_nwkSteeringDeviceOnNwk,021203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bdb_parentLost
        FUNCTION bdb_parentLost,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        FUNCTION bdb_processTimeout,021203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION bdb_processZDOMgs,0a1203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bdb_rejoinNwk
        FUNCTION bdb_rejoinNwk,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC bdb_reportCommissioningState
        FUNCTION bdb_reportCommissioningState,0a1203H
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        FUNCTION bdb_requestTCLinkKey,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 17, STACK
        FUNCTION bdb_requestTCStackVersion,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        FUNCTION bdb_requestVerifyTCLinkKey,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC bdb_resetLocalAction
        FUNCTION bdb_resetLocalAction,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 5, STACK
        PUBLIC bdb_setActiveCentralizedLinkKey
        FUNCTION bdb_setActiveCentralizedLinkKey,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC bdb_setChannel
        FUNCTION bdb_setChannel,0a1203H
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        PUBLIC bdb_setChannelAttribute
        FUNCTION bdb_setChannelAttribute,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bdb_setCommissioningGroupID
        FUNCTION bdb_setCommissioningGroupID,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_setFN
        FUNCTION bdb_setFN,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bdb_setNodeIsOnANetwork
        FUNCTION bdb_setNodeIsOnANetwork,0a1203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bdb_setNodeJoinLinkKeyType
        FUNCTION bdb_setNodeJoinLinkKeyType,0203H
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION bdb_startResumeCommissioningProcess,0a1203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 30, STACK
        PUBLIC bdb_tcLinkKeyExchangeAttempt
        FUNCTION bdb_tcLinkKeyExchangeAttempt,0a1203H
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC bdb_touchlinkSendFNReset
        FUNCTION bdb_touchlinkSendFNReset,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION bdb_tryNwkAssoc,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bdb_zclRespondentListClean
        FUNCTION bdb_zclRespondentListClean,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC pRespondentCurr
        PUBLIC pRespondentHead
        PUBLIC pRespondentNext
        PUBLIC touchLinkTargetEnabled
        PUBLIC vDoPrimaryScan
        PUBLIC zgBdbInstallCodeCRC
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
APSME_AddTCLinkKey  SYMBOL "APSME_AddTCLinkKey"
`??APSME_AddTCLinkKey::?relay` SYMBOL "?relay", APSME_AddTCLinkKey
APSME_GetRequest    SYMBOL "APSME_GetRequest"
`??APSME_GetRequest::?relay` SYMBOL "?relay", APSME_GetRequest
APSME_IsDistributedSecurity SYMBOL "APSME_IsDistributedSecurity"
`??APSME_IsDistributedSecurity::?relay` SYMBOL "?relay", APSME_IsDistributedSecurity
APSME_RequestKeyReq SYMBOL "APSME_RequestKeyReq"
`??APSME_RequestKeyReq::?relay` SYMBOL "?relay", APSME_RequestKeyReq
APSME_SetDefaultKey SYMBOL "APSME_SetDefaultKey"
`??APSME_SetDefaultKey::?relay` SYMBOL "?relay", APSME_SetDefaultKey
APSME_VerifyKeyReq  SYMBOL "APSME_VerifyKeyReq"
`??APSME_VerifyKeyReq::?relay` SYMBOL "?relay", APSME_VerifyKeyReq
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_JoinRequest    SYMBOL "NLME_JoinRequest"
`??NLME_JoinRequest::?relay` SYMBOL "?relay", NLME_JoinRequest
NLME_LeaveReq       SYMBOL "NLME_LeaveReq"
`??NLME_LeaveReq::?relay` SYMBOL "?relay", NLME_LeaveReq
NLME_NwkDiscTerm    SYMBOL "NLME_NwkDiscTerm"
`??NLME_NwkDiscTerm::?relay` SYMBOL "?relay", NLME_NwkDiscTerm
NLME_OrphanStateSet SYMBOL "NLME_OrphanStateSet"
`??NLME_OrphanStateSet::?relay` SYMBOL "?relay", NLME_OrphanStateSet
NLME_ReJoinRequest  SYMBOL "NLME_ReJoinRequest"
`??NLME_ReJoinRequest::?relay` SYMBOL "?relay", NLME_ReJoinRequest
NLME_ReJoinRequestUnsecure SYMBOL "NLME_ReJoinRequestUnsecure"
`??NLME_ReJoinRequestUnsecure::?relay` SYMBOL "?relay", NLME_ReJoinRequestUnsecure
NLME_ResetRequest   SYMBOL "NLME_ResetRequest"
`??NLME_ResetRequest::?relay` SYMBOL "?relay", NLME_ResetRequest
NLME_SetPollRate    SYMBOL "NLME_SetPollRate"
`??NLME_SetPollRate::?relay` SYMBOL "?relay", NLME_SetPollRate
NLME_SetQueuedPollRate SYMBOL "NLME_SetQueuedPollRate"
`??NLME_SetQueuedPollRate::?relay` SYMBOL "?relay", NLME_SetQueuedPollRate
NLME_SetResponseRate SYMBOL "NLME_SetResponseRate"
`??NLME_SetResponseRate::?relay` SYMBOL "?relay", NLME_SetResponseRate
ZDApp_ChangeState   SYMBOL "ZDApp_ChangeState"
`??ZDApp_ChangeState::?relay` SYMBOL "?relay", ZDApp_ChangeState
ZDApp_NetworkInit   SYMBOL "ZDApp_NetworkInit"
`??ZDApp_NetworkInit::?relay` SYMBOL "?relay", ZDApp_NetworkInit
ZDApp_NodeProfileSync SYMBOL "ZDApp_NodeProfileSync"
`??ZDApp_NodeProfileSync::?relay` SYMBOL "?relay", ZDApp_NodeProfileSync
ZDApp_ResetTimerStart SYMBOL "ZDApp_ResetTimerStart"
`??ZDApp_ResetTimerStart::?relay` SYMBOL "?relay", ZDApp_ResetTimerStart
ZDApp_RestoreNwkKey SYMBOL "ZDApp_RestoreNwkKey"
`??ZDApp_RestoreNwkKey::?relay` SYMBOL "?relay", ZDApp_RestoreNwkKey
ZDApp_RestoreNwkSecMaterial SYMBOL "ZDApp_RestoreNwkSecMaterial"
`??ZDApp_RestoreNwkSecMaterial::?relay` SYMBOL "?relay", ZDApp_RestoreNwkSecMaterial
ZDOInitDeviceEx     SYMBOL "ZDOInitDeviceEx"
`??ZDOInitDeviceEx::?relay` SYMBOL "?relay", ZDOInitDeviceEx
ZDO_ParseNodeDescRsp SYMBOL "ZDO_ParseNodeDescRsp"
`??ZDO_ParseNodeDescRsp::?relay` SYMBOL "?relay", ZDO_ParseNodeDescRsp
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
`??ZDO_RegisterForZDOMsg::?relay` SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDP_MgmtPermitJoinReq SYMBOL "ZDP_MgmtPermitJoinReq"
`??ZDP_MgmtPermitJoinReq::?relay` SYMBOL "?relay", ZDP_MgmtPermitJoinReq
ZDP_NWKAddrOfInterestReq SYMBOL "ZDP_NWKAddrOfInterestReq"
`??ZDP_NWKAddrOfInterestReq::?relay` SYMBOL "?relay", ZDP_NWKAddrOfInterestReq
ZMacGetReq          SYMBOL "ZMacGetReq"
`??ZMacGetReq::?relay` SYMBOL "?relay", ZMacGetReq
ZMacSetReq          SYMBOL "ZMacSetReq"
`??ZMacSetReq::?relay` SYMBOL "?relay", ZMacSetReq
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
bdb_ProcessIEEEAddrRsp SYMBOL "bdb_ProcessIEEEAddrRsp"
`??bdb_ProcessIEEEAddrRsp::?relay` SYMBOL "?relay", bdb_ProcessIEEEAddrRsp
bdb_ProcessRespondentList SYMBOL "bdb_ProcessRespondentList"
`??bdb_ProcessRespondentList::?relay` SYMBOL "?relay", bdb_ProcessRespondentList
bdb_ProcessSimpleDesc SYMBOL "bdb_ProcessSimpleDesc"
`??bdb_ProcessSimpleDesc::?relay` SYMBOL "?relay", bdb_ProcessSimpleDesc
bdb_SendIdentifyQuery SYMBOL "bdb_SendIdentifyQuery"
`??bdb_SendIdentifyQuery::?relay` SYMBOL "?relay", bdb_SendIdentifyQuery
bdb_exitFindingBindingWStatus SYMBOL "bdb_exitFindingBindingWStatus"
`??bdb_exitFindingBindingWStatus::?relay` SYMBOL "?relay", bdb_exitFindingBindingWStatus
bdb_getRespondentRetry SYMBOL "bdb_getRespondentRetry"
`??bdb_getRespondentRetry::?relay` SYMBOL "?relay", bdb_getRespondentRetry
bdb_setEpDescListToActiveEndpoint SYMBOL "bdb_setEpDescListToActiveEndpoint"
`??bdb_setEpDescListToActiveEndpoint::?relay` SYMBOL "?relay", bdb_setEpDescListToActiveEndpoint
initiatorSelectNwkParams SYMBOL "initiatorSelectNwkParams"
`??initiatorSelectNwkParams::?relay` SYMBOL "?relay", initiatorSelectNwkParams
nwkNeighborInitTable SYMBOL "nwkNeighborInitTable"
`??nwkNeighborInitTable::?relay` SYMBOL "?relay", nwkNeighborInitTable
nwk_ExtPANIDValid   SYMBOL "nwk_ExtPANIDValid"
`??nwk_ExtPANIDValid::?relay` SYMBOL "?relay", nwk_ExtPANIDValid
nwk_desc_list_free  SYMBOL "nwk_desc_list_free"
`??nwk_desc_list_free::?relay` SYMBOL "?relay", nwk_desc_list_free
nwk_desc_list_release SYMBOL "nwk_desc_list_release"
`??nwk_desc_list_release::?relay` SYMBOL "?relay", nwk_desc_list_release
nwk_getNwkDescList  SYMBOL "nwk_getNwkDescList"
`??nwk_getNwkDescList::?relay` SYMBOL "?relay", nwk_getNwkDescList
nwk_setStateIdle    SYMBOL "nwk_setStateIdle"
`??nwk_setStateIdle::?relay` SYMBOL "?relay", nwk_setStateIdle
osal_build_uint16   SYMBOL "osal_build_uint16"
`??osal_build_uint16::?relay` SYMBOL "?relay", osal_build_uint16
osal_get_timeoutEx  SYMBOL "osal_get_timeoutEx"
`??osal_get_timeoutEx::?relay` SYMBOL "?relay", osal_get_timeoutEx
osal_isbufset       SYMBOL "osal_isbufset"
`??osal_isbufset::?relay` SYMBOL "?relay", osal_isbufset
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
sAddrExtCmp         SYMBOL "sAddrExtCmp"
`??sAddrExtCmp::?relay` SYMBOL "?relay", sAddrExtCmp
sspMMOHash          SYMBOL "sspMMOHash"
`??sspMMOHash::?relay` SYMBOL "?relay", sspMMOHash
touchLinkInitiator_InitDevice SYMBOL "touchLinkInitiator_InitDevice"
`??touchLinkInitiator_InitDevice::?relay` SYMBOL "?relay", touchLinkInitiator_InitDevice
touchLinkInitiator_ResetToFNProcedure SYMBOL "touchLinkInitiator_ResetToFNProcedure"
`??touchLinkInitiator_ResetToFNProcedure::?relay` SYMBOL "?relay", touchLinkInitiator_ResetToFNProcedure
touchLinkInitiator_StartDevDisc SYMBOL "touchLinkInitiator_StartDevDisc"
`??touchLinkInitiator_StartDevDisc::?relay` SYMBOL "?relay", touchLinkInitiator_StartDevDisc
touchLink_InitFreeRanges SYMBOL "touchLink_InitFreeRanges"
`??touchLink_InitFreeRanges::?relay` SYMBOL "?relay", touchLink_InitFreeRanges
touchLink_SetMacNwkParams SYMBOL "touchLink_SetMacNwkParams"
`??touchLink_SetMacNwkParams::?relay` SYMBOL "?relay", touchLink_SetMacNwkParams
touchLink_UpdateNV  SYMBOL "touchLink_UpdateNV"
`??touchLink_UpdateNV::?relay` SYMBOL "?relay", touchLink_UpdateNV
zclFindAttrRec      SYMBOL "zclFindAttrRec"
`??zclFindAttrRec::?relay` SYMBOL "?relay", zclFindAttrRec
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions
bdb_AddRespondentNode SYMBOL "bdb_AddRespondentNode"
`??bdb_AddRespondentNode::?relay` SYMBOL "?relay", bdb_AddRespondentNode
bdb_CBKETCLinkKeyExchangeAttempt SYMBOL "bdb_CBKETCLinkKeyExchangeAttempt"
`??bdb_CBKETCLinkKeyExchangeAttempt::?relay` SYMBOL "?relay", bdb_CBKETCLinkKeyExchangeAttempt
bdb_ClearNetworkParams SYMBOL "bdb_ClearNetworkParams"
`??bdb_ClearNetworkParams::?relay` SYMBOL "?relay", bdb_ClearNetworkParams
bdb_CreateRespondentList SYMBOL "bdb_CreateRespondentList"
`??bdb_CreateRespondentList::?relay` SYMBOL "?relay", bdb_CreateRespondentList
bdb_GenerateInstallCodeCRC SYMBOL "bdb_GenerateInstallCodeCRC"
`??bdb_GenerateInstallCodeCRC::?relay` SYMBOL "?relay", bdb_GenerateInstallCodeCRC
bdb_Init            SYMBOL "bdb_Init"
`??bdb_Init::?relay` SYMBOL "?relay", bdb_Init
bdb_NetworkRestoredResumeState SYMBOL "bdb_NetworkRestoredResumeState"
`??bdb_NetworkRestoredResumeState::?relay` SYMBOL "?relay", bdb_NetworkRestoredResumeState
bdb_NotifyCommissioningModeStart SYMBOL "bdb_NotifyCommissioningModeStart"
`??bdb_NotifyCommissioningModeStart::?relay` SYMBOL "?relay", bdb_NotifyCommissioningModeStart
bdb_ProcessNodeDescRsp SYMBOL "bdb_ProcessNodeDescRsp"
`??bdb_ProcessNodeDescRsp::?relay` SYMBOL "?relay", bdb_ProcessNodeDescRsp
bdb_RegisterCBKETCLinkKeyExchangeCB SYMBOL "bdb_RegisterCBKETCLinkKeyExchangeCB"
`??bdb_RegisterCBKETCLinkKeyExchangeCB::?relay` SYMBOL "?relay", bdb_RegisterCBKETCLinkKeyExchangeCB
bdb_RegisterCommissioningStatusCB SYMBOL "bdb_RegisterCommissioningStatusCB"
`??bdb_RegisterCommissioningStatusCB::?relay` SYMBOL "?relay", bdb_RegisterCommissioningStatusCB
bdb_RegisterForFilterNwkDescCB SYMBOL "bdb_RegisterForFilterNwkDescCB"
`??bdb_RegisterForFilterNwkDescCB::?relay` SYMBOL "?relay", bdb_RegisterForFilterNwkDescCB
bdb_RegisterSimpleDescriptor SYMBOL "bdb_RegisterSimpleDescriptor"
`??bdb_RegisterSimpleDescriptor::?relay` SYMBOL "?relay", bdb_RegisterSimpleDescriptor
bdb_SendMsg         SYMBOL "bdb_SendMsg"
`??bdb_SendMsg::?relay` SYMBOL "?relay", bdb_SendMsg
bdb_StartCommissioning SYMBOL "bdb_StartCommissioning"
`??bdb_StartCommissioning::?relay` SYMBOL "?relay", bdb_StartCommissioning
bdb_ZclIdentifyCmdInd SYMBOL "bdb_ZclIdentifyCmdInd"
`??bdb_ZclIdentifyCmdInd::?relay` SYMBOL "?relay", bdb_ZclIdentifyCmdInd
bdb_ZedAttemptRecoverNwk SYMBOL "bdb_ZedAttemptRecoverNwk"
`??bdb_ZedAttemptRecoverNwk::?relay` SYMBOL "?relay", bdb_ZedAttemptRecoverNwk
bdb_addInstallCode  SYMBOL "bdb_addInstallCode"
`??bdb_addInstallCode::?relay` SYMBOL "?relay", bdb_addInstallCode
bdb_calculateCCITT_CRC SYMBOL "bdb_calculateCCITT_CRC"
`??bdb_calculateCCITT_CRC::?relay` SYMBOL "?relay", bdb_calculateCCITT_CRC
bdb_crcBitByBitFast SYMBOL "bdb_crcBitByBitFast"
`??bdb_crcBitByBitFast::?relay` SYMBOL "?relay", bdb_crcBitByBitFast
bdb_crcInit         SYMBOL "bdb_crcInit"
`??bdb_crcInit::?relay` SYMBOL "?relay", bdb_crcInit
bdb_crcReflect      SYMBOL "bdb_crcReflect"
`??bdb_crcReflect::?relay` SYMBOL "?relay", bdb_crcReflect
bdb_doTrustCenterRequireKeyExchange SYMBOL "bdb_doTrustCenterRequireKeyExchange"
`??bdb_doTrustCenterRequireKeyExchange::?relay` SYMBOL "?relay", bdb_doTrustCenterRequireKeyExchange
bdb_event_loop      SYMBOL "bdb_event_loop"
`??bdb_event_loop::?relay` SYMBOL "?relay", bdb_event_loop
bdb_filterNwkDisc   SYMBOL "bdb_filterNwkDisc"
`??bdb_filterNwkDisc::?relay` SYMBOL "?relay", bdb_filterNwkDisc
bdb_getZCLFrameCounter SYMBOL "bdb_getZCLFrameCounter"
`??bdb_getZCLFrameCounter::?relay` SYMBOL "?relay", bdb_getZCLFrameCounter
bdb_isDeviceNonFactoryNew SYMBOL "bdb_isDeviceNonFactoryNew"
`??bdb_isDeviceNonFactoryNew::?relay` SYMBOL "?relay", bdb_isDeviceNonFactoryNew
bdb_joinProcess     SYMBOL "bdb_joinProcess"
`??bdb_joinProcess::?relay` SYMBOL "?relay", bdb_joinProcess
bdb_nwkAssocAttemt  SYMBOL "bdb_nwkAssocAttemt"
`??bdb_nwkAssocAttemt::?relay` SYMBOL "?relay", bdb_nwkAssocAttemt
bdb_nwkDescFree     SYMBOL "bdb_nwkDescFree"
`??bdb_nwkDescFree::?relay` SYMBOL "?relay", bdb_nwkDescFree
bdb_nwkDiscoveryAttempt SYMBOL "bdb_nwkDiscoveryAttempt"
`??bdb_nwkDiscoveryAttempt::?relay` SYMBOL "?relay", bdb_nwkDiscoveryAttempt
bdb_nwkFormationAttempt SYMBOL "bdb_nwkFormationAttempt"
`??bdb_nwkFormationAttempt::?relay` SYMBOL "?relay", bdb_nwkFormationAttempt
bdb_parentLost      SYMBOL "bdb_parentLost"
`??bdb_parentLost::?relay` SYMBOL "?relay", bdb_parentLost
bdb_rejoinNwk       SYMBOL "bdb_rejoinNwk"
`??bdb_rejoinNwk::?relay` SYMBOL "?relay", bdb_rejoinNwk
bdb_reportCommissioningState SYMBOL "bdb_reportCommissioningState"
`??bdb_reportCommissioningState::?relay` SYMBOL "?relay", bdb_reportCommissioningState
bdb_resetLocalAction SYMBOL "bdb_resetLocalAction"
`??bdb_resetLocalAction::?relay` SYMBOL "?relay", bdb_resetLocalAction
bdb_setActiveCentralizedLinkKey SYMBOL "bdb_setActiveCentralizedLinkKey"
`??bdb_setActiveCentralizedLinkKey::?relay` SYMBOL "?relay", bdb_setActiveCentralizedLinkKey
bdb_setChannel      SYMBOL "bdb_setChannel"
`??bdb_setChannel::?relay` SYMBOL "?relay", bdb_setChannel
bdb_setChannelAttribute SYMBOL "bdb_setChannelAttribute"
`??bdb_setChannelAttribute::?relay` SYMBOL "?relay", bdb_setChannelAttribute
bdb_setCommissioningGroupID SYMBOL "bdb_setCommissioningGroupID"
`??bdb_setCommissioningGroupID::?relay` SYMBOL "?relay", bdb_setCommissioningGroupID
bdb_setFN           SYMBOL "bdb_setFN"
`??bdb_setFN::?relay` SYMBOL "?relay", bdb_setFN
bdb_setNodeIsOnANetwork SYMBOL "bdb_setNodeIsOnANetwork"
`??bdb_setNodeIsOnANetwork::?relay` SYMBOL "?relay", bdb_setNodeIsOnANetwork
bdb_setNodeJoinLinkKeyType SYMBOL "bdb_setNodeJoinLinkKeyType"
`??bdb_setNodeJoinLinkKeyType::?relay` SYMBOL "?relay", bdb_setNodeJoinLinkKeyType
bdb_tcLinkKeyExchangeAttempt SYMBOL "bdb_tcLinkKeyExchangeAttempt"
`??bdb_tcLinkKeyExchangeAttempt::?relay` SYMBOL "?relay", bdb_tcLinkKeyExchangeAttempt
bdb_touchlinkSendFNReset SYMBOL "bdb_touchlinkSendFNReset"
`??bdb_touchlinkSendFNReset::?relay` SYMBOL "?relay", bdb_touchlinkSendFNReset
bdb_zclRespondentListClean SYMBOL "bdb_zclRespondentListClean"
`??bdb_zclRespondentListClean::?relay` SYMBOL "?relay", bdb_zclRespondentListClean

        EXTERN `??APSME_AddTCLinkKey::?relay`
        FUNCTION `??APSME_AddTCLinkKey::?relay`,00H
        EXTERN `??APSME_GetRequest::?relay`
        FUNCTION `??APSME_GetRequest::?relay`,00H
        EXTERN `??APSME_IsDistributedSecurity::?relay`
        FUNCTION `??APSME_IsDistributedSecurity::?relay`,00H
        EXTERN `??APSME_RequestKeyReq::?relay`
        FUNCTION `??APSME_RequestKeyReq::?relay`,00H
        EXTERN `??APSME_SetDefaultKey::?relay`
        FUNCTION `??APSME_SetDefaultKey::?relay`,00H
        EXTERN `??APSME_VerifyKeyReq::?relay`
        FUNCTION `??APSME_VerifyKeyReq::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_JoinRequest::?relay`
        FUNCTION `??NLME_JoinRequest::?relay`,00H
        EXTERN `??NLME_LeaveReq::?relay`
        FUNCTION `??NLME_LeaveReq::?relay`,00H
        EXTERN `??NLME_NwkDiscTerm::?relay`
        FUNCTION `??NLME_NwkDiscTerm::?relay`,00H
        EXTERN `??NLME_OrphanStateSet::?relay`
        FUNCTION `??NLME_OrphanStateSet::?relay`,00H
        EXTERN `??NLME_ReJoinRequest::?relay`
        FUNCTION `??NLME_ReJoinRequest::?relay`,00H
        EXTERN `??NLME_ReJoinRequestUnsecure::?relay`
        FUNCTION `??NLME_ReJoinRequestUnsecure::?relay`,00H
        EXTERN `??NLME_ResetRequest::?relay`
        FUNCTION `??NLME_ResetRequest::?relay`,00H
        EXTERN `??NLME_SetPollRate::?relay`
        FUNCTION `??NLME_SetPollRate::?relay`,00H
        EXTERN `??NLME_SetQueuedPollRate::?relay`
        FUNCTION `??NLME_SetQueuedPollRate::?relay`,00H
        EXTERN `??NLME_SetResponseRate::?relay`
        FUNCTION `??NLME_SetResponseRate::?relay`,00H
        EXTERN `??ZDApp_ChangeState::?relay`
        FUNCTION `??ZDApp_ChangeState::?relay`,00H
        EXTERN `??ZDApp_NetworkInit::?relay`
        FUNCTION `??ZDApp_NetworkInit::?relay`,00H
        EXTERN `??ZDApp_NodeProfileSync::?relay`
        FUNCTION `??ZDApp_NodeProfileSync::?relay`,00H
        EXTERN `??ZDApp_ResetTimerStart::?relay`
        FUNCTION `??ZDApp_ResetTimerStart::?relay`,00H
        EXTERN `??ZDApp_RestoreNwkKey::?relay`
        FUNCTION `??ZDApp_RestoreNwkKey::?relay`,00H
        EXTERN `??ZDApp_RestoreNwkSecMaterial::?relay`
        FUNCTION `??ZDApp_RestoreNwkSecMaterial::?relay`,00H
        EXTERN `??ZDOInitDeviceEx::?relay`
        FUNCTION `??ZDOInitDeviceEx::?relay`,00H
        EXTERN `??ZDO_ParseNodeDescRsp::?relay`
        FUNCTION `??ZDO_ParseNodeDescRsp::?relay`,00H
        EXTERN `??ZDO_RegisterForZDOMsg::?relay`
        FUNCTION `??ZDO_RegisterForZDOMsg::?relay`,00H
        EXTERN `??ZDP_MgmtPermitJoinReq::?relay`
        FUNCTION `??ZDP_MgmtPermitJoinReq::?relay`,00H
        EXTERN `??ZDP_NWKAddrOfInterestReq::?relay`
        FUNCTION `??ZDP_NWKAddrOfInterestReq::?relay`,00H
        EXTERN `??ZMacGetReq::?relay`
        FUNCTION `??ZMacGetReq::?relay`,00H
        EXTERN `??ZMacSetReq::?relay`
        FUNCTION `??ZMacSetReq::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??bdb_ProcessIEEEAddrRsp::?relay`
        FUNCTION `??bdb_ProcessIEEEAddrRsp::?relay`,00H
        EXTERN `??bdb_ProcessRespondentList::?relay`
        FUNCTION `??bdb_ProcessRespondentList::?relay`,00H
        EXTERN `??bdb_ProcessSimpleDesc::?relay`
        FUNCTION `??bdb_ProcessSimpleDesc::?relay`,00H
        EXTERN `??bdb_SendIdentifyQuery::?relay`
        FUNCTION `??bdb_SendIdentifyQuery::?relay`,00H
        EXTERN `??bdb_exitFindingBindingWStatus::?relay`
        FUNCTION `??bdb_exitFindingBindingWStatus::?relay`,00H
        EXTERN `??bdb_getRespondentRetry::?relay`
        FUNCTION `??bdb_getRespondentRetry::?relay`,00H
        EXTERN `??bdb_setEpDescListToActiveEndpoint::?relay`
        FUNCTION `??bdb_setEpDescListToActiveEndpoint::?relay`,00H
        EXTERN `??initiatorSelectNwkParams::?relay`
        FUNCTION `??initiatorSelectNwkParams::?relay`,00H
        EXTERN `??nwkNeighborInitTable::?relay`
        FUNCTION `??nwkNeighborInitTable::?relay`,00H
        EXTERN `??nwk_ExtPANIDValid::?relay`
        FUNCTION `??nwk_ExtPANIDValid::?relay`,00H
        EXTERN `??nwk_desc_list_free::?relay`
        FUNCTION `??nwk_desc_list_free::?relay`,00H
        EXTERN `??nwk_desc_list_release::?relay`
        FUNCTION `??nwk_desc_list_release::?relay`,00H
        EXTERN `??nwk_getNwkDescList::?relay`
        FUNCTION `??nwk_getNwkDescList::?relay`,00H
        EXTERN `??nwk_setStateIdle::?relay`
        FUNCTION `??nwk_setStateIdle::?relay`,00H
        EXTERN `??osal_build_uint16::?relay`
        FUNCTION `??osal_build_uint16::?relay`,00H
        EXTERN `??osal_get_timeoutEx::?relay`
        FUNCTION `??osal_get_timeoutEx::?relay`,00H
        EXTERN `??osal_isbufset::?relay`
        FUNCTION `??osal_isbufset::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??sAddrExtCmp::?relay`
        FUNCTION `??sAddrExtCmp::?relay`,00H
        EXTERN `??sspMMOHash::?relay`
        FUNCTION `??sspMMOHash::?relay`,00H
        EXTERN `??touchLinkInitiator_InitDevice::?relay`
        FUNCTION `??touchLinkInitiator_InitDevice::?relay`,00H
        EXTERN `??touchLinkInitiator_ResetToFNProcedure::?relay`
        FUNCTION `??touchLinkInitiator_ResetToFNProcedure::?relay`,00H
        EXTERN `??touchLinkInitiator_StartDevDisc::?relay`
        FUNCTION `??touchLinkInitiator_StartDevDisc::?relay`,00H
        EXTERN `??touchLink_InitFreeRanges::?relay`
        FUNCTION `??touchLink_InitFreeRanges::?relay`,00H
        EXTERN `??touchLink_SetMacNwkParams::?relay`
        FUNCTION `??touchLink_SetMacNwkParams::?relay`,00H
        EXTERN `??touchLink_UpdateNV::?relay`
        FUNCTION `??touchLink_UpdateNV::?relay`,00H
        EXTERN `??zclFindAttrRec::?relay`
        FUNCTION `??zclFindAttrRec::?relay`,00H
        EXTERN `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,00H
        EXTERN AIB_apsTrustCenterAddress
        EXTERN APSME_AddTCLinkKey
        FUNCTION APSME_AddTCLinkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_GetRequest
        FUNCTION APSME_GetRequest,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_IsDistributedSecurity
        FUNCTION APSME_IsDistributedSecurity,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_RequestKeyReq
        FUNCTION APSME_RequestKeyReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_SetDefaultKey
        FUNCTION APSME_SetDefaultKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_VerifyKeyReq
        FUNCTION APSME_VerifyKeyReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_JoinRequest
        FUNCTION NLME_JoinRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveReq
        FUNCTION NLME_LeaveReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_NwkDiscTerm
        FUNCTION NLME_NwkDiscTerm,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_OrphanStateSet
        FUNCTION NLME_OrphanStateSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_ReJoinRequest
        FUNCTION NLME_ReJoinRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_ReJoinRequestUnsecure
        FUNCTION NLME_ReJoinRequestUnsecure,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_ResetRequest
        FUNCTION NLME_ResetRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetPollRate
        FUNCTION NLME_SetPollRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetQueuedPollRate
        FUNCTION NLME_SetQueuedPollRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetResponseRate
        FUNCTION NLME_SetResponseRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN TCLinkKeyFrmCntr
        EXTERN ZDApp_ChangeState
        FUNCTION ZDApp_ChangeState,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_NetworkInit
        FUNCTION ZDApp_NetworkInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_NodeProfileSync
        FUNCTION ZDApp_NodeProfileSync,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_ResetTimerStart
        FUNCTION ZDApp_ResetTimerStart,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_RestoreNwkKey
        FUNCTION ZDApp_RestoreNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_RestoreNwkSecMaterial
        FUNCTION ZDApp_RestoreNwkSecMaterial,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_SavedPollRate
        EXTERN ZDOInitDeviceEx
        FUNCTION ZDOInitDeviceEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_Config_Node_Descriptor
        EXTERN ZDO_ParseNodeDescRsp
        FUNCTION ZDO_ParseNodeDescRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_UseExtendedPANID
        EXTERN ZDP_MgmtPermitJoinReq
        FUNCTION ZDP_MgmtPermitJoinReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NWKAddrOfInterestReq
        FUNCTION ZDP_NWKAddrOfInterestReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacGetReq
        FUNCTION ZMacGetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdbIndentifyActiveEndpoint
        EXTERN bdb_ProcessIEEEAddrRsp
        FUNCTION bdb_ProcessIEEEAddrRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_ProcessRespondentList
        FUNCTION bdb_ProcessRespondentList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_ProcessSimpleDesc
        FUNCTION bdb_ProcessSimpleDesc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_SendIdentifyQuery
        FUNCTION bdb_SendIdentifyQuery,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_exitFindingBindingWStatus
        FUNCTION bdb_exitFindingBindingWStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_getRespondentRetry
        FUNCTION bdb_getRespondentRetry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_setEpDescListToActiveEndpoint
        FUNCTION bdb_setEpDescListToActiveEndpoint,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN devStartMode
        EXTERN gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY
        EXTERN initiatorSelectNwkParams
        FUNCTION initiatorSelectNwkParams,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwkNeighborInitTable
        FUNCTION nwkNeighborInitTable,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_ExtPANIDValid
        FUNCTION nwk_ExtPANIDValid,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_desc_list_free
        FUNCTION nwk_desc_list_free,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_desc_list_release
        FUNCTION nwk_desc_list_release,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_getNwkDescList
        FUNCTION nwk_getNwkDescList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_setStateIdle
        FUNCTION nwk_setStateIdle,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint16
        FUNCTION osal_build_uint16,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_get_timeoutEx
        FUNCTION osal_get_timeoutEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_isbufset
        FUNCTION osal_isbufset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN pbindAddEntry
        EXTERN pfnIdentifyTimeChangeCB
        EXTERN requestLinkKeyTimeout
        EXTERN requestNewTrustCenterLinkKey
        EXTERN runtimeChannel
        EXTERN sAddrExtCmp
        FUNCTION sAddrExtCmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sspMMOHash
        FUNCTION sspMMOHash,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN touchLinkInitiator_InitDevice
        FUNCTION touchLinkInitiator_InitDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN touchLinkInitiator_ResetToFNProcedure
        FUNCTION touchLinkInitiator_ResetToFNProcedure,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN touchLinkInitiator_StartDevDisc
        FUNCTION touchLinkInitiator_StartDevDisc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN touchLink_InitFreeRanges
        FUNCTION touchLink_InitFreeRanges,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN touchLink_SetMacNwkParams
        FUNCTION touchLink_SetMacNwkParams,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN touchLink_UpdateNV
        FUNCTION touchLink_UpdateNV,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN touchlinkFNReset
        EXTERN zclFindAttrRec
        FUNCTION zclFindAttrRec,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_TaskID
        EXTERN zgChildAgingEnable
        EXTERN zgConfigPANID
        EXTERN zgDefaultChannelList
        EXTERN zgDeviceLogicalType
        EXTERN zgPollRate
        EXTERN zgRejoinPollRate
        EXTERN zgStackProfile
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\AA\Z-Stack 3.0.2\Components\stack\bdb\bdb.c
//    1 /**************************************************************************************************
//    2   Filename:       bdb.c
//    3   Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
//    4   Revision:       $Revision: - $
//    5 
//    6   Description:    This file contains the Base Device Behavior functions and attributes.
//    7 
//    8 
//    9   Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 
//   44 #include "bdb.h"
//   45 #include "ZDApp.h"
//   46 #include "OSAL.h"
//   47 #include "ZDConfig.h"
//   48 #include "hal_led.h"
//   49 #include "ZDObject.h"
//   50 #include "OSAL_Nv.h"
//   51 #include "AddrMgr.h"
//   52 #include "ZDSecMgr.h"
//   53 #include "nwk.h"
//   54 #include "nwk_util.h"
//   55 #include "ssp_hash.h"
//   56 #ifdef BDB_REPORTING
//   57 #include "bdb_Reporting.h"
//   58 #endif 
//   59 
//   60 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
//   61 #include "gp_interface.h"
//   62 #include "gp_common.h"
//   63 #include "dgp_stub.h"
//   64 #endif
//   65 
//   66 #include "bdb_interface.h"
//   67 
//   68 #if defined ( INTER_PAN ) 
//   69 #if defined ( BDB_TL_INITIATOR )  
//   70 #include "bdb_touchlink_initiator.h"
//   71 #endif
//   72 #if defined ( BDB_TL_TARGET )  
//   73 #include "bdb_touchlink_target.h"
//   74 #endif
//   75 #endif
//   76    
//   77 #if defined ( INTER_PAN ) && ( defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET ) )
//   78   #include "bdb_touchlink.h"
//   79 #endif
//   80  
//   81 #ifdef MT_APP_CNF_FUNC
//   82 #include "MT_APP_CONFIG.h"
//   83 #endif
//   84    
//   85  /*********************************************************************
//   86  * MACROS
//   87  */
//   88 //This is actually the channels used
//   89 #define vScanChannels  zgDefaultChannelList
//   90    
//   91  /*********************************************************************
//   92  * CONSTANTS
//   93  */
//   94 
//   95 #define NUMBER_OF_CHANNELS     16
//   96 
//   97 #define CHANNEL_11_MASK_POS    11
//   98 #define CHANNEL_26_MASK_POS    26
//   99    

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  100 uint8 bdb_FB_InitiatorCurrentCyclesNumber = 0; //last cycle is #1 (i.e. cycles-left = (bdb_FB_InitiatorCurrentCyclesNumber - 1))
bdb_FB_InitiatorCurrentCyclesNumber:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  101 
//  102 /*********************************************************************
//  103  * TYPEDEFS
//  104  */
//  105  
//  106  
//  107  /*********************************************************************
//  108  * GLOBAL VARIABLES
//  109  */
//  110 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  111 byte bdb_TaskID;
bdb_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  112 bdbAttributes_t bdbAttributes = BDB_ATTRIBUTES_DEFAULT_CONFIG;
bdbAttributes:
        DATA8
        DS 19
        REQUIRE `?<Initializer for bdbAttributes>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  113 epList_t *bdb_HeadEpDescriptorList = NULL;
bdb_HeadEpDescriptorList:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  114 epList_t *bdb_CurrEpDescriptorList = NULL;
bdb_CurrEpDescriptorList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  115 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  116 bdbFindingBindingRespondent_t *pRespondentHead = NULL;
pRespondentHead:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  117 bdbFindingBindingRespondent_t *pRespondentCurr = NULL;
pRespondentCurr:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  118 bdbFindingBindingRespondent_t *pRespondentNext = NULL;
pRespondentNext:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  119 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  120 bdbCommissioningProcedureState_t bdbCommissioningProcedureState; 
bdbCommissioningProcedureState:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  121 bool bdb_initialization = FALSE;  //Variable to tell if the initialization process has been started
bdb_initialization:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  122 
//  123 //Nwk formation and nwk steering for nodes not in nwk

        RSEG XDATA_I:XDATA:NOROOT(0)
//  124 bool vDoPrimaryScan = TRUE;
vDoPrimaryScan:
        DATA8
        DS 1
        REQUIRE `?<Initializer for vDoPrimaryScan>`
        REQUIRE __INIT_XDATA_I
//  125 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  126 uint8 zgBdbInstallCodeCRC[INSTALL_CODE_LEN + INSTALL_CODE_CRC_LEN] = {0x83,0xFE,0xD3,0x40,0x7A,0x93,0x97,0x23,0xA5,0xC6,0x39,0xB2,0x69,0x16,0xD5,0x05,0xC3,0xB5};
zgBdbInstallCodeCRC:
        DATA8
        DS 18
        REQUIRE `?<Initializer for zgBdbInstallCodeCRC>`
        REQUIRE __INIT_XDATA_I
//  127 
//  128 //Pointer of the nwk being tried in association process
//  129 #if (ZG_BUILD_JOINING_TYPE)

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  130 static networkDesc_t *pBDBListNwk = NULL;
pBDBListNwk:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  131 #endif
//  132 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  133 uint8 bdb_ZclTransactionSequenceNumber=0x00;
bdb_ZclTransactionSequenceNumber:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  134 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  135 bool touchLinkTargetEnabled = FALSE;
touchLinkTargetEnabled:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  136 
//  137  /*********************************************************************
//  138  * EXTERNAL VARIABLES
//  139  */
//  140 
//  141 extern devStartModes_t devStartMode;
//  142 extern bool  requestNewTrustCenterLinkKey;
//  143 extern uint32 requestLinkKeyTimeout;
//  144 extern uint32 ZDApp_SavedPollRate;
//  145 
//  146 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
//  147 extern bdbGCB_IdentifyTimeChange_t pfnIdentifyTimeChangeCB;
//  148 extern uint8 bdbIndentifyActiveEndpoint;
//  149 #endif
//  150 
//  151 extern bdbFindingBindingRespondent_t *pRespondentNext;
//  152 
//  153 #ifndef DISABLE_GREENPOWER_BASIC_PROXY
//  154 extern ZDO_DeviceAnnce_t aliasConflictAnnce;
//  155 #endif
//  156 
//  157 /*********************************************************************
//  158  * EXTERNAL FUNCTIONS
//  159  */
//  160 
//  161 extern void ZDApp_ResetTimerStart( uint16 delay );
//  162 extern void ZDApp_NodeProfileSync( uint8 stackProfile );
//  163 extern uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt );
//  164 extern uint8 ZDApp_ReadNetworkRestoreState( void );
//  165 
//  166 extern bdbFindingBindingRespondent_t* bdb_getRespondentRetry(bdbFindingBindingRespondent_t* pRespondentHead);
//  167 extern void bdb_ProcessSimpleDesc( zdoIncomingMsg_t *msgPtr );
//  168 extern void bdb_ProcessIEEEAddrRsp(zdoIncomingMsg_t *pMsg);
//  169 
//  170 /*********************************************************************
//  171  * LOCAL VARIABLES
//  172  */
//  173 #if (ZG_BUILD_JOINING_TYPE)

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  174   static uint8 bdb_nwkAssocRetriesCount = 0;
bdb_nwkAssocRetriesCount:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  175 #endif
//  176 #if (ZG_BUILD_COORDINATOR_TYPE)
//  177   static bdb_joiningDeviceList_t *bdb_joiningDeviceList = NULL;
//  178 #endif
//  179   
//  180 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
//  181 //Latch to save the status success of any attempt in the periodic F&B process  

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  182 static uint8 bdb_FBStateSuccessLatch = FALSE;
bdb_FBStateSuccessLatch:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  183 #endif
//  184  /*********************************************************************
//  185  * LOCAL FUNCTIONS
//  186  */
//  187 static void bdb_ProcessOSALMsg(bdbInMsg_t *msgPtr);
//  188 void bdb_NotifyCommissioningModeStart(uint8 commissioningMode);
//  189 static void bdb_processZDOMgs(zdoIncomingMsg_t *pMsg);
//  190 
//  191 #if (ZG_BUILD_JOINING_TYPE)
//  192 static void bdb_requestTCStackVersion(void);
//  193 static void bdb_requestTCLinkKey(void);
//  194 static void bdb_requestVerifyTCLinkKey(void);
//  195 static void bdb_tryNwkAssoc(void);
//  196 #endif
//  197 
//  198 
//  199 static void bdb_processTimeout(void);
//  200 static void bdb_startResumeCommissioningProcess(void);
//  201 static void bdb_nwkSteeringDeviceOnNwk(void);
//  202 static void bdb_nwkJoiningFormation(bool isJoining);
//  203 
//  204 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
//  205 static uint8 gp_ChangeChannelReq(void);
//  206 static void gp_CBInit(void);
//  207 #endif
//  208 
//  209 
//  210 #if (ZG_BUILD_COORDINATOR_TYPE)
//  211 static void bdb_TCProcessJoiningList(void);
//  212 static ZStatus_t bdb_TCJoiningDeviceFree(bdb_joiningDeviceList_t* JoiningDeviceToRemove);
//  213 #endif
//  214 #if (ZG_BUILD_COORDINATOR_TYPE)
//  215 static bdbGCB_TCLinkKeyExchangeProcess_t  pfnTCLinkKeyExchangeProcessCB = NULL;
//  216 #endif

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  217 static bdbGCB_CommissioningStatus_t       pfnCommissioningStatusCB = NULL; 
pfnCommissioningStatusCB:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  218 #if (ZG_BUILD_JOINING_TYPE)

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  219 static bdbGCB_CBKETCLinkKeyExchange_t     pfnCBKETCLinkKeyExchange = NULL;
pfnCBKETCLinkKeyExchange:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  220 static bdbGCB_FilterNwkDesc_t             pfnFilterNwkDesc = NULL;   
pfnFilterNwkDesc:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  221 #endif
//  222 
//  223 
//  224 
//  225 void bdb_calculateCCITT_CRC (uint8 *Mb, uint32 msglen, uint16 *crc);
//  226 void bdb_crcInit(uint16 *crc, uint16 *crcinit_direct, uint16 *crcinit_nondirect);
//  227 uint16 bdb_crcReflect (uint16 crc, uint16 bitnum);
//  228 uint16 bdb_crcBitByBitFast(uint8 * p, uint32 len, uint16 crcinit_direct, uint16 crcinit_nondirect);
//  229 void bdb_ProcessNodeDescRsp(zdoIncomingMsg_t *pMsg);
//  230 
//  231 /*********************************************************************
//  232  * PUBLIC FUNCTIONS
//  233  *********************************************************************/
//  234 void bdb_filterNwkDisc(void);
//  235 ZStatus_t bdb_joinProcess(networkDesc_t *pChosenNwk);
//  236 
//  237 ZStatus_t bdb_TCAddJoiningDevice(uint16 parentAddr, uint8* JoiningExtAddr);
//  238 void bdb_TCjoiningDeviceComplete(uint8* JoiningExtAddr);
//  239 
//  240  /*********************************************************************
//  241  * @fn          bdb_Init
//  242  *
//  243  * @brief       Initialization function for the Base Device Behavior.
//  244  *
//  245  * @param       task_id - bdb_TaskID Task ID
//  246  *
//  247  * @return      none
//  248  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  249 void bdb_Init( byte task_id )
bdb_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function bdb_Init
        CODE
//  250 {
        FUNCALL bdb_Init, touchLinkInitiator_InitDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
//  251   bdb_TaskID = task_id;
        MOV       A,R6
        MOV       DPTR,#bdb_TaskID
        MOVX      @DPTR,A
//  252     
//  253 #if (ZG_BUILD_COORDINATOR_TYPE)
//  254   if(ZG_DEVICE_COORDINATOR_TYPE)
//  255   {
//  256     if(bdbAttributes.bdbJoinUsesInstallCodeKey)
//  257     {
//  258       zgAllowInstallCodes = ZG_IC_MUST_USED;
//  259     }
//  260   }
//  261 #endif
//  262   
//  263 #if defined ( INTER_PAN ) && defined ( BDB_TL_INITIATOR )  
//  264   touchLinkInitiator_InitDevice( );
        ; Setup parameters for call to function touchLinkInitiator_InitDevice
        LCALL     `??touchLinkInitiator_InitDevice::?relay`; Banked call to: touchLinkInitiator_InitDevice
        MOV       A,R1
//  265 #endif
//  266 
//  267 #if (BDB_REPORTING)
//  268   bdb_RepInit();
//  269 #endif  
//  270   
//  271   //Register ZDO callbacks
//  272   ZDO_RegisterForZDOMsg ( task_id, Node_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x2
        MOV       R3,#-0x80
        MOV       A,R6
        MOV       R1,A
        LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
        MOV       A,R1
//  273 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
//  274   ZDO_RegisterForZDOMsg ( task_id, IEEE_addr_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x1
        MOV       R3,#-0x80
        MOV       A,R6
        MOV       R1,A
        LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
        MOV       A,R1
//  275   ZDO_RegisterForZDOMsg ( task_id, Simple_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x4
        MOV       R3,#-0x80
        MOV       A,R6
        MOV       R1,A
        LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
        MOV       A,R1
//  276 #endif
//  277   
//  278 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
//  279   gp_RegisterGPChangeChannelReqForBDBCB(gp_ChangeChannelReq);
//  280   gp_CBInit();
//  281 #endif
//  282 }
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//  283 
//  284 /*********************************************************************
//  285  * @fn      bdb_RegisterSimpleDescriptor
//  286  *
//  287  * @brief   Register the Simple descriptor. This function also registers 
//  288  *          the profile's cluster conversion table.
//  289  *
//  290  * @param   simpleDesc - a pointer to a valid SimpleDescriptionFormat_t, must not be NULL.
//  291  *
//  292  * @return  none
//  293  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  294 void bdb_RegisterSimpleDescriptor( SimpleDescriptionFormat_t *simpleDesc )
bdb_RegisterSimpleDescriptor:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function bdb_RegisterSimpleDescriptor
        CODE
//  295 {
        FUNCALL bdb_RegisterSimpleDescriptor, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_RegisterSimpleDescriptor, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  296   endPointDesc_t *epDesc;
//  297 
//  298   // Register the application's endpoint descriptor
//  299   //  - This memory is allocated and never freed.
//  300   epDesc = osal_mem_alloc( sizeof ( endPointDesc_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x7
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       ?V0,?V2
        MOV       ?V1,?V3
//  301   if ( epDesc )
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??bdb_RegisterSimpleDescriptor_0
//  302   {
//  303     // Fill out the endpoint description.
//  304     epDesc->endPoint = simpleDesc->EndPoint;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?V0
        MOV       DPH,?V1
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  305     epDesc->task_id = &zcl_TaskID;   // all messages get sent to ZCL first
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        MOV       A,#zcl_TaskID & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(zcl_TaskID >> 8) & 0xff
        MOVX      @DPTR,A
//  306     epDesc->simpleDesc = simpleDesc;
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
//  307     epDesc->latencyReq = noLatencyReqs;
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
//  308 
//  309     // Register the endpoint description with the AF
//  310     afRegister( epDesc );
        ; Setup parameters for call to function afRegister
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??afRegister::?relay`; Banked call to: afRegister
        MOV       A,R1
//  311   }
//  312 }
??bdb_RegisterSimpleDescriptor_0:
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  313 
//  314 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
//  315 /*********************************************************************
//  316  * @fn      bdb_ZclIdentifyCmdInd
//  317  *
//  318  * @brief   Callback from the ZCL General Cluster Library when
//  319  *          it received an Identity Command for this application.
//  320  *
//  321  * @param   identifyTime - the number of seconds to identify yourself
//  322  * @param   endpoint - destination endpoint
//  323  *
//  324  * @return  none
//  325  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  326 void bdb_ZclIdentifyCmdInd( uint16 identifyTime, uint8 endpoint )
bdb_ZclIdentifyCmdInd:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function bdb_ZclIdentifyCmdInd
        CODE
//  327 {
        FUNCALL bdb_ZclIdentifyCmdInd, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ZclIdentifyCmdInd, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ZclIdentifyCmdInd, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 8
        MOV       A,#-0x8
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R1
//  328   zclAttrRec_t identifyAttrRec;
//  329   
//  330   if ( zclFindAttrRec( endpoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
//  331                       ATTRID_IDENTIFY_TIME, &identifyAttrRec ) )
        ; Setup parameters for call to function zclFindAttrRec
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x3
        MOV       R3,#0x0
        MOV       R1,?V0
        LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R1
        JNZ       $+5
        LJMP      ??bdb_ZclIdentifyCmdInd_0 & 0xFFFF
//  332   {
//  333     //If we are processing an actual change
//  334     if(*(uint16*)identifyAttrRec.attr.dataPtr != identifyTime)
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        XRL       A,R6
        JNZ       ??bdb_ZclIdentifyCmdInd_1
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R7
??bdb_ZclIdentifyCmdInd_1:
        JZ        ??bdb_ZclIdentifyCmdInd_0
//  335     {
//  336       if ( identifyTime > 0 )
        MOV       A,R6
        ORL       A,R7
        JZ        ??bdb_ZclIdentifyCmdInd_2
//  337       {
//  338         *((uint16*)identifyAttrRec.attr.dataPtr) = identifyTime;
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
//  339         osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3e8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R2,#0x0
        MOV       R3,#0x20
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R1
        SJMP      ??bdb_ZclIdentifyCmdInd_3
//  340       }
//  341       else if ( identifyTime <= 0 )
??bdb_ZclIdentifyCmdInd_2:
        MOV       A,R6
        ORL       A,R7
        JNZ       ??bdb_ZclIdentifyCmdInd_3
//  342       {
//  343         *((uint16*)identifyAttrRec.attr.dataPtr) = 0;
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
//  344         osal_stop_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x20
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
//  345       }
//  346       
//  347       if(pfnIdentifyTimeChangeCB != NULL)
??bdb_ZclIdentifyCmdInd_3:
        MOV       DPTR,#pfnIdentifyTimeChangeCB
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_ZclIdentifyCmdInd_0
//  348       {
//  349         pfnIdentifyTimeChangeCB(endpoint);
        ; Setup parameters for indirect call
        MOV       R1,?V0
        MOV       DPTR,#pfnIdentifyTimeChangeCB
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        LCALL     ?CALL_IND
//  350       }
//  351     }
//  352   }
//  353 }
??bdb_ZclIdentifyCmdInd_0:
        MOV       A,#0x8
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  354 #endif
//  355 
//  356 
//  357 #if (ZG_BUILD_JOINING_TYPE) 
//  358  /*********************************************************************
//  359  * @fn          bdb_setActiveCentralizedLinkKey
//  360  *
//  361  * @brief       Set the active centralized key to be used, Global or IC derived. See zstack_CentralizedLinkKeyModes_t
//  362  *
//  363  * @param       zstack_CentralizedLinkKeyModes - Key to be used for joining centralized network
//  364  * @param       pKey - Key to be used (if any)
//  365  *
//  366  * @return      ZStatus_t - ZFailure when no valid BDB_INSTALL_CODE_USE is used
//  367  *                          ZInvalidParameter when IC buffer is null
//  368  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  369 ZStatus_t bdb_setActiveCentralizedLinkKey(uint8 zstack_CentralizedLinkKeyModes, uint8* pKey)
bdb_setActiveCentralizedLinkKey:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function bdb_setActiveCentralizedLinkKey
        CODE
//  370 {
        FUNCALL bdb_setActiveCentralizedLinkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_setActiveCentralizedLinkKey, APSME_SetDefaultKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_setActiveCentralizedLinkKey, bdb_addInstallCode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_setActiveCentralizedLinkKey, APSME_AddTCLinkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 8
        MOV       A,#-0x8
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       ?V1,R1
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  371   ZStatus_t Status;
//  372 
//  373   uint8 extAddr[Z_EXTADDR_LEN];
//  374 
//  375   osal_memset(extAddr,0x00,Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  376 
//  377   if(pKey == NULL)
        MOV       A,R6
        ORL       A,R7
        JNZ       ??bdb_setActiveCentralizedLinkKey_0
//  378   {
//  379     return ZInvalidParameter;
        MOV       R1,#0x2
        SJMP      ??bdb_setActiveCentralizedLinkKey_1
//  380   }
//  381 
//  382   //Clear it, if the request requires it, it will be set
//  383   gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = FALSE;
??bdb_setActiveCentralizedLinkKey_0:
        MOV       DPTR,#gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY
        MOV       A,#0x0
        MOVX      @DPTR,A
//  384 
//  385   switch(zstack_CentralizedLinkKeyModes)
        MOV       A,?V1
        JZ        ??bdb_setActiveCentralizedLinkKey_2
        DEC       A
        JZ        ??bdb_setActiveCentralizedLinkKey_3
        DEC       A
        JZ        ??bdb_setActiveCentralizedLinkKey_4
        DEC       A
        JZ        ??bdb_setActiveCentralizedLinkKey_5
        DEC       A
        JZ        ??bdb_setActiveCentralizedLinkKey_6
        SJMP      ??bdb_setActiveCentralizedLinkKey_7
//  386   {
//  387     case zstack_UseDefaultGlobalTrustCenterLinkKey:
//  388       //Set the default key to be used in centralized networks as defaultTCLinkKey
//  389       Status = APSME_SetDefaultKey();
??bdb_setActiveCentralizedLinkKey_2:
        ; Setup parameters for call to function APSME_SetDefaultKey
        LCALL     `??APSME_SetDefaultKey::?relay`; Banked call to: APSME_SetDefaultKey
        MOV       A,R1
        MOV       ?V0,A
//  390     break;
        SJMP      ??bdb_setActiveCentralizedLinkKey_8
//  391 
//  392     case zstack_UseInstallCodeWithFallback:
//  393       //same as zstack_UseInstallCode but attempt default TRUE
//  394       gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = TRUE;
??bdb_setActiveCentralizedLinkKey_4:
        MOV       DPTR,#gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY
        MOV       A,#0x1
        MOVX      @DPTR,A
//  395     case zstack_UseInstallCode:
//  396        //Set the install code as default key
//  397       Status = bdb_addInstallCode(pKey,extAddr);
??bdb_setActiveCentralizedLinkKey_3:
        ; Setup parameters for call to function bdb_addInstallCode
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_addInstallCode::?relay`; Banked call to: bdb_addInstallCode
        MOV       A,R1
        MOV       ?V0,A
//  398     break;
        SJMP      ??bdb_setActiveCentralizedLinkKey_8
//  399 
//  400     case zstack_UseAPSKeyWithFallback:
//  401       //same as zstack_UseAPSKey but attempt default TRUE
//  402       gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = TRUE;
??bdb_setActiveCentralizedLinkKey_6:
        MOV       DPTR,#gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY
        MOV       A,#0x1
        MOVX      @DPTR,A
//  403     case zstack_UseAPSKey:
//  404       //Set the key as global default
//  405       Status = APSME_AddTCLinkKey(pKey,extAddr);
??bdb_setActiveCentralizedLinkKey_5:
        ; Setup parameters for call to function APSME_AddTCLinkKey
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??APSME_AddTCLinkKey::?relay`; Banked call to: APSME_AddTCLinkKey
        MOV       A,R1
        MOV       ?V0,A
//  406     break;
        SJMP      ??bdb_setActiveCentralizedLinkKey_8
//  407     
//  408     default:
//  409       Status = ZInvalidParameter;
??bdb_setActiveCentralizedLinkKey_7:
        MOV       ?V0,#0x2
//  410     break;
//  411   }
//  412 
//  413   return Status;
??bdb_setActiveCentralizedLinkKey_8:
        MOV       R1,?V0
??bdb_setActiveCentralizedLinkKey_1:
        MOV       A,#0x8
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
//  414 }
          CFI EndBlock cfiBlock3
//  415 #endif
//  416 
//  417 
//  418     
//  419   
//  420 /******************************************************************************
//  421  * @fn          bdb_addInstallCode
//  422  *
//  423  * @brief       Interface to add an install codes and adds a APS TC Link key.
//  424  *
//  425  * @param       pInstallCode - [in] Install Code with CRC (buffer size of 18 bytes).
//  426  *              pExt - [in] Extended address of the node.
//  427  *
//  428  * @return      ZStatus_t
//  429  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  430 ZStatus_t bdb_addInstallCode(uint8* pInstallCode, uint8* pExt)
bdb_addInstallCode:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function bdb_addInstallCode
        CODE
//  431 {
        FUNCALL bdb_addInstallCode, bdb_GenerateInstallCodeCRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_addInstallCode, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_addInstallCode, sspMMOHash
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_addInstallCode, APSME_AddTCLinkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 16
        MOV       A,#-0x10
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
//  432   uint8  hashOutput[16];
//  433   uint16 CRC;
//  434   
//  435 #if (ZG_BUILD_COORDINATOR_TYPE)
//  436   if(ZG_DEVICE_COORDINATOR_TYPE)
//  437   {
//  438     if(zgAllowInstallCodes == ZG_IC_NOT_SUPPORTED)
//  439     {
//  440       return ZFailure;
//  441     }
//  442   }
//  443 #endif
//  444        
//  445   if((pInstallCode == NULL) || (pExt == NULL))
        MOV       A,R6
        ORL       A,R7
        JZ        ??bdb_addInstallCode_0
        MOV       A,?V0
        ORL       A,?V1
        JNZ       ??bdb_addInstallCode_1
//  446   {
//  447     return ZInvalidParameter;
??bdb_addInstallCode_0:
        MOV       R1,#0x2
        SJMP      ??bdb_addInstallCode_2
//  448   }
//  449   
//  450   CRC = bdb_GenerateInstallCodeCRC(pInstallCode);
??bdb_addInstallCode_1:
        ; Setup parameters for call to function bdb_GenerateInstallCodeCRC
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_GenerateInstallCodeCRC::?relay`; Banked call to: bdb_GenerateInstallCodeCRC
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       ?V2,?V4
        MOV       ?V3,?V5
//  451 
//  452   //Validate CRC
//  453   if(CRC != osal_build_uint16(&pInstallCode[INSTALL_CODE_LEN]))
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R6
        ADD       A,#0x10
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       A,?V4
        XRL       A,?V2
        JNZ       ??bdb_addInstallCode_3
        MOV       A,?V5
        XRL       A,?V3
??bdb_addInstallCode_3:
        JZ        ??bdb_addInstallCode_4
//  454   {
//  455     return ZInvalidParameter;
        MOV       R1,#0x2
        SJMP      ??bdb_addInstallCode_2
//  456   }
//  457 
//  458   sspMMOHash (NULL, 0, pInstallCode,(INSTALL_CODE_LEN + INSTALL_CODE_CRC_LEN) * BITS_PER_BYTE, hashOutput);
??bdb_addInstallCode_4:
        ; Setup parameters for call to function sspMMOHash
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       ?V4,#-0x70
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R1,#0x0
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??sspMMOHash::?relay`; Banked call to: sspMMOHash
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
//  459 
//  460   return APSME_AddTCLinkKey(hashOutput,pExt);
        ; Setup parameters for call to function APSME_AddTCLinkKey
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??APSME_AddTCLinkKey::?relay`; Banked call to: APSME_AddTCLinkKey
??bdb_addInstallCode_2:
        MOV       A,#0x10
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
//  461 }    
          CFI EndBlock cfiBlock4
//  462     
//  463 
//  464 #if (ZG_BUILD_COORDINATOR_TYPE)
//  465  /*********************************************************************
//  466  * @fn      bdb_RegisterTCLinkKeyExchangeProcessCB
//  467  *
//  468  * @brief   Register a callback to receive notifications on the joining devices 
//  469  *          and its status on TC link key exchange
//  470  *
//  471  * @param   bdbGCB_TCLinkKeyExchangeProcess - application callback 
//  472  *          (extended address of device, status: 0 = Joining, 1 = TC link key exchange success, 2 = TC link key exchange failed)
//  473  *
//  474  * @return  none
//  475  */
//  476 void bdb_RegisterTCLinkKeyExchangeProcessCB(bdbGCB_TCLinkKeyExchangeProcess_t bdbGCB_TCLinkKeyExchangeProcess)
//  477 {
//  478   if(bdbGCB_TCLinkKeyExchangeProcess != NULL)
//  479   {
//  480     pfnTCLinkKeyExchangeProcessCB = bdbGCB_TCLinkKeyExchangeProcess;
//  481   }
//  482 }
//  483 
//  484 
//  485 
//  486  /*********************************************************************
//  487  * @fn          bdb_setTCRequireKeyExchange
//  488  *
//  489  * @brief       Set the bdb_setTCRequireKeyExchange attribute
//  490  *
//  491  * @param       isKeyExchangeRequired - True if TC will remove devices that do 
//  492  *              not perform key exchange after bdbTrustCenterNodeJoinTimeout, 
//  493  *              False to not remove devices.
//  494  *
//  495  * @return      none
//  496  */
//  497 void bdb_setTCRequireKeyExchange(bool isKeyExchangeRequired)
//  498 {
//  499   bdbAttributes.bdbTrustCenterRequireKeyExchange = isKeyExchangeRequired;
//  500 }
//  501 
//  502 
//  503 
//  504  /*********************************************************************
//  505  * @fn          bdb_TCAddJoiningDevice
//  506  *
//  507  * @brief       Add a joining device to the list of devices that must request a 
//  508  *              key before bdbTrustCenterNodeJoinTimeout.
//  509  *
//  510  * @param       parentAddr - Address of the parent device
//  511  * @param       JoiningExtAddr - IEEE address of the joining device
//  512  *
//  513  * @return      ZStatus_t - ZFailure No memory to allocate the device in the list
//  514  *                          ZInvalidParameter
//  515  */
//  516 ZStatus_t bdb_TCAddJoiningDevice(uint16 parentAddr, uint8* JoiningExtAddr)
//  517 {
//  518   bdb_joiningDeviceList_t* tempJoiningDescNode;
//  519   
//  520   if((parentAddr == INVALID_NODE_ADDR) || (JoiningExtAddr == NULL))
//  521   {
//  522     return ZInvalidParameter;
//  523   }
//  524   
//  525   //If the list was empty and element was allocated, then start the timer
//  526   if(bdb_joiningDeviceList == NULL)
//  527   {
//  528     bdb_joiningDeviceList = osal_mem_alloc(sizeof(bdb_joiningDeviceList_t));
//  529     if(bdb_joiningDeviceList == NULL)
//  530     {
//  531       return ZFailure;
//  532     }
//  533    
//  534     osal_start_reload_timer(bdb_TaskID,BDB_TC_JOIN_TIMEOUT,1000);
//  535     tempJoiningDescNode = bdb_joiningDeviceList;
//  536   }
//  537   //if the list was not empty then add the entry at the end of the list
//  538   else
//  539   {
//  540     tempJoiningDescNode = bdb_joiningDeviceList;
//  541     
//  542     //Validate that this is not already in the list... somehow
//  543     if(osal_memcmp(JoiningExtAddr,tempJoiningDescNode->bdbJoiningNodeEui64,Z_EXTADDR_LEN))
//  544     {
//  545       //The device added is already in the list, refresh its time and do nothing else
//  546       tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
//  547       return ZSuccess;
//  548     }
//  549     
//  550     while(tempJoiningDescNode->nextDev != NULL)
//  551     {
//  552       tempJoiningDescNode = tempJoiningDescNode->nextDev;
//  553       
//  554       //Validate that this is not already in the list... somehow
//  555       if(osal_memcmp(JoiningExtAddr,tempJoiningDescNode->bdbJoiningNodeEui64,Z_EXTADDR_LEN))
//  556       {
//  557         //The device added is already in the list, refresh its time and do nothing else
//  558         tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
//  559         return ZSuccess;
//  560       }
//  561     }
//  562     
//  563     tempJoiningDescNode->nextDev = osal_mem_alloc(sizeof(bdb_joiningDeviceList_t));
//  564     if(tempJoiningDescNode->nextDev == NULL)
//  565     {
//  566       return ZFailure;
//  567     }
//  568     
//  569     tempJoiningDescNode = tempJoiningDescNode->nextDev;
//  570   }
//  571   
//  572   if(pfnTCLinkKeyExchangeProcessCB)
//  573   {
//  574     bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
//  575     osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
//  576     bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_JOINING;
//  577     
//  578     bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
//  579   }
//  580   
//  581   tempJoiningDescNode->nextDev = NULL;
//  582   tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
//  583   tempJoiningDescNode->parentAddr = parentAddr;
//  584   osal_memcpy(tempJoiningDescNode->bdbJoiningNodeEui64, JoiningExtAddr, Z_EXTADDR_LEN);
//  585   
//  586   return ZSuccess;
//  587 }
//  588 
//  589 /****************************************************************************
//  590  * @fn          bdb_TCProcessJoiningList
//  591  *
//  592  * @brief       Process the timer to handle the joining devices if the TC link 
//  593  *              key is mandatory for all devices
//  594  *
//  595  * @param       none
//  596  *
//  597  * @return      none
//  598  */
//  599 void bdb_TCProcessJoiningList(void)
//  600 {
//  601   bdb_joiningDeviceList_t* tempJoiningDescNode;
//  602   
//  603   if(bdb_joiningDeviceList)
//  604   {
//  605     tempJoiningDescNode = bdb_joiningDeviceList;
//  606   
//  607     while(tempJoiningDescNode)
//  608     {
//  609       if(tempJoiningDescNode->NodeJoinTimeout)
//  610       {
//  611         tempJoiningDescNode->NodeJoinTimeout--;
//  612       }
//  613       
//  614       if(tempJoiningDescNode->NodeJoinTimeout == 0)
//  615       {
//  616         //Check if the key exchange is required 
//  617         if(bdb_doTrustCenterRequireKeyExchange())
//  618         {
//  619             AddrMgrEntry_t entry;
//  620             
//  621             entry.user = ADDRMGR_USER_DEFAULT;
//  622             osal_memcpy(entry.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
//  623             
//  624             if(AddrMgrEntryLookupExt(&entry))
//  625             {
//  626               ZDSecMgrAPSRemove(entry.nwkAddr,entry.extAddr,tempJoiningDescNode->parentAddr);
//  627             }
//  628         }
//  629         
//  630         //Expired device either is legacy device not using the TCLK entry or got 
//  631         //removed from the network because of timeout, eitherway it is not using
//  632         //TCLK entry neither the Security user in the address manager, so free the entry
//  633         //in both tables.
//  634         
//  635         uint16 keyNvIndex;
//  636         uint16 index;        
//  637         APSME_TCLKDevEntry_t TCLKDevEntry;
//  638         uint8 found;
//  639         
//  640         //Remove the entry in address manager
//  641         ZDSecMgrAddrClear(tempJoiningDescNode->bdbJoiningNodeEui64);
//  642         
//  643         //search for the entry in the TCLK table
//  644         keyNvIndex = APSME_SearchTCLinkKeyEntry(tempJoiningDescNode->bdbJoiningNodeEui64,&found, NULL);
//  645         
//  646         //If found, erase it.
//  647         if(found == TRUE)
//  648         {
//  649           osal_memset(&TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
//  650           TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
//  651           
//  652           //Increase the shift by one. Validate the maximum shift of the seed which is 15
//  653           index = keyNvIndex - ZCD_NV_TCLK_TABLE_START;
//  654           
//  655           TCLinkKeyFrmCntr[index].rxFrmCntr = 0;
//  656           TCLinkKeyFrmCntr[index].txFrmCntr = 0;
//  657           
//  658           //Update the entry
//  659           osal_nv_write(keyNvIndex,0,sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
//  660         }
//  661         
//  662         if(pfnTCLinkKeyExchangeProcessCB)
//  663         {
//  664           bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
//  665           osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
//  666           bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_EXCH_FAIL;
//  667           
//  668           bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
//  669         }
//  670        
//  671         //Free the device from the list
//  672         bdb_TCJoiningDeviceFree(tempJoiningDescNode);
//  673       }
//  674       tempJoiningDescNode = tempJoiningDescNode->nextDev;
//  675     }
//  676   }
//  677 
//  678   //we are done with the list
//  679   if(bdb_joiningDeviceList == NULL)
//  680   {
//  681     osal_stop_timerEx(bdb_TaskID,BDB_TC_JOIN_TIMEOUT);
//  682   }
//  683 }
//  684 
//  685 
//  686 
//  687 /****************************************************************************
//  688  * @fn          bdb_TCjoiningDeviceComplete
//  689  *
//  690  * @brief       This function frees a joining device from the list that has 
//  691  *              finished TC link key exchange process
//  692  *
//  693  * @param       JoiningExtAddr - Extended address of the device
//  694  *
//  695  * @return      none
//  696  */
//  697 void bdb_TCjoiningDeviceComplete(uint8* JoiningExtAddr)
//  698 {
//  699   bdb_joiningDeviceList_t* tempJoiningDescNode;
//  700   
//  701   if((bdb_joiningDeviceList != NULL) && (JoiningExtAddr != NULL))
//  702   {
//  703     tempJoiningDescNode = bdb_joiningDeviceList;
//  704     
//  705     while(tempJoiningDescNode != NULL)
//  706     {
//  707       if(osal_memcmp(tempJoiningDescNode->bdbJoiningNodeEui64,JoiningExtAddr,Z_EXTADDR_LEN))
//  708       {
//  709         if(pfnTCLinkKeyExchangeProcessCB)
//  710         {
//  711           bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
//  712           osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
//  713           bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_EXCH_SUCCESS;
//  714           
//  715           bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
//  716         }        
//  717         
//  718         bdb_TCJoiningDeviceFree(tempJoiningDescNode);
//  719         break;
//  720       }
//  721       tempJoiningDescNode = tempJoiningDescNode->nextDev;
//  722     }
//  723    
//  724     if(bdb_joiningDeviceList == NULL)
//  725     {
//  726       osal_stop_timerEx(bdb_TaskID,BDB_TC_JOIN_TIMEOUT);
//  727     }
//  728   }
//  729 }
//  730 
//  731 
//  732 
//  733 /****************************************************************************
//  734  * @fn          bdb_TCJoiningDeviceFree
//  735  *
//  736  * @brief       This function frees a joining device from the list.
//  737  *
//  738  * @param       ZSuccess - If the device was found and erased
//  739  * @param       ZInvalidParameter - Not found
//  740  *
//  741  * @return      none
//  742  */
//  743 ZStatus_t bdb_TCJoiningDeviceFree(bdb_joiningDeviceList_t* JoiningDeviceToRemove)
//  744 {
//  745   bdb_joiningDeviceList_t* descCurrent;
//  746   bdb_joiningDeviceList_t* descPrev;
//  747   
//  748   //validate empty list?
//  749   
//  750   //Is it the first?
//  751   if(osal_memcmp(bdb_joiningDeviceList->bdbJoiningNodeEui64, JoiningDeviceToRemove->bdbJoiningNodeEui64, Z_EXTADDR_LEN))
//  752   {
//  753     descCurrent = bdb_joiningDeviceList;
//  754     bdb_joiningDeviceList = bdb_joiningDeviceList->nextDev;
//  755     osal_mem_free( descCurrent );
//  756     return ZSuccess;
//  757   }
//  758   
//  759   descPrev = NULL;
//  760   descCurrent = bdb_joiningDeviceList;
//  761   
//  762   while(descCurrent != NULL)
//  763   {
//  764     if(osal_memcmp(descCurrent->nextDev->bdbJoiningNodeEui64, JoiningDeviceToRemove->bdbJoiningNodeEui64, Z_EXTADDR_LEN))
//  765     {
//  766       descPrev = descCurrent;
//  767       break;
//  768     }
//  769     descCurrent = descCurrent->nextDev;
//  770   }
//  771   if(descPrev == NULL)
//  772   {
//  773     //Not found
//  774     return ZInvalidParameter;
//  775   }
//  776   
//  777   descPrev->nextDev = descPrev->nextDev->nextDev;
//  778     
//  779   osal_mem_free( JoiningDeviceToRemove );
//  780   return ZSuccess;
//  781 
//  782 }
//  783 
//  784  /*********************************************************************
//  785  * @fn          bdb_setJoinUsesInstallCodeKey
//  786  *
//  787  * @brief       Set BDB attribute bdbJoinUsesInstallCodeKey.
//  788  *
//  789  * @param       set - If TRUE only devices with IC register in TC can join the 
//  790  *              nwk, otherwise devices may or not have a IC register
//  791  *
//  792  * @return      none
//  793  */
//  794 void bdb_setJoinUsesInstallCodeKey(bool set)
//  795 {
//  796   bdbAttributes.bdbJoinUsesInstallCodeKey = set;
//  797   if(set)
//  798   {
//  799     zgAllowInstallCodes = ZG_IC_MUST_USED;
//  800   }
//  801   else
//  802   {
//  803     zgAllowInstallCodes = ZG_IC_SUPPORTED_NOT_REQUIRED;
//  804   }
//  805 }
//  806 #endif
//  807 
//  808  /*********************************************************************
//  809  * @fn          bdb_StartCommissioning
//  810  *
//  811  * @brief       Start the commissioning process setting the commissioning mode given.
//  812  *
//  813  * @param       mode - refer to bdbCommissioningMode
//  814  *
//  815  * @return      none
//  816  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  817 void bdb_StartCommissioning(uint8 mode)
bdb_StartCommissioning:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function bdb_StartCommissioning
        CODE
//  818 {
        FUNCALL bdb_StartCommissioning, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_nwkSteeringDeviceOnNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_isbufset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, APSME_IsDistributedSecurity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, ZDOInitDeviceEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_setNodeIsOnANetwork
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_StartCommissioning, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 20
        MOV       A,#-0x14
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       ?V0,R1
//  819   //Application cannot request to set the device in initialization mode or parent lost
//  820   mode &= ~(BDB_COMMISSIONING_MODE_INITIALIZATION | BDB_COMMISSIONING_MODE_PARENT_LOST);
        ANL       ?V0,#0xcf
//  821     
//  822 #ifdef BDB_TL_INITIATOR
//  823   if ( touchlinkFNReset == TRUE )
        MOV       DPTR,#touchlinkFNReset
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       $+5
        LJMP      ??bdb_StartCommissioning_0 & 0xFFFF
//  824   {
//  825     return;
//  826   }
//  827 #else
//  828   //Commissioning mode used only for initiator
//  829   mode &= ~BDB_COMMISSIONING_MODE_INITIATOR_TL;
//  830 #endif
//  831   
//  832 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==0)    
//  833   //Commissioning mode used only for devices with F&B
//  834   mode &= ~BDB_COMMISSIONING_MODE_FINDING_BINDING;
//  835 #endif
//  836  
//  837   //If we have running process or the machine state is triggered, then just append and it will be excecuted
//  838   if((bdbAttributes.bdbCommissioningMode) || (osal_get_timeoutEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE)))
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        JNZ       ??bdb_StartCommissioning_1
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV       A,R2
        ORL       A,R3
        ORL       A,R4
        ORL       A,R5
        JZ        ??bdb_StartCommissioning_2
//  839   {
//  840 #if ZG_BUILD_ENDDEVICE_TYPE
//  841     if(ZG_DEVICE_ENDDEVICE_TYPE)
//  842     {
//  843       //Devices with parent lost are not allowed to perform actions
//  844       if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)
??bdb_StartCommissioning_1:
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.5
        JNC       $+5
        LJMP      ??bdb_StartCommissioning_0 & 0xFFFF
//  845       {
//  846         return;
//  847       }
//  848     }
//  849 #endif
//  850     
//  851     //If we are on the network and got requested to do nwk steering, we do not need to wait other process, 
//  852     // just send permit joining and report the application
//  853     if((bdbAttributes.bdbNodeIsOnANetwork) && (mode & BDB_COMMISSIONING_MODE_NWK_STEERING))
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        JZ        ??bdb_StartCommissioning_3
        MOV       A,?V0
        MOV       C,0xE0 /* A   */.1
        JNC       ??bdb_StartCommissioning_3
//  854     {
//  855       bdb_nwkSteeringDeviceOnNwk();
        ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
        LCALL     `??bdb_nwkSteeringDeviceOnNwk::?relay`; Banked call to: bdb_nwkSteeringDeviceOnNwk
//  856       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x4
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
//  857       
//  858       //Clean nwk steering
//  859       mode ^= BDB_COMMISSIONING_MODE_NWK_STEERING; 
        XRL       ?V0,#0x2
//  860     }
//  861     
//  862     //add the remaining valid commissioning modes requested, those will be process when bdb finish its current process
//  863     bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
??bdb_StartCommissioning_3:
        MOV       A,#0x3f
        ANL       A,?V0
        MOV       R0,A
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        ORL       A,R0
        MOVX      @DPTR,A
//  864     return;      
        LJMP      ??bdb_StartCommissioning_0 & 0xFFFF
//  865   }
//  866 
//  867   //Save the commissioning modes valid requested
//  868   bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
??bdb_StartCommissioning_2:
        MOV       A,#0x3f
        ANL       A,?V0
        MOV       R0,A
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        ORL       A,R0
        MOVX      @DPTR,A
//  869   
//  870   
//  871   //Start processing the initialization, once per power cycle.
//  872   if(!bdb_initialization)
        MOV       DPTR,#bdb_initialization
        MOVX      A,@DPTR
        JZ        $+5
        LJMP      ??bdb_StartCommissioning_4 & 0xFFFF
//  873   {
//  874     bdb_initialization = TRUE;
        MOV       DPTR,#bdb_initialization
        MOV       A,#0x1
        MOVX      @DPTR,A
//  875     
//  876 #ifdef BDB_REPORTING
//  877     //Delete NV data if startup was with factory reset
//  878     if(ZDO_INITDEV_NEW_NETWORK_STATE == ZDApp_ReadNetworkRestoreState())
//  879     {
//  880       //Factory reset bdb reporting NV data
//  881       uint16 attrRepNvLen = osal_nv_item_len( ZCD_NV_BDBREPORTINGCONFIG );
//  882       if ( attrRepNvLen > 0 )
//  883       {
//  884         osal_nv_delete( ZCD_NV_BDBREPORTINGCONFIG, attrRepNvLen );
//  885       }
//  886     }
//  887 
//  888     //Construct the Endpoint-cluster array
//  889     bdb_RepConstructReportingData();
//  890 #endif //BDB_REPORTING
//  891     
//  892     osal_nv_read(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
        ; Setup parameters for call to function osal_nv_read
        MOV       ?V2,#(bdbAttributes + 14) & 0xff
        MOV       ?V3,#((bdbAttributes + 14) >> 8) & 0xff
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V2,#0x1
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x55
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,R1
//  893     
//  894     //Are we on a network
//  895     if(bdbAttributes.bdbNodeIsOnANetwork == TRUE)
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??bdb_StartCommissioning_4 & 0xFFFF
//  896     {
//  897 #ifdef ZG_BUILD_JOINING_TYPE
//  898       //Only for joining devices validate the joining procedure
//  899       if(ZG_DEVICE_JOINING_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??bdb_StartCommissioning_5
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x2
        JZ        $+5
        LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
//  900       {
//  901         //If we got into a network
//  902         if(!osal_isbufset( AIB_apsTrustCenterAddress, 0x00, Z_EXTADDR_LEN ))
??bdb_StartCommissioning_5:
        ; Setup parameters for call to function osal_isbufset
        MOV       R4,#0x8
        MOV       R1,#0x0
        MOV       DPTR,#AIB_apsTrustCenterAddress
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??osal_isbufset::?relay`; Banked call to: osal_isbufset
        MOV       A,R1
        JZ        $+5
        LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
//  903         {
//  904           //Which is not distributed
//  905           if(!APSME_IsDistributedSecurity())
        ; Setup parameters for call to function APSME_IsDistributedSecurity
        LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
        MOV       A,R1
        JZ        $+5
        LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
//  906           {
//  907             uint8 keyAttributes;
//  908             osal_nv_read(ZCD_NV_TCLK_TABLE_START, osal_offsetof(APSME_TCLKDevEntry_t,keyAttributes), sizeof(uint8), &keyAttributes);
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V2,#0x1
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R2,#0x11
        MOV       R3,#0x1
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,R1
//  909             //If we must perform the TCLK exchange and we didn't complete it, then reset to FN
//  910             if(requestNewTrustCenterLinkKey && (keyAttributes != ZG_NON_R21_NWK_JOINED) && (keyAttributes != ZG_VERIFIED_KEY))
        MOV       DPTR,#requestNewTrustCenterLinkKey
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        XRL       A,#0xfd
        JNZ       $+5
        LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       $+5
        LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
//  911             {
//  912               //Force to initialize the entry
//  913               APSME_TCLKDevEntry_t APSME_TCLKDevEntry;
//  914               
//  915               osal_memset(&APSME_TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x13
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  916               APSME_TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x1
        MOVX      @DPTR,A
//  917               osal_nv_write(ZCD_NV_TCLK_TABLE_START, 0, sizeof(APSME_TCLKDevEntry_t), &APSME_TCLKDevEntry);
        ; Setup parameters for call to function osal_nv_write
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V2,#0x13
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x11
        MOV       R3,#0x1
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,R1
//  918               TCLinkKeyFrmCntr[0].txFrmCntr = 0;
        MOV       DPTR,#TCLinkKeyFrmCntr
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
//  919               TCLinkKeyFrmCntr[0].rxFrmCntr = 0;
        MOV       DPTR,#TCLinkKeyFrmCntr + 4
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
//  920               
//  921               
//  922               //reset the device parameters to FN
//  923               bdbAttributes.bdbNodeIsOnANetwork = FALSE;
        MOV       DPTR,#bdbAttributes + 14
        MOV       A,#0x0
        MOVX      @DPTR,A
//  924               osal_nv_write(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V2,#(bdbAttributes + 14) & 0xff
        MOV       ?V3,#((bdbAttributes + 14) >> 8) & 0xff
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V2,#0x1
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x55
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,R1
//  925               zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x3
        MOV       R1,#-0x1
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
        MOV       A,R1
//  926               
//  927               //Then start the commissioning process requested
//  928               bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x0
        MOVX      @DPTR,A
//  929               osal_set_event( bdb_TaskID, BDB_CHANGE_COMMISSIONING_STATE );
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
        MOV       A,R1
//  930               return;
        SJMP      ??bdb_StartCommissioning_0
//  931             }
//  932           }
//  933         }
//  934       }
//  935 #endif //ZG_BUILD_JOINING_TYPE
//  936       
//  937       //Set the initialization
//  938       bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_INITIALIZATION;
??bdb_StartCommissioning_6:
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.4
        MOVX      @DPTR,A
//  939       bdbCommissioningProcedureState.bdbCommissioningState = BDB_INITIALIZATION;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x7
        MOVX      @DPTR,A
//  940       bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
        MOV       A,#0x3f
        ANL       A,?V0
        MOV       R0,A
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        ORL       A,R0
        MOVX      @DPTR,A
//  941       
//  942       if(ZDOInitDevice(0) == ZDO_INITDEV_RESTORED_NETWORK_STATE)
        ; Setup parameters for call to function ZDOInitDeviceEx
        MOV       R1,#0x0
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
        MOV       A,R1
        JZ        ??bdb_StartCommissioning_0
//  943       {
//  944 #ifdef BDB_REPORTING
//  945         //Mark the clusterEndpoint entries that have binding, starts reporting if at least one entry was marked
//  946         bdb_RepUpdateMarkBindings();
//  947 #endif
//  948         return;
//  949       }
//  950       bdb_setNodeIsOnANetwork(FALSE);  
        ; Setup parameters for call to function bdb_setNodeIsOnANetwork
        MOV       R1,#0x0
        LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
//  951       //Not in the network
//  952       bdb_reportCommissioningState(BDB_INITIALIZATION,FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x7
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
//  953       return;
        SJMP      ??bdb_StartCommissioning_0
//  954     }
//  955   }
//  956 
//  957   //Got requested only to initialize, if so, report that it failed
//  958   if(bdbAttributes.bdbCommissioningMode == 0)
??bdb_StartCommissioning_4:
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        JNZ       ??bdb_StartCommissioning_7
//  959   {
//  960     //Set the initialization state and report it to fail
//  961     bdbCommissioningProcedureState.bdbCommissioningState = BDB_INITIALIZATION;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x7
        MOVX      @DPTR,A
//  962     bdb_reportCommissioningState(BDB_INITIALIZATION,FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x7
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
//  963     return;
        SJMP      ??bdb_StartCommissioning_0
//  964   }
//  965 
//  966   
//  967   //Start the commissioning process
//  968   bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
??bdb_StartCommissioning_7:
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x0
        MOVX      @DPTR,A
//  969   osal_set_event( bdb_TaskID, BDB_CHANGE_COMMISSIONING_STATE );
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
        MOV       A,R1
//  970 }
??bdb_StartCommissioning_0:
        MOV       A,#0x14
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock5
//  971 
//  972 
//  973  /*********************************************************************
//  974  * @fn          bdb_NotifyCommissioningModeStart
//  975  *
//  976  * @brief       Notify the user about a commissioning method just started
//  977  *
//  978  * @param       commissioningMode
//  979  *
//  980  * @return      none
//  981  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  982 void bdb_NotifyCommissioningModeStart(uint8 commissioningMode)
bdb_NotifyCommissioningModeStart:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function bdb_NotifyCommissioningModeStart
        CODE
//  983 {
        FUNCALL bdb_NotifyCommissioningModeStart, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 3
        MOV       A,#-0x3
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       A,R1
        MOV       R6,A
//  984   bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
//  985 
//  986   bdbCommissioningModeMsg.bdbCommissioningMode = commissioningMode;
        MOV       A,R6
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  987   bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_IN_PROGRESS;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x1
        MOVX      @DPTR,A
//  988   //Remaining commissioning modes are set just before the call to the application to avoid race conditions
//  989 
//  990   bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
        ; Setup parameters for call to function bdb_SendMsg
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       R4,#0x3
        MOV       R3,#0x0
        MOV       R2,#0xa
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  991 }
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock6
//  992 
//  993 
//  994 
//  995 #if (ZG_BUILD_JOINING_TYPE)
//  996  /*********************************************************************
//  997  * @fn          bdb_setNodeJoinLinkKeyType
//  998  *
//  999  * @brief       Set the key type in use in the network joined. Global centralized key is used by default
// 1000  *
// 1001  * @param       none
// 1002  *
// 1003  * @return      none
// 1004  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1005 void bdb_setNodeJoinLinkKeyType(uint8 KeyType)
bdb_setNodeJoinLinkKeyType:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function bdb_setNodeJoinLinkKeyType
        CODE
// 1006 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1007   bdbAttributes.bdbNodeJoinLinkKeyType = KeyType;
        MOV       A,R1
        MOV       DPTR,#bdbAttributes + 15
        MOVX      @DPTR,A
// 1008 }
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock7
// 1009 #endif
// 1010 
// 1011  /*********************************************************************
// 1012  * @fn          bdb_setFN
// 1013  *
// 1014  * @brief       Set configuration for FN. This FN configuration will be perfome 
// 1015  *              upon call to ZDOInitDevice
// 1016  *
// 1017  * @param       none
// 1018  *
// 1019  * @return      none
// 1020  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1021 void bdb_setFN(void)
bdb_setFN:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function bdb_setFN
        CODE
// 1022 {
        FUNCALL bdb_setFN, bdb_setNodeIsOnANetwork
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_setFN, touchLink_InitFreeRanges
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_setFN, touchLink_UpdateNV
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_setFN, zgWriteStartupOptions
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1023   bdb_setNodeIsOnANetwork(FALSE);
        ; Setup parameters for call to function bdb_setNodeIsOnANetwork
        MOV       R1,#0x0
        LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
// 1024 
// 1025 #if defined ( INTER_PAN ) && defined ( BDB_TL_INITIATOR )
// 1026     touchLink_InitFreeRanges( TRUE );
        ; Setup parameters for call to function touchLink_InitFreeRanges
        MOV       R1,#0x1
        LCALL     `??touchLink_InitFreeRanges::?relay`; Banked call to: touchLink_InitFreeRanges
// 1027     touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
        ; Setup parameters for call to function touchLink_UpdateNV
        MOV       R1,#0x2
        LCALL     `??touchLink_UpdateNV::?relay`; Banked call to: touchLink_UpdateNV
// 1028 #endif
// 1029 #if defined ( INTER_PAN ) && defined ( BDB_TL_TARGET ) 
// 1030     touchLink_InitFreeRanges( FALSE );
// 1031     touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
// 1032 #endif
// 1033 
// 1034   //Set the device as factory new
// 1035   zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x3
        MOV       R1,#-0x1
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
        MOV       A,R1
// 1036 }
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock8
// 1037 
// 1038  /*********************************************************************
// 1039  * @fn          bdb_resetLocalAction
// 1040  *
// 1041  * @brief       Application interface to perform BDB Reset to FN.
// 1042  *
// 1043  * @param       none
// 1044  *
// 1045  * @return      none
// 1046  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1047 void bdb_resetLocalAction(void)
bdb_resetLocalAction:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function bdb_resetLocalAction
        CODE
// 1048 {
        FUNCALL bdb_resetLocalAction, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_resetLocalAction, bdb_setFN
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_resetLocalAction, NLME_LeaveReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_resetLocalAction, bdb_setFN
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_resetLocalAction, ZDApp_ResetTimerStart
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 5
        MOV       A,#-0x5
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 5)
// 1049   //Process reset as nwk leave if the device is on the network and is able to process it
// 1050   if((ZG_BUILD_JOINING_TYPE) && (bdbAttributes.bdbNodeIsOnANetwork) && (!(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)))
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        JZ        ??bdb_resetLocalAction_0
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.5
        JC        ??bdb_resetLocalAction_0
// 1051   {
// 1052     NLME_LeaveReq_t leaveReq;
// 1053     // Set every field to 0
// 1054     osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x5
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 1055     
// 1056     bdb_setFN();
        ; Setup parameters for call to function bdb_setFN
        LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
// 1057       
// 1058     NLME_LeaveReq( &leaveReq );
        ; Setup parameters for call to function NLME_LeaveReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
        MOV       A,R1
// 1059     
// 1060     return;
        SJMP      ??bdb_resetLocalAction_1
// 1061   }
// 1062   else
// 1063   {
// 1064     bdb_setFN();
??bdb_resetLocalAction_0:
        ; Setup parameters for call to function bdb_setFN
        LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
// 1065     
// 1066     ZDApp_ResetTimerStart( 500 );
        ; Setup parameters for call to function ZDApp_ResetTimerStart
        MOV       R2,#-0xc
        MOV       R3,#0x1
        LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
// 1067   }
// 1068 }
??bdb_resetLocalAction_1:
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock9
// 1069 
// 1070 
// 1071  /*********************************************************************
// 1072  * @fn          bdb_parentLost
// 1073  *
// 1074  * @brief       Notify bdb that connection with parent is lost
// 1075  *
// 1076  * @return      none
// 1077  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1078 void bdb_parentLost(void)
bdb_parentLost:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function bdb_parentLost
        CODE
// 1079 {
        FUNCALL bdb_parentLost, bdb_nwkDescFree
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_parentLost, nwk_desc_list_free
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_parentLost, bdb_reportCommissioningState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_parentLost, NLME_OrphanStateSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_parentLost, ZDApp_ChangeState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_parentLost, ZMacSetReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_parentLost, bdb_reportCommissioningState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 1)
// 1080 #if ZG_BUILD_ENDDEVICE_TYPE
// 1081   if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1082   {
// 1083     while(pBDBListNwk)
??bdb_parentLost_0:
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_parentLost_1
// 1084     {
// 1085       bdb_nwkDescFree(pBDBListNwk);
        ; Setup parameters for call to function bdb_nwkDescFree
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
        MOV       A,R1
        SJMP      ??bdb_parentLost_0
// 1086     }
// 1087     
// 1088     nwk_desc_list_free();  
??bdb_parentLost_1:
        ; Setup parameters for call to function nwk_desc_list_free
        LCALL     `??nwk_desc_list_free::?relay`; Banked call to: nwk_desc_list_free
// 1089     if(bdbCommissioningProcedureState.bdbCommissioningState != BDB_PARENT_LOST)
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,#0x8
        JZ        ??bdb_parentLost_2
// 1090     {
// 1091       //If parent lost during TCLK exchange, then report TCLK exchange fail
// 1092       if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE)
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??bdb_parentLost_3
// 1093       {
// 1094         bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x1
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 1095         return;
        SJMP      ??bdb_parentLost_4
// 1096       }
// 1097       bdbCommissioningProcedureState.bdb_ParentLostSavedState = bdbCommissioningProcedureState.bdbCommissioningState;
??bdb_parentLost_3:
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        MOV       DPTR,#bdbCommissioningProcedureState + 3
        MOVX      @DPTR,A
// 1098       
// 1099     }
// 1100     bdbCommissioningProcedureState.bdbCommissioningState = BDB_PARENT_LOST;
??bdb_parentLost_2:
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x8
        MOVX      @DPTR,A
// 1101     NLME_OrphanStateSet();
        ; Setup parameters for call to function NLME_OrphanStateSet
        LCALL     `??NLME_OrphanStateSet::?relay`; Banked call to: NLME_OrphanStateSet
// 1102     ZDApp_ChangeState( DEV_NWK_ORPHAN );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0xa
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1103     
// 1104     // turn receiver off while in orphan state
// 1105     byte temp = FALSE;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1106     ZMacSetReq(ZMacRxOnIdle, &temp);
        ; Setup parameters for call to function ZMacSetReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x52
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
        MOV       A,R1
// 1107     
// 1108     bdb_reportCommissioningState(BDB_PARENT_LOST,FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x8
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 1109   }
// 1110 #endif
// 1111 }
??bdb_parentLost_4:
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock10
// 1112 
// 1113 
// 1114 
// 1115 
// 1116 
// 1117  /*********************************************************************
// 1118  * @fn          bdb_NetworkRestoredResumeState
// 1119  *
// 1120  * @brief       Restore the state of child device after parent lost
// 1121  *
// 1122  * @return      none
// 1123  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1124 void bdb_NetworkRestoredResumeState(void)
bdb_NetworkRestoredResumeState:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function bdb_NetworkRestoredResumeState
        CODE
// 1125 {
        FUNCALL bdb_NetworkRestoredResumeState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1126 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)   
// 1127 #if ZG_BUILD_ENDDEVICE_TYPE
// 1128   if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1129   {
// 1130     uint8 restoreSimpleDesc = FALSE;
        MOV       R6,#0x0
// 1131     //If restored when F&B still enabled, then restore the simple descriptors attempts
// 1132     if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??bdb_NetworkRestoredResumeState_0
// 1133     {
// 1134       bdbFindingBindingRespondent_t  *pRespondentTemp = NULL;
        MOV       R0,#0x0
        MOV       R1,#0x0
// 1135       
// 1136       pRespondentTemp = pRespondentHead;
        MOV       DPTR,#pRespondentHead
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        MOV       R0,A
        MOV       A,R3
        MOV       R1,A
// 1137       
// 1138       while(pRespondentTemp != NULL)
??bdb_NetworkRestoredResumeState_1:
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_NetworkRestoredResumeState_0
// 1139       {
// 1140         if(pRespondentTemp->attempts & FINDING_AND_BINDING_PARENT_LOST)
        MOV       A,R0
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.6
        JNC       ??bdb_NetworkRestoredResumeState_2
// 1141         {
// 1142           pRespondentTemp->attempts &= ~FINDING_AND_BINDING_PARENT_LOST;
        MOV       A,R0
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.6
        MOVX      @DPTR,A
// 1143           restoreSimpleDesc = TRUE;
        MOV       R6,#0x1
// 1144         }
// 1145         pRespondentTemp = pRespondentTemp->pNext;
??bdb_NetworkRestoredResumeState_2:
        MOV       A,R0
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        SJMP      ??bdb_NetworkRestoredResumeState_1
// 1146       }
// 1147     }
// 1148     if(restoreSimpleDesc)
??bdb_NetworkRestoredResumeState_0:
        MOV       A,R6
        JZ        ??bdb_NetworkRestoredResumeState_3
// 1149     {
// 1150       //Restore the simple Descriptor sending after 1 second of restoring the network
// 1151       osal_start_timerEx(bdb_TaskID,BDB_RESPONDENT_PROCESS_TIMEOUT, 1000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3e8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       R2,#0x0
        MOV       R3,#0x40
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        MOV       A,R1
// 1152     }
// 1153   }
// 1154 #endif
// 1155 #endif
// 1156 }
??bdb_NetworkRestoredResumeState_3:
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock11
// 1157 
// 1158 #if ZG_BUILD_ENDDEVICE_TYPE
// 1159  /*********************************************************************
// 1160  * @fn          bdb_ZedAttemptRecoverNwk
// 1161  *
// 1162  * @brief       Instruct the ZED to try to rejoin its previews network
// 1163  *
// 1164  * @return      success if the attempt is being excecuted
// 1165  *              False if device do not have nwk parameters to perform this action
// 1166  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1167 uint8 bdb_ZedAttemptRecoverNwk(void)
bdb_ZedAttemptRecoverNwk:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function bdb_ZedAttemptRecoverNwk
        CODE
// 1168 {
        FUNCALL bdb_ZedAttemptRecoverNwk, ZDOInitDeviceEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1169   if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1170   {
// 1171     if(bdbAttributes.bdbNodeIsOnANetwork)
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        JZ        ??bdb_ZedAttemptRecoverNwk_0
// 1172     {
// 1173       if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST)
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,#0x8
        JNZ       ??bdb_ZedAttemptRecoverNwk_0
// 1174       {
// 1175         if(ZDOInitDevice(0) == ZDO_INITDEV_RESTORED_NETWORK_STATE)
        ; Setup parameters for call to function ZDOInitDeviceEx
        MOV       R1,#0x0
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
        MOV       A,R1
        JNZ       ??bdb_ZedAttemptRecoverNwk_0
// 1176         {
// 1177           return ZSuccess;
        MOV       R1,#0x0
        SJMP      ??bdb_ZedAttemptRecoverNwk_1
// 1178         }
// 1179       }
// 1180     }
// 1181   }
// 1182   return ZFailure;
??bdb_ZedAttemptRecoverNwk_0:
        MOV       R1,#0x1
??bdb_ZedAttemptRecoverNwk_1:
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
// 1183 }
          CFI EndBlock cfiBlock12
// 1184 
// 1185 #endif
// 1186 
// 1187  /*********************************************************************
// 1188  * @fn          bdb_reportCommissioningState
// 1189  *
// 1190  * @brief       Process the result of a BDB main state attempt.
// 1191  *
// 1192  * @param       bdbCommissioningState - MainState that is issuing fail
// 1193  * @param       didSuccess - TRUE if the main state were success, FALSE otherwise
// 1194  *
// 1195  * @return      none
// 1196  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1197 void bdb_reportCommissioningState(uint8 bdbCommissioningState,bool didSuccess)
bdb_reportCommissioningState:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function bdb_reportCommissioningState
        CODE
// 1198 {
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_nwkDescFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_setFN
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, NLME_ResetRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_nwkDescFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_getRespondentRetry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_zclRespondentListClean
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, nwk_setStateIdle
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_RestoreNwkSecMaterial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_isDeviceNonFactoryNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_NetworkRestoredResumeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_reportCommissioningState, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 4
        MOV       A,#-0x4
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
        MOV       R6,A
        MOV       A,R2
        MOV       R7,A
// 1199   bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
// 1200   //Process only if we are in that state, or if we are on parent lost and processing F&B
// 1201   if((bdbCommissioningProcedureState.bdbCommissioningState == bdbCommissioningState)
// 1202      || ((bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST) && (bdbCommissioningProcedureState.bdb_ParentLostSavedState == BDB_COMMISSIONING_STATE_FINDING_BINDING)))
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,R6
        JZ        ??bdb_reportCommissioningState_0
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,#0x8
        JZ        $+5
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
        MOV       DPTR,#bdbCommissioningProcedureState + 3
        MOVX      A,@DPTR
        XRL       A,#0x6
        JZ        $+5
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
// 1203   {
// 1204     switch(bdbCommissioningState)
??bdb_reportCommissioningState_0:
        MOV       A,R6
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_reportCommissioningState_2 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_reportCommissioningState_3 & 0xFFFF
        DEC       A
        JZ        ??bdb_reportCommissioningState_4
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_reportCommissioningState_5 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_reportCommissioningState_6 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_reportCommissioningState_7 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_reportCommissioningState_8 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_reportCommissioningState_9 & 0xFFFF
        LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
// 1205     {
// 1206 #if (ZG_BUILD_JOINING_TYPE)
// 1207       case BDB_COMMISSIONING_STATE_JOINING:
// 1208         if(ZG_DEVICE_JOINING_TYPE)
??bdb_reportCommissioningState_4:
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??bdb_reportCommissioningState_11
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x2
        JZ        $+5
        LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
// 1209         {
// 1210           //Prepare for the next state or commissioning mode to be excecuted
// 1211           osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
??bdb_reportCommissioningState_11:
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
// 1212 
// 1213           if(didSuccess)
        MOV       A,R7
        JZ        ??bdb_reportCommissioningState_12
// 1214           {
// 1215             //Next state is TC link key exchange
// 1216             bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1217             //Free the list of nwk discovered
// 1218             while(pBDBListNwk)
??bdb_reportCommissioningState_13:
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_reportCommissioningState_14
// 1219             {
// 1220               bdb_nwkDescFree(pBDBListNwk);
        ; Setup parameters for call to function bdb_nwkDescFree
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
        MOV       A,R1
        SJMP      ??bdb_reportCommissioningState_13
// 1221             }
// 1222             
// 1223             //Set the poll rate of the ZED joining device to 1 second to allow TCLK 
// 1224             //exchange be perfomed successfully in cases in which application has a 
// 1225             //slow pollrate
// 1226             NLME_SetPollRate(TCLK_POLL_RATE);
??bdb_reportCommissioningState_14:
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#__Constant_3e8
        LCALL     ?XLOAD_R2345
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1227             
// 1228             //No notification in this step
// 1229             return;
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
// 1230           } 
// 1231           else
// 1232           {
// 1233             uint8 temp = FALSE;
??bdb_reportCommissioningState_12:
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1234             //If fail, then restore poll rate
// 1235             NLME_SetPollRate(POLL_RATE);
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#__Constant_3e8
        LCALL     ?XLOAD_R2345
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1236             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0x2
        MOVX      @DPTR,A
// 1237             bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1238             bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1239             bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_STEERING;
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.1
        MOVX      @DPTR,A
// 1240             
// 1241             //Turn off the radio
// 1242             ZMacSetReq(ZMacRxOnIdle, &temp);
        ; Setup parameters for call to function ZMacSetReq
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        MOV       R1,#0x52
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
        MOV       A,R1
// 1243             //Set the device to FN, to start as new for subsequent attempts
// 1244             bdb_setFN();
        ; Setup parameters for call to function bdb_setFN
        LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
// 1245             NLME_ResetRequest();
        ; Setup parameters for call to function NLME_ResetRequest
        LCALL     `??NLME_ResetRequest::?relay`; Banked call to: NLME_ResetRequest
        MOV       A,R1
// 1246             ZDApp_ChangeState( DEV_HOLD );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x0
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1247             
// 1248             //Free the list of nwk discovered
// 1249             while(pBDBListNwk)
??bdb_reportCommissioningState_15:
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_reportCommissioningState_16
// 1250             {
// 1251               bdb_nwkDescFree(pBDBListNwk);
        ; Setup parameters for call to function bdb_nwkDescFree
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
        MOV       A,R1
        SJMP      ??bdb_reportCommissioningState_15
// 1252             }
// 1253           }
// 1254         }
// 1255       break;
??bdb_reportCommissioningState_16:
        LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
// 1256 
// 1257       case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
// 1258         if(ZG_DEVICE_JOINING_TYPE)
??bdb_reportCommissioningState_2:
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??bdb_reportCommissioningState_17
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??bdb_reportCommissioningState_18
// 1259         {
// 1260           if(didSuccess)
??bdb_reportCommissioningState_17:
        MOV       A,R7
        JZ        ??bdb_reportCommissioningState_19
// 1261           {
// 1262             //Clear any setting that would set the device as FN
// 1263             zgWriteStartupOptions(ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);            
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x3
        MOV       R1,#0x0
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
        MOV       A,R1
// 1264             
// 1265             //Next state is nwk steering on the nwk (permit joining)
// 1266             bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_STEERING_ON_NWK;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x4
        MOVX      @DPTR,A
// 1267             osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE, 50);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
// 1268             
// 1269             //Set the poll rate to the application default after TCLK success
// 1270             NLME_SetPollRate(POLL_RATE);
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#__Constant_3e8
        LCALL     ?XLOAD_R2345
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1271 
// 1272             osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x10
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
// 1273             //No notification to the user is needed
// 1274             return;
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
// 1275           }
// 1276           else
// 1277           {
// 1278             bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
??bdb_reportCommissioningState_19:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1279             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_TCLK_EX_FAILURE;
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0x7
        MOVX      @DPTR,A
// 1280             
// 1281             osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x10
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
// 1282            
// 1283             //No process shall be attempted after this fail
// 1284             bdbAttributes.bdbCommissioningMode = 0;
        MOV       DPTR,#bdbAttributes + 11
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1285             
// 1286             //Fill the context for the user notification
// 1287             osal_start_timerEx(bdb_TaskID,BDB_TC_LINK_KEY_EXCHANGE_FAIL,BDB_TC_LINK_KEY_EXCHANGE_FAIL_LEAVE_TIMEOUT);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_1388
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R2,#0x2
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
// 1288           }
// 1289         }
// 1290       break;
??bdb_reportCommissioningState_18:
        LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
// 1291 #endif
// 1292       
// 1293       case BDB_COMMISSIONING_STATE_STEERING_ON_NWK:
// 1294         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
??bdb_reportCommissioningState_5:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1295         if(didSuccess)
        MOV       A,R7
        JZ        ??bdb_reportCommissioningState_20
// 1296         {
// 1297           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1298           
// 1299 #if (ZG_BUILD_RTR_TYPE)          
// 1300           //Update ZDApp state
// 1301           if(ZG_DEVICE_RTRONLY_TYPE)
// 1302           {          
// 1303             ZDApp_ChangeState( DEV_ROUTER );
// 1304           }
// 1305 #endif
// 1306 #if (ZG_BUILD_ENDDEVICE_TYPE)
// 1307           if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1308           {
// 1309             ZDApp_ChangeState( DEV_END_DEVICE );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x6
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1310           }
// 1311 #endif
// 1312         }
// 1313 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1314         else
// 1315         {
// 1316           if(ZG_DEVICE_COORDINATOR_TYPE)
// 1317           {
// 1318             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
// 1319           }
// 1320         }
// 1321 #endif
// 1322         
// 1323         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
??bdb_reportCommissioningState_20:
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1324         osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
// 1325         bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_STEERING;
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.1
        MOVX      @DPTR,A
// 1326       break;
        LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
// 1327       
// 1328       case BDB_COMMISSIONING_STATE_FORMATION:
// 1329         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FORMATION;
??bdb_reportCommissioningState_6:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
// 1330 
// 1331         if(didSuccess)
        MOV       A,R7
        JZ        ??bdb_reportCommissioningState_21
// 1332         {
// 1333           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1334 
// 1335           //Clear any setting that would set the device as FN
// 1336           zgWriteStartupOptions(ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);          
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x3
        MOV       R1,#0x0
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
        MOV       A,R1
        SJMP      ??bdb_reportCommissioningState_22
// 1337           
// 1338            //Update ZDApp State
// 1339 #if (ZG_BUILD_RTR_TYPE)
// 1340           if(ZG_DEVICE_RTRONLY_TYPE)
// 1341           {          
// 1342             ZDApp_ChangeState( DEV_ROUTER );
// 1343           }
// 1344 #endif    
// 1345 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1346           if(ZG_DEVICE_COORDINATOR_TYPE)
// 1347           {          
// 1348             ZDApp_ChangeState( DEV_ZB_COORD );
// 1349           }     
// 1350 #endif
// 1351         }
// 1352         else
// 1353         {
// 1354           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_FORMATION_FAILURE;
??bdb_reportCommissioningState_21:
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0x8
        MOVX      @DPTR,A
// 1355           //If not on the nwk, then restart the nwk parameters
// 1356 #if (ZG_BUILD_RTR_TYPE)
// 1357           if(ZG_DEVICE_RTR_TYPE)
// 1358           {           
// 1359             if(!bdbAttributes.bdbNodeIsOnANetwork)
// 1360             {
// 1361               uint8 temp = FALSE;
// 1362               //Turn off the radio
// 1363               ZMacSetReq(ZMacRxOnIdle, &temp);
// 1364               //Set the device to FN, to start as new for subsequent attempts
// 1365               bdb_setFN();
// 1366               NLME_ResetRequest();
// 1367               ZDApp_ChangeState( DEV_HOLD );
// 1368             }
// 1369           }
// 1370 #endif
// 1371         }
// 1372         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
??bdb_reportCommissioningState_22:
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1373         osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
// 1374         bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_FORMATION;
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.2
        MOVX      @DPTR,A
// 1375       break;  
        LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
// 1376       
// 1377 
// 1378       case BDB_COMMISSIONING_STATE_FINDING_BINDING:
// 1379 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
// 1380         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
??bdb_reportCommissioningState_7:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x3
        MOVX      @DPTR,A
// 1381 
// 1382         //Do not notify the status if we have another identify to send
// 1383         if(bdbAttributes.bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
        MOV       DPTR,#bdbAttributes + 10
        MOVX      A,@DPTR
        JNZ       ??bdb_reportCommissioningState_23
// 1384         {
// 1385           //Success at least once during F&B as initiator, mark it
// 1386           bdb_FBStateSuccessLatch = TRUE;
        MOV       DPTR,#bdb_FBStateSuccessLatch
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1387         }        
// 1388         
// 1389         //Will we process another indentify?
// 1390         if(((FINDING_AND_BINDING_PERIODIC_ENABLE == FALSE) || (bdb_FB_InitiatorCurrentCyclesNumber == 0)) && (bdb_getRespondentRetry(pRespondentHead) == NULL) && (osal_get_timeoutEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT) == 0))
??bdb_reportCommissioningState_23:
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX      A,@DPTR
        JZ        $+5
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
        ; Setup parameters for call to function bdb_getRespondentRetry
        MOV       DPTR,#pRespondentHead
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,?V0
        ORL       A,?V1
        JZ        $+5
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x0
        MOV       R3,#0x40
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV       A,R2
        ORL       A,R3
        ORL       A,R4
        ORL       A,R5
        JZ        $+5
        LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
// 1391         {
// 1392           // Dealocate respondent list and clean all the F&B process
// 1393           pRespondentCurr = NULL;
        MOV       DPTR,#pRespondentCurr
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1394           pRespondentNext = NULL;
        MOV       DPTR,#pRespondentNext
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1395           bdb_zclRespondentListClean( &pRespondentHead );
        ; Setup parameters for call to function bdb_zclRespondentListClean
        MOV       R2,#pRespondentHead & 0xff
        MOV       R3,#(pRespondentHead >> 8) & 0xff
        LCALL     `??bdb_zclRespondentListClean::?relay`; Banked call to: bdb_zclRespondentListClean
// 1396           osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x40
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
// 1397           
// 1398           //Report success if in any of the attempts we got success, regardless that we did receive no rsp on the last attempt
// 1399           if(bdb_FBStateSuccessLatch && (bdbAttributes.bdbCommissioningStatus == BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE))
        MOV       DPTR,#bdb_FBStateSuccessLatch
        MOVX      A,@DPTR
        JZ        ??bdb_reportCommissioningState_24
        MOV       DPTR,#bdbAttributes + 10
        MOVX      A,@DPTR
        XRL       A,#0xb
        JNZ       ??bdb_reportCommissioningState_24
// 1400           {
// 1401             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1402           }
// 1403           
// 1404           //Set default state
// 1405           bdb_FBStateSuccessLatch = FALSE;
??bdb_reportCommissioningState_24:
        MOV       DPTR,#bdb_FBStateSuccessLatch
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1406           
// 1407           //Resume BDB machine state only if we were in F&B, if we were on parent lost, only clean the commissioning mode and remove from bdb_ParentLostSavedState
// 1408           if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??bdb_reportCommissioningState_25
// 1409           {
// 1410             bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1411             osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50); 
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
        SJMP      ??bdb_reportCommissioningState_26
// 1412           }
// 1413           else if(bdbCommissioningProcedureState.bdb_ParentLostSavedState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
??bdb_reportCommissioningState_25:
        MOV       DPTR,#bdbCommissioningProcedureState + 3
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??bdb_reportCommissioningState_26
// 1414           {
// 1415             bdbCommissioningProcedureState.bdb_ParentLostSavedState = BDB_COMMISSIONING_STATE_START_RESUME;
        MOV       DPTR,#bdbCommissioningProcedureState + 3
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1416           }
// 1417           
// 1418           bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_FINDING_BINDING;
??bdb_reportCommissioningState_26:
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.3
        MOVX      @DPTR,A
// 1419         }
// 1420         else
// 1421         {
// 1422           return;
// 1423         }
// 1424 
// 1425 #endif
// 1426       break;     
        LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
// 1427       case BDB_COMMISSIONING_STATE_TL:
// 1428         // Set NWK task to run
// 1429         nwk_setStateIdle( FALSE );
??bdb_reportCommissioningState_3:
        ; Setup parameters for call to function nwk_setStateIdle
        MOV       R1,#0x0
        LCALL     `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
// 1430         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_TOUCHLINK;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x4
        MOVX      @DPTR,A
// 1431         if(didSuccess)
        MOV       A,R7
        JZ        ??bdb_reportCommissioningState_27
// 1432         {
// 1433           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1434           bdbAttributes.bdbCommissioningMode = BDB_COMMISSIONING_MODE_IDDLE;
        MOV       DPTR,#bdbAttributes + 11
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1435           
// 1436           //Update ZDApp state
// 1437 #if (ZG_BUILD_RTR_TYPE)
// 1438           if(ZG_DEVICE_RTRONLY_TYPE)
// 1439           {          
// 1440             ZDApp_ChangeState( DEV_ROUTER );
// 1441           }
// 1442 #endif
// 1443 #if (ZG_BUILD_ENDDEVICE_TYPE)
// 1444           if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1445           {
// 1446             ZDApp_ChangeState( DEV_END_DEVICE );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x6
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1447           }
// 1448 #endif          
// 1449         }
// 1450         //The fail status is already set from the calling function to report commissioning process
// 1451         
// 1452         // The commissioning FAIL status is set before calling the bdb_reportCommissioningState
// 1453         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
??bdb_reportCommissioningState_27:
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1454         osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50); 
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
// 1455         //Clear the event
// 1456         bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_INITIATOR_TL;
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.0
        MOVX      @DPTR,A
// 1457         
// 1458       break;
        LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
// 1459       
// 1460       case BDB_INITIALIZATION:
// 1461         //Notify user about successfull initialization
// 1462         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_INITIALIZATION;
??bdb_reportCommissioningState_8:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1463         if(didSuccess)
        MOV       A,R7
        JZ        ??bdb_reportCommissioningState_28
// 1464         {
// 1465           //Update ZDApp state
// 1466 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1467           if(ZG_DEVICE_COORDINATOR_TYPE)
// 1468           {          
// 1469             ZDApp_ChangeState( DEV_ZB_COORD );
// 1470           }
// 1471 #endif          
// 1472 #if (ZG_BUILD_ENDDEVICE_TYPE)
// 1473           if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1474           {
// 1475             uint32 pollrate = POLL_RATE;
        MOV       ?V0,#-0x18
        MOV       ?V1,#0x3
        MOV       ?V2,#0x0
        MOV       ?V3,#0x0
// 1476             NLME_SetPollRate(pollrate);
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R4,?V2
        MOV       R5,?V3
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1477             ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x4
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1478             
// 1479           }
// 1480 #endif          
// 1481           ZDApp_RestoreNwkSecMaterial();
        ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
        LCALL     `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
// 1482           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NETWORK_RESTORED;
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0xd
        MOVX      @DPTR,A
// 1483           bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1484           osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,200);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_c8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
        SJMP      ??bdb_reportCommissioningState_29
// 1485         }
// 1486         else
// 1487         {
// 1488 #if (ZG_BUILD_ENDDEVICE_TYPE)                   
// 1489           if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1490           {
// 1491             if(bdb_isDeviceNonFactoryNew())
??bdb_reportCommissioningState_28:
        ; Setup parameters for call to function bdb_isDeviceNonFactoryNew
        LCALL     `??bdb_isDeviceNonFactoryNew::?relay`; Banked call to: bdb_isDeviceNonFactoryNew
        MOV       A,R1
        JZ        ??bdb_reportCommissioningState_30
// 1492             {
// 1493               //Notify the user about losing parent
// 1494               bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_PARENT_LOST;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x5
        MOVX      @DPTR,A
// 1495               bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_PARENT_LOST;
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.5
        MOVX      @DPTR,A
// 1496               
// 1497               //Update ZDApp state
// 1498               ZDApp_ChangeState( DEV_NWK_ORPHAN );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0xa
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1499             }
// 1500           }
// 1501 #endif
// 1502           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
??bdb_reportCommissioningState_30:
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0x2
        MOVX      @DPTR,A
// 1503         }
// 1504         bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_INITIALIZATION;
??bdb_reportCommissioningState_29:
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.4
        MOVX      @DPTR,A
// 1505 
// 1506       break;
        SJMP      ??bdb_reportCommissioningState_10
// 1507 #if (ZG_BUILD_ENDDEVICE_TYPE)     
// 1508       case BDB_PARENT_LOST:
// 1509         bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_PARENT_LOST;
??bdb_reportCommissioningState_9:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x5
        MOVX      @DPTR,A
// 1510         if(ZG_DEVICE_ENDDEVICE_TYPE)
// 1511         {
// 1512           if(didSuccess)
        MOV       A,R7
        JZ        ??bdb_reportCommissioningState_31
// 1513           {
// 1514             uint32 pollrate = POLL_RATE;
        MOV       ?V0,#-0x18
        MOV       ?V1,#0x3
        MOV       ?V2,#0x0
        MOV       ?V3,#0x0
// 1515             bdbCommissioningProcedureState.bdbCommissioningState = bdbCommissioningProcedureState.bdb_ParentLostSavedState;  
        MOV       DPTR,#bdbCommissioningProcedureState + 3
        MOVX      A,@DPTR
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      @DPTR,A
// 1516             bdbCommissioningProcedureState.bdb_ParentLostSavedState = 0;
        MOV       DPTR,#bdbCommissioningProcedureState + 3
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1517             NLME_SetPollRate(pollrate);
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R4,?V2
        MOV       R5,?V3
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1518             bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_PARENT_LOST;
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.5
        MOVX      @DPTR,A
// 1519             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NETWORK_RESTORED;
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0xd
        MOVX      @DPTR,A
// 1520             //Update ZDApp state
// 1521             ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x4
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1522             
// 1523             bdb_NetworkRestoredResumeState();
        ; Setup parameters for call to function bdb_NetworkRestoredResumeState
        LCALL     `??bdb_NetworkRestoredResumeState::?relay`; Banked call to: bdb_NetworkRestoredResumeState
        SJMP      ??bdb_reportCommissioningState_10
// 1524           }
// 1525           else
// 1526           {
// 1527             bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_PARENT_LOST;
??bdb_reportCommissioningState_31:
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.5
        MOVX      @DPTR,A
// 1528             bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0x2
        MOVX      @DPTR,A
// 1529             
// 1530             NLME_SetPollRate(0);
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#__Constant_0
        LCALL     ?XLOAD_R2345
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1531             
// 1532           }
// 1533         }
// 1534       break;
// 1535 #endif
// 1536     }
// 1537 #ifdef MT_APP_CNF_FUNC
// 1538     //Notify the user about the status, the main state which has failed
// 1539     bdbCommissioningModeMsg.bdbCommissioningStatus = bdbAttributes.bdbCommissioningStatus;
// 1540     
// 1541     bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
// 1542 #else
// 1543     if(pfnCommissioningStatusCB)
??bdb_reportCommissioningState_10:
        MOV       DPTR,#pfnCommissioningStatusCB
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_reportCommissioningState_1
// 1544     {
// 1545       //Notify the user about the status, the main state which has failed
// 1546       bdbCommissioningModeMsg.bdbCommissioningStatus = bdbAttributes.bdbCommissioningStatus;
        MOV       DPTR,#bdbAttributes + 10
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1547       
// 1548       bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
        ; Setup parameters for call to function bdb_SendMsg
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R4,#0x3
        MOV       R3,#0x0
        MOV       R2,#0xa
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 1549     }
// 1550 #endif
// 1551   }  
// 1552 }
??bdb_reportCommissioningState_1:
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock13
// 1553 
// 1554 
// 1555  /*********************************************************************
// 1556  * @fn          bdb_nwkFormationAttempt
// 1557  *
// 1558  * @brief       Process a nwk formation attempt.
// 1559  *
// 1560  * @param       didSuccess - TRUE if the nwk formation was success, FALSE 
// 1561  *                         otherwise and try secondary channel
// 1562  *
// 1563  * @return      none
// 1564  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1565 void bdb_nwkFormationAttempt(bool didSuccess)
bdb_nwkFormationAttempt:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function bdb_nwkFormationAttempt
        CODE
// 1566 {
        FUNCALL bdb_nwkFormationAttempt, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkFormationAttempt, bdb_nwkJoiningFormation
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkFormationAttempt, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 1567   if(didSuccess)
        MOV       A,R6
        JZ        ??bdb_nwkFormationAttempt_0
// 1568   {
// 1569     bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION,TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x5
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
        SJMP      ??bdb_nwkFormationAttempt_1
// 1570   }
// 1571   else
// 1572   {
// 1573     //Can we try the secondary channel set?
// 1574     if((vDoPrimaryScan) && (bdbAttributes.bdbSecondaryChannelSet))
??bdb_nwkFormationAttempt_0:
        MOV       DPTR,#vDoPrimaryScan
        MOVX      A,@DPTR
        JZ        ??bdb_nwkFormationAttempt_2
        MOV       DPTR,#bdbAttributes
        LCALL     ?XLOAD_R0123
        MOV       A,R0
        ORL       A,R1
        ORL       A,R2
        ORL       A,R3
        JZ        ??bdb_nwkFormationAttempt_2
// 1575     {
// 1576       vDoPrimaryScan = FALSE;
        MOV       DPTR,#vDoPrimaryScan
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1577       bdb_nwkJoiningFormation(FALSE);
        ; Setup parameters for call to function bdb_nwkJoiningFormation
        MOV       R1,#0x0
        LCALL     `??bdb_nwkJoiningFormation::?relay`; Banked call to: bdb_nwkJoiningFormation
        SJMP      ??bdb_nwkFormationAttempt_1
// 1578     }
// 1579     else
// 1580     {
// 1581       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
??bdb_nwkFormationAttempt_2:
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x5
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 1582     }
// 1583   }
// 1584 }
??bdb_nwkFormationAttempt_1:
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock14
// 1585 
// 1586 
// 1587 
// 1588 /*********************************************************************
// 1589  * @fn          bdb_isDeviceNonFactoryNew
// 1590  *
// 1591  * @brief       Returns the state of bdbNodeIsOnANetwork attribute
// 1592  * 
// 1593  * @param       none
// 1594  *
// 1595  * @return      bdbNodeIsOnANetwork
// 1596  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1597 bool bdb_isDeviceNonFactoryNew(void)
bdb_isDeviceNonFactoryNew:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function bdb_isDeviceNonFactoryNew
        CODE
// 1598 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1599   return bdbAttributes.bdbNodeIsOnANetwork;
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        MOV       R1,A
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
// 1600 }
          CFI EndBlock cfiBlock15
// 1601 
// 1602 
// 1603 /*********************************************************************
// 1604  * @fn          bdb_doTrustCenterRequireKeyExchange
// 1605  *
// 1606  * @brief       Returns the state of bdbTrustCenterRequireKeyExchange attribute
// 1607  * 
// 1608  * @param       none
// 1609  *
// 1610  * @return      bdbTrustCenterRequireKeyExchange
// 1611  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1612 bool bdb_doTrustCenterRequireKeyExchange(void)
bdb_doTrustCenterRequireKeyExchange:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function bdb_doTrustCenterRequireKeyExchange
        CODE
// 1613 {
        ; Saved register size: 0
        ; Auto size: 0
// 1614 #if (ZG_BUILD_COORDINATOR_TYPE) 
// 1615   return bdbAttributes.bdbTrustCenterRequireKeyExchange;
// 1616 #else
// 1617   return 0;
        MOV       R1,#0x0
        LJMP      ?BRET
// 1618 #endif
// 1619 }
          CFI EndBlock cfiBlock16
// 1620 
// 1621 /*********************************************************************
// 1622  * @fn      bdb_rejoinNwk
// 1623  *
// 1624  * @brief   Attempt to rejoin/resume a nwk from nv parameters
// 1625  *
// 1626  * @param   none
// 1627  *
// 1628  * @return  ZStatus_t
// 1629  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1630 ZStatus_t bdb_rejoinNwk(void)
bdb_rejoinNwk:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function bdb_rejoinNwk
        CODE
// 1631 {
        FUNCALL bdb_rejoinNwk, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZDApp_RestoreNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, ZDApp_RestoreNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, NLME_ReJoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_rejoinNwk, NLME_ReJoinRequestUnsecure
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 1632   ZStatus_t rejoinStatus = ZSuccess;
        MOV       R6,#0x0
// 1633   
// 1634   //Update the seq number
// 1635   _NIB.SequenceNum ++;
        MOV       DPTR,#_NIB
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOVX      @DPTR,A
// 1636   
// 1637   osal_nv_write(ZCD_NV_NIB,osal_offsetof( nwkIB_t, SequenceNum ), sizeof( uint8), &_NIB.SequenceNum );
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V0,#_NIB & 0xff
        MOV       ?V1,#(_NIB >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x21
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       A,R1
// 1638   
// 1639   // Transition state machine to correct rejoin state based on nwk key
// 1640   if ( ZDApp_RestoreNwkKey( FALSE )== TRUE )
        ; Setup parameters for call to function ZDApp_RestoreNwkKey
        MOV       R1,#0x0
        LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??bdb_rejoinNwk_0
// 1641   {
// 1642     ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x4
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
        SJMP      ??bdb_rejoinNwk_1
// 1643   }
// 1644   else
// 1645   {
// 1646     ZDApp_ChangeState( DEV_NWK_TC_REJOIN_CURR_CHANNEL );
??bdb_rejoinNwk_0:
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0xe
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1647   }
// 1648 
// 1649   // Before trying to do rejoin, check if the device has a valid short address
// 1650   // If not, generate a random short address for itself
// 1651   if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
??bdb_rejoinNwk_1:
        MOV       DPTR,#_NIB + 20
        MOVX      A,@DPTR
        XRL       A,#0xfe
        JNZ       ??bdb_rejoinNwk_2
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0xff
??bdb_rejoinNwk_2:
        JNZ       ??bdb_rejoinNwk_3
// 1652   {
// 1653     rejoinStatus = ZFailure;
        MOV       R6,#0x1
// 1654   }
// 1655 
// 1656   // Check if the device has a valid PanID, if not, set it to the discovered Pan
// 1657   if ( _NIB.nwkPanId == 0xFFFF )
??bdb_rejoinNwk_3:
        MOV       DPTR,#_NIB + 33
        MOVX      A,@DPTR
        XRL       A,#0xff
        JNZ       ??bdb_rejoinNwk_4
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0xff
??bdb_rejoinNwk_4:
        JNZ       ??bdb_rejoinNwk_5
// 1658   {
// 1659     rejoinStatus = ZFailure;
        MOV       R6,#0x1
// 1660   }
// 1661 
// 1662   if(rejoinStatus == ZSuccess)
??bdb_rejoinNwk_5:
        MOV       A,R6
        JNZ       ??bdb_rejoinNwk_6
// 1663   {
// 1664     uint8 tmp = true;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1665     ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
        ; Setup parameters for call to function ZMacSetReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x52
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
        MOV       A,R1
// 1666         
// 1667     // Perform Secure or Unsecure Rejoin depending on available configuration
// 1668     if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == TRUE ) )
        ; Setup parameters for call to function ZDApp_RestoreNwkKey
        MOV       R1,#0x1
        LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??bdb_rejoinNwk_7
// 1669     {
// 1670       rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, _NIB.nwkLogicalChannel);
        ; Setup parameters for call to function NLME_ReJoinRequest
        MOV       DPTR,#_NIB + 22
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       R2,#ZDO_UseExtendedPANID & 0xff
        MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL     `??NLME_ReJoinRequest::?relay`; Banked call to: NLME_ReJoinRequest
        MOV       A,R1
        MOV       R6,A
        SJMP      ??bdb_rejoinNwk_6
// 1671     }
// 1672     else
// 1673     {
// 1674       rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, _NIB.nwkLogicalChannel);
??bdb_rejoinNwk_7:
        ; Setup parameters for call to function NLME_ReJoinRequestUnsecure
        MOV       DPTR,#_NIB + 22
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       R2,#ZDO_UseExtendedPANID & 0xff
        MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL     `??NLME_ReJoinRequestUnsecure::?relay`; Banked call to: NLME_ReJoinRequestUnsecure
        MOV       A,R1
        MOV       R6,A
// 1675     }
// 1676   }
// 1677   
// 1678   return rejoinStatus;
??bdb_rejoinNwk_6:
        MOV       A,R6
        MOV       R1,A
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
// 1679 }
          CFI EndBlock cfiBlock17
// 1680 
// 1681 #if (ZG_BUILD_JOINING_TYPE)
// 1682  /*********************************************************************
// 1683  * @fn          bdb_nwkDiscoveryAttempt
// 1684  *
// 1685  * @brief       Process a nwk discovery attempt
// 1686  *
// 1687  * @param       didSuccess - TRUE we found nwk in the scanned channels, FALSE if 
// 1688  *                           no suitable nwks were found, try secondary channel
// 1689  *
// 1690  * @return      none
// 1691  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1692 void bdb_nwkDiscoveryAttempt(bool didSuccess)
bdb_nwkDiscoveryAttempt:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function bdb_nwkDiscoveryAttempt
        CODE
// 1693 {
        FUNCALL bdb_nwkDiscoveryAttempt, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkDiscoveryAttempt, bdb_setChannel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkDiscoveryAttempt, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkDiscoveryAttempt, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       A,R1
        MOV       R6,A
// 1694   uint8 bdbJoinEvent = BDB_JOIN_EVENT_NWK_DISCOVERY;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1695   
// 1696   if(didSuccess)
        MOV       A,R6
        JZ        ??bdb_nwkDiscoveryAttempt_0
// 1697   {
// 1698     bdb_SendMsg(bdb_TaskID, BDB_COMMISSIONING_STATE_JOINING, BDB_MSG_EVENT_SUCCESS,sizeof(bdbJoinEvent),(uint8*)&bdbJoinEvent);
        ; Setup parameters for call to function bdb_SendMsg
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       R4,#0x1
        MOV       R3,#0x0
        MOV       R2,#0x3
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        SJMP      ??bdb_nwkDiscoveryAttempt_1
// 1699   }
// 1700   else
// 1701   {
// 1702     //Can we try the secondary channel set?
// 1703     if((vDoPrimaryScan) && (bdbAttributes.bdbSecondaryChannelSet))
??bdb_nwkDiscoveryAttempt_0:
        MOV       DPTR,#vDoPrimaryScan
        MOVX      A,@DPTR
        JZ        ??bdb_nwkDiscoveryAttempt_2
        MOV       DPTR,#bdbAttributes
        LCALL     ?XLOAD_R0123
        MOV       A,R0
        ORL       A,R1
        ORL       A,R2
        ORL       A,R3
        JZ        ??bdb_nwkDiscoveryAttempt_2
// 1704     {
// 1705       vDoPrimaryScan = FALSE;
        MOV       DPTR,#vDoPrimaryScan
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1706       bdb_setChannel(bdbAttributes.bdbSecondaryChannelSet);
        ; Setup parameters for call to function bdb_setChannel
        MOV       DPTR,#bdbAttributes
        LCALL     ?XLOAD_R2345
        LCALL     `??bdb_setChannel::?relay`; Banked call to: bdb_setChannel
// 1707       
// 1708       ZDApp_NetworkInit( 50 );
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV       R2,#0x32
        MOV       R3,#0x0
        LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
        SJMP      ??bdb_nwkDiscoveryAttempt_1
// 1709     }
// 1710     else
// 1711     {
// 1712       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, FALSE);
??bdb_nwkDiscoveryAttempt_2:
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x3
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 1713     }
// 1714   }
// 1715 }
??bdb_nwkDiscoveryAttempt_1:
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock18
// 1716 
// 1717  /*********************************************************************
// 1718  * @fn          bdb_filterNwkDisc
// 1719  *
// 1720  * @brief       Filter the nwks found and attempt to join the suitable nwks
// 1721  *              Here the application can include nwk filters 
// 1722  *
// 1723  * @param       none
// 1724  *
// 1725  * @return      none
// 1726  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1727 void bdb_filterNwkDisc(void)
bdb_filterNwkDisc:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function bdb_filterNwkDisc
        CODE
// 1728 {
        FUNCALL bdb_filterNwkDisc, nwk_getNwkDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_filterNwkDisc, nwk_desc_list_release
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_filterNwkDisc, nwk_ExtPANIDValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_filterNwkDisc, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_filterNwkDisc, bdb_nwkDescFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_filterNwkDisc, bdb_nwkDescFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_filterNwkDisc, bdb_nwkDescFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_filterNwkDisc, bdb_nwkDescFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 1729   networkDesc_t* pNwkDesc;
// 1730   uint8 i = 0;
        MOV       ?V1,#0x0
// 1731   uint8 ResultCount = 0;
        MOV       ?V0,#0x0
// 1732   uint8 stackProfile = 0;
        MOV       ?V2,#0x0
// 1733   uint8 stackProfilePro = 0;
        MOV       ?V3,#0x0
// 1734   
// 1735   pBDBListNwk  = nwk_getNwkDescList();
        ; Setup parameters for call to function nwk_getNwkDescList
        LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
        MOV       DPTR,#pBDBListNwk
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 1736   nwk_desc_list_release();
        ; Setup parameters for call to function nwk_desc_list_release
        LCALL     `??nwk_desc_list_release::?relay`; Banked call to: nwk_desc_list_release
// 1737   
// 1738   pNwkDesc = pBDBListNwk;
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
// 1739   while (pNwkDesc)
??bdb_filterNwkDisc_0:
        MOV       A,R6
        ORL       A,R7
        JZ        ??bdb_filterNwkDisc_1
// 1740   {
// 1741     ResultCount++;
        INC       ?V0
// 1742     pNwkDesc = pNwkDesc->nextDesc;
        MOV       A,R6
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        SJMP      ??bdb_filterNwkDisc_0
// 1743   }
// 1744   
// 1745   if(pBDBListNwk)
??bdb_filterNwkDisc_1:
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       $+5
        LJMP      ??bdb_filterNwkDisc_2 & 0xFFFF
// 1746   {
// 1747     if(pfnFilterNwkDesc)
        MOV       DPTR,#pfnFilterNwkDesc
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_filterNwkDisc_3
// 1748     {
// 1749       pfnFilterNwkDesc(pBDBListNwk, ResultCount);
        ; Setup parameters for indirect call
        MOV       R1,?V0
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPTR,#pfnFilterNwkDesc
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        LCALL     ?CALL_IND
// 1750     }
// 1751     
// 1752     for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
??bdb_filterNwkDisc_3:
        MOV       ?V2,#0x0
??bdb_filterNwkDisc_4:
        MOV       A,?V2
        CLR       C
        SUBB      A,#0x2
        JC        $+5
        LJMP      ??bdb_filterNwkDisc_2 & 0xFFFF
// 1753     {
// 1754       pNwkDesc = pBDBListNwk;
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
// 1755       
// 1756       if(pNwkDesc)
        MOV       A,R6
        ORL       A,R7
        JNZ       $+5
        LJMP      ??bdb_filterNwkDisc_5 & 0xFFFF
// 1757       {
// 1758         for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
        MOV       ?V1,#0x0
??bdb_filterNwkDisc_6:
        MOV       A,?V1
        CLR       C
        SUBB      A,?V0
        JC        $+5
        LJMP      ??bdb_filterNwkDisc_5 & 0xFFFF
// 1759         {
// 1760           if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
        ; Setup parameters for call to function nwk_ExtPANIDValid
        MOV       R2,#ZDO_UseExtendedPANID & 0xff
        MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??bdb_filterNwkDisc_7
// 1761           {
// 1762             // If the extended Pan ID is commissioned to a non zero value
// 1763             // Only join the Pan that has match EPID
// 1764             if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
        ; Setup parameters for call to function sAddrExtCmp
        MOV       A,R6
        ADD       A,#0xb
        MOV       R4,A
        CLR       A
        ADDC      A,R7
        MOV       R5,A
        MOV       R2,#ZDO_UseExtendedPANID & 0xff
        MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV       A,R1
        JNZ       ??bdb_filterNwkDisc_8
// 1765             {
// 1766               //Remove from the list
// 1767               bdb_nwkDescFree(pNwkDesc);
        ; Setup parameters for call to function bdb_nwkDescFree
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
        MOV       A,R1
// 1768               ResultCount--;
        DEC       ?V0
// 1769               continue;
        LJMP      ??bdb_filterNwkDisc_9 & 0xFFFF
// 1770             }
// 1771           }
// 1772           else if ( zgConfigPANID != 0xFFFF )
??bdb_filterNwkDisc_7:
        MOV       DPTR,#zgConfigPANID
        MOVX      A,@DPTR
        XRL       A,#0xff
        JNZ       ??bdb_filterNwkDisc_10
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0xff
??bdb_filterNwkDisc_10:
        JZ        ??bdb_filterNwkDisc_8
// 1773           {
// 1774             // PAN Id is preconfigured. check if it matches
// 1775             if ( pNwkDesc->panId != zgConfigPANID )
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#zgConfigPANID
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??bdb_filterNwkDisc_11
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
??bdb_filterNwkDisc_11:
        JZ        ??bdb_filterNwkDisc_8
// 1776             {
// 1777               //Remove from the list
// 1778               bdb_nwkDescFree(pNwkDesc);
        ; Setup parameters for call to function bdb_nwkDescFree
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
        MOV       A,R1
// 1779               ResultCount--;
        DEC       ?V0
// 1780               continue;
        LJMP      ??bdb_filterNwkDisc_9 & 0xFFFF
// 1781             }
// 1782           }
// 1783 
// 1784           if ( pNwkDesc->chosenRouter != _NIB.nwkCoordAddress || _NIB.nwkCoordAddress == INVALID_NODE_ADDR )
??bdb_filterNwkDisc_8:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#_NIB + 23
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??bdb_filterNwkDisc_12
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
??bdb_filterNwkDisc_12:
        JNZ       ??bdb_filterNwkDisc_13
        MOV       DPTR,#_NIB + 23
        MOVX      A,@DPTR
        XRL       A,#0xfe
        JNZ       ??bdb_filterNwkDisc_14
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0xff
??bdb_filterNwkDisc_14:
        JNZ       ??bdb_filterNwkDisc_15
// 1785           {
// 1786             // check that network is allowing joining
// 1787             if ( ZSTACK_ROUTER_BUILD )
// 1788             {
// 1789               if ( stackProfilePro == FALSE )
// 1790               {
// 1791                 if ( !pNwkDesc->routerCapacity )
// 1792                 {
// 1793                   //Remove from the list
// 1794                   bdb_nwkDescFree(pNwkDesc);
// 1795                   ResultCount--;
// 1796                   continue;
// 1797                 }
// 1798               }
// 1799               else
// 1800               {
// 1801                 if ( !pNwkDesc->deviceCapacity )
// 1802                 {
// 1803                   //Remove from the list
// 1804                   bdb_nwkDescFree(pNwkDesc);
// 1805                   ResultCount--;
// 1806                   continue;
// 1807                 }
// 1808               }
// 1809             }
// 1810             else if ( ZSTACK_END_DEVICE_BUILD )
// 1811             {
// 1812               if ( !pNwkDesc->deviceCapacity )
??bdb_filterNwkDisc_13:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JNZ       ??bdb_filterNwkDisc_15
// 1813               {
// 1814                 //Remove from the list
// 1815                 bdb_nwkDescFree(pNwkDesc);
        ; Setup parameters for call to function bdb_nwkDescFree
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
        MOV       A,R1
// 1816                 ResultCount--;
        DEC       ?V0
// 1817                 continue;
        SJMP      ??bdb_filterNwkDisc_9
// 1818               }
// 1819             }
// 1820           }
// 1821 
// 1822           // check version of zigbee protocol
// 1823           if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
??bdb_filterNwkDisc_15:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPTR,#_NIB + 17
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??bdb_filterNwkDisc_9
// 1824             continue;
// 1825 
// 1826           // check version of stack profile
// 1827           if ( pNwkDesc->stackProfile != zgStackProfile  )
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPTR,#zgStackProfile
        MOVX      A,@DPTR
        XRL       A,R0
        JZ        ??bdb_filterNwkDisc_9
// 1828           {
// 1829             if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
// 1830                 || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
        MOV       DPTR,#zgStackProfile
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??bdb_filterNwkDisc_16
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x2
        JZ        ??bdb_filterNwkDisc_17
??bdb_filterNwkDisc_16:
        MOV       DPTR,#zgStackProfile
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??bdb_filterNwkDisc_18
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??bdb_filterNwkDisc_18
// 1831             {
// 1832               stackProfilePro = TRUE;
??bdb_filterNwkDisc_17:
        MOV       ?V3,#0x1
// 1833             }
// 1834 
// 1835             if ( stackProfile == 0 )
??bdb_filterNwkDisc_18:
        MOV       A,?V2
        JNZ       ??bdb_filterNwkDisc_9
// 1836             {
// 1837               //Remove from the list
// 1838               bdb_nwkDescFree(pNwkDesc);
        ; Setup parameters for call to function bdb_nwkDescFree
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
        MOV       A,R1
// 1839               ResultCount--;
        DEC       ?V0
// 1840               continue;
// 1841             }
// 1842           }
// 1843         }
??bdb_filterNwkDisc_9:
        INC       ?V1
        MOV       A,R6
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        LJMP      ??bdb_filterNwkDisc_6 & 0xFFFF
// 1844       }
// 1845     }
??bdb_filterNwkDisc_5:
        INC       ?V2
        LJMP      ??bdb_filterNwkDisc_4 & 0xFFFF
// 1846   }
// 1847 }
??bdb_filterNwkDisc_2:
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock19
// 1848       
// 1849  /*********************************************************************
// 1850  * @fn          bdb_tryNwkAssoc
// 1851  *
// 1852  * @brief       Try to associate to the first network in the network descriptor list
// 1853  *
// 1854  * @param       none
// 1855  *
// 1856  * @return      none
// 1857  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1858 static void bdb_tryNwkAssoc(void)
bdb_tryNwkAssoc:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function bdb_tryNwkAssoc
        CODE
// 1859 {
        FUNCALL bdb_tryNwkAssoc, bdb_joinProcess
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_tryNwkAssoc, bdb_nwkDescFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_tryNwkAssoc, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_tryNwkAssoc, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1860   if(pBDBListNwk)
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_tryNwkAssoc_0
// 1861   {
// 1862     bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_ASSOC;
        MOV       DPTR,#bdbCommissioningProcedureState + 2
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1863     
// 1864     //Try the first in the list after the filtering
// 1865     if(ZSuccess != bdb_joinProcess(pBDBListNwk))
        ; Setup parameters for call to function bdb_joinProcess
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??bdb_joinProcess::?relay`; Banked call to: bdb_joinProcess
        MOV       A,R1
        JZ        ??bdb_tryNwkAssoc_1
// 1866     {
// 1867       //If fail, free the first in the list and prepare for futher processing, either next nwk or discover again
// 1868       uint8 bdbJoinEvent = BDB_JOIN_EVENT_ASSOCIATION;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1869       bdb_nwkDescFree(pBDBListNwk);
        ; Setup parameters for call to function bdb_nwkDescFree
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
        MOV       A,R1
// 1870       bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,BDB_MSG_EVENT_FAIL,sizeof(uint8),&bdbJoinEvent);
        ; Setup parameters for call to function bdb_SendMsg
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x1
        MOV       R3,#0x1
        MOV       R2,#0x3
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        SJMP      ??bdb_tryNwkAssoc_1
// 1871     }
// 1872   }
// 1873   else
// 1874   {
// 1875     bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_NWK_DISC;
??bdb_tryNwkAssoc_0:
        MOV       DPTR,#bdbCommissioningProcedureState + 2
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1876     uint8 bdbJoinEvent = BDB_JOIN_EVENT_NWK_DISCOVERY;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1877     
// 1878     bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,BDB_MSG_EVENT_FAIL,sizeof(uint8),&bdbJoinEvent);
        ; Setup parameters for call to function bdb_SendMsg
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x1
        MOV       R3,#0x1
        MOV       R2,#0x3
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1879   }
// 1880 }
??bdb_tryNwkAssoc_1:
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock20
// 1881 
// 1882 
// 1883 
// 1884  /*********************************************************************
// 1885  * @fn          bdb_nwkAssocAttemt
// 1886  *
// 1887  * @brief       Process the result of an attempt to associate to a network 
// 1888  *
// 1889  * @param       didSuccess - bool
// 1890  *
// 1891  * @return      none
// 1892  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1893 void bdb_nwkAssocAttemt(bool didSuccess)
bdb_nwkAssocAttemt:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function bdb_nwkAssocAttemt
        CODE
// 1894 {
        FUNCALL bdb_nwkAssocAttemt, bdb_nwkDescFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkAssocAttemt, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       A,R1
        MOV       R7,A
// 1895   bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_STATE_JOINING;
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0x3
        MOVX      @DPTR,A
// 1896   uint8 bdbJoinEvent = BDB_JOIN_EVENT_ASSOCIATION;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1897   uint8 status;
// 1898   
// 1899   if(didSuccess)
        MOV       A,R7
        JZ        ??bdb_nwkAssocAttemt_0
// 1900   {
// 1901     status = BDB_MSG_EVENT_SUCCESS;
        MOV       R6,#0x0
        SJMP      ??bdb_nwkAssocAttemt_1
// 1902   }
// 1903   else
// 1904   {
// 1905     if(bdb_nwkAssocRetriesCount < BDBC_REC_SAME_NETWORK_RETRY_ATTEMPS)
??bdb_nwkAssocAttemt_0:
        MOV       DPTR,#bdb_nwkAssocRetriesCount
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0x3
        JNC       ??bdb_nwkAssocAttemt_2
// 1906     {
// 1907       bdb_nwkAssocRetriesCount++;
        MOV       DPTR,#bdb_nwkAssocRetriesCount
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOVX      @DPTR,A
        SJMP      ??bdb_nwkAssocAttemt_3
// 1908     }
// 1909     else
// 1910     {
// 1911       //Free the first in the list and prepare for futher processing
// 1912       bdb_nwkDescFree(pBDBListNwk);
??bdb_nwkAssocAttemt_2:
        ; Setup parameters for call to function bdb_nwkDescFree
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
        MOV       A,R1
// 1913       bdb_nwkAssocRetriesCount = 0;
        MOV       DPTR,#bdb_nwkAssocRetriesCount
        MOV       A,#0x0
        MOVX      @DPTR,A
// 1914     }
// 1915     status = BDB_MSG_EVENT_FAIL;
??bdb_nwkAssocAttemt_3:
        MOV       R6,#0x1
// 1916   }
// 1917   bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,status,sizeof(uint8),&bdbJoinEvent);
??bdb_nwkAssocAttemt_1:
        ; Setup parameters for call to function bdb_SendMsg
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       R4,#0x1
        MOV       A,R6
        MOV       R3,A
        MOV       R2,#0x3
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 1918 }
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock21
// 1919                        
// 1920 
// 1921 /****************************************************************************
// 1922  * @fn          bdb_nwkDescFree
// 1923  *
// 1924  * @brief       This function frees one network discovery data.
// 1925  *
// 1926  * @param       ZSuccess - If the device was found and erased
// 1927  * @param       ZInvalidParameter - Not found
// 1928  *
// 1929  * @return      none
// 1930  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1931 ZStatus_t bdb_nwkDescFree(networkDesc_t* nodeDescToRemove)
bdb_nwkDescFree:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function bdb_nwkDescFree
        CODE
// 1932 {
        FUNCALL bdb_nwkDescFree, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
// 1933   networkDesc_t* current_desc;
// 1934   networkDesc_t* prev_desc;
// 1935   
// 1936   current_desc = pBDBListNwk;
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
// 1937 
// 1938   while(current_desc != NULL)
??bdb_nwkDescFree_0:
        MOV       A,R6
        ORL       A,R7
        JZ        ??bdb_nwkDescFree_1
// 1939   {  
// 1940     if(current_desc == nodeDescToRemove)
        MOV       A,?V0
        XRL       A,R6
        JNZ       ??bdb_nwkDescFree_2
        MOV       A,?V1
        XRL       A,R7
??bdb_nwkDescFree_2:
        JNZ       ??bdb_nwkDescFree_3
// 1941     {
// 1942       if (current_desc == pBDBListNwk)
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R6
        XRL       A,R0
        JNZ       ??bdb_nwkDescFree_4
        MOV       A,R7
        XRL       A,R1
??bdb_nwkDescFree_4:
        JNZ       ??bdb_nwkDescFree_5
// 1943       {
// 1944         pBDBListNwk = pBDBListNwk->nextDesc;
        MOV       DPTR,#pBDBListNwk
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x14
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#pBDBListNwk
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        SJMP      ??bdb_nwkDescFree_6
// 1945       }
// 1946       else
// 1947       {
// 1948         prev_desc->nextDesc = current_desc->nextDesc;
??bdb_nwkDescFree_5:
        MOV       A,R6
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,?V2
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,?V3
        MOV       DPH,A
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 1949       }
// 1950       
// 1951       osal_mem_free( current_desc );
??bdb_nwkDescFree_6:
        ; Setup parameters for call to function osal_mem_free
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1952       
// 1953       return ZSuccess;
        MOV       R1,#0x0
        SJMP      ??bdb_nwkDescFree_7
// 1954     }
// 1955 
// 1956     prev_desc = current_desc;
??bdb_nwkDescFree_3:
        MOV       ?V2,R6
        MOV       ?V3,R7
// 1957     current_desc = current_desc->nextDesc;
        MOV       A,R6
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        SJMP      ??bdb_nwkDescFree_0
// 1958   }
// 1959   
// 1960   return ZInvalidParameter;
??bdb_nwkDescFree_1:
        MOV       R1,#0x2
??bdb_nwkDescFree_7:
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
// 1961 }
          CFI EndBlock cfiBlock22
// 1962 
// 1963 /*********************************************************************
// 1964 * @fn          bdb_joinProcess
// 1965 *
// 1966 * @brief       Start the joining process for the selected nwk
// 1967 *
// 1968 * @return      ZStatus_t
// 1969 */  

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1970 ZStatus_t bdb_joinProcess(networkDesc_t *pChosenNwk)
bdb_joinProcess:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function bdb_joinProcess
        CODE
// 1971 {
        FUNCALL bdb_joinProcess, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_joinProcess, ZDApp_NodeProfileSync
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_joinProcess, NLME_JoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_joinProcess, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_joinProcess, NLME_SetQueuedPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_joinProcess, NLME_SetResponseRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_joinProcess, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1972   ZStatus_t status;
// 1973  
// 1974   ZDApp_ChangeState( DEV_NWK_JOINING );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x3
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1975   ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
        ; Setup parameters for call to function ZDApp_NodeProfileSync
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
// 1976 
// 1977   status =  NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
// 1978                         pChosenNwk->logicalChannel,
// 1979                         ZDO_Config_Node_Descriptor.CapabilityFlags,
// 1980                         pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth );
        ; Setup parameters for call to function NLME_JoinRequest
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R6
        ADD       A,#0xb
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,R1
        MOV       ?V0,A
// 1981   
// 1982   if(status == ZSuccess)
        MOV       A,?V0
        JNZ       ??bdb_joinProcess_0
// 1983   {
// 1984     // The receiver is on, turn network layer polling off.
// 1985     if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.3
        JNC       ??bdb_joinProcess_1
// 1986     {
// 1987       // for an End Device with NO Child Table Management process or for a Router
// 1988       if ( ( ZG_DEVICE_RTR_TYPE )  ||
// 1989            ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        JZ        ??bdb_joinProcess_2
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??bdb_joinProcess_2
        MOV       DPTR,#zgChildAgingEnable
        MOVX      A,@DPTR
        JNZ       ??bdb_joinProcess_0
// 1990       {
// 1991         NLME_SetPollRate( 0 );
??bdb_joinProcess_2:
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#__Constant_0
        LCALL     ?XLOAD_R2345
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1992         NLME_SetQueuedPollRate( 0 );
        ; Setup parameters for call to function NLME_SetQueuedPollRate
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
// 1993         NLME_SetResponseRate( 0 );
        ; Setup parameters for call to function NLME_SetResponseRate
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
        SJMP      ??bdb_joinProcess_0
// 1994       }
// 1995     }
// 1996     else
// 1997     {
// 1998       if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
??bdb_joinProcess_1:
        MOV       DPTR,#devStartMode
        MOVX      A,@DPTR
        JNZ       ??bdb_joinProcess_0
// 1999       {
// 2000         ZDApp_SavedPollRate = zgPollRate;
        MOV       DPTR,#zgPollRate
        LCALL     ?XLOAD_R0123
        MOV       DPTR,#ZDApp_SavedPollRate
        LCALL     ?XSTORE_R0123
// 2001         NLME_SetPollRate( zgRejoinPollRate );
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#zgRejoinPollRate
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       R2,?V2
        MOV       R3,?V3
        CLR       A
        MOV       R4,A
        MOV       R5,A
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 2002       }
// 2003     }
// 2004   }
// 2005   return status;
??bdb_joinProcess_0:
        MOV       R1,?V0
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
// 2006 }
          CFI EndBlock cfiBlock23
// 2007 #endif
// 2008 
// 2009 
// 2010  /*********************************************************************
// 2011  * @fn          bdb_setChannelAttribute
// 2012  *
// 2013  * @brief       Set the primary or seconday channel for discovery or formation procedure
// 2014  *
// 2015  * @param       isPrimaryChannel - True if channel to set is primary,  
// 2016  *                                 False if the channel to set is secondary
// 2017  *
// 2018  * @param       channel - Channel mask
// 2019  *
// 2020  * @return      none
// 2021  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2022 void bdb_setChannelAttribute(bool isPrimaryChannel, uint32 channel)
bdb_setChannelAttribute:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function bdb_setChannelAttribute
        CODE
// 2023 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
// 2024   if(isPrimaryChannel)
        MOV       A,R1
        JZ        ??bdb_setChannelAttribute_0
// 2025   {
// 2026     bdbAttributes.bdbPrimaryChannelSet = channel;
        MOV       DPTR,#bdbAttributes + 4
        MOV       R0,#?V0
        LCALL     ?L_MOV_TO_X
        SJMP      ??bdb_setChannelAttribute_1
// 2027   }
// 2028   else
// 2029   {
// 2030     bdbAttributes.bdbSecondaryChannelSet = channel;
??bdb_setChannelAttribute_0:
        MOV       DPTR,#bdbAttributes
        MOV       R0,#?V0
        LCALL     ?L_MOV_TO_X
// 2031   }
// 2032 }
??bdb_setChannelAttribute_1:
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock24
// 2033 
// 2034  /*********************************************************************
// 2035  * @fn          bdb_setChannel
// 2036  *
// 2037  * @brief       Set channel and save it in Nv for joining/formation operations
// 2038  *
// 2039  * @param       channel - Channel mask
// 2040  *
// 2041  * @return      none
// 2042  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2043 void bdb_setChannel(uint32 channel)
bdb_setChannel:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function bdb_setChannel
        CODE
// 2044 {
        FUNCALL bdb_setChannel, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
// 2045   //Assign the channel and save it into nv
// 2046   vScanChannels = channel;
        MOV       DPTR,#zgDefaultChannelList
        MOV       R0,#?V0
        LCALL     ?L_MOV_TO_X
// 2047   runtimeChannel = channel;
        MOV       DPTR,#runtimeChannel
        MOV       R0,#?V0
        LCALL     ?L_MOV_TO_X
// 2048     
// 2049   osal_nv_write(ZCD_NV_CHANLIST,0,sizeof(uint32),&vScanChannels);
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V4,#zgDefaultChannelList & 0xff
        MOV       ?V5,#(zgDefaultChannelList >> 8) & 0xff
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       ?V4,#0x4
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7c
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R1
// 2050 }
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock25
// 2051 
// 2052 
// 2053  /*********************************************************************
// 2054  * @fn          bdb_nwkJoiningFormation   
// 2055  *
// 2056  * @brief       Performs Joining/Formation operation on primary or secondary channel
// 2057  *
// 2058  * @param       isJoining - TRUE if the device is performing joining, FALSE is performing Formation
// 2059  *
// 2060  * @return      none
// 2061  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2062 void bdb_nwkJoiningFormation(bool isJoining)
bdb_nwkJoiningFormation:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function bdb_nwkJoiningFormation
        CODE
// 2063 {
        FUNCALL bdb_nwkJoiningFormation, bdb_setChannel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, bdb_setChannel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, ZDOInitDeviceEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, ZDOInitDeviceEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, ZDOInitDeviceEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_nwkJoiningFormation, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 2064   
// 2065   if((vDoPrimaryScan) && (bdbAttributes.bdbPrimaryChannelSet))
        MOV       DPTR,#vDoPrimaryScan
        MOVX      A,@DPTR
        JZ        ??bdb_nwkJoiningFormation_0
        MOV       DPTR,#bdbAttributes + 4
        LCALL     ?XLOAD_R0123
        MOV       A,R0
        ORL       A,R1
        ORL       A,R2
        ORL       A,R3
        JZ        ??bdb_nwkJoiningFormation_0
// 2066   {
// 2067     bdb_setChannel(bdbAttributes.bdbPrimaryChannelSet);
        ; Setup parameters for call to function bdb_setChannel
        MOV       DPTR,#bdbAttributes + 4
        LCALL     ?XLOAD_R2345
        LCALL     `??bdb_setChannel::?relay`; Banked call to: bdb_setChannel
        SJMP      ??bdb_nwkJoiningFormation_1
// 2068   }
// 2069   else
// 2070   {
// 2071     vDoPrimaryScan = FALSE;
??bdb_nwkJoiningFormation_0:
        MOV       DPTR,#vDoPrimaryScan
        MOV       A,#0x0
        MOVX      @DPTR,A
// 2072     bdb_setChannel(bdbAttributes.bdbSecondaryChannelSet);
        ; Setup parameters for call to function bdb_setChannel
        MOV       DPTR,#bdbAttributes
        LCALL     ?XLOAD_R2345
        LCALL     `??bdb_setChannel::?relay`; Banked call to: bdb_setChannel
// 2073   }
// 2074 
// 2075   if(vScanChannels)
??bdb_nwkJoiningFormation_1:
        MOV       DPTR,#zgDefaultChannelList
        LCALL     ?XLOAD_R0123
        MOV       A,R0
        ORL       A,R1
        ORL       A,R2
        ORL       A,R3
        JZ        ??bdb_nwkJoiningFormation_2
// 2076   {
// 2077     if(ZG_DEVICE_RTRONLY_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??bdb_nwkJoiningFormation_3
// 2078     {
// 2079       if(isJoining)
        MOV       A,R6
        JZ        ??bdb_nwkJoiningFormation_4
// 2080       {
// 2081         ZDOInitDeviceEx(100,0);
        ; Setup parameters for call to function ZDOInitDeviceEx
        MOV       R1,#0x0
        MOV       R2,#0x64
        MOV       R3,#0x0
        LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
        MOV       A,R1
        SJMP      ??bdb_nwkJoiningFormation_5
// 2082       }
// 2083       else
// 2084       {
// 2085         ZDOInitDeviceEx(100,1);
??bdb_nwkJoiningFormation_4:
        ; Setup parameters for call to function ZDOInitDeviceEx
        MOV       R1,#0x1
        MOV       R2,#0x64
        MOV       R3,#0x0
        LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
        MOV       A,R1
        SJMP      ??bdb_nwkJoiningFormation_5
// 2086       }
// 2087     }
// 2088     //ZED can only join, and ZC can only create
// 2089     else
// 2090     {
// 2091       ZDOInitDeviceEx(100,0);
??bdb_nwkJoiningFormation_3:
        ; Setup parameters for call to function ZDOInitDeviceEx
        MOV       R1,#0x0
        MOV       R2,#0x64
        MOV       R3,#0x0
        LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
        MOV       A,R1
        SJMP      ??bdb_nwkJoiningFormation_5
// 2092     }
// 2093   }
// 2094   else
// 2095   {
// 2096     if(isJoining)
??bdb_nwkJoiningFormation_2:
        MOV       A,R6
        JZ        ??bdb_nwkJoiningFormation_6
// 2097     {
// 2098       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x3
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
        SJMP      ??bdb_nwkJoiningFormation_5
// 2099     }
// 2100     else
// 2101     {
// 2102       bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
??bdb_nwkJoiningFormation_6:
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x5
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2103     }
// 2104   }
// 2105 }
??bdb_nwkJoiningFormation_5:
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock26
// 2106 
// 2107 #if (ZG_BUILD_JOINING_TYPE)
// 2108  /*********************************************************************
// 2109  * @fn          bdb_tcLinkKeyExchangeAttempt
// 2110  *
// 2111  * @brief       Generic send msg for TC link key exchange process attempts
// 2112  *
// 2113  * @param       didSuccess - FALSE if the step failed/timeout, TRUE otherwise
// 2114  * @param       bdbTCExchangeState - Step in which the attemp was done
// 2115  *
// 2116  * @return      none
// 2117  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2118 void bdb_tcLinkKeyExchangeAttempt(bool didSuccess, uint8 bdbTCExchangeState)
bdb_tcLinkKeyExchangeAttempt:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function bdb_tcLinkKeyExchangeAttempt
        CODE
// 2119 {
        FUNCALL bdb_tcLinkKeyExchangeAttempt, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_tcLinkKeyExchangeAttempt, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       A,R1
        MOV       R7,A
        MOV       ?V0,R2
// 2120   bool bdbEventStatus = BDB_MSG_EVENT_SUCCESS;
        MOV       R6,#0x0
// 2121   uint8 dummy;
// 2122   bdbCommissioningProcedureState.bdbTCExchangeState = bdbTCExchangeState;
        MOV       A,?V0
        MOV       DPTR,#bdbCommissioningProcedureState + 1
        MOVX      @DPTR,A
// 2123   if(didSuccess)
        MOV       A,R7
        JZ        ??bdb_tcLinkKeyExchangeAttempt_0
// 2124   {
// 2125     //Allow try since we are performing a new step.
// 2126     osal_stop_timerEx(bdb_TaskID, BDB_PROCESS_TIMEOUT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x10
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
// 2127     bdbAttributes.bdbTCLinkKeyExchangeAttempts = 0;
        MOV       DPTR,#bdbAttributes + 16
        MOV       A,#0x0
        MOVX      @DPTR,A
        SJMP      ??bdb_tcLinkKeyExchangeAttempt_1
// 2128   }
// 2129   else
// 2130   {
// 2131     bdbEventStatus = BDB_MSG_EVENT_FAIL;
??bdb_tcLinkKeyExchangeAttempt_0:
        MOV       R6,#0x1
// 2132   }
// 2133   bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE,bdbEventStatus,1, &dummy);
??bdb_tcLinkKeyExchangeAttempt_1:
        ; Setup parameters for call to function bdb_SendMsg
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       R4,#0x1
        MOV       A,R6
        MOV       R3,A
        MOV       R2,#0x1
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
// 2134 }
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock27
// 2135 
// 2136 
// 2137  /*********************************************************************
// 2138  * @fn          bdb_requestVerifyTCLinkKey
// 2139  *
// 2140  * @brief       Attempt to verify the TC link key by sending Verify Key Request
// 2141  *
// 2142  * @param       none
// 2143  *
// 2144  * @return      none
// 2145  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2146 void bdb_requestVerifyTCLinkKey(void)
bdb_requestVerifyTCLinkKey:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI Function bdb_requestVerifyTCLinkKey
        CODE
// 2147 {
        FUNCALL bdb_requestVerifyTCLinkKey, APSME_GetRequest
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_requestVerifyTCLinkKey, APSME_VerifyKeyReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_requestVerifyTCLinkKey, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_requestVerifyTCLinkKey, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 11
        MOV       A,#-0xb
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 2148     uint8 TC_ExtAddr[Z_EXTADDR_LEN];
// 2149     APSME_VerifyKeyReq_t vKey;
// 2150     
// 2151     APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
        ; Setup parameters for call to function APSME_GetRequest
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       R1,#-0x55
        LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
        MOV       A,R1
// 2152     
// 2153     vKey.tcExtAddr = TC_ExtAddr;
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP100_8
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 2154     vKey.keyType = KEY_TYPE_TC_LINK;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x4
        MOVX      @DPTR,A
// 2155     
// 2156     APSME_VerifyKeyReq( &vKey );
        ; Setup parameters for call to function APSME_VerifyKeyReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??APSME_VerifyKeyReq::?relay`; Banked call to: APSME_VerifyKeyReq
        MOV       A,R1
// 2157     
// 2158     osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x10
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
// 2159     osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT,BDBC_TC_LINK_KEY_EXANGE_TIMEOUT);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_1388
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       R2,#0x0
        MOV       R3,#0x10
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       A,R1
// 2160     
// 2161 }
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock28
// 2162 
// 2163 /*********************************************************************
// 2164  * @fn          bdb_requestTCLinkKey
// 2165  *
// 2166  * @brief       Attempt to request a TC link key
// 2167  *
// 2168  * @param       none
// 2169  *
// 2170  * @return      none
// 2171  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2172 void bdb_requestTCLinkKey(void)
bdb_requestTCLinkKey:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function bdb_requestTCLinkKey
        CODE
// 2173 {
        FUNCALL bdb_requestTCLinkKey, APSME_RequestKeyReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_requestTCLinkKey, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_requestTCLinkKey, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 13
        MOV       A,#-0xd
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
// 2174   zAddrType_t destAddr;
// 2175   APSME_RequestKeyReq_t req;
// 2176 
// 2177   destAddr.addrMode = Addr16Bit;
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
// 2178   destAddr.addr.shortAddr = 0x0000;
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
// 2179   
// 2180   req.dstAddr = destAddr.addr.shortAddr;
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        PUSH      A
          CFI CFA_SP SP+-6
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        POP       A
          CFI CFA_SP SP+-5
        MOVX      @DPTR,A
// 2181   req.keyType = KEY_TYPE_TC_LINK;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x4
        MOVX      @DPTR,A
// 2182   
// 2183   APSME_RequestKeyReq(&req);
        ; Setup parameters for call to function APSME_RequestKeyReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??APSME_RequestKeyReq::?relay`; Banked call to: APSME_RequestKeyReq
        MOV       A,R1
// 2184   
// 2185   osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x10
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
// 2186   
// 2187   osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT,(uint32)requestLinkKeyTimeout);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#requestLinkKeyTimeout
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       R2,#0x0
        MOV       R3,#0x10
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       A,R1
// 2188 } 
        MOV       A,#0xd
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock29
// 2189 
// 2190 
// 2191 /*********************************************************************
// 2192  * @fn          bdb_requestTCStackVersion
// 2193  *
// 2194  * @brief       Attempt to request the TC stack version using ZDP Node desc if 
// 2195  *              join a Centralized nwk
// 2196  *
// 2197  * @param       none
// 2198  *
// 2199  * @return      none
// 2200  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2201 void bdb_requestTCStackVersion(void)
bdb_requestTCStackVersion:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function bdb_requestTCStackVersion
        CODE
// 2202 {
        FUNCALL bdb_requestTCStackVersion, APSME_IsDistributedSecurity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_requestTCStackVersion, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_requestTCStackVersion, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_requestTCStackVersion, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_requestTCStackVersion, bdb_setNodeJoinLinkKeyType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_requestTCStackVersion, bdb_setNodeJoinLinkKeyType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_requestTCStackVersion, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 2203   if(requestNewTrustCenterLinkKey)
        MOV       DPTR,#requestNewTrustCenterLinkKey
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??bdb_requestTCStackVersion_0 & 0xFFFF
// 2204   {
// 2205     if(!APSME_IsDistributedSecurity())
        ; Setup parameters for call to function APSME_IsDistributedSecurity
        LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
        MOV       A,R1
        JZ        $+5
        LJMP      ??bdb_requestTCStackVersion_1 & 0xFFFF
// 2206     {
// 2207       if(bdbAttributes.bdbTCLinkKeyExchangeMethod == BDB_TC_LINK_KEY_EXCHANGE_APS_KEY)
        MOV       DPTR,#bdbAttributes + 18
        MOVX      A,@DPTR
        JNZ       ??bdb_requestTCStackVersion_2
// 2208       {
// 2209         zAddrType_t destAddr;
// 2210        
// 2211         destAddr.addrMode = Addr16Bit;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
// 2212         destAddr.addr.shortAddr = 0x0000;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
// 2213        
// 2214         ZDP_NodeDescReq( &destAddr, destAddr.addr.shortAddr, 0);  
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R1,#0x2
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,R1
// 2215         
// 2216         osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x10
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
// 2217         osal_start_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT, BDBC_TC_LINK_KEY_EXANGE_TIMEOUT );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_1388
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R2,#0x0
        MOV       R3,#0x10
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,R1
// 2218         return;
        SJMP      ??bdb_requestTCStackVersion_3
// 2219       }
// 2220       else
// 2221       {
// 2222         if(pfnCBKETCLinkKeyExchange)
??bdb_requestTCStackVersion_2:
        MOV       DPTR,#pfnCBKETCLinkKeyExchange
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_requestTCStackVersion_3
// 2223         {
// 2224           pfnCBKETCLinkKeyExchange();
        ; Setup parameters for indirect call
        MOV       DPTR,#pfnCBKETCLinkKeyExchange
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        LCALL     ?CALL_IND
// 2225         }
// 2226         return;
        SJMP      ??bdb_requestTCStackVersion_3
// 2227       }
// 2228     }
// 2229     else
// 2230     {
// 2231       bdb_setNodeJoinLinkKeyType(BDB_DISTRIBUTED_SECURITY_GLOBAL_LINK_KEY);
??bdb_requestTCStackVersion_1:
        ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
        MOV       R1,#0x1
        LCALL     `??bdb_setNodeJoinLinkKeyType::?relay`; Banked call to: bdb_setNodeJoinLinkKeyType
        SJMP      ??bdb_requestTCStackVersion_4
// 2232     }
// 2233   }
// 2234   else
// 2235   {
// 2236     //Key not required, set default which is global
// 2237     bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
??bdb_requestTCStackVersion_0:
        ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
        MOV       R1,#0x0
        LCALL     `??bdb_setNodeJoinLinkKeyType::?relay`; Banked call to: bdb_setNodeJoinLinkKeyType
// 2238   }
// 2239   //TC link key not required or join distributed nwk
// 2240   bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE,TRUE);
??bdb_requestTCStackVersion_4:
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x1
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2241 }
??bdb_requestTCStackVersion_3:
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock30
// 2242 #endif
// 2243 
// 2244 
// 2245 /*********************************************************************
// 2246  * @fn          bdb_nwkSteeringDeviceOnNwk
// 2247  *
// 2248  * @brief       Send ZDP mgmt permit joining
// 2249  *
// 2250  * @param       none
// 2251  *
// 2252  * @return      none
// 2253  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2254 void bdb_nwkSteeringDeviceOnNwk(void)
bdb_nwkSteeringDeviceOnNwk:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI Function bdb_nwkSteeringDeviceOnNwk
        CODE
// 2255 {
        FUNCALL bdb_nwkSteeringDeviceOnNwk, ZDP_MgmtPermitJoinReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
// 2256   zAddrType_t dstAddr;
// 2257   dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 2258   dstAddr.addrMode = AddrBroadcast;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0xf
        MOVX      @DPTR,A
// 2259   // Trust Center significance is always true
// 2260   ZDP_MgmtPermitJoinReq( &dstAddr, BDBC_MIN_COMMISSIONING_TIME, TRUE, FALSE );
        ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
        MOV       R5,#0x0
        MOV       R4,#0x1
        MOV       R1,#-0x4c
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
        MOV       A,R1
// 2261 }
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock31
// 2262 
// 2263 
// 2264 /*********************************************************************
// 2265  * @fn          bdb_startResumeCommissioningProcess
// 2266  *
// 2267  * @brief       Starts or resume the commissioning operations sets in the 
// 2268  *              commissioningMode attribute
// 2269  *
// 2270  * @param       none
// 2271  *
// 2272  * @return      none
// 2273  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2274 void bdb_startResumeCommissioningProcess(void)
bdb_startResumeCommissioningProcess:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI Function bdb_startResumeCommissioningProcess
        CODE
// 2275 {
        FUNCALL bdb_startResumeCommissioningProcess, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, ZMacGetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, initiatorSelectNwkParams
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, touchLinkInitiator_StartDevDisc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_NotifyCommissioningModeStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_ClearNetworkParams
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_nwkSteeringDeviceOnNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_nwkJoiningFormation
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_NotifyCommissioningModeStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_isDeviceNonFactoryNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_setEpDescListToActiveEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_SendIdentifyQuery
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_startResumeCommissioningProcess, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 16
        MOV       A,#-0x10
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
// 2276 
// 2277 #if ( defined ( BDB_TL_INITIATOR ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) ) 
// 2278   if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_INITIATOR_TL)
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??bdb_startResumeCommissioningProcess_0
// 2279   {
// 2280     uint16 nwkAddr;
// 2281 
// 2282     //Does the device supports this commissioning mode?
// 2283     if(bdbAttributes.bdbNodeCommissioningCapability & BDB_TOUCHLINK_CAPABILITY)
        MOV       DPTR,#bdbAttributes + 12
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.3
        JNC       ??bdb_startResumeCommissioningProcess_1
// 2284     {
// 2285       //Clear previous state and substates
// 2286       osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState));
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,#bdbCommissioningProcedureState & 0xff
        MOV       R3,#(bdbCommissioningProcedureState >> 8) & 0xff
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2287       bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_TL;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x2
        MOVX      @DPTR,A
// 2288       
// 2289       // Get our short address
// 2290       ZMacGetReq( ZMacShortAddress, (byte*)&nwkAddr );
        ; Setup parameters for call to function ZMacGetReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x53
        LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
        MOV       A,R1
// 2291       if ( nwkAddr >= NWK_BROADCAST_SHORTADDR_DEVZCZR )
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       C
        MOVX      A,@DPTR
        SUBB      A,#-0x4
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,#-0x1
        JC        ??bdb_startResumeCommissioningProcess_2
// 2292       {
// 2293         initiatorSelectNwkParams();
        ; Setup parameters for call to function initiatorSelectNwkParams
        LCALL     `??initiatorSelectNwkParams::?relay`; Banked call to: initiatorSelectNwkParams
// 2294       }
// 2295       
// 2296       touchLinkInitiator_StartDevDisc( );  
??bdb_startResumeCommissioningProcess_2:
        ; Setup parameters for call to function touchLinkInitiator_StartDevDisc
        LCALL     `??touchLinkInitiator_StartDevDisc::?relay`; Banked call to: touchLinkInitiator_StartDevDisc
        MOV       A,R1
// 2297       
// 2298       bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_TOUCHLINK);
        ; Setup parameters for call to function bdb_NotifyCommissioningModeStart
        MOV       R1,#0x4
        LCALL     `??bdb_NotifyCommissioningModeStart::?relay`; Banked call to: bdb_NotifyCommissioningModeStart
        SJMP      ??bdb_startResumeCommissioningProcess_3
// 2299     }
// 2300     else
// 2301     {
// 2302       //Process the next commissioning mode
// 2303       bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, FALSE );
??bdb_startResumeCommissioningProcess_1:
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x2
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2304     }
// 2305     return;
??bdb_startResumeCommissioningProcess_3:
        LJMP      ??bdb_startResumeCommissioningProcess_4 & 0xFFFF
// 2306   }
// 2307 #endif // BDB_TOUCHLINK_CAPABILITY_ENABLED  
// 2308   
// 2309 #if ZG_BUILD_ENDDEVICE_TYPE
// 2310   if(ZG_DEVICE_ENDDEVICE_TYPE)
// 2311   {
// 2312     if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)
??bdb_startResumeCommissioningProcess_0:
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.5
        JNC       $+5
        LJMP      ??bdb_startResumeCommissioningProcess_4 & 0xFFFF
// 2313     {
// 2314       //No commissioning process can be performed if the ZED has lost its parent
// 2315       return;
// 2316     }
// 2317   }
// 2318 #endif
// 2319   
// 2320   if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_NWK_STEERING)
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JNC       ??bdb_startResumeCommissioningProcess_5
// 2321   {
// 2322     bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_STEERING_ON_NWK;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x4
        MOVX      @DPTR,A
// 2323     
// 2324     if(bdbAttributes.bdbNodeCommissioningCapability & BDB_NETWORK_STEERING_CAPABILITY)
        MOV       DPTR,#bdbAttributes + 12
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??bdb_startResumeCommissioningProcess_6
// 2325     {
// 2326 #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
// 2327       bdb_ClearNetworkParams();
        ; Setup parameters for call to function bdb_ClearNetworkParams
        LCALL     `??bdb_ClearNetworkParams::?relay`; Banked call to: bdb_ClearNetworkParams
// 2328 #endif
// 2329       if(bdbAttributes.bdbNodeIsOnANetwork)
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        JZ        ??bdb_startResumeCommissioningProcess_7
// 2330       {
// 2331         bdb_nwkSteeringDeviceOnNwk();
        ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
        LCALL     `??bdb_nwkSteeringDeviceOnNwk::?relay`; Banked call to: bdb_nwkSteeringDeviceOnNwk
// 2332         bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x4
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
        SJMP      ??bdb_startResumeCommissioningProcess_6
// 2333       }
// 2334 #if (ZG_BUILD_JOINING_TYPE)
// 2335       else
// 2336       {
// 2337         if(ZG_DEVICE_JOINING_TYPE)
??bdb_startResumeCommissioningProcess_7:
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??bdb_startResumeCommissioningProcess_8
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??bdb_startResumeCommissioningProcess_6
// 2338         {
// 2339           vDoPrimaryScan = TRUE;
??bdb_startResumeCommissioningProcess_8:
        MOV       DPTR,#vDoPrimaryScan
        MOV       A,#0x1
        MOVX      @DPTR,A
// 2340           
// 2341           //Initialize the commissioning procedure state, bdbJoinState to nwk discovery and TCLinkKeyExchange to not active
// 2342           osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState_t));
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,#bdbCommissioningProcedureState & 0xff
        MOV       R3,#(bdbCommissioningProcedureState >> 8) & 0xff
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2343           bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_JOINING;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x3
        MOVX      @DPTR,A
// 2344           bdb_nwkJoiningFormation(TRUE);
        ; Setup parameters for call to function bdb_nwkJoiningFormation
        MOV       R1,#0x1
        LCALL     `??bdb_nwkJoiningFormation::?relay`; Banked call to: bdb_nwkJoiningFormation
// 2345           bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_NWK_STEERING);
        ; Setup parameters for call to function bdb_NotifyCommissioningModeStart
        MOV       R1,#0x1
        LCALL     `??bdb_NotifyCommissioningModeStart::?relay`; Banked call to: bdb_NotifyCommissioningModeStart
// 2346         }
// 2347       }
// 2348 #endif
// 2349 #if (ZG_BUILD_COORDINATOR_TYPE)
// 2350       if(ZG_DEVICE_COORDINATOR_TYPE)
// 2351       {
// 2352         bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, FALSE);
// 2353       }
// 2354 #endif
// 2355     }
// 2356     return;
??bdb_startResumeCommissioningProcess_6:
        LJMP      ??bdb_startResumeCommissioningProcess_4 & 0xFFFF
// 2357   }
// 2358   
// 2359   if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_NWK_FORMATION)
??bdb_startResumeCommissioningProcess_5:
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.2
        JNC       ??bdb_startResumeCommissioningProcess_9
// 2360   {
// 2361     bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FORMATION;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x5
        MOVX      @DPTR,A
// 2362     
// 2363     if(bdbAttributes.bdbNodeCommissioningCapability & BDB_NETWORK_FORMATION_CAPABILITY)
// 2364     {
// 2365       if(!bdbAttributes.bdbNodeIsOnANetwork)
// 2366       {
// 2367 #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
// 2368       bdb_ClearNetworkParams();
// 2369 #endif
// 2370         vDoPrimaryScan = TRUE;
// 2371         
// 2372         osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState));
// 2373         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FORMATION;
// 2374 
// 2375         bdb_nwkJoiningFormation(FALSE);
// 2376         bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_FORMATION);
// 2377         return;
// 2378       }
// 2379     }
// 2380     bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x5
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2381     return;
        LJMP      ??bdb_startResumeCommissioningProcess_4 & 0xFFFF
// 2382   }
// 2383 
// 2384 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)    
// 2385   if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_FINDING_BINDING)
??bdb_startResumeCommissioningProcess_9:
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.3
        JC        $+5
        LJMP      ??bdb_startResumeCommissioningProcess_4 & 0xFFFF
// 2386   {
// 2387     bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FINDING_BINDING;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x6
        MOVX      @DPTR,A
// 2388     
// 2389     //Is the device on a network?
// 2390     if(bdb_isDeviceNonFactoryNew())
        ; Setup parameters for call to function bdb_isDeviceNonFactoryNew
        LCALL     `??bdb_isDeviceNonFactoryNew::?relay`; Banked call to: bdb_isDeviceNonFactoryNew
        MOV       A,R1
        JNZ       $+5
        LJMP      ??bdb_startResumeCommissioningProcess_10 & 0xFFFF
// 2391     {
// 2392       zclAttrRec_t attrRec;
// 2393 
// 2394       endPointDesc_t *bdb_CurrEpDescriptor = NULL;
        MOV       R6,#0x0
        MOV       R7,#0x0
// 2395 
// 2396       bdb_CurrEpDescriptor = bdb_setEpDescListToActiveEndpoint();
        ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
        LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R6,?V0
        MOV       R7,?V1
// 2397       
// 2398       //If not found endpoint with Identify cluster is found, then report fail
// 2399       if(bdb_CurrEpDescriptor == NULL)
        MOV       A,R6
        ORL       A,R7
        JNZ       ??bdb_startResumeCommissioningProcess_11
// 2400       {
// 2401         bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xe
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
// 2402         return;
        LJMP      ??bdb_startResumeCommissioningProcess_4 & 0xFFFF
// 2403       }
// 2404       
// 2405       if( bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_TARGET)  //F&B as Target
??bdb_startResumeCommissioningProcess_11:
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JC        $+5
        LJMP      ??bdb_startResumeCommissioningProcess_12 & 0xFFFF
// 2406       {
// 2407         if (zclFindAttrRec( bdb_CurrEpDescriptor->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
// 2408                   ATTRID_IDENTIFY_TIME, &attrRec ) )
        ; Setup parameters for call to function zclFindAttrRec
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x3
        MOV       R3,#0x0
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       A,R1
        JNZ       $+5
        LJMP      ??bdb_startResumeCommissioningProcess_13 & 0xFFFF
// 2409         {
// 2410           //Set it to at less 180 
// 2411           if ( *((uint16*)attrRec.attr.dataPtr) <= BDBC_MIN_COMMISSIONING_TIME )
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        CLR       C
        MOVX      A,@DPTR
        SUBB      A,#-0x4b
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,#0x0
        JNC       ??bdb_startResumeCommissioningProcess_14
// 2412           {
// 2413             *((uint16*)attrRec.attr.dataPtr) = BDBC_MIN_COMMISSIONING_TIME;
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOV       A,#-0x4c
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
// 2414              osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3e8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R2,#0x0
        MOV       R3,#0x20
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       A,R1
// 2415 
// 2416             if(pfnIdentifyTimeChangeCB != NULL)
        MOV       DPTR,#pfnIdentifyTimeChangeCB
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_startResumeCommissioningProcess_14
// 2417             {
// 2418               if(bdbIndentifyActiveEndpoint == 0xFF)
        MOV       DPTR,#bdbIndentifyActiveEndpoint
        MOVX      A,@DPTR
        XRL       A,#0xff
        JNZ       ??bdb_startResumeCommissioningProcess_15
// 2419               {
// 2420                 pfnIdentifyTimeChangeCB(bdbIndentifyActiveEndpoint);  
        ; Setup parameters for indirect call
        MOV       DPTR,#bdbIndentifyActiveEndpoint
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#pfnIdentifyTimeChangeCB
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        LCALL     ?CALL_IND
        SJMP      ??bdb_startResumeCommissioningProcess_14
// 2421               }
// 2422               else
// 2423               {
// 2424                 pfnIdentifyTimeChangeCB(bdb_CurrEpDescriptor->endPoint);
??bdb_startResumeCommissioningProcess_15:
        ; Setup parameters for indirect call
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#pfnIdentifyTimeChangeCB
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        LCALL     ?CALL_IND
// 2425               }
// 2426             }
// 2427           }
// 2428           //Attribute found and set, report success
// 2429           if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR))
??bdb_startResumeCommissioningProcess_14:
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JC        ??bdb_startResumeCommissioningProcess_16
// 2430           {
// 2431             bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FB_TARGET_IN_PROGRESS);
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0x9
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
        SJMP      ??bdb_startResumeCommissioningProcess_12
// 2432           }
// 2433           else
// 2434           {
// 2435             bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
// 2436 
// 2437             bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
??bdb_startResumeCommissioningProcess_16:
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x3
        MOVX      @DPTR,A
// 2438             bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_FB_TARGET_IN_PROGRESS;
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x9
        MOVX      @DPTR,A
// 2439 
// 2440             bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
        ; Setup parameters for call to function bdb_SendMsg
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R4,#0x3
        MOV       R3,#0x0
        MOV       R2,#0xa
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
        SJMP      ??bdb_startResumeCommissioningProcess_12
// 2441           }
// 2442         }
// 2443         else
// 2444         {
// 2445           //Attribute not found and no initiator process, report fail
// 2446           if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR))
??bdb_startResumeCommissioningProcess_13:
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JC        ??bdb_startResumeCommissioningProcess_12
// 2447           {
// 2448             bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xe
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
// 2449           }
// 2450         }
// 2451       }  //F&B Target
// 2452       
// 2453       if( bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR)  //F&B as Initiator
??bdb_startResumeCommissioningProcess_12:
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JC        $+5
        LJMP      ??bdb_startResumeCommissioningProcess_4 & 0xFFFF
// 2454       {
// 2455         bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
// 2456         
// 2457         //If no function to add binds is available then do not process Initiator
// 2458         if(!pbindAddEntry)
        MOV       DPTR,#pbindAddEntry
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       ??bdb_startResumeCommissioningProcess_17
// 2459         {
// 2460           //If no target process, then report fail
// 2461           if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_TARGET))
        MOV       DPTR,#bdb_CurrEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JC        ??bdb_startResumeCommissioningProcess_4
// 2462           {
// 2463             bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xe
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
        SJMP      ??bdb_startResumeCommissioningProcess_4
// 2464           }        
// 2465         }
// 2466         else
// 2467         {
// 2468           //Send identify query with the endpoint requested
// 2469           if(bdb_SendIdentifyQuery(bdb_CurrEpDescriptor->endPoint) != ZSuccess)
??bdb_startResumeCommissioningProcess_17:
        ; Setup parameters for call to function bdb_SendIdentifyQuery
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendIdentifyQuery::?relay`; Banked call to: bdb_SendIdentifyQuery
        MOV       A,R1
        JZ        ??bdb_startResumeCommissioningProcess_18
// 2470           {
// 2471             bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xe
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
// 2472           }
// 2473 
// 2474           //If periodic F&B is enabled
// 2475           if ( FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE )
// 2476           {
// 2477             // total F&B time will be at least BDBC_MIN_COMMISSIONING_TIME, and at most (BDBC_MIN_COMMISSIONING_TIME + FINDING_AND_BINDING_PERIODIC_TIME - 1)
// 2478             bdb_FB_InitiatorCurrentCyclesNumber = (BDBC_MIN_COMMISSIONING_TIME + (FINDING_AND_BINDING_PERIODIC_TIME - 1)) / FINDING_AND_BINDING_PERIODIC_TIME;
??bdb_startResumeCommissioningProcess_18:
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOV       A,#0xc
        MOVX      @DPTR,A
// 2479             
// 2480             osal_start_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT, FINDING_AND_BINDING_PERIODIC_TIME * 1000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3a98
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       A,R1
// 2481           }
// 2482 
// 2483           bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x3
        MOVX      @DPTR,A
// 2484           bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_FB_INITITATOR_IN_PROGRESS;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0xa
        MOVX      @DPTR,A
// 2485 
// 2486           bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
        ; Setup parameters for call to function bdb_SendMsg
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R4,#0x3
        MOV       R3,#0x0
        MOV       R2,#0xa
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
        SJMP      ??bdb_startResumeCommissioningProcess_4
// 2487         }
// 2488       } //F&B Initiator
// 2489     }
// 2490     //Not in the network
// 2491     else
// 2492     {
// 2493       bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
??bdb_startResumeCommissioningProcess_10:
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xe
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
// 2494     }
// 2495     
// 2496     return;
// 2497   }
// 2498 #endif
// 2499   
// 2500 }
??bdb_startResumeCommissioningProcess_4:
        MOV       A,#0x10
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock32
// 2501 
// 2502 /*********************************************************************
// 2503  * @fn          bdb_event_loop
// 2504  *
// 2505  * @brief       Main event loop bdb tasks.
// 2506  *
// 2507  * @param       task_id - task id
// 2508  * @param       events - event bitmap
// 2509  *
// 2510  * @return      unprocessed events
// 2511  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2512 UINT16 bdb_event_loop(byte task_id, UINT16 events)
bdb_event_loop:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI Function bdb_event_loop
        CODE
// 2513 {
        FUNCALL bdb_event_loop, bdb_startResumeCommissioningProcess
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_tcLinkKeyExchangeAttempt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_nwkSteeringDeviceOnNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_processZDOMgs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_ProcessOSALMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_processTimeout
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_setNodeIsOnANetwork
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, NLME_LeaveReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_setEpDescListToActiveEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_getRespondentRetry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_SendIdentifyQuery
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_exitFindingBindingWStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_event_loop, bdb_ProcessRespondentList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV       A,#-0x12
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 13
        MOV       A,#-0xd
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       ?V5,R1
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2514   (void)task_id;  // Intentionally unreferenced parameter
// 2515   
// 2516 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
// 2517   endPointDesc_t * bdb_CurrEpDescriptor;
// 2518 #endif
// 2519   
// 2520   if(events & BDB_CHANGE_COMMISSIONING_STATE)
        MOV       A,R6
        ANL       A,#0x4
        JZ        ??bdb_event_loop_0
// 2521   {
// 2522     switch(bdbCommissioningProcedureState.bdbCommissioningState)
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        JZ        ??bdb_event_loop_1
        DEC       A
        JZ        ??bdb_event_loop_2
        ADD       A,#-0x3
        JZ        ??bdb_event_loop_3
        ADD       A,#-0x2
        JZ        ??bdb_event_loop_4
        SJMP      ??bdb_event_loop_5
// 2523     {
// 2524       case BDB_COMMISSIONING_STATE_START_RESUME:
// 2525         bdb_startResumeCommissioningProcess();
??bdb_event_loop_1:
        ; Setup parameters for call to function bdb_startResumeCommissioningProcess
        LCALL     `??bdb_startResumeCommissioningProcess::?relay`; Banked call to: bdb_startResumeCommissioningProcess
// 2526       break;
        SJMP      ??bdb_event_loop_5
// 2527       
// 2528       case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
// 2529         if (ZG_BUILD_JOINING_TYPE)
// 2530         {
// 2531           bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_STACK_VERSION);
??bdb_event_loop_2:
        ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
        MOV       R2,#0x1
        MOV       R1,#0x1
        LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
// 2532         }
// 2533       break;
        SJMP      ??bdb_event_loop_5
// 2534       
// 2535       case BDB_COMMISSIONING_STATE_STEERING_ON_NWK:
// 2536         bdb_nwkSteeringDeviceOnNwk();
??bdb_event_loop_3:
        ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
        LCALL     `??bdb_nwkSteeringDeviceOnNwk::?relay`; Banked call to: bdb_nwkSteeringDeviceOnNwk
// 2537         
// 2538         bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x4
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2539       break;
        SJMP      ??bdb_event_loop_5
// 2540       
// 2541       case BDB_COMMISSIONING_STATE_FINDING_BINDING:
// 2542         bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
??bdb_event_loop_4:
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0x0
        MOVX      @DPTR,A
// 2543         bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
        MOV       DPTR,#bdbCommissioningProcedureState
        MOV       A,#0x0
        MOVX      @DPTR,A
// 2544         osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_32
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       A,R1
// 2545       break;
// 2546       
// 2547     }
// 2548     return (events ^ BDB_CHANGE_COMMISSIONING_STATE);
??bdb_event_loop_5:
        MOV       A,R6
        XRL       A,#0x4
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x0
        MOV       R3,A
        LJMP      ??bdb_event_loop_6 & 0xFFFF
// 2549   }
// 2550 
// 2551   if ( events & SYS_EVENT_MSG )
??bdb_event_loop_0:
        MOV       A,R6
        ANL       A,#0x0
        MOV       R0,A
        MOV       A,R7
        ANL       A,#0x80
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       $+5
        LJMP      ??bdb_event_loop_7 & 0xFFFF
// 2552   {
// 2553     uint8 *msg_ptr;
// 2554     
// 2555     while ( (msg_ptr = osal_msg_receive( bdb_TaskID )) )
??bdb_event_loop_8:
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,?V2
        MOV       R1,?V3
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_event_loop_9
// 2556     {
// 2557       //Process the Incomming ZDO messages used by BDB commissioning methods
// 2558       if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_ZDO_CB_MSG)
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        XRL       A,#0xd3
        JNZ       ??bdb_event_loop_10
// 2559       {
// 2560         bdb_processZDOMgs((zdoIncomingMsg_t *)msg_ptr);
        ; Setup parameters for call to function bdb_processZDOMgs
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??bdb_processZDOMgs::?relay`; Banked call to: bdb_processZDOMgs
        SJMP      ??bdb_event_loop_11
// 2561       }
// 2562       
// 2563       //Validate the is receive on the right process
// 2564       else if(((bdbInMsg_t*)msg_ptr)->hdr.event == bdbCommissioningProcedureState.bdbCommissioningState)
??bdb_event_loop_10:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??bdb_event_loop_12
// 2565       {
// 2566         bdb_ProcessOSALMsg( (bdbInMsg_t *)msg_ptr );
        ; Setup parameters for call to function bdb_ProcessOSALMsg
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??bdb_ProcessOSALMsg::?relay`; Banked call to: bdb_ProcessOSALMsg
        SJMP      ??bdb_event_loop_11
// 2567       }
// 2568       //Notify the user
// 2569       else if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_NOTIFY_USER)
??bdb_event_loop_12:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        XRL       A,#0xa
        JNZ       ??bdb_event_loop_11
// 2570       {
// 2571         ((bdbCommissioningModeMsg_t*) ((bdbInMsg_t*)msg_ptr)->buf)->bdbRemainingCommissioningModes = bdbAttributes.bdbCommissioningMode;
        MOV       DPTR,#bdbAttributes + 11
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2572         if(pfnCommissioningStatusCB)
        MOV       DPTR,#pfnCommissioningStatusCB
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_event_loop_11
// 2573         {
// 2574           pfnCommissioningStatusCB((bdbCommissioningModeMsg_t*) (((bdbInMsg_t*)msg_ptr)->buf));
        ; Setup parameters for indirect call
        MOV       A,?V0
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,?V1
        MOV       R3,A
        MOV       DPTR,#pfnCommissioningStatusCB
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        LCALL     ?CALL_IND
// 2575         }
// 2576 #ifdef MT_APP_CNF_FUNC
// 2577         //Notify the host processor about the event
// 2578         MT_AppCnfCommissioningNotification((bdbCommissioningModeMsg_t*) (((bdbInMsg_t*)msg_ptr)->buf));
// 2579 #endif
// 2580       }
// 2581 #if (ZG_BUILD_COORDINATOR_TYPE)
// 2582       else
// 2583       {
// 2584         if(ZG_DEVICE_COORDINATOR_TYPE)
// 2585         {
// 2586           //Notify the status 
// 2587           if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_TC_LINK_KEY_EXCHANGE_PROCESS)
// 2588           {
// 2589             pfnTCLinkKeyExchangeProcessCB( (bdb_TCLinkKeyExchProcess_t*) ((bdbInMsg_t*)msg_ptr)->buf);
// 2590           }
// 2591         }
// 2592       }
// 2593 #endif
// 2594       // Release the memory
// 2595       osal_msg_deallocate( msg_ptr );
??bdb_event_loop_11:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
        MOV       A,R1
        LJMP      ??bdb_event_loop_8 & 0xFFFF
// 2596     }
// 2597 
// 2598     // Return unprocessed events
// 2599     return (events ^ SYS_EVENT_MSG);
??bdb_event_loop_9:
        MOV       A,R6
        XRL       A,#0x0
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x80
        MOV       R3,A
        LJMP      ??bdb_event_loop_6 & 0xFFFF
// 2600   }
// 2601   
// 2602 
// 2603   if(events & BDB_PROCESS_TIMEOUT)
??bdb_event_loop_7:
        MOV       A,R6
        ANL       A,#0x0
        MOV       R0,A
        MOV       A,R7
        ANL       A,#0x10
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_event_loop_13
// 2604   {
// 2605     bdb_processTimeout();
        ; Setup parameters for call to function bdb_processTimeout
        LCALL     `??bdb_processTimeout::?relay`; Banked call to: bdb_processTimeout
// 2606     // Return unprocessed events
// 2607     return (events ^ BDB_PROCESS_TIMEOUT);
        MOV       A,R6
        XRL       A,#0x0
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x10
        MOV       R3,A
        LJMP      ??bdb_event_loop_6 & 0xFFFF
// 2608   }
// 2609   
// 2610   if(events &  BDB_REPORT_TIMEOUT){
??bdb_event_loop_13:
        MOV       A,R6
        ANL       A,#0x80
        JZ        ??bdb_event_loop_14
// 2611 #ifdef BDB_REPORTING    
// 2612     bdb_RepProcessEvent();
// 2613 #endif
// 2614     // Return unprocessed events
// 2615     return (events ^ BDB_REPORT_TIMEOUT);
        MOV       A,R6
        XRL       A,#0x80
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x0
        MOV       R3,A
        LJMP      ??bdb_event_loop_6 & 0xFFFF
// 2616   }
// 2617   
// 2618 #if (ZG_BUILD_JOINING_TYPE)
// 2619   if(events & BDB_TC_LINK_KEY_EXCHANGE_FAIL)
??bdb_event_loop_14:
        MOV       A,R6
        ANL       A,#0x2
        JZ        ??bdb_event_loop_15
// 2620   {
// 2621     if(ZG_DEVICE_JOINING_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??bdb_event_loop_16
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??bdb_event_loop_17
// 2622     {
// 2623       NLME_LeaveReq_t leaveReq;
// 2624       // Set every field to 0
// 2625       osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
??bdb_event_loop_16:
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x5
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2626       
// 2627       bdb_setNodeIsOnANetwork(FALSE);
        ; Setup parameters for call to function bdb_setNodeIsOnANetwork
        MOV       R1,#0x0
        LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
// 2628 
// 2629       if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
        ; Setup parameters for call to function NLME_LeaveReq
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
        MOV       A,R1
        JZ        ??bdb_event_loop_17
// 2630       {
// 2631         osal_set_event( bdb_TaskID,BDB_TC_LINK_KEY_EXCHANGE_FAIL);
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x2
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
        MOV       A,R1
// 2632       }
// 2633     }
// 2634     // Return unprocessed events
// 2635     return (events ^ BDB_TC_LINK_KEY_EXCHANGE_FAIL);
??bdb_event_loop_17:
        MOV       A,R6
        XRL       A,#0x2
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x0
        MOV       R3,A
        LJMP      ??bdb_event_loop_6 & 0xFFFF
// 2636   }
// 2637 #endif
// 2638   
// 2639   if(events & BDB_TC_JOIN_TIMEOUT)
??bdb_event_loop_15:
        MOV       A,R6
        ANL       A,#0x0
        MOV       R0,A
        MOV       A,R7
        ANL       A,#0x8
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_event_loop_18
// 2640   {     
// 2641 #if (ZG_BUILD_COORDINATOR_TYPE)
// 2642     if(ZG_DEVICE_COORDINATOR_TYPE)
// 2643     {
// 2644       bdb_TCProcessJoiningList();
// 2645     }
// 2646 #endif    
// 2647     return (events ^ BDB_TC_JOIN_TIMEOUT);
        MOV       A,R6
        XRL       A,#0x0
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x8
        MOV       R3,A
        LJMP      ??bdb_event_loop_6 & 0xFFFF
// 2648   }
// 2649 
// 2650 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
// 2651   
// 2652   if(events & BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT)
??bdb_event_loop_18:
        MOV       A,R6
        ANL       A,#0x40
        JNZ       $+5
        LJMP      ??bdb_event_loop_19 & 0xFFFF
// 2653   {
// 2654     if ( FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE )
// 2655     {
// 2656       bdb_CurrEpDescriptor = bdb_setEpDescListToActiveEndpoint();
        ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
        LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V6,?V0
        MOV       ?V7,?V1
// 2657       
// 2658       //If we have endpoint from which to send the identify command, then proceed, otherwise finish
// 2659       if(bdb_CurrEpDescriptor != NULL) //just a safty check. The fact that we got to this functuon at all means that this cannot be NULL
        MOV       A,?V6
        ORL       A,?V7
        JZ        ??bdb_event_loop_20
// 2660       {
// 2661         //Substract an attempt
// 2662         bdb_FB_InitiatorCurrentCyclesNumber--;
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX      A,@DPTR
        ADD       A,#-0x1
        MOVX      @DPTR,A
// 2663         
// 2664         if(bdb_FB_InitiatorCurrentCyclesNumber > 0)
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX      A,@DPTR
        JZ        ??bdb_event_loop_20
// 2665         {
// 2666           //Only send Identify Query if there is no pending responses from a previous identify query
// 2667           if ((osal_get_timeoutEx(bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT) == 0) && (bdb_getRespondentRetry(pRespondentHead) == NULL))
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x0
        MOV       R3,#0x40
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV       A,R2
        ORL       A,R3
        ORL       A,R4
        ORL       A,R5
        JNZ       ??bdb_event_loop_21
        ; Setup parameters for call to function bdb_getRespondentRetry
        MOV       DPTR,#pRespondentHead
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,?V0
        ORL       A,?V1
        JNZ       ??bdb_event_loop_21
// 2668           {
// 2669             //Send identify query with the endpoint requested
// 2670             bdb_SendIdentifyQuery(bdb_CurrEpDescriptor->endPoint);
        ; Setup parameters for call to function bdb_SendIdentifyQuery
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??bdb_SendIdentifyQuery::?relay`; Banked call to: bdb_SendIdentifyQuery
        MOV       A,R1
// 2671           }
// 2672           osal_start_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT, FINDING_AND_BINDING_PERIODIC_TIME * 1000);
??bdb_event_loop_21:
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3a98
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       R2,#0x40
        MOV       R3,#0x0
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       A,R1
// 2673         }
// 2674       }
// 2675     }
// 2676 
// 2677     if (bdb_FB_InitiatorCurrentCyclesNumber == 0)
??bdb_event_loop_20:
        MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
        MOVX      A,@DPTR
        JNZ       ??bdb_event_loop_22
// 2678     {
// 2679       bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE );
        ; Setup parameters for call to function bdb_exitFindingBindingWStatus
        MOV       R1,#0xb
        LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
// 2680     }
// 2681     
// 2682     return (events ^ BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
??bdb_event_loop_22:
        MOV       A,R6
        XRL       A,#0x40
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x0
        MOV       R3,A
        LJMP      ??bdb_event_loop_6 & 0xFFFF
// 2683   }
// 2684   
// 2685   if(events & BDB_IDENTIFY_TIMEOUT)
??bdb_event_loop_19:
        MOV       A,R6
        ANL       A,#0x0
        MOV       R0,A
        MOV       A,R7
        ANL       A,#0x20
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       $+5
        LJMP      ??bdb_event_loop_23 & 0xFFFF
// 2686   {
// 2687     zclAttrRec_t identifyAttrRec;
// 2688     epList_t *bdb_CurrEpDescriptorNextInList = NULL;
        MOV       ?V0,#0x0
        MOV       ?V1,#0x0
// 2689     bdb_CurrEpDescriptorNextInList = bdb_HeadEpDescriptorList;
        MOV       DPTR,#bdb_HeadEpDescriptorList
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       ?V0,R0
        MOV       ?V1,R1
// 2690     
// 2691     bool KeepIdentifyTimerRunning = FALSE;
        MOV       ?V4,#0x0
// 2692     
// 2693     while(bdb_CurrEpDescriptorNextInList != NULL )
??bdb_event_loop_24:
        MOV       A,?V0
        ORL       A,?V1
        JNZ       $+5
        LJMP      ??bdb_event_loop_25 & 0xFFFF
// 2694     {
// 2695       endPointDesc_t *bdb_EpDescriptor = NULL;
        MOV       ?V2,#0x0
        MOV       ?V3,#0x0
// 2696       bdb_EpDescriptor = bdb_CurrEpDescriptorNextInList->epDesc;
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       ?V2,R0
        MOV       ?V3,R1
// 2697     
// 2698       //Do not check ZDO or Zigbee reserved endpoints
// 2699       if((bdb_CurrEpDescriptorNextInList->epDesc->endPoint == 0) || (bdb_CurrEpDescriptorNextInList->epDesc->endPoint >= BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        JZ        ??bdb_event_loop_26
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#-0xf
        JC        ??bdb_event_loop_27
// 2700       {
// 2701         bdb_CurrEpDescriptorNextInList = bdb_CurrEpDescriptorNextInList->nextDesc;
??bdb_event_loop_26:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
// 2702         continue;
        SJMP      ??bdb_event_loop_24
// 2703       }
// 2704       
// 2705       if ( zclFindAttrRec( bdb_EpDescriptor->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
// 2706                         ATTRID_IDENTIFY_TIME, &identifyAttrRec ) )
??bdb_event_loop_27:
        ; Setup parameters for call to function zclFindAttrRec
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V8,R0
        MOV       ?V9,R1
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x3
        MOV       R3,#0x0
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       A,R1
        JZ        ??bdb_event_loop_28
// 2707       {
// 2708         if(*((uint16*)identifyAttrRec.attr.dataPtr) > 0)
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_event_loop_29
// 2709         {
// 2710           (uint16)(*((uint16*)identifyAttrRec.attr.dataPtr))--;
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        ADD       A,#-0x1
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#-0x1
        MOV       R3,A
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 2711           KeepIdentifyTimerRunning = TRUE;
        MOV       ?V4,#0x1
        SJMP      ??bdb_event_loop_28
// 2712         }
// 2713         else
// 2714         {
// 2715           // Use bdb success main state
// 2716           bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
??bdb_event_loop_29:
        MOV       DPTR,#bdbAttributes + 10
        MOV       A,#0x0
        MOVX      @DPTR,A
// 2717           if(pfnIdentifyTimeChangeCB != NULL)
        MOV       DPTR,#pfnIdentifyTimeChangeCB
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_event_loop_28
// 2718           {
// 2719             pfnIdentifyTimeChangeCB(bdb_EpDescriptor->endPoint);
        ; Setup parameters for indirect call
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#pfnIdentifyTimeChangeCB
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        LCALL     ?CALL_IND
// 2720           }
// 2721         }
// 2722       }
// 2723       bdb_CurrEpDescriptorNextInList = bdb_CurrEpDescriptorNextInList->nextDesc;
??bdb_event_loop_28:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        LJMP      ??bdb_event_loop_24 & 0xFFFF
// 2724     }
// 2725     
// 2726     //If any endpoint has identify running, keep the timer on
// 2727     if(KeepIdentifyTimerRunning)
??bdb_event_loop_25:
        MOV       A,?V4
        JZ        ??bdb_event_loop_30
// 2728     {
// 2729       osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3e8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       R2,#0x0
        MOV       R3,#0x20
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       A,R1
        SJMP      ??bdb_event_loop_31
// 2730     }
// 2731     else
// 2732     {
// 2733       osal_stop_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT );
??bdb_event_loop_30:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x20
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
// 2734     }
// 2735     
// 2736     // Return unprocessed events
// 2737     return (events ^ BDB_IDENTIFY_TIMEOUT);
??bdb_event_loop_31:
        MOV       A,R6
        XRL       A,#0x0
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x20
        MOV       R3,A
        SJMP      ??bdb_event_loop_6
// 2738   }
// 2739   
// 2740   if(events & BDB_RESPONDENT_PROCESS_TIMEOUT)
??bdb_event_loop_23:
        MOV       A,R6
        ANL       A,#0x0
        MOV       R0,A
        MOV       A,R7
        ANL       A,#0x40
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_event_loop_32
// 2741   {
// 2742     // Send Simple Descriptor request to a respondent node
// 2743     bdb_ProcessRespondentList();
        ; Setup parameters for call to function bdb_ProcessRespondentList
        LCALL     `??bdb_ProcessRespondentList::?relay`; Banked call to: bdb_ProcessRespondentList
// 2744 
// 2745     return (events ^ BDB_RESPONDENT_PROCESS_TIMEOUT);
        MOV       A,R6
        XRL       A,#0x0
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x40
        MOV       R3,A
        SJMP      ??bdb_event_loop_6
// 2746   }
// 2747 #endif
// 2748   
// 2749   return 0;
??bdb_event_loop_32:
        MOV       R2,#0x0
        MOV       R3,#0x0
??bdb_event_loop_6:
        MOV       A,#0xd
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R7,#0xa
        LJMP      ?BANKED_LEAVE_XDATA
// 2750 }
          CFI EndBlock cfiBlock33
// 2751 
// 2752 /*********************************************************************
// 2753  * @fn          bdb_processZDOMgs
// 2754  *
// 2755  * @brief       Process ZDO messages used as part of BDB commissioning methods
// 2756  *
// 2757  * @param       zdoIncomingMsg_t - ZDO message
// 2758  *
// 2759  * @return      
// 2760  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2761 static void bdb_processZDOMgs(zdoIncomingMsg_t *pMsg)
bdb_processZDOMgs:
          CFI Block cfiBlock34 Using cfiCommon0
          CFI Function bdb_processZDOMgs
        CODE
// 2762 {
        FUNCALL bdb_processZDOMgs, bdb_ProcessIEEEAddrRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_processZDOMgs, bdb_ProcessSimpleDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_processZDOMgs, bdb_ProcessNodeDescRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2763   switch ( pMsg->clusterID )
        MOV       A,R6
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?US_SWITCH_DENSE
`?<Jumptable for bdb_processZDOMgs>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        32769
        DATA
        DATA8
        DATA
        DATA8
        DB        3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??bdb_processZDOMgs_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??bdb_processZDOMgs_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??bdb_processZDOMgs_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??bdb_processZDOMgs_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??bdb_processZDOMgs_3
        CODE
// 2764   {
// 2765 #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)      
// 2766     case IEEE_addr_rsp:
// 2767        bdb_ProcessIEEEAddrRsp(pMsg);
??bdb_processZDOMgs_1:
        ; Setup parameters for call to function bdb_ProcessIEEEAddrRsp
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_ProcessIEEEAddrRsp::?relay`; Banked call to: bdb_ProcessIEEEAddrRsp
// 2768     break;
        SJMP      ??bdb_processZDOMgs_0
// 2769     case Simple_Desc_rsp:
// 2770       bdb_ProcessSimpleDesc(pMsg);
??bdb_processZDOMgs_3:
        ; Setup parameters for call to function bdb_ProcessSimpleDesc
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_ProcessSimpleDesc::?relay`; Banked call to: bdb_ProcessSimpleDesc
// 2771     break;
        SJMP      ??bdb_processZDOMgs_0
// 2772 #endif
// 2773 
// 2774 #if (ZG_BUILD_JOINING_TYPE)    
// 2775     case Node_Desc_rsp:
// 2776       bdb_ProcessNodeDescRsp(pMsg);
??bdb_processZDOMgs_2:
        ; Setup parameters for call to function bdb_ProcessNodeDescRsp
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_ProcessNodeDescRsp::?relay`; Banked call to: bdb_ProcessNodeDescRsp
// 2777     break;
// 2778 #endif
// 2779     
// 2780     default:
// 2781     break;
// 2782   }
// 2783 }
??bdb_processZDOMgs_0:
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock34
// 2784 
// 2785 
// 2786 /*********************************************************************
// 2787  * @fn      bdb_ProcessNodeDescRsp
// 2788  *
// 2789  * @brief   Process Node Descriptor response to validate the stack version of the
// 2790  *
// 2791  * @param   zdoIncomingMsg_t *pMsg
// 2792  *
// 2793  * @return  none
// 2794  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2795 void bdb_ProcessNodeDescRsp(zdoIncomingMsg_t *pMsg)
bdb_ProcessNodeDescRsp:
          CFI Block cfiBlock35 Using cfiCommon0
          CFI Function bdb_ProcessNodeDescRsp
        CODE
// 2796 {
        FUNCALL bdb_ProcessNodeDescRsp, APSME_IsDistributedSecurity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, ZDO_ParseNodeDescRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, bdb_tcLinkKeyExchangeAttempt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 50, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, bdb_setNodeJoinLinkKeyType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessNodeDescRsp, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 35
        MOV       A,#-0x23
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 46)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2797   //Avoid processing unintended messages
// 2798   if(requestNewTrustCenterLinkKey && 
// 2799     (bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE))
        MOV       DPTR,#requestNewTrustCenterLinkKey
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??bdb_ProcessNodeDescRsp_0 & 0xFFFF
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??bdb_ProcessNodeDescRsp_0 & 0xFFFF
// 2800   {
// 2801     if(!APSME_IsDistributedSecurity())
        ; Setup parameters for call to function APSME_IsDistributedSecurity
        LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
        MOV       A,R1
        JZ        $+5
        LJMP      ??bdb_ProcessNodeDescRsp_0 & 0xFFFF
// 2802     {
// 2803       //Is this from the coordinator?
// 2804       if(pMsg->srcAddr.addr.shortAddr == 0x0000)
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        $+5
        LJMP      ??bdb_ProcessNodeDescRsp_0 & 0xFFFF
// 2805       {
// 2806         ZDO_NodeDescRsp_t NDRsp;
// 2807         uint8 StackComplianceRev;
// 2808 
// 2809         //Stop timer to avoid unintended resets
// 2810         osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x10
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
// 2811         
// 2812         ZDO_ParseNodeDescRsp(pMsg, &NDRsp);
        ; Setup parameters for call to function ZDO_ParseNodeDescRsp
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDO_ParseNodeDescRsp::?relay`; Banked call to: ZDO_ParseNodeDescRsp
// 2813         
// 2814         StackComplianceRev = NDRsp.nodeDesc.ServerMask >> STACK_COMPLIANCE_CURRENT_REV_POS;
        MOV       A,#0x1e
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       A,#0x9
        MOV       R0,#?V0
        LCALL     ?US_SHR
        MOV       A,?V0
        MOV       ?V2,A
// 2815         
// 2816         if( StackComplianceRev >= STACK_COMPL_REV_21 )
        MOV       A,?V2
        CLR       C
        SUBB      A,#0x15
        JC        ??bdb_ProcessNodeDescRsp_1
// 2817         {
// 2818           bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_LINK_KEY);
        ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
        MOV       R2,#0x2
        MOV       R1,#0x1
        LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
        SJMP      ??bdb_ProcessNodeDescRsp_0
// 2819         }
// 2820         else
// 2821         {
// 2822           APSME_TCLKDevEntry_t TCLKDevEntry;
// 2823           
// 2824           //Save the KeyAttribute for joining device that it has joined non-R21 nwk
// 2825           TCLKDevEntry.keyAttributes = ZG_NON_R21_NWK_JOINED;
??bdb_ProcessNodeDescRsp_1:
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x3
        MOVX      @DPTR,A
// 2826           osal_nv_write(ZCD_NV_TCLK_TABLE_START,osal_offsetof(APSME_TCLKDevEntry_t,keyAttributes),sizeof(uint8),&TCLKDevEntry.keyAttributes);
        ; Setup parameters for call to function osal_nv_write
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOV       ?V0,DPL
        MOV       ?V1,DPH
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 48)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R2,#0x11
        MOV       R3,#0x1
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 46)
        MOV       A,R1
// 2827           
// 2828           bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
        ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
        MOV       R1,#0x0
        LCALL     `??bdb_setNodeJoinLinkKeyType::?relay`; Banked call to: bdb_setNodeJoinLinkKeyType
// 2829           bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x1
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 2830         }
// 2831       }
// 2832     }
// 2833   }
// 2834 }
??bdb_ProcessNodeDescRsp_0:
        MOV       A,#0x23
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       R7,#0x3
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock35
// 2835 
// 2836 
// 2837 /*********************************************************************
// 2838  * @fn          bdb_touchlinkSendFNReset
// 2839  *
// 2840  * @brief       Starts the Factory New Procedure for Initiator
// 2841  *
// 2842  * @param       isOnANetwork - TRUE if the devices is not FN, FALSE otherwise
// 2843  *
// 2844  * @return      none
// 2845  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2846 void bdb_touchlinkSendFNReset( void )
bdb_touchlinkSendFNReset:
          CFI Block cfiBlock36 Using cfiCommon0
          CFI Function bdb_touchlinkSendFNReset
        CODE
// 2847 {
        FUNCALL bdb_touchlinkSendFNReset, touchLinkInitiator_ResetToFNProcedure
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2848 #ifdef BDB_TL_INITIATOR
// 2849   touchLinkInitiator_ResetToFNProcedure( );
        ; Setup parameters for call to function touchLinkInitiator_ResetToFNProcedure
        LCALL     `??touchLinkInitiator_ResetToFNProcedure::?relay`; Banked call to: touchLinkInitiator_ResetToFNProcedure
// 2850 #endif
// 2851 }
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock36
// 2852 
// 2853 
// 2854 /*********************************************************************
// 2855  * @fn          bdb_setNodeIsOnANetwork
// 2856  *
// 2857  * @brief       Sets and saves in Nv bdbNodeIsOnANetwork attribute
// 2858  *
// 2859  * @param       isOnANetwork - TRUE if the devices is not FN, FALSE otherwise
// 2860  *
// 2861  * @return      none
// 2862  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2863 void bdb_setNodeIsOnANetwork(bool isOnANetwork)
bdb_setNodeIsOnANetwork:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function bdb_setNodeIsOnANetwork
        CODE
// 2864 {
        FUNCALL bdb_setNodeIsOnANetwork, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 2865   if((bdbAttributes.bdbNodeIsOnANetwork != isOnANetwork) || (!bdb_initialization))
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        XRL       A,R6
        JNZ       ??bdb_setNodeIsOnANetwork_0
        MOV       DPTR,#bdb_initialization
        MOVX      A,@DPTR
        JNZ       ??bdb_setNodeIsOnANetwork_1
// 2866   {
// 2867     //We lose our network
// 2868     if(!isOnANetwork)
??bdb_setNodeIsOnANetwork_0:
        MOV       A,R6
        JNZ       ??bdb_setNodeIsOnANetwork_2
// 2869     {
// 2870       bdbAttributes.bdbCommissioningMode = 0;
        MOV       DPTR,#bdbAttributes + 11
        MOV       A,#0x0
        MOVX      @DPTR,A
// 2871     }
// 2872     
// 2873     bdbAttributes.bdbNodeIsOnANetwork = isOnANetwork;
??bdb_setNodeIsOnANetwork_2:
        MOV       A,R6
        MOV       DPTR,#bdbAttributes + 14
        MOVX      @DPTR,A
// 2874     
// 2875     osal_nv_write(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V0,#(bdbAttributes + 14) & 0xff
        MOV       ?V1,#((bdbAttributes + 14) >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x55
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       A,R1
// 2876   }
// 2877 }
??bdb_setNodeIsOnANetwork_1:
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock37
// 2878 
// 2879 /*********************************************************************
// 2880  * @fn          bdb_setCommissioningGroupID
// 2881  *
// 2882  * @brief       Sets the commissioning groupd ID
// 2883  *
// 2884  * @param       groupID
// 2885  *
// 2886  * @return      none
// 2887  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2888 void bdb_setCommissioningGroupID(uint16 groupID)
bdb_setCommissioningGroupID:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI Function bdb_setCommissioningGroupID
        CODE
// 2889 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2890   bdbAttributes.bdbCommissioningGroupID = groupID;
        MOV       DPTR,#bdbAttributes + 8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 2891 }
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock38
// 2892 
// 2893 /*********************************************************************
// 2894  * @fn      bdb_CreateRespondentList
// 2895  *
// 2896  * @brief   Create respondent list for finding and binding if empty
// 2897  *
// 2898  * @param   pHead - pointer to a pointer of the list head
// 2899  *
// 2900  * @return  none
// 2901  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2902 void bdb_CreateRespondentList( bdbFindingBindingRespondent_t **pHead )
bdb_CreateRespondentList:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI Function bdb_CreateRespondentList
        CODE
// 2903 {
        FUNCALL bdb_CreateRespondentList, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2904 
// 2905   // Create the list if empty
// 2906   if ( *pHead == NULL )
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       ??bdb_CreateRespondentList_0
// 2907   {
// 2908     *pHead = ( bdbFindingBindingRespondent_t* )osal_mem_alloc( sizeof( bdbFindingBindingRespondent_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x11
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 2909     
// 2910     if ( *pHead != NULL )
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_CreateRespondentList_0
// 2911     {
// 2912       (*pHead)->pNext = NULL;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0xf
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
// 2913     }
// 2914   }
// 2915   return;
??bdb_CreateRespondentList_0:
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
// 2916 }
          CFI EndBlock cfiBlock39
// 2917 
// 2918 /*********************************************************************
// 2919  * @fn      bdb_AddRespondentNode
// 2920  *
// 2921  * @brief   Add node to respondent list for finding and binding
// 2922  *
// 2923  * @param   pHead - pointer to a pointer of the list head
// 2924  *
// 2925  * @return  pointer to new node
// 2926  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2927 bdbFindingBindingRespondent_t* bdb_AddRespondentNode( bdbFindingBindingRespondent_t **pHead, zclIdentifyQueryRsp_t *pCmd )
bdb_AddRespondentNode:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI Function bdb_AddRespondentNode
        CODE
// 2928 {
        FUNCALL bdb_AddRespondentNode, bdb_CreateRespondentList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_AddRespondentNode, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V4,R4
        MOV       ?V5,R5
// 2929   bdbFindingBindingRespondent_t **pCurr;
// 2930   bdbFindingBindingRespondent_t *temp;
// 2931   
// 2932     // Create respondent list if empty
// 2933   if ( *pHead == NULL )
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       ??bdb_AddRespondentNode_0
// 2934   {
// 2935     bdb_CreateRespondentList( pHead );
        ; Setup parameters for call to function bdb_CreateRespondentList
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_CreateRespondentList::?relay`; Banked call to: bdb_CreateRespondentList
// 2936     return *pHead;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LJMP      ??bdb_AddRespondentNode_1 & 0xFFFF
// 2937   }
// 2938   else
// 2939   {
// 2940     // if pCmd is equal to NULL, don't look for duplucates
// 2941     if( pCmd != NULL )
??bdb_AddRespondentNode_0:
        MOV       A,?V4
        ORL       A,?V5
        JNZ       $+5
        LJMP      ??bdb_AddRespondentNode_2 & 0xFFFF
// 2942     {
// 2943       //Find if any duplicate in the list
// 2944       temp = *pHead;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       ?V0,R0
        MOV       ?V1,R1
// 2945       
// 2946       while(temp != NULL)
??bdb_AddRespondentNode_3:
        MOV       A,?V0
        ORL       A,?V1
        JNZ       $+5
        LJMP      ??bdb_AddRespondentNode_2 & 0xFFFF
// 2947       {
// 2948         if((temp->data.endPoint == pCmd->srcAddr->endPoint) && (temp->data.panId == pCmd->srcAddr->panId))
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x9
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,R1
        JNZ       ??bdb_AddRespondentNode_4
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0xa
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,R2
        JNZ       ??bdb_AddRespondentNode_5
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R3
??bdb_AddRespondentNode_5:
        JNZ       ??bdb_AddRespondentNode_4
// 2949         {
// 2950           //Duplicate
// 2951           if(temp->data.addr.shortAddr == pCmd->srcAddr->addr.shortAddr)
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        XRL       A,R2
        JNZ       ??bdb_AddRespondentNode_6
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R3
??bdb_AddRespondentNode_6:
        JNZ       ??bdb_AddRespondentNode_4
// 2952           {
// 2953             return NULL;
        MOV       R2,#0x0
        MOV       R3,#0x0
        LJMP      ??bdb_AddRespondentNode_1 & 0xFFFF
// 2954           }
// 2955         }
// 2956         temp = temp->pNext;
??bdb_AddRespondentNode_4:
        MOV       A,?V0
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        LJMP      ??bdb_AddRespondentNode_3 & 0xFFFF
// 2957       }
// 2958     }
// 2959     
// 2960     pCurr = &((*pHead)->pNext);
??bdb_AddRespondentNode_2:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        ADD       A,#0xf
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R1,A
        MOV       ?V2,R0
        MOV       ?V3,R1
// 2961     
// 2962     while ( *pCurr != NULL )
??bdb_AddRespondentNode_7:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_AddRespondentNode_8
// 2963     {
// 2964       pCurr = &((*pCurr)->pNext);
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        ADD       A,#0xf
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       ?V3,A
        SJMP      ??bdb_AddRespondentNode_7
// 2965     }
// 2966 
// 2967     *pCurr = ( bdbFindingBindingRespondent_t* )osal_mem_alloc( sizeof( bdbFindingBindingRespondent_t ) );
??bdb_AddRespondentNode_8:
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x11
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 2968     
// 2969     if(*pCurr == NULL)
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JNZ       ??bdb_AddRespondentNode_9
// 2970     {
// 2971       //No memory
// 2972       return NULL;
        MOV       R2,#0x0
        MOV       R3,#0x0
        SJMP      ??bdb_AddRespondentNode_1
// 2973     }
// 2974     
// 2975     (*pCurr)->pNext = NULL;
??bdb_AddRespondentNode_9:
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0xf
        MOV       DPL,A
        XCH       A,R0
        ADDC      A,#0x0
        MOV       DPH,A
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
// 2976   }
// 2977   
// 2978   return *pCurr;
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
??bdb_AddRespondentNode_1:
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
// 2979 }
          CFI EndBlock cfiBlock40
// 2980 
// 2981 /*********************************************************************
// 2982  * @fn      bdb_zclRespondentListClean
// 2983  *
// 2984  * @brief   This function free reserved memory for respondent list
// 2985  *
// 2986  * @param   pHead - begin of the respondent list
// 2987  *
// 2988  * @return  status
// 2989  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2990 void bdb_zclRespondentListClean( bdbFindingBindingRespondent_t **pHead )
bdb_zclRespondentListClean:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI Function bdb_zclRespondentListClean
        CODE
// 2991 {
        FUNCALL bdb_zclRespondentListClean, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2992   bdbFindingBindingRespondent_t **pCurr;
// 2993   bdbFindingBindingRespondent_t **pNext;
// 2994   
// 2995   if ( *pHead == NULL )
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_zclRespondentListClean_0
// 2996   {
// 2997     return;
// 2998   }
// 2999   
// 3000   pCurr = pHead;
        MOV       ?V0,R6
        MOV       ?V1,R7
// 3001   
// 3002   while( *pCurr != NULL )
??bdb_zclRespondentListClean_1:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_zclRespondentListClean_2
// 3003   {
// 3004     pNext = &((*pCurr)->pNext);
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        ADD       A,#0xf
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R1,A
        MOV       ?V2,R0
        MOV       ?V3,R1
// 3005     osal_mem_free( *pCurr );
        ; Setup parameters for call to function osal_mem_free
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 3006     *pCurr = ( bdbFindingBindingRespondent_t* )NULL;
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
// 3007     pCurr = pNext;
        MOV       R0,?V2
        MOV       R1,?V3
        MOV       ?V0,R0
        MOV       ?V1,R1
        SJMP      ??bdb_zclRespondentListClean_1
// 3008   }
// 3009   *pHead = NULL;
??bdb_zclRespondentListClean_2:
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
// 3010 }
??bdb_zclRespondentListClean_0:
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock41
// 3011 
// 3012  /*********************************************************************
// 3013  * PRIVATE FUNCTIONS
// 3014  *********************************************************************/
// 3015 
// 3016 /*********************************************************************
// 3017  * @fn      bdb_ProcessOSALMsg
// 3018  *
// 3019  * @brief   Process the incoming task message.
// 3020  *
// 3021  * @param   msgPtr - message to process
// 3022  *
// 3023  * @return  none
// 3024  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3025 void bdb_ProcessOSALMsg( bdbInMsg_t *msgPtr )
bdb_ProcessOSALMsg:
          CFI Block cfiBlock42 Using cfiCommon0
          CFI Function bdb_ProcessOSALMsg
        CODE
// 3026 {
        FUNCALL bdb_ProcessOSALMsg, bdb_filterNwkDisc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, bdb_tryNwkAssoc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, bdb_nwkDiscoveryAttempt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, nwkNeighborInitTable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, NLME_NwkDiscTerm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, bdb_tryNwkAssoc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, bdb_requestTCStackVersion
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, bdb_requestTCLinkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_ProcessOSALMsg, bdb_requestVerifyTCLinkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 3027   
// 3028   switch(msgPtr->hdr.event)
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        DEC       A
        JNZ       $+5
        LJMP      ??bdb_ProcessOSALMsg_0 & 0xFFFF
        ADD       A,#-0x2
        JZ        $+5
        LJMP      ??bdb_ProcessOSALMsg_1 & 0xFFFF
// 3029   {
// 3030 #if (ZG_BUILD_JOINING_TYPE)
// 3031     case BDB_COMMISSIONING_STATE_JOINING:
// 3032       if(ZG_DEVICE_JOINING_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??bdb_ProcessOSALMsg_2
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x2
        JZ        $+5
        LJMP      ??bdb_ProcessOSALMsg_1 & 0xFFFF
// 3033       {
// 3034         switch(msgPtr->buf[0])
??bdb_ProcessOSALMsg_2:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JZ        ??bdb_ProcessOSALMsg_3
        DEC       A
        JZ        ??bdb_ProcessOSALMsg_4
        LJMP      ??bdb_ProcessOSALMsg_1 & 0xFFFF
// 3035         {
// 3036           case BDB_JOIN_EVENT_NWK_DISCOVERY:
// 3037             if(msgPtr->hdr.status == BDB_MSG_EVENT_SUCCESS)
??bdb_ProcessOSALMsg_3:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOVX      A,@DPTR
        JNZ       ??bdb_ProcessOSALMsg_5
// 3038             {
// 3039               bdb_filterNwkDisc();
        ; Setup parameters for call to function bdb_filterNwkDisc
        LCALL     `??bdb_filterNwkDisc::?relay`; Banked call to: bdb_filterNwkDisc
// 3040               bdb_tryNwkAssoc();
        ; Setup parameters for call to function bdb_tryNwkAssoc
        LCALL     `??bdb_tryNwkAssoc::?relay`; Banked call to: bdb_tryNwkAssoc
        SJMP      ??bdb_ProcessOSALMsg_6
// 3041             }
// 3042             else
// 3043             {
// 3044               bdb_nwkDiscoveryAttempt(FALSE);
??bdb_ProcessOSALMsg_5:
        ; Setup parameters for call to function bdb_nwkDiscoveryAttempt
        MOV       R1,#0x0
        LCALL     `??bdb_nwkDiscoveryAttempt::?relay`; Banked call to: bdb_nwkDiscoveryAttempt
// 3045             }
// 3046           break;
??bdb_ProcessOSALMsg_6:
        SJMP      ??bdb_ProcessOSALMsg_7
// 3047           
// 3048           case BDB_JOIN_EVENT_ASSOCIATION:
// 3049             if(msgPtr->hdr.status == BDB_MSG_EVENT_SUCCESS)
??bdb_ProcessOSALMsg_4:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOVX      A,@DPTR
        JNZ       ??bdb_ProcessOSALMsg_8
// 3050             {
// 3051               bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_WAITING_NWK_KEY;
        MOV       DPTR,#bdbCommissioningProcedureState + 2
        MOV       A,#0x2
        MOVX      @DPTR,A
// 3052               //Nwk key timeout get right timing
// 3053               osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT, BDB_DEFAULT_DEVICE_UNAUTH_TIMEOUT);
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_bb8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R2,#0x0
        MOV       R3,#0x10
        MOV       DPTR,#bdb_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,R1
        SJMP      ??bdb_ProcessOSALMsg_7
// 3054             }
// 3055             else
// 3056             {
// 3057               if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
// 3058                    (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
??bdb_ProcessOSALMsg_8:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,#-0x2
        XRL       A,?V0
        JNZ       ??bdb_ProcessOSALMsg_9
        MOV       A,#-0x1
        XRL       A,?V1
??bdb_ProcessOSALMsg_9:
        JNZ       ??bdb_ProcessOSALMsg_10
        MOV       DPTR,#_NIB + 20
        MOVX      A,@DPTR
        XRL       A,#0xfe
        JNZ       ??bdb_ProcessOSALMsg_11
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0xff
??bdb_ProcessOSALMsg_11:
        JZ        ??bdb_ProcessOSALMsg_12
// 3059               {
// 3060                 uint16 addr = INVALID_NODE_ADDR;
??bdb_ProcessOSALMsg_10:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 3061                 // Invalidate nwk addr so end device does not use in its data reqs.
// 3062                 _NIB.nwkDevAddress = INVALID_NODE_ADDR;
        MOV       DPTR,#_NIB + 20
        MOV       A,#-0x2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 3063                 ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
        ; Setup parameters for call to function ZMacSetReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x53
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
        MOV       A,R1
// 3064               }
// 3065 
// 3066               //Clear the neighbor Table and network discovery tables.
// 3067               nwkNeighborInitTable();
??bdb_ProcessOSALMsg_12:
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
// 3068               NLME_NwkDiscTerm();
        ; Setup parameters for call to function NLME_NwkDiscTerm
        LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
// 3069               _NIB.nwkState = NWK_INIT;
        MOV       DPTR,#_NIB + 35
        MOV       A,#0x0
        MOVX      @DPTR,A
// 3070               
// 3071               bdb_tryNwkAssoc();
        ; Setup parameters for call to function bdb_tryNwkAssoc
        LCALL     `??bdb_tryNwkAssoc::?relay`; Banked call to: bdb_tryNwkAssoc
// 3072             }
// 3073           break;
// 3074         }
// 3075       }
// 3076     break;
??bdb_ProcessOSALMsg_7:
        SJMP      ??bdb_ProcessOSALMsg_1
// 3077     
// 3078     case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
// 3079       if(ZG_DEVICE_JOINING_TYPE)
??bdb_ProcessOSALMsg_0:
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??bdb_ProcessOSALMsg_13
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??bdb_ProcessOSALMsg_1
// 3080       {
// 3081         if(msgPtr->hdr.status != BDB_MSG_EVENT_SUCCESS)
??bdb_ProcessOSALMsg_13:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOVX      A,@DPTR
        JZ        ??bdb_ProcessOSALMsg_14
// 3082         {
// 3083           bdbAttributes.bdbTCLinkKeyExchangeAttempts++;
        MOV       DPTR,#bdbAttributes + 16
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOVX      @DPTR,A
// 3084           if(bdbAttributes.bdbTCLinkKeyExchangeAttempts > bdbAttributes.bdbTCLinkKeyExchangeAttemptsMax)
        MOV       DPTR,#bdbAttributes + 16
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPTR,#bdbAttributes + 17
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,R0
        JNC       ??bdb_ProcessOSALMsg_14
// 3085           {
// 3086             //TCLK process fail due to many attempts fails
// 3087             bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, FALSE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x0
        MOV       R1,#0x1
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
// 3088             return;
        SJMP      ??bdb_ProcessOSALMsg_1
// 3089           }
// 3090         }
// 3091         switch(bdbCommissioningProcedureState.bdbTCExchangeState)
??bdb_ProcessOSALMsg_14:
        MOV       DPTR,#bdbCommissioningProcedureState + 1
        MOVX      A,@DPTR
        DEC       A
        JZ        ??bdb_ProcessOSALMsg_15
        DEC       A
        JZ        ??bdb_ProcessOSALMsg_16
        DEC       A
        JZ        ??bdb_ProcessOSALMsg_17
        SJMP      ??bdb_ProcessOSALMsg_1
// 3092         {
// 3093           case BDB_REQ_TC_STACK_VERSION:
// 3094             bdb_requestTCStackVersion();
??bdb_ProcessOSALMsg_15:
        ; Setup parameters for call to function bdb_requestTCStackVersion
        LCALL     `??bdb_requestTCStackVersion::?relay`; Banked call to: bdb_requestTCStackVersion
// 3095           break;
        SJMP      ??bdb_ProcessOSALMsg_1
// 3096           case BDB_REQ_TC_LINK_KEY:
// 3097             bdb_requestTCLinkKey();
??bdb_ProcessOSALMsg_16:
        ; Setup parameters for call to function bdb_requestTCLinkKey
        LCALL     `??bdb_requestTCLinkKey::?relay`; Banked call to: bdb_requestTCLinkKey
// 3098           break;
        SJMP      ??bdb_ProcessOSALMsg_1
// 3099           case BDB_REQ_VERIFY_TC_LINK_KEY:
// 3100             bdb_requestVerifyTCLinkKey();
??bdb_ProcessOSALMsg_17:
        ; Setup parameters for call to function bdb_requestVerifyTCLinkKey
        LCALL     `??bdb_requestVerifyTCLinkKey::?relay`; Banked call to: bdb_requestVerifyTCLinkKey
// 3101           break;
// 3102         }
// 3103       }
// 3104    break;
// 3105 #endif
// 3106    }
// 3107 }
??bdb_ProcessOSALMsg_1:
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock42
// 3108 
// 3109 
// 3110 /*********************************************************************
// 3111  * @fn      bdb_processTimeout
// 3112  *
// 3113  * @brief   Handles timeout of the bdb process
// 3114  *
// 3115  * @param   msgPtr - message to process
// 3116  *
// 3117  * @return  none
// 3118  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3119 void bdb_processTimeout(void)
bdb_processTimeout:
          CFI Block cfiBlock43 Using cfiCommon0
          CFI Function bdb_processTimeout
        CODE
// 3120 {
        FUNCALL bdb_processTimeout, bdb_tcLinkKeyExchangeAttempt
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_processTimeout, bdb_nwkAssocAttemt
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3121 #if (ZG_BUILD_JOINING_TYPE)
// 3122   if(ZG_DEVICE_JOINING_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??bdb_processTimeout_0
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??bdb_processTimeout_1
// 3123   {
// 3124     switch(bdbCommissioningProcedureState.bdbCommissioningState)
??bdb_processTimeout_0:
        MOV       DPTR,#bdbCommissioningProcedureState
        MOVX      A,@DPTR
        DEC       A
        JZ        ??bdb_processTimeout_2
        ADD       A,#-0x2
        JZ        ??bdb_processTimeout_3
        SJMP      ??bdb_processTimeout_1
// 3125     {
// 3126       case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
// 3127         
// 3128         bdb_tcLinkKeyExchangeAttempt(FALSE,bdbCommissioningProcedureState.bdbTCExchangeState);
??bdb_processTimeout_2:
        ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
        MOV       DPTR,#bdbCommissioningProcedureState + 1
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       R1,#0x0
        LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
// 3129       break;
        SJMP      ??bdb_processTimeout_1
// 3130       case BDB_COMMISSIONING_STATE_JOINING:
// 3131         if(bdbCommissioningProcedureState.bdbJoinState == BDB_JOIN_STATE_WAITING_NWK_KEY)
??bdb_processTimeout_3:
        MOV       DPTR,#bdbCommissioningProcedureState + 2
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??bdb_processTimeout_1
// 3132         {
// 3133           //If nwk key fails, then try association again
// 3134           bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_ASSOC;
        MOV       DPTR,#bdbCommissioningProcedureState + 2
        MOV       A,#0x1
        MOVX      @DPTR,A
// 3135           bdb_nwkAssocAttemt(FALSE);
        ; Setup parameters for call to function bdb_nwkAssocAttemt
        MOV       R1,#0x0
        LCALL     `??bdb_nwkAssocAttemt::?relay`; Banked call to: bdb_nwkAssocAttemt
// 3136         }
// 3137       break;
// 3138     }
// 3139   }
// 3140 #endif
// 3141   
// 3142 }
??bdb_processTimeout_1:
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock43
// 3143 
// 3144 
// 3145 /*********************************************************************
// 3146  * @fn      bdb_SendMsg
// 3147  *
// 3148  * @brief   Send messages to bdb processing with the expected format
// 3149  *
// 3150  * @param   msgPtr - message to process
// 3151  *
// 3152  * @return  none
// 3153  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3154 void bdb_SendMsg(uint8 taskID, uint8 toCommissioningState,uint8 status, uint8 len, uint8 *buf)
bdb_SendMsg:
          CFI Block cfiBlock44 Using cfiCommon0
          CFI Function bdb_SendMsg
        CODE
// 3155 {
        FUNCALL bdb_SendMsg, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_SendMsg, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_SendMsg, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV       A,#-0x12
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV       ?V1,R1
        MOV       ?V3,R2
        MOV       ?V7,R3
        MOV       ?V2,R4
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V8,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V9,A
// 3156   bdbInMsg_t *msgPtr = NULL;
        MOV       R6,#0x0
        MOV       R7,#0x0
// 3157 
// 3158   if ( (len > 0) && (buf != NULL) )
        MOV       A,?V2
        JZ        ??bdb_SendMsg_0
        MOV       A,?V8
        ORL       A,?V9
        JZ        ??bdb_SendMsg_0
// 3159   {
// 3160     uint8 tmpLength;
// 3161     tmpLength = len;
        MOV       ?V0,?V2
// 3162     tmpLength += sizeof(osal_event_hdr_t);
        MOV       A,#0x2
        ADD       A,?V0
        MOV       ?V0,A
// 3163     
// 3164     msgPtr = (bdbInMsg_t *)osal_msg_allocate( tmpLength );
        ; Setup parameters for call to function osal_msg_allocate
        MOV       A,?V0
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R6,?V4
        MOV       R7,?V5
// 3165     
// 3166     if ( msgPtr )
        MOV       A,R6
        ORL       A,R7
        JZ        ??bdb_SendMsg_0
// 3167     {
// 3168       osal_memcpy( msgPtr->buf, buf, len );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,?V8
        MOV       ?V5,?V9
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,?V2
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,R6
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 3169     
// 3170       msgPtr->hdr.event = toCommissioningState;
        MOV       A,?V3
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 3171       msgPtr->hdr.status = status;
        MOV       A,?V7
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 3172       osal_msg_send( taskID, (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       R1,?V1
        LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
        MOV       A,R1
// 3173     }
// 3174   }
// 3175 }
??bdb_SendMsg_0:
        MOV       R7,#0xa
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock44
// 3176 
// 3177 
// 3178 /*********************************************************************
// 3179  * @fn      bdb_RegisterCommissioningStatusCB
// 3180  *
// 3181  * @brief   Register a callback in which the status of the procedures done in
// 3182  *          BDB commissioning process will be reported
// 3183  *
// 3184  * @param   bdbGCB_CommissioningStatus - application callback
// 3185  *
// 3186  * @return  none
// 3187  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3188 void bdb_RegisterCommissioningStatusCB(bdbGCB_CommissioningStatus_t bdbGCB_CommissioningStatus)
bdb_RegisterCommissioningStatusCB:
          CFI Block cfiBlock45 Using cfiCommon0
          CFI Function bdb_RegisterCommissioningStatusCB
        CODE
// 3189 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3190   pfnCommissioningStatusCB = bdbGCB_CommissioningStatus;
        MOV       DPTR,#pfnCommissioningStatusCB
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 3191 }
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock45
// 3192 
// 3193 /*********************************************************************
// 3194  * @fn      bdb_ClearNetworkParams
// 3195  *
// 3196  * @brief   Restore nwk parameters to invalid if the device is not on a network
// 3197  *
// 3198  * @param   void
// 3199  *
// 3200  * @return  void
// 3201  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3202 void bdb_ClearNetworkParams(void)
bdb_ClearNetworkParams:
          CFI Block cfiBlock46 Using cfiCommon0
          CFI Function bdb_ClearNetworkParams
        CODE
// 3203 {
        FUNCALL bdb_ClearNetworkParams, touchLink_SetMacNwkParams
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3204 #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
// 3205   if ( bdbAttributes.bdbNodeIsOnANetwork == FALSE )
        MOV       DPTR,#bdbAttributes + 14
        MOVX      A,@DPTR
        JNZ       ??bdb_ClearNetworkParams_0
// 3206   {
// 3207     //Clear the event
// 3208     _NIB.nwkPanId = INVALID_NODE_ADDR;
        MOV       DPTR,#_NIB + 33
        MOV       A,#-0x2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 3209     _NIB.nwkLogicalChannel = 0;
        MOV       DPTR,#_NIB + 22
        MOV       A,#0x0
        MOVX      @DPTR,A
// 3210     _NIB.nwkDevAddress = INVALID_NODE_ADDR;
        MOV       DPTR,#_NIB + 20
        MOV       A,#-0x2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 3211     touchLink_SetMacNwkParams( _NIB.nwkDevAddress, _NIB.nwkPanId, _NIB.nwkLogicalChannel );
        ; Setup parameters for call to function touchLink_SetMacNwkParams
        MOV       DPTR,#_NIB + 22
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPTR,#_NIB + 33
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       DPTR,#_NIB + 20
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??touchLink_SetMacNwkParams::?relay`; Banked call to: touchLink_SetMacNwkParams
// 3212   }
// 3213 #endif
// 3214 }
??bdb_ClearNetworkParams_0:
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock46
// 3215 
// 3216 /*********************************************************************
// 3217  * @fn      bdb_getZCLFrameCounter
// 3218  *
// 3219  * @brief   Get the next ZCL Frame Counter for packet sequence number
// 3220  *
// 3221  * @param   none
// 3222  *
// 3223  * @return  next ZCL frame counter
// 3224  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3225 uint8 bdb_getZCLFrameCounter(void)
bdb_getZCLFrameCounter:
          CFI Block cfiBlock47 Using cfiCommon0
          CFI Function bdb_getZCLFrameCounter
        CODE
// 3226 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3227   bdb_ZclTransactionSequenceNumber++;
        MOV       DPTR,#bdb_ZclTransactionSequenceNumber
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOVX      @DPTR,A
// 3228   return bdb_ZclTransactionSequenceNumber;
        MOV       DPTR,#bdb_ZclTransactionSequenceNumber
        MOVX      A,@DPTR
        MOV       R1,A
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
// 3229 
// 3230 }
          CFI EndBlock cfiBlock47
// 3231 
// 3232 
// 3233 #if (ZG_BUILD_JOINING_TYPE)
// 3234 /*********************************************************************
// 3235  * @fn      bdb_RegisterCBKETCLinkKeyExchangeCB
// 3236  *
// 3237  * @brief   Register a callback in which the TC link key exchange procedure will 
// 3238  *          be performed by application.
// 3239  *          Upon fail or success bdb must be notified, see bdb_CBKETCLinkKeyExchangeAttempt
// 3240  *
// 3241  * @param   bdbGCB_TCLinkKeyExchangeMethod - application callback
// 3242  *
// 3243  * @return  none
// 3244  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3245 void bdb_RegisterCBKETCLinkKeyExchangeCB(bdbGCB_CBKETCLinkKeyExchange_t bdbGCB_CBKETCLinkKeyExchange)
bdb_RegisterCBKETCLinkKeyExchangeCB:
          CFI Block cfiBlock48 Using cfiCommon0
          CFI Function bdb_RegisterCBKETCLinkKeyExchangeCB
        CODE
// 3246 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3247   if(bdbGCB_CBKETCLinkKeyExchange)
        MOV       A,R2
        ORL       A,R3
        JZ        ??bdb_RegisterCBKETCLinkKeyExchangeCB_0
// 3248   {
// 3249     pfnCBKETCLinkKeyExchange = bdbGCB_CBKETCLinkKeyExchange;
        MOV       DPTR,#pfnCBKETCLinkKeyExchange
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 3250     bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_CBKE;
        MOV       DPTR,#bdbAttributes + 18
        MOV       A,#0x1
        MOVX      @DPTR,A
        SJMP      ??bdb_RegisterCBKETCLinkKeyExchangeCB_1
// 3251   }
// 3252   else
// 3253   {
// 3254     pfnCBKETCLinkKeyExchange = NULL;
??bdb_RegisterCBKETCLinkKeyExchangeCB_0:
        MOV       DPTR,#pfnCBKETCLinkKeyExchange
        MOV       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x0
        MOVX      @DPTR,A
// 3255     bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_APS_KEY;
        MOV       DPTR,#bdbAttributes + 18
        MOV       A,#0x0
        MOVX      @DPTR,A
// 3256   }
// 3257 }
??bdb_RegisterCBKETCLinkKeyExchangeCB_1:
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock48
// 3258 
// 3259 /*********************************************************************
// 3260  * @fn      bdb_RegisterForFilterNwkDescCB
// 3261  *
// 3262  * @brief   Register a callback in which the application gets the list of network
// 3263  *          descriptors got from active scan.
// 3264  *          Use bdb_nwkDescFree to release the network descriptors that are not 
// 3265  *          of interest and leave those which are to be attempted.
// 3266  *
// 3267  * @param   bdbGCB_FilterNwkDesc - application callback
// 3268  *
// 3269  * @return  none
// 3270  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3271 void bdb_RegisterForFilterNwkDescCB(bdbGCB_FilterNwkDesc_t bdbGCB_FilterNwkDesc)
bdb_RegisterForFilterNwkDescCB:
          CFI Block cfiBlock49 Using cfiCommon0
          CFI Function bdb_RegisterForFilterNwkDescCB
        CODE
// 3272 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3273   if(bdbGCB_FilterNwkDesc)
        MOV       A,R2
        ORL       A,R3
        JZ        ??bdb_RegisterForFilterNwkDescCB_0
// 3274   {
// 3275     pfnFilterNwkDesc = bdbGCB_FilterNwkDesc;
        MOV       DPTR,#pfnFilterNwkDesc
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 3276   }
// 3277 }
??bdb_RegisterForFilterNwkDescCB_0:
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock49
// 3278 
// 3279 
// 3280 /*********************************************************************
// 3281  * @fn          bdb_CBKETCLinkKeyExchangeAttempt
// 3282  *
// 3283  * @brief       Tell BDB module the result of the TC link key exchange, to try
// 3284  *              the default process or to keep going with the joining process.
// 3285  *
// 3286  * @param       didSuccess - TRUE if the process was succes, False otherwise
// 3287  *
// 3288  * @return      unprocessed events
// 3289  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3290 void bdb_CBKETCLinkKeyExchangeAttempt(bool didSuccess)
bdb_CBKETCLinkKeyExchangeAttempt:
          CFI Block cfiBlock50 Using cfiCommon0
          CFI Function bdb_CBKETCLinkKeyExchangeAttempt
        CODE
// 3291 {
        FUNCALL bdb_CBKETCLinkKeyExchangeAttempt, bdb_setNodeJoinLinkKeyType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_CBKETCLinkKeyExchangeAttempt, bdb_reportCommissioningState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_CBKETCLinkKeyExchangeAttempt, bdb_tcLinkKeyExchangeAttempt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 3292   if(didSuccess)
        MOV       A,R6
        JZ        ??bdb_CBKETCLinkKeyExchangeAttempt_0
// 3293   {
// 3294     bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
        ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
        MOV       R1,#0x0
        LCALL     `??bdb_setNodeJoinLinkKeyType::?relay`; Banked call to: bdb_setNodeJoinLinkKeyType
// 3295     bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, TRUE);
        ; Setup parameters for call to function bdb_reportCommissioningState
        MOV       R2,#0x1
        MOV       R1,#0x1
        LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
        SJMP      ??bdb_CBKETCLinkKeyExchangeAttempt_1
// 3296   }
// 3297   else
// 3298   {
// 3299     bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_APS_KEY;
??bdb_CBKETCLinkKeyExchangeAttempt_0:
        MOV       DPTR,#bdbAttributes + 18
        MOV       A,#0x0
        MOVX      @DPTR,A
// 3300     //We are going back one state to try it again
// 3301     bdbCommissioningProcedureState.bdbTCExchangeState -= BDB_TC_EXCHANGE_NEXT_STATE;
        MOV       DPTR,#bdbCommissioningProcedureState + 1
        MOVX      A,@DPTR
        ADD       A,#-0x1
        MOVX      @DPTR,A
// 3302     bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_STACK_VERSION);
        ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
        MOV       R2,#0x1
        MOV       R1,#0x1
        LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
// 3303   }
// 3304 
// 3305 }
??bdb_CBKETCLinkKeyExchangeAttempt_1:
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock50
// 3306 #endif
// 3307 
// 3308 #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
// 3309 
// 3310 /*********************************************************************
// 3311  * @fn      gp_ChangeChannelReq
// 3312  *
// 3313  * @brief   Callback function to notify the BDB about a GP commissioning 
// 3314  * request that will change the current channel for at most 
// 3315  * gpBirectionalCommissioningChangeChannelTimeout ms
// 3316  *
// 3317  * @param   channel - Channel in which the commissioning will take place
// 3318  *
// 3319  * @return  TRUE to allow change channel, FALSE to do not allow
// 3320  */
// 3321 static uint8 gp_ChangeChannelReq(void)
// 3322 {
// 3323   uint8 allowChangeChannel = TRUE;
// 3324   
// 3325   //Do not allow changes of channel if any process is in place
// 3326   if(bdbAttributes.bdbCommissioningMode)
// 3327   {
// 3328     allowChangeChannel = FALSE;
// 3329   }
// 3330   
// 3331   //Check application state to decide if allow change channel or not
// 3332   
// 3333   return allowChangeChannel;
// 3334 }
// 3335 
// 3336 
// 3337 /*********************************************************************
// 3338  * @fn          gp_CBInit
// 3339  *
// 3340  * @brief       Register the callbacks for GP endpoint
// 3341  *
// 3342  * @param       none
// 3343  *
// 3344  * @return      none
// 3345  */
// 3346 void gp_CBInit(void)
// 3347 {
// 3348   GP_DataCnfGCB = GP_DataCnf;
// 3349   GP_endpointInitGCB = gp_endpointInit;  
// 3350   GP_expireDuplicateFilteringGCB = gp_expireDuplicateFiltering;
// 3351   GP_stopCommissioningModeGCB = gp_stopCommissioningMode;
// 3352   GP_returnOperationalChannelGCB = gp_returnOperationalChannel;
// 3353   GP_DataIndGCB = GP_DataInd;
// 3354   GP_SecReqGCB = GP_SecReq;   
// 3355   GP_CheckAnnouncedDeviceGCB = gp_CheckAnnouncedDevice;
// 3356     
// 3357   GP_aliasConflictAnnce = &aliasConflictAnnce;
// 3358   
// 3359   GP_endpointInitGCB();
// 3360 }
// 3361 
// 3362 #endif
// 3363 
// 3364 /*********************************************************************
// 3365 *********************************************************************/
// 3366 
// 3367 
// 3368 /******************************************************************************
// 3369  * @fn          bdb_GenerateInstallCodeCRC
// 3370  *
// 3371  * @brief       Creates a CRC for the install code passed.
// 3372  *
// 3373  * @param       installCode - install code from which CRC will be generated
// 3374  *
// 3375  * @return      CRC
// 3376  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3377 uint16 bdb_GenerateInstallCodeCRC(uint8 *installCode)
bdb_GenerateInstallCodeCRC:
          CFI Block cfiBlock51 Using cfiCommon0
          CFI Function bdb_GenerateInstallCodeCRC
        CODE
// 3378 {
        FUNCALL bdb_GenerateInstallCodeCRC, bdb_calculateCCITT_CRC
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 3379   uint16 CRC;
// 3380   
// 3381   bdb_calculateCCITT_CRC(installCode, INSTALL_CODE_LEN, &CRC);
        ; Setup parameters for call to function bdb_calculateCCITT_CRC
        MOV       DPTR,#__Constant_10
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_calculateCCITT_CRC::?relay`; Banked call to: bdb_calculateCCITT_CRC
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 3382 
// 3383   return CRC;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
// 3384 }
          CFI EndBlock cfiBlock51
// 3385 
// 3386 /******************************************************************************
// 3387  * @fn          bdb_calculateCCITT_CRC
// 3388  *
// 3389  * @brief       Creates a CRC for the install code passed.
// 3390  *
// 3391  * @param       Mb - install code from which CRC will be generated
// 3392  * @param       msglen - install code length
// 3393  * @param       crc - 
// 3394  *
// 3395  * @return      none
// 3396  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3397 void bdb_calculateCCITT_CRC (uint8 *Mb, uint32 msglen, uint16 *crc)
bdb_calculateCCITT_CRC:
          CFI Block cfiBlock52 Using cfiCommon0
          CFI Function bdb_calculateCCITT_CRC
        CODE
// 3398 {
        FUNCALL bdb_calculateCCITT_CRC, bdb_crcInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_calculateCCITT_CRC, bdb_crcBitByBitFast
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV       A,#-0x4
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
// 3399   uint16 crcinit_direct; 
// 3400   uint16 crcinit_nondirect;
// 3401   bdb_crcInit(crc, &crcinit_direct, &crcinit_nondirect);
        ; Setup parameters for call to function bdb_crcInit
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??bdb_crcInit::?relay`; Banked call to: bdb_crcInit
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
// 3402   *crc = bdb_crcBitByBitFast(Mb, msglen, crcinit_direct, crcinit_nondirect);
        ; Setup parameters for call to function bdb_crcBitByBitFast
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_crcBitByBitFast::?relay`; Banked call to: bdb_crcBitByBitFast
        MOV       A,#0x6
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 3403 }
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock52
// 3404 
// 3405 
// 3406 /******************************************************************************
// 3407  * @fn          bdb_crcInit
// 3408  *
// 3409  * @brief       Initialize CRC calculation
// 3410  *
// 3411  * @param       crc - 
// 3412  * @param       crcinit_direct -
// 3413  * @param       crcinit_nondirect - 
// 3414  *
// 3415  * @return      none
// 3416  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3417 void bdb_crcInit(uint16 *crc, uint16 *crcinit_direct, uint16 *crcinit_nondirect)
bdb_crcInit:
          CFI Block cfiBlock53 Using cfiCommon0
          CFI Function bdb_crcInit
        CODE
// 3418 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        MOV       A,#-0xd
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
// 3419 
// 3420   uint16 i;
// 3421   uint16 bit;
// 3422 
// 3423   *crcinit_direct = CRC_INIT;
        MOV       DPL,R4
        MOV       DPH,R5
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 3424   *crc = CRC_INIT;
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 3425   for (i=0; i<CRC_ORDER; i++) 
        MOV       ?V0,#0x0
        MOV       ?V1,#0x0
??bdb_crcInit_0:
        CLR       C
        MOV       A,?V0
        SUBB      A,#0x10
        MOV       A,?V1
        SUBB      A,#0x0
        JNC       ??bdb_crcInit_1
// 3426   {
// 3427     bit = *crc & 1;
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ANL       A,#0x1
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,#0x0
        MOV       R7,A
        MOV       ?V2,R6
        MOV       ?V3,R7
// 3428     if (bit) *crc^= CRC_POLYNOM;
        MOV       A,?V2
        ORL       A,?V3
        JZ        ??bdb_crcInit_2
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        XRL       A,#0x21
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x10
        MOVX      @DPTR,A
// 3429     *crc >>= 1;
??bdb_crcInit_2:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        MOV       A,R7
        CLR       C
        RRC       A
        MOV       R7,A
        MOV       A,R6
        RRC       A
        MOV       R6,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
// 3430     if (bit) *crc|= CRC_HIGHBIT;
        MOV       A,?V2
        ORL       A,?V3
        JZ        ??bdb_crcInit_3
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ORL       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        ORL       A,#0x80
        MOVX      @DPTR,A
// 3431   }	
??bdb_crcInit_3:
        INC       ?V0
        MOV       A,?V0
        JNZ       ??bdb_crcInit_0
        INC       ?V1
        SJMP      ??bdb_crcInit_0
// 3432   *crcinit_nondirect = *crc;
??bdb_crcInit_1:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
// 3433 
// 3434 }
        MOV       R7,#0x5
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock53
// 3435 
// 3436 
// 3437 /******************************************************************************
// 3438  * @fn          bdb_crcReflect
// 3439  *
// 3440  * @brief       
// 3441  *
// 3442  * @param       crc - 
// 3443  * @param       bitnum -
// 3444  *
// 3445  * @return      none
// 3446  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3447 uint16 bdb_crcReflect (uint16 crc, uint16 bitnum)
bdb_crcReflect:
          CFI Block cfiBlock54 Using cfiCommon0
          CFI Function bdb_crcReflect
        CODE
// 3448 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       ?V2,R2
        MOV       ?V3,R3
// 3449 
// 3450   // reflects the lower 'bitnum' bits of 'crc'
// 3451 
// 3452   uint16 i, j=1, crcout=0;
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R2,#0x0
        MOV       R3,#0x0
// 3453 
// 3454   for (i=(uint16)1<<(bitnum-1); i; i>>=1) {
        MOV       ?V4,#0x1
        MOV       ?V5,#0x0
        MOV       A,R4
        ADD       A,#-0x1
        MOV       R0,#?V4
        LCALL     ?S_SHL
        MOV       R6,?V4
        MOV       R7,?V5
??bdb_crcReflect_0:
        MOV       A,R6
        ORL       A,R7
        JZ        ??bdb_crcReflect_1
// 3455     if (crc & i) crcout|=j;
        MOV       A,?V2
        ANL       A,R6
        MOV       R0,A
        MOV       A,?V3
        ANL       A,R7
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_crcReflect_2
        MOV       A,?V0
        ORL       A,R2
        MOV       R2,A
        MOV       A,?V1
        ORL       A,R3
        MOV       R3,A
// 3456     j<<= 1;
??bdb_crcReflect_2:
        MOV       A,?V0
        ADD       A,?V0
        MOV       ?V0,A
        MOV       A,?V1
        RLC       A
        MOV       ?V1,A
// 3457   }
        MOV       A,R7
        CLR       C
        RRC       A
        MOV       R7,A
        MOV       A,R6
        RRC       A
        MOV       R6,A
        SJMP      ??bdb_crcReflect_0
// 3458   return (crcout);
??bdb_crcReflect_1:
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
// 3459 }
          CFI EndBlock cfiBlock54
// 3460 
// 3461 
// 3462 /******************************************************************************
// 3463  * @fn          bdb_crcBitByBitFast
// 3464  *
// 3465  * @brief       
// 3466  *
// 3467  * @param       p - 
// 3468  * @param       len -
// 3469  * @param       crcinit_direct - 
// 3470  * @param       crcinit_nondirect -
// 3471  *
// 3472  * @return      crc
// 3473  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3474 uint16 bdb_crcBitByBitFast(uint8 * p, uint32 len, uint16 crcinit_direct, uint16 crcinit_nondirect) 
bdb_crcBitByBitFast:
          CFI Block cfiBlock55 Using cfiCommon0
          CFI Function bdb_crcBitByBitFast
        CODE
// 3475 {
        FUNCALL bdb_crcBitByBitFast, bdb_crcReflect
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bdb_crcBitByBitFast, bdb_crcReflect
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV       A,#-0x18
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 4
        MOV       A,#-0x4
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
        MOV       ?V14,R2
        MOV       ?V15,R3
        MOV       A,#0x1c
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,#?V8
        LCALL     ?L_MOV_X
// 3476   // fast bit by bit algorithm without augmented zero bytes.
// 3477   // does not use lookup table, suited for polynom orders between 1...32.
// 3478 
// 3479   uint16 i, j, c, bit;
// 3480   uint16 crc = crcinit_direct;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
// 3481 
// 3482   for (i=0; i<len; i++) {
        MOV       ?V2,#0x0
        MOV       ?V3,#0x0
??bdb_crcBitByBitFast_0:
        MOV       ?V4,?V2
        MOV       ?V5,?V3
        CLR       A
        MOV       ?V6,A
        MOV       ?V7,A
        MOV       R0,#?V8
        MOV       R1,#?V4
        LCALL     ?UL_GT
        JC        $+5
        LJMP      ??bdb_crcBitByBitFast_1 & 0xFFFF
// 3483 
// 3484     c = (uint16)*p++;
        MOV       DPL,?V14
        MOV       DPH,?V15
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       R1,#0x0
        MOV       ?V12,R0
        MOV       ?V13,R1
        MOV       DPL,?V14
        MOV       DPH,?V15
        INC       DPTR
        MOV       ?V14,DPL
        MOV       ?V15,DPH
// 3485     c = bdb_crcReflect(c, 8);
        ; Setup parameters for call to function bdb_crcReflect
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R2,?V12
        MOV       R3,?V13
        LCALL     `??bdb_crcReflect::?relay`; Banked call to: bdb_crcReflect
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       ?V12,?V4
        MOV       ?V13,?V5
// 3486 
// 3487     for (j=0x80; j; j>>=1) {
        MOV       ?V0,#-0x80
        MOV       ?V1,#0x0
??bdb_crcBitByBitFast_2:
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??bdb_crcBitByBitFast_3
// 3488 
// 3489       bit = crc & CRC_HIGHBIT;
        MOV       A,R6
        ANL       A,#0x0
        MOV       R0,A
        MOV       A,R7
        ANL       A,#0x80
        MOV       R1,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 3490       crc<<= 1;
        MOV       A,R6
        ADD       A,R6
        MOV       R6,A
        MOV       A,R7
        RLC       A
        MOV       R7,A
// 3491       if (c & j) bit^= CRC_HIGHBIT;
        MOV       A,?V12
        ANL       A,?V0
        MOV       R0,A
        MOV       A,?V13
        ANL       A,?V1
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_crcBitByBitFast_4
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        XRL       A,#0x0
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x80
        MOVX      @DPTR,A
// 3492       if (bit) crc^= CRC_POLYNOM;
??bdb_crcBitByBitFast_4:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??bdb_crcBitByBitFast_5
        MOV       A,#0x21
        XRL       A,R6
        MOV       R6,A
        MOV       A,#0x10
        XRL       A,R7
        MOV       R7,A
// 3493     }
??bdb_crcBitByBitFast_5:
        MOV       A,?V1
        CLR       C
        RRC       A
        MOV       ?V1,A
        MOV       A,?V0
        RRC       A
        MOV       ?V0,A
        SJMP      ??bdb_crcBitByBitFast_2
// 3494   }	
??bdb_crcBitByBitFast_3:
        INC       ?V2
        MOV       A,?V2
        JNZ       ??bdb_crcBitByBitFast_6
        INC       ?V3
??bdb_crcBitByBitFast_6:
        LJMP      ??bdb_crcBitByBitFast_0 & 0xFFFF
// 3495 
// 3496   crc=bdb_crcReflect(crc, CRC_ORDER);
??bdb_crcBitByBitFast_1:
        ; Setup parameters for call to function bdb_crcReflect
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??bdb_crcReflect::?relay`; Banked call to: bdb_crcReflect
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R6,?V4
        MOV       R7,?V5
// 3497   crc^= CRC_XOR;
        MOV       A,#-0x1
        XRL       A,R6
        MOV       R6,A
        MOV       A,#-0x1
        XRL       A,R7
        MOV       R7,A
// 3498 
// 3499   return(crc);
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R7,#0x10
        LJMP      ?BANKED_LEAVE_XDATA
// 3500 }
          CFI EndBlock cfiBlock55

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for bdbAttributes>`:
        DATA32
        DD 134213632
        DD 2048
        DATA16
        DW 65535
        DATA8
        DB 0
        DB 0
        DB 13
        DB 4
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for vDoPrimaryScan>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgBdbInstallCodeCRC>`:
        DATA8
        DB 131
        DB 254
        DB 211
        DB 64
        DB 122
        DB 147
        DB 151
        DB 35
        DB 165
        DB 198
        DB 57
        DB 178
        DB 105
        DB 22
        DB 213
        DB 5
        DB 195
        DB 181

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_32:
        DD 50

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1388:
        DD 5000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_c8:
        DD 200

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3a98:
        DD 15000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_bb8:
        DD 3000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_10:
        DD 16

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RegisterSimpleDescriptor::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RegisterSimpleDescriptor

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ZclIdentifyCmdInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ZclIdentifyCmdInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setActiveCentralizedLinkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setActiveCentralizedLinkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_addInstallCode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_addInstallCode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_StartCommissioning::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_StartCommissioning

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_NotifyCommissioningModeStart::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_NotifyCommissioningModeStart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setNodeJoinLinkKeyType::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setNodeJoinLinkKeyType

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setFN::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setFN

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_resetLocalAction::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_resetLocalAction

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_parentLost::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_parentLost

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_NetworkRestoredResumeState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_NetworkRestoredResumeState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ZedAttemptRecoverNwk::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ZedAttemptRecoverNwk

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_reportCommissioningState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_reportCommissioningState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_nwkFormationAttempt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_nwkFormationAttempt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_isDeviceNonFactoryNew::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_isDeviceNonFactoryNew

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_doTrustCenterRequireKeyExchange::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_doTrustCenterRequireKeyExchange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_rejoinNwk::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_rejoinNwk

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_nwkDiscoveryAttempt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_nwkDiscoveryAttempt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_filterNwkDisc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_filterNwkDisc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_tryNwkAssoc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_tryNwkAssoc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_nwkAssocAttemt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_nwkAssocAttemt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_nwkDescFree::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_nwkDescFree

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_joinProcess::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_joinProcess

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setChannelAttribute::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setChannelAttribute

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setChannel::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setChannel

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_nwkJoiningFormation::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_nwkJoiningFormation

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_tcLinkKeyExchangeAttempt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_tcLinkKeyExchangeAttempt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_requestVerifyTCLinkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_requestVerifyTCLinkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_requestTCLinkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_requestTCLinkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_requestTCStackVersion::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_requestTCStackVersion

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_nwkSteeringDeviceOnNwk::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_nwkSteeringDeviceOnNwk

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_startResumeCommissioningProcess::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_startResumeCommissioningProcess

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_processZDOMgs::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_processZDOMgs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ProcessNodeDescRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ProcessNodeDescRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_touchlinkSendFNReset::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_touchlinkSendFNReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setNodeIsOnANetwork::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setNodeIsOnANetwork

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_setCommissioningGroupID::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_setCommissioningGroupID

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_CreateRespondentList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_CreateRespondentList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_AddRespondentNode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_AddRespondentNode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_zclRespondentListClean::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_zclRespondentListClean

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ProcessOSALMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ProcessOSALMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_processTimeout::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_processTimeout

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_SendMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_SendMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RegisterCommissioningStatusCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RegisterCommissioningStatusCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_ClearNetworkParams::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_ClearNetworkParams

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_getZCLFrameCounter::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_getZCLFrameCounter

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RegisterCBKETCLinkKeyExchangeCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RegisterCBKETCLinkKeyExchangeCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_RegisterForFilterNwkDescCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_RegisterForFilterNwkDescCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_CBKETCLinkKeyExchangeAttempt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_CBKETCLinkKeyExchangeAttempt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_GenerateInstallCodeCRC::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_GenerateInstallCodeCRC

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_calculateCCITT_CRC::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_calculateCCITT_CRC

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_crcInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_crcInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_crcReflect::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_crcReflect

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??bdb_crcBitByBitFast::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bdb_crcBitByBitFast

        END
// 3501 
// 3502 
// 
// 9 158 bytes in segment BANKED_CODE
//   336 bytes in segment BANK_RELAYS
//    38 bytes in segment XDATA_I
//    38 bytes in segment XDATA_ID
//    32 bytes in segment XDATA_ROM_C
//    29 bytes in segment XDATA_Z
// 
//   374 bytes of CODE     memory
//     0 bytes of CONST    memory (+ 32 bytes shared)
// 9 158 bytes of HUGECODE memory
//    67 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
