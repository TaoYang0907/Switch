###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               31/Jul/2020  16:01:58
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack 3.0.2\Components\hal\target\CC2530EB\hal_lcd.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EWD788.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\hal\target\CC2530EB\hal_lcd.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D POWER_SAVING -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_GROUPS -D BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=0
#        -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0 -DREJOIN_POLL_RATE=0
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\hal_lcd.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\hal_lcd.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\hal\target\CC2530EB\hal_lcd.c
      1          /**************************************************************************************************
      2            Filename:       hal_lcd.c
      3            Revised:        $Date: 2012-09-30 16:36:36 -0700 (Sun, 30 Sep 2012) $
      4            Revision:       $Revision: 31658 $
      5          
      6            Description:    This file contains the interface to the HAL LCD Service.
      7          
      8          
      9            Copyright 2007-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /**************************************************************************************************
     41           *                                           INCLUDES
     42           **************************************************************************************************/
     43          #include "hal_types.h"
     44          #include "hal_lcd.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf8
   \   union <unnamed> volatile __sfr _A_U1CSR
   \                     _A_U1CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf9
   \   unsigned char volatile __sfr U1DBUF
   \                     U1DBUF:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfa
   \   unsigned char volatile __sfr U1BAUD
   \                     U1BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfb
   \   unsigned char volatile __sfr U1UCR
   \                     U1UCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfc
   \   unsigned char volatile __sfr U1GCR
   \                     U1GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     45          #include "OSAL.h"
     46          #include "OnBoard.h"
     47          #include "hal_assert.h"
     48          
     49          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
     50            #include "DebugTrace.h"
     51          #endif
     52          
     53          /**************************************************************************************************
     54           *                                          CONSTANTS
     55           **************************************************************************************************/
     56          /*
     57            LCD pins
     58          
     59            //control
     60            P0.0 - LCD_MODE
     61            P1.1 - LCD_FLASH_RESET
     62            P1.2 - LCD_CS
     63          
     64            //spi
     65            P1.5 - CLK
     66            P1.6 - MOSI
     67            P1.7 - MISO
     68          */
     69          
     70          /* LCD Control lines */
     71          #define HAL_LCD_MODE_PORT 0
     72          #define HAL_LCD_MODE_PIN  0
     73          
     74          #define HAL_LCD_RESET_PORT 1
     75          #define HAL_LCD_RESET_PIN  1
     76          
     77          #define HAL_LCD_CS_PORT 1
     78          #define HAL_LCD_CS_PIN  2
     79          
     80          /* LCD SPI lines */
     81          #define HAL_LCD_CLK_PORT 1
     82          #define HAL_LCD_CLK_PIN  5
     83          
     84          #define HAL_LCD_MOSI_PORT 1
     85          #define HAL_LCD_MOSI_PIN  6
     86          
     87          #define HAL_LCD_MISO_PORT 1
     88          #define HAL_LCD_MISO_PIN  7
     89          
     90          /* SPI settings */
     91          #define HAL_SPI_CLOCK_POL_LO       0x00
     92          #define HAL_SPI_CLOCK_PHA_0        0x00
     93          #define HAL_SPI_TRANSFER_MSB_FIRST 0x20
     94          
     95          /* LCD lines */
     96          #define LCD_MAX_LINE_COUNT              3
     97          
     98          /* Defines for HW LCD */
     99          
    100          /* Set power save mode */
    101          #define OSC_OFF                         0x00
    102          #define OSC_ON                          0x01
    103          #define POWER_SAVE_OFF                  0x00
    104          #define POWER_SAVE_ON                   0x02
    105          #define SET_POWER_SAVE_MODE(options)    HalLcd_HW_Control(0x0C | (options))
    106          
    107          /* Function Set */
    108          #define CGROM                           0x00
    109          #define CGRAM                           0x01
    110          #define COM_FORWARD                     0x00
    111          #define COM_BACKWARD                    0x02
    112          #define TWO_LINE                        0x00
    113          #define THREE_LINE                      0x04
    114          #define FUNCTION_SET(options)           HalLcd_HW_Control(0x10 | (options))
    115          
    116          /* Set Display Start Line */
    117          #define LINE1                           0x00
    118          #define LINE2                           0x01
    119          #define LINE3                           0x02
    120          #define LINE4                           0x03
    121          #define SET_DISPLAY_START_LINE(line)    HalLcd_HW_Control(0x18 | (line))
    122          
    123          /* Bias control */
    124          #define BIAS_1_5                        0x00
    125          #define BIAS_1_4                        0x01
    126          #define SET_BIAS_CTRL(bias)             HalLcd_HW_Control(0x1C | (bias))
    127          
    128          /* Power control */
    129          #define VOLTAGE_DIVIDER_OFF             0x00
    130          #define VOLTAGE_DIVIDER_ON              0x01
    131          #define CONVERTER_AND_REG_OFF           0x00
    132          #define CONVERTER_AND_REG_ON            0x04
    133          #define SET_POWER_CTRL(options)         HalLcd_HW_Control(0x20 | (options))
    134          
    135          // Set display control
    136          #define DISPLAY_CTRL_ON                 0x01
    137          #define DISPLAY_CTRL_OFF                0x00
    138          #define DISPLAY_CTRL_BLINK_ON           0x02
    139          #define DISPLAY_CTRL_BLINK_OFF          0x00
    140          #define DISPLAY_CTRL_CURSOR_ON          0x04
    141          #define DISPLAY_CTRL_CURSOR_OFF         0x00
    142          #define SET_DISPLAY_CTRL(options)       HalLcd_HW_Control(0x28 | (options))
    143          
    144          /* Set DD/ CGRAM address */
    145          #define SET_DDRAM_ADDR(charIndex)       HalLcd_HW_Control(0x80 | (charIndex))
    146          #define SET_GCRAM_CHAR(specIndex)       HalLcd_HW_Control(0xC0 | (specIndex))
    147          
    148          /* Set ICONRAM address */
    149          #define CONTRAST_CTRL_REGISTER          0x10
    150          #define SET_ICONRAM_ADDR(addr)          HalLcd_HW_Control(0x40 | (addr))
    151          
    152          /* Set double height */
    153          #define LINE_1_AND_2                    0x01
    154          #define LINE_2_AND_3                    0x02
    155          #define NORMAL_DISPLAY                  0x00
    156          #define SET_DOUBLE_HEIGHT(options)      HalLcd_HW_Control(0x08 | (options))
    157          
    158          /**************************************************************************************************
    159           *                                           MACROS
    160           **************************************************************************************************/
    161          
    162          #define HAL_IO_SET(port, pin, val)        HAL_IO_SET_PREP(port, pin, val)
    163          #define HAL_IO_SET_PREP(port, pin, val)   st( P##port##_##pin = val; )
    164          
    165          #define HAL_CONFIG_IO_OUTPUT(port, pin, val)      HAL_CONFIG_IO_OUTPUT_PREP(port, pin, val)
    166          #define HAL_CONFIG_IO_OUTPUT_PREP(port, pin, val) st( P##port##SEL &= ~BV(pin); \
    167                                                                P##port##_##pin = val; \
    168                                                                P##port##DIR |= BV(pin); )
    169          
    170          #define HAL_CONFIG_IO_PERIPHERAL(port, pin)      HAL_CONFIG_IO_PERIPHERAL_PREP(port, pin)
    171          #define HAL_CONFIG_IO_PERIPHERAL_PREP(port, pin) st( P##port##SEL |= BV(pin); )
    172          
    173          
    174          
    175          /* SPI interface control */
    176          #define LCD_SPI_BEGIN()     HAL_IO_SET(HAL_LCD_CS_PORT,  HAL_LCD_CS_PIN,  0); /* chip select */
    177          #define LCD_SPI_END()                                                         \
    178          {                                                                             \
    179            asm("NOP");                                                                 \
    180            asm("NOP");                                                                 \
    181            asm("NOP");                                                                 \
    182            asm("NOP");                                                                 \
    183            HAL_IO_SET(HAL_LCD_CS_PORT,  HAL_LCD_CS_PIN,  1); /* chip select */         \
    184          }
    185          /* clear the received and transmit byte status, write tx data to buffer, wait till transmit done */
    186          #define LCD_SPI_TX(x)                   { U1CSR &= ~(BV(2) | BV(1)); U1DBUF = x; while( !(U1CSR & BV(1)) ); }
    187          #define LCD_SPI_WAIT_RXRDY()            { while(!(U1CSR & BV(1))); }
    188          
    189          
    190          /* Control macros */
    191          #define LCD_DO_WRITE()        HAL_IO_SET(HAL_LCD_MODE_PORT,  HAL_LCD_MODE_PIN,  1);
    192          #define LCD_DO_CONTROL()      HAL_IO_SET(HAL_LCD_MODE_PORT,  HAL_LCD_MODE_PIN,  0);
    193          
    194          #define LCD_ACTIVATE_RESET()  HAL_IO_SET(HAL_LCD_RESET_PORT, HAL_LCD_RESET_PIN, 0);
    195          #define LCD_RELEASE_RESET()   HAL_IO_SET(HAL_LCD_RESET_PORT, HAL_LCD_RESET_PIN, 1);
    196          
    197          #if (HAL_LCD == TRUE)
    198          /**************************************************************************************************
    199           *                                       LOCAL VARIABLES
    200           **************************************************************************************************/
    201          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    202          static uint8 *Lcd_Line1;
   \                     Lcd_Line1:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    203          
    204          /**************************************************************************************************
    205           *                                       FUNCTIONS - API
    206           **************************************************************************************************/
    207          
    208          void HalLcd_HW_Init(void);
    209          void HalLcd_HW_WaitUs(uint16 i);
    210          void HalLcd_HW_ClearAllSpecChars(void);
    211          void HalLcd_HW_Control(uint8 cmd);
    212          void HalLcd_HW_Write(uint8 data);
    213          void HalLcd_HW_SetContrast(uint8 value);
    214          void HalLcd_HW_WriteChar(uint8 line, uint8 col, char text);
    215          void HalLcd_HW_WriteLine(uint8 line, const char *pText);
    216          #endif //LCD
    217          
    218          /**************************************************************************************************
    219           * @fn      HalLcdInit
    220           *
    221           * @brief   Initilize LCD Service
    222           *
    223           * @param   init - pointer to void that contains the initialized value
    224           *
    225           * @return  None
    226           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    227          void HalLcdInit(void)
   \                     HalLcdInit:
    228          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    229          #if (HAL_LCD == TRUE)
    230            Lcd_Line1 = NULL;
   \   000004   90....       MOV       DPTR,#Lcd_Line1
   \   000007   7400         MOV       A,#0x0
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   A3           INC       DPTR
   \   00000B   7400         MOV       A,#0x0
   \   00000D   F0           MOVX      @DPTR,A
    231            HalLcd_HW_Init();
   \   00000E                ; Setup parameters for call to function HalLcd_HW_Init
   \   00000E   12....       LCALL     `??HalLcd_HW_Init::?relay`; Banked call to: HalLcd_HW_Init
    232          #endif
    233          }
   \   000011   D083         POP       DPH
   \   000013   D082         POP       DPL
   \   000015   02....       LJMP      ?BRET
    234          
    235          /*************************************************************************************************
    236           *                    LCD EMULATION FUNCTIONS
    237           *
    238           * Some evaluation boards are equipped with Liquid Crystal Displays
    239           * (LCD) which may be used to display diagnostic information. These
    240           * functions provide LCD emulation, sending the diagnostic strings
    241           * to Z-Tool via the RS232 serial port. These functions are enabled
    242           * when the "LCD_SUPPORTED" compiler flag is placed in the makefile.
    243           *
    244           * Most applications update both lines (1 and 2) of the LCD whenever
    245           * text is posted to the device. This emulator assumes that line 1 is
    246           * updated first (saved locally) and the formatting and send operation
    247           * is triggered by receipt of line 2. Nothing will be transmitted if
    248           * only line 1 is updated.
    249           *
    250           *************************************************************************************************/
    251          
    252          
    253          /**************************************************************************************************
    254           * @fn      HalLcdWriteString
    255           *
    256           * @brief   Write a string to the LCD
    257           *
    258           * @param   str    - pointer to the string that will be displayed
    259           *          option - display options
    260           *
    261           * @return  None
    262           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    263          void HalLcdWriteString ( char *str, uint8 option)
   \                     HalLcdWriteString:
    264          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V8,R2
   \   000007   8B..         MOV       ?V9,R3
   \   000009   89..         MOV       ?V1,R1
    265          #if (HAL_LCD == TRUE)
    266          
    267            uint8 strLen = 0;
   \   00000B   7E00         MOV       R6,#0x0
    268            uint8 totalLen = 0;
   \   00000D   7F00         MOV       R7,#0x0
    269            uint8 *buf;
    270            uint8 tmpLen;
    271          
    272            if ( Lcd_Line1 == NULL )
   \   00000F   90....       MOV       DPTR,#Lcd_Line1
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F8           MOV       R0,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F9           MOV       R1,A
   \   000017   E8           MOV       A,R0
   \   000018   49           ORL       A,R1
   \   000019   7018         JNZ       ??HalLcdWriteString_0
    273            {
    274              Lcd_Line1 = osal_mem_alloc( HAL_LCD_MAX_CHARS+1 );
   \   00001B                ; Setup parameters for call to function osal_mem_alloc
   \   00001B   7A11         MOV       R2,#0x11
   \   00001D   7B00         MOV       R3,#0x0
   \   00001F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000022   90....       MOV       DPTR,#Lcd_Line1
   \   000025   EA           MOV       A,R2
   \   000026   F0           MOVX      @DPTR,A
   \   000027   A3           INC       DPTR
   \   000028   EB           MOV       A,R3
   \   000029   F0           MOVX      @DPTR,A
    275              HalLcdWriteString( "TexasInstruments", 1 );
   \   00002A                ; Setup parameters for call to function HalLcdWriteString
   \   00002A   7901         MOV       R1,#0x1
   \   00002C   7A..         MOV       R2,#`?<Constant "TexasInstruments">` & 0xff
   \   00002E   7B..         MOV       R3,#(`?<Constant "TexasInstruments">` >> 8) & 0xff
   \   000030   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    276            }
    277          
    278            strLen = (uint8)osal_strlen( (char*)str );
   \                     ??HalLcdWriteString_0:
   \   000033                ; Setup parameters for call to function osal_strlen
   \   000033   AA..         MOV       R2,?V8
   \   000035   AB..         MOV       R3,?V9
   \   000037   12....       LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   00003A   EA           MOV       A,R2
   \   00003B   FE           MOV       R6,A
    279          
    280            /* Check boundries */
    281            if ( strLen > HAL_LCD_MAX_CHARS )
   \   00003C   EE           MOV       A,R6
   \   00003D   C3           CLR       C
   \   00003E   9411         SUBB      A,#0x11
   \   000040   4002         JC        ??HalLcdWriteString_1
    282              strLen = HAL_LCD_MAX_CHARS;
   \   000042   7E10         MOV       R6,#0x10
    283          
    284            if ( option == HAL_LCD_LINE_1 )
   \                     ??HalLcdWriteString_1:
   \   000044   7401         MOV       A,#0x1
   \   000046   65..         XRL       A,?V1
   \   000048   7039         JNZ       ??HalLcdWriteString_2
    285            {
    286              /* Line 1 gets saved for later */
    287              osal_memcpy( Lcd_Line1, str, strLen );
   \   00004A                ; Setup parameters for call to function osal_memcpy
   \   00004A   85....       MOV       ?V4,?V8
   \   00004D   85....       MOV       ?V5,?V9
   \   000050   75..00       MOV       ?V6,#0x0
   \   000053   78..         MOV       R0,#?V4
   \   000055   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000058   EE           MOV       A,R6
   \   000059   FC           MOV       R4,A
   \   00005A   7D00         MOV       R5,#0x0
   \   00005C   90....       MOV       DPTR,#Lcd_Line1
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   FA           MOV       R2,A
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   FB           MOV       R3,A
   \   000064   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000067   7403         MOV       A,#0x3
   \   000069   12....       LCALL     ?DEALLOC_XSTACK8
    288              Lcd_Line1[strLen] = '\0';
   \   00006C   EE           MOV       A,R6
   \   00006D   F8           MOV       R0,A
   \   00006E   7900         MOV       R1,#0x0
   \   000070   90....       MOV       DPTR,#Lcd_Line1
   \   000073   E0           MOVX      A,@DPTR
   \   000074   28           ADD       A,R0
   \   000075   FA           MOV       R2,A
   \   000076   A3           INC       DPTR
   \   000077   E0           MOVX      A,@DPTR
   \   000078   39           ADDC      A,R1
   \   000079   8A82         MOV       DPL,R2
   \   00007B   F583         MOV       DPH,A
   \   00007D   7400         MOV       A,#0x0
   \   00007F   F0           MOVX      @DPTR,A
   \   000080   02....       LJMP      ??HalLcdWriteString_3 & 0xFFFF
    289            }
    290            else
    291            {
    292              /* Line 2 triggers action */
    293              tmpLen = (uint8)osal_strlen( (char*)Lcd_Line1 );
   \                     ??HalLcdWriteString_2:
   \   000083                ; Setup parameters for call to function osal_strlen
   \   000083   90....       MOV       DPTR,#Lcd_Line1
   \   000086   E0           MOVX      A,@DPTR
   \   000087   FA           MOV       R2,A
   \   000088   A3           INC       DPTR
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   FB           MOV       R3,A
   \   00008B   12....       LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   00008E   EA           MOV       A,R2
   \   00008F   F5..         MOV       ?V0,A
    294              totalLen =  tmpLen + 1 + strLen + 1;
   \   000091   E5..         MOV       A,?V0
   \   000093   2E           ADD       A,R6
   \   000094   2402         ADD       A,#0x2
   \   000096   FF           MOV       R7,A
    295              buf = osal_mem_alloc( totalLen );
   \   000097                ; Setup parameters for call to function osal_mem_alloc
   \   000097   EF           MOV       A,R7
   \   000098   FA           MOV       R2,A
   \   000099   7B00         MOV       R3,#0x0
   \   00009B   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00009E   8A..         MOV       ?V4,R2
   \   0000A0   8B..         MOV       ?V5,R3
   \   0000A2   85....       MOV       ?V2,?V4
   \   0000A5   85....       MOV       ?V3,?V5
    296              if ( buf != NULL )
   \   0000A8   E5..         MOV       A,?V2
   \   0000AA   45..         ORL       A,?V3
   \   0000AC   7003         JNZ       $+5
   \   0000AE   02....       LJMP      ??HalLcdWriteString_3 & 0xFFFF
    297              {
    298                /* Concatenate strings */
    299                osal_memcpy( buf, Lcd_Line1, tmpLen );
   \   0000B1                ; Setup parameters for call to function osal_memcpy
   \   0000B1   90....       MOV       DPTR,#Lcd_Line1
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   F5..         MOV       ?V4,A
   \   0000B7   A3           INC       DPTR
   \   0000B8   E0           MOVX      A,@DPTR
   \   0000B9   F5..         MOV       ?V5,A
   \   0000BB   75..00       MOV       ?V6,#0x0
   \   0000BE   78..         MOV       R0,#?V4
   \   0000C0   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000C3   E5..         MOV       A,?V0
   \   0000C5   FC           MOV       R4,A
   \   0000C6   7D00         MOV       R5,#0x0
   \   0000C8   AA..         MOV       R2,?V2
   \   0000CA   AB..         MOV       R3,?V3
   \   0000CC   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000CF   7403         MOV       A,#0x3
   \   0000D1   12....       LCALL     ?DEALLOC_XSTACK8
    300                buf[tmpLen++] = ' ';
   \   0000D4   E5..         MOV       A,?V0
   \   0000D6   F8           MOV       R0,A
   \   0000D7   7900         MOV       R1,#0x0
   \   0000D9   E5..         MOV       A,?V2
   \   0000DB   28           ADD       A,R0
   \   0000DC   F582         MOV       DPL,A
   \   0000DE   E5..         MOV       A,?V3
   \   0000E0   39           ADDC      A,R1
   \   0000E1   F583         MOV       DPH,A
   \   0000E3   7420         MOV       A,#0x20
   \   0000E5   F0           MOVX      @DPTR,A
   \   0000E6   05..         INC       ?V0
    301                osal_memcpy( &buf[tmpLen], str, strLen );
   \   0000E8                ; Setup parameters for call to function osal_memcpy
   \   0000E8   85....       MOV       ?V4,?V8
   \   0000EB   85....       MOV       ?V5,?V9
   \   0000EE   75..00       MOV       ?V6,#0x0
   \   0000F1   78..         MOV       R0,#?V4
   \   0000F3   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000F6   EE           MOV       A,R6
   \   0000F7   FC           MOV       R4,A
   \   0000F8   7D00         MOV       R5,#0x0
   \   0000FA   E5..         MOV       A,?V0
   \   0000FC   F8           MOV       R0,A
   \   0000FD   7900         MOV       R1,#0x0
   \   0000FF   E5..         MOV       A,?V2
   \   000101   28           ADD       A,R0
   \   000102   FA           MOV       R2,A
   \   000103   E5..         MOV       A,?V3
   \   000105   39           ADDC      A,R1
   \   000106   FB           MOV       R3,A
   \   000107   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00010A   7403         MOV       A,#0x3
   \   00010C   12....       LCALL     ?DEALLOC_XSTACK8
    302                buf[tmpLen+strLen] = '\0';
   \   00010F   E5..         MOV       A,?V0
   \   000111   FA           MOV       R2,A
   \   000112   7B00         MOV       R3,#0x0
   \   000114   EE           MOV       A,R6
   \   000115   F8           MOV       R0,A
   \   000116   7900         MOV       R1,#0x0
   \   000118   EA           MOV       A,R2
   \   000119   28           ADD       A,R0
   \   00011A   F8           MOV       R0,A
   \   00011B   EB           MOV       A,R3
   \   00011C   39           ADDC      A,R1
   \   00011D   F9           MOV       R1,A
   \   00011E   E5..         MOV       A,?V2
   \   000120   28           ADD       A,R0
   \   000121   F582         MOV       DPL,A
   \   000123   E5..         MOV       A,?V3
   \   000125   39           ADDC      A,R1
   \   000126   F583         MOV       DPH,A
   \   000128   7400         MOV       A,#0x0
   \   00012A   F0           MOVX      @DPTR,A
    303          
    304                /* Send it out */
    305          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    306          
    307          #if defined(SERIAL_DEBUG_SUPPORTED)
    308                debug_str( (uint8*)buf );
    309          #endif //LCD_SUPPORTED
    310          
    311          #endif //ZTOOL_P1
    312          
    313                /* Free mem */
    314                osal_mem_free( buf );
   \   00012B                ; Setup parameters for call to function osal_mem_free
   \   00012B   AA..         MOV       R2,?V2
   \   00012D   AB..         MOV       R3,?V3
   \   00012F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    315              }
    316            }
    317          
    318            if (option != HAL_LCD_SERIAL_DEBUG_ONLY)
   \                     ??HalLcdWriteString_3:
   \   000132   74FF         MOV       A,#-0x1
   \   000134   65..         XRL       A,?V1
   \   000136   6009         JZ        ??HalLcdWriteString_4
    319            {
    320              /* Display the string */
    321              HalLcd_HW_WriteLine (option, str);
   \   000138                ; Setup parameters for call to function HalLcd_HW_WriteLine
   \   000138   AA..         MOV       R2,?V8
   \   00013A   AB..         MOV       R3,?V9
   \   00013C   A9..         MOV       R1,?V1
   \   00013E   12....       LCALL     `??HalLcd_HW_WriteLine::?relay`; Banked call to: HalLcd_HW_WriteLine
    322            }
    323          
    324          #endif //HAL_LCD
    325          
    326          }
   \                     ??HalLcdWriteString_4:
   \   000141   7F0A         MOV       R7,#0xa
   \   000143   02....       LJMP      ?BANKED_LEAVE_XDATA
    327          
    328          /**************************************************************************************************
    329           * @fn      HalLcdWriteValue
    330           *
    331           * @brief   Write a value to the LCD
    332           *
    333           * @param   value  - value that will be displayed
    334           *          radix  - 8, 10, 16
    335           *          option - display options
    336           *
    337           * @return  None
    338           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    339          void HalLcdWriteValue ( uint32 value, const uint8 radix, uint8 option)
   \                     HalLcdWriteValue:
    340          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV       A,#-0x19
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   8C..         MOV       ?V2,R4
   \   000010   8D..         MOV       ?V3,R5
   \   000012   E9           MOV       A,R1
   \   000013   FF           MOV       R7,A
   \   000014   7427         MOV       A,#0x27
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FE           MOV       R6,A
    341          #if (HAL_LCD == TRUE)
    342            uint8 buf[HAL_LCD_MAX_BUFF];
    343          
    344            _ltoa( value, &buf[0], radix );
   \   00001B                ; Setup parameters for call to function _ltoa
   \   00001B   A8..         MOV       R0,?XSP + 0
   \   00001D   A9..         MOV       R1,?XSP + 1
   \   00001F   88..         MOV       ?V4,R0
   \   000021   89..         MOV       ?V5,R1
   \   000023   78..         MOV       R0,#?V4
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   EF           MOV       A,R7
   \   000029   F9           MOV       R1,A
   \   00002A   AA..         MOV       R2,?V0
   \   00002C   AB..         MOV       R3,?V1
   \   00002E   AC..         MOV       R4,?V2
   \   000030   AD..         MOV       R5,?V3
   \   000032   12....       LCALL     `??_ltoa::?relay`; Banked call to: _ltoa
   \   000035   7402         MOV       A,#0x2
   \   000037   12....       LCALL     ?DEALLOC_XSTACK8
    345            HalLcdWriteString( (char*)buf, option );
   \   00003A                ; Setup parameters for call to function HalLcdWriteString
   \   00003A   EE           MOV       A,R6
   \   00003B   F9           MOV       R1,A
   \   00003C   AA..         MOV       R2,?XSP + 0
   \   00003E   AB..         MOV       R3,?XSP + 1
   \   000040   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    346          #endif
    347          }
   \   000043   7419         MOV       A,#0x19
   \   000045   12....       LCALL     ?DEALLOC_XSTACK8
   \   000048   7F06         MOV       R7,#0x6
   \   00004A   02....       LJMP      ?BANKED_LEAVE_XDATA
    348          
    349          /**************************************************************************************************
    350           * @fn      HalLcdWriteScreen
    351           *
    352           * @brief   Write a value to the LCD
    353           *
    354           * @param   line1  - string that will be displayed on line 1
    355           *          line2  - string that will be displayed on line 2
    356           *
    357           * @return  None
    358           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    359          void HalLcdWriteScreen( char *line1, char *line2 )
   \                     HalLcdWriteScreen:
    360          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
    361          #if (HAL_LCD == TRUE)
    362            HalLcdWriteString( line1, HAL_LCD_DEBUG_LINE_1 );
   \   00000D                ; Setup parameters for call to function HalLcdWriteString
   \   00000D   79FF         MOV       R1,#-0x1
   \   00000F   EE           MOV       A,R6
   \   000010   FA           MOV       R2,A
   \   000011   EF           MOV       A,R7
   \   000012   FB           MOV       R3,A
   \   000013   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    363            HalLcdWriteString( line2, HAL_LCD_DEBUG_LINE_2 );
   \   000016                ; Setup parameters for call to function HalLcdWriteString
   \   000016   79FF         MOV       R1,#-0x1
   \   000018   AA..         MOV       R2,?V0
   \   00001A   AB..         MOV       R3,?V1
   \   00001C   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    364          #endif
    365          }
   \   00001F   7F02         MOV       R7,#0x2
   \   000021   02....       LJMP      ?BANKED_LEAVE_XDATA
    366          
    367          /**************************************************************************************************
    368           * @fn      HalLcdWriteStringValue
    369           *
    370           * @brief   Write a string followed by a value to the LCD
    371           *
    372           * @param   title  - Title that will be displayed before the value
    373           *          value  - value
    374           *          format - redix
    375           *          line   - line number
    376           *
    377           * @return  None
    378           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    379          void HalLcdWriteStringValue( char *title, uint16 value, uint8 format, uint8 line )
   \                     HalLcdWriteStringValue:
    380          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV       A,#-0x19
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V12,R2
   \   00000C   8B..         MOV       ?V13,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   \   000012   89..         MOV       ?V5,R1
   \   000014   742F         MOV       A,#0x2f
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V6,A
    381          #if (HAL_LCD == TRUE)
    382            uint8 tmpLen;
    383            uint8 buf[HAL_LCD_MAX_BUFF];
    384            uint32 err;
    385          
    386            tmpLen = (uint8)osal_strlen( (char*)title );
   \   00001C                ; Setup parameters for call to function osal_strlen
   \   00001C   AA..         MOV       R2,?V12
   \   00001E   AB..         MOV       R3,?V13
   \   000020   12....       LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   000023   EA           MOV       A,R2
   \   000024   F5..         MOV       ?V4,A
    387            osal_memcpy( buf, title, tmpLen );
   \   000026                ; Setup parameters for call to function osal_memcpy
   \   000026   85....       MOV       ?V8,?V12
   \   000029   85....       MOV       ?V9,?V13
   \   00002C   75..00       MOV       ?V10,#0x0
   \   00002F   78..         MOV       R0,#?V8
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000034   E5..         MOV       A,?V4
   \   000036   FC           MOV       R4,A
   \   000037   7D00         MOV       R5,#0x0
   \   000039   7403         MOV       A,#0x3
   \   00003B   12....       LCALL     ?XSTACK_DISP101_8
   \   00003E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000041   7403         MOV       A,#0x3
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
    388            buf[tmpLen] = ' ';
   \   000046   E5..         MOV       A,?V4
   \   000048   F8           MOV       R0,A
   \   000049   7900         MOV       R1,#0x0
   \   00004B   85..82       MOV       DPL,?XSP + 0
   \   00004E   85..83       MOV       DPH,?XSP + 1
   \   000051   E582         MOV       A,DPL
   \   000053   28           ADD       A,R0
   \   000054   F582         MOV       DPL,A
   \   000056   E583         MOV       A,DPH
   \   000058   39           ADDC      A,R1
   \   000059   F583         MOV       DPH,A
   \   00005B   7420         MOV       A,#0x20
   \   00005D   F0           MOVX      @DPTR,A
    389            err = (uint32)(value);
   \   00005E   EE           MOV       A,R6
   \   00005F   F8           MOV       R0,A
   \   000060   EF           MOV       A,R7
   \   000061   F9           MOV       R1,A
   \   000062   E4           CLR       A
   \   000063   FA           MOV       R2,A
   \   000064   FB           MOV       R3,A
   \   000065   88..         MOV       ?V0,R0
   \   000067   89..         MOV       ?V1,R1
   \   000069   8A..         MOV       ?V2,R2
   \   00006B   8B..         MOV       ?V3,R3
    390            _ltoa( err, &buf[tmpLen+1], format );
   \   00006D                ; Setup parameters for call to function _ltoa
   \   00006D   E5..         MOV       A,?V4
   \   00006F   F8           MOV       R0,A
   \   000070   7900         MOV       R1,#0x0
   \   000072   85..82       MOV       DPL,?XSP + 0
   \   000075   85..83       MOV       DPH,?XSP + 1
   \   000078   E582         MOV       A,DPL
   \   00007A   28           ADD       A,R0
   \   00007B   F582         MOV       DPL,A
   \   00007D   E583         MOV       A,DPH
   \   00007F   39           ADDC      A,R1
   \   000080   F583         MOV       DPH,A
   \   000082   A3           INC       DPTR
   \   000083   8582..       MOV       ?V8,DPL
   \   000086   8583..       MOV       ?V9,DPH
   \   000089   78..         MOV       R0,#?V8
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008E   A9..         MOV       R1,?V5
   \   000090   AA..         MOV       R2,?V0
   \   000092   AB..         MOV       R3,?V1
   \   000094   AC..         MOV       R4,?V2
   \   000096   AD..         MOV       R5,?V3
   \   000098   12....       LCALL     `??_ltoa::?relay`; Banked call to: _ltoa
   \   00009B   7402         MOV       A,#0x2
   \   00009D   12....       LCALL     ?DEALLOC_XSTACK8
    391            HalLcdWriteString( (char*)buf, line );		
   \   0000A0                ; Setup parameters for call to function HalLcdWriteString
   \   0000A0   A9..         MOV       R1,?V6
   \   0000A2   AA..         MOV       R2,?XSP + 0
   \   0000A4   AB..         MOV       R3,?XSP + 1
   \   0000A6   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    392          #endif
    393          }
   \   0000A9   7419         MOV       A,#0x19
   \   0000AB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AE   7F0E         MOV       R7,#0xe
   \   0000B0   02....       LJMP      ?BANKED_LEAVE_XDATA
    394          
    395          /**************************************************************************************************
    396           * @fn      HalLcdWriteStringValue
    397           *
    398           * @brief   Write a string followed by a value to the LCD
    399           *
    400           * @param   title   - Title that will be displayed before the value
    401           *          value1  - value #1
    402           *          format1 - redix of value #1
    403           *          value2  - value #2
    404           *          format2 - redix of value #2
    405           *          line    - line number
    406           *
    407           * @return  None
    408           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    409          void HalLcdWriteStringValueValue( char *title, uint16 value1, uint8 format1,
   \                     HalLcdWriteStringValueValue:
    410                                            uint16 value2, uint8 format2, uint8 line )
    411          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV       A,#-0x19
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V14,R2
   \   00000C   8B..         MOV       ?V15,R3
   \   00000E   8C..         MOV       ?V6,R4
   \   000010   8D..         MOV       ?V7,R5
   \   000012   89..         MOV       ?V11,R1
   \   000014   7431         MOV       A,#0x31
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V4,A
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F5..         MOV       ?V5,A
   \   000020   7433         MOV       A,#0x33
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   E0           MOVX      A,@DPTR
   \   000026   FF           MOV       R7,A
   \   000027   7434         MOV       A,#0x34
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F5..         MOV       ?V12,A
    412          
    413          #if (HAL_LCD == TRUE)
    414          
    415            uint8 tmpLen;
    416            uint8 buf[HAL_LCD_MAX_BUFF];
    417            uint32 err;
    418          
    419            tmpLen = (uint8)osal_strlen( (char*)title );
   \   00002F                ; Setup parameters for call to function osal_strlen
   \   00002F   AA..         MOV       R2,?V14
   \   000031   AB..         MOV       R3,?V15
   \   000033   12....       LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   000036   EA           MOV       A,R2
   \   000037   FE           MOV       R6,A
    420            if ( tmpLen )
   \   000038   EE           MOV       A,R6
   \   000039   6037         JZ        ??HalLcdWriteStringValueValue_0
    421            {
    422              osal_memcpy( buf, title, tmpLen );
   \   00003B                ; Setup parameters for call to function osal_memcpy
   \   00003B   85....       MOV       ?V8,?V14
   \   00003E   85....       MOV       ?V9,?V15
   \   000041   75..00       MOV       ?V10,#0x0
   \   000044   78..         MOV       R0,#?V8
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000049   EE           MOV       A,R6
   \   00004A   FC           MOV       R4,A
   \   00004B   7D00         MOV       R5,#0x0
   \   00004D   7403         MOV       A,#0x3
   \   00004F   12....       LCALL     ?XSTACK_DISP101_8
   \   000052   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000055   7403         MOV       A,#0x3
   \   000057   12....       LCALL     ?DEALLOC_XSTACK8
    423              buf[tmpLen++] = ' ';
   \   00005A   EE           MOV       A,R6
   \   00005B   F8           MOV       R0,A
   \   00005C   7900         MOV       R1,#0x0
   \   00005E   85..82       MOV       DPL,?XSP + 0
   \   000061   85..83       MOV       DPH,?XSP + 1
   \   000064   E582         MOV       A,DPL
   \   000066   28           ADD       A,R0
   \   000067   F582         MOV       DPL,A
   \   000069   E583         MOV       A,DPH
   \   00006B   39           ADDC      A,R1
   \   00006C   F583         MOV       DPH,A
   \   00006E   7420         MOV       A,#0x20
   \   000070   F0           MOVX      @DPTR,A
   \   000071   0E           INC       R6
    424            }
    425          
    426            err = (uint32)(value1);
   \                     ??HalLcdWriteStringValueValue_0:
   \   000072   A8..         MOV       R0,?V6
   \   000074   A9..         MOV       R1,?V7
   \   000076   E4           CLR       A
   \   000077   FA           MOV       R2,A
   \   000078   FB           MOV       R3,A
   \   000079   88..         MOV       ?V0,R0
   \   00007B   89..         MOV       ?V1,R1
   \   00007D   8A..         MOV       ?V2,R2
   \   00007F   8B..         MOV       ?V3,R3
    427            _ltoa( err, &buf[tmpLen], format1 );
   \   000081                ; Setup parameters for call to function _ltoa
   \   000081   EE           MOV       A,R6
   \   000082   F8           MOV       R0,A
   \   000083   7900         MOV       R1,#0x0
   \   000085   85..82       MOV       DPL,?XSP + 0
   \   000088   85..83       MOV       DPH,?XSP + 1
   \   00008B   E582         MOV       A,DPL
   \   00008D   28           ADD       A,R0
   \   00008E   F5..         MOV       ?V8,A
   \   000090   E583         MOV       A,DPH
   \   000092   39           ADDC      A,R1
   \   000093   F5..         MOV       ?V9,A
   \   000095   78..         MOV       R0,#?V8
   \   000097   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009A   A9..         MOV       R1,?V11
   \   00009C   AA..         MOV       R2,?V0
   \   00009E   AB..         MOV       R3,?V1
   \   0000A0   AC..         MOV       R4,?V2
   \   0000A2   AD..         MOV       R5,?V3
   \   0000A4   12....       LCALL     `??_ltoa::?relay`; Banked call to: _ltoa
   \   0000A7   7402         MOV       A,#0x2
   \   0000A9   12....       LCALL     ?DEALLOC_XSTACK8
    428            tmpLen = (uint8)osal_strlen( (char*)buf );
   \   0000AC                ; Setup parameters for call to function osal_strlen
   \   0000AC   AA..         MOV       R2,?XSP + 0
   \   0000AE   AB..         MOV       R3,?XSP + 1
   \   0000B0   12....       LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   0000B3   EA           MOV       A,R2
   \   0000B4   FE           MOV       R6,A
    429          
    430            buf[tmpLen++] = ',';
   \   0000B5   EE           MOV       A,R6
   \   0000B6   F8           MOV       R0,A
   \   0000B7   7900         MOV       R1,#0x0
   \   0000B9   85..82       MOV       DPL,?XSP + 0
   \   0000BC   85..83       MOV       DPH,?XSP + 1
   \   0000BF   E582         MOV       A,DPL
   \   0000C1   28           ADD       A,R0
   \   0000C2   F582         MOV       DPL,A
   \   0000C4   E583         MOV       A,DPH
   \   0000C6   39           ADDC      A,R1
   \   0000C7   F583         MOV       DPH,A
   \   0000C9   742C         MOV       A,#0x2c
   \   0000CB   F0           MOVX      @DPTR,A
   \   0000CC   0E           INC       R6
    431            buf[tmpLen++] = ' ';
   \   0000CD   EE           MOV       A,R6
   \   0000CE   F8           MOV       R0,A
   \   0000CF   7900         MOV       R1,#0x0
   \   0000D1   85..82       MOV       DPL,?XSP + 0
   \   0000D4   85..83       MOV       DPH,?XSP + 1
   \   0000D7   E582         MOV       A,DPL
   \   0000D9   28           ADD       A,R0
   \   0000DA   F582         MOV       DPL,A
   \   0000DC   E583         MOV       A,DPH
   \   0000DE   39           ADDC      A,R1
   \   0000DF   F583         MOV       DPH,A
   \   0000E1   7420         MOV       A,#0x20
   \   0000E3   F0           MOVX      @DPTR,A
   \   0000E4   0E           INC       R6
    432            err = (uint32)(value2);
   \   0000E5   A8..         MOV       R0,?V4
   \   0000E7   A9..         MOV       R1,?V5
   \   0000E9   E4           CLR       A
   \   0000EA   FA           MOV       R2,A
   \   0000EB   FB           MOV       R3,A
   \   0000EC   88..         MOV       ?V0,R0
   \   0000EE   89..         MOV       ?V1,R1
   \   0000F0   8A..         MOV       ?V2,R2
   \   0000F2   8B..         MOV       ?V3,R3
    433            _ltoa( err, &buf[tmpLen], format2 );
   \   0000F4                ; Setup parameters for call to function _ltoa
   \   0000F4   EE           MOV       A,R6
   \   0000F5   F8           MOV       R0,A
   \   0000F6   7900         MOV       R1,#0x0
   \   0000F8   85..82       MOV       DPL,?XSP + 0
   \   0000FB   85..83       MOV       DPH,?XSP + 1
   \   0000FE   E582         MOV       A,DPL
   \   000100   28           ADD       A,R0
   \   000101   F5..         MOV       ?V8,A
   \   000103   E583         MOV       A,DPH
   \   000105   39           ADDC      A,R1
   \   000106   F5..         MOV       ?V9,A
   \   000108   78..         MOV       R0,#?V8
   \   00010A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010D   EF           MOV       A,R7
   \   00010E   F9           MOV       R1,A
   \   00010F   AA..         MOV       R2,?V0
   \   000111   AB..         MOV       R3,?V1
   \   000113   AC..         MOV       R4,?V2
   \   000115   AD..         MOV       R5,?V3
   \   000117   12....       LCALL     `??_ltoa::?relay`; Banked call to: _ltoa
   \   00011A   7402         MOV       A,#0x2
   \   00011C   12....       LCALL     ?DEALLOC_XSTACK8
    434          
    435            HalLcdWriteString( (char *)buf, line );		
   \   00011F                ; Setup parameters for call to function HalLcdWriteString
   \   00011F   A9..         MOV       R1,?V12
   \   000121   AA..         MOV       R2,?XSP + 0
   \   000123   AB..         MOV       R3,?XSP + 1
   \   000125   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    436          
    437          #endif
    438          }
   \   000128   7419         MOV       A,#0x19
   \   00012A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00012D   7F10         MOV       R7,#0x10
   \   00012F   02....       LJMP      ?BANKED_LEAVE_XDATA
    439          
    440          /**************************************************************************************************
    441           * @fn      HalLcdDisplayPercentBar
    442           *
    443           * @brief   Display percentage bar on the LCD
    444           *
    445           * @param   title   -
    446           *          value   -
    447           *
    448           * @return  None
    449           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    450          void HalLcdDisplayPercentBar( char *title, uint8 value )
   \                     HalLcdDisplayPercentBar:
    451          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V10,R2
   \   00000C   8B..         MOV       ?V11,R3
   \   00000E   E9           MOV       A,R1
   \   00000F   FE           MOV       R6,A
    452          #if (HAL_LCD == TRUE)
    453          
    454            uint8 percent;
    455            uint8 leftOver;
    456            uint8 buf[17];
    457            uint32 err;
    458            uint8 x;
    459          
    460            /* Write the title: */
    461            HalLcdWriteString( title, HAL_LCD_LINE_1 );
   \   000010                ; Setup parameters for call to function HalLcdWriteString
   \   000010   7901         MOV       R1,#0x1
   \   000012   AA..         MOV       R2,?V10
   \   000014   AB..         MOV       R3,?V11
   \   000016   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    462          
    463            if ( value > 100 )
   \   000019   EE           MOV       A,R6
   \   00001A   C3           CLR       C
   \   00001B   9465         SUBB      A,#0x65
   \   00001D   4002         JC        ??HalLcdDisplayPercentBar_0
    464              value = 100;
   \   00001F   7E64         MOV       R6,#0x64
    465          
    466            /* convert to blocks */
    467            percent = (uint8)(value / 10);
   \                     ??HalLcdDisplayPercentBar_0:
   \   000021   75F00A       MOV       B,#0xa
   \   000024   EE           MOV       A,R6
   \   000025   84           DIV       AB
   \   000026   F5..         MOV       ?V8,A
    468            leftOver = (uint8)(value % 10);
   \   000028   EE           MOV       A,R6
   \   000029   75F00A       MOV       B,#0xa
   \   00002C   84           DIV       AB
   \   00002D   E5F0         MOV       A,B
   \   00002F   F5..         MOV       ?V7,A
    469          
    470            /* Make window */
    471            osal_memcpy( buf, "[          ]  ", 15 );
   \   000031                ; Setup parameters for call to function osal_memcpy
   \   000031   75....       MOV       ?V4,#`?<Constant "[          ]  ">` & 0xff
   \   000034   75....       MOV       ?V5,#(`?<Constant "[          ]  ">` >> 8) & 0xff
   \   000037   75..00       MOV       ?V6,#0x0
   \   00003A   78..         MOV       R0,#?V4
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00003F   7C0F         MOV       R4,#0xf
   \   000041   7D00         MOV       R5,#0x0
   \   000043   7403         MOV       A,#0x3
   \   000045   12....       LCALL     ?XSTACK_DISP101_8
   \   000048   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00004B   7403         MOV       A,#0x3
   \   00004D   12....       LCALL     ?DEALLOC_XSTACK8
    472          
    473            for ( x = 0; x < percent; x ++ )
   \   000050   7F00         MOV       R7,#0x0
   \                     ??HalLcdDisplayPercentBar_1:
   \   000052   EF           MOV       A,R7
   \   000053   C3           CLR       C
   \   000054   95..         SUBB      A,?V8
   \   000056   501B         JNC       ??HalLcdDisplayPercentBar_2
    474            {
    475              buf[1+x] = '>';
   \   000058   EF           MOV       A,R7
   \   000059   F8           MOV       R0,A
   \   00005A   7900         MOV       R1,#0x0
   \   00005C   85..82       MOV       DPL,?XSP + 0
   \   00005F   85..83       MOV       DPH,?XSP + 1
   \   000062   E582         MOV       A,DPL
   \   000064   28           ADD       A,R0
   \   000065   F582         MOV       DPL,A
   \   000067   E583         MOV       A,DPH
   \   000069   39           ADDC      A,R1
   \   00006A   F583         MOV       DPH,A
   \   00006C   A3           INC       DPTR
   \   00006D   743E         MOV       A,#0x3e
   \   00006F   F0           MOVX      @DPTR,A
    476            }
   \   000070   0F           INC       R7
   \   000071   80DF         SJMP      ??HalLcdDisplayPercentBar_1
    477          
    478            if ( leftOver >= 5 )
   \                     ??HalLcdDisplayPercentBar_2:
   \   000073   E5..         MOV       A,?V7
   \   000075   C3           CLR       C
   \   000076   9405         SUBB      A,#0x5
   \   000078   4018         JC        ??HalLcdDisplayPercentBar_3
    479              buf[1+x] = '+';
   \   00007A   EF           MOV       A,R7
   \   00007B   F8           MOV       R0,A
   \   00007C   7900         MOV       R1,#0x0
   \   00007E   85..82       MOV       DPL,?XSP + 0
   \   000081   85..83       MOV       DPH,?XSP + 1
   \   000084   E582         MOV       A,DPL
   \   000086   28           ADD       A,R0
   \   000087   F582         MOV       DPL,A
   \   000089   E583         MOV       A,DPH
   \   00008B   39           ADDC      A,R1
   \   00008C   F583         MOV       DPH,A
   \   00008E   A3           INC       DPTR
   \   00008F   742B         MOV       A,#0x2b
   \   000091   F0           MOVX      @DPTR,A
    480          
    481            err = (uint32)value;
   \                     ??HalLcdDisplayPercentBar_3:
   \   000092   EE           MOV       A,R6
   \   000093   F8           MOV       R0,A
   \   000094   E4           CLR       A
   \   000095   F9           MOV       R1,A
   \   000096   FA           MOV       R2,A
   \   000097   FB           MOV       R3,A
   \   000098   88..         MOV       ?V0,R0
   \   00009A   89..         MOV       ?V1,R1
   \   00009C   8A..         MOV       ?V2,R2
   \   00009E   8B..         MOV       ?V3,R3
    482            _ltoa( err, (uint8*)&buf[13], 10 );
   \   0000A0                ; Setup parameters for call to function _ltoa
   \   0000A0   740D         MOV       A,#0xd
   \   0000A2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A5   8582..       MOV       ?V4,DPL
   \   0000A8   8583..       MOV       ?V5,DPH
   \   0000AB   78..         MOV       R0,#?V4
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B0   790A         MOV       R1,#0xa
   \   0000B2   AA..         MOV       R2,?V0
   \   0000B4   AB..         MOV       R3,?V1
   \   0000B6   AC..         MOV       R4,?V2
   \   0000B8   AD..         MOV       R5,?V3
   \   0000BA   12....       LCALL     `??_ltoa::?relay`; Banked call to: _ltoa
   \   0000BD   7402         MOV       A,#0x2
   \   0000BF   12....       LCALL     ?DEALLOC_XSTACK8
    483          
    484            HalLcdWriteString( (char*)buf, HAL_LCD_LINE_2 );
   \   0000C2                ; Setup parameters for call to function HalLcdWriteString
   \   0000C2   7902         MOV       R1,#0x2
   \   0000C4   AA..         MOV       R2,?XSP + 0
   \   0000C6   AB..         MOV       R3,?XSP + 1
   \   0000C8   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    485          
    486          #endif
    487          
    488          }
   \   0000CB   7411         MOV       A,#0x11
   \   0000CD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D0   7F0C         MOV       R7,#0xc
   \   0000D2   02....       LJMP      ?BANKED_LEAVE_XDATA
    489          
    490          #if (HAL_LCD == TRUE)
    491          /**************************************************************************************************
    492           *                                    HARDWARE LCD
    493           **************************************************************************************************/
    494          
    495          /**************************************************************************************************
    496           * @fn      halLcd_ConfigIO
    497           *
    498           * @brief   Configure IO lines needed for LCD control.
    499           *
    500           * @param   None
    501           *
    502           * @return  None
    503           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    504          static void halLcd_ConfigIO(void)
   \                     halLcd_ConfigIO:
    505          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    506            /* GPIO configuration */
    507            HAL_CONFIG_IO_OUTPUT(HAL_LCD_MODE_PORT,  HAL_LCD_MODE_PIN,  1);
   \   000000   53F3FE       ANL       0xf3,#0xfe
   \   000003   D280         SETB      0x80.0
   \   000005   43FD01       ORL       0xfd,#0x1
    508            HAL_CONFIG_IO_OUTPUT(HAL_LCD_RESET_PORT, HAL_LCD_RESET_PIN, 1);
   \   000008   53F4FD       ANL       0xf4,#0xfd
   \   00000B   D291         SETB      0x90.1
   \   00000D   43FE02       ORL       0xfe,#0x2
    509            HAL_CONFIG_IO_OUTPUT(HAL_LCD_CS_PORT,    HAL_LCD_CS_PIN,    1);
   \   000010   53F4FB       ANL       0xf4,#0xfb
   \   000013   D292         SETB      0x90.2
   \   000015   43FE04       ORL       0xfe,#0x4
    510          }
   \   000018   02....       LJMP      ?BRET
   \   00001B                REQUIRE P0SEL
   \   00001B                REQUIRE _A_P0
   \   00001B                REQUIRE P0DIR
   \   00001B                REQUIRE P1SEL
   \   00001B                REQUIRE _A_P1
   \   00001B                REQUIRE P1DIR
    511          
    512          /**************************************************************************************************
    513           * @fn      halLcd_ConfigSPI
    514           *
    515           * @brief   Configure SPI lines needed for talking to LCD.
    516           *
    517           * @param   None
    518           *
    519           * @return  None
    520           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    521          static void halLcd_ConfigSPI(void)
   \                     halLcd_ConfigSPI:
    522          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    523            /* UART/SPI Peripheral configuration */
    524          
    525             uint8 baud_exponent;
    526             uint8 baud_mantissa;
    527          
    528            /* Set SPI on UART 1 alternative 2 */
    529            PERCFG |= 0x02;
   \   000000   43F102       ORL       0xf1,#0x2
    530          
    531            /* Configure clk, master out and master in lines */
    532            HAL_CONFIG_IO_PERIPHERAL(HAL_LCD_CLK_PORT,  HAL_LCD_CLK_PIN);
   \   000003   43F420       ORL       0xf4,#0x20
    533            HAL_CONFIG_IO_PERIPHERAL(HAL_LCD_MOSI_PORT, HAL_LCD_MOSI_PIN);
   \   000006   43F440       ORL       0xf4,#0x40
    534            HAL_CONFIG_IO_PERIPHERAL(HAL_LCD_MISO_PORT, HAL_LCD_MISO_PIN);
   \   000009   43F480       ORL       0xf4,#0x80
    535          
    536          
    537            /* Set SPI speed to 1 MHz (the values assume system clk of 32MHz)
    538             * Confirm on board that this results in 1MHz spi clk.
    539             */
    540            baud_exponent = 15;
   \   00000C   790F         MOV       R1,#0xf
    541            baud_mantissa =  0;
   \   00000E   7800         MOV       R0,#0x0
    542          
    543            /* Configure SPI */
    544            U1UCR  = 0x80;      /* Flush and goto IDLE state. 8-N-1. */
   \   000010   75FB80       MOV       0xfb,#-0x80
    545            U1CSR  = 0x00;      /* SPI mode, master. */
   \   000013   75F800       MOV       0xf8,#0x0
    546            U1GCR  = HAL_SPI_TRANSFER_MSB_FIRST | HAL_SPI_CLOCK_PHA_0 | HAL_SPI_CLOCK_POL_LO | baud_exponent;
   \   000016   7420         MOV       A,#0x20
   \   000018   49           ORL       A,R1
   \   000019   F5FC         MOV       0xfc,A
    547            U1BAUD = baud_mantissa;
   \   00001B   88FA         MOV       0xfa,R0
    548          }
   \   00001D   02....       LJMP      ?BRET
   \   000020                REQUIRE PERCFG
   \   000020                REQUIRE P1SEL
   \   000020                REQUIRE U1UCR
   \   000020                REQUIRE _A_U1CSR
   \   000020                REQUIRE U1GCR
   \   000020                REQUIRE U1BAUD
    549          
    550          /**************************************************************************************************
    551           * @fn      HalLcd_HW_Init
    552           *
    553           * @brief   Initilize HW LCD Driver.
    554           *
    555           * @param   None
    556           *
    557           * @return  None
    558           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    559          void HalLcd_HW_Init(void)
   \                     HalLcd_HW_Init:
    560          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    561            /* Initialize LCD IO lines */
    562            halLcd_ConfigIO();
   \   000004                ; Setup parameters for call to function halLcd_ConfigIO
   \   000004   12....       LCALL     `??halLcd_ConfigIO::?relay`; Banked call to: halLcd_ConfigIO
    563          
    564            /* Initialize SPI */
    565            halLcd_ConfigSPI();
   \   000007                ; Setup parameters for call to function halLcd_ConfigSPI
   \   000007   12....       LCALL     `??halLcd_ConfigSPI::?relay`; Banked call to: halLcd_ConfigSPI
    566          
    567            /* Perform reset */
    568            LCD_ACTIVATE_RESET();
   \   00000A   C291         CLR       0x90.1
    569            HalLcd_HW_WaitUs(15000); // 15 ms
   \   00000C                ; Setup parameters for call to function HalLcd_HW_WaitUs
   \   00000C   7A98         MOV       R2,#-0x68
   \   00000E   7B3A         MOV       R3,#0x3a
   \   000010   12....       LCALL     `??HalLcd_HW_WaitUs::?relay`; Banked call to: HalLcd_HW_WaitUs
    570            LCD_RELEASE_RESET();
   \   000013   D291         SETB      0x90.1
    571            HalLcd_HW_WaitUs(15); // 15 us
   \   000015                ; Setup parameters for call to function HalLcd_HW_WaitUs
   \   000015   7A0F         MOV       R2,#0xf
   \   000017   7B00         MOV       R3,#0x0
   \   000019   12....       LCALL     `??HalLcd_HW_WaitUs::?relay`; Banked call to: HalLcd_HW_WaitUs
    572          
    573            /* Perform the initialization sequence */
    574            FUNCTION_SET(CGRAM | COM_FORWARD | THREE_LINE);
   \   00001C                ; Setup parameters for call to function HalLcd_HW_Control
   \   00001C   7915         MOV       R1,#0x15
   \   00001E   12....       LCALL     `??HalLcd_HW_Control::?relay`; Banked call to: HalLcd_HW_Control
    575          
    576            /* Set contrast */
    577            HalLcd_HW_SetContrast(15);
   \   000021                ; Setup parameters for call to function HalLcd_HW_SetContrast
   \   000021   790F         MOV       R1,#0xf
   \   000023   12....       LCALL     `??HalLcd_HW_SetContrast::?relay`; Banked call to: HalLcd_HW_SetContrast
    578          
    579            /* Set power */
    580            SET_POWER_SAVE_MODE(OSC_OFF | POWER_SAVE_ON);
   \   000026                ; Setup parameters for call to function HalLcd_HW_Control
   \   000026   790E         MOV       R1,#0xe
   \   000028   12....       LCALL     `??HalLcd_HW_Control::?relay`; Banked call to: HalLcd_HW_Control
    581            SET_POWER_CTRL(VOLTAGE_DIVIDER_ON | CONVERTER_AND_REG_ON);
   \   00002B                ; Setup parameters for call to function HalLcd_HW_Control
   \   00002B   7925         MOV       R1,#0x25
   \   00002D   12....       LCALL     `??HalLcd_HW_Control::?relay`; Banked call to: HalLcd_HW_Control
    582            SET_BIAS_CTRL(BIAS_1_5);
   \   000030                ; Setup parameters for call to function HalLcd_HW_Control
   \   000030   791C         MOV       R1,#0x1c
   \   000032   12....       LCALL     `??HalLcd_HW_Control::?relay`; Banked call to: HalLcd_HW_Control
    583            HalLcd_HW_WaitUs(21000);// 21 ms
   \   000035                ; Setup parameters for call to function HalLcd_HW_WaitUs
   \   000035   7A08         MOV       R2,#0x8
   \   000037   7B52         MOV       R3,#0x52
   \   000039   12....       LCALL     `??HalLcd_HW_WaitUs::?relay`; Banked call to: HalLcd_HW_WaitUs
    584          
    585            /* Clear the display */
    586            HalLcd_HW_Clear();
   \   00003C                ; Setup parameters for call to function HalLcd_HW_Clear
   \   00003C   12....       LCALL     `??HalLcd_HW_Clear::?relay`; Banked call to: HalLcd_HW_Clear
    587            HalLcd_HW_ClearAllSpecChars();
   \   00003F                ; Setup parameters for call to function HalLcd_HW_ClearAllSpecChars
   \   00003F   12....       LCALL     `??HalLcd_HW_ClearAllSpecChars::?relay`; Banked call to: HalLcd_HW_ClearAllSpecChars
    588            SET_DISPLAY_CTRL(DISPLAY_CTRL_ON | DISPLAY_CTRL_BLINK_OFF | DISPLAY_CTRL_CURSOR_OFF);
   \   000042                ; Setup parameters for call to function HalLcd_HW_Control
   \   000042   7929         MOV       R1,#0x29
   \   000044   12....       LCALL     `??HalLcd_HW_Control::?relay`; Banked call to: HalLcd_HW_Control
    589          }
   \   000047   D083         POP       DPH
   \   000049   D082         POP       DPL
   \   00004B   02....       LJMP      ?BRET
   \   00004E                REQUIRE _A_P1
    590          
    591          /**************************************************************************************************
    592           * @fn      HalLcd_HW_Control
    593           *
    594           * @brief   Write 1 command to the LCD
    595           *
    596           * @param   uint8 cmd - command to be written to the LCD
    597           *
    598           * @return  None
    599           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    600          void HalLcd_HW_Control(uint8 cmd)
   \                     HalLcd_HW_Control:
    601          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    602            LCD_SPI_BEGIN();
   \   000000   C292         CLR       0x90.2
    603            LCD_DO_CONTROL();
   \   000002   C280         CLR       0x80.0
    604            LCD_SPI_TX(cmd);
   \   000004   53F8F9       ANL       0xf8,#0xf9
   \   000007   89F9         MOV       0xf9,R1
   \                     ??HalLcd_HW_Control_0:
   \   000009   A2F9         MOV       C,0xf8.1
   \   00000B   50FC         JNC       ??HalLcd_HW_Control_0
    605            LCD_SPI_WAIT_RXRDY();
   \                     ??HalLcd_HW_Control_1:
   \   00000D   A2F9         MOV       C,0xf8.1
   \   00000F   50FC         JNC       ??HalLcd_HW_Control_1
    606            LCD_SPI_END();
   \   000011   00           NOP
   \   000012   00           NOP
   \   000013   00           NOP
   \   000014   00           NOP
   \   000015   D292         SETB      0x90.2
    607          }
   \   000017   02....       LJMP      ?BRET
   \   00001A                REQUIRE _A_P1
   \   00001A                REQUIRE _A_P0
   \   00001A                REQUIRE _A_U1CSR
   \   00001A                REQUIRE U1DBUF
    608          
    609          /**************************************************************************************************
    610           * @fn      HalLcd_HW_Write
    611           *
    612           * @brief   Write 1 byte to the LCD
    613           *
    614           * @param   uint8 data - data to be written to the LCD
    615           *
    616           * @return  None
    617           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    618          void HalLcd_HW_Write(uint8 data)
   \                     HalLcd_HW_Write:
    619          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    620            LCD_SPI_BEGIN();
   \   000000   C292         CLR       0x90.2
    621            LCD_DO_WRITE();
   \   000002   D280         SETB      0x80.0
    622            LCD_SPI_TX(data);
   \   000004   53F8F9       ANL       0xf8,#0xf9
   \   000007   89F9         MOV       0xf9,R1
   \                     ??HalLcd_HW_Write_0:
   \   000009   A2F9         MOV       C,0xf8.1
   \   00000B   50FC         JNC       ??HalLcd_HW_Write_0
    623            LCD_SPI_WAIT_RXRDY();
   \                     ??HalLcd_HW_Write_1:
   \   00000D   A2F9         MOV       C,0xf8.1
   \   00000F   50FC         JNC       ??HalLcd_HW_Write_1
    624            LCD_SPI_END();
   \   000011   00           NOP
   \   000012   00           NOP
   \   000013   00           NOP
   \   000014   00           NOP
   \   000015   D292         SETB      0x90.2
    625          }
   \   000017   02....       LJMP      ?BRET
   \   00001A                REQUIRE _A_P1
   \   00001A                REQUIRE _A_P0
   \   00001A                REQUIRE _A_U1CSR
   \   00001A                REQUIRE U1DBUF
    626          
    627          /**************************************************************************************************
    628           * @fn          HalLcd_HW_SetContrast
    629           *
    630           * @brief       Set display contrast
    631           *
    632           * @param       uint8 value - contrast value
    633           *
    634           * @return      none
    635           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    636          void HalLcd_HW_SetContrast(uint8 value)
   \                     HalLcd_HW_SetContrast:
    637          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    638            SET_ICONRAM_ADDR(CONTRAST_CTRL_REGISTER);
   \   000007                ; Setup parameters for call to function HalLcd_HW_Control
   \   000007   7950         MOV       R1,#0x50
   \   000009   12....       LCALL     `??HalLcd_HW_Control::?relay`; Banked call to: HalLcd_HW_Control
    639            HalLcd_HW_Write(value);
   \   00000C                ; Setup parameters for call to function HalLcd_HW_Write
   \   00000C   EE           MOV       A,R6
   \   00000D   F9           MOV       R1,A
   \   00000E   12....       LCALL     `??HalLcd_HW_Write::?relay`; Banked call to: HalLcd_HW_Write
    640          }
   \   000011   7F01         MOV       R7,#0x1
   \   000013   02....       LJMP      ?BANKED_LEAVE_XDATA
    641          
    642          /**************************************************************************************************
    643           * @fn      HalLcd_HW_Clear
    644           *
    645           * @brief   Clear the HW LCD
    646           *
    647           * @param   None
    648           *
    649           * @return  None
    650           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    651          void HalLcd_HW_Clear(void)
   \                     HalLcd_HW_Clear:
    652          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    653            uint8 n;
    654          
    655            SET_DDRAM_ADDR(0x00);
   \   000005                ; Setup parameters for call to function HalLcd_HW_Control
   \   000005   7980         MOV       R1,#-0x80
   \   000007   12....       LCALL     `??HalLcd_HW_Control::?relay`; Banked call to: HalLcd_HW_Control
    656            for (n = 0; n < (LCD_MAX_LINE_COUNT * HAL_LCD_MAX_CHARS); n++)
   \   00000A   7E00         MOV       R6,#0x0
   \                     ??HalLcd_HW_Clear_0:
   \   00000C   EE           MOV       A,R6
   \   00000D   C3           CLR       C
   \   00000E   9430         SUBB      A,#0x30
   \   000010   5008         JNC       ??HalLcd_HW_Clear_1
    657            {
    658              HalLcd_HW_Write(' ');
   \   000012                ; Setup parameters for call to function HalLcd_HW_Write
   \   000012   7920         MOV       R1,#0x20
   \   000014   12....       LCALL     `??HalLcd_HW_Write::?relay`; Banked call to: HalLcd_HW_Write
    659            }
   \   000017   0E           INC       R6
   \   000018   80F2         SJMP      ??HalLcd_HW_Clear_0
    660          }
   \                     ??HalLcd_HW_Clear_1:
   \   00001A   7F01         MOV       R7,#0x1
   \   00001C   02....       LJMP      ?BANKED_LEAVE_XDATA
    661          
    662          /**************************************************************************************************
    663           * @fn      HalLcd_HW_ClearAllSpecChars
    664           *
    665           * @brief   Clear all special chars
    666           *
    667           * @param   None
    668           *
    669           * @return  None
    670           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    671          void HalLcd_HW_ClearAllSpecChars(void)
   \                     HalLcd_HW_ClearAllSpecChars:
    672          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    673            uint8 n = 0;
   \   000005   7E00         MOV       R6,#0x0
    674          
    675            SET_GCRAM_CHAR(0);
   \   000007                ; Setup parameters for call to function HalLcd_HW_Control
   \   000007   79C0         MOV       R1,#-0x40
   \   000009   12....       LCALL     `??HalLcd_HW_Control::?relay`; Banked call to: HalLcd_HW_Control
    676            for (n = 0; n < (8 * 8); n++)
   \   00000C   7E00         MOV       R6,#0x0
   \                     ??HalLcd_HW_ClearAllSpecChars_0:
   \   00000E   EE           MOV       A,R6
   \   00000F   C3           CLR       C
   \   000010   9440         SUBB      A,#0x40
   \   000012   5008         JNC       ??HalLcd_HW_ClearAllSpecChars_1
    677            {
    678              HalLcd_HW_Write(0x00);
   \   000014                ; Setup parameters for call to function HalLcd_HW_Write
   \   000014   7900         MOV       R1,#0x0
   \   000016   12....       LCALL     `??HalLcd_HW_Write::?relay`; Banked call to: HalLcd_HW_Write
    679            }
   \   000019   0E           INC       R6
   \   00001A   80F2         SJMP      ??HalLcd_HW_ClearAllSpecChars_0
    680          }
   \                     ??HalLcd_HW_ClearAllSpecChars_1:
   \   00001C   7F01         MOV       R7,#0x1
   \   00001E   02....       LJMP      ?BANKED_LEAVE_XDATA
    681          
    682          /**************************************************************************************************
    683           * @fn      HalLcd_HW_WriteChar
    684           *
    685           * @brief   Write one char to the display
    686           *
    687           * @param   uint8 line - line number that the char will be displayed
    688           *          uint8 col - colum where the char will be displayed
    689           *
    690           * @return  None
    691           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    692          void HalLcd_HW_WriteChar(uint8 line, uint8 col, char text)
   \                     HalLcd_HW_WriteChar:
    693          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
   \   000007   8A..         MOV       ?V0,R2
   \   000009   EB           MOV       A,R3
   \   00000A   FE           MOV       R6,A
    694            if (col < HAL_LCD_MAX_CHARS)
   \   00000B   E5..         MOV       A,?V0
   \   00000D   C3           CLR       C
   \   00000E   9410         SUBB      A,#0x10
   \   000010   5014         JNC       ??HalLcd_HW_WriteChar_0
    695            {
    696              SET_DDRAM_ADDR((line - 1) * HAL_LCD_MAX_CHARS + col);
   \   000012                ; Setup parameters for call to function HalLcd_HW_Control
   \   000012   75F010       MOV       B,#0x10
   \   000015   74FF         MOV       A,#-0x1
   \   000017   2F           ADD       A,R7
   \   000018   A4           MUL       AB
   \   000019   25..         ADD       A,?V0
   \   00001B   4480         ORL       A,#0x80
   \   00001D   F9           MOV       R1,A
   \   00001E   12....       LCALL     `??HalLcd_HW_Control::?relay`; Banked call to: HalLcd_HW_Control
    697              HalLcd_HW_Write(text);
   \   000021                ; Setup parameters for call to function HalLcd_HW_Write
   \   000021   EE           MOV       A,R6
   \   000022   F9           MOV       R1,A
   \   000023   12....       LCALL     `??HalLcd_HW_Write::?relay`; Banked call to: HalLcd_HW_Write
    698            }
    699            else
    700            {
    701              return;
    702            }
    703          }
   \                     ??HalLcd_HW_WriteChar_0:
   \   000026   7F01         MOV       R7,#0x1
   \   000028   02....       LJMP      ?BANKED_LEAVE_XDATA
    704          
    705          /**************************************************************************************************
    706           * @fn          halLcdWriteLine
    707           *
    708           * @brief       Write one line on display
    709           *
    710           * @param       uint8 line - display line
    711           *              char *pText - text buffer to write
    712           *
    713           * @return      none
    714           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    715          void HalLcd_HW_WriteLine(uint8 line, const char *pText)
   \                     HalLcd_HW_WriteLine:
    716          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V1,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    717            uint8 count;
    718            uint8 totalLength = (uint8)osal_strlen( (char *)pText );
   \   00000B                ; Setup parameters for call to function osal_strlen
   \   00000B   EE           MOV       A,R6
   \   00000C   FA           MOV       R2,A
   \   00000D   EF           MOV       A,R7
   \   00000E   FB           MOV       R3,A
   \   00000F   12....       LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   000012   EA           MOV       A,R2
   \   000013   F5..         MOV       ?V2,A
    719          
    720            /* Write the content first */
    721            for (count=0; count<totalLength; count++)
   \   000015   75..00       MOV       ?V0,#0x0
   \                     ??HalLcd_HW_WriteLine_0:
   \   000018   E5..         MOV       A,?V0
   \   00001A   C3           CLR       C
   \   00001B   95..         SUBB      A,?V2
   \   00001D   501A         JNC       ??HalLcd_HW_WriteLine_1
    722            {
    723              HalLcd_HW_WriteChar(line, count, (*(pText++)));
   \   00001F                ; Setup parameters for call to function HalLcd_HW_WriteChar
   \   00001F   8E82         MOV       DPL,R6
   \   000021   8F83         MOV       DPH,R7
   \   000023   E0           MOVX      A,@DPTR
   \   000024   FB           MOV       R3,A
   \   000025   AA..         MOV       R2,?V0
   \   000027   A9..         MOV       R1,?V1
   \   000029   12....       LCALL     `??HalLcd_HW_WriteChar::?relay`; Banked call to: HalLcd_HW_WriteChar
   \   00002C   8E82         MOV       DPL,R6
   \   00002E   8F83         MOV       DPH,R7
   \   000030   A3           INC       DPTR
   \   000031   AE82         MOV       R6,DPL
   \   000033   AF83         MOV       R7,DPH
    724            }
   \   000035   05..         INC       ?V0
   \   000037   80DF         SJMP      ??HalLcd_HW_WriteLine_0
    725          
    726            /* Write blank spaces to rest of the line */
    727            for(count=totalLength; count<HAL_LCD_MAX_CHARS;count++)
   \                     ??HalLcd_HW_WriteLine_1:
   \   000039   85....       MOV       ?V0,?V2
   \                     ??HalLcd_HW_WriteLine_2:
   \   00003C   E5..         MOV       A,?V0
   \   00003E   C3           CLR       C
   \   00003F   9410         SUBB      A,#0x10
   \   000041   500D         JNC       ??HalLcd_HW_WriteLine_3
    728            {
    729              HalLcd_HW_WriteChar(line, count, ' ');
   \   000043                ; Setup parameters for call to function HalLcd_HW_WriteChar
   \   000043   7B20         MOV       R3,#0x20
   \   000045   AA..         MOV       R2,?V0
   \   000047   A9..         MOV       R1,?V1
   \   000049   12....       LCALL     `??HalLcd_HW_WriteChar::?relay`; Banked call to: HalLcd_HW_WriteChar
    730            }
   \   00004C   05..         INC       ?V0
   \   00004E   80EC         SJMP      ??HalLcd_HW_WriteLine_2
    731          }
   \                     ??HalLcd_HW_WriteLine_3:
   \   000050   7F03         MOV       R7,#0x3
   \   000052   02....       LJMP      ?BANKED_LEAVE_XDATA
    732          
    733          /**************************************************************************************************
    734           * @fn      HalLcd_HW_WaitUs
    735           *
    736           * @brief   wait for x us. @ 32MHz MCU clock it takes 32 "nop"s for 1 us delay.
    737           *
    738           * @param   x us. range[0-65536]
    739           *
    740           * @return  None
    741           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    742          void HalLcd_HW_WaitUs(uint16 microSecs)
   \                     HalLcd_HW_WaitUs:
    743          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    744            while(microSecs--)
   \                     ??HalLcd_HW_WaitUs_0:
   \   000000   EA           MOV       A,R2
   \   000001   F8           MOV       R0,A
   \   000002   EB           MOV       A,R3
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   24FF         ADD       A,#-0x1
   \   000007   FA           MOV       R2,A
   \   000008   E9           MOV       A,R1
   \   000009   34FF         ADDC      A,#-0x1
   \   00000B   FB           MOV       R3,A
   \   00000C   E8           MOV       A,R0
   \   00000D   49           ORL       A,R1
   \   00000E   6022         JZ        ??HalLcd_HW_WaitUs_1
    745            {
    746              /* 32 NOPs == 1 usecs */
    747              asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
   \   000010   00           nop
   \   000011   00           nop
   \   000012   00           nop
   \   000013   00           nop
   \   000014   00           nop
    748              asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
   \   000015   00           nop
   \   000016   00           nop
   \   000017   00           nop
   \   000018   00           nop
   \   000019   00           nop
    749              asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
   \   00001A   00           nop
   \   00001B   00           nop
   \   00001C   00           nop
   \   00001D   00           nop
   \   00001E   00           nop
    750              asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
   \   00001F   00           nop
   \   000020   00           nop
   \   000021   00           nop
   \   000022   00           nop
   \   000023   00           nop
    751              asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
   \   000024   00           nop
   \   000025   00           nop
   \   000026   00           nop
   \   000027   00           nop
   \   000028   00           nop
    752              asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
   \   000029   00           nop
   \   00002A   00           nop
   \   00002B   00           nop
   \   00002C   00           nop
   \   00002D   00           nop
    753              asm("nop"); asm("nop");
   \   00002E   00           nop
   \   00002F   00           nop
   \   000030   80CE         SJMP      ??HalLcd_HW_WaitUs_0
    754            }
    755          }
   \                     ??HalLcd_HW_WaitUs_1:
   \   000032   02....       LJMP      ?BRET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TexasInstruments">`:
   \   000000   54657861     DB "TexasInstruments"
   \            73496E73
   \            7472756D
   \            656E7473
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "[          ]  ">`:
   \   000000   5B202020     DB "[          ]  "
   \            20202020
   \            2020205D
   \            202000  
    756          #endif
    757          
    758          
    759          /**************************************************************************************************
    760          **************************************************************************************************/
    761          
    762          
    763          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     40   HalLcdDisplayPercentBar
        0     37   -> HalLcdWriteString
        0     39   -> _ltoa
        0     40   -> osal_memcpy
      2      0   HalLcdInit
        2      0   -> HalLcd_HW_Init
      0     10   HalLcdWriteScreen
        0     10   -> HalLcdWriteString
      0     70   HalLcdWriteString
        0     18   -> HalLcdWriteString
        0     18   -> HalLcd_HW_WriteLine
        0     18   -> osal_mem_alloc
        0     18   -> osal_mem_free
        0     21   -> osal_memcpy
        0     18   -> osal_strlen
      0     51   HalLcdWriteStringValue
        0     47   -> HalLcdWriteString
        0     49   -> _ltoa
        0     50   -> osal_memcpy
        0     47   -> osal_strlen
      0     56   HalLcdWriteStringValueValue
        0     49   -> HalLcdWriteString
        0     51   -> _ltoa
        0     52   -> osal_memcpy
        0     49   -> osal_strlen
      0     42   HalLcdWriteValue
        0     39   -> HalLcdWriteString
        0     41   -> _ltoa
      0      9   HalLcd_HW_Clear
        0      9   -> HalLcd_HW_Control
        0      9   -> HalLcd_HW_Write
      0      9   HalLcd_HW_ClearAllSpecChars
        0      9   -> HalLcd_HW_Control
        0      9   -> HalLcd_HW_Write
      0      9   HalLcd_HW_Control
      2      0   HalLcd_HW_Init
        2      0   -> HalLcd_HW_Clear
        2      0   -> HalLcd_HW_ClearAllSpecChars
        2      0   -> HalLcd_HW_Control
        2      0   -> HalLcd_HW_SetContrast
        2      0   -> HalLcd_HW_WaitUs
        2      0   -> halLcd_ConfigIO
        2      0   -> halLcd_ConfigSPI
      0      9   HalLcd_HW_SetContrast
        0      9   -> HalLcd_HW_Control
        0      9   -> HalLcd_HW_Write
      0      0   HalLcd_HW_WaitUs
      0      9   HalLcd_HW_Write
      0     20   HalLcd_HW_WriteChar
        0      9   -> HalLcd_HW_Control
        0      9   -> HalLcd_HW_Write
      0     29   HalLcd_HW_WriteLine
        0     11   -> HalLcd_HW_WriteChar
        0     11   -> osal_strlen
      0      0   halLcd_ConfigIO
      0      0   halLcd_ConfigSPI


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      17  ?<Constant "TexasInstruments">
      15  ?<Constant "[          ]  ">
     213  HalLcdDisplayPercentBar
      24  HalLcdInit
      36  HalLcdWriteScreen
     326  HalLcdWriteString
     179  HalLcdWriteStringValue
     306  HalLcdWriteStringValueValue
      77  HalLcdWriteValue
      31  HalLcd_HW_Clear
      33  HalLcd_HW_ClearAllSpecChars
      26  HalLcd_HW_Control
      78  HalLcd_HW_Init
      22  HalLcd_HW_SetContrast
      53  HalLcd_HW_WaitUs
      26  HalLcd_HW_Write
      43  HalLcd_HW_WriteChar
      85  HalLcd_HW_WriteLine
       2  Lcd_Line1
       1  P0DIR
       1  P0SEL
       1  P1DIR
       1  P1SEL
       1  PERCFG
       1  U1BAUD
       1  U1DBUF
       1  U1GCR
       1  U1UCR
       1  _A_P0
       1  _A_P1
       1  _A_U1CSR
      27  halLcd_ConfigIO
      32  halLcd_ConfigSPI
     108  -- Other

 
 1 617 bytes in segment BANKED_CODE
   108 bytes in segment BANK_RELAYS
    12 bytes in segment SFR_AN
    32 bytes in segment XDATA_ROM_C
     2 bytes in segment XDATA_Z
 
   108 bytes of CODE     memory
    32 bytes of CONST    memory
     0 bytes of DATA     memory (+ 12 bytes shared)
 1 617 bytes of HUGECODE memory
     2 bytes of XDATA    memory

Errors: none
Warnings: none
