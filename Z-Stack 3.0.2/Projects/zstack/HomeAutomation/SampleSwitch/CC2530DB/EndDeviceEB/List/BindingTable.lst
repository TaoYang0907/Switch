###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               31/Jul/2020  11:47:15
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack 3.0.2\Components\stack\nwk\BindingTable.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EWA34C.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\stack\nwk\BindingTable.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D POWER_SAVING -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_GROUPS -D BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\BindingTable.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\BindingTable.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\stack\nwk\BindingTable.c
      1          /**************************************************************************************************
      2            Filename:       BindingTable.c
      3            Revised:        $Date: 2014-10-08 08:37:03 -0700 (Wed, 08 Oct 2014) $
      4            Revision:       $Revision: 40512 $
      5          
      6            Description:    Device binding table functions.
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "nwk_globals.h"
     47          #include "AddrMgr.h"
     48          #include "BindingTable.h"
     49          #include "nwk_util.h"
     50          #include "bdb.h"
     51          #include "bdb_interface.h"
     52          #if BDB_REPORTING  
     53          #include "bdb_Reporting.h"
     54          #endif
     55          
     56          /*********************************************************************
     57           * MACROS
     58           */
     59          
     60          /*********************************************************************
     61           * CONSTANTS
     62           */
     63          #define NV_BIND_EMPTY   0xFF
     64          #define NV_BIND_REC_SIZE (gBIND_REC_SIZE)
     65          #define NV_BIND_ITEM_SIZE  (gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES)
     66          
     67          /*********************************************************************
     68           * TYPEDEFS
     69           */
     70          typedef struct
     71          {
     72            uint8        srcEP;
     73            uint16       dstIndex;
     74            uint8        dstEP;
     75            uint8        dstAddrMode;
     76            uint8        clusterIDs;
     77            uint16*      clusterIDList;
     78          } bindFields_t;
     79          
     80          /*********************************************************************
     81           * GLOBAL VARIABLES
     82           */
     83          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
     84          extern bdbGCB_BindNotification_t        pfnBindNotificationCB;
     85          #endif
     86          
     87          /*********************************************************************
     88           * LOCAL FUNCTIONS
     89           */
     90          void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryOld,
     91                              AddrMgrEntry_t *entryNew );
     92          BindingEntry_t *bindFindEmpty( void );
     93          uint16 bindingAddrMgsHelperFind( zAddrType_t *addr );
     94          uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr );
     95          void bindAddrMgrLocalLoad( void );
     96          
     97          #if !defined ( BINDINGTABLE_NV_SINGLES )
     98            #if !defined ( DONT_UPGRADE_BIND )
     99              static uint8 BindCopyBackupToNewNV( uint16 dupLen, uint16 newLen );
    100              static uint8 BindUpgradeTableInNV( void );
    101            #endif
    102          #endif // !BINDINGTABLE_NV_SINGLES
    103          
    104          
    105          /*********************************************************************
    106           * LOCAL VARIABLES
    107           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    108          static uint8 bindAddrMgrLocalLoaded = FALSE;
   \                     bindAddrMgrLocalLoaded:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    109          
    110          /*********************************************************************
    111           * Function Pointers
    112           */
    113          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    114          BindingEntry_t *(*pbindAddEntry)( byte srcEpInt,
   \                     pbindAddEntry:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    115                                            zAddrType_t *dstAddr, byte dstEpInt,
    116                                            byte numClusterIds, uint16 *clusterIds ) = (void*)NULL;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          uint16 (*pbindNumOfEntries)( void ) = (void*)NULL;
   \                     pbindNumOfEntries:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          void (*pbindRemoveDev)( zAddrType_t *Addr ) = (void*)NULL;
   \                     pbindRemoveDev:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    119          byte (*pBindInitNV)( void ) = (void*)NULL;
   \                     pBindInitNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    120          void (*pBindSetDefaultNV)( void ) = (void*)NULL;
   \                     pBindSetDefaultNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          uint16 (*pBindRestoreFromNV)( void ) = (void*)NULL;
   \                     pBindRestoreFromNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    122          void (*pBindWriteNV)( void ) = (void*)NULL;
   \                     pBindWriteNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    123          
    124          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
    125          /*********************************************************************
    126           * @fn      BindAddrMgrCB()
    127           *
    128           * @brief   Address Manager Callback function
    129           *
    130           * @param   update -
    131           * @param   entry -
    132           *
    133           * @return  pointer to
    134           */
    135          void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryNew,
    136                              AddrMgrEntry_t *entryOld )
    137          {
    138            // Check for either deleted items or changed Extended (Duplicate) addresses
    139          }
    140          #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
    141          
    142          /*********************************************************************
    143           * @fn      InitBindingTable()
    144           *
    145           * @brief
    146           *
    147           *   This function is used to initialise the binding table
    148           *
    149           * @param   none
    150           *
    151           * @return  none
    152           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    153          void InitBindingTable( void )
   \                     InitBindingTable:
    154          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    155            osal_memset( BindingTable, 0xFF, gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES );
   \   000005                ; Setup parameters for call to function osal_memset
   \   000005   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   000008   E4           CLR       A
   \   000009   93           MOVC      A,@A+DPTR
   \   00000A   FC           MOV       R4,A
   \   00000B   7401         MOV       A,#0x1
   \   00000D   93           MOVC      A,@A+DPTR
   \   00000E   FD           MOV       R5,A
   \   00000F   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000012   E4           CLR       A
   \   000013   93           MOVC      A,@A+DPTR
   \   000014   F5..         MOV       ?V0,A
   \   000016   75..00       MOV       ?V1,#0x0
   \   000019   EC           MOV       A,R4
   \   00001A   85..F0       MOV       B,?V0
   \   00001D   A4           MUL       AB
   \   00001E   CC           XCH       A,R4
   \   00001F   A8F0         MOV       R0,B
   \   000021   85..F0       MOV       B,?V1
   \   000024   A4           MUL       AB
   \   000025   28           ADD       A,R0
   \   000026   F8           MOV       R0,A
   \   000027   85..F0       MOV       B,?V0
   \   00002A   ED           MOV       A,R5
   \   00002B   A4           MUL       AB
   \   00002C   28           ADD       A,R0
   \   00002D   FD           MOV       R5,A
   \   00002E   79FF         MOV       R1,#-0x1
   \   000030   7A..         MOV       R2,#BindingTable & 0xff
   \   000032   7B..         MOV       R3,#(BindingTable >> 8) & 0xff
   \   000034   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    156          
    157            pbindAddEntry = bindAddEntry;
   \   000037   90....       MOV       DPTR,#pbindAddEntry
   \   00003A   74..         MOV       A,#`??bindAddEntry::?relay` & 0xff
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   74..         MOV       A,#(`??bindAddEntry::?relay` >> 8) & 0xff
   \   000040   F0           MOVX      @DPTR,A
    158            pbindNumOfEntries = bindNumOfEntries;
   \   000041   90....       MOV       DPTR,#pbindNumOfEntries
   \   000044   74..         MOV       A,#`??bindNumOfEntries::?relay` & 0xff
   \   000046   F0           MOVX      @DPTR,A
   \   000047   A3           INC       DPTR
   \   000048   74..         MOV       A,#(`??bindNumOfEntries::?relay` >> 8) & 0xff
   \   00004A   F0           MOVX      @DPTR,A
    159            pbindRemoveDev = bindRemoveDev;
   \   00004B   90....       MOV       DPTR,#pbindRemoveDev
   \   00004E   74..         MOV       A,#`??bindRemoveDev::?relay` & 0xff
   \   000050   F0           MOVX      @DPTR,A
   \   000051   A3           INC       DPTR
   \   000052   74..         MOV       A,#(`??bindRemoveDev::?relay` >> 8) & 0xff
   \   000054   F0           MOVX      @DPTR,A
    160            pBindInitNV = BindInitNV;
   \   000055   90....       MOV       DPTR,#pBindInitNV
   \   000058   74..         MOV       A,#`??BindInitNV::?relay` & 0xff
   \   00005A   F0           MOVX      @DPTR,A
   \   00005B   A3           INC       DPTR
   \   00005C   74..         MOV       A,#(`??BindInitNV::?relay` >> 8) & 0xff
   \   00005E   F0           MOVX      @DPTR,A
    161            pBindSetDefaultNV = BindSetDefaultNV;
   \   00005F   90....       MOV       DPTR,#pBindSetDefaultNV
   \   000062   74..         MOV       A,#`??BindSetDefaultNV::?relay` & 0xff
   \   000064   F0           MOVX      @DPTR,A
   \   000065   A3           INC       DPTR
   \   000066   74..         MOV       A,#(`??BindSetDefaultNV::?relay` >> 8) & 0xff
   \   000068   F0           MOVX      @DPTR,A
    162            pBindRestoreFromNV = BindRestoreFromNV;
   \   000069   90....       MOV       DPTR,#pBindRestoreFromNV
   \   00006C   74..         MOV       A,#`??BindRestoreFromNV::?relay` & 0xff
   \   00006E   F0           MOVX      @DPTR,A
   \   00006F   A3           INC       DPTR
   \   000070   74..         MOV       A,#(`??BindRestoreFromNV::?relay` >> 8) & 0xff
   \   000072   F0           MOVX      @DPTR,A
    163            pBindWriteNV = BindWriteNV;
   \   000073   90....       MOV       DPTR,#pBindWriteNV
   \   000076   74..         MOV       A,#`??BindWriteNV::?relay` & 0xff
   \   000078   F0           MOVX      @DPTR,A
   \   000079   A3           INC       DPTR
   \   00007A   74..         MOV       A,#(`??BindWriteNV::?relay` >> 8) & 0xff
   \   00007C   F0           MOVX      @DPTR,A
    164          
    165            bindAddrMgrLocalLoaded = FALSE;
   \   00007D   90....       MOV       DPTR,#bindAddrMgrLocalLoaded
   \   000080   7400         MOV       A,#0x0
   \   000082   F0           MOVX      @DPTR,A
    166          
    167          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
    168            // Register with the address manager
    169            AddrMgrRegister( ADDRMGR_REG_BINDING, BindAddrMgrCB );
    170          #endif
    171          }
   \   000083   7F02         MOV       R7,#0x2
   \   000085   02....       LJMP      ?BANKED_LEAVE_XDATA
    172          
    173          /*********************************************************************
    174           * @fn      bindFindEmpty()
    175           *
    176           * @brief   This function returns a pointer to an empty binding slot
    177           *
    178           * @param   none
    179           *
    180           * @return  pointer to binding table entry, NULL if not added
    181           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    182          BindingEntry_t *bindFindEmpty( void )
   \                     bindFindEmpty:
    183          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    184            bindTableIndex_t x;
    185          
    186            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000004   7C00         MOV       R4,#0x0
   \                     ??bindFindEmpty_0:
   \   000006   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000009   E4           CLR       A
   \   00000A   93           MOVC      A,@A+DPTR
   \   00000B   F8           MOV       R0,A
   \   00000C   EC           MOV       A,R4
   \   00000D   C3           CLR       C
   \   00000E   98           SUBB      A,R0
   \   00000F   504E         JNC       ??bindFindEmpty_1
    187            {
    188              // It's empty if the index is "Not Found"
    189              if ( BindingTable[x].srcEP == NV_BIND_EMPTY )
   \   000011   EC           MOV       A,R4
   \   000012   F8           MOV       R0,A
   \   000013   7900         MOV       R1,#0x0
   \   000015   E8           MOV       A,R0
   \   000016   75F00E       MOV       B,#0xe
   \   000019   A4           MUL       AB
   \   00001A   C8           XCH       A,R0
   \   00001B   AAF0         MOV       R2,B
   \   00001D   75F000       MOV       B,#0x0
   \   000020   A4           MUL       AB
   \   000021   2A           ADD       A,R2
   \   000022   FA           MOV       R2,A
   \   000023   75F00E       MOV       B,#0xe
   \   000026   E9           MOV       A,R1
   \   000027   A4           MUL       AB
   \   000028   2A           ADD       A,R2
   \   000029   F9           MOV       R1,A
   \   00002A   74..         MOV       A,#BindingTable & 0xff
   \   00002C   28           ADD       A,R0
   \   00002D   F582         MOV       DPL,A
   \   00002F   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   000031   39           ADDC      A,R1
   \   000032   F583         MOV       DPH,A
   \   000034   E0           MOVX      A,@DPTR
   \   000035   64FF         XRL       A,#0xff
   \   000037   7023         JNZ       ??bindFindEmpty_2
    190              {
    191                return ( &BindingTable[x] );
   \   000039   EC           MOV       A,R4
   \   00003A   F8           MOV       R0,A
   \   00003B   7900         MOV       R1,#0x0
   \   00003D   E8           MOV       A,R0
   \   00003E   75F00E       MOV       B,#0xe
   \   000041   A4           MUL       AB
   \   000042   C8           XCH       A,R0
   \   000043   AAF0         MOV       R2,B
   \   000045   75F000       MOV       B,#0x0
   \   000048   A4           MUL       AB
   \   000049   2A           ADD       A,R2
   \   00004A   FA           MOV       R2,A
   \   00004B   75F00E       MOV       B,#0xe
   \   00004E   E9           MOV       A,R1
   \   00004F   A4           MUL       AB
   \   000050   2A           ADD       A,R2
   \   000051   F9           MOV       R1,A
   \   000052   74..         MOV       A,#BindingTable & 0xff
   \   000054   28           ADD       A,R0
   \   000055   FA           MOV       R2,A
   \   000056   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   000058   39           ADDC      A,R1
   \   000059   FB           MOV       R3,A
   \   00005A   8007         SJMP      ??bindFindEmpty_3
    192              }
    193            }
   \                     ??bindFindEmpty_2:
   \   00005C   0C           INC       R4
   \   00005D   80A7         SJMP      ??bindFindEmpty_0
    194          
    195            return ( (BindingEntry_t *)NULL );
   \                     ??bindFindEmpty_1:
   \   00005F   7A00         MOV       R2,#0x0
   \   000061   7B00         MOV       R3,#0x0
   \                     ??bindFindEmpty_3:
   \   000063   D083         POP       DPH
   \   000065   D082         POP       DPL
   \   000067   02....       LJMP      ?BRET
    196          }
    197          
    198          /*********************************************************************
    199           * @fn      bindNumOfEntries()
    200           *
    201           * @brief   This function returns the number of binding table entries.
    202           *          The return for this is the number of clusters in the
    203           *          table NOT the number of entries.
    204           *
    205           * @param   none
    206           *
    207           * @return  number of entries
    208           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    209          uint16 bindNumOfEntries( void )
   \                     bindNumOfEntries:
    210          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    211            bindTableIndex_t x;
    212            uint16 found;
    213          
    214            for ( found = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000004   7A00         MOV       R2,#0x0
   \   000006   7B00         MOV       R3,#0x0
   \   000008   7C00         MOV       R4,#0x0
   \                     ??bindNumOfEntries_0:
   \   00000A   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00000D   E4           CLR       A
   \   00000E   93           MOVC      A,@A+DPTR
   \   00000F   F8           MOV       R0,A
   \   000010   EC           MOV       A,R4
   \   000011   C3           CLR       C
   \   000012   98           SUBB      A,R0
   \   000013   5058         JNC       ??bindNumOfEntries_1
    215            {
    216              // It's empty if the index is "Not Found"
    217              if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
   \   000015   EC           MOV       A,R4
   \   000016   F8           MOV       R0,A
   \   000017   7900         MOV       R1,#0x0
   \   000019   E8           MOV       A,R0
   \   00001A   75F00E       MOV       B,#0xe
   \   00001D   A4           MUL       AB
   \   00001E   C8           XCH       A,R0
   \   00001F   ADF0         MOV       R5,B
   \   000021   75F000       MOV       B,#0x0
   \   000024   A4           MUL       AB
   \   000025   2D           ADD       A,R5
   \   000026   FD           MOV       R5,A
   \   000027   75F00E       MOV       B,#0xe
   \   00002A   E9           MOV       A,R1
   \   00002B   A4           MUL       AB
   \   00002C   2D           ADD       A,R5
   \   00002D   F9           MOV       R1,A
   \   00002E   74..         MOV       A,#BindingTable & 0xff
   \   000030   28           ADD       A,R0
   \   000031   F582         MOV       DPL,A
   \   000033   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   000035   39           ADDC      A,R1
   \   000036   F583         MOV       DPH,A
   \   000038   E0           MOVX      A,@DPTR
   \   000039   64FF         XRL       A,#0xff
   \   00003B   602D         JZ        ??bindNumOfEntries_2
    218              {
    219                found += BindingTable[x].numClusterIds;
   \   00003D   EC           MOV       A,R4
   \   00003E   F8           MOV       R0,A
   \   00003F   7900         MOV       R1,#0x0
   \   000041   E8           MOV       A,R0
   \   000042   75F00E       MOV       B,#0xe
   \   000045   A4           MUL       AB
   \   000046   C8           XCH       A,R0
   \   000047   ADF0         MOV       R5,B
   \   000049   75F000       MOV       B,#0x0
   \   00004C   A4           MUL       AB
   \   00004D   2D           ADD       A,R5
   \   00004E   FD           MOV       R5,A
   \   00004F   75F00E       MOV       B,#0xe
   \   000052   E9           MOV       A,R1
   \   000053   A4           MUL       AB
   \   000054   2D           ADD       A,R5
   \   000055   F9           MOV       R1,A
   \   000056   74..         MOV       A,#(BindingTable + 5) & 0xff
   \   000058   28           ADD       A,R0
   \   000059   F582         MOV       DPL,A
   \   00005B   74..         MOV       A,#((BindingTable + 5) >> 8) & 0xff
   \   00005D   39           ADDC      A,R1
   \   00005E   F583         MOV       DPH,A
   \   000060   E0           MOVX      A,@DPTR
   \   000061   F8           MOV       R0,A
   \   000062   7900         MOV       R1,#0x0
   \   000064   EA           MOV       A,R2
   \   000065   28           ADD       A,R0
   \   000066   FA           MOV       R2,A
   \   000067   EB           MOV       A,R3
   \   000068   39           ADDC      A,R1
   \   000069   FB           MOV       R3,A
    220              }
    221            }
   \                     ??bindNumOfEntries_2:
   \   00006A   0C           INC       R4
   \   00006B   809D         SJMP      ??bindNumOfEntries_0
    222          
    223            return ( found );
   \                     ??bindNumOfEntries_1:
   \   00006D   D083         POP       DPH
   \   00006F   D082         POP       DPL
   \   000071   02....       LJMP      ?BRET
    224          }
    225          
    226          /*********************************************************************
    227           * @fn      bindCapacity()
    228           *
    229           * @brief   This function returns the number of binding entries
    230           *          possible and used.
    231           *
    232           * @param   maxEntries - pointer to a place to put the max entries
    233           * @param   usedEntries - pointer to a place to put the number
    234           *               of used entries
    235           *
    236           * @return  none
    237           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    238          void bindCapacity( uint16 *maxEntries, uint16 *usedEntries  )
   \                     bindCapacity:
    239          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    240            bindTableIndex_t x;
    241            bindTableIndex_t used;
    242          
    243            for ( used = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000005   7E00         MOV       R6,#0x0
   \   000007   7F00         MOV       R7,#0x0
   \                     ??bindCapacity_0:
   \   000009   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00000C   E4           CLR       A
   \   00000D   93           MOVC      A,@A+DPTR
   \   00000E   F8           MOV       R0,A
   \   00000F   EF           MOV       A,R7
   \   000010   C3           CLR       C
   \   000011   98           SUBB      A,R0
   \   000012   5030         JNC       ??bindCapacity_1
    244            {
    245              // It's empty if the index is "Not Found"
    246              if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
   \   000014   EF           MOV       A,R7
   \   000015   F8           MOV       R0,A
   \   000016   7900         MOV       R1,#0x0
   \   000018   E8           MOV       A,R0
   \   000019   75F00E       MOV       B,#0xe
   \   00001C   A4           MUL       AB
   \   00001D   C8           XCH       A,R0
   \   00001E   85F0..       MOV       ?V0,B
   \   000021   75F000       MOV       B,#0x0
   \   000024   A4           MUL       AB
   \   000025   25..         ADD       A,?V0
   \   000027   F5..         MOV       ?V0,A
   \   000029   75F00E       MOV       B,#0xe
   \   00002C   E9           MOV       A,R1
   \   00002D   A4           MUL       AB
   \   00002E   25..         ADD       A,?V0
   \   000030   F9           MOV       R1,A
   \   000031   74..         MOV       A,#BindingTable & 0xff
   \   000033   28           ADD       A,R0
   \   000034   F582         MOV       DPL,A
   \   000036   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   000038   39           ADDC      A,R1
   \   000039   F583         MOV       DPH,A
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   64FF         XRL       A,#0xff
   \   00003E   6001         JZ        ??bindCapacity_2
    247              {
    248                used++;
   \   000040   0E           INC       R6
    249              }
    250            }
   \                     ??bindCapacity_2:
   \   000041   0F           INC       R7
   \   000042   80C5         SJMP      ??bindCapacity_0
    251          
    252            *maxEntries = gNWK_MAX_BINDING_ENTRIES;
   \                     ??bindCapacity_1:
   \   000044   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000047   E4           CLR       A
   \   000048   93           MOVC      A,@A+DPTR
   \   000049   F8           MOV       R0,A
   \   00004A   7900         MOV       R1,#0x0
   \   00004C   8A82         MOV       DPL,R2
   \   00004E   8B83         MOV       DPH,R3
   \   000050   E8           MOV       A,R0
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   E9           MOV       A,R1
   \   000054   F0           MOVX      @DPTR,A
    253            *usedEntries = used;
   \   000055   EE           MOV       A,R6
   \   000056   F8           MOV       R0,A
   \   000057   7900         MOV       R1,#0x0
   \   000059   8C82         MOV       DPL,R4
   \   00005B   8D83         MOV       DPH,R5
   \   00005D   E8           MOV       A,R0
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   A3           INC       DPTR
   \   000060   E9           MOV       A,R1
   \   000061   F0           MOVX      @DPTR,A
    254          }
   \   000062   7F01         MOV       R7,#0x1
   \   000064   02....       LJMP      ?BANKED_LEAVE_XDATA
    255          
    256          /*********************************************************************
    257           * @fn      bindAddEntry()
    258           *
    259           * @brief   This function is used to Add an entry to the binding table
    260           *
    261           * @param       srcEpInt - source endpoint
    262           * @param       dstAddr - destination Address
    263           * @param       dstEpInt - destination endpoint
    264           * @param       numClusterIds - number of cluster Ids in the list
    265           * @param       clusterIds - pointer to the Object ID list
    266           *
    267           * @return  pointer to binding table entry, NULL if not added
    268           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    269          BindingEntry_t *bindAddEntry( byte srcEpInt,
   \                     bindAddEntry:
    270                                        zAddrType_t *dstAddr, byte dstEpInt,
    271                                        byte numClusterIds, uint16 *clusterIds )
    272          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V7,R1
   \   00000C   8A..         MOV       ?V8,R2
   \   00000E   8B..         MOV       ?V9,R3
   \   000010   8C..         MOV       ?V3,R4
   \   000012   8D..         MOV       ?V1,R5
   \   000014   7428         MOV       A,#0x28
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V10,A
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F5..         MOV       ?V11,A
    273            uint8            index;
    274            bindTableIndex_t bindIdx;
    275            BindingEntry_t*  entry;
    276            bindFields_t     fields;
    277            bdbBindNotificationData_t bindData;
    278          #ifdef BDB_REPORTING  
    279            uint8 bindAdded = FALSE;
    280          #endif
    281          
    282            //Zigbee Spec 2.2.4.3.1.1
    283            //Cannot create an endpoint for invalid endpoint index, neither for non-Group 
    284            //or Non-Extended IEEE Address modes
    285            if( (dstAddr->addrMode != AddrGroup) && (dstAddr->addrMode != Addr64Bit) ||
    286                (srcEpInt == 0) || (srcEpInt == 0xFF) )
   \   000020   85..82       MOV       DPL,?V8
   \   000023   85..83       MOV       DPH,?V9
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   6401         XRL       A,#0x1
   \   000031   6013         JZ        ??bindAddEntry_0
   \   000033   85..82       MOV       DPL,?V8
   \   000036   85..83       MOV       DPH,?V9
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   6403         XRL       A,#0x3
   \   000044   700A         JNZ       ??bindAddEntry_1
   \                     ??bindAddEntry_0:
   \   000046   E5..         MOV       A,?V7
   \   000048   6006         JZ        ??bindAddEntry_1
   \   00004A   74FF         MOV       A,#-0x1
   \   00004C   65..         XRL       A,?V7
   \   00004E   7007         JNZ       ??bindAddEntry_2
    287            {
    288              return NULL;
   \                     ??bindAddEntry_1:
   \   000050   7A00         MOV       R2,#0x0
   \   000052   7B00         MOV       R3,#0x0
   \   000054   02....       LJMP      ??bindAddEntry_3 & 0xFFFF
    289            }
    290            //Do not accept neither binds to IEEE Addr with invalid endpoints
    291            if(( dstAddr->addrMode == Addr64Bit ) && (dstEpInt == 0))
   \                     ??bindAddEntry_2:
   \   000057   85..82       MOV       DPL,?V8
   \   00005A   85..83       MOV       DPH,?V9
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   E0           MOVX      A,@DPTR
   \   000066   6403         XRL       A,#0x3
   \   000068   700B         JNZ       ??bindAddEntry_4
   \   00006A   E5..         MOV       A,?V3
   \   00006C   7007         JNZ       ??bindAddEntry_4
    292            {
    293              return NULL;
   \   00006E   7A00         MOV       R2,#0x0
   \   000070   7B00         MOV       R3,#0x0
   \   000072   02....       LJMP      ??bindAddEntry_3 & 0xFFFF
    294            }
    295            
    296              
    297            osal_memcpy( &bindData.dstAddr, dstAddr, sizeof( zAddrType_t) );
   \                     ??bindAddEntry_4:
   \   000075                ; Setup parameters for call to function osal_memcpy
   \   000075   85....       MOV       ?V4,?V8
   \   000078   85....       MOV       ?V5,?V9
   \   00007B   75..00       MOV       ?V6,#0x0
   \   00007E   78..         MOV       R0,#?V4
   \   000080   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000083   7C09         MOV       R4,#0x9
   \   000085   7D00         MOV       R5,#0x0
   \   000087   740B         MOV       A,#0xb
   \   000089   12....       LCALL     ?XSTACK_DISP101_8
   \   00008C   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00008F   7403         MOV       A,#0x3
   \   000091   12....       LCALL     ?DEALLOC_XSTACK8
    298            bindData.ep = dstEpInt;
   \   000094   E5..         MOV       A,?V3
   \   000096   C0E0         PUSH      A
   \   000098   7411         MOV       A,#0x11
   \   00009A   12....       LCALL     ?XSTACK_DISP0_8
   \   00009D   D0E0         POP       A
   \   00009F   F0           MOVX      @DPTR,A
    299              
    300            // initialize results
    301            entry = NULL;
   \   0000A0   7E00         MOV       R6,#0x0
   \   0000A2   7F00         MOV       R7,#0x0
    302          
    303            // make sure local addresses have been loaded
    304            bindAddrMgrLocalLoad();
   \   0000A4                ; Setup parameters for call to function bindAddrMgrLocalLoad
   \   0000A4   12....       LCALL     `??bindAddrMgrLocalLoad::?relay`; Banked call to: bindAddrMgrLocalLoad
    305          
    306            // setup fields
    307            fields.dstIndex = bindAddrIndexGet( dstAddr );
   \   0000A7                ; Setup parameters for call to function bindAddrIndexGet
   \   0000A7   AA..         MOV       R2,?V8
   \   0000A9   AB..         MOV       R3,?V9
   \   0000AB   12....       LCALL     `??bindAddrIndexGet::?relay`; Banked call to: bindAddrIndexGet
   \   0000AE   7401         MOV       A,#0x1
   \   0000B0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B3   EA           MOV       A,R2
   \   0000B4   F0           MOVX      @DPTR,A
   \   0000B5   A3           INC       DPTR
   \   0000B6   EB           MOV       A,R3
   \   0000B7   F0           MOVX      @DPTR,A
    308            fields.srcEP    = srcEpInt;
   \   0000B8   E5..         MOV       A,?V7
   \   0000BA   C0E0         PUSH      A
   \   0000BC   85..82       MOV       DPL,?XSP + 0
   \   0000BF   85..83       MOV       DPH,?XSP + 1
   \   0000C2   D0E0         POP       A
   \   0000C4   F0           MOVX      @DPTR,A
    309          
    310            if ( dstAddr->addrMode == AddrGroup )
   \   0000C5   85..82       MOV       DPL,?V8
   \   0000C8   85..83       MOV       DPH,?V9
   \   0000CB   A3           INC       DPTR
   \   0000CC   A3           INC       DPTR
   \   0000CD   A3           INC       DPTR
   \   0000CE   A3           INC       DPTR
   \   0000CF   A3           INC       DPTR
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   A3           INC       DPTR
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   6401         XRL       A,#0x1
   \   0000D6   7012         JNZ       ??bindAddEntry_5
    311            {
    312              fields.dstAddrMode = DSTGROUPMODE_GROUP;
   \   0000D8   7404         MOV       A,#0x4
   \   0000DA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DD   7401         MOV       A,#0x1
   \   0000DF   F0           MOVX      @DPTR,A
    313              fields.dstEP       = 0;
   \   0000E0   7403         MOV       A,#0x3
   \   0000E2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E5   7400         MOV       A,#0x0
   \   0000E7   F0           MOVX      @DPTR,A
   \   0000E8   8014         SJMP      ??bindAddEntry_6
    314            }
    315            else
    316            {
    317              fields.dstAddrMode = DSTGROUPMODE_ADDR;
   \                     ??bindAddEntry_5:
   \   0000EA   7404         MOV       A,#0x4
   \   0000EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EF   7400         MOV       A,#0x0
   \   0000F1   F0           MOVX      @DPTR,A
    318              fields.dstEP       = dstEpInt;
   \   0000F2   E5..         MOV       A,?V3
   \   0000F4   C0E0         PUSH      A
   \   0000F6   7403         MOV       A,#0x3
   \   0000F8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FB   D0E0         POP       A
   \   0000FD   F0           MOVX      @DPTR,A
    319            }
    320          
    321            if ( fields.dstIndex != INVALID_NODE_ADDR  )
   \                     ??bindAddEntry_6:
   \   0000FE   7401         MOV       A,#0x1
   \   000100   12....       LCALL     ?XSTACK_DISP0_8
   \   000103   E0           MOVX      A,@DPTR
   \   000104   64FE         XRL       A,#0xfe
   \   000106   7004         JNZ       ??bindAddEntry_7
   \   000108   A3           INC       DPTR
   \   000109   E0           MOVX      A,@DPTR
   \   00010A   64FF         XRL       A,#0xff
   \                     ??bindAddEntry_7:
   \   00010C   7003         JNZ       $+5
   \   00010E   02....       LJMP      ??bindAddEntry_8 & 0xFFFF
    322            {
    323              for ( bindIdx = 0; bindIdx < gNWK_MAX_BINDING_ENTRIES; bindIdx++ )
   \   000111   75..00       MOV       ?V2,#0x0
   \                     ??bindAddEntry_9:
   \   000114   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000117   E4           CLR       A
   \   000118   93           MOVC      A,@A+DPTR
   \   000119   F8           MOV       R0,A
   \   00011A   E5..         MOV       A,?V2
   \   00011C   C3           CLR       C
   \   00011D   98           SUBB      A,R0
   \   00011E   4003         JC        $+5
   \   000120   02....       LJMP      ??bindAddEntry_10 & 0xFFFF
    324              {
    325                if ( ( fields.srcEP       == BindingTable[bindIdx].srcEP        ) &&
    326                     ( fields.dstAddrMode == BindingTable[bindIdx].dstGroupMode ) &&
    327                     ( fields.dstIndex    == BindingTable[bindIdx].dstIdx       ) &&
    328                     ( fields.dstEP       == BindingTable[bindIdx].dstEP        )    )
   \   000123   85..82       MOV       DPL,?XSP + 0
   \   000126   85..83       MOV       DPH,?XSP + 1
   \   000129   E0           MOVX      A,@DPTR
   \   00012A   FB           MOV       R3,A
   \   00012B   E5..         MOV       A,?V2
   \   00012D   F8           MOV       R0,A
   \   00012E   7900         MOV       R1,#0x0
   \   000130   E8           MOV       A,R0
   \   000131   75F00E       MOV       B,#0xe
   \   000134   A4           MUL       AB
   \   000135   C8           XCH       A,R0
   \   000136   AAF0         MOV       R2,B
   \   000138   75F000       MOV       B,#0x0
   \   00013B   A4           MUL       AB
   \   00013C   2A           ADD       A,R2
   \   00013D   FA           MOV       R2,A
   \   00013E   75F00E       MOV       B,#0xe
   \   000141   E9           MOV       A,R1
   \   000142   A4           MUL       AB
   \   000143   2A           ADD       A,R2
   \   000144   F9           MOV       R1,A
   \   000145   74..         MOV       A,#BindingTable & 0xff
   \   000147   28           ADD       A,R0
   \   000148   F582         MOV       DPL,A
   \   00014A   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   00014C   39           ADDC      A,R1
   \   00014D   F583         MOV       DPH,A
   \   00014F   E0           MOVX      A,@DPTR
   \   000150   6B           XRL       A,R3
   \   000151   6003         JZ        $+5
   \   000153   02....       LJMP      ??bindAddEntry_11 & 0xFFFF
   \   000156   7404         MOV       A,#0x4
   \   000158   12....       LCALL     ?XSTACK_DISP0_8
   \   00015B   E0           MOVX      A,@DPTR
   \   00015C   FB           MOV       R3,A
   \   00015D   E5..         MOV       A,?V2
   \   00015F   F8           MOV       R0,A
   \   000160   7900         MOV       R1,#0x0
   \   000162   E8           MOV       A,R0
   \   000163   75F00E       MOV       B,#0xe
   \   000166   A4           MUL       AB
   \   000167   C8           XCH       A,R0
   \   000168   AAF0         MOV       R2,B
   \   00016A   75F000       MOV       B,#0x0
   \   00016D   A4           MUL       AB
   \   00016E   2A           ADD       A,R2
   \   00016F   FA           MOV       R2,A
   \   000170   75F00E       MOV       B,#0xe
   \   000173   E9           MOV       A,R1
   \   000174   A4           MUL       AB
   \   000175   2A           ADD       A,R2
   \   000176   F9           MOV       R1,A
   \   000177   74..         MOV       A,#(BindingTable + 1) & 0xff
   \   000179   28           ADD       A,R0
   \   00017A   F582         MOV       DPL,A
   \   00017C   74..         MOV       A,#((BindingTable + 1) >> 8) & 0xff
   \   00017E   39           ADDC      A,R1
   \   00017F   F583         MOV       DPH,A
   \   000181   E0           MOVX      A,@DPTR
   \   000182   6B           XRL       A,R3
   \   000183   6003         JZ        $+5
   \   000185   02....       LJMP      ??bindAddEntry_11 & 0xFFFF
   \   000188   7401         MOV       A,#0x1
   \   00018A   12....       LCALL     ?XSTACK_DISP0_8
   \   00018D   E0           MOVX      A,@DPTR
   \   00018E   F8           MOV       R0,A
   \   00018F   A3           INC       DPTR
   \   000190   E0           MOVX      A,@DPTR
   \   000191   F9           MOV       R1,A
   \   000192   E5..         MOV       A,?V2
   \   000194   FA           MOV       R2,A
   \   000195   7B00         MOV       R3,#0x0
   \   000197   EA           MOV       A,R2
   \   000198   75F00E       MOV       B,#0xe
   \   00019B   A4           MUL       AB
   \   00019C   CA           XCH       A,R2
   \   00019D   ACF0         MOV       R4,B
   \   00019F   75F000       MOV       B,#0x0
   \   0001A2   A4           MUL       AB
   \   0001A3   2C           ADD       A,R4
   \   0001A4   FC           MOV       R4,A
   \   0001A5   75F00E       MOV       B,#0xe
   \   0001A8   EB           MOV       A,R3
   \   0001A9   A4           MUL       AB
   \   0001AA   2C           ADD       A,R4
   \   0001AB   FB           MOV       R3,A
   \   0001AC   74..         MOV       A,#(BindingTable + 2) & 0xff
   \   0001AE   2A           ADD       A,R2
   \   0001AF   F582         MOV       DPL,A
   \   0001B1   74..         MOV       A,#((BindingTable + 2) >> 8) & 0xff
   \   0001B3   3B           ADDC      A,R3
   \   0001B4   F583         MOV       DPH,A
   \   0001B6   E0           MOVX      A,@DPTR
   \   0001B7   68           XRL       A,R0
   \   0001B8   7003         JNZ       ??bindAddEntry_12
   \   0001BA   A3           INC       DPTR
   \   0001BB   E0           MOVX      A,@DPTR
   \   0001BC   69           XRL       A,R1
   \                     ??bindAddEntry_12:
   \   0001BD   7057         JNZ       ??bindAddEntry_11
   \   0001BF   7403         MOV       A,#0x3
   \   0001C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C4   E0           MOVX      A,@DPTR
   \   0001C5   FB           MOV       R3,A
   \   0001C6   E5..         MOV       A,?V2
   \   0001C8   F8           MOV       R0,A
   \   0001C9   7900         MOV       R1,#0x0
   \   0001CB   E8           MOV       A,R0
   \   0001CC   75F00E       MOV       B,#0xe
   \   0001CF   A4           MUL       AB
   \   0001D0   C8           XCH       A,R0
   \   0001D1   AAF0         MOV       R2,B
   \   0001D3   75F000       MOV       B,#0x0
   \   0001D6   A4           MUL       AB
   \   0001D7   2A           ADD       A,R2
   \   0001D8   FA           MOV       R2,A
   \   0001D9   75F00E       MOV       B,#0xe
   \   0001DC   E9           MOV       A,R1
   \   0001DD   A4           MUL       AB
   \   0001DE   2A           ADD       A,R2
   \   0001DF   F9           MOV       R1,A
   \   0001E0   74..         MOV       A,#(BindingTable + 4) & 0xff
   \   0001E2   28           ADD       A,R0
   \   0001E3   F582         MOV       DPL,A
   \   0001E5   74..         MOV       A,#((BindingTable + 4) >> 8) & 0xff
   \   0001E7   39           ADDC      A,R1
   \   0001E8   F583         MOV       DPH,A
   \   0001EA   E0           MOVX      A,@DPTR
   \   0001EB   6B           XRL       A,R3
   \   0001EC   7028         JNZ       ??bindAddEntry_11
    329                {
    330                  entry = &BindingTable[bindIdx];
   \   0001EE   E5..         MOV       A,?V2
   \   0001F0   F8           MOV       R0,A
   \   0001F1   7900         MOV       R1,#0x0
   \   0001F3   E8           MOV       A,R0
   \   0001F4   75F00E       MOV       B,#0xe
   \   0001F7   A4           MUL       AB
   \   0001F8   C8           XCH       A,R0
   \   0001F9   AAF0         MOV       R2,B
   \   0001FB   75F000       MOV       B,#0x0
   \   0001FE   A4           MUL       AB
   \   0001FF   2A           ADD       A,R2
   \   000200   FA           MOV       R2,A
   \   000201   75F00E       MOV       B,#0xe
   \   000204   E9           MOV       A,R1
   \   000205   A4           MUL       AB
   \   000206   2A           ADD       A,R2
   \   000207   F9           MOV       R1,A
   \   000208   74..         MOV       A,#BindingTable & 0xff
   \   00020A   28           ADD       A,R0
   \   00020B   F8           MOV       R0,A
   \   00020C   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   00020E   39           ADDC      A,R1
   \   00020F   F9           MOV       R1,A
   \   000210   E8           MOV       A,R0
   \   000211   FE           MOV       R6,A
   \   000212   E9           MOV       A,R1
   \   000213   FF           MOV       R7,A
    331          
    332                  // break from loop
    333                  break;
   \   000214   8005         SJMP      ??bindAddEntry_10
    334                }
    335              }
   \                     ??bindAddEntry_11:
   \   000216   05..         INC       ?V2
   \   000218   02....       LJMP      ??bindAddEntry_9 & 0xFFFF
    336          
    337              if ( entry != NULL )
   \                     ??bindAddEntry_10:
   \   00021B   EE           MOV       A,R6
   \   00021C   4F           ORL       A,R7
   \   00021D   7003         JNZ       $+5
   \   00021F   02....       LJMP      ??bindAddEntry_13 & 0xFFFF
    338              {
    339                // Loop through the cluster IDs
    340                for ( index = 0; index < numClusterIds; index++ )
   \   000222   75..00       MOV       ?V0,#0x0
   \                     ??bindAddEntry_14:
   \   000225   E5..         MOV       A,?V0
   \   000227   C3           CLR       C
   \   000228   95..         SUBB      A,?V1
   \   00022A   4003         JC        $+5
   \   00022C   02....       LJMP      ??bindAddEntry_8 & 0xFFFF
    341                {
    342                  // Found - is the cluster already defined?
    343                  if ( bindIsClusterIDinList( entry, clusterIds[index] ) == FALSE )
   \   00022F                ; Setup parameters for call to function bindIsClusterIDinList
   \   00022F   E5..         MOV       A,?V0
   \   000231   F8           MOV       R0,A
   \   000232   7900         MOV       R1,#0x0
   \   000234   E8           MOV       A,R0
   \   000235   75F002       MOV       B,#0x2
   \   000238   A4           MUL       AB
   \   000239   C8           XCH       A,R0
   \   00023A   AAF0         MOV       R2,B
   \   00023C   75F000       MOV       B,#0x0
   \   00023F   A4           MUL       AB
   \   000240   2A           ADD       A,R2
   \   000241   FA           MOV       R2,A
   \   000242   75F002       MOV       B,#0x2
   \   000245   E9           MOV       A,R1
   \   000246   A4           MUL       AB
   \   000247   2A           ADD       A,R2
   \   000248   F9           MOV       R1,A
   \   000249   E5..         MOV       A,?V10
   \   00024B   28           ADD       A,R0
   \   00024C   F582         MOV       DPL,A
   \   00024E   E5..         MOV       A,?V11
   \   000250   39           ADDC      A,R1
   \   000251   F583         MOV       DPH,A
   \   000253   E0           MOVX      A,@DPTR
   \   000254   FC           MOV       R4,A
   \   000255   A3           INC       DPTR
   \   000256   E0           MOVX      A,@DPTR
   \   000257   FD           MOV       R5,A
   \   000258   EE           MOV       A,R6
   \   000259   FA           MOV       R2,A
   \   00025A   EF           MOV       A,R7
   \   00025B   FB           MOV       R3,A
   \   00025C   12....       LCALL     `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
   \   00025F   E9           MOV       A,R1
   \   000260   6003         JZ        $+5
   \   000262   02....       LJMP      ??bindAddEntry_15 & 0xFFFF
    344                  {
    345                    // Nope, add this cluster
    346                    if ( bindAddClusterIdToList( entry, clusterIds[index] ) == FALSE )
   \   000265                ; Setup parameters for call to function bindAddClusterIdToList
   \   000265   E5..         MOV       A,?V0
   \   000267   F8           MOV       R0,A
   \   000268   7900         MOV       R1,#0x0
   \   00026A   E8           MOV       A,R0
   \   00026B   75F002       MOV       B,#0x2
   \   00026E   A4           MUL       AB
   \   00026F   C8           XCH       A,R0
   \   000270   AAF0         MOV       R2,B
   \   000272   75F000       MOV       B,#0x0
   \   000275   A4           MUL       AB
   \   000276   2A           ADD       A,R2
   \   000277   FA           MOV       R2,A
   \   000278   75F002       MOV       B,#0x2
   \   00027B   E9           MOV       A,R1
   \   00027C   A4           MUL       AB
   \   00027D   2A           ADD       A,R2
   \   00027E   F9           MOV       R1,A
   \   00027F   E5..         MOV       A,?V10
   \   000281   28           ADD       A,R0
   \   000282   F582         MOV       DPL,A
   \   000284   E5..         MOV       A,?V11
   \   000286   39           ADDC      A,R1
   \   000287   F583         MOV       DPH,A
   \   000289   E0           MOVX      A,@DPTR
   \   00028A   FC           MOV       R4,A
   \   00028B   A3           INC       DPTR
   \   00028C   E0           MOVX      A,@DPTR
   \   00028D   FD           MOV       R5,A
   \   00028E   EE           MOV       A,R6
   \   00028F   FA           MOV       R2,A
   \   000290   EF           MOV       A,R7
   \   000291   FB           MOV       R3,A
   \   000292   12....       LCALL     `??bindAddClusterIdToList::?relay`; Banked call to: bindAddClusterIdToList
   \   000295   E9           MOV       A,R1
   \   000296   7006         JNZ       ??bindAddEntry_16
    347                    {
    348                      // Indicate error if cluster list was full
    349                      entry = NULL;
   \   000298   7E00         MOV       R6,#0x0
   \   00029A   7F00         MOV       R7,#0x0
   \   00029C   8052         SJMP      ??bindAddEntry_15
    350                    }
    351                    else
    352                    {
    353                      // new bind added - notify application
    354                      bindData.clusterId = clusterIds[index];
   \                     ??bindAddEntry_16:
   \   00029E   E5..         MOV       A,?V0
   \   0002A0   F8           MOV       R0,A
   \   0002A1   7900         MOV       R1,#0x0
   \   0002A3   E8           MOV       A,R0
   \   0002A4   75F002       MOV       B,#0x2
   \   0002A7   A4           MUL       AB
   \   0002A8   C8           XCH       A,R0
   \   0002A9   AAF0         MOV       R2,B
   \   0002AB   75F000       MOV       B,#0x0
   \   0002AE   A4           MUL       AB
   \   0002AF   2A           ADD       A,R2
   \   0002B0   FA           MOV       R2,A
   \   0002B1   75F002       MOV       B,#0x2
   \   0002B4   E9           MOV       A,R1
   \   0002B5   A4           MUL       AB
   \   0002B6   2A           ADD       A,R2
   \   0002B7   F9           MOV       R1,A
   \   0002B8   E5..         MOV       A,?V10
   \   0002BA   28           ADD       A,R0
   \   0002BB   F582         MOV       DPL,A
   \   0002BD   E5..         MOV       A,?V11
   \   0002BF   39           ADDC      A,R1
   \   0002C0   F583         MOV       DPH,A
   \   0002C2   E0           MOVX      A,@DPTR
   \   0002C3   F8           MOV       R0,A
   \   0002C4   A3           INC       DPTR
   \   0002C5   E0           MOVX      A,@DPTR
   \   0002C6   F9           MOV       R1,A
   \   0002C7   7412         MOV       A,#0x12
   \   0002C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0002CC   E8           MOV       A,R0
   \   0002CD   F0           MOVX      @DPTR,A
   \   0002CE   A3           INC       DPTR
   \   0002CF   E9           MOV       A,R1
   \   0002D0   F0           MOVX      @DPTR,A
    355          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)             
    356                      if ( pfnBindNotificationCB != NULL )
   \   0002D1   90....       MOV       DPTR,#pfnBindNotificationCB
   \   0002D4   E0           MOVX      A,@DPTR
   \   0002D5   F8           MOV       R0,A
   \   0002D6   A3           INC       DPTR
   \   0002D7   E0           MOVX      A,@DPTR
   \   0002D8   F9           MOV       R1,A
   \   0002D9   E8           MOV       A,R0
   \   0002DA   49           ORL       A,R1
   \   0002DB   6013         JZ        ??bindAddEntry_15
    357                      {
    358                        pfnBindNotificationCB( &bindData );
   \   0002DD                ; Setup parameters for indirect call
   \   0002DD   7408         MOV       A,#0x8
   \   0002DF   12....       LCALL     ?XSTACK_DISP101_8
   \   0002E2   90....       MOV       DPTR,#pfnBindNotificationCB
   \   0002E5   E0           MOVX      A,@DPTR
   \   0002E6   F8           MOV       R0,A
   \   0002E7   A3           INC       DPTR
   \   0002E8   E0           MOVX      A,@DPTR
   \   0002E9   F583         MOV       DPH,A
   \   0002EB   8882         MOV       DPL,R0
   \   0002ED   12....       LCALL     ?CALL_IND
    359                      }
    360          #endif
    361          #ifdef BDB_REPORTING  
    362                      bdb_RepMarkHasBindingInEndpointClusterArray(srcEpInt, clusterIds[index], BDBREPORTING_FALSE, BDBREPORTING_TRUE); 
    363                      bindAdded = TRUE;
    364          #endif
    365                    }
    366                  }
    367                }
   \                     ??bindAddEntry_15:
   \   0002F0   05..         INC       ?V0
   \   0002F2   02....       LJMP      ??bindAddEntry_14 & 0xFFFF
    368              }
    369              else
    370              {
    371                // Find an empty slot
    372                entry = bindFindEmpty();
   \                     ??bindAddEntry_13:
   \   0002F5                ; Setup parameters for call to function bindFindEmpty
   \   0002F5   12....       LCALL     `??bindFindEmpty::?relay`; Banked call to: bindFindEmpty
   \   0002F8   8A..         MOV       ?V4,R2
   \   0002FA   8B..         MOV       ?V5,R3
   \   0002FC   AE..         MOV       R6,?V4
   \   0002FE   AF..         MOV       R7,?V5
    373          
    374                // Check against the maximum number allowed
    375                if ( entry != NULL )
   \   000300   EE           MOV       A,R6
   \   000301   4F           ORL       A,R7
   \   000302   7003         JNZ       $+5
   \   000304   02....       LJMP      ??bindAddEntry_8 & 0xFFFF
    376                {
    377                  // Add new entry
    378                  entry->srcEP         = fields.srcEP;
   \   000307   85..82       MOV       DPL,?XSP + 0
   \   00030A   85..83       MOV       DPH,?XSP + 1
   \   00030D   E0           MOVX      A,@DPTR
   \   00030E   C0E0         PUSH      A
   \   000310   8E82         MOV       DPL,R6
   \   000312   8F83         MOV       DPH,R7
   \   000314   D0E0         POP       A
   \   000316   F0           MOVX      @DPTR,A
    379                  entry->dstGroupMode  = fields.dstAddrMode;
   \   000317   7404         MOV       A,#0x4
   \   000319   12....       LCALL     ?XSTACK_DISP0_8
   \   00031C   E0           MOVX      A,@DPTR
   \   00031D   C0E0         PUSH      A
   \   00031F   8E82         MOV       DPL,R6
   \   000321   8F83         MOV       DPH,R7
   \   000323   A3           INC       DPTR
   \   000324   D0E0         POP       A
   \   000326   F0           MOVX      @DPTR,A
    380                  entry->dstIdx        = fields.dstIndex;
   \   000327   7401         MOV       A,#0x1
   \   000329   12....       LCALL     ?XSTACK_DISP0_8
   \   00032C   E0           MOVX      A,@DPTR
   \   00032D   F8           MOV       R0,A
   \   00032E   A3           INC       DPTR
   \   00032F   E0           MOVX      A,@DPTR
   \   000330   F9           MOV       R1,A
   \   000331   8E82         MOV       DPL,R6
   \   000333   8F83         MOV       DPH,R7
   \   000335   A3           INC       DPTR
   \   000336   A3           INC       DPTR
   \   000337   E8           MOV       A,R0
   \   000338   F0           MOVX      @DPTR,A
   \   000339   A3           INC       DPTR
   \   00033A   E9           MOV       A,R1
   \   00033B   F0           MOVX      @DPTR,A
    381                  entry->dstEP         = fields.dstEP;
   \   00033C   7403         MOV       A,#0x3
   \   00033E   12....       LCALL     ?XSTACK_DISP0_8
   \   000341   E0           MOVX      A,@DPTR
   \   000342   C0E0         PUSH      A
   \   000344   8E82         MOV       DPL,R6
   \   000346   8F83         MOV       DPH,R7
   \   000348   A3           INC       DPTR
   \   000349   A3           INC       DPTR
   \   00034A   A3           INC       DPTR
   \   00034B   A3           INC       DPTR
   \   00034C   D0E0         POP       A
   \   00034E   F0           MOVX      @DPTR,A
    382          
    383                  if ( numClusterIds > gMAX_BINDING_CLUSTER_IDS )
   \   00034F   90....       MOV       DPTR,#gMAX_BINDING_CLUSTER_IDS
   \   000352   E4           CLR       A
   \   000353   93           MOVC      A,@A+DPTR
   \   000354   C3           CLR       C
   \   000355   95..         SUBB      A,?V1
   \   000357   5007         JNC       ??bindAddEntry_17
    384                  {
    385                    numClusterIds = gMAX_BINDING_CLUSTER_IDS;
   \   000359   90....       MOV       DPTR,#gMAX_BINDING_CLUSTER_IDS
   \   00035C   E4           CLR       A
   \   00035D   93           MOVC      A,@A+DPTR
   \   00035E   F5..         MOV       ?V1,A
    386                  }
    387                  
    388                  for(index = 0; index < numClusterIds; index++)
   \                     ??bindAddEntry_17:
   \   000360   75..00       MOV       ?V0,#0x0
   \                     ??bindAddEntry_18:
   \   000363   E5..         MOV       A,?V0
   \   000365   C3           CLR       C
   \   000366   95..         SUBB      A,?V1
   \   000368   5056         JNC       ??bindAddEntry_19
    389                  {
    390                    // new bind added - notify application
    391                    bindData.clusterId = clusterIds[index];
   \   00036A   E5..         MOV       A,?V0
   \   00036C   F8           MOV       R0,A
   \   00036D   7900         MOV       R1,#0x0
   \   00036F   E8           MOV       A,R0
   \   000370   75F002       MOV       B,#0x2
   \   000373   A4           MUL       AB
   \   000374   C8           XCH       A,R0
   \   000375   AAF0         MOV       R2,B
   \   000377   75F000       MOV       B,#0x0
   \   00037A   A4           MUL       AB
   \   00037B   2A           ADD       A,R2
   \   00037C   FA           MOV       R2,A
   \   00037D   75F002       MOV       B,#0x2
   \   000380   E9           MOV       A,R1
   \   000381   A4           MUL       AB
   \   000382   2A           ADD       A,R2
   \   000383   F9           MOV       R1,A
   \   000384   E5..         MOV       A,?V10
   \   000386   28           ADD       A,R0
   \   000387   F582         MOV       DPL,A
   \   000389   E5..         MOV       A,?V11
   \   00038B   39           ADDC      A,R1
   \   00038C   F583         MOV       DPH,A
   \   00038E   E0           MOVX      A,@DPTR
   \   00038F   F8           MOV       R0,A
   \   000390   A3           INC       DPTR
   \   000391   E0           MOVX      A,@DPTR
   \   000392   F9           MOV       R1,A
   \   000393   7412         MOV       A,#0x12
   \   000395   12....       LCALL     ?XSTACK_DISP0_8
   \   000398   E8           MOV       A,R0
   \   000399   F0           MOVX      @DPTR,A
   \   00039A   A3           INC       DPTR
   \   00039B   E9           MOV       A,R1
   \   00039C   F0           MOVX      @DPTR,A
    392          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
    393                    if ( pfnBindNotificationCB != NULL )
   \   00039D   90....       MOV       DPTR,#pfnBindNotificationCB
   \   0003A0   E0           MOVX      A,@DPTR
   \   0003A1   F8           MOV       R0,A
   \   0003A2   A3           INC       DPTR
   \   0003A3   E0           MOVX      A,@DPTR
   \   0003A4   F9           MOV       R1,A
   \   0003A5   E8           MOV       A,R0
   \   0003A6   49           ORL       A,R1
   \   0003A7   6013         JZ        ??bindAddEntry_20
    394                    {
    395                      pfnBindNotificationCB( &bindData );
   \   0003A9                ; Setup parameters for indirect call
   \   0003A9   7408         MOV       A,#0x8
   \   0003AB   12....       LCALL     ?XSTACK_DISP101_8
   \   0003AE   90....       MOV       DPTR,#pfnBindNotificationCB
   \   0003B1   E0           MOVX      A,@DPTR
   \   0003B2   F8           MOV       R0,A
   \   0003B3   A3           INC       DPTR
   \   0003B4   E0           MOVX      A,@DPTR
   \   0003B5   F583         MOV       DPH,A
   \   0003B7   8882         MOV       DPL,R0
   \   0003B9   12....       LCALL     ?CALL_IND
    396                    }
    397          #endif
    398          #ifdef BDB_REPORTING   
    399                      bdb_RepMarkHasBindingInEndpointClusterArray(srcEpInt, clusterIds[index], BDBREPORTING_FALSE, BDBREPORTING_TRUE); 
    400                      bindAdded = TRUE;
    401          #endif
    402                  }
   \                     ??bindAddEntry_20:
   \   0003BC   05..         INC       ?V0
   \   0003BE   80A3         SJMP      ??bindAddEntry_18
    403          
    404                  entry->numClusterIds = numClusterIds;
   \                     ??bindAddEntry_19:
   \   0003C0   E5..         MOV       A,?V1
   \   0003C2   C0E0         PUSH      A
   \   0003C4   8E82         MOV       DPL,R6
   \   0003C6   8F83         MOV       DPH,R7
   \   0003C8   A3           INC       DPTR
   \   0003C9   A3           INC       DPTR
   \   0003CA   A3           INC       DPTR
   \   0003CB   A3           INC       DPTR
   \   0003CC   A3           INC       DPTR
   \   0003CD   D0E0         POP       A
   \   0003CF   F0           MOVX      @DPTR,A
    405          
    406                  osal_memcpy( entry->clusterIdList,
    407                               clusterIds,
    408                               numClusterIds * sizeof(uint16) );
   \   0003D0                ; Setup parameters for call to function osal_memcpy
   \   0003D0   85....       MOV       ?V4,?V10
   \   0003D3   85....       MOV       ?V5,?V11
   \   0003D6   75..00       MOV       ?V6,#0x0
   \   0003D9   78..         MOV       R0,#?V4
   \   0003DB   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0003DE   E5..         MOV       A,?V1
   \   0003E0   FC           MOV       R4,A
   \   0003E1   7D00         MOV       R5,#0x0
   \   0003E3   EC           MOV       A,R4
   \   0003E4   75F002       MOV       B,#0x2
   \   0003E7   A4           MUL       AB
   \   0003E8   CC           XCH       A,R4
   \   0003E9   A8F0         MOV       R0,B
   \   0003EB   75F000       MOV       B,#0x0
   \   0003EE   A4           MUL       AB
   \   0003EF   28           ADD       A,R0
   \   0003F0   F8           MOV       R0,A
   \   0003F1   75F002       MOV       B,#0x2
   \   0003F4   ED           MOV       A,R5
   \   0003F5   A4           MUL       AB
   \   0003F6   28           ADD       A,R0
   \   0003F7   FD           MOV       R5,A
   \   0003F8   EE           MOV       A,R6
   \   0003F9   2406         ADD       A,#0x6
   \   0003FB   FA           MOV       R2,A
   \   0003FC   E4           CLR       A
   \   0003FD   3F           ADDC      A,R7
   \   0003FE   FB           MOV       R3,A
   \   0003FF   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000402   7403         MOV       A,#0x3
   \   000404   12....       LCALL     ?DEALLOC_XSTACK8
    409                }
    410              }
    411            }
    412          #ifdef BDB_REPORTING
    413            if(bindAdded == TRUE)
    414            {
    415              bdb_RepStartOrContinueReporting( );
    416            }
    417          #endif
    418            return entry;
   \                     ??bindAddEntry_8:
   \   000407   EE           MOV       A,R6
   \   000408   FA           MOV       R2,A
   \   000409   EF           MOV       A,R7
   \   00040A   FB           MOV       R3,A
   \                     ??bindAddEntry_3:
   \   00040B   7414         MOV       A,#0x14
   \   00040D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000410   7F0C         MOV       R7,#0xc
   \   000412   02....       LJMP      ?BANKED_LEAVE_XDATA
    419          }
    420          
    421          /*********************************************************************
    422           * @fn      bindRemoveEntry
    423           *
    424           * @brief   Removes a binding table entry.
    425           *
    426           * @param   pBind - pointer to binding table entry to delete
    427           *
    428           * @return  TRUE if Removed, FALSE if not
    429           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    430          byte bindRemoveEntry( BindingEntry_t *pBind )
   \                     bindRemoveEntry:
    431          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    432            osal_memset( pBind, 0xFF, gBIND_REC_SIZE );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   00000C   E4           CLR       A
   \   00000D   93           MOVC      A,@A+DPTR
   \   00000E   FC           MOV       R4,A
   \   00000F   7401         MOV       A,#0x1
   \   000011   93           MOVC      A,@A+DPTR
   \   000012   FD           MOV       R5,A
   \   000013   79FF         MOV       R1,#-0x1
   \   000015   EE           MOV       A,R6
   \   000016   FA           MOV       R2,A
   \   000017   EF           MOV       A,R7
   \   000018   FB           MOV       R3,A
   \   000019   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    433          #ifdef BDB_REPORTING
    434            bdb_RepUpdateMarkBindings();
    435          #endif
    436            return ( TRUE );
   \   00001C   7901         MOV       R1,#0x1
   \   00001E   7F01         MOV       R7,#0x1
   \   000020   02....       LJMP      ?BANKED_LEAVE_XDATA
    437          }
    438          
    439          /*********************************************************************
    440           * @fn      bindIsClusterIDinList()
    441           *
    442           * @brief   Is the clusterID in the clusterID list?
    443           *
    444           * @param   enter - binding table entry
    445           * @param   clusterId  - Cluster ID to look for
    446           *
    447           * @return  TRUE if found, FALSE if not found
    448           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    449          byte bindIsClusterIDinList( BindingEntry_t *entry, uint16 clusterId )
   \                     bindIsClusterIDinList:
    450          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    451            uint8 x;
    452          
    453            if ( entry != NULL )
   \   000005   EA           MOV       A,R2
   \   000006   4B           ORL       A,R3
   \   000007   6049         JZ        ??bindIsClusterIDinList_0
    454            {
    455              for ( x = 0; x < entry->numClusterIds; x++ )
   \   000009   7E00         MOV       R6,#0x0
   \                     ??bindIsClusterIDinList_1:
   \   00000B   8A82         MOV       DPL,R2
   \   00000D   8B83         MOV       DPH,R3
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F8           MOV       R0,A
   \   000016   EE           MOV       A,R6
   \   000017   C3           CLR       C
   \   000018   98           SUBB      A,R0
   \   000019   5037         JNC       ??bindIsClusterIDinList_0
    456              {
    457                if ( entry->clusterIdList[x] == clusterId )
   \   00001B   EE           MOV       A,R6
   \   00001C   F8           MOV       R0,A
   \   00001D   7900         MOV       R1,#0x0
   \   00001F   E8           MOV       A,R0
   \   000020   75F002       MOV       B,#0x2
   \   000023   A4           MUL       AB
   \   000024   C8           XCH       A,R0
   \   000025   AFF0         MOV       R7,B
   \   000027   75F000       MOV       B,#0x0
   \   00002A   A4           MUL       AB
   \   00002B   2F           ADD       A,R7
   \   00002C   FF           MOV       R7,A
   \   00002D   75F002       MOV       B,#0x2
   \   000030   E9           MOV       A,R1
   \   000031   A4           MUL       AB
   \   000032   2F           ADD       A,R7
   \   000033   F9           MOV       R1,A
   \   000034   EA           MOV       A,R2
   \   000035   28           ADD       A,R0
   \   000036   F582         MOV       DPL,A
   \   000038   EB           MOV       A,R3
   \   000039   39           ADDC      A,R1
   \   00003A   F583         MOV       DPH,A
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   6C           XRL       A,R4
   \   000044   7003         JNZ       ??bindIsClusterIDinList_2
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   6D           XRL       A,R5
   \                     ??bindIsClusterIDinList_2:
   \   000049   7004         JNZ       ??bindIsClusterIDinList_3
    458                {
    459                  return ( TRUE );
   \   00004B   7901         MOV       R1,#0x1
   \   00004D   8005         SJMP      ??bindIsClusterIDinList_4
    460                }
    461              }
   \                     ??bindIsClusterIDinList_3:
   \   00004F   0E           INC       R6
   \   000050   80B9         SJMP      ??bindIsClusterIDinList_1
    462            }
    463          
    464            return ( FALSE );
   \                     ??bindIsClusterIDinList_0:
   \   000052   7900         MOV       R1,#0x0
   \                     ??bindIsClusterIDinList_4:
   \   000054   7F01         MOV       R7,#0x1
   \   000056   02....       LJMP      ?BANKED_LEAVE_XDATA
    465          }
    466          
    467          /*********************************************************************
    468           * @fn      bindRemoveClusterIdFromList()
    469           *
    470           * @brief   Removes a ClusterID from a list of ClusterIDs.
    471           *
    472           * @param   enter - binding table entry
    473           * @param   clusterId  - Cluster ID to look for
    474           *
    475           * @return  TRUE if there are at least 1 clusterID left, FALSE if none
    476           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    477          byte bindRemoveClusterIdFromList( BindingEntry_t *entry, uint16 clusterId )
   \                     bindRemoveClusterIdFromList:
    478          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    479            byte x;
    480            uint16 *listPtr;
    481            byte numIds;
    482          
    483          #ifdef BDB_REPORTING
    484            uint8 numRemoved = 0;
    485          #endif
    486            if ( entry )
   \   000005   EA           MOV       A,R2
   \   000006   4B           ORL       A,R3
   \   000007   7003         JNZ       $+5
   \   000009   02....       LJMP      ??bindRemoveClusterIdFromList_0 & 0xFFFF
    487            {
    488              if ( entry->numClusterIds > 0 )
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   7003         JNZ       $+5
   \   000018   02....       LJMP      ??bindRemoveClusterIdFromList_0 & 0xFFFF
    489              {
    490                listPtr = entry->clusterIdList;
   \   00001B   EA           MOV       A,R2
   \   00001C   2406         ADD       A,#0x6
   \   00001E   F8           MOV       R0,A
   \   00001F   E4           CLR       A
   \   000020   3B           ADDC      A,R3
   \   000021   F9           MOV       R1,A
   \   000022   E8           MOV       A,R0
   \   000023   FE           MOV       R6,A
   \   000024   E9           MOV       A,R1
   \   000025   FF           MOV       R7,A
    491                numIds = entry->numClusterIds;
   \   000026   8A82         MOV       DPL,R2
   \   000028   8B83         MOV       DPH,R3
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F5..         MOV       ?V1,A
    492          
    493                // Copy the new list over
    494                for ( x = 0; x < numIds; x++ )
   \   000032   75..00       MOV       ?V0,#0x0
   \                     ??bindRemoveClusterIdFromList_1:
   \   000035   E5..         MOV       A,?V0
   \   000037   C3           CLR       C
   \   000038   95..         SUBB      A,?V1
   \   00003A   4003         JC        $+5
   \   00003C   02....       LJMP      ??bindRemoveClusterIdFromList_0 & 0xFFFF
    495                {
    496                  if ( entry->clusterIdList[x] != clusterId )
   \   00003F   E5..         MOV       A,?V0
   \   000041   F8           MOV       R0,A
   \   000042   7900         MOV       R1,#0x0
   \   000044   E8           MOV       A,R0
   \   000045   75F002       MOV       B,#0x2
   \   000048   A4           MUL       AB
   \   000049   C8           XCH       A,R0
   \   00004A   85F0..       MOV       ?V2,B
   \   00004D   75F000       MOV       B,#0x0
   \   000050   A4           MUL       AB
   \   000051   25..         ADD       A,?V2
   \   000053   F5..         MOV       ?V2,A
   \   000055   75F002       MOV       B,#0x2
   \   000058   E9           MOV       A,R1
   \   000059   A4           MUL       AB
   \   00005A   25..         ADD       A,?V2
   \   00005C   F9           MOV       R1,A
   \   00005D   EA           MOV       A,R2
   \   00005E   28           ADD       A,R0
   \   00005F   F582         MOV       DPL,A
   \   000061   EB           MOV       A,R3
   \   000062   39           ADDC      A,R1
   \   000063   F583         MOV       DPH,A
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   6C           XRL       A,R4
   \   00006D   7003         JNZ       ??bindRemoveClusterIdFromList_2
   \   00006F   A3           INC       DPTR
   \   000070   E0           MOVX      A,@DPTR
   \   000071   6D           XRL       A,R5
   \                     ??bindRemoveClusterIdFromList_2:
   \   000072   6047         JZ        ??bindRemoveClusterIdFromList_3
    497                  {
    498                    *listPtr++ = entry->clusterIdList[x];
   \   000074   E5..         MOV       A,?V0
   \   000076   F8           MOV       R0,A
   \   000077   7900         MOV       R1,#0x0
   \   000079   E8           MOV       A,R0
   \   00007A   75F002       MOV       B,#0x2
   \   00007D   A4           MUL       AB
   \   00007E   C8           XCH       A,R0
   \   00007F   85F0..       MOV       ?V2,B
   \   000082   75F000       MOV       B,#0x0
   \   000085   A4           MUL       AB
   \   000086   25..         ADD       A,?V2
   \   000088   F5..         MOV       ?V2,A
   \   00008A   75F002       MOV       B,#0x2
   \   00008D   E9           MOV       A,R1
   \   00008E   A4           MUL       AB
   \   00008F   25..         ADD       A,?V2
   \   000091   F9           MOV       R1,A
   \   000092   EA           MOV       A,R2
   \   000093   28           ADD       A,R0
   \   000094   F582         MOV       DPL,A
   \   000096   EB           MOV       A,R3
   \   000097   39           ADDC      A,R1
   \   000098   F583         MOV       DPH,A
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   F8           MOV       R0,A
   \   0000A2   A3           INC       DPTR
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   F9           MOV       R1,A
   \   0000A5   8E82         MOV       DPL,R6
   \   0000A7   8F83         MOV       DPH,R7
   \   0000A9   E8           MOV       A,R0
   \   0000AA   F0           MOVX      @DPTR,A
   \   0000AB   A3           INC       DPTR
   \   0000AC   E9           MOV       A,R1
   \   0000AD   F0           MOVX      @DPTR,A
   \   0000AE   EE           MOV       A,R6
   \   0000AF   2402         ADD       A,#0x2
   \   0000B1   F8           MOV       R0,A
   \   0000B2   E4           CLR       A
   \   0000B3   3F           ADDC      A,R7
   \   0000B4   F9           MOV       R1,A
   \   0000B5   E8           MOV       A,R0
   \   0000B6   FE           MOV       R6,A
   \   0000B7   E9           MOV       A,R1
   \   0000B8   FF           MOV       R7,A
   \   0000B9   8019         SJMP      ??bindRemoveClusterIdFromList_4
    499                  }
    500                  else
    501                  {
    502                    entry->numClusterIds--;
   \                     ??bindRemoveClusterIdFromList_3:
   \   0000BB   8A82         MOV       DPL,R2
   \   0000BD   8B83         MOV       DPH,R3
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   A3           INC       DPTR
   \   0000C3   A3           INC       DPTR
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   24FF         ADD       A,#-0x1
   \   0000C7   F0           MOVX      @DPTR,A
    503                    
    504          #ifdef BDB_REPORTING
    505                     numRemoved++;
    506          #endif          
    507                    if ( entry->numClusterIds == 0 )
   \   0000C8   8A82         MOV       DPL,R2
   \   0000CA   8B83         MOV       DPH,R3
   \   0000CC   A3           INC       DPTR
   \   0000CD   A3           INC       DPTR
   \   0000CE   A3           INC       DPTR
   \   0000CF   A3           INC       DPTR
   \   0000D0   A3           INC       DPTR
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   6005         JZ        ??bindRemoveClusterIdFromList_0
    508                    {
    509                      break;
    510                    }
    511                  }
    512                }
   \                     ??bindRemoveClusterIdFromList_4:
   \   0000D4   05..         INC       ?V0
   \   0000D6   02....       LJMP      ??bindRemoveClusterIdFromList_1 & 0xFFFF
    513                
    514              }
    515            }
    516          
    517          #ifdef BDB_REPORTING
    518            if(numRemoved>0)
    519              bdb_RepUpdateMarkBindings();
    520          #endif 
    521            
    522            if ( entry && (entry->numClusterIds > 0) )
   \                     ??bindRemoveClusterIdFromList_0:
   \   0000D9   EA           MOV       A,R2
   \   0000DA   4B           ORL       A,R3
   \   0000DB   6010         JZ        ??bindRemoveClusterIdFromList_5
   \   0000DD   8A82         MOV       DPL,R2
   \   0000DF   8B83         MOV       DPH,R3
   \   0000E1   A3           INC       DPTR
   \   0000E2   A3           INC       DPTR
   \   0000E3   A3           INC       DPTR
   \   0000E4   A3           INC       DPTR
   \   0000E5   A3           INC       DPTR
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   6004         JZ        ??bindRemoveClusterIdFromList_5
    523            {
    524              return ( TRUE );
   \   0000E9   7901         MOV       R1,#0x1
   \   0000EB   8002         SJMP      ??bindRemoveClusterIdFromList_6
    525            }
    526            else
    527            {
    528              return ( FALSE );
   \                     ??bindRemoveClusterIdFromList_5:
   \   0000ED   7900         MOV       R1,#0x0
   \                     ??bindRemoveClusterIdFromList_6:
   \   0000EF   7F03         MOV       R7,#0x3
   \   0000F1   02....       LJMP      ?BANKED_LEAVE_XDATA
    529            }
    530          }
    531          
    532          /*********************************************************************
    533           * @fn      bindAddClusterIdToList()
    534           *
    535           * @brief   Adds a ClusterID to a list of ClusterIDs.
    536           *
    537           * @param   enter - binding table entry
    538           * @param   clusterId  - Cluster ID to Add
    539           *
    540           * @return  TRUE if Added, FALSE if not
    541           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    542          byte bindAddClusterIdToList( BindingEntry_t *entry, uint16 clusterId )
   \                     bindAddClusterIdToList:
    543          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    544            if ( entry && entry->numClusterIds < gMAX_BINDING_CLUSTER_IDS )
   \   000005   EA           MOV       A,R2
   \   000006   4B           ORL       A,R3
   \   000007   605A         JZ        ??bindAddClusterIdToList_0
   \   000009   90....       MOV       DPTR,#gMAX_BINDING_CLUSTER_IDS
   \   00000C   E4           CLR       A
   \   00000D   93           MOVC      A,@A+DPTR
   \   00000E   F8           MOV       R0,A
   \   00000F   8A82         MOV       DPL,R2
   \   000011   8B83         MOV       DPH,R3
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   C3           CLR       C
   \   00001A   98           SUBB      A,R0
   \   00001B   5046         JNC       ??bindAddClusterIdToList_0
    545            {
    546              // Add the new one
    547              entry->clusterIdList[entry->numClusterIds] = clusterId;
   \   00001D   8A82         MOV       DPL,R2
   \   00001F   8B83         MOV       DPH,R3
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F8           MOV       R0,A
   \   000028   7900         MOV       R1,#0x0
   \   00002A   E8           MOV       A,R0
   \   00002B   75F002       MOV       B,#0x2
   \   00002E   A4           MUL       AB
   \   00002F   C8           XCH       A,R0
   \   000030   AEF0         MOV       R6,B
   \   000032   75F000       MOV       B,#0x0
   \   000035   A4           MUL       AB
   \   000036   2E           ADD       A,R6
   \   000037   FE           MOV       R6,A
   \   000038   75F002       MOV       B,#0x2
   \   00003B   E9           MOV       A,R1
   \   00003C   A4           MUL       AB
   \   00003D   2E           ADD       A,R6
   \   00003E   F9           MOV       R1,A
   \   00003F   EA           MOV       A,R2
   \   000040   28           ADD       A,R0
   \   000041   F582         MOV       DPL,A
   \   000043   EB           MOV       A,R3
   \   000044   39           ADDC      A,R1
   \   000045   F583         MOV       DPH,A
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   EC           MOV       A,R4
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   A3           INC       DPTR
   \   000050   ED           MOV       A,R5
   \   000051   F0           MOVX      @DPTR,A
    548              entry->numClusterIds++;
   \   000052   8A82         MOV       DPL,R2
   \   000054   8B83         MOV       DPH,R3
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   2401         ADD       A,#0x1
   \   00005E   F0           MOVX      @DPTR,A
    549              return ( TRUE );
   \   00005F   7901         MOV       R1,#0x1
   \   000061   8002         SJMP      ??bindAddClusterIdToList_1
    550            }
    551            return ( FALSE );
   \                     ??bindAddClusterIdToList_0:
   \   000063   7900         MOV       R1,#0x0
   \                     ??bindAddClusterIdToList_1:
   \   000065   7F01         MOV       R7,#0x1
   \   000067   02....       LJMP      ?BANKED_LEAVE_XDATA
    552          }
    553          
    554          /*********************************************************************
    555           * @fn      bindFindExisting
    556           *
    557           * @brief   Finds an existing src/epint to dst/epint bind record
    558           *
    559           * @param   srcEpInt - Source Endpoint/Interface
    560           * @param   dstAddr - Destination address
    561           * @param   dstEpInt - Destination Endpoint/Interface
    562           *
    563           * @return  pointer to existing entry or NULL
    564           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    565          BindingEntry_t *bindFindExisting( byte srcEpInt,
   \                     bindFindExisting:
    566                                            zAddrType_t *dstAddr, byte dstEpInt )
    567          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V3,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
   \   00000B   8C..         MOV       ?V4,R4
    568            uint16 dstIdx;
    569            bindTableIndex_t x;
    570          
    571            // Find the records in the assoc list
    572            if ( dstAddr->addrMode == AddrGroup )
   \   00000D   8E82         MOV       DPL,R6
   \   00000F   8F83         MOV       DPH,R7
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   6401         XRL       A,#0x1
   \   00001C   700D         JNZ       ??bindFindExisting_0
    573            {
    574              dstIdx = dstAddr->addr.shortAddr;
   \   00001E   8E82         MOV       DPL,R6
   \   000020   8F83         MOV       DPH,R7
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F5..         MOV       ?V0,A
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F5..         MOV       ?V1,A
   \   000029   8011         SJMP      ??bindFindExisting_1
    575            }
    576            else
    577            {
    578              dstIdx = bindingAddrMgsHelperFind( dstAddr );
   \                     ??bindFindExisting_0:
   \   00002B                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   00002B   EE           MOV       A,R6
   \   00002C   FA           MOV       R2,A
   \   00002D   EF           MOV       A,R7
   \   00002E   FB           MOV       R3,A
   \   00002F   12....       LCALL     `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   000032   8A..         MOV       ?V6,R2
   \   000034   8B..         MOV       ?V7,R3
   \   000036   85....       MOV       ?V0,?V6
   \   000039   85....       MOV       ?V1,?V7
    579            }
    580          
    581            if ( dstIdx == INVALID_NODE_ADDR )
   \                     ??bindFindExisting_1:
   \   00003C   74FE         MOV       A,#-0x2
   \   00003E   65..         XRL       A,?V0
   \   000040   7004         JNZ       ??bindFindExisting_2
   \   000042   74FF         MOV       A,#-0x1
   \   000044   65..         XRL       A,?V1
   \                     ??bindFindExisting_2:
   \   000046   7007         JNZ       ??bindFindExisting_3
    582            {
    583              return ( (BindingEntry_t *)NULL );
   \   000048   7A00         MOV       R2,#0x0
   \   00004A   7B00         MOV       R3,#0x0
   \   00004C   02....       LJMP      ??bindFindExisting_4 & 0xFFFF
    584            }
    585          
    586            // Start at the beginning
    587            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \                     ??bindFindExisting_3:
   \   00004F   75..00       MOV       ?V2,#0x0
   \                     ??bindFindExisting_5:
   \   000052   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000055   E4           CLR       A
   \   000056   93           MOVC      A,@A+DPTR
   \   000057   F8           MOV       R0,A
   \   000058   E5..         MOV       A,?V2
   \   00005A   C3           CLR       C
   \   00005B   98           SUBB      A,R0
   \   00005C   4003         JC        $+5
   \   00005E   02....       LJMP      ??bindFindExisting_6 & 0xFFFF
    588            {
    589              if ( (BindingTable[x].srcEP == srcEpInt) )
   \   000061   E5..         MOV       A,?V2
   \   000063   F8           MOV       R0,A
   \   000064   7900         MOV       R1,#0x0
   \   000066   E8           MOV       A,R0
   \   000067   75F00E       MOV       B,#0xe
   \   00006A   A4           MUL       AB
   \   00006B   C8           XCH       A,R0
   \   00006C   AAF0         MOV       R2,B
   \   00006E   75F000       MOV       B,#0x0
   \   000071   A4           MUL       AB
   \   000072   2A           ADD       A,R2
   \   000073   FA           MOV       R2,A
   \   000074   75F00E       MOV       B,#0xe
   \   000077   E9           MOV       A,R1
   \   000078   A4           MUL       AB
   \   000079   2A           ADD       A,R2
   \   00007A   F9           MOV       R1,A
   \   00007B   74..         MOV       A,#BindingTable & 0xff
   \   00007D   28           ADD       A,R0
   \   00007E   F582         MOV       DPL,A
   \   000080   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   000082   39           ADDC      A,R1
   \   000083   F583         MOV       DPH,A
   \   000085   E0           MOVX      A,@DPTR
   \   000086   65..         XRL       A,?V3
   \   000088   6003         JZ        $+5
   \   00008A   02....       LJMP      ??bindFindExisting_7 & 0xFFFF
    590              {
    591                if ( ((dstAddr->addrMode == AddrGroup)
    592                        && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
    593                        && (dstIdx == BindingTable[x].dstIdx))
    594                   || ((dstAddr->addrMode != AddrGroup)
    595                       && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
    596                       && (dstIdx == BindingTable[x].dstIdx) && (BindingTable[x].dstEP == dstEpInt)) )
   \   00008D   8E82         MOV       DPL,R6
   \   00008F   8F83         MOV       DPH,R7
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   6401         XRL       A,#0x1
   \   00009C   705B         JNZ       ??bindFindExisting_8
   \   00009E   E5..         MOV       A,?V2
   \   0000A0   F8           MOV       R0,A
   \   0000A1   7900         MOV       R1,#0x0
   \   0000A3   E8           MOV       A,R0
   \   0000A4   75F00E       MOV       B,#0xe
   \   0000A7   A4           MUL       AB
   \   0000A8   C8           XCH       A,R0
   \   0000A9   AAF0         MOV       R2,B
   \   0000AB   75F000       MOV       B,#0x0
   \   0000AE   A4           MUL       AB
   \   0000AF   2A           ADD       A,R2
   \   0000B0   FA           MOV       R2,A
   \   0000B1   75F00E       MOV       B,#0xe
   \   0000B4   E9           MOV       A,R1
   \   0000B5   A4           MUL       AB
   \   0000B6   2A           ADD       A,R2
   \   0000B7   F9           MOV       R1,A
   \   0000B8   74..         MOV       A,#(BindingTable + 1) & 0xff
   \   0000BA   28           ADD       A,R0
   \   0000BB   F582         MOV       DPL,A
   \   0000BD   74..         MOV       A,#((BindingTable + 1) >> 8) & 0xff
   \   0000BF   39           ADDC      A,R1
   \   0000C0   F583         MOV       DPH,A
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   6401         XRL       A,#0x1
   \   0000C5   7032         JNZ       ??bindFindExisting_8
   \   0000C7   E5..         MOV       A,?V2
   \   0000C9   F8           MOV       R0,A
   \   0000CA   7900         MOV       R1,#0x0
   \   0000CC   E8           MOV       A,R0
   \   0000CD   75F00E       MOV       B,#0xe
   \   0000D0   A4           MUL       AB
   \   0000D1   C8           XCH       A,R0
   \   0000D2   AAF0         MOV       R2,B
   \   0000D4   75F000       MOV       B,#0x0
   \   0000D7   A4           MUL       AB
   \   0000D8   2A           ADD       A,R2
   \   0000D9   FA           MOV       R2,A
   \   0000DA   75F00E       MOV       B,#0xe
   \   0000DD   E9           MOV       A,R1
   \   0000DE   A4           MUL       AB
   \   0000DF   2A           ADD       A,R2
   \   0000E0   F9           MOV       R1,A
   \   0000E1   74..         MOV       A,#(BindingTable + 2) & 0xff
   \   0000E3   28           ADD       A,R0
   \   0000E4   F582         MOV       DPL,A
   \   0000E6   74..         MOV       A,#((BindingTable + 2) >> 8) & 0xff
   \   0000E8   39           ADDC      A,R1
   \   0000E9   F583         MOV       DPH,A
   \   0000EB   E0           MOVX      A,@DPTR
   \   0000EC   65..         XRL       A,?V0
   \   0000EE   7004         JNZ       ??bindFindExisting_9
   \   0000F0   A3           INC       DPTR
   \   0000F1   E0           MOVX      A,@DPTR
   \   0000F2   65..         XRL       A,?V1
   \                     ??bindFindExisting_9:
   \   0000F4   7003         JNZ       $+5
   \   0000F6   02....       LJMP      ??bindFindExisting_10 & 0xFFFF
   \                     ??bindFindExisting_8:
   \   0000F9   8E82         MOV       DPL,R6
   \   0000FB   8F83         MOV       DPH,R7
   \   0000FD   A3           INC       DPTR
   \   0000FE   A3           INC       DPTR
   \   0000FF   A3           INC       DPTR
   \   000100   A3           INC       DPTR
   \   000101   A3           INC       DPTR
   \   000102   A3           INC       DPTR
   \   000103   A3           INC       DPTR
   \   000104   A3           INC       DPTR
   \   000105   E0           MOVX      A,@DPTR
   \   000106   6401         XRL       A,#0x1
   \   000108   7003         JNZ       $+5
   \   00010A   02....       LJMP      ??bindFindExisting_7 & 0xFFFF
   \   00010D   E5..         MOV       A,?V2
   \   00010F   F8           MOV       R0,A
   \   000110   7900         MOV       R1,#0x0
   \   000112   E8           MOV       A,R0
   \   000113   75F00E       MOV       B,#0xe
   \   000116   A4           MUL       AB
   \   000117   C8           XCH       A,R0
   \   000118   AAF0         MOV       R2,B
   \   00011A   75F000       MOV       B,#0x0
   \   00011D   A4           MUL       AB
   \   00011E   2A           ADD       A,R2
   \   00011F   FA           MOV       R2,A
   \   000120   75F00E       MOV       B,#0xe
   \   000123   E9           MOV       A,R1
   \   000124   A4           MUL       AB
   \   000125   2A           ADD       A,R2
   \   000126   F9           MOV       R1,A
   \   000127   74..         MOV       A,#(BindingTable + 1) & 0xff
   \   000129   28           ADD       A,R0
   \   00012A   F582         MOV       DPL,A
   \   00012C   74..         MOV       A,#((BindingTable + 1) >> 8) & 0xff
   \   00012E   39           ADDC      A,R1
   \   00012F   F583         MOV       DPH,A
   \   000131   E0           MOVX      A,@DPTR
   \   000132   707C         JNZ       ??bindFindExisting_7
   \   000134   E5..         MOV       A,?V2
   \   000136   F8           MOV       R0,A
   \   000137   7900         MOV       R1,#0x0
   \   000139   E8           MOV       A,R0
   \   00013A   75F00E       MOV       B,#0xe
   \   00013D   A4           MUL       AB
   \   00013E   C8           XCH       A,R0
   \   00013F   AAF0         MOV       R2,B
   \   000141   75F000       MOV       B,#0x0
   \   000144   A4           MUL       AB
   \   000145   2A           ADD       A,R2
   \   000146   FA           MOV       R2,A
   \   000147   75F00E       MOV       B,#0xe
   \   00014A   E9           MOV       A,R1
   \   00014B   A4           MUL       AB
   \   00014C   2A           ADD       A,R2
   \   00014D   F9           MOV       R1,A
   \   00014E   74..         MOV       A,#(BindingTable + 2) & 0xff
   \   000150   28           ADD       A,R0
   \   000151   F582         MOV       DPL,A
   \   000153   74..         MOV       A,#((BindingTable + 2) >> 8) & 0xff
   \   000155   39           ADDC      A,R1
   \   000156   F583         MOV       DPH,A
   \   000158   E0           MOVX      A,@DPTR
   \   000159   65..         XRL       A,?V0
   \   00015B   7004         JNZ       ??bindFindExisting_11
   \   00015D   A3           INC       DPTR
   \   00015E   E0           MOVX      A,@DPTR
   \   00015F   65..         XRL       A,?V1
   \                     ??bindFindExisting_11:
   \   000161   704D         JNZ       ??bindFindExisting_7
   \   000163   E5..         MOV       A,?V2
   \   000165   F8           MOV       R0,A
   \   000166   7900         MOV       R1,#0x0
   \   000168   E8           MOV       A,R0
   \   000169   75F00E       MOV       B,#0xe
   \   00016C   A4           MUL       AB
   \   00016D   C8           XCH       A,R0
   \   00016E   AAF0         MOV       R2,B
   \   000170   75F000       MOV       B,#0x0
   \   000173   A4           MUL       AB
   \   000174   2A           ADD       A,R2
   \   000175   FA           MOV       R2,A
   \   000176   75F00E       MOV       B,#0xe
   \   000179   E9           MOV       A,R1
   \   00017A   A4           MUL       AB
   \   00017B   2A           ADD       A,R2
   \   00017C   F9           MOV       R1,A
   \   00017D   74..         MOV       A,#(BindingTable + 4) & 0xff
   \   00017F   28           ADD       A,R0
   \   000180   F582         MOV       DPL,A
   \   000182   74..         MOV       A,#((BindingTable + 4) >> 8) & 0xff
   \   000184   39           ADDC      A,R1
   \   000185   F583         MOV       DPH,A
   \   000187   E0           MOVX      A,@DPTR
   \   000188   65..         XRL       A,?V4
   \   00018A   7024         JNZ       ??bindFindExisting_7
    597                {
    598                  return ( &BindingTable[x] );
   \                     ??bindFindExisting_10:
   \   00018C   E5..         MOV       A,?V2
   \   00018E   F8           MOV       R0,A
   \   00018F   7900         MOV       R1,#0x0
   \   000191   E8           MOV       A,R0
   \   000192   75F00E       MOV       B,#0xe
   \   000195   A4           MUL       AB
   \   000196   C8           XCH       A,R0
   \   000197   AAF0         MOV       R2,B
   \   000199   75F000       MOV       B,#0x0
   \   00019C   A4           MUL       AB
   \   00019D   2A           ADD       A,R2
   \   00019E   FA           MOV       R2,A
   \   00019F   75F00E       MOV       B,#0xe
   \   0001A2   E9           MOV       A,R1
   \   0001A3   A4           MUL       AB
   \   0001A4   2A           ADD       A,R2
   \   0001A5   F9           MOV       R1,A
   \   0001A6   74..         MOV       A,#BindingTable & 0xff
   \   0001A8   28           ADD       A,R0
   \   0001A9   FA           MOV       R2,A
   \   0001AA   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   0001AC   39           ADDC      A,R1
   \   0001AD   FB           MOV       R3,A
   \   0001AE   8009         SJMP      ??bindFindExisting_4
    599                }
    600              }
    601            }
   \                     ??bindFindExisting_7:
   \   0001B0   05..         INC       ?V2
   \   0001B2   02....       LJMP      ??bindFindExisting_5 & 0xFFFF
    602          
    603            return ( (BindingEntry_t *)NULL );
   \                     ??bindFindExisting_6:
   \   0001B5   7A00         MOV       R2,#0x0
   \   0001B7   7B00         MOV       R3,#0x0
   \                     ??bindFindExisting_4:
   \   0001B9   7F08         MOV       R7,#0x8
   \   0001BB   02....       LJMP      ?BANKED_LEAVE_XDATA
    604          }
    605          
    606          /*********************************************************************
    607           * @fn       bindRemoveDev()
    608           *
    609           * @brief
    610           *
    611           *   Remove all bind(s) entries associated to a device address (destination).
    612           *   Updates binding table.
    613           *
    614           * @param   Addr - address of device to be removed from Binding Table
    615           *
    616           * @return  none
    617           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    618          void bindRemoveDev( zAddrType_t *Addr )
   \                     bindRemoveDev:
    619          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    620            uint16 idx;
    621            bindTableIndex_t x;
    622          
    623            if ( Addr->addrMode == AddrGroup )
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   6401         XRL       A,#0x1
   \   000018   700D         JNZ       ??bindRemoveDev_0
    624            {
    625              idx = Addr->addr.shortAddr;
   \   00001A   8E82         MOV       DPL,R6
   \   00001C   8F83         MOV       DPH,R7
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V0,A
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F5..         MOV       ?V1,A
   \   000025   8011         SJMP      ??bindRemoveDev_1
    626            }
    627            else
    628            {
    629              idx = bindingAddrMgsHelperFind( Addr );
   \                     ??bindRemoveDev_0:
   \   000027                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   000027   EE           MOV       A,R6
   \   000028   FA           MOV       R2,A
   \   000029   EF           MOV       A,R7
   \   00002A   FB           MOV       R3,A
   \   00002B   12....       LCALL     `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   00002E   8A..         MOV       ?V4,R2
   \   000030   8B..         MOV       ?V5,R3
   \   000032   85....       MOV       ?V0,?V4
   \   000035   85....       MOV       ?V1,?V5
    630            }
    631          
    632            if ( idx == INVALID_NODE_ADDR )
   \                     ??bindRemoveDev_1:
   \   000038   74FE         MOV       A,#-0x2
   \   00003A   65..         XRL       A,?V0
   \   00003C   7004         JNZ       ??bindRemoveDev_2
   \   00003E   74FF         MOV       A,#-0x1
   \   000040   65..         XRL       A,?V1
   \                     ??bindRemoveDev_2:
   \   000042   7003         JNZ       $+5
   \   000044   02....       LJMP      ??bindRemoveDev_3 & 0xFFFF
    633            {
    634              return;
    635            }
    636          
    637            // Removes all the entries that match the destination Address/Index
    638            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000047   75..00       MOV       ?V2,#0x0
   \                     ??bindRemoveDev_4:
   \   00004A   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00004D   E4           CLR       A
   \   00004E   93           MOVC      A,@A+DPTR
   \   00004F   F8           MOV       R0,A
   \   000050   E5..         MOV       A,?V2
   \   000052   C3           CLR       C
   \   000053   98           SUBB      A,R0
   \   000054   4003         JC        $+5
   \   000056   02....       LJMP      ??bindRemoveDev_5 & 0xFFFF
    639            {
    640              if ( ( (Addr->addrMode == AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
    641                                                   && (BindingTable[x].dstIdx == idx) ) ||
    642                   ( (Addr->addrMode != AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
    643                                                   && (BindingTable[x].dstIdx == idx) ) )
   \   000059   8E82         MOV       DPL,R6
   \   00005B   8F83         MOV       DPH,R7
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   E0           MOVX      A,@DPTR
   \   000066   6401         XRL       A,#0x1
   \   000068   7058         JNZ       ??bindRemoveDev_6
   \   00006A   E5..         MOV       A,?V2
   \   00006C   F8           MOV       R0,A
   \   00006D   7900         MOV       R1,#0x0
   \   00006F   E8           MOV       A,R0
   \   000070   75F00E       MOV       B,#0xe
   \   000073   A4           MUL       AB
   \   000074   C8           XCH       A,R0
   \   000075   AAF0         MOV       R2,B
   \   000077   75F000       MOV       B,#0x0
   \   00007A   A4           MUL       AB
   \   00007B   2A           ADD       A,R2
   \   00007C   FA           MOV       R2,A
   \   00007D   75F00E       MOV       B,#0xe
   \   000080   E9           MOV       A,R1
   \   000081   A4           MUL       AB
   \   000082   2A           ADD       A,R2
   \   000083   F9           MOV       R1,A
   \   000084   74..         MOV       A,#(BindingTable + 1) & 0xff
   \   000086   28           ADD       A,R0
   \   000087   F582         MOV       DPL,A
   \   000089   74..         MOV       A,#((BindingTable + 1) >> 8) & 0xff
   \   00008B   39           ADDC      A,R1
   \   00008C   F583         MOV       DPH,A
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   6401         XRL       A,#0x1
   \   000091   702F         JNZ       ??bindRemoveDev_6
   \   000093   E5..         MOV       A,?V2
   \   000095   F8           MOV       R0,A
   \   000096   7900         MOV       R1,#0x0
   \   000098   E8           MOV       A,R0
   \   000099   75F00E       MOV       B,#0xe
   \   00009C   A4           MUL       AB
   \   00009D   C8           XCH       A,R0
   \   00009E   AAF0         MOV       R2,B
   \   0000A0   75F000       MOV       B,#0x0
   \   0000A3   A4           MUL       AB
   \   0000A4   2A           ADD       A,R2
   \   0000A5   FA           MOV       R2,A
   \   0000A6   75F00E       MOV       B,#0xe
   \   0000A9   E9           MOV       A,R1
   \   0000AA   A4           MUL       AB
   \   0000AB   2A           ADD       A,R2
   \   0000AC   F9           MOV       R1,A
   \   0000AD   74..         MOV       A,#(BindingTable + 2) & 0xff
   \   0000AF   28           ADD       A,R0
   \   0000B0   F582         MOV       DPL,A
   \   0000B2   74..         MOV       A,#((BindingTable + 2) >> 8) & 0xff
   \   0000B4   39           ADDC      A,R1
   \   0000B5   F583         MOV       DPH,A
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   65..         XRL       A,?V0
   \   0000BA   7004         JNZ       ??bindRemoveDev_7
   \   0000BC   A3           INC       DPTR
   \   0000BD   E0           MOVX      A,@DPTR
   \   0000BE   65..         XRL       A,?V1
   \                     ??bindRemoveDev_7:
   \   0000C0   6067         JZ        ??bindRemoveDev_8
   \                     ??bindRemoveDev_6:
   \   0000C2   8E82         MOV       DPL,R6
   \   0000C4   8F83         MOV       DPH,R7
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   A3           INC       DPTR
   \   0000C9   A3           INC       DPTR
   \   0000CA   A3           INC       DPTR
   \   0000CB   A3           INC       DPTR
   \   0000CC   A3           INC       DPTR
   \   0000CD   A3           INC       DPTR
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   6401         XRL       A,#0x1
   \   0000D1   607C         JZ        ??bindRemoveDev_9
   \   0000D3   E5..         MOV       A,?V2
   \   0000D5   F8           MOV       R0,A
   \   0000D6   7900         MOV       R1,#0x0
   \   0000D8   E8           MOV       A,R0
   \   0000D9   75F00E       MOV       B,#0xe
   \   0000DC   A4           MUL       AB
   \   0000DD   C8           XCH       A,R0
   \   0000DE   AAF0         MOV       R2,B
   \   0000E0   75F000       MOV       B,#0x0
   \   0000E3   A4           MUL       AB
   \   0000E4   2A           ADD       A,R2
   \   0000E5   FA           MOV       R2,A
   \   0000E6   75F00E       MOV       B,#0xe
   \   0000E9   E9           MOV       A,R1
   \   0000EA   A4           MUL       AB
   \   0000EB   2A           ADD       A,R2
   \   0000EC   F9           MOV       R1,A
   \   0000ED   74..         MOV       A,#(BindingTable + 1) & 0xff
   \   0000EF   28           ADD       A,R0
   \   0000F0   F582         MOV       DPL,A
   \   0000F2   74..         MOV       A,#((BindingTable + 1) >> 8) & 0xff
   \   0000F4   39           ADDC      A,R1
   \   0000F5   F583         MOV       DPH,A
   \   0000F7   E0           MOVX      A,@DPTR
   \   0000F8   7055         JNZ       ??bindRemoveDev_9
   \   0000FA   E5..         MOV       A,?V2
   \   0000FC   F8           MOV       R0,A
   \   0000FD   7900         MOV       R1,#0x0
   \   0000FF   E8           MOV       A,R0
   \   000100   75F00E       MOV       B,#0xe
   \   000103   A4           MUL       AB
   \   000104   C8           XCH       A,R0
   \   000105   AAF0         MOV       R2,B
   \   000107   75F000       MOV       B,#0x0
   \   00010A   A4           MUL       AB
   \   00010B   2A           ADD       A,R2
   \   00010C   FA           MOV       R2,A
   \   00010D   75F00E       MOV       B,#0xe
   \   000110   E9           MOV       A,R1
   \   000111   A4           MUL       AB
   \   000112   2A           ADD       A,R2
   \   000113   F9           MOV       R1,A
   \   000114   74..         MOV       A,#(BindingTable + 2) & 0xff
   \   000116   28           ADD       A,R0
   \   000117   F582         MOV       DPL,A
   \   000119   74..         MOV       A,#((BindingTable + 2) >> 8) & 0xff
   \   00011B   39           ADDC      A,R1
   \   00011C   F583         MOV       DPH,A
   \   00011E   E0           MOVX      A,@DPTR
   \   00011F   65..         XRL       A,?V0
   \   000121   7004         JNZ       ??bindRemoveDev_10
   \   000123   A3           INC       DPTR
   \   000124   E0           MOVX      A,@DPTR
   \   000125   65..         XRL       A,?V1
   \                     ??bindRemoveDev_10:
   \   000127   7026         JNZ       ??bindRemoveDev_9
    644              {
    645                bindRemoveEntry( &BindingTable[x] );
   \                     ??bindRemoveDev_8:
   \   000129                ; Setup parameters for call to function bindRemoveEntry
   \   000129   E5..         MOV       A,?V2
   \   00012B   F8           MOV       R0,A
   \   00012C   7900         MOV       R1,#0x0
   \   00012E   E8           MOV       A,R0
   \   00012F   75F00E       MOV       B,#0xe
   \   000132   A4           MUL       AB
   \   000133   C8           XCH       A,R0
   \   000134   AAF0         MOV       R2,B
   \   000136   75F000       MOV       B,#0x0
   \   000139   A4           MUL       AB
   \   00013A   2A           ADD       A,R2
   \   00013B   FA           MOV       R2,A
   \   00013C   75F00E       MOV       B,#0xe
   \   00013F   E9           MOV       A,R1
   \   000140   A4           MUL       AB
   \   000141   2A           ADD       A,R2
   \   000142   F9           MOV       R1,A
   \   000143   74..         MOV       A,#BindingTable & 0xff
   \   000145   28           ADD       A,R0
   \   000146   FA           MOV       R2,A
   \   000147   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   000149   39           ADDC      A,R1
   \   00014A   FB           MOV       R3,A
   \   00014B   12....       LCALL     `??bindRemoveEntry::?relay`; Banked call to: bindRemoveEntry
   \   00014E   E9           MOV       A,R1
    646              }
    647            }
   \                     ??bindRemoveDev_9:
   \   00014F   05..         INC       ?V2
   \   000151   02....       LJMP      ??bindRemoveDev_4 & 0xFFFF
    648          
    649            // If this is the last Bind Entry for that idx then clear BINDING
    650            // user from Address Manager
    651            bindAddressClear( idx );
   \                     ??bindRemoveDev_5:
   \   000154                ; Setup parameters for call to function bindAddressClear
   \   000154   AA..         MOV       R2,?V0
   \   000156   AB..         MOV       R3,?V1
   \   000158   12....       LCALL     `??bindAddressClear::?relay`; Banked call to: bindAddressClear
    652          }
   \                     ??bindRemoveDev_3:
   \   00015B   7F06         MOV       R7,#0x6
   \   00015D   02....       LJMP      ?BANKED_LEAVE_XDATA
    653          
    654          /*********************************************************************
    655           * @fn       bindRemoveSrcDev()
    656           *
    657           * @brief
    658           *
    659           *   Remove binds(s) associated to device address (source).
    660           *   Updates binding table.
    661           *
    662           * @param   ep - endpoint to remove, 0xFF is all endpoints
    663           *
    664           * @return  none
    665           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    666          void bindRemoveSrcDev( uint8 ep )
   \                     bindRemoveSrcDev:
    667          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V1,R1
    668            bindTableIndex_t x;
    669          
    670            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000007   75..00       MOV       ?V0,#0x0
   \                     ??bindRemoveSrcDev_0:
   \   00000A   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00000D   E4           CLR       A
   \   00000E   93           MOVC      A,@A+DPTR
   \   00000F   F8           MOV       R0,A
   \   000010   E5..         MOV       A,?V0
   \   000012   C3           CLR       C
   \   000013   98           SUBB      A,R0
   \   000014   4003         JC        $+5
   \   000016   02....       LJMP      ??bindRemoveSrcDev_1 & 0xFFFF
    671            {
    672              if ( (ep == 0xFF) || (ep == BindingTable[x].srcEP) )
   \   000019   74FF         MOV       A,#-0x1
   \   00001B   65..         XRL       A,?V1
   \   00001D   6029         JZ        ??bindRemoveSrcDev_2
   \   00001F   E5..         MOV       A,?V0
   \   000021   F8           MOV       R0,A
   \   000022   7900         MOV       R1,#0x0
   \   000024   E8           MOV       A,R0
   \   000025   75F00E       MOV       B,#0xe
   \   000028   A4           MUL       AB
   \   000029   C8           XCH       A,R0
   \   00002A   AAF0         MOV       R2,B
   \   00002C   75F000       MOV       B,#0x0
   \   00002F   A4           MUL       AB
   \   000030   2A           ADD       A,R2
   \   000031   FA           MOV       R2,A
   \   000032   75F00E       MOV       B,#0xe
   \   000035   E9           MOV       A,R1
   \   000036   A4           MUL       AB
   \   000037   2A           ADD       A,R2
   \   000038   F9           MOV       R1,A
   \   000039   74..         MOV       A,#BindingTable & 0xff
   \   00003B   28           ADD       A,R0
   \   00003C   F582         MOV       DPL,A
   \   00003E   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   000040   39           ADDC      A,R1
   \   000041   F583         MOV       DPH,A
   \   000043   E0           MOVX      A,@DPTR
   \   000044   65..         XRL       A,?V1
   \   000046   7056         JNZ       ??bindRemoveSrcDev_3
    673              {
    674                uint16 idx = BindingTable[x].dstIdx;
   \                     ??bindRemoveSrcDev_2:
   \   000048   E5..         MOV       A,?V0
   \   00004A   F8           MOV       R0,A
   \   00004B   7900         MOV       R1,#0x0
   \   00004D   E8           MOV       A,R0
   \   00004E   75F00E       MOV       B,#0xe
   \   000051   A4           MUL       AB
   \   000052   C8           XCH       A,R0
   \   000053   AAF0         MOV       R2,B
   \   000055   75F000       MOV       B,#0x0
   \   000058   A4           MUL       AB
   \   000059   2A           ADD       A,R2
   \   00005A   FA           MOV       R2,A
   \   00005B   75F00E       MOV       B,#0xe
   \   00005E   E9           MOV       A,R1
   \   00005F   A4           MUL       AB
   \   000060   2A           ADD       A,R2
   \   000061   F9           MOV       R1,A
   \   000062   74..         MOV       A,#(BindingTable + 2) & 0xff
   \   000064   28           ADD       A,R0
   \   000065   F582         MOV       DPL,A
   \   000067   74..         MOV       A,#((BindingTable + 2) >> 8) & 0xff
   \   000069   39           ADDC      A,R1
   \   00006A   F583         MOV       DPH,A
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   FE           MOV       R6,A
   \   00006E   A3           INC       DPTR
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   FF           MOV       R7,A
    675          
    676                bindRemoveEntry( &BindingTable[x] );
   \   000071                ; Setup parameters for call to function bindRemoveEntry
   \   000071   E5..         MOV       A,?V0
   \   000073   F8           MOV       R0,A
   \   000074   7900         MOV       R1,#0x0
   \   000076   E8           MOV       A,R0
   \   000077   75F00E       MOV       B,#0xe
   \   00007A   A4           MUL       AB
   \   00007B   C8           XCH       A,R0
   \   00007C   AAF0         MOV       R2,B
   \   00007E   75F000       MOV       B,#0x0
   \   000081   A4           MUL       AB
   \   000082   2A           ADD       A,R2
   \   000083   FA           MOV       R2,A
   \   000084   75F00E       MOV       B,#0xe
   \   000087   E9           MOV       A,R1
   \   000088   A4           MUL       AB
   \   000089   2A           ADD       A,R2
   \   00008A   F9           MOV       R1,A
   \   00008B   74..         MOV       A,#BindingTable & 0xff
   \   00008D   28           ADD       A,R0
   \   00008E   FA           MOV       R2,A
   \   00008F   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   000091   39           ADDC      A,R1
   \   000092   FB           MOV       R3,A
   \   000093   12....       LCALL     `??bindRemoveEntry::?relay`; Banked call to: bindRemoveEntry
   \   000096   E9           MOV       A,R1
    677          
    678                // If this is the last Bind Entry for that idx then clear BINDING
    679                // user from Address Manager
    680                bindAddressClear( idx );
   \   000097                ; Setup parameters for call to function bindAddressClear
   \   000097   EE           MOV       A,R6
   \   000098   FA           MOV       R2,A
   \   000099   EF           MOV       A,R7
   \   00009A   FB           MOV       R3,A
   \   00009B   12....       LCALL     `??bindAddressClear::?relay`; Banked call to: bindAddressClear
    681              }
    682            }
   \                     ??bindRemoveSrcDev_3:
   \   00009E   05..         INC       ?V0
   \   0000A0   02....       LJMP      ??bindRemoveSrcDev_0 & 0xFFFF
    683          }
   \                     ??bindRemoveSrcDev_1:
   \   0000A3   7F02         MOV       R7,#0x2
   \   0000A5   02....       LJMP      ?BANKED_LEAVE_XDATA
    684          
    685          /*********************************************************************
    686           * @fn          bindNumBoundTo
    687           *
    688           * @brief       Calculate the number items this device is bound to.
    689           *              When srcMode is set to TRUE, discard what value devAddr
    690           *              has, it returns number count bound to the local dev.
    691           *
    692           * @param       devAddr - device Address
    693           * @param       devEP - endpoint
    694           * @param       srcMode - TRUE - assume devHandle is a source address
    695           *                        FALSE - destination address
    696           *
    697           * @return      status
    698           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    699          byte bindNumBoundTo( zAddrType_t *devAddr, byte devEpInt, byte srcMode )
   \                     bindNumBoundTo:
    700          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V6,R1
   \   00000B   8C..         MOV       ?V7,R4
    701            BindingEntry_t *pBind;
    702            uint16 idx;
    703            byte   num;
    704            bindTableIndex_t x;
    705          
    706            // Init
    707            num = 0;
   \   00000D   75..00       MOV       ?V0,#0x0
    708          
    709            if ( devAddr->addrMode == AddrGroup )
   \   000010   8E82         MOV       DPL,R6
   \   000012   8F83         MOV       DPH,R7
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   6401         XRL       A,#0x1
   \   00001F   700D         JNZ       ??bindNumBoundTo_0
    710            {
    711              idx = devAddr->addr.shortAddr;
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F5..         MOV       ?V2,A
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F5..         MOV       ?V3,A
   \   00002C   8011         SJMP      ??bindNumBoundTo_1
    712            }
    713            else
    714            {
    715              idx = bindingAddrMgsHelperFind( devAddr );
   \                     ??bindNumBoundTo_0:
   \   00002E                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   00002E   EE           MOV       A,R6
   \   00002F   FA           MOV       R2,A
   \   000030   EF           MOV       A,R7
   \   000031   FB           MOV       R3,A
   \   000032   12....       LCALL     `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   000035   8A..         MOV       ?V8,R2
   \   000037   8B..         MOV       ?V9,R3
   \   000039   85....       MOV       ?V2,?V8
   \   00003C   85....       MOV       ?V3,?V9
    716            }
    717          
    718            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \                     ??bindNumBoundTo_1:
   \   00003F   75..00       MOV       ?V1,#0x0
   \                     ??bindNumBoundTo_2:
   \   000042   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000045   E4           CLR       A
   \   000046   93           MOVC      A,@A+DPTR
   \   000047   F8           MOV       R0,A
   \   000048   E5..         MOV       A,?V1
   \   00004A   C3           CLR       C
   \   00004B   98           SUBB      A,R0
   \   00004C   4003         JC        $+5
   \   00004E   02....       LJMP      ??bindNumBoundTo_3 & 0xFFFF
    719            {
    720              pBind = &BindingTable[x];
   \   000051   E5..         MOV       A,?V1
   \   000053   F8           MOV       R0,A
   \   000054   7900         MOV       R1,#0x0
   \   000056   E8           MOV       A,R0
   \   000057   75F00E       MOV       B,#0xe
   \   00005A   A4           MUL       AB
   \   00005B   C8           XCH       A,R0
   \   00005C   AAF0         MOV       R2,B
   \   00005E   75F000       MOV       B,#0x0
   \   000061   A4           MUL       AB
   \   000062   2A           ADD       A,R2
   \   000063   FA           MOV       R2,A
   \   000064   75F00E       MOV       B,#0xe
   \   000067   E9           MOV       A,R1
   \   000068   A4           MUL       AB
   \   000069   2A           ADD       A,R2
   \   00006A   F9           MOV       R1,A
   \   00006B   74..         MOV       A,#BindingTable & 0xff
   \   00006D   28           ADD       A,R0
   \   00006E   F8           MOV       R0,A
   \   00006F   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   000071   39           ADDC      A,R1
   \   000072   F9           MOV       R1,A
   \   000073   88..         MOV       ?V4,R0
   \   000075   89..         MOV       ?V5,R1
    721              if ( srcMode )
   \   000077   E5..         MOV       A,?V7
   \   000079   600F         JZ        ??bindNumBoundTo_4
    722              {
    723                if ( pBind->srcEP == devEpInt )
   \   00007B   85..82       MOV       DPL,?V4
   \   00007E   85..83       MOV       DPH,?V5
   \   000081   E0           MOVX      A,@DPTR
   \   000082   65..         XRL       A,?V6
   \   000084   7073         JNZ       ??bindNumBoundTo_5
    724                {
    725                  num++;
   \   000086   05..         INC       ?V0
   \   000088   806F         SJMP      ??bindNumBoundTo_5
    726                }
    727              }
    728              else
    729              {
    730                if ( ((devAddr->addrMode == AddrGroup)
    731                        && (pBind->dstGroupMode == DSTGROUPMODE_GROUP) && (pBind->dstIdx == idx))
    732                    || ((devAddr->addrMode != AddrGroup) && (pBind->dstGroupMode == DSTGROUPMODE_ADDR)
    733                                          && (pBind->dstIdx == idx) && (pBind->dstEP == devEpInt)) )
   \                     ??bindNumBoundTo_4:
   \   00008A   8E82         MOV       DPL,R6
   \   00008C   8F83         MOV       DPH,R7
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   E0           MOVX      A,@DPTR
   \   000097   6401         XRL       A,#0x1
   \   000099   701F         JNZ       ??bindNumBoundTo_6
   \   00009B   85..82       MOV       DPL,?V4
   \   00009E   85..83       MOV       DPH,?V5
   \   0000A1   A3           INC       DPTR
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   6401         XRL       A,#0x1
   \   0000A5   7013         JNZ       ??bindNumBoundTo_6
   \   0000A7   85..82       MOV       DPL,?V4
   \   0000AA   85..83       MOV       DPH,?V5
   \   0000AD   A3           INC       DPTR
   \   0000AE   A3           INC       DPTR
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   65..         XRL       A,?V2
   \   0000B2   7004         JNZ       ??bindNumBoundTo_7
   \   0000B4   A3           INC       DPTR
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   65..         XRL       A,?V3
   \                     ??bindNumBoundTo_7:
   \   0000B8   603D         JZ        ??bindNumBoundTo_8
   \                     ??bindNumBoundTo_6:
   \   0000BA   8E82         MOV       DPL,R6
   \   0000BC   8F83         MOV       DPH,R7
   \   0000BE   A3           INC       DPTR
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   A3           INC       DPTR
   \   0000C3   A3           INC       DPTR
   \   0000C4   A3           INC       DPTR
   \   0000C5   A3           INC       DPTR
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   6401         XRL       A,#0x1
   \   0000C9   602E         JZ        ??bindNumBoundTo_5
   \   0000CB   85..82       MOV       DPL,?V4
   \   0000CE   85..83       MOV       DPH,?V5
   \   0000D1   A3           INC       DPTR
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   7024         JNZ       ??bindNumBoundTo_5
   \   0000D5   85..82       MOV       DPL,?V4
   \   0000D8   85..83       MOV       DPH,?V5
   \   0000DB   A3           INC       DPTR
   \   0000DC   A3           INC       DPTR
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   65..         XRL       A,?V2
   \   0000E0   7004         JNZ       ??bindNumBoundTo_9
   \   0000E2   A3           INC       DPTR
   \   0000E3   E0           MOVX      A,@DPTR
   \   0000E4   65..         XRL       A,?V3
   \                     ??bindNumBoundTo_9:
   \   0000E6   7011         JNZ       ??bindNumBoundTo_5
   \   0000E8   85..82       MOV       DPL,?V4
   \   0000EB   85..83       MOV       DPH,?V5
   \   0000EE   A3           INC       DPTR
   \   0000EF   A3           INC       DPTR
   \   0000F0   A3           INC       DPTR
   \   0000F1   A3           INC       DPTR
   \   0000F2   E0           MOVX      A,@DPTR
   \   0000F3   65..         XRL       A,?V6
   \   0000F5   7002         JNZ       ??bindNumBoundTo_5
    734                {
    735                  num++;
   \                     ??bindNumBoundTo_8:
   \   0000F7   05..         INC       ?V0
    736                }
    737              }
    738            }
   \                     ??bindNumBoundTo_5:
   \   0000F9   05..         INC       ?V1
   \   0000FB   02....       LJMP      ??bindNumBoundTo_2 & 0xFFFF
    739          
    740            return num;
   \                     ??bindNumBoundTo_3:
   \   0000FE   A9..         MOV       R1,?V0
   \   000100   7F0A         MOV       R7,#0xa
   \   000102   02....       LJMP      ?BANKED_LEAVE_XDATA
    741          }
    742          
    743          /*********************************************************************
    744           * @fn          bindNumReflections
    745           *
    746           * @brief       Counts the number of reflections needed for a
    747           *              endpoint and cluster ID combo.
    748           *
    749           * @param       ep - source endpoint
    750           * @param       clusterID - matching clusterID
    751           *
    752           * @return      number of reflections needed.
    753           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    754          uint16 bindNumReflections( uint8 ep, uint16 clusterID )
   \                     bindNumReflections:
    755          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V6,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
    756            bindTableIndex_t x;
    757            BindingEntry_t *pBind;
    758            uint16 cnt = 0;
   \   00000B   7E00         MOV       R6,#0x0
   \   00000D   7F00         MOV       R7,#0x0
    759            uint8 bindEP;
    760          
    761            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   00000F   75..00       MOV       ?V4,#0x0
   \                     ??bindNumReflections_0:
   \   000012   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000015   E4           CLR       A
   \   000016   93           MOVC      A,@A+DPTR
   \   000017   F8           MOV       R0,A
   \   000018   E5..         MOV       A,?V4
   \   00001A   C3           CLR       C
   \   00001B   98           SUBB      A,R0
   \   00001C   504C         JNC       ??bindNumReflections_1
    762            {
    763              pBind = &BindingTable[x];
   \   00001E   E5..         MOV       A,?V4
   \   000020   F8           MOV       R0,A
   \   000021   7900         MOV       R1,#0x0
   \   000023   E8           MOV       A,R0
   \   000024   75F00E       MOV       B,#0xe
   \   000027   A4           MUL       AB
   \   000028   C8           XCH       A,R0
   \   000029   AAF0         MOV       R2,B
   \   00002B   75F000       MOV       B,#0x0
   \   00002E   A4           MUL       AB
   \   00002F   2A           ADD       A,R2
   \   000030   FA           MOV       R2,A
   \   000031   75F00E       MOV       B,#0xe
   \   000034   E9           MOV       A,R1
   \   000035   A4           MUL       AB
   \   000036   2A           ADD       A,R2
   \   000037   F9           MOV       R1,A
   \   000038   74..         MOV       A,#BindingTable & 0xff
   \   00003A   28           ADD       A,R0
   \   00003B   F8           MOV       R0,A
   \   00003C   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   00003E   39           ADDC      A,R1
   \   00003F   F9           MOV       R1,A
   \   000040   88..         MOV       ?V2,R0
   \   000042   89..         MOV       ?V3,R1
    764              bindEP = pBind->srcEP;
   \   000044   85..82       MOV       DPL,?V2
   \   000047   85..83       MOV       DPH,?V3
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F5..         MOV       ?V5,A
    765          
    766              if ( (bindEP == ep) && (bindIsClusterIDinList( pBind, clusterID )) )
   \   00004D   E5..         MOV       A,?V6
   \   00004F   65..         XRL       A,?V5
   \   000051   7013         JNZ       ??bindNumReflections_2
   \   000053                ; Setup parameters for call to function bindIsClusterIDinList
   \   000053   AC..         MOV       R4,?V0
   \   000055   AD..         MOV       R5,?V1
   \   000057   AA..         MOV       R2,?V2
   \   000059   AB..         MOV       R3,?V3
   \   00005B   12....       LCALL     `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
   \   00005E   E9           MOV       A,R1
   \   00005F   6005         JZ        ??bindNumReflections_2
    767              {
    768                cnt++;
   \   000061   0E           INC       R6
   \   000062   EE           MOV       A,R6
   \   000063   7001         JNZ       ??bindNumReflections_2
   \   000065   0F           INC       R7
    769              }
    770            }
   \                     ??bindNumReflections_2:
   \   000066   05..         INC       ?V4
   \   000068   80A8         SJMP      ??bindNumReflections_0
    771          
    772            return ( cnt );
   \                     ??bindNumReflections_1:
   \   00006A   EE           MOV       A,R6
   \   00006B   FA           MOV       R2,A
   \   00006C   EF           MOV       A,R7
   \   00006D   FB           MOV       R3,A
   \   00006E   7F07         MOV       R7,#0x7
   \   000070   02....       LJMP      ?BANKED_LEAVE_XDATA
    773          }
    774          
    775          /*********************************************************************
    776           * @fn          bindFind
    777           *
    778           * @brief       Finds the binding entry for the source address, endpoint
    779           *              and cluster ID passed in as a parameter.
    780           *
    781           * @param       ep - source endpoint
    782           * @param       clusterID - matching clusterID
    783           * @param       skip - number of matches to skip before returning
    784           *
    785           * @return      pointer to the binding table entry, NULL if not found
    786           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    787          BindingEntry_t *bindFind( uint8 ep, uint16 clusterID, uint8 skipping )
   \                     bindFind:
    788          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V4,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   8C..         MOV       ?V5,R4
    789            BindingEntry_t *pBind;
    790            byte skipped = 0;
   \   00000D   75..00       MOV       ?V2,#0x0
    791            bindTableIndex_t x;
    792          
    793            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000010   75..00       MOV       ?V3,#0x0
   \                     ??bindFind_0:
   \   000013   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000016   E4           CLR       A
   \   000017   93           MOVC      A,@A+DPTR
   \   000018   F8           MOV       R0,A
   \   000019   E5..         MOV       A,?V3
   \   00001B   C3           CLR       C
   \   00001C   98           SUBB      A,R0
   \   00001D   5052         JNC       ??bindFind_1
    794            {
    795              pBind = &BindingTable[x];
   \   00001F   E5..         MOV       A,?V3
   \   000021   F8           MOV       R0,A
   \   000022   7900         MOV       R1,#0x0
   \   000024   E8           MOV       A,R0
   \   000025   75F00E       MOV       B,#0xe
   \   000028   A4           MUL       AB
   \   000029   C8           XCH       A,R0
   \   00002A   AAF0         MOV       R2,B
   \   00002C   75F000       MOV       B,#0x0
   \   00002F   A4           MUL       AB
   \   000030   2A           ADD       A,R2
   \   000031   FA           MOV       R2,A
   \   000032   75F00E       MOV       B,#0xe
   \   000035   E9           MOV       A,R1
   \   000036   A4           MUL       AB
   \   000037   2A           ADD       A,R2
   \   000038   F9           MOV       R1,A
   \   000039   74..         MOV       A,#BindingTable & 0xff
   \   00003B   28           ADD       A,R0
   \   00003C   F8           MOV       R0,A
   \   00003D   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   00003F   39           ADDC      A,R1
   \   000040   F9           MOV       R1,A
   \   000041   E8           MOV       A,R0
   \   000042   FE           MOV       R6,A
   \   000043   E9           MOV       A,R1
   \   000044   FF           MOV       R7,A
    796          
    797              if ( ( pBind->srcEP == ep) && bindIsClusterIDinList( pBind, clusterID ))
   \   000045   8E82         MOV       DPL,R6
   \   000047   8F83         MOV       DPH,R7
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   65..         XRL       A,?V4
   \   00004C   701F         JNZ       ??bindFind_2
   \   00004E                ; Setup parameters for call to function bindIsClusterIDinList
   \   00004E   AC..         MOV       R4,?V0
   \   000050   AD..         MOV       R5,?V1
   \   000052   EE           MOV       A,R6
   \   000053   FA           MOV       R2,A
   \   000054   EF           MOV       A,R7
   \   000055   FB           MOV       R3,A
   \   000056   12....       LCALL     `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
   \   000059   E9           MOV       A,R1
   \   00005A   6011         JZ        ??bindFind_2
    798              {
    799                if ( skipped < skipping )
   \   00005C   E5..         MOV       A,?V2
   \   00005E   C3           CLR       C
   \   00005F   95..         SUBB      A,?V5
   \   000061   5004         JNC       ??bindFind_3
    800                {
    801                  skipped++;
   \   000063   05..         INC       ?V2
   \   000065   8006         SJMP      ??bindFind_2
    802                }
    803                else
    804                {
    805                  return ( pBind );
   \                     ??bindFind_3:
   \   000067   EE           MOV       A,R6
   \   000068   FA           MOV       R2,A
   \   000069   EF           MOV       A,R7
   \   00006A   FB           MOV       R3,A
   \   00006B   8008         SJMP      ??bindFind_4
    806                }
    807              }
    808            }
   \                     ??bindFind_2:
   \   00006D   05..         INC       ?V3
   \   00006F   80A2         SJMP      ??bindFind_0
    809          
    810            return ( (BindingEntry_t *)NULL );
   \                     ??bindFind_1:
   \   000071   7A00         MOV       R2,#0x0
   \   000073   7B00         MOV       R3,#0x0
   \                     ??bindFind_4:
   \   000075   7F06         MOV       R7,#0x6
   \   000077   02....       LJMP      ?BANKED_LEAVE_XDATA
    811          }
    812          
    813          /*********************************************************************
    814           * @fn      bindAddressClear
    815           *
    816           * @brief   Lookup a binding entry by specific Idx, if none is found
    817           *          clears the BINDING user from Address Manager.
    818           *
    819           * @param   dstIdx - Source Address Manager Index
    820           *
    821           * @return  none
    822           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    823          void bindAddressClear( uint16 dstIdx )
   \                     bindAddressClear:
    824          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    825            bindTableIndex_t i;
    826          
    827            if ( dstIdx != INVALID_NODE_ADDR )
   \   00000E   74FE         MOV       A,#-0x2
   \   000010   6E           XRL       A,R6
   \   000011   7003         JNZ       ??bindAddressClear_0
   \   000013   74FF         MOV       A,#-0x1
   \   000015   6F           XRL       A,R7
   \                     ??bindAddressClear_0:
   \   000016   7003         JNZ       $+5
   \   000018   02....       LJMP      ??bindAddressClear_1 & 0xFFFF
    828            {
    829              // Looks for a specific Idx
    830              for ( i = 0; i < gNWK_MAX_BINDING_ENTRIES; i++ )
   \   00001B   75..00       MOV       ?V0,#0x0
   \                     ??bindAddressClear_2:
   \   00001E   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000021   E4           CLR       A
   \   000022   93           MOVC      A,@A+DPTR
   \   000023   F8           MOV       R0,A
   \   000024   E5..         MOV       A,?V0
   \   000026   C3           CLR       C
   \   000027   98           SUBB      A,R0
   \   000028   4003         JC        $+5
   \   00002A   02....       LJMP      ??bindAddressClear_3 & 0xFFFF
    831              {
    832                if ( ( BindingTable[i].dstGroupMode != AddrGroup ) &&
    833                     ( BindingTable[i].dstGroupMode == DSTGROUPMODE_ADDR ) &&
    834                     ( BindingTable[i].dstIdx == dstIdx ) )
   \   00002D   E5..         MOV       A,?V0
   \   00002F   F8           MOV       R0,A
   \   000030   7900         MOV       R1,#0x0
   \   000032   E8           MOV       A,R0
   \   000033   75F00E       MOV       B,#0xe
   \   000036   A4           MUL       AB
   \   000037   C8           XCH       A,R0
   \   000038   AAF0         MOV       R2,B
   \   00003A   75F000       MOV       B,#0x0
   \   00003D   A4           MUL       AB
   \   00003E   2A           ADD       A,R2
   \   00003F   FA           MOV       R2,A
   \   000040   75F00E       MOV       B,#0xe
   \   000043   E9           MOV       A,R1
   \   000044   A4           MUL       AB
   \   000045   2A           ADD       A,R2
   \   000046   F9           MOV       R1,A
   \   000047   74..         MOV       A,#(BindingTable + 1) & 0xff
   \   000049   28           ADD       A,R0
   \   00004A   F582         MOV       DPL,A
   \   00004C   74..         MOV       A,#((BindingTable + 1) >> 8) & 0xff
   \   00004E   39           ADDC      A,R1
   \   00004F   F583         MOV       DPH,A
   \   000051   E0           MOVX      A,@DPTR
   \   000052   6401         XRL       A,#0x1
   \   000054   6054         JZ        ??bindAddressClear_4
   \   000056   E5..         MOV       A,?V0
   \   000058   F8           MOV       R0,A
   \   000059   7900         MOV       R1,#0x0
   \   00005B   E8           MOV       A,R0
   \   00005C   75F00E       MOV       B,#0xe
   \   00005F   A4           MUL       AB
   \   000060   C8           XCH       A,R0
   \   000061   AAF0         MOV       R2,B
   \   000063   75F000       MOV       B,#0x0
   \   000066   A4           MUL       AB
   \   000067   2A           ADD       A,R2
   \   000068   FA           MOV       R2,A
   \   000069   75F00E       MOV       B,#0xe
   \   00006C   E9           MOV       A,R1
   \   00006D   A4           MUL       AB
   \   00006E   2A           ADD       A,R2
   \   00006F   F9           MOV       R1,A
   \   000070   74..         MOV       A,#(BindingTable + 1) & 0xff
   \   000072   28           ADD       A,R0
   \   000073   F582         MOV       DPL,A
   \   000075   74..         MOV       A,#((BindingTable + 1) >> 8) & 0xff
   \   000077   39           ADDC      A,R1
   \   000078   F583         MOV       DPH,A
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   702D         JNZ       ??bindAddressClear_4
   \   00007D   E5..         MOV       A,?V0
   \   00007F   F8           MOV       R0,A
   \   000080   7900         MOV       R1,#0x0
   \   000082   E8           MOV       A,R0
   \   000083   75F00E       MOV       B,#0xe
   \   000086   A4           MUL       AB
   \   000087   C8           XCH       A,R0
   \   000088   AAF0         MOV       R2,B
   \   00008A   75F000       MOV       B,#0x0
   \   00008D   A4           MUL       AB
   \   00008E   2A           ADD       A,R2
   \   00008F   FA           MOV       R2,A
   \   000090   75F00E       MOV       B,#0xe
   \   000093   E9           MOV       A,R1
   \   000094   A4           MUL       AB
   \   000095   2A           ADD       A,R2
   \   000096   F9           MOV       R1,A
   \   000097   74..         MOV       A,#(BindingTable + 2) & 0xff
   \   000099   28           ADD       A,R0
   \   00009A   F582         MOV       DPL,A
   \   00009C   74..         MOV       A,#((BindingTable + 2) >> 8) & 0xff
   \   00009E   39           ADDC      A,R1
   \   00009F   F583         MOV       DPH,A
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   6E           XRL       A,R6
   \   0000A3   7003         JNZ       ??bindAddressClear_5
   \   0000A5   A3           INC       DPTR
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   6F           XRL       A,R7
   \                     ??bindAddressClear_5:
   \   0000A8   6005         JZ        ??bindAddressClear_3
    835                {
    836                  break;  // found at least one
    837                }
    838              }
   \                     ??bindAddressClear_4:
   \   0000AA   05..         INC       ?V0
   \   0000AC   02....       LJMP      ??bindAddressClear_2 & 0xFFFF
    839          
    840              if ( i == gNWK_MAX_BINDING_ENTRIES )
   \                     ??bindAddressClear_3:
   \   0000AF   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   0000B2   E4           CLR       A
   \   0000B3   93           MOVC      A,@A+DPTR
   \   0000B4   65..         XRL       A,?V0
   \   0000B6   701B         JNZ       ??bindAddressClear_1
    841              {
    842                // No binding entry is associated with dstIdx.
    843                // Remove user binding bit from the address manager entry corresponding to dstIdx.
    844                AddrMgrEntry_t addrEntry;
    845          
    846                addrEntry.user = ADDRMGR_USER_BINDING;
   \   0000B8   85..82       MOV       DPL,?XSP + 0
   \   0000BB   85..83       MOV       DPH,?XSP + 1
   \   0000BE   7404         MOV       A,#0x4
   \   0000C0   F0           MOVX      @DPTR,A
    847                addrEntry.index = dstIdx;
   \   0000C1   740B         MOV       A,#0xb
   \   0000C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C6   EE           MOV       A,R6
   \   0000C7   F0           MOVX      @DPTR,A
   \   0000C8   A3           INC       DPTR
   \   0000C9   EF           MOV       A,R7
   \   0000CA   F0           MOVX      @DPTR,A
    848          
    849                AddrMgrEntryRelease( &addrEntry );
   \   0000CB                ; Setup parameters for call to function AddrMgrEntryRelease
   \   0000CB   AA..         MOV       R2,?XSP + 0
   \   0000CD   AB..         MOV       R3,?XSP + 1
   \   0000CF   12....       LCALL     `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   \   0000D2   E9           MOV       A,R1
    850              }
    851            }
    852          }
   \                     ??bindAddressClear_1:
   \   0000D3   740D         MOV       A,#0xd
   \   0000D5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D8   7F01         MOV       R7,#0x1
   \   0000DA   02....       LJMP      ?BANKED_LEAVE_XDATA
    853          
    854          /*********************************************************************
    855           * @fn          bindUpdateAddr
    856           *
    857           * @brief       Update the network address in the binding table.
    858           *
    859           * @param       oldAddr - old network address
    860           * @param       newAddr - new network address
    861           *
    862           * @return      none
    863           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    864          void bindUpdateAddr( uint16 oldAddr, uint16 newAddr )
   \                     bindUpdateAddr:
    865          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
    866            uint16 oldIdx;
    867            uint16 newIdx;
    868            zAddrType_t addr;
    869            bindTableIndex_t x;
    870            BindingEntry_t *pBind;
    871          
    872            addr.addrMode = Addr16Bit;
   \   000012   7408         MOV       A,#0x8
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   7402         MOV       A,#0x2
   \   000019   F0           MOVX      @DPTR,A
    873            addr.addr.shortAddr = oldAddr;
   \   00001A   85..82       MOV       DPL,?XSP + 0
   \   00001D   85..83       MOV       DPH,?XSP + 1
   \   000020   E5..         MOV       A,?V2
   \   000022   F0           MOVX      @DPTR,A
   \   000023   A3           INC       DPTR
   \   000024   E5..         MOV       A,?V3
   \   000026   F0           MOVX      @DPTR,A
    874            oldIdx = bindingAddrMgsHelperFind( &addr );
   \   000027                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   000027   AA..         MOV       R2,?XSP + 0
   \   000029   AB..         MOV       R3,?XSP + 1
   \   00002B   12....       LCALL     `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   00002E   8A..         MOV       ?V10,R2
   \   000030   8B..         MOV       ?V11,R3
   \   000032   85....       MOV       ?V0,?V10
   \   000035   85....       MOV       ?V1,?V11
    875            addr.addr.shortAddr = newAddr;
   \   000038   85..82       MOV       DPL,?XSP + 0
   \   00003B   85..83       MOV       DPH,?XSP + 1
   \   00003E   EE           MOV       A,R6
   \   00003F   F0           MOVX      @DPTR,A
   \   000040   A3           INC       DPTR
   \   000041   EF           MOV       A,R7
   \   000042   F0           MOVX      @DPTR,A
    876            newIdx = bindingAddrMgsHelperFind( &addr );
   \   000043                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   000043   AA..         MOV       R2,?XSP + 0
   \   000045   AB..         MOV       R3,?XSP + 1
   \   000047   12....       LCALL     `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   00004A   8A..         MOV       ?V10,R2
   \   00004C   8B..         MOV       ?V11,R3
   \   00004E   85....       MOV       ?V6,?V10
   \   000051   85....       MOV       ?V7,?V11
    877          
    878            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000054   75..00       MOV       ?V8,#0x0
   \                     ??bindUpdateAddr_0:
   \   000057   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00005A   E4           CLR       A
   \   00005B   93           MOVC      A,@A+DPTR
   \   00005C   F8           MOV       R0,A
   \   00005D   E5..         MOV       A,?V8
   \   00005F   C3           CLR       C
   \   000060   98           SUBB      A,R0
   \   000061   504C         JNC       ??bindUpdateAddr_1
    879            {
    880              pBind = &BindingTable[x];
   \   000063   E5..         MOV       A,?V8
   \   000065   F8           MOV       R0,A
   \   000066   7900         MOV       R1,#0x0
   \   000068   E8           MOV       A,R0
   \   000069   75F00E       MOV       B,#0xe
   \   00006C   A4           MUL       AB
   \   00006D   C8           XCH       A,R0
   \   00006E   AAF0         MOV       R2,B
   \   000070   75F000       MOV       B,#0x0
   \   000073   A4           MUL       AB
   \   000074   2A           ADD       A,R2
   \   000075   FA           MOV       R2,A
   \   000076   75F00E       MOV       B,#0xe
   \   000079   E9           MOV       A,R1
   \   00007A   A4           MUL       AB
   \   00007B   2A           ADD       A,R2
   \   00007C   F9           MOV       R1,A
   \   00007D   74..         MOV       A,#BindingTable & 0xff
   \   00007F   28           ADD       A,R0
   \   000080   F8           MOV       R0,A
   \   000081   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   000083   39           ADDC      A,R1
   \   000084   F9           MOV       R1,A
   \   000085   88..         MOV       ?V4,R0
   \   000087   89..         MOV       ?V5,R1
    881          
    882              if ( pBind->dstIdx == oldIdx )
   \   000089   85..82       MOV       DPL,?V4
   \   00008C   85..83       MOV       DPH,?V5
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   E0           MOVX      A,@DPTR
   \   000092   65..         XRL       A,?V0
   \   000094   7004         JNZ       ??bindUpdateAddr_2
   \   000096   A3           INC       DPTR
   \   000097   E0           MOVX      A,@DPTR
   \   000098   65..         XRL       A,?V1
   \                     ??bindUpdateAddr_2:
   \   00009A   700F         JNZ       ??bindUpdateAddr_3
    883              {
    884                pBind->dstIdx = newIdx;
   \   00009C   85..82       MOV       DPL,?V4
   \   00009F   85..83       MOV       DPH,?V5
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   E5..         MOV       A,?V6
   \   0000A6   F0           MOVX      @DPTR,A
   \   0000A7   A3           INC       DPTR
   \   0000A8   E5..         MOV       A,?V7
   \   0000AA   F0           MOVX      @DPTR,A
    885              }
    886            }
   \                     ??bindUpdateAddr_3:
   \   0000AB   05..         INC       ?V8
   \   0000AD   80A8         SJMP      ??bindUpdateAddr_0
    887          }
   \                     ??bindUpdateAddr_1:
   \   0000AF   7409         MOV       A,#0x9
   \   0000B1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B4   7F0C         MOV       R7,#0xc
   \   0000B6   02....       LJMP      ?BANKED_LEAVE_XDATA
    888          
    889          /*********************************************************************
    890           * @fn      bindingAddrMgsHelperFind
    891           *
    892           * @brief   Turns an zAddrType_t to an Addr Manager index
    893           *
    894           * @param   addr - zAddrType_t
    895           *
    896           * @return  INVALID_NODE_ADDR if not found, otherwise an index
    897           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    898          uint16 bindingAddrMgsHelperFind( zAddrType_t *addr )
   \                     bindingAddrMgsHelperFind:
    899          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    900            AddrMgrEntry_t entry;
    901          
    902            // Resolve addresses with the address manager
    903            entry.user = ADDRMGR_USER_BINDING;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   7404         MOV       A,#0x4
   \   000016   F0           MOVX      @DPTR,A
    904            if ( addr->addrMode == Addr16Bit )
   \   000017   8E82         MOV       DPL,R6
   \   000019   8F83         MOV       DPH,R7
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6402         XRL       A,#0x2
   \   000026   701D         JNZ       ??bindingAddrMgsHelperFind_0
    905            {
    906              entry.nwkAddr = addr->addr.shortAddr;
   \   000028   8E82         MOV       DPL,R6
   \   00002A   8F83         MOV       DPH,R7
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F8           MOV       R0,A
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F9           MOV       R1,A
   \   000031   7401         MOV       A,#0x1
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   E8           MOV       A,R0
   \   000037   F0           MOVX      @DPTR,A
   \   000038   A3           INC       DPTR
   \   000039   E9           MOV       A,R1
   \   00003A   F0           MOVX      @DPTR,A
    907              AddrMgrEntryLookupNwk( &entry );
   \   00003B                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   00003B   AA..         MOV       R2,?XSP + 0
   \   00003D   AB..         MOV       R3,?XSP + 1
   \   00003F   12....       LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   000042   E9           MOV       A,R1
   \   000043   8018         SJMP      ??bindingAddrMgsHelperFind_1
    908            }
    909            else
    910            {
    911              AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
   \                     ??bindingAddrMgsHelperFind_0:
   \   000045                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000045   EE           MOV       A,R6
   \   000046   FC           MOV       R4,A
   \   000047   EF           MOV       A,R7
   \   000048   FD           MOV       R5,A
   \   000049   7403         MOV       A,#0x3
   \   00004B   12....       LCALL     ?XSTACK_DISP0_8
   \   00004E   AA82         MOV       R2,DPL
   \   000050   AB83         MOV       R3,DPH
   \   000052   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
    912              AddrMgrEntryLookupExt( &entry );
   \   000055                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000055   AA..         MOV       R2,?XSP + 0
   \   000057   AB..         MOV       R3,?XSP + 1
   \   000059   12....       LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   00005C   E9           MOV       A,R1
    913            }
    914          
    915            return ( entry.index );
   \                     ??bindingAddrMgsHelperFind_1:
   \   00005D   740B         MOV       A,#0xb
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   E0           MOVX      A,@DPTR
   \   000063   FA           MOV       R2,A
   \   000064   A3           INC       DPTR
   \   000065   E0           MOVX      A,@DPTR
   \   000066   FB           MOV       R3,A
   \   000067   740D         MOV       A,#0xd
   \   000069   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006C   7F01         MOV       R7,#0x1
   \   00006E   02....       LJMP      ?BANKED_LEAVE_XDATA
    916          }
    917          
    918          /*********************************************************************
    919           * @fn      bindingAddrMgsHelperConvert
    920           *
    921           * @brief   Convert an index into an zAddrType_t
    922           *
    923           * @param   idx -
    924           * @param   addr - zAddrType_t
    925           *
    926           * @return  TRUE if found, FALSE if not
    927           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    928          uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr )
   \                     bindingAddrMgsHelperConvert:
    929          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
    930            AddrMgrEntry_t entry;
    931            uint8 stat;
    932          
    933            // Resolve addresses with the address manager
    934            entry.user = ADDRMGR_USER_BINDING;
   \   000012   85..82       MOV       DPL,?XSP + 0
   \   000015   85..83       MOV       DPH,?XSP + 1
   \   000018   7404         MOV       A,#0x4
   \   00001A   F0           MOVX      @DPTR,A
    935            entry.index = idx;
   \   00001B   740B         MOV       A,#0xb
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   E5..         MOV       A,?V2
   \   000022   F0           MOVX      @DPTR,A
   \   000023   A3           INC       DPTR
   \   000024   E5..         MOV       A,?V3
   \   000026   F0           MOVX      @DPTR,A
    936            stat = AddrMgrEntryGet( &entry );
   \   000027                ; Setup parameters for call to function AddrMgrEntryGet
   \   000027   AA..         MOV       R2,?XSP + 0
   \   000029   AB..         MOV       R3,?XSP + 1
   \   00002B   12....       LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   \   00002E   E9           MOV       A,R1
   \   00002F   F5..         MOV       ?V0,A
    937            if ( stat )
   \   000031   E5..         MOV       A,?V0
   \   000033   601F         JZ        ??bindingAddrMgsHelperConvert_0
    938            {
    939              addr->addrMode = Addr64Bit;
   \   000035   8E82         MOV       DPL,R6
   \   000037   8F83         MOV       DPH,R7
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   7403         MOV       A,#0x3
   \   000043   F0           MOVX      @DPTR,A
    940              osal_cpyExtAddr( addr->addr.extAddr, entry.extAddr );
   \   000044                ; Setup parameters for call to function sAddrExtCpy
   \   000044   7403         MOV       A,#0x3
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   AC82         MOV       R4,DPL
   \   00004B   AD83         MOV       R5,DPH
   \   00004D   EE           MOV       A,R6
   \   00004E   FA           MOV       R2,A
   \   00004F   EF           MOV       A,R7
   \   000050   FB           MOV       R3,A
   \   000051   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    941            }
    942          
    943            return ( stat );
   \                     ??bindingAddrMgsHelperConvert_0:
   \   000054   A9..         MOV       R1,?V0
   \   000056   740D         MOV       A,#0xd
   \   000058   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005B   7F04         MOV       R7,#0x4
   \   00005D   02....       LJMP      ?BANKED_LEAVE_XDATA
    944          }
    945          
    946          /*********************************************************************
    947           * @fn      bindingAddrMgsHelperConvertShort
    948           *
    949           * @brief   Convert an index into a short address
    950           *
    951           * @param   idx -
    952           *
    953           * @return  INVALID_NODE_ADDR if not available, otherwise the short address
    954           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    955          uint16 bindingAddrMgsHelperConvertShort( uint16 idx )
   \                     bindingAddrMgsHelperConvertShort:
    956          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    957            AddrMgrEntry_t entry;
    958          
    959            // Resolve addresses with the address manager
    960            entry.user = ADDRMGR_USER_BINDING;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   7404         MOV       A,#0x4
   \   000016   F0           MOVX      @DPTR,A
    961            entry.index = idx;
   \   000017   740B         MOV       A,#0xb
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   EE           MOV       A,R6
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   A3           INC       DPTR
   \   00001F   EF           MOV       A,R7
   \   000020   F0           MOVX      @DPTR,A
    962            AddrMgrEntryGet( &entry );
   \   000021                ; Setup parameters for call to function AddrMgrEntryGet
   \   000021   AA..         MOV       R2,?XSP + 0
   \   000023   AB..         MOV       R3,?XSP + 1
   \   000025   12....       LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   \   000028   E9           MOV       A,R1
    963          
    964            return ( entry.nwkAddr );
   \   000029   7401         MOV       A,#0x1
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   FA           MOV       R2,A
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   FB           MOV       R3,A
   \   000033   740D         MOV       A,#0xd
   \   000035   12....       LCALL     ?DEALLOC_XSTACK8
   \   000038   7F01         MOV       R7,#0x1
   \   00003A   02....       LJMP      ?BANKED_LEAVE_XDATA
    965          }
    966          
    967          /*********************************************************************
    968           * @fn      bindAddrMgrLocalLoad
    969           *
    970           * @brief   Load local(self and parent) address information into
    971           *          Address Manager
    972           *
    973           * @param   none
    974           *
    975           * @return  none
    976           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    977          void bindAddrMgrLocalLoad( void )
   \                     bindAddrMgrLocalLoad:
    978          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    979            AddrMgrEntry_t entry;
    980            uint16         parent;
    981          
    982            // add "local"(self and parent) address informtion into the Address
    983            // Manager
    984            if ( bindAddrMgrLocalLoaded == FALSE )
   \   00000A   90....       MOV       DPTR,#bindAddrMgrLocalLoaded
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   6003         JZ        $+5
   \   000010   02....       LJMP      ??bindAddrMgrLocalLoad_0 & 0xFFFF
    985            {
    986              // add the device's address information
    987              entry.user    = ADDRMGR_USER_BINDING;
   \   000013   85..82       MOV       DPL,?XSP + 0
   \   000016   85..83       MOV       DPH,?XSP + 1
   \   000019   7404         MOV       A,#0x4
   \   00001B   F0           MOVX      @DPTR,A
    988              entry.nwkAddr = _NIB.nwkDevAddress;
   \   00001C   90....       MOV       DPTR,#_NIB + 20
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F8           MOV       R0,A
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F9           MOV       R1,A
   \   000024   7401         MOV       A,#0x1
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   E8           MOV       A,R0
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   A3           INC       DPTR
   \   00002C   E9           MOV       A,R1
   \   00002D   F0           MOVX      @DPTR,A
    989              AddrMgrExtAddrSet( entry.extAddr, NLME_GetExtAddr() );
   \   00002E                ; Setup parameters for call to function NLME_GetExtAddr
   \   00002E   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000031   8A..         MOV       ?V0,R2
   \   000033   8B..         MOV       ?V1,R3
   \   000035   AC..         MOV       R4,?V0
   \   000037   AD..         MOV       R5,?V1
   \   000039                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000039   7403         MOV       A,#0x3
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   AA82         MOV       R2,DPL
   \   000040   AB83         MOV       R3,DPH
   \   000042   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
    990              AddrMgrEntryUpdate( &entry );
   \   000045                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000045   AA..         MOV       R2,?XSP + 0
   \   000047   AB..         MOV       R3,?XSP + 1
   \   000049   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00004C   E9           MOV       A,R1
    991          
    992              // make sure parent address is valid
    993              parent = NLME_GetCoordShortAddr();
   \   00004D                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   00004D   12....       LCALL     `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   000050   8A..         MOV       ?V0,R2
   \   000052   8B..         MOV       ?V1,R3
   \   000054   AE..         MOV       R6,?V0
   \   000056   AF..         MOV       R7,?V1
    994              if ( ( parent != entry.nwkAddr     ) &&
    995                   ( parent != INVALID_NODE_ADDR )    )
   \   000058   7401         MOV       A,#0x1
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   6E           XRL       A,R6
   \   00005F   7003         JNZ       ??bindAddrMgrLocalLoad_1
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   6F           XRL       A,R7
   \                     ??bindAddrMgrLocalLoad_1:
   \   000064   6028         JZ        ??bindAddrMgrLocalLoad_2
   \   000066   74FE         MOV       A,#-0x2
   \   000068   6E           XRL       A,R6
   \   000069   7003         JNZ       ??bindAddrMgrLocalLoad_3
   \   00006B   74FF         MOV       A,#-0x1
   \   00006D   6F           XRL       A,R7
   \                     ??bindAddrMgrLocalLoad_3:
   \   00006E   601E         JZ        ??bindAddrMgrLocalLoad_2
    996              {
    997                // add the parent's address information
    998                entry.nwkAddr = parent;
   \   000070   7401         MOV       A,#0x1
   \   000072   12....       LCALL     ?XSTACK_DISP0_8
   \   000075   EE           MOV       A,R6
   \   000076   F0           MOVX      @DPTR,A
   \   000077   A3           INC       DPTR
   \   000078   EF           MOV       A,R7
   \   000079   F0           MOVX      @DPTR,A
    999                NLME_GetCoordExtAddr( entry.extAddr );
   \   00007A                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   00007A   7403         MOV       A,#0x3
   \   00007C   12....       LCALL     ?XSTACK_DISP0_8
   \   00007F   AA82         MOV       R2,DPL
   \   000081   AB83         MOV       R3,DPH
   \   000083   12....       LCALL     `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
   1000                AddrMgrEntryUpdate( &entry );
   \   000086                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000086   AA..         MOV       R2,?XSP + 0
   \   000088   AB..         MOV       R3,?XSP + 1
   \   00008A   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00008D   E9           MOV       A,R1
   1001              }
   1002          
   1003              bindAddrMgrLocalLoaded = TRUE;
   \                     ??bindAddrMgrLocalLoad_2:
   \   00008E   90....       MOV       DPTR,#bindAddrMgrLocalLoaded
   \   000091   7401         MOV       A,#0x1
   \   000093   F0           MOVX      @DPTR,A
   1004            }
   1005          }
   \                     ??bindAddrMgrLocalLoad_0:
   \   000094   740D         MOV       A,#0xd
   \   000096   12....       LCALL     ?DEALLOC_XSTACK8
   \   000099   7F02         MOV       R7,#0x2
   \   00009B   02....       LJMP      ?BANKED_LEAVE_XDATA
   1006          
   1007          /*********************************************************************
   1008           * @fn      bindAddrIndexGet
   1009           *
   1010           * @brief   Get bind address index.
   1011           *
   1012           * @param   addr - <zAddrType_t>
   1013           *
   1014           * @return  (uint16) address index
   1015           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1016          uint16 bindAddrIndexGet( zAddrType_t* addr )
   \                     bindAddrIndexGet:
   1017          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1018            AddrMgrEntry_t entry;
   1019            uint8          update;
   1020          
   1021            update = FALSE;
   \   00000E   75..00       MOV       ?V0,#0x0
   1022          
   1023            // sync binding addresses with the address manager
   1024            entry.user = ADDRMGR_USER_BINDING;
   \   000011   85..82       MOV       DPL,?XSP + 0
   \   000014   85..83       MOV       DPH,?XSP + 1
   \   000017   7404         MOV       A,#0x4
   \   000019   F0           MOVX      @DPTR,A
   1025          
   1026            if ( addr->addrMode == Addr16Bit )
   \   00001A   8E82         MOV       DPL,R6
   \   00001C   8F83         MOV       DPH,R7
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   6402         XRL       A,#0x2
   \   000029   7022         JNZ       ??bindAddrIndexGet_0
   1027            {
   1028              entry.nwkAddr = addr->addr.shortAddr;
   \   00002B   8E82         MOV       DPL,R6
   \   00002D   8F83         MOV       DPH,R7
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F8           MOV       R0,A
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   F9           MOV       R1,A
   \   000034   7401         MOV       A,#0x1
   \   000036   12....       LCALL     ?XSTACK_DISP0_8
   \   000039   E8           MOV       A,R0
   \   00003A   F0           MOVX      @DPTR,A
   \   00003B   A3           INC       DPTR
   \   00003C   E9           MOV       A,R1
   \   00003D   F0           MOVX      @DPTR,A
   1029          
   1030              if ( AddrMgrEntryLookupNwk( &entry ) == FALSE )
   \   00003E                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   00003E   AA..         MOV       R2,?XSP + 0
   \   000040   AB..         MOV       R3,?XSP + 1
   \   000042   12....       LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   000045   E9           MOV       A,R1
   \   000046   7067         JNZ       ??bindAddrIndexGet_1
   1031              {
   1032                update = TRUE;
   \   000048   75..01       MOV       ?V0,#0x1
   \   00004B   8062         SJMP      ??bindAddrIndexGet_1
   1033              }
   1034            }
   1035            else if ( addr->addrMode == Addr64Bit )
   \                     ??bindAddrIndexGet_0:
   \   00004D   8E82         MOV       DPL,R6
   \   00004F   8F83         MOV       DPH,R7
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   6403         XRL       A,#0x3
   \   00005C   701F         JNZ       ??bindAddrIndexGet_2
   1036            {
   1037              AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
   \   00005E                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00005E   EE           MOV       A,R6
   \   00005F   FC           MOV       R4,A
   \   000060   EF           MOV       A,R7
   \   000061   FD           MOV       R5,A
   \   000062   7403         MOV       A,#0x3
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   AA82         MOV       R2,DPL
   \   000069   AB83         MOV       R3,DPH
   \   00006B   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1038          
   1039              if ( AddrMgrEntryLookupExt( &entry ) == FALSE )
   \   00006E                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   00006E   AA..         MOV       R2,?XSP + 0
   \   000070   AB..         MOV       R3,?XSP + 1
   \   000072   12....       LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000075   E9           MOV       A,R1
   \   000076   7037         JNZ       ??bindAddrIndexGet_1
   1040              {
   1041                update = TRUE;
   \   000078   75..01       MOV       ?V0,#0x1
   \   00007B   8032         SJMP      ??bindAddrIndexGet_1
   1042              }
   1043            }
   1044            else if ( addr->addrMode == AddrGroup )
   \                     ??bindAddrIndexGet_2:
   \   00007D   8E82         MOV       DPL,R6
   \   00007F   8F83         MOV       DPH,R7
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   6401         XRL       A,#0x1
   \   00008C   7015         JNZ       ??bindAddrIndexGet_3
   1045            {
   1046              entry.index = addr->addr.shortAddr;
   \   00008E   8E82         MOV       DPL,R6
   \   000090   8F83         MOV       DPH,R7
   \   000092   E0           MOVX      A,@DPTR
   \   000093   F8           MOV       R0,A
   \   000094   A3           INC       DPTR
   \   000095   E0           MOVX      A,@DPTR
   \   000096   F9           MOV       R1,A
   \   000097   740B         MOV       A,#0xb
   \   000099   12....       LCALL     ?XSTACK_DISP0_8
   \   00009C   E8           MOV       A,R0
   \   00009D   F0           MOVX      @DPTR,A
   \   00009E   A3           INC       DPTR
   \   00009F   E9           MOV       A,R1
   \   0000A0   F0           MOVX      @DPTR,A
   \   0000A1   800C         SJMP      ??bindAddrIndexGet_1
   1047            }
   1048            else
   1049            {
   1050              entry.index = INVALID_NODE_ADDR;
   \                     ??bindAddrIndexGet_3:
   \   0000A3   740B         MOV       A,#0xb
   \   0000A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A8   74FE         MOV       A,#-0x2
   \   0000AA   F0           MOVX      @DPTR,A
   \   0000AB   A3           INC       DPTR
   \   0000AC   74FF         MOV       A,#-0x1
   \   0000AE   F0           MOVX      @DPTR,A
   1051            }
   1052          
   1053            if ( update )
   \                     ??bindAddrIndexGet_1:
   \   0000AF   E5..         MOV       A,?V0
   \   0000B1   6008         JZ        ??bindAddrIndexGet_4
   1054            {
   1055              AddrMgrEntryUpdate( &entry );
   \   0000B3                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   0000B3   AA..         MOV       R2,?XSP + 0
   \   0000B5   AB..         MOV       R3,?XSP + 1
   \   0000B7   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   0000BA   E9           MOV       A,R1
   1056            }
   1057          
   1058            return entry.index;
   \                     ??bindAddrIndexGet_4:
   \   0000BB   740B         MOV       A,#0xb
   \   0000BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   FA           MOV       R2,A
   \   0000C2   A3           INC       DPTR
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   FB           MOV       R3,A
   \   0000C5   740D         MOV       A,#0xd
   \   0000C7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000CA   7F01         MOV       R7,#0x1
   \   0000CC   02....       LJMP      ?BANKED_LEAVE_XDATA
   1059          }
   1060          
   1061          /*********************************************************************
   1062           * @fn      GetBindingTableEntry
   1063           *
   1064           * @brief   Get a pointer to the Nth valid binding table entry.
   1065           *
   1066           * @param   Nth valid entry being requested.
   1067           *
   1068           * @return  The Nth valid binding table entry.
   1069           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1070          BindingEntry_t *GetBindingTableEntry( uint16 Nth )
   \                     GetBindingTableEntry:
   1071          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1072            BindingEntry_t *rtrn = NULL;
   \   000009   7A00         MOV       R2,#0x0
   \   00000B   7B00         MOV       R3,#0x0
   1073          
   1074          #if defined ( REFLECTOR )
   1075            bindTableIndex_t idx, cnt = 0;
   \   00000D   7800         MOV       R0,#0x0
   1076          
   1077            for ( idx = 0; idx < gNWK_MAX_BINDING_ENTRIES; idx++ )
   \   00000F   7900         MOV       R1,#0x0
   \                     ??GetBindingTableEntry_0:
   \   000011   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000014   E4           CLR       A
   \   000015   93           MOVC      A,@A+DPTR
   \   000016   FC           MOV       R4,A
   \   000017   E9           MOV       A,R1
   \   000018   C3           CLR       C
   \   000019   9C           SUBB      A,R4
   \   00001A   506E         JNC       ??GetBindingTableEntry_1
   1078            {
   1079              if ( BindingTable[idx].srcEP != NV_BIND_EMPTY )
   \   00001C   E9           MOV       A,R1
   \   00001D   FC           MOV       R4,A
   \   00001E   7D00         MOV       R5,#0x0
   \   000020   EC           MOV       A,R4
   \   000021   75F00E       MOV       B,#0xe
   \   000024   A4           MUL       AB
   \   000025   CC           XCH       A,R4
   \   000026   85F0..       MOV       ?V0,B
   \   000029   75F000       MOV       B,#0x0
   \   00002C   A4           MUL       AB
   \   00002D   25..         ADD       A,?V0
   \   00002F   F5..         MOV       ?V0,A
   \   000031   75F00E       MOV       B,#0xe
   \   000034   ED           MOV       A,R5
   \   000035   A4           MUL       AB
   \   000036   25..         ADD       A,?V0
   \   000038   FD           MOV       R5,A
   \   000039   74..         MOV       A,#BindingTable & 0xff
   \   00003B   2C           ADD       A,R4
   \   00003C   F582         MOV       DPL,A
   \   00003E   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   000040   3D           ADDC      A,R5
   \   000041   F583         MOV       DPH,A
   \   000043   E0           MOVX      A,@DPTR
   \   000044   64FF         XRL       A,#0xff
   \   000046   603F         JZ        ??GetBindingTableEntry_2
   1080              {
   1081                if ( cnt++ == Nth )
   \   000048   88..         MOV       ?V1,R0
   \   00004A   7401         MOV       A,#0x1
   \   00004C   25..         ADD       A,?V1
   \   00004E   F8           MOV       R0,A
   \   00004F   E5..         MOV       A,?V1
   \   000051   FC           MOV       R4,A
   \   000052   7D00         MOV       R5,#0x0
   \   000054   EE           MOV       A,R6
   \   000055   6C           XRL       A,R4
   \   000056   7002         JNZ       ??GetBindingTableEntry_3
   \   000058   EF           MOV       A,R7
   \   000059   6D           XRL       A,R5
   \                     ??GetBindingTableEntry_3:
   \   00005A   702B         JNZ       ??GetBindingTableEntry_2
   1082                {
   1083                  rtrn = BindingTable+idx;
   \   00005C   E9           MOV       A,R1
   \   00005D   FC           MOV       R4,A
   \   00005E   7D00         MOV       R5,#0x0
   \   000060   EC           MOV       A,R4
   \   000061   75F00E       MOV       B,#0xe
   \   000064   A4           MUL       AB
   \   000065   CC           XCH       A,R4
   \   000066   85F0..       MOV       ?V0,B
   \   000069   75F000       MOV       B,#0x0
   \   00006C   A4           MUL       AB
   \   00006D   25..         ADD       A,?V0
   \   00006F   F5..         MOV       ?V0,A
   \   000071   75F00E       MOV       B,#0xe
   \   000074   ED           MOV       A,R5
   \   000075   A4           MUL       AB
   \   000076   25..         ADD       A,?V0
   \   000078   FD           MOV       R5,A
   \   000079   74..         MOV       A,#BindingTable & 0xff
   \   00007B   2C           ADD       A,R4
   \   00007C   FC           MOV       R4,A
   \   00007D   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   00007F   3D           ADDC      A,R5
   \   000080   FD           MOV       R5,A
   \   000081   EC           MOV       A,R4
   \   000082   FA           MOV       R2,A
   \   000083   ED           MOV       A,R5
   \   000084   FB           MOV       R3,A
   1084                  break;
   \   000085   8003         SJMP      ??GetBindingTableEntry_1
   1085                }
   1086              }
   1087            }
   \                     ??GetBindingTableEntry_2:
   \   000087   09           INC       R1
   \   000088   8087         SJMP      ??GetBindingTableEntry_0
   1088          #else
   1089            (void)Nth;
   1090          #endif
   1091          
   1092            return rtrn;
   \                     ??GetBindingTableEntry_1:
   \   00008A   7F02         MOV       R7,#0x2
   \   00008C   02....       LJMP      ?BANKED_LEAVE_XDATA
   1093          }
   1094          
   1095          #if !defined ( BINDINGTABLE_NV_SINGLES )
   1096          /*********************************************************************
   1097           * @fn          BindInitNV
   1098           *
   1099           * @brief       Initialize the Binding NV Item
   1100           *
   1101           * @param       none
   1102           *
   1103           * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
   1104           *              exist in NV, NV_OPER_FAILED if failure.
   1105           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1106          byte BindInitNV( void )
   \                     BindInitNV:
   1107          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1108            byte ret;
   1109          
   1110            // Initialize the device list
   1111            ret = osal_nv_item_init( ZCD_NV_BINDING_TABLE,
   1112                            (uint16)( sizeof( nvBindingHdr_t ) + NV_BIND_ITEM_SIZE ), NULL );
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005   E4           CLR       A
   \   000006   F5..         MOV       ?V0,A
   \   000008   F5..         MOV       ?V1,A
   \   00000A   78..         MOV       R0,#?V0
   \   00000C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00000F   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   000012   E4           CLR       A
   \   000013   93           MOVC      A,@A+DPTR
   \   000014   F8           MOV       R0,A
   \   000015   7401         MOV       A,#0x1
   \   000017   93           MOVC      A,@A+DPTR
   \   000018   F9           MOV       R1,A
   \   000019   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00001C   E4           CLR       A
   \   00001D   93           MOVC      A,@A+DPTR
   \   00001E   F5..         MOV       ?V0,A
   \   000020   75..00       MOV       ?V1,#0x0
   \   000023   E8           MOV       A,R0
   \   000024   85..F0       MOV       B,?V0
   \   000027   A4           MUL       AB
   \   000028   C8           XCH       A,R0
   \   000029   AAF0         MOV       R2,B
   \   00002B   85..F0       MOV       B,?V1
   \   00002E   A4           MUL       AB
   \   00002F   2A           ADD       A,R2
   \   000030   FA           MOV       R2,A
   \   000031   85..F0       MOV       B,?V0
   \   000034   E9           MOV       A,R1
   \   000035   A4           MUL       AB
   \   000036   2A           ADD       A,R2
   \   000037   F9           MOV       R1,A
   \   000038   E8           MOV       A,R0
   \   000039   2402         ADD       A,#0x2
   \   00003B   FC           MOV       R4,A
   \   00003C   E4           CLR       A
   \   00003D   39           ADDC      A,R1
   \   00003E   FD           MOV       R5,A
   \   00003F   7A41         MOV       R2,#0x41
   \   000041   7B00         MOV       R3,#0x0
   \   000043   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000046   7402         MOV       A,#0x2
   \   000048   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004B   E9           MOV       A,R1
   \   00004C   FE           MOV       R6,A
   1113          
   1114            if (ret == NV_ITEM_UNINIT) 
   \   00004D   7409         MOV       A,#0x9
   \   00004F   6E           XRL       A,R6
   \   000050   7003         JNZ       ??BindInitNV_0
   1115            {
   1116              BindSetDefaultNV();
   \   000052                ; Setup parameters for call to function BindSetDefaultNV
   \   000052   12....       LCALL     `??BindSetDefaultNV::?relay`; Banked call to: BindSetDefaultNV
   1117            }
   1118          
   1119            return ( ret );
   \                     ??BindInitNV_0:
   \   000055   EE           MOV       A,R6
   \   000056   F9           MOV       R1,A
   \   000057   7F02         MOV       R7,#0x2
   \   000059   02....       LJMP      ?BANKED_LEAVE_XDATA
   1120          }
   1121          
   1122          /*********************************************************************
   1123           * @fn          BindSetDefaultNV
   1124           *
   1125           * @brief       Write the defaults to NV
   1126           *
   1127           * @param       none
   1128           *
   1129           * @return      none
   1130           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1131          void BindSetDefaultNV( void )
   \                     BindSetDefaultNV:
   1132          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1133            nvBindingHdr_t hdr;
   1134          
   1135            // Initialize the header
   1136            hdr.numRecs = 0;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   7400         MOV       A,#0x0
   \   000012   F0           MOVX      @DPTR,A
   \   000013   A3           INC       DPTR
   \   000014   7400         MOV       A,#0x0
   \   000016   F0           MOVX      @DPTR,A
   1137          
   1138            // Save off the header
   1139            osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof( nvBindingHdr_t ), &hdr );
   \   000017                ; Setup parameters for call to function osal_nv_write
   \   000017   A8..         MOV       R0,?XSP + 0
   \   000019   A9..         MOV       R1,?XSP + 1
   \   00001B   88..         MOV       ?V0,R0
   \   00001D   89..         MOV       ?V1,R1
   \   00001F   78..         MOV       R0,#?V0
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000024   75..02       MOV       ?V0,#0x2
   \   000027   75..00       MOV       ?V1,#0x0
   \   00002A   78..         MOV       R0,#?V0
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV       R4,#0x0
   \   000031   7D00         MOV       R5,#0x0
   \   000033   7A41         MOV       R2,#0x41
   \   000035   7B00         MOV       R3,#0x0
   \   000037   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003A   7404         MOV       A,#0x4
   \   00003C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003F   E9           MOV       A,R1
   1140          }
   \   000040   7402         MOV       A,#0x2
   \   000042   12....       LCALL     ?DEALLOC_XSTACK8
   \   000045   7F02         MOV       R7,#0x2
   \   000047   02....       LJMP      ?BANKED_LEAVE_XDATA
   1141          
   1142          #if !defined ( DONT_UPGRADE_BIND )
   1143          /*********************************************************************
   1144           * @fn          BindCopyBackupToNewNV
   1145           *
   1146           * @brief       Creates the New NV item, copies the backup data into
   1147           *              the New NV ID, and Deletes the duplicate NV item.
   1148           *
   1149           * @param       dupLen - NV item length of the old Binding table.
   1150           * @param       newLen - NV item length of the new Binding table to be created.
   1151           *
   1152           * @return      ZSuccess - All the actions were successful.
   1153           *              ZFailure - Any of the actions failed.
   1154           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1155          static uint8 BindCopyBackupToNewNV( uint16 dupLen, uint16 newLen )
   \                     BindCopyBackupToNewNV:
   1156          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV       A,#-0x12
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   \   00000E   8C..         MOV       ?V2,R4
   \   000010   8D..         MOV       ?V3,R5
   1157            uint8 status = ZSuccess;
   \   000012   7E00         MOV       R6,#0x0
   1158            uint16 bindLen;
   1159          
   1160            bindLen = osal_nv_item_len( ZCD_NV_BINDING_TABLE );
   \   000014                ; Setup parameters for call to function osal_nv_item_len
   \   000014   7A41         MOV       R2,#0x41
   \   000016   7B00         MOV       R3,#0x0
   \   000018   12....       LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   00001B   8A..         MOV       ?V6,R2
   \   00001D   8B..         MOV       ?V7,R3
   \   00001F   85....       MOV       ?V0,?V6
   \   000022   85....       MOV       ?V1,?V7
   1161          
   1162          
   1163            if ( ( bindLen > 0 ) && ( bindLen != newLen ) )
   \   000025   E5..         MOV       A,?V0
   \   000027   45..         ORL       A,?V1
   \   000029   6018         JZ        ??BindCopyBackupToNewNV_0
   \   00002B   E5..         MOV       A,?V2
   \   00002D   65..         XRL       A,?V0
   \   00002F   7004         JNZ       ??BindCopyBackupToNewNV_1
   \   000031   E5..         MOV       A,?V3
   \   000033   65..         XRL       A,?V1
   \                     ??BindCopyBackupToNewNV_1:
   \   000035   600C         JZ        ??BindCopyBackupToNewNV_0
   1164            {
   1165              // The existing item does not match the New length
   1166              osal_nv_delete( ZCD_NV_BINDING_TABLE, bindLen );
   \   000037                ; Setup parameters for call to function osal_nv_delete
   \   000037   AC..         MOV       R4,?V0
   \   000039   AD..         MOV       R5,?V1
   \   00003B   7A41         MOV       R2,#0x41
   \   00003D   7B00         MOV       R3,#0x0
   \   00003F   12....       LCALL     `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
   \   000042   E9           MOV       A,R1
   1167            }
   1168          
   1169            // Create Binding Table NV item with the NEW legth
   1170            if ( osal_nv_item_init( ZCD_NV_BINDING_TABLE, newLen, NULL ) != NV_OPER_FAILED )
   \                     ??BindCopyBackupToNewNV_0:
   \   000043                ; Setup parameters for call to function osal_nv_item_init
   \   000043   E4           CLR       A
   \   000044   F5..         MOV       ?V6,A
   \   000046   F5..         MOV       ?V7,A
   \   000048   78..         MOV       R0,#?V6
   \   00004A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004D   AC..         MOV       R4,?V2
   \   00004F   AD..         MOV       R5,?V3
   \   000051   7A41         MOV       R2,#0x41
   \   000053   7B00         MOV       R3,#0x0
   \   000055   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000058   7402         MOV       A,#0x2
   \   00005A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005D   E9           MOV       A,R1
   \   00005E   640A         XRL       A,#0xa
   \   000060   7003         JNZ       $+5
   \   000062   02....       LJMP      ??BindCopyBackupToNewNV_2 & 0xFFFF
   1171            {
   1172              nvBindingHdr_t hdrBackup;
   1173          
   1174              // Copy ONLY the valid records from the duplicate NV table into the new table
   1175              // at the end of this process the table content will be compacted
   1176              if ( osal_nv_read( ZCD_NV_DUPLICATE_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdrBackup ) == ZSuccess )
   \   000065                ; Setup parameters for call to function osal_nv_read
   \   000065   7402         MOV       A,#0x2
   \   000067   12....       LCALL     ?XSTACK_DISP100_8
   \   00006A   88..         MOV       ?V6,R0
   \   00006C   89..         MOV       ?V7,R1
   \   00006E   78..         MOV       R0,#?V6
   \   000070   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000073   75..02       MOV       ?V6,#0x2
   \   000076   75..00       MOV       ?V7,#0x0
   \   000079   78..         MOV       R0,#?V6
   \   00007B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007E   7C00         MOV       R4,#0x0
   \   000080   7D00         MOV       R5,#0x0
   \   000082   7A00         MOV       R2,#0x0
   \   000084   7B03         MOV       R3,#0x3
   \   000086   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000089   7404         MOV       A,#0x4
   \   00008B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008E   E9           MOV       A,R1
   \   00008F   6003         JZ        $+5
   \   000091   02....       LJMP      ??BindCopyBackupToNewNV_3 & 0xFFFF
   1177              {
   1178                bindTableIndex_t i;
   1179                uint16 validBackupRecs = 0;
   \   000094   85..82       MOV       DPL,?XSP + 0
   \   000097   85..83       MOV       DPH,?XSP + 1
   \   00009A   7400         MOV       A,#0x0
   \   00009C   F0           MOVX      @DPTR,A
   \   00009D   A3           INC       DPTR
   \   00009E   7400         MOV       A,#0x0
   \   0000A0   F0           MOVX      @DPTR,A
   1180                BindingEntry_t backupRec;
   1181          
   1182                // Read in the device list. This loop will stop when:
   1183                // The total number of valid records has been reached either because:
   1184                //          The new table is full of valid records OR
   1185                //          The old table has less valid records than the size of the table
   1186                for ( i = 0; ( validBackupRecs < gNWK_MAX_BINDING_ENTRIES ) && ( validBackupRecs < hdrBackup.numRecs ); i++ )
   \   0000A1   7F00         MOV       R7,#0x0
   \                     ??BindCopyBackupToNewNV_4:
   \   0000A3   85..82       MOV       DPL,?XSP + 0
   \   0000A6   85..83       MOV       DPH,?XSP + 1
   \   0000A9   C082         PUSH      DPL
   \   0000AB   C083         PUSH      DPH
   \   0000AD   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   0000B0   E4           CLR       A
   \   0000B1   93           MOVC      A,@A+DPTR
   \   0000B2   F8           MOV       R0,A
   \   0000B3   7900         MOV       R1,#0x0
   \   0000B5   D083         POP       DPH
   \   0000B7   D082         POP       DPL
   \   0000B9   C3           CLR       C
   \   0000BA   E0           MOVX      A,@DPTR
   \   0000BB   98           SUBB      A,R0
   \   0000BC   A3           INC       DPTR
   \   0000BD   E0           MOVX      A,@DPTR
   \   0000BE   99           SUBB      A,R1
   \   0000BF   4003         JC        $+5
   \   0000C1   02....       LJMP      ??BindCopyBackupToNewNV_5 & 0xFFFF
   \   0000C4   85..82       MOV       DPL,?XSP + 0
   \   0000C7   85..83       MOV       DPH,?XSP + 1
   \   0000CA   C082         PUSH      DPL
   \   0000CC   C083         PUSH      DPH
   \   0000CE   7402         MOV       A,#0x2
   \   0000D0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   F8           MOV       R0,A
   \   0000D5   A3           INC       DPTR
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   F9           MOV       R1,A
   \   0000D8   D083         POP       DPH
   \   0000DA   D082         POP       DPL
   \   0000DC   C3           CLR       C
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   98           SUBB      A,R0
   \   0000DF   A3           INC       DPTR
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   99           SUBB      A,R1
   \   0000E2   4003         JC        $+5
   \   0000E4   02....       LJMP      ??BindCopyBackupToNewNV_5 & 0xFFFF
   1187                {
   1188                  if ( osal_nv_read( ZCD_NV_DUPLICATE_BINDING_TABLE,
   1189                                    (uint16)(sizeof(nvBindingHdr_t) + (i * NV_BIND_REC_SIZE)),
   1190                                    NV_BIND_REC_SIZE, &backupRec ) == ZSuccess )
   \   0000E7                ; Setup parameters for call to function osal_nv_read
   \   0000E7   7404         MOV       A,#0x4
   \   0000E9   12....       LCALL     ?XSTACK_DISP100_8
   \   0000EC   88..         MOV       ?V6,R0
   \   0000EE   89..         MOV       ?V7,R1
   \   0000F0   78..         MOV       R0,#?V6
   \   0000F2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F5   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   0000F8   12....       LCALL     ?PUSH_XSTACK8_C_TWO
   \   0000FB   EF           MOV       A,R7
   \   0000FC   F8           MOV       R0,A
   \   0000FD   7900         MOV       R1,#0x0
   \   0000FF   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   000102   E4           CLR       A
   \   000103   93           MOVC      A,@A+DPTR
   \   000104   F5..         MOV       ?V6,A
   \   000106   7401         MOV       A,#0x1
   \   000108   93           MOVC      A,@A+DPTR
   \   000109   F5..         MOV       ?V7,A
   \   00010B   E8           MOV       A,R0
   \   00010C   85..F0       MOV       B,?V6
   \   00010F   A4           MUL       AB
   \   000110   C8           XCH       A,R0
   \   000111   AAF0         MOV       R2,B
   \   000113   85..F0       MOV       B,?V7
   \   000116   A4           MUL       AB
   \   000117   2A           ADD       A,R2
   \   000118   FA           MOV       R2,A
   \   000119   85..F0       MOV       B,?V6
   \   00011C   E9           MOV       A,R1
   \   00011D   A4           MUL       AB
   \   00011E   2A           ADD       A,R2
   \   00011F   F9           MOV       R1,A
   \   000120   E8           MOV       A,R0
   \   000121   2402         ADD       A,#0x2
   \   000123   FC           MOV       R4,A
   \   000124   E4           CLR       A
   \   000125   39           ADDC      A,R1
   \   000126   FD           MOV       R5,A
   \   000127   7A00         MOV       R2,#0x0
   \   000129   7B03         MOV       R3,#0x3
   \   00012B   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00012E   7404         MOV       A,#0x4
   \   000130   12....       LCALL     ?DEALLOC_XSTACK8
   \   000133   E9           MOV       A,R1
   \   000134   7076         JNZ       ??BindCopyBackupToNewNV_6
   1191                  {
   1192                    if ( backupRec.srcEP != NV_BIND_EMPTY )
   \   000136   7404         MOV       A,#0x4
   \   000138   12....       LCALL     ?XSTACK_DISP0_8
   \   00013B   E0           MOVX      A,@DPTR
   \   00013C   64FF         XRL       A,#0xff
   \   00013E   6068         JZ        ??BindCopyBackupToNewNV_7
   1193                    {
   1194                      // Save the valid record into the NEW NV table.
   1195                      if ( osal_nv_write( ZCD_NV_BINDING_TABLE,
   1196                                          (uint16)((sizeof(nvBindingHdr_t)) + (validBackupRecs * NV_BIND_REC_SIZE)),
   1197                                          NV_BIND_REC_SIZE, &backupRec ) != ZSuccess )
   \   000140                ; Setup parameters for call to function osal_nv_write
   \   000140   7404         MOV       A,#0x4
   \   000142   12....       LCALL     ?XSTACK_DISP100_8
   \   000145   88..         MOV       ?V6,R0
   \   000147   89..         MOV       ?V7,R1
   \   000149   78..         MOV       R0,#?V6
   \   00014B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014E   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   000151   12....       LCALL     ?PUSH_XSTACK8_C_TWO
   \   000154   7404         MOV       A,#0x4
   \   000156   12....       LCALL     ?XSTACK_DISP0_8
   \   000159   E0           MOVX      A,@DPTR
   \   00015A   F8           MOV       R0,A
   \   00015B   A3           INC       DPTR
   \   00015C   E0           MOVX      A,@DPTR
   \   00015D   F9           MOV       R1,A
   \   00015E   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   000161   E4           CLR       A
   \   000162   93           MOVC      A,@A+DPTR
   \   000163   F5..         MOV       ?V6,A
   \   000165   7401         MOV       A,#0x1
   \   000167   93           MOVC      A,@A+DPTR
   \   000168   F5..         MOV       ?V7,A
   \   00016A   E8           MOV       A,R0
   \   00016B   85..F0       MOV       B,?V6
   \   00016E   A4           MUL       AB
   \   00016F   C8           XCH       A,R0
   \   000170   AAF0         MOV       R2,B
   \   000172   85..F0       MOV       B,?V7
   \   000175   A4           MUL       AB
   \   000176   2A           ADD       A,R2
   \   000177   FA           MOV       R2,A
   \   000178   85..F0       MOV       B,?V6
   \   00017B   E9           MOV       A,R1
   \   00017C   A4           MUL       AB
   \   00017D   2A           ADD       A,R2
   \   00017E   F9           MOV       R1,A
   \   00017F   E8           MOV       A,R0
   \   000180   2402         ADD       A,#0x2
   \   000182   FC           MOV       R4,A
   \   000183   E4           CLR       A
   \   000184   39           ADDC      A,R1
   \   000185   FD           MOV       R5,A
   \   000186   7A41         MOV       R2,#0x41
   \   000188   7B00         MOV       R3,#0x0
   \   00018A   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00018D   7404         MOV       A,#0x4
   \   00018F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000192   E9           MOV       A,R1
   \   000193   6004         JZ        ??BindCopyBackupToNewNV_8
   1198                      {
   1199                         status = ZFailure;
   \   000195   7E01         MOV       R6,#0x1
   1200                         break; // Terminate the loop as soon as a problem with NV is detected
   \   000197   8015         SJMP      ??BindCopyBackupToNewNV_5
   1201                      }
   1202          
   1203                      validBackupRecs++;
   \                     ??BindCopyBackupToNewNV_8:
   \   000199   85..82       MOV       DPL,?XSP + 0
   \   00019C   85..83       MOV       DPH,?XSP + 1
   \   00019F   E0           MOVX      A,@DPTR
   \   0001A0   2401         ADD       A,#0x1
   \   0001A2   F0           MOVX      @DPTR,A
   \   0001A3   A3           INC       DPTR
   \   0001A4   E0           MOVX      A,@DPTR
   \   0001A5   3400         ADDC      A,#0x0
   \   0001A7   F0           MOVX      @DPTR,A
   1204                    }
   1205                  }
   \                     ??BindCopyBackupToNewNV_7:
   \   0001A8   0F           INC       R7
   \   0001A9   02....       LJMP      ??BindCopyBackupToNewNV_4 & 0xFFFF
   1206                  else
   1207                  {
   1208                     status = ZFailure;
   \                     ??BindCopyBackupToNewNV_6:
   \   0001AC   7E01         MOV       R6,#0x1
   1209                     break; // Terminate the loop as soon as a problem with NV is detected
   1210                  }
   1211                }
   1212          
   1213                // Only save the header and delete the duplicate element if the previous
   1214                // process was successful
   1215                if ( status == ZSuccess )
   \                     ??BindCopyBackupToNewNV_5:
   \   0001AE   EE           MOV       A,R6
   \   0001AF   7047         JNZ       ??BindCopyBackupToNewNV_9
   1216                {
   1217                  // Save off the header
   1218                  if ( osal_nv_write( ZCD_NV_BINDING_TABLE, 0,
   1219                                      sizeof(nvBindingHdr_t), &validBackupRecs ) == ZSuccess )
   \   0001B1                ; Setup parameters for call to function osal_nv_write
   \   0001B1   A8..         MOV       R0,?XSP + 0
   \   0001B3   A9..         MOV       R1,?XSP + 1
   \   0001B5   88..         MOV       ?V6,R0
   \   0001B7   89..         MOV       ?V7,R1
   \   0001B9   78..         MOV       R0,#?V6
   \   0001BB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001BE   75..02       MOV       ?V6,#0x2
   \   0001C1   75..00       MOV       ?V7,#0x0
   \   0001C4   78..         MOV       R0,#?V6
   \   0001C6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001C9   7C00         MOV       R4,#0x0
   \   0001CB   7D00         MOV       R5,#0x0
   \   0001CD   7A41         MOV       R2,#0x41
   \   0001CF   7B00         MOV       R3,#0x0
   \   0001D1   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0001D4   7404         MOV       A,#0x4
   \   0001D6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001D9   E9           MOV       A,R1
   \   0001DA   7012         JNZ       ??BindCopyBackupToNewNV_10
   1220                  {
   1221                    // Delete the duplicate NV Item, once the data has been stored in the NEW table
   1222                    if ( osal_nv_delete( ZCD_NV_DUPLICATE_BINDING_TABLE, dupLen ) != ZSuccess )
   \   0001DC                ; Setup parameters for call to function osal_nv_delete
   \   0001DC   AC..         MOV       R4,?V4
   \   0001DE   AD..         MOV       R5,?V5
   \   0001E0   7A00         MOV       R2,#0x0
   \   0001E2   7B03         MOV       R3,#0x3
   \   0001E4   12....       LCALL     `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
   \   0001E7   E9           MOV       A,R1
   \   0001E8   600E         JZ        ??BindCopyBackupToNewNV_9
   1223                    {
   1224                      status = ZFailure;
   \   0001EA   7E01         MOV       R6,#0x1
   \   0001EC   800A         SJMP      ??BindCopyBackupToNewNV_9
   1225                    }
   1226                  }
   1227                  else
   1228                  {
   1229                    status = ZFailure;
   \                     ??BindCopyBackupToNewNV_10:
   \   0001EE   7E01         MOV       R6,#0x1
   \   0001F0   8006         SJMP      ??BindCopyBackupToNewNV_9
   1230                  }
   1231                }
   1232              }
   1233              else
   1234              {
   1235                status = ZFailure;
   \                     ??BindCopyBackupToNewNV_3:
   \   0001F2   7E01         MOV       R6,#0x1
   \   0001F4   8002         SJMP      ??BindCopyBackupToNewNV_9
   1236              }
   1237            }
   1238            else
   1239            {
   1240              status = ZFailure;
   \                     ??BindCopyBackupToNewNV_2:
   \   0001F6   7E01         MOV       R6,#0x1
   1241            }
   1242          
   1243            return ( status );
   \                     ??BindCopyBackupToNewNV_9:
   \   0001F8   EE           MOV       A,R6
   \   0001F9   F9           MOV       R1,A
   \   0001FA   7412         MOV       A,#0x12
   \   0001FC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001FF   7F08         MOV       R7,#0x8
   \   000201   02....       LJMP      ?BANKED_LEAVE_XDATA
   1244          }
   1245          #endif // !DONT_UPGRADE_BIND
   1246          
   1247          #if !defined ( DONT_UPGRADE_BIND )
   1248          /*********************************************************************
   1249           * @fn          BindUpgradeTableInNV
   1250           *
   1251           * @brief       Verifies if the existing table in NV has different size
   1252           *              than the table defined by parameters in the current code.
   1253           *              If different, creates a backup table, deletes the existing
   1254           *              table and creates the new table with the new size. After
   1255           *              this process is done ZCD_NV_BINDING_TABLE NV item contains
   1256           *              only valid records retrieved from the original table, up to
   1257           *              the maximum number of records defined by gNWK_MAX_BINDING_ENTRIES
   1258           *
   1259           * @param       none
   1260           *
   1261           * @return      ZSuccess - the Update process was sucessful.
   1262           *              ZFailure - otherwise.
   1263           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1264          static uint8 BindUpgradeTableInNV( void )
   \                     BindUpgradeTableInNV:
   1265          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1266            uint8 status = ZSuccess;
   \   00000A   75..00       MOV       ?V2,#0x0
   1267            nvBindingHdr_t hdr;
   1268            uint16 dupLen;
   1269            uint16 bindLen;
   1270            uint16 newLen;
   1271            bool duplicateReady = FALSE;
   \   00000D   75..00       MOV       ?V3,#0x0
   1272          
   1273            // Size of the Binding table based on current paramenters in the code
   1274            newLen = sizeof(nvBindingHdr_t) + NV_BIND_ITEM_SIZE;
   \   000010   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   000013   E4           CLR       A
   \   000014   93           MOVC      A,@A+DPTR
   \   000015   F8           MOV       R0,A
   \   000016   7401         MOV       A,#0x1
   \   000018   93           MOVC      A,@A+DPTR
   \   000019   F9           MOV       R1,A
   \   00001A   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00001D   E4           CLR       A
   \   00001E   93           MOVC      A,@A+DPTR
   \   00001F   F5..         MOV       ?V6,A
   \   000021   75..00       MOV       ?V7,#0x0
   \   000024   E8           MOV       A,R0
   \   000025   85..F0       MOV       B,?V6
   \   000028   A4           MUL       AB
   \   000029   C8           XCH       A,R0
   \   00002A   AAF0         MOV       R2,B
   \   00002C   85..F0       MOV       B,?V7
   \   00002F   A4           MUL       AB
   \   000030   2A           ADD       A,R2
   \   000031   FA           MOV       R2,A
   \   000032   85..F0       MOV       B,?V6
   \   000035   E9           MOV       A,R1
   \   000036   A4           MUL       AB
   \   000037   2A           ADD       A,R2
   \   000038   F9           MOV       R1,A
   \   000039   E8           MOV       A,R0
   \   00003A   2402         ADD       A,#0x2
   \   00003C   F8           MOV       R0,A
   \   00003D   5001         JNC       ??BindUpgradeTableInNV_0
   \   00003F   09           INC       R1
   \                     ??BindUpgradeTableInNV_0:
   \   000040   88..         MOV       ?V0,R0
   \   000042   89..         MOV       ?V1,R1
   1275          
   1276            // Size of the Binding table NV item, this is the whole size of the item,
   1277            // it could inculde invalid records also
   1278            bindLen = osal_nv_item_len( ZCD_NV_BINDING_TABLE );
   \   000044                ; Setup parameters for call to function osal_nv_item_len
   \   000044   7A41         MOV       R2,#0x41
   \   000046   7B00         MOV       R3,#0x0
   \   000048   12....       LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   00004B   8A..         MOV       ?V6,R2
   \   00004D   8B..         MOV       ?V7,R3
   \   00004F   AE..         MOV       R6,?V6
   \   000051   AF..         MOV       R7,?V7
   1279          
   1280            // Get the number of valid records from the Binding table
   1281            osal_nv_read( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr );
   \   000053                ; Setup parameters for call to function osal_nv_read
   \   000053   A8..         MOV       R0,?XSP + 0
   \   000055   A9..         MOV       R1,?XSP + 1
   \   000057   88..         MOV       ?V6,R0
   \   000059   89..         MOV       ?V7,R1
   \   00005B   78..         MOV       R0,#?V6
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000060   75..02       MOV       ?V6,#0x2
   \   000063   75..00       MOV       ?V7,#0x0
   \   000066   78..         MOV       R0,#?V6
   \   000068   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006B   7C00         MOV       R4,#0x0
   \   00006D   7D00         MOV       R5,#0x0
   \   00006F   7A41         MOV       R2,#0x41
   \   000071   7B00         MOV       R3,#0x0
   \   000073   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000076   7404         MOV       A,#0x4
   \   000078   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007B   E9           MOV       A,R1
   1282          
   1283            // Identify if there is a duplicate NV item, if it is there, that means an
   1284            // Upgrade process did not finish properly last time
   1285            // The length function will return 0 if the Backup NV ID does not exist.
   1286            dupLen = osal_nv_item_len( ZCD_NV_DUPLICATE_BINDING_TABLE );
   \   00007C                ; Setup parameters for call to function osal_nv_item_len
   \   00007C   7A00         MOV       R2,#0x0
   \   00007E   7B03         MOV       R3,#0x3
   \   000080   12....       LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000083   8A..         MOV       ?V6,R2
   \   000085   8B..         MOV       ?V7,R3
   \   000087   85....       MOV       ?V4,?V6
   \   00008A   85....       MOV       ?V5,?V7
   1287          
   1288            // A duplicate of the original Binding item will be done if:
   1289            // 1) A duplicate NV item DOES NOT exist AND the size of the original Binding
   1290            //    item in NV is different (larger/smaller) than the the length calculated
   1291            //    from the parameters in the code. If they are the same there is no need
   1292            //    to do the Upgrade process.
   1293            // 2) A duplicate NV item exists (probably because the previous upgrade
   1294            //    process was interrupted) and [the original Binding NV items exists AND
   1295            //    has valid recods (it is important to make sure that valid records exist
   1296            //    in the binding table because it is possible that the item was created
   1297            //    but the data was not copied in the previous upgrade process).
   1298            if ( ( ( dupLen == 0 ) && ( bindLen != newLen ) ) ||
   1299                 ( ( dupLen > 0 ) && ( bindLen > 0 ) && ( hdr.numRecs > 0 ) ) )
   \   00008D   E5..         MOV       A,?V4
   \   00008F   45..         ORL       A,?V5
   \   000091   700A         JNZ       ??BindUpgradeTableInNV_1
   \   000093   E5..         MOV       A,?V0
   \   000095   6E           XRL       A,R6
   \   000096   7003         JNZ       ??BindUpgradeTableInNV_2
   \   000098   E5..         MOV       A,?V1
   \   00009A   6F           XRL       A,R7
   \                     ??BindUpgradeTableInNV_2:
   \   00009B   7019         JNZ       ??BindUpgradeTableInNV_3
   \                     ??BindUpgradeTableInNV_1:
   \   00009D   E5..         MOV       A,?V4
   \   00009F   45..         ORL       A,?V5
   \   0000A1   603D         JZ        ??BindUpgradeTableInNV_4
   \   0000A3   EE           MOV       A,R6
   \   0000A4   4F           ORL       A,R7
   \   0000A5   6039         JZ        ??BindUpgradeTableInNV_4
   \   0000A7   85..82       MOV       DPL,?XSP + 0
   \   0000AA   85..83       MOV       DPH,?XSP + 1
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   F8           MOV       R0,A
   \   0000AF   A3           INC       DPTR
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   F9           MOV       R1,A
   \   0000B2   E8           MOV       A,R0
   \   0000B3   49           ORL       A,R1
   \   0000B4   602A         JZ        ??BindUpgradeTableInNV_4
   1300            {
   1301              // Create a copy from original NV item into a duplicate NV item
   1302              if ( ( status = nwkCreateDuplicateNV( ZCD_NV_BINDING_TABLE,
   1303                                                    ZCD_NV_DUPLICATE_BINDING_TABLE ) ) == ZSuccess )
   \                     ??BindUpgradeTableInNV_3:
   \   0000B6                ; Setup parameters for call to function nwkCreateDuplicateNV
   \   0000B6   7C00         MOV       R4,#0x0
   \   0000B8   7D03         MOV       R5,#0x3
   \   0000BA   7A41         MOV       R2,#0x41
   \   0000BC   7B00         MOV       R3,#0x0
   \   0000BE   12....       LCALL     `??nwkCreateDuplicateNV::?relay`; Banked call to: nwkCreateDuplicateNV
   \   0000C1   E9           MOV       A,R1
   \   0000C2   F8           MOV       R0,A
   \   0000C3   88..         MOV       ?V2,R0
   \   0000C5   E8           MOV       A,R0
   \   0000C6   7042         JNZ       ??BindUpgradeTableInNV_5
   1304              {
   1305                // Delete the original NV item once the duplicate is ready
   1306                if ( osal_nv_delete( ZCD_NV_BINDING_TABLE, bindLen ) != ZSuccess )
   \   0000C8                ; Setup parameters for call to function osal_nv_delete
   \   0000C8   EE           MOV       A,R6
   \   0000C9   FC           MOV       R4,A
   \   0000CA   EF           MOV       A,R7
   \   0000CB   FD           MOV       R5,A
   \   0000CC   7A41         MOV       R2,#0x41
   \   0000CE   7B00         MOV       R3,#0x0
   \   0000D0   12....       LCALL     `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
   \   0000D3   E9           MOV       A,R1
   \   0000D4   6005         JZ        ??BindUpgradeTableInNV_6
   1307                {
   1308                  status = ZFailure;
   \   0000D6   75..01       MOV       ?V2,#0x1
   \   0000D9   802F         SJMP      ??BindUpgradeTableInNV_5
   1309                }
   1310                else
   1311                {
   1312                  duplicateReady = TRUE;
   \                     ??BindUpgradeTableInNV_6:
   \   0000DB   75..01       MOV       ?V3,#0x1
   \   0000DE   802A         SJMP      ??BindUpgradeTableInNV_5
   1313                }
   1314              }
   1315            }
   1316            else if ( ( ( dupLen > 0 ) && ( bindLen == 0 ) ) ||
   1317                      ( ( dupLen > 0 ) && ( bindLen > 0 ) && ( hdr.numRecs == 0 ) ) )
   \                     ??BindUpgradeTableInNV_4:
   \   0000E0   E5..         MOV       A,?V4
   \   0000E2   45..         ORL       A,?V5
   \   0000E4   6004         JZ        ??BindUpgradeTableInNV_7
   \   0000E6   EE           MOV       A,R6
   \   0000E7   4F           ORL       A,R7
   \   0000E8   6019         JZ        ??BindUpgradeTableInNV_8
   \                     ??BindUpgradeTableInNV_7:
   \   0000EA   E5..         MOV       A,?V4
   \   0000EC   45..         ORL       A,?V5
   \   0000EE   601A         JZ        ??BindUpgradeTableInNV_5
   \   0000F0   EE           MOV       A,R6
   \   0000F1   4F           ORL       A,R7
   \   0000F2   6016         JZ        ??BindUpgradeTableInNV_5
   \   0000F4   85..82       MOV       DPL,?XSP + 0
   \   0000F7   85..83       MOV       DPH,?XSP + 1
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   F8           MOV       R0,A
   \   0000FC   A3           INC       DPTR
   \   0000FD   E0           MOVX      A,@DPTR
   \   0000FE   F9           MOV       R1,A
   \   0000FF   E8           MOV       A,R0
   \   000100   49           ORL       A,R1
   \   000101   7007         JNZ       ??BindUpgradeTableInNV_5
   1318            {
   1319              // If for some reason a duplicate NV item was left in the system from a
   1320              // previous upgrade process and:
   1321              // 1) The original Binding NV item DOES NOT exist OR
   1322              // 2) The original Binding NV item exist, but has no valid records.
   1323              // it is necessary to rely in the data in the Duplicate item to create
   1324              // the Binding table
   1325              bindLen = dupLen;
   \                     ??BindUpgradeTableInNV_8:
   \   000103   AE..         MOV       R6,?V4
   \   000105   AF..         MOV       R7,?V5
   1326          
   1327              duplicateReady = TRUE;
   \   000107   75..01       MOV       ?V3,#0x1
   1328            }
   1329          
   1330            if ( duplicateReady == TRUE )
   \                     ??BindUpgradeTableInNV_5:
   \   00010A   7401         MOV       A,#0x1
   \   00010C   65..         XRL       A,?V3
   \   00010E   700E         JNZ       ??BindUpgradeTableInNV_9
   1331            {
   1332              // Creates the New Binding table, Copy data from backup and Delete backup NV ID
   1333              status = BindCopyBackupToNewNV( bindLen, newLen );
   \   000110                ; Setup parameters for call to function BindCopyBackupToNewNV
   \   000110   AC..         MOV       R4,?V0
   \   000112   AD..         MOV       R5,?V1
   \   000114   EE           MOV       A,R6
   \   000115   FA           MOV       R2,A
   \   000116   EF           MOV       A,R7
   \   000117   FB           MOV       R3,A
   \   000118   12....       LCALL     `??BindCopyBackupToNewNV::?relay`; Banked call to: BindCopyBackupToNewNV
   \   00011B   E9           MOV       A,R1
   \   00011C   F5..         MOV       ?V2,A
   1334            }
   1335            return ( status );
   \                     ??BindUpgradeTableInNV_9:
   \   00011E   A9..         MOV       R1,?V2
   \   000120   7402         MOV       A,#0x2
   \   000122   12....       LCALL     ?DEALLOC_XSTACK8
   \   000125   7F08         MOV       R7,#0x8
   \   000127   02....       LJMP      ?BANKED_LEAVE_XDATA
   1336          }
   1337          #endif // !DONT_UPGRADE_BIND
   1338          
   1339          /*********************************************************************
   1340           * @fn          BindRestoreFromNV
   1341           *
   1342           * @brief       Restore the binding table from NV
   1343           *
   1344           * @param       none
   1345           *
   1346           * @return      Number of entries restored
   1347           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1348          uint16 BindRestoreFromNV( void )
   \                     BindRestoreFromNV:
   1349          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1350            nvBindingHdr_t hdr;
   1351          
   1352            hdr.numRecs = 0;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   7400         MOV       A,#0x0
   \   000012   F0           MOVX      @DPTR,A
   \   000013   A3           INC       DPTR
   \   000014   7400         MOV       A,#0x0
   \   000016   F0           MOVX      @DPTR,A
   1353          
   1354          #if !defined ( DONT_UPGRADE_BIND )
   1355            if ( BindUpgradeTableInNV() == ZSuccess )
   \   000017                ; Setup parameters for call to function BindUpgradeTableInNV
   \   000017   12....       LCALL     `??BindUpgradeTableInNV::?relay`; Banked call to: BindUpgradeTableInNV
   \   00001A   E9           MOV       A,R1
   \   00001B   6003         JZ        $+5
   \   00001D   02....       LJMP      ??BindRestoreFromNV_0 & 0xFFFF
   1356          #endif
   1357            {
   1358              if ( osal_nv_read( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr ) == ZSuccess )
   \   000020                ; Setup parameters for call to function osal_nv_read
   \   000020   A8..         MOV       R0,?XSP + 0
   \   000022   A9..         MOV       R1,?XSP + 1
   \   000024   88..         MOV       ?V0,R0
   \   000026   89..         MOV       ?V1,R1
   \   000028   78..         MOV       R0,#?V0
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   75..02       MOV       ?V0,#0x2
   \   000030   75..00       MOV       ?V1,#0x0
   \   000033   78..         MOV       R0,#?V0
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   7C00         MOV       R4,#0x0
   \   00003A   7D00         MOV       R5,#0x0
   \   00003C   7A41         MOV       R2,#0x41
   \   00003E   7B00         MOV       R3,#0x0
   \   000040   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000043   7404         MOV       A,#0x4
   \   000045   12....       LCALL     ?DEALLOC_XSTACK8
   \   000048   E9           MOV       A,R1
   \   000049   6003         JZ        $+5
   \   00004B   02....       LJMP      ??BindRestoreFromNV_0 & 0xFFFF
   1359              {
   1360                bindTableIndex_t x;
   1361                uint16 validRecsCount = 0;
   \   00004E   7E00         MOV       R6,#0x0
   \   000050   7F00         MOV       R7,#0x0
   1362          
   1363                // Read in the device list
   1364                for ( x = 0; ( x < gNWK_MAX_BINDING_ENTRIES ) && ( validRecsCount < hdr.numRecs ); x++ )
   \   000052   75..00       MOV       ?V0,#0x0
   \                     ??BindRestoreFromNV_1:
   \   000055   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000058   E4           CLR       A
   \   000059   93           MOVC      A,@A+DPTR
   \   00005A   F8           MOV       R0,A
   \   00005B   E5..         MOV       A,?V0
   \   00005D   C3           CLR       C
   \   00005E   98           SUBB      A,R0
   \   00005F   4003         JC        $+5
   \   000061   02....       LJMP      ??BindRestoreFromNV_0 & 0xFFFF
   \   000064   85..82       MOV       DPL,?XSP + 0
   \   000067   85..83       MOV       DPH,?XSP + 1
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   F8           MOV       R0,A
   \   00006C   A3           INC       DPTR
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   F9           MOV       R1,A
   \   00006F   C3           CLR       C
   \   000070   EE           MOV       A,R6
   \   000071   98           SUBB      A,R0
   \   000072   EF           MOV       A,R7
   \   000073   99           SUBB      A,R1
   \   000074   4003         JC        $+5
   \   000076   02....       LJMP      ??BindRestoreFromNV_0 & 0xFFFF
   1365                {
   1366                  if ( osal_nv_read( ZCD_NV_BINDING_TABLE,
   1367                                     (uint16)(sizeof(nvBindingHdr_t) + (x * NV_BIND_REC_SIZE)),
   1368                                     NV_BIND_REC_SIZE, &BindingTable[x] ) == ZSUCCESS )
   \   000079                ; Setup parameters for call to function osal_nv_read
   \   000079   E5..         MOV       A,?V0
   \   00007B   F8           MOV       R0,A
   \   00007C   7900         MOV       R1,#0x0
   \   00007E   E8           MOV       A,R0
   \   00007F   75F00E       MOV       B,#0xe
   \   000082   A4           MUL       AB
   \   000083   C8           XCH       A,R0
   \   000084   AAF0         MOV       R2,B
   \   000086   75F000       MOV       B,#0x0
   \   000089   A4           MUL       AB
   \   00008A   2A           ADD       A,R2
   \   00008B   FA           MOV       R2,A
   \   00008C   75F00E       MOV       B,#0xe
   \   00008F   E9           MOV       A,R1
   \   000090   A4           MUL       AB
   \   000091   2A           ADD       A,R2
   \   000092   F9           MOV       R1,A
   \   000093   74..         MOV       A,#BindingTable & 0xff
   \   000095   28           ADD       A,R0
   \   000096   F5..         MOV       ?V2,A
   \   000098   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   00009A   39           ADDC      A,R1
   \   00009B   F5..         MOV       ?V3,A
   \   00009D   78..         MOV       R0,#?V2
   \   00009F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A2   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   0000A5   12....       LCALL     ?PUSH_XSTACK8_C_TWO
   \   0000A8   E5..         MOV       A,?V0
   \   0000AA   F8           MOV       R0,A
   \   0000AB   7900         MOV       R1,#0x0
   \   0000AD   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   0000B0   E4           CLR       A
   \   0000B1   93           MOVC      A,@A+DPTR
   \   0000B2   F5..         MOV       ?V2,A
   \   0000B4   7401         MOV       A,#0x1
   \   0000B6   93           MOVC      A,@A+DPTR
   \   0000B7   F5..         MOV       ?V3,A
   \   0000B9   E8           MOV       A,R0
   \   0000BA   85..F0       MOV       B,?V2
   \   0000BD   A4           MUL       AB
   \   0000BE   C8           XCH       A,R0
   \   0000BF   AAF0         MOV       R2,B
   \   0000C1   85..F0       MOV       B,?V3
   \   0000C4   A4           MUL       AB
   \   0000C5   2A           ADD       A,R2
   \   0000C6   FA           MOV       R2,A
   \   0000C7   85..F0       MOV       B,?V2
   \   0000CA   E9           MOV       A,R1
   \   0000CB   A4           MUL       AB
   \   0000CC   2A           ADD       A,R2
   \   0000CD   F9           MOV       R1,A
   \   0000CE   E8           MOV       A,R0
   \   0000CF   2402         ADD       A,#0x2
   \   0000D1   FC           MOV       R4,A
   \   0000D2   E4           CLR       A
   \   0000D3   39           ADDC      A,R1
   \   0000D4   FD           MOV       R5,A
   \   0000D5   7A41         MOV       R2,#0x41
   \   0000D7   7B00         MOV       R3,#0x0
   \   0000D9   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000DC   7404         MOV       A,#0x4
   \   0000DE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E1   E9           MOV       A,R1
   \   0000E2   702E         JNZ       ??BindRestoreFromNV_2
   1369                  {
   1370                    if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
   \   0000E4   E5..         MOV       A,?V0
   \   0000E6   F8           MOV       R0,A
   \   0000E7   7900         MOV       R1,#0x0
   \   0000E9   E8           MOV       A,R0
   \   0000EA   75F00E       MOV       B,#0xe
   \   0000ED   A4           MUL       AB
   \   0000EE   C8           XCH       A,R0
   \   0000EF   AAF0         MOV       R2,B
   \   0000F1   75F000       MOV       B,#0x0
   \   0000F4   A4           MUL       AB
   \   0000F5   2A           ADD       A,R2
   \   0000F6   FA           MOV       R2,A
   \   0000F7   75F00E       MOV       B,#0xe
   \   0000FA   E9           MOV       A,R1
   \   0000FB   A4           MUL       AB
   \   0000FC   2A           ADD       A,R2
   \   0000FD   F9           MOV       R1,A
   \   0000FE   74..         MOV       A,#BindingTable & 0xff
   \   000100   28           ADD       A,R0
   \   000101   F582         MOV       DPL,A
   \   000103   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   000105   39           ADDC      A,R1
   \   000106   F583         MOV       DPH,A
   \   000108   E0           MOVX      A,@DPTR
   \   000109   64FF         XRL       A,#0xff
   \   00010B   6005         JZ        ??BindRestoreFromNV_2
   1371                    {
   1372                      validRecsCount++;
   \   00010D   0E           INC       R6
   \   00010E   EE           MOV       A,R6
   \   00010F   7001         JNZ       ??BindRestoreFromNV_2
   \   000111   0F           INC       R7
   1373                    }
   1374                  }
   1375                }
   \                     ??BindRestoreFromNV_2:
   \   000112   05..         INC       ?V0
   \   000114   02....       LJMP      ??BindRestoreFromNV_1 & 0xFFFF
   1376              }
   1377            }
   1378            return ( hdr.numRecs );
   \                     ??BindRestoreFromNV_0:
   \   000117   85..82       MOV       DPL,?XSP + 0
   \   00011A   85..83       MOV       DPH,?XSP + 1
   \   00011D   E0           MOVX      A,@DPTR
   \   00011E   FA           MOV       R2,A
   \   00011F   A3           INC       DPTR
   \   000120   E0           MOVX      A,@DPTR
   \   000121   FB           MOV       R3,A
   \   000122   7402         MOV       A,#0x2
   \   000124   12....       LCALL     ?DEALLOC_XSTACK8
   \   000127   7F04         MOV       R7,#0x4
   \   000129   02....       LJMP      ?BANKED_LEAVE_XDATA
   1379          }
   1380          
   1381          /*********************************************************************
   1382           * @fn          BindWriteNV
   1383           *
   1384           * @brief       Save the Binding Table in NV
   1385           *
   1386           * @param       none
   1387           *
   1388           * @return      none
   1389           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1390          void BindWriteNV( void )
   \                     BindWriteNV:
   1391          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1392            BindingEntry_t *pBind;
   1393            BindingEntry_t bind;
   1394            nvBindingHdr_t hdr;
   1395            bindTableIndex_t x;
   1396          
   1397            hdr.numRecs = 0;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   7400         MOV       A,#0x0
   \   000012   F0           MOVX      @DPTR,A
   \   000013   A3           INC       DPTR
   \   000014   7400         MOV       A,#0x0
   \   000016   F0           MOVX      @DPTR,A
   1398          
   1399            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000017   7E00         MOV       R6,#0x0
   \                     ??BindWriteNV_0:
   \   000019   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00001C   E4           CLR       A
   \   00001D   93           MOVC      A,@A+DPTR
   \   00001E   F8           MOV       R0,A
   \   00001F   EE           MOV       A,R6
   \   000020   C3           CLR       C
   \   000021   98           SUBB      A,R0
   \   000022   4003         JC        $+5
   \   000024   02....       LJMP      ??BindWriteNV_1 & 0xFFFF
   1400            {
   1401              pBind = &BindingTable[x];
   \   000027   EE           MOV       A,R6
   \   000028   F8           MOV       R0,A
   \   000029   7900         MOV       R1,#0x0
   \   00002B   E8           MOV       A,R0
   \   00002C   75F00E       MOV       B,#0xe
   \   00002F   A4           MUL       AB
   \   000030   C8           XCH       A,R0
   \   000031   AAF0         MOV       R2,B
   \   000033   75F000       MOV       B,#0x0
   \   000036   A4           MUL       AB
   \   000037   2A           ADD       A,R2
   \   000038   FA           MOV       R2,A
   \   000039   75F00E       MOV       B,#0xe
   \   00003C   E9           MOV       A,R1
   \   00003D   A4           MUL       AB
   \   00003E   2A           ADD       A,R2
   \   00003F   F9           MOV       R1,A
   \   000040   74..         MOV       A,#BindingTable & 0xff
   \   000042   28           ADD       A,R0
   \   000043   F8           MOV       R0,A
   \   000044   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   000046   39           ADDC      A,R1
   \   000047   F9           MOV       R1,A
   \   000048   88..         MOV       ?V0,R0
   \   00004A   89..         MOV       ?V1,R1
   1402          
   1403              osal_memcpy( &bind, pBind, gBIND_REC_SIZE );
   \   00004C                ; Setup parameters for call to function osal_memcpy
   \   00004C   85....       MOV       ?V4,?V0
   \   00004F   85....       MOV       ?V5,?V1
   \   000052   75..00       MOV       ?V6,#0x0
   \   000055   78..         MOV       R0,#?V4
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00005A   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   00005D   E4           CLR       A
   \   00005E   93           MOVC      A,@A+DPTR
   \   00005F   FC           MOV       R4,A
   \   000060   7401         MOV       A,#0x1
   \   000062   93           MOVC      A,@A+DPTR
   \   000063   FD           MOV       R5,A
   \   000064   7405         MOV       A,#0x5
   \   000066   12....       LCALL     ?XSTACK_DISP101_8
   \   000069   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00006C   7403         MOV       A,#0x3
   \   00006E   12....       LCALL     ?DEALLOC_XSTACK8
   1404          
   1405              // Save the record to NV
   1406              osal_nv_write( ZCD_NV_BINDING_TABLE,
   1407                             (uint16)((sizeof(nvBindingHdr_t)) + (x * NV_BIND_REC_SIZE)),
   1408                             NV_BIND_REC_SIZE, &bind );
   \   000071                ; Setup parameters for call to function osal_nv_write
   \   000071   7402         MOV       A,#0x2
   \   000073   12....       LCALL     ?XSTACK_DISP100_8
   \   000076   88..         MOV       ?V2,R0
   \   000078   89..         MOV       ?V3,R1
   \   00007A   78..         MOV       R0,#?V2
   \   00007C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007F   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   000082   12....       LCALL     ?PUSH_XSTACK8_C_TWO
   \   000085   EE           MOV       A,R6
   \   000086   F8           MOV       R0,A
   \   000087   7900         MOV       R1,#0x0
   \   000089   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   00008C   E4           CLR       A
   \   00008D   93           MOVC      A,@A+DPTR
   \   00008E   F5..         MOV       ?V2,A
   \   000090   7401         MOV       A,#0x1
   \   000092   93           MOVC      A,@A+DPTR
   \   000093   F5..         MOV       ?V3,A
   \   000095   E8           MOV       A,R0
   \   000096   85..F0       MOV       B,?V2
   \   000099   A4           MUL       AB
   \   00009A   C8           XCH       A,R0
   \   00009B   AAF0         MOV       R2,B
   \   00009D   85..F0       MOV       B,?V3
   \   0000A0   A4           MUL       AB
   \   0000A1   2A           ADD       A,R2
   \   0000A2   FA           MOV       R2,A
   \   0000A3   85..F0       MOV       B,?V2
   \   0000A6   E9           MOV       A,R1
   \   0000A7   A4           MUL       AB
   \   0000A8   2A           ADD       A,R2
   \   0000A9   F9           MOV       R1,A
   \   0000AA   E8           MOV       A,R0
   \   0000AB   2402         ADD       A,#0x2
   \   0000AD   FC           MOV       R4,A
   \   0000AE   E4           CLR       A
   \   0000AF   39           ADDC      A,R1
   \   0000B0   FD           MOV       R5,A
   \   0000B1   7A41         MOV       R2,#0x41
   \   0000B3   7B00         MOV       R3,#0x0
   \   0000B5   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000B8   7404         MOV       A,#0x4
   \   0000BA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BD   E9           MOV       A,R1
   1409          
   1410              if ( pBind->srcEP != NV_BIND_EMPTY )
   \   0000BE   85..82       MOV       DPL,?V0
   \   0000C1   85..83       MOV       DPH,?V1
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   64FF         XRL       A,#0xff
   \   0000C7   600F         JZ        ??BindWriteNV_2
   1411              {
   1412                hdr.numRecs++;
   \   0000C9   85..82       MOV       DPL,?XSP + 0
   \   0000CC   85..83       MOV       DPH,?XSP + 1
   \   0000CF   E0           MOVX      A,@DPTR
   \   0000D0   2401         ADD       A,#0x1
   \   0000D2   F0           MOVX      @DPTR,A
   \   0000D3   A3           INC       DPTR
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   3400         ADDC      A,#0x0
   \   0000D7   F0           MOVX      @DPTR,A
   1413              }
   1414            }
   \                     ??BindWriteNV_2:
   \   0000D8   0E           INC       R6
   \   0000D9   02....       LJMP      ??BindWriteNV_0 & 0xFFFF
   1415          
   1416            // Save off the header
   1417            osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr );
   \                     ??BindWriteNV_1:
   \   0000DC                ; Setup parameters for call to function osal_nv_write
   \   0000DC   A8..         MOV       R0,?XSP + 0
   \   0000DE   A9..         MOV       R1,?XSP + 1
   \   0000E0   88..         MOV       ?V2,R0
   \   0000E2   89..         MOV       ?V3,R1
   \   0000E4   78..         MOV       R0,#?V2
   \   0000E6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E9   75..02       MOV       ?V2,#0x2
   \   0000EC   75..00       MOV       ?V3,#0x0
   \   0000EF   78..         MOV       R0,#?V2
   \   0000F1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F4   7C00         MOV       R4,#0x0
   \   0000F6   7D00         MOV       R5,#0x0
   \   0000F8   7A41         MOV       R2,#0x41
   \   0000FA   7B00         MOV       R3,#0x0
   \   0000FC   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000FF   7404         MOV       A,#0x4
   \   000101   12....       LCALL     ?DEALLOC_XSTACK8
   \   000104   E9           MOV       A,R1
   1418          }
   \   000105   7410         MOV       A,#0x10
   \   000107   12....       LCALL     ?DEALLOC_XSTACK8
   \   00010A   7F07         MOV       R7,#0x7
   \   00010C   02....       LJMP      ?BANKED_LEAVE_XDATA
   1419          
   1420          #else // !BINDINGTABLE_NV_SINGLES
   1421          /*********************************************************************
   1422           * @fn          BindInitNV
   1423           *
   1424           * @brief       Initialize the Binding NV Item
   1425           *
   1426           * @param       none
   1427           *
   1428           * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
   1429           *              exist in NV, NV_OPER_FAILED if failure.
   1430           */
   1431          byte BindInitNV( void )
   1432          {
   1433            bindTableIndex_t x;
   1434          
   1435            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   1436            {
   1437              // Initialize each binding record
   1438              osal_nv_item_init_ex( ZCD_NV_EX_BINDING_TABLE, x, NV_BIND_REC_SIZE, NULL );
   1439            }
   1440            return ( ZSUCCESS );
   1441          }
   1442          
   1443          /*********************************************************************
   1444           * @fn          BindSetDefaultNV
   1445           *
   1446           * @brief       Write the defaults to NV
   1447           *
   1448           * @param       none
   1449           *
   1450           * @return      none
   1451           */
   1452          void BindSetDefaultNV( void )
   1453          {
   1454            BindingEntry_t bind;
   1455            bindTableIndex_t x;
   1456          
   1457            // Initialize a binding record
   1458            osal_memset( &bind, 0xFF, sizeof ( BindingEntry_t ) );
   1459          
   1460            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   1461            {
   1462              // Over write each binding record with an "empty" record
   1463              osal_nv_write_ex( ZCD_NV_EX_BINDING_TABLE, x, 0, NV_BIND_REC_SIZE, &bind );
   1464            }
   1465          }
   1466          
   1467          /*********************************************************************
   1468           * @fn          BindRestoreFromNV
   1469           *
   1470           * @brief       Restore the binding table from NV
   1471           *
   1472           * @param       none
   1473           *
   1474           * @return      Number of entries restored (non-emtpy)
   1475           */
   1476          uint16 BindRestoreFromNV( void )
   1477          {
   1478            bindTableIndex_t x;
   1479            uint16 validRecsCount = 0;
   1480          
   1481            // Read in the device list
   1482            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   1483            {
   1484              if ( osal_nv_read_ex( ZCD_NV_EX_BINDING_TABLE, x, 0,
   1485                               (uint16)NV_BIND_REC_SIZE, &BindingTable[x] ) == ZSUCCESS )
   1486              {
   1487                // Check for non-empty record
   1488                if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
   1489                {
   1490                  // Count non-empty records
   1491                  validRecsCount++;
   1492                }
   1493              }
   1494            }
   1495            return ( validRecsCount );
   1496          }
   1497          
   1498          /*********************************************************************
   1499           * @fn          BindWriteNV
   1500           *
   1501           * @brief       Copy the Binding Table in NV
   1502           *
   1503           * @param       none
   1504           *
   1505           * @return      none
   1506           */
   1507          void BindWriteNV( void )
   1508          {
   1509            bindTableIndex_t x;
   1510          
   1511            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   1512            {
   1513              // Save the record to NV
   1514              osal_nv_write_ex( ZCD_NV_EX_BINDING_TABLE, x, 0,
   1515                               (uint16)NV_BIND_REC_SIZE, &BindingTable[x] );
   1516            }
   1517          }
   1518          #endif // BINDINGTABLE_NV_SINGLES
   1519          
   1520          /*********************************************************************
   1521          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     56   BindCopyBackupToNewNV
        0     34   -> osal_nv_delete
        0     36   -> osal_nv_item_init
        0     34   -> osal_nv_item_len
        0     38   -> osal_nv_read
        0     38   -> osal_nv_write
      0     12   BindInitNV
        0     10   -> BindSetDefaultNV
        0     12   -> osal_nv_item_init
      0     18   BindRestoreFromNV
        0     14   -> BindUpgradeTableInNV
        0     18   -> osal_nv_read
      0     26   BindSetDefaultNV
        0     16   -> osal_nv_write
      0     36   BindUpgradeTableInNV
        0     18   -> BindCopyBackupToNewNV
        0     18   -> nwkCreateDuplicateNV
        0     18   -> osal_nv_delete
        0     18   -> osal_nv_item_len
        0     22   -> osal_nv_read
      0     35   BindWriteNV
        0     34   -> osal_memcpy
        0     35   -> osal_nv_write
      0     10   GetBindingTableEntry
      0     10   InitBindingTable
        0     10   -> osal_memset
      0     49   bindAddClusterIdToList
      1     45   bindAddEntry
        0     40   -> bindAddClusterIdToList
        0     40   -> bindAddrIndexGet
        0     40   -> bindAddrMgrLocalLoad
        0     40   -> bindFindEmpty
        0     40   -> bindIsClusterIDinList
        0     43   -> osal_memcpy
      0     62   bindAddrIndexGet
        0     22   -> AddrMgrEntryLookupExt
        0     22   -> AddrMgrEntryLookupNwk
        0     22   -> AddrMgrEntryUpdate
        0     22   -> AddrMgrExtAddrSet
      0     63   bindAddrMgrLocalLoad
        0     23   -> AddrMgrEntryUpdate
        0     23   -> AddrMgrExtAddrSet
        0     23   -> NLME_GetCoordExtAddr
        0     23   -> NLME_GetCoordShortAddr
        0     23   -> NLME_GetExtAddr
      0     36   bindAddressClear
        0     22   -> AddrMgrEntryRelease
      0      9   bindCapacity
      0     14   bindFind
        0     14   -> bindIsClusterIDinList
      2     40   bindFindEmpty
      0     16   bindFindExisting
        0     16   -> bindingAddrMgsHelperFind
      0     49   bindIsClusterIDinList
      0     18   bindNumBoundTo
        0     18   -> bindingAddrMgsHelperFind
      2      0   bindNumOfEntries
      0     15   bindNumReflections
        0     15   -> bindIsClusterIDinList
      0     11   bindRemoveClusterIdFromList
      0     14   bindRemoveDev
        0     14   -> bindAddressClear
        0     14   -> bindRemoveEntry
        0     14   -> bindingAddrMgsHelperFind
      0     23   bindRemoveEntry
        0      9   -> osal_memset
      0     10   bindRemoveSrcDev
        0     10   -> bindAddressClear
        0     10   -> bindRemoveEntry
      0     29   bindUpdateAddr
        0     29   -> bindingAddrMgsHelperFind
      0     25   bindingAddrMgsHelperConvert
        0     25   -> AddrMgrEntryGet
        0     25   -> sAddrExtCpy
      0     22   bindingAddrMgsHelperConvertShort
        0     22   -> AddrMgrEntryGet
      0     51   bindingAddrMgsHelperFind
        0     22   -> AddrMgrEntryLookupExt
        0     22   -> AddrMgrEntryLookupNwk
        0     22   -> AddrMgrExtAddrSet


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     516  BindCopyBackupToNewNV
      92  BindInitNV
     300  BindRestoreFromNV
      74  BindSetDefaultNV
     298  BindUpgradeTableInNV
     271  BindWriteNV
     143  GetBindingTableEntry
     136  InitBindingTable
     106  bindAddClusterIdToList
    1045  bindAddEntry
     207  bindAddrIndexGet
     158  bindAddrMgrLocalLoad
       1  bindAddrMgrLocalLoaded
     221  bindAddressClear
     103  bindCapacity
     122  bindFind
     106  bindFindEmpty
     446  bindFindExisting
      89  bindIsClusterIDinList
     261  bindNumBoundTo
     116  bindNumOfEntries
     115  bindNumReflections
     244  bindRemoveClusterIdFromList
     352  bindRemoveDev
      35  bindRemoveEntry
     168  bindRemoveSrcDev
     185  bindUpdateAddr
      96  bindingAddrMgsHelperConvert
      61  bindingAddrMgsHelperConvertShort
     113  bindingAddrMgsHelperFind
       2  pBindInitNV
       2  pBindRestoreFromNV
       2  pBindSetDefaultNV
       2  pBindWriteNV
       2  pbindAddEntry
       2  pbindNumOfEntries
       2  pbindRemoveDev
     174  -- Other

 
 6 179 bytes in segment BANKED_CODE
   174 bytes in segment BANK_RELAYS
    15 bytes in segment XDATA_Z
 
   174 bytes of CODE     memory
 6 179 bytes of HUGECODE memory
    15 bytes of XDATA    memory

Errors: none
Warnings: none
