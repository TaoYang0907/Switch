###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               31/Jul/2020  11:47:12
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\AA\Z-Stack 3.0.2\Components\stack\af\AF.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW97CA.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\stack\af\AF.c" -D SECURE=1 -D TC_LINKKEY_JOIN -D
#        NV_INIT -D NV_RESTORE -D POWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D
#        xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_GROUPS -D
#        BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\AF.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\AF.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\stack\af\AF.c
      1          /**************************************************************************************************
      2            Filename:       AF.c
      3            Revised:        $Date: 2014-11-04 10:53:36 -0800 (Tue, 04 Nov 2014) $
      4            Revision:       $Revision: 40974 $
      5          
      6            Description:    Application Framework - Device Description helper functions
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "nwk_globals.h"
     47          #include "nwk_util.h"
     48          #include "aps_groups.h"
     49          #include "ZDProfile.h"
     50          #include "aps_frag.h"
     51          #include "rtg.h"
     52          
     53          #if defined ( MT_AF_CB_FUNC )
     54            #include "MT_AF.h"
     55          #endif
     56          
     57          #if defined ( INTER_PAN )
     58            #include "stub_aps.h"
     59          #endif
     60          
     61          #include "bdb.h" 
     62          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED==1)
     63            #include "bdb_tlCommissioning.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          /*********************************************************************
     71           * @fn      afSend
     72           *
     73           * @brief   Helper macro for V1 API to invoke V2 API.
     74           *
     75           * input parameters
     76           *
     77           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
     78           * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
     79           * @param   cID - A valid cluster ID as specified by the Profile.
     80           * @param   len - Number of bytes of data pointed to by next param.
     81           * @param  *buf - A pointer to the data bytes to send.
     82           * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
     83           * @param  *transID - A pointer to a byte which can be modified and which will
     84           *                    be used as the transaction sequence number of the msg.
     85           *
     86           * output parameters
     87           *
     88           * @param  *transID - Incremented by one if the return value is success.
     89           *
     90           * @return  afStatus_t - See previous definition of afStatus_... types.
     91           */
     92          #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \
     93                  AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \
     94                                    (cID), (len), (buf), (transID), (options), (radius) )
     95          
     96          /*********************************************************************
     97           * GLOBAL VARIABLES
     98           */
     99          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    100          epList_t *epList;
   \                     epList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    101          
    102          /*********************************************************************
    103           * LOCAL FUNCTIONS
    104           */
    105          
    106          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
    107                          zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    108                          uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius );
    109          
    110          static epList_t *afFindEndPointDescList( uint8 EndPoint );
    111          
    112          static pDescCB afGetDescCB( endPointDesc_t *epDesc );
    113          
    114          /*********************************************************************
    115           * PUBLIC FUNCTIONS
    116           */
    117          
    118          /*********************************************************************
    119           * @fn      afInit
    120           *
    121           * @brief   Initialization function for the AF.
    122           *
    123           * @param   none
    124           *
    125           * @return  none
    126          void afInit( void )
    127          {
    128          }
    129           */
    130          
    131          /*********************************************************************
    132           * @fn      afRegisterExtended
    133           *
    134           * @brief   Register an Application's EndPoint description.
    135           *
    136           * @param   epDesc - pointer to the Application's endpoint descriptor.
    137           * @param   descFn - pointer to descriptor callback function
    138           * @param   applFn - pointer to the Application callback function
    139           *
    140           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    141           *
    142           * @return  Pointer to epList_t on success, NULL otherwise.
    143           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    144          epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn, pApplCB applFn )
   \                     afRegisterExtended:
    145          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   8C..         MOV       ?V6,R4
   \   000010   8D..         MOV       ?V7,R5
   \   000012   7411         MOV       A,#0x11
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V4,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V5,A
    146            epList_t *ep = osal_mem_alloc(sizeof(epList_t));
   \   00001E                ; Setup parameters for call to function osal_mem_alloc
   \   00001E   7A0B         MOV       R2,#0xb
   \   000020   7B00         MOV       R3,#0x0
   \   000022   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000025   8A..         MOV       ?V2,R2
   \   000027   8B..         MOV       ?V3,R3
   \   000029   AE..         MOV       R6,?V2
   \   00002B   AF..         MOV       R7,?V3
    147          
    148            if (ep != NULL)
   \   00002D   EE           MOV       A,R6
   \   00002E   4F           ORL       A,R7
   \   00002F   7003         JNZ       $+5
   \   000031   02....       LJMP      ??afRegisterExtended_0 & 0xFFFF
    149            {
    150              ep->nextDesc = epList;
   \   000034   90....       MOV       DPTR,#epList
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F8           MOV       R0,A
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F9           MOV       R1,A
   \   00003C   8E82         MOV       DPL,R6
   \   00003E   8F83         MOV       DPH,R7
   \   000040   E8           MOV       A,R0
   \   000041   F0           MOVX      @DPTR,A
   \   000042   A3           INC       DPTR
   \   000043   E9           MOV       A,R1
   \   000044   F0           MOVX      @DPTR,A
    151              epList = ep;
   \   000045   90....       MOV       DPTR,#epList
   \   000048   EE           MOV       A,R6
   \   000049   F0           MOVX      @DPTR,A
   \   00004A   A3           INC       DPTR
   \   00004B   EF           MOV       A,R7
   \   00004C   F0           MOVX      @DPTR,A
    152              ep->epDesc = epDesc;
   \   00004D   8E82         MOV       DPL,R6
   \   00004F   8F83         MOV       DPH,R7
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   E5..         MOV       A,?V0
   \   000055   F0           MOVX      @DPTR,A
   \   000056   A3           INC       DPTR
   \   000057   E5..         MOV       A,?V1
   \   000059   F0           MOVX      @DPTR,A
    153              ep->pfnDescCB = descFn;
   \   00005A   8E82         MOV       DPL,R6
   \   00005C   8F83         MOV       DPH,R7
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   E5..         MOV       A,?V6
   \   000064   F0           MOVX      @DPTR,A
   \   000065   A3           INC       DPTR
   \   000066   E5..         MOV       A,?V7
   \   000068   F0           MOVX      @DPTR,A
    154              ep->apsfCfg.frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \   000069   8E82         MOV       DPL,R6
   \   00006B   8F83         MOV       DPH,R7
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   7432         MOV       A,#0x32
   \   000075   F0           MOVX      @DPTR,A
    155              ep->apsfCfg.windowSize = APSF_DEFAULT_WINDOW_SIZE;
   \   000076   8E82         MOV       DPL,R6
   \   000078   8F83         MOV       DPH,R7
   \   00007A   A3           INC       DPTR
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   7401         MOV       A,#0x1
   \   000083   F0           MOVX      @DPTR,A
    156              ep->flags = eEP_AllowMatch;  // Default to allow Match Descriptor.
   \   000084   8E82         MOV       DPL,R6
   \   000086   8F83         MOV       DPH,R7
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   7401         MOV       A,#0x1
   \   000092   F0           MOVX      @DPTR,A
    157              ep->pfnApplCB = applFn;
   \   000093   8E82         MOV       DPL,R6
   \   000095   8F83         MOV       DPH,R7
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   E5..         MOV       A,?V4
   \   0000A2   F0           MOVX      @DPTR,A
   \   0000A3   A3           INC       DPTR
   \   0000A4   E5..         MOV       A,?V5
   \   0000A6   F0           MOVX      @DPTR,A
    158              
    159            #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
    160              //Make sure we add at least one application endpoint
    161              if ((epDesc->endPoint != 0)  || (epDesc->endPoint < BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
   \   0000A7   85..82       MOV       DPL,?V0
   \   0000AA   85..83       MOV       DPH,?V1
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   700C         JNZ       ??afRegisterExtended_1
   \   0000B0   85..82       MOV       DPL,?V0
   \   0000B3   85..83       MOV       DPH,?V1
   \   0000B6   E0           MOVX      A,@DPTR
   \   0000B7   C3           CLR       C
   \   0000B8   94F1         SUBB      A,#-0xf
   \   0000BA   5045         JNC       ??afRegisterExtended_2
    162              {
    163                bdb_HeadEpDescriptorList = epList;
   \                     ??afRegisterExtended_1:
   \   0000BC   90....       MOV       DPTR,#epList
   \   0000BF   E0           MOVX      A,@DPTR
   \   0000C0   F8           MOV       R0,A
   \   0000C1   A3           INC       DPTR
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   F9           MOV       R1,A
   \   0000C4   90....       MOV       DPTR,#bdb_HeadEpDescriptorList
   \   0000C7   E8           MOV       A,R0
   \   0000C8   F0           MOVX      @DPTR,A
   \   0000C9   A3           INC       DPTR
   \   0000CA   E9           MOV       A,R1
   \   0000CB   F0           MOVX      @DPTR,A
    164                ep->epDesc->epType = bdb_zclFindingBindingEpType(ep->epDesc);
   \   0000CC                ; Setup parameters for call to function bdb_zclFindingBindingEpType
   \   0000CC   8E82         MOV       DPL,R6
   \   0000CE   8F83         MOV       DPH,R7
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   FA           MOV       R2,A
   \   0000D4   A3           INC       DPTR
   \   0000D5   E0           MOVX      A,@DPTR
   \   0000D6   FB           MOV       R3,A
   \   0000D7   12....       LCALL     `??bdb_zclFindingBindingEpType::?relay`; Banked call to: bdb_zclFindingBindingEpType
   \   0000DA   E9           MOV       A,R1
   \   0000DB   C0E0         PUSH      A
   \   0000DD   85..82       MOV       DPL,?XSP + 0
   \   0000E0   85..83       MOV       DPH,?XSP + 1
   \   0000E3   D0E0         POP       A
   \   0000E5   F0           MOVX      @DPTR,A
   \   0000E6   85..82       MOV       DPL,?XSP + 0
   \   0000E9   85..83       MOV       DPH,?XSP + 1
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   C0E0         PUSH      A
   \   0000EF   8E82         MOV       DPL,R6
   \   0000F1   8F83         MOV       DPH,R7
   \   0000F3   A3           INC       DPTR
   \   0000F4   A3           INC       DPTR
   \   0000F5   E0           MOVX      A,@DPTR
   \   0000F6   F8           MOV       R0,A
   \   0000F7   A3           INC       DPTR
   \   0000F8   E0           MOVX      A,@DPTR
   \   0000F9   F583         MOV       DPH,A
   \   0000FB   8882         MOV       DPL,R0
   \   0000FD   A3           INC       DPTR
   \   0000FE   D0E0         POP       A
   \   000100   F0           MOVX      @DPTR,A
    165              }
    166          
    167            #endif
    168          #if defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET )
    169              // find the first empty entry in the device info table
    170              for ( uint8 i = 0; i < 5; i++ )
   \                     ??afRegisterExtended_2:
   \   000101   75..00       MOV       ?V2,#0x0
   \                     ??afRegisterExtended_3:
   \   000104   E5..         MOV       A,?V2
   \   000106   C3           CLR       C
   \   000107   9405         SUBB      A,#0x5
   \   000109   4003         JC        $+5
   \   00010B   02....       LJMP      ??afRegisterExtended_0 & 0xFFFF
    171              {
    172                if ( touchLinkSubDevicesTbl[i] == NULL )
   \   00010E   E5..         MOV       A,?V2
   \   000110   F8           MOV       R0,A
   \   000111   7900         MOV       R1,#0x0
   \   000113   E8           MOV       A,R0
   \   000114   75F002       MOV       B,#0x2
   \   000117   A4           MUL       AB
   \   000118   C8           XCH       A,R0
   \   000119   AAF0         MOV       R2,B
   \   00011B   75F000       MOV       B,#0x0
   \   00011E   A4           MUL       AB
   \   00011F   2A           ADD       A,R2
   \   000120   FA           MOV       R2,A
   \   000121   75F002       MOV       B,#0x2
   \   000124   E9           MOV       A,R1
   \   000125   A4           MUL       AB
   \   000126   2A           ADD       A,R2
   \   000127   F9           MOV       R1,A
   \   000128   74..         MOV       A,#touchLinkSubDevicesTbl & 0xff
   \   00012A   28           ADD       A,R0
   \   00012B   F582         MOV       DPL,A
   \   00012D   74..         MOV       A,#(touchLinkSubDevicesTbl >> 8) & 0xff
   \   00012F   39           ADDC      A,R1
   \   000130   F583         MOV       DPH,A
   \   000132   E0           MOVX      A,@DPTR
   \   000133   F8           MOV       R0,A
   \   000134   A3           INC       DPTR
   \   000135   E0           MOVX      A,@DPTR
   \   000136   F9           MOV       R1,A
   \   000137   E8           MOV       A,R0
   \   000138   49           ORL       A,R1
   \   000139   6003         JZ        $+5
   \   00013B   02....       LJMP      ??afRegisterExtended_4 & 0xFFFF
    173                {
    174                  touchLinkSubDevicesTbl[i] = osal_mem_alloc(sizeof(bdbTLDeviceInfo_t));
   \   00013E                ; Setup parameters for call to function osal_mem_alloc
   \   00013E   7A07         MOV       R2,#0x7
   \   000140   7B00         MOV       R3,#0x0
   \   000142   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000145   E5..         MOV       A,?V2
   \   000147   F8           MOV       R0,A
   \   000148   7900         MOV       R1,#0x0
   \   00014A   E8           MOV       A,R0
   \   00014B   75F002       MOV       B,#0x2
   \   00014E   A4           MUL       AB
   \   00014F   C8           XCH       A,R0
   \   000150   ACF0         MOV       R4,B
   \   000152   75F000       MOV       B,#0x0
   \   000155   A4           MUL       AB
   \   000156   2C           ADD       A,R4
   \   000157   FC           MOV       R4,A
   \   000158   75F002       MOV       B,#0x2
   \   00015B   E9           MOV       A,R1
   \   00015C   A4           MUL       AB
   \   00015D   2C           ADD       A,R4
   \   00015E   F9           MOV       R1,A
   \   00015F   74..         MOV       A,#touchLinkSubDevicesTbl & 0xff
   \   000161   28           ADD       A,R0
   \   000162   F582         MOV       DPL,A
   \   000164   74..         MOV       A,#(touchLinkSubDevicesTbl >> 8) & 0xff
   \   000166   39           ADDC      A,R1
   \   000167   F583         MOV       DPH,A
   \   000169   EA           MOV       A,R2
   \   00016A   F0           MOVX      @DPTR,A
   \   00016B   A3           INC       DPTR
   \   00016C   EB           MOV       A,R3
   \   00016D   F0           MOVX      @DPTR,A
    175                  if ( touchLinkSubDevicesTbl[i] != NULL )
   \   00016E   E5..         MOV       A,?V2
   \   000170   F8           MOV       R0,A
   \   000171   7900         MOV       R1,#0x0
   \   000173   E8           MOV       A,R0
   \   000174   75F002       MOV       B,#0x2
   \   000177   A4           MUL       AB
   \   000178   C8           XCH       A,R0
   \   000179   AAF0         MOV       R2,B
   \   00017B   75F000       MOV       B,#0x0
   \   00017E   A4           MUL       AB
   \   00017F   2A           ADD       A,R2
   \   000180   FA           MOV       R2,A
   \   000181   75F002       MOV       B,#0x2
   \   000184   E9           MOV       A,R1
   \   000185   A4           MUL       AB
   \   000186   2A           ADD       A,R2
   \   000187   F9           MOV       R1,A
   \   000188   74..         MOV       A,#touchLinkSubDevicesTbl & 0xff
   \   00018A   28           ADD       A,R0
   \   00018B   F582         MOV       DPL,A
   \   00018D   74..         MOV       A,#(touchLinkSubDevicesTbl >> 8) & 0xff
   \   00018F   39           ADDC      A,R1
   \   000190   F583         MOV       DPH,A
   \   000192   E0           MOVX      A,@DPTR
   \   000193   F8           MOV       R0,A
   \   000194   A3           INC       DPTR
   \   000195   E0           MOVX      A,@DPTR
   \   000196   F9           MOV       R1,A
   \   000197   E8           MOV       A,R0
   \   000198   49           ORL       A,R1
   \   000199   7003         JNZ       $+5
   \   00019B   02....       LJMP      ??afRegisterExtended_4 & 0xFFFF
    176                  {
    177                    touchLinkSubDevicesTbl[i]->deviceID = epDesc->simpleDesc->AppDeviceId;
   \   00019E   85..82       MOV       DPL,?V0
   \   0001A1   85..83       MOV       DPH,?V1
   \   0001A4   A3           INC       DPTR
   \   0001A5   A3           INC       DPTR
   \   0001A6   A3           INC       DPTR
   \   0001A7   A3           INC       DPTR
   \   0001A8   E0           MOVX      A,@DPTR
   \   0001A9   F8           MOV       R0,A
   \   0001AA   A3           INC       DPTR
   \   0001AB   E0           MOVX      A,@DPTR
   \   0001AC   F583         MOV       DPH,A
   \   0001AE   8882         MOV       DPL,R0
   \   0001B0   A3           INC       DPTR
   \   0001B1   A3           INC       DPTR
   \   0001B2   A3           INC       DPTR
   \   0001B3   E0           MOVX      A,@DPTR
   \   0001B4   FA           MOV       R2,A
   \   0001B5   A3           INC       DPTR
   \   0001B6   E0           MOVX      A,@DPTR
   \   0001B7   FB           MOV       R3,A
   \   0001B8   E5..         MOV       A,?V2
   \   0001BA   F8           MOV       R0,A
   \   0001BB   7900         MOV       R1,#0x0
   \   0001BD   E8           MOV       A,R0
   \   0001BE   75F002       MOV       B,#0x2
   \   0001C1   A4           MUL       AB
   \   0001C2   C8           XCH       A,R0
   \   0001C3   ACF0         MOV       R4,B
   \   0001C5   75F000       MOV       B,#0x0
   \   0001C8   A4           MUL       AB
   \   0001C9   2C           ADD       A,R4
   \   0001CA   FC           MOV       R4,A
   \   0001CB   75F002       MOV       B,#0x2
   \   0001CE   E9           MOV       A,R1
   \   0001CF   A4           MUL       AB
   \   0001D0   2C           ADD       A,R4
   \   0001D1   F9           MOV       R1,A
   \   0001D2   74..         MOV       A,#touchLinkSubDevicesTbl & 0xff
   \   0001D4   28           ADD       A,R0
   \   0001D5   F582         MOV       DPL,A
   \   0001D7   74..         MOV       A,#(touchLinkSubDevicesTbl >> 8) & 0xff
   \   0001D9   39           ADDC      A,R1
   \   0001DA   F583         MOV       DPH,A
   \   0001DC   E0           MOVX      A,@DPTR
   \   0001DD   F8           MOV       R0,A
   \   0001DE   A3           INC       DPTR
   \   0001DF   E0           MOVX      A,@DPTR
   \   0001E0   F583         MOV       DPH,A
   \   0001E2   8882         MOV       DPL,R0
   \   0001E4   A3           INC       DPTR
   \   0001E5   A3           INC       DPTR
   \   0001E6   A3           INC       DPTR
   \   0001E7   EA           MOV       A,R2
   \   0001E8   F0           MOVX      @DPTR,A
   \   0001E9   A3           INC       DPTR
   \   0001EA   EB           MOV       A,R3
   \   0001EB   F0           MOVX      @DPTR,A
    178                    touchLinkSubDevicesTbl[i]->endpoint = epDesc->simpleDesc->EndPoint;
   \   0001EC   85..82       MOV       DPL,?V0
   \   0001EF   85..83       MOV       DPH,?V1
   \   0001F2   A3           INC       DPTR
   \   0001F3   A3           INC       DPTR
   \   0001F4   A3           INC       DPTR
   \   0001F5   A3           INC       DPTR
   \   0001F6   E0           MOVX      A,@DPTR
   \   0001F7   F8           MOV       R0,A
   \   0001F8   A3           INC       DPTR
   \   0001F9   E0           MOVX      A,@DPTR
   \   0001FA   F583         MOV       DPH,A
   \   0001FC   8882         MOV       DPL,R0
   \   0001FE   E0           MOVX      A,@DPTR
   \   0001FF   C0E0         PUSH      A
   \   000201   E5..         MOV       A,?V2
   \   000203   F8           MOV       R0,A
   \   000204   7900         MOV       R1,#0x0
   \   000206   E8           MOV       A,R0
   \   000207   75F002       MOV       B,#0x2
   \   00020A   A4           MUL       AB
   \   00020B   C8           XCH       A,R0
   \   00020C   AAF0         MOV       R2,B
   \   00020E   75F000       MOV       B,#0x0
   \   000211   A4           MUL       AB
   \   000212   2A           ADD       A,R2
   \   000213   FA           MOV       R2,A
   \   000214   75F002       MOV       B,#0x2
   \   000217   E9           MOV       A,R1
   \   000218   A4           MUL       AB
   \   000219   2A           ADD       A,R2
   \   00021A   F9           MOV       R1,A
   \   00021B   74..         MOV       A,#touchLinkSubDevicesTbl & 0xff
   \   00021D   28           ADD       A,R0
   \   00021E   F582         MOV       DPL,A
   \   000220   74..         MOV       A,#(touchLinkSubDevicesTbl >> 8) & 0xff
   \   000222   39           ADDC      A,R1
   \   000223   F583         MOV       DPH,A
   \   000225   E0           MOVX      A,@DPTR
   \   000226   F8           MOV       R0,A
   \   000227   A3           INC       DPTR
   \   000228   E0           MOVX      A,@DPTR
   \   000229   F583         MOV       DPH,A
   \   00022B   8882         MOV       DPL,R0
   \   00022D   D0E0         POP       A
   \   00022F   F0           MOVX      @DPTR,A
    179                    touchLinkSubDevicesTbl[i]->profileID = epDesc->simpleDesc->AppProfId;
   \   000230   85..82       MOV       DPL,?V0
   \   000233   85..83       MOV       DPH,?V1
   \   000236   A3           INC       DPTR
   \   000237   A3           INC       DPTR
   \   000238   A3           INC       DPTR
   \   000239   A3           INC       DPTR
   \   00023A   E0           MOVX      A,@DPTR
   \   00023B   F8           MOV       R0,A
   \   00023C   A3           INC       DPTR
   \   00023D   E0           MOVX      A,@DPTR
   \   00023E   F583         MOV       DPH,A
   \   000240   8882         MOV       DPL,R0
   \   000242   A3           INC       DPTR
   \   000243   E0           MOVX      A,@DPTR
   \   000244   FA           MOV       R2,A
   \   000245   A3           INC       DPTR
   \   000246   E0           MOVX      A,@DPTR
   \   000247   FB           MOV       R3,A
   \   000248   E5..         MOV       A,?V2
   \   00024A   F8           MOV       R0,A
   \   00024B   7900         MOV       R1,#0x0
   \   00024D   E8           MOV       A,R0
   \   00024E   75F002       MOV       B,#0x2
   \   000251   A4           MUL       AB
   \   000252   C8           XCH       A,R0
   \   000253   ACF0         MOV       R4,B
   \   000255   75F000       MOV       B,#0x0
   \   000258   A4           MUL       AB
   \   000259   2C           ADD       A,R4
   \   00025A   FC           MOV       R4,A
   \   00025B   75F002       MOV       B,#0x2
   \   00025E   E9           MOV       A,R1
   \   00025F   A4           MUL       AB
   \   000260   2C           ADD       A,R4
   \   000261   F9           MOV       R1,A
   \   000262   74..         MOV       A,#touchLinkSubDevicesTbl & 0xff
   \   000264   28           ADD       A,R0
   \   000265   F582         MOV       DPL,A
   \   000267   74..         MOV       A,#(touchLinkSubDevicesTbl >> 8) & 0xff
   \   000269   39           ADDC      A,R1
   \   00026A   F583         MOV       DPH,A
   \   00026C   E0           MOVX      A,@DPTR
   \   00026D   F8           MOV       R0,A
   \   00026E   A3           INC       DPTR
   \   00026F   E0           MOVX      A,@DPTR
   \   000270   F583         MOV       DPH,A
   \   000272   8882         MOV       DPL,R0
   \   000274   A3           INC       DPTR
   \   000275   EA           MOV       A,R2
   \   000276   F0           MOVX      @DPTR,A
   \   000277   A3           INC       DPTR
   \   000278   EB           MOV       A,R3
   \   000279   F0           MOVX      @DPTR,A
    180                    touchLinkSubDevicesTbl[i]->version = epDesc->simpleDesc->AppDevVer;
   \   00027A   85..82       MOV       DPL,?V0
   \   00027D   85..83       MOV       DPH,?V1
   \   000280   A3           INC       DPTR
   \   000281   A3           INC       DPTR
   \   000282   A3           INC       DPTR
   \   000283   A3           INC       DPTR
   \   000284   E0           MOVX      A,@DPTR
   \   000285   F8           MOV       R0,A
   \   000286   A3           INC       DPTR
   \   000287   E0           MOVX      A,@DPTR
   \   000288   F583         MOV       DPH,A
   \   00028A   8882         MOV       DPL,R0
   \   00028C   A3           INC       DPTR
   \   00028D   A3           INC       DPTR
   \   00028E   A3           INC       DPTR
   \   00028F   A3           INC       DPTR
   \   000290   A3           INC       DPTR
   \   000291   E0           MOVX      A,@DPTR
   \   000292   540F         ANL       A,#0xf
   \   000294   C0E0         PUSH      A
   \   000296   E5..         MOV       A,?V2
   \   000298   F8           MOV       R0,A
   \   000299   7900         MOV       R1,#0x0
   \   00029B   E8           MOV       A,R0
   \   00029C   75F002       MOV       B,#0x2
   \   00029F   A4           MUL       AB
   \   0002A0   C8           XCH       A,R0
   \   0002A1   AAF0         MOV       R2,B
   \   0002A3   75F000       MOV       B,#0x0
   \   0002A6   A4           MUL       AB
   \   0002A7   2A           ADD       A,R2
   \   0002A8   FA           MOV       R2,A
   \   0002A9   75F002       MOV       B,#0x2
   \   0002AC   E9           MOV       A,R1
   \   0002AD   A4           MUL       AB
   \   0002AE   2A           ADD       A,R2
   \   0002AF   F9           MOV       R1,A
   \   0002B0   74..         MOV       A,#touchLinkSubDevicesTbl & 0xff
   \   0002B2   28           ADD       A,R0
   \   0002B3   F582         MOV       DPL,A
   \   0002B5   74..         MOV       A,#(touchLinkSubDevicesTbl >> 8) & 0xff
   \   0002B7   39           ADDC      A,R1
   \   0002B8   F583         MOV       DPH,A
   \   0002BA   E0           MOVX      A,@DPTR
   \   0002BB   F8           MOV       R0,A
   \   0002BC   A3           INC       DPTR
   \   0002BD   E0           MOVX      A,@DPTR
   \   0002BE   F583         MOV       DPH,A
   \   0002C0   8882         MOV       DPL,R0
   \   0002C2   A3           INC       DPTR
   \   0002C3   A3           INC       DPTR
   \   0002C4   A3           INC       DPTR
   \   0002C5   A3           INC       DPTR
   \   0002C6   A3           INC       DPTR
   \   0002C7   D0E0         POP       A
   \   0002C9   F0           MOVX      @DPTR,A
    181                    break;
   \   0002CA   8005         SJMP      ??afRegisterExtended_0
    182                  }
    183                }
    184              }
   \                     ??afRegisterExtended_4:
   \   0002CC   05..         INC       ?V2
   \   0002CE   02....       LJMP      ??afRegisterExtended_3 & 0xFFFF
    185          #endif  // BDB_TL_INITIATOR || BDB_TL_TARGET
    186            }
    187           
    188            return ep;
   \                     ??afRegisterExtended_0:
   \   0002D1   EE           MOV       A,R6
   \   0002D2   FA           MOV       R2,A
   \   0002D3   EF           MOV       A,R7
   \   0002D4   FB           MOV       R3,A
   \   0002D5   7401         MOV       A,#0x1
   \   0002D7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002DA   7F08         MOV       R7,#0x8
   \   0002DC   02....       LJMP      ?BANKED_LEAVE_XDATA
    189          }
    190          
    191          /*********************************************************************
    192           * @fn      afRegister
    193           *
    194           * @brief   Register an Application's EndPoint description.
    195           *
    196           * @param   epDesc - pointer to the Application's endpoint descriptor.
    197           *
    198           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    199           *
    200           * @return  afStatus_SUCCESS - Registered
    201           *          afStatus_MEM_FAIL - not enough memory to add descriptor
    202           *          afStatus_INVALID_PARAMETER - duplicate endpoint
    203           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    204          afStatus_t afRegister( endPointDesc_t *epDesc )
   \                     afRegister:
    205          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    206            if (afFindEndPointDescList(epDesc->endPoint))  // Look for duplicate endpoint.
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F9           MOV       R1,A
   \   00000F   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000012   8A..         MOV       ?V0,R2
   \   000014   8B..         MOV       ?V1,R3
   \   000016   E5..         MOV       A,?V0
   \   000018   45..         ORL       A,?V1
   \   00001A   6004         JZ        ??afRegister_0
    207            {
    208              return afStatus_INVALID_PARAMETER;
   \   00001C   7902         MOV       R1,#0x2
   \   00001E   802A         SJMP      ??afRegister_1
    209            }
    210          
    211            return ((NULL == afRegisterExtended(epDesc, NULL, NULL)) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
   \                     ??afRegister_0:
   \   000020                ; Setup parameters for call to function afRegisterExtended
   \   000020   E4           CLR       A
   \   000021   F5..         MOV       ?V0,A
   \   000023   F5..         MOV       ?V1,A
   \   000025   78..         MOV       R0,#?V0
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002A   7C00         MOV       R4,#0x0
   \   00002C   7D00         MOV       R5,#0x0
   \   00002E   EE           MOV       A,R6
   \   00002F   FA           MOV       R2,A
   \   000030   EF           MOV       A,R7
   \   000031   FB           MOV       R3,A
   \   000032   12....       LCALL     `??afRegisterExtended::?relay`; Banked call to: afRegisterExtended
   \   000035   7402         MOV       A,#0x2
   \   000037   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003A   8A..         MOV       ?V0,R2
   \   00003C   8B..         MOV       ?V1,R3
   \   00003E   E5..         MOV       A,?V0
   \   000040   45..         ORL       A,?V1
   \   000042   7004         JNZ       ??afRegister_2
   \   000044   7910         MOV       R1,#0x10
   \   000046   8002         SJMP      ??afRegister_1
   \                     ??afRegister_2:
   \   000048   7900         MOV       R1,#0x0
   \                     ??afRegister_1:
   \   00004A   7F02         MOV       R7,#0x2
   \   00004C   02....       LJMP      ?BANKED_LEAVE_XDATA
    212          }
    213          
    214          /*********************************************************************
    215           * @fn      afDelete
    216           *
    217           * @brief   Delete an Application's EndPoint descriptor and frees the memory
    218           *
    219           * @param   EndPoint - Application Endpoint to delete
    220           *
    221           * @return  afStatus_SUCCESS - endpoint deleted
    222           *          afStatus_INVALID_PARAMETER - endpoint not found
    223           *          afStatus_FAILED - endpoint list empty
    224           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    225          afStatus_t afDelete( uint8 EndPoint )
   \                     afDelete:
    226          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
    227            epList_t *epCurrent;
    228            epList_t *epPrevious;
    229          
    230            if ( epList != NULL )
   \   000007   90....       MOV       DPTR,#epList
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F8           MOV       R0,A
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F9           MOV       R1,A
   \   00000F   E8           MOV       A,R0
   \   000010   49           ORL       A,R1
   \   000011   7003         JNZ       $+5
   \   000013   02....       LJMP      ??afDelete_0 & 0xFFFF
    231            {
    232              epPrevious = epCurrent = epList;
   \   000016   90....       MOV       DPTR,#epList
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F8           MOV       R0,A
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F9           MOV       R1,A
   \   00001E   E8           MOV       A,R0
   \   00001F   FE           MOV       R6,A
   \   000020   E9           MOV       A,R1
   \   000021   FF           MOV       R7,A
   \   000022   8E..         MOV       ?V0,R6
   \   000024   8F..         MOV       ?V1,R7
    233          
    234              // first element of the list matches
    235              if ( epCurrent->epDesc->endPoint == EndPoint )
   \   000026   8E82         MOV       DPL,R6
   \   000028   8F83         MOV       DPH,R7
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F8           MOV       R0,A
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F583         MOV       DPH,A
   \   000032   8882         MOV       DPL,R0
   \   000034   E0           MOVX      A,@DPTR
   \   000035   65..         XRL       A,?V2
   \   000037   701C         JNZ       ??afDelete_1
    236              {
    237                epList = epCurrent->nextDesc;
   \   000039   8E82         MOV       DPL,R6
   \   00003B   8F83         MOV       DPH,R7
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   F8           MOV       R0,A
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   F9           MOV       R1,A
   \   000042   90....       MOV       DPTR,#epList
   \   000045   E8           MOV       A,R0
   \   000046   F0           MOVX      @DPTR,A
   \   000047   A3           INC       DPTR
   \   000048   E9           MOV       A,R1
   \   000049   F0           MOVX      @DPTR,A
    238                osal_mem_free( epCurrent );
   \   00004A                ; Setup parameters for call to function osal_mem_free
   \   00004A   EE           MOV       A,R6
   \   00004B   FA           MOV       R2,A
   \   00004C   EF           MOV       A,R7
   \   00004D   FB           MOV       R3,A
   \   00004E   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    239          
    240                return ( afStatus_SUCCESS );
   \   000051   7900         MOV       R1,#0x0
   \   000053   805A         SJMP      ??afDelete_2
    241              }
    242              else
    243              {
    244                // search the list
    245                for ( epCurrent = epPrevious->nextDesc;
   \                     ??afDelete_1:
   \   000055   85..82       MOV       DPL,?V0
   \   000058   85..83       MOV       DPH,?V1
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F8           MOV       R0,A
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F9           MOV       R1,A
   \   000060   E8           MOV       A,R0
   \   000061   FE           MOV       R6,A
   \   000062   E9           MOV       A,R1
   \   000063   FF           MOV       R7,A
    246                      epCurrent != NULL;
   \                     ??afDelete_3:
   \   000064   EE           MOV       A,R6
   \   000065   4F           ORL       A,R7
   \   000066   6041         JZ        ??afDelete_4
    247                      epCurrent = epCurrent->nextDesc )
    248                {
    249                  if ( epCurrent->epDesc->endPoint == EndPoint )
   \   000068   8E82         MOV       DPL,R6
   \   00006A   8F83         MOV       DPH,R7
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   F8           MOV       R0,A
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   F583         MOV       DPH,A
   \   000074   8882         MOV       DPL,R0
   \   000076   E0           MOVX      A,@DPTR
   \   000077   65..         XRL       A,?V2
   \   000079   701F         JNZ       ??afDelete_5
    250                  {
    251                    epPrevious->nextDesc = epCurrent->nextDesc;
   \   00007B   8E82         MOV       DPL,R6
   \   00007D   8F83         MOV       DPH,R7
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   F8           MOV       R0,A
   \   000081   A3           INC       DPTR
   \   000082   E0           MOVX      A,@DPTR
   \   000083   F9           MOV       R1,A
   \   000084   85..82       MOV       DPL,?V0
   \   000087   85..83       MOV       DPH,?V1
   \   00008A   E8           MOV       A,R0
   \   00008B   F0           MOVX      @DPTR,A
   \   00008C   A3           INC       DPTR
   \   00008D   E9           MOV       A,R1
   \   00008E   F0           MOVX      @DPTR,A
    252                    osal_mem_free( epCurrent );
   \   00008F                ; Setup parameters for call to function osal_mem_free
   \   00008F   EE           MOV       A,R6
   \   000090   FA           MOV       R2,A
   \   000091   EF           MOV       A,R7
   \   000092   FB           MOV       R3,A
   \   000093   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    253          
    254                    // delete the entry and free the memory
    255                    return ( afStatus_SUCCESS );
   \   000096   7900         MOV       R1,#0x0
   \   000098   8015         SJMP      ??afDelete_2
    256                  }
    257                  epPrevious = epCurrent;
   \                     ??afDelete_5:
   \   00009A   8E..         MOV       ?V0,R6
   \   00009C   8F..         MOV       ?V1,R7
    258                }
   \   00009E   8E82         MOV       DPL,R6
   \   0000A0   8F83         MOV       DPH,R7
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   FE           MOV       R6,A
   \   0000A4   A3           INC       DPTR
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   FF           MOV       R7,A
   \   0000A7   80BB         SJMP      ??afDelete_3
    259              }
    260          
    261              // no endpoint found
    262              return ( afStatus_INVALID_PARAMETER );
   \                     ??afDelete_4:
   \   0000A9   7902         MOV       R1,#0x2
   \   0000AB   8002         SJMP      ??afDelete_2
    263            }
    264            else
    265            {
    266              // epList is empty
    267              return ( afStatus_FAILED );
   \                     ??afDelete_0:
   \   0000AD   7901         MOV       R1,#0x1
   \                     ??afDelete_2:
   \   0000AF   7F03         MOV       R7,#0x3
   \   0000B1   02....       LJMP      ?BANKED_LEAVE_XDATA
    268            }
    269          }
    270          
    271          /*********************************************************************
    272           * @fn          afDataConfirm
    273           *
    274           * @brief       This function will generate the Data Confirm back to
    275           *              the application.
    276           *
    277           * @param       endPoint - confirm end point
    278           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    279           * @param       status - status of APSDE_DATA_REQUEST
    280           *
    281           * @return      none
    282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    283          void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afDataConfirm:
    284          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V3,R2
   \   000009   8B..         MOV       ?V4,R3
    285            endPointDesc_t *epDesc;
    286            afDataConfirm_t *msgPtr;
    287          
    288            // Find the endpoint description
    289            epDesc = afFindEndPointDesc( endPoint );
   \   00000B                ; Setup parameters for call to function afFindEndPointDesc
   \   00000B   A9..         MOV       R1,?V2
   \   00000D   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000010   8A..         MOV       ?V6,R2
   \   000012   8B..         MOV       ?V7,R3
   \   000014   85....       MOV       ?V0,?V6
   \   000017   85....       MOV       ?V1,?V7
    290            if ( epDesc == NULL )
   \   00001A   E5..         MOV       A,?V0
   \   00001C   45..         ORL       A,?V1
   \   00001E   605B         JZ        ??afDataConfirm_0
    291              return;
    292          
    293            // Determine the incoming command type
    294            msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
   \   000020                ; Setup parameters for call to function osal_msg_allocate
   \   000020   7A04         MOV       R2,#0x4
   \   000022   7B00         MOV       R3,#0x0
   \   000024   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000027   8A..         MOV       ?V6,R2
   \   000029   8B..         MOV       ?V7,R3
   \   00002B   AE..         MOV       R6,?V6
   \   00002D   AF..         MOV       R7,?V7
    295            if ( msgPtr )
   \   00002F   EE           MOV       A,R6
   \   000030   4F           ORL       A,R7
   \   000031   6048         JZ        ??afDataConfirm_0
    296            {
    297              // Build the Data Confirm message
    298              msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
   \   000033   8E82         MOV       DPL,R6
   \   000035   8F83         MOV       DPH,R7
   \   000037   74FD         MOV       A,#-0x3
   \   000039   F0           MOVX      @DPTR,A
    299              msgPtr->hdr.status = status;
   \   00003A   E5..         MOV       A,?V4
   \   00003C   C0E0         PUSH      A
   \   00003E   8E82         MOV       DPL,R6
   \   000040   8F83         MOV       DPH,R7
   \   000042   A3           INC       DPTR
   \   000043   D0E0         POP       A
   \   000045   F0           MOVX      @DPTR,A
    300              msgPtr->endpoint = endPoint;
   \   000046   E5..         MOV       A,?V2
   \   000048   C0E0         PUSH      A
   \   00004A   8E82         MOV       DPL,R6
   \   00004C   8F83         MOV       DPH,R7
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   D0E0         POP       A
   \   000052   F0           MOVX      @DPTR,A
    301              msgPtr->transID = transID;
   \   000053   E5..         MOV       A,?V3
   \   000055   C0E0         PUSH      A
   \   000057   8E82         MOV       DPL,R6
   \   000059   8F83         MOV       DPH,R7
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   D0E0         POP       A
   \   000060   F0           MOVX      @DPTR,A
    302          
    303          #if defined ( MT_AF_CB_FUNC )
    304              /* If MT has subscribed for this callback, don't send as a message. */
    305              if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
    306              {
    307                /* Send callback if it's subscribed */
    308                MT_AfDataConfirm ((void *)msgPtr);
    309                /* Release the memory. */
    310                osal_msg_deallocate( (void *)msgPtr );
    311              }
    312              else
    313          #endif
    314              {
    315                /* send message through task message */
    316                osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
   \   000061                ; Setup parameters for call to function osal_msg_send
   \   000061   EE           MOV       A,R6
   \   000062   FA           MOV       R2,A
   \   000063   EF           MOV       A,R7
   \   000064   FB           MOV       R3,A
   \   000065   85..82       MOV       DPL,?V0
   \   000068   85..83       MOV       DPH,?V1
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   F8           MOV       R0,A
   \   00006F   A3           INC       DPTR
   \   000070   E0           MOVX      A,@DPTR
   \   000071   F583         MOV       DPH,A
   \   000073   8882         MOV       DPL,R0
   \   000075   E0           MOVX      A,@DPTR
   \   000076   F9           MOV       R1,A
   \   000077   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   00007A   E9           MOV       A,R1
    317              }
    318            }
    319          }
   \                     ??afDataConfirm_0:
   \   00007B   7F08         MOV       R7,#0x8
   \   00007D   02....       LJMP      ?BANKED_LEAVE_XDATA
    320          
    321          /*********************************************************************
    322           * @fn          afReflectError
    323           *
    324           * @brief       This function will generate the Reflect Error message to
    325           *              the application.
    326           *
    327           * @param       srcEP - Source Endpoint
    328           * @param       dstAddrMode - mode of dstAdd - 0 - normal short addr, 1 - group Address
    329           * @param       dstAddr - intended destination
    330           * @param       dstEP - Destination Endpoint
    331           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    332           * @param       status - status of APSDE_DATA_REQUEST
    333           *
    334           * @return      none
    335           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    336          void afReflectError( uint8 srcEP, uint8 dstAddrMode, uint16 dstAddr, uint8 dstEP,
   \                     afReflectError:
    337                               uint8 transID, ZStatus_t status )
    338          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V4,R1
   \   000007   8A..         MOV       ?V5,R2
   \   000009   8C..         MOV       ?V10,R4
   \   00000B   8D..         MOV       ?V11,R5
   \   00000D   8B..         MOV       ?V6,R3
   \   00000F   7414         MOV       A,#0x14
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V2,A
   \   000017   7415         MOV       A,#0x15
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V3,A
    339            endPointDesc_t *epDesc;
    340            afReflectError_t *msgPtr;
    341          
    342            // Find the endpoint description
    343            epDesc = afFindEndPointDesc( srcEP );
   \   00001F                ; Setup parameters for call to function afFindEndPointDesc
   \   00001F   A9..         MOV       R1,?V4
   \   000021   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000024   8A..         MOV       ?V8,R2
   \   000026   8B..         MOV       ?V9,R3
   \   000028   85....       MOV       ?V0,?V8
   \   00002B   85....       MOV       ?V1,?V9
    344            if ( epDesc == NULL )
   \   00002E   E5..         MOV       A,?V0
   \   000030   45..         ORL       A,?V1
   \   000032   607A         JZ        ??afReflectError_0
    345              return;
    346          
    347            // Determine the incoming command type
    348            msgPtr = (afReflectError_t *)osal_msg_allocate( sizeof(afReflectError_t) );
   \   000034                ; Setup parameters for call to function osal_msg_allocate
   \   000034   7A07         MOV       R2,#0x7
   \   000036   7B00         MOV       R3,#0x0
   \   000038   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00003B   8A..         MOV       ?V8,R2
   \   00003D   8B..         MOV       ?V9,R3
   \   00003F   AE..         MOV       R6,?V8
   \   000041   AF..         MOV       R7,?V9
    349            if ( msgPtr )
   \   000043   EE           MOV       A,R6
   \   000044   4F           ORL       A,R7
   \   000045   6067         JZ        ??afReflectError_0
    350            {
    351              // Build the Data Confirm message
    352              msgPtr->hdr.event = AF_REFLECT_ERROR_CMD;
   \   000047   8E82         MOV       DPL,R6
   \   000049   8F83         MOV       DPH,R7
   \   00004B   74FE         MOV       A,#-0x2
   \   00004D   F0           MOVX      @DPTR,A
    353              msgPtr->hdr.status = status;
   \   00004E   E5..         MOV       A,?V3
   \   000050   C0E0         PUSH      A
   \   000052   8E82         MOV       DPL,R6
   \   000054   8F83         MOV       DPH,R7
   \   000056   A3           INC       DPTR
   \   000057   D0E0         POP       A
   \   000059   F0           MOVX      @DPTR,A
    354              msgPtr->endpoint = dstEP;
   \   00005A   E5..         MOV       A,?V6
   \   00005C   C0E0         PUSH      A
   \   00005E   8E82         MOV       DPL,R6
   \   000060   8F83         MOV       DPH,R7
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   D0E0         POP       A
   \   000066   F0           MOVX      @DPTR,A
    355              msgPtr->transID = transID;
   \   000067   E5..         MOV       A,?V2
   \   000069   C0E0         PUSH      A
   \   00006B   8E82         MOV       DPL,R6
   \   00006D   8F83         MOV       DPH,R7
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   D0E0         POP       A
   \   000074   F0           MOVX      @DPTR,A
    356              msgPtr->dstAddrMode = dstAddrMode;
   \   000075   E5..         MOV       A,?V5
   \   000077   C0E0         PUSH      A
   \   000079   8E82         MOV       DPL,R6
   \   00007B   8F83         MOV       DPH,R7
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   D0E0         POP       A
   \   000083   F0           MOVX      @DPTR,A
    357              msgPtr->dstAddr = dstAddr;
   \   000084   8E82         MOV       DPL,R6
   \   000086   8F83         MOV       DPH,R7
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   E5..         MOV       A,?V10
   \   00008F   F0           MOVX      @DPTR,A
   \   000090   A3           INC       DPTR
   \   000091   E5..         MOV       A,?V11
   \   000093   F0           MOVX      @DPTR,A
    358          
    359          #if defined ( MT_AF_CB_FUNC )
    360              /* If MT has subscribed for this callback, don't send as a message. */
    361              if ( AFCB_CHECK( CB_ID_AF_REFLECT_ERROR, *(epDesc->task_id) ) )
    362              {
    363                /* Send callback if it's subscribed */
    364                MT_AfReflectError( (void *)msgPtr );
    365                /* Release the memory. */
    366                osal_msg_deallocate( (void *)msgPtr );
    367              }
    368              else
    369          #endif
    370              {
    371                /* send message through task message */
    372                osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
   \   000094                ; Setup parameters for call to function osal_msg_send
   \   000094   EE           MOV       A,R6
   \   000095   FA           MOV       R2,A
   \   000096   EF           MOV       A,R7
   \   000097   FB           MOV       R3,A
   \   000098   85..82       MOV       DPL,?V0
   \   00009B   85..83       MOV       DPH,?V1
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   F8           MOV       R0,A
   \   0000A2   A3           INC       DPTR
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   F583         MOV       DPH,A
   \   0000A6   8882         MOV       DPL,R0
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   F9           MOV       R1,A
   \   0000AA   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   0000AD   E9           MOV       A,R1
    373              }
    374            }
    375          }
   \                     ??afReflectError_0:
   \   0000AE   7F0C         MOV       R7,#0xc
   \   0000B0   02....       LJMP      ?BANKED_LEAVE_XDATA
    376          
    377          /*********************************************************************
    378           * @fn          afIncomingData
    379           *
    380           * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
    381           *
    382           * @param       aff  - pointer to APS frame format
    383           * @param       SrcAddress  - Source address
    384           * @param       SrcPanId  - Source PAN ID
    385           * @param       sig - incoming message's link quality
    386           * @param       nwkSeqNum - incoming network sequence number (from nwk header frame)
    387           * @param       SecurityUse - Security enable/disable
    388           * @param       timestamp - the MAC Timer2 timestamp at Rx.
    389           * @param       radius - incoming messages received radius
    390           *
    391           * @return      none
    392           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    393          void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
   \                     afIncomingData:
    394                               NLDE_Signal_t *sig, uint8 nwkSeqNum, uint8 SecurityUse,
    395                               uint32 timestamp, uint8 radius )
    396          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7403         MOV       A,#0x3
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EC           MOV       A,R4
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   ED           MOV       A,R5
   \   000013   F0           MOVX      @DPTR,A
   \   000014   E9           MOV       A,R1
   \   000015   C0E0         PUSH      A
   \   000017   7402         MOV       A,#0x2
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   D0E0         POP       A
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   EA           MOV       A,R2
   \   000020   FE           MOV       R6,A
   \   000021   EB           MOV       A,R3
   \   000022   FF           MOV       R7,A
   \   000023   741D         MOV       A,#0x1d
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F5..         MOV       ?V10,A
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F5..         MOV       ?V11,A
   \   00002F   7422         MOV       A,#0x22
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   78..         MOV       R0,#?V4
   \   000036   12....       LCALL     ?L_MOV_X
    397            endPointDesc_t *epDesc = NULL;
   \   000039   75..00       MOV       ?V0,#0x0
   \   00003C   75..00       MOV       ?V1,#0x0
    398            epList_t *pList = epList;
   \   00003F   90....       MOV       DPTR,#epList
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F5..         MOV       ?V2,A
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F5..         MOV       ?V3,A
    399          #if !defined ( APS_NO_GROUPS )
    400            uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
   \   000049   75..FE       MOV       ?V8,#-0x2
    401          #endif
    402          
    403            if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
   \   00004C   8E82         MOV       DPL,R6
   \   00004E   8F83         MOV       DPH,R7
   \   000050   E0           MOVX      A,@DPTR
   \   000051   540C         ANL       A,#0xc
   \   000053   640C         XRL       A,#0xc
   \   000055   704D         JNZ       ??afIncomingData_0
    404            {
    405          #if !defined ( APS_NO_GROUPS )
    406              // Find the first endpoint for this group
    407              grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
   \   000057                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   000057   79FE         MOV       R1,#-0x2
   \   000059   8E82         MOV       DPL,R6
   \   00005B   8F83         MOV       DPH,R7
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   FA           MOV       R2,A
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   FB           MOV       R3,A
   \   000066   12....       LCALL     `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   000069   E9           MOV       A,R1
   \   00006A   F5..         MOV       ?V8,A
    408              if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \   00006C   74FE         MOV       A,#-0x2
   \   00006E   65..         XRL       A,?V8
   \   000070   7003         JNZ       $+5
   \   000072   02....       LJMP      ??afIncomingData_1 & 0xFFFF
    409                return;   // No endpoint found
    410          
    411              epDesc = afFindEndPointDesc( grpEp );
   \   000075                ; Setup parameters for call to function afFindEndPointDesc
   \   000075   A9..         MOV       R1,?V8
   \   000077   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00007A   8A..         MOV       ?V12,R2
   \   00007C   8B..         MOV       ?V13,R3
   \   00007E   85....       MOV       ?V0,?V12
   \   000081   85....       MOV       ?V1,?V13
    412              if ( epDesc == NULL )
   \   000084   E5..         MOV       A,?V0
   \   000086   45..         ORL       A,?V1
   \   000088   7003         JNZ       $+5
   \   00008A   02....       LJMP      ??afIncomingData_1 & 0xFFFF
    413                return;   // Endpoint descriptor not found
    414          
    415              pList = afFindEndPointDescList( epDesc->endPoint );
   \   00008D                ; Setup parameters for call to function afFindEndPointDescList
   \   00008D   85..82       MOV       DPL,?V0
   \   000090   85..83       MOV       DPH,?V1
   \   000093   E0           MOVX      A,@DPTR
   \   000094   F9           MOV       R1,A
   \   000095   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000098   8A..         MOV       ?V12,R2
   \   00009A   8B..         MOV       ?V13,R3
   \   00009C   85....       MOV       ?V2,?V12
   \   00009F   85....       MOV       ?V3,?V13
   \   0000A2   8054         SJMP      ??afIncomingData_2
    416          #else
    417              return; // Not supported
    418          #endif
    419            }
    420            else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_0:
   \   0000A4   8E82         MOV       DPL,R6
   \   0000A6   8F83         MOV       DPH,R7
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   64FF         XRL       A,#0xff
   \   0000AD   7019         JNZ       ??afIncomingData_3
    421            {
    422              // Set the list
    423              if ( pList != NULL )
   \   0000AF   E5..         MOV       A,?V2
   \   0000B1   45..         ORL       A,?V3
   \   0000B3   6043         JZ        ??afIncomingData_2
    424              {
    425                epDesc = pList->epDesc;
   \   0000B5   85..82       MOV       DPL,?V2
   \   0000B8   85..83       MOV       DPH,?V3
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   E0           MOVX      A,@DPTR
   \   0000BE   F8           MOV       R0,A
   \   0000BF   A3           INC       DPTR
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   F9           MOV       R1,A
   \   0000C2   88..         MOV       ?V0,R0
   \   0000C4   89..         MOV       ?V1,R1
   \   0000C6   8030         SJMP      ??afIncomingData_2
    426              }
    427            }
    428            else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
   \                     ??afIncomingData_3:
   \   0000C8                ; Setup parameters for call to function afFindEndPointDesc
   \   0000C8   8E82         MOV       DPL,R6
   \   0000CA   8F83         MOV       DPH,R7
   \   0000CC   A3           INC       DPTR
   \   0000CD   A3           INC       DPTR
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   F9           MOV       R1,A
   \   0000D0   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0000D3   8A..         MOV       ?V12,R2
   \   0000D5   8B..         MOV       ?V13,R3
   \   0000D7   A8..         MOV       R0,?V12
   \   0000D9   A9..         MOV       R1,?V13
   \   0000DB   88..         MOV       ?V0,R0
   \   0000DD   89..         MOV       ?V1,R1
   \   0000DF   E8           MOV       A,R0
   \   0000E0   49           ORL       A,R1
   \   0000E1   6015         JZ        ??afIncomingData_2
    429            {
    430              pList = afFindEndPointDescList( epDesc->endPoint );
   \   0000E3                ; Setup parameters for call to function afFindEndPointDescList
   \   0000E3   85..82       MOV       DPL,?V0
   \   0000E6   85..83       MOV       DPH,?V1
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   F9           MOV       R1,A
   \   0000EB   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   0000EE   8A..         MOV       ?V12,R2
   \   0000F0   8B..         MOV       ?V13,R3
   \   0000F2   85....       MOV       ?V2,?V12
   \   0000F5   85....       MOV       ?V3,?V13
    431            }
    432          
    433            while ( epDesc )
   \                     ??afIncomingData_2:
   \   0000F8   E5..         MOV       A,?V0
   \   0000FA   45..         ORL       A,?V1
   \   0000FC   7003         JNZ       $+5
   \   0000FE   02....       LJMP      ??afIncomingData_1 & 0xFFFF
    434            {
    435              uint16 epProfileID = 0xFFFE;  // Invalid Profile ID
   \   000101   85..82       MOV       DPL,?XSP + 0
   \   000104   85..83       MOV       DPH,?XSP + 1
   \   000107   74FE         MOV       A,#-0x2
   \   000109   F0           MOVX      @DPTR,A
   \   00010A   A3           INC       DPTR
   \   00010B   74FF         MOV       A,#-0x1
   \   00010D   F0           MOVX      @DPTR,A
    436          
    437              if ( pList->pfnDescCB )
   \   00010E   85..82       MOV       DPL,?V2
   \   000111   85..83       MOV       DPH,?V3
   \   000114   A3           INC       DPTR
   \   000115   A3           INC       DPTR
   \   000116   A3           INC       DPTR
   \   000117   A3           INC       DPTR
   \   000118   E0           MOVX      A,@DPTR
   \   000119   F8           MOV       R0,A
   \   00011A   A3           INC       DPTR
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   F9           MOV       R1,A
   \   00011D   E8           MOV       A,R0
   \   00011E   49           ORL       A,R1
   \   00011F   604E         JZ        ??afIncomingData_4
    438              {
    439                uint16 *pID = (uint16 *)(pList->pfnDescCB(
    440                                           AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
   \   000121                ; Setup parameters for indirect call
   \   000121   85..82       MOV       DPL,?V0
   \   000124   85..83       MOV       DPH,?V1
   \   000127   E0           MOVX      A,@DPTR
   \   000128   FA           MOV       R2,A
   \   000129   7902         MOV       R1,#0x2
   \   00012B   85..82       MOV       DPL,?V2
   \   00012E   85..83       MOV       DPH,?V3
   \   000131   A3           INC       DPTR
   \   000132   A3           INC       DPTR
   \   000133   A3           INC       DPTR
   \   000134   A3           INC       DPTR
   \   000135   E0           MOVX      A,@DPTR
   \   000136   F8           MOV       R0,A
   \   000137   A3           INC       DPTR
   \   000138   E0           MOVX      A,@DPTR
   \   000139   F583         MOV       DPH,A
   \   00013B   8882         MOV       DPL,R0
   \   00013D   12....       LCALL     ?CALL_IND
   \   000140   8A..         MOV       ?V12,R2
   \   000142   8B..         MOV       ?V13,R3
   \   000144   85....       MOV       ?V14,?V12
   \   000147   85....       MOV       ?V15,?V13
    441                if ( pID )
   \   00014A   E5..         MOV       A,?V14
   \   00014C   45..         ORL       A,?V15
   \   00014E   6055         JZ        ??afIncomingData_5
    442                {
    443                  epProfileID = *pID;
   \   000150   85..82       MOV       DPL,?V14
   \   000153   85..83       MOV       DPH,?V15
   \   000156   E0           MOVX      A,@DPTR
   \   000157   F8           MOV       R0,A
   \   000158   A3           INC       DPTR
   \   000159   E0           MOVX      A,@DPTR
   \   00015A   F9           MOV       R1,A
   \   00015B   85..82       MOV       DPL,?XSP + 0
   \   00015E   85..83       MOV       DPH,?XSP + 1
   \   000161   E8           MOV       A,R0
   \   000162   F0           MOVX      @DPTR,A
   \   000163   A3           INC       DPTR
   \   000164   E9           MOV       A,R1
   \   000165   F0           MOVX      @DPTR,A
    444                  osal_mem_free( pID );
   \   000166                ; Setup parameters for call to function osal_mem_free
   \   000166   AA..         MOV       R2,?V14
   \   000168   AB..         MOV       R3,?V15
   \   00016A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00016D   8036         SJMP      ??afIncomingData_5
    445                }
    446              }
    447              else if ( epDesc->simpleDesc )
   \                     ??afIncomingData_4:
   \   00016F   85..82       MOV       DPL,?V0
   \   000172   85..83       MOV       DPH,?V1
   \   000175   A3           INC       DPTR
   \   000176   A3           INC       DPTR
   \   000177   A3           INC       DPTR
   \   000178   A3           INC       DPTR
   \   000179   E0           MOVX      A,@DPTR
   \   00017A   F8           MOV       R0,A
   \   00017B   A3           INC       DPTR
   \   00017C   E0           MOVX      A,@DPTR
   \   00017D   F9           MOV       R1,A
   \   00017E   E8           MOV       A,R0
   \   00017F   49           ORL       A,R1
   \   000180   6023         JZ        ??afIncomingData_5
    448              {
    449                epProfileID = epDesc->simpleDesc->AppProfId;
   \   000182   85..82       MOV       DPL,?V0
   \   000185   85..83       MOV       DPH,?V1
   \   000188   A3           INC       DPTR
   \   000189   A3           INC       DPTR
   \   00018A   A3           INC       DPTR
   \   00018B   A3           INC       DPTR
   \   00018C   E0           MOVX      A,@DPTR
   \   00018D   F8           MOV       R0,A
   \   00018E   A3           INC       DPTR
   \   00018F   E0           MOVX      A,@DPTR
   \   000190   F583         MOV       DPH,A
   \   000192   8882         MOV       DPL,R0
   \   000194   A3           INC       DPTR
   \   000195   E0           MOVX      A,@DPTR
   \   000196   F8           MOV       R0,A
   \   000197   A3           INC       DPTR
   \   000198   E0           MOVX      A,@DPTR
   \   000199   F9           MOV       R1,A
   \   00019A   85..82       MOV       DPL,?XSP + 0
   \   00019D   85..83       MOV       DPH,?XSP + 1
   \   0001A0   E8           MOV       A,R0
   \   0001A1   F0           MOVX      @DPTR,A
   \   0001A2   A3           INC       DPTR
   \   0001A3   E9           MOV       A,R1
   \   0001A4   F0           MOVX      @DPTR,A
    450              }
    451          
    452              // First part of verification is to make sure that:
    453              // the local Endpoint ProfileID matches the received ProfileID OR
    454              // the message is specifically send to ZDO (this excludes the broadcast endpoint) OR
    455              // if the Wildcard ProfileID is received the message should not be sent to ZDO endpoint
    456              if ( (aff->ProfileID == epProfileID) ||
    457                   ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) ||
    458                   ((epDesc->endPoint != ZDO_EP) && ( aff->ProfileID == ZDO_WILDCARD_PROFILE_ID )) )
   \                     ??afIncomingData_5:
   \   0001A5   8E82         MOV       DPL,R6
   \   0001A7   8F83         MOV       DPH,R7
   \   0001A9   A3           INC       DPTR
   \   0001AA   A3           INC       DPTR
   \   0001AB   A3           INC       DPTR
   \   0001AC   A3           INC       DPTR
   \   0001AD   A3           INC       DPTR
   \   0001AE   A3           INC       DPTR
   \   0001AF   A3           INC       DPTR
   \   0001B0   A3           INC       DPTR
   \   0001B1   E0           MOVX      A,@DPTR
   \   0001B2   F8           MOV       R0,A
   \   0001B3   A3           INC       DPTR
   \   0001B4   E0           MOVX      A,@DPTR
   \   0001B5   F9           MOV       R1,A
   \   0001B6   85..82       MOV       DPL,?XSP + 0
   \   0001B9   85..83       MOV       DPH,?XSP + 1
   \   0001BC   E0           MOVX      A,@DPTR
   \   0001BD   68           XRL       A,R0
   \   0001BE   7003         JNZ       ??afIncomingData_6
   \   0001C0   A3           INC       DPTR
   \   0001C1   E0           MOVX      A,@DPTR
   \   0001C2   69           XRL       A,R1
   \                     ??afIncomingData_6:
   \   0001C3   6041         JZ        ??afIncomingData_7
   \   0001C5   85..82       MOV       DPL,?V0
   \   0001C8   85..83       MOV       DPH,?V1
   \   0001CB   E0           MOVX      A,@DPTR
   \   0001CC   7015         JNZ       ??afIncomingData_8
   \   0001CE   8E82         MOV       DPL,R6
   \   0001D0   8F83         MOV       DPH,R7
   \   0001D2   A3           INC       DPTR
   \   0001D3   A3           INC       DPTR
   \   0001D4   A3           INC       DPTR
   \   0001D5   A3           INC       DPTR
   \   0001D6   A3           INC       DPTR
   \   0001D7   A3           INC       DPTR
   \   0001D8   A3           INC       DPTR
   \   0001D9   A3           INC       DPTR
   \   0001DA   E0           MOVX      A,@DPTR
   \   0001DB   F8           MOV       R0,A
   \   0001DC   A3           INC       DPTR
   \   0001DD   E0           MOVX      A,@DPTR
   \   0001DE   F9           MOV       R1,A
   \   0001DF   E8           MOV       A,R0
   \   0001E0   49           ORL       A,R1
   \   0001E1   6023         JZ        ??afIncomingData_7
   \                     ??afIncomingData_8:
   \   0001E3   85..82       MOV       DPL,?V0
   \   0001E6   85..83       MOV       DPH,?V1
   \   0001E9   E0           MOVX      A,@DPTR
   \   0001EA   7003         JNZ       $+5
   \   0001EC   02....       LJMP      ??afIncomingData_9 & 0xFFFF
   \   0001EF   8E82         MOV       DPL,R6
   \   0001F1   8F83         MOV       DPH,R7
   \   0001F3   A3           INC       DPTR
   \   0001F4   A3           INC       DPTR
   \   0001F5   A3           INC       DPTR
   \   0001F6   A3           INC       DPTR
   \   0001F7   A3           INC       DPTR
   \   0001F8   A3           INC       DPTR
   \   0001F9   A3           INC       DPTR
   \   0001FA   A3           INC       DPTR
   \   0001FB   E0           MOVX      A,@DPTR
   \   0001FC   64FF         XRL       A,#0xff
   \   0001FE   7004         JNZ       ??afIncomingData_10
   \   000200   A3           INC       DPTR
   \   000201   E0           MOVX      A,@DPTR
   \   000202   64FF         XRL       A,#0xff
   \                     ??afIncomingData_10:
   \   000204   7073         JNZ       ??afIncomingData_9
    459              {
    460                // Save original endpoint
    461                uint8 endpoint = aff->DstEndPoint;
   \                     ??afIncomingData_7:
   \   000206   8E82         MOV       DPL,R6
   \   000208   8F83         MOV       DPH,R7
   \   00020A   A3           INC       DPTR
   \   00020B   A3           INC       DPTR
   \   00020C   E0           MOVX      A,@DPTR
   \   00020D   F5..         MOV       ?V9,A
    462          
    463                // overwrite with descriptor's endpoint
    464                aff->DstEndPoint = epDesc->endPoint;
   \   00020F   85..82       MOV       DPL,?V0
   \   000212   85..83       MOV       DPH,?V1
   \   000215   E0           MOVX      A,@DPTR
   \   000216   C0E0         PUSH      A
   \   000218   8E82         MOV       DPL,R6
   \   00021A   8F83         MOV       DPH,R7
   \   00021C   A3           INC       DPTR
   \   00021D   A3           INC       DPTR
   \   00021E   D0E0         POP       A
   \   000220   F0           MOVX      @DPTR,A
    465          
    466                afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig,
    467                                   nwkSeqNum, SecurityUse, timestamp, radius );
   \   000221                ; Setup parameters for call to function afBuildMSGIncoming
   \   000221   7426         MOV       A,#0x26
   \   000223   12....       LCALL     ?XSTACK_DISP0_8
   \   000226   E0           MOVX      A,@DPTR
   \   000227   F5..         MOV       ?V12,A
   \   000229   78..         MOV       R0,#?V12
   \   00022B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00022E   78..         MOV       R0,#?V4
   \   000230   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000233   7426         MOV       A,#0x26
   \   000235   12....       LCALL     ?XSTACK_DISP0_8
   \   000238   E0           MOVX      A,@DPTR
   \   000239   F5..         MOV       ?V12,A
   \   00023B   78..         MOV       R0,#?V12
   \   00023D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000240   7425         MOV       A,#0x25
   \   000242   12....       LCALL     ?XSTACK_DISP0_8
   \   000245   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000248   78..         MOV       R0,#?V10
   \   00024A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00024D   740D         MOV       A,#0xd
   \   00024F   12....       LCALL     ?XSTACK_DISP0_8
   \   000252   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000255   740E         MOV       A,#0xe
   \   000257   12....       LCALL     ?XSTACK_DISP0_8
   \   00025A   E0           MOVX      A,@DPTR
   \   00025B   F9           MOV       R1,A
   \   00025C   AC..         MOV       R4,?V0
   \   00025E   AD..         MOV       R5,?V1
   \   000260   EE           MOV       A,R6
   \   000261   FA           MOV       R2,A
   \   000262   EF           MOV       A,R7
   \   000263   FB           MOV       R3,A
   \   000264   12....       LCALL     `??afBuildMSGIncoming::?relay`; Banked call to: afBuildMSGIncoming
   \   000267   740C         MOV       A,#0xc
   \   000269   12....       LCALL     ?DEALLOC_XSTACK8
    468          
    469                // Restore with original endpoint
    470                aff->DstEndPoint = endpoint;
   \   00026C   E5..         MOV       A,?V9
   \   00026E   C0E0         PUSH      A
   \   000270   8E82         MOV       DPL,R6
   \   000272   8F83         MOV       DPH,R7
   \   000274   A3           INC       DPTR
   \   000275   A3           INC       DPTR
   \   000276   D0E0         POP       A
   \   000278   F0           MOVX      @DPTR,A
    471              }
    472          
    473              if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
   \                     ??afIncomingData_9:
   \   000279   8E82         MOV       DPL,R6
   \   00027B   8F83         MOV       DPH,R7
   \   00027D   E0           MOVX      A,@DPTR
   \   00027E   540C         ANL       A,#0xc
   \   000280   640C         XRL       A,#0xc
   \   000282   7048         JNZ       ??afIncomingData_11
    474              {
    475          #if !defined ( APS_NO_GROUPS )
    476                // Find the next endpoint for this group
    477                grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
   \   000284                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   000284   A9..         MOV       R1,?V8
   \   000286   8E82         MOV       DPL,R6
   \   000288   8F83         MOV       DPH,R7
   \   00028A   A3           INC       DPTR
   \   00028B   A3           INC       DPTR
   \   00028C   A3           INC       DPTR
   \   00028D   A3           INC       DPTR
   \   00028E   E0           MOVX      A,@DPTR
   \   00028F   FA           MOV       R2,A
   \   000290   A3           INC       DPTR
   \   000291   E0           MOVX      A,@DPTR
   \   000292   FB           MOV       R3,A
   \   000293   12....       LCALL     `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   000296   E9           MOV       A,R1
   \   000297   F5..         MOV       ?V8,A
    478                if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \   000299   74FE         MOV       A,#-0x2
   \   00029B   65..         XRL       A,?V8
   \   00029D   6071         JZ        ??afIncomingData_1
    479                  return;   // No endpoint found
    480          
    481                epDesc = afFindEndPointDesc( grpEp );
   \   00029F                ; Setup parameters for call to function afFindEndPointDesc
   \   00029F   A9..         MOV       R1,?V8
   \   0002A1   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0002A4   8A..         MOV       ?V12,R2
   \   0002A6   8B..         MOV       ?V13,R3
   \   0002A8   85....       MOV       ?V0,?V12
   \   0002AB   85....       MOV       ?V1,?V13
    482                if ( epDesc == NULL )
   \   0002AE   E5..         MOV       A,?V0
   \   0002B0   45..         ORL       A,?V1
   \   0002B2   605C         JZ        ??afIncomingData_1
    483                  return;   // Endpoint descriptor not found
    484          
    485                pList = afFindEndPointDescList( epDesc->endPoint );
   \   0002B4                ; Setup parameters for call to function afFindEndPointDescList
   \   0002B4   85..82       MOV       DPL,?V0
   \   0002B7   85..83       MOV       DPH,?V1
   \   0002BA   E0           MOVX      A,@DPTR
   \   0002BB   F9           MOV       R1,A
   \   0002BC   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   0002BF   8A..         MOV       ?V12,R2
   \   0002C1   8B..         MOV       ?V13,R3
   \   0002C3   85....       MOV       ?V2,?V12
   \   0002C6   85....       MOV       ?V3,?V13
   \   0002C9   02....       LJMP      ??afIncomingData_2 & 0xFFFF
    486          #else
    487                return;
    488          #endif
    489              }
    490              else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_11:
   \   0002CC   8E82         MOV       DPL,R6
   \   0002CE   8F83         MOV       DPH,R7
   \   0002D0   A3           INC       DPTR
   \   0002D1   A3           INC       DPTR
   \   0002D2   E0           MOVX      A,@DPTR
   \   0002D3   64FF         XRL       A,#0xff
   \   0002D5   7030         JNZ       ??afIncomingData_12
    491              {
    492                pList = pList->nextDesc;
   \   0002D7   85..82       MOV       DPL,?V2
   \   0002DA   85..83       MOV       DPH,?V3
   \   0002DD   E0           MOVX      A,@DPTR
   \   0002DE   F5..         MOV       ?V2,A
   \   0002E0   A3           INC       DPTR
   \   0002E1   E0           MOVX      A,@DPTR
   \   0002E2   F5..         MOV       ?V3,A
    493                if ( pList )
   \   0002E4   E5..         MOV       A,?V2
   \   0002E6   45..         ORL       A,?V3
   \   0002E8   6014         JZ        ??afIncomingData_13
    494                  epDesc = pList->epDesc;
   \   0002EA   85..82       MOV       DPL,?V2
   \   0002ED   85..83       MOV       DPH,?V3
   \   0002F0   A3           INC       DPTR
   \   0002F1   A3           INC       DPTR
   \   0002F2   E0           MOVX      A,@DPTR
   \   0002F3   F8           MOV       R0,A
   \   0002F4   A3           INC       DPTR
   \   0002F5   E0           MOVX      A,@DPTR
   \   0002F6   F9           MOV       R1,A
   \   0002F7   88..         MOV       ?V0,R0
   \   0002F9   89..         MOV       ?V1,R1
   \   0002FB   02....       LJMP      ??afIncomingData_2 & 0xFFFF
    495                else
    496                  epDesc = NULL;
   \                     ??afIncomingData_13:
   \   0002FE   75..00       MOV       ?V0,#0x0
   \   000301   75..00       MOV       ?V1,#0x0
   \   000304   02....       LJMP      ??afIncomingData_2 & 0xFFFF
    497              }
    498              else
    499                epDesc = NULL;
   \                     ??afIncomingData_12:
   \   000307   75..00       MOV       ?V0,#0x0
   \   00030A   75..00       MOV       ?V1,#0x0
   \   00030D   02....       LJMP      ??afIncomingData_2 & 0xFFFF
    500            }
    501          }
   \                     ??afIncomingData_1:
   \   000310   7405         MOV       A,#0x5
   \   000312   12....       LCALL     ?DEALLOC_XSTACK8
   \   000315   7F10         MOV       R7,#0x10
   \   000317   02....       LJMP      ?BANKED_LEAVE_XDATA
    502          
    503          /*********************************************************************
    504           * @fn          afBuildMSGIncoming
    505           *
    506           * @brief       Build the message for the app
    507           *
    508           * @param
    509           *
    510           * @return      pointer to next in data buffer
    511           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    512          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
   \                     afBuildMSGIncoming:
    513                           zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    514                           uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius )
    515          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   C0E0         PUSH      A
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   D0E0         POP       A
   \   000015   F0           MOVX      @DPTR,A
   \   000016   8A..         MOV       ?V0,R2
   \   000018   8B..         MOV       ?V1,R3
   \   00001A   8C..         MOV       ?V14,R4
   \   00001C   8D..         MOV       ?V15,R5
   \   00001E   741F         MOV       A,#0x1f
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F5..         MOV       ?V2,A
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F5..         MOV       ?V3,A
   \   00002A   7421         MOV       A,#0x21
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F5..         MOV       ?V13,A
   \   000032   7422         MOV       A,#0x22
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   78..         MOV       R0,#?V4
   \   000039   12....       LCALL     ?L_MOV_X
   \   00003C   7426         MOV       A,#0x26
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F5..         MOV       ?V11,A
    516            afIncomingMSGPacket_t *MSGpkt;
    517            const uint8 len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
   \   000044   E5..         MOV       A,?V0
   \   000046   2410         ADD       A,#0x10
   \   000048   F582         MOV       DPL,A
   \   00004A   E4           CLR       A
   \   00004B   35..         ADDC      A,?V1
   \   00004D   F583         MOV       DPH,A
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   2427         ADD       A,#0x27
   \   000052   F5..         MOV       ?V12,A
    518            uint8 *asdu = aff->asdu;
   \   000054   E5..         MOV       A,?V0
   \   000056   240E         ADD       A,#0xe
   \   000058   F582         MOV       DPL,A
   \   00005A   E4           CLR       A
   \   00005B   35..         ADDC      A,?V1
   \   00005D   F583         MOV       DPH,A
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F8           MOV       R0,A
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F9           MOV       R1,A
   \   000064   7401         MOV       A,#0x1
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   E8           MOV       A,R0
   \   00006A   F0           MOVX      @DPTR,A
   \   00006B   A3           INC       DPTR
   \   00006C   E9           MOV       A,R1
   \   00006D   F0           MOVX      @DPTR,A
    519            MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
   \   00006E                ; Setup parameters for call to function osal_msg_allocate
   \   00006E   E5..         MOV       A,?V12
   \   000070   FA           MOV       R2,A
   \   000071   7B00         MOV       R3,#0x0
   \   000073   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000076   8A..         MOV       ?V8,R2
   \   000078   8B..         MOV       ?V9,R3
   \   00007A   AE..         MOV       R6,?V8
   \   00007C   AF..         MOV       R7,?V9
    520          
    521            if ( MSGpkt == NULL )
   \   00007E   EE           MOV       A,R6
   \   00007F   4F           ORL       A,R7
   \   000080   7003         JNZ       $+5
   \   000082   02....       LJMP      ??afBuildMSGIncoming_0 & 0xFFFF
    522            {
    523              return;
    524            }
    525          
    526            MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
   \   000085   8E82         MOV       DPL,R6
   \   000087   8F83         MOV       DPH,R7
   \   000089   741A         MOV       A,#0x1a
   \   00008B   F0           MOVX      @DPTR,A
    527            MSGpkt->groupId = aff->GroupID;
   \   00008C   85..82       MOV       DPL,?V0
   \   00008F   85..83       MOV       DPH,?V1
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   E0           MOVX      A,@DPTR
   \   000097   F8           MOV       R0,A
   \   000098   A3           INC       DPTR
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   F9           MOV       R1,A
   \   00009B   8E82         MOV       DPL,R6
   \   00009D   8F83         MOV       DPH,R7
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   E8           MOV       A,R0
   \   0000A2   F0           MOVX      @DPTR,A
   \   0000A3   A3           INC       DPTR
   \   0000A4   E9           MOV       A,R1
   \   0000A5   F0           MOVX      @DPTR,A
    528            MSGpkt->clusterId = aff->ClusterID;
   \   0000A6   85..82       MOV       DPL,?V0
   \   0000A9   85..83       MOV       DPH,?V1
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   A3           INC       DPTR
   \   0000AF   A3           INC       DPTR
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   F8           MOV       R0,A
   \   0000B4   A3           INC       DPTR
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   F9           MOV       R1,A
   \   0000B7   8E82         MOV       DPL,R6
   \   0000B9   8F83         MOV       DPH,R7
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   A3           INC       DPTR
   \   0000BF   E8           MOV       A,R0
   \   0000C0   F0           MOVX      @DPTR,A
   \   0000C1   A3           INC       DPTR
   \   0000C2   E9           MOV       A,R1
   \   0000C3   F0           MOVX      @DPTR,A
    529            afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
   \   0000C4                ; Setup parameters for call to function afCopyAddress
   \   0000C4   741B         MOV       A,#0x1b
   \   0000C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C9   E0           MOVX      A,@DPTR
   \   0000CA   FC           MOV       R4,A
   \   0000CB   A3           INC       DPTR
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   FD           MOV       R5,A
   \   0000CE   EE           MOV       A,R6
   \   0000CF   2406         ADD       A,#0x6
   \   0000D1   FA           MOV       R2,A
   \   0000D2   E4           CLR       A
   \   0000D3   3F           ADDC      A,R7
   \   0000D4   FB           MOV       R3,A
   \   0000D5   12....       LCALL     `??afCopyAddress::?relay`; Banked call to: afCopyAddress
    530            MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
   \   0000D8   85..82       MOV       DPL,?V0
   \   0000DB   85..83       MOV       DPH,?V1
   \   0000DE   A3           INC       DPTR
   \   0000DF   A3           INC       DPTR
   \   0000E0   A3           INC       DPTR
   \   0000E1   E0           MOVX      A,@DPTR
   \   0000E2   C0E0         PUSH      A
   \   0000E4   EE           MOV       A,R6
   \   0000E5   240F         ADD       A,#0xf
   \   0000E7   F582         MOV       DPL,A
   \   0000E9   E4           CLR       A
   \   0000EA   3F           ADDC      A,R7
   \   0000EB   F583         MOV       DPH,A
   \   0000ED   D0E0         POP       A
   \   0000EF   F0           MOVX      @DPTR,A
    531            MSGpkt->endPoint = epDesc->endPoint;
   \   0000F0   85..82       MOV       DPL,?V14
   \   0000F3   85..83       MOV       DPH,?V15
   \   0000F6   E0           MOVX      A,@DPTR
   \   0000F7   C0E0         PUSH      A
   \   0000F9   EE           MOV       A,R6
   \   0000FA   2414         ADD       A,#0x14
   \   0000FC   F582         MOV       DPL,A
   \   0000FE   E4           CLR       A
   \   0000FF   3F           ADDC      A,R7
   \   000100   F583         MOV       DPH,A
   \   000102   D0E0         POP       A
   \   000104   F0           MOVX      @DPTR,A
    532            MSGpkt->wasBroadcast = aff->wasBroadcast;
   \   000105   E5..         MOV       A,?V0
   \   000107   240C         ADD       A,#0xc
   \   000109   F582         MOV       DPL,A
   \   00010B   E4           CLR       A
   \   00010C   35..         ADDC      A,?V1
   \   00010E   F583         MOV       DPH,A
   \   000110   E0           MOVX      A,@DPTR
   \   000111   C0E0         PUSH      A
   \   000113   EE           MOV       A,R6
   \   000114   2415         ADD       A,#0x15
   \   000116   F582         MOV       DPL,A
   \   000118   E4           CLR       A
   \   000119   3F           ADDC      A,R7
   \   00011A   F583         MOV       DPH,A
   \   00011C   D0E0         POP       A
   \   00011E   F0           MOVX      @DPTR,A
    533            MSGpkt->LinkQuality = sig->LinkQuality;
   \   00011F   85..82       MOV       DPL,?V2
   \   000122   85..83       MOV       DPH,?V3
   \   000125   E0           MOVX      A,@DPTR
   \   000126   C0E0         PUSH      A
   \   000128   EE           MOV       A,R6
   \   000129   2416         ADD       A,#0x16
   \   00012B   F582         MOV       DPL,A
   \   00012D   E4           CLR       A
   \   00012E   3F           ADDC      A,R7
   \   00012F   F583         MOV       DPH,A
   \   000131   D0E0         POP       A
   \   000133   F0           MOVX      @DPTR,A
    534            MSGpkt->correlation = sig->correlation;
   \   000134   85..82       MOV       DPL,?V2
   \   000137   85..83       MOV       DPH,?V3
   \   00013A   A3           INC       DPTR
   \   00013B   E0           MOVX      A,@DPTR
   \   00013C   C0E0         PUSH      A
   \   00013E   EE           MOV       A,R6
   \   00013F   2417         ADD       A,#0x17
   \   000141   F582         MOV       DPL,A
   \   000143   E4           CLR       A
   \   000144   3F           ADDC      A,R7
   \   000145   F583         MOV       DPH,A
   \   000147   D0E0         POP       A
   \   000149   F0           MOVX      @DPTR,A
    535            MSGpkt->rssi = sig->rssi;
   \   00014A   85..82       MOV       DPL,?V2
   \   00014D   85..83       MOV       DPH,?V3
   \   000150   A3           INC       DPTR
   \   000151   A3           INC       DPTR
   \   000152   E0           MOVX      A,@DPTR
   \   000153   C0E0         PUSH      A
   \   000155   EE           MOV       A,R6
   \   000156   2418         ADD       A,#0x18
   \   000158   F582         MOV       DPL,A
   \   00015A   E4           CLR       A
   \   00015B   3F           ADDC      A,R7
   \   00015C   F583         MOV       DPH,A
   \   00015E   D0E0         POP       A
   \   000160   F0           MOVX      @DPTR,A
    536            MSGpkt->SecurityUse = SecurityUse;
   \   000161   E5..         MOV       A,?V13
   \   000163   C0E0         PUSH      A
   \   000165   EE           MOV       A,R6
   \   000166   2419         ADD       A,#0x19
   \   000168   F582         MOV       DPL,A
   \   00016A   E4           CLR       A
   \   00016B   3F           ADDC      A,R7
   \   00016C   F583         MOV       DPH,A
   \   00016E   D0E0         POP       A
   \   000170   F0           MOVX      @DPTR,A
    537            MSGpkt->timestamp = timestamp;
   \   000171   EE           MOV       A,R6
   \   000172   241A         ADD       A,#0x1a
   \   000174   F582         MOV       DPL,A
   \   000176   E4           CLR       A
   \   000177   3F           ADDC      A,R7
   \   000178   F583         MOV       DPH,A
   \   00017A   78..         MOV       R0,#?V4
   \   00017C   12....       LCALL     ?L_MOV_TO_X
    538            MSGpkt->nwkSeqNum = nwkSeqNum;
   \   00017F   85..82       MOV       DPL,?XSP + 0
   \   000182   85..83       MOV       DPH,?XSP + 1
   \   000185   E0           MOVX      A,@DPTR
   \   000186   C0E0         PUSH      A
   \   000188   EE           MOV       A,R6
   \   000189   241E         ADD       A,#0x1e
   \   00018B   F582         MOV       DPL,A
   \   00018D   E4           CLR       A
   \   00018E   3F           ADDC      A,R7
   \   00018F   F583         MOV       DPH,A
   \   000191   D0E0         POP       A
   \   000193   F0           MOVX      @DPTR,A
    539            MSGpkt->macSrcAddr = aff->macSrcAddr;
   \   000194   E5..         MOV       A,?V0
   \   000196   2415         ADD       A,#0x15
   \   000198   F582         MOV       DPL,A
   \   00019A   E4           CLR       A
   \   00019B   35..         ADDC      A,?V1
   \   00019D   F583         MOV       DPH,A
   \   00019F   E0           MOVX      A,@DPTR
   \   0001A0   F8           MOV       R0,A
   \   0001A1   A3           INC       DPTR
   \   0001A2   E0           MOVX      A,@DPTR
   \   0001A3   F9           MOV       R1,A
   \   0001A4   EE           MOV       A,R6
   \   0001A5   2424         ADD       A,#0x24
   \   0001A7   F582         MOV       DPL,A
   \   0001A9   E4           CLR       A
   \   0001AA   3F           ADDC      A,R7
   \   0001AB   F583         MOV       DPH,A
   \   0001AD   E8           MOV       A,R0
   \   0001AE   F0           MOVX      @DPTR,A
   \   0001AF   A3           INC       DPTR
   \   0001B0   E9           MOV       A,R1
   \   0001B1   F0           MOVX      @DPTR,A
    540            MSGpkt->macDestAddr = aff->macDestAddr;
   \   0001B2   85..82       MOV       DPL,?V0
   \   0001B5   85..83       MOV       DPH,?V1
   \   0001B8   A3           INC       DPTR
   \   0001B9   A3           INC       DPTR
   \   0001BA   A3           INC       DPTR
   \   0001BB   A3           INC       DPTR
   \   0001BC   A3           INC       DPTR
   \   0001BD   A3           INC       DPTR
   \   0001BE   A3           INC       DPTR
   \   0001BF   A3           INC       DPTR
   \   0001C0   A3           INC       DPTR
   \   0001C1   A3           INC       DPTR
   \   0001C2   E0           MOVX      A,@DPTR
   \   0001C3   F8           MOV       R0,A
   \   0001C4   A3           INC       DPTR
   \   0001C5   E0           MOVX      A,@DPTR
   \   0001C6   F9           MOV       R1,A
   \   0001C7   EE           MOV       A,R6
   \   0001C8   2412         ADD       A,#0x12
   \   0001CA   F582         MOV       DPL,A
   \   0001CC   E4           CLR       A
   \   0001CD   3F           ADDC      A,R7
   \   0001CE   F583         MOV       DPH,A
   \   0001D0   E8           MOV       A,R0
   \   0001D1   F0           MOVX      @DPTR,A
   \   0001D2   A3           INC       DPTR
   \   0001D3   E9           MOV       A,R1
   \   0001D4   F0           MOVX      @DPTR,A
    541            MSGpkt->srcAddr.panId = SrcPanId;
   \   0001D5   741D         MOV       A,#0x1d
   \   0001D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001DA   E0           MOVX      A,@DPTR
   \   0001DB   F8           MOV       R0,A
   \   0001DC   A3           INC       DPTR
   \   0001DD   E0           MOVX      A,@DPTR
   \   0001DE   F9           MOV       R1,A
   \   0001DF   EE           MOV       A,R6
   \   0001E0   2410         ADD       A,#0x10
   \   0001E2   F582         MOV       DPL,A
   \   0001E4   E4           CLR       A
   \   0001E5   3F           ADDC      A,R7
   \   0001E6   F583         MOV       DPH,A
   \   0001E8   E8           MOV       A,R0
   \   0001E9   F0           MOVX      @DPTR,A
   \   0001EA   A3           INC       DPTR
   \   0001EB   E9           MOV       A,R1
   \   0001EC   F0           MOVX      @DPTR,A
    542            MSGpkt->cmd.TransSeqNumber = 0;
   \   0001ED   EE           MOV       A,R6
   \   0001EE   241F         ADD       A,#0x1f
   \   0001F0   F582         MOV       DPL,A
   \   0001F2   E4           CLR       A
   \   0001F3   3F           ADDC      A,R7
   \   0001F4   F583         MOV       DPH,A
   \   0001F6   7400         MOV       A,#0x0
   \   0001F8   F0           MOVX      @DPTR,A
    543            MSGpkt->cmd.DataLength = aff->asduLength;
   \   0001F9   E5..         MOV       A,?V0
   \   0001FB   2410         ADD       A,#0x10
   \   0001FD   F582         MOV       DPL,A
   \   0001FF   E4           CLR       A
   \   000200   35..         ADDC      A,?V1
   \   000202   F583         MOV       DPH,A
   \   000204   E0           MOVX      A,@DPTR
   \   000205   F8           MOV       R0,A
   \   000206   7900         MOV       R1,#0x0
   \   000208   EE           MOV       A,R6
   \   000209   2420         ADD       A,#0x20
   \   00020B   F582         MOV       DPL,A
   \   00020D   E4           CLR       A
   \   00020E   3F           ADDC      A,R7
   \   00020F   F583         MOV       DPH,A
   \   000211   E8           MOV       A,R0
   \   000212   F0           MOVX      @DPTR,A
   \   000213   A3           INC       DPTR
   \   000214   E9           MOV       A,R1
   \   000215   F0           MOVX      @DPTR,A
    544            MSGpkt->radius = radius;
   \   000216   E5..         MOV       A,?V11
   \   000218   C0E0         PUSH      A
   \   00021A   EE           MOV       A,R6
   \   00021B   2426         ADD       A,#0x26
   \   00021D   F582         MOV       DPL,A
   \   00021F   E4           CLR       A
   \   000220   3F           ADDC      A,R7
   \   000221   F583         MOV       DPH,A
   \   000223   D0E0         POP       A
   \   000225   F0           MOVX      @DPTR,A
    545          
    546            if ( MSGpkt->cmd.DataLength )
   \   000226   EE           MOV       A,R6
   \   000227   2420         ADD       A,#0x20
   \   000229   F582         MOV       DPL,A
   \   00022B   E4           CLR       A
   \   00022C   3F           ADDC      A,R7
   \   00022D   F583         MOV       DPH,A
   \   00022F   E0           MOVX      A,@DPTR
   \   000230   F8           MOV       R0,A
   \   000231   A3           INC       DPTR
   \   000232   E0           MOVX      A,@DPTR
   \   000233   F9           MOV       R1,A
   \   000234   E8           MOV       A,R0
   \   000235   49           ORL       A,R1
   \   000236   604F         JZ        ??afBuildMSGIncoming_1
    547            {
    548              MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   \   000238   EE           MOV       A,R6
   \   000239   2427         ADD       A,#0x27
   \   00023B   F8           MOV       R0,A
   \   00023C   E4           CLR       A
   \   00023D   3F           ADDC      A,R7
   \   00023E   F9           MOV       R1,A
   \   00023F   EE           MOV       A,R6
   \   000240   2422         ADD       A,#0x22
   \   000242   F582         MOV       DPL,A
   \   000244   E4           CLR       A
   \   000245   3F           ADDC      A,R7
   \   000246   F583         MOV       DPH,A
   \   000248   E8           MOV       A,R0
   \   000249   F0           MOVX      @DPTR,A
   \   00024A   A3           INC       DPTR
   \   00024B   E9           MOV       A,R1
   \   00024C   F0           MOVX      @DPTR,A
    549              osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
   \   00024D                ; Setup parameters for call to function osal_memcpy
   \   00024D   7401         MOV       A,#0x1
   \   00024F   12....       LCALL     ?XSTACK_DISP0_8
   \   000252   E0           MOVX      A,@DPTR
   \   000253   F5..         MOV       ?V8,A
   \   000255   A3           INC       DPTR
   \   000256   E0           MOVX      A,@DPTR
   \   000257   F5..         MOV       ?V9,A
   \   000259   75..00       MOV       ?V10,#0x0
   \   00025C   78..         MOV       R0,#?V8
   \   00025E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000261   EE           MOV       A,R6
   \   000262   2420         ADD       A,#0x20
   \   000264   F582         MOV       DPL,A
   \   000266   E4           CLR       A
   \   000267   3F           ADDC      A,R7
   \   000268   F583         MOV       DPH,A
   \   00026A   E0           MOVX      A,@DPTR
   \   00026B   FC           MOV       R4,A
   \   00026C   A3           INC       DPTR
   \   00026D   E0           MOVX      A,@DPTR
   \   00026E   FD           MOV       R5,A
   \   00026F   EE           MOV       A,R6
   \   000270   2422         ADD       A,#0x22
   \   000272   F582         MOV       DPL,A
   \   000274   E4           CLR       A
   \   000275   3F           ADDC      A,R7
   \   000276   F583         MOV       DPH,A
   \   000278   E0           MOVX      A,@DPTR
   \   000279   FA           MOV       R2,A
   \   00027A   A3           INC       DPTR
   \   00027B   E0           MOVX      A,@DPTR
   \   00027C   FB           MOV       R3,A
   \   00027D   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000280   7403         MOV       A,#0x3
   \   000282   12....       LCALL     ?DEALLOC_XSTACK8
   \   000285   8010         SJMP      ??afBuildMSGIncoming_2
    550            }
    551            else
    552            {
    553              MSGpkt->cmd.Data = NULL;
   \                     ??afBuildMSGIncoming_1:
   \   000287   EE           MOV       A,R6
   \   000288   2422         ADD       A,#0x22
   \   00028A   F582         MOV       DPL,A
   \   00028C   E4           CLR       A
   \   00028D   3F           ADDC      A,R7
   \   00028E   F583         MOV       DPH,A
   \   000290   7400         MOV       A,#0x0
   \   000292   F0           MOVX      @DPTR,A
   \   000293   A3           INC       DPTR
   \   000294   7400         MOV       A,#0x0
   \   000296   F0           MOVX      @DPTR,A
    554            }
    555          
    556          #if defined ( MT_AF_CB_FUNC )
    557            // If ZDO or SAPI have registered for this endpoint, dont intercept it here
    558            if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
    559            {
    560              MT_AfIncomingMsg( (void *)MSGpkt );
    561              // Release the memory.
    562              osal_msg_deallocate( (void *)MSGpkt );
    563            }
    564            else
    565          #endif
    566            {
    567              // Send message through task message.
    568              osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
   \                     ??afBuildMSGIncoming_2:
   \   000297                ; Setup parameters for call to function osal_msg_send
   \   000297   EE           MOV       A,R6
   \   000298   FA           MOV       R2,A
   \   000299   EF           MOV       A,R7
   \   00029A   FB           MOV       R3,A
   \   00029B   85..82       MOV       DPL,?V14
   \   00029E   85..83       MOV       DPH,?V15
   \   0002A1   A3           INC       DPTR
   \   0002A2   A3           INC       DPTR
   \   0002A3   E0           MOVX      A,@DPTR
   \   0002A4   F8           MOV       R0,A
   \   0002A5   A3           INC       DPTR
   \   0002A6   E0           MOVX      A,@DPTR
   \   0002A7   F583         MOV       DPH,A
   \   0002A9   8882         MOV       DPL,R0
   \   0002AB   E0           MOVX      A,@DPTR
   \   0002AC   F9           MOV       R1,A
   \   0002AD   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   0002B0   E9           MOV       A,R1
    569            }
    570          }
   \                     ??afBuildMSGIncoming_0:
   \   0002B1   7403         MOV       A,#0x3
   \   0002B3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002B6   7F10         MOV       R7,#0x10
   \   0002B8   02....       LJMP      ?BANKED_LEAVE_XDATA
    571          
    572          /*********************************************************************
    573           * @fn      AF_DataRequest
    574           *
    575           * @brief   Common functionality for invoking APSDE_DataReq() for both
    576           *          SendMulti and MSG-Send.
    577           *
    578           * input parameters
    579           *
    580           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    581           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    582           * @param   cID - A valid cluster ID as specified by the Profile.
    583           * @param   len - Number of bytes of data pointed to by next param.
    584           * @param  *buf - A pointer to the data bytes to send.
    585           * @param  *transID - A pointer to a byte which can be modified and which will
    586           *                    be used as the transaction sequence number of the msg.
    587           * @param   options - Valid bit mask of Tx options.
    588           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    589           *
    590           * output parameters
    591           *
    592           * @param  *transID - Incremented by one if the return value is success.
    593           *
    594           * @return  afStatus_t - See previous definition of afStatus_... types.
    595           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    596          uint8 AF_DataRequestDiscoverRoute = DISC_ROUTE_NETWORK;
   \                     AF_DataRequestDiscoverRoute:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    597          afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequest:
    598                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    599                                     uint8 options, uint8 radius )
    600          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000   74E9         MOV       A,#-0x17
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 35
   \   000005   74DD         MOV       A,#-0x23
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   8C..         MOV       ?V2,R4
   \   000010   8D..         MOV       ?V3,R5
   \   000012   E9           MOV       A,R1
   \   000013   FF           MOV       R7,A
   \   000014   743C         MOV       A,#0x3c
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V4,A
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F5..         MOV       ?V5,A
   \   000020   7440         MOV       A,#0x40
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F5..         MOV       ?V12,A
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F5..         MOV       ?V13,A
   \   00002C   7442         MOV       A,#0x42
   \   00002E   12....       LCALL     ?XSTACK_DISP0_8
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F5..         MOV       ?V14,A
    601            pDescCB pfnDescCB;
    602            ZStatus_t stat;
    603            APSDE_DataReq_t req;
    604            afDataReqMTU_t mtu;
    605            epList_t *pList;
    606          
    607            // Verify source end point
    608            if ( srcEP == NULL )
   \   000034   E5..         MOV       A,?V2
   \   000036   45..         ORL       A,?V3
   \   000038   7005         JNZ       ??AF_DataRequest_0
    609            {
    610              return afStatus_INVALID_PARAMETER;
   \   00003A   7902         MOV       R1,#0x2
   \   00003C   02....       LJMP      ??AF_DataRequest_1 & 0xFFFF
    611            }
    612          
    613          #if !defined( REFLECTOR )
    614            if ( dstAddr->addrMode == afAddrNotPresent )
    615            {
    616              return afStatus_INVALID_PARAMETER;
    617            }
    618          #endif
    619            
    620            // copy the addressing mode, to get the length of the packet
    621            mtu.aps.addressingMode = dstAddr->addrMode; 
   \                     ??AF_DataRequest_0:
   \   00003F   85..82       MOV       DPL,?V0
   \   000042   85..83       MOV       DPH,?V1
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   C0E0         PUSH      A
   \   000050   7402         MOV       A,#0x2
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   D0E0         POP       A
   \   000057   F0           MOVX      @DPTR,A
    622          
    623            // Check if route is available before sending data
    624            if ( options & AF_LIMIT_CONCENTRATOR  )
   \   000058   EF           MOV       A,R7
   \   000059   A2E3         MOV       C,0xE0 /* A   */.3
   \   00005B   504C         JNC       ??AF_DataRequest_2
    625            {
    626              if ( dstAddr->addrMode != afAddr16Bit )
   \   00005D   85..82       MOV       DPL,?V0
   \   000060   85..83       MOV       DPH,?V1
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   6402         XRL       A,#0x2
   \   00006E   6005         JZ        ??AF_DataRequest_3
    627              {
    628                return ( afStatus_INVALID_PARAMETER );
   \   000070   7902         MOV       R1,#0x2
   \   000072   02....       LJMP      ??AF_DataRequest_1 & 0xFFFF
    629              }
    630          
    631              // First, make sure the destination is not its self, then check for an existing route.
    632              if ( (dstAddr->addr.shortAddr != NLME_GetShortAddr())
    633                  && (RTG_CheckRtStatus( dstAddr->addr.shortAddr, RT_ACTIVE, (MTO_ROUTE | NO_ROUTE_CACHE) ) != RTG_SUCCESS) )
   \                     ??AF_DataRequest_3:
   \   000075                ; Setup parameters for call to function NLME_GetShortAddr
   \   000075   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000078   8A..         MOV       ?V6,R2
   \   00007A   8B..         MOV       ?V7,R3
   \   00007C   A8..         MOV       R0,?V6
   \   00007E   A9..         MOV       R1,?V7
   \   000080   85..82       MOV       DPL,?V0
   \   000083   85..83       MOV       DPH,?V1
   \   000086   E0           MOVX      A,@DPTR
   \   000087   68           XRL       A,R0
   \   000088   7003         JNZ       ??AF_DataRequest_4
   \   00008A   A3           INC       DPTR
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   69           XRL       A,R1
   \                     ??AF_DataRequest_4:
   \   00008D   601A         JZ        ??AF_DataRequest_2
   \   00008F                ; Setup parameters for call to function RTG_CheckRtStatus
   \   00008F   7C03         MOV       R4,#0x3
   \   000091   7901         MOV       R1,#0x1
   \   000093   85..82       MOV       DPL,?V0
   \   000096   85..83       MOV       DPH,?V1
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   FA           MOV       R2,A
   \   00009B   A3           INC       DPTR
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   FB           MOV       R3,A
   \   00009E   12....       LCALL     `??RTG_CheckRtStatus::?relay`; Banked call to: RTG_CheckRtStatus
   \   0000A1   E9           MOV       A,R1
   \   0000A2   6005         JZ        ??AF_DataRequest_2
    634              {
    635                // A valid route to a concentrator wasn't found
    636                return ( afStatus_NO_ROUTE );
   \   0000A4   79CD         MOV       R1,#-0x33
   \   0000A6   02....       LJMP      ??AF_DataRequest_1 & 0xFFFF
    637              }
    638            }
    639          
    640            // Validate broadcasting
    641            if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
    642                 ( dstAddr->addrMode == afAddrBroadcast )    )
   \                     ??AF_DataRequest_2:
   \   0000A9   85..82       MOV       DPL,?V0
   \   0000AC   85..83       MOV       DPH,?V1
   \   0000AF   A3           INC       DPTR
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   A3           INC       DPTR
   \   0000B3   A3           INC       DPTR
   \   0000B4   A3           INC       DPTR
   \   0000B5   A3           INC       DPTR
   \   0000B6   A3           INC       DPTR
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   6402         XRL       A,#0x2
   \   0000BA   6013         JZ        ??AF_DataRequest_5
   \   0000BC   85..82       MOV       DPL,?V0
   \   0000BF   85..83       MOV       DPH,?V1
   \   0000C2   A3           INC       DPTR
   \   0000C3   A3           INC       DPTR
   \   0000C4   A3           INC       DPTR
   \   0000C5   A3           INC       DPTR
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   A3           INC       DPTR
   \   0000C9   A3           INC       DPTR
   \   0000CA   E0           MOVX      A,@DPTR
   \   0000CB   640F         XRL       A,#0xf
   \   0000CD   703C         JNZ       ??AF_DataRequest_6
    643            {
    644              // Check for valid broadcast values
    645              if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
   \                     ??AF_DataRequest_5:
   \   0000CF                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   0000CF   85..82       MOV       DPL,?V0
   \   0000D2   85..83       MOV       DPH,?V1
   \   0000D5   E0           MOVX      A,@DPTR
   \   0000D6   FA           MOV       R2,A
   \   0000D7   A3           INC       DPTR
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   FB           MOV       R3,A
   \   0000DA   12....       LCALL     `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   0000DD   E9           MOV       A,R1
   \   0000DE   6013         JZ        ??AF_DataRequest_7
    646              {
    647                // Force mode to broadcast
    648                dstAddr->addrMode = afAddrBroadcast;
   \   0000E0   85..82       MOV       DPL,?V0
   \   0000E3   85..83       MOV       DPH,?V1
   \   0000E6   A3           INC       DPTR
   \   0000E7   A3           INC       DPTR
   \   0000E8   A3           INC       DPTR
   \   0000E9   A3           INC       DPTR
   \   0000EA   A3           INC       DPTR
   \   0000EB   A3           INC       DPTR
   \   0000EC   A3           INC       DPTR
   \   0000ED   A3           INC       DPTR
   \   0000EE   740F         MOV       A,#0xf
   \   0000F0   F0           MOVX      @DPTR,A
   \   0000F1   8054         SJMP      ??AF_DataRequest_8
    649              }
    650              else
    651              {
    652                // Address is not a valid broadcast type
    653                if ( dstAddr->addrMode == afAddrBroadcast )
   \                     ??AF_DataRequest_7:
   \   0000F3   85..82       MOV       DPL,?V0
   \   0000F6   85..83       MOV       DPH,?V1
   \   0000F9   A3           INC       DPTR
   \   0000FA   A3           INC       DPTR
   \   0000FB   A3           INC       DPTR
   \   0000FC   A3           INC       DPTR
   \   0000FD   A3           INC       DPTR
   \   0000FE   A3           INC       DPTR
   \   0000FF   A3           INC       DPTR
   \   000100   A3           INC       DPTR
   \   000101   E0           MOVX      A,@DPTR
   \   000102   640F         XRL       A,#0xf
   \   000104   7041         JNZ       ??AF_DataRequest_8
    654                {
    655                  return afStatus_INVALID_PARAMETER;
   \   000106   7902         MOV       R1,#0x2
   \   000108   02....       LJMP      ??AF_DataRequest_1 & 0xFFFF
    656                }
    657              }
    658            }
    659            else if ( dstAddr->addrMode != afAddr64Bit &&
    660                      dstAddr->addrMode != afAddrGroup &&
    661                      dstAddr->addrMode != afAddrNotPresent )
   \                     ??AF_DataRequest_6:
   \   00010B   85..82       MOV       DPL,?V0
   \   00010E   85..83       MOV       DPH,?V1
   \   000111   A3           INC       DPTR
   \   000112   A3           INC       DPTR
   \   000113   A3           INC       DPTR
   \   000114   A3           INC       DPTR
   \   000115   A3           INC       DPTR
   \   000116   A3           INC       DPTR
   \   000117   A3           INC       DPTR
   \   000118   A3           INC       DPTR
   \   000119   E0           MOVX      A,@DPTR
   \   00011A   6403         XRL       A,#0x3
   \   00011C   6029         JZ        ??AF_DataRequest_8
   \   00011E   85..82       MOV       DPL,?V0
   \   000121   85..83       MOV       DPH,?V1
   \   000124   A3           INC       DPTR
   \   000125   A3           INC       DPTR
   \   000126   A3           INC       DPTR
   \   000127   A3           INC       DPTR
   \   000128   A3           INC       DPTR
   \   000129   A3           INC       DPTR
   \   00012A   A3           INC       DPTR
   \   00012B   A3           INC       DPTR
   \   00012C   E0           MOVX      A,@DPTR
   \   00012D   6401         XRL       A,#0x1
   \   00012F   6016         JZ        ??AF_DataRequest_8
   \   000131   85..82       MOV       DPL,?V0
   \   000134   85..83       MOV       DPH,?V1
   \   000137   A3           INC       DPTR
   \   000138   A3           INC       DPTR
   \   000139   A3           INC       DPTR
   \   00013A   A3           INC       DPTR
   \   00013B   A3           INC       DPTR
   \   00013C   A3           INC       DPTR
   \   00013D   A3           INC       DPTR
   \   00013E   A3           INC       DPTR
   \   00013F   E0           MOVX      A,@DPTR
   \   000140   6005         JZ        ??AF_DataRequest_8
    662            {
    663              return afStatus_INVALID_PARAMETER;
   \   000142   7902         MOV       R1,#0x2
   \   000144   02....       LJMP      ??AF_DataRequest_1 & 0xFFFF
    664            }
    665          
    666            // Set destination address
    667            req.dstAddr.addrMode = dstAddr->addrMode;
   \                     ??AF_DataRequest_8:
   \   000147   85..82       MOV       DPL,?V0
   \   00014A   85..83       MOV       DPH,?V1
   \   00014D   A3           INC       DPTR
   \   00014E   A3           INC       DPTR
   \   00014F   A3           INC       DPTR
   \   000150   A3           INC       DPTR
   \   000151   A3           INC       DPTR
   \   000152   A3           INC       DPTR
   \   000153   A3           INC       DPTR
   \   000154   A3           INC       DPTR
   \   000155   E0           MOVX      A,@DPTR
   \   000156   C0E0         PUSH      A
   \   000158   740D         MOV       A,#0xd
   \   00015A   12....       LCALL     ?XSTACK_DISP0_8
   \   00015D   D0E0         POP       A
   \   00015F   F0           MOVX      @DPTR,A
    668            if ( dstAddr->addrMode == afAddr64Bit )
   \   000160   85..82       MOV       DPL,?V0
   \   000163   85..83       MOV       DPH,?V1
   \   000166   A3           INC       DPTR
   \   000167   A3           INC       DPTR
   \   000168   A3           INC       DPTR
   \   000169   A3           INC       DPTR
   \   00016A   A3           INC       DPTR
   \   00016B   A3           INC       DPTR
   \   00016C   A3           INC       DPTR
   \   00016D   A3           INC       DPTR
   \   00016E   E0           MOVX      A,@DPTR
   \   00016F   6403         XRL       A,#0x3
   \   000171   700E         JNZ       ??AF_DataRequest_9
    669            {
    670              osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
   \   000173                ; Setup parameters for call to function sAddrExtCpy
   \   000173   AC..         MOV       R4,?V0
   \   000175   AD..         MOV       R5,?V1
   \   000177   7405         MOV       A,#0x5
   \   000179   12....       LCALL     ?XSTACK_DISP101_8
   \   00017C   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00017F   8015         SJMP      ??AF_DataRequest_10
    671            }
    672            else
    673            {
    674              req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
   \                     ??AF_DataRequest_9:
   \   000181   85..82       MOV       DPL,?V0
   \   000184   85..83       MOV       DPH,?V1
   \   000187   E0           MOVX      A,@DPTR
   \   000188   F8           MOV       R0,A
   \   000189   A3           INC       DPTR
   \   00018A   E0           MOVX      A,@DPTR
   \   00018B   F9           MOV       R1,A
   \   00018C   7405         MOV       A,#0x5
   \   00018E   12....       LCALL     ?XSTACK_DISP0_8
   \   000191   E8           MOV       A,R0
   \   000192   F0           MOVX      @DPTR,A
   \   000193   A3           INC       DPTR
   \   000194   E9           MOV       A,R1
   \   000195   F0           MOVX      @DPTR,A
    675            }
    676          
    677            // This option is to use Wildcard ProfileID in outgoing packets
    678            if ( options & AF_WILDCARD_PROFILEID )
   \                     ??AF_DataRequest_10:
   \   000196   EF           MOV       A,R7
   \   000197   A2E1         MOV       C,0xE0 /* A   */.1
   \   000199   500F         JNC       ??AF_DataRequest_11
    679            {
    680              req.profileID = ZDO_WILDCARD_PROFILE_ID;
   \   00019B   7414         MOV       A,#0x14
   \   00019D   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A0   74FF         MOV       A,#-0x1
   \   0001A2   F0           MOVX      @DPTR,A
   \   0001A3   A3           INC       DPTR
   \   0001A4   74FF         MOV       A,#-0x1
   \   0001A6   F0           MOVX      @DPTR,A
   \   0001A7   02....       LJMP      ??AF_DataRequest_12 & 0xFFFF
    681            }
    682            else
    683            {
    684              req.profileID = ZDO_PROFILE_ID;
   \                     ??AF_DataRequest_11:
   \   0001AA   7414         MOV       A,#0x14
   \   0001AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AF   7400         MOV       A,#0x0
   \   0001B1   F0           MOVX      @DPTR,A
   \   0001B2   A3           INC       DPTR
   \   0001B3   7400         MOV       A,#0x0
   \   0001B5   F0           MOVX      @DPTR,A
    685          
    686              if ( (pfnDescCB = afGetDescCB( srcEP )) )
   \   0001B6                ; Setup parameters for call to function afGetDescCB
   \   0001B6   AA..         MOV       R2,?V2
   \   0001B8   AB..         MOV       R3,?V3
   \   0001BA   12....       LCALL     `??afGetDescCB::?relay`; Banked call to: afGetDescCB
   \   0001BD   8A..         MOV       ?V6,R2
   \   0001BF   8B..         MOV       ?V7,R3
   \   0001C1   A8..         MOV       R0,?V6
   \   0001C3   A9..         MOV       R1,?V7
   \   0001C5   7403         MOV       A,#0x3
   \   0001C7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CA   E8           MOV       A,R0
   \   0001CB   F0           MOVX      @DPTR,A
   \   0001CC   A3           INC       DPTR
   \   0001CD   E9           MOV       A,R1
   \   0001CE   F0           MOVX      @DPTR,A
   \   0001CF   E8           MOV       A,R0
   \   0001D0   49           ORL       A,R1
   \   0001D1   6048         JZ        ??AF_DataRequest_13
    687              {
    688                uint16 *pID = (uint16 *)(pfnDescCB(
    689                                             AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
   \   0001D3                ; Setup parameters for indirect call
   \   0001D3   85..82       MOV       DPL,?V2
   \   0001D6   85..83       MOV       DPH,?V3
   \   0001D9   E0           MOVX      A,@DPTR
   \   0001DA   FA           MOV       R2,A
   \   0001DB   7902         MOV       R1,#0x2
   \   0001DD   7403         MOV       A,#0x3
   \   0001DF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E2   E0           MOVX      A,@DPTR
   \   0001E3   F8           MOV       R0,A
   \   0001E4   A3           INC       DPTR
   \   0001E5   E0           MOVX      A,@DPTR
   \   0001E6   F583         MOV       DPH,A
   \   0001E8   8882         MOV       DPL,R0
   \   0001EA   12....       LCALL     ?CALL_IND
   \   0001ED   8A..         MOV       ?V10,R2
   \   0001EF   8B..         MOV       ?V11,R3
   \   0001F1   85....       MOV       ?V6,?V10
   \   0001F4   85....       MOV       ?V7,?V11
    690                if ( pID )
   \   0001F7   E5..         MOV       A,?V6
   \   0001F9   45..         ORL       A,?V7
   \   0001FB   6053         JZ        ??AF_DataRequest_12
    691                {
    692                  req.profileID = *pID;
   \   0001FD   85..82       MOV       DPL,?V6
   \   000200   85..83       MOV       DPH,?V7
   \   000203   E0           MOVX      A,@DPTR
   \   000204   F8           MOV       R0,A
   \   000205   A3           INC       DPTR
   \   000206   E0           MOVX      A,@DPTR
   \   000207   F9           MOV       R1,A
   \   000208   7414         MOV       A,#0x14
   \   00020A   12....       LCALL     ?XSTACK_DISP0_8
   \   00020D   E8           MOV       A,R0
   \   00020E   F0           MOVX      @DPTR,A
   \   00020F   A3           INC       DPTR
   \   000210   E9           MOV       A,R1
   \   000211   F0           MOVX      @DPTR,A
    693                  osal_mem_free( pID );
   \   000212                ; Setup parameters for call to function osal_mem_free
   \   000212   AA..         MOV       R2,?V6
   \   000214   AB..         MOV       R3,?V7
   \   000216   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000219   8035         SJMP      ??AF_DataRequest_12
    694                }
    695              }
    696              else if ( srcEP->simpleDesc )
   \                     ??AF_DataRequest_13:
   \   00021B   85..82       MOV       DPL,?V2
   \   00021E   85..83       MOV       DPH,?V3
   \   000221   A3           INC       DPTR
   \   000222   A3           INC       DPTR
   \   000223   A3           INC       DPTR
   \   000224   A3           INC       DPTR
   \   000225   E0           MOVX      A,@DPTR
   \   000226   F8           MOV       R0,A
   \   000227   A3           INC       DPTR
   \   000228   E0           MOVX      A,@DPTR
   \   000229   F9           MOV       R1,A
   \   00022A   E8           MOV       A,R0
   \   00022B   49           ORL       A,R1
   \   00022C   6022         JZ        ??AF_DataRequest_12
    697              {
    698                req.profileID = srcEP->simpleDesc->AppProfId;
   \   00022E   85..82       MOV       DPL,?V2
   \   000231   85..83       MOV       DPH,?V3
   \   000234   A3           INC       DPTR
   \   000235   A3           INC       DPTR
   \   000236   A3           INC       DPTR
   \   000237   A3           INC       DPTR
   \   000238   E0           MOVX      A,@DPTR
   \   000239   F8           MOV       R0,A
   \   00023A   A3           INC       DPTR
   \   00023B   E0           MOVX      A,@DPTR
   \   00023C   F583         MOV       DPH,A
   \   00023E   8882         MOV       DPL,R0
   \   000240   A3           INC       DPTR
   \   000241   E0           MOVX      A,@DPTR
   \   000242   F8           MOV       R0,A
   \   000243   A3           INC       DPTR
   \   000244   E0           MOVX      A,@DPTR
   \   000245   F9           MOV       R1,A
   \   000246   7414         MOV       A,#0x14
   \   000248   12....       LCALL     ?XSTACK_DISP0_8
   \   00024B   E8           MOV       A,R0
   \   00024C   F0           MOVX      @DPTR,A
   \   00024D   A3           INC       DPTR
   \   00024E   E9           MOV       A,R1
   \   00024F   F0           MOVX      @DPTR,A
    699              }
    700            }
    701          
    702            req.txOptions = 0;
   \                     ??AF_DataRequest_12:
   \   000250   741A         MOV       A,#0x1a
   \   000252   12....       LCALL     ?XSTACK_DISP0_8
   \   000255   7400         MOV       A,#0x0
   \   000257   F0           MOVX      @DPTR,A
   \   000258   A3           INC       DPTR
   \   000259   7400         MOV       A,#0x0
   \   00025B   F0           MOVX      @DPTR,A
    703          
    704            if ( ( options & AF_ACK_REQUEST              ) &&
    705                 ( req.dstAddr.addrMode != AddrBroadcast ) &&
    706                 ( req.dstAddr.addrMode != AddrGroup     )    )
   \   00025C   EF           MOV       A,R7
   \   00025D   A2E4         MOV       C,0xE0 /* A   */.4
   \   00025F   5022         JNC       ??AF_DataRequest_14
   \   000261   740D         MOV       A,#0xd
   \   000263   12....       LCALL     ?XSTACK_DISP0_8
   \   000266   E0           MOVX      A,@DPTR
   \   000267   640F         XRL       A,#0xf
   \   000269   6018         JZ        ??AF_DataRequest_14
   \   00026B   740D         MOV       A,#0xd
   \   00026D   12....       LCALL     ?XSTACK_DISP0_8
   \   000270   E0           MOVX      A,@DPTR
   \   000271   6401         XRL       A,#0x1
   \   000273   600E         JZ        ??AF_DataRequest_14
    707            {
    708              req.txOptions |=  APS_TX_OPTIONS_ACK;
   \   000275   741A         MOV       A,#0x1a
   \   000277   12....       LCALL     ?XSTACK_DISP0_8
   \   00027A   E0           MOVX      A,@DPTR
   \   00027B   4404         ORL       A,#0x4
   \   00027D   F0           MOVX      @DPTR,A
   \   00027E   A3           INC       DPTR
   \   00027F   E0           MOVX      A,@DPTR
   \   000280   4400         ORL       A,#0x0
   \   000282   F0           MOVX      @DPTR,A
    709            }
    710          
    711            if ( options & AF_SKIP_ROUTING )
   \                     ??AF_DataRequest_14:
   \   000283   EF           MOV       A,R7
   \   000284   A2E7         MOV       C,0xE0 /* A   */.7
   \   000286   500E         JNC       ??AF_DataRequest_15
    712            {
    713              req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
   \   000288   741A         MOV       A,#0x1a
   \   00028A   12....       LCALL     ?XSTACK_DISP0_8
   \   00028D   E0           MOVX      A,@DPTR
   \   00028E   4410         ORL       A,#0x10
   \   000290   F0           MOVX      @DPTR,A
   \   000291   A3           INC       DPTR
   \   000292   E0           MOVX      A,@DPTR
   \   000293   4400         ORL       A,#0x0
   \   000295   F0           MOVX      @DPTR,A
    714            }
    715          
    716            if ( options & AF_EN_SECURITY )
   \                     ??AF_DataRequest_15:
   \   000296   EF           MOV       A,R7
   \   000297   A2E6         MOV       C,0xE0 /* A   */.6
   \   000299   5018         JNC       ??AF_DataRequest_16
    717            {
    718              req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
   \   00029B   741A         MOV       A,#0x1a
   \   00029D   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A0   E0           MOVX      A,@DPTR
   \   0002A1   4401         ORL       A,#0x1
   \   0002A3   F0           MOVX      @DPTR,A
   \   0002A4   A3           INC       DPTR
   \   0002A5   E0           MOVX      A,@DPTR
   \   0002A6   4400         ORL       A,#0x0
   \   0002A8   F0           MOVX      @DPTR,A
    719              mtu.aps.secure = TRUE;
   \   0002A9   7401         MOV       A,#0x1
   \   0002AB   12....       LCALL     ?XSTACK_DISP0_8
   \   0002AE   7401         MOV       A,#0x1
   \   0002B0   F0           MOVX      @DPTR,A
   \   0002B1   8008         SJMP      ??AF_DataRequest_17
    720            }
    721            else
    722            {
    723              mtu.aps.secure = FALSE;
   \                     ??AF_DataRequest_16:
   \   0002B3   7401         MOV       A,#0x1
   \   0002B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0002B8   7400         MOV       A,#0x0
   \   0002BA   F0           MOVX      @DPTR,A
    724            }
    725          
    726            if ( options & AF_PREPROCESS )
   \                     ??AF_DataRequest_17:
   \   0002BB   EF           MOV       A,R7
   \   0002BC   A2E2         MOV       C,0xE0 /* A   */.2
   \   0002BE   500E         JNC       ??AF_DataRequest_18
    727            {
    728              req.txOptions |=  APS_TX_OPTIONS_PREPROCESS;
   \   0002C0   741A         MOV       A,#0x1a
   \   0002C2   12....       LCALL     ?XSTACK_DISP0_8
   \   0002C5   E0           MOVX      A,@DPTR
   \   0002C6   4440         ORL       A,#0x40
   \   0002C8   F0           MOVX      @DPTR,A
   \   0002C9   A3           INC       DPTR
   \   0002CA   E0           MOVX      A,@DPTR
   \   0002CB   4400         ORL       A,#0x0
   \   0002CD   F0           MOVX      @DPTR,A
    729            }
    730          
    731            mtu.kvp = FALSE;
   \                     ??AF_DataRequest_18:
   \   0002CE   85..82       MOV       DPL,?XSP + 0
   \   0002D1   85..83       MOV       DPH,?XSP + 1
   \   0002D4   7400         MOV       A,#0x0
   \   0002D6   F0           MOVX      @DPTR,A
    732          
    733            if ( options & AF_SUPRESS_ROUTE_DISC_NETWORK )
   \   0002D7   EF           MOV       A,R7
   \   0002D8   A2E5         MOV       C,0xE0 /* A   */.5
   \   0002DA   500A         JNC       ??AF_DataRequest_19
    734            {
    735              req.discoverRoute = DISC_ROUTE_INITIATE;
   \   0002DC   741D         MOV       A,#0x1d
   \   0002DE   12....       LCALL     ?XSTACK_DISP0_8
   \   0002E1   7404         MOV       A,#0x4
   \   0002E3   F0           MOVX      @DPTR,A
   \   0002E4   800E         SJMP      ??AF_DataRequest_20
    736            }
    737            else
    738            {
    739              req.discoverRoute = AF_DataRequestDiscoverRoute;
   \                     ??AF_DataRequest_19:
   \   0002E6   90....       MOV       DPTR,#AF_DataRequestDiscoverRoute
   \   0002E9   E0           MOVX      A,@DPTR
   \   0002EA   C0E0         PUSH      A
   \   0002EC   741D         MOV       A,#0x1d
   \   0002EE   12....       LCALL     ?XSTACK_DISP0_8
   \   0002F1   D0E0         POP       A
   \   0002F3   F0           MOVX      @DPTR,A
    740            }
    741          
    742            req.transID       = *transID;
   \                     ??AF_DataRequest_20:
   \   0002F4   85..82       MOV       DPL,?V12
   \   0002F7   85..83       MOV       DPH,?V13
   \   0002FA   E0           MOVX      A,@DPTR
   \   0002FB   C0E0         PUSH      A
   \   0002FD   741C         MOV       A,#0x1c
   \   0002FF   12....       LCALL     ?XSTACK_DISP0_8
   \   000302   D0E0         POP       A
   \   000304   F0           MOVX      @DPTR,A
    743            req.srcEP         = srcEP->endPoint;
   \   000305   85..82       MOV       DPL,?V2
   \   000308   85..83       MOV       DPH,?V3
   \   00030B   E0           MOVX      A,@DPTR
   \   00030C   C0E0         PUSH      A
   \   00030E   740E         MOV       A,#0xe
   \   000310   12....       LCALL     ?XSTACK_DISP0_8
   \   000313   D0E0         POP       A
   \   000315   F0           MOVX      @DPTR,A
    744            req.dstEP         = dstAddr->endPoint;
   \   000316   85..82       MOV       DPL,?V0
   \   000319   85..83       MOV       DPH,?V1
   \   00031C   A3           INC       DPTR
   \   00031D   A3           INC       DPTR
   \   00031E   A3           INC       DPTR
   \   00031F   A3           INC       DPTR
   \   000320   A3           INC       DPTR
   \   000321   A3           INC       DPTR
   \   000322   A3           INC       DPTR
   \   000323   A3           INC       DPTR
   \   000324   A3           INC       DPTR
   \   000325   E0           MOVX      A,@DPTR
   \   000326   C0E0         PUSH      A
   \   000328   740F         MOV       A,#0xf
   \   00032A   12....       LCALL     ?XSTACK_DISP0_8
   \   00032D   D0E0         POP       A
   \   00032F   F0           MOVX      @DPTR,A
    745            req.clusterID     = cID;
   \   000330   743A         MOV       A,#0x3a
   \   000332   12....       LCALL     ?XSTACK_DISP0_8
   \   000335   E0           MOVX      A,@DPTR
   \   000336   F8           MOV       R0,A
   \   000337   A3           INC       DPTR
   \   000338   E0           MOVX      A,@DPTR
   \   000339   F9           MOV       R1,A
   \   00033A   7412         MOV       A,#0x12
   \   00033C   12....       LCALL     ?XSTACK_DISP0_8
   \   00033F   E8           MOV       A,R0
   \   000340   F0           MOVX      @DPTR,A
   \   000341   A3           INC       DPTR
   \   000342   E9           MOV       A,R1
   \   000343   F0           MOVX      @DPTR,A
    746            req.asduLen       = len;
   \   000344   7416         MOV       A,#0x16
   \   000346   12....       LCALL     ?XSTACK_DISP0_8
   \   000349   E5..         MOV       A,?V4
   \   00034B   F0           MOVX      @DPTR,A
   \   00034C   A3           INC       DPTR
   \   00034D   E5..         MOV       A,?V5
   \   00034F   F0           MOVX      @DPTR,A
    747            req.asdu          = buf;
   \   000350   743E         MOV       A,#0x3e
   \   000352   12....       LCALL     ?XSTACK_DISP0_8
   \   000355   E0           MOVX      A,@DPTR
   \   000356   F8           MOV       R0,A
   \   000357   A3           INC       DPTR
   \   000358   E0           MOVX      A,@DPTR
   \   000359   F9           MOV       R1,A
   \   00035A   7418         MOV       A,#0x18
   \   00035C   12....       LCALL     ?XSTACK_DISP0_8
   \   00035F   E8           MOV       A,R0
   \   000360   F0           MOVX      @DPTR,A
   \   000361   A3           INC       DPTR
   \   000362   E9           MOV       A,R1
   \   000363   F0           MOVX      @DPTR,A
    748            req.radiusCounter = radius;
   \   000364   E5..         MOV       A,?V14
   \   000366   C0E0         PUSH      A
   \   000368   741E         MOV       A,#0x1e
   \   00036A   12....       LCALL     ?XSTACK_DISP0_8
   \   00036D   D0E0         POP       A
   \   00036F   F0           MOVX      @DPTR,A
    749          #if defined ( INTER_PAN )
    750            req.dstPanId      = dstAddr->panId;
   \   000370   85..82       MOV       DPL,?V0
   \   000373   85..83       MOV       DPH,?V1
   \   000376   A3           INC       DPTR
   \   000377   A3           INC       DPTR
   \   000378   A3           INC       DPTR
   \   000379   A3           INC       DPTR
   \   00037A   A3           INC       DPTR
   \   00037B   A3           INC       DPTR
   \   00037C   A3           INC       DPTR
   \   00037D   A3           INC       DPTR
   \   00037E   A3           INC       DPTR
   \   00037F   A3           INC       DPTR
   \   000380   E0           MOVX      A,@DPTR
   \   000381   F8           MOV       R0,A
   \   000382   A3           INC       DPTR
   \   000383   E0           MOVX      A,@DPTR
   \   000384   F9           MOV       R1,A
   \   000385   7410         MOV       A,#0x10
   \   000387   12....       LCALL     ?XSTACK_DISP0_8
   \   00038A   E8           MOV       A,R0
   \   00038B   F0           MOVX      @DPTR,A
   \   00038C   A3           INC       DPTR
   \   00038D   E9           MOV       A,R1
   \   00038E   F0           MOVX      @DPTR,A
    751          #endif // INTER_PAN
    752          
    753            // Look if there is a Callback function registered for this endpoint
    754            // The callback is used to control the AF Transaction ID used when sending messages
    755            pList = afFindEndPointDescList( srcEP->endPoint );
   \   00038F                ; Setup parameters for call to function afFindEndPointDescList
   \   00038F   85..82       MOV       DPL,?V2
   \   000392   85..83       MOV       DPH,?V3
   \   000395   E0           MOVX      A,@DPTR
   \   000396   F9           MOV       R1,A
   \   000397   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00039A   8A..         MOV       ?V6,R2
   \   00039C   8B..         MOV       ?V7,R3
   \   00039E   85....       MOV       ?V8,?V6
   \   0003A1   85....       MOV       ?V9,?V7
    756          
    757            if ( ( pList != NULL ) && ( pList->pfnApplCB != NULL ) )
   \   0003A4   E5..         MOV       A,?V8
   \   0003A6   45..         ORL       A,?V9
   \   0003A8   6037         JZ        ??AF_DataRequest_21
   \   0003AA   85..82       MOV       DPL,?V8
   \   0003AD   85..83       MOV       DPH,?V9
   \   0003B0   A3           INC       DPTR
   \   0003B1   A3           INC       DPTR
   \   0003B2   A3           INC       DPTR
   \   0003B3   A3           INC       DPTR
   \   0003B4   A3           INC       DPTR
   \   0003B5   A3           INC       DPTR
   \   0003B6   A3           INC       DPTR
   \   0003B7   A3           INC       DPTR
   \   0003B8   A3           INC       DPTR
   \   0003B9   E0           MOVX      A,@DPTR
   \   0003BA   F8           MOV       R0,A
   \   0003BB   A3           INC       DPTR
   \   0003BC   E0           MOVX      A,@DPTR
   \   0003BD   F9           MOV       R1,A
   \   0003BE   E8           MOV       A,R0
   \   0003BF   49           ORL       A,R1
   \   0003C0   601F         JZ        ??AF_DataRequest_21
    758            {
    759              pList->pfnApplCB( &req );
   \   0003C2                ; Setup parameters for indirect call
   \   0003C2   7405         MOV       A,#0x5
   \   0003C4   12....       LCALL     ?XSTACK_DISP101_8
   \   0003C7   85..82       MOV       DPL,?V8
   \   0003CA   85..83       MOV       DPH,?V9
   \   0003CD   A3           INC       DPTR
   \   0003CE   A3           INC       DPTR
   \   0003CF   A3           INC       DPTR
   \   0003D0   A3           INC       DPTR
   \   0003D1   A3           INC       DPTR
   \   0003D2   A3           INC       DPTR
   \   0003D3   A3           INC       DPTR
   \   0003D4   A3           INC       DPTR
   \   0003D5   A3           INC       DPTR
   \   0003D6   E0           MOVX      A,@DPTR
   \   0003D7   F8           MOV       R0,A
   \   0003D8   A3           INC       DPTR
   \   0003D9   E0           MOVX      A,@DPTR
   \   0003DA   F583         MOV       DPH,A
   \   0003DC   8882         MOV       DPL,R0
   \   0003DE   12....       LCALL     ?CALL_IND
    760            }
    761          
    762          #if defined ( INTER_PAN )
    763            if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
   \                     ??AF_DataRequest_21:
   \   0003E1                ; Setup parameters for call to function StubAPS_InterPan
   \   0003E1   85..82       MOV       DPL,?V0
   \   0003E4   85..83       MOV       DPH,?V1
   \   0003E7   A3           INC       DPTR
   \   0003E8   A3           INC       DPTR
   \   0003E9   A3           INC       DPTR
   \   0003EA   A3           INC       DPTR
   \   0003EB   A3           INC       DPTR
   \   0003EC   A3           INC       DPTR
   \   0003ED   A3           INC       DPTR
   \   0003EE   A3           INC       DPTR
   \   0003EF   A3           INC       DPTR
   \   0003F0   E0           MOVX      A,@DPTR
   \   0003F1   F9           MOV       R1,A
   \   0003F2   85..82       MOV       DPL,?V0
   \   0003F5   85..83       MOV       DPH,?V1
   \   0003F8   A3           INC       DPTR
   \   0003F9   A3           INC       DPTR
   \   0003FA   A3           INC       DPTR
   \   0003FB   A3           INC       DPTR
   \   0003FC   A3           INC       DPTR
   \   0003FD   A3           INC       DPTR
   \   0003FE   A3           INC       DPTR
   \   0003FF   A3           INC       DPTR
   \   000400   A3           INC       DPTR
   \   000401   A3           INC       DPTR
   \   000402   E0           MOVX      A,@DPTR
   \   000403   FA           MOV       R2,A
   \   000404   A3           INC       DPTR
   \   000405   E0           MOVX      A,@DPTR
   \   000406   FB           MOV       R3,A
   \   000407   12....       LCALL     `??StubAPS_InterPan::?relay`; Banked call to: StubAPS_InterPan
   \   00040A   E9           MOV       A,R1
   \   00040B   6020         JZ        ??AF_DataRequest_22
    764            {
    765              if ( len > INTERP_DataReqMTU() )
   \   00040D                ; Setup parameters for call to function INTERP_DataReqMTU
   \   00040D   12....       LCALL     `??INTERP_DataReqMTU::?relay`; Banked call to: INTERP_DataReqMTU
   \   000410   E9           MOV       A,R1
   \   000411   F8           MOV       R0,A
   \   000412   7900         MOV       R1,#0x0
   \   000414   C3           CLR       C
   \   000415   E8           MOV       A,R0
   \   000416   95..         SUBB      A,?V4
   \   000418   E9           MOV       A,R1
   \   000419   95..         SUBB      A,?V5
   \   00041B   5004         JNC       ??AF_DataRequest_23
    766              {
    767                stat = afStatus_INVALID_PARAMETER;
   \   00041D   7E02         MOV       R6,#0x2
   \   00041F   8051         SJMP      ??AF_DataRequest_24
    768              }
    769              else
    770              {
    771                stat = INTERP_DataReq( &req );
   \                     ??AF_DataRequest_23:
   \   000421                ; Setup parameters for call to function INTERP_DataReq
   \   000421   7405         MOV       A,#0x5
   \   000423   12....       LCALL     ?XSTACK_DISP101_8
   \   000426   12....       LCALL     `??INTERP_DataReq::?relay`; Banked call to: INTERP_DataReq
   \   000429   E9           MOV       A,R1
   \   00042A   FE           MOV       R6,A
   \   00042B   8045         SJMP      ??AF_DataRequest_24
    772              }
    773            }
    774            else
    775          #endif // INTER_PAN
    776            {
    777              if (len > afDataReqMTU( &mtu ) )
   \                     ??AF_DataRequest_22:
   \   00042D                ; Setup parameters for call to function afDataReqMTU
   \   00042D   AA..         MOV       R2,?XSP + 0
   \   00042F   AB..         MOV       R3,?XSP + 1
   \   000431   12....       LCALL     `??afDataReqMTU::?relay`; Banked call to: afDataReqMTU
   \   000434   E9           MOV       A,R1
   \   000435   F8           MOV       R0,A
   \   000436   7900         MOV       R1,#0x0
   \   000438   C3           CLR       C
   \   000439   E8           MOV       A,R0
   \   00043A   95..         SUBB      A,?V4
   \   00043C   E9           MOV       A,R1
   \   00043D   95..         SUBB      A,?V5
   \   00043F   5027         JNC       ??AF_DataRequest_25
    778              {
    779                if (apsfSendFragmented)
   \   000441   90....       MOV       DPTR,#apsfSendFragmented
   \   000444   E0           MOVX      A,@DPTR
   \   000445   F8           MOV       R0,A
   \   000446   A3           INC       DPTR
   \   000447   E0           MOVX      A,@DPTR
   \   000448   F9           MOV       R1,A
   \   000449   E8           MOV       A,R0
   \   00044A   49           ORL       A,R1
   \   00044B   6017         JZ        ??AF_DataRequest_26
    780                {
    781                  stat = (*apsfSendFragmented)( &req );
   \   00044D                ; Setup parameters for indirect call
   \   00044D   7405         MOV       A,#0x5
   \   00044F   12....       LCALL     ?XSTACK_DISP101_8
   \   000452   90....       MOV       DPTR,#apsfSendFragmented
   \   000455   E0           MOVX      A,@DPTR
   \   000456   F8           MOV       R0,A
   \   000457   A3           INC       DPTR
   \   000458   E0           MOVX      A,@DPTR
   \   000459   F583         MOV       DPH,A
   \   00045B   8882         MOV       DPL,R0
   \   00045D   12....       LCALL     ?CALL_IND
   \   000460   E9           MOV       A,R1
   \   000461   FE           MOV       R6,A
   \   000462   800E         SJMP      ??AF_DataRequest_24
    782                }
    783                else
    784                {
    785                  stat = afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_26:
   \   000464   7E02         MOV       R6,#0x2
   \   000466   800A         SJMP      ??AF_DataRequest_24
    786                }
    787              }
    788              else
    789              {
    790                stat = APSDE_DataReq( &req );
   \                     ??AF_DataRequest_25:
   \   000468                ; Setup parameters for call to function APSDE_DataReq
   \   000468   7405         MOV       A,#0x5
   \   00046A   12....       LCALL     ?XSTACK_DISP101_8
   \   00046D   12....       LCALL     `??APSDE_DataReq::?relay`; Banked call to: APSDE_DataReq
   \   000470   E9           MOV       A,R1
   \   000471   FE           MOV       R6,A
    791              }
    792            }
    793          
    794            /*
    795             * If this is an EndPoint-to-EndPoint message on the same device, it will not
    796             * get added to the NWK databufs. So it will not go OTA and it will not get
    797             * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
    798             * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
    799             * message with the first in line TransSeqNumber, even on a multi message.
    800             * Also note that a reflected msg will not have its confirmation generated
    801             * here.
    802             */
    803            if ( (req.dstAddr.addrMode == Addr16Bit) &&
    804                 (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
   \                     ??AF_DataRequest_24:
   \   000472   740D         MOV       A,#0xd
   \   000474   12....       LCALL     ?XSTACK_DISP0_8
   \   000477   E0           MOVX      A,@DPTR
   \   000478   6402         XRL       A,#0x2
   \   00047A   702E         JNZ       ??AF_DataRequest_27
   \   00047C                ; Setup parameters for call to function NLME_GetShortAddr
   \   00047C   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00047F   8A..         MOV       ?V6,R2
   \   000481   8B..         MOV       ?V7,R3
   \   000483   A8..         MOV       R0,?V6
   \   000485   A9..         MOV       R1,?V7
   \   000487   7405         MOV       A,#0x5
   \   000489   12....       LCALL     ?XSTACK_DISP0_8
   \   00048C   E0           MOVX      A,@DPTR
   \   00048D   68           XRL       A,R0
   \   00048E   7003         JNZ       ??AF_DataRequest_28
   \   000490   A3           INC       DPTR
   \   000491   E0           MOVX      A,@DPTR
   \   000492   69           XRL       A,R1
   \                     ??AF_DataRequest_28:
   \   000493   7015         JNZ       ??AF_DataRequest_27
    805            {
    806              afDataConfirm( srcEP->endPoint, *transID, stat );
   \   000495                ; Setup parameters for call to function afDataConfirm
   \   000495   EE           MOV       A,R6
   \   000496   FB           MOV       R3,A
   \   000497   85..82       MOV       DPL,?V12
   \   00049A   85..83       MOV       DPH,?V13
   \   00049D   E0           MOVX      A,@DPTR
   \   00049E   FA           MOV       R2,A
   \   00049F   85..82       MOV       DPL,?V2
   \   0004A2   85..83       MOV       DPH,?V3
   \   0004A5   E0           MOVX      A,@DPTR
   \   0004A6   F9           MOV       R1,A
   \   0004A7   12....       LCALL     `??afDataConfirm::?relay`; Banked call to: afDataConfirm
    807            }
    808          
    809            if ( stat == afStatus_SUCCESS )
   \                     ??AF_DataRequest_27:
   \   0004AA   EE           MOV       A,R6
   \   0004AB   700A         JNZ       ??AF_DataRequest_29
    810            {
    811              (*transID)++;
   \   0004AD   85..82       MOV       DPL,?V12
   \   0004B0   85..83       MOV       DPH,?V13
   \   0004B3   E0           MOVX      A,@DPTR
   \   0004B4   2401         ADD       A,#0x1
   \   0004B6   F0           MOVX      @DPTR,A
    812            }
    813          
    814            return (afStatus_t)stat;
   \                     ??AF_DataRequest_29:
   \   0004B7   EE           MOV       A,R6
   \   0004B8   F9           MOV       R1,A
   \                     ??AF_DataRequest_1:
   \   0004B9   7423         MOV       A,#0x23
   \   0004BB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0004BE   7F0F         MOV       R7,#0xf
   \   0004C0   02....       LJMP      ?BANKED_LEAVE_XDATA
    815          }
    816          
    817          #if defined ( ZIGBEEPRO )
    818          /*********************************************************************
    819           * @fn      AF_DataRequestSrcRtg
    820           *
    821           * @brief   Common functionality for invoking APSDE_DataReq() for both
    822           *          SendMulti and MSG-Send.
    823           *
    824           * input parameters
    825           *
    826           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    827           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    828           * @param   cID - A valid cluster ID as specified by the Profile.
    829           * @param   len - Number of bytes of data pointed to by next param.
    830           * @param  *buf - A pointer to the data bytes to send.
    831           * @param  *transID - A pointer to a byte which can be modified and which will
    832           *                    be used as the transaction sequence number of the msg.
    833           * @param   options - Valid bit mask of Tx options.
    834           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    835           * @param   relayCnt - Number of devices in the relay list
    836           * @param   pRelayList - Pointer to the relay list
    837           *
    838           * output parameters
    839           *
    840           * @param  *transID - Incremented by one if the return value is success.
    841           *
    842           * @return  afStatus_t - See previous definition of afStatus_... types.
    843           */
    844          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    845          afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequestSrcRtg:
    846                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    847                                     uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
    848          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   \   000009   8C..         MOV       ?V10,R4
   \   00000B   8D..         MOV       ?V11,R5
   \   00000D   89..         MOV       ?V5,R1
   \   00000F   7418         MOV       A,#0x18
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V0,A
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V1,A
   \   00001B   741A         MOV       A,#0x1a
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   E0           MOVX      A,@DPTR
   \   000021   FE           MOV       R6,A
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   FF           MOV       R7,A
   \   000025   741C         MOV       A,#0x1c
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   F5..         MOV       ?V14,A
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F5..         MOV       ?V15,A
   \   000031   741E         MOV       A,#0x1e
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F5..         MOV       ?V12,A
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F5..         MOV       ?V13,A
   \   00003D   7420         MOV       A,#0x20
   \   00003F   12....       LCALL     ?XSTACK_DISP0_8
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F5..         MOV       ?V4,A
   \   000045   7421         MOV       A,#0x21
   \   000047   12....       LCALL     ?XSTACK_DISP0_8
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F5..         MOV       ?V3,A
    849            uint8 status;
    850          
    851            /* Add the source route to the source routing table */
    852            status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt,
    853                                                   pRelayList );
   \   00004D                ; Setup parameters for call to function RTG_AddSrcRtgEntry_Guaranteed
   \   00004D   7422         MOV       A,#0x22
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   E0           MOVX      A,@DPTR
   \   000053   FC           MOV       R4,A
   \   000054   A3           INC       DPTR
   \   000055   E0           MOVX      A,@DPTR
   \   000056   FD           MOV       R5,A
   \   000057   A9..         MOV       R1,?V3
   \   000059   85..82       MOV       DPL,?V6
   \   00005C   85..83       MOV       DPH,?V7
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   FA           MOV       R2,A
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   FB           MOV       R3,A
   \   000064   12....       LCALL     `??RTG_AddSrcRtgEntry_Guaranteed::?relay`; Banked call to: RTG_AddSrcRtgEntry_Guaranteed
   \   000067   E9           MOV       A,R1
   \   000068   F5..         MOV       ?V2,A
    854          
    855            if( status == RTG_SUCCESS)
   \   00006A   E5..         MOV       A,?V2
   \   00006C   7044         JNZ       ??AF_DataRequestSrcRtg_0
    856            {
    857              /* Call AF_DataRequest to send the data */
    858              status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
   \   00006E                ; Setup parameters for call to function AF_DataRequest
   \   00006E   E5..         MOV       A,?V4
   \   000070   F5..         MOV       ?V8,A
   \   000072   78..         MOV       R0,#?V8
   \   000074   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000077   85....       MOV       ?V8,?V12
   \   00007A   85....       MOV       ?V9,?V13
   \   00007D   78..         MOV       R0,#?V8
   \   00007F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000082   85....       MOV       ?V8,?V14
   \   000085   85....       MOV       ?V9,?V15
   \   000088   78..         MOV       R0,#?V8
   \   00008A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008D   8E..         MOV       ?V8,R6
   \   00008F   8F..         MOV       ?V9,R7
   \   000091   78..         MOV       R0,#?V8
   \   000093   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000096   78..         MOV       R0,#?V0
   \   000098   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009B   A9..         MOV       R1,?V5
   \   00009D   AC..         MOV       R4,?V10
   \   00009F   AD..         MOV       R5,?V11
   \   0000A1   AA..         MOV       R2,?V6
   \   0000A3   AB..         MOV       R3,?V7
   \   0000A5   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000A8   7409         MOV       A,#0x9
   \   0000AA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AD   E9           MOV       A,R1
   \   0000AE   F5..         MOV       ?V2,A
   \   0000B0   800E         SJMP      ??AF_DataRequestSrcRtg_1
    859            }
    860            else if( status == RTG_INVALID_PATH )
   \                     ??AF_DataRequestSrcRtg_0:
   \   0000B2   7405         MOV       A,#0x5
   \   0000B4   65..         XRL       A,?V2
   \   0000B6   7005         JNZ       ??AF_DataRequestSrcRtg_2
    861            {
    862              /* The source route relay count is exceeding the network limit */
    863              status = afStatus_INVALID_PARAMETER;
   \   0000B8   75..02       MOV       ?V2,#0x2
   \   0000BB   8003         SJMP      ??AF_DataRequestSrcRtg_1
    864            }
    865            else
    866            {
    867              /* The guaranteed adding entry fails due to memory failure */
    868              status = afStatus_MEM_FAIL;
   \                     ??AF_DataRequestSrcRtg_2:
   \   0000BD   75..10       MOV       ?V2,#0x10
    869            }
    870            return status;
   \                     ??AF_DataRequestSrcRtg_1:
   \   0000C0   A9..         MOV       R1,?V2
   \   0000C2   7F10         MOV       R7,#0x10
   \   0000C4   02....       LJMP      ?BANKED_LEAVE_XDATA
    871          }
    872          
    873          #endif // ZIGBEEPRO
    874          
    875          /*********************************************************************
    876           * @fn      afFindEndPointDescList
    877           *
    878           * @brief   Find the endpoint description entry from the endpoint
    879           *          number.
    880           *
    881           * @param   EndPoint - Application Endpoint to look for
    882           *
    883           * @return  the address to the endpoint/interface description entry
    884           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    885          static epList_t *afFindEndPointDescList( uint8 EndPoint )
   \                     afFindEndPointDescList:
    886          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    887            epList_t *epSearch;
    888          
    889            for (epSearch = epList; epSearch != NULL; epSearch = epSearch->nextDesc)
   \   000004   90....       MOV       DPTR,#epList
   \   000007   E0           MOVX      A,@DPTR
   \   000008   FC           MOV       R4,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   FD           MOV       R5,A
   \   00000C   EC           MOV       A,R4
   \   00000D   FA           MOV       R2,A
   \   00000E   ED           MOV       A,R5
   \   00000F   FB           MOV       R3,A
   \                     ??afFindEndPointDescList_0:
   \   000010   EA           MOV       A,R2
   \   000011   4B           ORL       A,R3
   \   000012   601D         JZ        ??afFindEndPointDescList_1
    890            {
    891              if (epSearch->epDesc->endPoint == EndPoint)
   \   000014   8A82         MOV       DPL,R2
   \   000016   8B83         MOV       DPH,R3
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F8           MOV       R0,A
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F583         MOV       DPH,A
   \   000020   8882         MOV       DPL,R0
   \   000022   E0           MOVX      A,@DPTR
   \   000023   69           XRL       A,R1
   \   000024   600B         JZ        ??afFindEndPointDescList_1
    892              {
    893                break;
    894              }
    895            }
   \   000026   8A82         MOV       DPL,R2
   \   000028   8B83         MOV       DPH,R3
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   FA           MOV       R2,A
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   FB           MOV       R3,A
   \   00002F   80DF         SJMP      ??afFindEndPointDescList_0
    896          
    897            return epSearch;
   \                     ??afFindEndPointDescList_1:
   \   000031   D083         POP       DPH
   \   000033   D082         POP       DPL
   \   000035   02....       LJMP      ?BRET
    898          }
    899          
    900          /*********************************************************************
    901           * @fn      afFindEndPointDesc
    902           *
    903           * @brief   Find the endpoint description entry from the endpoint
    904           *          number.
    905           *
    906           * @param   EndPoint - Application Endpoint to look for
    907           *
    908           * @return  the address to the endpoint/interface description entry
    909           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    910          endPointDesc_t *afFindEndPointDesc( uint8 EndPoint )
   \                     afFindEndPointDesc:
    911          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
    912            epList_t *epSearch;
    913          
    914            // Look for the endpoint
    915            epSearch = afFindEndPointDescList( EndPoint );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   A9..         MOV       R1,?V0
   \   000009   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000C   8A..         MOV       ?V2,R2
   \   00000E   8B..         MOV       ?V3,R3
   \   000010   AE..         MOV       R6,?V2
   \   000012   AF..         MOV       R7,?V3
    916          
    917            if ( epSearch )
   \   000014   EE           MOV       A,R6
   \   000015   4F           ORL       A,R7
   \   000016   600D         JZ        ??afFindEndPointDesc_0
    918              return ( epSearch->epDesc );
   \   000018   8E82         MOV       DPL,R6
   \   00001A   8F83         MOV       DPH,R7
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   FA           MOV       R2,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   FB           MOV       R3,A
   \   000023   8004         SJMP      ??afFindEndPointDesc_1
    919            else
    920              return ( (endPointDesc_t *)NULL );
   \                     ??afFindEndPointDesc_0:
   \   000025   7A00         MOV       R2,#0x0
   \   000027   7B00         MOV       R3,#0x0
   \                     ??afFindEndPointDesc_1:
   \   000029   7F04         MOV       R7,#0x4
   \   00002B   02....       LJMP      ?BANKED_LEAVE_XDATA
    921          }
    922          
    923          /*********************************************************************
    924           * @fn      afFindSimpleDesc
    925           *
    926           * @brief   Find the Simple Descriptor from the endpoint number.
    927           *
    928           * @param   EP - Application Endpoint to look for.
    929           *
    930           * @return  Non-zero to indicate that the descriptor memory must be freed.
    931           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    932          uint8 afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, uint8 EP )
   \                     afFindSimpleDesc:
    933          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V1,R1
    934            epList_t *epItem = afFindEndPointDescList( EP );
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   A9..         MOV       R1,?V1
   \   00000D   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000010   8A..         MOV       ?V4,R2
   \   000012   8B..         MOV       ?V5,R3
   \   000014   85....       MOV       ?V2,?V4
   \   000017   85....       MOV       ?V3,?V5
    935            uint8 rtrn = FALSE;
   \   00001A   75..00       MOV       ?V0,#0x0
    936          
    937            if ( epItem )
   \   00001D   E5..         MOV       A,?V2
   \   00001F   45..         ORL       A,?V3
   \   000021   605E         JZ        ??afFindSimpleDesc_0
    938            {
    939              if ( epItem->pfnDescCB )
   \   000023   85..82       MOV       DPL,?V2
   \   000026   85..83       MOV       DPH,?V3
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F8           MOV       R0,A
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F9           MOV       R1,A
   \   000032   E8           MOV       A,R0
   \   000033   49           ORL       A,R1
   \   000034   6027         JZ        ??afFindSimpleDesc_1
    940              {
    941                *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
   \   000036                ; Setup parameters for indirect call
   \   000036   AA..         MOV       R2,?V1
   \   000038   7901         MOV       R1,#0x1
   \   00003A   85..82       MOV       DPL,?V2
   \   00003D   85..83       MOV       DPH,?V3
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F8           MOV       R0,A
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F583         MOV       DPH,A
   \   00004A   8882         MOV       DPL,R0
   \   00004C   12....       LCALL     ?CALL_IND
   \   00004F   8E82         MOV       DPL,R6
   \   000051   8F83         MOV       DPH,R7
   \   000053   EA           MOV       A,R2
   \   000054   F0           MOVX      @DPTR,A
   \   000055   A3           INC       DPTR
   \   000056   EB           MOV       A,R3
   \   000057   F0           MOVX      @DPTR,A
    942                rtrn = TRUE;
   \   000058   75..01       MOV       ?V0,#0x1
   \   00005B   802F         SJMP      ??afFindSimpleDesc_2
    943              }
    944              else
    945              {
    946                *ppDesc = epItem->epDesc->simpleDesc;
   \                     ??afFindSimpleDesc_1:
   \   00005D   85..82       MOV       DPL,?V2
   \   000060   85..83       MOV       DPH,?V3
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   E0           MOVX      A,@DPTR
   \   000066   F8           MOV       R0,A
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   F583         MOV       DPH,A
   \   00006B   8882         MOV       DPL,R0
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   F8           MOV       R0,A
   \   000073   A3           INC       DPTR
   \   000074   E0           MOVX      A,@DPTR
   \   000075   F9           MOV       R1,A
   \   000076   8E82         MOV       DPL,R6
   \   000078   8F83         MOV       DPH,R7
   \   00007A   E8           MOV       A,R0
   \   00007B   F0           MOVX      @DPTR,A
   \   00007C   A3           INC       DPTR
   \   00007D   E9           MOV       A,R1
   \   00007E   F0           MOVX      @DPTR,A
   \   00007F   800B         SJMP      ??afFindSimpleDesc_2
    947              }
    948            }
    949            else
    950            {
    951              *ppDesc = NULL;
   \                     ??afFindSimpleDesc_0:
   \   000081   8E82         MOV       DPL,R6
   \   000083   8F83         MOV       DPH,R7
   \   000085   7400         MOV       A,#0x0
   \   000087   F0           MOVX      @DPTR,A
   \   000088   A3           INC       DPTR
   \   000089   7400         MOV       A,#0x0
   \   00008B   F0           MOVX      @DPTR,A
    952            }
    953          
    954            return rtrn;
   \                     ??afFindSimpleDesc_2:
   \   00008C   A9..         MOV       R1,?V0
   \   00008E   7F06         MOV       R7,#0x6
   \   000090   02....       LJMP      ?BANKED_LEAVE_XDATA
    955          }
    956          
    957          /*********************************************************************
    958           * @fn      afGetDescCB
    959           *
    960           * @brief   Get the Descriptor callback function.
    961           *
    962           * @param   epDesc - pointer to the endpoint descriptor
    963           *
    964           * @return  function pointer or NULL
    965           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    966          static pDescCB afGetDescCB( endPointDesc_t *epDesc )
   \                     afGetDescCB:
    967          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV       A,R2
   \   000005   F8           MOV       R0,A
   \   000006   EB           MOV       A,R3
   \   000007   F9           MOV       R1,A
    968            epList_t *epSearch;
    969          
    970            // Start at the beginning
    971            epSearch = epList;
   \   000008   90....       MOV       DPTR,#epList
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   FA           MOV       R2,A
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   FB           MOV       R3,A
   \   000010   EA           MOV       A,R2
   \   000011   FC           MOV       R4,A
   \   000012   EB           MOV       A,R3
   \   000013   FD           MOV       R5,A
    972          
    973            // Look through the list until the end
    974            while ( epSearch )
   \                     ??afGetDescCB_0:
   \   000014   EC           MOV       A,R4
   \   000015   4D           ORL       A,R5
   \   000016   6031         JZ        ??afGetDescCB_1
    975            {
    976              // Is there a match?
    977              if ( epSearch->epDesc == epDesc )
   \   000018   8C82         MOV       DPL,R4
   \   00001A   8D83         MOV       DPH,R5
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   FA           MOV       R2,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   FB           MOV       R3,A
   \   000023   E8           MOV       A,R0
   \   000024   6A           XRL       A,R2
   \   000025   7002         JNZ       ??afGetDescCB_2
   \   000027   E9           MOV       A,R1
   \   000028   6B           XRL       A,R3
   \                     ??afGetDescCB_2:
   \   000029   700F         JNZ       ??afGetDescCB_3
    978              {
    979                return ( epSearch->pfnDescCB );
   \   00002B   8C82         MOV       DPL,R4
   \   00002D   8D83         MOV       DPH,R5
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   FA           MOV       R2,A
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   FB           MOV       R3,A
   \   000038   8013         SJMP      ??afGetDescCB_4
    980              }
    981              else
    982                epSearch = epSearch->nextDesc;  // Next entry
   \                     ??afGetDescCB_3:
   \   00003A   8C82         MOV       DPL,R4
   \   00003C   8D83         MOV       DPH,R5
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   FA           MOV       R2,A
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   FB           MOV       R3,A
   \   000043   EA           MOV       A,R2
   \   000044   FC           MOV       R4,A
   \   000045   EB           MOV       A,R3
   \   000046   FD           MOV       R5,A
   \   000047   80CB         SJMP      ??afGetDescCB_0
    983            }
    984          
    985            return ( (pDescCB)NULL );
   \                     ??afGetDescCB_1:
   \   000049   7A00         MOV       R2,#0x0
   \   00004B   7B00         MOV       R3,#0x0
   \                     ??afGetDescCB_4:
   \   00004D   D083         POP       DPH
   \   00004F   D082         POP       DPL
   \   000051   02....       LJMP      ?BRET
    986          }
    987          
    988          /*********************************************************************
    989           * @fn      afDataReqMTU
    990           *
    991           * @brief   Get the Data Request MTU(Max Transport Unit).
    992           *
    993           * @param   fields - afDataReqMTU_t
    994           *
    995           * @return  uint8(MTU)
    996           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    997          uint8 afDataReqMTU( afDataReqMTU_t* fields )
   \                     afDataReqMTU:
    998          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    999            uint8 len;
   1000            uint8 hdr;
   1001          
   1002            if ( fields->kvp == TRUE )
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   6401         XRL       A,#0x1
   \   000010   7005         JNZ       ??afDataReqMTU_0
   1003            {
   1004              hdr = AF_HDR_KVP_MAX_LEN;
   \   000012   75..08       MOV       ?V0,#0x8
   \   000015   8003         SJMP      ??afDataReqMTU_1
   1005            }
   1006            else
   1007            {
   1008              hdr = AF_HDR_V1_1_MAX_LEN;
   \                     ??afDataReqMTU_0:
   \   000017   75..00       MOV       ?V0,#0x0
   1009            }
   1010          
   1011            len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
   \                     ??afDataReqMTU_1:
   \   00001A                ; Setup parameters for call to function APSDE_DataReqMTU
   \   00001A   8E82         MOV       DPL,R6
   \   00001C   8F83         MOV       DPH,R7
   \   00001E   A3           INC       DPTR
   \   00001F   AA82         MOV       R2,DPL
   \   000021   AB83         MOV       R3,DPH
   \   000023   12....       LCALL     `??APSDE_DataReqMTU::?relay`; Banked call to: APSDE_DataReqMTU
   \   000026   E9           MOV       A,R1
   \   000027   C3           CLR       C
   \   000028   95..         SUBB      A,?V0
   \   00002A   F5..         MOV       ?V1,A
   1012          
   1013            return len;
   \   00002C   A9..         MOV       R1,?V1
   \   00002E   7F02         MOV       R7,#0x2
   \   000030   02....       LJMP      ?BANKED_LEAVE_XDATA
   1014          }
   1015          
   1016          /*********************************************************************
   1017           * @fn      afGetMatch
   1018           *
   1019           * @brief   Set the allow response flag.
   1020           *
   1021           * @param   ep - Application Endpoint to look for
   1022           * @param   action - true - allow response, false - no response
   1023           *
   1024           * @return  TRUE allow responses, FALSE no response
   1025           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1026          uint8 afGetMatch( uint8 ep )
   \                     afGetMatch:
   1027          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   1028            epList_t *epSearch;
   1029          
   1030            // Look for the endpoint
   1031            epSearch = afFindEndPointDescList( ep );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   A9..         MOV       R1,?V0
   \   000009   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000C   8A..         MOV       ?V2,R2
   \   00000E   8B..         MOV       ?V3,R3
   \   000010   AE..         MOV       R6,?V2
   \   000012   AF..         MOV       R7,?V3
   1032          
   1033            if ( epSearch )
   \   000014   EE           MOV       A,R6
   \   000015   4F           ORL       A,R7
   \   000016   6019         JZ        ??afGetMatch_0
   1034            {
   1035              if ( epSearch->flags & eEP_AllowMatch )
   \   000018   8E82         MOV       DPL,R6
   \   00001A   8F83         MOV       DPH,R7
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   A2E0         MOV       C,0xE0 /* A   */.0
   \   000027   5004         JNC       ??afGetMatch_1
   1036                return ( TRUE );
   \   000029   7901         MOV       R1,#0x1
   \   00002B   8006         SJMP      ??afGetMatch_2
   1037              else
   1038                return ( FALSE );
   \                     ??afGetMatch_1:
   \   00002D   7900         MOV       R1,#0x0
   \   00002F   8002         SJMP      ??afGetMatch_2
   1039            }
   1040            else
   1041              return ( FALSE );
   \                     ??afGetMatch_0:
   \   000031   7900         MOV       R1,#0x0
   \                     ??afGetMatch_2:
   \   000033   7F04         MOV       R7,#0x4
   \   000035   02....       LJMP      ?BANKED_LEAVE_XDATA
   1042          }
   1043          
   1044          /*********************************************************************
   1045           * @fn      afSetMatch
   1046           *
   1047           * @brief   Set the allow response flag.
   1048           *
   1049           * @param   ep - Application Endpoint to look for
   1050           * @param   action - true - allow response, false - no response
   1051           *
   1052           * @return  TRUE if success, FALSE if endpoint not found
   1053           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1054          uint8 afSetMatch( uint8 ep, uint8 action )
   \                     afSetMatch:
   1055          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
   1056            epList_t *epSearch;
   1057          
   1058            // Look for the endpoint
   1059            epSearch = afFindEndPointDescList( ep );
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   A9..         MOV       R1,?V0
   \   00000B   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000E   8A..         MOV       ?V2,R2
   \   000010   8B..         MOV       ?V3,R3
   \   000012   AE..         MOV       R6,?V2
   \   000014   AF..         MOV       R7,?V3
   1060          
   1061            if ( epSearch )
   \   000016   EE           MOV       A,R6
   \   000017   4F           ORL       A,R7
   \   000018   602A         JZ        ??afSetMatch_0
   1062            {
   1063              if ( action )
   \   00001A   E5..         MOV       A,?V1
   \   00001C   6012         JZ        ??afSetMatch_1
   1064              {
   1065                epSearch->flags |= eEP_AllowMatch;
   \   00001E   8E82         MOV       DPL,R6
   \   000020   8F83         MOV       DPH,R7
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   D2E0         SETB      0xE0 /* A   */.0
   \   00002D   F0           MOVX      @DPTR,A
   \   00002E   8010         SJMP      ??afSetMatch_2
   1066              }
   1067              else
   1068              {
   1069                epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
   \                     ??afSetMatch_1:
   \   000030   8E82         MOV       DPL,R6
   \   000032   8F83         MOV       DPH,R7
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   C2E0         CLR       0xE0 /* A   */.0
   \   00003F   F0           MOVX      @DPTR,A
   1070              }
   1071              return ( TRUE );
   \                     ??afSetMatch_2:
   \   000040   7901         MOV       R1,#0x1
   \   000042   8002         SJMP      ??afSetMatch_3
   1072            }
   1073            else
   1074              return ( FALSE );
   \                     ??afSetMatch_0:
   \   000044   7900         MOV       R1,#0x0
   \                     ??afSetMatch_3:
   \   000046   7F04         MOV       R7,#0x4
   \   000048   02....       LJMP      ?BANKED_LEAVE_XDATA
   1075          }
   1076          
   1077          /*********************************************************************
   1078           * @fn      afNumEndPoints
   1079           *
   1080           * @brief   Returns the number of endpoints defined (including 0)
   1081           *
   1082           * @param   none
   1083           *
   1084           * @return  number of endpoints
   1085           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1086          uint8 afNumEndPoints( void )
   \                     afNumEndPoints:
   1087          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1088            epList_t *epSearch;
   1089            uint8 endpoints;
   1090          
   1091            // Start at the beginning
   1092            epSearch = epList;
   \   000004   90....       MOV       DPTR,#epList
   \   000007   E0           MOVX      A,@DPTR
   \   000008   FC           MOV       R4,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   FD           MOV       R5,A
   \   00000C   EC           MOV       A,R4
   \   00000D   FA           MOV       R2,A
   \   00000E   ED           MOV       A,R5
   \   00000F   FB           MOV       R3,A
   1093            endpoints = 0;
   \   000010   7900         MOV       R1,#0x0
   1094          
   1095            while ( epSearch )
   \                     ??afNumEndPoints_0:
   \   000012   EA           MOV       A,R2
   \   000013   4B           ORL       A,R3
   \   000014   600C         JZ        ??afNumEndPoints_1
   1096            {
   1097              endpoints++;
   \   000016   09           INC       R1
   1098              epSearch = epSearch->nextDesc;
   \   000017   8A82         MOV       DPL,R2
   \   000019   8B83         MOV       DPH,R3
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   FA           MOV       R2,A
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   FB           MOV       R3,A
   \   000020   80F0         SJMP      ??afNumEndPoints_0
   1099            }
   1100          
   1101            return ( endpoints );
   \                     ??afNumEndPoints_1:
   \   000022   D083         POP       DPH
   \   000024   D082         POP       DPL
   \   000026   02....       LJMP      ?BRET
   1102          }
   1103          
   1104          /*********************************************************************
   1105           * @fn      afEndPoints
   1106           *
   1107           * @brief   Fills in the passed in buffer with the endpoint (numbers).
   1108           *          Use afNumEndPoints to find out how big a buffer to supply.
   1109           *
   1110           * @param   epBuf - pointer to mem used
   1111           *
   1112           * @return  void
   1113           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1114          void afEndPoints( uint8 *epBuf, uint8 skipZDO )
   \                     afEndPoints:
   1115          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1116            epList_t *epSearch;
   1117            uint8 endPoint;
   1118          
   1119            // Start at the beginning
   1120            epSearch = epList;
   \   000005   90....       MOV       DPTR,#epList
   \   000008   E0           MOVX      A,@DPTR
   \   000009   FE           MOV       R6,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   FF           MOV       R7,A
   \   00000D   EE           MOV       A,R6
   \   00000E   FC           MOV       R4,A
   \   00000F   EF           MOV       A,R7
   \   000010   FD           MOV       R5,A
   1121          
   1122            while ( epSearch )
   \                     ??afEndPoints_0:
   \   000011   EC           MOV       A,R4
   \   000012   4D           ORL       A,R5
   \   000013   6034         JZ        ??afEndPoints_1
   1123            {
   1124              endPoint = epSearch->epDesc->endPoint;
   \   000015   8C82         MOV       DPL,R4
   \   000017   8D83         MOV       DPH,R5
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   FE           MOV       R6,A
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F583         MOV       DPH,A
   \   000021   8E82         MOV       DPL,R6
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F8           MOV       R0,A
   1125          
   1126              if ( !skipZDO || endPoint != 0 )
   \   000025   E9           MOV       A,R1
   \   000026   6003         JZ        ??afEndPoints_2
   \   000028   E8           MOV       A,R0
   \   000029   6013         JZ        ??afEndPoints_3
   1127                *epBuf++ = endPoint;
   \                     ??afEndPoints_2:
   \   00002B   E8           MOV       A,R0
   \   00002C   C0E0         PUSH      A
   \   00002E   8A82         MOV       DPL,R2
   \   000030   8B83         MOV       DPH,R3
   \   000032   D0E0         POP       A
   \   000034   F0           MOVX      @DPTR,A
   \   000035   8A82         MOV       DPL,R2
   \   000037   8B83         MOV       DPH,R3
   \   000039   A3           INC       DPTR
   \   00003A   AA82         MOV       R2,DPL
   \   00003C   AB83         MOV       R3,DPH
   1128          
   1129              epSearch = epSearch->nextDesc;
   \                     ??afEndPoints_3:
   \   00003E   8C82         MOV       DPL,R4
   \   000040   8D83         MOV       DPH,R5
   \   000042   E0           MOVX      A,@DPTR
   \   000043   FC           MOV       R4,A
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \   000046   FD           MOV       R5,A
   \   000047   80C8         SJMP      ??afEndPoints_0
   1130            }
   1131          }
   \                     ??afEndPoints_1:
   \   000049   7F01         MOV       R7,#0x1
   \   00004B   02....       LJMP      ?BANKED_LEAVE_XDATA
   1132          
   1133          /*********************************************************************
   1134           * @fn      afCopyAddress
   1135           *
   1136           * @brief   Fills in the passed in afAddrType_t parameter with the corresponding information
   1137           *          from the zAddrType_t parameter.
   1138           *
   1139           * @param   epBuf - pointer to mem used
   1140           *
   1141           * @return  void
   1142           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1143          void afCopyAddress( afAddrType_t *afAddr, zAddrType_t *zAddr )
   \                     afCopyAddress:
   1144          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   1145            afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
   \   00000D   85..82       MOV       DPL,?V0
   \   000010   85..83       MOV       DPH,?V1
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   C0E0         PUSH      A
   \   00001E   8E82         MOV       DPL,R6
   \   000020   8F83         MOV       DPH,R7
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   D0E0         POP       A
   \   00002C   F0           MOVX      @DPTR,A
   1146            if ( zAddr->addrMode == Addr64Bit )
   \   00002D   85..82       MOV       DPL,?V0
   \   000030   85..83       MOV       DPH,?V1
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   6403         XRL       A,#0x3
   \   00003E   7017         JNZ       ??afCopyAddress_0
   1147            {
   1148              (void)osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
   \   000040                ; Setup parameters for call to function sAddrExtCpy
   \   000040   AC..         MOV       R4,?V0
   \   000042   AD..         MOV       R5,?V1
   \   000044   EE           MOV       A,R6
   \   000045   FA           MOV       R2,A
   \   000046   EF           MOV       A,R7
   \   000047   FB           MOV       R3,A
   \   000048   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00004B   8A..         MOV       ?V2,R2
   \   00004D   8B..         MOV       ?V3,R3
   \   00004F   85..82       MOV       DPL,?V2
   \   000052   85..83       MOV       DPH,?V3
   \   000055   8014         SJMP      ??afCopyAddress_1
   1149            }
   1150            else
   1151            {
   1152              afAddr->addr.shortAddr = zAddr->addr.shortAddr;
   \                     ??afCopyAddress_0:
   \   000057   85..82       MOV       DPL,?V0
   \   00005A   85..83       MOV       DPH,?V1
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   F8           MOV       R0,A
   \   00005F   A3           INC       DPTR
   \   000060   E0           MOVX      A,@DPTR
   \   000061   F9           MOV       R1,A
   \   000062   8E82         MOV       DPL,R6
   \   000064   8F83         MOV       DPH,R7
   \   000066   E8           MOV       A,R0
   \   000067   F0           MOVX      @DPTR,A
   \   000068   A3           INC       DPTR
   \   000069   E9           MOV       A,R1
   \   00006A   F0           MOVX      @DPTR,A
   1153            }
   1154          
   1155            // Since zAddrType_t has no INTER-PAN information, set the panId member to zero.
   1156            afAddr->panId = 0;
   \                     ??afCopyAddress_1:
   \   00006B   8E82         MOV       DPL,R6
   \   00006D   8F83         MOV       DPH,R7
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   7400         MOV       A,#0x0
   \   00007B   F0           MOVX      @DPTR,A
   \   00007C   A3           INC       DPTR
   \   00007D   7400         MOV       A,#0x0
   \   00007F   F0           MOVX      @DPTR,A
   1157          }
   \   000080   7F04         MOV       R7,#0x4
   \   000082   02....       LJMP      ?BANKED_LEAVE_XDATA
   1158          
   1159          /**************************************************************************************************
   1160           * @fn          afAPSF_ConfigGet
   1161           *
   1162           * @brief       This function ascertains the fragmentation configuration that corresponds to
   1163           *              the specified EndPoint.
   1164           *
   1165           * input parameters
   1166           *
   1167           * @param       endPoint - The source EP of a Tx or destination EP of a Rx fragmented message.
   1168           *
   1169           * output parameters
   1170           *
   1171           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1172           *
   1173           * @return      None.
   1174           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1175          void afAPSF_ConfigGet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigGet:
   1176          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
   1177            epList_t *pList = afFindEndPointDescList(endPoint);
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   A9..         MOV       R1,?V2
   \   00000D   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000010   8A..         MOV       ?V4,R2
   \   000012   8B..         MOV       ?V5,R3
   \   000014   85....       MOV       ?V0,?V4
   \   000017   85....       MOV       ?V1,?V5
   1178          
   1179            if (pList == NULL)
   \   00001A   E5..         MOV       A,?V0
   \   00001C   45..         ORL       A,?V1
   \   00001E   7011         JNZ       ??afAPSF_ConfigGet_0
   1180            {
   1181              pCfg->frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \   000020   8E82         MOV       DPL,R6
   \   000022   8F83         MOV       DPH,R7
   \   000024   7432         MOV       A,#0x32
   \   000026   F0           MOVX      @DPTR,A
   1182              pCfg->windowSize = APSF_DEFAULT_WINDOW_SIZE;
   \   000027   8E82         MOV       DPL,R6
   \   000029   8F83         MOV       DPH,R7
   \   00002B   A3           INC       DPTR
   \   00002C   7401         MOV       A,#0x1
   \   00002E   F0           MOVX      @DPTR,A
   \   00002F   802D         SJMP      ??afAPSF_ConfigGet_1
   1183            }
   1184            else
   1185            {
   1186              (void)osal_memcpy(pCfg, &pList->apsfCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigGet_0:
   \   000031                ; Setup parameters for call to function osal_memcpy
   \   000031   E5..         MOV       A,?V0
   \   000033   2406         ADD       A,#0x6
   \   000035   F5..         MOV       ?V4,A
   \   000037   E4           CLR       A
   \   000038   35..         ADDC      A,?V1
   \   00003A   F5..         MOV       ?V5,A
   \   00003C   75..00       MOV       ?V6,#0x0
   \   00003F   78..         MOV       R0,#?V4
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000044   7C02         MOV       R4,#0x2
   \   000046   7D00         MOV       R5,#0x0
   \   000048   EE           MOV       A,R6
   \   000049   FA           MOV       R2,A
   \   00004A   EF           MOV       A,R7
   \   00004B   FB           MOV       R3,A
   \   00004C   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00004F   7403         MOV       A,#0x3
   \   000051   12....       LCALL     ?DEALLOC_XSTACK8
   \   000054   8A..         MOV       ?V4,R2
   \   000056   8B..         MOV       ?V5,R3
   \   000058   85..82       MOV       DPL,?V4
   \   00005B   85..83       MOV       DPH,?V5
   1187            }
   1188          }
   \                     ??afAPSF_ConfigGet_1:
   \   00005E   7F07         MOV       R7,#0x7
   \   000060   02....       LJMP      ?BANKED_LEAVE_XDATA
   1189          
   1190          /**************************************************************************************************
   1191           * @fn          afAPSF_ConfigSet
   1192           *
   1193           * @brief       This function attempts to set the fragmentation configuration that corresponds to
   1194           *              the specified EndPoint.
   1195           *
   1196           * input parameters
   1197           *
   1198           * @param       endPoint - The specific EndPoint for which to set the fragmentation configuration.
   1199           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1200           *
   1201           * output parameters
   1202           *
   1203           * None.
   1204           *
   1205           * @return      afStatus_SUCCESS for success.
   1206           *              afStatus_INVALID_PARAMETER if the specified EndPoint is not registered.
   1207           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1208          afStatus_t afAPSF_ConfigSet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigSet:
   1209          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
   1210            epList_t *pList = afFindEndPointDescList(endPoint);
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   A9..         MOV       R1,?V2
   \   00000D   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000010   8A..         MOV       ?V4,R2
   \   000012   8B..         MOV       ?V5,R3
   \   000014   85....       MOV       ?V0,?V4
   \   000017   85....       MOV       ?V1,?V5
   1211          
   1212            if (pList == NULL)
   \   00001A   E5..         MOV       A,?V0
   \   00001C   45..         ORL       A,?V1
   \   00001E   7004         JNZ       ??afAPSF_ConfigSet_0
   1213            {
   1214              return afStatus_INVALID_PARAMETER;
   \   000020   7902         MOV       R1,#0x2
   \   000022   802D         SJMP      ??afAPSF_ConfigSet_1
   1215            }
   1216          
   1217            (void)osal_memcpy(&pList->apsfCfg, pCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigSet_0:
   \   000024                ; Setup parameters for call to function osal_memcpy
   \   000024   8E..         MOV       ?V4,R6
   \   000026   8F..         MOV       ?V5,R7
   \   000028   75..00       MOV       ?V6,#0x0
   \   00002B   78..         MOV       R0,#?V4
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000030   7C02         MOV       R4,#0x2
   \   000032   7D00         MOV       R5,#0x0
   \   000034   E5..         MOV       A,?V0
   \   000036   2406         ADD       A,#0x6
   \   000038   FA           MOV       R2,A
   \   000039   E4           CLR       A
   \   00003A   35..         ADDC      A,?V1
   \   00003C   FB           MOV       R3,A
   \   00003D   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000040   7403         MOV       A,#0x3
   \   000042   12....       LCALL     ?DEALLOC_XSTACK8
   \   000045   8A..         MOV       ?V4,R2
   \   000047   8B..         MOV       ?V5,R3
   \   000049   85..82       MOV       DPL,?V4
   \   00004C   85..83       MOV       DPH,?V5
   1218            return afStatus_SUCCESS;
   \   00004F   7900         MOV       R1,#0x0
   \                     ??afAPSF_ConfigSet_1:
   \   000051   7F07         MOV       R7,#0x7
   \   000053   02....       LJMP      ?BANKED_LEAVE_XDATA
   1219          }
   1220          
   1221          /**************************************************************************************************
   1222           * @fn          afSetApplCB
   1223           *
   1224           * @brief       Sets the pointer to the Application Callback function for a
   1225           *              specific EndPoint.
   1226           *
   1227           * input parameters
   1228           *
   1229           * @param       endPoint - The specific EndPoint for which to set Application Callback.
   1230           * @param       pApplFn - A pointer to the Application Callback function.
   1231           *
   1232           * output parameters
   1233           *
   1234           * None.
   1235           *
   1236           * @return      TRUE if success, FALSE if endpoint not found
   1237           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1238          uint8 afSetApplCB( uint8 endPoint, pApplCB pApplFn )
   \                     afSetApplCB:
   1239          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
   1240            if ( pApplFn != NULL )
   \   00000B   EE           MOV       A,R6
   \   00000C   4F           ORL       A,R7
   \   00000D   602D         JZ        ??afSetApplCB_0
   1241            {
   1242              epList_t *epSearch;
   1243          
   1244              // Look for the endpoint
   1245              epSearch = afFindEndPointDescList( endPoint );
   \   00000F                ; Setup parameters for call to function afFindEndPointDescList
   \   00000F   A9..         MOV       R1,?V2
   \   000011   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000014   8A..         MOV       ?V4,R2
   \   000016   8B..         MOV       ?V5,R3
   \   000018   85....       MOV       ?V0,?V4
   \   00001B   85....       MOV       ?V1,?V5
   1246          
   1247              if ( epSearch )
   \   00001E   E5..         MOV       A,?V0
   \   000020   45..         ORL       A,?V1
   \   000022   6018         JZ        ??afSetApplCB_0
   1248              {
   1249                epSearch->pfnApplCB = pApplFn;
   \   000024   85..82       MOV       DPL,?V0
   \   000027   85..83       MOV       DPH,?V1
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   EE           MOV       A,R6
   \   000034   F0           MOVX      @DPTR,A
   \   000035   A3           INC       DPTR
   \   000036   EF           MOV       A,R7
   \   000037   F0           MOVX      @DPTR,A
   1250          
   1251                return ( TRUE );
   \   000038   7901         MOV       R1,#0x1
   \   00003A   8002         SJMP      ??afSetApplCB_1
   1252              }
   1253            }
   1254          
   1255            return ( FALSE );
   \                     ??afSetApplCB_0:
   \   00003C   7900         MOV       R1,#0x0
   \                     ??afSetApplCB_1:
   \   00003E   7F06         MOV       R7,#0x6
   \   000040   02....       LJMP      ?BANKED_LEAVE_XDATA
   1256          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AF_DataRequestDiscoverRoute>`:
   \   000000   01           DB 1
   1257          
   1258          /**************************************************************************************************
   1259          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     91   AF_DataRequest
        0     58   -> APSDE_DataReq
        0     58   -> INTERP_DataReq
        0     58   -> INTERP_DataReqMTU
        0     58   -> NLME_GetShortAddr
        0     58   -> NLME_IsAddressBroadcast
        0     58   -> RTG_CheckRtStatus
        0     58   -> StubAPS_InterPan
        0     58   -> afDataConfirm
        0     58   -> afDataReqMTU
        0     58   -> afFindEndPointDescList
        0     58   -> afGetDescCB
        0     58   -> osal_mem_free
        0     58   -> sAddrExtCpy
      0     45   AF_DataRequestSrcRtg
        0     33   -> AF_DataRequest
        0     24   -> RTG_AddSrcRtgEntry_Guaranteed
      0     18   afAPSF_ConfigGet
        0     15   -> afFindEndPointDescList
        0     18   -> osal_memcpy
      0     18   afAPSF_ConfigSet
        0     15   -> afFindEndPointDescList
        0     18   -> osal_memcpy
      1     71   afBuildMSGIncoming
        0     27   -> afCopyAddress
        0     30   -> osal_memcpy
        0     27   -> osal_msg_allocate
        0     27   -> osal_msg_send
      1     39   afCopyAddress
        0     12   -> sAddrExtCpy
      1     74   afDataConfirm
        0     16   -> afFindEndPointDesc
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      0     68   afDataReqMTU
        0     10   -> APSDE_DataReqMTU
      0     11   afDelete
        0     11   -> osal_mem_free
      1      9   afEndPoints
      0     41   afFindEndPointDesc
        0     12   -> afFindEndPointDescList
      2     58   afFindEndPointDescList
      0     14   afFindSimpleDesc
        0     14   -> afFindEndPointDescList
      2     58   afGetDescCB
      0     12   afGetMatch
        0     12   -> afFindEndPointDescList
      1     51   afIncomingData
        0     41   -> afBuildMSGIncoming
        0     29   -> afFindEndPointDesc
        0     29   -> afFindEndPointDescList
        0     29   -> aps_FindGroupForEndpoint
        0     29   -> osal_mem_free
      2      0   afNumEndPoints
      1     22   afReflectError
        0     20   -> afFindEndPointDesc
        0     20   -> osal_msg_allocate
        0     20   -> osal_msg_send
      0     12   afRegister
        0     10   -> afFindEndPointDescList
        0     12   -> afRegisterExtended
      1     29   afRegisterExtended
        0     17   -> bdb_zclFindingBindingEpType
        0     17   -> osal_mem_alloc
      0     14   afSetApplCB
        0     14   -> afFindEndPointDescList
      0     12   afSetMatch
        0     12   -> afFindEndPointDescList


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for AF_DataRequestDiscoverRoute>
    1219  AF_DataRequest
       1  AF_DataRequestDiscoverRoute
     199  AF_DataRequestSrcRtg
      99  afAPSF_ConfigGet
      86  afAPSF_ConfigSet
     699  afBuildMSGIncoming
     133  afCopyAddress
     128  afDataConfirm
      51  afDataReqMTU
     180  afDelete
      78  afEndPoints
      46  afFindEndPointDesc
      56  afFindEndPointDescList
     147  afFindSimpleDesc
      84  afGetDescCB
      56  afGetMatch
     794  afIncomingData
      41  afNumEndPoints
     179  afReflectError
      79  afRegister
     735  afRegisterExtended
      67  afSetApplCB
      75  afSetMatch
       2  epList
     132  -- Other

 
 5 231 bytes in segment BANKED_CODE
   132 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     2 bytes in segment XDATA_Z
 
   133 bytes of CODE     memory
 5 231 bytes of HUGECODE memory
     3 bytes of XDATA    memory

Errors: none
Warnings: none
