###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               05/Aug/2020  22:51:09
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack 3.0.2\Components\osal\common\OSAL_Clock.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW43F7.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\osal\common\OSAL_Clock.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D POWER_SAVING -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_GROUPS -D BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=0
#        -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0 -DREJOIN_POLL_RATE=0
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\OSAL_Clock.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\OSAL_Clock.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\osal\common\OSAL_Clock.c
      1          /******************************************************************************
      2            Filename:       OSAL_Clock.c
      3            Revised:        $Date: 2014-06-30 16:38:56 -0700 (Mon, 30 Jun 2014) $
      4            Revision:       $Revision: 39297 $
      5          
      6            Description:    OSAL Clock definition and manipulation functions.
      7          
      8            Copyright 2008-2014 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License"). You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product. Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          ******************************************************************************/
     38          
     39          /*********************************************************************
     40           * INCLUDES
     41           */
     42          
     43          #include "comdef.h"
     44          #include "hal_board.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     45          #include "OnBoard.h"
     46          #include "OSAL.h"
     47          #include "OSAL_Clock.h"
     48          
     49          /*********************************************************************
     50           * MACROS
     51           */
     52          
     53          #define	YearLength(yr)	((uint16)(IsLeapYear(yr) ? 366 : 365))
     54          
     55          /*********************************************************************
     56           * CONSTANTS
     57           */
     58          
     59          #define	BEGYEAR  2000     //  UTC started at 00:00:00 January 1, 2000
     60          
     61          #define	DAY      86400UL  // 24 hours * 60 minutes * 60 seconds
     62          
     63          /* Check Below for an explanation */
     64          #define COUNTER_TICK320US 204775UL 
     65          
     66          /* converted COUNTER_TICK320US from 320us ticks to ms */
     67          #define COUNTER_ELAPSEDMS 65528UL   
     68          
     69          /* 
     70           * Each tick is 320us so a value greater than 3 implies 
     71           * that atleast one millisecond has elapsed 320us*4 > 1 ms 
     72           */
     73          #define TIMER_CLOCK_UPDATE 4 
     74                                            
     75          /*********************************************************************
     76           * TYPEDEFS
     77           */
     78          
     79          /*********************************************************************
     80           * GLOBAL VARIABLES
     81           */
     82          
     83          /*********************************************************************
     84           * EXTERNAL VARIABLES
     85           */
     86          
     87          /*********************************************************************
     88           * EXTERNAL FUNCTIONS
     89           */
     90          extern uint32 macMcuPrecisionCount(void);
     91          
     92          #if (defined HAL_MCU_CC2430) || (defined HAL_MCU_CC2530) || (defined HAL_MCU_CC2533)
     93          
     94            /*  This function is used to divide a 31 bit dividend by a 16 bit
     95             *  divisor and return a packed 16 bit quotient and 16 bit
     96             *  remainder.
     97             *
     98             *  Note: This routine takes ~25.6us @32MHz. With C overhead, the
     99             *        time is ~32us.
    100             *
    101             *  dividend - 31 bit dividend.
    102             *  divisor - 16 bit divisor.
    103             *
    104             *  return - MSW divisor; LSW quotient
    105             */
    106            extern __near_func uint32 osalMcuDivide31By16To16( uint32 dividend, uint16 divisor );
    107          
    108            #define CONVERT_320US_TO_MS_ELAPSED_REMAINDER( x, y, z ) st( \
    109                                                                         \
    110              /* The 16 bit quotient is in MSW and */                    \
    111              /* the 16 bit remainder is in LSW. */                      \
    112              x = osalMcuDivide31By16To16( x, 25 );                      \
    113                                                                         \
    114              /* Add quotient to y */                                    \
    115              y += (x >> 16);                                            \
    116                                                                         \
    117              /* Copy remainder to z */                                  \
    118              z = (uint16)(x & 0x0FFFF);                                 \
    119            )
    120            
    121            #define CONVERT_MS_TO_S_ELAPSED_REMAINDER( x, y, z ) st(     \
    122                                                                         \
    123              /* The 16 bit quotient is in MSW and */                    \
    124              /* the 16 bit remainder is in LSW. */                      \
    125              x = osalMcuDivide31By16To16( x, 1000 );                    \
    126                                                                         \
    127              /* Add quotient to y */                                    \
    128              y += (x >> 16);                                            \
    129                                                                         \
    130              /* Copy remainder to z */                                  \
    131              z = (uint16)(x & 0x0FFFF);                                 \
    132            )
    133          
    134          #else /* (defined HAL_MCU_CC2430) || (defined HAL_MCU_CC2530) || (defined HAL_MCU_CC2533) */
    135          
    136            #define CONVERT_320US_TO_MS_ELAPSED_REMAINDER( x, y, z ) st( \
    137              y += x / 25;                                               \
    138              z = x % 25;                                                \
    139            )
    140            
    141            #define CONVERT_MS_TO_S_ELAPSED_REMAINDER( x, y, z ) st(     \
    142              y += x / 1000;                                             \
    143              z = x % 1000;                                              \
    144            )
    145          #endif /* (defined HAL_MCU_CC2430) || (defined HAL_MCU_CC2530) || (defined HAL_MCU_CC2533) */
    146          
    147          /*********************************************************************
    148           * LOCAL VARIABLES
    149           */
    150          #ifndef USE_ICALL

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151            static uint32 previousMacTimerTick = 0;
   \                     previousMacTimerTick:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152            static uint16 remUsTicks = 0;
   \                     remUsTicks:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    153          #endif /* !USE_ICALL */
    154            

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          static uint32 timeMSec = 0;
   \                     timeMSec:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    156          
    157          // number of seconds since 0 hrs, 0 minutes, 0 seconds, on the
    158          // 1st of January 2000 UTC

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          UTCTime OSAL_timeSeconds = 0;
   \                     OSAL_timeSeconds:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    160          
    161          /*********************************************************************
    162           * LOCAL FUNCTION PROTOTYPES
    163           */
    164          static uint8 monthLength( uint8 lpyr, uint8 mon );
    165          
    166          static void osalClockUpdate( uint32 elapsedMSec );
    167          
    168          /*********************************************************************
    169           * FUNCTIONS
    170           *********************************************************************/
    171          
    172          /*********************************************************************
    173           * @fn      osalTimeUpdate
    174           *
    175           * @brief   Uses the free running rollover count of the MAC backoff timer;
    176           *          this timer runs freely with a constant 320 usec interval.  The
    177           *          count of 320-usec ticks is converted to msecs and used to update
    178           *          the OSAL clock and Timers by invoking osalClockUpdate() and
    179           *          osalTimerUpdate().  This function is intended to be invoked
    180           *          from the background, not interrupt level.
    181           *
    182           * @param   None.
    183           *
    184           * @return  None.
    185           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    186          void osalTimeUpdate( void )
   \                     osalTimeUpdate:
    187          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    188          #ifndef USE_ICALL
    189            /* Note that when ICall is in use the OSAL tick is not updated
    190             * in this fashion but rather through real OS timer tick. */
    191            halIntState_t intState;
    192            uint32 tmp;
    193            uint32 ticks320us;
    194            uint32 elapsedMSec = 0;
   \   00000A   75..00       MOV       ?V8,#0x0
   \   00000D   75..00       MOV       ?V9,#0x0
   \   000010   75..00       MOV       ?V10,#0x0
   \   000013   75..00       MOV       ?V11,#0x0
    195          
    196            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000016   A2AF         MOV       C,0xa8.7
   \   000018   E4           CLR       A
   \   000019   33           RLC       A
   \   00001A   FE           MOV       R6,A
   \   00001B   C2AF         CLR       0xa8.7
    197            // Get the free-running count of 320us timer ticks
    198            tmp = macMcuPrecisionCount();
   \   00001D                ; Setup parameters for call to function macMcuPrecisionCount
   \   00001D   12....       LCALL     `??macMcuPrecisionCount::?relay`; Banked call to: macMcuPrecisionCount
   \   000020   8A..         MOV       ?V0,R2
   \   000022   8B..         MOV       ?V1,R3
   \   000024   8C..         MOV       ?V2,R4
   \   000026   8D..         MOV       ?V3,R5
   \   000028   85....       MOV       ?V4,?V0
   \   00002B   85....       MOV       ?V5,?V1
   \   00002E   85....       MOV       ?V6,?V2
   \   000031   85....       MOV       ?V7,?V3
    199            HAL_EXIT_CRITICAL_SECTION(intState);
   \   000034   EE           MOV       A,R6
   \   000035   A2E0         MOV       C,0xE0 /* A   */.0
   \   000037   92AF         MOV       0xa8.7,C
    200            
    201            if ( tmp != previousMacTimerTick )
   \   000039   90....       MOV       DPTR,#previousMacTimerTick
   \   00003C   78..         MOV       R0,#?V4
   \   00003E   12....       LCALL     ?L_EQ_X
   \   000041   7003         JNZ       $+5
   \   000043   02....       LJMP      ??osalTimeUpdate_0 & 0xFFFF
    202            {
    203              // Calculate the elapsed ticks of the free-running timer.
    204              ticks320us = (tmp - previousMacTimerTick) & 0xffffffffu;
   \   000046   85....       MOV       ?V0,?V4
   \   000049   85....       MOV       ?V1,?V5
   \   00004C   85....       MOV       ?V2,?V6
   \   00004F   85....       MOV       ?V3,?V7
   \   000052   90....       MOV       DPTR,#previousMacTimerTick
   \   000055   78..         MOV       R0,#?V0
   \   000057   12....       LCALL     ?L_SUB_X
   \   00005A   85..82       MOV       DPL,?XSP + 0
   \   00005D   85..83       MOV       DPH,?XSP + 1
   \   000060   78..         MOV       R0,#?V0
   \   000062   12....       LCALL     ?L_MOV_TO_X
    205          
    206              if (ticks320us >= TIMER_CLOCK_UPDATE )
   \   000065   90....       MOV       DPTR,#__Constant_4
   \   000068   78..         MOV       R0,#?V0
   \   00006A   12....       LCALL     ?L_MOV_X
   \   00006D   85..82       MOV       DPL,?XSP + 0
   \   000070   85..83       MOV       DPH,?XSP + 1
   \   000073   78..         MOV       R0,#?V0
   \   000075   12....       LCALL     ?UL_GT_X
   \   000078   5003         JNC       $+5
   \   00007A   02....       LJMP      ??osalTimeUpdate_0 & 0xFFFF
    207              {
    208                // Store the MAC Timer tick count for the next time through this function.
    209                previousMacTimerTick = tmp;
   \   00007D   90....       MOV       DPTR,#previousMacTimerTick
   \   000080   78..         MOV       R0,#?V4
   \   000082   12....       LCALL     ?L_MOV_TO_X
    210                
    211                /*
    212                 * remUsTicks can have a maximum value of 24 (Since remusTicks got by mod 
    213                 * of 25). The value of COUNTER_TICK320US is a multiple of 25 and the 
    214                 * quotient of  CONVERT_320US_TO_MS_ELAPSED_REMAINDER() does not exceed 
    215                 * 0xFFFF or 16 bit.
    216                 */
    217                while(ticks320us >= COUNTER_TICK320US)
   \                     ??osalTimeUpdate_1:
   \   000085   90....       MOV       DPTR,#__Constant_31fe7
   \   000088   78..         MOV       R0,#?V0
   \   00008A   12....       LCALL     ?L_MOV_X
   \   00008D   85..82       MOV       DPL,?XSP + 0
   \   000090   85..83       MOV       DPH,?XSP + 1
   \   000093   78..         MOV       R0,#?V0
   \   000095   12....       LCALL     ?UL_GT_X
   \   000098   401D         JC        ??osalTimeUpdate_2
    218                {
    219                  ticks320us  -= COUNTER_TICK320US;
   \   00009A   90....       MOV       DPTR,#__Constant_fffce019
   \   00009D   78..         MOV       R0,#?V0
   \   00009F   12....       LCALL     ?L_MOV_X
   \   0000A2   85..82       MOV       DPL,?XSP + 0
   \   0000A5   85..83       MOV       DPH,?XSP + 1
   \   0000A8   78..         MOV       R0,#?V0
   \   0000AA   12....       LCALL     ?L_ADD_TO_X
    220                  elapsedMSec += COUNTER_ELAPSEDMS;
   \   0000AD   90....       MOV       DPTR,#__Constant_fff8
   \   0000B0   78..         MOV       R0,#?V8
   \   0000B2   12....       LCALL     ?L_ADD_X
   \   0000B5   80CE         SJMP      ??osalTimeUpdate_1
    221                }
    222              
    223                // update converted number with remaining ticks from loop and the
    224                // accumulated remainder from loop
    225                tmp = (ticks320us * 8) + remUsTicks;
   \                     ??osalTimeUpdate_2:
   \   0000B7   85..82       MOV       DPL,?XSP + 0
   \   0000BA   85..83       MOV       DPH,?XSP + 1
   \   0000BD   78..         MOV       R0,#?V0
   \   0000BF   12....       LCALL     ?L_MOV_X
   \   0000C2   90....       MOV       DPTR,#__Constant_8
   \   0000C5   78..         MOV       R0,#?V12
   \   0000C7   12....       LCALL     ?L_MOV_X
   \   0000CA   78..         MOV       R0,#?V0
   \   0000CC   79..         MOV       R1,#?V12
   \   0000CE   12....       LCALL     ?L_MUL
   \   0000D1   90....       MOV       DPTR,#remUsTicks
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   F5..         MOV       ?V12,A
   \   0000D7   A3           INC       DPTR
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   F5..         MOV       ?V13,A
   \   0000DB   E4           CLR       A
   \   0000DC   F5..         MOV       ?V14,A
   \   0000DE   F5..         MOV       ?V15,A
   \   0000E0   78..         MOV       R0,#?V0
   \   0000E2   79..         MOV       R1,#?V12
   \   0000E4   12....       LCALL     ?L_ADD
   \   0000E7   85....       MOV       ?V4,?V0
   \   0000EA   85....       MOV       ?V5,?V1
   \   0000ED   85....       MOV       ?V6,?V2
   \   0000F0   85....       MOV       ?V7,?V3
    226          
    227                // Convert the 320 us ticks into milliseconds and a remainder
    228                CONVERT_320US_TO_MS_ELAPSED_REMAINDER( tmp, elapsedMSec, remUsTicks );
   \   0000F3                ; Setup parameters for call to function osalMcuDivide31By16To16
   \   0000F3   75..19       MOV       ?V0,#0x19
   \   0000F6   75..00       MOV       ?V1,#0x0
   \   0000F9   78..         MOV       R0,#?V0
   \   0000FB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FE   AA..         MOV       R2,?V4
   \   000100   AB..         MOV       R3,?V5
   \   000102   AC..         MOV       R4,?V6
   \   000104   AD..         MOV       R5,?V7
   \   000106   12....       LCALL     osalMcuDivide31By16To16 & 0xFFFF
   \   000109   7402         MOV       A,#0x2
   \   00010B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00010E   8A..         MOV       ?V0,R2
   \   000110   8B..         MOV       ?V1,R3
   \   000112   8C..         MOV       ?V2,R4
   \   000114   8D..         MOV       ?V3,R5
   \   000116   85....       MOV       ?V4,?V0
   \   000119   85....       MOV       ?V5,?V1
   \   00011C   85....       MOV       ?V6,?V2
   \   00011F   85....       MOV       ?V7,?V3
   \   000122   85....       MOV       ?V0,?V4
   \   000125   85....       MOV       ?V1,?V5
   \   000128   85....       MOV       ?V2,?V6
   \   00012B   85....       MOV       ?V3,?V7
   \   00012E   7410         MOV       A,#0x10
   \   000130   78..         MOV       R0,#?V0
   \   000132   12....       LCALL     ?UL_SHR
   \   000135   78..         MOV       R0,#?V8
   \   000137   79..         MOV       R1,#?V0
   \   000139   12....       LCALL     ?L_ADD
   \   00013C   A8..         MOV       R0,?V4
   \   00013E   A9..         MOV       R1,?V5
   \   000140   90....       MOV       DPTR,#remUsTicks
   \   000143   E8           MOV       A,R0
   \   000144   F0           MOVX      @DPTR,A
   \   000145   A3           INC       DPTR
   \   000146   E9           MOV       A,R1
   \   000147   F0           MOVX      @DPTR,A
    229                
    230                // Update OSAL Clock and Timers
    231                osalClockUpdate( elapsedMSec );
   \   000148                ; Setup parameters for call to function osalClockUpdate
   \   000148   AA..         MOV       R2,?V8
   \   00014A   AB..         MOV       R3,?V9
   \   00014C   AC..         MOV       R4,?V10
   \   00014E   AD..         MOV       R5,?V11
   \   000150   12....       LCALL     `??osalClockUpdate::?relay`; Banked call to: osalClockUpdate
    232                osalTimerUpdate( elapsedMSec );
   \   000153                ; Setup parameters for call to function osalTimerUpdate
   \   000153   AA..         MOV       R2,?V8
   \   000155   AB..         MOV       R3,?V9
   \   000157   AC..         MOV       R4,?V10
   \   000159   AD..         MOV       R5,?V11
   \   00015B   12....       LCALL     `??osalTimerUpdate::?relay`; Banked call to: osalTimerUpdate
    233              }
    234            }
    235          #endif /* USE_ICALL */
    236          }
   \                     ??osalTimeUpdate_0:
   \   00015E   7404         MOV       A,#0x4
   \   000160   12....       LCALL     ?DEALLOC_XSTACK8
   \   000163   7F10         MOV       R7,#0x10
   \   000165   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000168                REQUIRE _A_IEN0
    237          
    238          /*********************************************************************
    239           * @fn      osalClockUpdate
    240           *
    241           * @brief   Updates the OSAL Clock time with elapsed milliseconds.
    242           *
    243           * @param   elapsedMSec - elapsed milliseconds
    244           *
    245           * @return  none
    246           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    247          static void osalClockUpdate( uint32 elapsedMSec )
   \                     osalClockUpdate:
    248          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   \   000009   8C..         MOV       ?V6,R4
   \   00000B   8D..         MOV       ?V7,R5
    249            uint32 tmp;
    250            halIntState_t intState;
    251            
    252            HAL_ENTER_CRITICAL_SECTION(intState);
   \   00000D   A2AF         MOV       C,0xa8.7
   \   00000F   E4           CLR       A
   \   000010   33           RLC       A
   \   000011   FE           MOV       R6,A
   \   000012   C2AF         CLR       0xa8.7
    253            // Add elapsed milliseconds to the saved millisecond portion of time
    254            timeMSec += elapsedMSec;
   \   000014   90....       MOV       DPTR,#timeMSec
   \   000017   78..         MOV       R0,#?V4
   \   000019   12....       LCALL     ?L_ADD_TO_X
    255          
    256            // Roll up milliseconds to the number of seconds
    257            if ( timeMSec >= 1000 )
   \   00001C   90....       MOV       DPTR,#__Constant_3e8
   \   00001F   78..         MOV       R0,#?V0
   \   000021   12....       LCALL     ?L_MOV_X
   \   000024   90....       MOV       DPTR,#timeMSec
   \   000027   78..         MOV       R0,#?V0
   \   000029   12....       LCALL     ?UL_GT_X
   \   00002C   4071         JC        ??osalClockUpdate_0
    258            {
    259              tmp = timeMSec;
   \   00002E   90....       MOV       DPTR,#timeMSec
   \   000031   78..         MOV       R0,#?V0
   \   000033   12....       LCALL     ?L_MOV_X
   \   000036   85....       MOV       ?V8,?V0
   \   000039   85....       MOV       ?V9,?V1
   \   00003C   85....       MOV       ?V10,?V2
   \   00003F   85....       MOV       ?V11,?V3
    260              CONVERT_MS_TO_S_ELAPSED_REMAINDER(tmp, OSAL_timeSeconds, timeMSec);
   \   000042                ; Setup parameters for call to function osalMcuDivide31By16To16
   \   000042   75..E8       MOV       ?V0,#-0x18
   \   000045   75..03       MOV       ?V1,#0x3
   \   000048   78..         MOV       R0,#?V0
   \   00004A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004D   AA..         MOV       R2,?V8
   \   00004F   AB..         MOV       R3,?V9
   \   000051   AC..         MOV       R4,?V10
   \   000053   AD..         MOV       R5,?V11
   \   000055   12....       LCALL     osalMcuDivide31By16To16 & 0xFFFF
   \   000058   7402         MOV       A,#0x2
   \   00005A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005D   8A..         MOV       ?V0,R2
   \   00005F   8B..         MOV       ?V1,R3
   \   000061   8C..         MOV       ?V2,R4
   \   000063   8D..         MOV       ?V3,R5
   \   000065   85....       MOV       ?V8,?V0
   \   000068   85....       MOV       ?V9,?V1
   \   00006B   85....       MOV       ?V10,?V2
   \   00006E   85....       MOV       ?V11,?V3
   \   000071   85....       MOV       ?V0,?V8
   \   000074   85....       MOV       ?V1,?V9
   \   000077   85....       MOV       ?V2,?V10
   \   00007A   85....       MOV       ?V3,?V11
   \   00007D   7410         MOV       A,#0x10
   \   00007F   78..         MOV       R0,#?V0
   \   000081   12....       LCALL     ?UL_SHR
   \   000084   90....       MOV       DPTR,#OSAL_timeSeconds
   \   000087   78..         MOV       R0,#?V0
   \   000089   12....       LCALL     ?L_ADD_TO_X
   \   00008C   85....       MOV       ?V0,?V8
   \   00008F   85....       MOV       ?V1,?V9
   \   000092   A8..         MOV       R0,?V0
   \   000094   A9..         MOV       R1,?V1
   \   000096   E4           CLR       A
   \   000097   FA           MOV       R2,A
   \   000098   FB           MOV       R3,A
   \   000099   90....       MOV       DPTR,#timeMSec
   \   00009C   12....       LCALL     ?XSTORE_R0123
    261            }
    262            HAL_EXIT_CRITICAL_SECTION(intState);
   \                     ??osalClockUpdate_0:
   \   00009F   EE           MOV       A,R6
   \   0000A0   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000A2   92AF         MOV       0xa8.7,C
    263          }
   \   0000A4   7F0C         MOV       R7,#0xc
   \   0000A6   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   0000A9                REQUIRE _A_IEN0
    264          
    265          #if defined HAL_BOARD_CC2538 || defined USE_ICALL
    266          /*********************************************************************
    267           * @fn      osalAdjustTimer
    268           *
    269           * @brief   Updates the OSAL Clock and Timer with elapsed milliseconds.
    270           *
    271           * @param   MSec - elapsed milliseconds
    272           *
    273           * @return  none
    274           */
    275          void osalAdjustTimer(uint32 Msec )
    276          {
    277            /* Disable SysTick interrupts */ 
    278            SysTickIntDisable(); 
    279            
    280            osalClockUpdate(Msec);
    281            osalTimerUpdate(Msec);
    282            
    283            /* Enable SysTick interrupts */ 
    284            SysTickIntEnable(); 
    285          }
    286          #endif /* HAL_BOARD_CC2538 || USE_ICALL */
    287          
    288          /*********************************************************************
    289           * @fn      osal_setClock
    290           *
    291           * @brief   Set the new time.  This will only set the seconds portion
    292           *          of time and doesn't change the factional second counter.
    293           *
    294           * @param   newTime - number of seconds since 0 hrs, 0 minutes,
    295           *                    0 seconds, on the 1st of January 2000 UTC
    296           *
    297           * @return  none
    298           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    299          void osal_setClock( UTCTime newTime )
   \                     osal_setClock:
    300          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
    301            HAL_CRITICAL_STATEMENT(OSAL_timeSeconds = newTime);
   \   00000D   A2AF         MOV       C,0xa8.7
   \   00000F   E4           CLR       A
   \   000010   33           RLC       A
   \   000011   F9           MOV       R1,A
   \   000012   C2AF         CLR       0xa8.7
   \   000014   90....       MOV       DPTR,#OSAL_timeSeconds
   \   000017   78..         MOV       R0,#?V0
   \   000019   12....       LCALL     ?L_MOV_TO_X
   \   00001C   E9           MOV       A,R1
   \   00001D   A2E0         MOV       C,0xE0 /* A   */.0
   \   00001F   92AF         MOV       0xa8.7,C
    302          }
   \   000021   7F04         MOV       R7,#0x4
   \   000023   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000026                REQUIRE _A_IEN0
    303          
    304          /*********************************************************************
    305           * @fn      osal_getClock
    306           *
    307           * @brief   Gets the current time.  This will only return the seconds
    308           *          portion of time and doesn't include the factional second
    309           *          counter.
    310           *
    311           * @param   none
    312           *
    313           * @return  number of seconds since 0 hrs, 0 minutes, 0 seconds,
    314           *          on the 1st of January 2000 UTC
    315           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    316          UTCTime osal_getClock( void )
   \                     osal_getClock:
    317          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    318            return ( OSAL_timeSeconds );
   \   000004   90....       MOV       DPTR,#OSAL_timeSeconds
   \   000007   12....       LCALL     ?XLOAD_R2345
   \   00000A   D083         POP       DPH
   \   00000C   D082         POP       DPL
   \   00000E   02....       LJMP      ?BRET
    319          }
    320          
    321          /*********************************************************************
    322           * @fn      osal_ConvertUTCTime
    323           *
    324           * @brief   Converts UTCTime to UTCTimeStruct
    325           *
    326           * @param   tm - pointer to breakdown struct
    327           *
    328           * @param   secTime - number of seconds since 0 hrs, 0 minutes,
    329           *          0 seconds, on the 1st of January 2000 UTC
    330           *
    331           * @return  none
    332           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    333          void osal_ConvertUTCTime( UTCTimeStruct *tm, UTCTime secTime )
   \                     osal_ConvertUTCTime:
    334          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   7418         MOV       A,#0x18
   \   00000B   12....       LCALL     ?XSTACK_DISP0_8
   \   00000E   78..         MOV       R0,#?V4
   \   000010   12....       LCALL     ?L_MOV_X
    335            // calculate the time less than a day - hours, minutes, seconds
    336            {
    337              uint32 day = secTime % DAY;
   \   000013   85....       MOV       ?V0,?V4
   \   000016   85....       MOV       ?V1,?V5
   \   000019   85....       MOV       ?V2,?V6
   \   00001C   85....       MOV       ?V3,?V7
   \   00001F   90....       MOV       DPTR,#__Constant_15180
   \   000022   78..         MOV       R0,#?V8
   \   000024   12....       LCALL     ?L_MOV_X
   \   000027   78..         MOV       R0,#?V0
   \   000029   79..         MOV       R1,#?V8
   \   00002B   12....       LCALL     ?UL_DIV_MOD
    338              tm->seconds = day % 60UL;
   \   00002E   85....       MOV       ?V0,?V8
   \   000031   85....       MOV       ?V1,?V9
   \   000034   85....       MOV       ?V2,?V10
   \   000037   85....       MOV       ?V3,?V11
   \   00003A   90....       MOV       DPTR,#__Constant_3c
   \   00003D   78..         MOV       R0,#?V12
   \   00003F   12....       LCALL     ?L_MOV_X
   \   000042   78..         MOV       R0,#?V0
   \   000044   79..         MOV       R1,#?V12
   \   000046   12....       LCALL     ?UL_DIV_MOD
   \   000049   E5..         MOV       A,?V12
   \   00004B   C0E0         PUSH      A
   \   00004D   8E82         MOV       DPL,R6
   \   00004F   8F83         MOV       DPH,R7
   \   000051   D0E0         POP       A
   \   000053   F0           MOVX      @DPTR,A
    339              tm->minutes = (day % 3600UL) / 60UL;
   \   000054   85....       MOV       ?V12,?V8
   \   000057   85....       MOV       ?V13,?V9
   \   00005A   85....       MOV       ?V14,?V10
   \   00005D   85....       MOV       ?V15,?V11
   \   000060   90....       MOV       DPTR,#__Constant_e10
   \   000063   78..         MOV       R0,#?V0
   \   000065   12....       LCALL     ?L_MOV_X
   \   000068   78..         MOV       R0,#?V12
   \   00006A   79..         MOV       R1,#?V0
   \   00006C   12....       LCALL     ?UL_DIV_MOD
   \   00006F   90....       MOV       DPTR,#__Constant_3c
   \   000072   78..         MOV       R0,#?V12
   \   000074   12....       LCALL     ?L_MOV_X
   \   000077   78..         MOV       R0,#?V0
   \   000079   79..         MOV       R1,#?V12
   \   00007B   12....       LCALL     ?UL_DIV_MOD
   \   00007E   E5..         MOV       A,?V0
   \   000080   C0E0         PUSH      A
   \   000082   8E82         MOV       DPL,R6
   \   000084   8F83         MOV       DPH,R7
   \   000086   A3           INC       DPTR
   \   000087   D0E0         POP       A
   \   000089   F0           MOVX      @DPTR,A
    340              tm->hour = day / 3600UL;
   \   00008A   90....       MOV       DPTR,#__Constant_e10
   \   00008D   78..         MOV       R0,#?V0
   \   00008F   12....       LCALL     ?L_MOV_X
   \   000092   78..         MOV       R0,#?V8
   \   000094   79..         MOV       R1,#?V0
   \   000096   12....       LCALL     ?UL_DIV_MOD
   \   000099   E5..         MOV       A,?V8
   \   00009B   C0E0         PUSH      A
   \   00009D   8E82         MOV       DPL,R6
   \   00009F   8F83         MOV       DPH,R7
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   D0E0         POP       A
   \   0000A5   F0           MOVX      @DPTR,A
    341            }
    342          
    343            // Fill in the calendar - day, month, year
    344            {
    345              uint16 numDays = secTime / DAY;
   \   0000A6   85....       MOV       ?V0,?V4
   \   0000A9   85....       MOV       ?V1,?V5
   \   0000AC   85....       MOV       ?V2,?V6
   \   0000AF   85....       MOV       ?V3,?V7
   \   0000B2   90....       MOV       DPTR,#__Constant_15180
   \   0000B5   78..         MOV       R0,#?V8
   \   0000B7   12....       LCALL     ?L_MOV_X
   \   0000BA   78..         MOV       R0,#?V0
   \   0000BC   79..         MOV       R1,#?V8
   \   0000BE   12....       LCALL     ?UL_DIV_MOD
   \   0000C1   85....       MOV       ?V2,?V0
   \   0000C4   85....       MOV       ?V3,?V1
   \   0000C7   85....       MOV       ?V0,?V2
   \   0000CA   85....       MOV       ?V1,?V3
    346              tm->year = BEGYEAR;
   \   0000CD   8E82         MOV       DPL,R6
   \   0000CF   8F83         MOV       DPH,R7
   \   0000D1   A3           INC       DPTR
   \   0000D2   A3           INC       DPTR
   \   0000D3   A3           INC       DPTR
   \   0000D4   A3           INC       DPTR
   \   0000D5   A3           INC       DPTR
   \   0000D6   74D0         MOV       A,#-0x30
   \   0000D8   F0           MOVX      @DPTR,A
   \   0000D9   A3           INC       DPTR
   \   0000DA   7407         MOV       A,#0x7
   \   0000DC   F0           MOVX      @DPTR,A
    347              while ( numDays >= YearLength( tm->year ) )
   \                     ??osal_ConvertUTCTime_0:
   \   0000DD   8E82         MOV       DPL,R6
   \   0000DF   8F83         MOV       DPH,R7
   \   0000E1   A3           INC       DPTR
   \   0000E2   A3           INC       DPTR
   \   0000E3   A3           INC       DPTR
   \   0000E4   A3           INC       DPTR
   \   0000E5   A3           INC       DPTR
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   F8           MOV       R0,A
   \   0000E8   A3           INC       DPTR
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   F9           MOV       R1,A
   \   0000EB   7A90         MOV       R2,#-0x70
   \   0000ED   7B01         MOV       R3,#0x1
   \   0000EF   12....       LCALL     ?US_DIV_MOD
   \   0000F2   8A..         MOV       ?V2,R2
   \   0000F4   8B..         MOV       ?V3,R3
   \   0000F6   E5..         MOV       A,?V2
   \   0000F8   45..         ORL       A,?V3
   \   0000FA   6032         JZ        ??osal_ConvertUTCTime_1
   \   0000FC   8E82         MOV       DPL,R6
   \   0000FE   8F83         MOV       DPH,R7
   \   000100   A3           INC       DPTR
   \   000101   A3           INC       DPTR
   \   000102   A3           INC       DPTR
   \   000103   A3           INC       DPTR
   \   000104   A3           INC       DPTR
   \   000105   E0           MOVX      A,@DPTR
   \   000106   F8           MOV       R0,A
   \   000107   A3           INC       DPTR
   \   000108   E0           MOVX      A,@DPTR
   \   000109   F9           MOV       R1,A
   \   00010A   7A64         MOV       R2,#0x64
   \   00010C   7B00         MOV       R3,#0x0
   \   00010E   12....       LCALL     ?US_DIV_MOD
   \   000111   8A..         MOV       ?V2,R2
   \   000113   8B..         MOV       ?V3,R3
   \   000115   E5..         MOV       A,?V2
   \   000117   45..         ORL       A,?V3
   \   000119   6019         JZ        ??osal_ConvertUTCTime_2
   \   00011B   8E82         MOV       DPL,R6
   \   00011D   8F83         MOV       DPH,R7
   \   00011F   A3           INC       DPTR
   \   000120   A3           INC       DPTR
   \   000121   A3           INC       DPTR
   \   000122   A3           INC       DPTR
   \   000123   A3           INC       DPTR
   \   000124   E0           MOVX      A,@DPTR
   \   000125   F8           MOV       R0,A
   \   000126   A3           INC       DPTR
   \   000127   E0           MOVX      A,@DPTR
   \   000128   F9           MOV       R1,A
   \   000129   E8           MOV       A,R0
   \   00012A   5403         ANL       A,#0x3
   \   00012C   7006         JNZ       ??osal_ConvertUTCTime_2
   \                     ??osal_ConvertUTCTime_1:
   \   00012E   786E         MOV       R0,#0x6e
   \   000130   7901         MOV       R1,#0x1
   \   000132   8004         SJMP      ??osal_ConvertUTCTime_3
   \                     ??osal_ConvertUTCTime_2:
   \   000134   786D         MOV       R0,#0x6d
   \   000136   7901         MOV       R1,#0x1
   \                     ??osal_ConvertUTCTime_3:
   \   000138   C3           CLR       C
   \   000139   E5..         MOV       A,?V0
   \   00013B   98           SUBB      A,R0
   \   00013C   E5..         MOV       A,?V1
   \   00013E   99           SUBB      A,R1
   \   00013F   407B         JC        ??osal_ConvertUTCTime_4
    348              {
    349                numDays -= YearLength( tm->year );
   \   000141   8E82         MOV       DPL,R6
   \   000143   8F83         MOV       DPH,R7
   \   000145   A3           INC       DPTR
   \   000146   A3           INC       DPTR
   \   000147   A3           INC       DPTR
   \   000148   A3           INC       DPTR
   \   000149   A3           INC       DPTR
   \   00014A   E0           MOVX      A,@DPTR
   \   00014B   F8           MOV       R0,A
   \   00014C   A3           INC       DPTR
   \   00014D   E0           MOVX      A,@DPTR
   \   00014E   F9           MOV       R1,A
   \   00014F   7A90         MOV       R2,#-0x70
   \   000151   7B01         MOV       R3,#0x1
   \   000153   12....       LCALL     ?US_DIV_MOD
   \   000156   8A..         MOV       ?V2,R2
   \   000158   8B..         MOV       ?V3,R3
   \   00015A   E5..         MOV       A,?V2
   \   00015C   45..         ORL       A,?V3
   \   00015E   6032         JZ        ??osal_ConvertUTCTime_5
   \   000160   8E82         MOV       DPL,R6
   \   000162   8F83         MOV       DPH,R7
   \   000164   A3           INC       DPTR
   \   000165   A3           INC       DPTR
   \   000166   A3           INC       DPTR
   \   000167   A3           INC       DPTR
   \   000168   A3           INC       DPTR
   \   000169   E0           MOVX      A,@DPTR
   \   00016A   F8           MOV       R0,A
   \   00016B   A3           INC       DPTR
   \   00016C   E0           MOVX      A,@DPTR
   \   00016D   F9           MOV       R1,A
   \   00016E   7A64         MOV       R2,#0x64
   \   000170   7B00         MOV       R3,#0x0
   \   000172   12....       LCALL     ?US_DIV_MOD
   \   000175   8A..         MOV       ?V2,R2
   \   000177   8B..         MOV       ?V3,R3
   \   000179   E5..         MOV       A,?V2
   \   00017B   45..         ORL       A,?V3
   \   00017D   6019         JZ        ??osal_ConvertUTCTime_6
   \   00017F   8E82         MOV       DPL,R6
   \   000181   8F83         MOV       DPH,R7
   \   000183   A3           INC       DPTR
   \   000184   A3           INC       DPTR
   \   000185   A3           INC       DPTR
   \   000186   A3           INC       DPTR
   \   000187   A3           INC       DPTR
   \   000188   E0           MOVX      A,@DPTR
   \   000189   F8           MOV       R0,A
   \   00018A   A3           INC       DPTR
   \   00018B   E0           MOVX      A,@DPTR
   \   00018C   F9           MOV       R1,A
   \   00018D   E8           MOV       A,R0
   \   00018E   5403         ANL       A,#0x3
   \   000190   7006         JNZ       ??osal_ConvertUTCTime_6
   \                     ??osal_ConvertUTCTime_5:
   \   000192   786E         MOV       R0,#0x6e
   \   000194   7901         MOV       R1,#0x1
   \   000196   8004         SJMP      ??osal_ConvertUTCTime_7
   \                     ??osal_ConvertUTCTime_6:
   \   000198   786D         MOV       R0,#0x6d
   \   00019A   7901         MOV       R1,#0x1
   \                     ??osal_ConvertUTCTime_7:
   \   00019C   C3           CLR       C
   \   00019D   E5..         MOV       A,?V0
   \   00019F   98           SUBB      A,R0
   \   0001A0   F5..         MOV       ?V0,A
   \   0001A2   E5..         MOV       A,?V1
   \   0001A4   99           SUBB      A,R1
   \   0001A5   F5..         MOV       ?V1,A
    350                tm->year++;
   \   0001A7   8E82         MOV       DPL,R6
   \   0001A9   8F83         MOV       DPH,R7
   \   0001AB   A3           INC       DPTR
   \   0001AC   A3           INC       DPTR
   \   0001AD   A3           INC       DPTR
   \   0001AE   A3           INC       DPTR
   \   0001AF   A3           INC       DPTR
   \   0001B0   E0           MOVX      A,@DPTR
   \   0001B1   2401         ADD       A,#0x1
   \   0001B3   F0           MOVX      @DPTR,A
   \   0001B4   A3           INC       DPTR
   \   0001B5   E0           MOVX      A,@DPTR
   \   0001B6   3400         ADDC      A,#0x0
   \   0001B8   F0           MOVX      @DPTR,A
   \   0001B9   02....       LJMP      ??osal_ConvertUTCTime_0 & 0xFFFF
    351              }
    352          
    353              tm->month = 0;
   \                     ??osal_ConvertUTCTime_4:
   \   0001BC   8E82         MOV       DPL,R6
   \   0001BE   8F83         MOV       DPH,R7
   \   0001C0   A3           INC       DPTR
   \   0001C1   A3           INC       DPTR
   \   0001C2   A3           INC       DPTR
   \   0001C3   A3           INC       DPTR
   \   0001C4   7400         MOV       A,#0x0
   \   0001C6   F0           MOVX      @DPTR,A
    354              while ( numDays >= monthLength( IsLeapYear( tm->year ), tm->month ) )
   \                     ??osal_ConvertUTCTime_8:
   \   0001C7   8E82         MOV       DPL,R6
   \   0001C9   8F83         MOV       DPH,R7
   \   0001CB   A3           INC       DPTR
   \   0001CC   A3           INC       DPTR
   \   0001CD   A3           INC       DPTR
   \   0001CE   A3           INC       DPTR
   \   0001CF   A3           INC       DPTR
   \   0001D0   E0           MOVX      A,@DPTR
   \   0001D1   F8           MOV       R0,A
   \   0001D2   A3           INC       DPTR
   \   0001D3   E0           MOVX      A,@DPTR
   \   0001D4   F9           MOV       R1,A
   \   0001D5   7A90         MOV       R2,#-0x70
   \   0001D7   7B01         MOV       R3,#0x1
   \   0001D9   12....       LCALL     ?US_DIV_MOD
   \   0001DC   8A..         MOV       ?V2,R2
   \   0001DE   8B..         MOV       ?V3,R3
   \   0001E0   E5..         MOV       A,?V2
   \   0001E2   45..         ORL       A,?V3
   \   0001E4   6032         JZ        ??osal_ConvertUTCTime_9
   \   0001E6   8E82         MOV       DPL,R6
   \   0001E8   8F83         MOV       DPH,R7
   \   0001EA   A3           INC       DPTR
   \   0001EB   A3           INC       DPTR
   \   0001EC   A3           INC       DPTR
   \   0001ED   A3           INC       DPTR
   \   0001EE   A3           INC       DPTR
   \   0001EF   E0           MOVX      A,@DPTR
   \   0001F0   F8           MOV       R0,A
   \   0001F1   A3           INC       DPTR
   \   0001F2   E0           MOVX      A,@DPTR
   \   0001F3   F9           MOV       R1,A
   \   0001F4   7A64         MOV       R2,#0x64
   \   0001F6   7B00         MOV       R3,#0x0
   \   0001F8   12....       LCALL     ?US_DIV_MOD
   \   0001FB   8A..         MOV       ?V2,R2
   \   0001FD   8B..         MOV       ?V3,R3
   \   0001FF   E5..         MOV       A,?V2
   \   000201   45..         ORL       A,?V3
   \   000203   6017         JZ        ??osal_ConvertUTCTime_10
   \   000205   8E82         MOV       DPL,R6
   \   000207   8F83         MOV       DPH,R7
   \   000209   A3           INC       DPTR
   \   00020A   A3           INC       DPTR
   \   00020B   A3           INC       DPTR
   \   00020C   A3           INC       DPTR
   \   00020D   A3           INC       DPTR
   \   00020E   E0           MOVX      A,@DPTR
   \   00020F   F8           MOV       R0,A
   \   000210   A3           INC       DPTR
   \   000211   E0           MOVX      A,@DPTR
   \   000212   F9           MOV       R1,A
   \   000213   E8           MOV       A,R0
   \   000214   5403         ANL       A,#0x3
   \   000216   7004         JNZ       ??osal_ConvertUTCTime_10
   \                     ??osal_ConvertUTCTime_9:
   \   000218   7901         MOV       R1,#0x1
   \   00021A   8002         SJMP      ??osal_ConvertUTCTime_11
   \                     ??osal_ConvertUTCTime_10:
   \   00021C   7900         MOV       R1,#0x0
   \                     ??osal_ConvertUTCTime_11:
   \   00021E                ; Setup parameters for call to function monthLength
   \   00021E   8E82         MOV       DPL,R6
   \   000220   8F83         MOV       DPH,R7
   \   000222   A3           INC       DPTR
   \   000223   A3           INC       DPTR
   \   000224   A3           INC       DPTR
   \   000225   A3           INC       DPTR
   \   000226   E0           MOVX      A,@DPTR
   \   000227   FA           MOV       R2,A
   \   000228   12....       LCALL     `??monthLength::?relay`; Banked call to: monthLength
   \   00022B   E9           MOV       A,R1
   \   00022C   F8           MOV       R0,A
   \   00022D   7900         MOV       R1,#0x0
   \   00022F   C3           CLR       C
   \   000230   E5..         MOV       A,?V0
   \   000232   98           SUBB      A,R0
   \   000233   E5..         MOV       A,?V1
   \   000235   99           SUBB      A,R1
   \   000236   5003         JNC       $+5
   \   000238   02....       LJMP      ??osal_ConvertUTCTime_12 & 0xFFFF
    355              {
    356                numDays -= monthLength( IsLeapYear( tm->year ), tm->month );
   \   00023B   8E82         MOV       DPL,R6
   \   00023D   8F83         MOV       DPH,R7
   \   00023F   A3           INC       DPTR
   \   000240   A3           INC       DPTR
   \   000241   A3           INC       DPTR
   \   000242   A3           INC       DPTR
   \   000243   A3           INC       DPTR
   \   000244   E0           MOVX      A,@DPTR
   \   000245   F8           MOV       R0,A
   \   000246   A3           INC       DPTR
   \   000247   E0           MOVX      A,@DPTR
   \   000248   F9           MOV       R1,A
   \   000249   7A90         MOV       R2,#-0x70
   \   00024B   7B01         MOV       R3,#0x1
   \   00024D   12....       LCALL     ?US_DIV_MOD
   \   000250   8A..         MOV       ?V2,R2
   \   000252   8B..         MOV       ?V3,R3
   \   000254   E5..         MOV       A,?V2
   \   000256   45..         ORL       A,?V3
   \   000258   6032         JZ        ??osal_ConvertUTCTime_13
   \   00025A   8E82         MOV       DPL,R6
   \   00025C   8F83         MOV       DPH,R7
   \   00025E   A3           INC       DPTR
   \   00025F   A3           INC       DPTR
   \   000260   A3           INC       DPTR
   \   000261   A3           INC       DPTR
   \   000262   A3           INC       DPTR
   \   000263   E0           MOVX      A,@DPTR
   \   000264   F8           MOV       R0,A
   \   000265   A3           INC       DPTR
   \   000266   E0           MOVX      A,@DPTR
   \   000267   F9           MOV       R1,A
   \   000268   7A64         MOV       R2,#0x64
   \   00026A   7B00         MOV       R3,#0x0
   \   00026C   12....       LCALL     ?US_DIV_MOD
   \   00026F   8A..         MOV       ?V2,R2
   \   000271   8B..         MOV       ?V3,R3
   \   000273   E5..         MOV       A,?V2
   \   000275   45..         ORL       A,?V3
   \   000277   6017         JZ        ??osal_ConvertUTCTime_14
   \   000279   8E82         MOV       DPL,R6
   \   00027B   8F83         MOV       DPH,R7
   \   00027D   A3           INC       DPTR
   \   00027E   A3           INC       DPTR
   \   00027F   A3           INC       DPTR
   \   000280   A3           INC       DPTR
   \   000281   A3           INC       DPTR
   \   000282   E0           MOVX      A,@DPTR
   \   000283   F8           MOV       R0,A
   \   000284   A3           INC       DPTR
   \   000285   E0           MOVX      A,@DPTR
   \   000286   F9           MOV       R1,A
   \   000287   E8           MOV       A,R0
   \   000288   5403         ANL       A,#0x3
   \   00028A   7004         JNZ       ??osal_ConvertUTCTime_14
   \                     ??osal_ConvertUTCTime_13:
   \   00028C   7901         MOV       R1,#0x1
   \   00028E   8002         SJMP      ??osal_ConvertUTCTime_15
   \                     ??osal_ConvertUTCTime_14:
   \   000290   7900         MOV       R1,#0x0
   \                     ??osal_ConvertUTCTime_15:
   \   000292                ; Setup parameters for call to function monthLength
   \   000292   8E82         MOV       DPL,R6
   \   000294   8F83         MOV       DPH,R7
   \   000296   A3           INC       DPTR
   \   000297   A3           INC       DPTR
   \   000298   A3           INC       DPTR
   \   000299   A3           INC       DPTR
   \   00029A   E0           MOVX      A,@DPTR
   \   00029B   FA           MOV       R2,A
   \   00029C   12....       LCALL     `??monthLength::?relay`; Banked call to: monthLength
   \   00029F   E9           MOV       A,R1
   \   0002A0   F8           MOV       R0,A
   \   0002A1   7900         MOV       R1,#0x0
   \   0002A3   C3           CLR       C
   \   0002A4   E5..         MOV       A,?V0
   \   0002A6   98           SUBB      A,R0
   \   0002A7   F5..         MOV       ?V0,A
   \   0002A9   E5..         MOV       A,?V1
   \   0002AB   99           SUBB      A,R1
   \   0002AC   F5..         MOV       ?V1,A
    357                tm->month++;
   \   0002AE   8E82         MOV       DPL,R6
   \   0002B0   8F83         MOV       DPH,R7
   \   0002B2   A3           INC       DPTR
   \   0002B3   A3           INC       DPTR
   \   0002B4   A3           INC       DPTR
   \   0002B5   A3           INC       DPTR
   \   0002B6   E0           MOVX      A,@DPTR
   \   0002B7   2401         ADD       A,#0x1
   \   0002B9   F0           MOVX      @DPTR,A
   \   0002BA   02....       LJMP      ??osal_ConvertUTCTime_8 & 0xFFFF
    358              }
    359          
    360              tm->day = numDays;
   \                     ??osal_ConvertUTCTime_12:
   \   0002BD   E5..         MOV       A,?V0
   \   0002BF   C0E0         PUSH      A
   \   0002C1   8E82         MOV       DPL,R6
   \   0002C3   8F83         MOV       DPH,R7
   \   0002C5   A3           INC       DPTR
   \   0002C6   A3           INC       DPTR
   \   0002C7   A3           INC       DPTR
   \   0002C8   D0E0         POP       A
   \   0002CA   F0           MOVX      @DPTR,A
    361            }
    362          }
   \   0002CB   7F10         MOV       R7,#0x10
   \   0002CD   02....       LJMP      ?BANKED_LEAVE_XDATA
    363          
    364          /*********************************************************************
    365           * @fn      monthLength
    366           *
    367           * @param   lpyr - 1 for leap year, 0 if not
    368           *
    369           * @param   mon - 0 - 11 (jan - dec)
    370           *
    371           * @return  number of days in specified month
    372           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    373          static uint8 monthLength( uint8 lpyr, uint8 mon )
   \                     monthLength:
    374          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   \   000001   F8           MOV       R0,A
    375            uint8 days = 31;
   \   000002   791F         MOV       R1,#0x1f
    376          
    377          	if ( mon == 1 ) // feb
   \   000004   7401         MOV       A,#0x1
   \   000006   6A           XRL       A,R2
   \   000007   7006         JNZ       ??monthLength_0
    378            {
    379          		days = ( 28 + lpyr );
   \   000009   741C         MOV       A,#0x1c
   \   00000B   28           ADD       A,R0
   \   00000C   F9           MOV       R1,A
   \   00000D   800E         SJMP      ??monthLength_1
    380            }
    381            else
    382            {
    383              if ( mon > 6 ) // aug-dec
   \                     ??monthLength_0:
   \   00000F   EA           MOV       A,R2
   \   000010   C3           CLR       C
   \   000011   9407         SUBB      A,#0x7
   \   000013   4001         JC        ??monthLength_2
    384              {
    385                mon--;
   \   000015   1A           DEC       R2
    386              }
    387          
    388              if ( mon & 1 )
   \                     ??monthLength_2:
   \   000016   EA           MOV       A,R2
   \   000017   A2E0         MOV       C,0xE0 /* A   */.0
   \   000019   5002         JNC       ??monthLength_1
    389              {
    390                days = 30;
   \   00001B   791E         MOV       R1,#0x1e
    391              }
    392            }
    393          
    394          	return ( days );
   \                     ??monthLength_1:
   \   00001D   02....       LJMP      ?BRET
    395          }
    396          
    397          /*********************************************************************
    398           * @fn      osal_ConvertUTCSecs
    399           *
    400           * @brief   Converts a UTCTimeStruct to UTCTime
    401           *
    402           * @param   tm - pointer to provided struct
    403           *
    404           * @return  number of seconds since 00:00:00 on 01/01/2000 (UTC)
    405           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    406          UTCTime osal_ConvertUTCSecs( UTCTimeStruct *tm )
   \                     osal_ConvertUTCSecs:
    407          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    408            uint32 seconds;
    409          
    410            /* Seconds for the partial day */
    411            seconds = (((tm->hour * 60UL) + tm->minutes) * 60UL) + tm->seconds;
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F5..         MOV       ?V0,A
   \   000012   E4           CLR       A
   \   000013   F5..         MOV       ?V1,A
   \   000015   F5..         MOV       ?V2,A
   \   000017   F5..         MOV       ?V3,A
   \   000019   90....       MOV       DPTR,#__Constant_3c
   \   00001C   78..         MOV       R0,#?V8
   \   00001E   12....       LCALL     ?L_MOV_X
   \   000021   78..         MOV       R0,#?V0
   \   000023   79..         MOV       R1,#?V8
   \   000025   12....       LCALL     ?L_MUL
   \   000028   8E82         MOV       DPL,R6
   \   00002A   8F83         MOV       DPH,R7
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F5..         MOV       ?V8,A
   \   000030   E4           CLR       A
   \   000031   F5..         MOV       ?V9,A
   \   000033   F5..         MOV       ?V10,A
   \   000035   F5..         MOV       ?V11,A
   \   000037   78..         MOV       R0,#?V0
   \   000039   79..         MOV       R1,#?V8
   \   00003B   12....       LCALL     ?L_ADD
   \   00003E   90....       MOV       DPTR,#__Constant_3c
   \   000041   78..         MOV       R0,#?V8
   \   000043   12....       LCALL     ?L_MOV_X
   \   000046   78..         MOV       R0,#?V0
   \   000048   79..         MOV       R1,#?V8
   \   00004A   12....       LCALL     ?L_MUL
   \   00004D   8E82         MOV       DPL,R6
   \   00004F   8F83         MOV       DPH,R7
   \   000051   E0           MOVX      A,@DPTR
   \   000052   F5..         MOV       ?V8,A
   \   000054   E4           CLR       A
   \   000055   F5..         MOV       ?V9,A
   \   000057   F5..         MOV       ?V10,A
   \   000059   F5..         MOV       ?V11,A
   \   00005B   78..         MOV       R0,#?V0
   \   00005D   79..         MOV       R1,#?V8
   \   00005F   12....       LCALL     ?L_ADD
   \   000062   85....       MOV       ?V4,?V0
   \   000065   85....       MOV       ?V5,?V1
   \   000068   85....       MOV       ?V6,?V2
   \   00006B   85....       MOV       ?V7,?V3
    412          
    413            /* Account for previous complete days */
    414            {
    415              /* Start with complete days in current month */
    416              uint16 days = tm->day;
   \   00006E   8E82         MOV       DPL,R6
   \   000070   8F83         MOV       DPH,R7
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   E0           MOVX      A,@DPTR
   \   000076   F5..         MOV       ?V0,A
   \   000078   75..00       MOV       ?V1,#0x0
    417          
    418              /* Next, complete months in current year */
    419              {
    420                int8 month = tm->month;
   \   00007B   8E82         MOV       DPL,R6
   \   00007D   8F83         MOV       DPH,R7
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   E0           MOVX      A,@DPTR
   \   000084   F5..         MOV       ?V2,A
    421                while ( --month >= 0 )
   \                     ??osal_ConvertUTCSecs_0:
   \   000086   74FF         MOV       A,#-0x1
   \   000088   25..         ADD       A,?V2
   \   00008A   F5..         MOV       ?V2,A
   \   00008C   E5..         MOV       A,?V2
   \   00008E   C3           CLR       C
   \   00008F   9400         SUBB      A,#0x0
   \   000091   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000093   65D0         XRL       A,PSW
   \   000095   33           RLC       A
   \   000096   406C         JC        ??osal_ConvertUTCSecs_1
    422                {
    423                  days += monthLength( IsLeapYear( tm->year ), month );
   \   000098   8E82         MOV       DPL,R6
   \   00009A   8F83         MOV       DPH,R7
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   F8           MOV       R0,A
   \   0000A3   A3           INC       DPTR
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   F9           MOV       R1,A
   \   0000A6   7A90         MOV       R2,#-0x70
   \   0000A8   7B01         MOV       R3,#0x1
   \   0000AA   12....       LCALL     ?US_DIV_MOD
   \   0000AD   8A..         MOV       ?V8,R2
   \   0000AF   8B..         MOV       ?V9,R3
   \   0000B1   E5..         MOV       A,?V8
   \   0000B3   45..         ORL       A,?V9
   \   0000B5   6032         JZ        ??osal_ConvertUTCSecs_2
   \   0000B7   8E82         MOV       DPL,R6
   \   0000B9   8F83         MOV       DPH,R7
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   A3           INC       DPTR
   \   0000BF   A3           INC       DPTR
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   F8           MOV       R0,A
   \   0000C2   A3           INC       DPTR
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   F9           MOV       R1,A
   \   0000C5   7A64         MOV       R2,#0x64
   \   0000C7   7B00         MOV       R3,#0x0
   \   0000C9   12....       LCALL     ?US_DIV_MOD
   \   0000CC   8A..         MOV       ?V8,R2
   \   0000CE   8B..         MOV       ?V9,R3
   \   0000D0   E5..         MOV       A,?V8
   \   0000D2   45..         ORL       A,?V9
   \   0000D4   6017         JZ        ??osal_ConvertUTCSecs_3
   \   0000D6   8E82         MOV       DPL,R6
   \   0000D8   8F83         MOV       DPH,R7
   \   0000DA   A3           INC       DPTR
   \   0000DB   A3           INC       DPTR
   \   0000DC   A3           INC       DPTR
   \   0000DD   A3           INC       DPTR
   \   0000DE   A3           INC       DPTR
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   F8           MOV       R0,A
   \   0000E1   A3           INC       DPTR
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   F9           MOV       R1,A
   \   0000E4   E8           MOV       A,R0
   \   0000E5   5403         ANL       A,#0x3
   \   0000E7   7004         JNZ       ??osal_ConvertUTCSecs_3
   \                     ??osal_ConvertUTCSecs_2:
   \   0000E9   7901         MOV       R1,#0x1
   \   0000EB   8002         SJMP      ??osal_ConvertUTCSecs_4
   \                     ??osal_ConvertUTCSecs_3:
   \   0000ED   7900         MOV       R1,#0x0
   \                     ??osal_ConvertUTCSecs_4:
   \   0000EF                ; Setup parameters for call to function monthLength
   \   0000EF   AA..         MOV       R2,?V2
   \   0000F1   12....       LCALL     `??monthLength::?relay`; Banked call to: monthLength
   \   0000F4   E9           MOV       A,R1
   \   0000F5   F8           MOV       R0,A
   \   0000F6   7900         MOV       R1,#0x0
   \   0000F8   E5..         MOV       A,?V0
   \   0000FA   28           ADD       A,R0
   \   0000FB   F5..         MOV       ?V0,A
   \   0000FD   E5..         MOV       A,?V1
   \   0000FF   39           ADDC      A,R1
   \   000100   F5..         MOV       ?V1,A
   \   000102   8082         SJMP      ??osal_ConvertUTCSecs_0
    424                }
    425              }
    426          
    427              /* Next, complete years before current year */
    428              {
    429                uint16 year = tm->year;
   \                     ??osal_ConvertUTCSecs_1:
   \   000104   8E82         MOV       DPL,R6
   \   000106   8F83         MOV       DPH,R7
   \   000108   A3           INC       DPTR
   \   000109   A3           INC       DPTR
   \   00010A   A3           INC       DPTR
   \   00010B   A3           INC       DPTR
   \   00010C   A3           INC       DPTR
   \   00010D   E0           MOVX      A,@DPTR
   \   00010E   FC           MOV       R4,A
   \   00010F   A3           INC       DPTR
   \   000110   E0           MOVX      A,@DPTR
   \   000111   FD           MOV       R5,A
    430                while ( --year >= BEGYEAR )
   \                     ??osal_ConvertUTCSecs_5:
   \   000112   EC           MOV       A,R4
   \   000113   24FF         ADD       A,#-0x1
   \   000115   FC           MOV       R4,A
   \   000116   ED           MOV       A,R5
   \   000117   34FF         ADDC      A,#-0x1
   \   000119   FD           MOV       R5,A
   \   00011A   C3           CLR       C
   \   00011B   EC           MOV       A,R4
   \   00011C   94D0         SUBB      A,#-0x30
   \   00011E   ED           MOV       A,R5
   \   00011F   9407         SUBB      A,#0x7
   \   000121   4045         JC        ??osal_ConvertUTCSecs_6
    431                {
    432                  days += YearLength( year );
   \   000123   EC           MOV       A,R4
   \   000124   F8           MOV       R0,A
   \   000125   ED           MOV       A,R5
   \   000126   F9           MOV       R1,A
   \   000127   7A90         MOV       R2,#-0x70
   \   000129   7B01         MOV       R3,#0x1
   \   00012B   12....       LCALL     ?US_DIV_MOD
   \   00012E   8A..         MOV       ?V2,R2
   \   000130   8B..         MOV       ?V3,R3
   \   000132   E5..         MOV       A,?V2
   \   000134   45..         ORL       A,?V3
   \   000136   601A         JZ        ??osal_ConvertUTCSecs_7
   \   000138   EC           MOV       A,R4
   \   000139   F8           MOV       R0,A
   \   00013A   ED           MOV       A,R5
   \   00013B   F9           MOV       R1,A
   \   00013C   7A64         MOV       R2,#0x64
   \   00013E   7B00         MOV       R3,#0x0
   \   000140   12....       LCALL     ?US_DIV_MOD
   \   000143   8A..         MOV       ?V2,R2
   \   000145   8B..         MOV       ?V3,R3
   \   000147   E5..         MOV       A,?V2
   \   000149   45..         ORL       A,?V3
   \   00014B   600B         JZ        ??osal_ConvertUTCSecs_8
   \   00014D   EC           MOV       A,R4
   \   00014E   5403         ANL       A,#0x3
   \   000150   7006         JNZ       ??osal_ConvertUTCSecs_8
   \                     ??osal_ConvertUTCSecs_7:
   \   000152   786E         MOV       R0,#0x6e
   \   000154   7901         MOV       R1,#0x1
   \   000156   8004         SJMP      ??osal_ConvertUTCSecs_9
   \                     ??osal_ConvertUTCSecs_8:
   \   000158   786D         MOV       R0,#0x6d
   \   00015A   7901         MOV       R1,#0x1
   \                     ??osal_ConvertUTCSecs_9:
   \   00015C   E5..         MOV       A,?V0
   \   00015E   28           ADD       A,R0
   \   00015F   F5..         MOV       ?V0,A
   \   000161   E5..         MOV       A,?V1
   \   000163   39           ADDC      A,R1
   \   000164   F5..         MOV       ?V1,A
   \   000166   80AA         SJMP      ??osal_ConvertUTCSecs_5
    433                }
    434              }
    435          
    436              /* Add total seconds before partial day */
    437              seconds += (days * DAY);
   \                     ??osal_ConvertUTCSecs_6:
   \   000168   E4           CLR       A
   \   000169   F5..         MOV       ?V2,A
   \   00016B   F5..         MOV       ?V3,A
   \   00016D   90....       MOV       DPTR,#__Constant_15180
   \   000170   78..         MOV       R0,#?V8
   \   000172   12....       LCALL     ?L_MOV_X
   \   000175   78..         MOV       R0,#?V0
   \   000177   79..         MOV       R1,#?V8
   \   000179   12....       LCALL     ?L_MUL
   \   00017C   78..         MOV       R0,#?V4
   \   00017E   79..         MOV       R1,#?V0
   \   000180   12....       LCALL     ?L_ADD
    438            }
    439          
    440            return ( seconds );
   \   000183   AA..         MOV       R2,?V4
   \   000185   AB..         MOV       R3,?V5
   \   000187   AC..         MOV       R4,?V6
   \   000189   AD..         MOV       R5,?V7
   \   00018B   7F0C         MOV       R7,#0xc
   \   00018D   02....       LJMP      ?BANKED_LEAVE_XDATA
    441          }

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4:
   \   000000   04000000     DD 4

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_31fe7:
   \   000000   E71F0300     DD 204775

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_fffce019:
   \   000000   19E0FCFF     DD 4294762521

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_fff8:
   \   000000   F8FF0000     DD 65528

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_8:
   \   000000   08000000     DD 8

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_15180:
   \   000000   80510100     DD 86400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3c:
   \   000000   3C000000     DD 60

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_e10:
   \   000000   100E0000     DD 3600

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     24   monthLength
      0     50   osalClockUpdate
        0     22   -> osalMcuDivide31By16To16
      0     30   osalTimeUpdate
        0     28   -> macMcuPrecisionCount
        0     28   -> osalClockUpdate
        0     30   -> osalMcuDivide31By16To16
        0     28   -> osalTimerUpdate
      0     20   osal_ConvertUTCSecs
        0     20   -> monthLength
      1     28   osal_ConvertUTCTime
        0     24   -> monthLength
      2      0   osal_getClock
      0     12   osal_setClock


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  OSAL_timeSeconds
       1  _A_IEN0
       4  __Constant_15180
       4  __Constant_31fe7
       4  __Constant_3c
       4  __Constant_3e8
       4  __Constant_4
       4  __Constant_8
       4  __Constant_e10
       4  __Constant_fff8
       4  __Constant_fffce019
      32  monthLength
     169  osalClockUpdate
     360  osalTimeUpdate
     400  osal_ConvertUTCSecs
     720  osal_ConvertUTCTime
      17  osal_getClock
      38  osal_setClock
       4  previousMacTimerTick
       2  remUsTicks
       4  timeMSec
      42  -- Other

 
 1 736 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
    36 bytes in segment XDATA_ROM_C
    14 bytes in segment XDATA_Z
 
    42 bytes of CODE     memory
     0 bytes of CONST    memory (+ 36 bytes shared)
     0 bytes of DATA     memory (+  1 byte  shared)
 1 736 bytes of HUGECODE memory
    14 bytes of XDATA    memory

Errors: none
Warnings: none
