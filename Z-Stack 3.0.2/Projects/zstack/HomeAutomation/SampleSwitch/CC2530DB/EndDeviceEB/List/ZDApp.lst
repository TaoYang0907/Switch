###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               05/Aug/2020  22:51:14
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\AA\Z-Stack 3.0.2\Components\stack\zdo\ZDApp.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW57DE.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\stack\zdo\ZDApp.c" -D SECURE=1 -D TC_LINKKEY_JOIN -D
#        NV_INIT -D NV_RESTORE -D POWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D
#        xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_GROUPS -D
#        BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=0
#        -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0 -DREJOIN_POLL_RATE=0
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\ZDApp.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\ZDApp.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2015-10-06 12:04:24 -0700 (Tue, 06 Oct 2015) $
      4            Revision:       $Revision: 44520 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the user can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "ZMAC.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Tasks.h"
     49          #include "OSAL_PwrMgr.h"
     50          #include "OSAL_Nv.h"
     51          #include "AF.h"
     52          #include "APSMEDE.h"
     53          #include "NLMEDE.h"
     54          #include "AddrMgr.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "DebugTrace.h"
     61          #include "nwk_util.h"
     62          #include "OnBoard.h"
     63          #include "ZGlobals.h"
     64          #include "ZDNwkMgr.h"
     65          #include "rtg.h"
     66             
     67          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
     68          #include "gp_common.h"
     69          #endif
     70             
     71          #include "bdb.h"
     72          #include "bdb_interface.h"
     73          
     74          #include "ssp.h"
     75          
     76          /* HAL */
     77          #include "hal_led.h"
     78          #include "hal_lcd.h"
     79          #include "hal_key.h"
     80          
     81          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     82            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     83          #endif
     84          
     85          /*********************************************************************
     86           * CONSTANTS
     87           */
     88          
     89          #if !defined( NWK_START_DELAY )
     90            #define NWK_START_DELAY             100   // in milliseconds
     91          #endif
     92          
     93          #if !defined( LEAVE_RESET_DELAY )
     94            #define LEAVE_RESET_DELAY           5000  // in milliseconds
     95          #endif
     96          
     97          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
     98            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
     99          #endif
    100          
    101          #if !defined( BEACON_REQUEST_DELAY )
    102            #define BEACON_REQUEST_DELAY        100   // in milliseconds
    103          #endif
    104          
    105          #if !defined( BEACON_REQ_DELAY_MASK )
    106            #define BEACON_REQ_DELAY_MASK       0x007F
    107          #endif
    108          
    109          #define MAX_RESUME_RETRY            3
    110          
    111          #define MAX_DEVICE_UNAUTH_TIMEOUT   10000  // 10 seconds
    112          
    113          // Beacon Order Settings (see NLMEDE.h)
    114          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    115          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    116          
    117          // Leave control bits
    118          #define ZDAPP_LEAVE_CTRL_INIT 0
    119          #define ZDAPP_LEAVE_CTRL_SET  1
    120          #define ZDAPP_LEAVE_CTRL_RA   2
    121          
    122          // Address Manager Stub Implementation
    123          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    124          
    125          
    126          #if !defined ZDO_NV_SAVE_RFDs
    127          #define ZDO_NV_SAVE_RFDs  TRUE
    128          #endif
    129          
    130          // Delay time before updating NWK NV data to force fewer writes during high activity.
    131          #if ZDO_NV_SAVE_RFDs
    132          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    133          #else
    134          #define ZDAPP_UPDATE_NWK_NV_TIME 65000
    135          #endif
    136          
    137          // Timeout value to process New Devices
    138          #define ZDAPP_NEW_DEVICE_TIME     600   // in ms
    139          
    140          
    141          //ZDP_BIND_SKIP_VALIDATION, redefined as ZDP_BIND_VALIDATION
    142          #if defined ( ZDP_BIND_VALIDATION )
    143          #if !defined MAX_PENDING_BIND_REQ
    144          #define MAX_PENDING_BIND_REQ 3
    145          #endif
    146          #endif
    147          
    148          #ifdef LEGACY_ZDO_LEDS
    149          #define zdoHalLedSet HalLedSet
    150          #else
    151          #define zdoHalLedSet(...)
    152          #endif
    153          
    154          /******************************************************************************
    155           * TYPEDEFS
    156           */
    157          typedef struct
    158          {
    159            void   *next;
    160            uint16 shortAddr;
    161            uint16 timeDelta;
    162          } ZDAppNewDevice_t;
    163          
    164          /*********************************************************************
    165           * GLOBAL VARIABLES
    166           */
    167          
    168          #if defined( LCD_SUPPORTED )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169            uint8 MatchRsps = 0;
   \                     MatchRsps:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    170          #endif
    171          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    173          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    174          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    176          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    177          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    179          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    180          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    181          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    183          
    184          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    185          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    186          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    188          
    189          #if defined ( ZDP_BIND_VALIDATION )
    190          ZDO_PendingBindReq_t *ZDAppPendingBindReq = NULL;
    191          #endif
    192          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          uint32 runtimeChannel;
   \                     runtimeChannel:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    194          uint8 FrameCounterUpdated = FALSE;
   \                     FrameCounterUpdated:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    195          /*********************************************************************
    196           * EXTERNAL VARIABLES
    197           */
    198          
    199          extern bool    requestNewTrustCenterLinkKey;
    200          extern uint32  requestLinkKeyTimeout;
    201          extern CONST   uint8 gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES;
    202          /*********************************************************************
    203           * EXTERNAL FUNCTIONS
    204           */
    205          
    206          /*********************************************************************
    207           * LOCAL FUNCTIONS
    208           */
    209          void ZDApp_NetworkStartEvt( void );
    210          void ZDApp_DeviceAuthEvt( void );
    211          void ZDApp_SaveNetworkStateEvt( void );
    212          
    213          uint8 ZDApp_ReadNetworkRestoreState( void );
    214          uint8 ZDApp_RestoreNetworkState( void );
    215          void ZDAppDetermineDeviceType( void );
    216          void ZDApp_InitUserDesc( void );
    217          void ZDAppCheckForHoldKey( void );
    218          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    219          void ZDApp_ProcessNetworkJoin( void );
    220          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    221          uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt );
    222          networkDesc_t* ZDApp_NwkDescListProcessing(void);
    223          
    224          void ZDApp_SecInit( uint8 state );
    225          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    226          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    227          
    228          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    229          
    230          void ZDApp_ResetTimerStart( uint16 delay );
    231          void ZDApp_ResetTimerCancel( void );
    232          void ZDApp_LeaveCtrlInit( void );
    233          void ZDApp_LeaveCtrlSet( uint8 ra );
    234          uint8 ZDApp_LeaveCtrlBypass( void );
    235          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    236          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr, uint8 removeChildren, uint8 rejoin );
    237          void ZDApp_NodeProfileSync( uint8 stackProfile );
    238          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    239          void ZDApp_RegisterCBs( void );
    240          void ZDApp_InitZdoCBFunc(void);
    241          #if defined ( ZDP_BIND_VALIDATION )
    242          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq );
    243          void ZDApp_InitPendingBind( void );
    244          void ZDApp_ProcessPendingBindReq( uint8 *extAddr );
    245          void ZDApp_AgeOutPendingBindEntry( void );
    246          #endif
    247          
    248          void ZDApp_SetParentAnnceTimer( void );
    249          void ZDApp_StoreNwkSecMaterial(void);
    250          
    251          /*********************************************************************
    252           * LOCAL VARIABLES
    253           */
    254          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    255          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    256          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    257          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    258          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    259          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    260          devStates_t devState = DEV_HOLD;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    261          
    262          // previous rejoin state

   \                                 In  segment XDATA_I, align 1, keep-with-next
    263            devStates_t prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \                     prevDevState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for prevDevState>`
   \   000001                REQUIRE __INIT_XDATA_I
    264          
    265          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    266            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    267            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    268                                  // to parent. Set to make the device do an Orphan scan.
    269          #else
    270            // Set the default to coodinator
    271            devStartModes_t devStartMode = MODE_HARD;
    272          #endif
    273          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    274          uint8 retryCnt = 0;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    275          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    276          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000007                REQUIRE __INIT_XDATA_I
    277          {
    278            ZDO_EP,
    279            0,
    280            &ZDAppTaskID,
    281            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    282            (afNetworkLatencyReq_t)0            // No Network Latency req
    283          };
    284          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    285          uint32 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    286          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    287          ZDAppNewDevice_t *ZDApp_NewDeviceList = NULL;
   \                     ZDApp_NewDeviceList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    288          
    289          /* "Hold Key" status saved during ZDAppCheckForHoldKey() */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    290          static uint8 zdappHoldKeys;
   \                     zdappHoldKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    291          
    292          /*********************************************************************
    293           * @fn      ZDApp_Init
    294           *
    295           * @brief   ZDApp Initialization function.
    296           *
    297           * @param   task_id - ZDApp Task ID
    298           *
    299           * @return  None
    300           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    301          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    302          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    303            // Save the task ID
    304            ZDAppTaskID = task_id;
   \   000007   EE           MOV       A,R6
   \   000008   90....       MOV       DPTR,#ZDAppTaskID
   \   00000B   F0           MOVX      @DPTR,A
    305          
    306            // Initialize the ZDO global device short address storage
    307            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   00000C   90....       MOV       DPTR,#ZDAppNwkAddr + 8
   \   00000F   7402         MOV       A,#0x2
   \   000011   F0           MOVX      @DPTR,A
    308            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000012   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000015   74FE         MOV       A,#-0x2
   \   000017   F0           MOVX      @DPTR,A
   \   000018   A3           INC       DPTR
   \   000019   74FF         MOV       A,#-0x1
   \   00001B   F0           MOVX      @DPTR,A
    309            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   00001C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001C   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00001F   8A..         MOV       ?V2,R2
   \   000021   8B..         MOV       ?V3,R3
   \   000023   85....       MOV       ?V0,?V2
   \   000026   85....       MOV       ?V1,?V3
    310          
    311            // Initialize ZDO items and setup the device - type of device to create.
    312            ZDO_Init();
   \   000029                ; Setup parameters for call to function ZDO_Init
   \   000029   12....       LCALL     `??ZDO_Init::?relay`; Banked call to: ZDO_Init
    313          
    314            // Register the endpoint description with the AF
    315            // This task doesn't have a Simple description, but we still need
    316            // to register the endpoint.
    317            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   00002C                ; Setup parameters for call to function afRegister
   \   00002C   7A..         MOV       R2,#ZDApp_epDesc & 0xff
   \   00002E   7B..         MOV       R3,#(ZDApp_epDesc >> 8) & 0xff
   \   000030   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
   \   000033   E9           MOV       A,R1
    318          
    319          #if defined( ZDO_USERDESC_RESPONSE )
    320            ZDApp_InitUserDesc();
    321          #endif // ZDO_USERDESC_RESPONSE
    322          
    323            // Initialize the ZDO callback function pointers zdoCBFunc[]
    324            ZDApp_InitZdoCBFunc();
   \   000034                ; Setup parameters for call to function ZDApp_InitZdoCBFunc
   \   000034   12....       LCALL     `??ZDApp_InitZdoCBFunc::?relay`; Banked call to: ZDApp_InitZdoCBFunc
    325          
    326            ZDApp_RegisterCBs();
   \   000037                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   000037   12....       LCALL     `??ZDApp_RegisterCBs::?relay`; Banked call to: ZDApp_RegisterCBs
    327          
    328          #if defined ( ZDP_BIND_VALIDATION )
    329          #if defined ( REFLECTOR )
    330            ZDApp_InitPendingBind();
    331          #endif
    332          #endif
    333          } /* ZDApp_Init() */
   \   00003A   7F04         MOV       R7,#0x4
   \   00003C   02....       LJMP      ?BANKED_LEAVE_XDATA
    334          
    335          /*********************************************************************
    336           * @fn          ZDApp_SecInit
    337           *
    338           * @brief       ZDApp initialize security.
    339           *
    340           * @param       state - device initialization state
    341           *
    342           * @return      none
    343           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    344          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    345          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
    346            uint8 zgPreConfigKey[SEC_KEY_LEN];
    347          
    348            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    349            {
    350              // Set the Trust Center bit
    351              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
    352            }
    353          
    354            // Initialize ZigBee Device Security Manager
    355            ZDSecMgrInit(state);
   \   00000C                ; Setup parameters for call to function ZDSecMgrInit
   \   00000C   A9..         MOV       R1,?V0
   \   00000E   12....       LCALL     `??ZDSecMgrInit::?relay`; Banked call to: ZDSecMgrInit
    356          
    357            if ( ZG_SECURE_ENABLED )
    358            {
    359              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
   \   000011   E5..         MOV       A,?V0
   \   000013   603B         JZ        ??ZDApp_SecInit_0
    360              {
    361                if( _NIB.nwkKeyLoaded == FALSE )
   \   000015   90....       MOV       DPTR,#_NIB + 61
   \   000018   E0           MOVX      A,@DPTR
   \   000019   7035         JNZ       ??ZDApp_SecInit_0
    362                {
    363                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    364                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
   \   00001B   90....       MOV       DPTR,#zgSecurityMode
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   6401         XRL       A,#0x1
   \   000021   702D         JNZ       ??ZDApp_SecInit_0
   \   000023   90....       MOV       DPTR,#zgPreConfigKeys
   \   000026   E0           MOVX      A,@DPTR
   \   000027   6027         JZ        ??ZDApp_SecInit_0
    365                  {
    366                      ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
   \   000029                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   000029   AC..         MOV       R4,?XSP + 0
   \   00002B   AD..         MOV       R5,?XSP + 1
   \   00002D   7A62         MOV       R2,#0x62
   \   00002F   7B00         MOV       R3,#0x0
   \   000031   12....       LCALL     `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
   \   000034   E9           MOV       A,R1
    367                      SSP_UpdateNwkKey( zgPreConfigKey, 0);
   \   000035                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   000035   7900         MOV       R1,#0x0
   \   000037   AA..         MOV       R2,?XSP + 0
   \   000039   AB..         MOV       R3,?XSP + 1
   \   00003B   12....       LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
    368                      SSP_SwitchNwkKey( 0 );
   \   00003E                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   00003E   7900         MOV       R1,#0x0
   \   000040   12....       LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
    369          
    370                      // clear local copy of key
    371                      osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
   \   000043                ; Setup parameters for call to function osal_memset
   \   000043   7C10         MOV       R4,#0x10
   \   000045   7D00         MOV       R5,#0x0
   \   000047   7900         MOV       R1,#0x0
   \   000049   AA..         MOV       R2,?XSP + 0
   \   00004B   AB..         MOV       R3,?XSP + 1
   \   00004D   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    372                  }
    373                }
    374              }
    375          
    376              // clean the new devices list when Security module is initialized
    377              if ( ZDApp_NewDeviceList != NULL )
   \                     ??ZDApp_SecInit_0:
   \   000050   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   000053   E0           MOVX      A,@DPTR
   \   000054   F8           MOV       R0,A
   \   000055   A3           INC       DPTR
   \   000056   E0           MOVX      A,@DPTR
   \   000057   F9           MOV       R1,A
   \   000058   E8           MOV       A,R0
   \   000059   49           ORL       A,R1
   \   00005A   6039         JZ        ??ZDApp_SecInit_1
    378              {
    379                ZDAppNewDevice_t *pNewDeviceNext;
    380          
    381                while ( ZDApp_NewDeviceList )
   \                     ??ZDApp_SecInit_2:
   \   00005C   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F8           MOV       R0,A
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F9           MOV       R1,A
   \   000064   E8           MOV       A,R0
   \   000065   49           ORL       A,R1
   \   000066   602D         JZ        ??ZDApp_SecInit_1
    382                {
    383                  pNewDeviceNext = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
   \   000068   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   F8           MOV       R0,A
   \   00006D   A3           INC       DPTR
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   F583         MOV       DPH,A
   \   000071   8882         MOV       DPL,R0
   \   000073   E0           MOVX      A,@DPTR
   \   000074   F8           MOV       R0,A
   \   000075   A3           INC       DPTR
   \   000076   E0           MOVX      A,@DPTR
   \   000077   F9           MOV       R1,A
   \   000078   E8           MOV       A,R0
   \   000079   FE           MOV       R6,A
   \   00007A   E9           MOV       A,R1
   \   00007B   FF           MOV       R7,A
    384                  osal_mem_free( ZDApp_NewDeviceList );
   \   00007C                ; Setup parameters for call to function osal_mem_free
   \   00007C   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   FA           MOV       R2,A
   \   000081   A3           INC       DPTR
   \   000082   E0           MOVX      A,@DPTR
   \   000083   FB           MOV       R3,A
   \   000084   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    385                  ZDApp_NewDeviceList = pNewDeviceNext;
   \   000087   EE           MOV       A,R6
   \   000088   F8           MOV       R0,A
   \   000089   EF           MOV       A,R7
   \   00008A   F9           MOV       R1,A
   \   00008B   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   00008E   E8           MOV       A,R0
   \   00008F   F0           MOVX      @DPTR,A
   \   000090   A3           INC       DPTR
   \   000091   E9           MOV       A,R1
   \   000092   F0           MOVX      @DPTR,A
   \   000093   80C7         SJMP      ??ZDApp_SecInit_2
    386                }
    387              }
    388            }
    389          }
   \                     ??ZDApp_SecInit_1:
   \   000095   7410         MOV       A,#0x10
   \   000097   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009A   7F01         MOV       R7,#0x1
   \   00009C   02....       LJMP      ?BANKED_LEAVE_XDATA
    390          
    391          /*********************************************************************
    392           * @fn      ZDApp_event_loop()
    393           *
    394           * @brief   Main event loop for Zigbee device objects task. This function
    395           *          should be called at periodic intervals.
    396           *
    397           * @param   task_id - Task ID
    398           * @param   events  - Bitmap of events
    399           *
    400           * @return  none
    401           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    402          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    403          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    404            uint8 *msg_ptr;
    405          
    406            if ( events & SYS_EVENT_MSG )
   \   00000B   EE           MOV       A,R6
   \   00000C   5400         ANL       A,#0x0
   \   00000E   F8           MOV       R0,A
   \   00000F   EF           MOV       A,R7
   \   000010   5480         ANL       A,#0x80
   \   000012   F9           MOV       R1,A
   \   000013   E8           MOV       A,R0
   \   000014   49           ORL       A,R1
   \   000015   6034         JZ        ??ZDApp_event_loop_0
    407            {
    408              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
   \                     ??ZDApp_event_loop_1:
   \   000017                ; Setup parameters for call to function osal_msg_receive
   \   000017   90....       MOV       DPTR,#ZDAppTaskID
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F9           MOV       R1,A
   \   00001C   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00001F   8A..         MOV       ?V4,R2
   \   000021   8B..         MOV       ?V5,R3
   \   000023   A8..         MOV       R0,?V4
   \   000025   A9..         MOV       R1,?V5
   \   000027   88..         MOV       ?V0,R0
   \   000029   89..         MOV       ?V1,R1
   \   00002B   E8           MOV       A,R0
   \   00002C   49           ORL       A,R1
   \   00002D   6011         JZ        ??ZDApp_event_loop_2
    409              {
    410                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
   \   00002F                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   00002F   AA..         MOV       R2,?V0
   \   000031   AB..         MOV       R3,?V1
   \   000033   12....       LCALL     `??ZDApp_ProcessOSALMsg::?relay`; Banked call to: ZDApp_ProcessOSALMsg
    411          
    412                // Release the memory
    413                osal_msg_deallocate( msg_ptr );
   \   000036                ; Setup parameters for call to function osal_msg_deallocate
   \   000036   AA..         MOV       R2,?V0
   \   000038   AB..         MOV       R3,?V1
   \   00003A   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \   00003D   E9           MOV       A,R1
   \   00003E   80D7         SJMP      ??ZDApp_event_loop_1
    414              }
    415          
    416              // Return unprocessed events
    417              return (events ^ SYS_EVENT_MSG);
   \                     ??ZDApp_event_loop_2:
   \   000040   EE           MOV       A,R6
   \   000041   6400         XRL       A,#0x0
   \   000043   FA           MOV       R2,A
   \   000044   EF           MOV       A,R7
   \   000045   6480         XRL       A,#0x80
   \   000047   FB           MOV       R3,A
   \   000048   02....       LJMP      ??ZDApp_event_loop_3 & 0xFFFF
    418            }
    419          
    420            if ( events & ZDO_NETWORK_INIT )
   \                     ??ZDApp_event_loop_0:
   \   00004B   EE           MOV       A,R6
   \   00004C   A2E0         MOV       C,0xE0 /* A   */.0
   \   00004E   5023         JNC       ??ZDApp_event_loop_4
    421            {
    422              // Initialize apps and start the network
    423              ZDApp_ChangeState( DEV_INIT );
   \   000050                ; Setup parameters for call to function ZDApp_ChangeState
   \   000050   7901         MOV       R1,#0x1
   \   000052   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    424          
    425              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    426                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \   000055                ; Setup parameters for call to function ZDO_StartDevice
   \   000055   7C0F         MOV       R4,#0xf
   \   000057   7B0F         MOV       R3,#0xf
   \   000059   90....       MOV       DPTR,#devStartMode
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   FA           MOV       R2,A
   \   00005E   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000061   E0           MOVX      A,@DPTR
   \   000062   5407         ANL       A,#0x7
   \   000064   F9           MOV       R1,A
   \   000065   12....       LCALL     `??ZDO_StartDevice::?relay`; Banked call to: ZDO_StartDevice
    427          
    428              // Return unprocessed events
    429              return (events ^ ZDO_NETWORK_INIT);
   \   000068   EE           MOV       A,R6
   \   000069   6401         XRL       A,#0x1
   \   00006B   FA           MOV       R2,A
   \   00006C   EF           MOV       A,R7
   \   00006D   6400         XRL       A,#0x0
   \   00006F   FB           MOV       R3,A
   \   000070   02....       LJMP      ??ZDApp_event_loop_3 & 0xFFFF
    430            }
    431          
    432            if ( ZSTACK_ROUTER_BUILD )
    433            {
    434              if ( events & ZDO_NETWORK_START )
    435              {
    436                ZDApp_NetworkStartEvt();
    437          
    438                // Return unprocessed events
    439                return (events ^ ZDO_NETWORK_START);
    440              }
    441          
    442              if ( events & ZDO_ROUTER_START )
    443              {
    444                if ( nwkStatus == ZSuccess )
    445                {
    446                  if ( devState == DEV_END_DEVICE )
    447                  {
    448                    ZDApp_ChangeState( DEV_ROUTER );
    449                  }
    450          
    451                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
    452          
    453                  if ( zgChildAgingEnable == TRUE )
    454                  {
    455                    // Once the device has changed its state to a ROUTER set the timer to send
    456                    // Parent annce
    457                    ZDApp_SetParentAnnceTimer();
    458                  }
    459                }
    460                else
    461                {
    462                  // remain as end device
    463                }
    464                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
    465          
    466                // Return unprocessed events
    467                return (events ^ ZDO_ROUTER_START);
    468              }
    469          
    470              if ( events & ZDO_PARENT_ANNCE_EVT )
    471              {
    472                ZDApp_SendParentAnnce();
    473          
    474                // Return unprocessed events
    475                return (events ^ ZDO_PARENT_ANNCE_EVT);
    476              }
    477            }
    478          
    479            if ( ZSTACK_END_DEVICE_BUILD )
    480            {
    481              if ( events & ZDO_VOLTAGE_CHECK )
   \                     ??ZDApp_event_loop_4:
   \   000073   EE           MOV       A,R6
   \   000074   5400         ANL       A,#0x0
   \   000076   F8           MOV       R0,A
   \   000077   EF           MOV       A,R7
   \   000078   5480         ANL       A,#0x80
   \   00007A   F9           MOV       R1,A
   \   00007B   E8           MOV       A,R0
   \   00007C   49           ORL       A,R1
   \   00007D   6019         JZ        ??ZDApp_event_loop_5
    482              {
    483                nwkPollCount = 0;
   \   00007F   90....       MOV       DPTR,#nwkPollCount
   \   000082   7400         MOV       A,#0x0
   \   000084   F0           MOVX      @DPTR,A
   \   000085   A3           INC       DPTR
   \   000086   7400         MOV       A,#0x0
   \   000088   F0           MOVX      @DPTR,A
    484                OnBoard_CheckVoltage();
   \   000089                ; Setup parameters for call to function OnBoard_CheckVoltage
   \   000089   12....       LCALL     `??OnBoard_CheckVoltage::?relay`; Banked call to: OnBoard_CheckVoltage
   \   00008C   E9           MOV       A,R1
    485          
    486                return (events ^ ZDO_VOLTAGE_CHECK);
   \   00008D   EE           MOV       A,R6
   \   00008E   6400         XRL       A,#0x0
   \   000090   FA           MOV       R2,A
   \   000091   EF           MOV       A,R7
   \   000092   6480         XRL       A,#0x80
   \   000094   FB           MOV       R3,A
   \   000095   02....       LJMP      ??ZDApp_event_loop_3 & 0xFFFF
    487              }
    488            }
    489          
    490            if( events & ZDO_REJOIN_BACKOFF )
   \                     ??ZDApp_event_loop_5:
   \   000098   EE           MOV       A,R6
   \   000099   5400         ANL       A,#0x0
   \   00009B   F8           MOV       R0,A
   \   00009C   EF           MOV       A,R7
   \   00009D   5420         ANL       A,#0x20
   \   00009F   F9           MOV       R1,A
   \   0000A0   E8           MOV       A,R0
   \   0000A1   49           ORL       A,R1
   \   0000A2   6057         JZ        ??ZDApp_event_loop_6
    491            {
    492              if( devState == DEV_NWK_BACKOFF )
   \   0000A4   90....       MOV       DPTR,#devState
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   640C         XRL       A,#0xc
   \   0000AA   7023         JNZ       ??ZDApp_event_loop_7
    493              {
    494                ZDApp_ChangeState(DEV_NWK_DISC);
   \   0000AC                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000AC   7902         MOV       R1,#0x2
   \   0000AE   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    495                // Restart scan for rejoin
    496                ZDApp_StartJoiningCycle();
   \   0000B1                ; Setup parameters for call to function ZDApp_StartJoiningCycle
   \   0000B1   12....       LCALL     `??ZDApp_StartJoiningCycle::?relay`; Banked call to: ZDApp_StartJoiningCycle
   \   0000B4   E9           MOV       A,R1
    497                osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinScan );
   \   0000B5                ; Setup parameters for call to function osal_start_timerEx
   \   0000B5   90....       MOV       DPTR,#zgDefaultRejoinScan
   \   0000B8   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000BB   7A00         MOV       R2,#0x0
   \   0000BD   7B20         MOV       R3,#0x20
   \   0000BF   90....       MOV       DPTR,#ZDAppTaskID
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   F9           MOV       R1,A
   \   0000C4   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000C7   7404         MOV       A,#0x4
   \   0000C9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000CC   E9           MOV       A,R1
   \   0000CD   8021         SJMP      ??ZDApp_event_loop_8
    498              }
    499              else
    500              {
    501                // Rejoin backoff, silent period
    502                ZDApp_ChangeState(DEV_NWK_BACKOFF);
   \                     ??ZDApp_event_loop_7:
   \   0000CF                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000CF   790C         MOV       R1,#0xc
   \   0000D1   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    503                ZDApp_StopJoiningCycle();
   \   0000D4                ; Setup parameters for call to function ZDApp_StopJoiningCycle
   \   0000D4   12....       LCALL     `??ZDApp_StopJoiningCycle::?relay`; Banked call to: ZDApp_StopJoiningCycle
   \   0000D7   E9           MOV       A,R1
    504                osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinBackoff );
   \   0000D8                ; Setup parameters for call to function osal_start_timerEx
   \   0000D8   90....       MOV       DPTR,#zgDefaultRejoinBackoff
   \   0000DB   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000DE   7A00         MOV       R2,#0x0
   \   0000E0   7B20         MOV       R3,#0x20
   \   0000E2   90....       MOV       DPTR,#ZDAppTaskID
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   F9           MOV       R1,A
   \   0000E7   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000EA   7404         MOV       A,#0x4
   \   0000EC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000EF   E9           MOV       A,R1
    505              }
    506          
    507              return ( events ^ ZDO_REJOIN_BACKOFF);
   \                     ??ZDApp_event_loop_8:
   \   0000F0   EE           MOV       A,R6
   \   0000F1   6400         XRL       A,#0x0
   \   0000F3   FA           MOV       R2,A
   \   0000F4   EF           MOV       A,R7
   \   0000F5   6420         XRL       A,#0x20
   \   0000F7   FB           MOV       R3,A
   \   0000F8   02....       LJMP      ??ZDApp_event_loop_3 & 0xFFFF
    508            }
    509          
    510            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_6:
   \   0000FB   EE           MOV       A,R6
   \   0000FC   5410         ANL       A,#0x10
   \   0000FE   6032         JZ        ??ZDApp_event_loop_9
    511            {
    512              ZDO_UpdateNwkStatus( devState );
   \   000100                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   000100   90....       MOV       DPTR,#devState
   \   000103   E0           MOVX      A,@DPTR
   \   000104   F9           MOV       R1,A
   \   000105   12....       LCALL     `??ZDO_UpdateNwkStatus::?relay`; Banked call to: ZDO_UpdateNwkStatus
    513          
    514              // At start up, do one MTO route discovery if the device is a concentrator
    515              if ( zgConcentratorEnable == TRUE )
   \   000108   90....       MOV       DPTR,#zgConcentratorEnable
   \   00010B   E0           MOVX      A,@DPTR
   \   00010C   6401         XRL       A,#0x1
   \   00010E   7018         JNZ       ??ZDApp_event_loop_10
    516              {
    517                // Start next event
    518                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   000110                ; Setup parameters for call to function osal_start_timerEx
   \   000110   90....       MOV       DPTR,#__Constant_64
   \   000113   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000116   7A00         MOV       R2,#0x0
   \   000118   7B08         MOV       R3,#0x8
   \   00011A   90....       MOV       DPTR,#NWK_TaskID
   \   00011D   E0           MOVX      A,@DPTR
   \   00011E   F9           MOV       R1,A
   \   00011F   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000122   7404         MOV       A,#0x4
   \   000124   12....       LCALL     ?DEALLOC_XSTACK8
   \   000127   E9           MOV       A,R1
    519              }
    520          
    521              // Return unprocessed events
    522              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??ZDApp_event_loop_10:
   \   000128   EE           MOV       A,R6
   \   000129   6410         XRL       A,#0x10
   \   00012B   FA           MOV       R2,A
   \   00012C   EF           MOV       A,R7
   \   00012D   6400         XRL       A,#0x0
   \   00012F   FB           MOV       R3,A
   \   000130   8051         SJMP      ??ZDApp_event_loop_3
    523            }
    524          
    525            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_9:
   \   000132   EE           MOV       A,R6
   \   000133   5408         ANL       A,#0x8
   \   000135   600A         JZ        ??ZDApp_event_loop_11
    526            {
    527              // User defined logic
    528          
    529              // Return unprocessed events
    530              return (events ^ ZDO_COMMAND_CNF);
   \   000137   EE           MOV       A,R6
   \   000138   6408         XRL       A,#0x8
   \   00013A   FA           MOV       R2,A
   \   00013B   EF           MOV       A,R7
   \   00013C   6400         XRL       A,#0x0
   \   00013E   FB           MOV       R3,A
   \   00013F   8042         SJMP      ??ZDApp_event_loop_3
    531            }
    532          
    533            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_11:
   \   000141   EE           MOV       A,R6
   \   000142   5400         ANL       A,#0x0
   \   000144   F8           MOV       R0,A
   \   000145   EF           MOV       A,R7
   \   000146   5401         ANL       A,#0x1
   \   000148   F9           MOV       R1,A
   \   000149   E8           MOV       A,R0
   \   00014A   49           ORL       A,R1
   \   00014B   601D         JZ        ??ZDApp_event_loop_12
    534            {
    535              // Save only in valid state
    536              if ( _NIB.nwkState == NWK_ROUTER || _NIB.nwkState == NWK_ENDDEVICE )
   \   00014D   90....       MOV       DPTR,#_NIB + 35
   \   000150   E0           MOVX      A,@DPTR
   \   000151   6408         XRL       A,#0x8
   \   000153   6008         JZ        ??ZDApp_event_loop_13
   \   000155   90....       MOV       DPTR,#_NIB + 35
   \   000158   E0           MOVX      A,@DPTR
   \   000159   6404         XRL       A,#0x4
   \   00015B   7003         JNZ       ??ZDApp_event_loop_14
    537              {
    538                ZDApp_SaveNetworkStateEvt();
   \                     ??ZDApp_event_loop_13:
   \   00015D                ; Setup parameters for call to function ZDApp_SaveNetworkStateEvt
   \   00015D   12....       LCALL     `??ZDApp_SaveNetworkStateEvt::?relay`; Banked call to: ZDApp_SaveNetworkStateEvt
    539              }
    540          
    541              // Return unprocessed events
    542              return (events ^ ZDO_NWK_UPDATE_NV);
   \                     ??ZDApp_event_loop_14:
   \   000160   EE           MOV       A,R6
   \   000161   6400         XRL       A,#0x0
   \   000163   FA           MOV       R2,A
   \   000164   EF           MOV       A,R7
   \   000165   6401         XRL       A,#0x1
   \   000167   FB           MOV       R3,A
   \   000168   8019         SJMP      ??ZDApp_event_loop_3
    543            }
    544          
    545            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_12:
   \   00016A   EE           MOV       A,R6
   \   00016B   5404         ANL       A,#0x4
   \   00016D   600B         JZ        ??ZDApp_event_loop_15
    546            {
    547          #ifdef ZBA_FALLBACK_NWKKEY
    548              if ( devState == DEV_END_DEVICE_UNAUTH )
    549              {
    550                ZDSecMgrFallbackNwkKey();
    551              }
    552              else
    553          #endif
    554              {
    555                // Set the NV startup option to force a "new" join.
    556                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE | ZCD_STARTOPT_DEFAULT_CONFIG_STATE );
   \   00016F                ; Setup parameters for call to function zgWriteStartupOptions
   \   00016F   7A03         MOV       R2,#0x3
   \   000171   79FF         MOV       R1,#-0x1
   \   000173   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   \   000176   E9           MOV       A,R1
    557          
    558                // The device has been in the UNAUTH state, so reset
    559                // Note: there will be no return from this call
    560                SystemResetSoft();
   \   000177                ; Setup parameters for call to function Onboard_soft_reset
   \   000177   12....       LCALL     Onboard_soft_reset & 0xFFFF
    561              }
    562            }
    563          
    564          #if defined ( ZDP_BIND_VALIDATION )
    565            if ( events & ZDO_PENDING_BIND_REQ_EVT )
    566            {
    567          #if defined ( REFLECTOR )
    568              ZDApp_AgeOutPendingBindEntry();
    569          #endif
    570              // Return unprocessed events
    571              return (events ^ ZDO_PENDING_BIND_REQ_EVT);
    572            }
    573          #endif
    574          
    575            if ( ZG_SECURE_ENABLED )
    576            {
    577              return ( ZDApp_ProcessSecEvent( task_id, events ) );
   \                     ??ZDApp_event_loop_15:
   \   00017A                ; Setup parameters for call to function ZDApp_ProcessSecEvent
   \   00017A   EE           MOV       A,R6
   \   00017B   FA           MOV       R2,A
   \   00017C   EF           MOV       A,R7
   \   00017D   FB           MOV       R3,A
   \   00017E   A9..         MOV       R1,?V2
   \   000180   12....       LCALL     `??ZDApp_ProcessSecEvent::?relay`; Banked call to: ZDApp_ProcessSecEvent
   \                     ??ZDApp_event_loop_3:
   \   000183   7F06         MOV       R7,#0x6
   \   000185   02....       LJMP      ?BANKED_LEAVE_XDATA
    578            }
    579            else
    580            {
    581              // Discard or make more handlers
    582              return 0;
    583            }
    584          }
    585          
    586          /*********************************************************************
    587           * @fn      ZDApp_ProcessSecEvent()
    588           *
    589           * @brief   Process incoming security events.
    590           *
    591           * @param   task_id - Task ID
    592           * @param   events  - Bitmap of events
    593           *
    594           * @return  none
    595           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    596          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    597          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    598            (void)task_id;  // Intentionally unreferenced parameter
    599          
    600            if ( ZSTACK_ROUTER_BUILD )
    601            {
    602              if ( events & ZDO_NEW_DEVICE )
    603              {
    604                // process the new device event
    605                if ( ZDApp_NewDeviceList )
    606                {
    607                  ZDAppNewDevice_t *pNewDevice;
    608                  uint16 timeDelta;
    609          
    610                  (void) ZDSecMgrNewDeviceEvent( ZDApp_NewDeviceList->shortAddr );
    611          
    612                  pNewDevice = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
    613                  osal_mem_free( ZDApp_NewDeviceList );
    614                  ZDApp_NewDeviceList = pNewDevice;
    615          
    616                  if ( pNewDevice )
    617                  {
    618                    timeDelta = pNewDevice->timeDelta;
    619                    pNewDevice = pNewDevice->next;
    620          
    621                    while ( pNewDevice )
    622                    {
    623                      pNewDevice->timeDelta -= timeDelta;
    624                      pNewDevice = pNewDevice->next;
    625                    }
    626          
    627                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, timeDelta );
    628                  }
    629                }
    630          
    631                // Return unprocessed events
    632                return (events ^ ZDO_NEW_DEVICE);
    633              }
    634            }
    635          
    636            if ( events & ZDO_DEVICE_AUTH )
   \   00000B   EE           MOV       A,R6
   \   00000C   5480         ANL       A,#0x80
   \   00000E   601C         JZ        ??ZDApp_ProcessSecEvent_0
    637            {
    638              ZDApp_StoreNwkSecMaterial();
   \   000010                ; Setup parameters for call to function ZDApp_StoreNwkSecMaterial
   \   000010   12....       LCALL     `??ZDApp_StoreNwkSecMaterial::?relay`; Banked call to: ZDApp_StoreNwkSecMaterial
    639              
    640              ZDApp_DeviceAuthEvt();
   \   000013                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   000013   12....       LCALL     `??ZDApp_DeviceAuthEvt::?relay`; Banked call to: ZDApp_DeviceAuthEvt
    641          
    642              bdb_setNodeIsOnANetwork(TRUE);
   \   000016                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000016   7901         MOV       R1,#0x1
   \   000018   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
    643              
    644              bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, TRUE);
   \   00001B                ; Setup parameters for call to function bdb_reportCommissioningState
   \   00001B   7A01         MOV       R2,#0x1
   \   00001D   7903         MOV       R1,#0x3
   \   00001F   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    645          
    646              // Return unprocessed events
    647              return (events ^ ZDO_DEVICE_AUTH);
   \   000022   EE           MOV       A,R6
   \   000023   6480         XRL       A,#0x80
   \   000025   FA           MOV       R2,A
   \   000026   EF           MOV       A,R7
   \   000027   6400         XRL       A,#0x0
   \   000029   FB           MOV       R3,A
   \   00002A   804F         SJMP      ??ZDApp_ProcessSecEvent_1
    648            }
    649          
    650            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   00002C   EE           MOV       A,R6
   \   00002D   5400         ANL       A,#0x0
   \   00002F   F8           MOV       R0,A
   \   000030   EF           MOV       A,R7
   \   000031   5402         ANL       A,#0x2
   \   000033   F9           MOV       R1,A
   \   000034   E8           MOV       A,R0
   \   000035   49           ORL       A,R1
   \   000036   600D         JZ        ??ZDApp_ProcessSecEvent_2
    651            {
    652              ZDApp_SaveNwkKey();
   \   000038                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000038   12....       LCALL     `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    653          
    654              // Return unprocessed events
    655              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \   00003B   EE           MOV       A,R6
   \   00003C   6400         XRL       A,#0x0
   \   00003E   FA           MOV       R2,A
   \   00003F   EF           MOV       A,R7
   \   000040   6402         XRL       A,#0x2
   \   000042   FB           MOV       R3,A
   \   000043   8036         SJMP      ??ZDApp_ProcessSecEvent_1
    656            }
    657          
    658            if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_2:
   \   000045   EE           MOV       A,R6
   \   000046   5400         ANL       A,#0x0
   \   000048   F8           MOV       R0,A
   \   000049   EF           MOV       A,R7
   \   00004A   5408         ANL       A,#0x8
   \   00004C   F9           MOV       R1,A
   \   00004D   E8           MOV       A,R0
   \   00004E   49           ORL       A,R1
   \   00004F   600D         JZ        ??ZDApp_ProcessSecEvent_3
    659            {
    660          #if defined (NV_RESTORE)
    661              ZDSecMgrSaveApsLinkKey();
   \   000051                ; Setup parameters for call to function ZDSecMgrSaveApsLinkKey
   \   000051   12....       LCALL     `??ZDSecMgrSaveApsLinkKey::?relay`; Banked call to: ZDSecMgrSaveApsLinkKey
    662          #endif // (NV_RESTORE)
    663          
    664              // Return unprocessed events
    665              return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
   \   000054   EE           MOV       A,R6
   \   000055   6400         XRL       A,#0x0
   \   000057   FA           MOV       R2,A
   \   000058   EF           MOV       A,R7
   \   000059   6408         XRL       A,#0x8
   \   00005B   FB           MOV       R3,A
   \   00005C   801D         SJMP      ??ZDApp_ProcessSecEvent_1
    666            }
    667          
    668            if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_3:
   \   00005E   EE           MOV       A,R6
   \   00005F   5400         ANL       A,#0x0
   \   000061   F8           MOV       R0,A
   \   000062   EF           MOV       A,R7
   \   000063   5404         ANL       A,#0x4
   \   000065   F9           MOV       R1,A
   \   000066   E8           MOV       A,R0
   \   000067   49           ORL       A,R1
   \   000068   600D         JZ        ??ZDApp_ProcessSecEvent_4
    669            {
    670              ZDSecMgrSaveTCLinkKey();
   \   00006A                ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
   \   00006A   12....       LCALL     `??ZDSecMgrSaveTCLinkKey::?relay`; Banked call to: ZDSecMgrSaveTCLinkKey
    671          
    672              // Return unprocessed events
    673              return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
   \   00006D   EE           MOV       A,R6
   \   00006E   6400         XRL       A,#0x0
   \   000070   FA           MOV       R2,A
   \   000071   EF           MOV       A,R7
   \   000072   6404         XRL       A,#0x4
   \   000074   FB           MOV       R3,A
   \   000075   8004         SJMP      ??ZDApp_ProcessSecEvent_1
    674            }
    675          
    676            // Discard or make more handlers
    677            return 0;
   \                     ??ZDApp_ProcessSecEvent_4:
   \   000077   7A00         MOV       R2,#0x0
   \   000079   7B00         MOV       R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_1:
   \   00007B   7F01         MOV       R7,#0x1
   \   00007D   02....       LJMP      ?BANKED_LEAVE_XDATA
    678          }
    679          
    680          /*********************************************************************
    681           * Application Functions
    682           */
    683          
    684          /*********************************************************************
    685           * @fn      ZDOInitDevice
    686           *
    687           * @brief   Start the device in the network.  This function will read
    688           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    689           *   restore the network state of the device.
    690           *
    691           * @param   startDelay - timeDelay to start device (in milliseconds).
    692           *                       There is a jitter added to this delay:
    693           *                       ((NWK_START_DELAY + startDelay)
    694           *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    695           *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
    696           *                       this function will hold the network init. Application
    697           *                       can start the device.
    698           * #@param  mode       - ZDO_INITDEV_CENTRALIZED or ZDO_INITDEV_DISTRIBUTED to specify
    699           *                       which mode should the device start with (only has effect on 
    700           *                       Router devices)
    701           *
    702           * NOTE:    If the application would like to force a "new" join, the
    703           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    704           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    705           *          this function. "new" join means to not restore the network
    706           *          state of the device. Use zgWriteStartupOptions() to set these
    707           *          options.
    708           *
    709           * @return
    710           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    711           *          restored.
    712           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    713           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    714           *          it could mean that there was no network state to restore.
    715           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    716          uint8 ZDOInitDeviceEx( uint16 startDelay, uint8 mode)
   \                     ZDOInitDeviceEx:
    717          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   E9           MOV       A,R1
   \   00000F   FF           MOV       R7,A
    718            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000010   7E01         MOV       R6,#0x1
    719            uint16 extendedDelay = 0;
   \   000012   75..00       MOV       ?V0,#0x0
   \   000015   75..00       MOV       ?V1,#0x0
    720            
    721            if ( devState == DEV_HOLD )
   \   000018   90....       MOV       DPTR,#devState
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   701A         JNZ       ??ZDOInitDeviceEx_0
    722            {
    723              byte temp = FALSE;
   \   00001E   7401         MOV       A,#0x1
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   7400         MOV       A,#0x0
   \   000025   F0           MOVX      @DPTR,A
    724              // Initialize the RAM items table, in case an NV item has been updated.
    725              zgInitItems( FALSE );
   \   000026                ; Setup parameters for call to function zgInitItems
   \   000026   7900         MOV       R1,#0x0
   \   000028   12....       LCALL     `??zgInitItems::?relay`; Banked call to: zgInitItems
    726              
    727              //Turn off the radio
    728              ZMacSetReq(ZMacRxOnIdle, &temp);
   \   00002B                ; Setup parameters for call to function ZMacSetReq
   \   00002B   7401         MOV       A,#0x1
   \   00002D   12....       LCALL     ?XSTACK_DISP101_8
   \   000030   7952         MOV       R1,#0x52
   \   000032   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000035   E9           MOV       A,R1
   \   000036   8013         SJMP      ??ZDOInitDeviceEx_1
    729            }
    730            else
    731            {
    732              byte temp = TRUE;
   \                     ??ZDOInitDeviceEx_0:
   \   000038   85..82       MOV       DPL,?XSP + 0
   \   00003B   85..83       MOV       DPH,?XSP + 1
   \   00003E   7401         MOV       A,#0x1
   \   000040   F0           MOVX      @DPTR,A
    733              //Turn on the radio
    734              ZMacSetReq(ZMacRxOnIdle, &temp);
   \   000041                ; Setup parameters for call to function ZMacSetReq
   \   000041   AA..         MOV       R2,?XSP + 0
   \   000043   AB..         MOV       R3,?XSP + 1
   \   000045   7952         MOV       R1,#0x52
   \   000047   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   00004A   E9           MOV       A,R1
    735            }
    736          
    737            ZDConfig_InitDescriptors();
   \                     ??ZDOInitDeviceEx_1:
   \   00004B                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   00004B   12....       LCALL     `??ZDConfig_InitDescriptors::?relay`; Banked call to: ZDConfig_InitDescriptors
    738            //devtag.071807.todo - fix this temporary solution
    739            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   00004E   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000051   E0           MOVX      A,@DPTR
   \   000052   90....       MOV       DPTR,#_NIB + 14
   \   000055   F0           MOVX      @DPTR,A
    740          
    741          #if defined ( NV_RESTORE )
    742            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    743            // while booting to skip past NV Restore.
    744            if ( zdappHoldKeys == SW_BYPASS_NV )
   \   000056   90....       MOV       DPTR,#zdappHoldKeys
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   6404         XRL       A,#0x4
   \   00005C   700A         JNZ       ??ZDOInitDeviceEx_2
    745            {
    746              zdappHoldKeys = 0;   // Only once
   \   00005E   90....       MOV       DPTR,#zdappHoldKeys
   \   000061   7400         MOV       A,#0x0
   \   000063   F0           MOVX      @DPTR,A
    747              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000064   7E01         MOV       R6,#0x1
   \   000066   8011         SJMP      ??ZDOInitDeviceEx_3
    748            }
    749            else
    750            {
    751          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
    752              if ( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL )
   \                     ??ZDOInitDeviceEx_2:
   \   000068   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   6402         XRL       A,#0x2
   \   00006E   7004         JNZ       ??ZDOInitDeviceEx_4
    753              {
    754                networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000070   7E00         MOV       R6,#0x0
   \   000072   8005         SJMP      ??ZDOInitDeviceEx_3
    755              }
    756              else
    757              {
    758                // Determine if NV should be restored
    759                networkStateNV = ZDApp_ReadNetworkRestoreState();
   \                     ??ZDOInitDeviceEx_4:
   \   000074                ; Setup parameters for call to function ZDApp_ReadNetworkRestoreState
   \   000074   12....       LCALL     `??ZDApp_ReadNetworkRestoreState::?relay`; Banked call to: ZDApp_ReadNetworkRestoreState
   \   000077   E9           MOV       A,R1
   \   000078   FE           MOV       R6,A
    760              }
    761          #else
    762              // Determine if NV should be restored
    763              networkStateNV = ZDApp_ReadNetworkRestoreState();
    764          #endif
    765            }
    766          
    767            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
   \                     ??ZDOInitDeviceEx_3:
   \   000079   EE           MOV       A,R6
   \   00007A   7041         JNZ       ??ZDOInitDeviceEx_5
    768            {
    769              networkStateNV = ZDApp_RestoreNetworkState();
   \   00007C                ; Setup parameters for call to function ZDApp_RestoreNetworkState
   \   00007C   12....       LCALL     `??ZDApp_RestoreNetworkState::?relay`; Banked call to: ZDApp_RestoreNetworkState
   \   00007F   E9           MOV       A,R1
   \   000080   FE           MOV       R6,A
    770          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
    771              if ( ( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL ) && ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE ) )
   \   000081   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000084   E0           MOVX      A,@DPTR
   \   000085   6402         XRL       A,#0x2
   \   000087   7007         JNZ       ??ZDOInitDeviceEx_6
   \   000089   7401         MOV       A,#0x1
   \   00008B   6E           XRL       A,R6
   \   00008C   7002         JNZ       ??ZDOInitDeviceEx_6
    772              {
    773                networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   00008E   7E00         MOV       R6,#0x0
    774              }
    775          #endif
    776              runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
   \                     ??ZDOInitDeviceEx_6:
   \   000090   75..01       MOV       ?V4,#0x1
   \   000093   75..00       MOV       ?V5,#0x0
   \   000096   75..00       MOV       ?V6,#0x0
   \   000099   75..00       MOV       ?V7,#0x0
   \   00009C   90....       MOV       DPTR,#_NIB + 22
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   78..         MOV       R0,#?V4
   \   0000A2   12....       LCALL     ?L_SHL
   \   0000A5   AA..         MOV       R2,?V4
   \   0000A7   AB..         MOV       R3,?V5
   \   0000A9   AC..         MOV       R4,?V6
   \   0000AB   AD..         MOV       R5,?V7
   \   0000AD   90....       MOV       DPTR,#runtimeChannel
   \   0000B0   EA           MOV       A,R2
   \   0000B1   F0           MOVX      @DPTR,A
   \   0000B2   A3           INC       DPTR
   \   0000B3   EB           MOV       A,R3
   \   0000B4   F0           MOVX      @DPTR,A
   \   0000B5   A3           INC       DPTR
   \   0000B6   EC           MOV       A,R4
   \   0000B7   F0           MOVX      @DPTR,A
   \   0000B8   A3           INC       DPTR
   \   0000B9   ED           MOV       A,R5
   \   0000BA   F0           MOVX      @DPTR,A
   \   0000BB   800A         SJMP      ??ZDOInitDeviceEx_7
    777            }
    778            else
    779            {
    780              // Wipe out the network state in NV
    781              NLME_InitNV();
   \                     ??ZDOInitDeviceEx_5:
   \   0000BD                ; Setup parameters for call to function NLME_InitNV
   \   0000BD   12....       LCALL     `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
   \   0000C0   E9           MOV       A,R1
    782              NLME_SetDefaultNV();
   \   0000C1                ; Setup parameters for call to function NLME_SetDefaultNV
   \   0000C1   12....       LCALL     `??NLME_SetDefaultNV::?relay`; Banked call to: NLME_SetDefaultNV
    783              // clear NWK key values
    784              ZDSecMgrClearNVKeyValues();
   \   0000C4                ; Setup parameters for call to function ZDSecMgrClearNVKeyValues
   \   0000C4   12....       LCALL     `??ZDSecMgrClearNVKeyValues::?relay`; Banked call to: ZDSecMgrClearNVKeyValues
    785            }
    786          #endif
    787          
    788            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
   \                     ??ZDOInitDeviceEx_7:
   \   0000C7   7401         MOV       A,#0x1
   \   0000C9   6E           XRL       A,R6
   \   0000CA   6003         JZ        $+5
   \   0000CC   02....       LJMP      ??ZDOInitDeviceEx_8 & 0xFFFF
    789            {
    790              ZDAppDetermineDeviceType();
   \   0000CF                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   0000CF   12....       LCALL     `??ZDAppDetermineDeviceType::?relay`; Banked call to: ZDAppDetermineDeviceType
    791          
    792              // Only delay if joining network - not restoring network state
    793              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    794                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   0000D2                ; Setup parameters for call to function osal_rand
   \   0000D2   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   0000D5   8A..         MOV       ?V4,R2
   \   0000D7   8B..         MOV       ?V5,R3
   \   0000D9   E5..         MOV       A,?V4
   \   0000DB   547F         ANL       A,#0x7f
   \   0000DD   F8           MOV       R0,A
   \   0000DE   E5..         MOV       A,?V5
   \   0000E0   5400         ANL       A,#0x0
   \   0000E2   F9           MOV       R1,A
   \   0000E3   E5..         MOV       A,?V2
   \   0000E5   28           ADD       A,R0
   \   0000E6   F8           MOV       R0,A
   \   0000E7   E5..         MOV       A,?V3
   \   0000E9   39           ADDC      A,R1
   \   0000EA   F9           MOV       R1,A
   \   0000EB   E8           MOV       A,R0
   \   0000EC   2464         ADD       A,#0x64
   \   0000EE   F8           MOV       R0,A
   \   0000EF   5001         JNC       ??ZDOInitDeviceEx_9
   \   0000F1   09           INC       R1
   \                     ??ZDOInitDeviceEx_9:
   \   0000F2   88..         MOV       ?V0,R0
   \   0000F4   89..         MOV       ?V1,R1
    795          
    796              runtimeChannel = zgDefaultChannelList;
   \   0000F6   90....       MOV       DPTR,#zgDefaultChannelList
   \   0000F9   12....       LCALL     ?XLOAD_R0123
   \   0000FC   90....       MOV       DPTR,#runtimeChannel
   \   0000FF   12....       LCALL     ?XSTORE_R0123
    797              
    798              // Set the NV startup option to force a "new" join.
    799              zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000102                ; Setup parameters for call to function zgWriteStartupOptions
   \   000102   7A02         MOV       R2,#0x2
   \   000104   79FF         MOV       R1,#-0x1
   \   000106   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   \   000109   E9           MOV       A,R1
    800              
    801          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
    802              gp_ProxyTblInit( TRUE );
    803          #elif defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
    804              uint16 i;
    805              uint8 status;
    806              uint8 emptyEntry[] = {0xFF, 0xFF, /* Options 16-bit bitmap */  \
    807                                   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, /*GPD ID Unsigned 32-bit integer/ IEEE address */  \
    808                                   0x00, /* Endpoint Unsigned 8-bit integer */  \
    809                                   0xFF, 0xFF, /* GPD Assigned Alias Unsigned 16-bit integer */  \
    810                                   0xFF, /* Security Options 8-bit bitmap */  \
    811                                   0xFF, 0xFF, 0xFF, 0xFF, /* GPD security frame counter Unsigned 32-bit Integer */  \
    812                                   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, /* GPD key Security key */  \
    813                                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* Lightweight sink address list sequence of octets */  \
    814                                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
    815                                   0x00, /* Free group entries flag */  \
    816                                   0x00, 0x00, 0x00, 0x00, /* Sink group list sequence of octets */  \
    817                                   0x00, 0x00, 0x00, 0x00,  \
    818                                   0x00, /* Groupcast radius Unsigned 8-bit integer */  \
    819                                   0x00 /* Search Counter Unsigned 8-bit integer */  \
    820                                   };
    821              for( i = ZCD_NV_PROXY_TABLE_START; i <= ZCD_NV_PROXY_TABLE_END; i++ )
    822              {
    823                status = osal_nv_write( ( ZCD_NV_PROXY_TABLE_START + i ), 0,
    824                                                    sizeof(emptyEntry), &emptyEntry );
    825                
    826                if( status != SUCCESS )
    827                {
    828                  break;
    829                }
    830              }
    831          #endif
    832          
    833              _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   00010A   90....       MOV       DPTR,#_NIB + 20
   \   00010D   74FE         MOV       A,#-0x2
   \   00010F   F0           MOVX      @DPTR,A
   \   000110   A3           INC       DPTR
   \   000111   74FF         MOV       A,#-0x1
   \   000113   F0           MOVX      @DPTR,A
    834              _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
   \   000114   90....       MOV       DPTR,#_NIB + 23
   \   000117   74FE         MOV       A,#-0x2
   \   000119   F0           MOVX      @DPTR,A
   \   00011A   A3           INC       DPTR
   \   00011B   74FF         MOV       A,#-0x1
   \   00011D   F0           MOVX      @DPTR,A
    835              _NIB.nwkPanId = 0xFFFF;
   \   00011E   90....       MOV       DPTR,#_NIB + 33
   \   000121   74FF         MOV       A,#-0x1
   \   000123   F0           MOVX      @DPTR,A
   \   000124   A3           INC       DPTR
   \   000125   74FF         MOV       A,#-0x1
   \   000127   F0           MOVX      @DPTR,A
    836              osal_memset(_NIB.extendedPANID, 0, Z_EXTADDR_LEN);
   \   000128                ; Setup parameters for call to function osal_memset
   \   000128   7C08         MOV       R4,#0x8
   \   00012A   7D00         MOV       R5,#0x0
   \   00012C   7900         MOV       R1,#0x0
   \   00012E   7A..         MOV       R2,#(_NIB + 53) & 0xff
   \   000130   7B..         MOV       R3,#((_NIB + 53) >> 8) & 0xff
   \   000132   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    837              NLME_SetUpdateID( 0 );
   \   000135                ; Setup parameters for call to function NLME_SetUpdateID
   \   000135   7900         MOV       R1,#0x0
   \   000137   12....       LCALL     `??NLME_SetUpdateID::?relay`; Banked call to: NLME_SetUpdateID
    838              
    839              if(ZG_DEVICE_RTRONLY_TYPE)
   \   00013A   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00013D   E0           MOVX      A,@DPTR
   \   00013E   6401         XRL       A,#0x1
   \   000140   7024         JNZ       ??ZDOInitDeviceEx_10
    840              {
    841                if(1 == mode)
   \   000142   7401         MOV       A,#0x1
   \   000144   6F           XRL       A,R7
   \   000145   7009         JNZ       ??ZDOInitDeviceEx_11
    842                {
    843                  //Update TC address as distributed network (TC none)
    844                  ZDSecMgrUpdateTCAddress(0);
   \   000147                ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
   \   000147   7A00         MOV       R2,#0x0
   \   000149   7B00         MOV       R3,#0x0
   \   00014B   12....       LCALL     `??ZDSecMgrUpdateTCAddress::?relay`; Banked call to: ZDSecMgrUpdateTCAddress
   \   00014E   8016         SJMP      ??ZDOInitDeviceEx_10
    845                }
    846                else
    847                {
    848                  // Centralized mode
    849                  uint8 tmp[Z_EXTADDR_LEN];
    850                  osal_memset(tmp,0x00,Z_EXTADDR_LEN);
   \                     ??ZDOInitDeviceEx_11:
   \   000150                ; Setup parameters for call to function osal_memset
   \   000150   7C08         MOV       R4,#0x8
   \   000152   7D00         MOV       R5,#0x0
   \   000154   7900         MOV       R1,#0x0
   \   000156   7402         MOV       A,#0x2
   \   000158   12....       LCALL     ?XSTACK_DISP101_8
   \   00015B   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    851                  ZDSecMgrUpdateTCAddress(tmp);
   \   00015E                ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
   \   00015E   7402         MOV       A,#0x2
   \   000160   12....       LCALL     ?XSTACK_DISP101_8
   \   000163   12....       LCALL     `??ZDSecMgrUpdateTCAddress::?relay`; Banked call to: ZDSecMgrUpdateTCAddress
    852                }
    853              }
    854          
    855              // Update NIB in NV
    856              osal_nv_write( ZCD_NV_NIB, 0, sizeof( nwkIB_t ), &_NIB );
   \                     ??ZDOInitDeviceEx_10:
   \   000166                ; Setup parameters for call to function osal_nv_write
   \   000166   75....       MOV       ?V4,#_NIB & 0xff
   \   000169   75....       MOV       ?V5,#(_NIB >> 8) & 0xff
   \   00016C   78..         MOV       R0,#?V4
   \   00016E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000171   75..6E       MOV       ?V4,#0x6e
   \   000174   75..00       MOV       ?V5,#0x0
   \   000177   78..         MOV       R0,#?V4
   \   000179   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00017C   7C00         MOV       R4,#0x0
   \   00017E   7D00         MOV       R5,#0x0
   \   000180   7A21         MOV       R2,#0x21
   \   000182   7B00         MOV       R3,#0x0
   \   000184   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000187   7404         MOV       A,#0x4
   \   000189   12....       LCALL     ?DEALLOC_XSTACK8
   \   00018C   E9           MOV       A,R1
    857          
    858              // Reset the NV startup option to resume from NV by clearing
    859              // the "New" join option.
    860              zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   00018D                ; Setup parameters for call to function zgWriteStartupOptions
   \   00018D   7A02         MOV       R2,#0x2
   \   00018F   7900         MOV       R1,#0x0
   \   000191   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   \   000194   E9           MOV       A,R1
    861            
    862            }
    863          
    864            // Initialize the security for type of device
    865            ZDApp_SecInit( networkStateNV );
   \                     ??ZDOInitDeviceEx_8:
   \   000195                ; Setup parameters for call to function ZDApp_SecInit
   \   000195   EE           MOV       A,R6
   \   000196   F9           MOV       R1,A
   \   000197   12....       LCALL     `??ZDApp_SecInit::?relay`; Banked call to: ZDApp_SecInit
    866          
    867            if( ZDO_INIT_HOLD_NWK_START != startDelay )
   \   00019A   74FF         MOV       A,#-0x1
   \   00019C   65..         XRL       A,?V2
   \   00019E   7004         JNZ       ??ZDOInitDeviceEx_12
   \   0001A0   74FF         MOV       A,#-0x1
   \   0001A2   65..         XRL       A,?V3
   \                     ??ZDOInitDeviceEx_12:
   \   0001A4   6010         JZ        ??ZDOInitDeviceEx_13
    868            {
    869              devState = DEV_INIT;    // Remove the Hold state
   \   0001A6   90....       MOV       DPTR,#devState
   \   0001A9   7401         MOV       A,#0x1
   \   0001AB   F0           MOVX      @DPTR,A
    870          
    871              // Initialize leave control logic
    872              ZDApp_LeaveCtrlInit();
   \   0001AC                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   0001AC   12....       LCALL     `??ZDApp_LeaveCtrlInit::?relay`; Banked call to: ZDApp_LeaveCtrlInit
    873          
    874              // Trigger the network start
    875              ZDApp_NetworkInit( extendedDelay );
   \   0001AF                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0001AF   AA..         MOV       R2,?V0
   \   0001B1   AB..         MOV       R3,?V1
   \   0001B3   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
    876            }
    877          
    878            // set broadcast address mask to support broadcast filtering
    879            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \                     ??ZDOInitDeviceEx_13:
   \   0001B6                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   0001B6   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0001B9   E0           MOVX      A,@DPTR
   \   0001BA   F9           MOV       R1,A
   \   0001BB   12....       LCALL     `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
    880          
    881            return ( networkStateNV );
   \   0001BE   EE           MOV       A,R6
   \   0001BF   F9           MOV       R1,A
   \   0001C0   740A         MOV       A,#0xa
   \   0001C2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001C5   7F08         MOV       R7,#0x8
   \   0001C7   02....       LJMP      ?BANKED_LEAVE_XDATA
    882          }
    883          
    884          /*********************************************************************
    885           * @fn      ZDApp_ReadNetworkRestoreState
    886           *
    887           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    888           *          or not to restore the network state.
    889           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    890           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    891           *
    892           * @param   none
    893           *
    894           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    895           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    896           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    897           *          ZCD_NV_STARTUP_OPTION
    898           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    899          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    900          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    901            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV       R6,#0x0
    902          
    903            // Look for the New Network State option.
    904            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL     `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00000A   E9           MOV       A,R1
   \   00000B   F8           MOV       R0,A
   \   00000C   E8           MOV       A,R0
   \   00000D   A2E1         MOV       C,0xE0 /* A   */.1
   \   00000F   5007         JNC       ??ZDApp_ReadNetworkRestoreState_0
    905            {
    906              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000011   7E01         MOV       R6,#0x1
    907              bdb_setNodeIsOnANetwork(FALSE);
   \   000013                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000013   7900         MOV       R1,#0x0
   \   000015   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
    908            }
    909          
    910            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000018   EE           MOV       A,R6
   \   000019   F9           MOV       R1,A
   \   00001A   7F01         MOV       R7,#0x1
   \   00001C   02....       LJMP      ?BANKED_LEAVE_XDATA
    911          }
    912          
    913          /*********************************************************************
    914           * @fn      ZDAppDetermineDeviceType()
    915           *
    916           * @brief   Determines the type of device to start.
    917           *
    918           *          Looks at zgDeviceLogicalType and determines what type of
    919           *          device to start.  The types are:
    920           *            ZG_DEVICETYPE_COORDINATOR
    921           *            ZG_DEVICETYPE_ROUTER
    922           *            ZG_DEVICETYPE_ENDDEVICE
    923           *
    924           * @param   none
    925           *
    926           * @return  none
    927           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    928          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    929          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    930            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX      A,@DPTR
   \   000008   700F         JNZ       ??ZDAppDetermineDeviceType_0
    931            {
    932              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   90....       MOV       DPTR,#devStartMode
   \   00000D   7402         MOV       A,#0x2
   \   00000F   F0           MOVX      @DPTR,A
    933              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX      A,@DPTR
   \   000014   54F8         ANL       A,#0xf8
   \   000016   F0           MOVX      @DPTR,A
   \   000017   8048         SJMP      ??ZDAppDetermineDeviceType_1
    934            }
    935            else
    936            {
    937              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000019   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   6401         XRL       A,#0x1
   \   00001F   700E         JNZ       ??ZDAppDetermineDeviceType_2
    938                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   000021   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000024   E0           MOVX      A,@DPTR
   \   000025   54F8         ANL       A,#0xf8
   \   000027   4401         ORL       A,#0x1
   \   000029   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   8014         SJMP      ??ZDAppDetermineDeviceType_3
    939              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   00002F   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000032   E0           MOVX      A,@DPTR
   \   000033   6402         XRL       A,#0x2
   \   000035   700C         JNZ       ??ZDAppDetermineDeviceType_3
    940                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000037   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   54F8         ANL       A,#0xf8
   \   00003D   4402         ORL       A,#0x2
   \   00003F   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000042   F0           MOVX      @DPTR,A
    941          
    942              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    943              // The device shall do rejoin the network. Otherwise, do normal join
    944              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_3:
   \   000043                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000043   7A..         MOV       R2,#AIB_apsUseExtendedPANID & 0xff
   \   000045   7B..         MOV       R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   000047   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00004A   E9           MOV       A,R1
   \   00004B   7008         JNZ       ??ZDAppDetermineDeviceType_4
    945              {
    946                devStartMode = MODE_JOIN;     // Assume joining
   \   00004D   90....       MOV       DPTR,#devStartMode
   \   000050   7400         MOV       A,#0x0
   \   000052   F0           MOVX      @DPTR,A
   \   000053   800C         SJMP      ??ZDAppDetermineDeviceType_1
    947              }
    948              else
    949              {
    950                devStartMode = MODE_REJOIN;
   \                     ??ZDAppDetermineDeviceType_4:
   \   000055   90....       MOV       DPTR,#devStartMode
   \   000058   7403         MOV       A,#0x3
   \   00005A   F0           MOVX      @DPTR,A
    951                prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \   00005B   90....       MOV       DPTR,#prevDevState
   \   00005E   7404         MOV       A,#0x4
   \   000060   F0           MOVX      @DPTR,A
    952              }
    953            }
    954          }
   \                     ??ZDAppDetermineDeviceType_1:
   \   000061   D083         POP       DPH
   \   000063   D082         POP       DPL
   \   000065   02....       LJMP      ?BRET
    955          
    956          /*********************************************************************
    957           * @fn      ZDApp_NetworkStartEvt()
    958           *
    959           * @brief   Process the Network Start Event
    960           *
    961           * @param   none
    962           *
    963           * @return  none
    964           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    965          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    966          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    967            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV       DPTR,#nwkStatus
   \   000007   E0           MOVX      A,@DPTR
   \   000008   7052         JNZ       ??ZDApp_NetworkStartEvt_0
    968            {
    969              // Successfully started a ZigBee network
    970              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV       DPTR,#devState
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   6408         XRL       A,#0x8
   \   000010   7036         JNZ       ??ZDApp_NetworkStartEvt_1
    971              {
    972                //save NIB to NV before child joins if NV_RESTORE is defined
    973                ZDApp_NwkWriteNVRequest();
   \   000012                ; Setup parameters for call to function AddrMgrWriteNVRequest
   \   000012   12....       LCALL     `??AddrMgrWriteNVRequest::?relay`; Banked call to: AddrMgrWriteNVRequest
    974                ZDApp_ChangeState( DEV_ZB_COORD );
   \   000015                ; Setup parameters for call to function ZDApp_ChangeState
   \   000015   7909         MOV       R1,#0x9
   \   000017   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    975                
    976                if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FORMATION)
   \   00001A   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   6405         XRL       A,#0x5
   \   000020   700A         JNZ       ??ZDApp_NetworkStartEvt_2
    977                {
    978                  bdb_nwkFormationAttempt(TRUE);
   \   000022                ; Setup parameters for call to function bdb_nwkFormationAttempt
   \   000022   7901         MOV       R1,#0x1
   \   000024   12....       LCALL     `??bdb_nwkFormationAttempt::?relay`; Banked call to: bdb_nwkFormationAttempt
    979                  ZDApp_StoreNwkSecMaterial();
   \   000027                ; Setup parameters for call to function ZDApp_StoreNwkSecMaterial
   \   000027   12....       LCALL     `??ZDApp_StoreNwkSecMaterial::?relay`; Banked call to: ZDApp_StoreNwkSecMaterial
   \   00002A   800F         SJMP      ??ZDApp_NetworkStartEvt_3
    980                }
    981                else if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_INITIALIZATION)
   \                     ??ZDApp_NetworkStartEvt_2:
   \   00002C   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   6407         XRL       A,#0x7
   \   000032   7007         JNZ       ??ZDApp_NetworkStartEvt_3
    982                {
    983                  bdb_reportCommissioningState(BDB_INITIALIZATION,TRUE);
   \   000034                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000034   7A01         MOV       R2,#0x1
   \   000036   7907         MOV       R1,#0x7
   \   000038   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    984                }
    985          
    986                if ( zgChildAgingEnable == TRUE )
   \                     ??ZDApp_NetworkStartEvt_3:
   \   00003B   90....       MOV       DPTR,#zgChildAgingEnable
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   6401         XRL       A,#0x1
   \   000041   7012         JNZ       ??ZDApp_NetworkStartEvt_4
    987                {
    988                  // Once the device has changed its state to a COORDINATOR set the timer to send
    989                  // Parent annce
    990                  ZDApp_SetParentAnnceTimer();
   \   000043                ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
   \   000043   12....       LCALL     `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
   \   000046   800D         SJMP      ??ZDApp_NetworkStartEvt_4
    991                }
    992              }
    993              else
    994              {
    995                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000048                ; Setup parameters for call to function osal_set_event
   \   000048   7A10         MOV       R2,#0x10
   \   00004A   7B00         MOV       R3,#0x0
   \   00004C   90....       MOV       DPTR,#ZDAppTaskID
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   F9           MOV       R1,A
   \   000051   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000054   E9           MOV       A,R1
    996              }
    997          
    998              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_NetworkStartEvt_4:
   \   000055                ; Setup parameters for call to function osal_pwrmgr_device
   \   000055   7900         MOV       R1,#0x0
   \   000057   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
   \   00005A   803C         SJMP      ??ZDApp_NetworkStartEvt_5
    999            }
   1000            else
   1001            {
   1002              // Try again with a higher energy threshold
   1003              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00005C                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00005C   12....       LCALL     `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   00005F   E9           MOV       A,R1
   \   000060   F8           MOV       R0,A
   \   000061   7900         MOV       R1,#0x0
   \   000063   E8           MOV       A,R0
   \   000064   2410         ADD       A,#0x10
   \   000066   F8           MOV       R0,A
   \   000067   5001         JNC       ??ZDApp_NetworkStartEvt_6
   \   000069   09           INC       R1
   \                     ??ZDApp_NetworkStartEvt_6:
   \   00006A   C3           CLR       C
   \   00006B   E8           MOV       A,R0
   \   00006C   94FF         SUBB      A,#-0x1
   \   00006E   E9           MOV       A,R1
   \   00006F   9400         SUBB      A,#0x0
   \   000071   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000073   65D0         XRL       A,PSW
   \   000075   33           RLC       A
   \   000076   501B         JNC       ??ZDApp_NetworkStartEvt_7
   1004              {
   1005                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000078                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000078   12....       LCALL     `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   00007B   E9           MOV       A,R1
   \   00007C   F8           MOV       R0,A
   \   00007D                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   00007D   7410         MOV       A,#0x10
   \   00007F   28           ADD       A,R0
   \   000080   F9           MOV       R1,A
   \   000081   12....       LCALL     `??NLME_SetEnergyThreshold::?relay`; Banked call to: NLME_SetEnergyThreshold
   1006                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   000084                ; Setup parameters for call to function osal_set_event
   \   000084   7A01         MOV       R2,#0x1
   \   000086   7B00         MOV       R3,#0x0
   \   000088   90....       MOV       DPTR,#ZDAppTaskID
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   F9           MOV       R1,A
   \   00008D   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000090   E9           MOV       A,R1
   \   000091   8005         SJMP      ??ZDApp_NetworkStartEvt_5
   1007              }
   1008              else
   1009              {
   1010                bdb_nwkFormationAttempt(FALSE);
   \                     ??ZDApp_NetworkStartEvt_7:
   \   000093                ; Setup parameters for call to function bdb_nwkFormationAttempt
   \   000093   7900         MOV       R1,#0x0
   \   000095   12....       LCALL     `??bdb_nwkFormationAttempt::?relay`; Banked call to: bdb_nwkFormationAttempt
   1011              }
   1012            }
   1013          }
   \                     ??ZDApp_NetworkStartEvt_5:
   \   000098   D083         POP       DPH
   \   00009A   D082         POP       DPL
   \   00009C   02....       LJMP      ?BRET
   1014          
   1015          /*********************************************************************
   1016           * @fn      ZDApp_DeviceAuthEvt()
   1017           *
   1018           * @brief   Process the Device Authentic Event
   1019           *
   1020           * @param   none
   1021           *
   1022           * @return  none
   1023           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1024          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
   1025          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1026            // received authentication from trust center
   1027            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6405         XRL       A,#0x5
   \   00000A   7039         JNZ       ??ZDApp_DeviceAuthEvt_0
   1028            {
   1029              // Stop the reset timer so it doesn't reset
   1030              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL     `??ZDApp_ResetTimerCancel::?relay`; Banked call to: ZDApp_ResetTimerCancel
   1031          
   1032              ZDApp_ChangeState( DEV_END_DEVICE );
   \   00000F                ; Setup parameters for call to function ZDApp_ChangeState
   \   00000F   7906         MOV       R1,#0x6
   \   000011   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1033          
   1034              // Set the Power Manager Device
   1035          #if defined ( POWER_SAVING )
   1036              osal_pwrmgr_device( PWRMGR_BATTERY );
   \   000014                ; Setup parameters for call to function osal_pwrmgr_device
   \   000014   7901         MOV       R1,#0x1
   \   000016   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
   1037          #endif
   1038          
   1039              if ( ZSTACK_ROUTER_BUILD )
   1040              {
   1041                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1042                {
   1043                  // NOTE: first two parameters are not used, see NLMEDE.h for details
   1044                  NLME_StartRouterRequest( 0, 0, false );
   1045                }
   1046              }
   1047          
   1048              // Notify to save info into NV
   1049              ZDApp_NVUpdate();
   \   000019                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000019   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1050          
   1051              // Save off the security
   1052              ZDApp_SaveNwkKey();
   \   00001C                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   00001C   12....       LCALL     `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
   1053          
   1054              ZDApp_AnnounceNewAddress();
   \   00001F                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00001F   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1055          
   1056              if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   1057                  || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
   1058                    && (zgChildAgingEnable == TRUE) ) )
   \   000022   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000025   E0           MOVX      A,@DPTR
   \   000026   A2E3         MOV       C,0xE0 /* A   */.3
   \   000028   5010         JNC       ??ZDApp_DeviceAuthEvt_1
   \   00002A   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   A2E3         MOV       C,0xE0 /* A   */.3
   \   000030   5016         JNC       ??ZDApp_DeviceAuthEvt_2
   \   000032   90....       MOV       DPTR,#zgChildAgingEnable
   \   000035   E0           MOVX      A,@DPTR
   \   000036   6401         XRL       A,#0x1
   \   000038   700E         JNZ       ??ZDApp_DeviceAuthEvt_2
   1059              {
   1060                NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_DeviceAuthEvt_1:
   \   00003A                ; Setup parameters for call to function NLME_SetPollRate
   \   00003A   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \   00003D   12....       LCALL     ?XLOAD_R2345
   \   000040   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   000043   8003         SJMP      ??ZDApp_DeviceAuthEvt_2
   1061              }
   1062            }
   1063            else
   1064            {
   1065              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   000045                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000045   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1066            }
   1067          }
   \                     ??ZDApp_DeviceAuthEvt_2:
   \   000048   D083         POP       DPH
   \   00004A   D082         POP       DPL
   \   00004C   02....       LJMP      ?BRET
   1068          
   1069          /*********************************************************************
   1070           * @fn      ZDApp_SaveNetworkStateEvt()
   1071           *
   1072           * @brief   Process the Save the Network State Event
   1073           *
   1074           * @param   none
   1075           *
   1076           * @return  none
   1077           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1078          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
   1079          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1080          #if defined ( NV_RESTORE )
   1081           #if defined ( NV_TURN_OFF_RADIO )
   1082            // Turn off the radio's receiver during an NV update
   1083            uint8 RxOnIdle;
   1084            uint8 x = false;
   1085            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
   1086            ZMacSetReq( ZMacRxOnIdle, &x );
   1087           #endif
   1088          
   1089            // Update the Network State in NV
   1090            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
   1091                           NWK_NV_DEVICELIST_ENABLE |
   1092                           NWK_NV_BINDING_ENABLE    |
   1093                           NWK_NV_ADDRMGR_ENABLE );
   \   000004                ; Setup parameters for call to function NLME_UpdateNV
   \   000004   790F         MOV       R1,#0xf
   \   000006   12....       LCALL     `??NLME_UpdateNV::?relay`; Banked call to: NLME_UpdateNV
   1094          
   1095            // Reset the NV startup option to resume from NV by
   1096            // clearing the "New" join option.
   1097            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000009                ; Setup parameters for call to function zgWriteStartupOptions
   \   000009   7A02         MOV       R2,#0x2
   \   00000B   7900         MOV       R1,#0x0
   \   00000D   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   \   000010   E9           MOV       A,R1
   1098          
   1099           #if defined ( NV_TURN_OFF_RADIO )
   1100            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
   1101           #endif
   1102          #endif // NV_RESTORE
   1103          }
   \   000011   D083         POP       DPH
   \   000013   D082         POP       DPL
   \   000015   02....       LJMP      ?BRET
   1104          
   1105          #if defined ( NV_RESTORE )
   1106          /*********************************************************************
   1107           * @fn      ZDApp_RestoreNetworkState()
   1108           *
   1109           * @brief   This function will restore the network state of the
   1110           *          device if the network state is stored in NV.
   1111           *
   1112           * @param   none
   1113           *
   1114           * @return
   1115           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
   1116           *          restored.
   1117           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
   1118           *          This could mean that zgStartupOption said to not restore, or
   1119           *          it could mean that there was no network state to restore.
   1120           *
   1121           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1122          uint8 ZDApp_RestoreNetworkState( void )
   \                     ZDApp_RestoreNetworkState:
   1123          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1124            uint8 nvStat;
   1125          
   1126            // Initialize NWK NV items
   1127            nvStat = NLME_InitNV();
   \   000005                ; Setup parameters for call to function NLME_InitNV
   \   000005   12....       LCALL     `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
   \   000008   E9           MOV       A,R1
   \   000009   FE           MOV       R6,A
   1128          
   1129            if ( nvStat == SUCCESS )
   \   00000A   EE           MOV       A,R6
   \   00000B   7049         JNZ       ??ZDApp_RestoreNetworkState_0
   1130            {
   1131              if ( NLME_RestoreFromNV() )
   \   00000D                ; Setup parameters for call to function NLME_RestoreFromNV
   \   00000D   12....       LCALL     `??NLME_RestoreFromNV::?relay`; Banked call to: NLME_RestoreFromNV
   \   000010   E9           MOV       A,R1
   \   000011   6037         JZ        ??ZDApp_RestoreNetworkState_1
   1132              {
   1133                // Are we a coordinator
   1134                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000013                ; Setup parameters for call to function NLME_GetShortAddr
   \   000013   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000016   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000019   EA           MOV       A,R2
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   A3           INC       DPTR
   \   00001C   EB           MOV       A,R3
   \   00001D   F0           MOVX      @DPTR,A
   1135                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
   \   00001E   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F8           MOV       R0,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F9           MOV       R1,A
   \   000026   E8           MOV       A,R0
   \   000027   49           ORL       A,R1
   \   000028   7007         JNZ       ??ZDApp_RestoreNetworkState_2
   1136                {
   1137                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   00002A   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   54F8         ANL       A,#0xf8
   \   000030   F0           MOVX      @DPTR,A
   1138                }
   1139                if(ZG_DEVICE_ENDDEVICE_TYPE) 
   1140                {
   1141                  devStartMode = MODE_REJOIN;
   \                     ??ZDApp_RestoreNetworkState_2:
   \   000031   90....       MOV       DPTR,#devStartMode
   \   000034   7403         MOV       A,#0x3
   \   000036   F0           MOVX      @DPTR,A
   1142                  _NIB.nwkState = NWK_INIT;
   \   000037   90....       MOV       DPTR,#_NIB + 35
   \   00003A   7400         MOV       A,#0x0
   \   00003C   F0           MOVX      @DPTR,A
   1143                }
   1144                else
   1145                {
   1146                  devStartMode = MODE_RESUME;
   1147                }
   1148                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \   00003D                ; Setup parameters for call to function sAddrExtCpy
   \   00003D   7C..         MOV       R4,#(_NIB + 53) & 0xff
   \   00003F   7D..         MOV       R5,#((_NIB + 53) >> 8) & 0xff
   \   000041   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000043   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000045   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000048   8002         SJMP      ??ZDApp_RestoreNetworkState_3
   1149              }
   1150              else
   1151                nvStat = NV_ITEM_UNINIT;
   \                     ??ZDApp_RestoreNetworkState_1:
   \   00004A   7E09         MOV       R6,#0x9
   1152          
   1153              if ( ZG_SECURE_ENABLED )
   1154              {
   1155                nwkFrameCounterChanges = 0;
   \                     ??ZDApp_RestoreNetworkState_3:
   \   00004C   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   00004F   7400         MOV       A,#0x0
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   7400         MOV       A,#0x0
   \   000055   F0           MOVX      @DPTR,A
   1156          
   1157                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1158                {
   1159                  ZDApp_RestoreNwkKey( TRUE );
   1160                }
   1161              }
   1162          
   1163              // The default for RxOnWhenIdle is true for Routers and false for end devices
   1164              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
   1165              // other than default.
   1166            }
   1167          
   1168            if ( nvStat == ZSUCCESS )
   \                     ??ZDApp_RestoreNetworkState_0:
   \   000056   EE           MOV       A,R6
   \   000057   7004         JNZ       ??ZDApp_RestoreNetworkState_4
   1169              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   \   000059   7900         MOV       R1,#0x0
   \   00005B   8002         SJMP      ??ZDApp_RestoreNetworkState_5
   1170            else
   1171              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   \                     ??ZDApp_RestoreNetworkState_4:
   \   00005D   7901         MOV       R1,#0x1
   \                     ??ZDApp_RestoreNetworkState_5:
   \   00005F   7F01         MOV       R7,#0x1
   \   000061   02....       LJMP      ?BANKED_LEAVE_XDATA
   1172          }
   1173          #endif // NV_RESTORE
   1174          
   1175          /*********************************************************************
   1176           * @fn      ZDApp_InitUserDesc()
   1177           *
   1178           * @brief   Initialize the User Descriptor, the descriptor is read from NV
   1179           *          when needed.  If you want to initialize the User descriptor to
   1180           *          something other than all zero, do it here.
   1181           *
   1182           * @param   none
   1183           *
   1184           * @return  none
   1185           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1186          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
   1187          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1188            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
   1189          
   1190            // Initialize the User Descriptor, the descriptor is read from NV
   1191            // when needed.  If you want to initialize the User descriptor to something
   1192            // other than all zero, do it here.
   1193            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV       R4,#0x11
   \   00000C   7D00         MOV       R5,#0x0
   \   00000E   7900         MOV       R1,#0x0
   \   000010   AA..         MOV       R2,?XSP + 0
   \   000012   AB..         MOV       R3,?XSP + 1
   \   000014   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1194            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
   1195                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000017                ; Setup parameters for call to function osal_nv_item_init
   \   000017   A8..         MOV       R0,?XSP + 0
   \   000019   A9..         MOV       R1,?XSP + 1
   \   00001B   88..         MOV       ?V0,R0
   \   00001D   89..         MOV       ?V1,R1
   \   00001F   78..         MOV       R0,#?V0
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000024   7C11         MOV       R4,#0x11
   \   000026   7D00         MOV       R5,#0x0
   \   000028   7A81         MOV       R2,#-0x7f
   \   00002A   7B00         MOV       R3,#0x0
   \   00002C   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00002F   7402         MOV       A,#0x2
   \   000031   12....       LCALL     ?DEALLOC_XSTACK8
   \   000034   E9           MOV       A,R1
   \   000035   703B         JNZ       ??ZDApp_InitUserDesc_0
   1196            {
   1197              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
   1198                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000037                ; Setup parameters for call to function osal_nv_read
   \   000037   A8..         MOV       R0,?XSP + 0
   \   000039   A9..         MOV       R1,?XSP + 1
   \   00003B   88..         MOV       ?V0,R0
   \   00003D   89..         MOV       ?V1,R1
   \   00003F   78..         MOV       R0,#?V0
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000044   75..11       MOV       ?V0,#0x11
   \   000047   75..00       MOV       ?V1,#0x0
   \   00004A   78..         MOV       R0,#?V0
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004F   7C00         MOV       R4,#0x0
   \   000051   7D00         MOV       R5,#0x0
   \   000053   7A81         MOV       R2,#-0x7f
   \   000055   7B00         MOV       R3,#0x0
   \   000057   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00005A   7404         MOV       A,#0x4
   \   00005C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005F   E9           MOV       A,R1
   \   000060   7010         JNZ       ??ZDApp_InitUserDesc_0
   1199              {
   1200                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   000062   85..82       MOV       DPL,?XSP + 0
   \   000065   85..83       MOV       DPH,?XSP + 1
   \   000068   E0           MOVX      A,@DPTR
   \   000069   6007         JZ        ??ZDApp_InitUserDesc_0
   1201                {
   1202                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   00006B   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   D2E4         SETB      0xE0 /* A   */.4
   \   000071   F0           MOVX      @DPTR,A
   1203                }
   1204              }
   1205            }
   1206          }
   \                     ??ZDApp_InitUserDesc_0:
   \   000072   7411         MOV       A,#0x11
   \   000074   12....       LCALL     ?DEALLOC_XSTACK8
   \   000077   7F02         MOV       R7,#0x2
   \   000079   02....       LJMP      ?BANKED_LEAVE_XDATA
   1207          
   1208          /*********************************************************************
   1209           * @fn      ZDAppCheckForHoldKey()
   1210           *
   1211           * @brief   Check for key to set the device into Hold Auto Start
   1212           *
   1213           * @param   none
   1214           *
   1215           * @return  none
   1216           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1217          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
   1218          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1219          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
   1220          
   1221            // Get Keypad directly to see if a HOLD is needed
   1222            zdappHoldKeys = HalKeyRead();
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL     `??HalKeyRead::?relay`; Banked call to: HalKeyRead
   \   000007   E9           MOV       A,R1
   \   000008   90....       MOV       DPTR,#zdappHoldKeys
   \   00000B   F0           MOVX      @DPTR,A
   1223          
   1224            // Hold down the SW_BYPASS_START key (see OnBoard.h)
   1225            // while booting to avoid starting up the device.
   1226            if ( zdappHoldKeys == SW_BYPASS_START )
   \   00000C   90....       MOV       DPTR,#zdappHoldKeys
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   6401         XRL       A,#0x1
   \   000012   7006         JNZ       ??ZDAppCheckForHoldKey_0
   1227            {
   1228              // Change the device state to HOLD on start up
   1229              devState = DEV_HOLD;
   \   000014   90....       MOV       DPTR,#devState
   \   000017   7400         MOV       A,#0x0
   \   000019   F0           MOVX      @DPTR,A
   1230            }
   1231          #endif // HAL_KEY
   1232          }
   \                     ??ZDAppCheckForHoldKey_0:
   \   00001A   D083         POP       DPH
   \   00001C   D082         POP       DPL
   \   00001E   02....       LJMP      ?BRET
   1233          
   1234          /*********************************************************************
   1235           * @fn      ZDApp_ProcessOSALMsg()
   1236           *
   1237           * @brief   Process the incoming task message.
   1238           *
   1239           * @param   msgPtr - message to process
   1240           *
   1241           * @return  none
   1242           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1243          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
   1244          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1245            // Data Confirmation message fields
   1246            uint8 sentEP;       // This should always be 0
   1247            uint8 sentStatus;
   1248            afDataConfirm_t *afDataConfirm;
   1249          
   1250          
   1251            switch ( msgPtr->event )
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   14           DEC       A
   \   00000F   6045         JZ        ??ZDApp_ProcessOSALMsg_0
   \   000011   14           DEC       A
   \   000012   7003         JNZ       $+5
   \   000014   02....       LJMP      ??ZDApp_ProcessOSALMsg_1 & 0xFFFF
   \   000017   24E8         ADD       A,#-0x18
   \   000019   600B         JZ        ??ZDApp_ProcessOSALMsg_2
   \   00001B   2447         ADD       A,#0x47
   \   00001D   6011         JZ        ??ZDApp_ProcessOSALMsg_3
   \   00001F   24D6         ADD       A,#-0x2a
   \   000021   6017         JZ        ??ZDApp_ProcessOSALMsg_4
   \   000023   02....       LJMP      ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1252            {
   1253              // Incoming ZDO Message
   1254              case AF_INCOMING_MSG_CMD:
   1255                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   000026                ; Setup parameters for call to function ZDP_IncomingData
   \   000026   EE           MOV       A,R6
   \   000027   FA           MOV       R2,A
   \   000028   EF           MOV       A,R7
   \   000029   FB           MOV       R3,A
   \   00002A   12....       LCALL     `??ZDP_IncomingData::?relay`; Banked call to: ZDP_IncomingData
   1256                break;
   \   00002D   02....       LJMP      ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1257          
   1258              case ZDO_CB_MSG:
   1259                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   000030                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   000030   EE           MOV       A,R6
   \   000031   FA           MOV       R2,A
   \   000032   EF           MOV       A,R7
   \   000033   FB           MOV       R3,A
   \   000034   12....       LCALL     `??ZDApp_ProcessMsgCBs::?relay`; Banked call to: ZDApp_ProcessMsgCBs
   1260                break;
   \   000037   02....       LJMP      ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1261          
   1262              case AF_DATA_CONFIRM_CMD:
   1263                // This message is received as a confirmation of a data packet sent.
   1264                // The status is of ZStatus_t type [defined in NLMEDE.h]
   1265                // The message fields are defined in AF.h
   1266                afDataConfirm = (afDataConfirm_t *)msgPtr;
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   00003A   8E..         MOV       ?V2,R6
   \   00003C   8F..         MOV       ?V3,R7
   1267                sentEP = afDataConfirm->endpoint;
   \   00003E   85..82       MOV       DPL,?V2
   \   000041   85..83       MOV       DPH,?V3
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F5..         MOV       ?V1,A
   1268                sentStatus = afDataConfirm->hdr.status;
   \   000049   85..82       MOV       DPL,?V2
   \   00004C   85..83       MOV       DPH,?V3
   \   00004F   A3           INC       DPTR
   \   000050   E0           MOVX      A,@DPTR
   \   000051   F5..         MOV       ?V0,A
   1269          
   1270                // Action taken when confirmation is received.
   1271          #if defined ( ZIGBEE_FREQ_AGILITY )
   1272                if ( pZDNwkMgr_ProcessDataConfirm )
   1273                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
   1274          #endif
   1275                (void)sentEP;
   1276                (void)sentStatus;
   1277                break;
   \   000053   02....       LJMP      ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1278          
   1279              case ZDO_NWK_DISC_CNF:
   1280                if (devState != DEV_NWK_DISC)
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   000056   90....       MOV       DPTR,#devState
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   6402         XRL       A,#0x2
   \   00005C   7078         JNZ       ??ZDApp_ProcessOSALMsg_6
   1281                {
   1282                  break;
   1283                }
   1284                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \   00005E   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000061   E0           MOVX      A,@DPTR
   \   000062   6401         XRL       A,#0x1
   \   000064   6008         JZ        ??ZDApp_ProcessOSALMsg_7
   \   000066   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   6402         XRL       A,#0x2
   \   00006C   7068         JNZ       ??ZDApp_ProcessOSALMsg_6
   1285                {
   1286                  //Rejoin or resume
   1287                  if(bdb_isDeviceNonFactoryNew()) 
   \                     ??ZDApp_ProcessOSALMsg_7:
   \   00006E                ; Setup parameters for call to function bdb_isDeviceNonFactoryNew
   \   00006E   12....       LCALL     `??bdb_isDeviceNonFactoryNew::?relay`; Banked call to: bdb_isDeviceNonFactoryNew
   \   000071   E9           MOV       A,R1
   \   000072   600B         JZ        ??ZDApp_ProcessOSALMsg_8
   1288                  {
   1289                    if(bdb_rejoinNwk() == ZSuccess)
   \   000074                ; Setup parameters for call to function bdb_rejoinNwk
   \   000074   12....       LCALL     `??bdb_rejoinNwk::?relay`; Banked call to: bdb_rejoinNwk
   \   000077   E9           MOV       A,R1
   \   000078   605C         JZ        ??ZDApp_ProcessOSALMsg_6
   1290                    {
   1291                      return;
   1292                    }
   1293          #if (ZG_BUILD_ENDDEVICE_TYPE)
   1294                    else
   1295                    {
   1296                      if(ZG_DEVICE_ENDDEVICE_TYPE)
   1297                      {
   1298                        bdb_parentLost();
   \   00007A                ; Setup parameters for call to function bdb_parentLost
   \   00007A   12....       LCALL     `??bdb_parentLost::?relay`; Banked call to: bdb_parentLost
   1299                        return;
   \   00007D   8057         SJMP      ??ZDApp_ProcessOSALMsg_6
   1300                      }
   1301                    }
   1302          #endif
   1303                  }
   1304                  
   1305                  if(nwk_getNwkDescList())
   \                     ??ZDApp_ProcessOSALMsg_8:
   \   00007F                ; Setup parameters for call to function nwk_getNwkDescList
   \   00007F   12....       LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   000082   8A..         MOV       ?V4,R2
   \   000084   8B..         MOV       ?V5,R3
   \   000086   E5..         MOV       A,?V4
   \   000088   45..         ORL       A,?V5
   \   00008A   6007         JZ        ??ZDApp_ProcessOSALMsg_9
   1306                  {
   1307                    bdb_nwkDiscoveryAttempt(TRUE);
   \   00008C                ; Setup parameters for call to function bdb_nwkDiscoveryAttempt
   \   00008C   7901         MOV       R1,#0x1
   \   00008E   12....       LCALL     `??bdb_nwkDiscoveryAttempt::?relay`; Banked call to: bdb_nwkDiscoveryAttempt
   \   000091   8043         SJMP      ??ZDApp_ProcessOSALMsg_6
   1308                  }
   1309                  else
   1310                  {
   1311                    bdb_nwkDiscoveryAttempt(FALSE);
   \                     ??ZDApp_ProcessOSALMsg_9:
   \   000093                ; Setup parameters for call to function bdb_nwkDiscoveryAttempt
   \   000093   7900         MOV       R1,#0x0
   \   000095   12....       LCALL     `??bdb_nwkDiscoveryAttempt::?relay`; Banked call to: bdb_nwkDiscoveryAttempt
   1312                  }
   1313                }
   1314              break;
   \   000098   803C         SJMP      ??ZDApp_ProcessOSALMsg_6
   1315          
   1316              case ZDO_NWK_JOIN_IND:
   1317                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   00009A   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   6401         XRL       A,#0x1
   \   0000A0   6008         JZ        ??ZDApp_ProcessOSALMsg_10
   \   0000A2   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   6402         XRL       A,#0x2
   \   0000A8   702C         JNZ       ??ZDApp_ProcessOSALMsg_6
   1318                {
   1319                  if((bdbCommissioningProcedureState.bdbCommissioningState == BDB_INITIALIZATION) || (bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST))
   \                     ??ZDApp_ProcessOSALMsg_10:
   \   0000AA   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   6407         XRL       A,#0x7
   \   0000B0   6008         JZ        ??ZDApp_ProcessOSALMsg_11
   \   0000B2   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   6408         XRL       A,#0x8
   \   0000B8   7010         JNZ       ??ZDApp_ProcessOSALMsg_12
   1320                  {
   1321                    if(nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessOSALMsg_11:
   \   0000BA   90....       MOV       DPTR,#nwkStatus
   \   0000BD   E0           MOVX      A,@DPTR
   \   0000BE   700A         JNZ       ??ZDApp_ProcessOSALMsg_12
   1322                    {
   1323                      bdb_reportCommissioningState(bdbCommissioningProcedureState.bdbCommissioningState,TRUE);
   \   0000C0                ; Setup parameters for call to function bdb_reportCommissioningState
   \   0000C0   7A01         MOV       R2,#0x1
   \   0000C2   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0000C5   E0           MOVX      A,@DPTR
   \   0000C6   F9           MOV       R1,A
   \   0000C7   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   1324                    }
   1325                  }
   1326                  ZDApp_ProcessNetworkJoin();
   \                     ??ZDApp_ProcessOSALMsg_12:
   \   0000CA                ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
   \   0000CA   12....       LCALL     `??ZDApp_ProcessNetworkJoin::?relay`; Banked call to: ZDApp_ProcessNetworkJoin
   1327                }
   1328                break;
   \   0000CD   8007         SJMP      ??ZDApp_ProcessOSALMsg_6
   1329          
   1330              default:
   1331                if ( ZG_SECURE_ENABLED )
   1332                  ZDApp_ProcessSecMsg( msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_5:
   \   0000CF                ; Setup parameters for call to function ZDApp_ProcessSecMsg
   \   0000CF   EE           MOV       A,R6
   \   0000D0   FA           MOV       R2,A
   \   0000D1   EF           MOV       A,R7
   \   0000D2   FB           MOV       R3,A
   \   0000D3   12....       LCALL     `??ZDApp_ProcessSecMsg::?relay`; Banked call to: ZDApp_ProcessSecMsg
   1333                break;
   1334            }
   1335          
   1336          }
   \                     ??ZDApp_ProcessOSALMsg_6:
   \   0000D6   7F06         MOV       R7,#0x6
   \   0000D8   02....       LJMP      ?BANKED_LEAVE_XDATA
   1337          
   1338          /*********************************************************************
   1339           * @fn      ZDApp_ProcessMsgCBs()
   1340           *
   1341           * @brief   Process response messages
   1342           *
   1343           * @param   none
   1344           *
   1345           * @return  none
   1346           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1347          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1348          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1349            switch ( inMsg->clusterID )
   \   00000E   EE           MOV       A,R6
   \   00000F   240C         ADD       A,#0xc
   \   000011   F582         MOV       DPL,A
   \   000013   E4           CLR       A
   \   000014   3F           ADDC      A,R7
   \   000015   F583         MOV       DPH,A
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V0,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V1,A
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   000023   0200         DW        2
   \   000025   2100         DW        33
   \   000027   2200         DW        34
   \   000029   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   00002B   0080         DW        32768
   \   00002D   0180         DW        32769
   \   00002F   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   000031   0000         DW        0
   \   000033   ....         DW        ??ZDApp_ProcessMsgCBs_2
   1350            {
   1351          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1352              case NWK_addr_rsp:
   1353              case IEEE_addr_rsp:
   1354                {
   1355                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1356          
   1357                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   000035                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   000035   EE           MOV       A,R6
   \   000036   FA           MOV       R2,A
   \   000037   EF           MOV       A,R7
   \   000038   FB           MOV       R3,A
   \   000039   12....       LCALL     `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   00003C   8A..         MOV       ?V2,R2
   \   00003E   8B..         MOV       ?V3,R3
   \   000040   85....       MOV       ?V0,?V2
   \   000043   85....       MOV       ?V1,?V3
   1358                  if ( pAddrRsp )
   \   000046   E5..         MOV       A,?V0
   \   000048   45..         ORL       A,?V1
   \   00004A   6040         JZ        ??ZDApp_ProcessMsgCBs_2
   1359                  {
   1360                    if ( pAddrRsp->status == ZSuccess )
   \   00004C   85..82       MOV       DPL,?V0
   \   00004F   85..83       MOV       DPH,?V1
   \   000052   E0           MOVX      A,@DPTR
   \   000053   7018         JNZ       ??ZDApp_ProcessMsgCBs_3
   1361                    {
   1362                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   000055                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   000055   E5..         MOV       A,?V0
   \   000057   2403         ADD       A,#0x3
   \   000059   FC           MOV       R4,A
   \   00005A   E4           CLR       A
   \   00005B   35..         ADDC      A,?V1
   \   00005D   FD           MOV       R5,A
   \   00005E   85..82       MOV       DPL,?V0
   \   000061   85..83       MOV       DPH,?V1
   \   000064   A3           INC       DPTR
   \   000065   E0           MOVX      A,@DPTR
   \   000066   FA           MOV       R2,A
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   FB           MOV       R3,A
   \   00006A   12....       LCALL     `??ZDO_UpdateAddrManager::?relay`; Banked call to: ZDO_UpdateAddrManager
   1363                    }
   1364          
   1365          #if defined ( ZDP_BIND_VALIDATION )
   1366                    // look for pending bind entry for NWK_addr_rsp Only
   1367                    if ( inMsg->clusterID == NWK_addr_rsp )
   1368                    {
   1369          #if defined ( REFLECTOR )
   1370                      ZDApp_ProcessPendingBindReq( pAddrRsp->extAddr );
   1371          #endif
   1372                    }
   1373          #endif
   1374          
   1375                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   00006D                ; Setup parameters for call to function osal_mem_free
   \   00006D   AA..         MOV       R2,?V0
   \   00006F   AB..         MOV       R3,?V1
   \   000071   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1376                  }
   1377                }
   1378                break;
   \   000074   8016         SJMP      ??ZDApp_ProcessMsgCBs_2
   1379          #endif
   1380          
   1381          #if defined ( REFLECTOR )
   1382              case Bind_req:
   1383              case Unbind_req:
   1384                {
   1385                  ZDO_BindUnbindReq_t bindReq;
   1386                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   000076                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   000076   AC..         MOV       R4,?XSP + 0
   \   000078   AD..         MOV       R5,?XSP + 1
   \   00007A   EE           MOV       A,R6
   \   00007B   FA           MOV       R2,A
   \   00007C   EF           MOV       A,R7
   \   00007D   FB           MOV       R3,A
   \   00007E   12....       LCALL     `??ZDO_ParseBindUnbindReq::?relay`; Banked call to: ZDO_ParseBindUnbindReq
   1387                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   000081                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   000081   AC..         MOV       R4,?XSP + 0
   \   000083   AD..         MOV       R5,?XSP + 1
   \   000085   EE           MOV       A,R6
   \   000086   FA           MOV       R2,A
   \   000087   EF           MOV       A,R7
   \   000088   FB           MOV       R3,A
   \   000089   12....       LCALL     `??ZDO_ProcessBindUnbindReq::?relay`; Banked call to: ZDO_ProcessBindUnbindReq
   1388                }
   1389                break;
   1390          #endif
   1391          
   1392          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1393              case Bind_rsp:
   1394              case Unbind_rsp:
   1395                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   1396                {
   1397                  ZDMatchSendState(
   1398                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1399                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   1400                }
   1401                break;
   1402          
   1403              case End_Device_Bind_req:
   1404          #ifdef ZDO_ENDDEVICEBIND_RESPONSE
   1405                if (ZG_DEVICE_COORDINATOR_TYPE)
   1406                {
   1407                  ZDEndDeviceBind_t bindReq;
   1408                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   1409                  ZDO_MatchEndDeviceBind( &bindReq );
   1410          
   1411                  // Freeing the cluster lists - if allocated.
   1412                  if ( bindReq.numInClusters )
   1413                    osal_mem_free( bindReq.inClusters );
   1414                  if ( bindReq.numOutClusters )
   1415                    osal_mem_free( bindReq.outClusters );
   1416                }
   1417          #endif
   1418                break;
   1419          #endif
   1420            }
   1421          }
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   00008C   7415         MOV       A,#0x15
   \   00008E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000091   7F04         MOV       R7,#0x4
   \   000093   02....       LJMP      ?BANKED_LEAVE_XDATA
   1422          
   1423          /*********************************************************************
   1424           * @fn      ZDApp_RegisterCBs()
   1425           *
   1426           * @brief   Process response messages
   1427           *
   1428           * @param   none
   1429           *
   1430           * @return  none
   1431           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1432          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1433          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1434          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1435            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV       R2,#0x1
   \   000006   7B80         MOV       R3,#-0x80
   \   000008   90....       MOV       DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000010   E9           MOV       A,R1
   1436          #endif
   1437          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1438            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \   000011                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000011   7A00         MOV       R2,#0x0
   \   000013   7B80         MOV       R3,#-0x80
   \   000015   90....       MOV       DPTR,#ZDAppTaskID
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F9           MOV       R1,A
   \   00001A   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   00001D   E9           MOV       A,R1
   1439          #endif
   1440          #if ZG_BUILD_COORDINATOR_TYPE
   1441            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   1442            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   1443          #ifdef ZDO_ENDDEVICEBIND_RESPONSE
   1444            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   1445          #endif
   1446          #endif
   1447          #if defined ( REFLECTOR )
   1448            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \   00001E                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001E   7A21         MOV       R2,#0x21
   \   000020   7B00         MOV       R3,#0x0
   \   000022   90....       MOV       DPTR,#ZDAppTaskID
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F9           MOV       R1,A
   \   000027   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   00002A   E9           MOV       A,R1
   1449            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \   00002B                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00002B   7A22         MOV       R2,#0x22
   \   00002D   7B00         MOV       R3,#0x0
   \   00002F   90....       MOV       DPTR,#ZDAppTaskID
   \   000032   E0           MOVX      A,@DPTR
   \   000033   F9           MOV       R1,A
   \   000034   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000037   E9           MOV       A,R1
   1450          #endif
   1451          }
   \   000038   D083         POP       DPH
   \   00003A   D082         POP       DPL
   \   00003C   02....       LJMP      ?BRET
   1452          
   1453          /*********************************************************************
   1454           * @fn      ZDApp_ProcessSecMsg()
   1455           *
   1456           * @brief   Process the incoming security message.
   1457           *
   1458           * @param   msgPtr - message to process
   1459           *
   1460           * @return  none
   1461           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1462          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1463          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1464            switch ( msgPtr->event )
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   24FC         ADD       A,#-0x4
   \   000010   6011         JZ        ??ZDApp_ProcessSecMsg_0
   \   000012   14           DEC       A
   \   000013   603E         JZ        ??ZDApp_ProcessSecMsg_1
   \   000015   14           DEC       A
   \   000016   603B         JZ        ??ZDApp_ProcessSecMsg_1
   \   000018   14           DEC       A
   \   000019   6038         JZ        ??ZDApp_ProcessSecMsg_1
   \   00001B   14           DEC       A
   \   00001C   601E         JZ        ??ZDApp_ProcessSecMsg_2
   \   00001E   14           DEC       A
   \   00001F   6032         JZ        ??ZDApp_ProcessSecMsg_1
   \   000021   8030         SJMP      ??ZDApp_ProcessSecMsg_1
   1465            {
   1466              case ZDO_TRANSPORT_KEY_IND:
   1467                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000023   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000026   E0           MOVX      A,@DPTR
   \   000027   6401         XRL       A,#0x1
   \   000029   6008         JZ        ??ZDApp_ProcessSecMsg_3
   \   00002B   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   6402         XRL       A,#0x2
   \   000031   7020         JNZ       ??ZDApp_ProcessSecMsg_1
   1468                {
   1469                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_3:
   \   000033                ; Setup parameters for call to function ZDSecMgrTransportKeyInd
   \   000033   EE           MOV       A,R6
   \   000034   FA           MOV       R2,A
   \   000035   EF           MOV       A,R7
   \   000036   FB           MOV       R3,A
   \   000037   12....       LCALL     `??ZDSecMgrTransportKeyInd::?relay`; Banked call to: ZDSecMgrTransportKeyInd
   1470                }
   1471                break;
   \   00003A   8017         SJMP      ??ZDApp_ProcessSecMsg_1
   1472          
   1473              case ZDO_UPDATE_DEVICE_IND:
   1474                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1475                {
   1476                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   1477                  
   1478                  // Look at GP proxy table for posible conflict with GPD alias NwkAddr
   1479          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
   1480                  ZDO_DeviceAnnce_t devAnnce;
   1481                  uint32 timeout;
   1482                  uint8 invalidAddr;
   1483                  uint8 sameAnnce;
   1484                  uint8 invalidIEEE[Z_EXTADDR_LEN] = {0xFF};
   1485                  
   1486                  osal_memcpy( devAnnce.extAddr, ((ZDO_UpdateDeviceInd_t*)msgPtr)->devExtAddr, Z_EXTADDR_LEN );
   1487                  devAnnce.nwkAddr = ((ZDO_UpdateDeviceInd_t*)msgPtr)->devAddr;
   1488                  
   1489                  timeout = osal_get_timeoutEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT );
   1490                  invalidAddr = osal_memcmp( devAnnce.extAddr, invalidIEEE, Z_EXTADDR_LEN );
   1491                  sameAnnce = osal_memcmp( &devAnnce, &GP_aliasConflictAnnce, sizeof( ZDO_DeviceAnnce_t ) );
   1492                  
   1493                  // Check GP proxy table to update the entry if necesary
   1494                  if( timeout && ( invalidAddr && sameAnnce ) )
   1495                  {
   1496                    osal_stop_timerEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT );
   1497                  }
   1498                  else if(GP_CheckAnnouncedDeviceGCB != NULL)
   1499                  {
   1500                    GP_CheckAnnouncedDeviceGCB( devAnnce.extAddr, devAnnce.nwkAddr );       
   1501                  }
   1502          #endif
   1503                }
   1504                break;
   1505          
   1506              case ZDO_REMOVE_DEVICE_IND:
   1507                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   1508                {
   1509                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   1510                }
   1511                break;
   1512          
   1513              case ZDO_REQUEST_KEY_IND:
   1514                if ( ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ) )
   1515                {
   1516                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1517                  {
   1518                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1519                  }
   1520                }
   1521                break;
   1522              case ZDO_VERIFY_KEY_IND:
   1523          #if (ZG_BUILD_COORDINATOR_TYPE)
   1524                if(ZG_DEVICE_COORDINATOR_TYPE)
   1525                {
   1526                  if( ((ZDO_VerifyKeyInd_t*)msgPtr)->verifyKeyStatus == ZSuccess)
   1527                  {
   1528                    bdb_TCjoiningDeviceComplete( ((ZDO_VerifyKeyInd_t*)msgPtr)->extAddr );
   1529                  }
   1530                }
   1531            
   1532                ZDSecMgrVerifyKeyInd( (ZDO_VerifyKeyInd_t*)msgPtr );
   1533          #endif
   1534                break;
   1535          
   1536              case ZDO_SWITCH_KEY_IND:
   1537                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_2:
   \   00003C   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   6401         XRL       A,#0x1
   \   000042   6008         JZ        ??ZDApp_ProcessSecMsg_4
   \   000044   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000047   E0           MOVX      A,@DPTR
   \   000048   6402         XRL       A,#0x2
   \   00004A   7007         JNZ       ??ZDApp_ProcessSecMsg_1
   1538                {
   1539                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_4:
   \   00004C                ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
   \   00004C   EE           MOV       A,R6
   \   00004D   FA           MOV       R2,A
   \   00004E   EF           MOV       A,R7
   \   00004F   FB           MOV       R3,A
   \   000050   12....       LCALL     `??ZDSecMgrSwitchKeyInd::?relay`; Banked call to: ZDSecMgrSwitchKeyInd
   1540                }
   1541                break;
   1542          
   1543              default:
   1544                // Unsupported messages
   1545                break;
   1546            }
   1547          }
   \                     ??ZDApp_ProcessSecMsg_1:
   \   000053   7F01         MOV       R7,#0x1
   \   000055   02....       LJMP      ?BANKED_LEAVE_XDATA
   1548          
   1549          /*********************************************************************
   1550           * @fn      ZDApp_ProcessNetworkJoin()
   1551           *
   1552           * @brief
   1553           *
   1554           *   Save off the Network key information.
   1555           *
   1556           * @param   none
   1557           *
   1558           * @return  none
   1559           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1560          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1561          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1562            if ( (devState == DEV_NWK_JOINING) ||
   1563                ((devState == DEV_NWK_ORPHAN)  &&
   1564                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   000005   90....       MOV       DPTR,#devState
   \   000008   E0           MOVX      A,@DPTR
   \   000009   6403         XRL       A,#0x3
   \   00000B   6012         JZ        ??ZDApp_ProcessNetworkJoin_0
   \   00000D   90....       MOV       DPTR,#devState
   \   000010   E0           MOVX      A,@DPTR
   \   000011   640A         XRL       A,#0xa
   \   000013   707A         JNZ       ??ZDApp_ProcessNetworkJoin_1
   \   000015   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000018   E0           MOVX      A,@DPTR
   \   000019   5407         ANL       A,#0x7
   \   00001B   6401         XRL       A,#0x1
   \   00001D   7070         JNZ       ??ZDApp_ProcessNetworkJoin_1
   1565            {
   1566              // Result of a Join attempt by this device.
   1567              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   00001F   90....       MOV       DPTR,#nwkStatus
   \   000022   E0           MOVX      A,@DPTR
   \   000023   7062         JNZ       ??ZDApp_ProcessNetworkJoin_2
   1568              {
   1569                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000025                ; Setup parameters for call to function osal_set_event
   \   000025   7A10         MOV       R2,#0x10
   \   000027   7B00         MOV       R3,#0x0
   \   000029   90....       MOV       DPTR,#ZDAppTaskID
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F9           MOV       R1,A
   \   00002E   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000031   E9           MOV       A,R1
   1570          
   1571          #if defined ( POWER_SAVING )
   1572                osal_pwrmgr_device( PWRMGR_BATTERY );
   \   000032                ; Setup parameters for call to function osal_pwrmgr_device
   \   000032   7901         MOV       R1,#0x1
   \   000034   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
   1573          #endif
   1574          
   1575                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
   \   000037                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   000037   7901         MOV       R1,#0x1
   \   000039   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   00003C   E9           MOV       A,R1
   \   00003D   7021         JNZ       ??ZDApp_ProcessNetworkJoin_3
   1576                {
   1577                  if ( ZSTACK_END_DEVICE_BUILD )
   1578                  {
   1579                    NLME_SetPollRate( zgRejoinPollRate );
   \   00003F                ; Setup parameters for call to function NLME_SetPollRate
   \   00003F   90....       MOV       DPTR,#zgRejoinPollRate
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F5..         MOV       ?V0,A
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F5..         MOV       ?V1,A
   \   000049   AA..         MOV       R2,?V0
   \   00004B   AB..         MOV       R3,?V1
   \   00004D   E4           CLR       A
   \   00004E   FC           MOV       R4,A
   \   00004F   FD           MOV       R5,A
   \   000050   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1580                  }
   1581                  // wait for auth from trust center
   1582                  ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
   \   000053                ; Setup parameters for call to function ZDApp_ChangeState
   \   000053   7905         MOV       R1,#0x5
   \   000055   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1583                  
   1584                  bdb_nwkAssocAttemt(TRUE);
   \   000058                ; Setup parameters for call to function bdb_nwkAssocAttemt
   \   000058   7901         MOV       R1,#0x1
   \   00005A   12....       LCALL     `??bdb_nwkAssocAttemt::?relay`; Banked call to: bdb_nwkAssocAttemt
   \   00005D   02....       LJMP      ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
   1585                }
   1586                else
   1587                {
   1588                  if ( ZSTACK_ROUTER_BUILD )
   1589                  {
   1590                    if ( devState == DEV_NWK_ORPHAN
   1591                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1592                    {
   1593                      // Change NIB state to router for restore
   1594                      _NIB.nwkState = NWK_ROUTER;
   1595                    }
   1596                  }
   1597          
   1598                  if ( devState == DEV_NWK_JOINING )
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   000060   90....       MOV       DPTR,#devState
   \   000063   E0           MOVX      A,@DPTR
   \   000064   6403         XRL       A,#0x3
   \   000066   7017         JNZ       ??ZDApp_ProcessNetworkJoin_5
   1599                  {
   1600                    ZDApp_AnnounceNewAddress();
   \   000068                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000068   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1601                    if( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL )
   \   00006B   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   6402         XRL       A,#0x2
   \   000071   700C         JNZ       ??ZDApp_ProcessNetworkJoin_5
   1602                    {
   1603                      bdb_setNodeIsOnANetwork(TRUE);
   \   000073                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000073   7901         MOV       R1,#0x1
   \   000075   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
   1604                      bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, TRUE );
   \   000078                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000078   7A01         MOV       R2,#0x1
   \   00007A   7902         MOV       R1,#0x2
   \   00007C   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   1605                    }
   1606                  }
   1607          
   1608                  ZDApp_ChangeState( DEV_END_DEVICE );
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   00007F                ; Setup parameters for call to function ZDApp_ChangeState
   \   00007F   7906         MOV       R1,#0x6
   \   000081   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1609          
   1610                  if ( ZSTACK_ROUTER_BUILD )
   \   000084   02....       LJMP      ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
   1611                  {
   1612                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1613                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1614                    {
   1615                      NLME_StartRouterRequest( 0, 0, false );
   1616                    }
   1617                  }
   1618                }
   1619              }
   1620              else
   1621              {
   1622          
   1623                bdb_nwkAssocAttemt(FALSE);
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   000087                ; Setup parameters for call to function bdb_nwkAssocAttemt
   \   000087   7900         MOV       R1,#0x0
   \   000089   12....       LCALL     `??bdb_nwkAssocAttemt::?relay`; Banked call to: bdb_nwkAssocAttemt
   \   00008C   02....       LJMP      ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
   1624              }
   1625            }
   1626            else if ( devState == DEV_NWK_ORPHAN ||
   1627                      devState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL ||
   1628                      devState == DEV_NWK_TC_REJOIN_CURR_CHANNEL ||
   1629                      devState == DEV_NWK_TC_REJOIN_ALL_CHANNEL ||
   1630                      devState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   00008F   90....       MOV       DPTR,#devState
   \   000092   E0           MOVX      A,@DPTR
   \   000093   640A         XRL       A,#0xa
   \   000095   6023         JZ        ??ZDApp_ProcessNetworkJoin_6
   \   000097   90....       MOV       DPTR,#devState
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   6404         XRL       A,#0x4
   \   00009D   601B         JZ        ??ZDApp_ProcessNetworkJoin_6
   \   00009F   90....       MOV       DPTR,#devState
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   640E         XRL       A,#0xe
   \   0000A5   6013         JZ        ??ZDApp_ProcessNetworkJoin_6
   \   0000A7   90....       MOV       DPTR,#devState
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   640F         XRL       A,#0xf
   \   0000AD   600B         JZ        ??ZDApp_ProcessNetworkJoin_6
   \   0000AF   90....       MOV       DPTR,#devState
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   640D         XRL       A,#0xd
   \   0000B5   6003         JZ        $+5
   \   0000B7   02....       LJMP      ??ZDApp_ProcessNetworkJoin_7 & 0xFFFF
   1631            {
   1632              // results of an orphaning attempt by this device
   1633              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   0000BA   90....       MOV       DPTR,#nwkStatus
   \   0000BD   E0           MOVX      A,@DPTR
   \   0000BE   7073         JNZ       ??ZDApp_ProcessNetworkJoin_8
   1634              {
   1635                //When the device has successfully rejoined then reset retryCnt
   1636                retryCnt = 0;
   \   0000C0   90....       MOV       DPTR,#retryCnt
   \   0000C3   7400         MOV       A,#0x0
   \   0000C5   F0           MOVX      @DPTR,A
   1637          
   1638                // Verify NWK key is available before sending Device_annce
   1639                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
   \   0000C6                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   0000C6   7901         MOV       R1,#0x1
   \   0000C8   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   0000CB   E9           MOV       A,R1
   \   0000CC   7023         JNZ       ??ZDApp_ProcessNetworkJoin_9
   1640                {
   1641                  if ( ZSTACK_END_DEVICE_BUILD )
   1642                  {
   1643                    NLME_SetPollRate( zgRejoinPollRate );
   \   0000CE                ; Setup parameters for call to function NLME_SetPollRate
   \   0000CE   90....       MOV       DPTR,#zgRejoinPollRate
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   F5..         MOV       ?V0,A
   \   0000D4   A3           INC       DPTR
   \   0000D5   E0           MOVX      A,@DPTR
   \   0000D6   F5..         MOV       ?V1,A
   \   0000D8   AA..         MOV       R2,?V0
   \   0000DA   AB..         MOV       R3,?V1
   \   0000DC   E4           CLR       A
   \   0000DD   FC           MOV       R4,A
   \   0000DE   FD           MOV       R5,A
   \   0000DF   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1644                  }
   1645                  // wait for auth from trust center
   1646                  ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
   \   0000E2                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000E2   7905         MOV       R1,#0x5
   \   0000E4   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1647          
   1648                  // Start the reset timer for MAX UNAUTH time
   1649                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   \   0000E7                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   0000E7   7A10         MOV       R2,#0x10
   \   0000E9   7B27         MOV       R3,#0x27
   \   0000EB   12....       LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   \   0000EE   02....       LJMP      ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
   1650                }
   1651                else
   1652                {
   1653                  ZDApp_ChangeState( DEV_END_DEVICE );
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   0000F1                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000F1   7906         MOV       R1,#0x6
   \   0000F3   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1654          
   1655                  osal_stop_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF );
   \   0000F6                ; Setup parameters for call to function osal_stop_timerEx
   \   0000F6   7A00         MOV       R2,#0x0
   \   0000F8   7B20         MOV       R3,#0x20
   \   0000FA   90....       MOV       DPTR,#ZDAppTaskID
   \   0000FD   E0           MOVX      A,@DPTR
   \   0000FE   F9           MOV       R1,A
   \   0000FF   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000102   E9           MOV       A,R1
   1656          
   1657                  // setup Power Manager Device
   1658          #if defined ( POWER_SAVING )
   1659                  osal_pwrmgr_device( PWRMGR_BATTERY );
   \   000103                ; Setup parameters for call to function osal_pwrmgr_device
   \   000103   7901         MOV       R1,#0x1
   \   000105   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
   1660          #endif
   1661          
   1662                  // The receiver is on, turn network layer polling off.
   1663                  if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \   000108   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00010B   E0           MOVX      A,@DPTR
   \   00010C   A2E3         MOV       C,0xE0 /* A   */.3
   \   00010E   501D         JNC       ??ZDApp_ProcessNetworkJoin_10
   1664                  {
   1665                    // if Child Table Management process is not enabled
   1666                    if ( zgChildAgingEnable == FALSE )
   \   000110   90....       MOV       DPTR,#zgChildAgingEnable
   \   000113   E0           MOVX      A,@DPTR
   \   000114   7017         JNZ       ??ZDApp_ProcessNetworkJoin_10
   1667                    {
   1668                      NLME_SetPollRate( 0 );
   \   000116                ; Setup parameters for call to function NLME_SetPollRate
   \   000116   90....       MOV       DPTR,#__Constant_0
   \   000119   12....       LCALL     ?XLOAD_R2345
   \   00011C   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1669                      NLME_SetQueuedPollRate( 0 );
   \   00011F                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   00011F   7A00         MOV       R2,#0x0
   \   000121   7B00         MOV       R3,#0x0
   \   000123   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1670                      NLME_SetResponseRate( 0 );
   \   000126                ; Setup parameters for call to function NLME_SetResponseRate
   \   000126   7A00         MOV       R2,#0x0
   \   000128   7B00         MOV       R3,#0x0
   \   00012A   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   1671                    }
   1672                  }
   1673          
   1674                  if ( ZSTACK_ROUTER_BUILD )
   1675                  {
   1676                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1677                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1678                    {
   1679                      NLME_StartRouterRequest( 0, 0, false );
   1680                    }
   1681                  }
   1682          
   1683                  ZDApp_AnnounceNewAddress();
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   00012D                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00012D   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   \   000130   02....       LJMP      ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
   1684                }
   1685              }
   1686              else
   1687              {
   1688                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   000133   90....       MOV       DPTR,#devStartMode
   \   000136   E0           MOVX      A,@DPTR
   \   000137   6401         XRL       A,#0x1
   \   000139   704A         JNZ       ??ZDApp_ProcessNetworkJoin_11
   1689                {
   1690                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   00013B   90....       MOV       DPTR,#retryCnt
   \   00013E   E0           MOVX      A,@DPTR
   \   00013F   2401         ADD       A,#0x1
   \   000141   F0           MOVX      @DPTR,A
   \   000142   90....       MOV       DPTR,#retryCnt
   \   000145   E0           MOVX      A,@DPTR
   \   000146   C3           CLR       C
   \   000147   9404         SUBB      A,#0x4
   \   000149   502A         JNC       ??ZDApp_ProcessNetworkJoin_12
   1691                  {
   1692                    if ( _NIB.nwkPanId == 0xFFFF )
   \   00014B   90....       MOV       DPTR,#_NIB + 33
   \   00014E   E0           MOVX      A,@DPTR
   \   00014F   64FF         XRL       A,#0xff
   \   000151   7004         JNZ       ??ZDApp_ProcessNetworkJoin_13
   \   000153   A3           INC       DPTR
   \   000154   E0           MOVX      A,@DPTR
   \   000155   64FF         XRL       A,#0xff
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   000157   7008         JNZ       ??ZDApp_ProcessNetworkJoin_14
   1693                      devStartMode = MODE_JOIN;
   \   000159   90....       MOV       DPTR,#devStartMode
   \   00015C   7400         MOV       A,#0x0
   \   00015E   F0           MOVX      @DPTR,A
   \   00015F   803E         SJMP      ??ZDApp_ProcessNetworkJoin_15
   1694                    else
   1695                    {
   1696                      devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   000161   90....       MOV       DPTR,#devStartMode
   \   000164   7403         MOV       A,#0x3
   \   000166   F0           MOVX      @DPTR,A
   1697                      _tmpRejoinState = true;
   \   000167   90....       MOV       DPTR,#_tmpRejoinState
   \   00016A   7401         MOV       A,#0x1
   \   00016C   F0           MOVX      @DPTR,A
   1698                      prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \   00016D   90....       MOV       DPTR,#prevDevState
   \   000170   7404         MOV       A,#0x4
   \   000172   F0           MOVX      @DPTR,A
   \   000173   802A         SJMP      ??ZDApp_ProcessNetworkJoin_15
   1699                    }
   1700                  }
   1701                  // Do a normal join to the network after certain times of rejoin retries
   1702                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   000175   90....       MOV       DPTR,#AIB_apsUseInsecureJoin
   \   000178   E0           MOVX      A,@DPTR
   \   000179   6401         XRL       A,#0x1
   \   00017B   7022         JNZ       ??ZDApp_ProcessNetworkJoin_15
   1703                  {
   1704                    devStartMode = MODE_JOIN;
   \   00017D   90....       MOV       DPTR,#devStartMode
   \   000180   7400         MOV       A,#0x0
   \   000182   F0           MOVX      @DPTR,A
   \   000183   801A         SJMP      ??ZDApp_ProcessNetworkJoin_15
   1705                  }
   1706                }
   1707                else if(devStartMode == MODE_REJOIN)
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   000185   90....       MOV       DPTR,#devStartMode
   \   000188   E0           MOVX      A,@DPTR
   \   000189   6403         XRL       A,#0x3
   \   00018B   7012         JNZ       ??ZDApp_ProcessNetworkJoin_15
   1708                {
   1709                  if ( ZSTACK_END_DEVICE_BUILD )
   1710                  {
   1711                    devStartMode = MODE_REJOIN;
   \   00018D   90....       MOV       DPTR,#devStartMode
   \   000190   7403         MOV       A,#0x3
   \   000192   F0           MOVX      @DPTR,A
   1712                    _tmpRejoinState = true;
   \   000193   90....       MOV       DPTR,#_tmpRejoinState
   \   000196   7401         MOV       A,#0x1
   \   000198   F0           MOVX      @DPTR,A
   1713                    _NIB.nwkState = NWK_INIT;
   \   000199   90....       MOV       DPTR,#_NIB + 35
   \   00019C   7400         MOV       A,#0x0
   \   00019E   F0           MOVX      @DPTR,A
   1714                  }
   1715                }
   1716          
   1717                // Clear the neighbor Table and network discovery tables.
   1718                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   00019F                ; Setup parameters for call to function nwkNeighborInitTable
   \   00019F   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1719                NLME_NwkDiscTerm();
   \   0001A2                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0001A2   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1720          
   1721                if ( ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   1722                  || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
   1723                    && (zgChildAgingEnable == TRUE) ) ) && (devStartMode == MODE_REJOIN) )
   \   0001A5   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0001A8   E0           MOVX      A,@DPTR
   \   0001A9   A2E3         MOV       C,0xE0 /* A   */.3
   \   0001AB   5010         JNC       ??ZDApp_ProcessNetworkJoin_16
   \   0001AD   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0001B0   E0           MOVX      A,@DPTR
   \   0001B1   A2E3         MOV       C,0xE0 /* A   */.3
   \   0001B3   503C         JNC       ??ZDApp_ProcessNetworkJoin_4
   \   0001B5   90....       MOV       DPTR,#zgChildAgingEnable
   \   0001B8   E0           MOVX      A,@DPTR
   \   0001B9   6401         XRL       A,#0x1
   \   0001BB   7034         JNZ       ??ZDApp_ProcessNetworkJoin_4
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   0001BD   90....       MOV       DPTR,#devStartMode
   \   0001C0   E0           MOVX      A,@DPTR
   \   0001C1   6403         XRL       A,#0x3
   \   0001C3   702C         JNZ       ??ZDApp_ProcessNetworkJoin_4
   1724                {
   1725                  NLME_SetPollRate( zgRejoinPollRate );
   \   0001C5                ; Setup parameters for call to function NLME_SetPollRate
   \   0001C5   90....       MOV       DPTR,#zgRejoinPollRate
   \   0001C8   E0           MOVX      A,@DPTR
   \   0001C9   F5..         MOV       ?V0,A
   \   0001CB   A3           INC       DPTR
   \   0001CC   E0           MOVX      A,@DPTR
   \   0001CD   F5..         MOV       ?V1,A
   \   0001CF   AA..         MOV       R2,?V0
   \   0001D1   AB..         MOV       R3,?V1
   \   0001D3   E4           CLR       A
   \   0001D4   FC           MOV       R4,A
   \   0001D5   FD           MOV       R5,A
   \   0001D6   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   0001D9   8016         SJMP      ??ZDApp_ProcessNetworkJoin_4
   1726                }
   1727              }
   1728            }
   1729          #if defined ( ZIGBEEPRO )
   1730            else if ( devState != DEV_HOLD )
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   0001DB   90....       MOV       DPTR,#devState
   \   0001DE   E0           MOVX      A,@DPTR
   \   0001DF   6010         JZ        ??ZDApp_ProcessNetworkJoin_4
   1731            {
   1732              #ifdef APP_TP2
   1733                if(devState == DEV_END_DEVICE_UNAUTH )
   1734                {
   1735                  return;
   1736                }
   1737              #endif
   1738          	  
   1739              // Assume from address conflict
   1740          
   1741              // Notify the network
   1742              ZDApp_AnnounceNewAddress();
   \   0001E1                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   0001E1   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1743          
   1744              // Notify apps
   1745              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   0001E4                ; Setup parameters for call to function osal_set_event
   \   0001E4   7A10         MOV       R2,#0x10
   \   0001E6   7B00         MOV       R3,#0x0
   \   0001E8   90....       MOV       DPTR,#ZDAppTaskID
   \   0001EB   E0           MOVX      A,@DPTR
   \   0001EC   F9           MOV       R1,A
   \   0001ED   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   0001F0   E9           MOV       A,R1
   1746            }
   1747          #endif
   1748          }
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   0001F1   7F02         MOV       R7,#0x2
   \   0001F3   02....       LJMP      ?BANKED_LEAVE_XDATA
   1749          
   1750          /******************************************************************************
   1751           * @fn          ZDApp_StoreNwkSecMaterial
   1752           *
   1753           * @brief       Stores new entries in the NwkSecMaterial
   1754           *
   1755           * @param       none
   1756           *
   1757           * @return      none
   1758           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1759          void ZDApp_StoreNwkSecMaterial(void)
   \                     ZDApp_StoreNwkSecMaterial:
   1760          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1761            nwkSecMaterialDesc_t nwkSecMaterialDesc;
   1762            uint8 i;
   1763            uint8 emptyEntryIndexOffset = gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES;
   \   00000A   90....       MOV       DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
   \   00000D   E4           CLR       A
   \   00000E   93           MOVC      A,@A+DPTR
   \   00000F   FF           MOV       R7,A
   1764            
   1765            //Search if we do have security material for this network
   1766            for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
   \   000010   7E00         MOV       R6,#0x0
   \                     ??ZDApp_StoreNwkSecMaterial_0:
   \   000012   90....       MOV       DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
   \   000015   E4           CLR       A
   \   000016   93           MOVC      A,@A+DPTR
   \   000017   F8           MOV       R0,A
   \   000018   EE           MOV       A,R6
   \   000019   C3           CLR       C
   \   00001A   98           SUBB      A,R0
   \   00001B   5075         JNC       ??ZDApp_StoreNwkSecMaterial_1
   1767            {
   1768              osal_nv_read(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   00001D                ; Setup parameters for call to function osal_nv_read
   \   00001D   A8..         MOV       R0,?XSP + 0
   \   00001F   A9..         MOV       R1,?XSP + 1
   \   000021   88..         MOV       ?V0,R0
   \   000023   89..         MOV       ?V1,R1
   \   000025   78..         MOV       R0,#?V0
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002A   75..0C       MOV       ?V0,#0xc
   \   00002D   75..00       MOV       ?V1,#0x0
   \   000030   78..         MOV       R0,#?V0
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   7C00         MOV       R4,#0x0
   \   000037   7D00         MOV       R5,#0x0
   \   000039   EE           MOV       A,R6
   \   00003A   F8           MOV       R0,A
   \   00003B   7900         MOV       R1,#0x0
   \   00003D   E8           MOV       A,R0
   \   00003E   2475         ADD       A,#0x75
   \   000040   FA           MOV       R2,A
   \   000041   E4           CLR       A
   \   000042   39           ADDC      A,R1
   \   000043   FB           MOV       R3,A
   \   000044   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000047   7404         MOV       A,#0x4
   \   000049   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004C   E9           MOV       A,R1
   1769              {
   1770                if(osal_memcmp(_NIB.extendedPANID,nwkSecMaterialDesc.extendedPanID,Z_EXTADDR_LEN))
   \   00004D                ; Setup parameters for call to function osal_memcmp
   \   00004D   7404         MOV       A,#0x4
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   A982         MOV       R1,DPL
   \   000054   AA83         MOV       R2,DPH
   \   000056   7B00         MOV       R3,#0x0
   \   000058   89..         MOV       ?V0,R1
   \   00005A   8A..         MOV       ?V1,R2
   \   00005C   8B..         MOV       ?V2,R3
   \   00005E   78..         MOV       R0,#?V0
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000063   7C08         MOV       R4,#0x8
   \   000065   7D00         MOV       R5,#0x0
   \   000067   79..         MOV       R1,#(_NIB + 53) & 0xff
   \   000069   7A..         MOV       R2,#((_NIB + 53) >> 8) & 0xff
   \   00006B   7B00         MOV       R3,#0x0
   \   00006D   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000070   7403         MOV       A,#0x3
   \   000072   12....       LCALL     ?DEALLOC_XSTACK8
   \   000075   E9           MOV       A,R1
   \   000076   701A         JNZ       ??ZDApp_StoreNwkSecMaterial_1
   1771                {
   1772                  break;
   1773                }
   1774                if(osal_isbufset(nwkSecMaterialDesc.extendedPanID,0,Z_EXTADDR_LEN))
   \   000078                ; Setup parameters for call to function osal_isbufset
   \   000078   7C08         MOV       R4,#0x8
   \   00007A   7900         MOV       R1,#0x0
   \   00007C   7404         MOV       A,#0x4
   \   00007E   12....       LCALL     ?XSTACK_DISP0_8
   \   000081   AA82         MOV       R2,DPL
   \   000083   AB83         MOV       R3,DPH
   \   000085   12....       LCALL     `??osal_isbufset::?relay`; Banked call to: osal_isbufset
   \   000088   E9           MOV       A,R1
   \   000089   6004         JZ        ??ZDApp_StoreNwkSecMaterial_2
   1775                {
   1776                  emptyEntryIndexOffset = i;
   \   00008B   EE           MOV       A,R6
   \   00008C   FF           MOV       R7,A
   1777                  break;
   \   00008D   8003         SJMP      ??ZDApp_StoreNwkSecMaterial_1
   1778                }
   1779              }
   1780            }
   \                     ??ZDApp_StoreNwkSecMaterial_2:
   \   00008F   0E           INC       R6
   \   000090   8080         SJMP      ??ZDApp_StoreNwkSecMaterial_0
   1781            
   1782            //ExtPanID not found and found an empty entry, save the extended PANID
   1783            if(emptyEntryIndexOffset < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES)
   \                     ??ZDApp_StoreNwkSecMaterial_1:
   \   000092   90....       MOV       DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
   \   000095   E4           CLR       A
   \   000096   93           MOVC      A,@A+DPTR
   \   000097   F8           MOV       R0,A
   \   000098   EF           MOV       A,R7
   \   000099   C3           CLR       C
   \   00009A   98           SUBB      A,R0
   \   00009B   5068         JNC       ??ZDApp_StoreNwkSecMaterial_3
   1784            {
   1785              osal_memcpy(nwkSecMaterialDesc.extendedPanID, _NIB.extendedPANID, Z_EXTADDR_LEN);
   \   00009D                ; Setup parameters for call to function osal_memcpy
   \   00009D   75....       MOV       ?V0,#(_NIB + 53) & 0xff
   \   0000A0   75....       MOV       ?V1,#((_NIB + 53) >> 8) & 0xff
   \   0000A3   75..00       MOV       ?V2,#0x0
   \   0000A6   78..         MOV       R0,#?V0
   \   0000A8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000AB   7C08         MOV       R4,#0x8
   \   0000AD   7D00         MOV       R5,#0x0
   \   0000AF   7407         MOV       A,#0x7
   \   0000B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B4   AA82         MOV       R2,DPL
   \   0000B6   AB83         MOV       R3,DPH
   \   0000B8   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000BB   7403         MOV       A,#0x3
   \   0000BD   12....       LCALL     ?DEALLOC_XSTACK8
   1786              nwkSecMaterialDesc.FrameCounter = 0;
   \   0000C0   85..82       MOV       DPL,?XSP + 0
   \   0000C3   85..83       MOV       DPH,?XSP + 1
   \   0000C6   7400         MOV       A,#0x0
   \   0000C8   F0           MOVX      @DPTR,A
   \   0000C9   A3           INC       DPTR
   \   0000CA   7400         MOV       A,#0x0
   \   0000CC   F0           MOVX      @DPTR,A
   \   0000CD   A3           INC       DPTR
   \   0000CE   7400         MOV       A,#0x0
   \   0000D0   F0           MOVX      @DPTR,A
   \   0000D1   A3           INC       DPTR
   \   0000D2   7400         MOV       A,#0x0
   \   0000D4   F0           MOVX      @DPTR,A
   1787              osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + emptyEntryIndexOffset,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   0000D5                ; Setup parameters for call to function osal_nv_write
   \   0000D5   A8..         MOV       R0,?XSP + 0
   \   0000D7   A9..         MOV       R1,?XSP + 1
   \   0000D9   88..         MOV       ?V0,R0
   \   0000DB   89..         MOV       ?V1,R1
   \   0000DD   78..         MOV       R0,#?V0
   \   0000DF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E2   75..0C       MOV       ?V0,#0xc
   \   0000E5   75..00       MOV       ?V1,#0x0
   \   0000E8   78..         MOV       R0,#?V0
   \   0000EA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000ED   7C00         MOV       R4,#0x0
   \   0000EF   7D00         MOV       R5,#0x0
   \   0000F1   EF           MOV       A,R7
   \   0000F2   F8           MOV       R0,A
   \   0000F3   7900         MOV       R1,#0x0
   \   0000F5   E8           MOV       A,R0
   \   0000F6   2475         ADD       A,#0x75
   \   0000F8   FA           MOV       R2,A
   \   0000F9   E4           CLR       A
   \   0000FA   39           ADDC      A,R1
   \   0000FB   FB           MOV       R3,A
   \   0000FC   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000FF   7404         MOV       A,#0x4
   \   000101   12....       LCALL     ?DEALLOC_XSTACK8
   \   000104   E9           MOV       A,R1
   1788            }
   1789          
   1790          }
   \                     ??ZDApp_StoreNwkSecMaterial_3:
   \   000105   740C         MOV       A,#0xc
   \   000107   12....       LCALL     ?DEALLOC_XSTACK8
   \   00010A   7F03         MOV       R7,#0x3
   \   00010C   02....       LJMP      ?BANKED_LEAVE_XDATA
   1791          
   1792          
   1793          /*********************************************************************
   1794           * @fn      ZDApp_SaveNwkKey()
   1795           *
   1796           * @brief   Save off the Network key information.
   1797           *
   1798           * @param   none
   1799           *
   1800           * @return  none
   1801           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1802          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1803          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 33
   \   000005   74DF         MOV       A,#-0x21
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1804            nwkActiveKeyItems keyItems;
   1805            nwkSecMaterialDesc_t nwkSecMaterialDesc;
   1806            uint8 found = 0;
   \   00000A   7F00         MOV       R7,#0x0
   1807            uint8 i;
   1808            
   1809            SSP_ReadNwkActiveKey( &keyItems );
   \   00000C                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000C   740C         MOV       A,#0xc
   \   00000E   12....       LCALL     ?XSTACK_DISP101_8
   \   000011   12....       LCALL     `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
   1810          
   1811            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1812                          (void *)&keyItems );
   \   000014                ; Setup parameters for call to function osal_nv_write
   \   000014   740C         MOV       A,#0xc
   \   000016   12....       LCALL     ?XSTACK_DISP100_8
   \   000019   88..         MOV       ?V0,R0
   \   00001B   89..         MOV       ?V1,R1
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000022   75..15       MOV       ?V0,#0x15
   \   000025   75..00       MOV       ?V1,#0x0
   \   000028   78..         MOV       R0,#?V0
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   7C00         MOV       R4,#0x0
   \   00002F   7D00         MOV       R5,#0x0
   \   000031   7A82         MOV       R2,#-0x7e
   \   000033   7B00         MOV       R3,#0x0
   \   000035   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000038   7404         MOV       A,#0x4
   \   00003A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003D   E9           MOV       A,R1
   1813            
   1814            //Search for the security material to update its framecounter
   1815            for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
   \   00003E   7E00         MOV       R6,#0x0
   \                     ??ZDApp_SaveNwkKey_0:
   \   000040   90....       MOV       DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
   \   000043   E4           CLR       A
   \   000044   93           MOVC      A,@A+DPTR
   \   000045   F8           MOV       R0,A
   \   000046   EE           MOV       A,R6
   \   000047   C3           CLR       C
   \   000048   98           SUBB      A,R0
   \   000049   4003         JC        $+5
   \   00004B   02....       LJMP      ??ZDApp_SaveNwkKey_1 & 0xFFFF
   1816            {
   1817              osal_nv_read(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   00004E                ; Setup parameters for call to function osal_nv_read
   \   00004E   A8..         MOV       R0,?XSP + 0
   \   000050   A9..         MOV       R1,?XSP + 1
   \   000052   88..         MOV       ?V0,R0
   \   000054   89..         MOV       ?V1,R1
   \   000056   78..         MOV       R0,#?V0
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005B   75..0C       MOV       ?V0,#0xc
   \   00005E   75..00       MOV       ?V1,#0x0
   \   000061   78..         MOV       R0,#?V0
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000066   7C00         MOV       R4,#0x0
   \   000068   7D00         MOV       R5,#0x0
   \   00006A   EE           MOV       A,R6
   \   00006B   F8           MOV       R0,A
   \   00006C   7900         MOV       R1,#0x0
   \   00006E   E8           MOV       A,R0
   \   00006F   2475         ADD       A,#0x75
   \   000071   FA           MOV       R2,A
   \   000072   E4           CLR       A
   \   000073   39           ADDC      A,R1
   \   000074   FB           MOV       R3,A
   \   000075   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000078   7404         MOV       A,#0x4
   \   00007A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007D   E9           MOV       A,R1
   1818              {
   1819                if(osal_memcmp(_NIB.extendedPANID,nwkSecMaterialDesc.extendedPanID,Z_EXTADDR_LEN))
   \   00007E                ; Setup parameters for call to function osal_memcmp
   \   00007E   7404         MOV       A,#0x4
   \   000080   12....       LCALL     ?XSTACK_DISP0_8
   \   000083   A982         MOV       R1,DPL
   \   000085   AA83         MOV       R2,DPH
   \   000087   7B00         MOV       R3,#0x0
   \   000089   89..         MOV       ?V0,R1
   \   00008B   8A..         MOV       ?V1,R2
   \   00008D   8B..         MOV       ?V2,R3
   \   00008F   78..         MOV       R0,#?V0
   \   000091   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000094   7C08         MOV       R4,#0x8
   \   000096   7D00         MOV       R5,#0x0
   \   000098   79..         MOV       R1,#(_NIB + 53) & 0xff
   \   00009A   7A..         MOV       R2,#((_NIB + 53) >> 8) & 0xff
   \   00009C   7B00         MOV       R3,#0x0
   \   00009E   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000A1   7403         MOV       A,#0x3
   \   0000A3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A6   E9           MOV       A,R1
   \   0000A7   6045         JZ        ??ZDApp_SaveNwkKey_2
   1820                {
   1821                  nwkSecMaterialDesc.FrameCounter = keyItems.frameCounter;
   \   0000A9   741D         MOV       A,#0x1d
   \   0000AB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AE   12....       LCALL     ?XLOAD_R0123
   \   0000B1   85..82       MOV       DPL,?XSP + 0
   \   0000B4   85..83       MOV       DPH,?XSP + 1
   \   0000B7   12....       LCALL     ?XSTORE_R0123
   1822                  found = TRUE;
   \   0000BA   7F01         MOV       R7,#0x1
   1823                  //update the framecounter associated to this ExtPanID
   1824                  osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   0000BC                ; Setup parameters for call to function osal_nv_write
   \   0000BC   A8..         MOV       R0,?XSP + 0
   \   0000BE   A9..         MOV       R1,?XSP + 1
   \   0000C0   88..         MOV       ?V0,R0
   \   0000C2   89..         MOV       ?V1,R1
   \   0000C4   78..         MOV       R0,#?V0
   \   0000C6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C9   75..0C       MOV       ?V0,#0xc
   \   0000CC   75..00       MOV       ?V1,#0x0
   \   0000CF   78..         MOV       R0,#?V0
   \   0000D1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D4   7C00         MOV       R4,#0x0
   \   0000D6   7D00         MOV       R5,#0x0
   \   0000D8   EE           MOV       A,R6
   \   0000D9   F8           MOV       R0,A
   \   0000DA   7900         MOV       R1,#0x0
   \   0000DC   E8           MOV       A,R0
   \   0000DD   2475         ADD       A,#0x75
   \   0000DF   FA           MOV       R2,A
   \   0000E0   E4           CLR       A
   \   0000E1   39           ADDC      A,R1
   \   0000E2   FB           MOV       R3,A
   \   0000E3   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000E6   7404         MOV       A,#0x4
   \   0000E8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000EB   E9           MOV       A,R1
   1825                  break;
   \   0000EC   8004         SJMP      ??ZDApp_SaveNwkKey_1
   1826                }
   1827              }
   1828            }
   \                     ??ZDApp_SaveNwkKey_2:
   \   0000EE   0E           INC       R6
   \   0000EF   02....       LJMP      ??ZDApp_SaveNwkKey_0 & 0xFFFF
   1829            
   1830            //If not found, then use the generic
   1831            if(!found)
   \                     ??ZDApp_SaveNwkKey_1:
   \   0000F2   EF           MOV       A,R7
   \   0000F3   7053         JNZ       ??ZDApp_SaveNwkKey_3
   1832            {
   1833              osal_memset(nwkSecMaterialDesc.extendedPanID,0xFF,Z_EXTADDR_LEN);
   \   0000F5                ; Setup parameters for call to function osal_memset
   \   0000F5   7C08         MOV       R4,#0x8
   \   0000F7   7D00         MOV       R5,#0x0
   \   0000F9   79FF         MOV       R1,#-0x1
   \   0000FB   7404         MOV       A,#0x4
   \   0000FD   12....       LCALL     ?XSTACK_DISP0_8
   \   000100   AA82         MOV       R2,DPL
   \   000102   AB83         MOV       R3,DPH
   \   000104   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1834              nwkSecMaterialDesc.FrameCounter = keyItems.frameCounter;
   \   000107   741D         MOV       A,#0x1d
   \   000109   12....       LCALL     ?XSTACK_DISP0_8
   \   00010C   12....       LCALL     ?XLOAD_R0123
   \   00010F   85..82       MOV       DPL,?XSP + 0
   \   000112   85..83       MOV       DPH,?XSP + 1
   \   000115   12....       LCALL     ?XSTORE_R0123
   1835              //update the framecounter associated to this ExtPanID
   1836              osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i - 1,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   000118                ; Setup parameters for call to function osal_nv_write
   \   000118   A8..         MOV       R0,?XSP + 0
   \   00011A   A9..         MOV       R1,?XSP + 1
   \   00011C   88..         MOV       ?V0,R0
   \   00011E   89..         MOV       ?V1,R1
   \   000120   78..         MOV       R0,#?V0
   \   000122   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000125   75..0C       MOV       ?V0,#0xc
   \   000128   75..00       MOV       ?V1,#0x0
   \   00012B   78..         MOV       R0,#?V0
   \   00012D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000130   7C00         MOV       R4,#0x0
   \   000132   7D00         MOV       R5,#0x0
   \   000134   EE           MOV       A,R6
   \   000135   F8           MOV       R0,A
   \   000136   7900         MOV       R1,#0x0
   \   000138   E8           MOV       A,R0
   \   000139   2474         ADD       A,#0x74
   \   00013B   FA           MOV       R2,A
   \   00013C   E4           CLR       A
   \   00013D   39           ADDC      A,R1
   \   00013E   FB           MOV       R3,A
   \   00013F   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000142   7404         MOV       A,#0x4
   \   000144   12....       LCALL     ?DEALLOC_XSTACK8
   \   000147   E9           MOV       A,R1
   1837            }
   1838            
   1839            
   1840            nwkFrameCounterChanges = 0;
   \                     ??ZDApp_SaveNwkKey_3:
   \   000148   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   00014B   7400         MOV       A,#0x0
   \   00014D   F0           MOVX      @DPTR,A
   \   00014E   A3           INC       DPTR
   \   00014F   7400         MOV       A,#0x0
   \   000151   F0           MOVX      @DPTR,A
   1841            
   1842            // Clear copy in RAM before return.
   1843            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   000152                ; Setup parameters for call to function osal_memset
   \   000152   7C15         MOV       R4,#0x15
   \   000154   7D00         MOV       R5,#0x0
   \   000156   7900         MOV       R1,#0x0
   \   000158   740C         MOV       A,#0xc
   \   00015A   12....       LCALL     ?XSTACK_DISP101_8
   \   00015D   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1844          
   1845          }
   \   000160   7421         MOV       A,#0x21
   \   000162   12....       LCALL     ?DEALLOC_XSTACK8
   \   000165   7F03         MOV       R7,#0x3
   \   000167   02....       LJMP      ?BANKED_LEAVE_XDATA
   1846          
   1847          /*********************************************************************
   1848           * @fn      ZDApp_ForceConcentratorChange()
   1849           *
   1850           * @brief   Force a network concentrator change by resetting
   1851           *          zgConcentratorEnable and zgConcentratorDiscoveryTime
   1852           *          from NV and set nwk event.
   1853           *
   1854           * @param   none
   1855           *
   1856           * @return  none
   1857           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1858          void ZDApp_ForceConcentratorChange( void )
   \                     ZDApp_ForceConcentratorChange:
   1859          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1860            osal_nv_read( ZCD_NV_CONCENTRATOR_ENABLE, 0, sizeof(zgConcentratorEnable), &zgConcentratorEnable );
   \   000005                ; Setup parameters for call to function osal_nv_read
   \   000005   75....       MOV       ?V0,#zgConcentratorEnable & 0xff
   \   000008   75....       MOV       ?V1,#(zgConcentratorEnable >> 8) & 0xff
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000010   75..01       MOV       ?V0,#0x1
   \   000013   75..00       MOV       ?V1,#0x0
   \   000016   78..         MOV       R0,#?V0
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001B   7C00         MOV       R4,#0x0
   \   00001D   7D00         MOV       R5,#0x0
   \   00001F   7A32         MOV       R2,#0x32
   \   000021   7B00         MOV       R3,#0x0
   \   000023   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000026   7404         MOV       A,#0x4
   \   000028   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002B   E9           MOV       A,R1
   1861            osal_nv_read( ZCD_NV_CONCENTRATOR_DISCOVERY, 0, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime );
   \   00002C                ; Setup parameters for call to function osal_nv_read
   \   00002C   75....       MOV       ?V0,#zgConcentratorDiscoveryTime & 0xff
   \   00002F   75....       MOV       ?V1,#(zgConcentratorDiscoveryTime >> 8) & 0xff
   \   000032   78..         MOV       R0,#?V0
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   75..01       MOV       ?V0,#0x1
   \   00003A   75..00       MOV       ?V1,#0x0
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000042   7C00         MOV       R4,#0x0
   \   000044   7D00         MOV       R5,#0x0
   \   000046   7A33         MOV       R2,#0x33
   \   000048   7B00         MOV       R3,#0x0
   \   00004A   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00004D   7404         MOV       A,#0x4
   \   00004F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000052   E9           MOV       A,R1
   1862          
   1863            if ( zgConcentratorEnable == TRUE )
   \   000053   90....       MOV       DPTR,#zgConcentratorEnable
   \   000056   E0           MOVX      A,@DPTR
   \   000057   6401         XRL       A,#0x1
   \   000059   701A         JNZ       ??ZDApp_ForceConcentratorChange_0
   1864            {
   1865              // Start next event
   1866              osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   00005B                ; Setup parameters for call to function osal_start_timerEx
   \   00005B   90....       MOV       DPTR,#__Constant_64
   \   00005E   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000061   7A00         MOV       R2,#0x0
   \   000063   7B08         MOV       R3,#0x8
   \   000065   90....       MOV       DPTR,#NWK_TaskID
   \   000068   E0           MOVX      A,@DPTR
   \   000069   F9           MOV       R1,A
   \   00006A   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00006D   7404         MOV       A,#0x4
   \   00006F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000072   E9           MOV       A,R1
   \   000073   800D         SJMP      ??ZDApp_ForceConcentratorChange_1
   1867            }
   1868            else
   1869            {
   1870              // Stop the next event
   1871              osal_stop_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT );
   \                     ??ZDApp_ForceConcentratorChange_0:
   \   000075                ; Setup parameters for call to function osal_stop_timerEx
   \   000075   7A00         MOV       R2,#0x0
   \   000077   7B08         MOV       R3,#0x8
   \   000079   90....       MOV       DPTR,#NWK_TaskID
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   F9           MOV       R1,A
   \   00007E   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000081   E9           MOV       A,R1
   1872            }
   1873          }
   \                     ??ZDApp_ForceConcentratorChange_1:
   \   000082   7F02         MOV       R7,#0x2
   \   000084   02....       LJMP      ?BANKED_LEAVE_XDATA
   1874          
   1875          /*********************************************************************
   1876           * @fn      ZDApp_ResetNwkKey()
   1877           *
   1878           * @brief   Reset the Network key information in NV.
   1879           *
   1880           * @param   none
   1881           *
   1882           * @return  none
   1883           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1884          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1885          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1886            nwkActiveKeyItems keyItems;
   1887          
   1888            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV       R4,#0x15
   \   00000C   7D00         MOV       R5,#0x0
   \   00000E   7900         MOV       R1,#0x0
   \   000010   AA..         MOV       R2,?XSP + 0
   \   000012   AB..         MOV       R3,?XSP + 1
   \   000014   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1889            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1890                          (void *)&keyItems );
   \   000017                ; Setup parameters for call to function osal_nv_write
   \   000017   A8..         MOV       R0,?XSP + 0
   \   000019   A9..         MOV       R1,?XSP + 1
   \   00001B   88..         MOV       ?V0,R0
   \   00001D   89..         MOV       ?V1,R1
   \   00001F   78..         MOV       R0,#?V0
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000024   75..15       MOV       ?V0,#0x15
   \   000027   75..00       MOV       ?V1,#0x0
   \   00002A   78..         MOV       R0,#?V0
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV       R4,#0x0
   \   000031   7D00         MOV       R5,#0x0
   \   000033   7A82         MOV       R2,#-0x7e
   \   000035   7B00         MOV       R3,#0x0
   \   000037   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003A   7404         MOV       A,#0x4
   \   00003C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003F   E9           MOV       A,R1
   1891          }
   \   000040   7415         MOV       A,#0x15
   \   000042   12....       LCALL     ?DEALLOC_XSTACK8
   \   000045   7F02         MOV       R7,#0x2
   \   000047   02....       LJMP      ?BANKED_LEAVE_XDATA
   1892          
   1893          /*********************************************************************
   1894           * @fn      ZDApp_RestoreNwkSecMaterial()
   1895           *
   1896           * @brief   Restore the network frame counter associated to this ExtPanID and 
   1897           *          increment it if found. This can only happens once per reset
   1898           *
   1899           * @param   none
   1900           *
   1901           * @return  none
   1902           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1903          void ZDApp_RestoreNwkSecMaterial(void)
   \                     ZDApp_RestoreNwkSecMaterial:
   1904          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1905            uint8 Found = FALSE;
   \   00000A   75..00       MOV       ?V0,#0x0
   1906            uint8 i;
   1907            nwkSecMaterialDesc_t nwkSecMaterialDesc;
   1908            uint8 UpdateFrameCounter = FALSE;
   \   00000D   7E00         MOV       R6,#0x0
   1909          
   1910            //Search if we do have security material for this network
   1911            for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
   \   00000F   7F00         MOV       R7,#0x0
   \                     ??ZDApp_RestoreNwkSecMaterial_0:
   \   000011   90....       MOV       DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
   \   000014   E4           CLR       A
   \   000015   93           MOVC      A,@A+DPTR
   \   000016   F8           MOV       R0,A
   \   000017   EF           MOV       A,R7
   \   000018   C3           CLR       C
   \   000019   98           SUBB      A,R0
   \   00001A   5065         JNC       ??ZDApp_RestoreNwkSecMaterial_1
   1912            {
   1913              osal_nv_read(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   00001C                ; Setup parameters for call to function osal_nv_read
   \   00001C   A8..         MOV       R0,?XSP + 0
   \   00001E   A9..         MOV       R1,?XSP + 1
   \   000020   88..         MOV       ?V2,R0
   \   000022   89..         MOV       ?V3,R1
   \   000024   78..         MOV       R0,#?V2
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000029   75..0C       MOV       ?V2,#0xc
   \   00002C   75..00       MOV       ?V3,#0x0
   \   00002F   78..         MOV       R0,#?V2
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000034   7C00         MOV       R4,#0x0
   \   000036   7D00         MOV       R5,#0x0
   \   000038   EF           MOV       A,R7
   \   000039   F8           MOV       R0,A
   \   00003A   7900         MOV       R1,#0x0
   \   00003C   E8           MOV       A,R0
   \   00003D   2475         ADD       A,#0x75
   \   00003F   FA           MOV       R2,A
   \   000040   E4           CLR       A
   \   000041   39           ADDC      A,R1
   \   000042   FB           MOV       R3,A
   \   000043   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000046   7404         MOV       A,#0x4
   \   000048   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004B   E9           MOV       A,R1
   1914              {
   1915                if(osal_memcmp(_NIB.extendedPANID,nwkSecMaterialDesc.extendedPanID,Z_EXTADDR_LEN))
   \   00004C                ; Setup parameters for call to function osal_memcmp
   \   00004C   7404         MOV       A,#0x4
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   A982         MOV       R1,DPL
   \   000053   AA83         MOV       R2,DPH
   \   000055   7B00         MOV       R3,#0x0
   \   000057   89..         MOV       ?V4,R1
   \   000059   8A..         MOV       ?V5,R2
   \   00005B   8B..         MOV       ?V6,R3
   \   00005D   78..         MOV       R0,#?V4
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000062   7C08         MOV       R4,#0x8
   \   000064   7D00         MOV       R5,#0x0
   \   000066   79..         MOV       R1,#(_NIB + 53) & 0xff
   \   000068   7A..         MOV       R2,#((_NIB + 53) >> 8) & 0xff
   \   00006A   7B00         MOV       R3,#0x0
   \   00006C   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00006F   7403         MOV       A,#0x3
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
   \   000074   E9           MOV       A,R1
   \   000075   6007         JZ        ??ZDApp_RestoreNwkSecMaterial_2
   1916                {
   1917                  UpdateFrameCounter = TRUE;
   \   000077   7E01         MOV       R6,#0x1
   1918                  Found = TRUE;
   \   000079   75..01       MOV       ?V0,#0x1
   1919                  break;
   \   00007C   8003         SJMP      ??ZDApp_RestoreNwkSecMaterial_1
   1920                }
   1921              }
   1922            }    
   \                     ??ZDApp_RestoreNwkSecMaterial_2:
   \   00007E   0F           INC       R7
   \   00007F   8090         SJMP      ??ZDApp_RestoreNwkSecMaterial_0
   1923            //Check if we do have frame counter stored in the generic
   1924            if(!Found)
   \                     ??ZDApp_RestoreNwkSecMaterial_1:
   \   000081   E5..         MOV       A,?V0
   \   000083   7011         JNZ       ??ZDApp_RestoreNwkSecMaterial_3
   1925            {
   1926              //The last entry readed has the Generic item, thefore, no need to read it again
   1927              if(nwkSecMaterialDesc.FrameCounter)
   \   000085   85..82       MOV       DPL,?XSP + 0
   \   000088   85..83       MOV       DPH,?XSP + 1
   \   00008B   12....       LCALL     ?XLOAD_R0123
   \   00008E   E8           MOV       A,R0
   \   00008F   49           ORL       A,R1
   \   000090   4A           ORL       A,R2
   \   000091   4B           ORL       A,R3
   \   000092   6002         JZ        ??ZDApp_RestoreNwkSecMaterial_3
   1928              {
   1929                UpdateFrameCounter = TRUE;
   \   000094   7E01         MOV       R6,#0x1
   1930              }
   1931            }  
   1932          
   1933            if(UpdateFrameCounter && (!FrameCounterUpdated))
   \                     ??ZDApp_RestoreNwkSecMaterial_3:
   \   000096   EE           MOV       A,R6
   \   000097   6068         JZ        ??ZDApp_RestoreNwkSecMaterial_4
   \   000099   90....       MOV       DPTR,#FrameCounterUpdated
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   7062         JNZ       ??ZDApp_RestoreNwkSecMaterial_4
   1934            {
   1935              FrameCounterUpdated = TRUE;
   \   00009F   90....       MOV       DPTR,#FrameCounterUpdated
   \   0000A2   7401         MOV       A,#0x1
   \   0000A4   F0           MOVX      @DPTR,A
   1936              
   1937              // Increment the frame counter stored in NV
   1938              nwkSecMaterialDesc.FrameCounter += ( MAX_NWK_FRAMECOUNTER_CHANGES +
   1939                                        NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA );
   \   0000A5   90....       MOV       DPTR,#__Constant_4e2
   \   0000A8   78..         MOV       R0,#?V4
   \   0000AA   12....       LCALL     ?L_MOV_X
   \   0000AD   85..82       MOV       DPL,?XSP + 0
   \   0000B0   85..83       MOV       DPH,?XSP + 1
   \   0000B3   78..         MOV       R0,#?V4
   \   0000B5   12....       LCALL     ?L_ADD_TO_X
   1940              
   1941              nwkFrameCounter = nwkSecMaterialDesc.FrameCounter;
   \   0000B8   85..82       MOV       DPL,?XSP + 0
   \   0000BB   85..83       MOV       DPH,?XSP + 1
   \   0000BE   12....       LCALL     ?XLOAD_R0123
   \   0000C1   90....       MOV       DPTR,#nwkFrameCounter
   \   0000C4   12....       LCALL     ?XSTORE_R0123
   1942              
   1943              osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   0000C7                ; Setup parameters for call to function osal_nv_write
   \   0000C7   A8..         MOV       R0,?XSP + 0
   \   0000C9   A9..         MOV       R1,?XSP + 1
   \   0000CB   88..         MOV       ?V2,R0
   \   0000CD   89..         MOV       ?V3,R1
   \   0000CF   78..         MOV       R0,#?V2
   \   0000D1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D4   75..0C       MOV       ?V2,#0xc
   \   0000D7   75..00       MOV       ?V3,#0x0
   \   0000DA   78..         MOV       R0,#?V2
   \   0000DC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DF   7C00         MOV       R4,#0x0
   \   0000E1   7D00         MOV       R5,#0x0
   \   0000E3   EF           MOV       A,R7
   \   0000E4   F8           MOV       R0,A
   \   0000E5   7900         MOV       R1,#0x0
   \   0000E7   E8           MOV       A,R0
   \   0000E8   2475         ADD       A,#0x75
   \   0000EA   FA           MOV       R2,A
   \   0000EB   E4           CLR       A
   \   0000EC   39           ADDC      A,R1
   \   0000ED   FB           MOV       R3,A
   \   0000EE   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000F1   7404         MOV       A,#0x4
   \   0000F3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F6   E9           MOV       A,R1
   1944              
   1945              nwkFrameCounterChanges = 0;
   \   0000F7   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   0000FA   7400         MOV       A,#0x0
   \   0000FC   F0           MOVX      @DPTR,A
   \   0000FD   A3           INC       DPTR
   \   0000FE   7400         MOV       A,#0x0
   \   000100   F0           MOVX      @DPTR,A
   1946            }
   1947            return;
   \                     ??ZDApp_RestoreNwkSecMaterial_4:
   \   000101   740C         MOV       A,#0xc
   \   000103   12....       LCALL     ?DEALLOC_XSTACK8
   \   000106   7F08         MOV       R7,#0x8
   \   000108   02....       LJMP      ?BANKED_LEAVE_XDATA
   1948          }
   1949          
   1950          /*********************************************************************
   1951           * @fn      ZDApp_RestoreNwkKey(uint8 incrFrmCnt)
   1952           *
   1953           * @brief
   1954           *
   1955           *   Save off the Network key information.
   1956           *
   1957           * @param   incrFrmCnt - set to true if we want to increment the network
   1958                      frame counter, else set to false
   1959           *
   1960           * @return  true if restored from NV, false if not
   1961           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1962          uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt )
   \                     ZDApp_RestoreNwkKey:
   1963          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV       A,#-0x25
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FF           MOV       R7,A
   1964            nwkActiveKeyItems keyItems;
   1965            uint8 ret = FALSE;
   \   00000C   7E00         MOV       R6,#0x0
   1966          
   1967            ZDApp_RestoreNwkSecMaterial();
   \   00000E                ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
   \   00000E   12....       LCALL     `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
   1968          
   1969            // Restore the key information
   1970            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1971                == ZSUCCESS )
   \   000011                ; Setup parameters for call to function osal_nv_read
   \   000011   7410         MOV       A,#0x10
   \   000013   12....       LCALL     ?XSTACK_DISP100_8
   \   000016   88..         MOV       ?V0,R0
   \   000018   89..         MOV       ?V1,R1
   \   00001A   78..         MOV       R0,#?V0
   \   00001C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001F   75..15       MOV       ?V0,#0x15
   \   000022   75..00       MOV       ?V1,#0x0
   \   000025   78..         MOV       R0,#?V0
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002A   7C00         MOV       R4,#0x0
   \   00002C   7D00         MOV       R5,#0x0
   \   00002E   7A82         MOV       R2,#-0x7e
   \   000030   7B00         MOV       R3,#0x0
   \   000032   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000035   7404         MOV       A,#0x4
   \   000037   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003A   E9           MOV       A,R1
   \   00003B   7047         JNZ       ??ZDApp_RestoreNwkKey_0
   1972            {
   1973              uint8 nullKey[SEC_KEY_LEN];
   1974          
   1975              // initialize default value to compare to
   1976              osal_memset( nullKey, 0x00, SEC_KEY_LEN );
   \   00003D                ; Setup parameters for call to function osal_memset
   \   00003D   7C10         MOV       R4,#0x10
   \   00003F   7D00         MOV       R5,#0x0
   \   000041   7900         MOV       R1,#0x0
   \   000043   AA..         MOV       R2,?XSP + 0
   \   000045   AB..         MOV       R3,?XSP + 1
   \   000047   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1977          
   1978              // if stored key is different than default value, then a key has been established
   1979              if ( !osal_memcmp( keyItems.active.key, nullKey, SEC_KEY_LEN ) )
   \   00004A                ; Setup parameters for call to function osal_memcmp
   \   00004A   A8..         MOV       R0,?XSP + 0
   \   00004C   A9..         MOV       R1,?XSP + 1
   \   00004E   88..         MOV       ?V0,R0
   \   000050   89..         MOV       ?V1,R1
   \   000052   75..00       MOV       ?V2,#0x0
   \   000055   78..         MOV       R0,#?V0
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00005A   7C10         MOV       R4,#0x10
   \   00005C   7D00         MOV       R5,#0x0
   \   00005E   7414         MOV       A,#0x14
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   A982         MOV       R1,DPL
   \   000065   AA83         MOV       R2,DPH
   \   000067   7B00         MOV       R3,#0x0
   \   000069   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00006C   7403         MOV       A,#0x3
   \   00006E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000071   E9           MOV       A,R1
   \   000072   7010         JNZ       ??ZDApp_RestoreNwkKey_0
   1980              {
   1981                ret = TRUE;
   \   000074   7E01         MOV       R6,#0x1
   1982          
   1983                // Clear copy in RAM before return.
   1984                osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   000076                ; Setup parameters for call to function osal_memset
   \   000076   7C15         MOV       R4,#0x15
   \   000078   7D00         MOV       R5,#0x0
   \   00007A   7900         MOV       R1,#0x0
   \   00007C   7410         MOV       A,#0x10
   \   00007E   12....       LCALL     ?XSTACK_DISP101_8
   \   000081   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1985              }
   1986            }
   1987          
   1988            return ( ret );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   000084   EE           MOV       A,R6
   \   000085   F9           MOV       R1,A
   \   000086   7425         MOV       A,#0x25
   \   000088   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008B   7F03         MOV       R7,#0x3
   \   00008D   02....       LJMP      ?BANKED_LEAVE_XDATA
   1989          }
   1990          
   1991          /*********************************************************************
   1992           * @fn      ZDApp_ResetTimerStart
   1993           *
   1994           * @brief   Start the reset timer.
   1995           *
   1996           * @param   delay - delay time(ms) before reset
   1997           *
   1998           * @return  none
   1999           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2000          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   2001          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2002            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_DEVICE_RESET ) )
   \   000009                ; Setup parameters for call to function osal_get_timeoutEx
   \   000009   7A04         MOV       R2,#0x4
   \   00000B   7B00         MOV       R3,#0x0
   \   00000D   90....       MOV       DPTR,#ZDAppTaskID
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F9           MOV       R1,A
   \   000012   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000015   EA           MOV       A,R2
   \   000016   4B           ORL       A,R3
   \   000017   4C           ORL       A,R4
   \   000018   4D           ORL       A,R5
   \   000019   7020         JNZ       ??ZDApp_ResetTimerStart_0
   2003            {
   2004              // Start the rest timer
   2005              osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   00001B                ; Setup parameters for call to function osal_start_timerEx
   \   00001B   8E..         MOV       ?V0,R6
   \   00001D   8F..         MOV       ?V1,R7
   \   00001F   E4           CLR       A
   \   000020   F5..         MOV       ?V2,A
   \   000022   F5..         MOV       ?V3,A
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000029   7A04         MOV       R2,#0x4
   \   00002B   7B00         MOV       R3,#0x0
   \   00002D   90....       MOV       DPTR,#ZDAppTaskID
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F9           MOV       R1,A
   \   000032   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000035   7404         MOV       A,#0x4
   \   000037   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003A   E9           MOV       A,R1
   2006            }
   2007          }
   \                     ??ZDApp_ResetTimerStart_0:
   \   00003B   7F04         MOV       R7,#0x4
   \   00003D   02....       LJMP      ?BANKED_LEAVE_XDATA
   2008          
   2009          /*********************************************************************
   2010           * @fn      ZDApp_ResetTimerCancel
   2011           *
   2012           * @brief   Cancel the reset timer.
   2013           *
   2014           * @param   none
   2015           *
   2016           * @return  none
   2017           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2018          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   2019          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2020            (void)osal_stop_timerEx(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000005                ; Setup parameters for call to function osal_stop_timerEx
   \   000005   7A04         MOV       R2,#0x4
   \   000007   7B00         MOV       R3,#0x0
   \   000009   90....       MOV       DPTR,#ZDAppTaskID
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F9           MOV       R1,A
   \   00000E   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000011   E9           MOV       A,R1
   \   000012   FE           MOV       R6,A
   2021            (void)osal_clear_event(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000013                ; Setup parameters for call to function osal_clear_event
   \   000013   7A04         MOV       R2,#0x4
   \   000015   7B00         MOV       R3,#0x0
   \   000017   90....       MOV       DPTR,#ZDAppTaskID
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F9           MOV       R1,A
   \   00001C   12....       LCALL     `??osal_clear_event::?relay`; Banked call to: osal_clear_event
   \   00001F   E9           MOV       A,R1
   2022          }
   \   000020   7F01         MOV       R7,#0x1
   \   000022   02....       LJMP      ?BANKED_LEAVE_XDATA
   2023          
   2024          /*********************************************************************
   2025           * @fn      ZDApp_LeaveCtrlInit
   2026           *
   2027           * @brief   Initialize the leave control logic.
   2028           *
   2029           * @param   none
   2030           *
   2031           * @return  none
   2032           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2033          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   2034          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2035            uint8 status;
   2036          
   2037          
   2038            // Initialize control state
   2039            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000008   7400         MOV       A,#0x0
   \   00000A   F0           MOVX      @DPTR,A
   2040          
   2041            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   2042                                        sizeof(ZDApp_LeaveCtrl),
   2043                                        &ZDApp_LeaveCtrl );
   \   00000B                ; Setup parameters for call to function osal_nv_item_init
   \   00000B   75....       MOV       ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00000E   75....       MOV       ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000011   78..         MOV       R0,#?V0
   \   000013   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000016   7C01         MOV       R4,#0x1
   \   000018   7D00         MOV       R5,#0x0
   \   00001A   7A85         MOV       R2,#-0x7b
   \   00001C   7B00         MOV       R3,#0x0
   \   00001E   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000021   7402         MOV       A,#0x2
   \   000023   12....       LCALL     ?DEALLOC_XSTACK8
   \   000026   E9           MOV       A,R1
   \   000027   FE           MOV       R6,A
   2044          
   2045            if ( status == ZSUCCESS )
   \   000028   EE           MOV       A,R6
   \   000029   7027         JNZ       ??ZDApp_LeaveCtrlInit_0
   2046            {
   2047              // Read saved control
   2048              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   2049                            0,
   2050                            sizeof( uint8 ),
   2051                            &ZDApp_LeaveCtrl);
   \   00002B                ; Setup parameters for call to function osal_nv_read
   \   00002B   75....       MOV       ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00002E   75....       MOV       ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000031   78..         MOV       R0,#?V0
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000036   75..01       MOV       ?V0,#0x1
   \   000039   75..00       MOV       ?V1,#0x0
   \   00003C   78..         MOV       R0,#?V0
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000041   7C00         MOV       R4,#0x0
   \   000043   7D00         MOV       R5,#0x0
   \   000045   7A85         MOV       R2,#-0x7b
   \   000047   7B00         MOV       R3,#0x0
   \   000049   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00004C   7404         MOV       A,#0x4
   \   00004E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000051   E9           MOV       A,R1
   2052            }
   2053          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   000052   7F02         MOV       R7,#0x2
   \   000054   02....       LJMP      ?BANKED_LEAVE_XDATA
   2054          
   2055          /*********************************************************************
   2056           * @fn      ZDApp_LeaveCtrlSet
   2057           *
   2058           * @brief   Set the leave control logic.
   2059           *
   2060           * @param   ra - reassociate flag
   2061           *
   2062           * @return  none
   2063           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2064          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   2065          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   2066            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000007   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   00000A   7401         MOV       A,#0x1
   \   00000C   F0           MOVX      @DPTR,A
   2067          
   2068            if ( ra == TRUE )
   \   00000D   7401         MOV       A,#0x1
   \   00000F   6E           XRL       A,R6
   \   000010   7007         JNZ       ??ZDApp_LeaveCtrlSet_0
   2069            {
   2070              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   000012   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000015   E0           MOVX      A,@DPTR
   \   000016   D2E1         SETB      0xE0 /* A   */.1
   \   000018   F0           MOVX      @DPTR,A
   2071            }
   2072          
   2073            // Write the leave control
   2074            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   2075                           0,
   2076                           sizeof( uint8 ),
   2077                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000019                ; Setup parameters for call to function osal_nv_write
   \   000019   75....       MOV       ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00001C   75....       MOV       ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   00001F   78..         MOV       R0,#?V0
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000024   75..01       MOV       ?V0,#0x1
   \   000027   75..00       MOV       ?V1,#0x0
   \   00002A   78..         MOV       R0,#?V0
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV       R4,#0x0
   \   000031   7D00         MOV       R5,#0x0
   \   000033   7A85         MOV       R2,#-0x7b
   \   000035   7B00         MOV       R3,#0x0
   \   000037   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003A   7404         MOV       A,#0x4
   \   00003C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003F   E9           MOV       A,R1
   2078          }
   \   000040   7F02         MOV       R7,#0x2
   \   000042   02....       LJMP      ?BANKED_LEAVE_XDATA
   2079          
   2080          /*********************************************************************
   2081           * @fn      ZDApp_LeaveCtrlReset
   2082           *
   2083           * @brief   Re-initialize the leave control logic.
   2084           *
   2085           * @param   none
   2086           *
   2087           * @return  none
   2088           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2089          void ZDApp_LeaveCtrlReset( void )
   \                     ZDApp_LeaveCtrlReset:
   2090          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2091            // Set leave control to initialized state
   2092            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000008   7400         MOV       A,#0x0
   \   00000A   F0           MOVX      @DPTR,A
   2093          
   2094            // Write initialized control
   2095            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   2096                          0,
   2097                          sizeof( uint8 ),
   2098                          &ZDApp_LeaveCtrl);
   \   00000B                ; Setup parameters for call to function osal_nv_write
   \   00000B   75....       MOV       ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00000E   75....       MOV       ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000011   78..         MOV       R0,#?V0
   \   000013   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000016   75..01       MOV       ?V0,#0x1
   \   000019   75..00       MOV       ?V1,#0x0
   \   00001C   78..         MOV       R0,#?V0
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000021   7C00         MOV       R4,#0x0
   \   000023   7D00         MOV       R5,#0x0
   \   000025   7A85         MOV       R2,#-0x7b
   \   000027   7B00         MOV       R3,#0x0
   \   000029   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00002C   7404         MOV       A,#0x4
   \   00002E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000031   E9           MOV       A,R1
   2099          }
   \   000032   7F02         MOV       R7,#0x2
   \   000034   02....       LJMP      ?BANKED_LEAVE_XDATA
   2100          
   2101          /*********************************************************************
   2102           * @fn      ZDApp_LeaveCtrlBypass
   2103           *
   2104           * @brief   Check if NV restore should be skipped during a leave reset.
   2105           *
   2106           * @param   none
   2107           *
   2108           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   2109           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2110          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   2111          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2112            uint8 bypass;
   2113          
   2114            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   000004   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX      A,@DPTR
   \   000008   A2E0         MOV       C,0xE0 /* A   */.0
   \   00000A   5004         JNC       ??ZDApp_LeaveCtrlBypass_0
   2115            {
   2116              bypass = TRUE;
   \   00000C   7901         MOV       R1,#0x1
   \   00000E   8002         SJMP      ??ZDApp_LeaveCtrlBypass_1
   2117            }
   2118            else
   2119            {
   2120              bypass = FALSE;
   \                     ??ZDApp_LeaveCtrlBypass_0:
   \   000010   7900         MOV       R1,#0x0
   2121            }
   2122          
   2123            return bypass;
   \                     ??ZDApp_LeaveCtrlBypass_1:
   \   000012   D083         POP       DPH
   \   000014   D082         POP       DPL
   \   000016   02....       LJMP      ?BRET
   2124          }
   2125          
   2126          /*********************************************************************
   2127           * @fn      ZDApp_LeaveCtrlStartup
   2128           *
   2129           * @brief   Check for startup conditions during a leave reset.
   2130           *
   2131           * @param   state      - devState_t determined by leave control logic
   2132           * @param   startDelay - startup delay
   2133           *
   2134           * @return  none
   2135           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2136          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   2137          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   2138            *startDelay = 0;
   \   00000D   85..82       MOV       DPL,?V0
   \   000010   85..83       MOV       DPH,?V1
   \   000013   7400         MOV       A,#0x0
   \   000015   F0           MOVX      @DPTR,A
   \   000016   A3           INC       DPTR
   \   000017   7400         MOV       A,#0x0
   \   000019   F0           MOVX      @DPTR,A
   2139          
   2140            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00001A   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   A2E0         MOV       C,0xE0 /* A   */.0
   \   000020   5021         JNC       ??ZDApp_LeaveCtrlStartup_0
   2141            {
   2142              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000022   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000025   E0           MOVX      A,@DPTR
   \   000026   A2E1         MOV       C,0xE0 /* A   */.1
   \   000028   500F         JNC       ??ZDApp_LeaveCtrlStartup_1
   2143              {
   2144                *startDelay = LEAVE_RESET_DELAY;
   \   00002A   85..82       MOV       DPL,?V0
   \   00002D   85..83       MOV       DPH,?V1
   \   000030   7488         MOV       A,#-0x78
   \   000032   F0           MOVX      @DPTR,A
   \   000033   A3           INC       DPTR
   \   000034   7413         MOV       A,#0x13
   \   000036   F0           MOVX      @DPTR,A
   \   000037   8007         SJMP      ??ZDApp_LeaveCtrlStartup_2
   2145              }
   2146              else
   2147              {
   2148                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000039   8E82         MOV       DPL,R6
   \   00003B   8F83         MOV       DPH,R7
   \   00003D   7400         MOV       A,#0x0
   \   00003F   F0           MOVX      @DPTR,A
   2149              }
   2150          
   2151              // Reset leave control logic
   2152              ZDApp_LeaveCtrlReset();
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   000040                ; Setup parameters for call to function ZDApp_LeaveCtrlReset
   \   000040   12....       LCALL     `??ZDApp_LeaveCtrlReset::?relay`; Banked call to: ZDApp_LeaveCtrlReset
   2153            }
   2154          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   000043   7F02         MOV       R7,#0x2
   \   000045   02....       LJMP      ?BANKED_LEAVE_XDATA
   2155          
   2156          /*********************************************************************
   2157           * @fn      ZDApp_LeaveReset
   2158           *
   2159           * @brief   Setup a device reset due to a leave indication/confirm.
   2160           *
   2161           * @param   ra - reassociate flag
   2162           *
   2163           * @return  none
   2164           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2165          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   2166          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   2167            ZDApp_LeaveCtrlSet( ra );
   \   000007                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000007   EE           MOV       A,R6
   \   000008   F9           MOV       R1,A
   \   000009   12....       LCALL     `??ZDApp_LeaveCtrlSet::?relay`; Banked call to: ZDApp_LeaveCtrlSet
   2168          
   2169            APSME_HoldDataRequests( LEAVE_RESET_DELAY);
   \   00000C                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00000C   7A88         MOV       R2,#-0x78
   \   00000E   7B13         MOV       R3,#0x13
   \   000010   12....       LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   2170          
   2171            if ( ZSTACK_ROUTER_BUILD )
   2172            {
   2173              osal_stop_timerEx( NWK_TaskID, NWK_LINK_STATUS_EVT );
   2174              osal_clear_event( NWK_TaskID, NWK_LINK_STATUS_EVT );
   2175            }
   2176          
   2177            if (ZG_DEVICE_ENDDEVICE_TYPE)
   2178            {
   2179              // Save polling values to be restored after rejoin
   2180              if ( ra == TRUE )
   \   000013   7401         MOV       A,#0x1
   \   000015   6E           XRL       A,R6
   \   000016   702C         JNZ       ??ZDApp_LeaveReset_0
   2181              {
   2182                 ZDApp_SavedPollRate = zgPollRate;
   \   000018   90....       MOV       DPTR,#zgPollRate
   \   00001B   12....       LCALL     ?XLOAD_R0123
   \   00001E   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \   000021   12....       LCALL     ?XSTORE_R0123
   2183                 savedResponseRate = zgResponsePollRate;
   \   000024   90....       MOV       DPTR,#zgResponsePollRate
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F8           MOV       R0,A
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   F9           MOV       R1,A
   \   00002C   90....       MOV       DPTR,#savedResponseRate
   \   00002F   E8           MOV       A,R0
   \   000030   F0           MOVX      @DPTR,A
   \   000031   A3           INC       DPTR
   \   000032   E9           MOV       A,R1
   \   000033   F0           MOVX      @DPTR,A
   2184                 savedQueuedPollRate = zgQueuedPollRate;
   \   000034   90....       MOV       DPTR,#zgQueuedPollRate
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F8           MOV       R0,A
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F9           MOV       R1,A
   \   00003C   90....       MOV       DPTR,#savedQueuedPollRate
   \   00003F   E8           MOV       A,R0
   \   000040   F0           MOVX      @DPTR,A
   \   000041   A3           INC       DPTR
   \   000042   E9           MOV       A,R1
   \   000043   F0           MOVX      @DPTR,A
   2185              }
   2186          
   2187              // Disable polling
   2188              NLME_SetPollRate(0);
   \                     ??ZDApp_LeaveReset_0:
   \   000044                ; Setup parameters for call to function NLME_SetPollRate
   \   000044   90....       MOV       DPTR,#__Constant_0
   \   000047   12....       LCALL     ?XLOAD_R2345
   \   00004A   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   2189              NLME_SetResponseRate(0);
   \   00004D                ; Setup parameters for call to function NLME_SetResponseRate
   \   00004D   7A00         MOV       R2,#0x0
   \   00004F   7B00         MOV       R3,#0x0
   \   000051   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   2190              NLME_SetQueuedPollRate(0);
   \   000054                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000054   7A00         MOV       R2,#0x0
   \   000056   7B00         MOV       R3,#0x0
   \   000058   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   2191            }
   2192          
   2193            if ( ra == TRUE )
   \   00005B   7401         MOV       A,#0x1
   \   00005D   6E           XRL       A,R6
   \   00005E   7045         JNZ       ??ZDApp_LeaveReset_1
   2194            {
   2195              devState = DEV_NWK_DISC;
   \   000060   90....       MOV       DPTR,#devState
   \   000063   7402         MOV       A,#0x2
   \   000065   F0           MOVX      @DPTR,A
   2196              devStartMode = MODE_REJOIN;
   \   000066   90....       MOV       DPTR,#devStartMode
   \   000069   7403         MOV       A,#0x3
   \   00006B   F0           MOVX      @DPTR,A
   2197              _tmpRejoinState = true;
   \   00006C   90....       MOV       DPTR,#_tmpRejoinState
   \   00006F   7401         MOV       A,#0x1
   \   000071   F0           MOVX      @DPTR,A
   2198          
   2199              // For rejoin, specify the extended PANID to look for
   2200              osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \   000072                ; Setup parameters for call to function sAddrExtCpy
   \   000072   7C..         MOV       R4,#(_NIB + 53) & 0xff
   \   000074   7D..         MOV       R5,#((_NIB + 53) >> 8) & 0xff
   \   000076   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000078   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00007A   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2201          
   2202              _NIB.nwkState = NWK_DISC;
   \   00007D   90....       MOV       DPTR,#_NIB + 35
   \   000080   7402         MOV       A,#0x2
   \   000082   F0           MOVX      @DPTR,A
   2203               NLME_NwkDiscTerm();
   \   000083                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000083   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   2204          
   2205              ZDApp_NetworkInit((uint16)(NWK_START_DELAY + ((uint16) (osal_rand() & EXTENDED_JOINING_RANDOM_MASK ))));
   \   000086                ; Setup parameters for call to function osal_rand
   \   000086   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000089   8A..         MOV       ?V0,R2
   \   00008B   8B..         MOV       ?V1,R3
   \   00008D   A8..         MOV       R0,?V0
   \   00008F   A9..         MOV       R1,?V1
   \   000091                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000091   E8           MOV       A,R0
   \   000092   547F         ANL       A,#0x7f
   \   000094   F8           MOV       R0,A
   \   000095   E9           MOV       A,R1
   \   000096   5400         ANL       A,#0x0
   \   000098   F9           MOV       R1,A
   \   000099   E8           MOV       A,R0
   \   00009A   2464         ADD       A,#0x64
   \   00009C   FA           MOV       R2,A
   \   00009D   E4           CLR       A
   \   00009E   39           ADDC      A,R1
   \   00009F   FB           MOV       R3,A
   \   0000A0   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   0000A3   8007         SJMP      ??ZDApp_LeaveReset_2
   2206            }
   2207            else
   2208            {
   2209              ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
   \                     ??ZDApp_LeaveReset_1:
   \   0000A5                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   0000A5   7A88         MOV       R2,#-0x78
   \   0000A7   7B13         MOV       R3,#0x13
   \   0000A9   12....       LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   2210            }
   2211          }
   \                     ??ZDApp_LeaveReset_2:
   \   0000AC   7F02         MOV       R7,#0x2
   \   0000AE   02....       LJMP      ?BANKED_LEAVE_XDATA
   2212          
   2213          /*********************************************************************
   2214           * @fn      ZDApp_LeaveUpdate
   2215           *
   2216           * @brief   Update local device data related to leaving device.
   2217           *
   2218           * @param   nwkAddr        - NWK address of leaving device
   2219           * @param   extAddr        - EXT address of leaving device
   2220           * @param   removeChildren - remove children of leaving device
   2221           * @param   rejoin         - if device will rejoin or not
   2222           *
   2223           * @return  none
   2224           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2225          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   2226                                  uint8 removeChildren, uint8 rejoin )
   2227          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   \   000012   89..         MOV       ?V2,R1
   2228            uint8 TC_ExtAddr[Z_EXTADDR_LEN];
   2229            // Remove Apps Key for leaving device
   2230            ZDSecMgrDeviceRemoveByExtAddr(extAddr);
   \   000014                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   000014   EE           MOV       A,R6
   \   000015   FA           MOV       R2,A
   \   000016   EF           MOV       A,R7
   \   000017   FB           MOV       R3,A
   \   000018   12....       LCALL     `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
   \   00001B   E9           MOV       A,R1
   2231          
   2232            // Clear SECURITY bit from Address Manager
   2233            ZDSecMgrAddrClear( extAddr );
   \   00001C                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   00001C   EE           MOV       A,R6
   \   00001D   FA           MOV       R2,A
   \   00001E   EF           MOV       A,R7
   \   00001F   FB           MOV       R3,A
   \   000020   12....       LCALL     `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   \   000023   E9           MOV       A,R1
   2234          
   2235            if ( pbindRemoveDev )
   \   000024   90....       MOV       DPTR,#pbindRemoveDev
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F8           MOV       R0,A
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   F9           MOV       R1,A
   \   00002C   E8           MOV       A,R0
   \   00002D   49           ORL       A,R1
   \   00002E   6037         JZ        ??ZDApp_LeaveUpdate_0
   2236            {
   2237              zAddrType_t devAddr;
   2238          
   2239              // Remove bind entry and all related data
   2240              devAddr.addrMode = Addr64Bit;
   \   000030   7408         MOV       A,#0x8
   \   000032   12....       LCALL     ?XSTACK_DISP0_8
   \   000035   7403         MOV       A,#0x3
   \   000037   F0           MOVX      @DPTR,A
   2241              osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
   \   000038                ; Setup parameters for call to function osal_memcpy
   \   000038   8E..         MOV       ?V4,R6
   \   00003A   8F..         MOV       ?V5,R7
   \   00003C   75..00       MOV       ?V6,#0x0
   \   00003F   78..         MOV       R0,#?V4
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000044   7C08         MOV       R4,#0x8
   \   000046   7D00         MOV       R5,#0x0
   \   000048   7403         MOV       A,#0x3
   \   00004A   12....       LCALL     ?XSTACK_DISP101_8
   \   00004D   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000050   7403         MOV       A,#0x3
   \   000052   12....       LCALL     ?DEALLOC_XSTACK8
   2242          
   2243              pbindRemoveDev(&devAddr);
   \   000055                ; Setup parameters for indirect call
   \   000055   AA..         MOV       R2,?XSP + 0
   \   000057   AB..         MOV       R3,?XSP + 1
   \   000059   90....       MOV       DPTR,#pbindRemoveDev
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   F8           MOV       R0,A
   \   00005E   A3           INC       DPTR
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F583         MOV       DPH,A
   \   000062   8882         MOV       DPL,R0
   \   000064   12....       LCALL     ?CALL_IND
   2244            }
   2245          
   2246            // Remove if child
   2247            if ( ZSTACK_ROUTER_BUILD )
   2248            {
   2249              // Router shall notify the Trust Center that a child End Device or
   2250              // a neighbor Router (within radius=1) has left the network
   2251              APSME_UpdateDeviceReq_t req;
   2252          
   2253              // forward authorization to the Trust Center
   2254              req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   2255              req.devAddr    = nwkAddr;
   2256              req.devExtAddr = extAddr;
   2257              req.status = APSME_UD_DEVICE_LEFT;
   2258          
   2259              if ( rejoin == FALSE )
   2260              {
   2261                if(!APSME_IsDistributedSecurity())
   2262                {
   2263                  if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   2264                  {
   2265                    uint8 found;
   2266                    APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
   2267                    
   2268                    APSME_SearchTCLinkKeyEntry(extAddr,&found,NULL);
   2269                    
   2270                    // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
   2271                    // un-encrypted and one APS encrypted, to make sure that it can interoperate
   2272                    // with legacy Coordinator devices which can only handle one or the other.
   2273                    if ( ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY) && ( found == FALSE ) )
   2274                    {
   2275                      req.apsSecure = FALSE;
   2276          
   2277                      // send and APSME_UPDATE_DEVICE request to the trust center
   2278                      APSME_UpdateDeviceReq( &req );
   2279                    }
   2280          
   2281                    // send the message APS encrypted
   2282                    req.apsSecure = TRUE;
   2283          
   2284                    // send and APSME_UPDATE_DEVICE request to the trust center
   2285                    APSME_UpdateDeviceReq( &req );
   2286                  }
   2287                  else
   2288                  {
   2289                    req.apsSecure = FALSE;
   2290          
   2291                    // send and APSME_UPDATE_DEVICE request to the trust center
   2292                    APSME_UpdateDeviceReq( &req );
   2293                  }
   2294                }
   2295              }
   2296          
   2297              NLME_RemoveChild( extAddr, removeChildren );
   2298            }
   2299          
   2300            // Remove Routing table related entry
   2301            RTG_RemoveRtgEntry( nwkAddr, 0 );
   \                     ??ZDApp_LeaveUpdate_0:
   \   000067                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   000067   7900         MOV       R1,#0x0
   \   000069   AA..         MOV       R2,?V0
   \   00006B   AB..         MOV       R3,?V1
   \   00006D   12....       LCALL     `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   \   000070   E9           MOV       A,R1
   2302          
   2303            // Remove entry from neighborTable
   2304            nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
   \   000071                ; Setup parameters for call to function nwkNeighborRemove
   \   000071   90....       MOV       DPTR,#_NIB + 33
   \   000074   E0           MOVX      A,@DPTR
   \   000075   FC           MOV       R4,A
   \   000076   A3           INC       DPTR
   \   000077   E0           MOVX      A,@DPTR
   \   000078   FD           MOV       R5,A
   \   000079   AA..         MOV       R2,?V0
   \   00007B   AB..         MOV       R3,?V1
   \   00007D   12....       LCALL     `??nwkNeighborRemove::?relay`; Banked call to: nwkNeighborRemove
   2305          
   2306            // Schedule to save data to NV
   2307            ZDApp_NwkWriteNVRequest();
   \   000080                ; Setup parameters for call to function AddrMgrWriteNVRequest
   \   000080   12....       LCALL     `??AddrMgrWriteNVRequest::?relay`; Banked call to: AddrMgrWriteNVRequest
   2308          }
   \   000083   7409         MOV       A,#0x9
   \   000085   12....       LCALL     ?DEALLOC_XSTACK8
   \   000088   7F07         MOV       R7,#0x7
   \   00008A   02....       LJMP      ?BANKED_LEAVE_XDATA
   2309          
   2310          /*********************************************************************
   2311           * @fn      ZDApp_NetworkDiscoveryReq
   2312           *
   2313           * @brief   Request a network discovery.
   2314           *
   2315           * @param  scanChannels -
   2316           * @param  scanDuration -
   2317           *
   2318           * @return  ZStatus_t
   2319           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2320          ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
   \                     ZDApp_NetworkDiscoveryReq:
   2321          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   \   00000D   E9           MOV       A,R1
   \   00000E   FE           MOV       R6,A
   2322            // Setup optional filters - tbd
   2323          
   2324            // Request NLME network discovery
   2325            return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
   \   00000F                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   00000F   EE           MOV       A,R6
   \   000010   F9           MOV       R1,A
   \   000011   AA..         MOV       R2,?V0
   \   000013   AB..         MOV       R3,?V1
   \   000015   AC..         MOV       R4,?V2
   \   000017   AD..         MOV       R5,?V3
   \   000019   12....       LCALL     `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
   \   00001C   7F04         MOV       R7,#0x4
   \   00001E   02....       LJMP      ?BANKED_LEAVE_XDATA
   2326          }
   2327          
   2328          /*********************************************************************
   2329           * @fn      ZDApp_JoinReq
   2330           *
   2331           * @brief   Request the device to join a parent in a network.
   2332           *
   2333           * @param   channel -
   2334           * @param   panID -
   2335           *
   2336           * @return  ZStatus_t
   2337           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2338          ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
   \                     ZDApp_JoinReq:
   2339                                   uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
   2340          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V4,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   \   00000F   7410         MOV       A,#0x10
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V6,A
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V7,A
   \   00001B   7412         MOV       A,#0x12
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V3,A
   \   000023   7413         MOV       A,#0x13
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F5..         MOV       ?V2,A
   2341            // Sync up the node with the stack profile (In the case where a pro device
   2342            // joins a non-pro network, or verse versa)
   2343            ZDApp_NodeProfileSync( stackProfile);
   \   00002B                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00002B   A9..         MOV       R1,?V2
   \   00002D   12....       LCALL     `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   2344          
   2345            // Request NLME Join Request
   2346            return NLME_JoinRequest(extendedPanID, panID,channel,
   2347                                    ZDO_Config_Node_Descriptor.CapabilityFlags,
   2348                                    chosenParent, parentDepth);
   \   000030                ; Setup parameters for call to function NLME_JoinRequest
   \   000030   E5..         MOV       A,?V3
   \   000032   F5..         MOV       ?V5,A
   \   000034   78..         MOV       R0,#?V5
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000039   78..         MOV       R0,#?V6
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003E   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F5..         MOV       ?V5,A
   \   000044   78..         MOV       R0,#?V5
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000049   A9..         MOV       R1,?V4
   \   00004B   AC..         MOV       R4,?V0
   \   00004D   AD..         MOV       R5,?V1
   \   00004F   EE           MOV       A,R6
   \   000050   FA           MOV       R2,A
   \   000051   EF           MOV       A,R7
   \   000052   FB           MOV       R3,A
   \   000053   12....       LCALL     `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   000056   7404         MOV       A,#0x4
   \   000058   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005B   7F08         MOV       R7,#0x8
   \   00005D   02....       LJMP      ?BANKED_LEAVE_XDATA
   2349          
   2350          }
   2351          
   2352          /*********************************************************************
   2353           * @fn      ZDApp_DeviceConfigured
   2354           *
   2355           * @brief   Check to see if the local device is configured (i.e., part
   2356           *          of a network).
   2357           *
   2358           * @param   none
   2359           *
   2360           * @return  TRUE if configured. FALSE, otherwise.
   2361           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2362          uint8 ZDApp_DeviceConfigured( void )
   \                     ZDApp_DeviceConfigured:
   2363          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2364            uint16 nwkAddr = INVALID_NODE_ADDR;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   74FE         MOV       A,#-0x2
   \   000012   F0           MOVX      @DPTR,A
   \   000013   A3           INC       DPTR
   \   000014   74FF         MOV       A,#-0x1
   \   000016   F0           MOVX      @DPTR,A
   2365          
   2366            osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
   2367                          sizeof( uint16), &nwkAddr );
   \   000017                ; Setup parameters for call to function osal_nv_read
   \   000017   A8..         MOV       R0,?XSP + 0
   \   000019   A9..         MOV       R1,?XSP + 1
   \   00001B   88..         MOV       ?V0,R0
   \   00001D   89..         MOV       ?V1,R1
   \   00001F   78..         MOV       R0,#?V0
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000024   75..02       MOV       ?V0,#0x2
   \   000027   75..00       MOV       ?V1,#0x0
   \   00002A   78..         MOV       R0,#?V0
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002F   7C14         MOV       R4,#0x14
   \   000031   7D00         MOV       R5,#0x0
   \   000033   7A21         MOV       R2,#0x21
   \   000035   7B00         MOV       R3,#0x0
   \   000037   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00003A   7404         MOV       A,#0x4
   \   00003C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003F   E9           MOV       A,R1
   2368          
   2369            // Does the NIB have anything more than default?
   2370            return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
   \   000040   85..82       MOV       DPL,?XSP + 0
   \   000043   85..83       MOV       DPH,?XSP + 1
   \   000046   E0           MOVX      A,@DPTR
   \   000047   64FE         XRL       A,#0xfe
   \   000049   7004         JNZ       ??ZDApp_DeviceConfigured_0
   \   00004B   A3           INC       DPTR
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   64FF         XRL       A,#0xff
   \                     ??ZDApp_DeviceConfigured_0:
   \   00004F   7004         JNZ       ??ZDApp_DeviceConfigured_1
   \   000051   7900         MOV       R1,#0x0
   \   000053   8002         SJMP      ??ZDApp_DeviceConfigured_2
   \                     ??ZDApp_DeviceConfigured_1:
   \   000055   7901         MOV       R1,#0x1
   \                     ??ZDApp_DeviceConfigured_2:
   \   000057   7402         MOV       A,#0x2
   \   000059   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005C   7F02         MOV       R7,#0x2
   \   00005E   02....       LJMP      ?BANKED_LEAVE_XDATA
   2371          }
   2372          
   2373          /*********************************************************************
   2374           * CALLBACK FUNCTIONS
   2375           */
   2376          
   2377          
   2378          /*********************************************************************
   2379           * @fn      ZDApp_SendEventMsg()
   2380           *
   2381           * @brief
   2382           *
   2383           *   Sends a Network Join message
   2384           *
   2385           * @param  cmd - command ID
   2386           * @param  len - length (in bytes) of the buf field
   2387           * @param  buf - buffer for the rest of the message.
   2388           *
   2389           * @return  none
   2390           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2391          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   2392          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   2393            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   00000D                ; Setup parameters for call to function ZDApp_SendMsg
   \   00000D   EE           MOV       A,R6
   \   00000E   FC           MOV       R4,A
   \   00000F   EF           MOV       A,R7
   \   000010   FD           MOV       R5,A
   \   000011   AB..         MOV       R3,?V1
   \   000013   AA..         MOV       R2,?V0
   \   000015   90....       MOV       DPTR,#ZDAppTaskID
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F9           MOV       R1,A
   \   00001A   12....       LCALL     `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2394          }
   \   00001D   7F02         MOV       R7,#0x2
   \   00001F   02....       LJMP      ?BANKED_LEAVE_XDATA
   2395          
   2396          /*********************************************************************
   2397           * @fn      ZDApp_SendMsg()
   2398           *
   2399           * @brief   Sends a OSAL message
   2400           *
   2401           * @param  taskID - Where to send the message
   2402           * @param  cmd - command ID
   2403           * @param  len - length (in bytes) of the buf field
   2404           * @param  buf - buffer for the rest of the message.
   2405           *
   2406           * @return  none
   2407           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2408          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   2409          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V3,R2
   \   000009   8B..         MOV       ?V7,R3
   \   00000B   8C..         MOV       ?V0,R4
   \   00000D   8D..         MOV       ?V1,R5
   2410            osal_event_hdr_t *msgPtr;
   2411          
   2412            // Send the address to the task
   2413            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F                ; Setup parameters for call to function osal_msg_allocate
   \   00000F   E5..         MOV       A,?V7
   \   000011   FA           MOV       R2,A
   \   000012   7B00         MOV       R3,#0x0
   \   000014   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000017   8A..         MOV       ?V4,R2
   \   000019   8B..         MOV       ?V5,R3
   \   00001B   AE..         MOV       R6,?V4
   \   00001D   AF..         MOV       R7,?V5
   2414            if ( msgPtr )
   \   00001F   EE           MOV       A,R6
   \   000020   4F           ORL       A,R7
   \   000021   603E         JZ        ??ZDApp_SendMsg_0
   2415            {
   2416              if ( (len > 0) && (buf != NULL) )
   \   000023   E5..         MOV       A,?V7
   \   000025   6025         JZ        ??ZDApp_SendMsg_1
   \   000027   E5..         MOV       A,?V0
   \   000029   45..         ORL       A,?V1
   \   00002B   601F         JZ        ??ZDApp_SendMsg_1
   2417                osal_memcpy( msgPtr, buf, len );
   \   00002D                ; Setup parameters for call to function osal_memcpy
   \   00002D   85....       MOV       ?V4,?V0
   \   000030   85....       MOV       ?V5,?V1
   \   000033   75..00       MOV       ?V6,#0x0
   \   000036   78..         MOV       R0,#?V4
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00003B   E5..         MOV       A,?V7
   \   00003D   FC           MOV       R4,A
   \   00003E   7D00         MOV       R5,#0x0
   \   000040   EE           MOV       A,R6
   \   000041   FA           MOV       R2,A
   \   000042   EF           MOV       A,R7
   \   000043   FB           MOV       R3,A
   \   000044   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000047   7403         MOV       A,#0x3
   \   000049   12....       LCALL     ?DEALLOC_XSTACK8
   2418          
   2419              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_1:
   \   00004C   E5..         MOV       A,?V3
   \   00004E   C0E0         PUSH      A
   \   000050   8E82         MOV       DPL,R6
   \   000052   8F83         MOV       DPH,R7
   \   000054   D0E0         POP       A
   \   000056   F0           MOVX      @DPTR,A
   2420              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   000057                ; Setup parameters for call to function osal_msg_send
   \   000057   EE           MOV       A,R6
   \   000058   FA           MOV       R2,A
   \   000059   EF           MOV       A,R7
   \   00005A   FB           MOV       R3,A
   \   00005B   A9..         MOV       R1,?V2
   \   00005D   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000060   E9           MOV       A,R1
   2421            }
   2422          }
   \                     ??ZDApp_SendMsg_0:
   \   000061   7F08         MOV       R7,#0x8
   \   000063   02....       LJMP      ?BANKED_LEAVE_XDATA
   2423          
   2424          /*********************************************************************
   2425           * Call Back Functions from NWK  - API
   2426           */
   2427          
   2428          /*********************************************************************
   2429           * @fn          ZDO_NetworkDiscoveryConfirmCB
   2430           *
   2431           * @brief       This function returns a choice of PAN to join.
   2432           *
   2433           * @param       status - return status of the nwk discovery confirm
   2434           *
   2435           * @return      ZStatus_t
   2436           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2437          ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
   \                     ZDO_NetworkDiscoveryConfirmCB:
   2438          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV       A,#-0x3
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   \   000009   E9           MOV       A,R1
   \   00000A   C0E0         PUSH      A
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   D0E0         POP       A
   \   000014   F0           MOVX      @DPTR,A
   2439            osal_event_hdr_t msg;
   2440          
   2441            // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
   2442            // Send ZDO_MGMT_NWK_DISC_RSP back
   2443          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   2444            if ( zdappMgmtNwkDiscReqInProgress )
   2445            {
   2446              zdappMgmtNwkDiscReqInProgress = false;
   2447              ZDO_FinishProcessingMgmtNwkDiscReq();
   2448            }
   2449            else
   2450          #endif
   2451            {
   2452              // Pass the confirm to another task if it registers the callback
   2453              // Otherwise, pass the confirm to ZDApp.
   2454              if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
   \   000015   90....       MOV       DPTR,#zdoCBFunc + 4
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F8           MOV       R0,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F9           MOV       R1,A
   \   00001D   E8           MOV       A,R0
   \   00001E   49           ORL       A,R1
   \   00001F   6014         JZ        ??ZDO_NetworkDiscoveryConfirmCB_0
   2455              {
   2456                zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
   \   000021                ; Setup parameters for indirect call
   \   000021   AA..         MOV       R2,?XSP + 0
   \   000023   AB..         MOV       R3,?XSP + 1
   \   000025   90....       MOV       DPTR,#zdoCBFunc + 4
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F8           MOV       R0,A
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F583         MOV       DPH,A
   \   00002E   8882         MOV       DPL,R0
   \   000030   12....       LCALL     ?CALL_IND
   \   000033   8019         SJMP      ??ZDO_NetworkDiscoveryConfirmCB_1
   2457              }
   2458              else
   2459              {
   2460                // Otherwise, send scan confirm to ZDApp task to proceed
   2461                msg.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   000035   7402         MOV       A,#0x2
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   7400         MOV       A,#0x0
   \   00003C   F0           MOVX      @DPTR,A
   2462          
   2463                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
   \   00003D                ; Setup parameters for call to function ZDApp_SendMsg
   \   00003D   7401         MOV       A,#0x1
   \   00003F   12....       LCALL     ?XSTACK_DISP102_8
   \   000042   7B02         MOV       R3,#0x2
   \   000044   7A01         MOV       R2,#0x1
   \   000046   90....       MOV       DPTR,#ZDAppTaskID
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   F9           MOV       R1,A
   \   00004B   12....       LCALL     `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2464              }
   2465            }
   2466            return (ZSuccess);
   \                     ??ZDO_NetworkDiscoveryConfirmCB_1:
   \   00004E   7900         MOV       R1,#0x0
   \   000050   7403         MOV       A,#0x3
   \   000052   12....       LCALL     ?DEALLOC_XSTACK8
   \   000055   D083         POP       DPH
   \   000057   D082         POP       DPL
   \   000059   02....       LJMP      ?BRET
   2467          }  // ZDO_NetworkDiscoveryConfirmCB
   2468          
   2469          /*********************************************************************
   2470           * @fn          ZDApp_NwkDescListProcessing
   2471           *
   2472           * @brief       This function process the network discovery result and select
   2473           *              a parent device to join itself.
   2474           *
   2475           * @param       none
   2476           *
   2477           * @return      ZStatus_t
   2478           */
   2479          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2480          networkDesc_t* ZDApp_NwkDescListProcessing(void)
   \                     ZDApp_NwkDescListProcessing:
   2481          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2482            networkDesc_t *pNwkDesc;
   2483            uint8 i, ResultCount = 0;
   \   000005   75..00       MOV       ?V3,#0x0
   2484            uint8 stackProfile;
   2485            uint8 stackProfilePro;
   2486            uint8 selected;
   2487          
   2488            // Count the number of nwk descriptors in the list
   2489            pNwkDesc = nwk_getNwkDescList();
   \   000008                ; Setup parameters for call to function nwk_getNwkDescList
   \   000008   12....       LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   00000B   8A..         MOV       ?V6,R2
   \   00000D   8B..         MOV       ?V7,R3
   \   00000F   AE..         MOV       R6,?V6
   \   000011   AF..         MOV       R7,?V7
   2490            while (pNwkDesc)
   \                     ??ZDApp_NwkDescListProcessing_0:
   \   000013   EE           MOV       A,R6
   \   000014   4F           ORL       A,R7
   \   000015   6012         JZ        ??ZDApp_NwkDescListProcessing_1
   2491            {
   2492              ResultCount++;
   \   000017   05..         INC       ?V3
   2493              pNwkDesc = pNwkDesc->nextDesc;
   \   000019   EE           MOV       A,R6
   \   00001A   2414         ADD       A,#0x14
   \   00001C   F582         MOV       DPL,A
   \   00001E   E4           CLR       A
   \   00001F   3F           ADDC      A,R7
   \   000020   F583         MOV       DPH,A
   \   000022   E0           MOVX      A,@DPTR
   \   000023   FE           MOV       R6,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   FF           MOV       R7,A
   \   000027   80EA         SJMP      ??ZDApp_NwkDescListProcessing_0
   2494            }
   2495          
   2496            // process discovery results
   2497            stackProfilePro = FALSE;
   \                     ??ZDApp_NwkDescListProcessing_1:
   \   000029   75..00       MOV       ?V0,#0x0
   2498            selected = FALSE;
   \   00002C   75..00       MOV       ?V1,#0x0
   2499          
   2500          
   2501            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   00002F   75..00       MOV       ?V4,#0x0
   \                     ??ZDApp_NwkDescListProcessing_2:
   \   000032   E5..         MOV       A,?V4
   \   000034   C3           CLR       C
   \   000035   9402         SUBB      A,#0x2
   \   000037   4003         JC        $+5
   \   000039   02....       LJMP      ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
   2502            {
   2503              pNwkDesc = nwk_getNwkDescList();
   \   00003C                ; Setup parameters for call to function nwk_getNwkDescList
   \   00003C   12....       LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   00003F   8A..         MOV       ?V6,R2
   \   000041   8B..         MOV       ?V7,R3
   \   000043   AE..         MOV       R6,?V6
   \   000045   AF..         MOV       R7,?V7
   2504              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   000047   75..00       MOV       ?V2,#0x0
   \                     ??ZDApp_NwkDescListProcessing_4:
   \   00004A   E5..         MOV       A,?V2
   \   00004C   C3           CLR       C
   \   00004D   95..         SUBB      A,?V3
   \   00004F   4003         JC        $+5
   \   000051   02....       LJMP      ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
   2505              {
   2506                 if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
   \   000054                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000054   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000056   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000058   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00005B   E9           MOV       A,R1
   \   00005C   6401         XRL       A,#0x1
   \   00005E   7014         JNZ       ??ZDApp_NwkDescListProcessing_6
   2507                {
   2508                  // If the extended Pan ID is commissioned to a non zero value
   2509                  // Only join the Pan that has match EPID
   2510                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   \   000060                ; Setup parameters for call to function sAddrExtCmp
   \   000060   EE           MOV       A,R6
   \   000061   240B         ADD       A,#0xb
   \   000063   FC           MOV       R4,A
   \   000064   E4           CLR       A
   \   000065   3F           ADDC      A,R7
   \   000066   FD           MOV       R5,A
   \   000067   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000069   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00006B   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00006E   E9           MOV       A,R1
   \   00006F   7029         JNZ       ??ZDApp_NwkDescListProcessing_7
   2511                    continue;
   \   000071   02....       LJMP      ??ZDApp_NwkDescListProcessing_8 & 0xFFFF
   2512          
   2513                }
   2514                else if ( zgConfigPANID != 0xFFFF )
   \                     ??ZDApp_NwkDescListProcessing_6:
   \   000074   90....       MOV       DPTR,#zgConfigPANID
   \   000077   E0           MOVX      A,@DPTR
   \   000078   64FF         XRL       A,#0xff
   \   00007A   7004         JNZ       ??ZDApp_NwkDescListProcessing_9
   \   00007C   A3           INC       DPTR
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   64FF         XRL       A,#0xff
   \                     ??ZDApp_NwkDescListProcessing_9:
   \   000080   6018         JZ        ??ZDApp_NwkDescListProcessing_7
   2515                {
   2516                  // PAN Id is preconfigured. check if it matches
   2517                  if ( pNwkDesc->panId != zgConfigPANID )
   \   000082   8E82         MOV       DPL,R6
   \   000084   8F83         MOV       DPH,R7
   \   000086   E0           MOVX      A,@DPTR
   \   000087   F8           MOV       R0,A
   \   000088   A3           INC       DPTR
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   F9           MOV       R1,A
   \   00008B   90....       MOV       DPTR,#zgConfigPANID
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   68           XRL       A,R0
   \   000090   7003         JNZ       ??ZDApp_NwkDescListProcessing_10
   \   000092   A3           INC       DPTR
   \   000093   E0           MOVX      A,@DPTR
   \   000094   69           XRL       A,R1
   \                     ??ZDApp_NwkDescListProcessing_10:
   \   000095   6003         JZ        $+5
   \   000097   02....       LJMP      ??ZDApp_NwkDescListProcessing_8 & 0xFFFF
   2518                    continue;
   2519                }
   2520          
   2521                if ( pNwkDesc->chosenRouter != _NIB.nwkCoordAddress || _NIB.nwkCoordAddress == INVALID_NODE_ADDR )
   \                     ??ZDApp_NwkDescListProcessing_7:
   \   00009A   8E82         MOV       DPL,R6
   \   00009C   8F83         MOV       DPH,R7
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   F8           MOV       R0,A
   \   0000A7   A3           INC       DPTR
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   F9           MOV       R1,A
   \   0000AA   90....       MOV       DPTR,#_NIB + 23
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   68           XRL       A,R0
   \   0000AF   7003         JNZ       ??ZDApp_NwkDescListProcessing_11
   \   0000B1   A3           INC       DPTR
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   69           XRL       A,R1
   \                     ??ZDApp_NwkDescListProcessing_11:
   \   0000B4   700E         JNZ       ??ZDApp_NwkDescListProcessing_12
   \   0000B6   90....       MOV       DPTR,#_NIB + 23
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   64FE         XRL       A,#0xfe
   \   0000BC   7004         JNZ       ??ZDApp_NwkDescListProcessing_13
   \   0000BE   A3           INC       DPTR
   \   0000BF   E0           MOVX      A,@DPTR
   \   0000C0   64FF         XRL       A,#0xff
   \                     ??ZDApp_NwkDescListProcessing_13:
   \   0000C2   700B         JNZ       ??ZDApp_NwkDescListProcessing_14
   2522                {
   2523                  // check that network is allowing joining
   2524                  if ( ZSTACK_ROUTER_BUILD )
   2525                  {
   2526                    if ( stackProfilePro == FALSE )
   2527                    {
   2528                      if ( !pNwkDesc->routerCapacity )
   2529                      {
   2530                        continue;
   2531                      }
   2532                    }
   2533                    else
   2534                    {
   2535                      if ( !pNwkDesc->deviceCapacity )
   2536                      {
   2537                        continue;
   2538                      }
   2539                    }
   2540                  }
   2541                  else if ( ZSTACK_END_DEVICE_BUILD )
   2542                  {
   2543                    if ( !pNwkDesc->deviceCapacity )
   \                     ??ZDApp_NwkDescListProcessing_12:
   \   0000C4   8E82         MOV       DPL,R6
   \   0000C6   8F83         MOV       DPH,R7
   \   0000C8   A3           INC       DPTR
   \   0000C9   A3           INC       DPTR
   \   0000CA   A3           INC       DPTR
   \   0000CB   A3           INC       DPTR
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   605A         JZ        ??ZDApp_NwkDescListProcessing_8
   2544                    {
   2545                      continue;
   2546                    }
   2547                  }
   2548                }
   2549          
   2550                // check version of zigbee protocol
   2551                if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   \                     ??ZDApp_NwkDescListProcessing_14:
   \   0000CF   8E82         MOV       DPL,R6
   \   0000D1   8F83         MOV       DPH,R7
   \   0000D3   A3           INC       DPTR
   \   0000D4   A3           INC       DPTR
   \   0000D5   A3           INC       DPTR
   \   0000D6   A3           INC       DPTR
   \   0000D7   A3           INC       DPTR
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   F8           MOV       R0,A
   \   0000DA   90....       MOV       DPTR,#_NIB + 17
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   68           XRL       A,R0
   \   0000DF   7048         JNZ       ??ZDApp_NwkDescListProcessing_8
   2552                  continue;
   2553          
   2554                // check version of stack profile
   2555                if ( pNwkDesc->stackProfile != zgStackProfile  )
   \   0000E1   8E82         MOV       DPL,R6
   \   0000E3   8F83         MOV       DPH,R7
   \   0000E5   A3           INC       DPTR
   \   0000E6   A3           INC       DPTR
   \   0000E7   A3           INC       DPTR
   \   0000E8   A3           INC       DPTR
   \   0000E9   A3           INC       DPTR
   \   0000EA   A3           INC       DPTR
   \   0000EB   E0           MOVX      A,@DPTR
   \   0000EC   F8           MOV       R0,A
   \   0000ED   90....       MOV       DPTR,#zgStackProfile
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   68           XRL       A,R0
   \   0000F2   6048         JZ        ??ZDApp_NwkDescListProcessing_5
   2556                {
   2557                  if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   2558                      || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \   0000F4   90....       MOV       DPTR,#zgStackProfile
   \   0000F7   E0           MOVX      A,@DPTR
   \   0000F8   6401         XRL       A,#0x1
   \   0000FA   700F         JNZ       ??ZDApp_NwkDescListProcessing_15
   \   0000FC   8E82         MOV       DPL,R6
   \   0000FE   8F83         MOV       DPH,R7
   \   000100   A3           INC       DPTR
   \   000101   A3           INC       DPTR
   \   000102   A3           INC       DPTR
   \   000103   A3           INC       DPTR
   \   000104   A3           INC       DPTR
   \   000105   A3           INC       DPTR
   \   000106   E0           MOVX      A,@DPTR
   \   000107   6402         XRL       A,#0x2
   \   000109   6017         JZ        ??ZDApp_NwkDescListProcessing_16
   \                     ??ZDApp_NwkDescListProcessing_15:
   \   00010B   90....       MOV       DPTR,#zgStackProfile
   \   00010E   E0           MOVX      A,@DPTR
   \   00010F   6402         XRL       A,#0x2
   \   000111   7012         JNZ       ??ZDApp_NwkDescListProcessing_17
   \   000113   8E82         MOV       DPL,R6
   \   000115   8F83         MOV       DPH,R7
   \   000117   A3           INC       DPTR
   \   000118   A3           INC       DPTR
   \   000119   A3           INC       DPTR
   \   00011A   A3           INC       DPTR
   \   00011B   A3           INC       DPTR
   \   00011C   A3           INC       DPTR
   \   00011D   E0           MOVX      A,@DPTR
   \   00011E   6401         XRL       A,#0x1
   \   000120   7003         JNZ       ??ZDApp_NwkDescListProcessing_17
   2559                  {
   2560                    stackProfilePro = TRUE;
   \                     ??ZDApp_NwkDescListProcessing_16:
   \   000122   75..01       MOV       ?V0,#0x1
   2561                  }
   2562          
   2563                  if ( stackProfile == 0 )
   \                     ??ZDApp_NwkDescListProcessing_17:
   \   000125   E5..         MOV       A,?V4
   \   000127   7013         JNZ       ??ZDApp_NwkDescListProcessing_5
   2564                  {
   2565                    continue;
   2566                  }
   2567                }
   2568          
   2569                break;
   2570              }
   \                     ??ZDApp_NwkDescListProcessing_8:
   \   000129   05..         INC       ?V2
   \   00012B   EE           MOV       A,R6
   \   00012C   2414         ADD       A,#0x14
   \   00012E   F582         MOV       DPL,A
   \   000130   E4           CLR       A
   \   000131   3F           ADDC      A,R7
   \   000132   F583         MOV       DPH,A
   \   000134   E0           MOVX      A,@DPTR
   \   000135   FE           MOV       R6,A
   \   000136   A3           INC       DPTR
   \   000137   E0           MOVX      A,@DPTR
   \   000138   FF           MOV       R7,A
   \   000139   02....       LJMP      ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
   2571          
   2572              if (i < ResultCount)
   \                     ??ZDApp_NwkDescListProcessing_5:
   \   00013C   E5..         MOV       A,?V2
   \   00013E   C3           CLR       C
   \   00013F   95..         SUBB      A,?V3
   \   000141   5005         JNC       ??ZDApp_NwkDescListProcessing_18
   2573              {
   2574               selected = TRUE;
   \   000143   75..01       MOV       ?V1,#0x1
   2575                break;
   \   000146   800F         SJMP      ??ZDApp_NwkDescListProcessing_3
   2576              }
   2577          
   2578              // break if selected or stack profile pro wasn't found
   2579              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDApp_NwkDescListProcessing_18:
   \   000148   7401         MOV       A,#0x1
   \   00014A   65..         XRL       A,?V1
   \   00014C   6009         JZ        ??ZDApp_NwkDescListProcessing_3
   \   00014E   E5..         MOV       A,?V0
   \   000150   6005         JZ        ??ZDApp_NwkDescListProcessing_3
   2580              {
   2581                break;
   2582              }
   2583            }
   \   000152   05..         INC       ?V4
   \   000154   02....       LJMP      ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
   2584          
   2585            if ( i == ResultCount )
   \                     ??ZDApp_NwkDescListProcessing_3:
   \   000157   E5..         MOV       A,?V3
   \   000159   65..         XRL       A,?V2
   \   00015B   7009         JNZ       ??ZDApp_NwkDescListProcessing_19
   2586            {
   2587              nwk_desc_list_free();
   \   00015D                ; Setup parameters for call to function nwk_desc_list_free
   \   00015D   12....       LCALL     `??nwk_desc_list_free::?relay`; Banked call to: nwk_desc_list_free
   2588              return (NULL);   // couldn't find appropriate PAN to join !
   \   000160   7A00         MOV       R2,#0x0
   \   000162   7B00         MOV       R3,#0x0
   \   000164   8004         SJMP      ??ZDApp_NwkDescListProcessing_20
   2589            }
   2590            else
   2591            {
   2592              return (pNwkDesc);
   \                     ??ZDApp_NwkDescListProcessing_19:
   \   000166   EE           MOV       A,R6
   \   000167   FA           MOV       R2,A
   \   000168   EF           MOV       A,R7
   \   000169   FB           MOV       R3,A
   \                     ??ZDApp_NwkDescListProcessing_20:
   \   00016A   7F08         MOV       R7,#0x8
   \   00016C   02....       LJMP      ?BANKED_LEAVE_XDATA
   2593            }
   2594          }
   2595          
   2596          /*********************************************************************
   2597           * @fn          ZDO_NetworkFormationConfirmCB
   2598           *
   2599           * @brief       This function reports the results of the request to
   2600           *              initialize a coordinator in a network.
   2601           *
   2602           * @param       Status - Result of NLME_NetworkFormationRequest()
   2603           *
   2604           * @return      none
   2605           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2606          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   2607          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   2608            nwkStatus = (byte)Status;
   \   00000C   EE           MOV       A,R6
   \   00000D   90....       MOV       DPTR,#nwkStatus
   \   000010   F0           MOVX      @DPTR,A
   2609          
   2610            if ( Status == ZSUCCESS )
   \   000011   EE           MOV       A,R6
   \   000012   6003         JZ        $+5
   \   000014   02....       LJMP      ??ZDO_NetworkFormationConfirmCB_0 & 0xFFFF
   2611            {
   2612              bdb_setNodeIsOnANetwork(TRUE);
   \   000017                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000017   7901         MOV       R1,#0x1
   \   000019   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
   2613              
   2614              if(ZG_DEVICE_COORDINATOR_TYPE)
   \   00001C   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   700B         JNZ       ??ZDO_NetworkFormationConfirmCB_1
   2615              {
   2616                // LED on shows Coordinator started
   2617                zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   2618          
   2619                zdoHalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   2620          
   2621                  #if defined ( ZBIT )
   2622                      SIM_SetColor(0xd0ffd0);
   2623                  #endif
   2624          
   2625                if ( devState == DEV_HOLD )
   \   000022   90....       MOV       DPTR,#devState
   \   000025   E0           MOVX      A,@DPTR
   \   000026   7005         JNZ       ??ZDO_NetworkFormationConfirmCB_1
   2626                {
   2627                  ZDApp_ChangeState( DEV_COORD_STARTING );
   \   000028                ; Setup parameters for call to function ZDApp_ChangeState
   \   000028   7908         MOV       R1,#0x8
   \   00002A   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   2628                }
   2629              }
   2630          
   2631              if(ZG_DEVICE_RTR_TYPE)
   \                     ??ZDO_NetworkFormationConfirmCB_1:
   \   00002D   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000030   E0           MOVX      A,@DPTR
   \   000031   600B         JZ        ??ZDO_NetworkFormationConfirmCB_2
   \   000033   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000036   E0           MOVX      A,@DPTR
   \   000037   6401         XRL       A,#0x1
   \   000039   6003         JZ        $+5
   \   00003B   02....       LJMP      ??ZDO_NetworkFormationConfirmCB_0 & 0xFFFF
   2632              {
   2633                uint8 x;
   2634                uint8 tmpKey[SEC_KEY_LEN] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
   \                     ??ZDO_NetworkFormationConfirmCB_2:
   \   00003E   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
   \   000041   7401         MOV       A,#0x1
   \   000043   12....       LCALL     ?XSTACK_DISP102_8
   \   000046   7410         MOV       A,#0x10
   \   000048   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   2635                
   2636                if(APSME_IsDistributedSecurity())
   \   00004B                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   00004B   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   00004E   E9           MOV       A,R1
   \   00004F   7003         JNZ       $+5
   \   000051   02....       LJMP      ??ZDO_NetworkFormationConfirmCB_0 & 0xFFFF
   2637                {
   2638                  //Check if we have an extended PANID assigned
   2639                  if(nwk_ExtPANIDValid( _NIB.extendedPANID ) == false)
   \   000054                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000054   7A..         MOV       R2,#(_NIB + 53) & 0xff
   \   000056   7B..         MOV       R3,#((_NIB + 53) >> 8) & 0xff
   \   000058   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00005B   E9           MOV       A,R1
   \   00005C   700B         JNZ       ??ZDO_NetworkFormationConfirmCB_3
   2640                  {
   2641                    //Set the extended PANID as the extended address
   2642                    osal_cpyExtAddr( _NIB.extendedPANID, aExtendedAddress );
   \   00005E                ; Setup parameters for call to function sAddrExtCpy
   \   00005E   7C..         MOV       R4,#aExtendedAddress & 0xff
   \   000060   7D..         MOV       R5,#(aExtendedAddress >> 8) & 0xff
   \   000062   7A..         MOV       R2,#(_NIB + 53) & 0xff
   \   000064   7B..         MOV       R3,#((_NIB + 53) >> 8) & 0xff
   \   000066   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2643                  } 
   2644                  
   2645                  ZMacSetReq(MAC_SUPERFRAME_PAN_COORD,0);
   \                     ??ZDO_NetworkFormationConfirmCB_3:
   \   000069                ; Setup parameters for call to function ZMacSetReq
   \   000069   7A00         MOV       R2,#0x0
   \   00006B   7B00         MOV       R3,#0x0
   \   00006D   79F0         MOV       R1,#-0x10
   \   00006F   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000072   E9           MOV       A,R1
   2646                  
   2647                  //Set the MAC address
   2648                  ZMacSetReq( ZMacShortAddress, (uint8 *)&(_NIB.nwkDevAddress) );
   \   000073                ; Setup parameters for call to function ZMacSetReq
   \   000073   7A..         MOV       R2,#(_NIB + 20) & 0xff
   \   000075   7B..         MOV       R3,#((_NIB + 20) >> 8) & 0xff
   \   000077   7953         MOV       R1,#0x53
   \   000079   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   00007C   E9           MOV       A,R1
   2649          
   2650                  if ( _NIB.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \   00007D   90....       MOV       DPTR,#_NIB + 14
   \   000080   E0           MOVX      A,@DPTR
   \   000081   A2E3         MOV       C,0xE0 /* A   */.3
   \   000083   500B         JNC       ??ZDO_NetworkFormationConfirmCB_4
   2651                    x = true;
   \   000085   85..82       MOV       DPL,?XSP + 0
   \   000088   85..83       MOV       DPH,?XSP + 1
   \   00008B   7401         MOV       A,#0x1
   \   00008D   F0           MOVX      @DPTR,A
   \   00008E   8009         SJMP      ??ZDO_NetworkFormationConfirmCB_5
   2652                  else
   2653                    x = false;
   \                     ??ZDO_NetworkFormationConfirmCB_4:
   \   000090   85..82       MOV       DPL,?XSP + 0
   \   000093   85..83       MOV       DPH,?XSP + 1
   \   000096   7400         MOV       A,#0x0
   \   000098   F0           MOVX      @DPTR,A
   2654                  ZMacSetReq( ZMacRxOnIdle, &x );
   \                     ??ZDO_NetworkFormationConfirmCB_5:
   \   000099                ; Setup parameters for call to function ZMacSetReq
   \   000099   AA..         MOV       R2,?XSP + 0
   \   00009B   AB..         MOV       R3,?XSP + 1
   \   00009D   7952         MOV       R1,#0x52
   \   00009F   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   0000A2   E9           MOV       A,R1
   2655          
   2656                  // Change NIB state to router for restore
   2657                  _NIB.nwkState = NWK_ROUTER;
   \   0000A3   90....       MOV       DPTR,#_NIB + 35
   \   0000A6   7408         MOV       A,#0x8
   \   0000A8   F0           MOVX      @DPTR,A
   2658                  NLME_SetAssocFlags();
   \   0000A9                ; Setup parameters for call to function NLME_SetAssocFlags
   \   0000A9   12....       LCALL     `??NLME_SetAssocFlags::?relay`; Banked call to: NLME_SetAssocFlags
   2659          
   2660                  //Restore the nwk security material using the generic index
   2661                  ZDApp_RestoreNwkSecMaterial();
   \   0000AC                ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
   \   0000AC   12....       LCALL     `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
   2662                  
   2663                  //Be sure to store the nwk FrameCounter if
   2664                  if(nwkFrameCounter == 0)
   \   0000AF   90....       MOV       DPTR,#nwkFrameCounter
   \   0000B2   12....       LCALL     ?XLOAD_R0123
   \   0000B5   E8           MOV       A,R0
   \   0000B6   49           ORL       A,R1
   \   0000B7   4A           ORL       A,R2
   \   0000B8   4B           ORL       A,R3
   \   0000B9   7012         JNZ       ??ZDO_NetworkFormationConfirmCB_6
   2665                  {
   2666                    nwkFrameCounter = 1;
   \   0000BB   90....       MOV       DPTR,#nwkFrameCounter
   \   0000BE   7401         MOV       A,#0x1
   \   0000C0   F0           MOVX      @DPTR,A
   \   0000C1   A3           INC       DPTR
   \   0000C2   7400         MOV       A,#0x0
   \   0000C4   F0           MOVX      @DPTR,A
   \   0000C5   A3           INC       DPTR
   \   0000C6   7400         MOV       A,#0x0
   \   0000C8   F0           MOVX      @DPTR,A
   \   0000C9   A3           INC       DPTR
   \   0000CA   7400         MOV       A,#0x0
   \   0000CC   F0           MOVX      @DPTR,A
   2667                  }
   2668                  
   2669                  osal_set_event(ZDAppTaskID, ZDO_NWK_UPDATE_NV | ZDO_FRAMECOUNTER_CHANGE);
   \                     ??ZDO_NetworkFormationConfirmCB_6:
   \   0000CD                ; Setup parameters for call to function osal_set_event
   \   0000CD   7A00         MOV       R2,#0x0
   \   0000CF   7B03         MOV       R3,#0x3
   \   0000D1   90....       MOV       DPTR,#ZDAppTaskID
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   F9           MOV       R1,A
   \   0000D6   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   0000D9   E9           MOV       A,R1
   2670                  
   2671                  ZDSecMgrGenerateRndKey(tmpKey);
   \   0000DA                ; Setup parameters for call to function ZDSecMgrGenerateRndKey
   \   0000DA   7401         MOV       A,#0x1
   \   0000DC   12....       LCALL     ?XSTACK_DISP101_8
   \   0000DF   12....       LCALL     `??ZDSecMgrGenerateRndKey::?relay`; Banked call to: ZDSecMgrGenerateRndKey
   2672                   
   2673                  //Set the nwk key as the default and initialize the keySeqNum
   2674                  SSP_UpdateNwkKey( tmpKey, 0 );
   \   0000E2                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   0000E2   7900         MOV       R1,#0x0
   \   0000E4   7401         MOV       A,#0x1
   \   0000E6   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E9   12....       LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
   2675                  if ( !_NIB.nwkKeyLoaded )
   \   0000EC   90....       MOV       DPTR,#_NIB + 61
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   7005         JNZ       ??ZDO_NetworkFormationConfirmCB_7
   2676                  {
   2677                    SSP_SwitchNwkKey( 0 );
   \   0000F2                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   0000F2   7900         MOV       R1,#0x0
   \   0000F4   12....       LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   2678                  }
   2679                  
   2680                  // Clear copy in RAM after use 
   2681                  osal_memset(tmpKey,0,SEC_KEY_LEN);
   \                     ??ZDO_NetworkFormationConfirmCB_7:
   \   0000F7                ; Setup parameters for call to function osal_memset
   \   0000F7   7C10         MOV       R4,#0x10
   \   0000F9   7D00         MOV       R5,#0x0
   \   0000FB   7900         MOV       R1,#0x0
   \   0000FD   7401         MOV       A,#0x1
   \   0000FF   12....       LCALL     ?XSTACK_DISP101_8
   \   000102   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2682                  
   2683                  //Success formation of distributed nwk
   2684                  bdb_nwkFormationAttempt(TRUE);
   \   000105                ; Setup parameters for call to function bdb_nwkFormationAttempt
   \   000105   7901         MOV       R1,#0x1
   \   000107   12....       LCALL     `??bdb_nwkFormationAttempt::?relay`; Banked call to: bdb_nwkFormationAttempt
   2685                }
   2686              }
   2687            }
   2688          
   2689            else
   2690            {
   2691              #if defined(BLINK_LEDS)
   2692                zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2693              #endif
   2694            }
   2695          
   2696          
   2697            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   00010A                ; Setup parameters for call to function osal_set_event
   \   00010A   7A02         MOV       R2,#0x2
   \   00010C   7B00         MOV       R3,#0x0
   \   00010E   90....       MOV       DPTR,#ZDAppTaskID
   \   000111   E0           MOVX      A,@DPTR
   \   000112   F9           MOV       R1,A
   \   000113   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000116   E9           MOV       A,R1
   2698          }
   \   000117   7411         MOV       A,#0x11
   \   000119   12....       LCALL     ?DEALLOC_XSTACK8
   \   00011C   7F01         MOV       R7,#0x1
   \   00011E   02....       LJMP      ?BANKED_LEAVE_XDATA
   2699          
   2700          /****************************************************************************
   2701           * @fn          ZDApp_beaconIndProcessing
   2702           *
   2703           * @brief       This function processes the incoming beacon indication.
   2704           *
   2705           *              When another task (MT or App) is registered to process
   2706           *              beacon indication themselves, this function will parse the
   2707           *              beacon payload and pass the beacon descriptor to that task
   2708           *              If no other tasks registered, this function will process
   2709           *              the beacon payload and generate the network descriptor link
   2710           *              list.
   2711           *
   2712           * @param
   2713           *
   2714           * @return      none
   2715           *
   2716           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2717          void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
   \                     ZDO_beaconNotifyIndCB:
   2718          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   2719            // Pass the beacon Indication to another task if it registers the callback
   2720            // Otherwise, process the beacon notification here.
   2721            if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
   \   000009   90....       MOV       DPTR,#zdoCBFunc + 6
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F8           MOV       R0,A
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F9           MOV       R1,A
   \   000011   E8           MOV       A,R0
   \   000012   49           ORL       A,R1
   \   000013   6015         JZ        ??ZDO_beaconNotifyIndCB_0
   2722            {
   2723              zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
   \   000015                ; Setup parameters for indirect call
   \   000015   AA..         MOV       R2,?V0
   \   000017   AB..         MOV       R3,?V1
   \   000019   90....       MOV       DPTR,#zdoCBFunc + 6
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F8           MOV       R0,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F583         MOV       DPH,A
   \   000022   8882         MOV       DPL,R0
   \   000024   12....       LCALL     ?CALL_IND
   \   000027   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2724            }
   2725            else
   2726            {
   2727              networkDesc_t *pNwkDesc;
   2728              networkDesc_t *pLastNwkDesc;
   2729              uint8 found = false;
   \                     ??ZDO_beaconNotifyIndCB_0:
   \   00002A   75..00       MOV       ?V2,#0x0
   2730          
   2731              // Add the network to the Network Descriptor List
   2732              pNwkDesc = NwkDescList;
   \   00002D   90....       MOV       DPTR,#NwkDescList
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F8           MOV       R0,A
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F9           MOV       R1,A
   \   000035   E8           MOV       A,R0
   \   000036   FE           MOV       R6,A
   \   000037   E9           MOV       A,R1
   \   000038   FF           MOV       R7,A
   2733              pLastNwkDesc = NwkDescList;
   \   000039   90....       MOV       DPTR,#NwkDescList
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   F8           MOV       R0,A
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F9           MOV       R1,A
   \   000041   88..         MOV       ?V4,R0
   \   000043   89..         MOV       ?V5,R1
   2734              while (pNwkDesc)
   \                     ??ZDO_beaconNotifyIndCB_2:
   \   000045   EE           MOV       A,R6
   \   000046   4F           ORL       A,R7
   \   000047   6049         JZ        ??ZDO_beaconNotifyIndCB_3
   2735              {
   2736                if ((pNwkDesc->panId == pBeacon->panID) &&
   2737                    (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
   \   000049   8E82         MOV       DPL,R6
   \   00004B   8F83         MOV       DPH,R7
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   F8           MOV       R0,A
   \   00004F   A3           INC       DPTR
   \   000050   E0           MOVX      A,@DPTR
   \   000051   F9           MOV       R1,A
   \   000052   85..82       MOV       DPL,?V0
   \   000055   85..83       MOV       DPH,?V1
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   68           XRL       A,R0
   \   00005C   7003         JNZ       ??ZDO_beaconNotifyIndCB_4
   \   00005E   A3           INC       DPTR
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   69           XRL       A,R1
   \                     ??ZDO_beaconNotifyIndCB_4:
   \   000061   701B         JNZ       ??ZDO_beaconNotifyIndCB_5
   \   000063   8E82         MOV       DPL,R6
   \   000065   8F83         MOV       DPH,R7
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   F8           MOV       R0,A
   \   00006B   85..82       MOV       DPL,?V0
   \   00006E   85..83       MOV       DPH,?V1
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   E0           MOVX      A,@DPTR
   \   000076   68           XRL       A,R0
   \   000077   7005         JNZ       ??ZDO_beaconNotifyIndCB_5
   2738                {
   2739                  found = true;
   \   000079   75..01       MOV       ?V2,#0x1
   2740                  break;
   \   00007C   8014         SJMP      ??ZDO_beaconNotifyIndCB_3
   2741                }
   2742                pLastNwkDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_5:
   \   00007E   8E..         MOV       ?V4,R6
   \   000080   8F..         MOV       ?V5,R7
   2743                pNwkDesc = pNwkDesc->nextDesc;
   \   000082   EE           MOV       A,R6
   \   000083   2414         ADD       A,#0x14
   \   000085   F582         MOV       DPL,A
   \   000087   E4           CLR       A
   \   000088   3F           ADDC      A,R7
   \   000089   F583         MOV       DPH,A
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   FE           MOV       R6,A
   \   00008D   A3           INC       DPTR
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   FF           MOV       R7,A
   \   000090   80B3         SJMP      ??ZDO_beaconNotifyIndCB_2
   2744              }
   2745          
   2746              // If no existing descriptor found, make a new one and add to the list
   2747              if (found == false)
   \                     ??ZDO_beaconNotifyIndCB_3:
   \   000092   E5..         MOV       A,?V2
   \   000094   706C         JNZ       ??ZDO_beaconNotifyIndCB_6
   2748              {
   2749                pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
   \   000096                ; Setup parameters for call to function osal_mem_alloc
   \   000096   7A16         MOV       R2,#0x16
   \   000098   7B00         MOV       R3,#0x0
   \   00009A   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00009D   8A..         MOV       ?V6,R2
   \   00009F   8B..         MOV       ?V7,R3
   \   0000A1   AE..         MOV       R6,?V6
   \   0000A3   AF..         MOV       R7,?V7
   2750                if ( !pNwkDesc )
   \   0000A5   EE           MOV       A,R6
   \   0000A6   4F           ORL       A,R7
   \   0000A7   7003         JNZ       $+5
   \   0000A9   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2751                {
   2752                  // Memory alloc failed, discard this beacon
   2753                  return;
   2754                }
   2755          
   2756                // Clear the network descriptor
   2757                osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
   \   0000AC                ; Setup parameters for call to function osal_memset
   \   0000AC   7C16         MOV       R4,#0x16
   \   0000AE   7D00         MOV       R5,#0x0
   \   0000B0   7900         MOV       R1,#0x0
   \   0000B2   EE           MOV       A,R6
   \   0000B3   FA           MOV       R2,A
   \   0000B4   EF           MOV       A,R7
   \   0000B5   FB           MOV       R3,A
   \   0000B6   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2758          
   2759                // Initialize the descriptor
   2760                pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
   \   0000B9   8E82         MOV       DPL,R6
   \   0000BB   8F83         MOV       DPH,R7
   \   0000BD   A3           INC       DPTR
   \   0000BE   A3           INC       DPTR
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   A3           INC       DPTR
   \   0000C3   A3           INC       DPTR
   \   0000C4   74FE         MOV       A,#-0x2
   \   0000C6   F0           MOVX      @DPTR,A
   \   0000C7   A3           INC       DPTR
   \   0000C8   74FF         MOV       A,#-0x1
   \   0000CA   F0           MOVX      @DPTR,A
   2761                pNwkDesc->chosenRouterDepth = 0xFF;
   \   0000CB   8E82         MOV       DPL,R6
   \   0000CD   8F83         MOV       DPH,R7
   \   0000CF   A3           INC       DPTR
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   A3           INC       DPTR
   \   0000D3   A3           INC       DPTR
   \   0000D4   A3           INC       DPTR
   \   0000D5   A3           INC       DPTR
   \   0000D6   A3           INC       DPTR
   \   0000D7   A3           INC       DPTR
   \   0000D8   A3           INC       DPTR
   \   0000D9   74FF         MOV       A,#-0x1
   \   0000DB   F0           MOVX      @DPTR,A
   2762          
   2763                // Save new entry into the descriptor list
   2764                if ( !NwkDescList )
   \   0000DC   90....       MOV       DPTR,#NwkDescList
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   F8           MOV       R0,A
   \   0000E1   A3           INC       DPTR
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   F9           MOV       R1,A
   \   0000E4   E8           MOV       A,R0
   \   0000E5   49           ORL       A,R1
   \   0000E6   700A         JNZ       ??ZDO_beaconNotifyIndCB_7
   2765                {
   2766                  NwkDescList = pNwkDesc;
   \   0000E8   90....       MOV       DPTR,#NwkDescList
   \   0000EB   EE           MOV       A,R6
   \   0000EC   F0           MOVX      @DPTR,A
   \   0000ED   A3           INC       DPTR
   \   0000EE   EF           MOV       A,R7
   \   0000EF   F0           MOVX      @DPTR,A
   \   0000F0   8010         SJMP      ??ZDO_beaconNotifyIndCB_6
   2767                }
   2768                else
   2769                {
   2770                  pLastNwkDesc->nextDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_7:
   \   0000F2   E5..         MOV       A,?V4
   \   0000F4   2414         ADD       A,#0x14
   \   0000F6   F582         MOV       DPL,A
   \   0000F8   E4           CLR       A
   \   0000F9   35..         ADDC      A,?V5
   \   0000FB   F583         MOV       DPH,A
   \   0000FD   EE           MOV       A,R6
   \   0000FE   F0           MOVX      @DPTR,A
   \   0000FF   A3           INC       DPTR
   \   000100   EF           MOV       A,R7
   \   000101   F0           MOVX      @DPTR,A
   2771                }
   2772              }
   2773          
   2774              // Update the descriptor with the incoming beacon
   2775              pNwkDesc->stackProfile   = pBeacon->stackProfile;
   \                     ??ZDO_beaconNotifyIndCB_6:
   \   000102   85..82       MOV       DPL,?V0
   \   000105   85..83       MOV       DPH,?V1
   \   000108   A3           INC       DPTR
   \   000109   A3           INC       DPTR
   \   00010A   A3           INC       DPTR
   \   00010B   A3           INC       DPTR
   \   00010C   A3           INC       DPTR
   \   00010D   A3           INC       DPTR
   \   00010E   A3           INC       DPTR
   \   00010F   A3           INC       DPTR
   \   000110   A3           INC       DPTR
   \   000111   E0           MOVX      A,@DPTR
   \   000112   C0E0         PUSH      A
   \   000114   8E82         MOV       DPL,R6
   \   000116   8F83         MOV       DPH,R7
   \   000118   A3           INC       DPTR
   \   000119   A3           INC       DPTR
   \   00011A   A3           INC       DPTR
   \   00011B   A3           INC       DPTR
   \   00011C   A3           INC       DPTR
   \   00011D   A3           INC       DPTR
   \   00011E   D0E0         POP       A
   \   000120   F0           MOVX      @DPTR,A
   2776              pNwkDesc->version        = pBeacon->protocolVersion;
   \   000121   85..82       MOV       DPL,?V0
   \   000124   85..83       MOV       DPH,?V1
   \   000127   A3           INC       DPTR
   \   000128   A3           INC       DPTR
   \   000129   A3           INC       DPTR
   \   00012A   A3           INC       DPTR
   \   00012B   A3           INC       DPTR
   \   00012C   A3           INC       DPTR
   \   00012D   A3           INC       DPTR
   \   00012E   A3           INC       DPTR
   \   00012F   E0           MOVX      A,@DPTR
   \   000130   C0E0         PUSH      A
   \   000132   8E82         MOV       DPL,R6
   \   000134   8F83         MOV       DPH,R7
   \   000136   A3           INC       DPTR
   \   000137   A3           INC       DPTR
   \   000138   A3           INC       DPTR
   \   000139   A3           INC       DPTR
   \   00013A   A3           INC       DPTR
   \   00013B   D0E0         POP       A
   \   00013D   F0           MOVX      @DPTR,A
   2777              pNwkDesc->logicalChannel = pBeacon->logicalChannel;
   \   00013E   85..82       MOV       DPL,?V0
   \   000141   85..83       MOV       DPH,?V1
   \   000144   A3           INC       DPTR
   \   000145   A3           INC       DPTR
   \   000146   A3           INC       DPTR
   \   000147   A3           INC       DPTR
   \   000148   E0           MOVX      A,@DPTR
   \   000149   C0E0         PUSH      A
   \   00014B   8E82         MOV       DPL,R6
   \   00014D   8F83         MOV       DPH,R7
   \   00014F   A3           INC       DPTR
   \   000150   A3           INC       DPTR
   \   000151   D0E0         POP       A
   \   000153   F0           MOVX      @DPTR,A
   2778              pNwkDesc->panId          = pBeacon->panID;
   \   000154   85..82       MOV       DPL,?V0
   \   000157   85..83       MOV       DPH,?V1
   \   00015A   A3           INC       DPTR
   \   00015B   A3           INC       DPTR
   \   00015C   E0           MOVX      A,@DPTR
   \   00015D   F8           MOV       R0,A
   \   00015E   A3           INC       DPTR
   \   00015F   E0           MOVX      A,@DPTR
   \   000160   F9           MOV       R1,A
   \   000161   8E82         MOV       DPL,R6
   \   000163   8F83         MOV       DPH,R7
   \   000165   E8           MOV       A,R0
   \   000166   F0           MOVX      @DPTR,A
   \   000167   A3           INC       DPTR
   \   000168   E9           MOV       A,R1
   \   000169   F0           MOVX      @DPTR,A
   2779              pNwkDesc->updateId       = pBeacon->updateID;
   \   00016A   E5..         MOV       A,?V0
   \   00016C   240C         ADD       A,#0xc
   \   00016E   F582         MOV       DPL,A
   \   000170   E4           CLR       A
   \   000171   35..         ADDC      A,?V1
   \   000173   F583         MOV       DPH,A
   \   000175   E0           MOVX      A,@DPTR
   \   000176   C0E0         PUSH      A
   \   000178   EE           MOV       A,R6
   \   000179   2413         ADD       A,#0x13
   \   00017B   F582         MOV       DPL,A
   \   00017D   E4           CLR       A
   \   00017E   3F           ADDC      A,R7
   \   00017F   F583         MOV       DPH,A
   \   000181   D0E0         POP       A
   \   000183   F0           MOVX      @DPTR,A
   2780          
   2781              // Save the extended PAN ID from the beacon payload only if 1.1 version network
   2782              if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
   \   000184   85..82       MOV       DPL,?V0
   \   000187   85..83       MOV       DPH,?V1
   \   00018A   A3           INC       DPTR
   \   00018B   A3           INC       DPTR
   \   00018C   A3           INC       DPTR
   \   00018D   A3           INC       DPTR
   \   00018E   A3           INC       DPTR
   \   00018F   A3           INC       DPTR
   \   000190   A3           INC       DPTR
   \   000191   A3           INC       DPTR
   \   000192   E0           MOVX      A,@DPTR
   \   000193   6401         XRL       A,#0x1
   \   000195   6015         JZ        ??ZDO_beaconNotifyIndCB_8
   2783              {
   2784                osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
   \   000197                ; Setup parameters for call to function sAddrExtCpy
   \   000197   E5..         MOV       A,?V0
   \   000199   240D         ADD       A,#0xd
   \   00019B   FC           MOV       R4,A
   \   00019C   E4           CLR       A
   \   00019D   35..         ADDC      A,?V1
   \   00019F   FD           MOV       R5,A
   \   0001A0   EE           MOV       A,R6
   \   0001A1   240B         ADD       A,#0xb
   \   0001A3   FA           MOV       R2,A
   \   0001A4   E4           CLR       A
   \   0001A5   3F           ADDC      A,R7
   \   0001A6   FB           MOV       R3,A
   \   0001A7   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0001AA   8010         SJMP      ??ZDO_beaconNotifyIndCB_9
   2785              }
   2786              else
   2787              {
   2788                osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_beaconNotifyIndCB_8:
   \   0001AC                ; Setup parameters for call to function osal_memset
   \   0001AC   7C08         MOV       R4,#0x8
   \   0001AE   7D00         MOV       R5,#0x0
   \   0001B0   79FF         MOV       R1,#-0x1
   \   0001B2   EE           MOV       A,R6
   \   0001B3   240B         ADD       A,#0xb
   \   0001B5   FA           MOV       R2,A
   \   0001B6   E4           CLR       A
   \   0001B7   3F           ADDC      A,R7
   \   0001B8   FB           MOV       R3,A
   \   0001B9   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2789              }
   2790          
   2791              // check if this device is a better choice to join...
   2792              // ...dont bother checking assocPermit flag is doing a rejoin
   2793              if ( ( pBeacon->LQI > gMIN_TREE_LQI ) &&
   2794                  ( ( pBeacon->permitJoining == TRUE ) || ( bdb_isDeviceNonFactoryNew() ) ) )
   \                     ??ZDO_beaconNotifyIndCB_9:
   \   0001BC   85..82       MOV       DPL,?V0
   \   0001BF   85..83       MOV       DPH,?V1
   \   0001C2   A3           INC       DPTR
   \   0001C3   A3           INC       DPTR
   \   0001C4   A3           INC       DPTR
   \   0001C5   A3           INC       DPTR
   \   0001C6   A3           INC       DPTR
   \   0001C7   A3           INC       DPTR
   \   0001C8   A3           INC       DPTR
   \   0001C9   A3           INC       DPTR
   \   0001CA   A3           INC       DPTR
   \   0001CB   A3           INC       DPTR
   \   0001CC   E0           MOVX      A,@DPTR
   \   0001CD   F8           MOV       R0,A
   \   0001CE   90....       MOV       DPTR,#gMIN_TREE_LQI
   \   0001D1   E0           MOVX      A,@DPTR
   \   0001D2   C3           CLR       C
   \   0001D3   98           SUBB      A,R0
   \   0001D4   4003         JC        $+5
   \   0001D6   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   \   0001D9   85..82       MOV       DPL,?V0
   \   0001DC   85..83       MOV       DPH,?V1
   \   0001DF   A3           INC       DPTR
   \   0001E0   A3           INC       DPTR
   \   0001E1   A3           INC       DPTR
   \   0001E2   A3           INC       DPTR
   \   0001E3   A3           INC       DPTR
   \   0001E4   E0           MOVX      A,@DPTR
   \   0001E5   6401         XRL       A,#0x1
   \   0001E7   6009         JZ        ??ZDO_beaconNotifyIndCB_10
   \   0001E9                ; Setup parameters for call to function bdb_isDeviceNonFactoryNew
   \   0001E9   12....       LCALL     `??bdb_isDeviceNonFactoryNew::?relay`; Banked call to: bdb_isDeviceNonFactoryNew
   \   0001EC   E9           MOV       A,R1
   \   0001ED   7003         JNZ       $+5
   \   0001EF   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2795              {
   2796                uint8 selected = FALSE;
   \                     ??ZDO_beaconNotifyIndCB_10:
   \   0001F2   7800         MOV       R0,#0x0
   2797                uint8 capacity = FALSE;
   \   0001F4   7900         MOV       R1,#0x0
   2798          
   2799          #if defined ( ZIGBEEPRO )
   2800                if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
   2801                      (pBeacon->depth < MAX_NODE_DEPTH)) ||
   2802                    ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
   2803                     (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
   \   0001F6   85..82       MOV       DPL,?V0
   \   0001F9   85..83       MOV       DPH,?V1
   \   0001FC   A3           INC       DPTR
   \   0001FD   A3           INC       DPTR
   \   0001FE   A3           INC       DPTR
   \   0001FF   A3           INC       DPTR
   \   000200   A3           INC       DPTR
   \   000201   A3           INC       DPTR
   \   000202   A3           INC       DPTR
   \   000203   A3           INC       DPTR
   \   000204   A3           INC       DPTR
   \   000205   A3           INC       DPTR
   \   000206   E0           MOVX      A,@DPTR
   \   000207   FA           MOV       R2,A
   \   000208   8E82         MOV       DPL,R6
   \   00020A   8F83         MOV       DPH,R7
   \   00020C   A3           INC       DPTR
   \   00020D   A3           INC       DPTR
   \   00020E   A3           INC       DPTR
   \   00020F   A3           INC       DPTR
   \   000210   A3           INC       DPTR
   \   000211   A3           INC       DPTR
   \   000212   A3           INC       DPTR
   \   000213   A3           INC       DPTR
   \   000214   A3           INC       DPTR
   \   000215   E0           MOVX      A,@DPTR
   \   000216   C3           CLR       C
   \   000217   9A           SUBB      A,R2
   \   000218   5011         JNC       ??ZDO_beaconNotifyIndCB_11
   \   00021A   E5..         MOV       A,?V0
   \   00021C   240B         ADD       A,#0xb
   \   00021E   F582         MOV       DPL,A
   \   000220   E4           CLR       A
   \   000221   35..         ADDC      A,?V1
   \   000223   F583         MOV       DPH,A
   \   000225   E0           MOVX      A,@DPTR
   \   000226   C3           CLR       C
   \   000227   9414         SUBB      A,#0x14
   \   000229   4043         JC        ??ZDO_beaconNotifyIndCB_12
   \                     ??ZDO_beaconNotifyIndCB_11:
   \   00022B   85..82       MOV       DPL,?V0
   \   00022E   85..83       MOV       DPH,?V1
   \   000231   A3           INC       DPTR
   \   000232   A3           INC       DPTR
   \   000233   A3           INC       DPTR
   \   000234   A3           INC       DPTR
   \   000235   A3           INC       DPTR
   \   000236   A3           INC       DPTR
   \   000237   A3           INC       DPTR
   \   000238   A3           INC       DPTR
   \   000239   A3           INC       DPTR
   \   00023A   A3           INC       DPTR
   \   00023B   E0           MOVX      A,@DPTR
   \   00023C   FA           MOV       R2,A
   \   00023D   8E82         MOV       DPL,R6
   \   00023F   8F83         MOV       DPH,R7
   \   000241   A3           INC       DPTR
   \   000242   A3           INC       DPTR
   \   000243   A3           INC       DPTR
   \   000244   A3           INC       DPTR
   \   000245   A3           INC       DPTR
   \   000246   A3           INC       DPTR
   \   000247   A3           INC       DPTR
   \   000248   A3           INC       DPTR
   \   000249   A3           INC       DPTR
   \   00024A   E0           MOVX      A,@DPTR
   \   00024B   6A           XRL       A,R2
   \   00024C   7022         JNZ       ??ZDO_beaconNotifyIndCB_13
   \   00024E   8E82         MOV       DPL,R6
   \   000250   8F83         MOV       DPH,R7
   \   000252   A3           INC       DPTR
   \   000253   A3           INC       DPTR
   \   000254   A3           INC       DPTR
   \   000255   A3           INC       DPTR
   \   000256   A3           INC       DPTR
   \   000257   A3           INC       DPTR
   \   000258   A3           INC       DPTR
   \   000259   A3           INC       DPTR
   \   00025A   A3           INC       DPTR
   \   00025B   A3           INC       DPTR
   \   00025C   E0           MOVX      A,@DPTR
   \   00025D   FA           MOV       R2,A
   \   00025E   E5..         MOV       A,?V0
   \   000260   240B         ADD       A,#0xb
   \   000262   F582         MOV       DPL,A
   \   000264   E4           CLR       A
   \   000265   35..         ADDC      A,?V1
   \   000267   F583         MOV       DPH,A
   \   000269   E0           MOVX      A,@DPTR
   \   00026A   C3           CLR       C
   \   00026B   9A           SUBB      A,R2
   \   00026C   5002         JNC       ??ZDO_beaconNotifyIndCB_13
   2804                {
   2805                  selected = TRUE;
   \                     ??ZDO_beaconNotifyIndCB_12:
   \   00026E   7801         MOV       R0,#0x1
   2806                }
   2807          #else
   2808                if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
   2809                {
   2810                  selected = TRUE;
   2811                }
   2812          #endif
   2813          
   2814                if ( ZSTACK_ROUTER_BUILD )
   2815                {
   2816                  capacity = pBeacon->routerCapacity;
   2817                }
   2818                else if ( ZSTACK_END_DEVICE_BUILD )
   2819                {
   2820                  capacity = pBeacon->deviceCapacity;
   \                     ??ZDO_beaconNotifyIndCB_13:
   \   000270   85..82       MOV       DPL,?V0
   \   000273   85..83       MOV       DPH,?V1
   \   000276   A3           INC       DPTR
   \   000277   A3           INC       DPTR
   \   000278   A3           INC       DPTR
   \   000279   A3           INC       DPTR
   \   00027A   A3           INC       DPTR
   \   00027B   A3           INC       DPTR
   \   00027C   A3           INC       DPTR
   \   00027D   E0           MOVX      A,@DPTR
   \   00027E   F9           MOV       R1,A
   2821                }
   2822          
   2823                if ( ( (capacity) || ( pBeacon->sourceAddr == _NIB.nwkCoordAddress ) ) && (selected) )
   \   00027F   E9           MOV       A,R1
   \   000280   7017         JNZ       ??ZDO_beaconNotifyIndCB_14
   \   000282   85..82       MOV       DPL,?V0
   \   000285   85..83       MOV       DPH,?V1
   \   000288   E0           MOVX      A,@DPTR
   \   000289   FA           MOV       R2,A
   \   00028A   A3           INC       DPTR
   \   00028B   E0           MOVX      A,@DPTR
   \   00028C   FB           MOV       R3,A
   \   00028D   90....       MOV       DPTR,#_NIB + 23
   \   000290   E0           MOVX      A,@DPTR
   \   000291   6A           XRL       A,R2
   \   000292   7003         JNZ       ??ZDO_beaconNotifyIndCB_15
   \   000294   A3           INC       DPTR
   \   000295   E0           MOVX      A,@DPTR
   \   000296   6B           XRL       A,R3
   \                     ??ZDO_beaconNotifyIndCB_15:
   \   000297   7060         JNZ       ??ZDO_beaconNotifyIndCB_16
   \                     ??ZDO_beaconNotifyIndCB_14:
   \   000299   E8           MOV       A,R0
   \   00029A   605D         JZ        ??ZDO_beaconNotifyIndCB_16
   2824                {
   2825                  // this is the new chosen router for joining...
   2826                  pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
   \   00029C   85..82       MOV       DPL,?V0
   \   00029F   85..83       MOV       DPH,?V1
   \   0002A2   E0           MOVX      A,@DPTR
   \   0002A3   FA           MOV       R2,A
   \   0002A4   A3           INC       DPTR
   \   0002A5   E0           MOVX      A,@DPTR
   \   0002A6   FB           MOV       R3,A
   \   0002A7   8E82         MOV       DPL,R6
   \   0002A9   8F83         MOV       DPH,R7
   \   0002AB   A3           INC       DPTR
   \   0002AC   A3           INC       DPTR
   \   0002AD   A3           INC       DPTR
   \   0002AE   A3           INC       DPTR
   \   0002AF   A3           INC       DPTR
   \   0002B0   A3           INC       DPTR
   \   0002B1   A3           INC       DPTR
   \   0002B2   EA           MOV       A,R2
   \   0002B3   F0           MOVX      @DPTR,A
   \   0002B4   A3           INC       DPTR
   \   0002B5   EB           MOV       A,R3
   \   0002B6   F0           MOVX      @DPTR,A
   2827                  pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
   \   0002B7   85..82       MOV       DPL,?V0
   \   0002BA   85..83       MOV       DPH,?V1
   \   0002BD   A3           INC       DPTR
   \   0002BE   A3           INC       DPTR
   \   0002BF   A3           INC       DPTR
   \   0002C0   A3           INC       DPTR
   \   0002C1   A3           INC       DPTR
   \   0002C2   A3           INC       DPTR
   \   0002C3   A3           INC       DPTR
   \   0002C4   A3           INC       DPTR
   \   0002C5   A3           INC       DPTR
   \   0002C6   A3           INC       DPTR
   \   0002C7   E0           MOVX      A,@DPTR
   \   0002C8   C0E0         PUSH      A
   \   0002CA   8E82         MOV       DPL,R6
   \   0002CC   8F83         MOV       DPH,R7
   \   0002CE   A3           INC       DPTR
   \   0002CF   A3           INC       DPTR
   \   0002D0   A3           INC       DPTR
   \   0002D1   A3           INC       DPTR
   \   0002D2   A3           INC       DPTR
   \   0002D3   A3           INC       DPTR
   \   0002D4   A3           INC       DPTR
   \   0002D5   A3           INC       DPTR
   \   0002D6   A3           INC       DPTR
   \   0002D7   D0E0         POP       A
   \   0002D9   F0           MOVX      @DPTR,A
   2828                  pNwkDesc->chosenRouterDepth       = pBeacon->depth;
   \   0002DA   E5..         MOV       A,?V0
   \   0002DC   240B         ADD       A,#0xb
   \   0002DE   F582         MOV       DPL,A
   \   0002E0   E4           CLR       A
   \   0002E1   35..         ADDC      A,?V1
   \   0002E3   F583         MOV       DPH,A
   \   0002E5   E0           MOVX      A,@DPTR
   \   0002E6   C0E0         PUSH      A
   \   0002E8   8E82         MOV       DPL,R6
   \   0002EA   8F83         MOV       DPH,R7
   \   0002EC   A3           INC       DPTR
   \   0002ED   A3           INC       DPTR
   \   0002EE   A3           INC       DPTR
   \   0002EF   A3           INC       DPTR
   \   0002F0   A3           INC       DPTR
   \   0002F1   A3           INC       DPTR
   \   0002F2   A3           INC       DPTR
   \   0002F3   A3           INC       DPTR
   \   0002F4   A3           INC       DPTR
   \   0002F5   A3           INC       DPTR
   \   0002F6   D0E0         POP       A
   \   0002F8   F0           MOVX      @DPTR,A
   2829                }
   2830          
   2831                if ( pBeacon->deviceCapacity )
   \                     ??ZDO_beaconNotifyIndCB_16:
   \   0002F9   85..82       MOV       DPL,?V0
   \   0002FC   85..83       MOV       DPH,?V1
   \   0002FF   A3           INC       DPTR
   \   000300   A3           INC       DPTR
   \   000301   A3           INC       DPTR
   \   000302   A3           INC       DPTR
   \   000303   A3           INC       DPTR
   \   000304   A3           INC       DPTR
   \   000305   A3           INC       DPTR
   \   000306   E0           MOVX      A,@DPTR
   \   000307   600B         JZ        ??ZDO_beaconNotifyIndCB_17
   2832                  pNwkDesc->deviceCapacity = 1;
   \   000309   8E82         MOV       DPL,R6
   \   00030B   8F83         MOV       DPH,R7
   \   00030D   A3           INC       DPTR
   \   00030E   A3           INC       DPTR
   \   00030F   A3           INC       DPTR
   \   000310   A3           INC       DPTR
   \   000311   7401         MOV       A,#0x1
   \   000313   F0           MOVX      @DPTR,A
   2833          
   2834                if ( pBeacon->routerCapacity )
   \                     ??ZDO_beaconNotifyIndCB_17:
   \   000314   85..82       MOV       DPL,?V0
   \   000317   85..83       MOV       DPH,?V1
   \   00031A   A3           INC       DPTR
   \   00031B   A3           INC       DPTR
   \   00031C   A3           INC       DPTR
   \   00031D   A3           INC       DPTR
   \   00031E   A3           INC       DPTR
   \   00031F   A3           INC       DPTR
   \   000320   E0           MOVX      A,@DPTR
   \   000321   600A         JZ        ??ZDO_beaconNotifyIndCB_1
   2835                  pNwkDesc->routerCapacity = 1;
   \   000323   8E82         MOV       DPL,R6
   \   000325   8F83         MOV       DPH,R7
   \   000327   A3           INC       DPTR
   \   000328   A3           INC       DPTR
   \   000329   A3           INC       DPTR
   \   00032A   7401         MOV       A,#0x1
   \   00032C   F0           MOVX      @DPTR,A
   2836              }
   2837            }
   2838          }
   \                     ??ZDO_beaconNotifyIndCB_1:
   \   00032D   7F08         MOV       R7,#0x8
   \   00032F   02....       LJMP      ?BANKED_LEAVE_XDATA
   2839          
   2840          /*********************************************************************
   2841           * @fn          ZDO_StartRouterConfirmCB
   2842           *
   2843           * @brief       This function reports the results of the request to
   2844           *              start functioning as a router in a network.
   2845           *
   2846           * @param       Status - Result of NLME_StartRouterRequest()
   2847           *
   2848           * @return      none
   2849           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2850          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2851          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   2852            nwkStatus = (byte)Status;
   \   000007   EE           MOV       A,R6
   \   000008   90....       MOV       DPTR,#nwkStatus
   \   00000B   F0           MOVX      @DPTR,A
   2853          
   2854            if ( Status == ZSUCCESS )
   \   00000C   EE           MOV       A,R6
   \   00000D   700B         JNZ       ??ZDO_StartRouterConfirmCB_0
   2855            {
   2856              // LED on shows Router started
   2857              zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   2858              zdoHalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   2859              if ( devState == DEV_HOLD )
   \   00000F   90....       MOV       DPTR,#devState
   \   000012   E0           MOVX      A,@DPTR
   \   000013   7005         JNZ       ??ZDO_StartRouterConfirmCB_0
   2860              {
   2861                ZDApp_ChangeState( DEV_END_DEVICE );
   \   000015                ; Setup parameters for call to function ZDApp_ChangeState
   \   000015   7906         MOV       R1,#0x6
   \   000017   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   2862              }
   2863            }
   2864          #if defined(BLINK_LEDS)
   2865            else
   2866            {
   2867              zdoHalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2868            }
   2869          #endif
   2870          
   2871            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   00001A                ; Setup parameters for call to function osal_set_event
   \   00001A   7A20         MOV       R2,#0x20
   \   00001C   7B00         MOV       R3,#0x0
   \   00001E   90....       MOV       DPTR,#ZDAppTaskID
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000026   E9           MOV       A,R1
   2872          }
   \   000027   7F01         MOV       R7,#0x1
   \   000029   02....       LJMP      ?BANKED_LEAVE_XDATA
   2873          
   2874          /*********************************************************************
   2875           * @fn          ZDO_JoinConfirmCB
   2876           *
   2877           * @brief       This function allows the next higher layer to be notified
   2878           *              of the results of its request to join itself or another
   2879           *              device to a network.
   2880           *
   2881           * @param       Status - Result of NLME_JoinRequest()
   2882           *
   2883           * @return      none
   2884           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2885          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2886          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   89..         MOV       ?V0,R1
   2887            (void)PanId;  // remove if this parameter is used.
   2888          
   2889            nwkStatus = (byte)Status;
   \   000010   E5..         MOV       A,?V0
   \   000012   90....       MOV       DPTR,#nwkStatus
   \   000015   F0           MOVX      @DPTR,A
   2890          
   2891            if ( Status == ZSUCCESS )
   \   000016   E5..         MOV       A,?V0
   \   000018   6003         JZ        $+5
   \   00001A   02....       LJMP      ??ZDO_JoinConfirmCB_0 & 0xFFFF
   2892            {
   2893              if ( ZSTACK_END_DEVICE_BUILD
   2894                || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   2895              {
   2896                neighborEntry_t *pItem;
   2897          
   2898                // We don't need the neighbor table entries.
   2899                // Clear the neighbor Table to remove beacon information
   2900                nwkNeighborInitTable();
   \   00001D                ; Setup parameters for call to function nwkNeighborInitTable
   \   00001D   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   2901          
   2902                // Force a neighbor table entry for the parent
   2903                pItem = nwkNeighborFindEmptySlot();
   \   000020                ; Setup parameters for call to function nwkNeighborFindEmptySlot
   \   000020   12....       LCALL     `??nwkNeighborFindEmptySlot::?relay`; Banked call to: nwkNeighborFindEmptySlot
   \   000023   8A..         MOV       ?V4,R2
   \   000025   8B..         MOV       ?V5,R3
   \   000027   AE..         MOV       R6,?V4
   \   000029   AF..         MOV       R7,?V5
   2904                if ( pItem != NULL )
   \   00002B   EE           MOV       A,R6
   \   00002C   4F           ORL       A,R7
   \   00002D   7003         JNZ       $+5
   \   00002F   02....       LJMP      ??ZDO_JoinConfirmCB_1 & 0xFFFF
   2905                {
   2906                  osal_memset( pItem, 0x00, sizeof ( neighborEntry_t  )  );
   \   000032                ; Setup parameters for call to function osal_memset
   \   000032   7C17         MOV       R4,#0x17
   \   000034   7D00         MOV       R5,#0x0
   \   000036   7900         MOV       R1,#0x0
   \   000038   EE           MOV       A,R6
   \   000039   FA           MOV       R2,A
   \   00003A   EF           MOV       A,R7
   \   00003B   FB           MOV       R3,A
   \   00003C   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2907                  pItem->neighborAddress = _NIB.nwkCoordAddress;
   \   00003F   90....       MOV       DPTR,#_NIB + 23
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F8           MOV       R0,A
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F9           MOV       R1,A
   \   000047   8E82         MOV       DPL,R6
   \   000049   8F83         MOV       DPH,R7
   \   00004B   E8           MOV       A,R0
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   A3           INC       DPTR
   \   00004E   E9           MOV       A,R1
   \   00004F   F0           MOVX      @DPTR,A
   2908                  osal_cpyExtAddr( pItem ->neighborExtAddr, _NIB. nwkCoordExtAddress );
   \   000050                ; Setup parameters for call to function sAddrExtCpy
   \   000050   7C..         MOV       R4,#(_NIB + 25) & 0xff
   \   000052   7D..         MOV       R5,#((_NIB + 25) >> 8) & 0xff
   \   000054   EE           MOV       A,R6
   \   000055   2402         ADD       A,#0x2
   \   000057   FA           MOV       R2,A
   \   000058   E4           CLR       A
   \   000059   3F           ADDC      A,R7
   \   00005A   FB           MOV       R3,A
   \   00005B   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2909                  pItem->panId = _NIB. nwkPanId;
   \   00005E   90....       MOV       DPTR,#_NIB + 33
   \   000061   E0           MOVX      A,@DPTR
   \   000062   F8           MOV       R0,A
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F9           MOV       R1,A
   \   000066   8E82         MOV       DPL,R6
   \   000068   8F83         MOV       DPH,R7
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   E8           MOV       A,R0
   \   000075   F0           MOVX      @DPTR,A
   \   000076   A3           INC       DPTR
   \   000077   E9           MOV       A,R1
   \   000078   F0           MOVX      @DPTR,A
   2910                  pItem->linkInfo.rxLqi = DEF_LQI;
   \   000079   EE           MOV       A,R6
   \   00007A   240F         ADD       A,#0xf
   \   00007C   F582         MOV       DPL,A
   \   00007E   E4           CLR       A
   \   00007F   3F           ADDC      A,R7
   \   000080   F583         MOV       DPH,A
   \   000082   74AA         MOV       A,#-0x56
   \   000084   F0           MOVX      @DPTR,A
   2911                  pItem->linkInfo.txCounter = DEF_LINK_COUNTER;
   \   000085   90....       MOV       DPTR,#gLINK_DOWN_TRIGGER
   \   000088   E4           CLR       A
   \   000089   93           MOVC      A,@A+DPTR
   \   00008A   F8           MOV       R0,A
   \   00008B   7900         MOV       R1,#0x0
   \   00008D   E8           MOV       A,R0
   \   00008E   2401         ADD       A,#0x1
   \   000090   F8           MOV       R0,A
   \   000091   5001         JNC       ??ZDO_JoinConfirmCB_2
   \   000093   09           INC       R1
   \                     ??ZDO_JoinConfirmCB_2:
   \   000094   7A02         MOV       R2,#0x2
   \   000096   7B00         MOV       R3,#0x0
   \   000098   12....       LCALL     ?S_DIV_MOD
   \   00009B   E8           MOV       A,R0
   \   00009C   C0E0         PUSH      A
   \   00009E   EE           MOV       A,R6
   \   00009F   240D         ADD       A,#0xd
   \   0000A1   F582         MOV       DPL,A
   \   0000A3   E4           CLR       A
   \   0000A4   3F           ADDC      A,R7
   \   0000A5   F583         MOV       DPH,A
   \   0000A7   D0E0         POP       A
   \   0000A9   F0           MOVX      @DPTR,A
   2912                  pItem->linkInfo.txCost = DEF_LINK_COST;
   \   0000AA   EE           MOV       A,R6
   \   0000AB   240E         ADD       A,#0xe
   \   0000AD   F582         MOV       DPL,A
   \   0000AF   E4           CLR       A
   \   0000B0   3F           ADDC      A,R7
   \   0000B1   F583         MOV       DPH,A
   \   0000B3   7401         MOV       A,#0x1
   \   0000B5   F0           MOVX      @DPTR,A
   2913                }
   2914              }
   2915          
   2916              if ( (devState == DEV_HOLD) )
   \                     ??ZDO_JoinConfirmCB_1:
   \   0000B6   90....       MOV       DPTR,#devState
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   7005         JNZ       ??ZDO_JoinConfirmCB_3
   2917              {
   2918                ZDApp_ChangeState( DEV_NWK_JOINING );
   \   0000BC                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000BC   7903         MOV       R1,#0x3
   \   0000BE   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   2919              }
   2920          
   2921              if ( !ZG_SECURE_ENABLED )
   2922              {
   2923                // Notify to save info into NV
   2924                ZDApp_NVUpdate();
   2925              }
   2926          
   2927              NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDO_JoinConfirmCB_3:
   \   0000C1                ; Setup parameters for call to function NLME_SetPollRate
   \   0000C1   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \   0000C4   12....       LCALL     ?XLOAD_R2345
   \   0000C7   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   2928            }
   2929          
   2930            // Pass the join confirm to higher layer if callback registered
   2931            if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
   \                     ??ZDO_JoinConfirmCB_0:
   \   0000CA   90....       MOV       DPTR,#zdoCBFunc + 8
   \   0000CD   E0           MOVX      A,@DPTR
   \   0000CE   F8           MOV       R0,A
   \   0000CF   A3           INC       DPTR
   \   0000D0   E0           MOVX      A,@DPTR
   \   0000D1   F9           MOV       R1,A
   \   0000D2   E8           MOV       A,R0
   \   0000D3   49           ORL       A,R1
   \   0000D4   6043         JZ        ??ZDO_JoinConfirmCB_4
   2932            {
   2933              zdoJoinCnf_t joinCnf;
   2934          
   2935              joinCnf.status = Status;
   \   0000D6   E5..         MOV       A,?V0
   \   0000D8   C0E0         PUSH      A
   \   0000DA   85..82       MOV       DPL,?XSP + 0
   \   0000DD   85..83       MOV       DPH,?XSP + 1
   \   0000E0   D0E0         POP       A
   \   0000E2   F0           MOVX      @DPTR,A
   2936              joinCnf.deviceAddr = _NIB.nwkDevAddress;
   \   0000E3   90....       MOV       DPTR,#_NIB + 20
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   F8           MOV       R0,A
   \   0000E8   A3           INC       DPTR
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   F9           MOV       R1,A
   \   0000EB   7401         MOV       A,#0x1
   \   0000ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F0   E8           MOV       A,R0
   \   0000F1   F0           MOVX      @DPTR,A
   \   0000F2   A3           INC       DPTR
   \   0000F3   E9           MOV       A,R1
   \   0000F4   F0           MOVX      @DPTR,A
   2937              joinCnf.parentAddr = _NIB.nwkCoordAddress;
   \   0000F5   90....       MOV       DPTR,#_NIB + 23
   \   0000F8   E0           MOVX      A,@DPTR
   \   0000F9   F8           MOV       R0,A
   \   0000FA   A3           INC       DPTR
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   F9           MOV       R1,A
   \   0000FD   7403         MOV       A,#0x3
   \   0000FF   12....       LCALL     ?XSTACK_DISP0_8
   \   000102   E8           MOV       A,R0
   \   000103   F0           MOVX      @DPTR,A
   \   000104   A3           INC       DPTR
   \   000105   E9           MOV       A,R1
   \   000106   F0           MOVX      @DPTR,A
   2938          
   2939              zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
   \   000107                ; Setup parameters for indirect call
   \   000107   AA..         MOV       R2,?XSP + 0
   \   000109   AB..         MOV       R3,?XSP + 1
   \   00010B   90....       MOV       DPTR,#zdoCBFunc + 8
   \   00010E   E0           MOVX      A,@DPTR
   \   00010F   F8           MOV       R0,A
   \   000110   A3           INC       DPTR
   \   000111   E0           MOVX      A,@DPTR
   \   000112   F583         MOV       DPH,A
   \   000114   8882         MOV       DPL,R0
   \   000116   12....       LCALL     ?CALL_IND
   2940            }
   2941            
   2942            // Notify ZDApp
   2943            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_4:
   \   000119                ; Setup parameters for call to function ZDApp_SendMsg
   \   000119   7C00         MOV       R4,#0x0
   \   00011B   7D00         MOV       R5,#0x0
   \   00011D   7B02         MOV       R3,#0x2
   \   00011F   7A02         MOV       R2,#0x2
   \   000121   90....       MOV       DPTR,#ZDAppTaskID
   \   000124   E0           MOVX      A,@DPTR
   \   000125   F9           MOV       R1,A
   \   000126   12....       LCALL     `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2944          
   2945          }
   \   000129   7405         MOV       A,#0x5
   \   00012B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00012E   7F06         MOV       R7,#0x6
   \   000130   02....       LJMP      ?BANKED_LEAVE_XDATA
   2946          
   2947          /*********************************************************************
   2948           * @fn          ZDO_PermitJoinCB
   2949           *
   2950           * @brief      This function is called when there is a change in the
   2951           *             device's permit join status.
   2952           *
   2953           * @param       duration - the new duration
   2954           *
   2955           * @return      none
   2956           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2957          void ZDO_PermitJoinCB( uint8 duration )
   \                     ZDO_PermitJoinCB:
   2958          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV       A,#-0x1
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   \   000009   E9           MOV       A,R1
   \   00000A   C0E0         PUSH      A
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   D0E0         POP       A
   \   000014   F0           MOVX      @DPTR,A
   2959            // Pass the Permit Join status to higher layer if callback registered
   2960            if (zdoCBFunc[ZDO_PERMIT_JOIN_CBID] != NULL )
   \   000015   90....       MOV       DPTR,#zdoCBFunc + 14
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F8           MOV       R0,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F9           MOV       R1,A
   \   00001D   E8           MOV       A,R0
   \   00001E   49           ORL       A,R1
   \   00001F   6012         JZ        ??ZDO_PermitJoinCB_0
   2961            {
   2962              zdoCBFunc[ZDO_PERMIT_JOIN_CBID]( (void*)&duration );
   \   000021                ; Setup parameters for indirect call
   \   000021   AA..         MOV       R2,?XSP + 0
   \   000023   AB..         MOV       R3,?XSP + 1
   \   000025   90....       MOV       DPTR,#zdoCBFunc + 14
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F8           MOV       R0,A
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F583         MOV       DPH,A
   \   00002E   8882         MOV       DPL,R0
   \   000030   12....       LCALL     ?CALL_IND
   2963            }
   2964          }
   \                     ??ZDO_PermitJoinCB_0:
   \   000033   7401         MOV       A,#0x1
   \   000035   12....       LCALL     ?DEALLOC_XSTACK8
   \   000038   D083         POP       DPH
   \   00003A   D082         POP       DPL
   \   00003C   02....       LJMP      ?BRET
   2965          
   2966          /*********************************************************************
   2967           * @fn          ZDO_AddrChangeIndicationCB
   2968           *
   2969           * @brief       This function notifies the application that this
   2970           *              device's address has changed.  Could happen in
   2971           *              a network with stochastic addressing (PRO).
   2972           *
   2973           * @param       newAddr - the new address
   2974           *
   2975           * @return      none
   2976           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2977          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2978          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   2979            ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
   2980            epList_t *pItem = epList;
   \   000009   90....       MOV       DPTR,#epList
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F5..         MOV       ?V0,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F5..         MOV       ?V1,A
   2981          
   2982            // Notify to save info into NV
   2983            ZDApp_NVUpdate();
   \   000013                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000013   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   2984          
   2985            // Notify the applications
   2986            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000016                ; Setup parameters for call to function osal_set_event
   \   000016   7A10         MOV       R2,#0x10
   \   000018   7B00         MOV       R3,#0x0
   \   00001A   90....       MOV       DPTR,#ZDAppTaskID
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F9           MOV       R1,A
   \   00001F   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000022   E9           MOV       A,R1
   2987          
   2988            while (pItem != NULL)
   \                     ??ZDO_AddrChangeIndicationCB_0:
   \   000023   E5..         MOV       A,?V0
   \   000025   45..         ORL       A,?V1
   \   000027   606D         JZ        ??ZDO_AddrChangeIndicationCB_1
   2989            {
   2990              if (pItem->epDesc->endPoint != ZDO_EP)
   \   000029   85..82       MOV       DPL,?V0
   \   00002C   85..83       MOV       DPH,?V1
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F8           MOV       R0,A
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F583         MOV       DPH,A
   \   000037   8882         MOV       DPL,R0
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   604B         JZ        ??ZDO_AddrChangeIndicationCB_2
   2991              {
   2992                pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
   \   00003C                ; Setup parameters for call to function osal_msg_allocate
   \   00003C   7A04         MOV       R2,#0x4
   \   00003E   7B00         MOV       R3,#0x0
   \   000040   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000043   8A..         MOV       ?V4,R2
   \   000045   8B..         MOV       ?V5,R3
   \   000047   AE..         MOV       R6,?V4
   \   000049   AF..         MOV       R7,?V5
   2993                if (pZDOAddrChangeMsg != NULL)
   \   00004B   EE           MOV       A,R6
   \   00004C   4F           ORL       A,R7
   \   00004D   6038         JZ        ??ZDO_AddrChangeIndicationCB_2
   2994                {
   2995                  pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
   \   00004F   8E82         MOV       DPL,R6
   \   000051   8F83         MOV       DPH,R7
   \   000053   74D6         MOV       A,#-0x2a
   \   000055   F0           MOVX      @DPTR,A
   2996                  pZDOAddrChangeMsg->shortAddr = newAddr;
   \   000056   8E82         MOV       DPL,R6
   \   000058   8F83         MOV       DPH,R7
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   E5..         MOV       A,?V2
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   A3           INC       DPTR
   \   000060   E5..         MOV       A,?V3
   \   000062   F0           MOVX      @DPTR,A
   2997                  osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
   \   000063                ; Setup parameters for call to function osal_msg_send
   \   000063   EE           MOV       A,R6
   \   000064   FA           MOV       R2,A
   \   000065   EF           MOV       A,R7
   \   000066   FB           MOV       R3,A
   \   000067   85..82       MOV       DPL,?V0
   \   00006A   85..83       MOV       DPH,?V1
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   F8           MOV       R0,A
   \   000071   A3           INC       DPTR
   \   000072   E0           MOVX      A,@DPTR
   \   000073   F583         MOV       DPH,A
   \   000075   8882         MOV       DPL,R0
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   F8           MOV       R0,A
   \   00007B   A3           INC       DPTR
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   F583         MOV       DPH,A
   \   00007F   8882         MOV       DPL,R0
   \   000081   E0           MOVX      A,@DPTR
   \   000082   F9           MOV       R1,A
   \   000083   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000086   E9           MOV       A,R1
   2998                }
   2999              }
   3000              pItem = pItem->nextDesc;
   \                     ??ZDO_AddrChangeIndicationCB_2:
   \   000087   85..82       MOV       DPL,?V0
   \   00008A   85..83       MOV       DPH,?V1
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   F5..         MOV       ?V0,A
   \   000090   A3           INC       DPTR
   \   000091   E0           MOVX      A,@DPTR
   \   000092   F5..         MOV       ?V1,A
   \   000094   808D         SJMP      ??ZDO_AddrChangeIndicationCB_0
   3001            }
   3002          
   3003            // Send out a device announce
   3004            ZDApp_AnnounceNewAddress();
   \                     ??ZDO_AddrChangeIndicationCB_1:
   \   000096                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000096   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   3005          }
   \   000099   7F06         MOV       R7,#0x6
   \   00009B   02....       LJMP      ?BANKED_LEAVE_XDATA
   3006          
   3007          /*********************************************************************
   3008           * @fn          ZDO_JoinIndicationCB
   3009           *
   3010           * @brief       This function allows the next higher layer of a
   3011           *              coordinator to be notified of a remote join request.
   3012           *
   3013           * @param       ShortAddress - 16-bit address
   3014           * @param       ExtendedAddress - IEEE (64-bit) address
   3015           * @param       CapabilityFlags - Association Capability Flags
   3016           * @param       type - of joining -
   3017           *                          NWK_ASSOC_JOIN
   3018           *                          NWK_ASSOC_REJOIN_UNSECURE
   3019           *                          NWK_ASSOC_REJOIN_SECURE
   3020           *
   3021           * @return      ZStatus_t
   3022           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3023          ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   3024                                          uint8 CapabilityFlags, uint8 type)
   3025          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V10,R2
   \   000007   8B..         MOV       ?V11,R3
   \   000009   8C..         MOV       ?V12,R4
   \   00000B   8D..         MOV       ?V13,R5
   \   00000D   89..         MOV       ?V9,R1
   \   00000F   7416         MOV       A,#0x16
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V8,A
   3026            (void)ExtendedAddress;
   3027            //check if the device is leaving before responding to rejoin request
   3028            if( osal_get_timeoutEx( ZDAppTaskID , ZDO_DEVICE_RESET) )
   \   000017                ; Setup parameters for call to function osal_get_timeoutEx
   \   000017   7A04         MOV       R2,#0x4
   \   000019   7B00         MOV       R3,#0x0
   \   00001B   90....       MOV       DPTR,#ZDAppTaskID
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F9           MOV       R1,A
   \   000020   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000023   EA           MOV       A,R2
   \   000024   4B           ORL       A,R3
   \   000025   4C           ORL       A,R4
   \   000026   4D           ORL       A,R5
   \   000027   6005         JZ        ??ZDO_JoinIndicationCB_0
   3029            {
   3030              return ZFailure; // device leaving , hence do not allow rejoin
   \   000029   7901         MOV       R1,#0x1
   \   00002B   02....       LJMP      ??ZDO_JoinIndicationCB_1 & 0xFFFF
   3031            }
   3032          
   3033          #if ZDO_NV_SAVE_RFDs
   3034              (void)CapabilityFlags;
   3035          
   3036          #else  // if !ZDO_NV_SAVE_RFDs
   3037              if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
   3038          #endif
   3039              {
   3040                ZDApp_NVUpdate();  // Notify to save info into NV.
   \                     ??ZDO_JoinIndicationCB_0:
   \   00002E                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00002E   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3041              }
   3042          
   3043              if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
   3044              {
   3045                if ( type == NWK_ASSOC_JOIN ||
   3046                    type == NWK_ASSOC_REJOIN_UNSECURE ||
   3047                      type == NWK_ASSOC_REJOIN_SECURE )
   \   000031   E5..         MOV       A,?V8
   \   000033   600F         JZ        ??ZDO_JoinIndicationCB_2
   \   000035   7401         MOV       A,#0x1
   \   000037   65..         XRL       A,?V8
   \   000039   6009         JZ        ??ZDO_JoinIndicationCB_2
   \   00003B   7402         MOV       A,#0x2
   \   00003D   65..         XRL       A,?V8
   \   00003F   6003         JZ        $+5
   \   000041   02....       LJMP      ??ZDO_JoinIndicationCB_3 & 0xFFFF
   3048                {
   3049                  uint16 timeToFire;
   3050                  ZDAppNewDevice_t *pNewDevice, *pDeviceList;
   3051          
   3052                  pNewDevice = (ZDAppNewDevice_t *) osal_mem_alloc( sizeof(ZDAppNewDevice_t) );
   \                     ??ZDO_JoinIndicationCB_2:
   \   000044                ; Setup parameters for call to function osal_mem_alloc
   \   000044   7A06         MOV       R2,#0x6
   \   000046   7B00         MOV       R3,#0x0
   \   000048   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00004B   8A..         MOV       ?V4,R2
   \   00004D   8B..         MOV       ?V5,R3
   \   00004F   AE..         MOV       R6,?V4
   \   000051   AF..         MOV       R7,?V5
   3053          
   3054                  if ( pNewDevice == NULL )
   \   000053   EE           MOV       A,R6
   \   000054   4F           ORL       A,R7
   \   000055   7005         JNZ       ??ZDO_JoinIndicationCB_4
   3055                  {
   3056                    // Memory alloc failed
   3057                    return ZMemError;
   \   000057   7910         MOV       R1,#0x10
   \   000059   02....       LJMP      ??ZDO_JoinIndicationCB_1 & 0xFFFF
   3058                  }
   3059          
   3060                  // Add the new device to the New Device List
   3061                  if ( ZDApp_NewDeviceList == NULL )
   \                     ??ZDO_JoinIndicationCB_4:
   \   00005C   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F8           MOV       R0,A
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F9           MOV       R1,A
   \   000064   E8           MOV       A,R0
   \   000065   49           ORL       A,R1
   \   000066   700A         JNZ       ??ZDO_JoinIndicationCB_5
   3062                  {
   3063                    // The list is empty, add the first element
   3064                    ZDApp_NewDeviceList = pNewDevice;
   \   000068   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   00006B   EE           MOV       A,R6
   \   00006C   F0           MOVX      @DPTR,A
   \   00006D   A3           INC       DPTR
   \   00006E   EF           MOV       A,R7
   \   00006F   F0           MOVX      @DPTR,A
   \   000070   8035         SJMP      ??ZDO_JoinIndicationCB_6
   3065                  }
   3066                  else
   3067                  {
   3068                    pDeviceList = ZDApp_NewDeviceList;
   \                     ??ZDO_JoinIndicationCB_5:
   \   000072   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   000075   E0           MOVX      A,@DPTR
   \   000076   F8           MOV       R0,A
   \   000077   A3           INC       DPTR
   \   000078   E0           MOVX      A,@DPTR
   \   000079   F9           MOV       R1,A
   \   00007A   88..         MOV       ?V0,R0
   \   00007C   89..         MOV       ?V1,R1
   3069          
   3070                    // Walk the list to last element
   3071                    while ( pDeviceList->next )
   \                     ??ZDO_JoinIndicationCB_7:
   \   00007E   85..82       MOV       DPL,?V0
   \   000081   85..83       MOV       DPH,?V1
   \   000084   E0           MOVX      A,@DPTR
   \   000085   F8           MOV       R0,A
   \   000086   A3           INC       DPTR
   \   000087   E0           MOVX      A,@DPTR
   \   000088   F9           MOV       R1,A
   \   000089   E8           MOV       A,R0
   \   00008A   49           ORL       A,R1
   \   00008B   600F         JZ        ??ZDO_JoinIndicationCB_8
   3072                    {
   3073                      pDeviceList = (ZDAppNewDevice_t *) pDeviceList->next;
   \   00008D   85..82       MOV       DPL,?V0
   \   000090   85..83       MOV       DPH,?V1
   \   000093   E0           MOVX      A,@DPTR
   \   000094   F5..         MOV       ?V0,A
   \   000096   A3           INC       DPTR
   \   000097   E0           MOVX      A,@DPTR
   \   000098   F5..         MOV       ?V1,A
   \   00009A   80E2         SJMP      ??ZDO_JoinIndicationCB_7
   3074                    }
   3075          
   3076                    // Add new device at the end
   3077                    pDeviceList->next = pNewDevice;
   \                     ??ZDO_JoinIndicationCB_8:
   \   00009C   85..82       MOV       DPL,?V0
   \   00009F   85..83       MOV       DPH,?V1
   \   0000A2   EE           MOV       A,R6
   \   0000A3   F0           MOVX      @DPTR,A
   \   0000A4   A3           INC       DPTR
   \   0000A5   EF           MOV       A,R7
   \   0000A6   F0           MOVX      @DPTR,A
   3078                  }
   3079          
   3080                  // get the remaining time of the timer
   3081                  timeToFire = osal_get_timeoutEx( ZDAppTaskID, ZDO_NEW_DEVICE );
   \                     ??ZDO_JoinIndicationCB_6:
   \   0000A7                ; Setup parameters for call to function osal_get_timeoutEx
   \   0000A7   7A40         MOV       R2,#0x40
   \   0000A9   7B00         MOV       R3,#0x0
   \   0000AB   90....       MOV       DPTR,#ZDAppTaskID
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   F9           MOV       R1,A
   \   0000B0   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   0000B3   8A..         MOV       ?V4,R2
   \   0000B5   8B..         MOV       ?V5,R3
   \   0000B7   8C..         MOV       ?V6,R4
   \   0000B9   8D..         MOV       ?V7,R5
   \   0000BB   85....       MOV       ?V2,?V4
   \   0000BE   85....       MOV       ?V3,?V5
   3082          
   3083                  pNewDevice->next = NULL;
   \   0000C1   8E82         MOV       DPL,R6
   \   0000C3   8F83         MOV       DPH,R7
   \   0000C5   7400         MOV       A,#0x0
   \   0000C7   F0           MOVX      @DPTR,A
   \   0000C8   A3           INC       DPTR
   \   0000C9   7400         MOV       A,#0x0
   \   0000CB   F0           MOVX      @DPTR,A
   3084                  pNewDevice->shortAddr = ShortAddress;
   \   0000CC   8E82         MOV       DPL,R6
   \   0000CE   8F83         MOV       DPH,R7
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   E5..         MOV       A,?V10
   \   0000D4   F0           MOVX      @DPTR,A
   \   0000D5   A3           INC       DPTR
   \   0000D6   E5..         MOV       A,?V11
   \   0000D8   F0           MOVX      @DPTR,A
   3085                  pNewDevice->timeDelta = ZDAPP_NEW_DEVICE_TIME - timeToFire;
   \   0000D9   7458         MOV       A,#0x58
   \   0000DB   C3           CLR       C
   \   0000DC   95..         SUBB      A,?V2
   \   0000DE   F8           MOV       R0,A
   \   0000DF   7402         MOV       A,#0x2
   \   0000E1   95..         SUBB      A,?V3
   \   0000E3   F9           MOV       R1,A
   \   0000E4   8E82         MOV       DPL,R6
   \   0000E6   8F83         MOV       DPH,R7
   \   0000E8   A3           INC       DPTR
   \   0000E9   A3           INC       DPTR
   \   0000EA   A3           INC       DPTR
   \   0000EB   A3           INC       DPTR
   \   0000EC   E8           MOV       A,R0
   \   0000ED   F0           MOVX      @DPTR,A
   \   0000EE   A3           INC       DPTR
   \   0000EF   E9           MOV       A,R1
   \   0000F0   F0           MOVX      @DPTR,A
   3086          
   3087                  // Start the timer only if there is no pending timer
   3088                  if ( pNewDevice->timeDelta == ZDAPP_NEW_DEVICE_TIME )
   \   0000F1   8E82         MOV       DPL,R6
   \   0000F3   8F83         MOV       DPH,R7
   \   0000F5   A3           INC       DPTR
   \   0000F6   A3           INC       DPTR
   \   0000F7   A3           INC       DPTR
   \   0000F8   A3           INC       DPTR
   \   0000F9   E0           MOVX      A,@DPTR
   \   0000FA   6458         XRL       A,#0x58
   \   0000FC   7004         JNZ       ??ZDO_JoinIndicationCB_9
   \   0000FE   A3           INC       DPTR
   \   0000FF   E0           MOVX      A,@DPTR
   \   000100   6402         XRL       A,#0x2
   \                     ??ZDO_JoinIndicationCB_9:
   \   000102   7018         JNZ       ??ZDO_JoinIndicationCB_3
   3089                  {
   3090                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, ZDAPP_NEW_DEVICE_TIME );
   \   000104                ; Setup parameters for call to function osal_start_timerEx
   \   000104   90....       MOV       DPTR,#__Constant_258
   \   000107   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00010A   7A40         MOV       R2,#0x40
   \   00010C   7B00         MOV       R3,#0x0
   \   00010E   90....       MOV       DPTR,#ZDAppTaskID
   \   000111   E0           MOVX      A,@DPTR
   \   000112   F9           MOV       R1,A
   \   000113   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000116   7404         MOV       A,#0x4
   \   000118   12....       LCALL     ?DEALLOC_XSTACK8
   \   00011B   E9           MOV       A,R1
   3091                  }
   3092                }
   3093              }
   3094          
   3095              return ZSuccess;
   \                     ??ZDO_JoinIndicationCB_3:
   \   00011C   7900         MOV       R1,#0x0
   \                     ??ZDO_JoinIndicationCB_1:
   \   00011E   7F0E         MOV       R7,#0xe
   \   000120   02....       LJMP      ?BANKED_LEAVE_XDATA
   3096          
   3097          }
   3098          
   3099          /*********************************************************************
   3100           * @fn          ZDO_ConcentratorIndicationCB
   3101           *
   3102           * @brief       This function allows the next higher layer of a
   3103           *              device to be notified of existence of the concentrator.
   3104           *
   3105           * @param       nwkAddr - 16-bit NWK address of the concentrator
   3106           * @param       extAddr - pointer to extended Address
   3107           *                        NULL if not available
   3108           * @param       pktCost - PktCost from RREQ
   3109           *
   3110           * @return      void
   3111           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3112          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
   \                     ZDO_ConcentratorIndicationCB:
   3113          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   \   000012   89..         MOV       ?V2,R1
   3114            zdoConcentratorInd_t conInd;
   3115          
   3116            conInd.nwkAddr = nwkAddr;
   \   000014   85..82       MOV       DPL,?XSP + 0
   \   000017   85..83       MOV       DPH,?XSP + 1
   \   00001A   E5..         MOV       A,?V0
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   A3           INC       DPTR
   \   00001E   E5..         MOV       A,?V1
   \   000020   F0           MOVX      @DPTR,A
   3117            conInd.extAddr = extAddr;
   \   000021   7402         MOV       A,#0x2
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   EE           MOV       A,R6
   \   000027   F0           MOVX      @DPTR,A
   \   000028   A3           INC       DPTR
   \   000029   EF           MOV       A,R7
   \   00002A   F0           MOVX      @DPTR,A
   3118            conInd.pktCost = pktCost;
   \   00002B   E5..         MOV       A,?V2
   \   00002D   C0E0         PUSH      A
   \   00002F   7404         MOV       A,#0x4
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   D0E0         POP       A
   \   000036   F0           MOVX      @DPTR,A
   3119          
   3120            if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
   \   000037   90....       MOV       DPTR,#zdoCBFunc + 2
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F8           MOV       R0,A
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   F9           MOV       R1,A
   \   00003F   E8           MOV       A,R0
   \   000040   49           ORL       A,R1
   \   000041   6012         JZ        ??ZDO_ConcentratorIndicationCB_0
   3121            {
   3122              zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
   \   000043                ; Setup parameters for indirect call
   \   000043   AA..         MOV       R2,?XSP + 0
   \   000045   AB..         MOV       R3,?XSP + 1
   \   000047   90....       MOV       DPTR,#zdoCBFunc + 2
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F8           MOV       R0,A
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   F583         MOV       DPH,A
   \   000050   8882         MOV       DPL,R0
   \   000052   12....       LCALL     ?CALL_IND
   3123            }
   3124          }
   \                     ??ZDO_ConcentratorIndicationCB_0:
   \   000055   7405         MOV       A,#0x5
   \   000057   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005A   7F03         MOV       R7,#0x3
   \   00005C   02....       LJMP      ?BANKED_LEAVE_XDATA
   3125          
   3126          /*********************************************************************
   3127           * @fn          ZDO_LeaveCnf
   3128           *
   3129           * @brief       This function allows the next higher layer to be
   3130           *              notified of the results of its request for this or
   3131           *              a child device to leave the network.
   3132           *
   3133           * @param       cnf - NLME_LeaveCnf_t
   3134           *
   3135           * @return      none
   3136           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3137          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   3138          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   3139            // Check for this device
   3140            if ( osal_ExtAddrEqual( cnf->extAddr,
   3141                                    NLME_GetExtAddr() ) == TRUE )
   \   000009                ; Setup parameters for call to function NLME_GetExtAddr
   \   000009   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   AC..         MOV       R4,?V0
   \   000012   AD..         MOV       R5,?V1
   \   000014                ; Setup parameters for call to function sAddrExtCmp
   \   000014   EE           MOV       A,R6
   \   000015   2402         ADD       A,#0x2
   \   000017   FA           MOV       R2,A
   \   000018   E4           CLR       A
   \   000019   3F           ADDC      A,R7
   \   00001A   FB           MOV       R3,A
   \   00001B   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00001E   E9           MOV       A,R1
   \   00001F   6401         XRL       A,#0x1
   \   000021   7036         JNZ       ??ZDO_LeaveCnf_0
   3142            {
   3143              // Pass the leave confirm to higher layer if callback registered
   3144              if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
   3145                   ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
   \   000023   90....       MOV       DPTR,#zdoCBFunc + 10
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F8           MOV       R0,A
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F9           MOV       R1,A
   \   00002B   E8           MOV       A,R0
   \   00002C   49           ORL       A,R1
   \   00002D   601C         JZ        ??ZDO_LeaveCnf_1
   \   00002F                ; Setup parameters for indirect call
   \   00002F   EE           MOV       A,R6
   \   000030   FA           MOV       R2,A
   \   000031   EF           MOV       A,R7
   \   000032   FB           MOV       R3,A
   \   000033   90....       MOV       DPTR,#zdoCBFunc + 10
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F8           MOV       R0,A
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F583         MOV       DPH,A
   \   00003C   8882         MOV       DPL,R0
   \   00003E   12....       LCALL     ?CALL_IND
   \   000041   8A..         MOV       ?V0,R2
   \   000043   8B..         MOV       ?V1,R3
   \   000045   E5..         MOV       A,?V0
   \   000047   45..         ORL       A,?V1
   \   000049   700E         JNZ       ??ZDO_LeaveCnf_0
   3146              {
   3147                // Prepare to leave with reset
   3148                ZDApp_LeaveReset( cnf->rejoin );
   \                     ??ZDO_LeaveCnf_1:
   \   00004B                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00004B   EE           MOV       A,R6
   \   00004C   240B         ADD       A,#0xb
   \   00004E   F582         MOV       DPL,A
   \   000050   E4           CLR       A
   \   000051   3F           ADDC      A,R7
   \   000052   F583         MOV       DPH,A
   \   000054   E0           MOVX      A,@DPTR
   \   000055   F9           MOV       R1,A
   \   000056   12....       LCALL     `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   3149              }
   3150            }
   3151            else if ( ZSTACK_ROUTER_BUILD )
   3152            {
   3153              // Remove device address(optionally descendents) from data
   3154              ZDApp_LeaveUpdate( cnf->dstAddr,
   3155                                 cnf->extAddr,
   3156                                 cnf->removeChildren,
   3157                                 cnf->rejoin );
   3158            }
   3159          }
   \                     ??ZDO_LeaveCnf_0:
   \   000059   7F02         MOV       R7,#0x2
   \   00005B   02....       LJMP      ?BANKED_LEAVE_XDATA
   3160          
   3161          /*********************************************************************
   3162           * @fn          ZDO_LeaveInd
   3163           *
   3164           * @brief       This function allows the next higher layer of a
   3165           *              device to be notified of a remote leave request or
   3166           *              indication.
   3167           *
   3168           * @param       ind - NLME_LeaveInd_t
   3169           *
   3170           * @return      none
   3171           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3172          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   3173          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   3174            uint8 leave;
   3175          
   3176            // NWK layer filters out illegal requests
   3177            if ( ind->request == TRUE )
   \   00000E   8E82         MOV       DPL,R6
   \   000010   8F83         MOV       DPH,R7
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   6401         XRL       A,#0x1
   \   00001F   706F         JNZ       ??ZDO_LeaveInd_0
   3178            {
   3179              byte temp = FALSE;
   \   000021   85..82       MOV       DPL,?XSP + 0
   \   000024   85..83       MOV       DPH,?XSP + 1
   \   000027   7400         MOV       A,#0x0
   \   000029   F0           MOVX      @DPTR,A
   3180              
   3181              // Only respond if we are not rejoining the network
   3182              if ( ind->rejoin == FALSE )
   \   00002A   EE           MOV       A,R6
   \   00002B   240C         ADD       A,#0xc
   \   00002D   F582         MOV       DPL,A
   \   00002F   E4           CLR       A
   \   000030   3F           ADDC      A,R7
   \   000031   F583         MOV       DPH,A
   \   000033   E0           MOVX      A,@DPTR
   \   000034   7036         JNZ       ??ZDO_LeaveInd_1
   3183              {
   3184                // Notify network of leave
   3185                NLME_LeaveRsp_t rsp;
   3186                rsp.rejoin = ind->rejoin;
   \   000036   EE           MOV       A,R6
   \   000037   240C         ADD       A,#0xc
   \   000039   F582         MOV       DPL,A
   \   00003B   E4           CLR       A
   \   00003C   3F           ADDC      A,R7
   \   00003D   F583         MOV       DPH,A
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   C0E0         PUSH      A
   \   000042   7402         MOV       A,#0x2
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   D0E0         POP       A
   \   000049   F0           MOVX      @DPTR,A
   3187          
   3188                if ( ZSTACK_ROUTER_BUILD )
   3189                {
   3190                  rsp.removeChildren = ind->removeChildren;
   3191                }
   3192                else if ( ZSTACK_END_DEVICE_BUILD )
   3193                {
   3194                  NLME_SetResponseRate(0);
   \   00004A                ; Setup parameters for call to function NLME_SetResponseRate
   \   00004A   7A00         MOV       R2,#0x0
   \   00004C   7B00         MOV       R3,#0x0
   \   00004E   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   3195                  NLME_SetQueuedPollRate(0);
   \   000051                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000051   7A00         MOV       R2,#0x0
   \   000053   7B00         MOV       R3,#0x0
   \   000055   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   3196                  rsp.removeChildren = 0;
   \   000058   7401         MOV       A,#0x1
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   7400         MOV       A,#0x0
   \   00005F   F0           MOVX      @DPTR,A
   3197                }
   3198                
   3199                bdb_setFN();
   \   000060                ; Setup parameters for call to function bdb_setFN
   \   000060   12....       LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
   3200                 
   3201                NLME_LeaveRsp( &rsp );
   \   000063                ; Setup parameters for call to function NLME_LeaveRsp
   \   000063   7401         MOV       A,#0x1
   \   000065   12....       LCALL     ?XSTACK_DISP101_8
   \   000068   12....       LCALL     `??NLME_LeaveRsp::?relay`; Banked call to: NLME_LeaveRsp
   \   00006B   E9           MOV       A,R1
   3202              }
   3203          
   3204              if ( ZSTACK_END_DEVICE_BUILD )
   3205              {
   3206                // Stop polling and get ready to reset
   3207                NLME_SetPollRate( 0 );
   \                     ??ZDO_LeaveInd_1:
   \   00006C                ; Setup parameters for call to function NLME_SetPollRate
   \   00006C   90....       MOV       DPTR,#__Constant_0
   \   00006F   12....       LCALL     ?XLOAD_R2345
   \   000072   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   3208              }
   3209          
   3210              // Prepare to leave with reset
   3211              ZDApp_LeaveReset( ind->rejoin );
   \   000075                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000075   EE           MOV       A,R6
   \   000076   240C         ADD       A,#0xc
   \   000078   F582         MOV       DPL,A
   \   00007A   E4           CLR       A
   \   00007B   3F           ADDC      A,R7
   \   00007C   F583         MOV       DPH,A
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   F9           MOV       R1,A
   \   000080   12....       LCALL     `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   3212              
   3213              //Turn on the radio to avoid sending packets after sending the leave    
   3214              ZMacSetReq(ZMacRxOnIdle, &temp);
   \   000083                ; Setup parameters for call to function ZMacSetReq
   \   000083   AA..         MOV       R2,?XSP + 0
   \   000085   AB..         MOV       R3,?XSP + 1
   \   000087   7952         MOV       R1,#0x52
   \   000089   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   00008C   E9           MOV       A,R1
   \   00008D   02....       LJMP      ??ZDO_LeaveInd_2 & 0xFFFF
   3215            }
   3216            else
   3217            {
   3218              leave = FALSE;
   \                     ??ZDO_LeaveInd_0:
   \   000090   75..00       MOV       ?V0,#0x0
   3219          
   3220              // Check if this device needs to leave as a child or descendent
   3221              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \   000093                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000093   12....       LCALL     `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   000096   8A..         MOV       ?V2,R2
   \   000098   8B..         MOV       ?V3,R3
   \   00009A   A8..         MOV       R0,?V2
   \   00009C   A9..         MOV       R1,?V3
   \   00009E   8E82         MOV       DPL,R6
   \   0000A0   8F83         MOV       DPH,R7
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   68           XRL       A,R0
   \   0000A4   7003         JNZ       ??ZDO_LeaveInd_3
   \   0000A6   A3           INC       DPTR
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   69           XRL       A,R1
   \                     ??ZDO_LeaveInd_3:
   \   0000A9   702C         JNZ       ??ZDO_LeaveInd_4
   3222              {
   3223                if ( ( ind->removeChildren == TRUE )   )
   \   0000AB   EE           MOV       A,R6
   \   0000AC   240B         ADD       A,#0xb
   \   0000AE   F582         MOV       DPL,A
   \   0000B0   E4           CLR       A
   \   0000B1   3F           ADDC      A,R7
   \   0000B2   F583         MOV       DPH,A
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   6401         XRL       A,#0x1
   \   0000B7   7005         JNZ       ??ZDO_LeaveInd_5
   3224                {
   3225                  leave = TRUE;
   \   0000B9   75..01       MOV       ?V0,#0x1
   \   0000BC   8019         SJMP      ??ZDO_LeaveInd_4
   3226                }
   3227                else if ( ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_DEVICE)
   \                     ??ZDO_LeaveInd_5:
   \   0000BE   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   5407         ANL       A,#0x7
   \   0000C4   6402         XRL       A,#0x2
   \   0000C6   700F         JNZ       ??ZDO_LeaveInd_4
   3228                {
   3229                  // old parents is leaving the network, child needs to search for a new parent
   3230                  ind->rejoin = TRUE;
   \   0000C8   EE           MOV       A,R6
   \   0000C9   240C         ADD       A,#0xc
   \   0000CB   F582         MOV       DPL,A
   \   0000CD   E4           CLR       A
   \   0000CE   3F           ADDC      A,R7
   \   0000CF   F583         MOV       DPH,A
   \   0000D1   7401         MOV       A,#0x1
   \   0000D3   F0           MOVX      @DPTR,A
   3231                  leave = TRUE;
   \   0000D4   75..01       MOV       ?V0,#0x1
   3232                }
   3233          
   3234              }
   3235              else if ( ind->removeChildren == TRUE )
   3236              {
   3237                // Check NWK address allocation algorithm
   3238                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   3239              }
   3240          
   3241              if ( leave == TRUE )
   \                     ??ZDO_LeaveInd_4:
   \   0000D7   7401         MOV       A,#0x1
   \   0000D9   65..         XRL       A,?V0
   \   0000DB   7010         JNZ       ??ZDO_LeaveInd_6
   3242              {
   3243                // Prepare to leave with reset
   3244                ZDApp_LeaveReset( ind->rejoin );
   \   0000DD                ; Setup parameters for call to function ZDApp_LeaveReset
   \   0000DD   EE           MOV       A,R6
   \   0000DE   240C         ADD       A,#0xc
   \   0000E0   F582         MOV       DPL,A
   \   0000E2   E4           CLR       A
   \   0000E3   3F           ADDC      A,R7
   \   0000E4   F583         MOV       DPH,A
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   F9           MOV       R1,A
   \   0000E8   12....       LCALL     `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   \   0000EB   8034         SJMP      ??ZDO_LeaveInd_2
   3245              }
   3246              else
   3247              {
   3248                // Remove device address(optionally descendents) from data
   3249                ZDApp_LeaveUpdate( ind->srcAddr,
   3250                                   ind->extAddr,
   3251                                   ind->removeChildren,
   3252                                   ind->rejoin );
   \                     ??ZDO_LeaveInd_6:
   \   0000ED                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   0000ED   EE           MOV       A,R6
   \   0000EE   240C         ADD       A,#0xc
   \   0000F0   F582         MOV       DPL,A
   \   0000F2   E4           CLR       A
   \   0000F3   3F           ADDC      A,R7
   \   0000F4   F583         MOV       DPH,A
   \   0000F6   E0           MOVX      A,@DPTR
   \   0000F7   F5..         MOV       ?V1,A
   \   0000F9   78..         MOV       R0,#?V1
   \   0000FB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FE   EE           MOV       A,R6
   \   0000FF   240B         ADD       A,#0xb
   \   000101   F582         MOV       DPL,A
   \   000103   E4           CLR       A
   \   000104   3F           ADDC      A,R7
   \   000105   F583         MOV       DPH,A
   \   000107   E0           MOVX      A,@DPTR
   \   000108   F9           MOV       R1,A
   \   000109   EE           MOV       A,R6
   \   00010A   2402         ADD       A,#0x2
   \   00010C   FC           MOV       R4,A
   \   00010D   E4           CLR       A
   \   00010E   3F           ADDC      A,R7
   \   00010F   FD           MOV       R5,A
   \   000110   8E82         MOV       DPL,R6
   \   000112   8F83         MOV       DPH,R7
   \   000114   E0           MOVX      A,@DPTR
   \   000115   FA           MOV       R2,A
   \   000116   A3           INC       DPTR
   \   000117   E0           MOVX      A,@DPTR
   \   000118   FB           MOV       R3,A
   \   000119   12....       LCALL     `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
   \   00011C   7401         MOV       A,#0x1
   \   00011E   12....       LCALL     ?DEALLOC_XSTACK8
   3253              }
   3254            }
   3255          
   3256            // Pass the leave indication to higher layer if callback registered.
   3257            if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
   \                     ??ZDO_LeaveInd_2:
   \   000121   90....       MOV       DPTR,#zdoCBFunc + 12
   \   000124   E0           MOVX      A,@DPTR
   \   000125   F8           MOV       R0,A
   \   000126   A3           INC       DPTR
   \   000127   E0           MOVX      A,@DPTR
   \   000128   F9           MOV       R1,A
   \   000129   E8           MOV       A,R0
   \   00012A   49           ORL       A,R1
   \   00012B   601C         JZ        ??ZDO_LeaveInd_7
   3258            {
   3259              (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
   \   00012D                ; Setup parameters for indirect call
   \   00012D   EE           MOV       A,R6
   \   00012E   FA           MOV       R2,A
   \   00012F   EF           MOV       A,R7
   \   000130   FB           MOV       R3,A
   \   000131   90....       MOV       DPTR,#zdoCBFunc + 12
   \   000134   E0           MOVX      A,@DPTR
   \   000135   F8           MOV       R0,A
   \   000136   A3           INC       DPTR
   \   000137   E0           MOVX      A,@DPTR
   \   000138   F583         MOV       DPH,A
   \   00013A   8882         MOV       DPL,R0
   \   00013C   12....       LCALL     ?CALL_IND
   \   00013F   8A..         MOV       ?V2,R2
   \   000141   8B..         MOV       ?V3,R3
   \   000143   85..82       MOV       DPL,?V2
   \   000146   85..83       MOV       DPH,?V3
   3260            }
   3261          }
   \                     ??ZDO_LeaveInd_7:
   \   000149   7403         MOV       A,#0x3
   \   00014B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00014E   7F04         MOV       R7,#0x4
   \   000150   02....       LJMP      ?BANKED_LEAVE_XDATA
   3262          
   3263          /*********************************************************************
   3264           * @fn          ZDO_SyncIndicationCB
   3265           *
   3266           * @brief       This function allows the next higher layer of a
   3267           *              coordinator to be notified of a loss of synchronization
   3268           *                          with the parent/child device.
   3269           *
   3270           * @param       type: 0 - child; 1 - parent
   3271           *
   3272           *
   3273           * @return      none
   3274           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3275          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   3276          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
   3277            (void)shortAddr;  // Remove this line if this parameter is used.
   3278          
   3279            if ( ZSTACK_END_DEVICE_BUILD
   3280              || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   3281            {
   3282              if ( type == 1 && retryCnt == 0 )
   \   00000B   7401         MOV       A,#0x1
   \   00000D   65..         XRL       A,?V0
   \   00000F   7019         JNZ       ??ZDO_SyncIndicationCB_0
   \   000011   90....       MOV       DPTR,#retryCnt
   \   000014   E0           MOVX      A,@DPTR
   \   000015   7013         JNZ       ??ZDO_SyncIndicationCB_0
   3283              {
   3284                // We lost contact with our parent.  Clear the neighbor Table.
   3285                nwkNeighborInitTable();
   \   000017                ; Setup parameters for call to function nwkNeighborInitTable
   \   000017   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   3286                
   3287                //If we are Factory new, then report fail on association
   3288                if(!bdb_isDeviceNonFactoryNew())
   \   00001A                ; Setup parameters for call to function bdb_isDeviceNonFactoryNew
   \   00001A   12....       LCALL     `??bdb_isDeviceNonFactoryNew::?relay`; Banked call to: bdb_isDeviceNonFactoryNew
   \   00001D   E9           MOV       A,R1
   \   00001E   7007         JNZ       ??ZDO_SyncIndicationCB_1
   3289                {
   3290                  bdb_nwkAssocAttemt(FALSE);
   \   000020                ; Setup parameters for call to function bdb_nwkAssocAttemt
   \   000020   7900         MOV       R1,#0x0
   \   000022   12....       LCALL     `??bdb_nwkAssocAttemt::?relay`; Banked call to: bdb_nwkAssocAttemt
   \   000025   8003         SJMP      ??ZDO_SyncIndicationCB_0
   3291                }
   3292          #if (ZG_BUILD_ENDDEVICE_TYPE)
   3293                else
   3294                {
   3295                  //We lost our parent
   3296                  bdb_parentLost();
   \                     ??ZDO_SyncIndicationCB_1:
   \   000027                ; Setup parameters for call to function bdb_parentLost
   \   000027   12....       LCALL     `??bdb_parentLost::?relay`; Banked call to: bdb_parentLost
   3297                }
   3298          #endif
   3299              }
   3300            }
   3301          }
   \                     ??ZDO_SyncIndicationCB_0:
   \   00002A   7F01         MOV       R7,#0x1
   \   00002C   02....       LJMP      ?BANKED_LEAVE_XDATA
   3302          
   3303          /*********************************************************************
   3304           * @fn          ZDO_ManytoOneFailureIndicationCB
   3305           *
   3306           * @brief       This function allows the next higher layer of a
   3307           *              concentrator to be notified of a many-to-one route
   3308           *              failure.
   3309           *
   3310           * @param       none
   3311           *
   3312           *
   3313           * @return      none
   3314           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3315          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   3316          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3317            // By default, the concentrator automatically redo many-to-one route
   3318            // discovery to update all many-to-one routes in the network
   3319            // If you want anything processing other than the default,
   3320            // please replace the following code.
   3321          
   3322            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL     `??RTG_MTORouteReq::?relay`; Banked call to: RTG_MTORouteReq
   3323          }
   \   000007   D083         POP       DPH
   \   000009   D082         POP       DPL
   \   00000B   02....       LJMP      ?BRET
   3324          
   3325          /*********************************************************************
   3326           * @fn          ZDO_PollConfirmCB
   3327           *
   3328           * @brief       This function allows the next higher layer to be
   3329           *              notified of a Poll Confirm.
   3330           *
   3331           * @param       none
   3332           *
   3333           * @return      none
   3334           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3335          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   3336          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3337            (void)status;  // Remove this line if this parameter is used.
   3338            return;
   \   000000   02....       LJMP      ?BRET
   3339          }
   3340          
   3341          /*********************************************************************
   3342           * @fn          ZDO_NetworkStatusCB
   3343           *
   3344           * @brief       Network Status Callback function
   3345           *
   3346           * @param       nwkDstAddr - message's destination address- used to determine
   3347           *                           if the message was intended for this device or
   3348           *                           a sleeping end device.
   3349           * @param       statusCode - message's status code (ie. NWKSTAT_NONTREE_LINK_FAILURE)
   3350           * @param       dstAddr - the destination address related to the status code
   3351           *
   3352           * @return      none
   3353           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3354          void ZDO_NetworkStatusCB( uint16 nwkDstAddr, uint8 statusCode, uint16 dstAddr )
   \                     ZDO_NetworkStatusCB:
   3355          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   89..         MOV       ?V2,R1
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   3356            (void)dstAddr;     // Remove this line if this parameter is used.
   3357          
   3358            if ( (nwkDstAddr == NLME_GetShortAddr())
   3359                && (statusCode == NWKSTAT_NONTREE_LINK_FAILURE) )
   \   00000F                ; Setup parameters for call to function NLME_GetShortAddr
   \   00000F   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000012   8A..         MOV       ?V4,R2
   \   000014   8B..         MOV       ?V5,R3
   \   000016   A8..         MOV       R0,?V4
   \   000018   A9..         MOV       R1,?V5
   3360            {
   3361              // Routing error for dstAddr, this is informational and a Route
   3362              // Request should happen automatically.
   3363            }
   3364          }
   \   00001A   7F06         MOV       R7,#0x6
   \   00001C   02....       LJMP      ?BANKED_LEAVE_XDATA
   3365          
   3366          /******************************************************************************
   3367           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   3368           *
   3369           * @brief       Stub routine implemented by NHLE. NHLE should call
   3370           *              <AddrMgrWriteNV> when appropriate.
   3371           *
   3372           * @param       none
   3373           *
   3374           * @return      none
   3375           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3376          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   3377          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3378          #if defined ( NV_RESTORE )
   3379            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV       R2,#0x0
   \   000006   7B01         MOV       R3,#0x1
   \   000008   90....       MOV       DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000010   EA           MOV       A,R2
   \   000011   4B           ORL       A,R3
   \   000012   4C           ORL       A,R4
   \   000013   4D           ORL       A,R5
   \   000014   7003         JNZ       ??AddrMgrWriteNVRequest_0
   3380            {
   3381              // Trigger to save info into NV
   3382              ZDApp_NVUpdate();
   \   000016                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000016   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3383            }
   3384          #endif
   3385          }
   \                     ??AddrMgrWriteNVRequest_0:
   \   000019   D083         POP       DPH
   \   00001B   D082         POP       DPL
   \   00001D   02....       LJMP      ?BRET
   3386          
   3387          /*********************************************************************
   3388           * Call Back Functions from Security  - API
   3389           */
   3390          
   3391           /*********************************************************************
   3392           * @fn          ZDO_UpdateDeviceIndication
   3393           *
   3394           * @brief       This function notifies the "Trust Center" of a
   3395           *              network when a device joins or leaves the network.
   3396           *
   3397           * @param       extAddr - pointer to 64 bit address of new device
   3398           * @param       status  - 0 if a new device joined securely
   3399           *                      - 1 if a new device joined un-securely
   3400           *                      - 2 if a device left the network
   3401           *
   3402           * @return      true if newly joined device should be allowed to
   3403           *                                              remain on network
   3404           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3405          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   3406          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   \   000001   F8           MOV       R0,A
   3407            // can implement a network access policy based on the
   3408            // IEEE address of newly joining devices...
   3409            (void)extAddr;
   3410            (void)status;
   3411          
   3412            return ZSuccess;
   \   000002   7900         MOV       R1,#0x0
   \   000004   02....       LJMP      ?BRET
   3413          }
   3414          
   3415          /*********************************************************************
   3416           * @fn          ZDApp_InMsgCB
   3417           *
   3418           * @brief       This function is called to pass up any message that is
   3419           *              not yet supported.  This allows for the developer to
   3420           *              support features themselves..
   3421           *
   3422           * @return      none
   3423           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3424          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   3425          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   3426            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \   000009   EE           MOV       A,R6
   \   00000A   240C         ADD       A,#0xc
   \   00000C   F582         MOV       DPL,A
   \   00000E   E4           CLR       A
   \   00000F   3F           ADDC      A,R7
   \   000010   F583         MOV       DPH,A
   \   000012   E0           MOVX      A,@DPTR
   \   000013   5400         ANL       A,#0x0
   \   000015   F8           MOV       R0,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   5480         ANL       A,#0x80
   \   00001A   F9           MOV       R1,A
   \   00001B   E8           MOV       A,R0
   \   00001C   49           ORL       A,R1
   \   00001D   706B         JNZ       ??ZDApp_InMsgCB_0
   3427            {
   3428              // Handle the response message
   3429            }
   3430            else
   3431            {
   3432              // Handle the request message by sending a generic "not supported".
   3433              // Device Announce doesn't have a response.
   3434              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   00001F   EE           MOV       A,R6
   \   000020   240B         ADD       A,#0xb
   \   000022   F582         MOV       DPL,A
   \   000024   E4           CLR       A
   \   000025   3F           ADDC      A,R7
   \   000026   F583         MOV       DPH,A
   \   000028   E0           MOVX      A,@DPTR
   \   000029   705F         JNZ       ??ZDApp_InMsgCB_0
   \   00002B   EE           MOV       A,R6
   \   00002C   240C         ADD       A,#0xc
   \   00002E   F582         MOV       DPL,A
   \   000030   E4           CLR       A
   \   000031   3F           ADDC      A,R7
   \   000032   F583         MOV       DPH,A
   \   000034   E0           MOVX      A,@DPTR
   \   000035   6413         XRL       A,#0x13
   \   000037   7004         JNZ       ??ZDApp_InMsgCB_1
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   6400         XRL       A,#0x0
   \                     ??ZDApp_InMsgCB_1:
   \   00003D   604B         JZ        ??ZDApp_InMsgCB_0
   3435              {
   3436                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   3437                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   00003F                ; Setup parameters for call to function ZDP_GenericRsp
   \   00003F   EE           MOV       A,R6
   \   000040   240C         ADD       A,#0xc
   \   000042   F582         MOV       DPL,A
   \   000044   E4           CLR       A
   \   000045   3F           ADDC      A,R7
   \   000046   F583         MOV       DPH,A
   \   000048   E0           MOVX      A,@DPTR
   \   000049   4400         ORL       A,#0x0
   \   00004B   F5..         MOV       ?V0,A
   \   00004D   A3           INC       DPTR
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   4480         ORL       A,#0x80
   \   000051   F5..         MOV       ?V1,A
   \   000053   78..         MOV       R0,#?V0
   \   000055   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000058   E4           CLR       A
   \   000059   F5..         MOV       ?V0,A
   \   00005B   F5..         MOV       ?V1,A
   \   00005D   78..         MOV       R0,#?V0
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000062   EE           MOV       A,R6
   \   000063   240E         ADD       A,#0xe
   \   000065   F582         MOV       DPL,A
   \   000067   E4           CLR       A
   \   000068   3F           ADDC      A,R7
   \   000069   F583         MOV       DPH,A
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   FD           MOV       R5,A
   \   00006D   7C84         MOV       R4,#-0x7c
   \   00006F   EE           MOV       A,R6
   \   000070   2402         ADD       A,#0x2
   \   000072   FA           MOV       R2,A
   \   000073   E4           CLR       A
   \   000074   3F           ADDC      A,R7
   \   000075   FB           MOV       R3,A
   \   000076   EE           MOV       A,R6
   \   000077   240F         ADD       A,#0xf
   \   000079   F582         MOV       DPL,A
   \   00007B   E4           CLR       A
   \   00007C   3F           ADDC      A,R7
   \   00007D   F583         MOV       DPH,A
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   F9           MOV       R1,A
   \   000081   12....       LCALL     `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000084   7404         MOV       A,#0x4
   \   000086   12....       LCALL     ?DEALLOC_XSTACK8
   \   000089   E9           MOV       A,R1
   3438              }
   3439            }
   3440          }
   \                     ??ZDApp_InMsgCB_0:
   \   00008A   7F02         MOV       R7,#0x2
   \   00008C   02....       LJMP      ?BANKED_LEAVE_XDATA
   3441          
   3442          
   3443          /*********************************************************************
   3444           * @fn      ZDApp_ChangeMatchDescRespPermission()
   3445           *
   3446           * @brief   Changes the Match Descriptor Response permission.
   3447           *
   3448           * @param   endpoint - endpoint to allow responses
   3449           * @param   action - true to allow responses, false to not
   3450           *
   3451           * @return  none
   3452           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3453          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   3454          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   3455            // Store the action
   3456            afSetMatch( endpoint, action );
   \   000009                ; Setup parameters for call to function afSetMatch
   \   000009   EE           MOV       A,R6
   \   00000A   FA           MOV       R2,A
   \   00000B   EF           MOV       A,R7
   \   00000C   F9           MOV       R1,A
   \   00000D   12....       LCALL     `??afSetMatch::?relay`; Banked call to: afSetMatch
   \   000010   E9           MOV       A,R1
   3457          }
   \   000011   7F01         MOV       R7,#0x1
   \   000013   02....       LJMP      ?BANKED_LEAVE_XDATA
   3458          
   3459          /*********************************************************************
   3460           * @fn      ZDApp_NetworkInit()
   3461           *
   3462           * @brief   Used to start the network joining process
   3463           *
   3464           * @param   delay - mSec delay to wait before starting
   3465           *
   3466           * @return  none
   3467           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3468          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   3469          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   3470            if ( delay )
   \   000009   EE           MOV       A,R6
   \   00000A   4F           ORL       A,R7
   \   00000B   6022         JZ        ??ZDApp_NetworkInit_0
   3471            {
   3472              // Wait awhile before starting the device
   3473              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   00000D                ; Setup parameters for call to function osal_start_timerEx
   \   00000D   8E..         MOV       ?V0,R6
   \   00000F   8F..         MOV       ?V1,R7
   \   000011   E4           CLR       A
   \   000012   F5..         MOV       ?V2,A
   \   000014   F5..         MOV       ?V3,A
   \   000016   78..         MOV       R0,#?V0
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00001B   7A01         MOV       R2,#0x1
   \   00001D   7B00         MOV       R3,#0x0
   \   00001F   90....       MOV       DPTR,#ZDAppTaskID
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F9           MOV       R1,A
   \   000024   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000027   7404         MOV       A,#0x4
   \   000029   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002C   E9           MOV       A,R1
   \   00002D   800D         SJMP      ??ZDApp_NetworkInit_1
   3474            }
   3475            else
   3476            {
   3477              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_0:
   \   00002F                ; Setup parameters for call to function osal_set_event
   \   00002F   7A01         MOV       R2,#0x1
   \   000031   7B00         MOV       R3,#0x0
   \   000033   90....       MOV       DPTR,#ZDAppTaskID
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F9           MOV       R1,A
   \   000038   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00003B   E9           MOV       A,R1
   3478            }
   3479          }
   \                     ??ZDApp_NetworkInit_1:
   \   00003C   7F04         MOV       R7,#0x4
   \   00003E   02....       LJMP      ?BANKED_LEAVE_XDATA
   3480          
   3481          /*********************************************************************
   3482           * @fn      ZDApp_NwkStateUpdateCB()
   3483           *
   3484           * @brief   This function notifies that this device's network
   3485           *          state info has been changed.
   3486           *
   3487           * @param   none
   3488           *
   3489           * @return  none
   3490           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3491          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   3492          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3493            // Notify to save info into NV
   3494            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV       R2,#0x0
   \   000006   7B01         MOV       R3,#0x1
   \   000008   90....       MOV       DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000010   EA           MOV       A,R2
   \   000011   4B           ORL       A,R3
   \   000012   4C           ORL       A,R4
   \   000013   4D           ORL       A,R5
   \   000014   7003         JNZ       ??ZDApp_NwkStateUpdateCB_0
   3495            {
   3496              // Trigger to save info into NV
   3497              ZDApp_NVUpdate();
   \   000016                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000016   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3498            }
   3499          }
   \                     ??ZDApp_NwkStateUpdateCB_0:
   \   000019   D083         POP       DPH
   \   00001B   D082         POP       DPL
   \   00001D   02....       LJMP      ?BRET
   3500          
   3501          /*********************************************************************
   3502           * @fn      ZDApp_NodeProfileSync()
   3503           *
   3504           * @brief   Sync node with stack profile.
   3505           *
   3506           * @param   stackProfile - stack profile of the network to join
   3507           *
   3508           * @return  none
   3509           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3510          void ZDApp_NodeProfileSync( uint8 stackProfile )
   \                     ZDApp_NodeProfileSync:
   3511          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3512            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000007   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   A2E1         MOV       C,0xE0 /* A   */.1
   \   00000D   5021         JNC       ??ZDApp_NodeProfileSync_0
   3513            {
   3514              if ( stackProfile != zgStackProfile )
   \   00000F   90....       MOV       DPTR,#zgStackProfile
   \   000012   E0           MOVX      A,@DPTR
   \   000013   6E           XRL       A,R6
   \   000014   601A         JZ        ??ZDApp_NodeProfileSync_0
   3515              {
   3516                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000016   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   54F8         ANL       A,#0xf8
   \   00001C   4402         ORL       A,#0x2
   \   00001E   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000021   F0           MOVX      @DPTR,A
   3517                ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   000022   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000025   740C         MOV       A,#0xc
   \   000027   F0           MOVX      @DPTR,A
   3518                NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000028                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000028   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F9           MOV       R1,A
   \   00002D   12....       LCALL     `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
   3519              }
   3520            }
   3521          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   000030   7F01         MOV       R7,#0x1
   \   000032   02....       LJMP      ?BANKED_LEAVE_XDATA
   3522          
   3523          /*********************************************************************
   3524           * @fn      ZDApp_StartJoiningCycle()
   3525           *
   3526           * @brief   Starts the joining cycle of a device.  This will only
   3527           *          continue an already started (or stopped) joining cycle.
   3528           *
   3529           * @param   none
   3530           *
   3531           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3532           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3533          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   3534          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3535            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   6008         JZ        ??ZDApp_StartJoiningCycle_0
   \   00000C   90....       MOV       DPTR,#devState
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   6402         XRL       A,#0x2
   \   000012   7011         JNZ       ??ZDApp_StartJoiningCycle_1
   3536            {
   3537              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000014   90....       MOV       DPTR,#continueJoining
   \   000017   7401         MOV       A,#0x1
   \   000019   F0           MOVX      @DPTR,A
   3538              ZDApp_NetworkInit( 0 );
   \   00001A                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00001A   7A00         MOV       R2,#0x0
   \   00001C   7B00         MOV       R3,#0x0
   \   00001E   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   3539          
   3540              return ( TRUE );
   \   000021   7901         MOV       R1,#0x1
   \   000023   8002         SJMP      ??ZDApp_StartJoiningCycle_2
   3541            }
   3542            else
   3543              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000025   7900         MOV       R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000027   D083         POP       DPH
   \   000029   D082         POP       DPL
   \   00002B   02....       LJMP      ?BRET
   3544          }
   3545          
   3546          /*********************************************************************
   3547           * @fn      ZDApp_StopJoiningCycle()
   3548           *
   3549           * @brief   Stops the joining or rejoining process of a device.
   3550           *
   3551           * @param   none
   3552           *
   3553           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3554           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3555          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   3556          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3557            if ( devState == DEV_INIT || devState == DEV_NWK_DISC || devState == DEV_NWK_BACKOFF )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   6010         JZ        ??ZDApp_StopJoiningCycle_0
   \   00000C   90....       MOV       DPTR,#devState
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   6402         XRL       A,#0x2
   \   000012   6008         JZ        ??ZDApp_StopJoiningCycle_0
   \   000014   90....       MOV       DPTR,#devState
   \   000017   E0           MOVX      A,@DPTR
   \   000018   640C         XRL       A,#0xc
   \   00001A   700A         JNZ       ??ZDApp_StopJoiningCycle_1
   3558            {
   3559              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   00001C   90....       MOV       DPTR,#continueJoining
   \   00001F   7400         MOV       A,#0x0
   \   000021   F0           MOVX      @DPTR,A
   3560              return ( TRUE );
   \   000022   7901         MOV       R1,#0x1
   \   000024   8002         SJMP      ??ZDApp_StopJoiningCycle_2
   3561            }
   3562            else
   3563              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   000026   7900         MOV       R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   000028   D083         POP       DPH
   \   00002A   D082         POP       DPL
   \   00002C   02....       LJMP      ?BRET
   3564          }
   3565          
   3566          /*********************************************************************
   3567           * @fn      ZDApp_AnnounceNewAddress()
   3568           *
   3569           * @brief   Send Device Announce and hold all transmissions for
   3570           *          new address timeout.
   3571           *
   3572           * @param   none
   3573           *
   3574           * @return  none
   3575           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3576          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   3577          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3578          #if defined ( ZIGBEEPRO )
   3579            // Turn off data request hold
   3580            APSME_HoldDataRequests( 0 );
   \   00000A                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00000A   7A00         MOV       R2,#0x0
   \   00000C   7B00         MOV       R3,#0x0
   \   00000E   12....       LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3581          #endif
   3582          
   3583            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   3584                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   000011                ; Setup parameters for call to function NLME_GetExtAddr
   \   000011   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000014   8A..         MOV       ?V0,R2
   \   000016   8B..         MOV       ?V1,R3
   \   000018   AE..         MOV       R6,?V0
   \   00001A   AF..         MOV       R7,?V1
   \   00001C                ; Setup parameters for call to function NLME_GetShortAddr
   \   00001C   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00001F   8A..         MOV       ?V0,R2
   \   000021   8B..         MOV       ?V1,R3
   \   000023   AA..         MOV       R2,?V0
   \   000025   AB..         MOV       R3,?V1
   \   000027                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000027   75..00       MOV       ?V0,#0x0
   \   00002A   78..         MOV       R0,#?V0
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00002F   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000032   E0           MOVX      A,@DPTR
   \   000033   F9           MOV       R1,A
   \   000034   EE           MOV       A,R6
   \   000035   FC           MOV       R4,A
   \   000036   EF           MOV       A,R7
   \   000037   FD           MOV       R5,A
   \   000038   12....       LCALL     `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   00003B   7401         MOV       A,#0x1
   \   00003D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000040   E9           MOV       A,R1
   3585          
   3586          #if defined ( ZIGBEEPRO )
   3587            // Setup the timeout
   3588            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   \   000041                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000041   7A00         MOV       R2,#0x0
   \   000043   7B00         MOV       R3,#0x0
   \   000045   12....       LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3589          #endif
   3590          
   3591            if ( ZSTACK_END_DEVICE_BUILD )
   3592            {
   3593              if ( zgChildAgingEnable == TRUE )
   \   000048   90....       MOV       DPTR,#zgChildAgingEnable
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   6401         XRL       A,#0x1
   \   00004E   7030         JNZ       ??ZDApp_AnnounceNewAddress_0
   3594              {
   3595                uint8 coordExtAddr[Z_EXTADDR_LEN];
   3596          
   3597                // Send the message to parent
   3598                NLME_GetCoordExtAddr( coordExtAddr );
   \   000050                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   000050   AA..         MOV       R2,?XSP + 0
   \   000052   AB..         MOV       R3,?XSP + 1
   \   000054   12....       LCALL     `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
   3599                NLME_SendEndDevTimeoutReq( NLME_GetCoordShortAddr(), coordExtAddr,
   3600                                           zgEndDeviceTimeoutValue,
   3601                                           zgEndDeviceConfiguration );
   \   000057                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000057   12....       LCALL     `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   00005A   8A..         MOV       ?V0,R2
   \   00005C   8B..         MOV       ?V1,R3
   \   00005E   AA..         MOV       R2,?V0
   \   000060   AB..         MOV       R3,?V1
   \   000062                ; Setup parameters for call to function NLME_SendEndDevTimeoutReq
   \   000062   90....       MOV       DPTR,#zgEndDeviceConfiguration
   \   000065   E0           MOVX      A,@DPTR
   \   000066   F5..         MOV       ?V0,A
   \   000068   78..         MOV       R0,#?V0
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006D   90....       MOV       DPTR,#zgEndDeviceTimeoutValue
   \   000070   E0           MOVX      A,@DPTR
   \   000071   F9           MOV       R1,A
   \   000072   7401         MOV       A,#0x1
   \   000074   12....       LCALL     ?XSTACK_DISP102_8
   \   000077   12....       LCALL     `??NLME_SendEndDevTimeoutReq::?relay`; Banked call to: NLME_SendEndDevTimeoutReq
   \   00007A   7401         MOV       A,#0x1
   \   00007C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007F   E9           MOV       A,R1
   3602              }
   3603            }
   3604          }
   \                     ??ZDApp_AnnounceNewAddress_0:
   \   000080   7408         MOV       A,#0x8
   \   000082   12....       LCALL     ?DEALLOC_XSTACK8
   \   000085   7F02         MOV       R7,#0x2
   \   000087   02....       LJMP      ?BANKED_LEAVE_XDATA
   3605          
   3606          /*********************************************************************
   3607           * @fn      ZDApp_SendParentAnnce()
   3608           *
   3609           * @brief   Send Parent Announce message.
   3610           *
   3611           * @param   none
   3612           *
   3613           * @return  none
   3614           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3615          void ZDApp_SendParentAnnce( void )
   \                     ZDApp_SendParentAnnce:
   3616          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3617            uint8 count;
   3618            uint8 *childInfo;
   3619          
   3620            childInfo = AssocMakeListOfRfdChild( &count );
   \   00000A                ; Setup parameters for call to function AssocMakeListOfRfdChild
   \   00000A   AA..         MOV       R2,?XSP + 0
   \   00000C   AB..         MOV       R3,?XSP + 1
   \   00000E   12....       LCALL     `??AssocMakeListOfRfdChild::?relay`; Banked call to: AssocMakeListOfRfdChild
   \   000011   8A..         MOV       ?V2,R2
   \   000013   8B..         MOV       ?V3,R3
   \   000015   85....       MOV       ?V0,?V2
   \   000018   85....       MOV       ?V1,?V3
   3621          
   3622            if ( childInfo != NULL )
   \   00001B   E5..         MOV       A,?V0
   \   00001D   45..         ORL       A,?V1
   \   00001F   6055         JZ        ??ZDApp_SendParentAnnce_0
   3623            {
   3624              if ( count > 0 )
   \   000021   85..82       MOV       DPL,?XSP + 0
   \   000024   85..83       MOV       DPH,?XSP + 1
   \   000027   E0           MOVX      A,@DPTR
   \   000028   6045         JZ        ??ZDApp_SendParentAnnce_1
   3625              {
   3626                zAddrType_t dstAddr;
   3627          
   3628                dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00002A   7409         MOV       A,#0x9
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   740F         MOV       A,#0xf
   \   000031   F0           MOVX      @DPTR,A
   3629                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
   \   000032   7401         MOV       A,#0x1
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   74FC         MOV       A,#-0x4
   \   000039   F0           MOVX      @DPTR,A
   \   00003A   A3           INC       DPTR
   \   00003B   74FF         MOV       A,#-0x1
   \   00003D   F0           MOVX      @DPTR,A
   3630          
   3631                ZDP_ParentAnnceReq( dstAddr, count, childInfo, 0 );
   \   00003E                ; Setup parameters for call to function ZDP_ParentAnnce
   \   00003E   75..00       MOV       ?V2,#0x0
   \   000041   78..         MOV       R0,#?V2
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000046   75..1F       MOV       ?V2,#0x1f
   \   000049   75..00       MOV       ?V3,#0x0
   \   00004C   78..         MOV       R0,#?V2
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000051   78..         MOV       R0,#?V0
   \   000053   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000056   7405         MOV       A,#0x5
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F9           MOV       R1,A
   \   00005D   7406         MOV       A,#0x6
   \   00005F   12....       LCALL     ?XSTACK_DISP102_8
   \   000062   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000064   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000066   12....       LCALL     `??ZDP_ParentAnnce::?relay`; Banked call to: ZDP_ParentAnnce
   \   000069   7405         MOV       A,#0x5
   \   00006B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006E   E9           MOV       A,R1
   3632              }
   3633          
   3634              // Free the list after the message has been sent
   3635              osal_mem_free( childInfo );
   \                     ??ZDApp_SendParentAnnce_1:
   \   00006F                ; Setup parameters for call to function osal_mem_free
   \   00006F   AA..         MOV       R2,?V0
   \   000071   AB..         MOV       R3,?V1
   \   000073   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3636            }
   3637          }
   \                     ??ZDApp_SendParentAnnce_0:
   \   000076   740A         MOV       A,#0xa
   \   000078   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007B   7F04         MOV       R7,#0x4
   \   00007D   02....       LJMP      ?BANKED_LEAVE_XDATA
   3638          
   3639          /*********************************************************************
   3640           * @fn          ZDApp_NVUpdate
   3641           *
   3642           * @brief       Set the NV Update Timer.
   3643           *
   3644           * @param       none
   3645           *
   3646           * @return      none
   3647           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3648          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   3649          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3650          #if defined ( NV_RESTORE )
   3651            if ( (ZSTACK_END_DEVICE_BUILD)
   3652                 || (ZSTACK_ROUTER_BUILD
   3653                     && (_NIB.CapabilityFlags & CAPINFO_DEVICETYPE_FFD) == 0) )
   3654            {
   3655              // No need to wait, set the event to save the state
   3656              osal_set_event(ZDAppTaskID, ZDO_NWK_UPDATE_NV);
   \   000004                ; Setup parameters for call to function osal_set_event
   \   000004   7A00         MOV       R2,#0x0
   \   000006   7B01         MOV       R3,#0x1
   \   000008   90....       MOV       DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000010   E9           MOV       A,R1
   3657            }
   3658            else
   3659            {
   3660              // To allow for more changes to the network state before saving
   3661              osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   3662            }
   3663          #endif
   3664          }
   \   000011   D083         POP       DPH
   \   000013   D082         POP       DPL
   \   000015   02....       LJMP      ?BRET
   3665          
   3666          /*********************************************************************
   3667           * @fn      ZDApp_CoordStartPANIDConflictCB()
   3668           *
   3669           * @brief   Returns a PAN ID for the network layer to use during
   3670           *          a coordinator start and there is another network with
   3671           *          the intended PANID.
   3672           *
   3673           * @param   panid - the intended PAN ID
   3674           *
   3675           * @return  PANID to try
   3676           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3677          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   3678          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3679            return ( panid + 1 );
   \   000000   EA           MOV       A,R2
   \   000001   2401         ADD       A,#0x1
   \   000003   FA           MOV       R2,A
   \   000004   5001         JNC       ??ZDApp_CoordStartPANIDConflictCB_0
   \   000006   0B           INC       R3
   \                     ??ZDApp_CoordStartPANIDConflictCB_0:
   \   000007   02....       LJMP      ?BRET
   3680          }
   3681          
   3682          /*********************************************************************
   3683           * @fn          ZDO_SrcRtgIndCB
   3684           *
   3685           * @brief       This function notifies the ZDO available src route record received.
   3686           *
   3687           * @param       srcAddr - source address of the source route
   3688           * @param       relayCnt - number of devices in the relay list
   3689           * @param       relayList - relay list of the source route
   3690           *
   3691           * @return      none
   3692           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3693          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   3694          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   89..         MOV       ?V2,R1
   \   000010   EC           MOV       A,R4
   \   000011   FE           MOV       R6,A
   \   000012   ED           MOV       A,R5
   \   000013   FF           MOV       R7,A
   3695            zdoSrcRtg_t srcRtg;
   3696          
   3697            srcRtg.srcAddr = srcAddr;
   \   000014   85..82       MOV       DPL,?XSP + 0
   \   000017   85..83       MOV       DPH,?XSP + 1
   \   00001A   E5..         MOV       A,?V0
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   A3           INC       DPTR
   \   00001E   E5..         MOV       A,?V1
   \   000020   F0           MOVX      @DPTR,A
   3698            srcRtg.relayCnt = relayCnt;
   \   000021   E5..         MOV       A,?V2
   \   000023   C0E0         PUSH      A
   \   000025   7402         MOV       A,#0x2
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   D0E0         POP       A
   \   00002C   F0           MOVX      @DPTR,A
   3699            srcRtg.pRelayList = pRelayList;
   \   00002D   7403         MOV       A,#0x3
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   EE           MOV       A,R6
   \   000033   F0           MOVX      @DPTR,A
   \   000034   A3           INC       DPTR
   \   000035   EF           MOV       A,R7
   \   000036   F0           MOVX      @DPTR,A
   3700          
   3701            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   000037   90....       MOV       DPTR,#zdoCBFunc
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F8           MOV       R0,A
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   F9           MOV       R1,A
   \   00003F   E8           MOV       A,R0
   \   000040   49           ORL       A,R1
   \   000041   6012         JZ        ??ZDO_SrcRtgIndCB_0
   3702            {
   3703              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000043                ; Setup parameters for indirect call
   \   000043   AA..         MOV       R2,?XSP + 0
   \   000045   AB..         MOV       R3,?XSP + 1
   \   000047   90....       MOV       DPTR,#zdoCBFunc
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F8           MOV       R0,A
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   F583         MOV       DPH,A
   \   000050   8882         MOV       DPL,R0
   \   000052   12....       LCALL     ?CALL_IND
   3704            }
   3705          }
   \                     ??ZDO_SrcRtgIndCB_0:
   \   000055   7405         MOV       A,#0x5
   \   000057   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005A   7F03         MOV       R7,#0x3
   \   00005C   02....       LJMP      ?BANKED_LEAVE_XDATA
   3706          
   3707          /*********************************************************************
   3708           * @fn          ZDApp_InitZdoCBFunc
   3709           *
   3710           * @brief       Call this function to initialize zdoCBFunc[]
   3711           *
   3712           * @param       none
   3713           *
   3714           * @return      none
   3715           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3716          void ZDApp_InitZdoCBFunc( void )
   \                     ZDApp_InitZdoCBFunc:
   3717          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3718            uint8 i;
   3719          
   3720            for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
   \   000004   7A00         MOV       R2,#0x0
   \                     ??ZDApp_InitZdoCBFunc_0:
   \   000006   EA           MOV       A,R2
   \   000007   C3           CLR       C
   \   000008   9409         SUBB      A,#0x9
   \   00000A   502D         JNC       ??ZDApp_InitZdoCBFunc_1
   3721            {
   3722              zdoCBFunc[i] = NULL;
   \   00000C   EA           MOV       A,R2
   \   00000D   F8           MOV       R0,A
   \   00000E   7900         MOV       R1,#0x0
   \   000010   E8           MOV       A,R0
   \   000011   75F002       MOV       B,#0x2
   \   000014   A4           MUL       AB
   \   000015   C8           XCH       A,R0
   \   000016   ABF0         MOV       R3,B
   \   000018   75F000       MOV       B,#0x0
   \   00001B   A4           MUL       AB
   \   00001C   2B           ADD       A,R3
   \   00001D   FB           MOV       R3,A
   \   00001E   75F002       MOV       B,#0x2
   \   000021   E9           MOV       A,R1
   \   000022   A4           MUL       AB
   \   000023   2B           ADD       A,R3
   \   000024   F9           MOV       R1,A
   \   000025   74..         MOV       A,#zdoCBFunc & 0xff
   \   000027   28           ADD       A,R0
   \   000028   F582         MOV       DPL,A
   \   00002A   74..         MOV       A,#(zdoCBFunc >> 8) & 0xff
   \   00002C   39           ADDC      A,R1
   \   00002D   F583         MOV       DPH,A
   \   00002F   7400         MOV       A,#0x0
   \   000031   F0           MOVX      @DPTR,A
   \   000032   A3           INC       DPTR
   \   000033   7400         MOV       A,#0x0
   \   000035   F0           MOVX      @DPTR,A
   3723            }
   \   000036   0A           INC       R2
   \   000037   80CD         SJMP      ??ZDApp_InitZdoCBFunc_0
   3724          }
   \                     ??ZDApp_InitZdoCBFunc_1:
   \   000039   D083         POP       DPH
   \   00003B   D082         POP       DPL
   \   00003D   02....       LJMP      ?BRET
   3725          
   3726          /*********************************************************************
   3727           * @fn          ZDO_RegisterForZdoCB
   3728           *
   3729           * @brief       Call this function to register the higher layer (for
   3730           *              example, the Application layer or MT layer) with ZDO
   3731           *              callbacks to get notified of some ZDO indication like
   3732           *              existence of a concentrator or receipt of a source
   3733           *              route record.
   3734           *
   3735           * @param       indID - ZDO Indication ID
   3736           * @param       pFn   - Callback function pointer
   3737           *
   3738           * @return      ZSuccess - successful, ZInvalidParameter if not
   3739           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3740          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   3741          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   FD           MOV       R5,A
   3742            // Check the range of the indication ID
   3743            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   ED           MOV       A,R5
   \   000007   C3           CLR       C
   \   000008   9409         SUBB      A,#0x9
   \   00000A   502C         JNC       ??ZDO_RegisterForZdoCB_0
   3744            {
   3745              zdoCBFunc[indID] = pFn;
   \   00000C   ED           MOV       A,R5
   \   00000D   F8           MOV       R0,A
   \   00000E   7900         MOV       R1,#0x0
   \   000010   E8           MOV       A,R0
   \   000011   75F002       MOV       B,#0x2
   \   000014   A4           MUL       AB
   \   000015   C8           XCH       A,R0
   \   000016   ACF0         MOV       R4,B
   \   000018   75F000       MOV       B,#0x0
   \   00001B   A4           MUL       AB
   \   00001C   2C           ADD       A,R4
   \   00001D   FC           MOV       R4,A
   \   00001E   75F002       MOV       B,#0x2
   \   000021   E9           MOV       A,R1
   \   000022   A4           MUL       AB
   \   000023   2C           ADD       A,R4
   \   000024   F9           MOV       R1,A
   \   000025   74..         MOV       A,#zdoCBFunc & 0xff
   \   000027   28           ADD       A,R0
   \   000028   F582         MOV       DPL,A
   \   00002A   74..         MOV       A,#(zdoCBFunc >> 8) & 0xff
   \   00002C   39           ADDC      A,R1
   \   00002D   F583         MOV       DPH,A
   \   00002F   EA           MOV       A,R2
   \   000030   F0           MOVX      @DPTR,A
   \   000031   A3           INC       DPTR
   \   000032   EB           MOV       A,R3
   \   000033   F0           MOVX      @DPTR,A
   3746              return ZSuccess;
   \   000034   7900         MOV       R1,#0x0
   \   000036   8002         SJMP      ??ZDO_RegisterForZdoCB_1
   3747            }
   3748          
   3749            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000038   7902         MOV       R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   00003A   D083         POP       DPH
   \   00003C   D082         POP       DPL
   \   00003E   02....       LJMP      ?BRET
   3750          }
   3751          
   3752          /*********************************************************************
   3753           * @fn          ZDO_DeregisterForZdoCB
   3754           *
   3755           * @brief       Call this function to de-register the higher layer (for
   3756           *              example, the Application layer or MT layer) with ZDO
   3757           *              callbacks to get notified of some ZDO indication like
   3758           *              existence of a concentrator or receipt of a source
   3759           *              route record.
   3760           *
   3761           * @param       indID - ZDO Indication ID
   3762           *
   3763           * @return      ZSuccess - successful, ZInvalidParameter if not
   3764           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3765          ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
   \                     ZDO_DeregisterForZdoCB:
   3766          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   FB           MOV       R3,A
   3767            // Check the range of the indication ID
   3768            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   EB           MOV       A,R3
   \   000007   C3           CLR       C
   \   000008   9409         SUBB      A,#0x9
   \   00000A   502E         JNC       ??ZDO_DeregisterForZdoCB_0
   3769            {
   3770              zdoCBFunc[indID] = NULL;
   \   00000C   EB           MOV       A,R3
   \   00000D   F8           MOV       R0,A
   \   00000E   7900         MOV       R1,#0x0
   \   000010   E8           MOV       A,R0
   \   000011   75F002       MOV       B,#0x2
   \   000014   A4           MUL       AB
   \   000015   C8           XCH       A,R0
   \   000016   AAF0         MOV       R2,B
   \   000018   75F000       MOV       B,#0x0
   \   00001B   A4           MUL       AB
   \   00001C   2A           ADD       A,R2
   \   00001D   FA           MOV       R2,A
   \   00001E   75F002       MOV       B,#0x2
   \   000021   E9           MOV       A,R1
   \   000022   A4           MUL       AB
   \   000023   2A           ADD       A,R2
   \   000024   F9           MOV       R1,A
   \   000025   74..         MOV       A,#zdoCBFunc & 0xff
   \   000027   28           ADD       A,R0
   \   000028   F582         MOV       DPL,A
   \   00002A   74..         MOV       A,#(zdoCBFunc >> 8) & 0xff
   \   00002C   39           ADDC      A,R1
   \   00002D   F583         MOV       DPH,A
   \   00002F   7400         MOV       A,#0x0
   \   000031   F0           MOVX      @DPTR,A
   \   000032   A3           INC       DPTR
   \   000033   7400         MOV       A,#0x0
   \   000035   F0           MOVX      @DPTR,A
   3771              return ZSuccess;
   \   000036   7900         MOV       R1,#0x0
   \   000038   8002         SJMP      ??ZDO_DeregisterForZdoCB_1
   3772            }
   3773          
   3774            return ZInvalidParameter;
   \                     ??ZDO_DeregisterForZdoCB_0:
   \   00003A   7902         MOV       R1,#0x2
   \                     ??ZDO_DeregisterForZdoCB_1:
   \   00003C   D083         POP       DPH
   \   00003E   D082         POP       DPL
   \   000040   02....       LJMP      ?BRET
   3775          }
   3776          
   3777          #if defined ( ZDP_BIND_VALIDATION )
   3778          #if defined ( REFLECTOR )
   3779          /*********************************************************************
   3780           * @fn          ZDApp_SetPendingBindDefault
   3781           *
   3782           * @brief       This function initializes a specific entry of pending
   3783           *              Bind Request.
   3784           *
   3785           * @param       pendBindReq - pointer to the entry in the table
   3786           *
   3787           * @return      none
   3788           */
   3789          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq )
   3790          {
   3791            // Set it to an initial value
   3792            osal_memset( pendBindReq, 0xFF, sizeof( ZDO_PendingBindReq_t ) );
   3793          
   3794            // We are checking for age 0 for aged-out records
   3795            pendBindReq->age = 0;
   3796          }
   3797          
   3798          /*********************************************************************
   3799           * @fn          ZDApp_InitPendingBind
   3800           *
   3801           * @brief       This function initializes the buffer that holds
   3802           *              pending Bind Request messages if no valid NWK address
   3803           *              exists in Address Manager and a Network Address Req
   3804           *              has been sent out.
   3805           *
   3806           * @param       none
   3807           *
   3808           * @return      none
   3809           */
   3810          void ZDApp_InitPendingBind( void )
   3811          {
   3812            if ( ZDAppPendingBindReq == NULL )
   3813            {
   3814              if ( ( ZDAppPendingBindReq = osal_mem_alloc( sizeof(ZDO_PendingBindReq_t) * MAX_PENDING_BIND_REQ ) ) != NULL )
   3815              {
   3816                uint8 i;
   3817          
   3818                for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   3819                {
   3820                  // Set to default values
   3821                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   3822                }
   3823              }
   3824            }
   3825          }
   3826          
   3827          /*********************************************************************
   3828           * @fn          ZDApp_GetEmptyPendingBindReq
   3829           *
   3830           * @brief       This function looks for an empty entry.
   3831           *
   3832           * @param       none
   3833           *
   3834           * @return      Pointer to entry
   3835           */
   3836          ZDO_PendingBindReq_t *ZDApp_GetEmptyPendingBindReq( void )
   3837          {
   3838            uint8 i;
   3839          
   3840            if ( ZDAppPendingBindReq != NULL )
   3841            {
   3842              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   3843              {
   3844                if ( ZDAppPendingBindReq[i].age == 0 )
   3845                {
   3846                  return ( &ZDAppPendingBindReq[i] );
   3847                }
   3848              }
   3849            }
   3850          
   3851            // No empty entry was found
   3852            return NULL;
   3853          }
   3854          
   3855          /*********************************************************************
   3856           * @fn          ZDApp_ProcessPendingBindReq
   3857           *
   3858           * @brief       Process pending entry based on EXT address.
   3859           *
   3860           * @param       extAddr - of device to look up
   3861           *
   3862           * @return      none
   3863           */
   3864          void ZDApp_ProcessPendingBindReq( uint8 *extAddr )
   3865          {
   3866            uint8 i;
   3867          
   3868            // Loop through all the pending entries for that Ext Address
   3869            // to create Bind Entries and send Bind Rsp
   3870            if ( ZDAppPendingBindReq != NULL )
   3871            {
   3872              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   3873              {
   3874                if ( osal_memcmp( ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr,
   3875                                  extAddr, Z_EXTADDR_LEN ) == TRUE )
   3876                {
   3877                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   3878          
   3879                  // Add Bind entry
   3880                  if ( APSME_BindRequest( ZDAppPendingBindReq[i].bindReq.srcEndpoint,
   3881                                          ZDAppPendingBindReq[i].bindReq.clusterID,
   3882                                          &(ZDAppPendingBindReq[i].bindReq.dstAddress),
   3883                                          ZDAppPendingBindReq[i].bindReq.dstEndpoint ) == ZSuccess )
   3884                  {
   3885                    // valid entry
   3886                    bindStat = ZDP_SUCCESS;
   3887          
   3888                    // Notify to save info into NV
   3889                    ZDApp_NVUpdate();
   3890                  }
   3891          
   3892                  // Send back a response message
   3893                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq, &(ZDAppPendingBindReq[i].srcAddr),
   3894                               bindStat, ZDAppPendingBindReq[i].securityUse );
   3895          
   3896                  // Set the pending request entry to default values
   3897                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   3898                }
   3899              }
   3900            }
   3901          }
   3902          
   3903          /*********************************************************************
   3904           * @fn          ZDApp_AgeOutPendingBindEntry
   3905           *
   3906           * @brief       Age out pending Bind Req entries.
   3907           *
   3908           * @param       none
   3909           *
   3910           * @return      none
   3911           */
   3912          void ZDApp_AgeOutPendingBindEntry( void )
   3913          {
   3914            uint8 i;
   3915            bool entryFound = FALSE;
   3916          
   3917            if ( ZDAppPendingBindReq != NULL )
   3918            {
   3919              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   3920              {
   3921                if ( ZDAppPendingBindReq[i].age > 1 )
   3922                {
   3923                  ZDAppPendingBindReq[i].age--;
   3924          
   3925                  entryFound = TRUE;
   3926                }
   3927                else if ( ZDAppPendingBindReq[i].age == 1 )
   3928                {
   3929                  // The record has aged out and has valid data
   3930                  AddrMgrEntry_t entry;
   3931                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   3932          
   3933                  entry.user = ADDRMGR_USER_BINDING;
   3934          
   3935                  // Remove the entry in address manager so we do not keep entries
   3936                  // with invalid addresses
   3937                  AddrMgrExtAddrSet( entry.extAddr, ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr );
   3938          
   3939                  if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   3940                  {
   3941                    if ( entry.nwkAddr == INVALID_NODE_ADDR )
   3942                    {
   3943                      // Release the entry that contains an invalid NWK address
   3944                      AddrMgrEntryRelease( &entry );
   3945                    }
   3946                  }
   3947          
   3948                  // Send the Bind Response with failure status
   3949                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq,
   3950                               &(ZDAppPendingBindReq[i].srcAddr),
   3951                               bindStat, ZDAppPendingBindReq[i].securityUse );
   3952          
   3953                  // Clear the record and set to default values
   3954                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   3955                }
   3956              }
   3957            }
   3958          
   3959            if ( entryFound == FALSE )
   3960            {
   3961              osal_stop_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT );
   3962            }
   3963            else
   3964            {
   3965              osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   3966                                  AGE_OUT_PEND_BIND_REQ_DELAY );
   3967            }
   3968          }
   3969          #endif
   3970          #endif
   3971          
   3972          /*********************************************************************
   3973           * @fn          ZDO_ChangeState
   3974           *
   3975           * @brief       Chance the device state
   3976           *
   3977           * @param       state - new state
   3978           *
   3979           * @return      none
   3980           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3981          void ZDApp_ChangeState( devStates_t state )
   \                     ZDApp_ChangeState:
   3982          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3983            if ( devState != state )
   \   000007   90....       MOV       DPTR,#devState
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   6E           XRL       A,R6
   \   00000C   6012         JZ        ??ZDApp_ChangeState_0
   3984            {
   3985              devState = state;
   \   00000E   EE           MOV       A,R6
   \   00000F   90....       MOV       DPTR,#devState
   \   000012   F0           MOVX      @DPTR,A
   3986              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000013                ; Setup parameters for call to function osal_set_event
   \   000013   7A10         MOV       R2,#0x10
   \   000015   7B00         MOV       R3,#0x0
   \   000017   90....       MOV       DPTR,#ZDAppTaskID
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F9           MOV       R1,A
   \   00001C   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00001F   E9           MOV       A,R1
   3987            }
   3988          }
   \                     ??ZDApp_ChangeState_0:
   \   000020   7F01         MOV       R7,#0x1
   \   000022   02....       LJMP      ?BANKED_LEAVE_XDATA
   3989          
   3990          /*********************************************************************
   3991           * @fn      ZDApp_SetRejoinScanDuration()
   3992           *
   3993           * @brief   Sets scan duration for rejoin for an end device
   3994           *
   3995           * @param   rejoinScanDuration - milliseconds
   3996           *
   3997           * @return  none
   3998           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3999          void ZDApp_SetRejoinScanDuration( uint32 rejoinScanDuration )
   \                     ZDApp_SetRejoinScanDuration:
   4000          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   4001            zgDefaultRejoinScan = rejoinScanDuration;
   \   00000D   90....       MOV       DPTR,#zgDefaultRejoinScan
   \   000010   78..         MOV       R0,#?V0
   \   000012   12....       LCALL     ?L_MOV_TO_X
   4002          }
   \   000015   7F04         MOV       R7,#0x4
   \   000017   02....       LJMP      ?BANKED_LEAVE_XDATA
   4003          
   4004          /*********************************************************************
   4005           * @fn      ZDApp_SetRejoinBackoffDuration()
   4006           *
   4007           * @brief   Sets rejoin backoff duration for rejoin for an end device
   4008           *
   4009           * @param   rejoinBackoffDuration - milliseconds
   4010           *
   4011           * @return  none
   4012           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4013          void ZDApp_SetRejoinBackoffDuration( uint32 rejoinBackoffDuration )
   \                     ZDApp_SetRejoinBackoffDuration:
   4014          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   4015            zgDefaultRejoinBackoff = rejoinBackoffDuration;
   \   00000D   90....       MOV       DPTR,#zgDefaultRejoinBackoff
   \   000010   78..         MOV       R0,#?V0
   \   000012   12....       LCALL     ?L_MOV_TO_X
   4016          }
   \   000015   7F04         MOV       R7,#0x4
   \   000017   02....       LJMP      ?BANKED_LEAVE_XDATA
   4017          
   4018          /*********************************************************************
   4019           * @fn          ZDApp_SetParentAnnceTimer
   4020           *
   4021           * @brief       This function sets up the link status timer.
   4022           *
   4023           * @param       none
   4024           *
   4025           * @return      none
   4026           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4027          void ZDApp_SetParentAnnceTimer( void )
   \                     ZDApp_SetParentAnnceTimer:
   4028          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   4029            // Parent Announce shall be sent no earlier than 10 seconds
   4030            uint32 timeout = 10000;
   \   000005   75..10       MOV       ?V4,#0x10
   \   000008   75..27       MOV       ?V5,#0x27
   \   00000B   75..00       MOV       ?V6,#0x0
   \   00000E   75..00       MOV       ?V7,#0x0
   4031          
   4032            // Add with jitter of up to 10 seconds
   4033            timeout += (osal_rand() & 0x2710);
   \   000011                ; Setup parameters for call to function osal_rand
   \   000011   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000014   8A..         MOV       ?V0,R2
   \   000016   8B..         MOV       ?V1,R3
   \   000018   E5..         MOV       A,?V0
   \   00001A   5410         ANL       A,#0x10
   \   00001C   F5..         MOV       ?V0,A
   \   00001E   E5..         MOV       A,?V1
   \   000020   5427         ANL       A,#0x27
   \   000022   F5..         MOV       ?V1,A
   \   000024   E4           CLR       A
   \   000025   F5..         MOV       ?V2,A
   \   000027   F5..         MOV       ?V3,A
   \   000029   78..         MOV       R0,#?V4
   \   00002B   79..         MOV       R1,#?V0
   \   00002D   12....       LCALL     ?L_ADD
   4034          
   4035            // Set timer to send the message
   4036            osal_start_timerEx( ZDAppTaskID, ZDO_PARENT_ANNCE_EVT, timeout );
   \   000030                ; Setup parameters for call to function osal_start_timerEx
   \   000030   78..         MOV       R0,#?V4
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000035   7A00         MOV       R2,#0x0
   \   000037   7B40         MOV       R3,#0x40
   \   000039   90....       MOV       DPTR,#ZDAppTaskID
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   F9           MOV       R1,A
   \   00003E   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000041   7404         MOV       A,#0x4
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
   \   000046   E9           MOV       A,R1
   4037          }
   \   000047   7F08         MOV       R7,#0x8
   \   000049   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for prevDevState>`:
   \   000000   04           DB 4

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   ....         DW ZDAppTaskID
   \   000004   0000         DW 0H
   \   000006   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4e2:
   \   000000   E2040000     DD 1250

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_258:
   \   000000   58020000     DD 600
   4038          
   4039          /*********************************************************************
   4040          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     24   AddrMgrWriteNVRequest
        2      0   -> ZDApp_NVUpdate
        2      0   -> osal_get_timeoutEx
      2      0   ZDAppCheckForHoldKey
        2      0   -> HalKeyRead
      2     26   ZDAppDetermineDeviceType
        2      0   -> nwk_ExtPANIDValid
      0     33   ZDApp_AnnounceNewAddress
        0     18   -> APSME_HoldDataRequests
        0     18   -> NLME_GetCoordExtAddr
        0     18   -> NLME_GetCoordShortAddr
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_GetShortAddr
        0     19   -> NLME_SendEndDevTimeoutReq
        0     19   -> ZDP_DeviceAnnce
      0      9   ZDApp_ChangeMatchDescRespPermission
        0      9   -> afSetMatch
      0     35   ZDApp_ChangeState
        0      9   -> osal_set_event
      0      0   ZDApp_CoordStartPANIDConflictCB
      2      9   ZDApp_DeviceAuthEvt
        2      0   -> NLME_SetPollRate
        2      0   -> ZDApp_AnnounceNewAddress
        2      0   -> ZDApp_ChangeState
        2      0   -> ZDApp_NVUpdate
        2      0   -> ZDApp_ResetTimerCancel
        2      0   -> ZDApp_SaveNwkKey
        2      0   -> osal_pwrmgr_device
      0     16   ZDApp_DeviceConfigured
        0     16   -> osal_nv_read
      0     14   ZDApp_ForceConcentratorChange
        0     14   -> osal_nv_read
        0     14   -> osal_start_timerEx
        0     10   -> osal_stop_timerEx
      0     14   ZDApp_InMsgCB
        0     14   -> ZDP_GenericRsp
      0     12   ZDApp_Init
        0     12   -> NLME_GetExtAddr
        0     12   -> ZDApp_InitZdoCBFunc
        0     12   -> ZDApp_RegisterCBs
        0     12   -> ZDO_Init
        0     12   -> afRegister
      0     31   ZDApp_InitUserDesc
        0     27   -> osal_memset
        0     29   -> osal_nv_item_init
        0     31   -> osal_nv_read
      2     12   ZDApp_InitZdoCBFunc
      0     24   ZDApp_JoinReq
        0     20   -> NLME_JoinRequest
        0     16   -> ZDApp_NodeProfileSync
      2      0   ZDApp_LeaveCtrlBypass
      0     40   ZDApp_LeaveCtrlInit
        0     12   -> osal_nv_item_init
        0     14   -> osal_nv_read
      0     24   ZDApp_LeaveCtrlReset
        0     14   -> osal_nv_write
      0     24   ZDApp_LeaveCtrlSet
        0     14   -> osal_nv_write
      0     10   ZDApp_LeaveCtrlStartup
        0     10   -> ZDApp_LeaveCtrlReset
      0     25   ZDApp_LeaveReset
        0     10   -> APSME_HoldDataRequests
        0     10   -> NLME_NwkDiscTerm
        0     10   -> NLME_SetPollRate
        0     10   -> NLME_SetQueuedPollRate
        0     10   -> NLME_SetResponseRate
        0     10   -> ZDApp_LeaveCtrlSet
        0     10   -> ZDApp_NetworkInit
        0     10   -> ZDApp_ResetTimerStart
        0     10   -> osal_rand
        0     10   -> sAddrExtCpy
      0     43   ZDApp_LeaveUpdate
        0     24   -> AddrMgrWriteNVRequest
        0     24   -> RTG_RemoveRtgEntry
        0     24   -> ZDSecMgrAddrClear
        0     24   -> ZDSecMgrDeviceRemoveByExtAddr
        0     24   -> nwkNeighborRemove
        0     27   -> osal_memcpy
      2     22   ZDApp_NVUpdate
        2      0   -> osal_set_event
      0     12   ZDApp_NetworkDiscoveryReq
        0     12   -> NLME_NetworkDiscoveryRequest
      0     42   ZDApp_NetworkInit
        0     12   -> osal_set_event
        0     16   -> osal_start_timerEx
      2      0   ZDApp_NetworkStartEvt
        2      0   -> AddrMgrWriteNVRequest
        2      0   -> NLME_GetEnergyThreshold
        2      0   -> NLME_SetEnergyThreshold
        2      0   -> ZDApp_ChangeState
        2      0   -> ZDApp_SetParentAnnceTimer
        2      0   -> ZDApp_StoreNwkSecMaterial
        2      0   -> bdb_nwkFormationAttempt
        2      0   -> bdb_reportCommissioningState
        2      0   -> osal_pwrmgr_device
        2      0   -> osal_set_event
      0     25   ZDApp_NodeProfileSync
        0      9   -> NLME_SetBroadcastFilter
      0     16   ZDApp_NwkDescListProcessing
        0     16   -> nwk_ExtPANIDValid
        0     16   -> nwk_desc_list_free
        0     16   -> nwk_getNwkDescList
        0     16   -> sAddrExtCmp
      2      0   ZDApp_NwkStateUpdateCB
        2      0   -> ZDApp_NVUpdate
        2      0   -> osal_get_timeoutEx
      0     47   ZDApp_ProcessMsgCBs
        0     33   -> ZDO_ParseAddrRsp
        0     33   -> ZDO_ParseBindUnbindReq
        0     33   -> ZDO_ProcessBindUnbindReq
        0     33   -> ZDO_UpdateAddrManager
        0     33   -> osal_mem_free
      0     24   ZDApp_ProcessNetworkJoin
        0     10   -> NLME_NwkDiscTerm
        0     10   -> NLME_SetPollRate
        0     10   -> NLME_SetQueuedPollRate
        0     10   -> NLME_SetResponseRate
        0     10   -> ZDApp_AnnounceNewAddress
        0     10   -> ZDApp_ChangeState
        0     10   -> ZDApp_ResetTimerStart
        0     10   -> ZDApp_RestoreNwkKey
        0     10   -> bdb_nwkAssocAttemt
        0     10   -> bdb_reportCommissioningState
        0     10   -> bdb_setNodeIsOnANetwork
        0     10   -> nwkNeighborInitTable
        0     10   -> osal_pwrmgr_device
        0     10   -> osal_set_event
        0     10   -> osal_stop_timerEx
      0     28   ZDApp_ProcessOSALMsg
        0     14   -> ZDApp_ProcessMsgCBs
        0     14   -> ZDApp_ProcessNetworkJoin
        0     14   -> ZDApp_ProcessSecMsg
        0     14   -> ZDP_IncomingData
        0     14   -> bdb_isDeviceNonFactoryNew
        0     14   -> bdb_nwkDiscoveryAttempt
        0     14   -> bdb_parentLost
        0     14   -> bdb_rejoinNwk
        0     14   -> bdb_reportCommissioningState
        0     14   -> nwk_getNwkDescList
      0     23   ZDApp_ProcessSecEvent
        0      9   -> ZDApp_DeviceAuthEvt
        0      9   -> ZDApp_SaveNwkKey
        0      9   -> ZDApp_StoreNwkSecMaterial
        0      9   -> ZDSecMgrSaveApsLinkKey
        0      9   -> ZDSecMgrSaveTCLinkKey
        0      9   -> bdb_reportCommissioningState
        0      9   -> bdb_setNodeIsOnANetwork
      0     23   ZDApp_ProcessSecMsg
        0      9   -> ZDSecMgrSwitchKeyInd
        0      9   -> ZDSecMgrTransportKeyInd
      0     35   ZDApp_ReadNetworkRestoreState
        0      9   -> bdb_setNodeIsOnANetwork
        0      9   -> zgReadStartupOptions
      2     12   ZDApp_RegisterCBs
        2      0   -> ZDO_RegisterForZDOMsg
      0     35   ZDApp_ResetNwkKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      0      9   ZDApp_ResetTimerCancel
        0      9   -> osal_clear_event
        0      9   -> osal_stop_timerEx
      0     26   ZDApp_ResetTimerStart
        0     12   -> osal_get_timeoutEx
        0     16   -> osal_start_timerEx
      0     35   ZDApp_RestoreNetworkState
        0      9   -> NLME_GetShortAddr
        0      9   -> NLME_InitNV
        0      9   -> NLME_RestoreFromNV
        0      9   -> sAddrExtCpy
      0     62   ZDApp_RestoreNwkKey
        0     48   -> ZDApp_RestoreNwkSecMaterial
        0     51   -> osal_memcmp
        0     48   -> osal_memset
        0     52   -> osal_nv_read
      0     80   ZDApp_RestoreNwkSecMaterial
        0     31   -> osal_memcmp
        0     32   -> osal_nv_read
        0     32   -> osal_nv_write
      2     14   ZDApp_SaveNetworkStateEvt
        2      0   -> NLME_UpdateNV
        2      0   -> zgWriteStartupOptions
      0     57   ZDApp_SaveNwkKey
        0     44   -> SSP_ReadNwkActiveKey
        0     47   -> osal_memcmp
        0     44   -> osal_memset
        0     48   -> osal_nv_read
        0     48   -> osal_nv_write
      0     51   ZDApp_SecInit
        0     25   -> SSP_SwitchNwkKey
        0     25   -> SSP_UpdateNwkKey
        0     25   -> ZDSecMgrInit
        0     25   -> ZDSecMgrReadKeyFromNv
        0     25   -> osal_mem_free
        0     25   -> osal_memset
      0     10   ZDApp_SendEventMsg
        0     10   -> ZDApp_SendMsg
      1     38   ZDApp_SendMsg
        0     19   -> osal_memcpy
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      0     27   ZDApp_SendParentAnnce
        0     22   -> AssocMakeListOfRfdChild
        0     27   -> ZDP_ParentAnnce
        0     22   -> osal_mem_free
      0     20   ZDApp_SetParentAnnceTimer
        0     16   -> osal_rand
        0     20   -> osal_start_timerEx
      0     12   ZDApp_SetRejoinBackoffDuration
      0     12   ZDApp_SetRejoinScanDuration
      2     14   ZDApp_StartJoiningCycle
        2      0   -> ZDApp_NetworkInit
      2     14   ZDApp_StopJoiningCycle
      0     36   ZDApp_StoreNwkSecMaterial
        0     23   -> osal_isbufset
        0     26   -> osal_memcmp
        0     26   -> osal_memcpy
        0     27   -> osal_nv_read
        0     27   -> osal_nv_write
      0     18   ZDApp_event_loop
        0     14   -> OnBoard_CheckVoltage
        0     14   -> Onboard_soft_reset
        0     14   -> ZDApp_ChangeState
        0     14   -> ZDApp_ProcessOSALMsg
        0     14   -> ZDApp_ProcessSecEvent
        0     14   -> ZDApp_SaveNetworkStateEvt
        0     14   -> ZDApp_StartJoiningCycle
        0     14   -> ZDApp_StopJoiningCycle
        0     14   -> ZDO_StartDevice
        0     14   -> ZDO_UpdateNwkStatus
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
        0     18   -> osal_start_timerEx
        0     14   -> zgWriteStartupOptions
      0     30   ZDOInitDeviceEx
        0     26   -> NLME_InitNV
        0     26   -> NLME_SetBroadcastFilter
        0     26   -> NLME_SetDefaultNV
        0     26   -> NLME_SetUpdateID
        0     26   -> ZDAppDetermineDeviceType
        0     26   -> ZDApp_LeaveCtrlInit
        0     26   -> ZDApp_NetworkInit
        0     26   -> ZDApp_ReadNetworkRestoreState
        0     26   -> ZDApp_RestoreNetworkState
        0     26   -> ZDApp_SecInit
        0     26   -> ZDConfig_InitDescriptors
        0     26   -> ZDSecMgrClearNVKeyValues
        0     26   -> ZDSecMgrUpdateTCAddress
        0     26   -> ZMacSetReq
        0     26   -> osal_memset
        0     30   -> osal_nv_write
        0     26   -> osal_rand
        0     26   -> zgInitItems
        0     26   -> zgWriteStartupOptions
      0     14   ZDO_AddrChangeIndicationCB
        0     14   -> ZDApp_AnnounceNewAddress
        0     14   -> ZDApp_NVUpdate
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
        0     14   -> osal_set_event
      1     16   ZDO_ConcentratorIndicationCB
      2      0   ZDO_DeregisterForZdoCB
      1     19   ZDO_JoinConfirmCB
        0     19   -> NLME_SetPollRate
        0     19   -> ZDApp_ChangeState
        0     19   -> ZDApp_SendMsg
        0     19   -> nwkNeighborFindEmptySlot
        0     19   -> nwkNeighborInitTable
        0     19   -> osal_memset
        0     19   -> sAddrExtCpy
      0     27   ZDO_JoinIndicationCB
        0     22   -> ZDApp_NVUpdate
        0     22   -> osal_get_timeoutEx
        0     22   -> osal_mem_alloc
        0     26   -> osal_start_timerEx
      0     10   ZDO_LeaveCnf
        0     10   -> NLME_GetExtAddr
        0     10   -> ZDApp_LeaveReset
        0     10   -> sAddrExtCmp
      1     16   ZDO_LeaveInd
        0     15   -> NLME_GetCoordShortAddr
        0     15   -> NLME_LeaveRsp
        0     15   -> NLME_SetPollRate
        0     15   -> NLME_SetQueuedPollRate
        0     15   -> NLME_SetResponseRate
        0     15   -> ZDApp_LeaveReset
        0     16   -> ZDApp_LeaveUpdate
        0     15   -> ZMacSetReq
        0     15   -> bdb_setFN
      2      0   ZDO_ManytoOneFailureIndicationCB
        2      0   -> RTG_MTORouteReq
      3      3   ZDO_NetworkDiscoveryConfirmCB
        2      3   -> ZDApp_SendMsg
      0     26   ZDO_NetworkFormationConfirmCB
        0     26   -> APSME_IsDistributedSecurity
        0     26   -> NLME_SetAssocFlags
        0     26   -> SSP_SwitchNwkKey
        0     26   -> SSP_UpdateNwkKey
        0     26   -> ZDApp_ChangeState
        0     26   -> ZDApp_RestoreNwkSecMaterial
        0     26   -> ZDSecMgrGenerateRndKey
        0     26   -> ZMacSetReq
        0     26   -> bdb_nwkFormationAttempt
        0     26   -> bdb_setNodeIsOnANetwork
        0     26   -> nwk_ExtPANIDValid
        0     26   -> osal_memset
        0     26   -> osal_set_event
        0     26   -> sAddrExtCpy
      0     14   ZDO_NetworkStatusCB
        0     14   -> NLME_GetShortAddr
      3      1   ZDO_PermitJoinCB
      0      0   ZDO_PollConfirmCB
      2      0   ZDO_RegisterForZdoCB
      1     16   ZDO_SrcRtgIndCB
      0      9   ZDO_StartRouterConfirmCB
        0      9   -> ZDApp_ChangeState
        0      9   -> osal_set_event
      0      9   ZDO_SyncIndicationCB
        0      9   -> bdb_isDeviceNonFactoryNew
        0      9   -> bdb_nwkAssocAttemt
        0      9   -> bdb_parentLost
        0      9   -> nwkNeighborInitTable
      0      0   ZDO_UpdateDeviceIndication
      1     16   ZDO_beaconNotifyIndCB
        0     16   -> bdb_isDeviceNonFactoryNew
        0     16   -> osal_mem_alloc
        0     16   -> osal_memset
        0     16   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
       7  ?<Initializer for ZDApp_epDesc>
       1  ?<Initializer for continueJoining>
       1  ?<Initializer for prevDevState>
      32  AddrMgrWriteNVRequest
       1  FrameCounterUpdated
       1  MatchRsps
      33  ZDAppCheckForHoldKey
     104  ZDAppDetermineDeviceType
       9  ZDAppNwkAddr
       1  ZDAppTaskID
     138  ZDApp_AnnounceNewAddress
       2  ZDApp_AutoFindMode_epDesc
      22  ZDApp_ChangeMatchDescRespPermission
      37  ZDApp_ChangeState
      10  ZDApp_CoordStartPANIDConflictCB
      79  ZDApp_DeviceAuthEvt
      97  ZDApp_DeviceConfigured
     135  ZDApp_ForceConcentratorChange
     143  ZDApp_InMsgCB
      63  ZDApp_Init
     124  ZDApp_InitUserDesc
      64  ZDApp_InitZdoCBFunc
      96  ZDApp_JoinReq
       1  ZDApp_LeaveCtrl
      25  ZDApp_LeaveCtrlBypass
      87  ZDApp_LeaveCtrlInit
      55  ZDApp_LeaveCtrlReset
      69  ZDApp_LeaveCtrlSet
      72  ZDApp_LeaveCtrlStartup
     177  ZDApp_LeaveReset
     141  ZDApp_LeaveUpdate
      24  ZDApp_NVUpdate
      33  ZDApp_NetworkDiscoveryReq
      65  ZDApp_NetworkInit
     159  ZDApp_NetworkStartEvt
       2  ZDApp_NewDeviceList
      53  ZDApp_NodeProfileSync
     367  ZDApp_NwkDescListProcessing
      32  ZDApp_NwkStateUpdateCB
     150  ZDApp_ProcessMsgCBs
     502  ZDApp_ProcessNetworkJoin
     219  ZDApp_ProcessOSALMsg
     128  ZDApp_ProcessSecEvent
      88  ZDApp_ProcessSecMsg
      31  ZDApp_ReadNetworkRestoreState
      63  ZDApp_RegisterCBs
      74  ZDApp_ResetNwkKey
      37  ZDApp_ResetTimerCancel
      64  ZDApp_ResetTimerStart
     100  ZDApp_RestoreNetworkState
     144  ZDApp_RestoreNwkKey
     267  ZDApp_RestoreNwkSecMaterial
      24  ZDApp_SaveNetworkStateEvt
     362  ZDApp_SaveNwkKey
       4  ZDApp_SavedPollRate
     159  ZDApp_SecInit
      34  ZDApp_SendEventMsg
     102  ZDApp_SendMsg
     128  ZDApp_SendParentAnnce
      76  ZDApp_SetParentAnnceTimer
      26  ZDApp_SetRejoinBackoffDuration
      26  ZDApp_SetRejoinScanDuration
      46  ZDApp_StartJoiningCycle
      47  ZDApp_StopJoiningCycle
     271  ZDApp_StoreNwkSecMaterial
       7  ZDApp_epDesc
     392  ZDApp_event_loop
     458  ZDOInitDeviceEx
     158  ZDO_AddrChangeIndicationCB
      95  ZDO_ConcentratorIndicationCB
      67  ZDO_DeregisterForZdoCB
     307  ZDO_JoinConfirmCB
     291  ZDO_JoinIndicationCB
      94  ZDO_LeaveCnf
     339  ZDO_LeaveInd
      14  ZDO_ManytoOneFailureIndicationCB
      92  ZDO_NetworkDiscoveryConfirmCB
     289  ZDO_NetworkFormationConfirmCB
      31  ZDO_NetworkStatusCB
      63  ZDO_PermitJoinCB
       3  ZDO_PollConfirmCB
      65  ZDO_RegisterForZdoCB
      95  ZDO_SrcRtgIndCB
      44  ZDO_StartRouterConfirmCB
      47  ZDO_SyncIndicationCB
       7  ZDO_UpdateDeviceIndication
       8  ZDO_UseExtendedPANID
     818  ZDO_beaconNotifyIndCB
       4  __Constant_0
       4  __Constant_258
       4  __Constant_4e2
       4  __Constant_64
       1  _tmpRejoinState
       1  continueJoining
       1  devStartMode
       1  devState
       1  nwkStatus
       1  prevDevState
       1  retryCnt
       4  runtimeChannel
       1  zdappHoldKeys
       1  zdappMgmtNwkDiscReqInProgress
       9  zdappMgmtNwkDiscRspAddr
       1  zdappMgmtNwkDiscRspTransSeq
       1  zdappMgmtNwkDiscStartIndex
       1  zdappMgmtSavedNwkState
      18  zdoCBFunc
     450  -- Other

 
 9 473 bytes in segment BANKED_CODE
   450 bytes in segment BANK_RELAYS
     9 bytes in segment XDATA_I
     9 bytes in segment XDATA_ID
    32 bytes in segment XDATA_ROM_C
    70 bytes in segment XDATA_Z
 
   459 bytes of CODE     memory
    16 bytes of CONST    memory (+ 16 bytes shared)
 9 473 bytes of HUGECODE memory
    79 bytes of XDATA    memory

Errors: none
Warnings: none
