###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               06/Aug/2020  10:11:19
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\AA\Z-Stack 3.0.2\Components\stack\bdb\bdb.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EWF0FA.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\stack\bdb\bdb.c" -D SECURE=1 -D TC_LINKKEY_JOIN -D
#        NV_INIT -D NV_RESTORE -D POWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D
#        xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_GROUPS -D
#        BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=0
#        -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0 -DREJOIN_POLL_RATE=0
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\bdb.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\bdb.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\stack\bdb\bdb.c
      1          /**************************************************************************************************
      2            Filename:       bdb.c
      3            Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
      4            Revision:       $Revision: - $
      5          
      6            Description:    This file contains the Base Device Behavior functions and attributes.
      7          
      8          
      9            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "bdb.h"
     45          #include "ZDApp.h"
     46          #include "OSAL.h"
     47          #include "ZDConfig.h"
     48          #include "hal_led.h"
     49          #include "ZDObject.h"
     50          #include "OSAL_Nv.h"
     51          #include "AddrMgr.h"
     52          #include "ZDSecMgr.h"
     53          #include "nwk.h"
     54          #include "nwk_util.h"
     55          #include "ssp_hash.h"
     56          #ifdef BDB_REPORTING
     57          #include "bdb_Reporting.h"
     58          #endif 
     59          
     60          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
     61          #include "gp_interface.h"
     62          #include "gp_common.h"
     63          #include "dgp_stub.h"
     64          #endif
     65          
     66          #include "bdb_interface.h"
     67          
     68          #if defined ( INTER_PAN ) 
     69          #if defined ( BDB_TL_INITIATOR )  
     70          #include "bdb_touchlink_initiator.h"
     71          #endif
     72          #if defined ( BDB_TL_TARGET )  
     73          #include "bdb_touchlink_target.h"
     74          #endif
     75          #endif
     76             
     77          #if defined ( INTER_PAN ) && ( defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET ) )
     78            #include "bdb_touchlink.h"
     79          #endif
     80           
     81          #ifdef MT_APP_CNF_FUNC
     82          #include "MT_APP_CONFIG.h"
     83          #endif
     84          
     85          #include "OSAL_PwrMgr.h"
     86           /*********************************************************************
     87           * MACROS
     88           */
     89          //This is actually the channels used
     90          #define vScanChannels  zgDefaultChannelList
     91             
     92           /*********************************************************************
     93           * CONSTANTS
     94           */
     95          
     96          #define NUMBER_OF_CHANNELS     16
     97          
     98          #define CHANNEL_11_MASK_POS    11
     99          #define CHANNEL_26_MASK_POS    26
    100             

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    101          uint8 bdb_FB_InitiatorCurrentCyclesNumber = 0; //last cycle is #1 (i.e. cycles-left = (bdb_FB_InitiatorCurrentCyclesNumber - 1))
   \                     bdb_FB_InitiatorCurrentCyclesNumber:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    102          
    103          /*********************************************************************
    104           * TYPEDEFS
    105           */
    106           
    107           
    108           /*********************************************************************
    109           * GLOBAL VARIABLES
    110           */
    111          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    112          byte bdb_TaskID;
   \                     bdb_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    113          bdbAttributes_t bdbAttributes = BDB_ATTRIBUTES_DEFAULT_CONFIG;
   \                     bdbAttributes:
   \   000000                DS 19
   \   000013                REQUIRE `?<Initializer for bdbAttributes>`
   \   000013                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    114          epList_t *bdb_HeadEpDescriptorList = NULL;
   \                     bdb_HeadEpDescriptorList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    115          epList_t *bdb_CurrEpDescriptorList = NULL;
   \                     bdb_CurrEpDescriptorList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    116          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          bdbFindingBindingRespondent_t *pRespondentHead = NULL;
   \                     pRespondentHead:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          bdbFindingBindingRespondent_t *pRespondentCurr = NULL;
   \                     pRespondentCurr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    119          bdbFindingBindingRespondent_t *pRespondentNext = NULL;
   \                     pRespondentNext:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    120          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          bdbCommissioningProcedureState_t bdbCommissioningProcedureState; 
   \                     bdbCommissioningProcedureState:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    122          bool bdb_initialization = FALSE;  //Variable to tell if the initialization process has been started
   \                     bdb_initialization:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    123          
    124          //Nwk formation and nwk steering for nodes not in nwk

   \                                 In  segment XDATA_I, align 1, keep-with-next
    125          bool vDoPrimaryScan = TRUE;
   \                     vDoPrimaryScan:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for vDoPrimaryScan>`
   \   000001                REQUIRE __INIT_XDATA_I
    126          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    127          uint8 zgBdbInstallCodeCRC[INSTALL_CODE_LEN + INSTALL_CODE_CRC_LEN] = {0x83,0xFE,0xD3,0x40,0x7A,0x93,0x97,0x23,0xA5,0xC6,0x39,0xB2,0x69,0x16,0xD5,0x05,0xC3,0xB5};
   \                     zgBdbInstallCodeCRC:
   \   000000                DS 18
   \   000012                REQUIRE `?<Initializer for zgBdbInstallCodeCRC>`
   \   000012                REQUIRE __INIT_XDATA_I
    128          
    129          //Pointer of the nwk being tried in association process
    130          #if (ZG_BUILD_JOINING_TYPE)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          static networkDesc_t *pBDBListNwk = NULL;
   \                     pBDBListNwk:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    132          #endif
    133          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          uint8 bdb_ZclTransactionSequenceNumber=0x00;
   \                     bdb_ZclTransactionSequenceNumber:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          bool touchLinkTargetEnabled = FALSE;
   \                     touchLinkTargetEnabled:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    137          
    138           /*********************************************************************
    139           * EXTERNAL VARIABLES
    140           */
    141          
    142          extern devStartModes_t devStartMode;
    143          extern bool  requestNewTrustCenterLinkKey;
    144          extern uint32 requestLinkKeyTimeout;
    145          extern uint32 ZDApp_SavedPollRate;
    146          
    147          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)
    148          extern bdbGCB_IdentifyTimeChange_t pfnIdentifyTimeChangeCB;
    149          extern uint8 bdbIndentifyActiveEndpoint;
    150          #endif
    151          
    152          extern bdbFindingBindingRespondent_t *pRespondentNext;
    153          
    154          #ifndef DISABLE_GREENPOWER_BASIC_PROXY
    155          extern ZDO_DeviceAnnce_t aliasConflictAnnce;
    156          #endif
    157          
    158          /*********************************************************************
    159           * EXTERNAL FUNCTIONS
    160           */
    161          
    162          extern void ZDApp_ResetTimerStart( uint16 delay );
    163          extern void ZDApp_NodeProfileSync( uint8 stackProfile );
    164          extern uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt );
    165          extern uint8 ZDApp_ReadNetworkRestoreState( void );
    166          
    167          extern bdbFindingBindingRespondent_t* bdb_getRespondentRetry(bdbFindingBindingRespondent_t* pRespondentHead);
    168          extern void bdb_ProcessSimpleDesc( zdoIncomingMsg_t *msgPtr );
    169          extern void bdb_ProcessIEEEAddrRsp(zdoIncomingMsg_t *pMsg);
    170          
    171          /*********************************************************************
    172           * LOCAL VARIABLES
    173           */
    174          #if (ZG_BUILD_JOINING_TYPE)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175            static uint8 bdb_nwkAssocRetriesCount = 0;
   \                     bdb_nwkAssocRetriesCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    176          #endif
    177          #if (ZG_BUILD_COORDINATOR_TYPE)
    178            static bdb_joiningDeviceList_t *bdb_joiningDeviceList = NULL;
    179          #endif
    180            
    181          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
    182          //Latch to save the status success of any attempt in the periodic F&B process  

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    183          static uint8 bdb_FBStateSuccessLatch = FALSE;
   \                     bdb_FBStateSuccessLatch:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    184          #endif
    185           /*********************************************************************
    186           * LOCAL FUNCTIONS
    187           */
    188          static void bdb_ProcessOSALMsg(bdbInMsg_t *msgPtr);
    189          void bdb_NotifyCommissioningModeStart(uint8 commissioningMode);
    190          static void bdb_processZDOMgs(zdoIncomingMsg_t *pMsg);
    191          
    192          #if (ZG_BUILD_JOINING_TYPE)
    193          static void bdb_requestTCStackVersion(void);
    194          static void bdb_requestTCLinkKey(void);
    195          static void bdb_requestVerifyTCLinkKey(void);
    196          static void bdb_tryNwkAssoc(void);
    197          #endif
    198          
    199          
    200          static void bdb_processTimeout(void);
    201          static void bdb_startResumeCommissioningProcess(void);
    202          static void bdb_nwkSteeringDeviceOnNwk(void);
    203          static void bdb_nwkJoiningFormation(bool isJoining);
    204          
    205          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
    206          static uint8 gp_ChangeChannelReq(void);
    207          static void gp_CBInit(void);
    208          #endif
    209          
    210          
    211          #if (ZG_BUILD_COORDINATOR_TYPE)
    212          static void bdb_TCProcessJoiningList(void);
    213          static ZStatus_t bdb_TCJoiningDeviceFree(bdb_joiningDeviceList_t* JoiningDeviceToRemove);
    214          #endif
    215          #if (ZG_BUILD_COORDINATOR_TYPE)
    216          static bdbGCB_TCLinkKeyExchangeProcess_t  pfnTCLinkKeyExchangeProcessCB = NULL;
    217          #endif

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    218          static bdbGCB_CommissioningStatus_t       pfnCommissioningStatusCB = NULL; 
   \                     pfnCommissioningStatusCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    219          #if (ZG_BUILD_JOINING_TYPE)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    220          static bdbGCB_CBKETCLinkKeyExchange_t     pfnCBKETCLinkKeyExchange = NULL;
   \                     pfnCBKETCLinkKeyExchange:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    221          static bdbGCB_FilterNwkDesc_t             pfnFilterNwkDesc = NULL;   
   \                     pfnFilterNwkDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    222          #endif
    223          
    224          
    225          
    226          void bdb_calculateCCITT_CRC (uint8 *Mb, uint32 msglen, uint16 *crc);
    227          void bdb_crcInit(uint16 *crc, uint16 *crcinit_direct, uint16 *crcinit_nondirect);
    228          uint16 bdb_crcReflect (uint16 crc, uint16 bitnum);
    229          uint16 bdb_crcBitByBitFast(uint8 * p, uint32 len, uint16 crcinit_direct, uint16 crcinit_nondirect);
    230          void bdb_ProcessNodeDescRsp(zdoIncomingMsg_t *pMsg);
    231          
    232          /*********************************************************************
    233           * PUBLIC FUNCTIONS
    234           *********************************************************************/
    235          void bdb_filterNwkDisc(void);
    236          ZStatus_t bdb_joinProcess(networkDesc_t *pChosenNwk);
    237          
    238          ZStatus_t bdb_TCAddJoiningDevice(uint16 parentAddr, uint8* JoiningExtAddr);
    239          void bdb_TCjoiningDeviceComplete(uint8* JoiningExtAddr);
    240          
    241           /*********************************************************************
    242           * @fn          bdb_Init
    243           *
    244           * @brief       Initialization function for the Base Device Behavior.
    245           *
    246           * @param       task_id - bdb_TaskID Task ID
    247           *
    248           * @return      none
    249           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    250          void bdb_Init( byte task_id )
   \                     bdb_Init:
    251          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    252            bdb_TaskID = task_id;
   \   000007   EE           MOV       A,R6
   \   000008   90....       MOV       DPTR,#bdb_TaskID
   \   00000B   F0           MOVX      @DPTR,A
    253          
    254            osal_pwrmgr_device(PWRMGR_BATTERY);
   \   00000C                ; Setup parameters for call to function osal_pwrmgr_device
   \   00000C   7901         MOV       R1,#0x1
   \   00000E   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
    255          
    256          #if (ZG_BUILD_COORDINATOR_TYPE)
    257            if(ZG_DEVICE_COORDINATOR_TYPE)
    258            {
    259              if(bdbAttributes.bdbJoinUsesInstallCodeKey)
    260              {
    261                zgAllowInstallCodes = ZG_IC_MUST_USED;
    262              }
    263            }
    264          #endif
    265            
    266          #if defined ( INTER_PAN ) && defined ( BDB_TL_INITIATOR )  
    267            touchLinkInitiator_InitDevice( );
   \   000011                ; Setup parameters for call to function touchLinkInitiator_InitDevice
   \   000011   12....       LCALL     `??touchLinkInitiator_InitDevice::?relay`; Banked call to: touchLinkInitiator_InitDevice
   \   000014   E9           MOV       A,R1
    268          #endif
    269          
    270          #if (BDB_REPORTING)
    271            bdb_RepInit();
    272          #endif  
    273            
    274            //Register ZDO callbacks
    275            ZDO_RegisterForZDOMsg ( task_id, Node_Desc_rsp );
   \   000015                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000015   7A02         MOV       R2,#0x2
   \   000017   7B80         MOV       R3,#-0x80
   \   000019   EE           MOV       A,R6
   \   00001A   F9           MOV       R1,A
   \   00001B   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   00001E   E9           MOV       A,R1
    276          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
    277            ZDO_RegisterForZDOMsg ( task_id, IEEE_addr_rsp );
   \   00001F                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001F   7A01         MOV       R2,#0x1
   \   000021   7B80         MOV       R3,#-0x80
   \   000023   EE           MOV       A,R6
   \   000024   F9           MOV       R1,A
   \   000025   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000028   E9           MOV       A,R1
    278            ZDO_RegisterForZDOMsg ( task_id, Simple_Desc_rsp );
   \   000029                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000029   7A04         MOV       R2,#0x4
   \   00002B   7B80         MOV       R3,#-0x80
   \   00002D   EE           MOV       A,R6
   \   00002E   F9           MOV       R1,A
   \   00002F   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000032   E9           MOV       A,R1
    279          #endif
    280            
    281          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
    282            gp_RegisterGPChangeChannelReqForBDBCB(gp_ChangeChannelReq);
    283            gp_CBInit();
    284          #endif
    285          }
   \   000033   7F01         MOV       R7,#0x1
   \   000035   02....       LJMP      ?BANKED_LEAVE_XDATA
    286          
    287          /*********************************************************************
    288           * @fn      bdb_RegisterSimpleDescriptor
    289           *
    290           * @brief   Register the Simple descriptor. This function also registers 
    291           *          the profile's cluster conversion table.
    292           *
    293           * @param   simpleDesc - a pointer to a valid SimpleDescriptionFormat_t, must not be NULL.
    294           *
    295           * @return  none
    296           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    297          void bdb_RegisterSimpleDescriptor( SimpleDescriptionFormat_t *simpleDesc )
   \                     bdb_RegisterSimpleDescriptor:
    298          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    299            endPointDesc_t *epDesc;
    300          
    301            // Register the application's endpoint descriptor
    302            //  - This memory is allocated and never freed.
    303            epDesc = osal_mem_alloc( sizeof ( endPointDesc_t ) );
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   7A07         MOV       R2,#0x7
   \   00000B   7B00         MOV       R3,#0x0
   \   00000D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000010   8A..         MOV       ?V2,R2
   \   000012   8B..         MOV       ?V3,R3
   \   000014   85....       MOV       ?V0,?V2
   \   000017   85....       MOV       ?V1,?V3
    304            if ( epDesc )
   \   00001A   E5..         MOV       A,?V0
   \   00001C   45..         ORL       A,?V1
   \   00001E   6045         JZ        ??bdb_RegisterSimpleDescriptor_0
    305            {
    306              // Fill out the endpoint description.
    307              epDesc->endPoint = simpleDesc->EndPoint;
   \   000020   8E82         MOV       DPL,R6
   \   000022   8F83         MOV       DPH,R7
   \   000024   E0           MOVX      A,@DPTR
   \   000025   C0E0         PUSH      A
   \   000027   85..82       MOV       DPL,?V0
   \   00002A   85..83       MOV       DPH,?V1
   \   00002D   D0E0         POP       A
   \   00002F   F0           MOVX      @DPTR,A
    308              epDesc->task_id = &zcl_TaskID;   // all messages get sent to ZCL first
   \   000030   85..82       MOV       DPL,?V0
   \   000033   85..83       MOV       DPH,?V1
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   74..         MOV       A,#zcl_TaskID & 0xff
   \   00003A   F0           MOVX      @DPTR,A
   \   00003B   A3           INC       DPTR
   \   00003C   74..         MOV       A,#(zcl_TaskID >> 8) & 0xff
   \   00003E   F0           MOVX      @DPTR,A
    309              epDesc->simpleDesc = simpleDesc;
   \   00003F   85..82       MOV       DPL,?V0
   \   000042   85..83       MOV       DPH,?V1
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   EE           MOV       A,R6
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B   A3           INC       DPTR
   \   00004C   EF           MOV       A,R7
   \   00004D   F0           MOVX      @DPTR,A
    310              epDesc->latencyReq = noLatencyReqs;
   \   00004E   85..82       MOV       DPL,?V0
   \   000051   85..83       MOV       DPH,?V1
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   7400         MOV       A,#0x0
   \   00005C   F0           MOVX      @DPTR,A
    311          
    312              // Register the endpoint description with the AF
    313              afRegister( epDesc );
   \   00005D                ; Setup parameters for call to function afRegister
   \   00005D   AA..         MOV       R2,?V0
   \   00005F   AB..         MOV       R3,?V1
   \   000061   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
   \   000064   E9           MOV       A,R1
    314            }
    315          }
   \                     ??bdb_RegisterSimpleDescriptor_0:
   \   000065   7F04         MOV       R7,#0x4
   \   000067   02....       LJMP      ?BANKED_LEAVE_XDATA
    316          
    317          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
    318          /*********************************************************************
    319           * @fn      bdb_ZclIdentifyCmdInd
    320           *
    321           * @brief   Callback from the ZCL General Cluster Library when
    322           *          it received an Identity Command for this application.
    323           *
    324           * @param   identifyTime - the number of seconds to identify yourself
    325           * @param   endpoint - destination endpoint
    326           *
    327           * @return  none
    328           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    329          void bdb_ZclIdentifyCmdInd( uint16 identifyTime, uint8 endpoint )
   \                     bdb_ZclIdentifyCmdInd:
    330          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   89..         MOV       ?V0,R1
    331            zclAttrRec_t identifyAttrRec;
    332            
    333            if ( zclFindAttrRec( endpoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    334                                ATTRID_IDENTIFY_TIME, &identifyAttrRec ) )
   \   000010                ; Setup parameters for call to function zclFindAttrRec
   \   000010   A8..         MOV       R0,?XSP + 0
   \   000012   A9..         MOV       R1,?XSP + 1
   \   000014   88..         MOV       ?V2,R0
   \   000016   89..         MOV       ?V3,R1
   \   000018   78..         MOV       R0,#?V2
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   7C00         MOV       R4,#0x0
   \   00001F   7D00         MOV       R5,#0x0
   \   000021   7A03         MOV       R2,#0x3
   \   000023   7B00         MOV       R3,#0x0
   \   000025   A9..         MOV       R1,?V0
   \   000027   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   00002A   7402         MOV       A,#0x2
   \   00002C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002F   E9           MOV       A,R1
   \   000030   7003         JNZ       $+5
   \   000032   02....       LJMP      ??bdb_ZclIdentifyCmdInd_0 & 0xFFFF
    335            {
    336              //If we are processing an actual change
    337              if(*(uint16*)identifyAttrRec.attr.dataPtr != identifyTime)
   \   000035   7406         MOV       A,#0x6
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F8           MOV       R0,A
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   F583         MOV       DPH,A
   \   000040   8882         MOV       DPL,R0
   \   000042   E0           MOVX      A,@DPTR
   \   000043   6E           XRL       A,R6
   \   000044   7003         JNZ       ??bdb_ZclIdentifyCmdInd_1
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   6F           XRL       A,R7
   \                     ??bdb_ZclIdentifyCmdInd_1:
   \   000049   6071         JZ        ??bdb_ZclIdentifyCmdInd_0
    338              {
    339                if ( identifyTime > 0 )
   \   00004B   EE           MOV       A,R6
   \   00004C   4F           ORL       A,R7
   \   00004D   602C         JZ        ??bdb_ZclIdentifyCmdInd_2
    340                {
    341                  *((uint16*)identifyAttrRec.attr.dataPtr) = identifyTime;
   \   00004F   7406         MOV       A,#0x6
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   E0           MOVX      A,@DPTR
   \   000055   F8           MOV       R0,A
   \   000056   A3           INC       DPTR
   \   000057   E0           MOVX      A,@DPTR
   \   000058   F583         MOV       DPH,A
   \   00005A   8882         MOV       DPL,R0
   \   00005C   EE           MOV       A,R6
   \   00005D   F0           MOVX      @DPTR,A
   \   00005E   A3           INC       DPTR
   \   00005F   EF           MOV       A,R7
   \   000060   F0           MOVX      @DPTR,A
    342                  osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
   \   000061                ; Setup parameters for call to function osal_start_timerEx
   \   000061   90....       MOV       DPTR,#__Constant_3e8
   \   000064   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000067   7A00         MOV       R2,#0x0
   \   000069   7B20         MOV       R3,#0x20
   \   00006B   90....       MOV       DPTR,#bdb_TaskID
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   F9           MOV       R1,A
   \   000070   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000073   7404         MOV       A,#0x4
   \   000075   12....       LCALL     ?DEALLOC_XSTACK8
   \   000078   E9           MOV       A,R1
   \   000079   8025         SJMP      ??bdb_ZclIdentifyCmdInd_3
    343                }
    344                else if ( identifyTime <= 0 )
   \                     ??bdb_ZclIdentifyCmdInd_2:
   \   00007B   EE           MOV       A,R6
   \   00007C   4F           ORL       A,R7
   \   00007D   7021         JNZ       ??bdb_ZclIdentifyCmdInd_3
    345                {
    346                  *((uint16*)identifyAttrRec.attr.dataPtr) = 0;
   \   00007F   7406         MOV       A,#0x6
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   E0           MOVX      A,@DPTR
   \   000085   F8           MOV       R0,A
   \   000086   A3           INC       DPTR
   \   000087   E0           MOVX      A,@DPTR
   \   000088   F583         MOV       DPH,A
   \   00008A   8882         MOV       DPL,R0
   \   00008C   7400         MOV       A,#0x0
   \   00008E   F0           MOVX      @DPTR,A
   \   00008F   A3           INC       DPTR
   \   000090   7400         MOV       A,#0x0
   \   000092   F0           MOVX      @DPTR,A
    347                  osal_stop_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT );
   \   000093                ; Setup parameters for call to function osal_stop_timerEx
   \   000093   7A00         MOV       R2,#0x0
   \   000095   7B20         MOV       R3,#0x20
   \   000097   90....       MOV       DPTR,#bdb_TaskID
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   F9           MOV       R1,A
   \   00009C   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   00009F   E9           MOV       A,R1
    348                }
    349                
    350                if(pfnIdentifyTimeChangeCB != NULL)
   \                     ??bdb_ZclIdentifyCmdInd_3:
   \   0000A0   90....       MOV       DPTR,#pfnIdentifyTimeChangeCB
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   F8           MOV       R0,A
   \   0000A5   A3           INC       DPTR
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   F9           MOV       R1,A
   \   0000A8   E8           MOV       A,R0
   \   0000A9   49           ORL       A,R1
   \   0000AA   6010         JZ        ??bdb_ZclIdentifyCmdInd_0
    351                {
    352                  pfnIdentifyTimeChangeCB(endpoint);
   \   0000AC                ; Setup parameters for indirect call
   \   0000AC   A9..         MOV       R1,?V0
   \   0000AE   90....       MOV       DPTR,#pfnIdentifyTimeChangeCB
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   F8           MOV       R0,A
   \   0000B3   A3           INC       DPTR
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   F583         MOV       DPH,A
   \   0000B7   8882         MOV       DPL,R0
   \   0000B9   12....       LCALL     ?CALL_IND
    353                }
    354              }
    355            }
    356          }
   \                     ??bdb_ZclIdentifyCmdInd_0:
   \   0000BC   7408         MOV       A,#0x8
   \   0000BE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C1   7F04         MOV       R7,#0x4
   \   0000C3   02....       LJMP      ?BANKED_LEAVE_XDATA
    357          #endif
    358          
    359          
    360          #if (ZG_BUILD_JOINING_TYPE) 
    361           /*********************************************************************
    362           * @fn          bdb_setActiveCentralizedLinkKey
    363           *
    364           * @brief       Set the active centralized key to be used, Global or IC derived. See zstack_CentralizedLinkKeyModes_t
    365           *
    366           * @param       zstack_CentralizedLinkKeyModes - Key to be used for joining centralized network
    367           * @param       pKey - Key to be used (if any)
    368           *
    369           * @return      ZStatus_t - ZFailure when no valid BDB_INSTALL_CODE_USE is used
    370           *                          ZInvalidParameter when IC buffer is null
    371           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    372          ZStatus_t bdb_setActiveCentralizedLinkKey(uint8 zstack_CentralizedLinkKeyModes, uint8* pKey)
   \                     bdb_setActiveCentralizedLinkKey:
    373          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V1,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
    374            ZStatus_t Status;
    375          
    376            uint8 extAddr[Z_EXTADDR_LEN];
    377          
    378            osal_memset(extAddr,0x00,Z_EXTADDR_LEN);
   \   000010                ; Setup parameters for call to function osal_memset
   \   000010   7C08         MOV       R4,#0x8
   \   000012   7D00         MOV       R5,#0x0
   \   000014   7900         MOV       R1,#0x0
   \   000016   AA..         MOV       R2,?XSP + 0
   \   000018   AB..         MOV       R3,?XSP + 1
   \   00001A   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    379          
    380            if(pKey == NULL)
   \   00001D   EE           MOV       A,R6
   \   00001E   4F           ORL       A,R7
   \   00001F   7004         JNZ       ??bdb_setActiveCentralizedLinkKey_0
    381            {
    382              return ZInvalidParameter;
   \   000021   7902         MOV       R1,#0x2
   \   000023   8051         SJMP      ??bdb_setActiveCentralizedLinkKey_1
    383            }
    384          
    385            //Clear it, if the request requires it, it will be set
    386            gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = FALSE;
   \                     ??bdb_setActiveCentralizedLinkKey_0:
   \   000025   90....       MOV       DPTR,#gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY
   \   000028   7400         MOV       A,#0x0
   \   00002A   F0           MOVX      @DPTR,A
    387          
    388            switch(zstack_CentralizedLinkKeyModes)
   \   00002B   E5..         MOV       A,?V1
   \   00002D   600E         JZ        ??bdb_setActiveCentralizedLinkKey_2
   \   00002F   14           DEC       A
   \   000030   6019         JZ        ??bdb_setActiveCentralizedLinkKey_3
   \   000032   14           DEC       A
   \   000033   6010         JZ        ??bdb_setActiveCentralizedLinkKey_4
   \   000035   14           DEC       A
   \   000036   6029         JZ        ??bdb_setActiveCentralizedLinkKey_5
   \   000038   14           DEC       A
   \   000039   6020         JZ        ??bdb_setActiveCentralizedLinkKey_6
   \   00003B   8034         SJMP      ??bdb_setActiveCentralizedLinkKey_7
    389            {
    390              case zstack_UseDefaultGlobalTrustCenterLinkKey:
    391                //Set the default key to be used in centralized networks as defaultTCLinkKey
    392                Status = APSME_SetDefaultKey();
   \                     ??bdb_setActiveCentralizedLinkKey_2:
   \   00003D                ; Setup parameters for call to function APSME_SetDefaultKey
   \   00003D   12....       LCALL     `??APSME_SetDefaultKey::?relay`; Banked call to: APSME_SetDefaultKey
   \   000040   E9           MOV       A,R1
   \   000041   F5..         MOV       ?V0,A
    393              break;
   \   000043   802F         SJMP      ??bdb_setActiveCentralizedLinkKey_8
    394          
    395              case zstack_UseInstallCodeWithFallback:
    396                //same as zstack_UseInstallCode but attempt default TRUE
    397                gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = TRUE;
   \                     ??bdb_setActiveCentralizedLinkKey_4:
   \   000045   90....       MOV       DPTR,#gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY
   \   000048   7401         MOV       A,#0x1
   \   00004A   F0           MOVX      @DPTR,A
    398              case zstack_UseInstallCode:
    399                 //Set the install code as default key
    400                Status = bdb_addInstallCode(pKey,extAddr);
   \                     ??bdb_setActiveCentralizedLinkKey_3:
   \   00004B                ; Setup parameters for call to function bdb_addInstallCode
   \   00004B   AC..         MOV       R4,?XSP + 0
   \   00004D   AD..         MOV       R5,?XSP + 1
   \   00004F   EE           MOV       A,R6
   \   000050   FA           MOV       R2,A
   \   000051   EF           MOV       A,R7
   \   000052   FB           MOV       R3,A
   \   000053   12....       LCALL     `??bdb_addInstallCode::?relay`; Banked call to: bdb_addInstallCode
   \   000056   E9           MOV       A,R1
   \   000057   F5..         MOV       ?V0,A
    401              break;
   \   000059   8019         SJMP      ??bdb_setActiveCentralizedLinkKey_8
    402          
    403              case zstack_UseAPSKeyWithFallback:
    404                //same as zstack_UseAPSKey but attempt default TRUE
    405                gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = TRUE;
   \                     ??bdb_setActiveCentralizedLinkKey_6:
   \   00005B   90....       MOV       DPTR,#gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY
   \   00005E   7401         MOV       A,#0x1
   \   000060   F0           MOVX      @DPTR,A
    406              case zstack_UseAPSKey:
    407                //Set the key as global default
    408                Status = APSME_AddTCLinkKey(pKey,extAddr);
   \                     ??bdb_setActiveCentralizedLinkKey_5:
   \   000061                ; Setup parameters for call to function APSME_AddTCLinkKey
   \   000061   AC..         MOV       R4,?XSP + 0
   \   000063   AD..         MOV       R5,?XSP + 1
   \   000065   EE           MOV       A,R6
   \   000066   FA           MOV       R2,A
   \   000067   EF           MOV       A,R7
   \   000068   FB           MOV       R3,A
   \   000069   12....       LCALL     `??APSME_AddTCLinkKey::?relay`; Banked call to: APSME_AddTCLinkKey
   \   00006C   E9           MOV       A,R1
   \   00006D   F5..         MOV       ?V0,A
    409              break;
   \   00006F   8003         SJMP      ??bdb_setActiveCentralizedLinkKey_8
    410              
    411              default:
    412                Status = ZInvalidParameter;
   \                     ??bdb_setActiveCentralizedLinkKey_7:
   \   000071   75..02       MOV       ?V0,#0x2
    413              break;
    414            }
    415          
    416            return Status;
   \                     ??bdb_setActiveCentralizedLinkKey_8:
   \   000074   A9..         MOV       R1,?V0
   \                     ??bdb_setActiveCentralizedLinkKey_1:
   \   000076   7408         MOV       A,#0x8
   \   000078   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007B   7F02         MOV       R7,#0x2
   \   00007D   02....       LJMP      ?BANKED_LEAVE_XDATA
    417          }
    418          #endif
    419          
    420          
    421              
    422            
    423          /******************************************************************************
    424           * @fn          bdb_addInstallCode
    425           *
    426           * @brief       Interface to add an install codes and adds a APS TC Link key.
    427           *
    428           * @param       pInstallCode - [in] Install Code with CRC (buffer size of 18 bytes).
    429           *              pExt - [in] Extended address of the node.
    430           *
    431           * @return      ZStatus_t
    432           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    433          ZStatus_t bdb_addInstallCode(uint8* pInstallCode, uint8* pExt)
   \                     bdb_addInstallCode:
    434          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
    435            uint8  hashOutput[16];
    436            uint16 CRC;
    437            
    438          #if (ZG_BUILD_COORDINATOR_TYPE)
    439            if(ZG_DEVICE_COORDINATOR_TYPE)
    440            {
    441              if(zgAllowInstallCodes == ZG_IC_NOT_SUPPORTED)
    442              {
    443                return ZFailure;
    444              }
    445            }
    446          #endif
    447                 
    448            if((pInstallCode == NULL) || (pExt == NULL))
   \   000012   EE           MOV       A,R6
   \   000013   4F           ORL       A,R7
   \   000014   6006         JZ        ??bdb_addInstallCode_0
   \   000016   E5..         MOV       A,?V0
   \   000018   45..         ORL       A,?V1
   \   00001A   7004         JNZ       ??bdb_addInstallCode_1
    449            {
    450              return ZInvalidParameter;
   \                     ??bdb_addInstallCode_0:
   \   00001C   7902         MOV       R1,#0x2
   \   00001E   8064         SJMP      ??bdb_addInstallCode_2
    451            }
    452            
    453            CRC = bdb_GenerateInstallCodeCRC(pInstallCode);
   \                     ??bdb_addInstallCode_1:
   \   000020                ; Setup parameters for call to function bdb_GenerateInstallCodeCRC
   \   000020   EE           MOV       A,R6
   \   000021   FA           MOV       R2,A
   \   000022   EF           MOV       A,R7
   \   000023   FB           MOV       R3,A
   \   000024   12....       LCALL     `??bdb_GenerateInstallCodeCRC::?relay`; Banked call to: bdb_GenerateInstallCodeCRC
   \   000027   8A..         MOV       ?V4,R2
   \   000029   8B..         MOV       ?V5,R3
   \   00002B   85....       MOV       ?V2,?V4
   \   00002E   85....       MOV       ?V3,?V5
    454          
    455            //Validate CRC
    456            if(CRC != osal_build_uint16(&pInstallCode[INSTALL_CODE_LEN]))
   \   000031                ; Setup parameters for call to function osal_build_uint16
   \   000031   EE           MOV       A,R6
   \   000032   2410         ADD       A,#0x10
   \   000034   FA           MOV       R2,A
   \   000035   E4           CLR       A
   \   000036   3F           ADDC      A,R7
   \   000037   FB           MOV       R3,A
   \   000038   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00003B   8A..         MOV       ?V4,R2
   \   00003D   8B..         MOV       ?V5,R3
   \   00003F   E5..         MOV       A,?V4
   \   000041   65..         XRL       A,?V2
   \   000043   7004         JNZ       ??bdb_addInstallCode_3
   \   000045   E5..         MOV       A,?V5
   \   000047   65..         XRL       A,?V3
   \                     ??bdb_addInstallCode_3:
   \   000049   6004         JZ        ??bdb_addInstallCode_4
    457            {
    458              return ZInvalidParameter;
   \   00004B   7902         MOV       R1,#0x2
   \   00004D   8035         SJMP      ??bdb_addInstallCode_2
    459            }
    460          
    461            sspMMOHash (NULL, 0, pInstallCode,(INSTALL_CODE_LEN + INSTALL_CODE_CRC_LEN) * BITS_PER_BYTE, hashOutput);
   \                     ??bdb_addInstallCode_4:
   \   00004F                ; Setup parameters for call to function sspMMOHash
   \   00004F   A8..         MOV       R0,?XSP + 0
   \   000051   A9..         MOV       R1,?XSP + 1
   \   000053   88..         MOV       ?V4,R0
   \   000055   89..         MOV       ?V5,R1
   \   000057   78..         MOV       R0,#?V4
   \   000059   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005C   75..90       MOV       ?V4,#-0x70
   \   00005F   75..00       MOV       ?V5,#0x0
   \   000062   78..         MOV       R0,#?V4
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000067   EE           MOV       A,R6
   \   000068   FC           MOV       R4,A
   \   000069   EF           MOV       A,R7
   \   00006A   FD           MOV       R5,A
   \   00006B   7900         MOV       R1,#0x0
   \   00006D   7A00         MOV       R2,#0x0
   \   00006F   7B00         MOV       R3,#0x0
   \   000071   12....       LCALL     `??sspMMOHash::?relay`; Banked call to: sspMMOHash
   \   000074   7404         MOV       A,#0x4
   \   000076   12....       LCALL     ?DEALLOC_XSTACK8
    462          
    463            return APSME_AddTCLinkKey(hashOutput,pExt);
   \   000079                ; Setup parameters for call to function APSME_AddTCLinkKey
   \   000079   AC..         MOV       R4,?V0
   \   00007B   AD..         MOV       R5,?V1
   \   00007D   AA..         MOV       R2,?XSP + 0
   \   00007F   AB..         MOV       R3,?XSP + 1
   \   000081   12....       LCALL     `??APSME_AddTCLinkKey::?relay`; Banked call to: APSME_AddTCLinkKey
   \                     ??bdb_addInstallCode_2:
   \   000084   7410         MOV       A,#0x10
   \   000086   12....       LCALL     ?DEALLOC_XSTACK8
   \   000089   7F06         MOV       R7,#0x6
   \   00008B   02....       LJMP      ?BANKED_LEAVE_XDATA
    464          }    
    465              
    466          
    467          #if (ZG_BUILD_COORDINATOR_TYPE)
    468           /*********************************************************************
    469           * @fn      bdb_RegisterTCLinkKeyExchangeProcessCB
    470           *
    471           * @brief   Register a callback to receive notifications on the joining devices 
    472           *          and its status on TC link key exchange
    473           *
    474           * @param   bdbGCB_TCLinkKeyExchangeProcess - application callback 
    475           *          (extended address of device, status: 0 = Joining, 1 = TC link key exchange success, 2 = TC link key exchange failed)
    476           *
    477           * @return  none
    478           */
    479          void bdb_RegisterTCLinkKeyExchangeProcessCB(bdbGCB_TCLinkKeyExchangeProcess_t bdbGCB_TCLinkKeyExchangeProcess)
    480          {
    481            if(bdbGCB_TCLinkKeyExchangeProcess != NULL)
    482            {
    483              pfnTCLinkKeyExchangeProcessCB = bdbGCB_TCLinkKeyExchangeProcess;
    484            }
    485          }
    486          
    487          
    488          
    489           /*********************************************************************
    490           * @fn          bdb_setTCRequireKeyExchange
    491           *
    492           * @brief       Set the bdb_setTCRequireKeyExchange attribute
    493           *
    494           * @param       isKeyExchangeRequired - True if TC will remove devices that do 
    495           *              not perform key exchange after bdbTrustCenterNodeJoinTimeout, 
    496           *              False to not remove devices.
    497           *
    498           * @return      none
    499           */
    500          void bdb_setTCRequireKeyExchange(bool isKeyExchangeRequired)
    501          {
    502            bdbAttributes.bdbTrustCenterRequireKeyExchange = isKeyExchangeRequired;
    503          }
    504          
    505          
    506          
    507           /*********************************************************************
    508           * @fn          bdb_TCAddJoiningDevice
    509           *
    510           * @brief       Add a joining device to the list of devices that must request a 
    511           *              key before bdbTrustCenterNodeJoinTimeout.
    512           *
    513           * @param       parentAddr - Address of the parent device
    514           * @param       JoiningExtAddr - IEEE address of the joining device
    515           *
    516           * @return      ZStatus_t - ZFailure No memory to allocate the device in the list
    517           *                          ZInvalidParameter
    518           */
    519          ZStatus_t bdb_TCAddJoiningDevice(uint16 parentAddr, uint8* JoiningExtAddr)
    520          {
    521            bdb_joiningDeviceList_t* tempJoiningDescNode;
    522            
    523            if((parentAddr == INVALID_NODE_ADDR) || (JoiningExtAddr == NULL))
    524            {
    525              return ZInvalidParameter;
    526            }
    527            
    528            //If the list was empty and element was allocated, then start the timer
    529            if(bdb_joiningDeviceList == NULL)
    530            {
    531              bdb_joiningDeviceList = osal_mem_alloc(sizeof(bdb_joiningDeviceList_t));
    532              if(bdb_joiningDeviceList == NULL)
    533              {
    534                return ZFailure;
    535              }
    536             
    537              osal_start_reload_timer(bdb_TaskID,BDB_TC_JOIN_TIMEOUT,1000);
    538              tempJoiningDescNode = bdb_joiningDeviceList;
    539            }
    540            //if the list was not empty then add the entry at the end of the list
    541            else
    542            {
    543              tempJoiningDescNode = bdb_joiningDeviceList;
    544              
    545              //Validate that this is not already in the list... somehow
    546              if(osal_memcmp(JoiningExtAddr,tempJoiningDescNode->bdbJoiningNodeEui64,Z_EXTADDR_LEN))
    547              {
    548                //The device added is already in the list, refresh its time and do nothing else
    549                tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
    550                return ZSuccess;
    551              }
    552              
    553              while(tempJoiningDescNode->nextDev != NULL)
    554              {
    555                tempJoiningDescNode = tempJoiningDescNode->nextDev;
    556                
    557                //Validate that this is not already in the list... somehow
    558                if(osal_memcmp(JoiningExtAddr,tempJoiningDescNode->bdbJoiningNodeEui64,Z_EXTADDR_LEN))
    559                {
    560                  //The device added is already in the list, refresh its time and do nothing else
    561                  tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
    562                  return ZSuccess;
    563                }
    564              }
    565              
    566              tempJoiningDescNode->nextDev = osal_mem_alloc(sizeof(bdb_joiningDeviceList_t));
    567              if(tempJoiningDescNode->nextDev == NULL)
    568              {
    569                return ZFailure;
    570              }
    571              
    572              tempJoiningDescNode = tempJoiningDescNode->nextDev;
    573            }
    574            
    575            if(pfnTCLinkKeyExchangeProcessCB)
    576            {
    577              bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
    578              osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
    579              bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_JOINING;
    580              
    581              bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
    582            }
    583            
    584            tempJoiningDescNode->nextDev = NULL;
    585            tempJoiningDescNode->NodeJoinTimeout = bdbAttributes.bdbTrustCenterNodeJoinTimeout;
    586            tempJoiningDescNode->parentAddr = parentAddr;
    587            osal_memcpy(tempJoiningDescNode->bdbJoiningNodeEui64, JoiningExtAddr, Z_EXTADDR_LEN);
    588            
    589            return ZSuccess;
    590          }
    591          
    592          /****************************************************************************
    593           * @fn          bdb_TCProcessJoiningList
    594           *
    595           * @brief       Process the timer to handle the joining devices if the TC link 
    596           *              key is mandatory for all devices
    597           *
    598           * @param       none
    599           *
    600           * @return      none
    601           */
    602          void bdb_TCProcessJoiningList(void)
    603          {
    604            bdb_joiningDeviceList_t* tempJoiningDescNode;
    605            
    606            if(bdb_joiningDeviceList)
    607            {
    608              tempJoiningDescNode = bdb_joiningDeviceList;
    609            
    610              while(tempJoiningDescNode)
    611              {
    612                if(tempJoiningDescNode->NodeJoinTimeout)
    613                {
    614                  tempJoiningDescNode->NodeJoinTimeout--;
    615                }
    616                
    617                if(tempJoiningDescNode->NodeJoinTimeout == 0)
    618                {
    619                  //Check if the key exchange is required 
    620                  if(bdb_doTrustCenterRequireKeyExchange())
    621                  {
    622                      AddrMgrEntry_t entry;
    623                      
    624                      entry.user = ADDRMGR_USER_DEFAULT;
    625                      osal_memcpy(entry.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
    626                      
    627                      if(AddrMgrEntryLookupExt(&entry))
    628                      {
    629                        ZDSecMgrAPSRemove(entry.nwkAddr,entry.extAddr,tempJoiningDescNode->parentAddr);
    630                      }
    631                  }
    632                  
    633                  //Expired device either is legacy device not using the TCLK entry or got 
    634                  //removed from the network because of timeout, eitherway it is not using
    635                  //TCLK entry neither the Security user in the address manager, so free the entry
    636                  //in both tables.
    637                  
    638                  uint16 keyNvIndex;
    639                  uint16 index;        
    640                  APSME_TCLKDevEntry_t TCLKDevEntry;
    641                  uint8 found;
    642                  
    643                  //Remove the entry in address manager
    644                  ZDSecMgrAddrClear(tempJoiningDescNode->bdbJoiningNodeEui64);
    645                  
    646                  //search for the entry in the TCLK table
    647                  keyNvIndex = APSME_SearchTCLinkKeyEntry(tempJoiningDescNode->bdbJoiningNodeEui64,&found, NULL);
    648                  
    649                  //If found, erase it.
    650                  if(found == TRUE)
    651                  {
    652                    osal_memset(&TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
    653                    TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
    654                    
    655                    //Increase the shift by one. Validate the maximum shift of the seed which is 15
    656                    index = keyNvIndex - ZCD_NV_TCLK_TABLE_START;
    657                    
    658                    TCLinkKeyFrmCntr[index].rxFrmCntr = 0;
    659                    TCLinkKeyFrmCntr[index].txFrmCntr = 0;
    660                    
    661                    //Update the entry
    662                    osal_nv_write(keyNvIndex,0,sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
    663                  }
    664                  
    665                  if(pfnTCLinkKeyExchangeProcessCB)
    666                  {
    667                    bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
    668                    osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
    669                    bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_EXCH_FAIL;
    670                    
    671                    bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
    672                  }
    673                 
    674                  //Free the device from the list
    675                  bdb_TCJoiningDeviceFree(tempJoiningDescNode);
    676                }
    677                tempJoiningDescNode = tempJoiningDescNode->nextDev;
    678              }
    679            }
    680          
    681            //we are done with the list
    682            if(bdb_joiningDeviceList == NULL)
    683            {
    684              osal_stop_timerEx(bdb_TaskID,BDB_TC_JOIN_TIMEOUT);
    685            }
    686          }
    687          
    688          
    689          
    690          /****************************************************************************
    691           * @fn          bdb_TCjoiningDeviceComplete
    692           *
    693           * @brief       This function frees a joining device from the list that has 
    694           *              finished TC link key exchange process
    695           *
    696           * @param       JoiningExtAddr - Extended address of the device
    697           *
    698           * @return      none
    699           */
    700          void bdb_TCjoiningDeviceComplete(uint8* JoiningExtAddr)
    701          {
    702            bdb_joiningDeviceList_t* tempJoiningDescNode;
    703            
    704            if((bdb_joiningDeviceList != NULL) && (JoiningExtAddr != NULL))
    705            {
    706              tempJoiningDescNode = bdb_joiningDeviceList;
    707              
    708              while(tempJoiningDescNode != NULL)
    709              {
    710                if(osal_memcmp(tempJoiningDescNode->bdbJoiningNodeEui64,JoiningExtAddr,Z_EXTADDR_LEN))
    711                {
    712                  if(pfnTCLinkKeyExchangeProcessCB)
    713                  {
    714                    bdb_TCLinkKeyExchProcess_t bdb_TCLinkKeyExchProcess;
    715                    osal_memcpy(bdb_TCLinkKeyExchProcess.extAddr,tempJoiningDescNode->bdbJoiningNodeEui64, Z_EXTADDR_LEN);
    716                    bdb_TCLinkKeyExchProcess.status = BDB_TC_LK_EXCH_PROCESS_EXCH_SUCCESS;
    717                    
    718                    bdb_SendMsg(bdb_TaskID, BDB_TC_LINK_KEY_EXCHANGE_PROCESS, BDB_MSG_EVENT_SUCCESS,sizeof(bdb_TCLinkKeyExchProcess_t),(uint8*)&bdb_TCLinkKeyExchProcess);
    719                  }        
    720                  
    721                  bdb_TCJoiningDeviceFree(tempJoiningDescNode);
    722                  break;
    723                }
    724                tempJoiningDescNode = tempJoiningDescNode->nextDev;
    725              }
    726             
    727              if(bdb_joiningDeviceList == NULL)
    728              {
    729                osal_stop_timerEx(bdb_TaskID,BDB_TC_JOIN_TIMEOUT);
    730              }
    731            }
    732          }
    733          
    734          
    735          
    736          /****************************************************************************
    737           * @fn          bdb_TCJoiningDeviceFree
    738           *
    739           * @brief       This function frees a joining device from the list.
    740           *
    741           * @param       ZSuccess - If the device was found and erased
    742           * @param       ZInvalidParameter - Not found
    743           *
    744           * @return      none
    745           */
    746          ZStatus_t bdb_TCJoiningDeviceFree(bdb_joiningDeviceList_t* JoiningDeviceToRemove)
    747          {
    748            bdb_joiningDeviceList_t* descCurrent;
    749            bdb_joiningDeviceList_t* descPrev;
    750            
    751            //validate empty list?
    752            
    753            //Is it the first?
    754            if(osal_memcmp(bdb_joiningDeviceList->bdbJoiningNodeEui64, JoiningDeviceToRemove->bdbJoiningNodeEui64, Z_EXTADDR_LEN))
    755            {
    756              descCurrent = bdb_joiningDeviceList;
    757              bdb_joiningDeviceList = bdb_joiningDeviceList->nextDev;
    758              osal_mem_free( descCurrent );
    759              return ZSuccess;
    760            }
    761            
    762            descPrev = NULL;
    763            descCurrent = bdb_joiningDeviceList;
    764            
    765            while(descCurrent != NULL)
    766            {
    767              if(osal_memcmp(descCurrent->nextDev->bdbJoiningNodeEui64, JoiningDeviceToRemove->bdbJoiningNodeEui64, Z_EXTADDR_LEN))
    768              {
    769                descPrev = descCurrent;
    770                break;
    771              }
    772              descCurrent = descCurrent->nextDev;
    773            }
    774            if(descPrev == NULL)
    775            {
    776              //Not found
    777              return ZInvalidParameter;
    778            }
    779            
    780            descPrev->nextDev = descPrev->nextDev->nextDev;
    781              
    782            osal_mem_free( JoiningDeviceToRemove );
    783            return ZSuccess;
    784          
    785          }
    786          
    787           /*********************************************************************
    788           * @fn          bdb_setJoinUsesInstallCodeKey
    789           *
    790           * @brief       Set BDB attribute bdbJoinUsesInstallCodeKey.
    791           *
    792           * @param       set - If TRUE only devices with IC register in TC can join the 
    793           *              nwk, otherwise devices may or not have a IC register
    794           *
    795           * @return      none
    796           */
    797          void bdb_setJoinUsesInstallCodeKey(bool set)
    798          {
    799            bdbAttributes.bdbJoinUsesInstallCodeKey = set;
    800            if(set)
    801            {
    802              zgAllowInstallCodes = ZG_IC_MUST_USED;
    803            }
    804            else
    805            {
    806              zgAllowInstallCodes = ZG_IC_SUPPORTED_NOT_REQUIRED;
    807            }
    808          }
    809          #endif
    810          
    811           /*********************************************************************
    812           * @fn          bdb_StartCommissioning
    813           *
    814           * @brief       Start the commissioning process setting the commissioning mode given.
    815           *
    816           * @param       mode - refer to bdbCommissioningMode
    817           *
    818           * @return      none
    819           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    820          void bdb_StartCommissioning(uint8 mode)
   \                     bdb_StartCommissioning:
    821          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
    822            //Application cannot request to set the device in initialization mode or parent lost
    823            mode &= ~(BDB_COMMISSIONING_MODE_INITIALIZATION | BDB_COMMISSIONING_MODE_PARENT_LOST);
   \   00000C   53..CF       ANL       ?V0,#0xcf
    824              
    825          #ifdef BDB_TL_INITIATOR
    826            if ( touchlinkFNReset == TRUE )
   \   00000F   90....       MOV       DPTR,#touchlinkFNReset
   \   000012   E0           MOVX      A,@DPTR
   \   000013   6401         XRL       A,#0x1
   \   000015   7003         JNZ       $+5
   \   000017   02....       LJMP      ??bdb_StartCommissioning_0 & 0xFFFF
    827            {
    828              return;
    829            }
    830          #else
    831            //Commissioning mode used only for initiator
    832            mode &= ~BDB_COMMISSIONING_MODE_INITIATOR_TL;
    833          #endif
    834            
    835          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==0)    
    836            //Commissioning mode used only for devices with F&B
    837            mode &= ~BDB_COMMISSIONING_MODE_FINDING_BINDING;
    838          #endif
    839           
    840            //If we have running process or the machine state is triggered, then just append and it will be excecuted
    841            if((bdbAttributes.bdbCommissioningMode) || (osal_get_timeoutEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE)))
   \   00001A   90....       MOV       DPTR,#bdbAttributes + 11
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   7012         JNZ       ??bdb_StartCommissioning_1
   \   000020                ; Setup parameters for call to function osal_get_timeoutEx
   \   000020   7A04         MOV       R2,#0x4
   \   000022   7B00         MOV       R3,#0x0
   \   000024   90....       MOV       DPTR,#bdb_TaskID
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F9           MOV       R1,A
   \   000029   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   00002C   EA           MOV       A,R2
   \   00002D   4B           ORL       A,R3
   \   00002E   4C           ORL       A,R4
   \   00002F   4D           ORL       A,R5
   \   000030   6032         JZ        ??bdb_StartCommissioning_2
    842            {
    843          #if ZG_BUILD_ENDDEVICE_TYPE
    844              if(ZG_DEVICE_ENDDEVICE_TYPE)
    845              {
    846                //Devices with parent lost are not allowed to perform actions
    847                if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)
   \                     ??bdb_StartCommissioning_1:
   \   000032   90....       MOV       DPTR,#bdbAttributes + 11
   \   000035   E0           MOVX      A,@DPTR
   \   000036   A2E5         MOV       C,0xE0 /* A   */.5
   \   000038   5003         JNC       $+5
   \   00003A   02....       LJMP      ??bdb_StartCommissioning_0 & 0xFFFF
    848                {
    849                  return;
    850                }
    851              }
    852          #endif
    853              
    854              //If we are on the network and got requested to do nwk steering, we do not need to wait other process, 
    855              // just send permit joining and report the application
    856              if((bdbAttributes.bdbNodeIsOnANetwork) && (mode & BDB_COMMISSIONING_MODE_NWK_STEERING))
   \   00003D   90....       MOV       DPTR,#bdbAttributes + 14
   \   000040   E0           MOVX      A,@DPTR
   \   000041   6013         JZ        ??bdb_StartCommissioning_3
   \   000043   E5..         MOV       A,?V0
   \   000045   A2E1         MOV       C,0xE0 /* A   */.1
   \   000047   500D         JNC       ??bdb_StartCommissioning_3
    857              {
    858                bdb_nwkSteeringDeviceOnNwk();
   \   000049                ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
   \   000049   12....       LCALL     `??bdb_nwkSteeringDeviceOnNwk::?relay`; Banked call to: bdb_nwkSteeringDeviceOnNwk
    859                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
   \   00004C                ; Setup parameters for call to function bdb_reportCommissioningState
   \   00004C   7A01         MOV       R2,#0x1
   \   00004E   7904         MOV       R1,#0x4
   \   000050   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    860                
    861                //Clean nwk steering
    862                mode ^= BDB_COMMISSIONING_MODE_NWK_STEERING; 
   \   000053   63..02       XRL       ?V0,#0x2
    863              }
    864              
    865              //add the remaining valid commissioning modes requested, those will be process when bdb finish its current process
    866              bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
   \                     ??bdb_StartCommissioning_3:
   \   000056   743F         MOV       A,#0x3f
   \   000058   55..         ANL       A,?V0
   \   00005A   F8           MOV       R0,A
   \   00005B   90....       MOV       DPTR,#bdbAttributes + 11
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   48           ORL       A,R0
   \   000060   F0           MOVX      @DPTR,A
    867              return;      
   \   000061   02....       LJMP      ??bdb_StartCommissioning_0 & 0xFFFF
    868            }
    869          
    870            //Save the commissioning modes valid requested
    871            bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
   \                     ??bdb_StartCommissioning_2:
   \   000064   743F         MOV       A,#0x3f
   \   000066   55..         ANL       A,?V0
   \   000068   F8           MOV       R0,A
   \   000069   90....       MOV       DPTR,#bdbAttributes + 11
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   48           ORL       A,R0
   \   00006E   F0           MOVX      @DPTR,A
    872            
    873            
    874            //Start processing the initialization, once per power cycle.
    875            if(!bdb_initialization)
   \   00006F   90....       MOV       DPTR,#bdb_initialization
   \   000072   E0           MOVX      A,@DPTR
   \   000073   6003         JZ        $+5
   \   000075   02....       LJMP      ??bdb_StartCommissioning_4 & 0xFFFF
    876            {
    877              bdb_initialization = TRUE;
   \   000078   90....       MOV       DPTR,#bdb_initialization
   \   00007B   7401         MOV       A,#0x1
   \   00007D   F0           MOVX      @DPTR,A
    878              
    879          #ifdef BDB_REPORTING
    880              //Delete NV data if startup was with factory reset
    881              if(ZDO_INITDEV_NEW_NETWORK_STATE == ZDApp_ReadNetworkRestoreState())
    882              {
    883                //Factory reset bdb reporting NV data
    884                uint16 attrRepNvLen = osal_nv_item_len( ZCD_NV_BDBREPORTINGCONFIG );
    885                if ( attrRepNvLen > 0 )
    886                {
    887                  osal_nv_delete( ZCD_NV_BDBREPORTINGCONFIG, attrRepNvLen );
    888                }
    889              }
    890          
    891              //Construct the Endpoint-cluster array
    892              bdb_RepConstructReportingData();
    893          #endif //BDB_REPORTING
    894              
    895              osal_nv_read(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
   \   00007E                ; Setup parameters for call to function osal_nv_read
   \   00007E   75....       MOV       ?V2,#(bdbAttributes + 14) & 0xff
   \   000081   75....       MOV       ?V3,#((bdbAttributes + 14) >> 8) & 0xff
   \   000084   78..         MOV       R0,#?V2
   \   000086   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000089   75..01       MOV       ?V2,#0x1
   \   00008C   75..00       MOV       ?V3,#0x0
   \   00008F   78..         MOV       R0,#?V2
   \   000091   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000094   7C00         MOV       R4,#0x0
   \   000096   7D00         MOV       R5,#0x0
   \   000098   7A55         MOV       R2,#0x55
   \   00009A   7B00         MOV       R3,#0x0
   \   00009C   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00009F   7404         MOV       A,#0x4
   \   0000A1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A4   E9           MOV       A,R1
    896              
    897              //Are we on a network
    898              if(bdbAttributes.bdbNodeIsOnANetwork == TRUE)
   \   0000A5   90....       MOV       DPTR,#bdbAttributes + 14
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   6401         XRL       A,#0x1
   \   0000AB   6003         JZ        $+5
   \   0000AD   02....       LJMP      ??bdb_StartCommissioning_4 & 0xFFFF
    899              {
    900          #ifdef ZG_BUILD_JOINING_TYPE
    901                //Only for joining devices validate the joining procedure
    902                if(ZG_DEVICE_JOINING_TYPE)
   \   0000B0   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000B3   E0           MOVX      A,@DPTR
   \   0000B4   6401         XRL       A,#0x1
   \   0000B6   600B         JZ        ??bdb_StartCommissioning_5
   \   0000B8   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000BB   E0           MOVX      A,@DPTR
   \   0000BC   6402         XRL       A,#0x2
   \   0000BE   6003         JZ        $+5
   \   0000C0   02....       LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
    903                {
    904                  //If we got into a network
    905                  if(!osal_isbufset( AIB_apsTrustCenterAddress, 0x00, Z_EXTADDR_LEN ))
   \                     ??bdb_StartCommissioning_5:
   \   0000C3                ; Setup parameters for call to function osal_isbufset
   \   0000C3   7C08         MOV       R4,#0x8
   \   0000C5   7900         MOV       R1,#0x0
   \   0000C7   90....       MOV       DPTR,#AIB_apsTrustCenterAddress
   \   0000CA   E0           MOVX      A,@DPTR
   \   0000CB   FA           MOV       R2,A
   \   0000CC   A3           INC       DPTR
   \   0000CD   E0           MOVX      A,@DPTR
   \   0000CE   FB           MOV       R3,A
   \   0000CF   12....       LCALL     `??osal_isbufset::?relay`; Banked call to: osal_isbufset
   \   0000D2   E9           MOV       A,R1
   \   0000D3   6003         JZ        $+5
   \   0000D5   02....       LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
    906                  {
    907                    //Which is not distributed
    908                    if(!APSME_IsDistributedSecurity())
   \   0000D8                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   0000D8   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   0000DB   E9           MOV       A,R1
   \   0000DC   6003         JZ        $+5
   \   0000DE   02....       LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
    909                    {
    910                      uint8 keyAttributes;
    911                      osal_nv_read(ZCD_NV_TCLK_TABLE_START, osal_offsetof(APSME_TCLKDevEntry_t,keyAttributes), sizeof(uint8), &keyAttributes);
   \   0000E1                ; Setup parameters for call to function osal_nv_read
   \   0000E1   A8..         MOV       R0,?XSP + 0
   \   0000E3   A9..         MOV       R1,?XSP + 1
   \   0000E5   88..         MOV       ?V2,R0
   \   0000E7   89..         MOV       ?V3,R1
   \   0000E9   78..         MOV       R0,#?V2
   \   0000EB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000EE   75..01       MOV       ?V2,#0x1
   \   0000F1   75..00       MOV       ?V3,#0x0
   \   0000F4   78..         MOV       R0,#?V2
   \   0000F6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F9   7C10         MOV       R4,#0x10
   \   0000FB   7D00         MOV       R5,#0x0
   \   0000FD   7A11         MOV       R2,#0x11
   \   0000FF   7B01         MOV       R3,#0x1
   \   000101   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000104   7404         MOV       A,#0x4
   \   000106   12....       LCALL     ?DEALLOC_XSTACK8
   \   000109   E9           MOV       A,R1
    912                      //If we must perform the TCLK exchange and we didn't complete it, then reset to FN
    913                      if(requestNewTrustCenterLinkKey && (keyAttributes != ZG_NON_R21_NWK_JOINED) && (keyAttributes != ZG_VERIFIED_KEY))
   \   00010A   90....       MOV       DPTR,#requestNewTrustCenterLinkKey
   \   00010D   E0           MOVX      A,@DPTR
   \   00010E   7003         JNZ       $+5
   \   000110   02....       LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
   \   000113   85..82       MOV       DPL,?XSP + 0
   \   000116   85..83       MOV       DPH,?XSP + 1
   \   000119   E0           MOVX      A,@DPTR
   \   00011A   64FD         XRL       A,#0xfd
   \   00011C   7003         JNZ       $+5
   \   00011E   02....       LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
   \   000121   85..82       MOV       DPL,?XSP + 0
   \   000124   85..83       MOV       DPH,?XSP + 1
   \   000127   E0           MOVX      A,@DPTR
   \   000128   6402         XRL       A,#0x2
   \   00012A   7003         JNZ       $+5
   \   00012C   02....       LJMP      ??bdb_StartCommissioning_6 & 0xFFFF
    914                      {
    915                        //Force to initialize the entry
    916                        APSME_TCLKDevEntry_t APSME_TCLKDevEntry;
    917                        
    918                        osal_memset(&APSME_TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
   \   00012F                ; Setup parameters for call to function osal_memset
   \   00012F   7C13         MOV       R4,#0x13
   \   000131   7D00         MOV       R5,#0x0
   \   000133   7900         MOV       R1,#0x0
   \   000135   7401         MOV       A,#0x1
   \   000137   12....       LCALL     ?XSTACK_DISP101_8
   \   00013A   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    919                        APSME_TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
   \   00013D   7411         MOV       A,#0x11
   \   00013F   12....       LCALL     ?XSTACK_DISP0_8
   \   000142   74FF         MOV       A,#-0x1
   \   000144   F0           MOVX      @DPTR,A
    920                        osal_nv_write(ZCD_NV_TCLK_TABLE_START, 0, sizeof(APSME_TCLKDevEntry_t), &APSME_TCLKDevEntry);
   \   000145                ; Setup parameters for call to function osal_nv_write
   \   000145   7401         MOV       A,#0x1
   \   000147   12....       LCALL     ?XSTACK_DISP100_8
   \   00014A   88..         MOV       ?V2,R0
   \   00014C   89..         MOV       ?V3,R1
   \   00014E   78..         MOV       R0,#?V2
   \   000150   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000153   75..13       MOV       ?V2,#0x13
   \   000156   75..00       MOV       ?V3,#0x0
   \   000159   78..         MOV       R0,#?V2
   \   00015B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00015E   7C00         MOV       R4,#0x0
   \   000160   7D00         MOV       R5,#0x0
   \   000162   7A11         MOV       R2,#0x11
   \   000164   7B01         MOV       R3,#0x1
   \   000166   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000169   7404         MOV       A,#0x4
   \   00016B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00016E   E9           MOV       A,R1
    921                        TCLinkKeyFrmCntr[0].txFrmCntr = 0;
   \   00016F   90....       MOV       DPTR,#TCLinkKeyFrmCntr
   \   000172   7400         MOV       A,#0x0
   \   000174   F0           MOVX      @DPTR,A
   \   000175   A3           INC       DPTR
   \   000176   7400         MOV       A,#0x0
   \   000178   F0           MOVX      @DPTR,A
   \   000179   A3           INC       DPTR
   \   00017A   7400         MOV       A,#0x0
   \   00017C   F0           MOVX      @DPTR,A
   \   00017D   A3           INC       DPTR
   \   00017E   7400         MOV       A,#0x0
   \   000180   F0           MOVX      @DPTR,A
    922                        TCLinkKeyFrmCntr[0].rxFrmCntr = 0;
   \   000181   90....       MOV       DPTR,#TCLinkKeyFrmCntr + 4
   \   000184   7400         MOV       A,#0x0
   \   000186   F0           MOVX      @DPTR,A
   \   000187   A3           INC       DPTR
   \   000188   7400         MOV       A,#0x0
   \   00018A   F0           MOVX      @DPTR,A
   \   00018B   A3           INC       DPTR
   \   00018C   7400         MOV       A,#0x0
   \   00018E   F0           MOVX      @DPTR,A
   \   00018F   A3           INC       DPTR
   \   000190   7400         MOV       A,#0x0
   \   000192   F0           MOVX      @DPTR,A
    923                        
    924                        
    925                        //reset the device parameters to FN
    926                        bdbAttributes.bdbNodeIsOnANetwork = FALSE;
   \   000193   90....       MOV       DPTR,#bdbAttributes + 14
   \   000196   7400         MOV       A,#0x0
   \   000198   F0           MOVX      @DPTR,A
    927                        osal_nv_write(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
   \   000199                ; Setup parameters for call to function osal_nv_write
   \   000199   75....       MOV       ?V2,#(bdbAttributes + 14) & 0xff
   \   00019C   75....       MOV       ?V3,#((bdbAttributes + 14) >> 8) & 0xff
   \   00019F   78..         MOV       R0,#?V2
   \   0001A1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A4   75..01       MOV       ?V2,#0x1
   \   0001A7   75..00       MOV       ?V3,#0x0
   \   0001AA   78..         MOV       R0,#?V2
   \   0001AC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001AF   7C00         MOV       R4,#0x0
   \   0001B1   7D00         MOV       R5,#0x0
   \   0001B3   7A55         MOV       R2,#0x55
   \   0001B5   7B00         MOV       R3,#0x0
   \   0001B7   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0001BA   7404         MOV       A,#0x4
   \   0001BC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001BF   E9           MOV       A,R1
    928                        zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
   \   0001C0                ; Setup parameters for call to function zgWriteStartupOptions
   \   0001C0   7A03         MOV       R2,#0x3
   \   0001C2   79FF         MOV       R1,#-0x1
   \   0001C4   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   \   0001C7   E9           MOV       A,R1
    929                        
    930                        //Then start the commissioning process requested
    931                        bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   0001C8   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0001CB   7400         MOV       A,#0x0
   \   0001CD   F0           MOVX      @DPTR,A
    932                        osal_set_event( bdb_TaskID, BDB_CHANGE_COMMISSIONING_STATE );
   \   0001CE                ; Setup parameters for call to function osal_set_event
   \   0001CE   7A04         MOV       R2,#0x4
   \   0001D0   7B00         MOV       R3,#0x0
   \   0001D2   90....       MOV       DPTR,#bdb_TaskID
   \   0001D5   E0           MOVX      A,@DPTR
   \   0001D6   F9           MOV       R1,A
   \   0001D7   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   0001DA   E9           MOV       A,R1
    933                        return;
   \   0001DB   805A         SJMP      ??bdb_StartCommissioning_0
    934                      }
    935                    }
    936                  }
    937                }
    938          #endif //ZG_BUILD_JOINING_TYPE
    939                
    940                //Set the initialization
    941                bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_INITIALIZATION;
   \                     ??bdb_StartCommissioning_6:
   \   0001DD   90....       MOV       DPTR,#bdbAttributes + 11
   \   0001E0   E0           MOVX      A,@DPTR
   \   0001E1   D2E4         SETB      0xE0 /* A   */.4
   \   0001E3   F0           MOVX      @DPTR,A
    942                bdbCommissioningProcedureState.bdbCommissioningState = BDB_INITIALIZATION;
   \   0001E4   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0001E7   7407         MOV       A,#0x7
   \   0001E9   F0           MOVX      @DPTR,A
    943                bdbAttributes.bdbCommissioningMode |= mode & BDB_COMMISSIONING_MODES;
   \   0001EA   743F         MOV       A,#0x3f
   \   0001EC   55..         ANL       A,?V0
   \   0001EE   F8           MOV       R0,A
   \   0001EF   90....       MOV       DPTR,#bdbAttributes + 11
   \   0001F2   E0           MOVX      A,@DPTR
   \   0001F3   48           ORL       A,R0
   \   0001F4   F0           MOVX      @DPTR,A
    944                
    945                if(ZDOInitDevice(0) == ZDO_INITDEV_RESTORED_NETWORK_STATE)
   \   0001F5                ; Setup parameters for call to function ZDOInitDeviceEx
   \   0001F5   7900         MOV       R1,#0x0
   \   0001F7   7A00         MOV       R2,#0x0
   \   0001F9   7B00         MOV       R3,#0x0
   \   0001FB   12....       LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
   \   0001FE   E9           MOV       A,R1
   \   0001FF   6036         JZ        ??bdb_StartCommissioning_0
    946                {
    947          #ifdef BDB_REPORTING
    948                  //Mark the clusterEndpoint entries that have binding, starts reporting if at least one entry was marked
    949                  bdb_RepUpdateMarkBindings();
    950          #endif
    951                  return;
    952                }
    953                bdb_setNodeIsOnANetwork(FALSE);  
   \   000201                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000201   7900         MOV       R1,#0x0
   \   000203   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
    954                //Not in the network
    955                bdb_reportCommissioningState(BDB_INITIALIZATION,FALSE);
   \   000206                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000206   7A00         MOV       R2,#0x0
   \   000208   7907         MOV       R1,#0x7
   \   00020A   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    956                return;
   \   00020D   8028         SJMP      ??bdb_StartCommissioning_0
    957              }
    958            }
    959          
    960            //Got requested only to initialize, if so, report that it failed
    961            if(bdbAttributes.bdbCommissioningMode == 0)
   \                     ??bdb_StartCommissioning_4:
   \   00020F   90....       MOV       DPTR,#bdbAttributes + 11
   \   000212   E0           MOVX      A,@DPTR
   \   000213   700F         JNZ       ??bdb_StartCommissioning_7
    962            {
    963              //Set the initialization state and report it to fail
    964              bdbCommissioningProcedureState.bdbCommissioningState = BDB_INITIALIZATION;
   \   000215   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000218   7407         MOV       A,#0x7
   \   00021A   F0           MOVX      @DPTR,A
    965              bdb_reportCommissioningState(BDB_INITIALIZATION,FALSE);
   \   00021B                ; Setup parameters for call to function bdb_reportCommissioningState
   \   00021B   7A00         MOV       R2,#0x0
   \   00021D   7907         MOV       R1,#0x7
   \   00021F   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    966              return;
   \   000222   8013         SJMP      ??bdb_StartCommissioning_0
    967            }
    968          
    969            
    970            //Start the commissioning process
    971            bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \                     ??bdb_StartCommissioning_7:
   \   000224   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000227   7400         MOV       A,#0x0
   \   000229   F0           MOVX      @DPTR,A
    972            osal_set_event( bdb_TaskID, BDB_CHANGE_COMMISSIONING_STATE );
   \   00022A                ; Setup parameters for call to function osal_set_event
   \   00022A   7A04         MOV       R2,#0x4
   \   00022C   7B00         MOV       R3,#0x0
   \   00022E   90....       MOV       DPTR,#bdb_TaskID
   \   000231   E0           MOVX      A,@DPTR
   \   000232   F9           MOV       R1,A
   \   000233   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000236   E9           MOV       A,R1
    973          }
   \                     ??bdb_StartCommissioning_0:
   \   000237   7414         MOV       A,#0x14
   \   000239   12....       LCALL     ?DEALLOC_XSTACK8
   \   00023C   7F04         MOV       R7,#0x4
   \   00023E   02....       LJMP      ?BANKED_LEAVE_XDATA
    974          
    975          
    976           /*********************************************************************
    977           * @fn          bdb_NotifyCommissioningModeStart
    978           *
    979           * @brief       Notify the user about a commissioning method just started
    980           *
    981           * @param       commissioningMode
    982           *
    983           * @return      none
    984           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    985          void bdb_NotifyCommissioningModeStart(uint8 commissioningMode)
   \                     bdb_NotifyCommissioningModeStart:
    986          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    987            bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
    988          
    989            bdbCommissioningModeMsg.bdbCommissioningMode = commissioningMode;
   \   00000C   EE           MOV       A,R6
   \   00000D   C0E0         PUSH      A
   \   00000F   7401         MOV       A,#0x1
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   D0E0         POP       A
   \   000016   F0           MOVX      @DPTR,A
    990            bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_IN_PROGRESS;
   \   000017   85..82       MOV       DPL,?XSP + 0
   \   00001A   85..83       MOV       DPH,?XSP + 1
   \   00001D   7401         MOV       A,#0x1
   \   00001F   F0           MOVX      @DPTR,A
    991            //Remaining commissioning modes are set just before the call to the application to avoid race conditions
    992          
    993            bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   \   000020                ; Setup parameters for call to function bdb_SendMsg
   \   000020   A8..         MOV       R0,?XSP + 0
   \   000022   A9..         MOV       R1,?XSP + 1
   \   000024   88..         MOV       ?V0,R0
   \   000026   89..         MOV       ?V1,R1
   \   000028   78..         MOV       R0,#?V0
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   7C03         MOV       R4,#0x3
   \   00002F   7B00         MOV       R3,#0x0
   \   000031   7A0A         MOV       R2,#0xa
   \   000033   90....       MOV       DPTR,#bdb_TaskID
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F9           MOV       R1,A
   \   000038   12....       LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
   \   00003B   7402         MOV       A,#0x2
   \   00003D   12....       LCALL     ?DEALLOC_XSTACK8
    994          }
   \   000040   7403         MOV       A,#0x3
   \   000042   12....       LCALL     ?DEALLOC_XSTACK8
   \   000045   7F02         MOV       R7,#0x2
   \   000047   02....       LJMP      ?BANKED_LEAVE_XDATA
    995          
    996          
    997          
    998          #if (ZG_BUILD_JOINING_TYPE)
    999           /*********************************************************************
   1000           * @fn          bdb_setNodeJoinLinkKeyType
   1001           *
   1002           * @brief       Set the key type in use in the network joined. Global centralized key is used by default
   1003           *
   1004           * @param       none
   1005           *
   1006           * @return      none
   1007           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1008          void bdb_setNodeJoinLinkKeyType(uint8 KeyType)
   \                     bdb_setNodeJoinLinkKeyType:
   1009          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1010            bdbAttributes.bdbNodeJoinLinkKeyType = KeyType;
   \   000004   E9           MOV       A,R1
   \   000005   90....       MOV       DPTR,#bdbAttributes + 15
   \   000008   F0           MOVX      @DPTR,A
   1011          }
   \   000009   D083         POP       DPH
   \   00000B   D082         POP       DPL
   \   00000D   02....       LJMP      ?BRET
   1012          #endif
   1013          
   1014           /*********************************************************************
   1015           * @fn          bdb_setFN
   1016           *
   1017           * @brief       Set configuration for FN. This FN configuration will be perfome 
   1018           *              upon call to ZDOInitDevice
   1019           *
   1020           * @param       none
   1021           *
   1022           * @return      none
   1023           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1024          void bdb_setFN(void)
   \                     bdb_setFN:
   1025          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1026            bdb_setNodeIsOnANetwork(FALSE);
   \   000004                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000004   7900         MOV       R1,#0x0
   \   000006   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
   1027          
   1028          #if defined ( INTER_PAN ) && defined ( BDB_TL_INITIATOR )
   1029              touchLink_InitFreeRanges( TRUE );
   \   000009                ; Setup parameters for call to function touchLink_InitFreeRanges
   \   000009   7901         MOV       R1,#0x1
   \   00000B   12....       LCALL     `??touchLink_InitFreeRanges::?relay`; Banked call to: touchLink_InitFreeRanges
   1030              touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
   \   00000E                ; Setup parameters for call to function touchLink_UpdateNV
   \   00000E   7902         MOV       R1,#0x2
   \   000010   12....       LCALL     `??touchLink_UpdateNV::?relay`; Banked call to: touchLink_UpdateNV
   1031          #endif
   1032          #if defined ( INTER_PAN ) && defined ( BDB_TL_TARGET ) 
   1033              touchLink_InitFreeRanges( FALSE );
   1034              touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
   1035          #endif
   1036          
   1037            //Set the device as factory new
   1038            zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
   \   000013                ; Setup parameters for call to function zgWriteStartupOptions
   \   000013   7A03         MOV       R2,#0x3
   \   000015   79FF         MOV       R1,#-0x1
   \   000017   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   \   00001A   E9           MOV       A,R1
   1039          }
   \   00001B   D083         POP       DPH
   \   00001D   D082         POP       DPL
   \   00001F   02....       LJMP      ?BRET
   1040          
   1041           /*********************************************************************
   1042           * @fn          bdb_resetLocalAction
   1043           *
   1044           * @brief       Application interface to perform BDB Reset to FN.
   1045           *
   1046           * @param       none
   1047           *
   1048           * @return      none
   1049           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1050          void bdb_resetLocalAction(void)
   \                     bdb_resetLocalAction:
   1051          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 5
   \   000004   74FB         MOV       A,#-0x5
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   1052            //Process reset as nwk leave if the device is on the network and is able to process it
   1053            if((ZG_BUILD_JOINING_TYPE) && (bdbAttributes.bdbNodeIsOnANetwork) && (!(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)))
   \   000009   90....       MOV       DPTR,#bdbAttributes + 14
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6022         JZ        ??bdb_resetLocalAction_0
   \   00000F   90....       MOV       DPTR,#bdbAttributes + 11
   \   000012   E0           MOVX      A,@DPTR
   \   000013   A2E5         MOV       C,0xE0 /* A   */.5
   \   000015   401A         JC        ??bdb_resetLocalAction_0
   1054            {
   1055              NLME_LeaveReq_t leaveReq;
   1056              // Set every field to 0
   1057              osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
   \   000017                ; Setup parameters for call to function osal_memset
   \   000017   7C05         MOV       R4,#0x5
   \   000019   7D00         MOV       R5,#0x0
   \   00001B   7900         MOV       R1,#0x0
   \   00001D   AA..         MOV       R2,?XSP + 0
   \   00001F   AB..         MOV       R3,?XSP + 1
   \   000021   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1058              
   1059              bdb_setFN();
   \   000024                ; Setup parameters for call to function bdb_setFN
   \   000024   12....       LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
   1060                
   1061              NLME_LeaveReq( &leaveReq );
   \   000027                ; Setup parameters for call to function NLME_LeaveReq
   \   000027   AA..         MOV       R2,?XSP + 0
   \   000029   AB..         MOV       R3,?XSP + 1
   \   00002B   12....       LCALL     `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   00002E   E9           MOV       A,R1
   1062              
   1063              return;
   \   00002F   800A         SJMP      ??bdb_resetLocalAction_1
   1064            }
   1065            else
   1066            {
   1067              bdb_setFN();
   \                     ??bdb_resetLocalAction_0:
   \   000031                ; Setup parameters for call to function bdb_setFN
   \   000031   12....       LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
   1068              
   1069              ZDApp_ResetTimerStart( 500 );
   \   000034                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000034   7AF4         MOV       R2,#-0xc
   \   000036   7B01         MOV       R3,#0x1
   \   000038   12....       LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   1070            }
   1071          }
   \                     ??bdb_resetLocalAction_1:
   \   00003B   7405         MOV       A,#0x5
   \   00003D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000040   D083         POP       DPH
   \   000042   D082         POP       DPL
   \   000044   02....       LJMP      ?BRET
   1072          
   1073          
   1074           /*********************************************************************
   1075           * @fn          bdb_parentLost
   1076           *
   1077           * @brief       Notify bdb that connection with parent is lost
   1078           *
   1079           * @return      none
   1080           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1081          void bdb_parentLost(void)
   \                     bdb_parentLost:
   1082          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV       A,#-0x1
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   1083          #if ZG_BUILD_ENDDEVICE_TYPE
   1084            if(ZG_DEVICE_ENDDEVICE_TYPE)
   1085            {
   1086              while(pBDBListNwk)
   \                     ??bdb_parentLost_0:
   \   000009   90....       MOV       DPTR,#pBDBListNwk
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F8           MOV       R0,A
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F9           MOV       R1,A
   \   000011   E8           MOV       A,R0
   \   000012   49           ORL       A,R1
   \   000013   600E         JZ        ??bdb_parentLost_1
   1087              {
   1088                bdb_nwkDescFree(pBDBListNwk);
   \   000015                ; Setup parameters for call to function bdb_nwkDescFree
   \   000015   90....       MOV       DPTR,#pBDBListNwk
   \   000018   E0           MOVX      A,@DPTR
   \   000019   FA           MOV       R2,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   FB           MOV       R3,A
   \   00001D   12....       LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
   \   000020   E9           MOV       A,R1
   \   000021   80E6         SJMP      ??bdb_parentLost_0
   1089              }
   1090              
   1091              nwk_desc_list_free();  
   \                     ??bdb_parentLost_1:
   \   000023                ; Setup parameters for call to function nwk_desc_list_free
   \   000023   12....       LCALL     `??nwk_desc_list_free::?relay`; Banked call to: nwk_desc_list_free
   1092              if(bdbCommissioningProcedureState.bdbCommissioningState != BDB_PARENT_LOST)
   \   000026   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   6408         XRL       A,#0x8
   \   00002C   6019         JZ        ??bdb_parentLost_2
   1093              {
   1094                //If parent lost during TCLK exchange, then report TCLK exchange fail
   1095                if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE)
   \   00002E   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000031   E0           MOVX      A,@DPTR
   \   000032   6401         XRL       A,#0x1
   \   000034   7009         JNZ       ??bdb_parentLost_3
   1096                {
   1097                  bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, FALSE);
   \   000036                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000036   7A00         MOV       R2,#0x0
   \   000038   7901         MOV       R1,#0x1
   \   00003A   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   1098                  return;
   \   00003D   8030         SJMP      ??bdb_parentLost_4
   1099                }
   1100                bdbCommissioningProcedureState.bdb_ParentLostSavedState = bdbCommissioningProcedureState.bdbCommissioningState;
   \                     ??bdb_parentLost_3:
   \   00003F   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000042   E0           MOVX      A,@DPTR
   \   000043   90....       MOV       DPTR,#bdbCommissioningProcedureState + 3
   \   000046   F0           MOVX      @DPTR,A
   1101                
   1102              }
   1103              bdbCommissioningProcedureState.bdbCommissioningState = BDB_PARENT_LOST;
   \                     ??bdb_parentLost_2:
   \   000047   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00004A   7408         MOV       A,#0x8
   \   00004C   F0           MOVX      @DPTR,A
   1104              NLME_OrphanStateSet();
   \   00004D                ; Setup parameters for call to function NLME_OrphanStateSet
   \   00004D   12....       LCALL     `??NLME_OrphanStateSet::?relay`; Banked call to: NLME_OrphanStateSet
   1105              ZDApp_ChangeState( DEV_NWK_ORPHAN );
   \   000050                ; Setup parameters for call to function ZDApp_ChangeState
   \   000050   790A         MOV       R1,#0xa
   \   000052   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1106              
   1107              // turn receiver off while in orphan state
   1108              byte temp = FALSE;
   \   000055   85..82       MOV       DPL,?XSP + 0
   \   000058   85..83       MOV       DPH,?XSP + 1
   \   00005B   7400         MOV       A,#0x0
   \   00005D   F0           MOVX      @DPTR,A
   1109              ZMacSetReq(ZMacRxOnIdle, &temp);
   \   00005E                ; Setup parameters for call to function ZMacSetReq
   \   00005E   AA..         MOV       R2,?XSP + 0
   \   000060   AB..         MOV       R3,?XSP + 1
   \   000062   7952         MOV       R1,#0x52
   \   000064   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000067   E9           MOV       A,R1
   1110              
   1111              bdb_reportCommissioningState(BDB_PARENT_LOST,FALSE);
   \   000068                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000068   7A00         MOV       R2,#0x0
   \   00006A   7908         MOV       R1,#0x8
   \   00006C   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   1112            }
   1113          #endif
   1114          }
   \                     ??bdb_parentLost_4:
   \   00006F   7401         MOV       A,#0x1
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
   \   000074   D083         POP       DPH
   \   000076   D082         POP       DPL
   \   000078   02....       LJMP      ?BRET
   1115          
   1116          
   1117          
   1118          
   1119          
   1120           /*********************************************************************
   1121           * @fn          bdb_NetworkRestoredResumeState
   1122           *
   1123           * @brief       Restore the state of child device after parent lost
   1124           *
   1125           * @return      none
   1126           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1127          void bdb_NetworkRestoredResumeState(void)
   \                     bdb_NetworkRestoredResumeState:
   1128          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1129          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)   
   1130          #if ZG_BUILD_ENDDEVICE_TYPE
   1131            if(ZG_DEVICE_ENDDEVICE_TYPE)
   1132            {
   1133              uint8 restoreSimpleDesc = FALSE;
   \   000005   7E00         MOV       R6,#0x0
   1134              //If restored when F&B still enabled, then restore the simple descriptors attempts
   1135              if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
   \   000007   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   6406         XRL       A,#0x6
   \   00000D   7041         JNZ       ??bdb_NetworkRestoredResumeState_0
   1136              {
   1137                bdbFindingBindingRespondent_t  *pRespondentTemp = NULL;
   \   00000F   7800         MOV       R0,#0x0
   \   000011   7900         MOV       R1,#0x0
   1138                
   1139                pRespondentTemp = pRespondentHead;
   \   000013   90....       MOV       DPTR,#pRespondentHead
   \   000016   E0           MOVX      A,@DPTR
   \   000017   FA           MOV       R2,A
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FB           MOV       R3,A
   \   00001B   EA           MOV       A,R2
   \   00001C   F8           MOV       R0,A
   \   00001D   EB           MOV       A,R3
   \   00001E   F9           MOV       R1,A
   1140                
   1141                while(pRespondentTemp != NULL)
   \                     ??bdb_NetworkRestoredResumeState_1:
   \   00001F   E8           MOV       A,R0
   \   000020   49           ORL       A,R1
   \   000021   602D         JZ        ??bdb_NetworkRestoredResumeState_0
   1142                {
   1143                  if(pRespondentTemp->attempts & FINDING_AND_BINDING_PARENT_LOST)
   \   000023   E8           MOV       A,R0
   \   000024   240C         ADD       A,#0xc
   \   000026   F582         MOV       DPL,A
   \   000028   E4           CLR       A
   \   000029   39           ADDC      A,R1
   \   00002A   F583         MOV       DPH,A
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   A2E6         MOV       C,0xE0 /* A   */.6
   \   00002F   500F         JNC       ??bdb_NetworkRestoredResumeState_2
   1144                  {
   1145                    pRespondentTemp->attempts &= ~FINDING_AND_BINDING_PARENT_LOST;
   \   000031   E8           MOV       A,R0
   \   000032   240C         ADD       A,#0xc
   \   000034   F582         MOV       DPL,A
   \   000036   E4           CLR       A
   \   000037   39           ADDC      A,R1
   \   000038   F583         MOV       DPH,A
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   C2E6         CLR       0xE0 /* A   */.6
   \   00003D   F0           MOVX      @DPTR,A
   1146                    restoreSimpleDesc = TRUE;
   \   00003E   7E01         MOV       R6,#0x1
   1147                  }
   1148                  pRespondentTemp = pRespondentTemp->pNext;
   \                     ??bdb_NetworkRestoredResumeState_2:
   \   000040   E8           MOV       A,R0
   \   000041   240F         ADD       A,#0xf
   \   000043   F582         MOV       DPL,A
   \   000045   E4           CLR       A
   \   000046   39           ADDC      A,R1
   \   000047   F583         MOV       DPH,A
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   F8           MOV       R0,A
   \   00004B   A3           INC       DPTR
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   F9           MOV       R1,A
   \   00004E   80CF         SJMP      ??bdb_NetworkRestoredResumeState_1
   1149                }
   1150              }
   1151              if(restoreSimpleDesc)
   \                     ??bdb_NetworkRestoredResumeState_0:
   \   000050   EE           MOV       A,R6
   \   000051   6018         JZ        ??bdb_NetworkRestoredResumeState_3
   1152              {
   1153                //Restore the simple Descriptor sending after 1 second of restoring the network
   1154                osal_start_timerEx(bdb_TaskID,BDB_RESPONDENT_PROCESS_TIMEOUT, 1000);
   \   000053                ; Setup parameters for call to function osal_start_timerEx
   \   000053   90....       MOV       DPTR,#__Constant_3e8
   \   000056   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000059   7A00         MOV       R2,#0x0
   \   00005B   7B40         MOV       R3,#0x40
   \   00005D   90....       MOV       DPTR,#bdb_TaskID
   \   000060   E0           MOVX      A,@DPTR
   \   000061   F9           MOV       R1,A
   \   000062   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000065   7404         MOV       A,#0x4
   \   000067   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006A   E9           MOV       A,R1
   1155              }
   1156            }
   1157          #endif
   1158          #endif
   1159          }
   \                     ??bdb_NetworkRestoredResumeState_3:
   \   00006B   7F01         MOV       R7,#0x1
   \   00006D   02....       LJMP      ?BANKED_LEAVE_XDATA
   1160          
   1161          #if ZG_BUILD_ENDDEVICE_TYPE
   1162           /*********************************************************************
   1163           * @fn          bdb_ZedAttemptRecoverNwk
   1164           *
   1165           * @brief       Instruct the ZED to try to rejoin its previews network
   1166           *
   1167           * @return      success if the attempt is being excecuted
   1168           *              False if device do not have nwk parameters to perform this action
   1169           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1170          uint8 bdb_ZedAttemptRecoverNwk(void)
   \                     bdb_ZedAttemptRecoverNwk:
   1171          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1172            if(ZG_DEVICE_ENDDEVICE_TYPE)
   1173            {
   1174              if(bdbAttributes.bdbNodeIsOnANetwork)
   \   000004   90....       MOV       DPTR,#bdbAttributes + 14
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6018         JZ        ??bdb_ZedAttemptRecoverNwk_0
   1175              {
   1176                if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST)
   \   00000A   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   6408         XRL       A,#0x8
   \   000010   7010         JNZ       ??bdb_ZedAttemptRecoverNwk_0
   1177                {
   1178                  if(ZDOInitDevice(0) == ZDO_INITDEV_RESTORED_NETWORK_STATE)
   \   000012                ; Setup parameters for call to function ZDOInitDeviceEx
   \   000012   7900         MOV       R1,#0x0
   \   000014   7A00         MOV       R2,#0x0
   \   000016   7B00         MOV       R3,#0x0
   \   000018   12....       LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
   \   00001B   E9           MOV       A,R1
   \   00001C   7004         JNZ       ??bdb_ZedAttemptRecoverNwk_0
   1179                  {
   1180                    return ZSuccess;
   \   00001E   7900         MOV       R1,#0x0
   \   000020   8002         SJMP      ??bdb_ZedAttemptRecoverNwk_1
   1181                  }
   1182                }
   1183              }
   1184            }
   1185            return ZFailure;
   \                     ??bdb_ZedAttemptRecoverNwk_0:
   \   000022   7901         MOV       R1,#0x1
   \                     ??bdb_ZedAttemptRecoverNwk_1:
   \   000024   D083         POP       DPH
   \   000026   D082         POP       DPL
   \   000028   02....       LJMP      ?BRET
   1186          }
   1187          
   1188          #endif
   1189          
   1190           /*********************************************************************
   1191           * @fn          bdb_reportCommissioningState
   1192           *
   1193           * @brief       Process the result of a BDB main state attempt.
   1194           *
   1195           * @param       bdbCommissioningState - MainState that is issuing fail
   1196           * @param       didSuccess - TRUE if the main state were success, FALSE otherwise
   1197           *
   1198           * @return      none
   1199           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1200          void bdb_reportCommissioningState(uint8 bdbCommissioningState,bool didSuccess)
   \                     bdb_reportCommissioningState:
   1201          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EA           MOV       A,R2
   \   00000D   FF           MOV       R7,A
   1202            bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
   1203            //Process only if we are in that state, or if we are on parent lost and processing F&B
   1204            if((bdbCommissioningProcedureState.bdbCommissioningState == bdbCommissioningState)
   1205               || ((bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST) && (bdbCommissioningProcedureState.bdb_ParentLostSavedState == BDB_COMMISSIONING_STATE_FINDING_BINDING)))
   \   00000E   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000011   E0           MOVX      A,@DPTR
   \   000012   6E           XRL       A,R6
   \   000013   6016         JZ        ??bdb_reportCommissioningState_0
   \   000015   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000018   E0           MOVX      A,@DPTR
   \   000019   6408         XRL       A,#0x8
   \   00001B   6003         JZ        $+5
   \   00001D   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   \   000020   90....       MOV       DPTR,#bdbCommissioningProcedureState + 3
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6406         XRL       A,#0x6
   \   000026   6003         JZ        $+5
   \   000028   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   1206            {
   1207              switch(bdbCommissioningState)
   \                     ??bdb_reportCommissioningState_0:
   \   00002B   EE           MOV       A,R6
   \   00002C   14           DEC       A
   \   00002D   7003         JNZ       $+5
   \   00002F   02....       LJMP      ??bdb_reportCommissioningState_2 & 0xFFFF
   \   000032   14           DEC       A
   \   000033   7003         JNZ       $+5
   \   000035   02....       LJMP      ??bdb_reportCommissioningState_3 & 0xFFFF
   \   000038   14           DEC       A
   \   000039   6021         JZ        ??bdb_reportCommissioningState_4
   \   00003B   14           DEC       A
   \   00003C   7003         JNZ       $+5
   \   00003E   02....       LJMP      ??bdb_reportCommissioningState_5 & 0xFFFF
   \   000041   14           DEC       A
   \   000042   7003         JNZ       $+5
   \   000044   02....       LJMP      ??bdb_reportCommissioningState_6 & 0xFFFF
   \   000047   14           DEC       A
   \   000048   7003         JNZ       $+5
   \   00004A   02....       LJMP      ??bdb_reportCommissioningState_7 & 0xFFFF
   \   00004D   14           DEC       A
   \   00004E   7003         JNZ       $+5
   \   000050   02....       LJMP      ??bdb_reportCommissioningState_8 & 0xFFFF
   \   000053   14           DEC       A
   \   000054   7003         JNZ       $+5
   \   000056   02....       LJMP      ??bdb_reportCommissioningState_9 & 0xFFFF
   \   000059   02....       LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
   1208              {
   1209          #if (ZG_BUILD_JOINING_TYPE)
   1210                case BDB_COMMISSIONING_STATE_JOINING:
   1211                  if(ZG_DEVICE_JOINING_TYPE)
   \                     ??bdb_reportCommissioningState_4:
   \   00005C   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   6401         XRL       A,#0x1
   \   000062   600B         JZ        ??bdb_reportCommissioningState_11
   \   000064   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000067   E0           MOVX      A,@DPTR
   \   000068   6402         XRL       A,#0x2
   \   00006A   6003         JZ        $+5
   \   00006C   02....       LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
   1212                  {
   1213                    //Prepare for the next state or commissioning mode to be excecuted
   1214                    osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
   \                     ??bdb_reportCommissioningState_11:
   \   00006F                ; Setup parameters for call to function osal_start_timerEx
   \   00006F   90....       MOV       DPTR,#__Constant_32
   \   000072   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000075   7A04         MOV       R2,#0x4
   \   000077   7B00         MOV       R3,#0x0
   \   000079   90....       MOV       DPTR,#bdb_TaskID
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   F9           MOV       R1,A
   \   00007E   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000081   7404         MOV       A,#0x4
   \   000083   12....       LCALL     ?DEALLOC_XSTACK8
   \   000086   E9           MOV       A,R1
   1215          
   1216                    if(didSuccess)
   \   000087   EF           MOV       A,R7
   \   000088   602C         JZ        ??bdb_reportCommissioningState_12
   1217                    {
   1218                      //Next state is TC link key exchange
   1219                      bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE;
   \   00008A   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00008D   7401         MOV       A,#0x1
   \   00008F   F0           MOVX      @DPTR,A
   1220                      //Free the list of nwk discovered
   1221                      while(pBDBListNwk)
   \                     ??bdb_reportCommissioningState_13:
   \   000090   90....       MOV       DPTR,#pBDBListNwk
   \   000093   E0           MOVX      A,@DPTR
   \   000094   F8           MOV       R0,A
   \   000095   A3           INC       DPTR
   \   000096   E0           MOVX      A,@DPTR
   \   000097   F9           MOV       R1,A
   \   000098   E8           MOV       A,R0
   \   000099   49           ORL       A,R1
   \   00009A   600E         JZ        ??bdb_reportCommissioningState_14
   1222                      {
   1223                        bdb_nwkDescFree(pBDBListNwk);
   \   00009C                ; Setup parameters for call to function bdb_nwkDescFree
   \   00009C   90....       MOV       DPTR,#pBDBListNwk
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   FA           MOV       R2,A
   \   0000A1   A3           INC       DPTR
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   FB           MOV       R3,A
   \   0000A4   12....       LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
   \   0000A7   E9           MOV       A,R1
   \   0000A8   80E6         SJMP      ??bdb_reportCommissioningState_13
   1224                      }
   1225                      
   1226                      //Set the poll rate of the ZED joining device to 1 second to allow TCLK 
   1227                      //exchange be perfomed successfully in cases in which application has a 
   1228                      //slow pollrate
   1229                      NLME_SetPollRate(TCLK_POLL_RATE);
   \                     ??bdb_reportCommissioningState_14:
   \   0000AA                ; Setup parameters for call to function NLME_SetPollRate
   \   0000AA   90....       MOV       DPTR,#__Constant_3e8
   \   0000AD   12....       LCALL     ?XLOAD_R2345
   \   0000B0   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1230                      
   1231                      //No notification in this step
   1232                      return;
   \   0000B3   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   1233                    } 
   1234                    else
   1235                    {
   1236                      uint8 temp = FALSE;
   \                     ??bdb_reportCommissioningState_12:
   \   0000B6   7403         MOV       A,#0x3
   \   0000B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BB   7400         MOV       A,#0x0
   \   0000BD   F0           MOVX      @DPTR,A
   1237                      //If fail, then restore poll rate
   1238                      NLME_SetPollRate(POLL_RATE);
   \   0000BE                ; Setup parameters for call to function NLME_SetPollRate
   \   0000BE   90....       MOV       DPTR,#__Constant_0
   \   0000C1   12....       LCALL     ?XLOAD_R2345
   \   0000C4   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1239                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   \   0000C7   90....       MOV       DPTR,#bdbAttributes + 10
   \   0000CA   7402         MOV       A,#0x2
   \   0000CC   F0           MOVX      @DPTR,A
   1240                      bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
   \   0000CD   7401         MOV       A,#0x1
   \   0000CF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D2   7401         MOV       A,#0x1
   \   0000D4   F0           MOVX      @DPTR,A
   1241                      bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   0000D5   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0000D8   7400         MOV       A,#0x0
   \   0000DA   F0           MOVX      @DPTR,A
   1242                      bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_STEERING;
   \   0000DB   90....       MOV       DPTR,#bdbAttributes + 11
   \   0000DE   E0           MOVX      A,@DPTR
   \   0000DF   C2E1         CLR       0xE0 /* A   */.1
   \   0000E1   F0           MOVX      @DPTR,A
   1243                      
   1244                      //Turn off the radio
   1245                      ZMacSetReq(ZMacRxOnIdle, &temp);
   \   0000E2                ; Setup parameters for call to function ZMacSetReq
   \   0000E2   7403         MOV       A,#0x3
   \   0000E4   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E7   7952         MOV       R1,#0x52
   \   0000E9   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   0000EC   E9           MOV       A,R1
   1246                      //Set the device to FN, to start as new for subsequent attempts
   1247                      bdb_setFN();
   \   0000ED                ; Setup parameters for call to function bdb_setFN
   \   0000ED   12....       LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
   1248                      NLME_ResetRequest();
   \   0000F0                ; Setup parameters for call to function NLME_ResetRequest
   \   0000F0   12....       LCALL     `??NLME_ResetRequest::?relay`; Banked call to: NLME_ResetRequest
   \   0000F3   E9           MOV       A,R1
   1249                      ZDApp_ChangeState( DEV_HOLD );
   \   0000F4                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000F4   7900         MOV       R1,#0x0
   \   0000F6   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1250                      
   1251                      //Free the list of nwk discovered
   1252                      while(pBDBListNwk)
   \                     ??bdb_reportCommissioningState_15:
   \   0000F9   90....       MOV       DPTR,#pBDBListNwk
   \   0000FC   E0           MOVX      A,@DPTR
   \   0000FD   F8           MOV       R0,A
   \   0000FE   A3           INC       DPTR
   \   0000FF   E0           MOVX      A,@DPTR
   \   000100   F9           MOV       R1,A
   \   000101   E8           MOV       A,R0
   \   000102   49           ORL       A,R1
   \   000103   600E         JZ        ??bdb_reportCommissioningState_16
   1253                      {
   1254                        bdb_nwkDescFree(pBDBListNwk);
   \   000105                ; Setup parameters for call to function bdb_nwkDescFree
   \   000105   90....       MOV       DPTR,#pBDBListNwk
   \   000108   E0           MOVX      A,@DPTR
   \   000109   FA           MOV       R2,A
   \   00010A   A3           INC       DPTR
   \   00010B   E0           MOVX      A,@DPTR
   \   00010C   FB           MOV       R3,A
   \   00010D   12....       LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
   \   000110   E9           MOV       A,R1
   \   000111   80E6         SJMP      ??bdb_reportCommissioningState_15
   1255                      }
   1256                    }
   1257                  }
   1258                break;
   \                     ??bdb_reportCommissioningState_16:
   \   000113   02....       LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
   1259          
   1260                case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
   1261                  if(ZG_DEVICE_JOINING_TYPE)
   \                     ??bdb_reportCommissioningState_2:
   \   000116   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000119   E0           MOVX      A,@DPTR
   \   00011A   6401         XRL       A,#0x1
   \   00011C   6008         JZ        ??bdb_reportCommissioningState_17
   \   00011E   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000121   E0           MOVX      A,@DPTR
   \   000122   6402         XRL       A,#0x2
   \   000124   707B         JNZ       ??bdb_reportCommissioningState_18
   1262                  {
   1263                    if(didSuccess)
   \                     ??bdb_reportCommissioningState_17:
   \   000126   EF           MOV       A,R7
   \   000127   603F         JZ        ??bdb_reportCommissioningState_19
   1264                    {
   1265                      //Clear any setting that would set the device as FN
   1266                      zgWriteStartupOptions(ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);            
   \   000129                ; Setup parameters for call to function zgWriteStartupOptions
   \   000129   7A03         MOV       R2,#0x3
   \   00012B   7900         MOV       R1,#0x0
   \   00012D   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   \   000130   E9           MOV       A,R1
   1267                      
   1268                      //Next state is nwk steering on the nwk (permit joining)
   1269                      bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_STEERING_ON_NWK;
   \   000131   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000134   7404         MOV       A,#0x4
   \   000136   F0           MOVX      @DPTR,A
   1270                      osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE, 50);
   \   000137                ; Setup parameters for call to function osal_start_timerEx
   \   000137   90....       MOV       DPTR,#__Constant_32
   \   00013A   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00013D   7A04         MOV       R2,#0x4
   \   00013F   7B00         MOV       R3,#0x0
   \   000141   90....       MOV       DPTR,#bdb_TaskID
   \   000144   E0           MOVX      A,@DPTR
   \   000145   F9           MOV       R1,A
   \   000146   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000149   7404         MOV       A,#0x4
   \   00014B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00014E   E9           MOV       A,R1
   1271                      
   1272                      //Set the poll rate to the application default after TCLK success
   1273                      NLME_SetPollRate(POLL_RATE);
   \   00014F                ; Setup parameters for call to function NLME_SetPollRate
   \   00014F   90....       MOV       DPTR,#__Constant_0
   \   000152   12....       LCALL     ?XLOAD_R2345
   \   000155   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1274          
   1275                      osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT );
   \   000158                ; Setup parameters for call to function osal_stop_timerEx
   \   000158   7A00         MOV       R2,#0x0
   \   00015A   7B10         MOV       R3,#0x10
   \   00015C   90....       MOV       DPTR,#bdb_TaskID
   \   00015F   E0           MOVX      A,@DPTR
   \   000160   F9           MOV       R1,A
   \   000161   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000164   E9           MOV       A,R1
   1276                      //No notification to the user is needed
   1277                      return;
   \   000165   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   1278                    }
   1279                    else
   1280                    {
   1281                      bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
   \                     ??bdb_reportCommissioningState_19:
   \   000168   7401         MOV       A,#0x1
   \   00016A   12....       LCALL     ?XSTACK_DISP0_8
   \   00016D   7401         MOV       A,#0x1
   \   00016F   F0           MOVX      @DPTR,A
   1282                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_TCLK_EX_FAILURE;
   \   000170   90....       MOV       DPTR,#bdbAttributes + 10
   \   000173   7407         MOV       A,#0x7
   \   000175   F0           MOVX      @DPTR,A
   1283                      
   1284                      osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT);
   \   000176                ; Setup parameters for call to function osal_stop_timerEx
   \   000176   7A00         MOV       R2,#0x0
   \   000178   7B10         MOV       R3,#0x10
   \   00017A   90....       MOV       DPTR,#bdb_TaskID
   \   00017D   E0           MOVX      A,@DPTR
   \   00017E   F9           MOV       R1,A
   \   00017F   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000182   E9           MOV       A,R1
   1285                     
   1286                      //No process shall be attempted after this fail
   1287                      bdbAttributes.bdbCommissioningMode = 0;
   \   000183   90....       MOV       DPTR,#bdbAttributes + 11
   \   000186   7400         MOV       A,#0x0
   \   000188   F0           MOVX      @DPTR,A
   1288                      
   1289                      //Fill the context for the user notification
   1290                      osal_start_timerEx(bdb_TaskID,BDB_TC_LINK_KEY_EXCHANGE_FAIL,BDB_TC_LINK_KEY_EXCHANGE_FAIL_LEAVE_TIMEOUT);
   \   000189                ; Setup parameters for call to function osal_start_timerEx
   \   000189   90....       MOV       DPTR,#__Constant_1388
   \   00018C   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00018F   7A02         MOV       R2,#0x2
   \   000191   7B00         MOV       R3,#0x0
   \   000193   90....       MOV       DPTR,#bdb_TaskID
   \   000196   E0           MOVX      A,@DPTR
   \   000197   F9           MOV       R1,A
   \   000198   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00019B   7404         MOV       A,#0x4
   \   00019D   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001A0   E9           MOV       A,R1
   1291                    }
   1292                  }
   1293                break;
   \                     ??bdb_reportCommissioningState_18:
   \   0001A1   02....       LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
   1294          #endif
   1295                
   1296                case BDB_COMMISSIONING_STATE_STEERING_ON_NWK:
   1297                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_NWK_STEERING;
   \                     ??bdb_reportCommissioningState_5:
   \   0001A4   7401         MOV       A,#0x1
   \   0001A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A9   7401         MOV       A,#0x1
   \   0001AB   F0           MOVX      @DPTR,A
   1298                  if(didSuccess)
   \   0001AC   EF           MOV       A,R7
   \   0001AD   600B         JZ        ??bdb_reportCommissioningState_20
   1299                  {
   1300                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \   0001AF   90....       MOV       DPTR,#bdbAttributes + 10
   \   0001B2   7400         MOV       A,#0x0
   \   0001B4   F0           MOVX      @DPTR,A
   1301                    
   1302          #if (ZG_BUILD_RTR_TYPE)          
   1303                    //Update ZDApp state
   1304                    if(ZG_DEVICE_RTRONLY_TYPE)
   1305                    {          
   1306                      ZDApp_ChangeState( DEV_ROUTER );
   1307                    }
   1308          #endif
   1309          #if (ZG_BUILD_ENDDEVICE_TYPE)
   1310                    if(ZG_DEVICE_ENDDEVICE_TYPE)
   1311                    {
   1312                      ZDApp_ChangeState( DEV_END_DEVICE );
   \   0001B5                ; Setup parameters for call to function ZDApp_ChangeState
   \   0001B5   7906         MOV       R1,#0x6
   \   0001B7   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1313                    }
   1314          #endif
   1315                  }
   1316          #if (ZG_BUILD_COORDINATOR_TYPE)
   1317                  else
   1318                  {
   1319                    if(ZG_DEVICE_COORDINATOR_TYPE)
   1320                    {
   1321                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   1322                    }
   1323                  }
   1324          #endif
   1325                  
   1326                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \                     ??bdb_reportCommissioningState_20:
   \   0001BA   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0001BD   7400         MOV       A,#0x0
   \   0001BF   F0           MOVX      @DPTR,A
   1327                  osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
   \   0001C0                ; Setup parameters for call to function osal_start_timerEx
   \   0001C0   90....       MOV       DPTR,#__Constant_32
   \   0001C3   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0001C6   7A04         MOV       R2,#0x4
   \   0001C8   7B00         MOV       R3,#0x0
   \   0001CA   90....       MOV       DPTR,#bdb_TaskID
   \   0001CD   E0           MOVX      A,@DPTR
   \   0001CE   F9           MOV       R1,A
   \   0001CF   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0001D2   7404         MOV       A,#0x4
   \   0001D4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001D7   E9           MOV       A,R1
   1328                  bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_STEERING;
   \   0001D8   90....       MOV       DPTR,#bdbAttributes + 11
   \   0001DB   E0           MOVX      A,@DPTR
   \   0001DC   C2E1         CLR       0xE0 /* A   */.1
   \   0001DE   F0           MOVX      @DPTR,A
   1329                break;
   \   0001DF   02....       LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
   1330                
   1331                case BDB_COMMISSIONING_STATE_FORMATION:
   1332                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FORMATION;
   \                     ??bdb_reportCommissioningState_6:
   \   0001E2   7401         MOV       A,#0x1
   \   0001E4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E7   7402         MOV       A,#0x2
   \   0001E9   F0           MOVX      @DPTR,A
   1333          
   1334                  if(didSuccess)
   \   0001EA   EF           MOV       A,R7
   \   0001EB   6010         JZ        ??bdb_reportCommissioningState_21
   1335                  {
   1336                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \   0001ED   90....       MOV       DPTR,#bdbAttributes + 10
   \   0001F0   7400         MOV       A,#0x0
   \   0001F2   F0           MOVX      @DPTR,A
   1337          
   1338                    //Clear any setting that would set the device as FN
   1339                    zgWriteStartupOptions(ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE | ZCD_STARTOPT_DEFAULT_NETWORK_STATE);          
   \   0001F3                ; Setup parameters for call to function zgWriteStartupOptions
   \   0001F3   7A03         MOV       R2,#0x3
   \   0001F5   7900         MOV       R1,#0x0
   \   0001F7   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   \   0001FA   E9           MOV       A,R1
   \   0001FB   8006         SJMP      ??bdb_reportCommissioningState_22
   1340                    
   1341                     //Update ZDApp State
   1342          #if (ZG_BUILD_RTR_TYPE)
   1343                    if(ZG_DEVICE_RTRONLY_TYPE)
   1344                    {          
   1345                      ZDApp_ChangeState( DEV_ROUTER );
   1346                    }
   1347          #endif    
   1348          #if (ZG_BUILD_COORDINATOR_TYPE)
   1349                    if(ZG_DEVICE_COORDINATOR_TYPE)
   1350                    {          
   1351                      ZDApp_ChangeState( DEV_ZB_COORD );
   1352                    }     
   1353          #endif
   1354                  }
   1355                  else
   1356                  {
   1357                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_FORMATION_FAILURE;
   \                     ??bdb_reportCommissioningState_21:
   \   0001FD   90....       MOV       DPTR,#bdbAttributes + 10
   \   000200   7408         MOV       A,#0x8
   \   000202   F0           MOVX      @DPTR,A
   1358                    //If not on the nwk, then restart the nwk parameters
   1359          #if (ZG_BUILD_RTR_TYPE)
   1360                    if(ZG_DEVICE_RTR_TYPE)
   1361                    {           
   1362                      if(!bdbAttributes.bdbNodeIsOnANetwork)
   1363                      {
   1364                        uint8 temp = FALSE;
   1365                        //Turn off the radio
   1366                        ZMacSetReq(ZMacRxOnIdle, &temp);
   1367                        //Set the device to FN, to start as new for subsequent attempts
   1368                        bdb_setFN();
   1369                        NLME_ResetRequest();
   1370                        ZDApp_ChangeState( DEV_HOLD );
   1371                      }
   1372                    }
   1373          #endif
   1374                  }
   1375                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \                     ??bdb_reportCommissioningState_22:
   \   000203   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000206   7400         MOV       A,#0x0
   \   000208   F0           MOVX      @DPTR,A
   1376                  osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
   \   000209                ; Setup parameters for call to function osal_start_timerEx
   \   000209   90....       MOV       DPTR,#__Constant_32
   \   00020C   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00020F   7A04         MOV       R2,#0x4
   \   000211   7B00         MOV       R3,#0x0
   \   000213   90....       MOV       DPTR,#bdb_TaskID
   \   000216   E0           MOVX      A,@DPTR
   \   000217   F9           MOV       R1,A
   \   000218   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00021B   7404         MOV       A,#0x4
   \   00021D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000220   E9           MOV       A,R1
   1377                  bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_NWK_FORMATION;
   \   000221   90....       MOV       DPTR,#bdbAttributes + 11
   \   000224   E0           MOVX      A,@DPTR
   \   000225   C2E2         CLR       0xE0 /* A   */.2
   \   000227   F0           MOVX      @DPTR,A
   1378                break;  
   \   000228   02....       LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
   1379                
   1380          
   1381                case BDB_COMMISSIONING_STATE_FINDING_BINDING:
   1382          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
   1383                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
   \                     ??bdb_reportCommissioningState_7:
   \   00022B   7401         MOV       A,#0x1
   \   00022D   12....       LCALL     ?XSTACK_DISP0_8
   \   000230   7403         MOV       A,#0x3
   \   000232   F0           MOVX      @DPTR,A
   1384          
   1385                  //Do not notify the status if we have another identify to send
   1386                  if(bdbAttributes.bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \   000233   90....       MOV       DPTR,#bdbAttributes + 10
   \   000236   E0           MOVX      A,@DPTR
   \   000237   7006         JNZ       ??bdb_reportCommissioningState_23
   1387                  {
   1388                    //Success at least once during F&B as initiator, mark it
   1389                    bdb_FBStateSuccessLatch = TRUE;
   \   000239   90....       MOV       DPTR,#bdb_FBStateSuccessLatch
   \   00023C   7401         MOV       A,#0x1
   \   00023E   F0           MOVX      @DPTR,A
   1390                  }        
   1391                  
   1392                  //Will we process another indentify?
   1393                  if(((FINDING_AND_BINDING_PERIODIC_ENABLE == FALSE) || (bdb_FB_InitiatorCurrentCyclesNumber == 0)) && (bdb_getRespondentRetry(pRespondentHead) == NULL) && (osal_get_timeoutEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT) == 0))
   \                     ??bdb_reportCommissioningState_23:
   \   00023F   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   000242   E0           MOVX      A,@DPTR
   \   000243   6003         JZ        $+5
   \   000245   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   \   000248                ; Setup parameters for call to function bdb_getRespondentRetry
   \   000248   90....       MOV       DPTR,#pRespondentHead
   \   00024B   E0           MOVX      A,@DPTR
   \   00024C   FA           MOV       R2,A
   \   00024D   A3           INC       DPTR
   \   00024E   E0           MOVX      A,@DPTR
   \   00024F   FB           MOV       R3,A
   \   000250   12....       LCALL     `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
   \   000253   8A..         MOV       ?V0,R2
   \   000255   8B..         MOV       ?V1,R3
   \   000257   E5..         MOV       A,?V0
   \   000259   45..         ORL       A,?V1
   \   00025B   6003         JZ        $+5
   \   00025D   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   \   000260                ; Setup parameters for call to function osal_get_timeoutEx
   \   000260   7A00         MOV       R2,#0x0
   \   000262   7B40         MOV       R3,#0x40
   \   000264   90....       MOV       DPTR,#bdb_TaskID
   \   000267   E0           MOVX      A,@DPTR
   \   000268   F9           MOV       R1,A
   \   000269   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   00026C   EA           MOV       A,R2
   \   00026D   4B           ORL       A,R3
   \   00026E   4C           ORL       A,R4
   \   00026F   4D           ORL       A,R5
   \   000270   6003         JZ        $+5
   \   000272   02....       LJMP      ??bdb_reportCommissioningState_1 & 0xFFFF
   1394                  {
   1395                    // Dealocate respondent list and clean all the F&B process
   1396                    pRespondentCurr = NULL;
   \   000275   90....       MOV       DPTR,#pRespondentCurr
   \   000278   7400         MOV       A,#0x0
   \   00027A   F0           MOVX      @DPTR,A
   \   00027B   A3           INC       DPTR
   \   00027C   7400         MOV       A,#0x0
   \   00027E   F0           MOVX      @DPTR,A
   1397                    pRespondentNext = NULL;
   \   00027F   90....       MOV       DPTR,#pRespondentNext
   \   000282   7400         MOV       A,#0x0
   \   000284   F0           MOVX      @DPTR,A
   \   000285   A3           INC       DPTR
   \   000286   7400         MOV       A,#0x0
   \   000288   F0           MOVX      @DPTR,A
   1398                    bdb_zclRespondentListClean( &pRespondentHead );
   \   000289                ; Setup parameters for call to function bdb_zclRespondentListClean
   \   000289   7A..         MOV       R2,#pRespondentHead & 0xff
   \   00028B   7B..         MOV       R3,#(pRespondentHead >> 8) & 0xff
   \   00028D   12....       LCALL     `??bdb_zclRespondentListClean::?relay`; Banked call to: bdb_zclRespondentListClean
   1399                    osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
   \   000290                ; Setup parameters for call to function osal_stop_timerEx
   \   000290   7A00         MOV       R2,#0x0
   \   000292   7B40         MOV       R3,#0x40
   \   000294   90....       MOV       DPTR,#bdb_TaskID
   \   000297   E0           MOVX      A,@DPTR
   \   000298   F9           MOV       R1,A
   \   000299   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   00029C   E9           MOV       A,R1
   1400                    
   1401                    //Report success if in any of the attempts we got success, regardless that we did receive no rsp on the last attempt
   1402                    if(bdb_FBStateSuccessLatch && (bdbAttributes.bdbCommissioningStatus == BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE))
   \   00029D   90....       MOV       DPTR,#bdb_FBStateSuccessLatch
   \   0002A0   E0           MOVX      A,@DPTR
   \   0002A1   600E         JZ        ??bdb_reportCommissioningState_24
   \   0002A3   90....       MOV       DPTR,#bdbAttributes + 10
   \   0002A6   E0           MOVX      A,@DPTR
   \   0002A7   640B         XRL       A,#0xb
   \   0002A9   7006         JNZ       ??bdb_reportCommissioningState_24
   1403                    {
   1404                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \   0002AB   90....       MOV       DPTR,#bdbAttributes + 10
   \   0002AE   7400         MOV       A,#0x0
   \   0002B0   F0           MOVX      @DPTR,A
   1405                    }
   1406                    
   1407                    //Set default state
   1408                    bdb_FBStateSuccessLatch = FALSE;
   \                     ??bdb_reportCommissioningState_24:
   \   0002B1   90....       MOV       DPTR,#bdb_FBStateSuccessLatch
   \   0002B4   7400         MOV       A,#0x0
   \   0002B6   F0           MOVX      @DPTR,A
   1409                    
   1410                    //Resume BDB machine state only if we were in F&B, if we were on parent lost, only clean the commissioning mode and remove from bdb_ParentLostSavedState
   1411                    if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
   \   0002B7   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0002BA   E0           MOVX      A,@DPTR
   \   0002BB   6406         XRL       A,#0x6
   \   0002BD   7020         JNZ       ??bdb_reportCommissioningState_25
   1412                    {
   1413                      bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   0002BF   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0002C2   7400         MOV       A,#0x0
   \   0002C4   F0           MOVX      @DPTR,A
   1414                      osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50); 
   \   0002C5                ; Setup parameters for call to function osal_start_timerEx
   \   0002C5   90....       MOV       DPTR,#__Constant_32
   \   0002C8   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0002CB   7A04         MOV       R2,#0x4
   \   0002CD   7B00         MOV       R3,#0x0
   \   0002CF   90....       MOV       DPTR,#bdb_TaskID
   \   0002D2   E0           MOVX      A,@DPTR
   \   0002D3   F9           MOV       R1,A
   \   0002D4   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0002D7   7404         MOV       A,#0x4
   \   0002D9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002DC   E9           MOV       A,R1
   \   0002DD   800E         SJMP      ??bdb_reportCommissioningState_26
   1415                    }
   1416                    else if(bdbCommissioningProcedureState.bdb_ParentLostSavedState == BDB_COMMISSIONING_STATE_FINDING_BINDING)
   \                     ??bdb_reportCommissioningState_25:
   \   0002DF   90....       MOV       DPTR,#bdbCommissioningProcedureState + 3
   \   0002E2   E0           MOVX      A,@DPTR
   \   0002E3   6406         XRL       A,#0x6
   \   0002E5   7006         JNZ       ??bdb_reportCommissioningState_26
   1417                    {
   1418                      bdbCommissioningProcedureState.bdb_ParentLostSavedState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   0002E7   90....       MOV       DPTR,#bdbCommissioningProcedureState + 3
   \   0002EA   7400         MOV       A,#0x0
   \   0002EC   F0           MOVX      @DPTR,A
   1419                    }
   1420                    
   1421                    bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_FINDING_BINDING;
   \                     ??bdb_reportCommissioningState_26:
   \   0002ED   90....       MOV       DPTR,#bdbAttributes + 11
   \   0002F0   E0           MOVX      A,@DPTR
   \   0002F1   C2E3         CLR       0xE0 /* A   */.3
   \   0002F3   F0           MOVX      @DPTR,A
   1422                  }
   1423                  else
   1424                  {
   1425                    return;
   1426                  }
   1427          
   1428          #endif
   1429                break;     
   \   0002F4   02....       LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
   1430                case BDB_COMMISSIONING_STATE_TL:
   1431                  // Set NWK task to run
   1432                  nwk_setStateIdle( FALSE );
   \                     ??bdb_reportCommissioningState_3:
   \   0002F7                ; Setup parameters for call to function nwk_setStateIdle
   \   0002F7   7900         MOV       R1,#0x0
   \   0002F9   12....       LCALL     `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
   1433                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_TOUCHLINK;
   \   0002FC   7401         MOV       A,#0x1
   \   0002FE   12....       LCALL     ?XSTACK_DISP0_8
   \   000301   7404         MOV       A,#0x4
   \   000303   F0           MOVX      @DPTR,A
   1434                  if(didSuccess)
   \   000304   EF           MOV       A,R7
   \   000305   6011         JZ        ??bdb_reportCommissioningState_27
   1435                  {
   1436                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \   000307   90....       MOV       DPTR,#bdbAttributes + 10
   \   00030A   7400         MOV       A,#0x0
   \   00030C   F0           MOVX      @DPTR,A
   1437                    bdbAttributes.bdbCommissioningMode = BDB_COMMISSIONING_MODE_IDDLE;
   \   00030D   90....       MOV       DPTR,#bdbAttributes + 11
   \   000310   7400         MOV       A,#0x0
   \   000312   F0           MOVX      @DPTR,A
   1438                    
   1439                    //Update ZDApp state
   1440          #if (ZG_BUILD_RTR_TYPE)
   1441                    if(ZG_DEVICE_RTRONLY_TYPE)
   1442                    {          
   1443                      ZDApp_ChangeState( DEV_ROUTER );
   1444                    }
   1445          #endif
   1446          #if (ZG_BUILD_ENDDEVICE_TYPE)
   1447                    if(ZG_DEVICE_ENDDEVICE_TYPE)
   1448                    {
   1449                      ZDApp_ChangeState( DEV_END_DEVICE );
   \   000313                ; Setup parameters for call to function ZDApp_ChangeState
   \   000313   7906         MOV       R1,#0x6
   \   000315   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1450                    }
   1451          #endif          
   1452                  }
   1453                  //The fail status is already set from the calling function to report commissioning process
   1454                  
   1455                  // The commissioning FAIL status is set before calling the bdb_reportCommissioningState
   1456                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \                     ??bdb_reportCommissioningState_27:
   \   000318   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00031B   7400         MOV       A,#0x0
   \   00031D   F0           MOVX      @DPTR,A
   1457                  osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50); 
   \   00031E                ; Setup parameters for call to function osal_start_timerEx
   \   00031E   90....       MOV       DPTR,#__Constant_32
   \   000321   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000324   7A04         MOV       R2,#0x4
   \   000326   7B00         MOV       R3,#0x0
   \   000328   90....       MOV       DPTR,#bdb_TaskID
   \   00032B   E0           MOVX      A,@DPTR
   \   00032C   F9           MOV       R1,A
   \   00032D   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000330   7404         MOV       A,#0x4
   \   000332   12....       LCALL     ?DEALLOC_XSTACK8
   \   000335   E9           MOV       A,R1
   1458                  //Clear the event
   1459                  bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_INITIATOR_TL;
   \   000336   90....       MOV       DPTR,#bdbAttributes + 11
   \   000339   E0           MOVX      A,@DPTR
   \   00033A   C2E0         CLR       0xE0 /* A   */.0
   \   00033C   F0           MOVX      @DPTR,A
   1460                  
   1461                break;
   \   00033D   02....       LJMP      ??bdb_reportCommissioningState_10 & 0xFFFF
   1462                
   1463                case BDB_INITIALIZATION:
   1464                  //Notify user about successfull initialization
   1465                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_INITIALIZATION;
   \                     ??bdb_reportCommissioningState_8:
   \   000340   7401         MOV       A,#0x1
   \   000342   12....       LCALL     ?XSTACK_DISP0_8
   \   000345   7400         MOV       A,#0x0
   \   000347   F0           MOVX      @DPTR,A
   1466                  if(didSuccess)
   \   000348   EF           MOV       A,R7
   \   000349   6045         JZ        ??bdb_reportCommissioningState_28
   1467                  {
   1468                    //Update ZDApp state
   1469          #if (ZG_BUILD_COORDINATOR_TYPE)
   1470                    if(ZG_DEVICE_COORDINATOR_TYPE)
   1471                    {          
   1472                      ZDApp_ChangeState( DEV_ZB_COORD );
   1473                    }
   1474          #endif          
   1475          #if (ZG_BUILD_ENDDEVICE_TYPE)
   1476                    if(ZG_DEVICE_ENDDEVICE_TYPE)
   1477                    {
   1478                      uint32 pollrate = POLL_RATE;
   \   00034B   75..00       MOV       ?V0,#0x0
   \   00034E   75..00       MOV       ?V1,#0x0
   \   000351   75..00       MOV       ?V2,#0x0
   \   000354   75..00       MOV       ?V3,#0x0
   1479                      NLME_SetPollRate(pollrate);
   \   000357                ; Setup parameters for call to function NLME_SetPollRate
   \   000357   AA..         MOV       R2,?V0
   \   000359   AB..         MOV       R3,?V1
   \   00035B   AC..         MOV       R4,?V2
   \   00035D   AD..         MOV       R5,?V3
   \   00035F   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1480                      ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
   \   000362                ; Setup parameters for call to function ZDApp_ChangeState
   \   000362   7904         MOV       R1,#0x4
   \   000364   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1481                      
   1482                    }
   1483          #endif          
   1484                    ZDApp_RestoreNwkSecMaterial();
   \   000367                ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
   \   000367   12....       LCALL     `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
   1485                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NETWORK_RESTORED;
   \   00036A   90....       MOV       DPTR,#bdbAttributes + 10
   \   00036D   740D         MOV       A,#0xd
   \   00036F   F0           MOVX      @DPTR,A
   1486                    bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   000370   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000373   7400         MOV       A,#0x0
   \   000375   F0           MOVX      @DPTR,A
   1487                    osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,200);
   \   000376                ; Setup parameters for call to function osal_start_timerEx
   \   000376   90....       MOV       DPTR,#__Constant_c8
   \   000379   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00037C   7A04         MOV       R2,#0x4
   \   00037E   7B00         MOV       R3,#0x0
   \   000380   90....       MOV       DPTR,#bdb_TaskID
   \   000383   E0           MOVX      A,@DPTR
   \   000384   F9           MOV       R1,A
   \   000385   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000388   7404         MOV       A,#0x4
   \   00038A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00038D   E9           MOV       A,R1
   \   00038E   8020         SJMP      ??bdb_reportCommissioningState_29
   1488                  }
   1489                  else
   1490                  {
   1491          #if (ZG_BUILD_ENDDEVICE_TYPE)                   
   1492                    if(ZG_DEVICE_ENDDEVICE_TYPE)
   1493                    {
   1494                      if(bdb_isDeviceNonFactoryNew())
   \                     ??bdb_reportCommissioningState_28:
   \   000390                ; Setup parameters for call to function bdb_isDeviceNonFactoryNew
   \   000390   12....       LCALL     `??bdb_isDeviceNonFactoryNew::?relay`; Banked call to: bdb_isDeviceNonFactoryNew
   \   000393   E9           MOV       A,R1
   \   000394   6014         JZ        ??bdb_reportCommissioningState_30
   1495                      {
   1496                        //Notify the user about losing parent
   1497                        bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_PARENT_LOST;
   \   000396   7401         MOV       A,#0x1
   \   000398   12....       LCALL     ?XSTACK_DISP0_8
   \   00039B   7405         MOV       A,#0x5
   \   00039D   F0           MOVX      @DPTR,A
   1498                        bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_PARENT_LOST;
   \   00039E   90....       MOV       DPTR,#bdbAttributes + 11
   \   0003A1   E0           MOVX      A,@DPTR
   \   0003A2   D2E5         SETB      0xE0 /* A   */.5
   \   0003A4   F0           MOVX      @DPTR,A
   1499                        
   1500                        //Update ZDApp state
   1501                        ZDApp_ChangeState( DEV_NWK_ORPHAN );
   \   0003A5                ; Setup parameters for call to function ZDApp_ChangeState
   \   0003A5   790A         MOV       R1,#0xa
   \   0003A7   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1502                      }
   1503                    }
   1504          #endif
   1505                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   \                     ??bdb_reportCommissioningState_30:
   \   0003AA   90....       MOV       DPTR,#bdbAttributes + 10
   \   0003AD   7402         MOV       A,#0x2
   \   0003AF   F0           MOVX      @DPTR,A
   1506                  }
   1507                  bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_INITIALIZATION;
   \                     ??bdb_reportCommissioningState_29:
   \   0003B0   90....       MOV       DPTR,#bdbAttributes + 11
   \   0003B3   E0           MOVX      A,@DPTR
   \   0003B4   C2E4         CLR       0xE0 /* A   */.4
   \   0003B6   F0           MOVX      @DPTR,A
   1508          
   1509                break;
   \   0003B7   805D         SJMP      ??bdb_reportCommissioningState_10
   1510          #if (ZG_BUILD_ENDDEVICE_TYPE)     
   1511                case BDB_PARENT_LOST:
   1512                  bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_PARENT_LOST;
   \                     ??bdb_reportCommissioningState_9:
   \   0003B9   7401         MOV       A,#0x1
   \   0003BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0003BE   7405         MOV       A,#0x5
   \   0003C0   F0           MOVX      @DPTR,A
   1513                  if(ZG_DEVICE_ENDDEVICE_TYPE)
   1514                  {
   1515                    if(didSuccess)
   \   0003C1   EF           MOV       A,R7
   \   0003C2   603C         JZ        ??bdb_reportCommissioningState_31
   1516                    {
   1517                      uint32 pollrate = POLL_RATE;
   \   0003C4   75..00       MOV       ?V0,#0x0
   \   0003C7   75..00       MOV       ?V1,#0x0
   \   0003CA   75..00       MOV       ?V2,#0x0
   \   0003CD   75..00       MOV       ?V3,#0x0
   1518                      bdbCommissioningProcedureState.bdbCommissioningState = bdbCommissioningProcedureState.bdb_ParentLostSavedState;  
   \   0003D0   90....       MOV       DPTR,#bdbCommissioningProcedureState + 3
   \   0003D3   E0           MOVX      A,@DPTR
   \   0003D4   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0003D7   F0           MOVX      @DPTR,A
   1519                      bdbCommissioningProcedureState.bdb_ParentLostSavedState = 0;
   \   0003D8   90....       MOV       DPTR,#bdbCommissioningProcedureState + 3
   \   0003DB   7400         MOV       A,#0x0
   \   0003DD   F0           MOVX      @DPTR,A
   1520                      NLME_SetPollRate(pollrate);
   \   0003DE                ; Setup parameters for call to function NLME_SetPollRate
   \   0003DE   AA..         MOV       R2,?V0
   \   0003E0   AB..         MOV       R3,?V1
   \   0003E2   AC..         MOV       R4,?V2
   \   0003E4   AD..         MOV       R5,?V3
   \   0003E6   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1521                      bdbAttributes.bdbCommissioningMode &= ~BDB_COMMISSIONING_MODE_PARENT_LOST;
   \   0003E9   90....       MOV       DPTR,#bdbAttributes + 11
   \   0003EC   E0           MOVX      A,@DPTR
   \   0003ED   C2E5         CLR       0xE0 /* A   */.5
   \   0003EF   F0           MOVX      @DPTR,A
   1522                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NETWORK_RESTORED;
   \   0003F0   90....       MOV       DPTR,#bdbAttributes + 10
   \   0003F3   740D         MOV       A,#0xd
   \   0003F5   F0           MOVX      @DPTR,A
   1523                      //Update ZDApp state
   1524                      ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
   \   0003F6                ; Setup parameters for call to function ZDApp_ChangeState
   \   0003F6   7904         MOV       R1,#0x4
   \   0003F8   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1525                      
   1526                      bdb_NetworkRestoredResumeState();
   \   0003FB                ; Setup parameters for call to function bdb_NetworkRestoredResumeState
   \   0003FB   12....       LCALL     `??bdb_NetworkRestoredResumeState::?relay`; Banked call to: bdb_NetworkRestoredResumeState
   \   0003FE   8016         SJMP      ??bdb_reportCommissioningState_10
   1527                    }
   1528                    else
   1529                    {
   1530                      bdbAttributes.bdbCommissioningMode |= BDB_COMMISSIONING_MODE_PARENT_LOST;
   \                     ??bdb_reportCommissioningState_31:
   \   000400   90....       MOV       DPTR,#bdbAttributes + 11
   \   000403   E0           MOVX      A,@DPTR
   \   000404   D2E5         SETB      0xE0 /* A   */.5
   \   000406   F0           MOVX      @DPTR,A
   1531                      bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   \   000407   90....       MOV       DPTR,#bdbAttributes + 10
   \   00040A   7402         MOV       A,#0x2
   \   00040C   F0           MOVX      @DPTR,A
   1532                      
   1533                      NLME_SetPollRate(0);
   \   00040D                ; Setup parameters for call to function NLME_SetPollRate
   \   00040D   90....       MOV       DPTR,#__Constant_0
   \   000410   12....       LCALL     ?XLOAD_R2345
   \   000413   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1534                      
   1535                    }
   1536                  }
   1537                break;
   1538          #endif
   1539              }
   1540          #ifdef MT_APP_CNF_FUNC
   1541              //Notify the user about the status, the main state which has failed
   1542              bdbCommissioningModeMsg.bdbCommissioningStatus = bdbAttributes.bdbCommissioningStatus;
   1543              
   1544              bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   1545          #else
   1546              if(pfnCommissioningStatusCB)
   \                     ??bdb_reportCommissioningState_10:
   \   000416   90....       MOV       DPTR,#pfnCommissioningStatusCB
   \   000419   E0           MOVX      A,@DPTR
   \   00041A   F8           MOV       R0,A
   \   00041B   A3           INC       DPTR
   \   00041C   E0           MOVX      A,@DPTR
   \   00041D   F9           MOV       R1,A
   \   00041E   E8           MOV       A,R0
   \   00041F   49           ORL       A,R1
   \   000420   602F         JZ        ??bdb_reportCommissioningState_1
   1547              {
   1548                //Notify the user about the status, the main state which has failed
   1549                bdbCommissioningModeMsg.bdbCommissioningStatus = bdbAttributes.bdbCommissioningStatus;
   \   000422   90....       MOV       DPTR,#bdbAttributes + 10
   \   000425   E0           MOVX      A,@DPTR
   \   000426   C0E0         PUSH      A
   \   000428   85..82       MOV       DPL,?XSP + 0
   \   00042B   85..83       MOV       DPH,?XSP + 1
   \   00042E   D0E0         POP       A
   \   000430   F0           MOVX      @DPTR,A
   1550                
   1551                bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   \   000431                ; Setup parameters for call to function bdb_SendMsg
   \   000431   A8..         MOV       R0,?XSP + 0
   \   000433   A9..         MOV       R1,?XSP + 1
   \   000435   88..         MOV       ?V0,R0
   \   000437   89..         MOV       ?V1,R1
   \   000439   78..         MOV       R0,#?V0
   \   00043B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00043E   7C03         MOV       R4,#0x3
   \   000440   7B00         MOV       R3,#0x0
   \   000442   7A0A         MOV       R2,#0xa
   \   000444   90....       MOV       DPTR,#bdb_TaskID
   \   000447   E0           MOVX      A,@DPTR
   \   000448   F9           MOV       R1,A
   \   000449   12....       LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
   \   00044C   7402         MOV       A,#0x2
   \   00044E   12....       LCALL     ?DEALLOC_XSTACK8
   1552              }
   1553          #endif
   1554            }  
   1555          }
   \                     ??bdb_reportCommissioningState_1:
   \   000451   7404         MOV       A,#0x4
   \   000453   12....       LCALL     ?DEALLOC_XSTACK8
   \   000456   7F04         MOV       R7,#0x4
   \   000458   02....       LJMP      ?BANKED_LEAVE_XDATA
   1556          
   1557          
   1558           /*********************************************************************
   1559           * @fn          bdb_nwkFormationAttempt
   1560           *
   1561           * @brief       Process a nwk formation attempt.
   1562           *
   1563           * @param       didSuccess - TRUE if the nwk formation was success, FALSE 
   1564           *                         otherwise and try secondary channel
   1565           *
   1566           * @return      none
   1567           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1568          void bdb_nwkFormationAttempt(bool didSuccess)
   \                     bdb_nwkFormationAttempt:
   1569          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   1570            if(didSuccess)
   \   000007   EE           MOV       A,R6
   \   000008   6009         JZ        ??bdb_nwkFormationAttempt_0
   1571            {
   1572              bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION,TRUE);
   \   00000A                ; Setup parameters for call to function bdb_reportCommissioningState
   \   00000A   7A01         MOV       R2,#0x1
   \   00000C   7905         MOV       R1,#0x5
   \   00000E   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   \   000011   8026         SJMP      ??bdb_nwkFormationAttempt_1
   1573            }
   1574            else
   1575            {
   1576              //Can we try the secondary channel set?
   1577              if((vDoPrimaryScan) && (bdbAttributes.bdbSecondaryChannelSet))
   \                     ??bdb_nwkFormationAttempt_0:
   \   000013   90....       MOV       DPTR,#vDoPrimaryScan
   \   000016   E0           MOVX      A,@DPTR
   \   000017   6019         JZ        ??bdb_nwkFormationAttempt_2
   \   000019   90....       MOV       DPTR,#bdbAttributes
   \   00001C   12....       LCALL     ?XLOAD_R0123
   \   00001F   E8           MOV       A,R0
   \   000020   49           ORL       A,R1
   \   000021   4A           ORL       A,R2
   \   000022   4B           ORL       A,R3
   \   000023   600D         JZ        ??bdb_nwkFormationAttempt_2
   1578              {
   1579                vDoPrimaryScan = FALSE;
   \   000025   90....       MOV       DPTR,#vDoPrimaryScan
   \   000028   7400         MOV       A,#0x0
   \   00002A   F0           MOVX      @DPTR,A
   1580                bdb_nwkJoiningFormation(FALSE);
   \   00002B                ; Setup parameters for call to function bdb_nwkJoiningFormation
   \   00002B   7900         MOV       R1,#0x0
   \   00002D   12....       LCALL     `??bdb_nwkJoiningFormation::?relay`; Banked call to: bdb_nwkJoiningFormation
   \   000030   8007         SJMP      ??bdb_nwkFormationAttempt_1
   1581              }
   1582              else
   1583              {
   1584                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
   \                     ??bdb_nwkFormationAttempt_2:
   \   000032                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000032   7A00         MOV       R2,#0x0
   \   000034   7905         MOV       R1,#0x5
   \   000036   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   1585              }
   1586            }
   1587          }
   \                     ??bdb_nwkFormationAttempt_1:
   \   000039   7F01         MOV       R7,#0x1
   \   00003B   02....       LJMP      ?BANKED_LEAVE_XDATA
   1588          
   1589          
   1590          
   1591          /*********************************************************************
   1592           * @fn          bdb_isDeviceNonFactoryNew
   1593           *
   1594           * @brief       Returns the state of bdbNodeIsOnANetwork attribute
   1595           * 
   1596           * @param       none
   1597           *
   1598           * @return      bdbNodeIsOnANetwork
   1599           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1600          bool bdb_isDeviceNonFactoryNew(void)
   \                     bdb_isDeviceNonFactoryNew:
   1601          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1602            return bdbAttributes.bdbNodeIsOnANetwork;
   \   000004   90....       MOV       DPTR,#bdbAttributes + 14
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   D083         POP       DPH
   \   00000B   D082         POP       DPL
   \   00000D   02....       LJMP      ?BRET
   1603          }
   1604          
   1605          
   1606          /*********************************************************************
   1607           * @fn          bdb_doTrustCenterRequireKeyExchange
   1608           *
   1609           * @brief       Returns the state of bdbTrustCenterRequireKeyExchange attribute
   1610           * 
   1611           * @param       none
   1612           *
   1613           * @return      bdbTrustCenterRequireKeyExchange
   1614           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1615          bool bdb_doTrustCenterRequireKeyExchange(void)
   \                     bdb_doTrustCenterRequireKeyExchange:
   1616          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1617          #if (ZG_BUILD_COORDINATOR_TYPE) 
   1618            return bdbAttributes.bdbTrustCenterRequireKeyExchange;
   1619          #else
   1620            return 0;
   \   000000   7900         MOV       R1,#0x0
   \   000002   02....       LJMP      ?BRET
   1621          #endif
   1622          }
   1623          
   1624          /*********************************************************************
   1625           * @fn      bdb_rejoinNwk
   1626           *
   1627           * @brief   Attempt to rejoin/resume a nwk from nv parameters
   1628           *
   1629           * @param   none
   1630           *
   1631           * @return  ZStatus_t
   1632           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1633          ZStatus_t bdb_rejoinNwk(void)
   \                     bdb_rejoinNwk:
   1634          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1635            ZStatus_t rejoinStatus = ZSuccess;
   \   00000A   7E00         MOV       R6,#0x0
   1636            
   1637            //Update the seq number
   1638            _NIB.SequenceNum ++;
   \   00000C   90....       MOV       DPTR,#_NIB
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   2401         ADD       A,#0x1
   \   000012   F0           MOVX      @DPTR,A
   1639            
   1640            osal_nv_write(ZCD_NV_NIB,osal_offsetof( nwkIB_t, SequenceNum ), sizeof( uint8), &_NIB.SequenceNum );
   \   000013                ; Setup parameters for call to function osal_nv_write
   \   000013   75....       MOV       ?V0,#_NIB & 0xff
   \   000016   75....       MOV       ?V1,#(_NIB >> 8) & 0xff
   \   000019   78..         MOV       R0,#?V0
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001E   75..01       MOV       ?V0,#0x1
   \   000021   75..00       MOV       ?V1,#0x0
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000029   7C00         MOV       R4,#0x0
   \   00002B   7D00         MOV       R5,#0x0
   \   00002D   7A21         MOV       R2,#0x21
   \   00002F   7B00         MOV       R3,#0x0
   \   000031   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000034   7404         MOV       A,#0x4
   \   000036   12....       LCALL     ?DEALLOC_XSTACK8
   \   000039   E9           MOV       A,R1
   1641            
   1642            // Transition state machine to correct rejoin state based on nwk key
   1643            if ( ZDApp_RestoreNwkKey( FALSE )== TRUE )
   \   00003A                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   00003A   7900         MOV       R1,#0x0
   \   00003C   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   00003F   E9           MOV       A,R1
   \   000040   6401         XRL       A,#0x1
   \   000042   7007         JNZ       ??bdb_rejoinNwk_0
   1644            {
   1645              ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
   \   000044                ; Setup parameters for call to function ZDApp_ChangeState
   \   000044   7904         MOV       R1,#0x4
   \   000046   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   \   000049   8005         SJMP      ??bdb_rejoinNwk_1
   1646            }
   1647            else
   1648            {
   1649              ZDApp_ChangeState( DEV_NWK_TC_REJOIN_CURR_CHANNEL );
   \                     ??bdb_rejoinNwk_0:
   \   00004B                ; Setup parameters for call to function ZDApp_ChangeState
   \   00004B   790E         MOV       R1,#0xe
   \   00004D   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1650            }
   1651          
   1652            // Before trying to do rejoin, check if the device has a valid short address
   1653            // If not, generate a random short address for itself
   1654            if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   \                     ??bdb_rejoinNwk_1:
   \   000050   90....       MOV       DPTR,#_NIB + 20
   \   000053   E0           MOVX      A,@DPTR
   \   000054   64FE         XRL       A,#0xfe
   \   000056   7004         JNZ       ??bdb_rejoinNwk_2
   \   000058   A3           INC       DPTR
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   64FF         XRL       A,#0xff
   \                     ??bdb_rejoinNwk_2:
   \   00005C   7002         JNZ       ??bdb_rejoinNwk_3
   1655            {
   1656              rejoinStatus = ZFailure;
   \   00005E   7E01         MOV       R6,#0x1
   1657            }
   1658          
   1659            // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1660            if ( _NIB.nwkPanId == 0xFFFF )
   \                     ??bdb_rejoinNwk_3:
   \   000060   90....       MOV       DPTR,#_NIB + 33
   \   000063   E0           MOVX      A,@DPTR
   \   000064   64FF         XRL       A,#0xff
   \   000066   7004         JNZ       ??bdb_rejoinNwk_4
   \   000068   A3           INC       DPTR
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   64FF         XRL       A,#0xff
   \                     ??bdb_rejoinNwk_4:
   \   00006C   7002         JNZ       ??bdb_rejoinNwk_5
   1661            {
   1662              rejoinStatus = ZFailure;
   \   00006E   7E01         MOV       R6,#0x1
   1663            }
   1664          
   1665            if(rejoinStatus == ZSuccess)
   \                     ??bdb_rejoinNwk_5:
   \   000070   EE           MOV       A,R6
   \   000071   703B         JNZ       ??bdb_rejoinNwk_6
   1666            {
   1667              uint8 tmp = true;
   \   000073   85..82       MOV       DPL,?XSP + 0
   \   000076   85..83       MOV       DPH,?XSP + 1
   \   000079   7401         MOV       A,#0x1
   \   00007B   F0           MOVX      @DPTR,A
   1668              ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
   \   00007C                ; Setup parameters for call to function ZMacSetReq
   \   00007C   AA..         MOV       R2,?XSP + 0
   \   00007E   AB..         MOV       R3,?XSP + 1
   \   000080   7952         MOV       R1,#0x52
   \   000082   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000085   E9           MOV       A,R1
   1669                  
   1670              // Perform Secure or Unsecure Rejoin depending on available configuration
   1671              if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == TRUE ) )
   \   000086                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   000086   7901         MOV       R1,#0x1
   \   000088   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   00008B   E9           MOV       A,R1
   \   00008C   6401         XRL       A,#0x1
   \   00008E   7010         JNZ       ??bdb_rejoinNwk_7
   1672              {
   1673                rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, _NIB.nwkLogicalChannel);
   \   000090                ; Setup parameters for call to function NLME_ReJoinRequest
   \   000090   90....       MOV       DPTR,#_NIB + 22
   \   000093   E0           MOVX      A,@DPTR
   \   000094   F9           MOV       R1,A
   \   000095   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000097   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000099   12....       LCALL     `??NLME_ReJoinRequest::?relay`; Banked call to: NLME_ReJoinRequest
   \   00009C   E9           MOV       A,R1
   \   00009D   FE           MOV       R6,A
   \   00009E   800E         SJMP      ??bdb_rejoinNwk_6
   1674              }
   1675              else
   1676              {
   1677                rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, _NIB.nwkLogicalChannel);
   \                     ??bdb_rejoinNwk_7:
   \   0000A0                ; Setup parameters for call to function NLME_ReJoinRequestUnsecure
   \   0000A0   90....       MOV       DPTR,#_NIB + 22
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   F9           MOV       R1,A
   \   0000A5   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   0000A7   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   0000A9   12....       LCALL     `??NLME_ReJoinRequestUnsecure::?relay`; Banked call to: NLME_ReJoinRequestUnsecure
   \   0000AC   E9           MOV       A,R1
   \   0000AD   FE           MOV       R6,A
   1678              }
   1679            }
   1680            
   1681            return rejoinStatus;
   \                     ??bdb_rejoinNwk_6:
   \   0000AE   EE           MOV       A,R6
   \   0000AF   F9           MOV       R1,A
   \   0000B0   7401         MOV       A,#0x1
   \   0000B2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B5   7F02         MOV       R7,#0x2
   \   0000B7   02....       LJMP      ?BANKED_LEAVE_XDATA
   1682          }
   1683          
   1684          #if (ZG_BUILD_JOINING_TYPE)
   1685           /*********************************************************************
   1686           * @fn          bdb_nwkDiscoveryAttempt
   1687           *
   1688           * @brief       Process a nwk discovery attempt
   1689           *
   1690           * @param       didSuccess - TRUE we found nwk in the scanned channels, FALSE if 
   1691           *                           no suitable nwks were found, try secondary channel
   1692           *
   1693           * @return      none
   1694           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1695          void bdb_nwkDiscoveryAttempt(bool didSuccess)
   \                     bdb_nwkDiscoveryAttempt:
   1696          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   1697            uint8 bdbJoinEvent = BDB_JOIN_EVENT_NWK_DISCOVERY;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   7400         MOV       A,#0x0
   \   000014   F0           MOVX      @DPTR,A
   1698            
   1699            if(didSuccess)
   \   000015   EE           MOV       A,R6
   \   000016   6022         JZ        ??bdb_nwkDiscoveryAttempt_0
   1700            {
   1701              bdb_SendMsg(bdb_TaskID, BDB_COMMISSIONING_STATE_JOINING, BDB_MSG_EVENT_SUCCESS,sizeof(bdbJoinEvent),(uint8*)&bdbJoinEvent);
   \   000018                ; Setup parameters for call to function bdb_SendMsg
   \   000018   A8..         MOV       R0,?XSP + 0
   \   00001A   A9..         MOV       R1,?XSP + 1
   \   00001C   88..         MOV       ?V0,R0
   \   00001E   89..         MOV       ?V1,R1
   \   000020   78..         MOV       R0,#?V0
   \   000022   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000025   7C01         MOV       R4,#0x1
   \   000027   7B00         MOV       R3,#0x0
   \   000029   7A03         MOV       R2,#0x3
   \   00002B   90....       MOV       DPTR,#bdb_TaskID
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F9           MOV       R1,A
   \   000030   12....       LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
   \   000033   7402         MOV       A,#0x2
   \   000035   12....       LCALL     ?DEALLOC_XSTACK8
   \   000038   8031         SJMP      ??bdb_nwkDiscoveryAttempt_1
   1702            }
   1703            else
   1704            {
   1705              //Can we try the secondary channel set?
   1706              if((vDoPrimaryScan) && (bdbAttributes.bdbSecondaryChannelSet))
   \                     ??bdb_nwkDiscoveryAttempt_0:
   \   00003A   90....       MOV       DPTR,#vDoPrimaryScan
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   6024         JZ        ??bdb_nwkDiscoveryAttempt_2
   \   000040   90....       MOV       DPTR,#bdbAttributes
   \   000043   12....       LCALL     ?XLOAD_R0123
   \   000046   E8           MOV       A,R0
   \   000047   49           ORL       A,R1
   \   000048   4A           ORL       A,R2
   \   000049   4B           ORL       A,R3
   \   00004A   6018         JZ        ??bdb_nwkDiscoveryAttempt_2
   1707              {
   1708                vDoPrimaryScan = FALSE;
   \   00004C   90....       MOV       DPTR,#vDoPrimaryScan
   \   00004F   7400         MOV       A,#0x0
   \   000051   F0           MOVX      @DPTR,A
   1709                bdb_setChannel(bdbAttributes.bdbSecondaryChannelSet);
   \   000052                ; Setup parameters for call to function bdb_setChannel
   \   000052   90....       MOV       DPTR,#bdbAttributes
   \   000055   12....       LCALL     ?XLOAD_R2345
   \   000058   12....       LCALL     `??bdb_setChannel::?relay`; Banked call to: bdb_setChannel
   1710                
   1711                ZDApp_NetworkInit( 50 );
   \   00005B                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00005B   7A32         MOV       R2,#0x32
   \   00005D   7B00         MOV       R3,#0x0
   \   00005F   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   000062   8007         SJMP      ??bdb_nwkDiscoveryAttempt_1
   1712              }
   1713              else
   1714              {
   1715                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, FALSE);
   \                     ??bdb_nwkDiscoveryAttempt_2:
   \   000064                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000064   7A00         MOV       R2,#0x0
   \   000066   7903         MOV       R1,#0x3
   \   000068   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   1716              }
   1717            }
   1718          }
   \                     ??bdb_nwkDiscoveryAttempt_1:
   \   00006B   7401         MOV       A,#0x1
   \   00006D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000070   7F02         MOV       R7,#0x2
   \   000072   02....       LJMP      ?BANKED_LEAVE_XDATA
   1719          
   1720           /*********************************************************************
   1721           * @fn          bdb_filterNwkDisc
   1722           *
   1723           * @brief       Filter the nwks found and attempt to join the suitable nwks
   1724           *              Here the application can include nwk filters 
   1725           *
   1726           * @param       none
   1727           *
   1728           * @return      none
   1729           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1730          void bdb_filterNwkDisc(void)
   \                     bdb_filterNwkDisc:
   1731          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   1732            networkDesc_t* pNwkDesc;
   1733            uint8 i = 0;
   \   000005   75..00       MOV       ?V1,#0x0
   1734            uint8 ResultCount = 0;
   \   000008   75..00       MOV       ?V0,#0x0
   1735            uint8 stackProfile = 0;
   \   00000B   75..00       MOV       ?V2,#0x0
   1736            uint8 stackProfilePro = 0;
   \   00000E   75..00       MOV       ?V3,#0x0
   1737            
   1738            pBDBListNwk  = nwk_getNwkDescList();
   \   000011                ; Setup parameters for call to function nwk_getNwkDescList
   \   000011   12....       LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   000014   90....       MOV       DPTR,#pBDBListNwk
   \   000017   EA           MOV       A,R2
   \   000018   F0           MOVX      @DPTR,A
   \   000019   A3           INC       DPTR
   \   00001A   EB           MOV       A,R3
   \   00001B   F0           MOVX      @DPTR,A
   1739            nwk_desc_list_release();
   \   00001C                ; Setup parameters for call to function nwk_desc_list_release
   \   00001C   12....       LCALL     `??nwk_desc_list_release::?relay`; Banked call to: nwk_desc_list_release
   1740            
   1741            pNwkDesc = pBDBListNwk;
   \   00001F   90....       MOV       DPTR,#pBDBListNwk
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F8           MOV       R0,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F9           MOV       R1,A
   \   000027   E8           MOV       A,R0
   \   000028   FE           MOV       R6,A
   \   000029   E9           MOV       A,R1
   \   00002A   FF           MOV       R7,A
   1742            while (pNwkDesc)
   \                     ??bdb_filterNwkDisc_0:
   \   00002B   EE           MOV       A,R6
   \   00002C   4F           ORL       A,R7
   \   00002D   6012         JZ        ??bdb_filterNwkDisc_1
   1743            {
   1744              ResultCount++;
   \   00002F   05..         INC       ?V0
   1745              pNwkDesc = pNwkDesc->nextDesc;
   \   000031   EE           MOV       A,R6
   \   000032   2414         ADD       A,#0x14
   \   000034   F582         MOV       DPL,A
   \   000036   E4           CLR       A
   \   000037   3F           ADDC      A,R7
   \   000038   F583         MOV       DPH,A
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   FE           MOV       R6,A
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   FF           MOV       R7,A
   \   00003F   80EA         SJMP      ??bdb_filterNwkDisc_0
   1746            }
   1747            
   1748            if(pBDBListNwk)
   \                     ??bdb_filterNwkDisc_1:
   \   000041   90....       MOV       DPTR,#pBDBListNwk
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F8           MOV       R0,A
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F9           MOV       R1,A
   \   000049   E8           MOV       A,R0
   \   00004A   49           ORL       A,R1
   \   00004B   7003         JNZ       $+5
   \   00004D   02....       LJMP      ??bdb_filterNwkDisc_2 & 0xFFFF
   1749            {
   1750              if(pfnFilterNwkDesc)
   \   000050   90....       MOV       DPTR,#pfnFilterNwkDesc
   \   000053   E0           MOVX      A,@DPTR
   \   000054   F8           MOV       R0,A
   \   000055   A3           INC       DPTR
   \   000056   E0           MOVX      A,@DPTR
   \   000057   F9           MOV       R1,A
   \   000058   E8           MOV       A,R0
   \   000059   49           ORL       A,R1
   \   00005A   6018         JZ        ??bdb_filterNwkDisc_3
   1751              {
   1752                pfnFilterNwkDesc(pBDBListNwk, ResultCount);
   \   00005C                ; Setup parameters for indirect call
   \   00005C   A9..         MOV       R1,?V0
   \   00005E   90....       MOV       DPTR,#pBDBListNwk
   \   000061   E0           MOVX      A,@DPTR
   \   000062   FA           MOV       R2,A
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   FB           MOV       R3,A
   \   000066   90....       MOV       DPTR,#pfnFilterNwkDesc
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   F8           MOV       R0,A
   \   00006B   A3           INC       DPTR
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   F583         MOV       DPH,A
   \   00006F   8882         MOV       DPL,R0
   \   000071   12....       LCALL     ?CALL_IND
   1753              }
   1754              
   1755              for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \                     ??bdb_filterNwkDisc_3:
   \   000074   75..00       MOV       ?V2,#0x0
   \                     ??bdb_filterNwkDisc_4:
   \   000077   E5..         MOV       A,?V2
   \   000079   C3           CLR       C
   \   00007A   9402         SUBB      A,#0x2
   \   00007C   4003         JC        $+5
   \   00007E   02....       LJMP      ??bdb_filterNwkDisc_2 & 0xFFFF
   1756              {
   1757                pNwkDesc = pBDBListNwk;
   \   000081   90....       MOV       DPTR,#pBDBListNwk
   \   000084   E0           MOVX      A,@DPTR
   \   000085   F8           MOV       R0,A
   \   000086   A3           INC       DPTR
   \   000087   E0           MOVX      A,@DPTR
   \   000088   F9           MOV       R1,A
   \   000089   E8           MOV       A,R0
   \   00008A   FE           MOV       R6,A
   \   00008B   E9           MOV       A,R1
   \   00008C   FF           MOV       R7,A
   1758                
   1759                if(pNwkDesc)
   \   00008D   EE           MOV       A,R6
   \   00008E   4F           ORL       A,R7
   \   00008F   7003         JNZ       $+5
   \   000091   02....       LJMP      ??bdb_filterNwkDisc_5 & 0xFFFF
   1760                {
   1761                  for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   000094   75..00       MOV       ?V1,#0x0
   \                     ??bdb_filterNwkDisc_6:
   \   000097   E5..         MOV       A,?V1
   \   000099   C3           CLR       C
   \   00009A   95..         SUBB      A,?V0
   \   00009C   4003         JC        $+5
   \   00009E   02....       LJMP      ??bdb_filterNwkDisc_5 & 0xFFFF
   1762                  {
   1763                    if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
   \   0000A1                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   0000A1   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   0000A3   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   0000A5   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   0000A8   E9           MOV       A,R1
   \   0000A9   6401         XRL       A,#0x1
   \   0000AB   701E         JNZ       ??bdb_filterNwkDisc_7
   1764                    {
   1765                      // If the extended Pan ID is commissioned to a non zero value
   1766                      // Only join the Pan that has match EPID
   1767                      if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   \   0000AD                ; Setup parameters for call to function sAddrExtCmp
   \   0000AD   EE           MOV       A,R6
   \   0000AE   240B         ADD       A,#0xb
   \   0000B0   FC           MOV       R4,A
   \   0000B1   E4           CLR       A
   \   0000B2   3F           ADDC      A,R7
   \   0000B3   FD           MOV       R5,A
   \   0000B4   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   0000B6   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   0000B8   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   0000BB   E9           MOV       A,R1
   \   0000BC   703D         JNZ       ??bdb_filterNwkDisc_8
   1768                      {
   1769                        //Remove from the list
   1770                        bdb_nwkDescFree(pNwkDesc);
   \   0000BE                ; Setup parameters for call to function bdb_nwkDescFree
   \   0000BE   EE           MOV       A,R6
   \   0000BF   FA           MOV       R2,A
   \   0000C0   EF           MOV       A,R7
   \   0000C1   FB           MOV       R3,A
   \   0000C2   12....       LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
   \   0000C5   E9           MOV       A,R1
   1771                        ResultCount--;
   \   0000C6   15..         DEC       ?V0
   1772                        continue;
   \   0000C8   02....       LJMP      ??bdb_filterNwkDisc_9 & 0xFFFF
   1773                      }
   1774                    }
   1775                    else if ( zgConfigPANID != 0xFFFF )
   \                     ??bdb_filterNwkDisc_7:
   \   0000CB   90....       MOV       DPTR,#zgConfigPANID
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   64FF         XRL       A,#0xff
   \   0000D1   7004         JNZ       ??bdb_filterNwkDisc_10
   \   0000D3   A3           INC       DPTR
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   64FF         XRL       A,#0xff
   \                     ??bdb_filterNwkDisc_10:
   \   0000D7   6022         JZ        ??bdb_filterNwkDisc_8
   1776                    {
   1777                      // PAN Id is preconfigured. check if it matches
   1778                      if ( pNwkDesc->panId != zgConfigPANID )
   \   0000D9   8E82         MOV       DPL,R6
   \   0000DB   8F83         MOV       DPH,R7
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   F8           MOV       R0,A
   \   0000DF   A3           INC       DPTR
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   F9           MOV       R1,A
   \   0000E2   90....       MOV       DPTR,#zgConfigPANID
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   68           XRL       A,R0
   \   0000E7   7003         JNZ       ??bdb_filterNwkDisc_11
   \   0000E9   A3           INC       DPTR
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   69           XRL       A,R1
   \                     ??bdb_filterNwkDisc_11:
   \   0000EC   600D         JZ        ??bdb_filterNwkDisc_8
   1779                      {
   1780                        //Remove from the list
   1781                        bdb_nwkDescFree(pNwkDesc);
   \   0000EE                ; Setup parameters for call to function bdb_nwkDescFree
   \   0000EE   EE           MOV       A,R6
   \   0000EF   FA           MOV       R2,A
   \   0000F0   EF           MOV       A,R7
   \   0000F1   FB           MOV       R3,A
   \   0000F2   12....       LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
   \   0000F5   E9           MOV       A,R1
   1782                        ResultCount--;
   \   0000F6   15..         DEC       ?V0
   1783                        continue;
   \   0000F8   02....       LJMP      ??bdb_filterNwkDisc_9 & 0xFFFF
   1784                      }
   1785                    }
   1786          
   1787                    if ( pNwkDesc->chosenRouter != _NIB.nwkCoordAddress || _NIB.nwkCoordAddress == INVALID_NODE_ADDR )
   \                     ??bdb_filterNwkDisc_8:
   \   0000FB   8E82         MOV       DPL,R6
   \   0000FD   8F83         MOV       DPH,R7
   \   0000FF   A3           INC       DPTR
   \   000100   A3           INC       DPTR
   \   000101   A3           INC       DPTR
   \   000102   A3           INC       DPTR
   \   000103   A3           INC       DPTR
   \   000104   A3           INC       DPTR
   \   000105   A3           INC       DPTR
   \   000106   E0           MOVX      A,@DPTR
   \   000107   F8           MOV       R0,A
   \   000108   A3           INC       DPTR
   \   000109   E0           MOVX      A,@DPTR
   \   00010A   F9           MOV       R1,A
   \   00010B   90....       MOV       DPTR,#_NIB + 23
   \   00010E   E0           MOVX      A,@DPTR
   \   00010F   68           XRL       A,R0
   \   000110   7003         JNZ       ??bdb_filterNwkDisc_12
   \   000112   A3           INC       DPTR
   \   000113   E0           MOVX      A,@DPTR
   \   000114   69           XRL       A,R1
   \                     ??bdb_filterNwkDisc_12:
   \   000115   700E         JNZ       ??bdb_filterNwkDisc_13
   \   000117   90....       MOV       DPTR,#_NIB + 23
   \   00011A   E0           MOVX      A,@DPTR
   \   00011B   64FE         XRL       A,#0xfe
   \   00011D   7004         JNZ       ??bdb_filterNwkDisc_14
   \   00011F   A3           INC       DPTR
   \   000120   E0           MOVX      A,@DPTR
   \   000121   64FF         XRL       A,#0xff
   \                     ??bdb_filterNwkDisc_14:
   \   000123   7017         JNZ       ??bdb_filterNwkDisc_15
   1788                    {
   1789                      // check that network is allowing joining
   1790                      if ( ZSTACK_ROUTER_BUILD )
   1791                      {
   1792                        if ( stackProfilePro == FALSE )
   1793                        {
   1794                          if ( !pNwkDesc->routerCapacity )
   1795                          {
   1796                            //Remove from the list
   1797                            bdb_nwkDescFree(pNwkDesc);
   1798                            ResultCount--;
   1799                            continue;
   1800                          }
   1801                        }
   1802                        else
   1803                        {
   1804                          if ( !pNwkDesc->deviceCapacity )
   1805                          {
   1806                            //Remove from the list
   1807                            bdb_nwkDescFree(pNwkDesc);
   1808                            ResultCount--;
   1809                            continue;
   1810                          }
   1811                        }
   1812                      }
   1813                      else if ( ZSTACK_END_DEVICE_BUILD )
   1814                      {
   1815                        if ( !pNwkDesc->deviceCapacity )
   \                     ??bdb_filterNwkDisc_13:
   \   000125   8E82         MOV       DPL,R6
   \   000127   8F83         MOV       DPH,R7
   \   000129   A3           INC       DPTR
   \   00012A   A3           INC       DPTR
   \   00012B   A3           INC       DPTR
   \   00012C   A3           INC       DPTR
   \   00012D   E0           MOVX      A,@DPTR
   \   00012E   700C         JNZ       ??bdb_filterNwkDisc_15
   1816                        {
   1817                          //Remove from the list
   1818                          bdb_nwkDescFree(pNwkDesc);
   \   000130                ; Setup parameters for call to function bdb_nwkDescFree
   \   000130   EE           MOV       A,R6
   \   000131   FA           MOV       R2,A
   \   000132   EF           MOV       A,R7
   \   000133   FB           MOV       R3,A
   \   000134   12....       LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
   \   000137   E9           MOV       A,R1
   1819                          ResultCount--;
   \   000138   15..         DEC       ?V0
   1820                          continue;
   \   00013A   8064         SJMP      ??bdb_filterNwkDisc_9
   1821                        }
   1822                      }
   1823                    }
   1824          
   1825                    // check version of zigbee protocol
   1826                    if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   \                     ??bdb_filterNwkDisc_15:
   \   00013C   8E82         MOV       DPL,R6
   \   00013E   8F83         MOV       DPH,R7
   \   000140   A3           INC       DPTR
   \   000141   A3           INC       DPTR
   \   000142   A3           INC       DPTR
   \   000143   A3           INC       DPTR
   \   000144   A3           INC       DPTR
   \   000145   E0           MOVX      A,@DPTR
   \   000146   F8           MOV       R0,A
   \   000147   90....       MOV       DPTR,#_NIB + 17
   \   00014A   E0           MOVX      A,@DPTR
   \   00014B   68           XRL       A,R0
   \   00014C   7052         JNZ       ??bdb_filterNwkDisc_9
   1827                      continue;
   1828          
   1829                    // check version of stack profile
   1830                    if ( pNwkDesc->stackProfile != zgStackProfile  )
   \   00014E   8E82         MOV       DPL,R6
   \   000150   8F83         MOV       DPH,R7
   \   000152   A3           INC       DPTR
   \   000153   A3           INC       DPTR
   \   000154   A3           INC       DPTR
   \   000155   A3           INC       DPTR
   \   000156   A3           INC       DPTR
   \   000157   A3           INC       DPTR
   \   000158   E0           MOVX      A,@DPTR
   \   000159   F8           MOV       R0,A
   \   00015A   90....       MOV       DPTR,#zgStackProfile
   \   00015D   E0           MOVX      A,@DPTR
   \   00015E   68           XRL       A,R0
   \   00015F   603F         JZ        ??bdb_filterNwkDisc_9
   1831                    {
   1832                      if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   1833                          || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \   000161   90....       MOV       DPTR,#zgStackProfile
   \   000164   E0           MOVX      A,@DPTR
   \   000165   6401         XRL       A,#0x1
   \   000167   700F         JNZ       ??bdb_filterNwkDisc_16
   \   000169   8E82         MOV       DPL,R6
   \   00016B   8F83         MOV       DPH,R7
   \   00016D   A3           INC       DPTR
   \   00016E   A3           INC       DPTR
   \   00016F   A3           INC       DPTR
   \   000170   A3           INC       DPTR
   \   000171   A3           INC       DPTR
   \   000172   A3           INC       DPTR
   \   000173   E0           MOVX      A,@DPTR
   \   000174   6402         XRL       A,#0x2
   \   000176   6017         JZ        ??bdb_filterNwkDisc_17
   \                     ??bdb_filterNwkDisc_16:
   \   000178   90....       MOV       DPTR,#zgStackProfile
   \   00017B   E0           MOVX      A,@DPTR
   \   00017C   6402         XRL       A,#0x2
   \   00017E   7012         JNZ       ??bdb_filterNwkDisc_18
   \   000180   8E82         MOV       DPL,R6
   \   000182   8F83         MOV       DPH,R7
   \   000184   A3           INC       DPTR
   \   000185   A3           INC       DPTR
   \   000186   A3           INC       DPTR
   \   000187   A3           INC       DPTR
   \   000188   A3           INC       DPTR
   \   000189   A3           INC       DPTR
   \   00018A   E0           MOVX      A,@DPTR
   \   00018B   6401         XRL       A,#0x1
   \   00018D   7003         JNZ       ??bdb_filterNwkDisc_18
   1834                      {
   1835                        stackProfilePro = TRUE;
   \                     ??bdb_filterNwkDisc_17:
   \   00018F   75..01       MOV       ?V3,#0x1
   1836                      }
   1837          
   1838                      if ( stackProfile == 0 )
   \                     ??bdb_filterNwkDisc_18:
   \   000192   E5..         MOV       A,?V2
   \   000194   700A         JNZ       ??bdb_filterNwkDisc_9
   1839                      {
   1840                        //Remove from the list
   1841                        bdb_nwkDescFree(pNwkDesc);
   \   000196                ; Setup parameters for call to function bdb_nwkDescFree
   \   000196   EE           MOV       A,R6
   \   000197   FA           MOV       R2,A
   \   000198   EF           MOV       A,R7
   \   000199   FB           MOV       R3,A
   \   00019A   12....       LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
   \   00019D   E9           MOV       A,R1
   1842                        ResultCount--;
   \   00019E   15..         DEC       ?V0
   1843                        continue;
   1844                      }
   1845                    }
   1846                  }
   \                     ??bdb_filterNwkDisc_9:
   \   0001A0   05..         INC       ?V1
   \   0001A2   EE           MOV       A,R6
   \   0001A3   2414         ADD       A,#0x14
   \   0001A5   F582         MOV       DPL,A
   \   0001A7   E4           CLR       A
   \   0001A8   3F           ADDC      A,R7
   \   0001A9   F583         MOV       DPH,A
   \   0001AB   E0           MOVX      A,@DPTR
   \   0001AC   FE           MOV       R6,A
   \   0001AD   A3           INC       DPTR
   \   0001AE   E0           MOVX      A,@DPTR
   \   0001AF   FF           MOV       R7,A
   \   0001B0   02....       LJMP      ??bdb_filterNwkDisc_6 & 0xFFFF
   1847                }
   1848              }
   \                     ??bdb_filterNwkDisc_5:
   \   0001B3   05..         INC       ?V2
   \   0001B5   02....       LJMP      ??bdb_filterNwkDisc_4 & 0xFFFF
   1849            }
   1850          }
   \                     ??bdb_filterNwkDisc_2:
   \   0001B8   7F04         MOV       R7,#0x4
   \   0001BA   02....       LJMP      ?BANKED_LEAVE_XDATA
   1851                
   1852           /*********************************************************************
   1853           * @fn          bdb_tryNwkAssoc
   1854           *
   1855           * @brief       Try to associate to the first network in the network descriptor list
   1856           *
   1857           * @param       none
   1858           *
   1859           * @return      none
   1860           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1861          static void bdb_tryNwkAssoc(void)
   \                     bdb_tryNwkAssoc:
   1862          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1863            if(pBDBListNwk)
   \   00000A   90....       MOV       DPTR,#pBDBListNwk
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F8           MOV       R0,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F9           MOV       R1,A
   \   000012   E8           MOV       A,R0
   \   000013   49           ORL       A,R1
   \   000014   604B         JZ        ??bdb_tryNwkAssoc_0
   1864            {
   1865              bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_ASSOC;
   \   000016   90....       MOV       DPTR,#bdbCommissioningProcedureState + 2
   \   000019   7401         MOV       A,#0x1
   \   00001B   F0           MOVX      @DPTR,A
   1866              
   1867              //Try the first in the list after the filtering
   1868              if(ZSuccess != bdb_joinProcess(pBDBListNwk))
   \   00001C                ; Setup parameters for call to function bdb_joinProcess
   \   00001C   90....       MOV       DPTR,#pBDBListNwk
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   FA           MOV       R2,A
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   FB           MOV       R3,A
   \   000024   12....       LCALL     `??bdb_joinProcess::?relay`; Banked call to: bdb_joinProcess
   \   000027   E9           MOV       A,R1
   \   000028   6066         JZ        ??bdb_tryNwkAssoc_1
   1869              {
   1870                //If fail, free the first in the list and prepare for futher processing, either next nwk or discover again
   1871                uint8 bdbJoinEvent = BDB_JOIN_EVENT_ASSOCIATION;
   \   00002A   7401         MOV       A,#0x1
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   7401         MOV       A,#0x1
   \   000031   F0           MOVX      @DPTR,A
   1872                bdb_nwkDescFree(pBDBListNwk);
   \   000032                ; Setup parameters for call to function bdb_nwkDescFree
   \   000032   90....       MOV       DPTR,#pBDBListNwk
   \   000035   E0           MOVX      A,@DPTR
   \   000036   FA           MOV       R2,A
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   FB           MOV       R3,A
   \   00003A   12....       LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
   \   00003D   E9           MOV       A,R1
   1873                bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,BDB_MSG_EVENT_FAIL,sizeof(uint8),&bdbJoinEvent);
   \   00003E                ; Setup parameters for call to function bdb_SendMsg
   \   00003E   7401         MOV       A,#0x1
   \   000040   12....       LCALL     ?XSTACK_DISP100_8
   \   000043   88..         MOV       ?V0,R0
   \   000045   89..         MOV       ?V1,R1
   \   000047   78..         MOV       R0,#?V0
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004C   7C01         MOV       R4,#0x1
   \   00004E   7B01         MOV       R3,#0x1
   \   000050   7A03         MOV       R2,#0x3
   \   000052   90....       MOV       DPTR,#bdb_TaskID
   \   000055   E0           MOVX      A,@DPTR
   \   000056   F9           MOV       R1,A
   \   000057   12....       LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
   \   00005A   7402         MOV       A,#0x2
   \   00005C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005F   802F         SJMP      ??bdb_tryNwkAssoc_1
   1874              }
   1875            }
   1876            else
   1877            {
   1878              bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_NWK_DISC;
   \                     ??bdb_tryNwkAssoc_0:
   \   000061   90....       MOV       DPTR,#bdbCommissioningProcedureState + 2
   \   000064   7400         MOV       A,#0x0
   \   000066   F0           MOVX      @DPTR,A
   1879              uint8 bdbJoinEvent = BDB_JOIN_EVENT_NWK_DISCOVERY;
   \   000067   85..82       MOV       DPL,?XSP + 0
   \   00006A   85..83       MOV       DPH,?XSP + 1
   \   00006D   7400         MOV       A,#0x0
   \   00006F   F0           MOVX      @DPTR,A
   1880              
   1881              bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,BDB_MSG_EVENT_FAIL,sizeof(uint8),&bdbJoinEvent);
   \   000070                ; Setup parameters for call to function bdb_SendMsg
   \   000070   A8..         MOV       R0,?XSP + 0
   \   000072   A9..         MOV       R1,?XSP + 1
   \   000074   88..         MOV       ?V0,R0
   \   000076   89..         MOV       ?V1,R1
   \   000078   78..         MOV       R0,#?V0
   \   00007A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007D   7C01         MOV       R4,#0x1
   \   00007F   7B01         MOV       R3,#0x1
   \   000081   7A03         MOV       R2,#0x3
   \   000083   90....       MOV       DPTR,#bdb_TaskID
   \   000086   E0           MOVX      A,@DPTR
   \   000087   F9           MOV       R1,A
   \   000088   12....       LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
   \   00008B   7402         MOV       A,#0x2
   \   00008D   12....       LCALL     ?DEALLOC_XSTACK8
   1882            }
   1883          }
   \                     ??bdb_tryNwkAssoc_1:
   \   000090   7402         MOV       A,#0x2
   \   000092   12....       LCALL     ?DEALLOC_XSTACK8
   \   000095   7F02         MOV       R7,#0x2
   \   000097   02....       LJMP      ?BANKED_LEAVE_XDATA
   1884          
   1885          
   1886          
   1887           /*********************************************************************
   1888           * @fn          bdb_nwkAssocAttemt
   1889           *
   1890           * @brief       Process the result of an attempt to associate to a network 
   1891           *
   1892           * @param       didSuccess - bool
   1893           *
   1894           * @return      none
   1895           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1896          void bdb_nwkAssocAttemt(bool didSuccess)
   \                     bdb_nwkAssocAttemt:
   1897          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FF           MOV       R7,A
   1898            bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_STATE_JOINING;
   \   00000C   90....       MOV       DPTR,#bdbAttributes + 10
   \   00000F   7403         MOV       A,#0x3
   \   000011   F0           MOVX      @DPTR,A
   1899            uint8 bdbJoinEvent = BDB_JOIN_EVENT_ASSOCIATION;
   \   000012   85..82       MOV       DPL,?XSP + 0
   \   000015   85..83       MOV       DPH,?XSP + 1
   \   000018   7401         MOV       A,#0x1
   \   00001A   F0           MOVX      @DPTR,A
   1900            uint8 status;
   1901            
   1902            if(didSuccess)
   \   00001B   EF           MOV       A,R7
   \   00001C   6004         JZ        ??bdb_nwkAssocAttemt_0
   1903            {
   1904              status = BDB_MSG_EVENT_SUCCESS;
   \   00001E   7E00         MOV       R6,#0x0
   \   000020   8026         SJMP      ??bdb_nwkAssocAttemt_1
   1905            }
   1906            else
   1907            {
   1908              if(bdb_nwkAssocRetriesCount < BDBC_REC_SAME_NETWORK_RETRY_ATTEMPS)
   \                     ??bdb_nwkAssocAttemt_0:
   \   000022   90....       MOV       DPTR,#bdb_nwkAssocRetriesCount
   \   000025   E0           MOVX      A,@DPTR
   \   000026   C3           CLR       C
   \   000027   9403         SUBB      A,#0x3
   \   000029   5009         JNC       ??bdb_nwkAssocAttemt_2
   1909              {
   1910                bdb_nwkAssocRetriesCount++;
   \   00002B   90....       MOV       DPTR,#bdb_nwkAssocRetriesCount
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   2401         ADD       A,#0x1
   \   000031   F0           MOVX      @DPTR,A
   \   000032   8012         SJMP      ??bdb_nwkAssocAttemt_3
   1911              }
   1912              else
   1913              {
   1914                //Free the first in the list and prepare for futher processing
   1915                bdb_nwkDescFree(pBDBListNwk);
   \                     ??bdb_nwkAssocAttemt_2:
   \   000034                ; Setup parameters for call to function bdb_nwkDescFree
   \   000034   90....       MOV       DPTR,#pBDBListNwk
   \   000037   E0           MOVX      A,@DPTR
   \   000038   FA           MOV       R2,A
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   FB           MOV       R3,A
   \   00003C   12....       LCALL     `??bdb_nwkDescFree::?relay`; Banked call to: bdb_nwkDescFree
   \   00003F   E9           MOV       A,R1
   1916                bdb_nwkAssocRetriesCount = 0;
   \   000040   90....       MOV       DPTR,#bdb_nwkAssocRetriesCount
   \   000043   7400         MOV       A,#0x0
   \   000045   F0           MOVX      @DPTR,A
   1917              }
   1918              status = BDB_MSG_EVENT_FAIL;
   \                     ??bdb_nwkAssocAttemt_3:
   \   000046   7E01         MOV       R6,#0x1
   1919            }
   1920            bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_JOINING,status,sizeof(uint8),&bdbJoinEvent);
   \                     ??bdb_nwkAssocAttemt_1:
   \   000048                ; Setup parameters for call to function bdb_SendMsg
   \   000048   A8..         MOV       R0,?XSP + 0
   \   00004A   A9..         MOV       R1,?XSP + 1
   \   00004C   88..         MOV       ?V0,R0
   \   00004E   89..         MOV       ?V1,R1
   \   000050   78..         MOV       R0,#?V0
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000055   7C01         MOV       R4,#0x1
   \   000057   EE           MOV       A,R6
   \   000058   FB           MOV       R3,A
   \   000059   7A03         MOV       R2,#0x3
   \   00005B   90....       MOV       DPTR,#bdb_TaskID
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F9           MOV       R1,A
   \   000060   12....       LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
   \   000063   7402         MOV       A,#0x2
   \   000065   12....       LCALL     ?DEALLOC_XSTACK8
   1921          }
   \   000068   7401         MOV       A,#0x1
   \   00006A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006D   7F02         MOV       R7,#0x2
   \   00006F   02....       LJMP      ?BANKED_LEAVE_XDATA
   1922                                 
   1923          
   1924          /****************************************************************************
   1925           * @fn          bdb_nwkDescFree
   1926           *
   1927           * @brief       This function frees one network discovery data.
   1928           *
   1929           * @param       ZSuccess - If the device was found and erased
   1930           * @param       ZInvalidParameter - Not found
   1931           *
   1932           * @return      none
   1933           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1934          ZStatus_t bdb_nwkDescFree(networkDesc_t* nodeDescToRemove)
   \                     bdb_nwkDescFree:
   1935          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   1936            networkDesc_t* current_desc;
   1937            networkDesc_t* prev_desc;
   1938            
   1939            current_desc = pBDBListNwk;
   \   000009   90....       MOV       DPTR,#pBDBListNwk
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F8           MOV       R0,A
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F9           MOV       R1,A
   \   000011   E8           MOV       A,R0
   \   000012   FE           MOV       R6,A
   \   000013   E9           MOV       A,R1
   \   000014   FF           MOV       R7,A
   1940          
   1941            while(current_desc != NULL)
   \                     ??bdb_nwkDescFree_0:
   \   000015   EE           MOV       A,R6
   \   000016   4F           ORL       A,R7
   \   000017   6077         JZ        ??bdb_nwkDescFree_1
   1942            {  
   1943              if(current_desc == nodeDescToRemove)
   \   000019   E5..         MOV       A,?V0
   \   00001B   6E           XRL       A,R6
   \   00001C   7003         JNZ       ??bdb_nwkDescFree_2
   \   00001E   E5..         MOV       A,?V1
   \   000020   6F           XRL       A,R7
   \                     ??bdb_nwkDescFree_2:
   \   000021   7059         JNZ       ??bdb_nwkDescFree_3
   1944              {
   1945                if (current_desc == pBDBListNwk)
   \   000023   90....       MOV       DPTR,#pBDBListNwk
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F8           MOV       R0,A
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F9           MOV       R1,A
   \   00002B   EE           MOV       A,R6
   \   00002C   68           XRL       A,R0
   \   00002D   7002         JNZ       ??bdb_nwkDescFree_4
   \   00002F   EF           MOV       A,R7
   \   000030   69           XRL       A,R1
   \                     ??bdb_nwkDescFree_4:
   \   000031   7020         JNZ       ??bdb_nwkDescFree_5
   1946                {
   1947                  pBDBListNwk = pBDBListNwk->nextDesc;
   \   000033   90....       MOV       DPTR,#pBDBListNwk
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F8           MOV       R0,A
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   C8           XCH       A,R0
   \   00003B   2414         ADD       A,#0x14
   \   00003D   F582         MOV       DPL,A
   \   00003F   C8           XCH       A,R0
   \   000040   3400         ADDC      A,#0x0
   \   000042   F583         MOV       DPH,A
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F8           MOV       R0,A
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F9           MOV       R1,A
   \   000049   90....       MOV       DPTR,#pBDBListNwk
   \   00004C   E8           MOV       A,R0
   \   00004D   F0           MOVX      @DPTR,A
   \   00004E   A3           INC       DPTR
   \   00004F   E9           MOV       A,R1
   \   000050   F0           MOVX      @DPTR,A
   \   000051   801E         SJMP      ??bdb_nwkDescFree_6
   1948                }
   1949                else
   1950                {
   1951                  prev_desc->nextDesc = current_desc->nextDesc;
   \                     ??bdb_nwkDescFree_5:
   \   000053   EE           MOV       A,R6
   \   000054   2414         ADD       A,#0x14
   \   000056   F582         MOV       DPL,A
   \   000058   E4           CLR       A
   \   000059   3F           ADDC      A,R7
   \   00005A   F583         MOV       DPH,A
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   F8           MOV       R0,A
   \   00005E   A3           INC       DPTR
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F9           MOV       R1,A
   \   000061   E5..         MOV       A,?V2
   \   000063   2414         ADD       A,#0x14
   \   000065   F582         MOV       DPL,A
   \   000067   E4           CLR       A
   \   000068   35..         ADDC      A,?V3
   \   00006A   F583         MOV       DPH,A
   \   00006C   E8           MOV       A,R0
   \   00006D   F0           MOVX      @DPTR,A
   \   00006E   A3           INC       DPTR
   \   00006F   E9           MOV       A,R1
   \   000070   F0           MOVX      @DPTR,A
   1952                }
   1953                
   1954                osal_mem_free( current_desc );
   \                     ??bdb_nwkDescFree_6:
   \   000071                ; Setup parameters for call to function osal_mem_free
   \   000071   EE           MOV       A,R6
   \   000072   FA           MOV       R2,A
   \   000073   EF           MOV       A,R7
   \   000074   FB           MOV       R3,A
   \   000075   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1955                
   1956                return ZSuccess;
   \   000078   7900         MOV       R1,#0x0
   \   00007A   8016         SJMP      ??bdb_nwkDescFree_7
   1957              }
   1958          
   1959              prev_desc = current_desc;
   \                     ??bdb_nwkDescFree_3:
   \   00007C   8E..         MOV       ?V2,R6
   \   00007E   8F..         MOV       ?V3,R7
   1960              current_desc = current_desc->nextDesc;
   \   000080   EE           MOV       A,R6
   \   000081   2414         ADD       A,#0x14
   \   000083   F582         MOV       DPL,A
   \   000085   E4           CLR       A
   \   000086   3F           ADDC      A,R7
   \   000087   F583         MOV       DPH,A
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   FE           MOV       R6,A
   \   00008B   A3           INC       DPTR
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   FF           MOV       R7,A
   \   00008E   8085         SJMP      ??bdb_nwkDescFree_0
   1961            }
   1962            
   1963            return ZInvalidParameter;
   \                     ??bdb_nwkDescFree_1:
   \   000090   7902         MOV       R1,#0x2
   \                     ??bdb_nwkDescFree_7:
   \   000092   7F04         MOV       R7,#0x4
   \   000094   02....       LJMP      ?BANKED_LEAVE_XDATA
   1964          }
   1965          
   1966          /*********************************************************************
   1967          * @fn          bdb_joinProcess
   1968          *
   1969          * @brief       Start the joining process for the selected nwk
   1970          *
   1971          * @return      ZStatus_t
   1972          */  

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1973          ZStatus_t bdb_joinProcess(networkDesc_t *pChosenNwk)
   \                     bdb_joinProcess:
   1974          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1975            ZStatus_t status;
   1976           
   1977            ZDApp_ChangeState( DEV_NWK_JOINING );
   \   000009                ; Setup parameters for call to function ZDApp_ChangeState
   \   000009   7903         MOV       R1,#0x3
   \   00000B   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1978            ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
   \   00000E                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00000E   8E82         MOV       DPL,R6
   \   000010   8F83         MOV       DPH,R7
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F9           MOV       R1,A
   \   00001A   12....       LCALL     `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   1979          
   1980            status =  NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
   1981                                  pChosenNwk->logicalChannel,
   1982                                  ZDO_Config_Node_Descriptor.CapabilityFlags,
   1983                                  pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth );
   \   00001D                ; Setup parameters for call to function NLME_JoinRequest
   \   00001D   8E82         MOV       DPL,R6
   \   00001F   8F83         MOV       DPH,R7
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F5..         MOV       ?V1,A
   \   00002E   78..         MOV       R0,#?V1
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000033   8E82         MOV       DPL,R6
   \   000035   8F83         MOV       DPH,R7
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000041   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F5..         MOV       ?V1,A
   \   000047   78..         MOV       R0,#?V1
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004C   8E82         MOV       DPL,R6
   \   00004E   8F83         MOV       DPH,R7
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   F9           MOV       R1,A
   \   000054   8E82         MOV       DPL,R6
   \   000056   8F83         MOV       DPH,R7
   \   000058   E0           MOVX      A,@DPTR
   \   000059   FC           MOV       R4,A
   \   00005A   A3           INC       DPTR
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   FD           MOV       R5,A
   \   00005D   EE           MOV       A,R6
   \   00005E   240B         ADD       A,#0xb
   \   000060   FA           MOV       R2,A
   \   000061   E4           CLR       A
   \   000062   3F           ADDC      A,R7
   \   000063   FB           MOV       R3,A
   \   000064   12....       LCALL     `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   000067   7404         MOV       A,#0x4
   \   000069   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006C   E9           MOV       A,R1
   \   00006D   F5..         MOV       ?V0,A
   1984            
   1985            if(status == ZSuccess)
   \   00006F   E5..         MOV       A,?V0
   \   000071   705B         JNZ       ??bdb_joinProcess_0
   1986            {
   1987              // The receiver is on, turn network layer polling off.
   1988              if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \   000073   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000076   E0           MOVX      A,@DPTR
   \   000077   A2E3         MOV       C,0xE0 /* A   */.3
   \   000079   502D         JNC       ??bdb_joinProcess_1
   1989              {
   1990                // for an End Device with NO Child Table Management process or for a Router
   1991                if ( ( ZG_DEVICE_RTR_TYPE )  ||
   1992                     ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
   \   00007B   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   600E         JZ        ??bdb_joinProcess_2
   \   000081   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000084   E0           MOVX      A,@DPTR
   \   000085   6401         XRL       A,#0x1
   \   000087   6006         JZ        ??bdb_joinProcess_2
   \   000089   90....       MOV       DPTR,#zgChildAgingEnable
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   703F         JNZ       ??bdb_joinProcess_0
   1993                {
   1994                  NLME_SetPollRate( 0 );
   \                     ??bdb_joinProcess_2:
   \   00008F                ; Setup parameters for call to function NLME_SetPollRate
   \   00008F   90....       MOV       DPTR,#__Constant_0
   \   000092   12....       LCALL     ?XLOAD_R2345
   \   000095   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1995                  NLME_SetQueuedPollRate( 0 );
   \   000098                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000098   7A00         MOV       R2,#0x0
   \   00009A   7B00         MOV       R3,#0x0
   \   00009C   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1996                  NLME_SetResponseRate( 0 );
   \   00009F                ; Setup parameters for call to function NLME_SetResponseRate
   \   00009F   7A00         MOV       R2,#0x0
   \   0000A1   7B00         MOV       R3,#0x0
   \   0000A3   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   \   0000A6   8026         SJMP      ??bdb_joinProcess_0
   1997                }
   1998              }
   1999              else
   2000              {
   2001                if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   \                     ??bdb_joinProcess_1:
   \   0000A8   90....       MOV       DPTR,#devStartMode
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   7020         JNZ       ??bdb_joinProcess_0
   2002                {
   2003                  ZDApp_SavedPollRate = zgPollRate;
   \   0000AE   90....       MOV       DPTR,#zgPollRate
   \   0000B1   12....       LCALL     ?XLOAD_R0123
   \   0000B4   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \   0000B7   12....       LCALL     ?XSTORE_R0123
   2004                  NLME_SetPollRate( zgRejoinPollRate );
   \   0000BA                ; Setup parameters for call to function NLME_SetPollRate
   \   0000BA   90....       MOV       DPTR,#zgRejoinPollRate
   \   0000BD   E0           MOVX      A,@DPTR
   \   0000BE   F5..         MOV       ?V2,A
   \   0000C0   A3           INC       DPTR
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   F5..         MOV       ?V3,A
   \   0000C4   AA..         MOV       R2,?V2
   \   0000C6   AB..         MOV       R3,?V3
   \   0000C8   E4           CLR       A
   \   0000C9   FC           MOV       R4,A
   \   0000CA   FD           MOV       R5,A
   \   0000CB   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   2005                }
   2006              }
   2007            }
   2008            return status;
   \                     ??bdb_joinProcess_0:
   \   0000CE   A9..         MOV       R1,?V0
   \   0000D0   7F04         MOV       R7,#0x4
   \   0000D2   02....       LJMP      ?BANKED_LEAVE_XDATA
   2009          }
   2010          #endif
   2011          
   2012          
   2013           /*********************************************************************
   2014           * @fn          bdb_setChannelAttribute
   2015           *
   2016           * @brief       Set the primary or seconday channel for discovery or formation procedure
   2017           *
   2018           * @param       isPrimaryChannel - True if channel to set is primary,  
   2019           *                                 False if the channel to set is secondary
   2020           *
   2021           * @param       channel - Channel mask
   2022           *
   2023           * @return      none
   2024           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2025          void bdb_setChannelAttribute(bool isPrimaryChannel, uint32 channel)
   \                     bdb_setChannelAttribute:
   2026          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   2027            if(isPrimaryChannel)
   \   00000D   E9           MOV       A,R1
   \   00000E   600A         JZ        ??bdb_setChannelAttribute_0
   2028            {
   2029              bdbAttributes.bdbPrimaryChannelSet = channel;
   \   000010   90....       MOV       DPTR,#bdbAttributes + 4
   \   000013   78..         MOV       R0,#?V0
   \   000015   12....       LCALL     ?L_MOV_TO_X
   \   000018   8008         SJMP      ??bdb_setChannelAttribute_1
   2030            }
   2031            else
   2032            {
   2033              bdbAttributes.bdbSecondaryChannelSet = channel;
   \                     ??bdb_setChannelAttribute_0:
   \   00001A   90....       MOV       DPTR,#bdbAttributes
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?L_MOV_TO_X
   2034            }
   2035          }
   \                     ??bdb_setChannelAttribute_1:
   \   000022   7F04         MOV       R7,#0x4
   \   000024   02....       LJMP      ?BANKED_LEAVE_XDATA
   2036          
   2037           /*********************************************************************
   2038           * @fn          bdb_setChannel
   2039           *
   2040           * @brief       Set channel and save it in Nv for joining/formation operations
   2041           *
   2042           * @param       channel - Channel mask
   2043           *
   2044           * @return      none
   2045           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2046          void bdb_setChannel(uint32 channel)
   \                     bdb_setChannel:
   2047          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   2048            //Assign the channel and save it into nv
   2049            vScanChannels = channel;
   \   00000D   90....       MOV       DPTR,#zgDefaultChannelList
   \   000010   78..         MOV       R0,#?V0
   \   000012   12....       LCALL     ?L_MOV_TO_X
   2050            runtimeChannel = channel;
   \   000015   90....       MOV       DPTR,#runtimeChannel
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?L_MOV_TO_X
   2051              
   2052            osal_nv_write(ZCD_NV_CHANLIST,0,sizeof(uint32),&vScanChannels);
   \   00001D                ; Setup parameters for call to function osal_nv_write
   \   00001D   75....       MOV       ?V4,#zgDefaultChannelList & 0xff
   \   000020   75....       MOV       ?V5,#(zgDefaultChannelList >> 8) & 0xff
   \   000023   78..         MOV       R0,#?V4
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   75..04       MOV       ?V4,#0x4
   \   00002B   75..00       MOV       ?V5,#0x0
   \   00002E   78..         MOV       R0,#?V4
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   7C00         MOV       R4,#0x0
   \   000035   7D00         MOV       R5,#0x0
   \   000037   7A84         MOV       R2,#-0x7c
   \   000039   7B00         MOV       R3,#0x0
   \   00003B   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003E   7404         MOV       A,#0x4
   \   000040   12....       LCALL     ?DEALLOC_XSTACK8
   \   000043   E9           MOV       A,R1
   2053          }
   \   000044   7F06         MOV       R7,#0x6
   \   000046   02....       LJMP      ?BANKED_LEAVE_XDATA
   2054          
   2055          
   2056           /*********************************************************************
   2057           * @fn          bdb_nwkJoiningFormation   
   2058           *
   2059           * @brief       Performs Joining/Formation operation on primary or secondary channel
   2060           *
   2061           * @param       isJoining - TRUE if the device is performing joining, FALSE is performing Formation
   2062           *
   2063           * @return      none
   2064           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2065          void bdb_nwkJoiningFormation(bool isJoining)
   \                     bdb_nwkJoiningFormation:
   2066          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   2067            
   2068            if((vDoPrimaryScan) && (bdbAttributes.bdbPrimaryChannelSet))
   \   000007   90....       MOV       DPTR,#vDoPrimaryScan
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   6017         JZ        ??bdb_nwkJoiningFormation_0
   \   00000D   90....       MOV       DPTR,#bdbAttributes + 4
   \   000010   12....       LCALL     ?XLOAD_R0123
   \   000013   E8           MOV       A,R0
   \   000014   49           ORL       A,R1
   \   000015   4A           ORL       A,R2
   \   000016   4B           ORL       A,R3
   \   000017   600B         JZ        ??bdb_nwkJoiningFormation_0
   2069            {
   2070              bdb_setChannel(bdbAttributes.bdbPrimaryChannelSet);
   \   000019                ; Setup parameters for call to function bdb_setChannel
   \   000019   90....       MOV       DPTR,#bdbAttributes + 4
   \   00001C   12....       LCALL     ?XLOAD_R2345
   \   00001F   12....       LCALL     `??bdb_setChannel::?relay`; Banked call to: bdb_setChannel
   \   000022   800F         SJMP      ??bdb_nwkJoiningFormation_1
   2071            }
   2072            else
   2073            {
   2074              vDoPrimaryScan = FALSE;
   \                     ??bdb_nwkJoiningFormation_0:
   \   000024   90....       MOV       DPTR,#vDoPrimaryScan
   \   000027   7400         MOV       A,#0x0
   \   000029   F0           MOVX      @DPTR,A
   2075              bdb_setChannel(bdbAttributes.bdbSecondaryChannelSet);
   \   00002A                ; Setup parameters for call to function bdb_setChannel
   \   00002A   90....       MOV       DPTR,#bdbAttributes
   \   00002D   12....       LCALL     ?XLOAD_R2345
   \   000030   12....       LCALL     `??bdb_setChannel::?relay`; Banked call to: bdb_setChannel
   2076            }
   2077          
   2078            if(vScanChannels)
   \                     ??bdb_nwkJoiningFormation_1:
   \   000033   90....       MOV       DPTR,#zgDefaultChannelList
   \   000036   12....       LCALL     ?XLOAD_R0123
   \   000039   E8           MOV       A,R0
   \   00003A   49           ORL       A,R1
   \   00003B   4A           ORL       A,R2
   \   00003C   4B           ORL       A,R3
   \   00003D   602F         JZ        ??bdb_nwkJoiningFormation_2
   2079            {
   2080              if(ZG_DEVICE_RTRONLY_TYPE)
   \   00003F   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000042   E0           MOVX      A,@DPTR
   \   000043   6401         XRL       A,#0x1
   \   000045   701B         JNZ       ??bdb_nwkJoiningFormation_3
   2081              {
   2082                if(isJoining)
   \   000047   EE           MOV       A,R6
   \   000048   600C         JZ        ??bdb_nwkJoiningFormation_4
   2083                {
   2084                  ZDOInitDeviceEx(100,0);
   \   00004A                ; Setup parameters for call to function ZDOInitDeviceEx
   \   00004A   7900         MOV       R1,#0x0
   \   00004C   7A64         MOV       R2,#0x64
   \   00004E   7B00         MOV       R3,#0x0
   \   000050   12....       LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
   \   000053   E9           MOV       A,R1
   \   000054   802B         SJMP      ??bdb_nwkJoiningFormation_5
   2085                }
   2086                else
   2087                {
   2088                  ZDOInitDeviceEx(100,1);
   \                     ??bdb_nwkJoiningFormation_4:
   \   000056                ; Setup parameters for call to function ZDOInitDeviceEx
   \   000056   7901         MOV       R1,#0x1
   \   000058   7A64         MOV       R2,#0x64
   \   00005A   7B00         MOV       R3,#0x0
   \   00005C   12....       LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
   \   00005F   E9           MOV       A,R1
   \   000060   801F         SJMP      ??bdb_nwkJoiningFormation_5
   2089                }
   2090              }
   2091              //ZED can only join, and ZC can only create
   2092              else
   2093              {
   2094                ZDOInitDeviceEx(100,0);
   \                     ??bdb_nwkJoiningFormation_3:
   \   000062                ; Setup parameters for call to function ZDOInitDeviceEx
   \   000062   7900         MOV       R1,#0x0
   \   000064   7A64         MOV       R2,#0x64
   \   000066   7B00         MOV       R3,#0x0
   \   000068   12....       LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
   \   00006B   E9           MOV       A,R1
   \   00006C   8013         SJMP      ??bdb_nwkJoiningFormation_5
   2095              }
   2096            }
   2097            else
   2098            {
   2099              if(isJoining)
   \                     ??bdb_nwkJoiningFormation_2:
   \   00006E   EE           MOV       A,R6
   \   00006F   6009         JZ        ??bdb_nwkJoiningFormation_6
   2100              {
   2101                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, FALSE);
   \   000071                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000071   7A00         MOV       R2,#0x0
   \   000073   7903         MOV       R1,#0x3
   \   000075   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   \   000078   8007         SJMP      ??bdb_nwkJoiningFormation_5
   2102              }
   2103              else
   2104              {
   2105                bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
   \                     ??bdb_nwkJoiningFormation_6:
   \   00007A                ; Setup parameters for call to function bdb_reportCommissioningState
   \   00007A   7A00         MOV       R2,#0x0
   \   00007C   7905         MOV       R1,#0x5
   \   00007E   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2106              }
   2107            }
   2108          }
   \                     ??bdb_nwkJoiningFormation_5:
   \   000081   7F01         MOV       R7,#0x1
   \   000083   02....       LJMP      ?BANKED_LEAVE_XDATA
   2109          
   2110          #if (ZG_BUILD_JOINING_TYPE)
   2111           /*********************************************************************
   2112           * @fn          bdb_tcLinkKeyExchangeAttempt
   2113           *
   2114           * @brief       Generic send msg for TC link key exchange process attempts
   2115           *
   2116           * @param       didSuccess - FALSE if the step failed/timeout, TRUE otherwise
   2117           * @param       bdbTCExchangeState - Step in which the attemp was done
   2118           *
   2119           * @return      none
   2120           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2121          void bdb_tcLinkKeyExchangeAttempt(bool didSuccess, uint8 bdbTCExchangeState)
   \                     bdb_tcLinkKeyExchangeAttempt:
   2122          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FF           MOV       R7,A
   \   00000C   8A..         MOV       ?V0,R2
   2123            bool bdbEventStatus = BDB_MSG_EVENT_SUCCESS;
   \   00000E   7E00         MOV       R6,#0x0
   2124            uint8 dummy;
   2125            bdbCommissioningProcedureState.bdbTCExchangeState = bdbTCExchangeState;
   \   000010   E5..         MOV       A,?V0
   \   000012   90....       MOV       DPTR,#bdbCommissioningProcedureState + 1
   \   000015   F0           MOVX      @DPTR,A
   2126            if(didSuccess)
   \   000016   EF           MOV       A,R7
   \   000017   6015         JZ        ??bdb_tcLinkKeyExchangeAttempt_0
   2127            {
   2128              //Allow try since we are performing a new step.
   2129              osal_stop_timerEx(bdb_TaskID, BDB_PROCESS_TIMEOUT);
   \   000019                ; Setup parameters for call to function osal_stop_timerEx
   \   000019   7A00         MOV       R2,#0x0
   \   00001B   7B10         MOV       R3,#0x10
   \   00001D   90....       MOV       DPTR,#bdb_TaskID
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F9           MOV       R1,A
   \   000022   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000025   E9           MOV       A,R1
   2130              bdbAttributes.bdbTCLinkKeyExchangeAttempts = 0;
   \   000026   90....       MOV       DPTR,#bdbAttributes + 16
   \   000029   7400         MOV       A,#0x0
   \   00002B   F0           MOVX      @DPTR,A
   \   00002C   8002         SJMP      ??bdb_tcLinkKeyExchangeAttempt_1
   2131            }
   2132            else
   2133            {
   2134              bdbEventStatus = BDB_MSG_EVENT_FAIL;
   \                     ??bdb_tcLinkKeyExchangeAttempt_0:
   \   00002E   7E01         MOV       R6,#0x1
   2135            }
   2136            bdb_SendMsg(bdb_TaskID,BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE,bdbEventStatus,1, &dummy);
   \                     ??bdb_tcLinkKeyExchangeAttempt_1:
   \   000030                ; Setup parameters for call to function bdb_SendMsg
   \   000030   A8..         MOV       R0,?XSP + 0
   \   000032   A9..         MOV       R1,?XSP + 1
   \   000034   88..         MOV       ?V2,R0
   \   000036   89..         MOV       ?V3,R1
   \   000038   78..         MOV       R0,#?V2
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   7C01         MOV       R4,#0x1
   \   00003F   EE           MOV       A,R6
   \   000040   FB           MOV       R3,A
   \   000041   7A01         MOV       R2,#0x1
   \   000043   90....       MOV       DPTR,#bdb_TaskID
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F9           MOV       R1,A
   \   000048   12....       LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
   \   00004B   7402         MOV       A,#0x2
   \   00004D   12....       LCALL     ?DEALLOC_XSTACK8
   2137          }
   \   000050   7401         MOV       A,#0x1
   \   000052   12....       LCALL     ?DEALLOC_XSTACK8
   \   000055   7F04         MOV       R7,#0x4
   \   000057   02....       LJMP      ?BANKED_LEAVE_XDATA
   2138          
   2139          
   2140           /*********************************************************************
   2141           * @fn          bdb_requestVerifyTCLinkKey
   2142           *
   2143           * @brief       Attempt to verify the TC link key by sending Verify Key Request
   2144           *
   2145           * @param       none
   2146           *
   2147           * @return      none
   2148           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2149          void bdb_requestVerifyTCLinkKey(void)
   \                     bdb_requestVerifyTCLinkKey:
   2150          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 11
   \   000004   74F5         MOV       A,#-0xb
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   2151              uint8 TC_ExtAddr[Z_EXTADDR_LEN];
   2152              APSME_VerifyKeyReq_t vKey;
   2153              
   2154              APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
   \   000009                ; Setup parameters for call to function APSME_GetRequest
   \   000009   7403         MOV       A,#0x3
   \   00000B   12....       LCALL     ?XSTACK_DISP102_8
   \   00000E   7A00         MOV       R2,#0x0
   \   000010   7B00         MOV       R3,#0x0
   \   000012   79AB         MOV       R1,#-0x55
   \   000014   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   \   000017   E9           MOV       A,R1
   2155              
   2156              vKey.tcExtAddr = TC_ExtAddr;
   \   000018   7403         MOV       A,#0x3
   \   00001A   12....       LCALL     ?XSTACK_DISP100_8
   \   00001D   85..82       MOV       DPL,?XSP + 0
   \   000020   85..83       MOV       DPH,?XSP + 1
   \   000023   E8           MOV       A,R0
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   E9           MOV       A,R1
   \   000027   F0           MOVX      @DPTR,A
   2157              vKey.keyType = KEY_TYPE_TC_LINK;
   \   000028   7402         MOV       A,#0x2
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   7404         MOV       A,#0x4
   \   00002F   F0           MOVX      @DPTR,A
   2158              
   2159              APSME_VerifyKeyReq( &vKey );
   \   000030                ; Setup parameters for call to function APSME_VerifyKeyReq
   \   000030   AA..         MOV       R2,?XSP + 0
   \   000032   AB..         MOV       R3,?XSP + 1
   \   000034   12....       LCALL     `??APSME_VerifyKeyReq::?relay`; Banked call to: APSME_VerifyKeyReq
   \   000037   E9           MOV       A,R1
   2160              
   2161              osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
   \   000038                ; Setup parameters for call to function osal_stop_timerEx
   \   000038   7A00         MOV       R2,#0x0
   \   00003A   7B10         MOV       R3,#0x10
   \   00003C   90....       MOV       DPTR,#bdb_TaskID
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F9           MOV       R1,A
   \   000041   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000044   E9           MOV       A,R1
   2162              osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT,BDBC_TC_LINK_KEY_EXANGE_TIMEOUT);
   \   000045                ; Setup parameters for call to function osal_start_timerEx
   \   000045   90....       MOV       DPTR,#__Constant_1388
   \   000048   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00004B   7A00         MOV       R2,#0x0
   \   00004D   7B10         MOV       R3,#0x10
   \   00004F   90....       MOV       DPTR,#bdb_TaskID
   \   000052   E0           MOVX      A,@DPTR
   \   000053   F9           MOV       R1,A
   \   000054   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000057   7404         MOV       A,#0x4
   \   000059   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005C   E9           MOV       A,R1
   2163              
   2164          }
   \   00005D   740B         MOV       A,#0xb
   \   00005F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000062   D083         POP       DPH
   \   000064   D082         POP       DPL
   \   000066   02....       LJMP      ?BRET
   2165          
   2166          /*********************************************************************
   2167           * @fn          bdb_requestTCLinkKey
   2168           *
   2169           * @brief       Attempt to request a TC link key
   2170           *
   2171           * @param       none
   2172           *
   2173           * @return      none
   2174           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2175          void bdb_requestTCLinkKey(void)
   \                     bdb_requestTCLinkKey:
   2176          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV       A,#-0xd
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   2177            zAddrType_t destAddr;
   2178            APSME_RequestKeyReq_t req;
   2179          
   2180            destAddr.addrMode = Addr16Bit;
   \   000009   740C         MOV       A,#0xc
   \   00000B   12....       LCALL     ?XSTACK_DISP0_8
   \   00000E   7402         MOV       A,#0x2
   \   000010   F0           MOVX      @DPTR,A
   2181            destAddr.addr.shortAddr = 0x0000;
   \   000011   7404         MOV       A,#0x4
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   7400         MOV       A,#0x0
   \   000018   F0           MOVX      @DPTR,A
   \   000019   A3           INC       DPTR
   \   00001A   7400         MOV       A,#0x0
   \   00001C   F0           MOVX      @DPTR,A
   2182            
   2183            req.dstAddr = destAddr.addr.shortAddr;
   \   00001D   7404         MOV       A,#0x4
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F8           MOV       R0,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F9           MOV       R1,A
   \   000027   E8           MOV       A,R0
   \   000028   C0E0         PUSH      A
   \   00002A   85..82       MOV       DPL,?XSP + 0
   \   00002D   85..83       MOV       DPH,?XSP + 1
   \   000030   D0E0         POP       A
   \   000032   F0           MOVX      @DPTR,A
   2184            req.keyType = KEY_TYPE_TC_LINK;
   \   000033   7401         MOV       A,#0x1
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   7404         MOV       A,#0x4
   \   00003A   F0           MOVX      @DPTR,A
   2185            
   2186            APSME_RequestKeyReq(&req);
   \   00003B                ; Setup parameters for call to function APSME_RequestKeyReq
   \   00003B   AA..         MOV       R2,?XSP + 0
   \   00003D   AB..         MOV       R3,?XSP + 1
   \   00003F   12....       LCALL     `??APSME_RequestKeyReq::?relay`; Banked call to: APSME_RequestKeyReq
   \   000042   E9           MOV       A,R1
   2187            
   2188            osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
   \   000043                ; Setup parameters for call to function osal_stop_timerEx
   \   000043   7A00         MOV       R2,#0x0
   \   000045   7B10         MOV       R3,#0x10
   \   000047   90....       MOV       DPTR,#bdb_TaskID
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F9           MOV       R1,A
   \   00004C   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   00004F   E9           MOV       A,R1
   2189            
   2190            osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT,(uint32)requestLinkKeyTimeout);
   \   000050                ; Setup parameters for call to function osal_start_timerEx
   \   000050   90....       MOV       DPTR,#requestLinkKeyTimeout
   \   000053   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000056   7A00         MOV       R2,#0x0
   \   000058   7B10         MOV       R3,#0x10
   \   00005A   90....       MOV       DPTR,#bdb_TaskID
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   F9           MOV       R1,A
   \   00005F   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000062   7404         MOV       A,#0x4
   \   000064   12....       LCALL     ?DEALLOC_XSTACK8
   \   000067   E9           MOV       A,R1
   2191          } 
   \   000068   740D         MOV       A,#0xd
   \   00006A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006D   D083         POP       DPH
   \   00006F   D082         POP       DPL
   \   000071   02....       LJMP      ?BRET
   2192          
   2193          
   2194          /*********************************************************************
   2195           * @fn          bdb_requestTCStackVersion
   2196           *
   2197           * @brief       Attempt to request the TC stack version using ZDP Node desc if 
   2198           *              join a Centralized nwk
   2199           *
   2200           * @param       none
   2201           *
   2202           * @return      none
   2203           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2204          void bdb_requestTCStackVersion(void)
   \                     bdb_requestTCStackVersion:
   2205          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2206            if(requestNewTrustCenterLinkKey)
   \   00000A   90....       MOV       DPTR,#requestNewTrustCenterLinkKey
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   7003         JNZ       $+5
   \   000010   02....       LJMP      ??bdb_requestTCStackVersion_0 & 0xFFFF
   2207            {
   2208              if(!APSME_IsDistributedSecurity())
   \   000013                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   000013   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   000016   E9           MOV       A,R1
   \   000017   6003         JZ        $+5
   \   000019   02....       LJMP      ??bdb_requestTCStackVersion_1 & 0xFFFF
   2209              {
   2210                if(bdbAttributes.bdbTCLinkKeyExchangeMethod == BDB_TC_LINK_KEY_EXCHANGE_APS_KEY)
   \   00001C   90....       MOV       DPTR,#bdbAttributes + 18
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   705E         JNZ       ??bdb_requestTCStackVersion_2
   2211                {
   2212                  zAddrType_t destAddr;
   2213                 
   2214                  destAddr.addrMode = Addr16Bit;
   \   000022   7408         MOV       A,#0x8
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   7402         MOV       A,#0x2
   \   000029   F0           MOVX      @DPTR,A
   2215                  destAddr.addr.shortAddr = 0x0000;
   \   00002A   85..82       MOV       DPL,?XSP + 0
   \   00002D   85..83       MOV       DPH,?XSP + 1
   \   000030   7400         MOV       A,#0x0
   \   000032   F0           MOVX      @DPTR,A
   \   000033   A3           INC       DPTR
   \   000034   7400         MOV       A,#0x0
   \   000036   F0           MOVX      @DPTR,A
   2216                 
   2217                  ZDP_NodeDescReq( &destAddr, destAddr.addr.shortAddr, 0);  
   \   000037                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000037   75..00       MOV       ?V0,#0x0
   \   00003A   78..         MOV       R0,#?V0
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003F   7902         MOV       R1,#0x2
   \   000041   7401         MOV       A,#0x1
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   E0           MOVX      A,@DPTR
   \   000047   FC           MOV       R4,A
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   FD           MOV       R5,A
   \   00004B   7401         MOV       A,#0x1
   \   00004D   12....       LCALL     ?XSTACK_DISP101_8
   \   000050   12....       LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   000053   7401         MOV       A,#0x1
   \   000055   12....       LCALL     ?DEALLOC_XSTACK8
   \   000058   E9           MOV       A,R1
   2218                  
   2219                  osal_stop_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT);
   \   000059                ; Setup parameters for call to function osal_stop_timerEx
   \   000059   7A00         MOV       R2,#0x0
   \   00005B   7B10         MOV       R3,#0x10
   \   00005D   90....       MOV       DPTR,#bdb_TaskID
   \   000060   E0           MOVX      A,@DPTR
   \   000061   F9           MOV       R1,A
   \   000062   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000065   E9           MOV       A,R1
   2220                  osal_start_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT, BDBC_TC_LINK_KEY_EXANGE_TIMEOUT );
   \   000066                ; Setup parameters for call to function osal_start_timerEx
   \   000066   90....       MOV       DPTR,#__Constant_1388
   \   000069   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00006C   7A00         MOV       R2,#0x0
   \   00006E   7B10         MOV       R3,#0x10
   \   000070   90....       MOV       DPTR,#bdb_TaskID
   \   000073   E0           MOVX      A,@DPTR
   \   000074   F9           MOV       R1,A
   \   000075   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000078   7404         MOV       A,#0x4
   \   00007A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007D   E9           MOV       A,R1
   2221                  return;
   \   00007E   802F         SJMP      ??bdb_requestTCStackVersion_3
   2222                }
   2223                else
   2224                {
   2225                  if(pfnCBKETCLinkKeyExchange)
   \                     ??bdb_requestTCStackVersion_2:
   \   000080   90....       MOV       DPTR,#pfnCBKETCLinkKeyExchange
   \   000083   E0           MOVX      A,@DPTR
   \   000084   F8           MOV       R0,A
   \   000085   A3           INC       DPTR
   \   000086   E0           MOVX      A,@DPTR
   \   000087   F9           MOV       R1,A
   \   000088   E8           MOV       A,R0
   \   000089   49           ORL       A,R1
   \   00008A   6023         JZ        ??bdb_requestTCStackVersion_3
   2226                  {
   2227                    pfnCBKETCLinkKeyExchange();
   \   00008C                ; Setup parameters for indirect call
   \   00008C   90....       MOV       DPTR,#pfnCBKETCLinkKeyExchange
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   F8           MOV       R0,A
   \   000091   A3           INC       DPTR
   \   000092   E0           MOVX      A,@DPTR
   \   000093   F583         MOV       DPH,A
   \   000095   8882         MOV       DPL,R0
   \   000097   12....       LCALL     ?CALL_IND
   2228                  }
   2229                  return;
   \   00009A   8013         SJMP      ??bdb_requestTCStackVersion_3
   2230                }
   2231              }
   2232              else
   2233              {
   2234                bdb_setNodeJoinLinkKeyType(BDB_DISTRIBUTED_SECURITY_GLOBAL_LINK_KEY);
   \                     ??bdb_requestTCStackVersion_1:
   \   00009C                ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
   \   00009C   7901         MOV       R1,#0x1
   \   00009E   12....       LCALL     `??bdb_setNodeJoinLinkKeyType::?relay`; Banked call to: bdb_setNodeJoinLinkKeyType
   \   0000A1   8005         SJMP      ??bdb_requestTCStackVersion_4
   2235              }
   2236            }
   2237            else
   2238            {
   2239              //Key not required, set default which is global
   2240              bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
   \                     ??bdb_requestTCStackVersion_0:
   \   0000A3                ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
   \   0000A3   7900         MOV       R1,#0x0
   \   0000A5   12....       LCALL     `??bdb_setNodeJoinLinkKeyType::?relay`; Banked call to: bdb_setNodeJoinLinkKeyType
   2241            }
   2242            //TC link key not required or join distributed nwk
   2243            bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE,TRUE);
   \                     ??bdb_requestTCStackVersion_4:
   \   0000A8                ; Setup parameters for call to function bdb_reportCommissioningState
   \   0000A8   7A01         MOV       R2,#0x1
   \   0000AA   7901         MOV       R1,#0x1
   \   0000AC   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2244          }
   \                     ??bdb_requestTCStackVersion_3:
   \   0000AF   7409         MOV       A,#0x9
   \   0000B1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B4   7F01         MOV       R7,#0x1
   \   0000B6   02....       LJMP      ?BANKED_LEAVE_XDATA
   2245          #endif
   2246          
   2247          
   2248          /*********************************************************************
   2249           * @fn          bdb_nwkSteeringDeviceOnNwk
   2250           *
   2251           * @brief       Send ZDP mgmt permit joining
   2252           *
   2253           * @param       none
   2254           *
   2255           * @return      none
   2256           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2257          void bdb_nwkSteeringDeviceOnNwk(void)
   \                     bdb_nwkSteeringDeviceOnNwk:
   2258          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 9
   \   000004   74F7         MOV       A,#-0x9
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   2259            zAddrType_t dstAddr;
   2260            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
   \   000009   85..82       MOV       DPL,?XSP + 0
   \   00000C   85..83       MOV       DPH,?XSP + 1
   \   00000F   74FC         MOV       A,#-0x4
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   74FF         MOV       A,#-0x1
   \   000015   F0           MOVX      @DPTR,A
   2261            dstAddr.addrMode = AddrBroadcast;
   \   000016   7408         MOV       A,#0x8
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   740F         MOV       A,#0xf
   \   00001D   F0           MOVX      @DPTR,A
   2262            // Trust Center significance is always true
   2263            ZDP_MgmtPermitJoinReq( &dstAddr, BDBC_MIN_COMMISSIONING_TIME, TRUE, FALSE );
   \   00001E                ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
   \   00001E   7D00         MOV       R5,#0x0
   \   000020   7C01         MOV       R4,#0x1
   \   000022   79B4         MOV       R1,#-0x4c
   \   000024   AA..         MOV       R2,?XSP + 0
   \   000026   AB..         MOV       R3,?XSP + 1
   \   000028   12....       LCALL     `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
   \   00002B   E9           MOV       A,R1
   2264          }
   \   00002C   7409         MOV       A,#0x9
   \   00002E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000031   D083         POP       DPH
   \   000033   D082         POP       DPL
   \   000035   02....       LJMP      ?BRET
   2265          
   2266          
   2267          /*********************************************************************
   2268           * @fn          bdb_startResumeCommissioningProcess
   2269           *
   2270           * @brief       Starts or resume the commissioning operations sets in the 
   2271           *              commissioningMode attribute
   2272           *
   2273           * @param       none
   2274           *
   2275           * @return      none
   2276           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2277          void bdb_startResumeCommissioningProcess(void)
   \                     bdb_startResumeCommissioningProcess:
   2278          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2279          
   2280          #if ( defined ( BDB_TL_INITIATOR ) && (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE) ) 
   2281            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_INITIATOR_TL)
   \   00000A   90....       MOV       DPTR,#bdbAttributes + 11
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   A2E0         MOV       C,0xE0 /* A   */.0
   \   000010   504D         JNC       ??bdb_startResumeCommissioningProcess_0
   2282            {
   2283              uint16 nwkAddr;
   2284          
   2285              //Does the device supports this commissioning mode?
   2286              if(bdbAttributes.bdbNodeCommissioningCapability & BDB_TOUCHLINK_CAPABILITY)
   \   000012   90....       MOV       DPTR,#bdbAttributes + 12
   \   000015   E0           MOVX      A,@DPTR
   \   000016   A2E3         MOV       C,0xE0 /* A   */.3
   \   000018   503B         JNC       ??bdb_startResumeCommissioningProcess_1
   2287              {
   2288                //Clear previous state and substates
   2289                osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState));
   \   00001A                ; Setup parameters for call to function osal_memset
   \   00001A   7C04         MOV       R4,#0x4
   \   00001C   7D00         MOV       R5,#0x0
   \   00001E   7900         MOV       R1,#0x0
   \   000020   7A..         MOV       R2,#bdbCommissioningProcedureState & 0xff
   \   000022   7B..         MOV       R3,#(bdbCommissioningProcedureState >> 8) & 0xff
   \   000024   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2290                bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_TL;
   \   000027   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00002A   7402         MOV       A,#0x2
   \   00002C   F0           MOVX      @DPTR,A
   2291                
   2292                // Get our short address
   2293                ZMacGetReq( ZMacShortAddress, (byte*)&nwkAddr );
   \   00002D                ; Setup parameters for call to function ZMacGetReq
   \   00002D   AA..         MOV       R2,?XSP + 0
   \   00002F   AB..         MOV       R3,?XSP + 1
   \   000031   7953         MOV       R1,#0x53
   \   000033   12....       LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
   \   000036   E9           MOV       A,R1
   2294                if ( nwkAddr >= NWK_BROADCAST_SHORTADDR_DEVZCZR )
   \   000037   85..82       MOV       DPL,?XSP + 0
   \   00003A   85..83       MOV       DPH,?XSP + 1
   \   00003D   C3           CLR       C
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   94FC         SUBB      A,#-0x4
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   94FF         SUBB      A,#-0x1
   \   000045   4003         JC        ??bdb_startResumeCommissioningProcess_2
   2295                {
   2296                  initiatorSelectNwkParams();
   \   000047                ; Setup parameters for call to function initiatorSelectNwkParams
   \   000047   12....       LCALL     `??initiatorSelectNwkParams::?relay`; Banked call to: initiatorSelectNwkParams
   2297                }
   2298                
   2299                touchLinkInitiator_StartDevDisc( );  
   \                     ??bdb_startResumeCommissioningProcess_2:
   \   00004A                ; Setup parameters for call to function touchLinkInitiator_StartDevDisc
   \   00004A   12....       LCALL     `??touchLinkInitiator_StartDevDisc::?relay`; Banked call to: touchLinkInitiator_StartDevDisc
   \   00004D   E9           MOV       A,R1
   2300                
   2301                bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_TOUCHLINK);
   \   00004E                ; Setup parameters for call to function bdb_NotifyCommissioningModeStart
   \   00004E   7904         MOV       R1,#0x4
   \   000050   12....       LCALL     `??bdb_NotifyCommissioningModeStart::?relay`; Banked call to: bdb_NotifyCommissioningModeStart
   \   000053   8007         SJMP      ??bdb_startResumeCommissioningProcess_3
   2302              }
   2303              else
   2304              {
   2305                //Process the next commissioning mode
   2306                bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, FALSE );
   \                     ??bdb_startResumeCommissioningProcess_1:
   \   000055                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000055   7A00         MOV       R2,#0x0
   \   000057   7902         MOV       R1,#0x2
   \   000059   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2307              }
   2308              return;
   \                     ??bdb_startResumeCommissioningProcess_3:
   \   00005C   02....       LJMP      ??bdb_startResumeCommissioningProcess_4 & 0xFFFF
   2309            }
   2310          #endif // BDB_TOUCHLINK_CAPABILITY_ENABLED  
   2311            
   2312          #if ZG_BUILD_ENDDEVICE_TYPE
   2313            if(ZG_DEVICE_ENDDEVICE_TYPE)
   2314            {
   2315              if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_PARENT_LOST)
   \                     ??bdb_startResumeCommissioningProcess_0:
   \   00005F   90....       MOV       DPTR,#bdbAttributes + 11
   \   000062   E0           MOVX      A,@DPTR
   \   000063   A2E5         MOV       C,0xE0 /* A   */.5
   \   000065   5003         JNC       $+5
   \   000067   02....       LJMP      ??bdb_startResumeCommissioningProcess_4 & 0xFFFF
   2316              {
   2317                //No commissioning process can be performed if the ZED has lost its parent
   2318                return;
   2319              }
   2320            }
   2321          #endif
   2322            
   2323            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_NWK_STEERING)
   \   00006A   90....       MOV       DPTR,#bdbAttributes + 11
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   A2E1         MOV       C,0xE0 /* A   */.1
   \   000070   5059         JNC       ??bdb_startResumeCommissioningProcess_5
   2324            {
   2325              bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_STEERING_ON_NWK;
   \   000072   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000075   7404         MOV       A,#0x4
   \   000077   F0           MOVX      @DPTR,A
   2326              
   2327              if(bdbAttributes.bdbNodeCommissioningCapability & BDB_NETWORK_STEERING_CAPABILITY)
   \   000078   90....       MOV       DPTR,#bdbAttributes + 12
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   A2E0         MOV       C,0xE0 /* A   */.0
   \   00007E   5048         JNC       ??bdb_startResumeCommissioningProcess_6
   2328              {
   2329          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
   2330                bdb_ClearNetworkParams();
   \   000080                ; Setup parameters for call to function bdb_ClearNetworkParams
   \   000080   12....       LCALL     `??bdb_ClearNetworkParams::?relay`; Banked call to: bdb_ClearNetworkParams
   2331          #endif
   2332                if(bdbAttributes.bdbNodeIsOnANetwork)
   \   000083   90....       MOV       DPTR,#bdbAttributes + 14
   \   000086   E0           MOVX      A,@DPTR
   \   000087   600C         JZ        ??bdb_startResumeCommissioningProcess_7
   2333                {
   2334                  bdb_nwkSteeringDeviceOnNwk();
   \   000089                ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
   \   000089   12....       LCALL     `??bdb_nwkSteeringDeviceOnNwk::?relay`; Banked call to: bdb_nwkSteeringDeviceOnNwk
   2335                  bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
   \   00008C                ; Setup parameters for call to function bdb_reportCommissioningState
   \   00008C   7A01         MOV       R2,#0x1
   \   00008E   7904         MOV       R1,#0x4
   \   000090   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   \   000093   8033         SJMP      ??bdb_startResumeCommissioningProcess_6
   2336                }
   2337          #if (ZG_BUILD_JOINING_TYPE)
   2338                else
   2339                {
   2340                  if(ZG_DEVICE_JOINING_TYPE)
   \                     ??bdb_startResumeCommissioningProcess_7:
   \   000095   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000098   E0           MOVX      A,@DPTR
   \   000099   6401         XRL       A,#0x1
   \   00009B   6008         JZ        ??bdb_startResumeCommissioningProcess_8
   \   00009D   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   6402         XRL       A,#0x2
   \   0000A3   7023         JNZ       ??bdb_startResumeCommissioningProcess_6
   2341                  {
   2342                    vDoPrimaryScan = TRUE;
   \                     ??bdb_startResumeCommissioningProcess_8:
   \   0000A5   90....       MOV       DPTR,#vDoPrimaryScan
   \   0000A8   7401         MOV       A,#0x1
   \   0000AA   F0           MOVX      @DPTR,A
   2343                    
   2344                    //Initialize the commissioning procedure state, bdbJoinState to nwk discovery and TCLinkKeyExchange to not active
   2345                    osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState_t));
   \   0000AB                ; Setup parameters for call to function osal_memset
   \   0000AB   7C04         MOV       R4,#0x4
   \   0000AD   7D00         MOV       R5,#0x0
   \   0000AF   7900         MOV       R1,#0x0
   \   0000B1   7A..         MOV       R2,#bdbCommissioningProcedureState & 0xff
   \   0000B3   7B..         MOV       R3,#(bdbCommissioningProcedureState >> 8) & 0xff
   \   0000B5   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2346                    bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_JOINING;
   \   0000B8   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0000BB   7403         MOV       A,#0x3
   \   0000BD   F0           MOVX      @DPTR,A
   2347                    bdb_nwkJoiningFormation(TRUE);
   \   0000BE                ; Setup parameters for call to function bdb_nwkJoiningFormation
   \   0000BE   7901         MOV       R1,#0x1
   \   0000C0   12....       LCALL     `??bdb_nwkJoiningFormation::?relay`; Banked call to: bdb_nwkJoiningFormation
   2348                    bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_NWK_STEERING);
   \   0000C3                ; Setup parameters for call to function bdb_NotifyCommissioningModeStart
   \   0000C3   7901         MOV       R1,#0x1
   \   0000C5   12....       LCALL     `??bdb_NotifyCommissioningModeStart::?relay`; Banked call to: bdb_NotifyCommissioningModeStart
   2349                  }
   2350                }
   2351          #endif
   2352          #if (ZG_BUILD_COORDINATOR_TYPE)
   2353                if(ZG_DEVICE_COORDINATOR_TYPE)
   2354                {
   2355                  bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, FALSE);
   2356                }
   2357          #endif
   2358              }
   2359              return;
   \                     ??bdb_startResumeCommissioningProcess_6:
   \   0000C8   02....       LJMP      ??bdb_startResumeCommissioningProcess_4 & 0xFFFF
   2360            }
   2361            
   2362            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_NWK_FORMATION)
   \                     ??bdb_startResumeCommissioningProcess_5:
   \   0000CB   90....       MOV       DPTR,#bdbAttributes + 11
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   A2E2         MOV       C,0xE0 /* A   */.2
   \   0000D1   5010         JNC       ??bdb_startResumeCommissioningProcess_9
   2363            {
   2364              bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FORMATION;
   \   0000D3   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0000D6   7405         MOV       A,#0x5
   \   0000D8   F0           MOVX      @DPTR,A
   2365              
   2366              if(bdbAttributes.bdbNodeCommissioningCapability & BDB_NETWORK_FORMATION_CAPABILITY)
   2367              {
   2368                if(!bdbAttributes.bdbNodeIsOnANetwork)
   2369                {
   2370          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
   2371                bdb_ClearNetworkParams();
   2372          #endif
   2373                  vDoPrimaryScan = TRUE;
   2374                  
   2375                  osal_memset(&bdbCommissioningProcedureState,0,sizeof(bdbCommissioningProcedureState));
   2376                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FORMATION;
   2377          
   2378                  bdb_nwkJoiningFormation(FALSE);
   2379                  bdb_NotifyCommissioningModeStart(BDB_COMMISSIONING_FORMATION);
   2380                  return;
   2381                }
   2382              }
   2383              bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_FORMATION, FALSE);
   \   0000D9                ; Setup parameters for call to function bdb_reportCommissioningState
   \   0000D9   7A00         MOV       R2,#0x0
   \   0000DB   7905         MOV       R1,#0x5
   \   0000DD   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2384              return;
   \   0000E0   02....       LJMP      ??bdb_startResumeCommissioningProcess_4 & 0xFFFF
   2385            }
   2386          
   2387          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)    
   2388            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_FINDING_BINDING)
   \                     ??bdb_startResumeCommissioningProcess_9:
   \   0000E3   90....       MOV       DPTR,#bdbAttributes + 11
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   A2E3         MOV       C,0xE0 /* A   */.3
   \   0000E9   4003         JC        $+5
   \   0000EB   02....       LJMP      ??bdb_startResumeCommissioningProcess_4 & 0xFFFF
   2389            {
   2390              bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_FINDING_BINDING;
   \   0000EE   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0000F1   7406         MOV       A,#0x6
   \   0000F3   F0           MOVX      @DPTR,A
   2391              
   2392              //Is the device on a network?
   2393              if(bdb_isDeviceNonFactoryNew())
   \   0000F4                ; Setup parameters for call to function bdb_isDeviceNonFactoryNew
   \   0000F4   12....       LCALL     `??bdb_isDeviceNonFactoryNew::?relay`; Banked call to: bdb_isDeviceNonFactoryNew
   \   0000F7   E9           MOV       A,R1
   \   0000F8   7003         JNZ       $+5
   \   0000FA   02....       LJMP      ??bdb_startResumeCommissioningProcess_10 & 0xFFFF
   2394              {
   2395                zclAttrRec_t attrRec;
   2396          
   2397                endPointDesc_t *bdb_CurrEpDescriptor = NULL;
   \   0000FD   7E00         MOV       R6,#0x0
   \   0000FF   7F00         MOV       R7,#0x0
   2398          
   2399                bdb_CurrEpDescriptor = bdb_setEpDescListToActiveEndpoint();
   \   000101                ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
   \   000101   12....       LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
   \   000104   8A..         MOV       ?V0,R2
   \   000106   8B..         MOV       ?V1,R3
   \   000108   AE..         MOV       R6,?V0
   \   00010A   AF..         MOV       R7,?V1
   2400                
   2401                //If not found endpoint with Identify cluster is found, then report fail
   2402                if(bdb_CurrEpDescriptor == NULL)
   \   00010C   EE           MOV       A,R6
   \   00010D   4F           ORL       A,R7
   \   00010E   7008         JNZ       ??bdb_startResumeCommissioningProcess_11
   2403                {
   2404                  bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   \   000110                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   000110   790E         MOV       R1,#0xe
   \   000112   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
   2405                  return;
   \   000115   02....       LJMP      ??bdb_startResumeCommissioningProcess_4 & 0xFFFF
   2406                }
   2407                
   2408                if( bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_TARGET)  //F&B as Target
   \                     ??bdb_startResumeCommissioningProcess_11:
   \   000118   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   F8           MOV       R0,A
   \   00011D   A3           INC       DPTR
   \   00011E   E0           MOVX      A,@DPTR
   \   00011F   F583         MOV       DPH,A
   \   000121   8882         MOV       DPL,R0
   \   000123   A3           INC       DPTR
   \   000124   A3           INC       DPTR
   \   000125   E0           MOVX      A,@DPTR
   \   000126   F8           MOV       R0,A
   \   000127   A3           INC       DPTR
   \   000128   E0           MOVX      A,@DPTR
   \   000129   F583         MOV       DPH,A
   \   00012B   8882         MOV       DPL,R0
   \   00012D   A3           INC       DPTR
   \   00012E   E0           MOVX      A,@DPTR
   \   00012F   A2E1         MOV       C,0xE0 /* A   */.1
   \   000131   4003         JC        $+5
   \   000133   02....       LJMP      ??bdb_startResumeCommissioningProcess_12 & 0xFFFF
   2409                {
   2410                  if (zclFindAttrRec( bdb_CurrEpDescriptor->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
   2411                            ATTRID_IDENTIFY_TIME, &attrRec ) )
   \   000136                ; Setup parameters for call to function zclFindAttrRec
   \   000136   7408         MOV       A,#0x8
   \   000138   12....       LCALL     ?XSTACK_DISP100_8
   \   00013B   88..         MOV       ?V0,R0
   \   00013D   89..         MOV       ?V1,R1
   \   00013F   78..         MOV       R0,#?V0
   \   000141   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000144   7C00         MOV       R4,#0x0
   \   000146   7D00         MOV       R5,#0x0
   \   000148   7A03         MOV       R2,#0x3
   \   00014A   7B00         MOV       R3,#0x0
   \   00014C   8E82         MOV       DPL,R6
   \   00014E   8F83         MOV       DPH,R7
   \   000150   E0           MOVX      A,@DPTR
   \   000151   F9           MOV       R1,A
   \   000152   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000155   7402         MOV       A,#0x2
   \   000157   12....       LCALL     ?DEALLOC_XSTACK8
   \   00015A   E9           MOV       A,R1
   \   00015B   7003         JNZ       $+5
   \   00015D   02....       LJMP      ??bdb_startResumeCommissioningProcess_13 & 0xFFFF
   2412                  {
   2413                    //Set it to at less 180 
   2414                    if ( *((uint16*)attrRec.attr.dataPtr) <= BDBC_MIN_COMMISSIONING_TIME )
   \   000160   740E         MOV       A,#0xe
   \   000162   12....       LCALL     ?XSTACK_DISP0_8
   \   000165   E0           MOVX      A,@DPTR
   \   000166   F8           MOV       R0,A
   \   000167   A3           INC       DPTR
   \   000168   E0           MOVX      A,@DPTR
   \   000169   F583         MOV       DPH,A
   \   00016B   8882         MOV       DPL,R0
   \   00016D   C3           CLR       C
   \   00016E   E0           MOVX      A,@DPTR
   \   00016F   94B5         SUBB      A,#-0x4b
   \   000171   A3           INC       DPTR
   \   000172   E0           MOVX      A,@DPTR
   \   000173   9400         SUBB      A,#0x0
   \   000175   5069         JNC       ??bdb_startResumeCommissioningProcess_14
   2415                    {
   2416                      *((uint16*)attrRec.attr.dataPtr) = BDBC_MIN_COMMISSIONING_TIME;
   \   000177   740E         MOV       A,#0xe
   \   000179   12....       LCALL     ?XSTACK_DISP0_8
   \   00017C   E0           MOVX      A,@DPTR
   \   00017D   F8           MOV       R0,A
   \   00017E   A3           INC       DPTR
   \   00017F   E0           MOVX      A,@DPTR
   \   000180   F583         MOV       DPH,A
   \   000182   8882         MOV       DPL,R0
   \   000184   74B4         MOV       A,#-0x4c
   \   000186   F0           MOVX      @DPTR,A
   \   000187   A3           INC       DPTR
   \   000188   7400         MOV       A,#0x0
   \   00018A   F0           MOVX      @DPTR,A
   2417                       osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
   \   00018B                ; Setup parameters for call to function osal_start_timerEx
   \   00018B   90....       MOV       DPTR,#__Constant_3e8
   \   00018E   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000191   7A00         MOV       R2,#0x0
   \   000193   7B20         MOV       R3,#0x20
   \   000195   90....       MOV       DPTR,#bdb_TaskID
   \   000198   E0           MOVX      A,@DPTR
   \   000199   F9           MOV       R1,A
   \   00019A   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00019D   7404         MOV       A,#0x4
   \   00019F   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001A2   E9           MOV       A,R1
   2418          
   2419                      if(pfnIdentifyTimeChangeCB != NULL)
   \   0001A3   90....       MOV       DPTR,#pfnIdentifyTimeChangeCB
   \   0001A6   E0           MOVX      A,@DPTR
   \   0001A7   F8           MOV       R0,A
   \   0001A8   A3           INC       DPTR
   \   0001A9   E0           MOVX      A,@DPTR
   \   0001AA   F9           MOV       R1,A
   \   0001AB   E8           MOV       A,R0
   \   0001AC   49           ORL       A,R1
   \   0001AD   6031         JZ        ??bdb_startResumeCommissioningProcess_14
   2420                      {
   2421                        if(bdbIndentifyActiveEndpoint == 0xFF)
   \   0001AF   90....       MOV       DPTR,#bdbIndentifyActiveEndpoint
   \   0001B2   E0           MOVX      A,@DPTR
   \   0001B3   64FF         XRL       A,#0xff
   \   0001B5   7015         JNZ       ??bdb_startResumeCommissioningProcess_15
   2422                        {
   2423                          pfnIdentifyTimeChangeCB(bdbIndentifyActiveEndpoint);  
   \   0001B7                ; Setup parameters for indirect call
   \   0001B7   90....       MOV       DPTR,#bdbIndentifyActiveEndpoint
   \   0001BA   E0           MOVX      A,@DPTR
   \   0001BB   F9           MOV       R1,A
   \   0001BC   90....       MOV       DPTR,#pfnIdentifyTimeChangeCB
   \   0001BF   E0           MOVX      A,@DPTR
   \   0001C0   F8           MOV       R0,A
   \   0001C1   A3           INC       DPTR
   \   0001C2   E0           MOVX      A,@DPTR
   \   0001C3   F583         MOV       DPH,A
   \   0001C5   8882         MOV       DPL,R0
   \   0001C7   12....       LCALL     ?CALL_IND
   \   0001CA   8014         SJMP      ??bdb_startResumeCommissioningProcess_14
   2424                        }
   2425                        else
   2426                        {
   2427                          pfnIdentifyTimeChangeCB(bdb_CurrEpDescriptor->endPoint);
   \                     ??bdb_startResumeCommissioningProcess_15:
   \   0001CC                ; Setup parameters for indirect call
   \   0001CC   8E82         MOV       DPL,R6
   \   0001CE   8F83         MOV       DPH,R7
   \   0001D0   E0           MOVX      A,@DPTR
   \   0001D1   F9           MOV       R1,A
   \   0001D2   90....       MOV       DPTR,#pfnIdentifyTimeChangeCB
   \   0001D5   E0           MOVX      A,@DPTR
   \   0001D6   F8           MOV       R0,A
   \   0001D7   A3           INC       DPTR
   \   0001D8   E0           MOVX      A,@DPTR
   \   0001D9   F583         MOV       DPH,A
   \   0001DB   8882         MOV       DPL,R0
   \   0001DD   12....       LCALL     ?CALL_IND
   2428                        }
   2429                      }
   2430                    }
   2431                    //Attribute found and set, report success
   2432                    if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR))
   \                     ??bdb_startResumeCommissioningProcess_14:
   \   0001E0   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   0001E3   E0           MOVX      A,@DPTR
   \   0001E4   F8           MOV       R0,A
   \   0001E5   A3           INC       DPTR
   \   0001E6   E0           MOVX      A,@DPTR
   \   0001E7   F583         MOV       DPH,A
   \   0001E9   8882         MOV       DPL,R0
   \   0001EB   A3           INC       DPTR
   \   0001EC   A3           INC       DPTR
   \   0001ED   E0           MOVX      A,@DPTR
   \   0001EE   F8           MOV       R0,A
   \   0001EF   A3           INC       DPTR
   \   0001F0   E0           MOVX      A,@DPTR
   \   0001F1   F583         MOV       DPH,A
   \   0001F3   8882         MOV       DPL,R0
   \   0001F5   A3           INC       DPTR
   \   0001F6   E0           MOVX      A,@DPTR
   \   0001F7   A2E0         MOV       C,0xE0 /* A   */.0
   \   0001F9   4007         JC        ??bdb_startResumeCommissioningProcess_16
   2433                    {
   2434                      bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FB_TARGET_IN_PROGRESS);
   \   0001FB                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   0001FB   7909         MOV       R1,#0x9
   \   0001FD   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
   \   000200   8053         SJMP      ??bdb_startResumeCommissioningProcess_12
   2435                    }
   2436                    else
   2437                    {
   2438                      bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
   2439          
   2440                      bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
   \                     ??bdb_startResumeCommissioningProcess_16:
   \   000202   7406         MOV       A,#0x6
   \   000204   12....       LCALL     ?XSTACK_DISP0_8
   \   000207   7403         MOV       A,#0x3
   \   000209   F0           MOVX      @DPTR,A
   2441                      bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_FB_TARGET_IN_PROGRESS;
   \   00020A   7405         MOV       A,#0x5
   \   00020C   12....       LCALL     ?XSTACK_DISP0_8
   \   00020F   7409         MOV       A,#0x9
   \   000211   F0           MOVX      @DPTR,A
   2442          
   2443                      bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   \   000212                ; Setup parameters for call to function bdb_SendMsg
   \   000212   7405         MOV       A,#0x5
   \   000214   12....       LCALL     ?XSTACK_DISP100_8
   \   000217   88..         MOV       ?V0,R0
   \   000219   89..         MOV       ?V1,R1
   \   00021B   78..         MOV       R0,#?V0
   \   00021D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000220   7C03         MOV       R4,#0x3
   \   000222   7B00         MOV       R3,#0x0
   \   000224   7A0A         MOV       R2,#0xa
   \   000226   90....       MOV       DPTR,#bdb_TaskID
   \   000229   E0           MOVX      A,@DPTR
   \   00022A   F9           MOV       R1,A
   \   00022B   12....       LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
   \   00022E   7402         MOV       A,#0x2
   \   000230   12....       LCALL     ?DEALLOC_XSTACK8
   \   000233   8020         SJMP      ??bdb_startResumeCommissioningProcess_12
   2444                    }
   2445                  }
   2446                  else
   2447                  {
   2448                    //Attribute not found and no initiator process, report fail
   2449                    if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR))
   \                     ??bdb_startResumeCommissioningProcess_13:
   \   000235   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   000238   E0           MOVX      A,@DPTR
   \   000239   F8           MOV       R0,A
   \   00023A   A3           INC       DPTR
   \   00023B   E0           MOVX      A,@DPTR
   \   00023C   F583         MOV       DPH,A
   \   00023E   8882         MOV       DPL,R0
   \   000240   A3           INC       DPTR
   \   000241   A3           INC       DPTR
   \   000242   E0           MOVX      A,@DPTR
   \   000243   F8           MOV       R0,A
   \   000244   A3           INC       DPTR
   \   000245   E0           MOVX      A,@DPTR
   \   000246   F583         MOV       DPH,A
   \   000248   8882         MOV       DPL,R0
   \   00024A   A3           INC       DPTR
   \   00024B   E0           MOVX      A,@DPTR
   \   00024C   A2E0         MOV       C,0xE0 /* A   */.0
   \   00024E   4005         JC        ??bdb_startResumeCommissioningProcess_12
   2450                    {
   2451                      bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   \   000250                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   000250   790E         MOV       R1,#0xe
   \   000252   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
   2452                    }
   2453                  }
   2454                }  //F&B Target
   2455                
   2456                if( bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR)  //F&B as Initiator
   \                     ??bdb_startResumeCommissioningProcess_12:
   \   000255   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   000258   E0           MOVX      A,@DPTR
   \   000259   F8           MOV       R0,A
   \   00025A   A3           INC       DPTR
   \   00025B   E0           MOVX      A,@DPTR
   \   00025C   F583         MOV       DPH,A
   \   00025E   8882         MOV       DPL,R0
   \   000260   A3           INC       DPTR
   \   000261   A3           INC       DPTR
   \   000262   E0           MOVX      A,@DPTR
   \   000263   F8           MOV       R0,A
   \   000264   A3           INC       DPTR
   \   000265   E0           MOVX      A,@DPTR
   \   000266   F583         MOV       DPH,A
   \   000268   8882         MOV       DPL,R0
   \   00026A   A3           INC       DPTR
   \   00026B   E0           MOVX      A,@DPTR
   \   00026C   A2E0         MOV       C,0xE0 /* A   */.0
   \   00026E   4003         JC        $+5
   \   000270   02....       LJMP      ??bdb_startResumeCommissioningProcess_4 & 0xFFFF
   2457                {
   2458                  bdbCommissioningModeMsg_t bdbCommissioningModeMsg;
   2459                  
   2460                  //If no function to add binds is available then do not process Initiator
   2461                  if(!pbindAddEntry)
   \   000273   90....       MOV       DPTR,#pbindAddEntry
   \   000276   E0           MOVX      A,@DPTR
   \   000277   F8           MOV       R0,A
   \   000278   A3           INC       DPTR
   \   000279   E0           MOVX      A,@DPTR
   \   00027A   F9           MOV       R1,A
   \   00027B   E8           MOV       A,R0
   \   00027C   49           ORL       A,R1
   \   00027D   7022         JNZ       ??bdb_startResumeCommissioningProcess_17
   2462                  {
   2463                    //If no target process, then report fail
   2464                    if(!(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_TARGET))
   \   00027F   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   000282   E0           MOVX      A,@DPTR
   \   000283   F8           MOV       R0,A
   \   000284   A3           INC       DPTR
   \   000285   E0           MOVX      A,@DPTR
   \   000286   F583         MOV       DPH,A
   \   000288   8882         MOV       DPL,R0
   \   00028A   A3           INC       DPTR
   \   00028B   A3           INC       DPTR
   \   00028C   E0           MOVX      A,@DPTR
   \   00028D   F8           MOV       R0,A
   \   00028E   A3           INC       DPTR
   \   00028F   E0           MOVX      A,@DPTR
   \   000290   F583         MOV       DPH,A
   \   000292   8882         MOV       DPL,R0
   \   000294   A3           INC       DPTR
   \   000295   E0           MOVX      A,@DPTR
   \   000296   A2E1         MOV       C,0xE0 /* A   */.1
   \   000298   406E         JC        ??bdb_startResumeCommissioningProcess_4
   2465                    {
   2466                      bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   \   00029A                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   00029A   790E         MOV       R1,#0xe
   \   00029C   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
   \   00029F   8067         SJMP      ??bdb_startResumeCommissioningProcess_4
   2467                    }        
   2468                  }
   2469                  else
   2470                  {
   2471                    //Send identify query with the endpoint requested
   2472                    if(bdb_SendIdentifyQuery(bdb_CurrEpDescriptor->endPoint) != ZSuccess)
   \                     ??bdb_startResumeCommissioningProcess_17:
   \   0002A1                ; Setup parameters for call to function bdb_SendIdentifyQuery
   \   0002A1   8E82         MOV       DPL,R6
   \   0002A3   8F83         MOV       DPH,R7
   \   0002A5   E0           MOVX      A,@DPTR
   \   0002A6   F9           MOV       R1,A
   \   0002A7   12....       LCALL     `??bdb_SendIdentifyQuery::?relay`; Banked call to: bdb_SendIdentifyQuery
   \   0002AA   E9           MOV       A,R1
   \   0002AB   6005         JZ        ??bdb_startResumeCommissioningProcess_18
   2473                    {
   2474                      bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   \   0002AD                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   0002AD   790E         MOV       R1,#0xe
   \   0002AF   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
   2475                    }
   2476          
   2477                    //If periodic F&B is enabled
   2478                    if ( FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE )
   2479                    {
   2480                      // total F&B time will be at least BDBC_MIN_COMMISSIONING_TIME, and at most (BDBC_MIN_COMMISSIONING_TIME + FINDING_AND_BINDING_PERIODIC_TIME - 1)
   2481                      bdb_FB_InitiatorCurrentCyclesNumber = (BDBC_MIN_COMMISSIONING_TIME + (FINDING_AND_BINDING_PERIODIC_TIME - 1)) / FINDING_AND_BINDING_PERIODIC_TIME;
   \                     ??bdb_startResumeCommissioningProcess_18:
   \   0002B2   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   0002B5   740C         MOV       A,#0xc
   \   0002B7   F0           MOVX      @DPTR,A
   2482                      
   2483                      osal_start_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT, FINDING_AND_BINDING_PERIODIC_TIME * 1000);
   \   0002B8                ; Setup parameters for call to function osal_start_timerEx
   \   0002B8   90....       MOV       DPTR,#__Constant_3a98
   \   0002BB   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0002BE   7A40         MOV       R2,#0x40
   \   0002C0   7B00         MOV       R3,#0x0
   \   0002C2   90....       MOV       DPTR,#bdb_TaskID
   \   0002C5   E0           MOVX      A,@DPTR
   \   0002C6   F9           MOV       R1,A
   \   0002C7   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0002CA   7404         MOV       A,#0x4
   \   0002CC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002CF   E9           MOV       A,R1
   2484                    }
   2485          
   2486                    bdbCommissioningModeMsg.bdbCommissioningMode = BDB_COMMISSIONING_FINDING_BINDING;
   \   0002D0   7403         MOV       A,#0x3
   \   0002D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0002D5   7403         MOV       A,#0x3
   \   0002D7   F0           MOVX      @DPTR,A
   2487                    bdbCommissioningModeMsg.bdbCommissioningStatus = BDB_COMMISSIONING_FB_INITITATOR_IN_PROGRESS;
   \   0002D8   7402         MOV       A,#0x2
   \   0002DA   12....       LCALL     ?XSTACK_DISP0_8
   \   0002DD   740A         MOV       A,#0xa
   \   0002DF   F0           MOVX      @DPTR,A
   2488          
   2489                    bdb_NotifyApp((uint8*)&bdbCommissioningModeMsg);
   \   0002E0                ; Setup parameters for call to function bdb_SendMsg
   \   0002E0   7402         MOV       A,#0x2
   \   0002E2   12....       LCALL     ?XSTACK_DISP100_8
   \   0002E5   88..         MOV       ?V0,R0
   \   0002E7   89..         MOV       ?V1,R1
   \   0002E9   78..         MOV       R0,#?V0
   \   0002EB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002EE   7C03         MOV       R4,#0x3
   \   0002F0   7B00         MOV       R3,#0x0
   \   0002F2   7A0A         MOV       R2,#0xa
   \   0002F4   90....       MOV       DPTR,#bdb_TaskID
   \   0002F7   E0           MOVX      A,@DPTR
   \   0002F8   F9           MOV       R1,A
   \   0002F9   12....       LCALL     `??bdb_SendMsg::?relay`; Banked call to: bdb_SendMsg
   \   0002FC   7402         MOV       A,#0x2
   \   0002FE   12....       LCALL     ?DEALLOC_XSTACK8
   \   000301   8005         SJMP      ??bdb_startResumeCommissioningProcess_4
   2490                  }
   2491                } //F&B Initiator
   2492              }
   2493              //Not in the network
   2494              else
   2495              {
   2496                bdb_exitFindingBindingWStatus(BDB_COMMISSIONING_FAILURE);
   \                     ??bdb_startResumeCommissioningProcess_10:
   \   000303                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   000303   790E         MOV       R1,#0xe
   \   000305   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
   2497              }
   2498              
   2499              return;
   2500            }
   2501          #endif
   2502            
   2503          }
   \                     ??bdb_startResumeCommissioningProcess_4:
   \   000308   7410         MOV       A,#0x10
   \   00030A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00030D   7F02         MOV       R7,#0x2
   \   00030F   02....       LJMP      ?BANKED_LEAVE_XDATA
   2504          
   2505          /*********************************************************************
   2506           * @fn          bdb_event_loop
   2507           *
   2508           * @brief       Main event loop bdb tasks.
   2509           *
   2510           * @param       task_id - task id
   2511           * @param       events - event bitmap
   2512           *
   2513           * @return      unprocessed events
   2514           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2515          UINT16 bdb_event_loop(byte task_id, UINT16 events)
   \                     bdb_event_loop:
   2516          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V5,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   2517            (void)task_id;  // Intentionally unreferenced parameter
   2518            
   2519          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
   2520            endPointDesc_t * bdb_CurrEpDescriptor;
   2521          #endif
   2522            
   2523            if(events & BDB_CHANGE_COMMISSIONING_STATE)
   \   000010   EE           MOV       A,R6
   \   000011   5404         ANL       A,#0x4
   \   000013   605C         JZ        ??bdb_event_loop_0
   2524            {
   2525              switch(bdbCommissioningProcedureState.bdbCommissioningState)
   \   000015   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000018   E0           MOVX      A,@DPTR
   \   000019   600D         JZ        ??bdb_event_loop_1
   \   00001B   14           DEC       A
   \   00001C   600F         JZ        ??bdb_event_loop_2
   \   00001E   24FD         ADD       A,#-0x3
   \   000020   6014         JZ        ??bdb_event_loop_3
   \   000022   24FE         ADD       A,#-0x2
   \   000024   601C         JZ        ??bdb_event_loop_4
   \   000026   803E         SJMP      ??bdb_event_loop_5
   2526              {
   2527                case BDB_COMMISSIONING_STATE_START_RESUME:
   2528                  bdb_startResumeCommissioningProcess();
   \                     ??bdb_event_loop_1:
   \   000028                ; Setup parameters for call to function bdb_startResumeCommissioningProcess
   \   000028   12....       LCALL     `??bdb_startResumeCommissioningProcess::?relay`; Banked call to: bdb_startResumeCommissioningProcess
   2529                break;
   \   00002B   8039         SJMP      ??bdb_event_loop_5
   2530                
   2531                case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
   2532                  if (ZG_BUILD_JOINING_TYPE)
   2533                  {
   2534                    bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_STACK_VERSION);
   \                     ??bdb_event_loop_2:
   \   00002D                ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
   \   00002D   7A01         MOV       R2,#0x1
   \   00002F   7901         MOV       R1,#0x1
   \   000031   12....       LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
   2535                  }
   2536                break;
   \   000034   8030         SJMP      ??bdb_event_loop_5
   2537                
   2538                case BDB_COMMISSIONING_STATE_STEERING_ON_NWK:
   2539                  bdb_nwkSteeringDeviceOnNwk();
   \                     ??bdb_event_loop_3:
   \   000036                ; Setup parameters for call to function bdb_nwkSteeringDeviceOnNwk
   \   000036   12....       LCALL     `??bdb_nwkSteeringDeviceOnNwk::?relay`; Banked call to: bdb_nwkSteeringDeviceOnNwk
   2540                  
   2541                  bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_STEERING_ON_NWK, TRUE);
   \   000039                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000039   7A01         MOV       R2,#0x1
   \   00003B   7904         MOV       R1,#0x4
   \   00003D   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2542                break;
   \   000040   8024         SJMP      ??bdb_event_loop_5
   2543                
   2544                case BDB_COMMISSIONING_STATE_FINDING_BINDING:
   2545                  bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \                     ??bdb_event_loop_4:
   \   000042   90....       MOV       DPTR,#bdbAttributes + 10
   \   000045   7400         MOV       A,#0x0
   \   000047   F0           MOVX      @DPTR,A
   2546                  bdbCommissioningProcedureState.bdbCommissioningState = BDB_COMMISSIONING_STATE_START_RESUME;
   \   000048   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00004B   7400         MOV       A,#0x0
   \   00004D   F0           MOVX      @DPTR,A
   2547                  osal_start_timerEx(bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE,50);
   \   00004E                ; Setup parameters for call to function osal_start_timerEx
   \   00004E   90....       MOV       DPTR,#__Constant_32
   \   000051   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000054   7A04         MOV       R2,#0x4
   \   000056   7B00         MOV       R3,#0x0
   \   000058   90....       MOV       DPTR,#bdb_TaskID
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F9           MOV       R1,A
   \   00005D   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000060   7404         MOV       A,#0x4
   \   000062   12....       LCALL     ?DEALLOC_XSTACK8
   \   000065   E9           MOV       A,R1
   2548                break;
   2549                
   2550              }
   2551              return (events ^ BDB_CHANGE_COMMISSIONING_STATE);
   \                     ??bdb_event_loop_5:
   \   000066   EE           MOV       A,R6
   \   000067   6404         XRL       A,#0x4
   \   000069   FA           MOV       R2,A
   \   00006A   EF           MOV       A,R7
   \   00006B   6400         XRL       A,#0x0
   \   00006D   FB           MOV       R3,A
   \   00006E   02....       LJMP      ??bdb_event_loop_6 & 0xFFFF
   2552            }
   2553          
   2554            if ( events & SYS_EVENT_MSG )
   \                     ??bdb_event_loop_0:
   \   000071   EE           MOV       A,R6
   \   000072   5400         ANL       A,#0x0
   \   000074   F8           MOV       R0,A
   \   000075   EF           MOV       A,R7
   \   000076   5480         ANL       A,#0x80
   \   000078   F9           MOV       R1,A
   \   000079   E8           MOV       A,R0
   \   00007A   49           ORL       A,R1
   \   00007B   7003         JNZ       $+5
   \   00007D   02....       LJMP      ??bdb_event_loop_7 & 0xFFFF
   2555            {
   2556              uint8 *msg_ptr;
   2557              
   2558              while ( (msg_ptr = osal_msg_receive( bdb_TaskID )) )
   \                     ??bdb_event_loop_8:
   \   000080                ; Setup parameters for call to function osal_msg_receive
   \   000080   90....       MOV       DPTR,#bdb_TaskID
   \   000083   E0           MOVX      A,@DPTR
   \   000084   F9           MOV       R1,A
   \   000085   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000088   8A..         MOV       ?V2,R2
   \   00008A   8B..         MOV       ?V3,R3
   \   00008C   A8..         MOV       R0,?V2
   \   00008E   A9..         MOV       R1,?V3
   \   000090   88..         MOV       ?V0,R0
   \   000092   89..         MOV       ?V1,R1
   \   000094   E8           MOV       A,R0
   \   000095   49           ORL       A,R1
   \   000096   6078         JZ        ??bdb_event_loop_9
   2559              {
   2560                //Process the Incomming ZDO messages used by BDB commissioning methods
   2561                if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_ZDO_CB_MSG)
   \   000098   85..82       MOV       DPL,?V0
   \   00009B   85..83       MOV       DPH,?V1
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   64D3         XRL       A,#0xd3
   \   0000A1   7009         JNZ       ??bdb_event_loop_10
   2562                {
   2563                  bdb_processZDOMgs((zdoIncomingMsg_t *)msg_ptr);
   \   0000A3                ; Setup parameters for call to function bdb_processZDOMgs
   \   0000A3   AA..         MOV       R2,?V0
   \   0000A5   AB..         MOV       R3,?V1
   \   0000A7   12....       LCALL     `??bdb_processZDOMgs::?relay`; Banked call to: bdb_processZDOMgs
   \   0000AA   8059         SJMP      ??bdb_event_loop_11
   2564                }
   2565                
   2566                //Validate the is receive on the right process
   2567                else if(((bdbInMsg_t*)msg_ptr)->hdr.event == bdbCommissioningProcedureState.bdbCommissioningState)
   \                     ??bdb_event_loop_10:
   \   0000AC   85..82       MOV       DPL,?V0
   \   0000AF   85..83       MOV       DPH,?V1
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   F8           MOV       R0,A
   \   0000B4   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   68           XRL       A,R0
   \   0000B9   7009         JNZ       ??bdb_event_loop_12
   2568                {
   2569                  bdb_ProcessOSALMsg( (bdbInMsg_t *)msg_ptr );
   \   0000BB                ; Setup parameters for call to function bdb_ProcessOSALMsg
   \   0000BB   AA..         MOV       R2,?V0
   \   0000BD   AB..         MOV       R3,?V1
   \   0000BF   12....       LCALL     `??bdb_ProcessOSALMsg::?relay`; Banked call to: bdb_ProcessOSALMsg
   \   0000C2   8041         SJMP      ??bdb_event_loop_11
   2570                }
   2571                //Notify the user
   2572                else if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_NOTIFY_USER)
   \                     ??bdb_event_loop_12:
   \   0000C4   85..82       MOV       DPL,?V0
   \   0000C7   85..83       MOV       DPH,?V1
   \   0000CA   E0           MOVX      A,@DPTR
   \   0000CB   640A         XRL       A,#0xa
   \   0000CD   7036         JNZ       ??bdb_event_loop_11
   2573                {
   2574                  ((bdbCommissioningModeMsg_t*) ((bdbInMsg_t*)msg_ptr)->buf)->bdbRemainingCommissioningModes = bdbAttributes.bdbCommissioningMode;
   \   0000CF   90....       MOV       DPTR,#bdbAttributes + 11
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   C0E0         PUSH      A
   \   0000D5   85..82       MOV       DPL,?V0
   \   0000D8   85..83       MOV       DPH,?V1
   \   0000DB   A3           INC       DPTR
   \   0000DC   A3           INC       DPTR
   \   0000DD   A3           INC       DPTR
   \   0000DE   A3           INC       DPTR
   \   0000DF   D0E0         POP       A
   \   0000E1   F0           MOVX      @DPTR,A
   2575                  if(pfnCommissioningStatusCB)
   \   0000E2   90....       MOV       DPTR,#pfnCommissioningStatusCB
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   F8           MOV       R0,A
   \   0000E7   A3           INC       DPTR
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   F9           MOV       R1,A
   \   0000EA   E8           MOV       A,R0
   \   0000EB   49           ORL       A,R1
   \   0000EC   6017         JZ        ??bdb_event_loop_11
   2576                  {
   2577                    pfnCommissioningStatusCB((bdbCommissioningModeMsg_t*) (((bdbInMsg_t*)msg_ptr)->buf));
   \   0000EE                ; Setup parameters for indirect call
   \   0000EE   E5..         MOV       A,?V0
   \   0000F0   2402         ADD       A,#0x2
   \   0000F2   FA           MOV       R2,A
   \   0000F3   E4           CLR       A
   \   0000F4   35..         ADDC      A,?V1
   \   0000F6   FB           MOV       R3,A
   \   0000F7   90....       MOV       DPTR,#pfnCommissioningStatusCB
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   F8           MOV       R0,A
   \   0000FC   A3           INC       DPTR
   \   0000FD   E0           MOVX      A,@DPTR
   \   0000FE   F583         MOV       DPH,A
   \   000100   8882         MOV       DPL,R0
   \   000102   12....       LCALL     ?CALL_IND
   2578                  }
   2579          #ifdef MT_APP_CNF_FUNC
   2580                  //Notify the host processor about the event
   2581                  MT_AppCnfCommissioningNotification((bdbCommissioningModeMsg_t*) (((bdbInMsg_t*)msg_ptr)->buf));
   2582          #endif
   2583                }
   2584          #if (ZG_BUILD_COORDINATOR_TYPE)
   2585                else
   2586                {
   2587                  if(ZG_DEVICE_COORDINATOR_TYPE)
   2588                  {
   2589                    //Notify the status 
   2590                    if(((bdbInMsg_t*)msg_ptr)->hdr.event == BDB_TC_LINK_KEY_EXCHANGE_PROCESS)
   2591                    {
   2592                      pfnTCLinkKeyExchangeProcessCB( (bdb_TCLinkKeyExchProcess_t*) ((bdbInMsg_t*)msg_ptr)->buf);
   2593                    }
   2594                  }
   2595                }
   2596          #endif
   2597                // Release the memory
   2598                osal_msg_deallocate( msg_ptr );
   \                     ??bdb_event_loop_11:
   \   000105                ; Setup parameters for call to function osal_msg_deallocate
   \   000105   AA..         MOV       R2,?V0
   \   000107   AB..         MOV       R3,?V1
   \   000109   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \   00010C   E9           MOV       A,R1
   \   00010D   02....       LJMP      ??bdb_event_loop_8 & 0xFFFF
   2599              }
   2600          
   2601              // Return unprocessed events
   2602              return (events ^ SYS_EVENT_MSG);
   \                     ??bdb_event_loop_9:
   \   000110   EE           MOV       A,R6
   \   000111   6400         XRL       A,#0x0
   \   000113   FA           MOV       R2,A
   \   000114   EF           MOV       A,R7
   \   000115   6480         XRL       A,#0x80
   \   000117   FB           MOV       R3,A
   \   000118   02....       LJMP      ??bdb_event_loop_6 & 0xFFFF
   2603            }
   2604            
   2605          
   2606            if(events & BDB_PROCESS_TIMEOUT)
   \                     ??bdb_event_loop_7:
   \   00011B   EE           MOV       A,R6
   \   00011C   5400         ANL       A,#0x0
   \   00011E   F8           MOV       R0,A
   \   00011F   EF           MOV       A,R7
   \   000120   5410         ANL       A,#0x10
   \   000122   F9           MOV       R1,A
   \   000123   E8           MOV       A,R0
   \   000124   49           ORL       A,R1
   \   000125   600E         JZ        ??bdb_event_loop_13
   2607            {
   2608              bdb_processTimeout();
   \   000127                ; Setup parameters for call to function bdb_processTimeout
   \   000127   12....       LCALL     `??bdb_processTimeout::?relay`; Banked call to: bdb_processTimeout
   2609              // Return unprocessed events
   2610              return (events ^ BDB_PROCESS_TIMEOUT);
   \   00012A   EE           MOV       A,R6
   \   00012B   6400         XRL       A,#0x0
   \   00012D   FA           MOV       R2,A
   \   00012E   EF           MOV       A,R7
   \   00012F   6410         XRL       A,#0x10
   \   000131   FB           MOV       R3,A
   \   000132   02....       LJMP      ??bdb_event_loop_6 & 0xFFFF
   2611            }
   2612            
   2613            if(events &  BDB_REPORT_TIMEOUT){
   \                     ??bdb_event_loop_13:
   \   000135   EE           MOV       A,R6
   \   000136   5480         ANL       A,#0x80
   \   000138   600B         JZ        ??bdb_event_loop_14
   2614          #ifdef BDB_REPORTING    
   2615              bdb_RepProcessEvent();
   2616          #endif
   2617              // Return unprocessed events
   2618              return (events ^ BDB_REPORT_TIMEOUT);
   \   00013A   EE           MOV       A,R6
   \   00013B   6480         XRL       A,#0x80
   \   00013D   FA           MOV       R2,A
   \   00013E   EF           MOV       A,R7
   \   00013F   6400         XRL       A,#0x0
   \   000141   FB           MOV       R3,A
   \   000142   02....       LJMP      ??bdb_event_loop_6 & 0xFFFF
   2619            }
   2620            
   2621          #if (ZG_BUILD_JOINING_TYPE)
   2622            if(events & BDB_TC_LINK_KEY_EXCHANGE_FAIL)
   \                     ??bdb_event_loop_14:
   \   000145   EE           MOV       A,R6
   \   000146   5402         ANL       A,#0x2
   \   000148   6046         JZ        ??bdb_event_loop_15
   2623            {
   2624              if(ZG_DEVICE_JOINING_TYPE)
   \   00014A   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00014D   E0           MOVX      A,@DPTR
   \   00014E   6401         XRL       A,#0x1
   \   000150   6008         JZ        ??bdb_event_loop_16
   \   000152   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000155   E0           MOVX      A,@DPTR
   \   000156   6402         XRL       A,#0x2
   \   000158   702B         JNZ       ??bdb_event_loop_17
   2625              {
   2626                NLME_LeaveReq_t leaveReq;
   2627                // Set every field to 0
   2628                osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
   \                     ??bdb_event_loop_16:
   \   00015A                ; Setup parameters for call to function osal_memset
   \   00015A   7C05         MOV       R4,#0x5
   \   00015C   7D00         MOV       R5,#0x0
   \   00015E   7900         MOV       R1,#0x0
   \   000160   7408         MOV       A,#0x8
   \   000162   12....       LCALL     ?XSTACK_DISP101_8
   \   000165   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2629                
   2630                bdb_setNodeIsOnANetwork(FALSE);
   \   000168                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000168   7900         MOV       R1,#0x0
   \   00016A   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
   2631          
   2632                if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
   \   00016D                ; Setup parameters for call to function NLME_LeaveReq
   \   00016D   7408         MOV       A,#0x8
   \   00016F   12....       LCALL     ?XSTACK_DISP101_8
   \   000172   12....       LCALL     `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   000175   E9           MOV       A,R1
   \   000176   600D         JZ        ??bdb_event_loop_17
   2633                {
   2634                  osal_set_event( bdb_TaskID,BDB_TC_LINK_KEY_EXCHANGE_FAIL);
   \   000178                ; Setup parameters for call to function osal_set_event
   \   000178   7A02         MOV       R2,#0x2
   \   00017A   7B00         MOV       R3,#0x0
   \   00017C   90....       MOV       DPTR,#bdb_TaskID
   \   00017F   E0           MOVX      A,@DPTR
   \   000180   F9           MOV       R1,A
   \   000181   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000184   E9           MOV       A,R1
   2635                }
   2636              }
   2637              // Return unprocessed events
   2638              return (events ^ BDB_TC_LINK_KEY_EXCHANGE_FAIL);
   \                     ??bdb_event_loop_17:
   \   000185   EE           MOV       A,R6
   \   000186   6402         XRL       A,#0x2
   \   000188   FA           MOV       R2,A
   \   000189   EF           MOV       A,R7
   \   00018A   6400         XRL       A,#0x0
   \   00018C   FB           MOV       R3,A
   \   00018D   02....       LJMP      ??bdb_event_loop_6 & 0xFFFF
   2639            }
   2640          #endif
   2641            
   2642            if(events & BDB_TC_JOIN_TIMEOUT)
   \                     ??bdb_event_loop_15:
   \   000190   EE           MOV       A,R6
   \   000191   5400         ANL       A,#0x0
   \   000193   F8           MOV       R0,A
   \   000194   EF           MOV       A,R7
   \   000195   5408         ANL       A,#0x8
   \   000197   F9           MOV       R1,A
   \   000198   E8           MOV       A,R0
   \   000199   49           ORL       A,R1
   \   00019A   600B         JZ        ??bdb_event_loop_18
   2643            {     
   2644          #if (ZG_BUILD_COORDINATOR_TYPE)
   2645              if(ZG_DEVICE_COORDINATOR_TYPE)
   2646              {
   2647                bdb_TCProcessJoiningList();
   2648              }
   2649          #endif    
   2650              return (events ^ BDB_TC_JOIN_TIMEOUT);
   \   00019C   EE           MOV       A,R6
   \   00019D   6400         XRL       A,#0x0
   \   00019F   FA           MOV       R2,A
   \   0001A0   EF           MOV       A,R7
   \   0001A1   6408         XRL       A,#0x8
   \   0001A3   FB           MOV       R3,A
   \   0001A4   02....       LJMP      ??bdb_event_loop_6 & 0xFFFF
   2651            }
   2652          
   2653          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)  
   2654            
   2655            if(events & BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT)
   \                     ??bdb_event_loop_18:
   \   0001A7   EE           MOV       A,R6
   \   0001A8   5440         ANL       A,#0x40
   \   0001AA   7003         JNZ       $+5
   \   0001AC   02....       LJMP      ??bdb_event_loop_19 & 0xFFFF
   2656            {
   2657              if ( FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE )
   2658              {
   2659                bdb_CurrEpDescriptor = bdb_setEpDescListToActiveEndpoint();
   \   0001AF                ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
   \   0001AF   12....       LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
   \   0001B2   8A..         MOV       ?V0,R2
   \   0001B4   8B..         MOV       ?V1,R3
   \   0001B6   85....       MOV       ?V6,?V0
   \   0001B9   85....       MOV       ?V7,?V1
   2660                
   2661                //If we have endpoint from which to send the identify command, then proceed, otherwise finish
   2662                if(bdb_CurrEpDescriptor != NULL) //just a safty check. The fact that we got to this functuon at all means that this cannot be NULL
   \   0001BC   E5..         MOV       A,?V6
   \   0001BE   45..         ORL       A,?V7
   \   0001C0   6058         JZ        ??bdb_event_loop_20
   2663                {
   2664                  //Substract an attempt
   2665                  bdb_FB_InitiatorCurrentCyclesNumber--;
   \   0001C2   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   0001C5   E0           MOVX      A,@DPTR
   \   0001C6   24FF         ADD       A,#-0x1
   \   0001C8   F0           MOVX      @DPTR,A
   2666                  
   2667                  if(bdb_FB_InitiatorCurrentCyclesNumber > 0)
   \   0001C9   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   0001CC   E0           MOVX      A,@DPTR
   \   0001CD   604B         JZ        ??bdb_event_loop_20
   2668                  {
   2669                    //Only send Identify Query if there is no pending responses from a previous identify query
   2670                    if ((osal_get_timeoutEx(bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT) == 0) && (bdb_getRespondentRetry(pRespondentHead) == NULL))
   \   0001CF                ; Setup parameters for call to function osal_get_timeoutEx
   \   0001CF   7A00         MOV       R2,#0x0
   \   0001D1   7B40         MOV       R3,#0x40
   \   0001D3   90....       MOV       DPTR,#bdb_TaskID
   \   0001D6   E0           MOVX      A,@DPTR
   \   0001D7   F9           MOV       R1,A
   \   0001D8   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   0001DB   EA           MOV       A,R2
   \   0001DC   4B           ORL       A,R3
   \   0001DD   4C           ORL       A,R4
   \   0001DE   4D           ORL       A,R5
   \   0001DF   7021         JNZ       ??bdb_event_loop_21
   \   0001E1                ; Setup parameters for call to function bdb_getRespondentRetry
   \   0001E1   90....       MOV       DPTR,#pRespondentHead
   \   0001E4   E0           MOVX      A,@DPTR
   \   0001E5   FA           MOV       R2,A
   \   0001E6   A3           INC       DPTR
   \   0001E7   E0           MOVX      A,@DPTR
   \   0001E8   FB           MOV       R3,A
   \   0001E9   12....       LCALL     `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
   \   0001EC   8A..         MOV       ?V0,R2
   \   0001EE   8B..         MOV       ?V1,R3
   \   0001F0   E5..         MOV       A,?V0
   \   0001F2   45..         ORL       A,?V1
   \   0001F4   700C         JNZ       ??bdb_event_loop_21
   2671                    {
   2672                      //Send identify query with the endpoint requested
   2673                      bdb_SendIdentifyQuery(bdb_CurrEpDescriptor->endPoint);
   \   0001F6                ; Setup parameters for call to function bdb_SendIdentifyQuery
   \   0001F6   85..82       MOV       DPL,?V6
   \   0001F9   85..83       MOV       DPH,?V7
   \   0001FC   E0           MOVX      A,@DPTR
   \   0001FD   F9           MOV       R1,A
   \   0001FE   12....       LCALL     `??bdb_SendIdentifyQuery::?relay`; Banked call to: bdb_SendIdentifyQuery
   \   000201   E9           MOV       A,R1
   2674                    }
   2675                    osal_start_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT, FINDING_AND_BINDING_PERIODIC_TIME * 1000);
   \                     ??bdb_event_loop_21:
   \   000202                ; Setup parameters for call to function osal_start_timerEx
   \   000202   90....       MOV       DPTR,#__Constant_3a98
   \   000205   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000208   7A40         MOV       R2,#0x40
   \   00020A   7B00         MOV       R3,#0x0
   \   00020C   90....       MOV       DPTR,#bdb_TaskID
   \   00020F   E0           MOVX      A,@DPTR
   \   000210   F9           MOV       R1,A
   \   000211   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000214   7404         MOV       A,#0x4
   \   000216   12....       LCALL     ?DEALLOC_XSTACK8
   \   000219   E9           MOV       A,R1
   2676                  }
   2677                }
   2678              }
   2679          
   2680              if (bdb_FB_InitiatorCurrentCyclesNumber == 0)
   \                     ??bdb_event_loop_20:
   \   00021A   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   00021D   E0           MOVX      A,@DPTR
   \   00021E   7005         JNZ       ??bdb_event_loop_22
   2681              {
   2682                bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE );
   \   000220                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   000220   790B         MOV       R1,#0xb
   \   000222   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
   2683              }
   2684              
   2685              return (events ^ BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
   \                     ??bdb_event_loop_22:
   \   000225   EE           MOV       A,R6
   \   000226   6440         XRL       A,#0x40
   \   000228   FA           MOV       R2,A
   \   000229   EF           MOV       A,R7
   \   00022A   6400         XRL       A,#0x0
   \   00022C   FB           MOV       R3,A
   \   00022D   02....       LJMP      ??bdb_event_loop_6 & 0xFFFF
   2686            }
   2687            
   2688            if(events & BDB_IDENTIFY_TIMEOUT)
   \                     ??bdb_event_loop_19:
   \   000230   EE           MOV       A,R6
   \   000231   5400         ANL       A,#0x0
   \   000233   F8           MOV       R0,A
   \   000234   EF           MOV       A,R7
   \   000235   5420         ANL       A,#0x20
   \   000237   F9           MOV       R1,A
   \   000238   E8           MOV       A,R0
   \   000239   49           ORL       A,R1
   \   00023A   7003         JNZ       $+5
   \   00023C   02....       LJMP      ??bdb_event_loop_23 & 0xFFFF
   2689            {
   2690              zclAttrRec_t identifyAttrRec;
   2691              epList_t *bdb_CurrEpDescriptorNextInList = NULL;
   \   00023F   75..00       MOV       ?V0,#0x0
   \   000242   75..00       MOV       ?V1,#0x0
   2692              bdb_CurrEpDescriptorNextInList = bdb_HeadEpDescriptorList;
   \   000245   90....       MOV       DPTR,#bdb_HeadEpDescriptorList
   \   000248   E0           MOVX      A,@DPTR
   \   000249   F8           MOV       R0,A
   \   00024A   A3           INC       DPTR
   \   00024B   E0           MOVX      A,@DPTR
   \   00024C   F9           MOV       R1,A
   \   00024D   88..         MOV       ?V0,R0
   \   00024F   89..         MOV       ?V1,R1
   2693              
   2694              bool KeepIdentifyTimerRunning = FALSE;
   \   000251   75..00       MOV       ?V4,#0x0
   2695              
   2696              while(bdb_CurrEpDescriptorNextInList != NULL )
   \                     ??bdb_event_loop_24:
   \   000254   E5..         MOV       A,?V0
   \   000256   45..         ORL       A,?V1
   \   000258   7003         JNZ       $+5
   \   00025A   02....       LJMP      ??bdb_event_loop_25 & 0xFFFF
   2697              {
   2698                endPointDesc_t *bdb_EpDescriptor = NULL;
   \   00025D   75..00       MOV       ?V2,#0x0
   \   000260   75..00       MOV       ?V3,#0x0
   2699                bdb_EpDescriptor = bdb_CurrEpDescriptorNextInList->epDesc;
   \   000263   85..82       MOV       DPL,?V0
   \   000266   85..83       MOV       DPH,?V1
   \   000269   A3           INC       DPTR
   \   00026A   A3           INC       DPTR
   \   00026B   E0           MOVX      A,@DPTR
   \   00026C   F8           MOV       R0,A
   \   00026D   A3           INC       DPTR
   \   00026E   E0           MOVX      A,@DPTR
   \   00026F   F9           MOV       R1,A
   \   000270   88..         MOV       ?V2,R0
   \   000272   89..         MOV       ?V3,R1
   2700              
   2701                //Do not check ZDO or Zigbee reserved endpoints
   2702                if((bdb_CurrEpDescriptorNextInList->epDesc->endPoint == 0) || (bdb_CurrEpDescriptorNextInList->epDesc->endPoint >= BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
   \   000274   85..82       MOV       DPL,?V0
   \   000277   85..83       MOV       DPH,?V1
   \   00027A   A3           INC       DPTR
   \   00027B   A3           INC       DPTR
   \   00027C   E0           MOVX      A,@DPTR
   \   00027D   F8           MOV       R0,A
   \   00027E   A3           INC       DPTR
   \   00027F   E0           MOVX      A,@DPTR
   \   000280   F583         MOV       DPH,A
   \   000282   8882         MOV       DPL,R0
   \   000284   E0           MOVX      A,@DPTR
   \   000285   6016         JZ        ??bdb_event_loop_26
   \   000287   85..82       MOV       DPL,?V0
   \   00028A   85..83       MOV       DPH,?V1
   \   00028D   A3           INC       DPTR
   \   00028E   A3           INC       DPTR
   \   00028F   E0           MOVX      A,@DPTR
   \   000290   F8           MOV       R0,A
   \   000291   A3           INC       DPTR
   \   000292   E0           MOVX      A,@DPTR
   \   000293   F583         MOV       DPH,A
   \   000295   8882         MOV       DPL,R0
   \   000297   E0           MOVX      A,@DPTR
   \   000298   C3           CLR       C
   \   000299   94F1         SUBB      A,#-0xf
   \   00029B   400F         JC        ??bdb_event_loop_27
   2703                {
   2704                  bdb_CurrEpDescriptorNextInList = bdb_CurrEpDescriptorNextInList->nextDesc;
   \                     ??bdb_event_loop_26:
   \   00029D   85..82       MOV       DPL,?V0
   \   0002A0   85..83       MOV       DPH,?V1
   \   0002A3   E0           MOVX      A,@DPTR
   \   0002A4   F5..         MOV       ?V0,A
   \   0002A6   A3           INC       DPTR
   \   0002A7   E0           MOVX      A,@DPTR
   \   0002A8   F5..         MOV       ?V1,A
   2705                  continue;
   \   0002AA   80A8         SJMP      ??bdb_event_loop_24
   2706                }
   2707                
   2708                if ( zclFindAttrRec( bdb_EpDescriptor->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
   2709                                  ATTRID_IDENTIFY_TIME, &identifyAttrRec ) )
   \                     ??bdb_event_loop_27:
   \   0002AC                ; Setup parameters for call to function zclFindAttrRec
   \   0002AC   A8..         MOV       R0,?XSP + 0
   \   0002AE   A9..         MOV       R1,?XSP + 1
   \   0002B0   88..         MOV       ?V8,R0
   \   0002B2   89..         MOV       ?V9,R1
   \   0002B4   78..         MOV       R0,#?V8
   \   0002B6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002B9   7C00         MOV       R4,#0x0
   \   0002BB   7D00         MOV       R5,#0x0
   \   0002BD   7A03         MOV       R2,#0x3
   \   0002BF   7B00         MOV       R3,#0x0
   \   0002C1   85..82       MOV       DPL,?V2
   \   0002C4   85..83       MOV       DPH,?V3
   \   0002C7   E0           MOVX      A,@DPTR
   \   0002C8   F9           MOV       R1,A
   \   0002C9   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   0002CC   7402         MOV       A,#0x2
   \   0002CE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002D1   E9           MOV       A,R1
   \   0002D2   606B         JZ        ??bdb_event_loop_28
   2710                {
   2711                  if(*((uint16*)identifyAttrRec.attr.dataPtr) > 0)
   \   0002D4   7406         MOV       A,#0x6
   \   0002D6   12....       LCALL     ?XSTACK_DISP0_8
   \   0002D9   E0           MOVX      A,@DPTR
   \   0002DA   F8           MOV       R0,A
   \   0002DB   A3           INC       DPTR
   \   0002DC   E0           MOVX      A,@DPTR
   \   0002DD   F583         MOV       DPH,A
   \   0002DF   8882         MOV       DPL,R0
   \   0002E1   E0           MOVX      A,@DPTR
   \   0002E2   F8           MOV       R0,A
   \   0002E3   A3           INC       DPTR
   \   0002E4   E0           MOVX      A,@DPTR
   \   0002E5   F9           MOV       R1,A
   \   0002E6   E8           MOV       A,R0
   \   0002E7   49           ORL       A,R1
   \   0002E8   602D         JZ        ??bdb_event_loop_29
   2712                  {
   2713                    (uint16)(*((uint16*)identifyAttrRec.attr.dataPtr))--;
   \   0002EA   7406         MOV       A,#0x6
   \   0002EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0002EF   E0           MOVX      A,@DPTR
   \   0002F0   F8           MOV       R0,A
   \   0002F1   A3           INC       DPTR
   \   0002F2   E0           MOVX      A,@DPTR
   \   0002F3   F583         MOV       DPH,A
   \   0002F5   8882         MOV       DPL,R0
   \   0002F7   E0           MOVX      A,@DPTR
   \   0002F8   24FF         ADD       A,#-0x1
   \   0002FA   FA           MOV       R2,A
   \   0002FB   A3           INC       DPTR
   \   0002FC   E0           MOVX      A,@DPTR
   \   0002FD   34FF         ADDC      A,#-0x1
   \   0002FF   FB           MOV       R3,A
   \   000300   7406         MOV       A,#0x6
   \   000302   12....       LCALL     ?XSTACK_DISP0_8
   \   000305   E0           MOVX      A,@DPTR
   \   000306   F8           MOV       R0,A
   \   000307   A3           INC       DPTR
   \   000308   E0           MOVX      A,@DPTR
   \   000309   F583         MOV       DPH,A
   \   00030B   8882         MOV       DPL,R0
   \   00030D   EA           MOV       A,R2
   \   00030E   F0           MOVX      @DPTR,A
   \   00030F   A3           INC       DPTR
   \   000310   EB           MOV       A,R3
   \   000311   F0           MOVX      @DPTR,A
   2714                    KeepIdentifyTimerRunning = TRUE;
   \   000312   75..01       MOV       ?V4,#0x1
   \   000315   8028         SJMP      ??bdb_event_loop_28
   2715                  }
   2716                  else
   2717                  {
   2718                    // Use bdb success main state
   2719                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \                     ??bdb_event_loop_29:
   \   000317   90....       MOV       DPTR,#bdbAttributes + 10
   \   00031A   7400         MOV       A,#0x0
   \   00031C   F0           MOVX      @DPTR,A
   2720                    if(pfnIdentifyTimeChangeCB != NULL)
   \   00031D   90....       MOV       DPTR,#pfnIdentifyTimeChangeCB
   \   000320   E0           MOVX      A,@DPTR
   \   000321   F8           MOV       R0,A
   \   000322   A3           INC       DPTR
   \   000323   E0           MOVX      A,@DPTR
   \   000324   F9           MOV       R1,A
   \   000325   E8           MOV       A,R0
   \   000326   49           ORL       A,R1
   \   000327   6016         JZ        ??bdb_event_loop_28
   2721                    {
   2722                      pfnIdentifyTimeChangeCB(bdb_EpDescriptor->endPoint);
   \   000329                ; Setup parameters for indirect call
   \   000329   85..82       MOV       DPL,?V2
   \   00032C   85..83       MOV       DPH,?V3
   \   00032F   E0           MOVX      A,@DPTR
   \   000330   F9           MOV       R1,A
   \   000331   90....       MOV       DPTR,#pfnIdentifyTimeChangeCB
   \   000334   E0           MOVX      A,@DPTR
   \   000335   F8           MOV       R0,A
   \   000336   A3           INC       DPTR
   \   000337   E0           MOVX      A,@DPTR
   \   000338   F583         MOV       DPH,A
   \   00033A   8882         MOV       DPL,R0
   \   00033C   12....       LCALL     ?CALL_IND
   2723                    }
   2724                  }
   2725                }
   2726                bdb_CurrEpDescriptorNextInList = bdb_CurrEpDescriptorNextInList->nextDesc;
   \                     ??bdb_event_loop_28:
   \   00033F   85..82       MOV       DPL,?V0
   \   000342   85..83       MOV       DPH,?V1
   \   000345   E0           MOVX      A,@DPTR
   \   000346   F5..         MOV       ?V0,A
   \   000348   A3           INC       DPTR
   \   000349   E0           MOVX      A,@DPTR
   \   00034A   F5..         MOV       ?V1,A
   \   00034C   02....       LJMP      ??bdb_event_loop_24 & 0xFFFF
   2727              }
   2728              
   2729              //If any endpoint has identify running, keep the timer on
   2730              if(KeepIdentifyTimerRunning)
   \                     ??bdb_event_loop_25:
   \   00034F   E5..         MOV       A,?V4
   \   000351   601A         JZ        ??bdb_event_loop_30
   2731              {
   2732                osal_start_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT, 1000 );
   \   000353                ; Setup parameters for call to function osal_start_timerEx
   \   000353   90....       MOV       DPTR,#__Constant_3e8
   \   000356   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000359   7A00         MOV       R2,#0x0
   \   00035B   7B20         MOV       R3,#0x20
   \   00035D   90....       MOV       DPTR,#bdb_TaskID
   \   000360   E0           MOVX      A,@DPTR
   \   000361   F9           MOV       R1,A
   \   000362   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000365   7404         MOV       A,#0x4
   \   000367   12....       LCALL     ?DEALLOC_XSTACK8
   \   00036A   E9           MOV       A,R1
   \   00036B   800D         SJMP      ??bdb_event_loop_31
   2733              }
   2734              else
   2735              {
   2736                osal_stop_timerEx( bdb_TaskID, BDB_IDENTIFY_TIMEOUT );
   \                     ??bdb_event_loop_30:
   \   00036D                ; Setup parameters for call to function osal_stop_timerEx
   \   00036D   7A00         MOV       R2,#0x0
   \   00036F   7B20         MOV       R3,#0x20
   \   000371   90....       MOV       DPTR,#bdb_TaskID
   \   000374   E0           MOVX      A,@DPTR
   \   000375   F9           MOV       R1,A
   \   000376   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000379   E9           MOV       A,R1
   2737              }
   2738              
   2739              // Return unprocessed events
   2740              return (events ^ BDB_IDENTIFY_TIMEOUT);
   \                     ??bdb_event_loop_31:
   \   00037A   EE           MOV       A,R6
   \   00037B   6400         XRL       A,#0x0
   \   00037D   FA           MOV       R2,A
   \   00037E   EF           MOV       A,R7
   \   00037F   6420         XRL       A,#0x20
   \   000381   FB           MOV       R3,A
   \   000382   801D         SJMP      ??bdb_event_loop_6
   2741            }
   2742            
   2743            if(events & BDB_RESPONDENT_PROCESS_TIMEOUT)
   \                     ??bdb_event_loop_23:
   \   000384   EE           MOV       A,R6
   \   000385   5400         ANL       A,#0x0
   \   000387   F8           MOV       R0,A
   \   000388   EF           MOV       A,R7
   \   000389   5440         ANL       A,#0x40
   \   00038B   F9           MOV       R1,A
   \   00038C   E8           MOV       A,R0
   \   00038D   49           ORL       A,R1
   \   00038E   600D         JZ        ??bdb_event_loop_32
   2744            {
   2745              // Send Simple Descriptor request to a respondent node
   2746              bdb_ProcessRespondentList();
   \   000390                ; Setup parameters for call to function bdb_ProcessRespondentList
   \   000390   12....       LCALL     `??bdb_ProcessRespondentList::?relay`; Banked call to: bdb_ProcessRespondentList
   2747          
   2748              return (events ^ BDB_RESPONDENT_PROCESS_TIMEOUT);
   \   000393   EE           MOV       A,R6
   \   000394   6400         XRL       A,#0x0
   \   000396   FA           MOV       R2,A
   \   000397   EF           MOV       A,R7
   \   000398   6440         XRL       A,#0x40
   \   00039A   FB           MOV       R3,A
   \   00039B   8004         SJMP      ??bdb_event_loop_6
   2749            }
   2750          #endif
   2751            
   2752            return 0;
   \                     ??bdb_event_loop_32:
   \   00039D   7A00         MOV       R2,#0x0
   \   00039F   7B00         MOV       R3,#0x0
   \                     ??bdb_event_loop_6:
   \   0003A1   740D         MOV       A,#0xd
   \   0003A3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003A6   7F0A         MOV       R7,#0xa
   \   0003A8   02....       LJMP      ?BANKED_LEAVE_XDATA
   2753          }
   2754          
   2755          /*********************************************************************
   2756           * @fn          bdb_processZDOMgs
   2757           *
   2758           * @brief       Process ZDO messages used as part of BDB commissioning methods
   2759           *
   2760           * @param       zdoIncomingMsg_t - ZDO message
   2761           *
   2762           * @return      
   2763           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2764          static void bdb_processZDOMgs(zdoIncomingMsg_t *pMsg)
   \                     bdb_processZDOMgs:
   2765          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2766            switch ( pMsg->clusterID )
   \   000009   EE           MOV       A,R6
   \   00000A   240C         ADD       A,#0xc
   \   00000C   F582         MOV       DPL,A
   \   00000E   E4           CLR       A
   \   00000F   3F           ADDC      A,R7
   \   000010   F583         MOV       DPH,A
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F5..         MOV       ?V0,A
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F5..         MOV       ?V1,A
   \   000019   78..         MOV       R0,#?V0
   \   00001B   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for bdb_processZDOMgs>_0`:
   \   00001E   0180         DW        32769
   \   000020   03           DB        3
   \   000021   ....         DW        ??bdb_processZDOMgs_0
   \   000023   ....         DW        ??bdb_processZDOMgs_1
   \   000025   ....         DW        ??bdb_processZDOMgs_2
   \   000027   ....         DW        ??bdb_processZDOMgs_0
   \   000029   ....         DW        ??bdb_processZDOMgs_3
   2767            {
   2768          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)      
   2769              case IEEE_addr_rsp:
   2770                 bdb_ProcessIEEEAddrRsp(pMsg);
   \                     ??bdb_processZDOMgs_1:
   \   00002B                ; Setup parameters for call to function bdb_ProcessIEEEAddrRsp
   \   00002B   EE           MOV       A,R6
   \   00002C   FA           MOV       R2,A
   \   00002D   EF           MOV       A,R7
   \   00002E   FB           MOV       R3,A
   \   00002F   12....       LCALL     `??bdb_ProcessIEEEAddrRsp::?relay`; Banked call to: bdb_ProcessIEEEAddrRsp
   2771              break;
   \   000032   8010         SJMP      ??bdb_processZDOMgs_0
   2772              case Simple_Desc_rsp:
   2773                bdb_ProcessSimpleDesc(pMsg);
   \                     ??bdb_processZDOMgs_3:
   \   000034                ; Setup parameters for call to function bdb_ProcessSimpleDesc
   \   000034   EE           MOV       A,R6
   \   000035   FA           MOV       R2,A
   \   000036   EF           MOV       A,R7
   \   000037   FB           MOV       R3,A
   \   000038   12....       LCALL     `??bdb_ProcessSimpleDesc::?relay`; Banked call to: bdb_ProcessSimpleDesc
   2774              break;
   \   00003B   8007         SJMP      ??bdb_processZDOMgs_0
   2775          #endif
   2776          
   2777          #if (ZG_BUILD_JOINING_TYPE)    
   2778              case Node_Desc_rsp:
   2779                bdb_ProcessNodeDescRsp(pMsg);
   \                     ??bdb_processZDOMgs_2:
   \   00003D                ; Setup parameters for call to function bdb_ProcessNodeDescRsp
   \   00003D   EE           MOV       A,R6
   \   00003E   FA           MOV       R2,A
   \   00003F   EF           MOV       A,R7
   \   000040   FB           MOV       R3,A
   \   000041   12....       LCALL     `??bdb_ProcessNodeDescRsp::?relay`; Banked call to: bdb_ProcessNodeDescRsp
   2780              break;
   2781          #endif
   2782              
   2783              default:
   2784              break;
   2785            }
   2786          }
   \                     ??bdb_processZDOMgs_0:
   \   000044   7F02         MOV       R7,#0x2
   \   000046   02....       LJMP      ?BANKED_LEAVE_XDATA
   2787          
   2788          
   2789          /*********************************************************************
   2790           * @fn      bdb_ProcessNodeDescRsp
   2791           *
   2792           * @brief   Process Node Descriptor response to validate the stack version of the
   2793           *
   2794           * @param   zdoIncomingMsg_t *pMsg
   2795           *
   2796           * @return  none
   2797           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2798          void bdb_ProcessNodeDescRsp(zdoIncomingMsg_t *pMsg)
   \                     bdb_ProcessNodeDescRsp:
   2799          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 35
   \   000005   74DD         MOV       A,#-0x23
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2800            //Avoid processing unintended messages
   2801            if(requestNewTrustCenterLinkKey && 
   2802              (bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE))
   \   00000E   90....       MOV       DPTR,#requestNewTrustCenterLinkKey
   \   000011   E0           MOVX      A,@DPTR
   \   000012   7003         JNZ       $+5
   \   000014   02....       LJMP      ??bdb_ProcessNodeDescRsp_0 & 0xFFFF
   \   000017   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   6401         XRL       A,#0x1
   \   00001D   6003         JZ        $+5
   \   00001F   02....       LJMP      ??bdb_ProcessNodeDescRsp_0 & 0xFFFF
   2803            {
   2804              if(!APSME_IsDistributedSecurity())
   \   000022                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   000022   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   000025   E9           MOV       A,R1
   \   000026   6003         JZ        $+5
   \   000028   02....       LJMP      ??bdb_ProcessNodeDescRsp_0 & 0xFFFF
   2805              {
   2806                //Is this from the coordinator?
   2807                if(pMsg->srcAddr.addr.shortAddr == 0x0000)
   \   00002B   8E82         MOV       DPL,R6
   \   00002D   8F83         MOV       DPH,R7
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F8           MOV       R0,A
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F9           MOV       R1,A
   \   000036   E8           MOV       A,R0
   \   000037   49           ORL       A,R1
   \   000038   6003         JZ        $+5
   \   00003A   02....       LJMP      ??bdb_ProcessNodeDescRsp_0 & 0xFFFF
   2808                {
   2809                  ZDO_NodeDescRsp_t NDRsp;
   2810                  uint8 StackComplianceRev;
   2811          
   2812                  //Stop timer to avoid unintended resets
   2813                  osal_stop_timerEx( bdb_TaskID, BDB_PROCESS_TIMEOUT);
   \   00003D                ; Setup parameters for call to function osal_stop_timerEx
   \   00003D   7A00         MOV       R2,#0x0
   \   00003F   7B10         MOV       R3,#0x10
   \   000041   90....       MOV       DPTR,#bdb_TaskID
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F9           MOV       R1,A
   \   000046   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000049   E9           MOV       A,R1
   2814                  
   2815                  ZDO_ParseNodeDescRsp(pMsg, &NDRsp);
   \   00004A                ; Setup parameters for call to function ZDO_ParseNodeDescRsp
   \   00004A   7413         MOV       A,#0x13
   \   00004C   12....       LCALL     ?XSTACK_DISP102_8
   \   00004F   EE           MOV       A,R6
   \   000050   FA           MOV       R2,A
   \   000051   EF           MOV       A,R7
   \   000052   FB           MOV       R3,A
   \   000053   12....       LCALL     `??ZDO_ParseNodeDescRsp::?relay`; Banked call to: ZDO_ParseNodeDescRsp
   2816                  
   2817                  StackComplianceRev = NDRsp.nodeDesc.ServerMask >> STACK_COMPLIANCE_CURRENT_REV_POS;
   \   000056   741E         MOV       A,#0x1e
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F5..         MOV       ?V0,A
   \   00005E   A3           INC       DPTR
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F5..         MOV       ?V1,A
   \   000062   7409         MOV       A,#0x9
   \   000064   78..         MOV       R0,#?V0
   \   000066   12....       LCALL     ?US_SHR
   \   000069   E5..         MOV       A,?V0
   \   00006B   F5..         MOV       ?V2,A
   2818                  
   2819                  if( StackComplianceRev >= STACK_COMPL_REV_21 )
   \   00006D   E5..         MOV       A,?V2
   \   00006F   C3           CLR       C
   \   000070   9415         SUBB      A,#0x15
   \   000072   4009         JC        ??bdb_ProcessNodeDescRsp_1
   2820                  {
   2821                    bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_LINK_KEY);
   \   000074                ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
   \   000074   7A02         MOV       R2,#0x2
   \   000076   7901         MOV       R1,#0x1
   \   000078   12....       LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
   \   00007B   8040         SJMP      ??bdb_ProcessNodeDescRsp_0
   2822                  }
   2823                  else
   2824                  {
   2825                    APSME_TCLKDevEntry_t TCLKDevEntry;
   2826                    
   2827                    //Save the KeyAttribute for joining device that it has joined non-R21 nwk
   2828                    TCLKDevEntry.keyAttributes = ZG_NON_R21_NWK_JOINED;
   \                     ??bdb_ProcessNodeDescRsp_1:
   \   00007D   7410         MOV       A,#0x10
   \   00007F   12....       LCALL     ?XSTACK_DISP0_8
   \   000082   74FD         MOV       A,#-0x3
   \   000084   F0           MOVX      @DPTR,A
   2829                    osal_nv_write(ZCD_NV_TCLK_TABLE_START,osal_offsetof(APSME_TCLKDevEntry_t,keyAttributes),sizeof(uint8),&TCLKDevEntry.keyAttributes);
   \   000085                ; Setup parameters for call to function osal_nv_write
   \   000085   7410         MOV       A,#0x10
   \   000087   12....       LCALL     ?XSTACK_DISP0_8
   \   00008A   8582..       MOV       ?V0,DPL
   \   00008D   8583..       MOV       ?V1,DPH
   \   000090   78..         MOV       R0,#?V0
   \   000092   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000095   75..01       MOV       ?V0,#0x1
   \   000098   75..00       MOV       ?V1,#0x0
   \   00009B   78..         MOV       R0,#?V0
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A0   7C10         MOV       R4,#0x10
   \   0000A2   7D00         MOV       R5,#0x0
   \   0000A4   7A11         MOV       R2,#0x11
   \   0000A6   7B01         MOV       R3,#0x1
   \   0000A8   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000AB   7404         MOV       A,#0x4
   \   0000AD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B0   E9           MOV       A,R1
   2830                    
   2831                    bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
   \   0000B1                ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
   \   0000B1   7900         MOV       R1,#0x0
   \   0000B3   12....       LCALL     `??bdb_setNodeJoinLinkKeyType::?relay`; Banked call to: bdb_setNodeJoinLinkKeyType
   2832                    bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, TRUE);
   \   0000B6                ; Setup parameters for call to function bdb_reportCommissioningState
   \   0000B6   7A01         MOV       R2,#0x1
   \   0000B8   7901         MOV       R1,#0x1
   \   0000BA   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   2833                  }
   2834                }
   2835              }
   2836            }
   2837          }
   \                     ??bdb_ProcessNodeDescRsp_0:
   \   0000BD   7423         MOV       A,#0x23
   \   0000BF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C2   7F03         MOV       R7,#0x3
   \   0000C4   02....       LJMP      ?BANKED_LEAVE_XDATA
   2838          
   2839          
   2840          /*********************************************************************
   2841           * @fn          bdb_touchlinkSendFNReset
   2842           *
   2843           * @brief       Starts the Factory New Procedure for Initiator
   2844           *
   2845           * @param       isOnANetwork - TRUE if the devices is not FN, FALSE otherwise
   2846           *
   2847           * @return      none
   2848           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2849          void bdb_touchlinkSendFNReset( void )
   \                     bdb_touchlinkSendFNReset:
   2850          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2851          #ifdef BDB_TL_INITIATOR
   2852            touchLinkInitiator_ResetToFNProcedure( );
   \   000004                ; Setup parameters for call to function touchLinkInitiator_ResetToFNProcedure
   \   000004   12....       LCALL     `??touchLinkInitiator_ResetToFNProcedure::?relay`; Banked call to: touchLinkInitiator_ResetToFNProcedure
   2853          #endif
   2854          }
   \   000007   D083         POP       DPH
   \   000009   D082         POP       DPL
   \   00000B   02....       LJMP      ?BRET
   2855          
   2856          
   2857          /*********************************************************************
   2858           * @fn          bdb_setNodeIsOnANetwork
   2859           *
   2860           * @brief       Sets and saves in Nv bdbNodeIsOnANetwork attribute
   2861           *
   2862           * @param       isOnANetwork - TRUE if the devices is not FN, FALSE otherwise
   2863           *
   2864           * @return      none
   2865           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2866          void bdb_setNodeIsOnANetwork(bool isOnANetwork)
   \                     bdb_setNodeIsOnANetwork:
   2867          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   2868            if((bdbAttributes.bdbNodeIsOnANetwork != isOnANetwork) || (!bdb_initialization))
   \   000007   90....       MOV       DPTR,#bdbAttributes + 14
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   6E           XRL       A,R6
   \   00000C   7006         JNZ       ??bdb_setNodeIsOnANetwork_0
   \   00000E   90....       MOV       DPTR,#bdb_initialization
   \   000011   E0           MOVX      A,@DPTR
   \   000012   7035         JNZ       ??bdb_setNodeIsOnANetwork_1
   2869            {
   2870              //We lose our network
   2871              if(!isOnANetwork)
   \                     ??bdb_setNodeIsOnANetwork_0:
   \   000014   EE           MOV       A,R6
   \   000015   7006         JNZ       ??bdb_setNodeIsOnANetwork_2
   2872              {
   2873                bdbAttributes.bdbCommissioningMode = 0;
   \   000017   90....       MOV       DPTR,#bdbAttributes + 11
   \   00001A   7400         MOV       A,#0x0
   \   00001C   F0           MOVX      @DPTR,A
   2874              }
   2875              
   2876              bdbAttributes.bdbNodeIsOnANetwork = isOnANetwork;
   \                     ??bdb_setNodeIsOnANetwork_2:
   \   00001D   EE           MOV       A,R6
   \   00001E   90....       MOV       DPTR,#bdbAttributes + 14
   \   000021   F0           MOVX      @DPTR,A
   2877              
   2878              osal_nv_write(ZCD_NV_BDBNODEISONANETWORK,0,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
   \   000022                ; Setup parameters for call to function osal_nv_write
   \   000022   75....       MOV       ?V0,#(bdbAttributes + 14) & 0xff
   \   000025   75....       MOV       ?V1,#((bdbAttributes + 14) >> 8) & 0xff
   \   000028   78..         MOV       R0,#?V0
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   75..01       MOV       ?V0,#0x1
   \   000030   75..00       MOV       ?V1,#0x0
   \   000033   78..         MOV       R0,#?V0
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   7C00         MOV       R4,#0x0
   \   00003A   7D00         MOV       R5,#0x0
   \   00003C   7A55         MOV       R2,#0x55
   \   00003E   7B00         MOV       R3,#0x0
   \   000040   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000043   7404         MOV       A,#0x4
   \   000045   12....       LCALL     ?DEALLOC_XSTACK8
   \   000048   E9           MOV       A,R1
   2879            }
   2880          }
   \                     ??bdb_setNodeIsOnANetwork_1:
   \   000049   7F02         MOV       R7,#0x2
   \   00004B   02....       LJMP      ?BANKED_LEAVE_XDATA
   2881          
   2882          /*********************************************************************
   2883           * @fn          bdb_setCommissioningGroupID
   2884           *
   2885           * @brief       Sets the commissioning groupd ID
   2886           *
   2887           * @param       groupID
   2888           *
   2889           * @return      none
   2890           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2891          void bdb_setCommissioningGroupID(uint16 groupID)
   \                     bdb_setCommissioningGroupID:
   2892          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2893            bdbAttributes.bdbCommissioningGroupID = groupID;
   \   000004   90....       MOV       DPTR,#bdbAttributes + 8
   \   000007   EA           MOV       A,R2
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   EB           MOV       A,R3
   \   00000B   F0           MOVX      @DPTR,A
   2894          }
   \   00000C   D083         POP       DPH
   \   00000E   D082         POP       DPL
   \   000010   02....       LJMP      ?BRET
   2895          
   2896          /*********************************************************************
   2897           * @fn      bdb_CreateRespondentList
   2898           *
   2899           * @brief   Create respondent list for finding and binding if empty
   2900           *
   2901           * @param   pHead - pointer to a pointer of the list head
   2902           *
   2903           * @return  none
   2904           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2905          void bdb_CreateRespondentList( bdbFindingBindingRespondent_t **pHead )
   \                     bdb_CreateRespondentList:
   2906          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2907          
   2908            // Create the list if empty
   2909            if ( *pHead == NULL )
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F8           MOV       R0,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F9           MOV       R1,A
   \   000012   E8           MOV       A,R0
   \   000013   49           ORL       A,R1
   \   000014   7036         JNZ       ??bdb_CreateRespondentList_0
   2910            {
   2911              *pHead = ( bdbFindingBindingRespondent_t* )osal_mem_alloc( sizeof( bdbFindingBindingRespondent_t ) );
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   7A11         MOV       R2,#0x11
   \   000018   7B00         MOV       R3,#0x0
   \   00001A   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001D   8E82         MOV       DPL,R6
   \   00001F   8F83         MOV       DPH,R7
   \   000021   EA           MOV       A,R2
   \   000022   F0           MOVX      @DPTR,A
   \   000023   A3           INC       DPTR
   \   000024   EB           MOV       A,R3
   \   000025   F0           MOVX      @DPTR,A
   2912              
   2913              if ( *pHead != NULL )
   \   000026   8E82         MOV       DPL,R6
   \   000028   8F83         MOV       DPH,R7
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   F8           MOV       R0,A
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F9           MOV       R1,A
   \   00002F   E8           MOV       A,R0
   \   000030   49           ORL       A,R1
   \   000031   6019         JZ        ??bdb_CreateRespondentList_0
   2914              {
   2915                (*pHead)->pNext = NULL;
   \   000033   8E82         MOV       DPL,R6
   \   000035   8F83         MOV       DPH,R7
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F8           MOV       R0,A
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   C8           XCH       A,R0
   \   00003C   240F         ADD       A,#0xf
   \   00003E   F582         MOV       DPL,A
   \   000040   C8           XCH       A,R0
   \   000041   3400         ADDC      A,#0x0
   \   000043   F583         MOV       DPH,A
   \   000045   7400         MOV       A,#0x0
   \   000047   F0           MOVX      @DPTR,A
   \   000048   A3           INC       DPTR
   \   000049   7400         MOV       A,#0x0
   \   00004B   F0           MOVX      @DPTR,A
   2916              }
   2917            }
   2918            return;
   \                     ??bdb_CreateRespondentList_0:
   \   00004C   7F01         MOV       R7,#0x1
   \   00004E   02....       LJMP      ?BANKED_LEAVE_XDATA
   2919          }
   2920          
   2921          /*********************************************************************
   2922           * @fn      bdb_AddRespondentNode
   2923           *
   2924           * @brief   Add node to respondent list for finding and binding
   2925           *
   2926           * @param   pHead - pointer to a pointer of the list head
   2927           *
   2928           * @return  pointer to new node
   2929           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2930          bdbFindingBindingRespondent_t* bdb_AddRespondentNode( bdbFindingBindingRespondent_t **pHead, zclIdentifyQueryRsp_t *pCmd )
   \                     bdb_AddRespondentNode:
   2931          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V4,R4
   \   00000B   8D..         MOV       ?V5,R5
   2932            bdbFindingBindingRespondent_t **pCurr;
   2933            bdbFindingBindingRespondent_t *temp;
   2934            
   2935              // Create respondent list if empty
   2936            if ( *pHead == NULL )
   \   00000D   8E82         MOV       DPL,R6
   \   00000F   8F83         MOV       DPH,R7
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F8           MOV       R0,A
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F9           MOV       R1,A
   \   000016   E8           MOV       A,R0
   \   000017   49           ORL       A,R1
   \   000018   7013         JNZ       ??bdb_AddRespondentNode_0
   2937            {
   2938              bdb_CreateRespondentList( pHead );
   \   00001A                ; Setup parameters for call to function bdb_CreateRespondentList
   \   00001A   EE           MOV       A,R6
   \   00001B   FA           MOV       R2,A
   \   00001C   EF           MOV       A,R7
   \   00001D   FB           MOV       R3,A
   \   00001E   12....       LCALL     `??bdb_CreateRespondentList::?relay`; Banked call to: bdb_CreateRespondentList
   2939              return *pHead;
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   E0           MOVX      A,@DPTR
   \   000026   FA           MOV       R2,A
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   FB           MOV       R3,A
   \   00002A   02....       LJMP      ??bdb_AddRespondentNode_1 & 0xFFFF
   2940            }
   2941            else
   2942            {
   2943              // if pCmd is equal to NULL, don't look for duplucates
   2944              if( pCmd != NULL )
   \                     ??bdb_AddRespondentNode_0:
   \   00002D   E5..         MOV       A,?V4
   \   00002F   45..         ORL       A,?V5
   \   000031   7003         JNZ       $+5
   \   000033   02....       LJMP      ??bdb_AddRespondentNode_2 & 0xFFFF
   2945              {
   2946                //Find if any duplicate in the list
   2947                temp = *pHead;
   \   000036   8E82         MOV       DPL,R6
   \   000038   8F83         MOV       DPH,R7
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F8           MOV       R0,A
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   F9           MOV       R1,A
   \   00003F   88..         MOV       ?V0,R0
   \   000041   89..         MOV       ?V1,R1
   2948                
   2949                while(temp != NULL)
   \                     ??bdb_AddRespondentNode_3:
   \   000043   E5..         MOV       A,?V0
   \   000045   45..         ORL       A,?V1
   \   000047   7003         JNZ       $+5
   \   000049   02....       LJMP      ??bdb_AddRespondentNode_2 & 0xFFFF
   2950                {
   2951                  if((temp->data.endPoint == pCmd->srcAddr->endPoint) && (temp->data.panId == pCmd->srcAddr->panId))
   \   00004C   85..82       MOV       DPL,?V0
   \   00004F   85..83       MOV       DPH,?V1
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F9           MOV       R1,A
   \   00005D   85..82       MOV       DPL,?V4
   \   000060   85..83       MOV       DPH,?V5
   \   000063   E0           MOVX      A,@DPTR
   \   000064   F8           MOV       R0,A
   \   000065   A3           INC       DPTR
   \   000066   E0           MOVX      A,@DPTR
   \   000067   C8           XCH       A,R0
   \   000068   2409         ADD       A,#0x9
   \   00006A   F582         MOV       DPL,A
   \   00006C   C8           XCH       A,R0
   \   00006D   3400         ADDC      A,#0x0
   \   00006F   F583         MOV       DPH,A
   \   000071   E0           MOVX      A,@DPTR
   \   000072   69           XRL       A,R1
   \   000073   705B         JNZ       ??bdb_AddRespondentNode_4
   \   000075   85..82       MOV       DPL,?V0
   \   000078   85..83       MOV       DPH,?V1
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   E0           MOVX      A,@DPTR
   \   000086   FA           MOV       R2,A
   \   000087   A3           INC       DPTR
   \   000088   E0           MOVX      A,@DPTR
   \   000089   FB           MOV       R3,A
   \   00008A   85..82       MOV       DPL,?V4
   \   00008D   85..83       MOV       DPH,?V5
   \   000090   E0           MOVX      A,@DPTR
   \   000091   F8           MOV       R0,A
   \   000092   A3           INC       DPTR
   \   000093   E0           MOVX      A,@DPTR
   \   000094   C8           XCH       A,R0
   \   000095   240A         ADD       A,#0xa
   \   000097   F582         MOV       DPL,A
   \   000099   C8           XCH       A,R0
   \   00009A   3400         ADDC      A,#0x0
   \   00009C   F583         MOV       DPH,A
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   6A           XRL       A,R2
   \   0000A0   7003         JNZ       ??bdb_AddRespondentNode_5
   \   0000A2   A3           INC       DPTR
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   6B           XRL       A,R3
   \                     ??bdb_AddRespondentNode_5:
   \   0000A5   7029         JNZ       ??bdb_AddRespondentNode_4
   2952                  {
   2953                    //Duplicate
   2954                    if(temp->data.addr.shortAddr == pCmd->srcAddr->addr.shortAddr)
   \   0000A7   85..82       MOV       DPL,?V0
   \   0000AA   85..83       MOV       DPH,?V1
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   FA           MOV       R2,A
   \   0000AF   A3           INC       DPTR
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   FB           MOV       R3,A
   \   0000B2   85..82       MOV       DPL,?V4
   \   0000B5   85..83       MOV       DPH,?V5
   \   0000B8   E0           MOVX      A,@DPTR
   \   0000B9   F8           MOV       R0,A
   \   0000BA   A3           INC       DPTR
   \   0000BB   E0           MOVX      A,@DPTR
   \   0000BC   F583         MOV       DPH,A
   \   0000BE   8882         MOV       DPL,R0
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   6A           XRL       A,R2
   \   0000C2   7003         JNZ       ??bdb_AddRespondentNode_6
   \   0000C4   A3           INC       DPTR
   \   0000C5   E0           MOVX      A,@DPTR
   \   0000C6   6B           XRL       A,R3
   \                     ??bdb_AddRespondentNode_6:
   \   0000C7   7007         JNZ       ??bdb_AddRespondentNode_4
   2955                    {
   2956                      return NULL;
   \   0000C9   7A00         MOV       R2,#0x0
   \   0000CB   7B00         MOV       R3,#0x0
   \   0000CD   02....       LJMP      ??bdb_AddRespondentNode_1 & 0xFFFF
   2957                    }
   2958                  }
   2959                  temp = temp->pNext;
   \                     ??bdb_AddRespondentNode_4:
   \   0000D0   E5..         MOV       A,?V0
   \   0000D2   240F         ADD       A,#0xf
   \   0000D4   F582         MOV       DPL,A
   \   0000D6   E4           CLR       A
   \   0000D7   35..         ADDC      A,?V1
   \   0000D9   F583         MOV       DPH,A
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   F5..         MOV       ?V0,A
   \   0000DE   A3           INC       DPTR
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   F5..         MOV       ?V1,A
   \   0000E2   02....       LJMP      ??bdb_AddRespondentNode_3 & 0xFFFF
   2960                }
   2961              }
   2962              
   2963              pCurr = &((*pHead)->pNext);
   \                     ??bdb_AddRespondentNode_2:
   \   0000E5   8E82         MOV       DPL,R6
   \   0000E7   8F83         MOV       DPH,R7
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   240F         ADD       A,#0xf
   \   0000EC   F8           MOV       R0,A
   \   0000ED   A3           INC       DPTR
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   3400         ADDC      A,#0x0
   \   0000F1   F9           MOV       R1,A
   \   0000F2   88..         MOV       ?V2,R0
   \   0000F4   89..         MOV       ?V3,R1
   2964              
   2965              while ( *pCurr != NULL )
   \                     ??bdb_AddRespondentNode_7:
   \   0000F6   85..82       MOV       DPL,?V2
   \   0000F9   85..83       MOV       DPH,?V3
   \   0000FC   E0           MOVX      A,@DPTR
   \   0000FD   F8           MOV       R0,A
   \   0000FE   A3           INC       DPTR
   \   0000FF   E0           MOVX      A,@DPTR
   \   000100   F9           MOV       R1,A
   \   000101   E8           MOV       A,R0
   \   000102   49           ORL       A,R1
   \   000103   6013         JZ        ??bdb_AddRespondentNode_8
   2966              {
   2967                pCurr = &((*pCurr)->pNext);
   \   000105   85..82       MOV       DPL,?V2
   \   000108   85..83       MOV       DPH,?V3
   \   00010B   E0           MOVX      A,@DPTR
   \   00010C   240F         ADD       A,#0xf
   \   00010E   F5..         MOV       ?V2,A
   \   000110   A3           INC       DPTR
   \   000111   E0           MOVX      A,@DPTR
   \   000112   3400         ADDC      A,#0x0
   \   000114   F5..         MOV       ?V3,A
   \   000116   80DE         SJMP      ??bdb_AddRespondentNode_7
   2968              }
   2969          
   2970              *pCurr = ( bdbFindingBindingRespondent_t* )osal_mem_alloc( sizeof( bdbFindingBindingRespondent_t ) );
   \                     ??bdb_AddRespondentNode_8:
   \   000118                ; Setup parameters for call to function osal_mem_alloc
   \   000118   7A11         MOV       R2,#0x11
   \   00011A   7B00         MOV       R3,#0x0
   \   00011C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00011F   85..82       MOV       DPL,?V2
   \   000122   85..83       MOV       DPH,?V3
   \   000125   EA           MOV       A,R2
   \   000126   F0           MOVX      @DPTR,A
   \   000127   A3           INC       DPTR
   \   000128   EB           MOV       A,R3
   \   000129   F0           MOVX      @DPTR,A
   2971              
   2972              if(*pCurr == NULL)
   \   00012A   85..82       MOV       DPL,?V2
   \   00012D   85..83       MOV       DPH,?V3
   \   000130   E0           MOVX      A,@DPTR
   \   000131   F8           MOV       R0,A
   \   000132   A3           INC       DPTR
   \   000133   E0           MOVX      A,@DPTR
   \   000134   F9           MOV       R1,A
   \   000135   E8           MOV       A,R0
   \   000136   49           ORL       A,R1
   \   000137   7006         JNZ       ??bdb_AddRespondentNode_9
   2973              {
   2974                //No memory
   2975                return NULL;
   \   000139   7A00         MOV       R2,#0x0
   \   00013B   7B00         MOV       R3,#0x0
   \   00013D   8026         SJMP      ??bdb_AddRespondentNode_1
   2976              }
   2977              
   2978              (*pCurr)->pNext = NULL;
   \                     ??bdb_AddRespondentNode_9:
   \   00013F   85..82       MOV       DPL,?V2
   \   000142   85..83       MOV       DPH,?V3
   \   000145   E0           MOVX      A,@DPTR
   \   000146   F8           MOV       R0,A
   \   000147   A3           INC       DPTR
   \   000148   E0           MOVX      A,@DPTR
   \   000149   C8           XCH       A,R0
   \   00014A   240F         ADD       A,#0xf
   \   00014C   F582         MOV       DPL,A
   \   00014E   C8           XCH       A,R0
   \   00014F   3400         ADDC      A,#0x0
   \   000151   F583         MOV       DPH,A
   \   000153   7400         MOV       A,#0x0
   \   000155   F0           MOVX      @DPTR,A
   \   000156   A3           INC       DPTR
   \   000157   7400         MOV       A,#0x0
   \   000159   F0           MOVX      @DPTR,A
   2979            }
   2980            
   2981            return *pCurr;
   \   00015A   85..82       MOV       DPL,?V2
   \   00015D   85..83       MOV       DPH,?V3
   \   000160   E0           MOVX      A,@DPTR
   \   000161   FA           MOV       R2,A
   \   000162   A3           INC       DPTR
   \   000163   E0           MOVX      A,@DPTR
   \   000164   FB           MOV       R3,A
   \                     ??bdb_AddRespondentNode_1:
   \   000165   7F06         MOV       R7,#0x6
   \   000167   02....       LJMP      ?BANKED_LEAVE_XDATA
   2982          }
   2983          
   2984          /*********************************************************************
   2985           * @fn      bdb_zclRespondentListClean
   2986           *
   2987           * @brief   This function free reserved memory for respondent list
   2988           *
   2989           * @param   pHead - begin of the respondent list
   2990           *
   2991           * @return  status
   2992           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2993          void bdb_zclRespondentListClean( bdbFindingBindingRespondent_t **pHead )
   \                     bdb_zclRespondentListClean:
   2994          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2995            bdbFindingBindingRespondent_t **pCurr;
   2996            bdbFindingBindingRespondent_t **pNext;
   2997            
   2998            if ( *pHead == NULL )
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F8           MOV       R0,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F9           MOV       R1,A
   \   000012   E8           MOV       A,R0
   \   000013   49           ORL       A,R1
   \   000014   6056         JZ        ??bdb_zclRespondentListClean_0
   2999            {
   3000              return;
   3001            }
   3002            
   3003            pCurr = pHead;
   \   000016   8E..         MOV       ?V0,R6
   \   000018   8F..         MOV       ?V1,R7
   3004            
   3005            while( *pCurr != NULL )
   \                     ??bdb_zclRespondentListClean_1:
   \   00001A   85..82       MOV       DPL,?V0
   \   00001D   85..83       MOV       DPH,?V1
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F8           MOV       R0,A
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F9           MOV       R1,A
   \   000025   E8           MOV       A,R0
   \   000026   49           ORL       A,R1
   \   000027   6038         JZ        ??bdb_zclRespondentListClean_2
   3006            {
   3007              pNext = &((*pCurr)->pNext);
   \   000029   85..82       MOV       DPL,?V0
   \   00002C   85..83       MOV       DPH,?V1
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   240F         ADD       A,#0xf
   \   000032   F8           MOV       R0,A
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   3400         ADDC      A,#0x0
   \   000037   F9           MOV       R1,A
   \   000038   88..         MOV       ?V2,R0
   \   00003A   89..         MOV       ?V3,R1
   3008              osal_mem_free( *pCurr );
   \   00003C                ; Setup parameters for call to function osal_mem_free
   \   00003C   85..82       MOV       DPL,?V0
   \   00003F   85..83       MOV       DPH,?V1
   \   000042   E0           MOVX      A,@DPTR
   \   000043   FA           MOV       R2,A
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \   000046   FB           MOV       R3,A
   \   000047   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3009              *pCurr = ( bdbFindingBindingRespondent_t* )NULL;
   \   00004A   85..82       MOV       DPL,?V0
   \   00004D   85..83       MOV       DPH,?V1
   \   000050   7400         MOV       A,#0x0
   \   000052   F0           MOVX      @DPTR,A
   \   000053   A3           INC       DPTR
   \   000054   7400         MOV       A,#0x0
   \   000056   F0           MOVX      @DPTR,A
   3010              pCurr = pNext;
   \   000057   A8..         MOV       R0,?V2
   \   000059   A9..         MOV       R1,?V3
   \   00005B   88..         MOV       ?V0,R0
   \   00005D   89..         MOV       ?V1,R1
   \   00005F   80B9         SJMP      ??bdb_zclRespondentListClean_1
   3011            }
   3012            *pHead = NULL;
   \                     ??bdb_zclRespondentListClean_2:
   \   000061   8E82         MOV       DPL,R6
   \   000063   8F83         MOV       DPH,R7
   \   000065   7400         MOV       A,#0x0
   \   000067   F0           MOVX      @DPTR,A
   \   000068   A3           INC       DPTR
   \   000069   7400         MOV       A,#0x0
   \   00006B   F0           MOVX      @DPTR,A
   3013          }
   \                     ??bdb_zclRespondentListClean_0:
   \   00006C   7F04         MOV       R7,#0x4
   \   00006E   02....       LJMP      ?BANKED_LEAVE_XDATA
   3014          
   3015           /*********************************************************************
   3016           * PRIVATE FUNCTIONS
   3017           *********************************************************************/
   3018          
   3019          /*********************************************************************
   3020           * @fn      bdb_ProcessOSALMsg
   3021           *
   3022           * @brief   Process the incoming task message.
   3023           *
   3024           * @param   msgPtr - message to process
   3025           *
   3026           * @return  none
   3027           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3028          void bdb_ProcessOSALMsg( bdbInMsg_t *msgPtr )
   \                     bdb_ProcessOSALMsg:
   3029          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   3030            
   3031            switch(msgPtr->hdr.event)
   \   00000E   8E82         MOV       DPL,R6
   \   000010   8F83         MOV       DPH,R7
   \   000012   E0           MOVX      A,@DPTR
   \   000013   14           DEC       A
   \   000014   7003         JNZ       $+5
   \   000016   02....       LJMP      ??bdb_ProcessOSALMsg_0 & 0xFFFF
   \   000019   24FE         ADD       A,#-0x2
   \   00001B   6003         JZ        $+5
   \   00001D   02....       LJMP      ??bdb_ProcessOSALMsg_1 & 0xFFFF
   3032            {
   3033          #if (ZG_BUILD_JOINING_TYPE)
   3034              case BDB_COMMISSIONING_STATE_JOINING:
   3035                if(ZG_DEVICE_JOINING_TYPE)
   \   000020   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6401         XRL       A,#0x1
   \   000026   600B         JZ        ??bdb_ProcessOSALMsg_2
   \   000028   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   6402         XRL       A,#0x2
   \   00002E   6003         JZ        $+5
   \   000030   02....       LJMP      ??bdb_ProcessOSALMsg_1 & 0xFFFF
   3036                {
   3037                  switch(msgPtr->buf[0])
   \                     ??bdb_ProcessOSALMsg_2:
   \   000033   8E82         MOV       DPL,R6
   \   000035   8F83         MOV       DPH,R7
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   6006         JZ        ??bdb_ProcessOSALMsg_3
   \   00003C   14           DEC       A
   \   00003D   601A         JZ        ??bdb_ProcessOSALMsg_4
   \   00003F   02....       LJMP      ??bdb_ProcessOSALMsg_1 & 0xFFFF
   3038                  {
   3039                    case BDB_JOIN_EVENT_NWK_DISCOVERY:
   3040                      if(msgPtr->hdr.status == BDB_MSG_EVENT_SUCCESS)
   \                     ??bdb_ProcessOSALMsg_3:
   \   000042   8E82         MOV       DPL,R6
   \   000044   8F83         MOV       DPH,R7
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   7008         JNZ       ??bdb_ProcessOSALMsg_5
   3041                      {
   3042                        bdb_filterNwkDisc();
   \   00004A                ; Setup parameters for call to function bdb_filterNwkDisc
   \   00004A   12....       LCALL     `??bdb_filterNwkDisc::?relay`; Banked call to: bdb_filterNwkDisc
   3043                        bdb_tryNwkAssoc();
   \   00004D                ; Setup parameters for call to function bdb_tryNwkAssoc
   \   00004D   12....       LCALL     `??bdb_tryNwkAssoc::?relay`; Banked call to: bdb_tryNwkAssoc
   \   000050   8005         SJMP      ??bdb_ProcessOSALMsg_6
   3044                      }
   3045                      else
   3046                      {
   3047                        bdb_nwkDiscoveryAttempt(FALSE);
   \                     ??bdb_ProcessOSALMsg_5:
   \   000052                ; Setup parameters for call to function bdb_nwkDiscoveryAttempt
   \   000052   7900         MOV       R1,#0x0
   \   000054   12....       LCALL     `??bdb_nwkDiscoveryAttempt::?relay`; Banked call to: bdb_nwkDiscoveryAttempt
   3048                      }
   3049                    break;
   \                     ??bdb_ProcessOSALMsg_6:
   \   000057   8079         SJMP      ??bdb_ProcessOSALMsg_7
   3050                    
   3051                    case BDB_JOIN_EVENT_ASSOCIATION:
   3052                      if(msgPtr->hdr.status == BDB_MSG_EVENT_SUCCESS)
   \                     ??bdb_ProcessOSALMsg_4:
   \   000059   8E82         MOV       DPL,R6
   \   00005B   8F83         MOV       DPH,R7
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   7020         JNZ       ??bdb_ProcessOSALMsg_8
   3053                      {
   3054                        bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_WAITING_NWK_KEY;
   \   000061   90....       MOV       DPTR,#bdbCommissioningProcedureState + 2
   \   000064   7402         MOV       A,#0x2
   \   000066   F0           MOVX      @DPTR,A
   3055                        //Nwk key timeout get right timing
   3056                        osal_start_timerEx(bdb_TaskID,BDB_PROCESS_TIMEOUT, BDB_DEFAULT_DEVICE_UNAUTH_TIMEOUT);
   \   000067                ; Setup parameters for call to function osal_start_timerEx
   \   000067   90....       MOV       DPTR,#__Constant_bb8
   \   00006A   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00006D   7A00         MOV       R2,#0x0
   \   00006F   7B10         MOV       R3,#0x10
   \   000071   90....       MOV       DPTR,#bdb_TaskID
   \   000074   E0           MOVX      A,@DPTR
   \   000075   F9           MOV       R1,A
   \   000076   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000079   7404         MOV       A,#0x4
   \   00007B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007E   E9           MOV       A,R1
   \   00007F   8051         SJMP      ??bdb_ProcessOSALMsg_7
   3057                      }
   3058                      else
   3059                      {
   3060                        if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   3061                             (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??bdb_ProcessOSALMsg_8:
   \   000081                ; Setup parameters for call to function NLME_GetShortAddr
   \   000081   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000084   8A..         MOV       ?V0,R2
   \   000086   8B..         MOV       ?V1,R3
   \   000088   74FE         MOV       A,#-0x2
   \   00008A   65..         XRL       A,?V0
   \   00008C   7004         JNZ       ??bdb_ProcessOSALMsg_9
   \   00008E   74FF         MOV       A,#-0x1
   \   000090   65..         XRL       A,?V1
   \                     ??bdb_ProcessOSALMsg_9:
   \   000092   700E         JNZ       ??bdb_ProcessOSALMsg_10
   \   000094   90....       MOV       DPTR,#_NIB + 20
   \   000097   E0           MOVX      A,@DPTR
   \   000098   64FE         XRL       A,#0xfe
   \   00009A   7004         JNZ       ??bdb_ProcessOSALMsg_11
   \   00009C   A3           INC       DPTR
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   64FF         XRL       A,#0xff
   \                     ??bdb_ProcessOSALMsg_11:
   \   0000A0   6021         JZ        ??bdb_ProcessOSALMsg_12
   3062                        {
   3063                          uint16 addr = INVALID_NODE_ADDR;
   \                     ??bdb_ProcessOSALMsg_10:
   \   0000A2   85..82       MOV       DPL,?XSP + 0
   \   0000A5   85..83       MOV       DPH,?XSP + 1
   \   0000A8   74FE         MOV       A,#-0x2
   \   0000AA   F0           MOVX      @DPTR,A
   \   0000AB   A3           INC       DPTR
   \   0000AC   74FF         MOV       A,#-0x1
   \   0000AE   F0           MOVX      @DPTR,A
   3064                          // Invalidate nwk addr so end device does not use in its data reqs.
   3065                          _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   0000AF   90....       MOV       DPTR,#_NIB + 20
   \   0000B2   74FE         MOV       A,#-0x2
   \   0000B4   F0           MOVX      @DPTR,A
   \   0000B5   A3           INC       DPTR
   \   0000B6   74FF         MOV       A,#-0x1
   \   0000B8   F0           MOVX      @DPTR,A
   3066                          ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   \   0000B9                ; Setup parameters for call to function ZMacSetReq
   \   0000B9   AA..         MOV       R2,?XSP + 0
   \   0000BB   AB..         MOV       R3,?XSP + 1
   \   0000BD   7953         MOV       R1,#0x53
   \   0000BF   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   0000C2   E9           MOV       A,R1
   3067                        }
   3068          
   3069                        //Clear the neighbor Table and network discovery tables.
   3070                        nwkNeighborInitTable();
   \                     ??bdb_ProcessOSALMsg_12:
   \   0000C3                ; Setup parameters for call to function nwkNeighborInitTable
   \   0000C3   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   3071                        NLME_NwkDiscTerm();
   \   0000C6                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0000C6   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   3072                        _NIB.nwkState = NWK_INIT;
   \   0000C9   90....       MOV       DPTR,#_NIB + 35
   \   0000CC   7400         MOV       A,#0x0
   \   0000CE   F0           MOVX      @DPTR,A
   3073                        
   3074                        bdb_tryNwkAssoc();
   \   0000CF                ; Setup parameters for call to function bdb_tryNwkAssoc
   \   0000CF   12....       LCALL     `??bdb_tryNwkAssoc::?relay`; Banked call to: bdb_tryNwkAssoc
   3075                      }
   3076                    break;
   3077                  }
   3078                }
   3079              break;
   \                     ??bdb_ProcessOSALMsg_7:
   \   0000D2   8051         SJMP      ??bdb_ProcessOSALMsg_1
   3080              
   3081              case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
   3082                if(ZG_DEVICE_JOINING_TYPE)
   \                     ??bdb_ProcessOSALMsg_0:
   \   0000D4   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   6401         XRL       A,#0x1
   \   0000DA   6008         JZ        ??bdb_ProcessOSALMsg_13
   \   0000DC   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   6402         XRL       A,#0x2
   \   0000E2   7041         JNZ       ??bdb_ProcessOSALMsg_1
   3083                {
   3084                  if(msgPtr->hdr.status != BDB_MSG_EVENT_SUCCESS)
   \                     ??bdb_ProcessOSALMsg_13:
   \   0000E4   8E82         MOV       DPL,R6
   \   0000E6   8F83         MOV       DPH,R7
   \   0000E8   A3           INC       DPTR
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   601D         JZ        ??bdb_ProcessOSALMsg_14
   3085                  {
   3086                    bdbAttributes.bdbTCLinkKeyExchangeAttempts++;
   \   0000EC   90....       MOV       DPTR,#bdbAttributes + 16
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   2401         ADD       A,#0x1
   \   0000F2   F0           MOVX      @DPTR,A
   3087                    if(bdbAttributes.bdbTCLinkKeyExchangeAttempts > bdbAttributes.bdbTCLinkKeyExchangeAttemptsMax)
   \   0000F3   90....       MOV       DPTR,#bdbAttributes + 16
   \   0000F6   E0           MOVX      A,@DPTR
   \   0000F7   F8           MOV       R0,A
   \   0000F8   90....       MOV       DPTR,#bdbAttributes + 17
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   C3           CLR       C
   \   0000FD   98           SUBB      A,R0
   \   0000FE   5009         JNC       ??bdb_ProcessOSALMsg_14
   3088                    {
   3089                      //TCLK process fail due to many attempts fails
   3090                      bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, FALSE);
   \   000100                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000100   7A00         MOV       R2,#0x0
   \   000102   7901         MOV       R1,#0x1
   \   000104   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   3091                      return;
   \   000107   801C         SJMP      ??bdb_ProcessOSALMsg_1
   3092                    }
   3093                  }
   3094                  switch(bdbCommissioningProcedureState.bdbTCExchangeState)
   \                     ??bdb_ProcessOSALMsg_14:
   \   000109   90....       MOV       DPTR,#bdbCommissioningProcedureState + 1
   \   00010C   E0           MOVX      A,@DPTR
   \   00010D   14           DEC       A
   \   00010E   6008         JZ        ??bdb_ProcessOSALMsg_15
   \   000110   14           DEC       A
   \   000111   600A         JZ        ??bdb_ProcessOSALMsg_16
   \   000113   14           DEC       A
   \   000114   600C         JZ        ??bdb_ProcessOSALMsg_17
   \   000116   800D         SJMP      ??bdb_ProcessOSALMsg_1
   3095                  {
   3096                    case BDB_REQ_TC_STACK_VERSION:
   3097                      bdb_requestTCStackVersion();
   \                     ??bdb_ProcessOSALMsg_15:
   \   000118                ; Setup parameters for call to function bdb_requestTCStackVersion
   \   000118   12....       LCALL     `??bdb_requestTCStackVersion::?relay`; Banked call to: bdb_requestTCStackVersion
   3098                    break;
   \   00011B   8008         SJMP      ??bdb_ProcessOSALMsg_1
   3099                    case BDB_REQ_TC_LINK_KEY:
   3100                      bdb_requestTCLinkKey();
   \                     ??bdb_ProcessOSALMsg_16:
   \   00011D                ; Setup parameters for call to function bdb_requestTCLinkKey
   \   00011D   12....       LCALL     `??bdb_requestTCLinkKey::?relay`; Banked call to: bdb_requestTCLinkKey
   3101                    break;
   \   000120   8003         SJMP      ??bdb_ProcessOSALMsg_1
   3102                    case BDB_REQ_VERIFY_TC_LINK_KEY:
   3103                      bdb_requestVerifyTCLinkKey();
   \                     ??bdb_ProcessOSALMsg_17:
   \   000122                ; Setup parameters for call to function bdb_requestVerifyTCLinkKey
   \   000122   12....       LCALL     `??bdb_requestVerifyTCLinkKey::?relay`; Banked call to: bdb_requestVerifyTCLinkKey
   3104                    break;
   3105                  }
   3106                }
   3107             break;
   3108          #endif
   3109             }
   3110          }
   \                     ??bdb_ProcessOSALMsg_1:
   \   000125   7402         MOV       A,#0x2
   \   000127   12....       LCALL     ?DEALLOC_XSTACK8
   \   00012A   7F02         MOV       R7,#0x2
   \   00012C   02....       LJMP      ?BANKED_LEAVE_XDATA
   3111          
   3112          
   3113          /*********************************************************************
   3114           * @fn      bdb_processTimeout
   3115           *
   3116           * @brief   Handles timeout of the bdb process
   3117           *
   3118           * @param   msgPtr - message to process
   3119           *
   3120           * @return  none
   3121           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3122          void bdb_processTimeout(void)
   \                     bdb_processTimeout:
   3123          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3124          #if (ZG_BUILD_JOINING_TYPE)
   3125            if(ZG_DEVICE_JOINING_TYPE)
   \   000004   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   6008         JZ        ??bdb_processTimeout_0
   \   00000C   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   6402         XRL       A,#0x2
   \   000012   702C         JNZ       ??bdb_processTimeout_1
   3126            {
   3127              switch(bdbCommissioningProcedureState.bdbCommissioningState)
   \                     ??bdb_processTimeout_0:
   \   000014   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000017   E0           MOVX      A,@DPTR
   \   000018   14           DEC       A
   \   000019   6006         JZ        ??bdb_processTimeout_2
   \   00001B   24FE         ADD       A,#-0x2
   \   00001D   600E         JZ        ??bdb_processTimeout_3
   \   00001F   801F         SJMP      ??bdb_processTimeout_1
   3128              {
   3129                case BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE:
   3130                  
   3131                  bdb_tcLinkKeyExchangeAttempt(FALSE,bdbCommissioningProcedureState.bdbTCExchangeState);
   \                     ??bdb_processTimeout_2:
   \   000021                ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
   \   000021   90....       MOV       DPTR,#bdbCommissioningProcedureState + 1
   \   000024   E0           MOVX      A,@DPTR
   \   000025   FA           MOV       R2,A
   \   000026   7900         MOV       R1,#0x0
   \   000028   12....       LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
   3132                break;
   \   00002B   8013         SJMP      ??bdb_processTimeout_1
   3133                case BDB_COMMISSIONING_STATE_JOINING:
   3134                  if(bdbCommissioningProcedureState.bdbJoinState == BDB_JOIN_STATE_WAITING_NWK_KEY)
   \                     ??bdb_processTimeout_3:
   \   00002D   90....       MOV       DPTR,#bdbCommissioningProcedureState + 2
   \   000030   E0           MOVX      A,@DPTR
   \   000031   6402         XRL       A,#0x2
   \   000033   700B         JNZ       ??bdb_processTimeout_1
   3135                  {
   3136                    //If nwk key fails, then try association again
   3137                    bdbCommissioningProcedureState.bdbJoinState = BDB_JOIN_STATE_ASSOC;
   \   000035   90....       MOV       DPTR,#bdbCommissioningProcedureState + 2
   \   000038   7401         MOV       A,#0x1
   \   00003A   F0           MOVX      @DPTR,A
   3138                    bdb_nwkAssocAttemt(FALSE);
   \   00003B                ; Setup parameters for call to function bdb_nwkAssocAttemt
   \   00003B   7900         MOV       R1,#0x0
   \   00003D   12....       LCALL     `??bdb_nwkAssocAttemt::?relay`; Banked call to: bdb_nwkAssocAttemt
   3139                  }
   3140                break;
   3141              }
   3142            }
   3143          #endif
   3144            
   3145          }
   \                     ??bdb_processTimeout_1:
   \   000040   D083         POP       DPH
   \   000042   D082         POP       DPL
   \   000044   02....       LJMP      ?BRET
   3146          
   3147          
   3148          /*********************************************************************
   3149           * @fn      bdb_SendMsg
   3150           *
   3151           * @brief   Send messages to bdb processing with the expected format
   3152           *
   3153           * @param   msgPtr - message to process
   3154           *
   3155           * @return  none
   3156           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3157          void bdb_SendMsg(uint8 taskID, uint8 toCommissioningState,uint8 status, uint8 len, uint8 *buf)
   \                     bdb_SendMsg:
   3158          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V1,R1
   \   000007   8A..         MOV       ?V3,R2
   \   000009   8B..         MOV       ?V7,R3
   \   00000B   8C..         MOV       ?V2,R4
   \   00000D   7412         MOV       A,#0x12
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F5..         MOV       ?V8,A
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F5..         MOV       ?V9,A
   3159            bdbInMsg_t *msgPtr = NULL;
   \   000019   7E00         MOV       R6,#0x0
   \   00001B   7F00         MOV       R7,#0x0
   3160          
   3161            if ( (len > 0) && (buf != NULL) )
   \   00001D   E5..         MOV       A,?V2
   \   00001F   6066         JZ        ??bdb_SendMsg_0
   \   000021   E5..         MOV       A,?V8
   \   000023   45..         ORL       A,?V9
   \   000025   6060         JZ        ??bdb_SendMsg_0
   3162            {
   3163              uint8 tmpLength;
   3164              tmpLength = len;
   \   000027   85....       MOV       ?V0,?V2
   3165              tmpLength += sizeof(osal_event_hdr_t);
   \   00002A   7402         MOV       A,#0x2
   \   00002C   25..         ADD       A,?V0
   \   00002E   F5..         MOV       ?V0,A
   3166              
   3167              msgPtr = (bdbInMsg_t *)osal_msg_allocate( tmpLength );
   \   000030                ; Setup parameters for call to function osal_msg_allocate
   \   000030   E5..         MOV       A,?V0
   \   000032   FA           MOV       R2,A
   \   000033   7B00         MOV       R3,#0x0
   \   000035   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000038   8A..         MOV       ?V4,R2
   \   00003A   8B..         MOV       ?V5,R3
   \   00003C   AE..         MOV       R6,?V4
   \   00003E   AF..         MOV       R7,?V5
   3168              
   3169              if ( msgPtr )
   \   000040   EE           MOV       A,R6
   \   000041   4F           ORL       A,R7
   \   000042   6043         JZ        ??bdb_SendMsg_0
   3170              {
   3171                osal_memcpy( msgPtr->buf, buf, len );
   \   000044                ; Setup parameters for call to function osal_memcpy
   \   000044   85....       MOV       ?V4,?V8
   \   000047   85....       MOV       ?V5,?V9
   \   00004A   75..00       MOV       ?V6,#0x0
   \   00004D   78..         MOV       R0,#?V4
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000052   E5..         MOV       A,?V2
   \   000054   FC           MOV       R4,A
   \   000055   7D00         MOV       R5,#0x0
   \   000057   EE           MOV       A,R6
   \   000058   2402         ADD       A,#0x2
   \   00005A   FA           MOV       R2,A
   \   00005B   E4           CLR       A
   \   00005C   3F           ADDC      A,R7
   \   00005D   FB           MOV       R3,A
   \   00005E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000061   7403         MOV       A,#0x3
   \   000063   12....       LCALL     ?DEALLOC_XSTACK8
   3172              
   3173                msgPtr->hdr.event = toCommissioningState;
   \   000066   E5..         MOV       A,?V3
   \   000068   C0E0         PUSH      A
   \   00006A   8E82         MOV       DPL,R6
   \   00006C   8F83         MOV       DPH,R7
   \   00006E   D0E0         POP       A
   \   000070   F0           MOVX      @DPTR,A
   3174                msgPtr->hdr.status = status;
   \   000071   E5..         MOV       A,?V7
   \   000073   C0E0         PUSH      A
   \   000075   8E82         MOV       DPL,R6
   \   000077   8F83         MOV       DPH,R7
   \   000079   A3           INC       DPTR
   \   00007A   D0E0         POP       A
   \   00007C   F0           MOVX      @DPTR,A
   3175                osal_msg_send( taskID, (uint8 *)msgPtr );
   \   00007D                ; Setup parameters for call to function osal_msg_send
   \   00007D   EE           MOV       A,R6
   \   00007E   FA           MOV       R2,A
   \   00007F   EF           MOV       A,R7
   \   000080   FB           MOV       R3,A
   \   000081   A9..         MOV       R1,?V1
   \   000083   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000086   E9           MOV       A,R1
   3176              }
   3177            }
   3178          }
   \                     ??bdb_SendMsg_0:
   \   000087   7F0A         MOV       R7,#0xa
   \   000089   02....       LJMP      ?BANKED_LEAVE_XDATA
   3179          
   3180          
   3181          /*********************************************************************
   3182           * @fn      bdb_RegisterCommissioningStatusCB
   3183           *
   3184           * @brief   Register a callback in which the status of the procedures done in
   3185           *          BDB commissioning process will be reported
   3186           *
   3187           * @param   bdbGCB_CommissioningStatus - application callback
   3188           *
   3189           * @return  none
   3190           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3191          void bdb_RegisterCommissioningStatusCB(bdbGCB_CommissioningStatus_t bdbGCB_CommissioningStatus)
   \                     bdb_RegisterCommissioningStatusCB:
   3192          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3193            pfnCommissioningStatusCB = bdbGCB_CommissioningStatus;
   \   000004   90....       MOV       DPTR,#pfnCommissioningStatusCB
   \   000007   EA           MOV       A,R2
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   EB           MOV       A,R3
   \   00000B   F0           MOVX      @DPTR,A
   3194          }
   \   00000C   D083         POP       DPH
   \   00000E   D082         POP       DPL
   \   000010   02....       LJMP      ?BRET
   3195          
   3196          /*********************************************************************
   3197           * @fn      bdb_ClearNetworkParams
   3198           *
   3199           * @brief   Restore nwk parameters to invalid if the device is not on a network
   3200           *
   3201           * @param   void
   3202           *
   3203           * @return  void
   3204           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3205          void bdb_ClearNetworkParams(void)
   \                     bdb_ClearNetworkParams:
   3206          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3207          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
   3208            if ( bdbAttributes.bdbNodeIsOnANetwork == FALSE )
   \   000004   90....       MOV       DPTR,#bdbAttributes + 14
   \   000007   E0           MOVX      A,@DPTR
   \   000008   7032         JNZ       ??bdb_ClearNetworkParams_0
   3209            {
   3210              //Clear the event
   3211              _NIB.nwkPanId = INVALID_NODE_ADDR;
   \   00000A   90....       MOV       DPTR,#_NIB + 33
   \   00000D   74FE         MOV       A,#-0x2
   \   00000F   F0           MOVX      @DPTR,A
   \   000010   A3           INC       DPTR
   \   000011   74FF         MOV       A,#-0x1
   \   000013   F0           MOVX      @DPTR,A
   3212              _NIB.nwkLogicalChannel = 0;
   \   000014   90....       MOV       DPTR,#_NIB + 22
   \   000017   7400         MOV       A,#0x0
   \   000019   F0           MOVX      @DPTR,A
   3213              _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   00001A   90....       MOV       DPTR,#_NIB + 20
   \   00001D   74FE         MOV       A,#-0x2
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   A3           INC       DPTR
   \   000021   74FF         MOV       A,#-0x1
   \   000023   F0           MOVX      @DPTR,A
   3214              touchLink_SetMacNwkParams( _NIB.nwkDevAddress, _NIB.nwkPanId, _NIB.nwkLogicalChannel );
   \   000024                ; Setup parameters for call to function touchLink_SetMacNwkParams
   \   000024   90....       MOV       DPTR,#_NIB + 22
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F9           MOV       R1,A
   \   000029   90....       MOV       DPTR,#_NIB + 33
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   FC           MOV       R4,A
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   FD           MOV       R5,A
   \   000031   90....       MOV       DPTR,#_NIB + 20
   \   000034   E0           MOVX      A,@DPTR
   \   000035   FA           MOV       R2,A
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   FB           MOV       R3,A
   \   000039   12....       LCALL     `??touchLink_SetMacNwkParams::?relay`; Banked call to: touchLink_SetMacNwkParams
   3215            }
   3216          #endif
   3217          }
   \                     ??bdb_ClearNetworkParams_0:
   \   00003C   D083         POP       DPH
   \   00003E   D082         POP       DPL
   \   000040   02....       LJMP      ?BRET
   3218          
   3219          /*********************************************************************
   3220           * @fn      bdb_getZCLFrameCounter
   3221           *
   3222           * @brief   Get the next ZCL Frame Counter for packet sequence number
   3223           *
   3224           * @param   none
   3225           *
   3226           * @return  next ZCL frame counter
   3227           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3228          uint8 bdb_getZCLFrameCounter(void)
   \                     bdb_getZCLFrameCounter:
   3229          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3230            bdb_ZclTransactionSequenceNumber++;
   \   000004   90....       MOV       DPTR,#bdb_ZclTransactionSequenceNumber
   \   000007   E0           MOVX      A,@DPTR
   \   000008   2401         ADD       A,#0x1
   \   00000A   F0           MOVX      @DPTR,A
   3231            return bdb_ZclTransactionSequenceNumber;
   \   00000B   90....       MOV       DPTR,#bdb_ZclTransactionSequenceNumber
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F9           MOV       R1,A
   \   000010   D083         POP       DPH
   \   000012   D082         POP       DPL
   \   000014   02....       LJMP      ?BRET
   3232          
   3233          }
   3234          
   3235          
   3236          #if (ZG_BUILD_JOINING_TYPE)
   3237          /*********************************************************************
   3238           * @fn      bdb_RegisterCBKETCLinkKeyExchangeCB
   3239           *
   3240           * @brief   Register a callback in which the TC link key exchange procedure will 
   3241           *          be performed by application.
   3242           *          Upon fail or success bdb must be notified, see bdb_CBKETCLinkKeyExchangeAttempt
   3243           *
   3244           * @param   bdbGCB_TCLinkKeyExchangeMethod - application callback
   3245           *
   3246           * @return  none
   3247           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3248          void bdb_RegisterCBKETCLinkKeyExchangeCB(bdbGCB_CBKETCLinkKeyExchange_t bdbGCB_CBKETCLinkKeyExchange)
   \                     bdb_RegisterCBKETCLinkKeyExchangeCB:
   3249          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3250            if(bdbGCB_CBKETCLinkKeyExchange)
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   6010         JZ        ??bdb_RegisterCBKETCLinkKeyExchangeCB_0
   3251            {
   3252              pfnCBKETCLinkKeyExchange = bdbGCB_CBKETCLinkKeyExchange;
   \   000008   90....       MOV       DPTR,#pfnCBKETCLinkKeyExchange
   \   00000B   EA           MOV       A,R2
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   A3           INC       DPTR
   \   00000E   EB           MOV       A,R3
   \   00000F   F0           MOVX      @DPTR,A
   3253              bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_CBKE;
   \   000010   90....       MOV       DPTR,#bdbAttributes + 18
   \   000013   7401         MOV       A,#0x1
   \   000015   F0           MOVX      @DPTR,A
   \   000016   8010         SJMP      ??bdb_RegisterCBKETCLinkKeyExchangeCB_1
   3254            }
   3255            else
   3256            {
   3257              pfnCBKETCLinkKeyExchange = NULL;
   \                     ??bdb_RegisterCBKETCLinkKeyExchangeCB_0:
   \   000018   90....       MOV       DPTR,#pfnCBKETCLinkKeyExchange
   \   00001B   7400         MOV       A,#0x0
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   A3           INC       DPTR
   \   00001F   7400         MOV       A,#0x0
   \   000021   F0           MOVX      @DPTR,A
   3258              bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_APS_KEY;
   \   000022   90....       MOV       DPTR,#bdbAttributes + 18
   \   000025   7400         MOV       A,#0x0
   \   000027   F0           MOVX      @DPTR,A
   3259            }
   3260          }
   \                     ??bdb_RegisterCBKETCLinkKeyExchangeCB_1:
   \   000028   D083         POP       DPH
   \   00002A   D082         POP       DPL
   \   00002C   02....       LJMP      ?BRET
   3261          
   3262          /*********************************************************************
   3263           * @fn      bdb_RegisterForFilterNwkDescCB
   3264           *
   3265           * @brief   Register a callback in which the application gets the list of network
   3266           *          descriptors got from active scan.
   3267           *          Use bdb_nwkDescFree to release the network descriptors that are not 
   3268           *          of interest and leave those which are to be attempted.
   3269           *
   3270           * @param   bdbGCB_FilterNwkDesc - application callback
   3271           *
   3272           * @return  none
   3273           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3274          void bdb_RegisterForFilterNwkDescCB(bdbGCB_FilterNwkDesc_t bdbGCB_FilterNwkDesc)
   \                     bdb_RegisterForFilterNwkDescCB:
   3275          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3276            if(bdbGCB_FilterNwkDesc)
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   6008         JZ        ??bdb_RegisterForFilterNwkDescCB_0
   3277            {
   3278              pfnFilterNwkDesc = bdbGCB_FilterNwkDesc;
   \   000008   90....       MOV       DPTR,#pfnFilterNwkDesc
   \   00000B   EA           MOV       A,R2
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   A3           INC       DPTR
   \   00000E   EB           MOV       A,R3
   \   00000F   F0           MOVX      @DPTR,A
   3279            }
   3280          }
   \                     ??bdb_RegisterForFilterNwkDescCB_0:
   \   000010   D083         POP       DPH
   \   000012   D082         POP       DPL
   \   000014   02....       LJMP      ?BRET
   3281          
   3282          
   3283          /*********************************************************************
   3284           * @fn          bdb_CBKETCLinkKeyExchangeAttempt
   3285           *
   3286           * @brief       Tell BDB module the result of the TC link key exchange, to try
   3287           *              the default process or to keep going with the joining process.
   3288           *
   3289           * @param       didSuccess - TRUE if the process was succes, False otherwise
   3290           *
   3291           * @return      unprocessed events
   3292           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3293          void bdb_CBKETCLinkKeyExchangeAttempt(bool didSuccess)
   \                     bdb_CBKETCLinkKeyExchangeAttempt:
   3294          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3295            if(didSuccess)
   \   000007   EE           MOV       A,R6
   \   000008   600E         JZ        ??bdb_CBKETCLinkKeyExchangeAttempt_0
   3296            {
   3297              bdb_setNodeJoinLinkKeyType(BDB_DEFAULT_GLOBAL_TRUST_CENTER_LINK_KEY);
   \   00000A                ; Setup parameters for call to function bdb_setNodeJoinLinkKeyType
   \   00000A   7900         MOV       R1,#0x0
   \   00000C   12....       LCALL     `??bdb_setNodeJoinLinkKeyType::?relay`; Banked call to: bdb_setNodeJoinLinkKeyType
   3298              bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_TC_LINK_KEY_EXCHANGE, TRUE);
   \   00000F                ; Setup parameters for call to function bdb_reportCommissioningState
   \   00000F   7A01         MOV       R2,#0x1
   \   000011   7901         MOV       R1,#0x1
   \   000013   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   \   000016   8014         SJMP      ??bdb_CBKETCLinkKeyExchangeAttempt_1
   3299            }
   3300            else
   3301            {
   3302              bdbAttributes.bdbTCLinkKeyExchangeMethod = BDB_TC_LINK_KEY_EXCHANGE_APS_KEY;
   \                     ??bdb_CBKETCLinkKeyExchangeAttempt_0:
   \   000018   90....       MOV       DPTR,#bdbAttributes + 18
   \   00001B   7400         MOV       A,#0x0
   \   00001D   F0           MOVX      @DPTR,A
   3303              //We are going back one state to try it again
   3304              bdbCommissioningProcedureState.bdbTCExchangeState -= BDB_TC_EXCHANGE_NEXT_STATE;
   \   00001E   90....       MOV       DPTR,#bdbCommissioningProcedureState + 1
   \   000021   E0           MOVX      A,@DPTR
   \   000022   24FF         ADD       A,#-0x1
   \   000024   F0           MOVX      @DPTR,A
   3305              bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_TC_STACK_VERSION);
   \   000025                ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
   \   000025   7A01         MOV       R2,#0x1
   \   000027   7901         MOV       R1,#0x1
   \   000029   12....       LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
   3306            }
   3307          
   3308          }
   \                     ??bdb_CBKETCLinkKeyExchangeAttempt_1:
   \   00002C   7F01         MOV       R7,#0x1
   \   00002E   02....       LJMP      ?BANKED_LEAVE_XDATA
   3309          #endif
   3310          
   3311          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
   3312          
   3313          /*********************************************************************
   3314           * @fn      gp_ChangeChannelReq
   3315           *
   3316           * @brief   Callback function to notify the BDB about a GP commissioning 
   3317           * request that will change the current channel for at most 
   3318           * gpBirectionalCommissioningChangeChannelTimeout ms
   3319           *
   3320           * @param   channel - Channel in which the commissioning will take place
   3321           *
   3322           * @return  TRUE to allow change channel, FALSE to do not allow
   3323           */
   3324          static uint8 gp_ChangeChannelReq(void)
   3325          {
   3326            uint8 allowChangeChannel = TRUE;
   3327            
   3328            //Do not allow changes of channel if any process is in place
   3329            if(bdbAttributes.bdbCommissioningMode)
   3330            {
   3331              allowChangeChannel = FALSE;
   3332            }
   3333            
   3334            //Check application state to decide if allow change channel or not
   3335            
   3336            return allowChangeChannel;
   3337          }
   3338          
   3339          
   3340          /*********************************************************************
   3341           * @fn          gp_CBInit
   3342           *
   3343           * @brief       Register the callbacks for GP endpoint
   3344           *
   3345           * @param       none
   3346           *
   3347           * @return      none
   3348           */
   3349          void gp_CBInit(void)
   3350          {
   3351            GP_DataCnfGCB = GP_DataCnf;
   3352            GP_endpointInitGCB = gp_endpointInit;  
   3353            GP_expireDuplicateFilteringGCB = gp_expireDuplicateFiltering;
   3354            GP_stopCommissioningModeGCB = gp_stopCommissioningMode;
   3355            GP_returnOperationalChannelGCB = gp_returnOperationalChannel;
   3356            GP_DataIndGCB = GP_DataInd;
   3357            GP_SecReqGCB = GP_SecReq;   
   3358            GP_CheckAnnouncedDeviceGCB = gp_CheckAnnouncedDevice;
   3359              
   3360            GP_aliasConflictAnnce = &aliasConflictAnnce;
   3361            
   3362            GP_endpointInitGCB();
   3363          }
   3364          
   3365          #endif
   3366          
   3367          /*********************************************************************
   3368          *********************************************************************/
   3369          
   3370          
   3371          /******************************************************************************
   3372           * @fn          bdb_GenerateInstallCodeCRC
   3373           *
   3374           * @brief       Creates a CRC for the install code passed.
   3375           *
   3376           * @param       installCode - install code from which CRC will be generated
   3377           *
   3378           * @return      CRC
   3379           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3380          uint16 bdb_GenerateInstallCodeCRC(uint8 *installCode)
   \                     bdb_GenerateInstallCodeCRC:
   3381          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   3382            uint16 CRC;
   3383            
   3384            bdb_calculateCCITT_CRC(installCode, INSTALL_CODE_LEN, &CRC);
   \   00000E                ; Setup parameters for call to function bdb_calculateCCITT_CRC
   \   00000E   90....       MOV       DPTR,#__Constant_10
   \   000011   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000014   7404         MOV       A,#0x4
   \   000016   12....       LCALL     ?XSTACK_DISP102_8
   \   000019   EE           MOV       A,R6
   \   00001A   FA           MOV       R2,A
   \   00001B   EF           MOV       A,R7
   \   00001C   FB           MOV       R3,A
   \   00001D   12....       LCALL     `??bdb_calculateCCITT_CRC::?relay`; Banked call to: bdb_calculateCCITT_CRC
   \   000020   7404         MOV       A,#0x4
   \   000022   12....       LCALL     ?DEALLOC_XSTACK8
   3385          
   3386            return CRC;
   \   000025   85..82       MOV       DPL,?XSP + 0
   \   000028   85..83       MOV       DPH,?XSP + 1
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   FA           MOV       R2,A
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   FB           MOV       R3,A
   \   000030   7402         MOV       A,#0x2
   \   000032   12....       LCALL     ?DEALLOC_XSTACK8
   \   000035   7F01         MOV       R7,#0x1
   \   000037   02....       LJMP      ?BANKED_LEAVE_XDATA
   3387          }
   3388          
   3389          /******************************************************************************
   3390           * @fn          bdb_calculateCCITT_CRC
   3391           *
   3392           * @brief       Creates a CRC for the install code passed.
   3393           *
   3394           * @param       Mb - install code from which CRC will be generated
   3395           * @param       msglen - install code length
   3396           * @param       crc - 
   3397           *
   3398           * @return      none
   3399           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3400          void bdb_calculateCCITT_CRC (uint8 *Mb, uint32 msglen, uint16 *crc)
   \                     bdb_calculateCCITT_CRC:
   3401          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
   \   000012   7414         MOV       A,#0x14
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   78..         MOV       R0,#?V4
   \   000019   12....       LCALL     ?L_MOV_X
   3402            uint16 crcinit_direct; 
   3403            uint16 crcinit_nondirect;
   3404            bdb_crcInit(crc, &crcinit_direct, &crcinit_nondirect);
   \   00001C                ; Setup parameters for call to function bdb_crcInit
   \   00001C   A8..         MOV       R0,?XSP + 0
   \   00001E   A9..         MOV       R1,?XSP + 1
   \   000020   88..         MOV       ?V2,R0
   \   000022   89..         MOV       ?V3,R1
   \   000024   78..         MOV       R0,#?V2
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000029   7404         MOV       A,#0x4
   \   00002B   12....       LCALL     ?XSTACK_DISP102_8
   \   00002E   AA..         MOV       R2,?V0
   \   000030   AB..         MOV       R3,?V1
   \   000032   12....       LCALL     `??bdb_crcInit::?relay`; Banked call to: bdb_crcInit
   \   000035   7402         MOV       A,#0x2
   \   000037   12....       LCALL     ?DEALLOC_XSTACK8
   3405            *crc = bdb_crcBitByBitFast(Mb, msglen, crcinit_direct, crcinit_nondirect);
   \   00003A                ; Setup parameters for call to function bdb_crcBitByBitFast
   \   00003A   85..82       MOV       DPL,?XSP + 0
   \   00003D   85..83       MOV       DPH,?XSP + 1
   \   000040   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000043   78..         MOV       R0,#?V4
   \   000045   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000048   7408         MOV       A,#0x8
   \   00004A   12....       LCALL     ?XSTACK_DISP0_8
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   FC           MOV       R4,A
   \   00004F   A3           INC       DPTR
   \   000050   E0           MOVX      A,@DPTR
   \   000051   FD           MOV       R5,A
   \   000052   EE           MOV       A,R6
   \   000053   FA           MOV       R2,A
   \   000054   EF           MOV       A,R7
   \   000055   FB           MOV       R3,A
   \   000056   12....       LCALL     `??bdb_crcBitByBitFast::?relay`; Banked call to: bdb_crcBitByBitFast
   \   000059   7406         MOV       A,#0x6
   \   00005B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005E   85..82       MOV       DPL,?V0
   \   000061   85..83       MOV       DPH,?V1
   \   000064   EA           MOV       A,R2
   \   000065   F0           MOVX      @DPTR,A
   \   000066   A3           INC       DPTR
   \   000067   EB           MOV       A,R3
   \   000068   F0           MOVX      @DPTR,A
   3406          }
   \   000069   7404         MOV       A,#0x4
   \   00006B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006E   7F08         MOV       R7,#0x8
   \   000070   02....       LJMP      ?BANKED_LEAVE_XDATA
   3407          
   3408          
   3409          /******************************************************************************
   3410           * @fn          bdb_crcInit
   3411           *
   3412           * @brief       Initialize CRC calculation
   3413           *
   3414           * @param       crc - 
   3415           * @param       crcinit_direct -
   3416           * @param       crcinit_nondirect - 
   3417           *
   3418           * @return      none
   3419           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3420          void bdb_crcInit(uint16 *crc, uint16 *crcinit_direct, uint16 *crcinit_nondirect)
   \                     bdb_crcInit:
   3421          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV       A,#-0xd
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   740D         MOV       A,#0xd
   \   000007   12....       LCALL     ?XSTACK_DISP0_8
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F8           MOV       R0,A
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F9           MOV       R1,A
   3422          
   3423            uint16 i;
   3424            uint16 bit;
   3425          
   3426            *crcinit_direct = CRC_INIT;
   \   00000F   8C82         MOV       DPL,R4
   \   000011   8D83         MOV       DPH,R5
   \   000013   74FF         MOV       A,#-0x1
   \   000015   F0           MOVX      @DPTR,A
   \   000016   A3           INC       DPTR
   \   000017   74FF         MOV       A,#-0x1
   \   000019   F0           MOVX      @DPTR,A
   3427            *crc = CRC_INIT;
   \   00001A   8A82         MOV       DPL,R2
   \   00001C   8B83         MOV       DPH,R3
   \   00001E   74FF         MOV       A,#-0x1
   \   000020   F0           MOVX      @DPTR,A
   \   000021   A3           INC       DPTR
   \   000022   74FF         MOV       A,#-0x1
   \   000024   F0           MOVX      @DPTR,A
   3428            for (i=0; i<CRC_ORDER; i++) 
   \   000025   75..00       MOV       ?V0,#0x0
   \   000028   75..00       MOV       ?V1,#0x0
   \                     ??bdb_crcInit_0:
   \   00002B   C3           CLR       C
   \   00002C   E5..         MOV       A,?V0
   \   00002E   9410         SUBB      A,#0x10
   \   000030   E5..         MOV       A,?V1
   \   000032   9400         SUBB      A,#0x0
   \   000034   505A         JNC       ??bdb_crcInit_1
   3429            {
   3430              bit = *crc & 1;
   \   000036   8A82         MOV       DPL,R2
   \   000038   8B83         MOV       DPH,R3
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   5401         ANL       A,#0x1
   \   00003D   FE           MOV       R6,A
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   5400         ANL       A,#0x0
   \   000042   FF           MOV       R7,A
   \   000043   8E..         MOV       ?V2,R6
   \   000045   8F..         MOV       ?V3,R7
   3431              if (bit) *crc^= CRC_POLYNOM;
   \   000047   E5..         MOV       A,?V2
   \   000049   45..         ORL       A,?V3
   \   00004B   600D         JZ        ??bdb_crcInit_2
   \   00004D   8A82         MOV       DPL,R2
   \   00004F   8B83         MOV       DPH,R3
   \   000051   E0           MOVX      A,@DPTR
   \   000052   6421         XRL       A,#0x21
   \   000054   F0           MOVX      @DPTR,A
   \   000055   A3           INC       DPTR
   \   000056   E0           MOVX      A,@DPTR
   \   000057   6410         XRL       A,#0x10
   \   000059   F0           MOVX      @DPTR,A
   3432              *crc >>= 1;
   \                     ??bdb_crcInit_2:
   \   00005A   8A82         MOV       DPL,R2
   \   00005C   8B83         MOV       DPH,R3
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   FE           MOV       R6,A
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   FF           MOV       R7,A
   \   000063   EF           MOV       A,R7
   \   000064   C3           CLR       C
   \   000065   13           RRC       A
   \   000066   FF           MOV       R7,A
   \   000067   EE           MOV       A,R6
   \   000068   13           RRC       A
   \   000069   FE           MOV       R6,A
   \   00006A   8A82         MOV       DPL,R2
   \   00006C   8B83         MOV       DPH,R3
   \   00006E   EE           MOV       A,R6
   \   00006F   F0           MOVX      @DPTR,A
   \   000070   A3           INC       DPTR
   \   000071   EF           MOV       A,R7
   \   000072   F0           MOVX      @DPTR,A
   3433              if (bit) *crc|= CRC_HIGHBIT;
   \   000073   E5..         MOV       A,?V2
   \   000075   45..         ORL       A,?V3
   \   000077   600D         JZ        ??bdb_crcInit_3
   \   000079   8A82         MOV       DPL,R2
   \   00007B   8B83         MOV       DPH,R3
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   4400         ORL       A,#0x0
   \   000080   F0           MOVX      @DPTR,A
   \   000081   A3           INC       DPTR
   \   000082   E0           MOVX      A,@DPTR
   \   000083   4480         ORL       A,#0x80
   \   000085   F0           MOVX      @DPTR,A
   3434            }	
   \                     ??bdb_crcInit_3:
   \   000086   05..         INC       ?V0
   \   000088   E5..         MOV       A,?V0
   \   00008A   709F         JNZ       ??bdb_crcInit_0
   \   00008C   05..         INC       ?V1
   \   00008E   809B         SJMP      ??bdb_crcInit_0
   3435            *crcinit_nondirect = *crc;
   \                     ??bdb_crcInit_1:
   \   000090   8A82         MOV       DPL,R2
   \   000092   8B83         MOV       DPH,R3
   \   000094   E0           MOVX      A,@DPTR
   \   000095   FE           MOV       R6,A
   \   000096   A3           INC       DPTR
   \   000097   E0           MOVX      A,@DPTR
   \   000098   FF           MOV       R7,A
   \   000099   8882         MOV       DPL,R0
   \   00009B   8983         MOV       DPH,R1
   \   00009D   EE           MOV       A,R6
   \   00009E   F0           MOVX      @DPTR,A
   \   00009F   A3           INC       DPTR
   \   0000A0   EF           MOV       A,R7
   \   0000A1   F0           MOVX      @DPTR,A
   3436          
   3437          }
   \   0000A2   7F05         MOV       R7,#0x5
   \   0000A4   02....       LJMP      ?BANKED_LEAVE_XDATA
   3438          
   3439          
   3440          /******************************************************************************
   3441           * @fn          bdb_crcReflect
   3442           *
   3443           * @brief       
   3444           *
   3445           * @param       crc - 
   3446           * @param       bitnum -
   3447           *
   3448           * @return      none
   3449           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3450          uint16 bdb_crcReflect (uint16 crc, uint16 bitnum)
   \                     bdb_crcReflect:
   3451          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   3452          
   3453            // reflects the lower 'bitnum' bits of 'crc'
   3454          
   3455            uint16 i, j=1, crcout=0;
   \   000009   75..01       MOV       ?V0,#0x1
   \   00000C   75..00       MOV       ?V1,#0x0
   \   00000F   7A00         MOV       R2,#0x0
   \   000011   7B00         MOV       R3,#0x0
   3456          
   3457            for (i=(uint16)1<<(bitnum-1); i; i>>=1) {
   \   000013   75..01       MOV       ?V4,#0x1
   \   000016   75..00       MOV       ?V5,#0x0
   \   000019   EC           MOV       A,R4
   \   00001A   24FF         ADD       A,#-0x1
   \   00001C   78..         MOV       R0,#?V4
   \   00001E   12....       LCALL     ?S_SHL
   \   000021   AE..         MOV       R6,?V4
   \   000023   AF..         MOV       R7,?V5
   \                     ??bdb_crcReflect_0:
   \   000025   EE           MOV       A,R6
   \   000026   4F           ORL       A,R7
   \   000027   6028         JZ        ??bdb_crcReflect_1
   3458              if (crc & i) crcout|=j;
   \   000029   E5..         MOV       A,?V2
   \   00002B   5E           ANL       A,R6
   \   00002C   F8           MOV       R0,A
   \   00002D   E5..         MOV       A,?V3
   \   00002F   5F           ANL       A,R7
   \   000030   F9           MOV       R1,A
   \   000031   E8           MOV       A,R0
   \   000032   49           ORL       A,R1
   \   000033   6008         JZ        ??bdb_crcReflect_2
   \   000035   E5..         MOV       A,?V0
   \   000037   4A           ORL       A,R2
   \   000038   FA           MOV       R2,A
   \   000039   E5..         MOV       A,?V1
   \   00003B   4B           ORL       A,R3
   \   00003C   FB           MOV       R3,A
   3459              j<<= 1;
   \                     ??bdb_crcReflect_2:
   \   00003D   E5..         MOV       A,?V0
   \   00003F   25..         ADD       A,?V0
   \   000041   F5..         MOV       ?V0,A
   \   000043   E5..         MOV       A,?V1
   \   000045   33           RLC       A
   \   000046   F5..         MOV       ?V1,A
   3460            }
   \   000048   EF           MOV       A,R7
   \   000049   C3           CLR       C
   \   00004A   13           RRC       A
   \   00004B   FF           MOV       R7,A
   \   00004C   EE           MOV       A,R6
   \   00004D   13           RRC       A
   \   00004E   FE           MOV       R6,A
   \   00004F   80D4         SJMP      ??bdb_crcReflect_0
   3461            return (crcout);
   \                     ??bdb_crcReflect_1:
   \   000051   7F06         MOV       R7,#0x6
   \   000053   02....       LJMP      ?BANKED_LEAVE_XDATA
   3462          }
   3463          
   3464          
   3465          /******************************************************************************
   3466           * @fn          bdb_crcBitByBitFast
   3467           *
   3468           * @brief       
   3469           *
   3470           * @param       p - 
   3471           * @param       len -
   3472           * @param       crcinit_direct - 
   3473           * @param       crcinit_nondirect -
   3474           *
   3475           * @return      crc
   3476           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3477          uint16 bdb_crcBitByBitFast(uint8 * p, uint32 len, uint16 crcinit_direct, uint16 crcinit_nondirect) 
   \                     bdb_crcBitByBitFast:
   3478          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EC           MOV       A,R4
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   ED           MOV       A,R5
   \   000013   F0           MOVX      @DPTR,A
   \   000014   8A..         MOV       ?V14,R2
   \   000016   8B..         MOV       ?V15,R3
   \   000018   741C         MOV       A,#0x1c
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   78..         MOV       R0,#?V8
   \   00001F   12....       LCALL     ?L_MOV_X
   3479            // fast bit by bit algorithm without augmented zero bytes.
   3480            // does not use lookup table, suited for polynom orders between 1...32.
   3481          
   3482            uint16 i, j, c, bit;
   3483            uint16 crc = crcinit_direct;
   \   000022   7402         MOV       A,#0x2
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   E0           MOVX      A,@DPTR
   \   000028   FE           MOV       R6,A
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   FF           MOV       R7,A
   3484          
   3485            for (i=0; i<len; i++) {
   \   00002C   75..00       MOV       ?V2,#0x0
   \   00002F   75..00       MOV       ?V3,#0x0
   \                     ??bdb_crcBitByBitFast_0:
   \   000032   85....       MOV       ?V4,?V2
   \   000035   85....       MOV       ?V5,?V3
   \   000038   E4           CLR       A
   \   000039   F5..         MOV       ?V6,A
   \   00003B   F5..         MOV       ?V7,A
   \   00003D   78..         MOV       R0,#?V8
   \   00003F   79..         MOV       R1,#?V4
   \   000041   12....       LCALL     ?UL_GT
   \   000044   4003         JC        $+5
   \   000046   02....       LJMP      ??bdb_crcBitByBitFast_1 & 0xFFFF
   3486          
   3487              c = (uint16)*p++;
   \   000049   85..82       MOV       DPL,?V14
   \   00004C   85..83       MOV       DPH,?V15
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   F8           MOV       R0,A
   \   000051   7900         MOV       R1,#0x0
   \   000053   88..         MOV       ?V12,R0
   \   000055   89..         MOV       ?V13,R1
   \   000057   85..82       MOV       DPL,?V14
   \   00005A   85..83       MOV       DPH,?V15
   \   00005D   A3           INC       DPTR
   \   00005E   8582..       MOV       ?V14,DPL
   \   000061   8583..       MOV       ?V15,DPH
   3488              c = bdb_crcReflect(c, 8);
   \   000064                ; Setup parameters for call to function bdb_crcReflect
   \   000064   7C08         MOV       R4,#0x8
   \   000066   7D00         MOV       R5,#0x0
   \   000068   AA..         MOV       R2,?V12
   \   00006A   AB..         MOV       R3,?V13
   \   00006C   12....       LCALL     `??bdb_crcReflect::?relay`; Banked call to: bdb_crcReflect
   \   00006F   8A..         MOV       ?V4,R2
   \   000071   8B..         MOV       ?V5,R3
   \   000073   85....       MOV       ?V12,?V4
   \   000076   85....       MOV       ?V13,?V5
   3489          
   3490              for (j=0x80; j; j>>=1) {
   \   000079   75..80       MOV       ?V0,#-0x80
   \   00007C   75..00       MOV       ?V1,#0x0
   \                     ??bdb_crcBitByBitFast_2:
   \   00007F   E5..         MOV       A,?V0
   \   000081   45..         ORL       A,?V1
   \   000083   605A         JZ        ??bdb_crcBitByBitFast_3
   3491          
   3492                bit = crc & CRC_HIGHBIT;
   \   000085   EE           MOV       A,R6
   \   000086   5400         ANL       A,#0x0
   \   000088   F8           MOV       R0,A
   \   000089   EF           MOV       A,R7
   \   00008A   5480         ANL       A,#0x80
   \   00008C   F9           MOV       R1,A
   \   00008D   85..82       MOV       DPL,?XSP + 0
   \   000090   85..83       MOV       DPH,?XSP + 1
   \   000093   E8           MOV       A,R0
   \   000094   F0           MOVX      @DPTR,A
   \   000095   A3           INC       DPTR
   \   000096   E9           MOV       A,R1
   \   000097   F0           MOVX      @DPTR,A
   3493                crc<<= 1;
   \   000098   EE           MOV       A,R6
   \   000099   2E           ADD       A,R6
   \   00009A   FE           MOV       R6,A
   \   00009B   EF           MOV       A,R7
   \   00009C   33           RLC       A
   \   00009D   FF           MOV       R7,A
   3494                if (c & j) bit^= CRC_HIGHBIT;
   \   00009E   E5..         MOV       A,?V12
   \   0000A0   55..         ANL       A,?V0
   \   0000A2   F8           MOV       R0,A
   \   0000A3   E5..         MOV       A,?V13
   \   0000A5   55..         ANL       A,?V1
   \   0000A7   F9           MOV       R1,A
   \   0000A8   E8           MOV       A,R0
   \   0000A9   49           ORL       A,R1
   \   0000AA   600F         JZ        ??bdb_crcBitByBitFast_4
   \   0000AC   85..82       MOV       DPL,?XSP + 0
   \   0000AF   85..83       MOV       DPH,?XSP + 1
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   6400         XRL       A,#0x0
   \   0000B5   F0           MOVX      @DPTR,A
   \   0000B6   A3           INC       DPTR
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   6480         XRL       A,#0x80
   \   0000BA   F0           MOVX      @DPTR,A
   3495                if (bit) crc^= CRC_POLYNOM;
   \                     ??bdb_crcBitByBitFast_4:
   \   0000BB   85..82       MOV       DPL,?XSP + 0
   \   0000BE   85..83       MOV       DPH,?XSP + 1
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   F8           MOV       R0,A
   \   0000C3   A3           INC       DPTR
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   F9           MOV       R1,A
   \   0000C6   E8           MOV       A,R0
   \   0000C7   49           ORL       A,R1
   \   0000C8   6008         JZ        ??bdb_crcBitByBitFast_5
   \   0000CA   7421         MOV       A,#0x21
   \   0000CC   6E           XRL       A,R6
   \   0000CD   FE           MOV       R6,A
   \   0000CE   7410         MOV       A,#0x10
   \   0000D0   6F           XRL       A,R7
   \   0000D1   FF           MOV       R7,A
   3496              }
   \                     ??bdb_crcBitByBitFast_5:
   \   0000D2   E5..         MOV       A,?V1
   \   0000D4   C3           CLR       C
   \   0000D5   13           RRC       A
   \   0000D6   F5..         MOV       ?V1,A
   \   0000D8   E5..         MOV       A,?V0
   \   0000DA   13           RRC       A
   \   0000DB   F5..         MOV       ?V0,A
   \   0000DD   80A0         SJMP      ??bdb_crcBitByBitFast_2
   3497            }	
   \                     ??bdb_crcBitByBitFast_3:
   \   0000DF   05..         INC       ?V2
   \   0000E1   E5..         MOV       A,?V2
   \   0000E3   7002         JNZ       ??bdb_crcBitByBitFast_6
   \   0000E5   05..         INC       ?V3
   \                     ??bdb_crcBitByBitFast_6:
   \   0000E7   02....       LJMP      ??bdb_crcBitByBitFast_0 & 0xFFFF
   3498          
   3499            crc=bdb_crcReflect(crc, CRC_ORDER);
   \                     ??bdb_crcBitByBitFast_1:
   \   0000EA                ; Setup parameters for call to function bdb_crcReflect
   \   0000EA   7C10         MOV       R4,#0x10
   \   0000EC   7D00         MOV       R5,#0x0
   \   0000EE   EE           MOV       A,R6
   \   0000EF   FA           MOV       R2,A
   \   0000F0   EF           MOV       A,R7
   \   0000F1   FB           MOV       R3,A
   \   0000F2   12....       LCALL     `??bdb_crcReflect::?relay`; Banked call to: bdb_crcReflect
   \   0000F5   8A..         MOV       ?V4,R2
   \   0000F7   8B..         MOV       ?V5,R3
   \   0000F9   AE..         MOV       R6,?V4
   \   0000FB   AF..         MOV       R7,?V5
   3500            crc^= CRC_XOR;
   \   0000FD   74FF         MOV       A,#-0x1
   \   0000FF   6E           XRL       A,R6
   \   000100   FE           MOV       R6,A
   \   000101   74FF         MOV       A,#-0x1
   \   000103   6F           XRL       A,R7
   \   000104   FF           MOV       R7,A
   3501          
   3502            return(crc);
   \   000105   EE           MOV       A,R6
   \   000106   FA           MOV       R2,A
   \   000107   EF           MOV       A,R7
   \   000108   FB           MOV       R3,A
   \   000109   7404         MOV       A,#0x4
   \   00010B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00010E   7F10         MOV       R7,#0x10
   \   000110   02....       LJMP      ?BANKED_LEAVE_XDATA
   3503          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for bdbAttributes>`:
   \   000000   00F0FF07     DD 134213632
   \   000004   00080000     DD 2048
   \   000008   FFFF         DW 65535
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   0D           DB 13
   \   00000D   04           DB 4
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   03           DB 3
   \   000012   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for vDoPrimaryScan>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgBdbInstallCodeCRC>`:
   \   000000   83           DB 131
   \   000001   FE           DB 254
   \   000002   D3           DB 211
   \   000003   40           DB 64
   \   000004   7A           DB 122
   \   000005   93           DB 147
   \   000006   97           DB 151
   \   000007   23           DB 35
   \   000008   A5           DB 165
   \   000009   C6           DB 198
   \   00000A   39           DB 57
   \   00000B   B2           DB 178
   \   00000C   69           DB 105
   \   00000D   16           DB 22
   \   00000E   D5           DB 213
   \   00000F   05           DB 5
   \   000010   C3           DB 195
   \   000011   B5           DB 181

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_32:
   \   000000   32000000     DD 50

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1388:
   \   000000   88130000     DD 5000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_c8:
   \   000000   C8000000     DD 200

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3a98:
   \   000000   983A0000     DD 15000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_bb8:
   \   000000   B80B0000     DD 3000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_10:
   \   000000   10000000     DD 16
   3504          
   3505          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     14   bdb_AddRespondentNode
        0     14   -> bdb_CreateRespondentList
        0     14   -> osal_mem_alloc
      0      9   bdb_CBKETCLinkKeyExchangeAttempt
        0      9   -> bdb_reportCommissioningState
        0      9   -> bdb_setNodeJoinLinkKeyType
        0      9   -> bdb_tcLinkKeyExchangeAttempt
      2     26   bdb_ClearNetworkParams
        2      0   -> touchLink_SetMacNwkParams
      0     23   bdb_CreateRespondentList
        0      9   -> osal_mem_alloc
      0     45   bdb_GenerateInstallCodeCRC
        0     15   -> bdb_calculateCCITT_CRC
      0      9   bdb_Init
        0      9   -> ZDO_RegisterForZDOMsg
        0      9   -> osal_pwrmgr_device
        0      9   -> touchLinkInitiator_InitDevice
      0     29   bdb_NetworkRestoredResumeState
        0     13   -> osal_start_timerEx
      1     41   bdb_NotifyCommissioningModeStart
        0     15   -> bdb_SendMsg
      0     60   bdb_ProcessNodeDescRsp
        0     46   -> APSME_IsDistributedSecurity
        0     46   -> ZDO_ParseNodeDescRsp
        0     46   -> bdb_reportCommissioningState
        0     46   -> bdb_setNodeJoinLinkKeyType
        0     46   -> bdb_tcLinkKeyExchangeAttempt
        0     50   -> osal_nv_write
        0     46   -> osal_stop_timerEx
      0     47   bdb_ProcessOSALMsg
        0     12   -> NLME_GetShortAddr
        0     12   -> NLME_NwkDiscTerm
        0     12   -> ZMacSetReq
        0     12   -> bdb_filterNwkDisc
        0     12   -> bdb_nwkDiscoveryAttempt
        0     12   -> bdb_reportCommissioningState
        0     12   -> bdb_requestTCLinkKey
        0     12   -> bdb_requestTCStackVersion
        0     12   -> bdb_requestVerifyTCLinkKey
        0     12   -> bdb_tryNwkAssoc
        0     12   -> nwkNeighborInitTable
        0     16   -> osal_start_timerEx
      2      0   bdb_RegisterCBKETCLinkKeyExchangeCB
      2      0   bdb_RegisterCommissioningStatusCB
      2      0   bdb_RegisterForFilterNwkDescCB
      1     12   bdb_RegisterSimpleDescriptor
        0     12   -> afRegister
        0     12   -> osal_mem_alloc
      1     49   bdb_SendMsg
        0     21   -> osal_memcpy
        0     18   -> osal_msg_allocate
        0     18   -> osal_msg_send
      0     36   bdb_StartCommissioning
        0     32   -> APSME_IsDistributedSecurity
        0     32   -> ZDOInitDeviceEx
        0     32   -> bdb_nwkSteeringDeviceOnNwk
        0     32   -> bdb_reportCommissioningState
        0     32   -> bdb_setNodeIsOnANetwork
        0     32   -> osal_get_timeoutEx
        0     32   -> osal_isbufset
        0     32   -> osal_memset
        0     36   -> osal_nv_read
        0     36   -> osal_nv_write
        0     32   -> osal_set_event
        0     32   -> zgWriteStartupOptions
      0     24   bdb_ZclIdentifyCmdInd
        0     24   -> osal_start_timerEx
        0     20   -> osal_stop_timerEx
        0     22   -> zclFindAttrRec
      2      0   bdb_ZedAttemptRecoverNwk
        2      0   -> ZDOInitDeviceEx
      0     52   bdb_addInstallCode
        0     30   -> APSME_AddTCLinkKey
        0     30   -> bdb_GenerateInstallCodeCRC
        0     30   -> osal_build_uint16
        0     34   -> sspMMOHash
      0     41   bdb_calculateCCITT_CRC
        0     26   -> bdb_crcBitByBitFast
        0     22   -> bdb_crcInit
      0     54   bdb_crcBitByBitFast
        0     28   -> bdb_crcReflect
      0     35   bdb_crcInit
      0     42   bdb_crcReflect
      0      0   bdb_doTrustCenterRequireKeyExchange
      1     35   bdb_event_loop
        0     31   -> NLME_LeaveReq
        0     31   -> bdb_ProcessOSALMsg
        0     31   -> bdb_ProcessRespondentList
        0     31   -> bdb_SendIdentifyQuery
        0     31   -> bdb_exitFindingBindingWStatus
        0     31   -> bdb_getRespondentRetry
        0     31   -> bdb_nwkSteeringDeviceOnNwk
        0     31   -> bdb_processTimeout
        0     31   -> bdb_processZDOMgs
        0     31   -> bdb_reportCommissioningState
        0     31   -> bdb_setEpDescListToActiveEndpoint
        0     31   -> bdb_setNodeIsOnANetwork
        0     31   -> bdb_startResumeCommissioningProcess
        0     31   -> bdb_tcLinkKeyExchangeAttempt
        0     31   -> osal_get_timeoutEx
        0     31   -> osal_memset
        0     31   -> osal_msg_deallocate
        0     31   -> osal_msg_receive
        0     31   -> osal_set_event
        0     35   -> osal_start_timerEx
        0     31   -> osal_stop_timerEx
        0     33   -> zclFindAttrRec
      0     24   bdb_filterNwkDisc
        0     12   -> bdb_nwkDescFree
        0     12   -> nwk_ExtPANIDValid
        0     12   -> nwk_desc_list_release
        0     12   -> nwk_getNwkDescList
        0     12   -> sAddrExtCmp
      2      0   bdb_getZCLFrameCounter
      2     26   bdb_isDeviceNonFactoryNew
      0     28   bdb_joinProcess
        0     16   -> NLME_JoinRequest
        0     12   -> NLME_SetPollRate
        0     12   -> NLME_SetQueuedPollRate
        0     12   -> NLME_SetResponseRate
        0     12   -> ZDApp_ChangeState
        0     12   -> ZDApp_NodeProfileSync
      0     13   bdb_nwkAssocAttemt
        0     13   -> bdb_SendMsg
        0     11   -> bdb_nwkDescFree
      0     28   bdb_nwkDescFree
        0     12   -> osal_mem_free
      0     25   bdb_nwkDiscoveryAttempt
        0     11   -> ZDApp_NetworkInit
        0     13   -> bdb_SendMsg
        0     11   -> bdb_reportCommissioningState
        0     11   -> bdb_setChannel
      0      9   bdb_nwkFormationAttempt
        0      9   -> bdb_nwkJoiningFormation
        0      9   -> bdb_reportCommissioningState
      0     35   bdb_nwkJoiningFormation
        0      9   -> ZDOInitDeviceEx
        0      9   -> bdb_reportCommissioningState
        0      9   -> bdb_setChannel
      2     41   bdb_nwkSteeringDeviceOnNwk
        2      9   -> ZDP_MgmtPermitJoinReq
      2      1   bdb_parentLost
        2      1   -> NLME_OrphanStateSet
        2      1   -> ZDApp_ChangeState
        2      1   -> ZMacSetReq
        2      1   -> bdb_nwkDescFree
        2      1   -> bdb_reportCommissioningState
        2      1   -> nwk_desc_list_free
      2     31   bdb_processTimeout
        2      0   -> bdb_nwkAssocAttemt
        2      0   -> bdb_tcLinkKeyExchangeAttempt
      0     41   bdb_processZDOMgs
        0     10   -> bdb_ProcessIEEEAddrRsp
        0     10   -> bdb_ProcessNodeDescRsp
        0     10   -> bdb_ProcessSimpleDesc
      0     15   bdb_rejoinNwk
        0     11   -> NLME_ReJoinRequest
        0     11   -> NLME_ReJoinRequestUnsecure
        0     11   -> ZDApp_ChangeState
        0     11   -> ZDApp_RestoreNwkKey
        0     11   -> ZMacSetReq
        0     15   -> osal_nv_write
      1     66   bdb_reportCommissioningState
        0     16   -> NLME_ResetRequest
        0     16   -> NLME_SetPollRate
        0     16   -> ZDApp_ChangeState
        0     16   -> ZDApp_RestoreNwkSecMaterial
        0     16   -> ZMacSetReq
        0     16   -> bdb_NetworkRestoredResumeState
        0     18   -> bdb_SendMsg
        0     16   -> bdb_getRespondentRetry
        0     16   -> bdb_isDeviceNonFactoryNew
        0     16   -> bdb_nwkDescFree
        0     16   -> bdb_setFN
        0     16   -> bdb_zclRespondentListClean
        0     16   -> nwk_setStateIdle
        0     16   -> osal_get_timeoutEx
        0     20   -> osal_start_timerEx
        0     16   -> osal_stop_timerEx
        0     16   -> zgWriteStartupOptions
      3     29   bdb_requestTCLinkKey
        2     13   -> APSME_RequestKeyReq
        2     17   -> osal_start_timerEx
        2     13   -> osal_stop_timerEx
      0     34   bdb_requestTCStackVersion
        0     18   -> APSME_IsDistributedSecurity
        0     19   -> ZDP_NWKAddrOfInterestReq
        0     18   -> bdb_reportCommissioningState
        0     18   -> bdb_setNodeJoinLinkKeyType
        0     22   -> osal_start_timerEx
        0     18   -> osal_stop_timerEx
      2     27   bdb_requestVerifyTCLinkKey
        2     11   -> APSME_GetRequest
        2     11   -> APSME_VerifyKeyReq
        2     15   -> osal_start_timerEx
        2     11   -> osal_stop_timerEx
      2      5   bdb_resetLocalAction
        2      5   -> NLME_LeaveReq
        2      5   -> ZDApp_ResetTimerStart
        2      5   -> bdb_setFN
        2      5   -> osal_memset
      0     18   bdb_setActiveCentralizedLinkKey
        0     18   -> APSME_AddTCLinkKey
        0     18   -> APSME_SetDefaultKey
        0     18   -> bdb_addInstallCode
        0     18   -> osal_memset
      0     29   bdb_setChannel
        0     18   -> osal_nv_write
      0     12   bdb_setChannelAttribute
      2      0   bdb_setCommissioningGroupID
      2     16   bdb_setFN
        2      0   -> bdb_setNodeIsOnANetwork
        2      0   -> touchLink_InitFreeRanges
        2      0   -> touchLink_UpdateNV
        2      0   -> zgWriteStartupOptions
      0     46   bdb_setNodeIsOnANetwork
        0     14   -> osal_nv_write
      2     46   bdb_setNodeJoinLinkKeyType
      0     61   bdb_startResumeCommissioningProcess
        0     26   -> ZMacGetReq
        0     26   -> bdb_ClearNetworkParams
        0     26   -> bdb_NotifyCommissioningModeStart
        0     26   -> bdb_SendIdentifyQuery
        0     28   -> bdb_SendMsg
        0     26   -> bdb_exitFindingBindingWStatus
        0     26   -> bdb_isDeviceNonFactoryNew
        0     26   -> bdb_nwkJoiningFormation
        0     26   -> bdb_nwkSteeringDeviceOnNwk
        0     26   -> bdb_reportCommissioningState
        0     26   -> bdb_setEpDescListToActiveEndpoint
        0     26   -> initiatorSelectNwkParams
        0     26   -> osal_memset
        0     30   -> osal_start_timerEx
        0     26   -> touchLinkInitiator_StartDevDisc
        0     28   -> zclFindAttrRec
      0     61   bdb_tcLinkKeyExchangeAttempt
        0     15   -> bdb_SendMsg
        0     13   -> osal_stop_timerEx
      2      0   bdb_touchlinkSendFNReset
        2      0   -> touchLinkInitiator_ResetToFNProcedure
      0     26   bdb_tryNwkAssoc
        0     14   -> bdb_SendMsg
        0     12   -> bdb_joinProcess
        0     12   -> bdb_nwkDescFree
      0     28   bdb_zclRespondentListClean
        0     12   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      19  ?<Initializer for bdbAttributes>
       1  ?<Initializer for vDoPrimaryScan>
      18  ?<Initializer for zgBdbInstallCodeCRC>
       4  __Constant_0
       4  __Constant_10
       4  __Constant_1388
       4  __Constant_32
       4  __Constant_3a98
       4  __Constant_3e8
       4  __Constant_bb8
       4  __Constant_c8
      19  bdbAttributes
       4  bdbCommissioningProcedureState
     362  bdb_AddRespondentNode
      49  bdb_CBKETCLinkKeyExchangeAttempt
      67  bdb_ClearNetworkParams
      81  bdb_CreateRespondentList
       2  bdb_CurrEpDescriptorList
       1  bdb_FBStateSuccessLatch
       1  bdb_FB_InitiatorCurrentCyclesNumber
      58  bdb_GenerateInstallCodeCRC
       2  bdb_HeadEpDescriptorList
      56  bdb_Init
     112  bdb_NetworkRestoredResumeState
      74  bdb_NotifyCommissioningModeStart
     199  bdb_ProcessNodeDescRsp
     303  bdb_ProcessOSALMsg
      47  bdb_RegisterCBKETCLinkKeyExchangeCB
      19  bdb_RegisterCommissioningStatusCB
      23  bdb_RegisterForFilterNwkDescCB
     106  bdb_RegisterSimpleDescriptor
     140  bdb_SendMsg
     577  bdb_StartCommissioning
       1  bdb_TaskID
     198  bdb_ZclIdentifyCmdInd
       1  bdb_ZclTransactionSequenceNumber
      43  bdb_ZedAttemptRecoverNwk
     142  bdb_addInstallCode
     115  bdb_calculateCCITT_CRC
     275  bdb_crcBitByBitFast
     167  bdb_crcInit
      86  bdb_crcReflect
       5  bdb_doTrustCenterRequireKeyExchange
     939  bdb_event_loop
     445  bdb_filterNwkDisc
      23  bdb_getZCLFrameCounter
       1  bdb_initialization
      16  bdb_isDeviceNonFactoryNew
     213  bdb_joinProcess
     114  bdb_nwkAssocAttemt
       1  bdb_nwkAssocRetriesCount
     151  bdb_nwkDescFree
     117  bdb_nwkDiscoveryAttempt
      62  bdb_nwkFormationAttempt
     134  bdb_nwkJoiningFormation
      56  bdb_nwkSteeringDeviceOnNwk
     123  bdb_parentLost
      71  bdb_processTimeout
      73  bdb_processZDOMgs
     186  bdb_rejoinNwk
    1115  bdb_reportCommissioningState
     116  bdb_requestTCLinkKey
     185  bdb_requestTCStackVersion
     105  bdb_requestVerifyTCLinkKey
      71  bdb_resetLocalAction
     128  bdb_setActiveCentralizedLinkKey
      73  bdb_setChannel
      39  bdb_setChannelAttribute
      19  bdb_setCommissioningGroupID
      34  bdb_setFN
      78  bdb_setNodeIsOnANetwork
      16  bdb_setNodeJoinLinkKeyType
     786  bdb_startResumeCommissioningProcess
      90  bdb_tcLinkKeyExchangeAttempt
      14  bdb_touchlinkSendFNReset
     154  bdb_tryNwkAssoc
     113  bdb_zclRespondentListClean
       2  pBDBListNwk
       2  pRespondentCurr
       2  pRespondentHead
       2  pRespondentNext
       2  pfnCBKETCLinkKeyExchange
       2  pfnCommissioningStatusCB
       2  pfnFilterNwkDesc
       1  touchLinkTargetEnabled
       1  vDoPrimaryScan
      18  zgBdbInstallCodeCRC
     336  -- Other

 
 9 163 bytes in segment BANKED_CODE
   336 bytes in segment BANK_RELAYS
    38 bytes in segment XDATA_I
    38 bytes in segment XDATA_ID
    32 bytes in segment XDATA_ROM_C
    29 bytes in segment XDATA_Z
 
   374 bytes of CODE     memory
     0 bytes of CONST    memory (+ 32 bytes shared)
 9 163 bytes of HUGECODE memory
    67 bytes of XDATA    memory

Errors: none
Warnings: none
