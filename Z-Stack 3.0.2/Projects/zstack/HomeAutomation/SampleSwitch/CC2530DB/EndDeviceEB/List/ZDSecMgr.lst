###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               30/Jul/2020  16:03:44
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\AA\Z-Stack 3.0.2\Components\stack\zdo\ZDSecMgr.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW164B.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\stack\zdo\ZDSecMgr.c" -D SECURE=1 -D TC_LINKKEY_JOIN
#        -D NV_INIT -D NV_RESTORE -D xPOWER_SAVING -D NWK_AUTO_POLL -D
#        xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC
#        -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_GROUPS -D
#        BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\ZDSecMgr.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\ZDSecMgr.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\stack\zdo\ZDSecMgr.c
      1          /******************************************************************************
      2            Filename:       ZDSecMgr.c
      3            Revised:        $Date: 2014-06-05 11:25:00 -0700 (Thu, 05 Jun 2014) $
      4            Revision:       $Revision: 38833 $
      5          
      6            Description:    The ZigBee Device Security Manager.
      7          
      8          
      9            Copyright 2005-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          #ifdef __cplusplus
     41          extern "C"
     42          {
     43          #endif
     44          
     45          /******************************************************************************
     46           * INCLUDES
     47           */
     48          #include "ZComDef.h"
     49          #include "OSAL.h"
     50          #include "OSAL_Nv.h"
     51          #include "ZGlobals.h"
     52          #include "ssp.h"
     53          #include "nwk_globals.h"
     54          #include "nwk.h"
     55          #include "NLMEDE.h"
     56          #include "AddrMgr.h"
     57          #include "AssocList.h"
     58          #include "APSMEDE.h"
     59          #include "ZDConfig.h"
     60          #include "ZDSecMgr.h"
     61            
     62          #include "bdb.h"
     63          #include "bdb_interface.h"
     64          
     65          /******************************************************************************
     66           * CONSTANTS
     67           */
     68          // maximum number of devices managed by this Security Manager
     69          #if !defined ( ZDSECMGR_DEVICE_MAX )
     70            #define ZDSECMGR_DEVICE_MAX 3
     71          #endif
     72          
     73          // maximum number of LINK keys this device may store
     74          #define ZDSECMGR_ENTRY_MAX ZDSECMGR_DEVICE_MAX
     75          
     76          // total number of stored devices
     77          #if !defined ( ZDSECMGR_STORED_DEVICES )
     78            #define ZDSECMGR_STORED_DEVICES 3
     79          #endif
     80          
     81          // Joining Device Policies: r21 spec 4.9.1
     82          // This boolean indicates whether the device will request a new Trust Center Link key after joining.
     83          // TC link key cannot be requested if join is performed on distributed nwk

   \                                 In  segment XDATA_I, align 1, keep-with-next
     84          bool  requestNewTrustCenterLinkKey = TRUE;  
   \                     requestNewTrustCenterLinkKey:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for requestNewTrustCenterLinkKey`
   \   000001                REQUIRE __INIT_XDATA_I
     85          //This integer indicates the maximum time in seconds that a device will wait for a response to a 
     86          //request for a Trust Center link key.

   \                                 In  segment XDATA_I, align 1, keep-with-next
     87          uint32  requestLinkKeyTimeout = BDBC_TC_LINK_KEY_EXANGE_TIMEOUT;
   \                     requestLinkKeyTimeout:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for requestLinkKeyTimeout>`
   \   000004                REQUIRE __INIT_XDATA_I
     88           //bool acceptNewUnsolicitedApplicationLinkKey;   
     89          
     90          // APSME Stub Implementations
     91          #define ZDSecMgrLinkKeySet       APSME_LinkKeySet
     92          #define ZDSecMgrLinkKeyNVIdGet   APSME_LinkKeyNVIdGet
     93          #define ZDSecMgrKeyFwdToChild    APSME_KeyFwdToChild
     94          #define ZDSecMgrIsLinkKeyValid   APSME_IsLinkKeyValid
     95          
     96          
     97          
     98          /******************************************************************************
     99           * TYPEDEFS
    100           */
    101          typedef struct
    102          {
    103            uint16            ami;
    104            uint16            keyNvId;   // index to the Link Key table in NV
    105            ZDSecMgr_Authentication_Option authenticateOption;
    106          } ZDSecMgrEntry_t;
    107          
    108          typedef struct
    109          {
    110            uint16          nwkAddr;
    111            uint8*          extAddr;
    112            uint16          parentAddr;
    113            uint8           secure;
    114            uint8           devStatus;
    115          } ZDSecMgrDevice_t;
    116          
    117          /******************************************************************************
    118           * EXTERNAL VARIABLES
    119           */
    120          extern CONST uint8 gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES;
    121          extern pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
    122          
    123          
    124          /******************************************************************************
    125           * EXTERNAL FUNCTIONS
    126           */
    127          extern void   ZDApp_ResetTimerCancel( void );
    128          /******************************************************************************
    129           * LOCAL VARIABLES
    130           */
    131          #if 0 // Taken out because the following functionality is only used for test
    132                // purpose. A more efficient (above) way is used. It can be put
    133                // back in if customers request for a white/black list feature.
    134          uint8 ZDSecMgrStoredDeviceList[ZDSECMGR_STORED_DEVICES][Z_EXTADDR_LEN] =
    135          {
    136            { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    137            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 },
    138            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    139          };
    140          #endif
    141          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          uint8 ZDSecMgrTCExtAddr[Z_EXTADDR_LEN]=
   \                     ZDSecMgrTCExtAddr:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    143            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    144          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          uint8 ZDSecMgrTCAuthenticated = FALSE;
   \                     ZDSecMgrTCAuthenticated:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    146          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          ZDSecMgrEntry_t* ZDSecMgrEntries  = NULL;
   \                     ZDSecMgrEntries:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    148          
    149          void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
    150          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          uint8 ZDSecMgrPermitJoiningEnabled;
   \                     ZDSecMgrPermitJoiningEnabled:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint8 ZDSecMgrPermitJoiningTimed;
   \                     ZDSecMgrPermitJoiningTimed:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    153          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          APSME_TCLKDevEntry_t TrustCenterLinkKey;
   \                     TrustCenterLinkKey:
   \   000000                DS 19
   \   000013                REQUIRE __INIT_XDATA_Z
    155          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    156          APSME_ApsLinkKeyFrmCntr_t ApsLinkKeyFrmCntr[ZDSECMGR_ENTRY_MAX];
   \                     ApsLinkKeyFrmCntr:
   \   000000                DS 27
   \   00001B                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          APSME_TCLinkKeyFrmCntr_t TCLinkKeyFrmCntr[ZDSECMGR_TC_DEVICE_MAX];
   \                     TCLinkKeyFrmCntr:
   \   000000                DS 27
   \   00001B                REQUIRE __INIT_XDATA_Z
    158          

   \                                 In  segment CODE_C, align 1
    159           CONST uint16 gZDSECMGR_TC_DEVICE_MAX = ZDSECMGR_TC_DEVICE_MAX;
   \                     gZDSECMGR_TC_DEVICE_MAX:
   \   000000   0300         DW 3

   \                                 In  segment CODE_C, align 1
    160           CONST uint16 gZDSECMGR_TC_DEVICE_IC_MAX = ZDSECMGR_TC_DEVICE_IC_MAX;
   \                     gZDSECMGR_TC_DEVICE_IC_MAX:
   \   000000   0100         DW 1

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161           uint8  gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = ZDSECMGR_TC_ATTEMPT_DEFAULT_KEY;
   \                     gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    162          /******************************************************************************
    163           * PRIVATE FUNCTIONS
    164           *
    165           *   ZDSecMgrAddrStore
    166           *   ZDSecMgrExtAddrStore
    167           *   ZDSecMgrExtAddrLookup
    168           *   ZDSecMgrEntryInit
    169           *   ZDSecMgrEntryLookup
    170           *   ZDSecMgrEntryLookupAMI
    171           *   ZDSecMgrEntryLookupExt
    172           *   ZDSecMgrEntryLookupExtGetIndex
    173           *   ZDSecMgrEntryFree
    174           *   ZDSecMgrEntryNew
    175           *   ZDSecMgrAppKeyGet
    176           *   ZDSecMgrAppKeyReq
    177           *   ZDSecMgrTclkReq
    178           *   ZDSecMgrAppConfKeyReq 
    179           *   ZDSecMgrSendNwkKey
    180           *   ZDSecMgrDeviceRemove
    181           *   ZDSecMgrDeviceValidateRM
    182           *   ZDSecMgrDeviceValidate
    183           *   ZDSecMgrDeviceJoin
    184           *   ZDSecMgrDeviceJoinDirect
    185           *   ZDSecMgrDeviceJoinFwd
    186           *   ZDSecMgrDeviceNew
    187           *   ZDSecMgrAssocDeviceAuth
    188           *   ZDSecMgrAuthNwkKey
    189           *   APSME_TCLinkKeyInit
    190           *   APSME_IsDefaultTCLK
    191           */
    192          
    193          //-----------------------------------------------------------------------------
    194          // address management
    195          //-----------------------------------------------------------------------------
    196          ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
    197          ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
    198          ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami );
    199          
    200          //-----------------------------------------------------------------------------
    201          // Trust Center management
    202          //-----------------------------------------------------------------------------
    203          uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr );
    204          void ZDSecMgrTCDataLoad( uint8* extAddr );
    205          
    206          //-----------------------------------------------------------------------------
    207          // entry data
    208          //-----------------------------------------------------------------------------
    209          void ZDSecMgrEntryInit(uint8 state);
    210          ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry );
    211          ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry );
    212          ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
    213          ZStatus_t ZDSecMgrEntryLookupExtGetIndex( uint8* extAddr, ZDSecMgrEntry_t** entry, uint16* entryIndex );
    214          ZStatus_t ZDSecMgrEntryLookupAMIGetIndex( uint16 ami, uint16* entryIndex );
    215          void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry );
    216          ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry );
    217          ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option );
    218          void ZDSecMgrApsLinkKeyInit(uint8 setDefault);
    219          #if defined ( NV_RESTORE )
    220          static void ZDSecMgrWriteNV(void);
    221          static void ZDSecMgrRestoreFromNV(void);
    222          static void ZDSecMgrUpdateNV( uint16 index );
    223          #endif
    224          
    225          //-----------------------------------------------------------------------------
    226          // key support
    227          //-----------------------------------------------------------------------------
    228          ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
    229                                       uint8*  initExtAddr,
    230                                       uint16  partNwkAddr,
    231                                       uint8*  partExtAddr,
    232                                       uint8** key,
    233                                       uint8*  keyType );
    234          void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind );
    235          void ZDSecMgrTclkReq( ZDO_RequestKeyInd_t* ind );
    236          void ZDSecMgrAppConfKeyReq( ZDO_VerifyKeyInd_t* ind );
    237          ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device );
    238          void ZDSecMgrNwkKeyInit(uint8 setDefault);
    239          
    240          //-----------------------------------------------------------------------------
    241          // device management
    242          //-----------------------------------------------------------------------------
    243          void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device );
    244          ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device );
    245          ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device );
    246          ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device );
    247          ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device );
    248          ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device );
    249          ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* device );
    250          
    251          //-----------------------------------------------------------------------------
    252          // association management
    253          //-----------------------------------------------------------------------------
    254          void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc );
    255          
    256          //-----------------------------------------------------------------------------
    257          // authentication management
    258          //-----------------------------------------------------------------------------
    259          void ZDSecMgrAuthNwkKey( void );
    260          
    261          //-----------------------------------------------------------------------------
    262          // APSME function
    263          //-----------------------------------------------------------------------------
    264          void APSME_TCLinkKeyInit( uint8 setDefault );
    265          uint8 APSME_IsDefaultTCLK( uint8 *extAddr );
    266          void ZDSecMgrGenerateSeed(uint8 setDefault );
    267          void ZDSecMgrGenerateKeyFromSeed(uint8 *extAddr, uint8 shift, uint8 *key);
    268          /******************************************************************************
    269           * @fn          ZDSecMgrAddrStore
    270           *
    271           * @brief       Store device addresses.
    272           *
    273           * @param       nwkAddr - [in] NWK address
    274           * @param       extAddr - [in] EXT address
    275           * @param       ami     - [out] Address Manager index
    276           *
    277           * @return      ZStatus_t
    278           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    279          ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
   \                     ZDSecMgrAddrStore:
    280          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV       A,#-0xd
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   \   000012   741A         MOV       A,#0x1a
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V0,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V1,A
    281            ZStatus_t      status;
    282            AddrMgrEntry_t entry;
    283          
    284          
    285            // add entry
    286            entry.user    = ADDRMGR_USER_SECURITY;
   \   00001E   85..82       MOV       DPL,?XSP + 0
   \   000021   85..83       MOV       DPH,?XSP + 1
   \   000024   7402         MOV       A,#0x2
   \   000026   F0           MOVX      @DPTR,A
    287            entry.nwkAddr = nwkAddr;
   \   000027   7401         MOV       A,#0x1
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   E5..         MOV       A,?V2
   \   00002E   F0           MOVX      @DPTR,A
   \   00002F   A3           INC       DPTR
   \   000030   E5..         MOV       A,?V3
   \   000032   F0           MOVX      @DPTR,A
    288            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \   000033                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000033   EE           MOV       A,R6
   \   000034   FC           MOV       R4,A
   \   000035   EF           MOV       A,R7
   \   000036   FD           MOV       R5,A
   \   000037   7403         MOV       A,#0x3
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   AA82         MOV       R2,DPL
   \   00003E   AB83         MOV       R3,DPH
   \   000040   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
    289          
    290            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \   000043                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000043   AA..         MOV       R2,?XSP + 0
   \   000045   AB..         MOV       R3,?XSP + 1
   \   000047   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00004A   E9           MOV       A,R1
   \   00004B   6401         XRL       A,#0x1
   \   00004D   701A         JNZ       ??ZDSecMgrAddrStore_0
    291            {
    292              // return successful results
    293              *ami   = entry.index;
   \   00004F   740B         MOV       A,#0xb
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   E0           MOVX      A,@DPTR
   \   000055   F8           MOV       R0,A
   \   000056   A3           INC       DPTR
   \   000057   E0           MOVX      A,@DPTR
   \   000058   F9           MOV       R1,A
   \   000059   85..82       MOV       DPL,?V0
   \   00005C   85..83       MOV       DPH,?V1
   \   00005F   E8           MOV       A,R0
   \   000060   F0           MOVX      @DPTR,A
   \   000061   A3           INC       DPTR
   \   000062   E9           MOV       A,R1
   \   000063   F0           MOVX      @DPTR,A
    294              status = ZSuccess;
   \   000064   75..00       MOV       ?V4,#0x0
   \   000067   8018         SJMP      ??ZDSecMgrAddrStore_1
    295            }
    296            else
    297            {
    298              // return failed results
    299              *ami   = entry.index;
   \                     ??ZDSecMgrAddrStore_0:
   \   000069   740B         MOV       A,#0xb
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   F8           MOV       R0,A
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   F9           MOV       R1,A
   \   000073   85..82       MOV       DPL,?V0
   \   000076   85..83       MOV       DPH,?V1
   \   000079   E8           MOV       A,R0
   \   00007A   F0           MOVX      @DPTR,A
   \   00007B   A3           INC       DPTR
   \   00007C   E9           MOV       A,R1
   \   00007D   F0           MOVX      @DPTR,A
    300              status = ZNwkUnknownDevice;
   \   00007E   75..C8       MOV       ?V4,#-0x38
    301            }
    302          
    303            return status;
   \                     ??ZDSecMgrAddrStore_1:
   \   000081   A9..         MOV       R1,?V4
   \   000083   740D         MOV       A,#0xd
   \   000085   12....       LCALL     ?DEALLOC_XSTACK8
   \   000088   7F05         MOV       R7,#0x5
   \   00008A   02....       LJMP      ?BANKED_LEAVE_XDATA
    304          }
    305          
    306          /******************************************************************************
    307           * @fn          ZDSecMgrExtAddrStore
    308           *
    309           * @brief       Store EXT address.
    310           *
    311           * @param       extAddr - [in] EXT address
    312           * @param       ami     - [out] Address Manager index
    313           *
    314           * @return      ZStatus_t
    315           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    316          ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
   \                     ZDSecMgrExtAddrStore:
    317          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV       A,#-0xd
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   \   000012   741A         MOV       A,#0x1a
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V0,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V1,A
    318            ZStatus_t      status;
    319            AddrMgrEntry_t entry;
    320          
    321          
    322            // add entry
    323            entry.user    = ADDRMGR_USER_SECURITY;
   \   00001E   85..82       MOV       DPL,?XSP + 0
   \   000021   85..83       MOV       DPH,?XSP + 1
   \   000024   7402         MOV       A,#0x2
   \   000026   F0           MOVX      @DPTR,A
    324            entry.nwkAddr = nwkAddr;
   \   000027   7401         MOV       A,#0x1
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   E5..         MOV       A,?V2
   \   00002E   F0           MOVX      @DPTR,A
   \   00002F   A3           INC       DPTR
   \   000030   E5..         MOV       A,?V3
   \   000032   F0           MOVX      @DPTR,A
    325            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \   000033                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000033   EE           MOV       A,R6
   \   000034   FC           MOV       R4,A
   \   000035   EF           MOV       A,R7
   \   000036   FD           MOV       R5,A
   \   000037   7403         MOV       A,#0x3
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   AA82         MOV       R2,DPL
   \   00003E   AB83         MOV       R3,DPH
   \   000040   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
    326          
    327            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \   000043                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000043   AA..         MOV       R2,?XSP + 0
   \   000045   AB..         MOV       R3,?XSP + 1
   \   000047   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00004A   E9           MOV       A,R1
   \   00004B   6401         XRL       A,#0x1
   \   00004D   701A         JNZ       ??ZDSecMgrExtAddrStore_0
    328            {
    329              // return successful results
    330              *ami   = entry.index;
   \   00004F   740B         MOV       A,#0xb
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   E0           MOVX      A,@DPTR
   \   000055   F8           MOV       R0,A
   \   000056   A3           INC       DPTR
   \   000057   E0           MOVX      A,@DPTR
   \   000058   F9           MOV       R1,A
   \   000059   85..82       MOV       DPL,?V0
   \   00005C   85..83       MOV       DPH,?V1
   \   00005F   E8           MOV       A,R0
   \   000060   F0           MOVX      @DPTR,A
   \   000061   A3           INC       DPTR
   \   000062   E9           MOV       A,R1
   \   000063   F0           MOVX      @DPTR,A
    331              status = ZSuccess;
   \   000064   75..00       MOV       ?V4,#0x0
   \   000067   8018         SJMP      ??ZDSecMgrExtAddrStore_1
    332            }
    333            else
    334            {
    335              // return failed results
    336              *ami   = entry.index;
   \                     ??ZDSecMgrExtAddrStore_0:
   \   000069   740B         MOV       A,#0xb
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   F8           MOV       R0,A
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   F9           MOV       R1,A
   \   000073   85..82       MOV       DPL,?V0
   \   000076   85..83       MOV       DPH,?V1
   \   000079   E8           MOV       A,R0
   \   00007A   F0           MOVX      @DPTR,A
   \   00007B   A3           INC       DPTR
   \   00007C   E9           MOV       A,R1
   \   00007D   F0           MOVX      @DPTR,A
    337              status = ZNwkUnknownDevice;
   \   00007E   75..C8       MOV       ?V4,#-0x38
    338            }
    339          
    340            return status;
   \                     ??ZDSecMgrExtAddrStore_1:
   \   000081   A9..         MOV       R1,?V4
   \   000083   740D         MOV       A,#0xd
   \   000085   12....       LCALL     ?DEALLOC_XSTACK8
   \   000088   7F05         MOV       R7,#0x5
   \   00008A   02....       LJMP      ?BANKED_LEAVE_XDATA
    341          }
    342          
    343          /******************************************************************************
    344           * @fn          ZDSecMgrExtAddrLookup
    345           *
    346           * @brief       Lookup index for specified EXT address.
    347           *
    348           * @param       extAddr - [in] EXT address
    349           * @param       ami     - [out] Address Manager index
    350           *
    351           * @return      ZStatus_t
    352           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    353          ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami )
   \                     ZDSecMgrExtAddrLookup:
    354          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
    355            ZStatus_t      status;
    356            AddrMgrEntry_t entry;
    357          
    358          
    359            // lookup entry
    360            entry.user = ADDRMGR_USER_SECURITY;
   \   000012   85..82       MOV       DPL,?XSP + 0
   \   000015   85..83       MOV       DPH,?XSP + 1
   \   000018   7402         MOV       A,#0x2
   \   00001A   F0           MOVX      @DPTR,A
    361            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \   00001B                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00001B   EE           MOV       A,R6
   \   00001C   FC           MOV       R4,A
   \   00001D   EF           MOV       A,R7
   \   00001E   FD           MOV       R5,A
   \   00001F   7403         MOV       A,#0x3
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   AA82         MOV       R2,DPL
   \   000026   AB83         MOV       R3,DPH
   \   000028   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
    362          
    363            if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   \   00002B                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   00002B   AA..         MOV       R2,?XSP + 0
   \   00002D   AB..         MOV       R3,?XSP + 1
   \   00002F   12....       LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000032   E9           MOV       A,R1
   \   000033   6401         XRL       A,#0x1
   \   000035   701A         JNZ       ??ZDSecMgrExtAddrLookup_0
    364            {
    365              // return successful results
    366              *ami   = entry.index;
   \   000037   740B         MOV       A,#0xb
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   F8           MOV       R0,A
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F9           MOV       R1,A
   \   000041   85..82       MOV       DPL,?V0
   \   000044   85..83       MOV       DPH,?V1
   \   000047   E8           MOV       A,R0
   \   000048   F0           MOVX      @DPTR,A
   \   000049   A3           INC       DPTR
   \   00004A   E9           MOV       A,R1
   \   00004B   F0           MOVX      @DPTR,A
    367              status = ZSuccess;
   \   00004C   75..00       MOV       ?V2,#0x0
   \   00004F   8018         SJMP      ??ZDSecMgrExtAddrLookup_1
    368            }
    369            else
    370            {
    371              // return failed results
    372              *ami   = entry.index;
   \                     ??ZDSecMgrExtAddrLookup_0:
   \   000051   740B         MOV       A,#0xb
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   E0           MOVX      A,@DPTR
   \   000057   F8           MOV       R0,A
   \   000058   A3           INC       DPTR
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   F9           MOV       R1,A
   \   00005B   85..82       MOV       DPL,?V0
   \   00005E   85..83       MOV       DPH,?V1
   \   000061   E8           MOV       A,R0
   \   000062   F0           MOVX      @DPTR,A
   \   000063   A3           INC       DPTR
   \   000064   E9           MOV       A,R1
   \   000065   F0           MOVX      @DPTR,A
    373              status = ZNwkUnknownDevice;
   \   000066   75..C8       MOV       ?V2,#-0x38
    374            }
    375          
    376            return status;
   \                     ??ZDSecMgrExtAddrLookup_1:
   \   000069   A9..         MOV       R1,?V2
   \   00006B   740D         MOV       A,#0xd
   \   00006D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000070   7F03         MOV       R7,#0x3
   \   000072   02....       LJMP      ?BANKED_LEAVE_XDATA
    377          }
    378          
    379          /******************************************************************************
    380           * @fn          ZDSecMgrAddrClear
    381           *
    382           * @brief       Clear security bit from Address Manager for specific device.
    383           *
    384           * @param       extAddr - [in] EXT address
    385           *
    386           * @return      ZStatus_t
    387           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    388          ZStatus_t ZDSecMgrAddrClear( uint8* extAddr )
   \                     ZDSecMgrAddrClear:
    389          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV       A,#-0xf
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    390            ZStatus_t status;
    391            uint16 entryAmi;
    392          
    393            // get Address Manager Index
    394            status = ZDSecMgrExtAddrLookup( extAddr, &entryAmi );
   \   00000E                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   00000E   AC..         MOV       R4,?XSP + 0
   \   000010   AD..         MOV       R5,?XSP + 1
   \   000012   EE           MOV       A,R6
   \   000013   FA           MOV       R2,A
   \   000014   EF           MOV       A,R7
   \   000015   FB           MOV       R3,A
   \   000016   12....       LCALL     `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   000019   E9           MOV       A,R1
   \   00001A   F5..         MOV       ?V0,A
    395          
    396            if ( status == ZSuccess )
   \   00001C   E5..         MOV       A,?V0
   \   00001E   702D         JNZ       ??ZDSecMgrAddrClear_0
    397            {
    398              AddrMgrEntry_t addrEntry;
    399          
    400              // Clear SECURITY User bit from the address manager
    401              addrEntry.user = ADDRMGR_USER_SECURITY;
   \   000020   7402         MOV       A,#0x2
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   7402         MOV       A,#0x2
   \   000027   F0           MOVX      @DPTR,A
    402              addrEntry.index = entryAmi;
   \   000028   85..82       MOV       DPL,?XSP + 0
   \   00002B   85..83       MOV       DPH,?XSP + 1
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F8           MOV       R0,A
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F9           MOV       R1,A
   \   000033   740D         MOV       A,#0xd
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   E8           MOV       A,R0
   \   000039   F0           MOVX      @DPTR,A
   \   00003A   A3           INC       DPTR
   \   00003B   E9           MOV       A,R1
   \   00003C   F0           MOVX      @DPTR,A
    403          
    404              if ( AddrMgrEntryRelease( &addrEntry ) != TRUE )
   \   00003D                ; Setup parameters for call to function AddrMgrEntryRelease
   \   00003D   7402         MOV       A,#0x2
   \   00003F   12....       LCALL     ?XSTACK_DISP101_8
   \   000042   12....       LCALL     `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   \   000045   E9           MOV       A,R1
   \   000046   6401         XRL       A,#0x1
   \   000048   6003         JZ        ??ZDSecMgrAddrClear_0
    405              {
    406                // return failure results
    407                status = ZFailure;
   \   00004A   75..01       MOV       ?V0,#0x1
    408              }
    409            }
    410          
    411            return status;
   \                     ??ZDSecMgrAddrClear_0:
   \   00004D   A9..         MOV       R1,?V0
   \   00004F   740F         MOV       A,#0xf
   \   000051   12....       LCALL     ?DEALLOC_XSTACK8
   \   000054   7F01         MOV       R7,#0x1
   \   000056   02....       LJMP      ?BANKED_LEAVE_XDATA
    412          }
    413          
    414          /******************************************************************************
    415           * @fn          ZDSecMgrEntryInit
    416           *
    417           * @brief       Initialize entry sub module
    418           *
    419           * @param       state - device initialization state
    420           *
    421           * @return      none
    422           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    423          void ZDSecMgrEntryInit(uint8 state)
   \                     ZDSecMgrEntryInit:
    424          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
    425            if (ZDSecMgrEntries == NULL)
   \   000007   90....       MOV       DPTR,#ZDSecMgrEntries
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F8           MOV       R0,A
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F9           MOV       R1,A
   \   00000F   E8           MOV       A,R0
   \   000010   49           ORL       A,R1
   \   000011   6003         JZ        $+5
   \   000013   02....       LJMP      ??ZDSecMgrEntryInit_0 & 0xFFFF
    426            {
    427              uint16 index;
    428          
    429              if ((ZDSecMgrEntries = osal_mem_alloc(sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)) == NULL)
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   7A0F         MOV       R2,#0xf
   \   000018   7B00         MOV       R3,#0x0
   \   00001A   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001D   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000020   EA           MOV       A,R2
   \   000021   F0           MOVX      @DPTR,A
   \   000022   A3           INC       DPTR
   \   000023   EB           MOV       A,R3
   \   000024   F0           MOVX      @DPTR,A
   \   000025   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F8           MOV       R0,A
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F9           MOV       R1,A
   \   00002D   E8           MOV       A,R0
   \   00002E   49           ORL       A,R1
   \   00002F   6077         JZ        ??ZDSecMgrEntryInit_1
    430              {
    431                return;
    432              }
    433          
    434              for (index = 0; index < ZDSECMGR_ENTRY_MAX; index++)
   \   000031   7E00         MOV       R6,#0x0
   \   000033   7F00         MOV       R7,#0x0
   \                     ??ZDSecMgrEntryInit_2:
   \   000035   C3           CLR       C
   \   000036   EE           MOV       A,R6
   \   000037   9403         SUBB      A,#0x3
   \   000039   EF           MOV       A,R7
   \   00003A   9400         SUBB      A,#0x0
   \   00003C   5063         JNC       ??ZDSecMgrEntryInit_0
    435              {
    436                ZDSecMgrEntries[index].ami = INVALID_NODE_ADDR;
   \   00003E   EE           MOV       A,R6
   \   00003F   F8           MOV       R0,A
   \   000040   EF           MOV       A,R7
   \   000041   F9           MOV       R1,A
   \   000042   E8           MOV       A,R0
   \   000043   75F005       MOV       B,#0x5
   \   000046   A4           MUL       AB
   \   000047   C8           XCH       A,R0
   \   000048   AAF0         MOV       R2,B
   \   00004A   75F000       MOV       B,#0x0
   \   00004D   A4           MUL       AB
   \   00004E   2A           ADD       A,R2
   \   00004F   FA           MOV       R2,A
   \   000050   75F005       MOV       B,#0x5
   \   000053   E9           MOV       A,R1
   \   000054   A4           MUL       AB
   \   000055   2A           ADD       A,R2
   \   000056   F9           MOV       R1,A
   \   000057   90....       MOV       DPTR,#ZDSecMgrEntries
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   28           ADD       A,R0
   \   00005C   FA           MOV       R2,A
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   39           ADDC      A,R1
   \   000060   8A82         MOV       DPL,R2
   \   000062   F583         MOV       DPH,A
   \   000064   74FE         MOV       A,#-0x2
   \   000066   F0           MOVX      @DPTR,A
   \   000067   A3           INC       DPTR
   \   000068   74FF         MOV       A,#-0x1
   \   00006A   F0           MOVX      @DPTR,A
    437          
    438                ZDSecMgrEntries[index].keyNvId = SEC_NO_KEY_NV_ID;
   \   00006B   EE           MOV       A,R6
   \   00006C   F8           MOV       R0,A
   \   00006D   EF           MOV       A,R7
   \   00006E   F9           MOV       R1,A
   \   00006F   E8           MOV       A,R0
   \   000070   75F005       MOV       B,#0x5
   \   000073   A4           MUL       AB
   \   000074   C8           XCH       A,R0
   \   000075   AAF0         MOV       R2,B
   \   000077   75F000       MOV       B,#0x0
   \   00007A   A4           MUL       AB
   \   00007B   2A           ADD       A,R2
   \   00007C   FA           MOV       R2,A
   \   00007D   75F005       MOV       B,#0x5
   \   000080   E9           MOV       A,R1
   \   000081   A4           MUL       AB
   \   000082   2A           ADD       A,R2
   \   000083   F9           MOV       R1,A
   \   000084   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000087   E0           MOVX      A,@DPTR
   \   000088   28           ADD       A,R0
   \   000089   FA           MOV       R2,A
   \   00008A   A3           INC       DPTR
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   39           ADDC      A,R1
   \   00008D   8A82         MOV       DPL,R2
   \   00008F   F583         MOV       DPH,A
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   7400         MOV       A,#0x0
   \   000095   F0           MOVX      @DPTR,A
   \   000096   A3           INC       DPTR
   \   000097   7400         MOV       A,#0x0
   \   000099   F0           MOVX      @DPTR,A
    439              }
   \   00009A   0E           INC       R6
   \   00009B   EE           MOV       A,R6
   \   00009C   7097         JNZ       ??ZDSecMgrEntryInit_2
   \   00009E   0F           INC       R7
   \   00009F   8094         SJMP      ??ZDSecMgrEntryInit_2
    440            }
    441          
    442          #if defined NV_RESTORE
    443            if (state == ZDO_INITDEV_RESTORED_NETWORK_STATE)
   \                     ??ZDSecMgrEntryInit_0:
   \   0000A1   E5..         MOV       A,?V0
   \   0000A3   7003         JNZ       ??ZDSecMgrEntryInit_1
    444            {
    445              ZDSecMgrRestoreFromNV();
   \   0000A5                ; Setup parameters for call to function ZDSecMgrRestoreFromNV
   \   0000A5   12....       LCALL     `??ZDSecMgrRestoreFromNV::?relay`; Banked call to: ZDSecMgrRestoreFromNV
    446            }
    447          #else
    448            (void)state;
    449          #endif
    450          }
   \                     ??ZDSecMgrEntryInit_1:
   \   0000A8   7F01         MOV       R7,#0x1
   \   0000AA   02....       LJMP      ?BANKED_LEAVE_XDATA
    451          
    452          /******************************************************************************
    453           * @fn          ZDSecMgrEntryLookup
    454           *
    455           * @brief       Lookup entry index using specified NWK address.
    456           *
    457           * @param       nwkAddr - [in] NWK address
    458           * @param       entry   - [out] valid entry
    459           *
    460           * @return      ZStatus_t
    461           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    462          ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryLookup:
    463          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
    464            uint16         index;
    465            AddrMgrEntry_t addrMgrEntry;
    466          
    467            // initialize results
    468            *entry = NULL;
   \   000012   85..82       MOV       DPL,?V0
   \   000015   85..83       MOV       DPH,?V1
   \   000018   7400         MOV       A,#0x0
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   A3           INC       DPTR
   \   00001C   7400         MOV       A,#0x0
   \   00001E   F0           MOVX      @DPTR,A
    469          
    470            // verify data is available
    471            if ( ZDSecMgrEntries != NULL )
   \   00001F   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F8           MOV       R0,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F9           MOV       R1,A
   \   000027   E8           MOV       A,R0
   \   000028   49           ORL       A,R1
   \   000029   7003         JNZ       $+5
   \   00002B   02....       LJMP      ??ZDSecMgrEntryLookup_0 & 0xFFFF
    472            {
    473              addrMgrEntry.user    = ADDRMGR_USER_SECURITY;
   \   00002E   85..82       MOV       DPL,?XSP + 0
   \   000031   85..83       MOV       DPH,?XSP + 1
   \   000034   7402         MOV       A,#0x2
   \   000036   F0           MOVX      @DPTR,A
    474              addrMgrEntry.nwkAddr = nwkAddr;
   \   000037   7401         MOV       A,#0x1
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   E5..         MOV       A,?V2
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   A3           INC       DPTR
   \   000040   E5..         MOV       A,?V3
   \   000042   F0           MOVX      @DPTR,A
    475          
    476              if ( AddrMgrEntryLookupNwk( &addrMgrEntry ) == TRUE )
   \   000043                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000043   AA..         MOV       R2,?XSP + 0
   \   000045   AB..         MOV       R3,?XSP + 1
   \   000047   12....       LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   00004A   E9           MOV       A,R1
   \   00004B   6401         XRL       A,#0x1
   \   00004D   707F         JNZ       ??ZDSecMgrEntryLookup_0
    477              {
    478                for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   00004F   7E00         MOV       R6,#0x0
   \   000051   7F00         MOV       R7,#0x0
   \                     ??ZDSecMgrEntryLookup_1:
   \   000053   C3           CLR       C
   \   000054   EE           MOV       A,R6
   \   000055   9403         SUBB      A,#0x3
   \   000057   EF           MOV       A,R7
   \   000058   9400         SUBB      A,#0x0
   \   00005A   5072         JNC       ??ZDSecMgrEntryLookup_0
    479                {
    480                  if ( addrMgrEntry.index == ZDSecMgrEntries[index].ami )
   \   00005C   740B         MOV       A,#0xb
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   E0           MOVX      A,@DPTR
   \   000062   FA           MOV       R2,A
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   FB           MOV       R3,A
   \   000066   EE           MOV       A,R6
   \   000067   F8           MOV       R0,A
   \   000068   EF           MOV       A,R7
   \   000069   F9           MOV       R1,A
   \   00006A   E8           MOV       A,R0
   \   00006B   75F005       MOV       B,#0x5
   \   00006E   A4           MUL       AB
   \   00006F   C8           XCH       A,R0
   \   000070   ACF0         MOV       R4,B
   \   000072   75F000       MOV       B,#0x0
   \   000075   A4           MUL       AB
   \   000076   2C           ADD       A,R4
   \   000077   FC           MOV       R4,A
   \   000078   75F005       MOV       B,#0x5
   \   00007B   E9           MOV       A,R1
   \   00007C   A4           MUL       AB
   \   00007D   2C           ADD       A,R4
   \   00007E   F9           MOV       R1,A
   \   00007F   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000082   E0           MOVX      A,@DPTR
   \   000083   28           ADD       A,R0
   \   000084   FC           MOV       R4,A
   \   000085   A3           INC       DPTR
   \   000086   E0           MOVX      A,@DPTR
   \   000087   39           ADDC      A,R1
   \   000088   8C82         MOV       DPL,R4
   \   00008A   F583         MOV       DPH,A
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   6A           XRL       A,R2
   \   00008E   7003         JNZ       ??ZDSecMgrEntryLookup_2
   \   000090   A3           INC       DPTR
   \   000091   E0           MOVX      A,@DPTR
   \   000092   6B           XRL       A,R3
   \                     ??ZDSecMgrEntryLookup_2:
   \   000093   7032         JNZ       ??ZDSecMgrEntryLookup_3
    481                  {
    482                    // return successful results
    483                    *entry = &ZDSecMgrEntries[index];
   \   000095   EE           MOV       A,R6
   \   000096   F8           MOV       R0,A
   \   000097   EF           MOV       A,R7
   \   000098   F9           MOV       R1,A
   \   000099   E8           MOV       A,R0
   \   00009A   75F005       MOV       B,#0x5
   \   00009D   A4           MUL       AB
   \   00009E   C8           XCH       A,R0
   \   00009F   AAF0         MOV       R2,B
   \   0000A1   75F000       MOV       B,#0x0
   \   0000A4   A4           MUL       AB
   \   0000A5   2A           ADD       A,R2
   \   0000A6   FA           MOV       R2,A
   \   0000A7   75F005       MOV       B,#0x5
   \   0000AA   E9           MOV       A,R1
   \   0000AB   A4           MUL       AB
   \   0000AC   2A           ADD       A,R2
   \   0000AD   F9           MOV       R1,A
   \   0000AE   90....       MOV       DPTR,#ZDSecMgrEntries
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   28           ADD       A,R0
   \   0000B3   F8           MOV       R0,A
   \   0000B4   A3           INC       DPTR
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   39           ADDC      A,R1
   \   0000B7   F9           MOV       R1,A
   \   0000B8   85..82       MOV       DPL,?V0
   \   0000BB   85..83       MOV       DPH,?V1
   \   0000BE   E8           MOV       A,R0
   \   0000BF   F0           MOVX      @DPTR,A
   \   0000C0   A3           INC       DPTR
   \   0000C1   E9           MOV       A,R1
   \   0000C2   F0           MOVX      @DPTR,A
    484          
    485                    // break from loop
    486                    return ZSuccess;
   \   0000C3   7900         MOV       R1,#0x0
   \   0000C5   8009         SJMP      ??ZDSecMgrEntryLookup_4
    487                  }
    488                }
   \                     ??ZDSecMgrEntryLookup_3:
   \   0000C7   0E           INC       R6
   \   0000C8   EE           MOV       A,R6
   \   0000C9   7088         JNZ       ??ZDSecMgrEntryLookup_1
   \   0000CB   0F           INC       R7
   \   0000CC   8085         SJMP      ??ZDSecMgrEntryLookup_1
    489              }
    490            }
    491          
    492            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookup_0:
   \   0000CE   79C8         MOV       R1,#-0x38
   \                     ??ZDSecMgrEntryLookup_4:
   \   0000D0   740D         MOV       A,#0xd
   \   0000D2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D5   7F04         MOV       R7,#0x4
   \   0000D7   02....       LJMP      ?BANKED_LEAVE_XDATA
    493          }
    494          
    495          /******************************************************************************
    496           * @fn          ZDSecMgrEntryLookupAMI
    497           *
    498           * @brief       Lookup entry using specified address index
    499           *
    500           * @param       ami   - [in] Address Manager index
    501           * @param       entry - [out] valid entry
    502           *
    503           * @return      ZStatus_t
    504           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    505          ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryLookupAMI:
    506          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    507            uint16 index;
    508          
    509            // initialize results
    510            *entry = NULL;
   \   000009   8C82         MOV       DPL,R4
   \   00000B   8D83         MOV       DPH,R5
   \   00000D   7400         MOV       A,#0x0
   \   00000F   F0           MOVX      @DPTR,A
   \   000010   A3           INC       DPTR
   \   000011   7400         MOV       A,#0x0
   \   000013   F0           MOVX      @DPTR,A
    511          
    512            // verify data is available
    513            if ( ZDSecMgrEntries != NULL )
   \   000014   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F8           MOV       R0,A
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F9           MOV       R1,A
   \   00001C   E8           MOV       A,R0
   \   00001D   49           ORL       A,R1
   \   00001E   607D         JZ        ??ZDSecMgrEntryLookupAMI_0
    514            {
    515              for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   000020   7A00         MOV       R2,#0x0
   \   000022   7B00         MOV       R3,#0x0
   \                     ??ZDSecMgrEntryLookupAMI_1:
   \   000024   C3           CLR       C
   \   000025   EA           MOV       A,R2
   \   000026   9403         SUBB      A,#0x3
   \   000028   EB           MOV       A,R3
   \   000029   9400         SUBB      A,#0x0
   \   00002B   5070         JNC       ??ZDSecMgrEntryLookupAMI_0
    516              {
    517                if ( ZDSecMgrEntries[index].ami == ami )
   \   00002D   EA           MOV       A,R2
   \   00002E   F8           MOV       R0,A
   \   00002F   EB           MOV       A,R3
   \   000030   F9           MOV       R1,A
   \   000031   E8           MOV       A,R0
   \   000032   75F005       MOV       B,#0x5
   \   000035   A4           MUL       AB
   \   000036   C8           XCH       A,R0
   \   000037   85F0..       MOV       ?V0,B
   \   00003A   75F000       MOV       B,#0x0
   \   00003D   A4           MUL       AB
   \   00003E   25..         ADD       A,?V0
   \   000040   F5..         MOV       ?V0,A
   \   000042   75F005       MOV       B,#0x5
   \   000045   E9           MOV       A,R1
   \   000046   A4           MUL       AB
   \   000047   25..         ADD       A,?V0
   \   000049   F9           MOV       R1,A
   \   00004A   90....       MOV       DPTR,#ZDSecMgrEntries
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   28           ADD       A,R0
   \   00004F   F5..         MOV       ?V0,A
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   39           ADDC      A,R1
   \   000054   85..82       MOV       DPL,?V0
   \   000057   F583         MOV       DPH,A
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   6E           XRL       A,R6
   \   00005B   7003         JNZ       ??ZDSecMgrEntryLookupAMI_2
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   6F           XRL       A,R7
   \                     ??ZDSecMgrEntryLookupAMI_2:
   \   000060   7034         JNZ       ??ZDSecMgrEntryLookupAMI_3
    518                {
    519                  // return successful results
    520                  *entry = &ZDSecMgrEntries[index];
   \   000062   EA           MOV       A,R2
   \   000063   F8           MOV       R0,A
   \   000064   EB           MOV       A,R3
   \   000065   F9           MOV       R1,A
   \   000066   E8           MOV       A,R0
   \   000067   75F005       MOV       B,#0x5
   \   00006A   A4           MUL       AB
   \   00006B   C8           XCH       A,R0
   \   00006C   85F0..       MOV       ?V0,B
   \   00006F   75F000       MOV       B,#0x0
   \   000072   A4           MUL       AB
   \   000073   25..         ADD       A,?V0
   \   000075   F5..         MOV       ?V0,A
   \   000077   75F005       MOV       B,#0x5
   \   00007A   E9           MOV       A,R1
   \   00007B   A4           MUL       AB
   \   00007C   25..         ADD       A,?V0
   \   00007E   F9           MOV       R1,A
   \   00007F   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000082   E0           MOVX      A,@DPTR
   \   000083   28           ADD       A,R0
   \   000084   F8           MOV       R0,A
   \   000085   A3           INC       DPTR
   \   000086   E0           MOVX      A,@DPTR
   \   000087   39           ADDC      A,R1
   \   000088   F9           MOV       R1,A
   \   000089   8C82         MOV       DPL,R4
   \   00008B   8D83         MOV       DPH,R5
   \   00008D   E8           MOV       A,R0
   \   00008E   F0           MOVX      @DPTR,A
   \   00008F   A3           INC       DPTR
   \   000090   E9           MOV       A,R1
   \   000091   F0           MOVX      @DPTR,A
    521          
    522                  // break from loop
    523                  return ZSuccess;
   \   000092   7900         MOV       R1,#0x0
   \   000094   8009         SJMP      ??ZDSecMgrEntryLookupAMI_4
    524                }
    525              }
   \                     ??ZDSecMgrEntryLookupAMI_3:
   \   000096   0A           INC       R2
   \   000097   EA           MOV       A,R2
   \   000098   708A         JNZ       ??ZDSecMgrEntryLookupAMI_1
   \   00009A   0B           INC       R3
   \   00009B   8087         SJMP      ??ZDSecMgrEntryLookupAMI_1
    526            }
    527          
    528            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookupAMI_0:
   \   00009D   79C8         MOV       R1,#-0x38
   \                     ??ZDSecMgrEntryLookupAMI_4:
   \   00009F   7F01         MOV       R7,#0x1
   \   0000A1   02....       LJMP      ?BANKED_LEAVE_XDATA
    529          }
    530          
    531          /******************************************************************************
    532           * @fn          ZDSecMgrEntryLookupExt
    533           *
    534           * @brief       Lookup entry index using specified EXT address.
    535           *
    536           * @param       extAddr - [in] EXT address
    537           * @param       entry   - [out] valid entry
    538           *
    539           * @return      ZStatus_t
    540           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    541          ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryLookupExt:
    542          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
    543            ZStatus_t status;
    544            uint16    ami;
    545          
    546            // initialize results
    547            *entry = NULL;
   \   000012   8E82         MOV       DPL,R6
   \   000014   8F83         MOV       DPH,R7
   \   000016   7400         MOV       A,#0x0
   \   000018   F0           MOVX      @DPTR,A
   \   000019   A3           INC       DPTR
   \   00001A   7400         MOV       A,#0x0
   \   00001C   F0           MOVX      @DPTR,A
    548            status = ZNwkUnknownDevice;
   \   00001D   75..C8       MOV       ?V2,#-0x38
    549          
    550            // lookup address index
    551            if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
   \   000020                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   000020   AC..         MOV       R4,?XSP + 0
   \   000022   AD..         MOV       R5,?XSP + 1
   \   000024   AA..         MOV       R2,?V0
   \   000026   AB..         MOV       R3,?V1
   \   000028   12....       LCALL     `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   00002B   E9           MOV       A,R1
   \   00002C   7015         JNZ       ??ZDSecMgrEntryLookupExt_0
    552            {
    553              status = ZDSecMgrEntryLookupAMI( ami, entry );
   \   00002E                ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
   \   00002E   EE           MOV       A,R6
   \   00002F   FC           MOV       R4,A
   \   000030   EF           MOV       A,R7
   \   000031   FD           MOV       R5,A
   \   000032   85..82       MOV       DPL,?XSP + 0
   \   000035   85..83       MOV       DPH,?XSP + 1
   \   000038   E0           MOVX      A,@DPTR
   \   000039   FA           MOV       R2,A
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   FB           MOV       R3,A
   \   00003D   12....       LCALL     `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
   \   000040   E9           MOV       A,R1
   \   000041   F5..         MOV       ?V2,A
    554            }
    555          
    556            return status;
   \                     ??ZDSecMgrEntryLookupExt_0:
   \   000043   A9..         MOV       R1,?V2
   \   000045   7402         MOV       A,#0x2
   \   000047   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004A   7F03         MOV       R7,#0x3
   \   00004C   02....       LJMP      ?BANKED_LEAVE_XDATA
    557          }
    558          
    559          /******************************************************************************
    560           * @fn          ZDSecMgrEntryLookupExtGetIndex
    561           *
    562           * @brief       Lookup entry index using specified EXT address.
    563           *
    564           * @param       extAddr - [in] EXT address
    565           * @param       entryIndex - [out] valid index to the entry table
    566           *
    567           * @return      ZStatus_t
    568           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    569          ZStatus_t ZDSecMgrEntryLookupExtGetIndex( uint8* extAddr, ZDSecMgrEntry_t** entry, uint16* entryIndex )
   \                     ZDSecMgrEntryLookupExtGetIndex:
    570          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   \   000012   7410         MOV       A,#0x10
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V0,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V1,A
    571            uint16 ami;
    572            uint16 index;
    573          
    574            // lookup address index
    575            if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
   \   00001E                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   00001E   AC..         MOV       R4,?XSP + 0
   \   000020   AD..         MOV       R5,?XSP + 1
   \   000022   AA..         MOV       R2,?V4
   \   000024   AB..         MOV       R3,?V5
   \   000026   12....       LCALL     `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   000029   E9           MOV       A,R1
   \   00002A   6003         JZ        $+5
   \   00002C   02....       LJMP      ??ZDSecMgrEntryLookupExtGetIndex_0 & 0xFFFF
    576            {
    577              // verify data is available
    578              if ( ZDSecMgrEntries != NULL )
   \   00002F   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000032   E0           MOVX      A,@DPTR
   \   000033   F8           MOV       R0,A
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   F9           MOV       R1,A
   \   000037   E8           MOV       A,R0
   \   000038   49           ORL       A,R1
   \   000039   7003         JNZ       $+5
   \   00003B   02....       LJMP      ??ZDSecMgrEntryLookupExtGetIndex_0 & 0xFFFF
    579              {
    580                for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   00003E   75..00       MOV       ?V2,#0x0
   \   000041   75..00       MOV       ?V3,#0x0
   \                     ??ZDSecMgrEntryLookupExtGetIndex_1:
   \   000044   C3           CLR       C
   \   000045   E5..         MOV       A,?V2
   \   000047   9403         SUBB      A,#0x3
   \   000049   E5..         MOV       A,?V3
   \   00004B   9400         SUBB      A,#0x0
   \   00004D   4003         JC        $+5
   \   00004F   02....       LJMP      ??ZDSecMgrEntryLookupExtGetIndex_0 & 0xFFFF
    581                {
    582                  if ( ZDSecMgrEntries[index].ami == ami )
   \   000052   A8..         MOV       R0,?V2
   \   000054   A9..         MOV       R1,?V3
   \   000056   E8           MOV       A,R0
   \   000057   75F005       MOV       B,#0x5
   \   00005A   A4           MUL       AB
   \   00005B   C8           XCH       A,R0
   \   00005C   AAF0         MOV       R2,B
   \   00005E   75F000       MOV       B,#0x0
   \   000061   A4           MUL       AB
   \   000062   2A           ADD       A,R2
   \   000063   FA           MOV       R2,A
   \   000064   75F005       MOV       B,#0x5
   \   000067   E9           MOV       A,R1
   \   000068   A4           MUL       AB
   \   000069   2A           ADD       A,R2
   \   00006A   F9           MOV       R1,A
   \   00006B   90....       MOV       DPTR,#ZDSecMgrEntries
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   28           ADD       A,R0
   \   000070   FA           MOV       R2,A
   \   000071   A3           INC       DPTR
   \   000072   E0           MOVX      A,@DPTR
   \   000073   39           ADDC      A,R1
   \   000074   8A82         MOV       DPL,R2
   \   000076   F583         MOV       DPH,A
   \   000078   E0           MOVX      A,@DPTR
   \   000079   F8           MOV       R0,A
   \   00007A   A3           INC       DPTR
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   F9           MOV       R1,A
   \   00007D   85..82       MOV       DPL,?XSP + 0
   \   000080   85..83       MOV       DPH,?XSP + 1
   \   000083   E0           MOVX      A,@DPTR
   \   000084   68           XRL       A,R0
   \   000085   7003         JNZ       ??ZDSecMgrEntryLookupExtGetIndex_2
   \   000087   A3           INC       DPTR
   \   000088   E0           MOVX      A,@DPTR
   \   000089   69           XRL       A,R1
   \                     ??ZDSecMgrEntryLookupExtGetIndex_2:
   \   00008A   703D         JNZ       ??ZDSecMgrEntryLookupExtGetIndex_3
    583                  {
    584                    // return successful results
    585                    *entry = &ZDSecMgrEntries[index];
   \   00008C   A8..         MOV       R0,?V2
   \   00008E   A9..         MOV       R1,?V3
   \   000090   E8           MOV       A,R0
   \   000091   75F005       MOV       B,#0x5
   \   000094   A4           MUL       AB
   \   000095   C8           XCH       A,R0
   \   000096   AAF0         MOV       R2,B
   \   000098   75F000       MOV       B,#0x0
   \   00009B   A4           MUL       AB
   \   00009C   2A           ADD       A,R2
   \   00009D   FA           MOV       R2,A
   \   00009E   75F005       MOV       B,#0x5
   \   0000A1   E9           MOV       A,R1
   \   0000A2   A4           MUL       AB
   \   0000A3   2A           ADD       A,R2
   \   0000A4   F9           MOV       R1,A
   \   0000A5   90....       MOV       DPTR,#ZDSecMgrEntries
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   28           ADD       A,R0
   \   0000AA   F8           MOV       R0,A
   \   0000AB   A3           INC       DPTR
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   39           ADDC      A,R1
   \   0000AE   F9           MOV       R1,A
   \   0000AF   8E82         MOV       DPL,R6
   \   0000B1   8F83         MOV       DPH,R7
   \   0000B3   E8           MOV       A,R0
   \   0000B4   F0           MOVX      @DPTR,A
   \   0000B5   A3           INC       DPTR
   \   0000B6   E9           MOV       A,R1
   \   0000B7   F0           MOVX      @DPTR,A
    586                    *entryIndex = index;
   \   0000B8   85..82       MOV       DPL,?V0
   \   0000BB   85..83       MOV       DPH,?V1
   \   0000BE   E5..         MOV       A,?V2
   \   0000C0   F0           MOVX      @DPTR,A
   \   0000C1   A3           INC       DPTR
   \   0000C2   E5..         MOV       A,?V3
   \   0000C4   F0           MOVX      @DPTR,A
    587          
    588                    // break from loop
    589                    return ZSuccess;
   \   0000C5   7900         MOV       R1,#0x0
   \   0000C7   800D         SJMP      ??ZDSecMgrEntryLookupExtGetIndex_4
    590                  }
    591                }
   \                     ??ZDSecMgrEntryLookupExtGetIndex_3:
   \   0000C9   05..         INC       ?V2
   \   0000CB   E5..         MOV       A,?V2
   \   0000CD   7002         JNZ       ??ZDSecMgrEntryLookupExtGetIndex_5
   \   0000CF   05..         INC       ?V3
   \                     ??ZDSecMgrEntryLookupExtGetIndex_5:
   \   0000D1   02....       LJMP      ??ZDSecMgrEntryLookupExtGetIndex_1 & 0xFFFF
    592              }
    593            }
    594          
    595            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookupExtGetIndex_0:
   \   0000D4   79C8         MOV       R1,#-0x38
   \                     ??ZDSecMgrEntryLookupExtGetIndex_4:
   \   0000D6   7402         MOV       A,#0x2
   \   0000D8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DB   7F06         MOV       R7,#0x6
   \   0000DD   02....       LJMP      ?BANKED_LEAVE_XDATA
    596          }
    597          
    598          /******************************************************************************
    599           * @fn          ZDSecMgrEntryLookupAMIGetIndex
    600           *
    601           * @brief       Lookup entry using specified address index
    602           *
    603           * @param       ami   - [in] Address Manager index
    604           * @param       entryIndex - [out] valid index to the entry table
    605           *
    606           * @return      ZStatus_t
    607           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    608          ZStatus_t ZDSecMgrEntryLookupAMIGetIndex( uint16 ami, uint16* entryIndex )
   \                     ZDSecMgrEntryLookupAMIGetIndex:
    609          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    610            uint16 index;
    611          
    612            // verify data is available
    613            if ( ZDSecMgrEntries != NULL )
   \   000005   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F8           MOV       R0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   E8           MOV       A,R0
   \   00000E   49           ORL       A,R1
   \   00000F   6056         JZ        ??ZDSecMgrEntryLookupAMIGetIndex_0
    614            {
    615              for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   000011   7E00         MOV       R6,#0x0
   \   000013   7F00         MOV       R7,#0x0
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_1:
   \   000015   C3           CLR       C
   \   000016   EE           MOV       A,R6
   \   000017   9403         SUBB      A,#0x3
   \   000019   EF           MOV       A,R7
   \   00001A   9400         SUBB      A,#0x0
   \   00001C   5049         JNC       ??ZDSecMgrEntryLookupAMIGetIndex_0
    616              {
    617                if ( ZDSecMgrEntries[index].ami == ami )
   \   00001E   EE           MOV       A,R6
   \   00001F   F8           MOV       R0,A
   \   000020   EF           MOV       A,R7
   \   000021   F9           MOV       R1,A
   \   000022   E8           MOV       A,R0
   \   000023   75F005       MOV       B,#0x5
   \   000026   A4           MUL       AB
   \   000027   C8           XCH       A,R0
   \   000028   85F0..       MOV       ?V0,B
   \   00002B   75F000       MOV       B,#0x0
   \   00002E   A4           MUL       AB
   \   00002F   25..         ADD       A,?V0
   \   000031   F5..         MOV       ?V0,A
   \   000033   75F005       MOV       B,#0x5
   \   000036   E9           MOV       A,R1
   \   000037   A4           MUL       AB
   \   000038   25..         ADD       A,?V0
   \   00003A   F9           MOV       R1,A
   \   00003B   90....       MOV       DPTR,#ZDSecMgrEntries
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   28           ADD       A,R0
   \   000040   F5..         MOV       ?V0,A
   \   000042   A3           INC       DPTR
   \   000043   E0           MOVX      A,@DPTR
   \   000044   39           ADDC      A,R1
   \   000045   85..82       MOV       DPL,?V0
   \   000048   F583         MOV       DPH,A
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   6A           XRL       A,R2
   \   00004C   7003         JNZ       ??ZDSecMgrEntryLookupAMIGetIndex_2
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   6B           XRL       A,R3
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_2:
   \   000051   700D         JNZ       ??ZDSecMgrEntryLookupAMIGetIndex_3
    618                {
    619                  // return successful results
    620                  *entryIndex = index;
   \   000053   8C82         MOV       DPL,R4
   \   000055   8D83         MOV       DPH,R5
   \   000057   EE           MOV       A,R6
   \   000058   F0           MOVX      @DPTR,A
   \   000059   A3           INC       DPTR
   \   00005A   EF           MOV       A,R7
   \   00005B   F0           MOVX      @DPTR,A
    621          
    622                  // break from loop
    623                  return ZSuccess;
   \   00005C   7900         MOV       R1,#0x0
   \   00005E   8009         SJMP      ??ZDSecMgrEntryLookupAMIGetIndex_4
    624                }
    625              }
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_3:
   \   000060   0E           INC       R6
   \   000061   EE           MOV       A,R6
   \   000062   70B1         JNZ       ??ZDSecMgrEntryLookupAMIGetIndex_1
   \   000064   0F           INC       R7
   \   000065   80AE         SJMP      ??ZDSecMgrEntryLookupAMIGetIndex_1
    626            }
    627          
    628            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_0:
   \   000067   79C8         MOV       R1,#-0x38
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_4:
   \   000069   7F01         MOV       R7,#0x1
   \   00006B   02....       LJMP      ?BANKED_LEAVE_XDATA
    629          }
    630          
    631          /******************************************************************************
    632           * @fn          ZDSecMgrEntryFree
    633           *
    634           * @brief       Free entry.
    635           *
    636           * @param       entry - [in] valid entry
    637           *
    638           * @return      ZStatus_t
    639           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    640          void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry )
   \                     ZDSecMgrEntryFree:
    641          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    642            APSME_LinkKeyData_t   *pApsLinkKey = NULL;
   \   00000E   75..00       MOV       ?V2,#0x0
   \   000011   75..00       MOV       ?V3,#0x0
    643          
    644          #if defined ( NV_RESTORE )
    645            ZStatus_t status;
    646            uint16 entryIndex;
    647          
    648            status = ZDSecMgrEntryLookupAMIGetIndex( entry->ami, &entryIndex );
   \   000014                ; Setup parameters for call to function ZDSecMgrEntryLookupAMIGetIndex
   \   000014   AC..         MOV       R4,?XSP + 0
   \   000016   AD..         MOV       R5,?XSP + 1
   \   000018   8E82         MOV       DPL,R6
   \   00001A   8F83         MOV       DPH,R7
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   FA           MOV       R2,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   FB           MOV       R3,A
   \   000021   12....       LCALL     `??ZDSecMgrEntryLookupAMIGetIndex::?relay`; Banked call to: ZDSecMgrEntryLookupAMIGetIndex
   \   000024   E9           MOV       A,R1
   \   000025   F5..         MOV       ?V0,A
    649          #endif
    650          
    651            pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   000027                ; Setup parameters for call to function osal_mem_alloc
   \   000027   7A18         MOV       R2,#0x18
   \   000029   7B00         MOV       R3,#0x0
   \   00002B   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002E   8A..         MOV       ?V4,R2
   \   000030   8B..         MOV       ?V5,R3
   \   000032   85....       MOV       ?V2,?V4
   \   000035   85....       MOV       ?V3,?V5
    652          
    653            if (pApsLinkKey != NULL)
   \   000038   E5..         MOV       A,?V2
   \   00003A   45..         ORL       A,?V3
   \   00003C   6049         JZ        ??ZDSecMgrEntryFree_0
    654            {
    655              osal_memset( pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   00003E                ; Setup parameters for call to function osal_memset
   \   00003E   7C18         MOV       R4,#0x18
   \   000040   7D00         MOV       R5,#0x0
   \   000042   7900         MOV       R1,#0x0
   \   000044   AA..         MOV       R2,?V2
   \   000046   AB..         MOV       R3,?V3
   \   000048   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    656          
    657              // Clear the APS Link key in NV
    658              osal_nv_write( entry->keyNvId, 0,
    659                                  sizeof(APSME_LinkKeyData_t), pApsLinkKey);
   \   00004B                ; Setup parameters for call to function osal_nv_write
   \   00004B   78..         MOV       R0,#?V2
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000050   75..18       MOV       ?V4,#0x18
   \   000053   75..00       MOV       ?V5,#0x0
   \   000056   78..         MOV       R0,#?V4
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005B   7C00         MOV       R4,#0x0
   \   00005D   7D00         MOV       R5,#0x0
   \   00005F   8E82         MOV       DPL,R6
   \   000061   8F83         MOV       DPH,R7
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   E0           MOVX      A,@DPTR
   \   000066   FA           MOV       R2,A
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   FB           MOV       R3,A
   \   00006A   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00006D   7404         MOV       A,#0x4
   \   00006F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000072   E9           MOV       A,R1
    660          
    661              // set entry to invalid Key
    662              entry->keyNvId = SEC_NO_KEY_NV_ID;
   \   000073   8E82         MOV       DPL,R6
   \   000075   8F83         MOV       DPH,R7
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   7400         MOV       A,#0x0
   \   00007B   F0           MOVX      @DPTR,A
   \   00007C   A3           INC       DPTR
   \   00007D   7400         MOV       A,#0x0
   \   00007F   F0           MOVX      @DPTR,A
    663          
    664              osal_mem_free(pApsLinkKey);
   \   000080                ; Setup parameters for call to function osal_mem_free
   \   000080   AA..         MOV       R2,?V2
   \   000082   AB..         MOV       R3,?V3
   \   000084   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    665            }
    666          
    667            // marking the entry as INVALID_NODE_ADDR
    668            entry->ami = INVALID_NODE_ADDR;
   \                     ??ZDSecMgrEntryFree_0:
   \   000087   8E82         MOV       DPL,R6
   \   000089   8F83         MOV       DPH,R7
   \   00008B   74FE         MOV       A,#-0x2
   \   00008D   F0           MOVX      @DPTR,A
   \   00008E   A3           INC       DPTR
   \   00008F   74FF         MOV       A,#-0x1
   \   000091   F0           MOVX      @DPTR,A
    669          
    670            // set to default value
    671            entry->authenticateOption = ZDSecMgr_Not_Authenticated;
   \   000092   8E82         MOV       DPL,R6
   \   000094   8F83         MOV       DPH,R7
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   7400         MOV       A,#0x0
   \   00009C   F0           MOVX      @DPTR,A
    672          
    673          #if defined ( NV_RESTORE )
    674            if ( status == ZSuccess )
   \   00009D   E5..         MOV       A,?V0
   \   00009F   700E         JNZ       ??ZDSecMgrEntryFree_1
    675            {
    676              ZDSecMgrUpdateNV(entryIndex);
   \   0000A1                ; Setup parameters for call to function ZDSecMgrUpdateNV
   \   0000A1   85..82       MOV       DPL,?XSP + 0
   \   0000A4   85..83       MOV       DPH,?XSP + 1
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   FA           MOV       R2,A
   \   0000A9   A3           INC       DPTR
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   FB           MOV       R3,A
   \   0000AC   12....       LCALL     `??ZDSecMgrUpdateNV::?relay`; Banked call to: ZDSecMgrUpdateNV
    677            }
    678          #endif
    679          }
   \                     ??ZDSecMgrEntryFree_1:
   \   0000AF   7402         MOV       A,#0x2
   \   0000B1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B4   7F06         MOV       R7,#0x6
   \   0000B6   02....       LJMP      ?BANKED_LEAVE_XDATA
    680          
    681          /******************************************************************************
    682           * @fn          ZDSecMgrEntryNew
    683           *
    684           * @brief       Get a new entry.
    685           *
    686           * @param       entry - [out] valid entry
    687           *
    688           * @return      ZStatus_t
    689           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    690          ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryNew:
    691          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FC           MOV       R4,A
   \   000007   EB           MOV       A,R3
   \   000008   FD           MOV       R5,A
    692            uint16 index;
    693          
    694            // initialize results
    695            *entry = NULL;
   \   000009   8C82         MOV       DPL,R4
   \   00000B   8D83         MOV       DPH,R5
   \   00000D   7400         MOV       A,#0x0
   \   00000F   F0           MOVX      @DPTR,A
   \   000010   A3           INC       DPTR
   \   000011   7400         MOV       A,#0x0
   \   000013   F0           MOVX      @DPTR,A
    696          
    697            // verify data is available
    698            if ( ZDSecMgrEntries != NULL )
   \   000014   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F8           MOV       R0,A
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F9           MOV       R1,A
   \   00001C   E8           MOV       A,R0
   \   00001D   49           ORL       A,R1
   \   00001E   7003         JNZ       $+5
   \   000020   02....       LJMP      ??ZDSecMgrEntryNew_0 & 0xFFFF
    699            {
    700              // find available entry
    701              for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   000023   7A00         MOV       R2,#0x0
   \   000025   7B00         MOV       R3,#0x0
   \                     ??ZDSecMgrEntryNew_1:
   \   000027   C3           CLR       C
   \   000028   EA           MOV       A,R2
   \   000029   9403         SUBB      A,#0x3
   \   00002B   EB           MOV       A,R3
   \   00002C   9400         SUBB      A,#0x0
   \   00002E   4003         JC        $+5
   \   000030   02....       LJMP      ??ZDSecMgrEntryNew_0 & 0xFFFF
    702              {
    703                if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
   \   000033   EA           MOV       A,R2
   \   000034   F8           MOV       R0,A
   \   000035   EB           MOV       A,R3
   \   000036   F9           MOV       R1,A
   \   000037   E8           MOV       A,R0
   \   000038   75F005       MOV       B,#0x5
   \   00003B   A4           MUL       AB
   \   00003C   C8           XCH       A,R0
   \   00003D   AEF0         MOV       R6,B
   \   00003F   75F000       MOV       B,#0x0
   \   000042   A4           MUL       AB
   \   000043   2E           ADD       A,R6
   \   000044   FE           MOV       R6,A
   \   000045   75F005       MOV       B,#0x5
   \   000048   E9           MOV       A,R1
   \   000049   A4           MUL       AB
   \   00004A   2E           ADD       A,R6
   \   00004B   F9           MOV       R1,A
   \   00004C   90....       MOV       DPTR,#ZDSecMgrEntries
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   28           ADD       A,R0
   \   000051   FE           MOV       R6,A
   \   000052   A3           INC       DPTR
   \   000053   E0           MOVX      A,@DPTR
   \   000054   39           ADDC      A,R1
   \   000055   8E82         MOV       DPL,R6
   \   000057   F583         MOV       DPH,A
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   64FE         XRL       A,#0xfe
   \   00005C   7004         JNZ       ??ZDSecMgrEntryNew_2
   \   00005E   A3           INC       DPTR
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   64FF         XRL       A,#0xff
   \                     ??ZDSecMgrEntryNew_2:
   \   000062   705D         JNZ       ??ZDSecMgrEntryNew_3
    704                {
    705                  // return successful result
    706                  *entry = &ZDSecMgrEntries[index];
   \   000064   EA           MOV       A,R2
   \   000065   F8           MOV       R0,A
   \   000066   EB           MOV       A,R3
   \   000067   F9           MOV       R1,A
   \   000068   E8           MOV       A,R0
   \   000069   75F005       MOV       B,#0x5
   \   00006C   A4           MUL       AB
   \   00006D   C8           XCH       A,R0
   \   00006E   AEF0         MOV       R6,B
   \   000070   75F000       MOV       B,#0x0
   \   000073   A4           MUL       AB
   \   000074   2E           ADD       A,R6
   \   000075   FE           MOV       R6,A
   \   000076   75F005       MOV       B,#0x5
   \   000079   E9           MOV       A,R1
   \   00007A   A4           MUL       AB
   \   00007B   2E           ADD       A,R6
   \   00007C   F9           MOV       R1,A
   \   00007D   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000080   E0           MOVX      A,@DPTR
   \   000081   28           ADD       A,R0
   \   000082   F8           MOV       R0,A
   \   000083   A3           INC       DPTR
   \   000084   E0           MOVX      A,@DPTR
   \   000085   39           ADDC      A,R1
   \   000086   F9           MOV       R1,A
   \   000087   8C82         MOV       DPL,R4
   \   000089   8D83         MOV       DPH,R5
   \   00008B   E8           MOV       A,R0
   \   00008C   F0           MOVX      @DPTR,A
   \   00008D   A3           INC       DPTR
   \   00008E   E9           MOV       A,R1
   \   00008F   F0           MOVX      @DPTR,A
    707          
    708                  // Set the authentication option to default
    709                  ZDSecMgrEntries[index].authenticateOption = ZDSecMgr_Not_Authenticated;
   \   000090   EA           MOV       A,R2
   \   000091   F8           MOV       R0,A
   \   000092   EB           MOV       A,R3
   \   000093   F9           MOV       R1,A
   \   000094   E8           MOV       A,R0
   \   000095   75F005       MOV       B,#0x5
   \   000098   A4           MUL       AB
   \   000099   C8           XCH       A,R0
   \   00009A   AEF0         MOV       R6,B
   \   00009C   75F000       MOV       B,#0x0
   \   00009F   A4           MUL       AB
   \   0000A0   2E           ADD       A,R6
   \   0000A1   FE           MOV       R6,A
   \   0000A2   75F005       MOV       B,#0x5
   \   0000A5   E9           MOV       A,R1
   \   0000A6   A4           MUL       AB
   \   0000A7   2E           ADD       A,R6
   \   0000A8   F9           MOV       R1,A
   \   0000A9   90....       MOV       DPTR,#ZDSecMgrEntries
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   28           ADD       A,R0
   \   0000AE   FE           MOV       R6,A
   \   0000AF   A3           INC       DPTR
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   39           ADDC      A,R1
   \   0000B2   8E82         MOV       DPL,R6
   \   0000B4   F583         MOV       DPH,A
   \   0000B6   A3           INC       DPTR
   \   0000B7   A3           INC       DPTR
   \   0000B8   A3           INC       DPTR
   \   0000B9   A3           INC       DPTR
   \   0000BA   7400         MOV       A,#0x0
   \   0000BC   F0           MOVX      @DPTR,A
    710          
    711                  // break from loop
    712                  return ZSuccess;
   \   0000BD   7900         MOV       R1,#0x0
   \   0000BF   800A         SJMP      ??ZDSecMgrEntryNew_4
    713                }
    714              }
   \                     ??ZDSecMgrEntryNew_3:
   \   0000C1   0A           INC       R2
   \   0000C2   EA           MOV       A,R2
   \   0000C3   7001         JNZ       ??ZDSecMgrEntryNew_5
   \   0000C5   0B           INC       R3
   \                     ??ZDSecMgrEntryNew_5:
   \   0000C6   02....       LJMP      ??ZDSecMgrEntryNew_1 & 0xFFFF
    715            }
    716          
    717            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryNew_0:
   \   0000C9   79C8         MOV       R1,#-0x38
   \                     ??ZDSecMgrEntryNew_4:
   \   0000CB   7F01         MOV       R7,#0x1
   \   0000CD   02....       LJMP      ?BANKED_LEAVE_XDATA
    718          }
    719          
    720          /******************************************************************************
    721           * @fn          ZDSecMgrAppKeyGet
    722           *
    723           * @brief       get an APP key - option APP(MASTER or LINK) key
    724           *
    725           * @param       initNwkAddr - [in] NWK address of initiator device
    726           * @param       initExtAddr - [in] EXT address of initiator device
    727           * @param       partNwkAddr - [in] NWK address of partner device
    728           * @param       partExtAddr - [in] EXT address of partner device
    729           * @param       key         - [out] APP(MASTER or LINK) key
    730           * @param       keyType     - [out] APP(MASTER or LINK) key type
    731           *
    732           * @return      ZStatus_t
    733           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    734          uint8 ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;    // Set the default key type
   \                     ZDSecMgrAppKeyType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for ZDSecMgrAppKeyType>`
   \   000001                REQUIRE __INIT_XDATA_I
    735                                                           // to KEY_TYPE_APP_LINK since
    736                                                           // only specific requirement
    737                                                           // right now comes from SE profile

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    738          ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
   \                     ZDSecMgrAppKeyGet:
    739                                       uint8*  initExtAddr,
    740                                       uint16  partNwkAddr,
    741                                       uint8*  partExtAddr,
    742                                       uint8** key,
    743                                       uint8*  keyType )
    744          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   \   00000D   7412         MOV       A,#0x12
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F8           MOV       R0,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F9           MOV       R1,A
   \   000017   88..         MOV       ?V0,R0
   \   000019   89..         MOV       ?V1,R1
   \   00001B   7414         MOV       A,#0x14
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F8           MOV       R0,A
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F9           MOV       R1,A
   \   000025   88..         MOV       ?V4,R0
   \   000027   89..         MOV       ?V5,R1
    745            // Intentionally unreferenced parameters
    746            (void)initNwkAddr;
    747            (void)initExtAddr;
    748            (void)partNwkAddr;
    749            (void)partExtAddr;
    750          
    751            //---------------------------------------------------------------------------
    752            // note:
    753            // should use a robust mechanism to generate keys, for example
    754            // combine EXT addresses and call a hash function
    755            //---------------------------------------------------------------------------
    756            SSP_GetTrueRand( SEC_KEY_LEN, *key );
   \   000029                ; Setup parameters for call to function SSP_GetTrueRand
   \   000029   85..82       MOV       DPL,?V0
   \   00002C   85..83       MOV       DPH,?V1
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   FA           MOV       R2,A
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   FB           MOV       R3,A
   \   000034   7910         MOV       R1,#0x10
   \   000036   12....       LCALL     `??SSP_GetTrueRand::?relay`; Banked call to: SSP_GetTrueRand
    757          
    758            *keyType = ZDSecMgrAppKeyType;
   \   000039   90....       MOV       DPTR,#ZDSecMgrAppKeyType
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   C0E0         PUSH      A
   \   00003F   85..82       MOV       DPL,?V4
   \   000042   85..83       MOV       DPH,?V5
   \   000045   D0E0         POP       A
   \   000047   F0           MOVX      @DPTR,A
    759          
    760            return ZSuccess;
   \   000048   7900         MOV       R1,#0x0
   \   00004A   7F06         MOV       R7,#0x6
   \   00004C   02....       LJMP      ?BANKED_LEAVE_XDATA
    761          }
    762          
    763          
    764          
    765          
    766          /******************************************************************************
    767           * @fn          ZDSecMgrAppKeyReq
    768           *
    769           * @brief       Process request for APP key between two devices.
    770           *
    771           * @param       device - [in] ZDO_RequestKeyInd_t, request info
    772           *
    773           * @return      none
    774           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    775          void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind )
   \                     ZDSecMgrAppKeyReq:
    776          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 39
   \   000005   74D9         MOV       A,#-0x27
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    777            APSME_TransportKeyReq_t req;
    778            uint8                   initExtAddr[Z_EXTADDR_LEN];
    779            uint16                  partNwkAddr;
    780            uint8                   key[SEC_KEY_LEN];
    781          
    782          
    783            // validate initiator and partner
    784            if ( ( APSME_LookupNwkAddr( ind->partExtAddr, &partNwkAddr ) == TRUE ) &&
    785                 ( APSME_LookupExtAddr( ind->srcAddr, initExtAddr ) == TRUE      )   )
   \   00000E                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   00000E   AC..         MOV       R4,?XSP + 0
   \   000010   AD..         MOV       R5,?XSP + 1
   \   000012   EE           MOV       A,R6
   \   000013   2405         ADD       A,#0x5
   \   000015   FA           MOV       R2,A
   \   000016   E4           CLR       A
   \   000017   3F           ADDC      A,R7
   \   000018   FB           MOV       R3,A
   \   000019   12....       LCALL     `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   00001C   E9           MOV       A,R1
   \   00001D   6401         XRL       A,#0x1
   \   00001F   6003         JZ        $+5
   \   000021   02....       LJMP      ??ZDSecMgrAppKeyReq_0 & 0xFFFF
   \   000024                ; Setup parameters for call to function APSME_LookupExtAddr
   \   000024   740F         MOV       A,#0xf
   \   000026   12....       LCALL     ?XSTACK_DISP102_8
   \   000029   8E82         MOV       DPL,R6
   \   00002B   8F83         MOV       DPH,R7
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   FA           MOV       R2,A
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   FB           MOV       R3,A
   \   000034   12....       LCALL     `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
   \   000037   E9           MOV       A,R1
   \   000038   6401         XRL       A,#0x1
   \   00003A   6003         JZ        $+5
   \   00003C   02....       LJMP      ??ZDSecMgrAppKeyReq_0 & 0xFFFF
    786            {
    787              // point the key to some memory
    788              req.key = key;
   \   00003F   7417         MOV       A,#0x17
   \   000041   12....       LCALL     ?XSTACK_DISP100_8
   \   000044   7406         MOV       A,#0x6
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   E8           MOV       A,R0
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B   A3           INC       DPTR
   \   00004C   E9           MOV       A,R1
   \   00004D   F0           MOVX      @DPTR,A
    789          
    790              // get an APP key - option APP (MASTER or LINK) key
    791              if ( ZDSecMgrAppKeyGet( ind->srcAddr,
    792                                      initExtAddr,
    793                                      partNwkAddr,
    794                                      ind->partExtAddr,
    795                                      &req.key,
    796                                      &req.keyType ) == ZSuccess )
   \   00004E                ; Setup parameters for call to function ZDSecMgrAppKeyGet
   \   00004E   7404         MOV       A,#0x4
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   8582..       MOV       ?V0,DPL
   \   000056   8583..       MOV       ?V1,DPH
   \   000059   78..         MOV       R0,#?V0
   \   00005B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005E   7408         MOV       A,#0x8
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   8582..       MOV       ?V0,DPL
   \   000066   8583..       MOV       ?V1,DPH
   \   000069   78..         MOV       R0,#?V0
   \   00006B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006E   EE           MOV       A,R6
   \   00006F   2405         ADD       A,#0x5
   \   000071   F5..         MOV       ?V0,A
   \   000073   E4           CLR       A
   \   000074   3F           ADDC      A,R7
   \   000075   F5..         MOV       ?V1,A
   \   000077   78..         MOV       R0,#?V0
   \   000079   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007C   7406         MOV       A,#0x6
   \   00007E   12....       LCALL     ?XSTACK_DISP0_8
   \   000081   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000084   7417         MOV       A,#0x17
   \   000086   12....       LCALL     ?XSTACK_DISP102_8
   \   000089   8E82         MOV       DPL,R6
   \   00008B   8F83         MOV       DPH,R7
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   FA           MOV       R2,A
   \   000091   A3           INC       DPTR
   \   000092   E0           MOVX      A,@DPTR
   \   000093   FB           MOV       R3,A
   \   000094   12....       LCALL     `??ZDSecMgrAppKeyGet::?relay`; Banked call to: ZDSecMgrAppKeyGet
   \   000097   7408         MOV       A,#0x8
   \   000099   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009C   E9           MOV       A,R1
   \   00009D   6003         JZ        $+5
   \   00009F   02....       LJMP      ??ZDSecMgrAppKeyReq_0 & 0xFFFF
    797              {
    798                // always secure
    799                req.nwkSecure = TRUE;
   \   0000A2   740C         MOV       A,#0xc
   \   0000A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A7   7401         MOV       A,#0x1
   \   0000A9   F0           MOVX      @DPTR,A
    800                req.apsSecure = TRUE;
   \   0000AA   740B         MOV       A,#0xb
   \   0000AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AF   7401         MOV       A,#0x1
   \   0000B1   F0           MOVX      @DPTR,A
    801                req.tunnel    = NULL;
   \   0000B2   740D         MOV       A,#0xd
   \   0000B4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B7   7400         MOV       A,#0x0
   \   0000B9   F0           MOVX      @DPTR,A
   \   0000BA   A3           INC       DPTR
   \   0000BB   7400         MOV       A,#0x0
   \   0000BD   F0           MOVX      @DPTR,A
    802          
    803                // send key to initiator device
    804                req.dstAddr   = ind->srcAddr;
   \   0000BE   8E82         MOV       DPL,R6
   \   0000C0   8F83         MOV       DPH,R7
   \   0000C2   A3           INC       DPTR
   \   0000C3   A3           INC       DPTR
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   F8           MOV       R0,A
   \   0000C6   A3           INC       DPTR
   \   0000C7   E0           MOVX      A,@DPTR
   \   0000C8   F9           MOV       R1,A
   \   0000C9   7402         MOV       A,#0x2
   \   0000CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CE   E8           MOV       A,R0
   \   0000CF   F0           MOVX      @DPTR,A
   \   0000D0   A3           INC       DPTR
   \   0000D1   E9           MOV       A,R1
   \   0000D2   F0           MOVX      @DPTR,A
    805                req.extAddr   = ind->partExtAddr;
   \   0000D3   EE           MOV       A,R6
   \   0000D4   2405         ADD       A,#0x5
   \   0000D6   F8           MOV       R0,A
   \   0000D7   E4           CLR       A
   \   0000D8   3F           ADDC      A,R7
   \   0000D9   F9           MOV       R1,A
   \   0000DA   7408         MOV       A,#0x8
   \   0000DC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DF   E8           MOV       A,R0
   \   0000E0   F0           MOVX      @DPTR,A
   \   0000E1   A3           INC       DPTR
   \   0000E2   E9           MOV       A,R1
   \   0000E3   F0           MOVX      @DPTR,A
    806                req.initiator = TRUE;
   \   0000E4   740A         MOV       A,#0xa
   \   0000E6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E9   7401         MOV       A,#0x1
   \   0000EB   F0           MOVX      @DPTR,A
    807                APSME_TransportKeyReq( &req );
   \   0000EC                ; Setup parameters for call to function APSME_TransportKeyReq
   \   0000EC   7402         MOV       A,#0x2
   \   0000EE   12....       LCALL     ?XSTACK_DISP101_8
   \   0000F1   12....       LCALL     `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
   \   0000F4   E9           MOV       A,R1
    808          
    809                // send key to partner device
    810                req.dstAddr   = partNwkAddr;
   \   0000F5   85..82       MOV       DPL,?XSP + 0
   \   0000F8   85..83       MOV       DPH,?XSP + 1
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   F8           MOV       R0,A
   \   0000FD   A3           INC       DPTR
   \   0000FE   E0           MOVX      A,@DPTR
   \   0000FF   F9           MOV       R1,A
   \   000100   7402         MOV       A,#0x2
   \   000102   12....       LCALL     ?XSTACK_DISP0_8
   \   000105   E8           MOV       A,R0
   \   000106   F0           MOVX      @DPTR,A
   \   000107   A3           INC       DPTR
   \   000108   E9           MOV       A,R1
   \   000109   F0           MOVX      @DPTR,A
    811                req.extAddr   = initExtAddr;
   \   00010A   740F         MOV       A,#0xf
   \   00010C   12....       LCALL     ?XSTACK_DISP100_8
   \   00010F   7408         MOV       A,#0x8
   \   000111   12....       LCALL     ?XSTACK_DISP0_8
   \   000114   E8           MOV       A,R0
   \   000115   F0           MOVX      @DPTR,A
   \   000116   A3           INC       DPTR
   \   000117   E9           MOV       A,R1
   \   000118   F0           MOVX      @DPTR,A
    812                req.initiator = FALSE;
   \   000119   740A         MOV       A,#0xa
   \   00011B   12....       LCALL     ?XSTACK_DISP0_8
   \   00011E   7400         MOV       A,#0x0
   \   000120   F0           MOVX      @DPTR,A
    813          
    814                APSME_TransportKeyReq( &req );
   \   000121                ; Setup parameters for call to function APSME_TransportKeyReq
   \   000121   7402         MOV       A,#0x2
   \   000123   12....       LCALL     ?XSTACK_DISP101_8
   \   000126   12....       LCALL     `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
   \   000129   E9           MOV       A,R1
    815          
    816                // clear copy of key in RAM
    817                osal_memset( key, 0x00, SEC_KEY_LEN);
   \   00012A                ; Setup parameters for call to function osal_memset
   \   00012A   7C10         MOV       R4,#0x10
   \   00012C   7D00         MOV       R5,#0x0
   \   00012E   7900         MOV       R1,#0x0
   \   000130   7417         MOV       A,#0x17
   \   000132   12....       LCALL     ?XSTACK_DISP101_8
   \   000135   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    818          
    819              }
    820            }
    821          }
   \                     ??ZDSecMgrAppKeyReq_0:
   \   000138   7427         MOV       A,#0x27
   \   00013A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00013D   7F02         MOV       R7,#0x2
   \   00013F   02....       LJMP      ?BANKED_LEAVE_XDATA
    822          
    823          /******************************************************************************
    824           * @fn          ZDSecMgrTclkReq
    825           *
    826           * @brief       Process request for TCLK.
    827           *
    828           * @param       device - [in] ZDO_RequestKeyInd_t, request info
    829           *
    830           * @return      none
    831           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    832          void ZDSecMgrTclkReq( ZDO_RequestKeyInd_t* ind )
   \                     ZDSecMgrTclkReq:
    833          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 59
   \   000005   74C5         MOV       A,#-0x3b
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    834            APSME_TransportKeyReq_t req;
    835            uint8                   initExtAddr[Z_EXTADDR_LEN];
    836            uint16                  partNwkAddr;
    837            uint8                   key[SEC_KEY_LEN];
    838            APSME_TCLKDevEntry_t    TCLKDevEntry;
    839            uint8                   found;
    840              
    841            // validate initiator and partner
    842            if ( ( ( APSME_LookupNwkAddr( ind->partExtAddr, &partNwkAddr ) == TRUE ) || ( ind->keyType != KEY_TYPE_APP_MASTER ) ) &&
    843                 (   APSME_LookupExtAddr( ind->srcAddr, initExtAddr )      == TRUE ) )
   \   00000E                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   00000E   7401         MOV       A,#0x1
   \   000010   12....       LCALL     ?XSTACK_DISP102_8
   \   000013   EE           MOV       A,R6
   \   000014   2405         ADD       A,#0x5
   \   000016   FA           MOV       R2,A
   \   000017   E4           CLR       A
   \   000018   3F           ADDC      A,R7
   \   000019   FB           MOV       R3,A
   \   00001A   12....       LCALL     `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   00001D   E9           MOV       A,R1
   \   00001E   6401         XRL       A,#0x1
   \   000020   6010         JZ        ??ZDSecMgrTclkReq_0
   \   000022   8E82         MOV       DPL,R6
   \   000024   8F83         MOV       DPH,R7
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   6402         XRL       A,#0x2
   \   00002D   7003         JNZ       $+5
   \   00002F   02....       LJMP      ??ZDSecMgrTclkReq_1 & 0xFFFF
   \                     ??ZDSecMgrTclkReq_0:
   \   000032                ; Setup parameters for call to function APSME_LookupExtAddr
   \   000032   7410         MOV       A,#0x10
   \   000034   12....       LCALL     ?XSTACK_DISP102_8
   \   000037   8E82         MOV       DPL,R6
   \   000039   8F83         MOV       DPH,R7
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   FA           MOV       R2,A
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   FB           MOV       R3,A
   \   000042   12....       LCALL     `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
   \   000045   E9           MOV       A,R1
   \   000046   6401         XRL       A,#0x1
   \   000048   6003         JZ        $+5
   \   00004A   02....       LJMP      ??ZDSecMgrTclkReq_1 & 0xFFFF
    844            {
    845              // point the key to some memory
    846              req.key = key;
   \   00004D   742B         MOV       A,#0x2b
   \   00004F   12....       LCALL     ?XSTACK_DISP100_8
   \   000052   7407         MOV       A,#0x7
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   E8           MOV       A,R0
   \   000058   F0           MOVX      @DPTR,A
   \   000059   A3           INC       DPTR
   \   00005A   E9           MOV       A,R1
   \   00005B   F0           MOVX      @DPTR,A
    847          
    848              //Search for the entry
    849              APSME_SearchTCLinkKeyEntry(initExtAddr,&found, &TCLKDevEntry);
   \   00005C                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   00005C   7418         MOV       A,#0x18
   \   00005E   12....       LCALL     ?XSTACK_DISP100_8
   \   000061   88..         MOV       ?V0,R0
   \   000063   89..         MOV       ?V1,R1
   \   000065   78..         MOV       R0,#?V0
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006A   7402         MOV       A,#0x2
   \   00006C   12....       LCALL     ?XSTACK_DISP102_8
   \   00006F   7412         MOV       A,#0x12
   \   000071   12....       LCALL     ?XSTACK_DISP101_8
   \   000074   12....       LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
   \   000077   7402         MOV       A,#0x2
   \   000079   12....       LCALL     ?DEALLOC_XSTACK8
    850          
    851              //If found, generate the key accordingly to the key attribute
    852              if(found)
   \   00007C   85..82       MOV       DPL,?XSP + 0
   \   00007F   85..83       MOV       DPH,?XSP + 1
   \   000082   E0           MOVX      A,@DPTR
   \   000083   7003         JNZ       $+5
   \   000085   02....       LJMP      ??ZDSecMgrTclkReq_1 & 0xFFFF
    853              {
    854                //Generate key from the seed, which would be the unique key
    855                ZDSecMgrGenerateKeyFromSeed(TCLKDevEntry.extAddr,TCLKDevEntry.SeedShift_IcIndex,req.key);
   \   000088                ; Setup parameters for call to function ZDSecMgrGenerateKeyFromSeed
   \   000088   7407         MOV       A,#0x7
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   FC           MOV       R4,A
   \   00008F   A3           INC       DPTR
   \   000090   E0           MOVX      A,@DPTR
   \   000091   FD           MOV       R5,A
   \   000092   742A         MOV       A,#0x2a
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   E0           MOVX      A,@DPTR
   \   000098   F9           MOV       R1,A
   \   000099   7420         MOV       A,#0x20
   \   00009B   12....       LCALL     ?XSTACK_DISP0_8
   \   00009E   AA82         MOV       R2,DPL
   \   0000A0   AB83         MOV       R3,DPH
   \   0000A2   12....       LCALL     `??ZDSecMgrGenerateKeyFromSeed::?relay`; Banked call to: ZDSecMgrGenerateKeyFromSeed
    856              
    857                // always secure
    858                req.nwkSecure = TRUE;
   \   0000A5   740D         MOV       A,#0xd
   \   0000A7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AA   7401         MOV       A,#0x1
   \   0000AC   F0           MOVX      @DPTR,A
    859                req.apsSecure = TRUE;
   \   0000AD   740C         MOV       A,#0xc
   \   0000AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B2   7401         MOV       A,#0x1
   \   0000B4   F0           MOVX      @DPTR,A
    860                req.tunnel    = NULL;
   \   0000B5   740E         MOV       A,#0xe
   \   0000B7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BA   7400         MOV       A,#0x0
   \   0000BC   F0           MOVX      @DPTR,A
   \   0000BD   A3           INC       DPTR
   \   0000BE   7400         MOV       A,#0x0
   \   0000C0   F0           MOVX      @DPTR,A
    861          
    862                // send key to initiator device
    863                req.dstAddr   = ind->srcAddr;
   \   0000C1   8E82         MOV       DPL,R6
   \   0000C3   8F83         MOV       DPH,R7
   \   0000C5   A3           INC       DPTR
   \   0000C6   A3           INC       DPTR
   \   0000C7   E0           MOVX      A,@DPTR
   \   0000C8   F8           MOV       R0,A
   \   0000C9   A3           INC       DPTR
   \   0000CA   E0           MOVX      A,@DPTR
   \   0000CB   F9           MOV       R1,A
   \   0000CC   7403         MOV       A,#0x3
   \   0000CE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D1   E8           MOV       A,R0
   \   0000D2   F0           MOVX      @DPTR,A
   \   0000D3   A3           INC       DPTR
   \   0000D4   E9           MOV       A,R1
   \   0000D5   F0           MOVX      @DPTR,A
    864                req.extAddr   = initExtAddr;
   \   0000D6   7410         MOV       A,#0x10
   \   0000D8   12....       LCALL     ?XSTACK_DISP100_8
   \   0000DB   7409         MOV       A,#0x9
   \   0000DD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E0   E8           MOV       A,R0
   \   0000E1   F0           MOVX      @DPTR,A
   \   0000E2   A3           INC       DPTR
   \   0000E3   E9           MOV       A,R1
   \   0000E4   F0           MOVX      @DPTR,A
    865                req.initiator = TRUE;
   \   0000E5   740B         MOV       A,#0xb
   \   0000E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EA   7401         MOV       A,#0x1
   \   0000EC   F0           MOVX      @DPTR,A
    866                req.keyType   = KEY_TYPE_TC_LINK;
   \   0000ED   7405         MOV       A,#0x5
   \   0000EF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F2   7404         MOV       A,#0x4
   \   0000F4   F0           MOVX      @DPTR,A
    867                  
    868                APSME_TransportKeyReq( &req );
   \   0000F5                ; Setup parameters for call to function APSME_TransportKeyReq
   \   0000F5   7403         MOV       A,#0x3
   \   0000F7   12....       LCALL     ?XSTACK_DISP101_8
   \   0000FA   12....       LCALL     `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
   \   0000FD   E9           MOV       A,R1
    869                  
    870                // clear copy of key in RAM
    871                osal_memset( key, 0x00, SEC_KEY_LEN);
   \   0000FE                ; Setup parameters for call to function osal_memset
   \   0000FE   7C10         MOV       R4,#0x10
   \   000100   7D00         MOV       R5,#0x0
   \   000102   7900         MOV       R1,#0x0
   \   000104   742B         MOV       A,#0x2b
   \   000106   12....       LCALL     ?XSTACK_DISP101_8
   \   000109   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    872              
    873              }
    874            }
    875          }
   \                     ??ZDSecMgrTclkReq_1:
   \   00010C   743B         MOV       A,#0x3b
   \   00010E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000111   7F02         MOV       R7,#0x2
   \   000113   02....       LJMP      ?BANKED_LEAVE_XDATA
    876          
    877          /******************************************************************************
    878           * @fn          ZDSecMgrAppConfKeyReq
    879           *
    880           * @brief       Process request for APP key between two devices.
    881           *
    882           * @param       device - [in] ZDO_VerifyKeyInd_t, request info
    883           *
    884           * @return      none
    885           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    886          void ZDSecMgrAppConfKeyReq( ZDO_VerifyKeyInd_t* ind )
   \                     ZDSecMgrAppConfKeyReq:
    887          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 6
   \   000004   74FA         MOV       A,#-0x6
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    888            APSME_ConfirmKeyReq_t   req;
    889          
    890            // send key to initiator device
    891            req.dstAddr      = ind->srcAddr;
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F8           MOV       R0,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F9           MOV       R1,A
   \   000014   85..82       MOV       DPL,?XSP + 0
   \   000017   85..83       MOV       DPH,?XSP + 1
   \   00001A   E8           MOV       A,R0
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   A3           INC       DPTR
   \   00001D   E9           MOV       A,R1
   \   00001E   F0           MOVX      @DPTR,A
    892            req.status       = ind->verifyKeyStatus;
   \   00001F   EA           MOV       A,R2
   \   000020   241D         ADD       A,#0x1d
   \   000022   F582         MOV       DPL,A
   \   000024   E4           CLR       A
   \   000025   3B           ADDC      A,R3
   \   000026   F583         MOV       DPH,A
   \   000028   E0           MOVX      A,@DPTR
   \   000029   C0E0         PUSH      A
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   D0E0         POP       A
   \   000032   F0           MOVX      @DPTR,A
    893            req.dstExtAddr   = ind->extAddr;
   \   000033   EA           MOV       A,R2
   \   000034   2405         ADD       A,#0x5
   \   000036   F8           MOV       R0,A
   \   000037   E4           CLR       A
   \   000038   3B           ADDC      A,R3
   \   000039   F9           MOV       R1,A
   \   00003A   7403         MOV       A,#0x3
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   E8           MOV       A,R0
   \   000040   F0           MOVX      @DPTR,A
   \   000041   A3           INC       DPTR
   \   000042   E9           MOV       A,R1
   \   000043   F0           MOVX      @DPTR,A
    894            req.keyType      = ind->keyType;
   \   000044   8A82         MOV       DPL,R2
   \   000046   8B83         MOV       DPH,R3
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   C0E0         PUSH      A
   \   00004F   7405         MOV       A,#0x5
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   D0E0         POP       A
   \   000056   F0           MOVX      @DPTR,A
    895          
    896            if ( ( ZSTACK_DEVICE_BUILD & DEVICE_BUILD_COORDINATOR ) != 0 )
    897            {
    898              APSME_ConfirmKeyReq( &req );
    899            }
    900            
    901          }
   \   000057   7406         MOV       A,#0x6
   \   000059   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005C   D083         POP       DPH
   \   00005E   D082         POP       DPL
   \   000060   02....       LJMP      ?BRET
    902          
    903          
    904          /******************************************************************************
    905           * @fn          ZDSecMgrSendNwkKey
    906           *
    907           * @brief       Send NWK key to device joining network.
    908           *
    909           * @param       device - [in] ZDSecMgrDevice_t, device info
    910           *
    911           * @return      ZStatus_t
    912           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    913          ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrSendNwkKey:
    914          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 34
   \   000005   74DE         MOV       A,#-0x22
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    915            ZStatus_t status;
    916            APSME_TransportKeyReq_t req;
    917            APSDE_FrameTunnel_t tunnel;
    918            nwkKeyDesc tmpKey;
    919          
    920            req.dstAddr   = device->nwkAddr;
   \   00000E   8E82         MOV       DPL,R6
   \   000010   8F83         MOV       DPH,R7
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F8           MOV       R0,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F9           MOV       R1,A
   \   000017   85..82       MOV       DPL,?XSP + 0
   \   00001A   85..83       MOV       DPH,?XSP + 1
   \   00001D   E8           MOV       A,R0
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   A3           INC       DPTR
   \   000020   E9           MOV       A,R1
   \   000021   F0           MOVX      @DPTR,A
    921            req.extAddr   = device->extAddr;
   \   000022   8E82         MOV       DPL,R6
   \   000024   8F83         MOV       DPH,R7
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F8           MOV       R0,A
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F9           MOV       R1,A
   \   00002D   7406         MOV       A,#0x6
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   E8           MOV       A,R0
   \   000033   F0           MOVX      @DPTR,A
   \   000034   A3           INC       DPTR
   \   000035   E9           MOV       A,R1
   \   000036   F0           MOVX      @DPTR,A
    922          
    923            req.keyType   = KEY_TYPE_NWK;
   \   000037   7402         MOV       A,#0x2
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   7401         MOV       A,#0x1
   \   00003E   F0           MOVX      @DPTR,A
    924          
    925            // get the Active Key into a local variable
    926            if ( NLME_ReadNwkKeyInfo( 0, sizeof(tmpKey), &tmpKey,
    927                                     ZCD_NV_NWK_ACTIVE_KEY_INFO ) != SUCCESS )
   \   00003F                ; Setup parameters for call to function NLME_ReadNwkKeyInfo
   \   00003F   75..3A       MOV       ?V2,#0x3a
   \   000042   75..00       MOV       ?V3,#0x0
   \   000045   78..         MOV       R0,#?V2
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   7413         MOV       A,#0x13
   \   00004C   12....       LCALL     ?XSTACK_DISP100_8
   \   00004F   88..         MOV       ?V2,R0
   \   000051   89..         MOV       ?V3,R1
   \   000053   78..         MOV       R0,#?V2
   \   000055   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000058   7C11         MOV       R4,#0x11
   \   00005A   7D00         MOV       R5,#0x0
   \   00005C   7A00         MOV       R2,#0x0
   \   00005E   7B00         MOV       R3,#0x0
   \   000060   12....       LCALL     `??NLME_ReadNwkKeyInfo::?relay`; Banked call to: NLME_ReadNwkKeyInfo
   \   000063   7404         MOV       A,#0x4
   \   000065   12....       LCALL     ?DEALLOC_XSTACK8
   \   000068   E9           MOV       A,R1
   \   000069   600E         JZ        ??ZDSecMgrSendNwkKey_0
    928            {
    929              // set key data to all 0s if NV read fails
    930              osal_memset(&tmpKey, 0x00, sizeof(tmpKey));
   \   00006B                ; Setup parameters for call to function osal_memset
   \   00006B   7C11         MOV       R4,#0x11
   \   00006D   7D00         MOV       R5,#0x0
   \   00006F   7900         MOV       R1,#0x0
   \   000071   7411         MOV       A,#0x11
   \   000073   12....       LCALL     ?XSTACK_DISP101_8
   \   000076   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    931            }
    932          
    933            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
    934            {
    935              // set values
    936              req.keySeqNum = tmpKey.keySeqNum;
   \                     ??ZDSecMgrSendNwkKey_0:
   \   000079   7411         MOV       A,#0x11
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   C0E0         PUSH      A
   \   000081   7403         MOV       A,#0x3
   \   000083   12....       LCALL     ?XSTACK_DISP0_8
   \   000086   D0E0         POP       A
   \   000088   F0           MOVX      @DPTR,A
    937              req.key       = tmpKey.key;
   \   000089   7412         MOV       A,#0x12
   \   00008B   12....       LCALL     ?XSTACK_DISP0_8
   \   00008E   A882         MOV       R0,DPL
   \   000090   A983         MOV       R1,DPH
   \   000092   7404         MOV       A,#0x4
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   E8           MOV       A,R0
   \   000098   F0           MOVX      @DPTR,A
   \   000099   A3           INC       DPTR
   \   00009A   E9           MOV       A,R1
   \   00009B   F0           MOVX      @DPTR,A
    938          
    939              //devtag.pro.security.todo - make sure that if there is no link key the NWK
    940              //key isn't used to secure the frame at the APS layer -- since the receiving
    941              //device may not have a NWK key yet
    942              req.apsSecure = TRUE;
   \   00009C   7409         MOV       A,#0x9
   \   00009E   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A1   7401         MOV       A,#0x1
   \   0000A3   F0           MOVX      @DPTR,A
    943          
    944              // check if using secure hop to parent
    945              if ( device->parentAddr == NLME_GetShortAddr() )
   \   0000A4                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000A4   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000A7   8A..         MOV       ?V2,R2
   \   0000A9   8B..         MOV       ?V3,R3
   \   0000AB   A8..         MOV       R0,?V2
   \   0000AD   A9..         MOV       R1,?V3
   \   0000AF   8E82         MOV       DPL,R6
   \   0000B1   8F83         MOV       DPH,R7
   \   0000B3   A3           INC       DPTR
   \   0000B4   A3           INC       DPTR
   \   0000B5   A3           INC       DPTR
   \   0000B6   A3           INC       DPTR
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   68           XRL       A,R0
   \   0000B9   7003         JNZ       ??ZDSecMgrSendNwkKey_1
   \   0000BB   A3           INC       DPTR
   \   0000BC   E0           MOVX      A,@DPTR
   \   0000BD   69           XRL       A,R1
   \                     ??ZDSecMgrSendNwkKey_1:
   \   0000BE   7016         JNZ       ??ZDSecMgrSendNwkKey_2
    946              {
    947                req.nwkSecure = FALSE;
   \   0000C0   740A         MOV       A,#0xa
   \   0000C2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C5   7400         MOV       A,#0x0
   \   0000C7   F0           MOVX      @DPTR,A
    948                req.tunnel    = NULL;
   \   0000C8   740B         MOV       A,#0xb
   \   0000CA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CD   7400         MOV       A,#0x0
   \   0000CF   F0           MOVX      @DPTR,A
   \   0000D0   A3           INC       DPTR
   \   0000D1   7400         MOV       A,#0x0
   \   0000D3   F0           MOVX      @DPTR,A
   \   0000D4   8055         SJMP      ??ZDSecMgrSendNwkKey_3
    949              }
    950              else
    951              {
    952                req.nwkSecure   = TRUE;
   \                     ??ZDSecMgrSendNwkKey_2:
   \   0000D6   740A         MOV       A,#0xa
   \   0000D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DB   7401         MOV       A,#0x1
   \   0000DD   F0           MOVX      @DPTR,A
    953                req.tunnel      = &tunnel;
   \   0000DE   740D         MOV       A,#0xd
   \   0000E0   12....       LCALL     ?XSTACK_DISP100_8
   \   0000E3   740B         MOV       A,#0xb
   \   0000E5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E8   E8           MOV       A,R0
   \   0000E9   F0           MOVX      @DPTR,A
   \   0000EA   A3           INC       DPTR
   \   0000EB   E9           MOV       A,R1
   \   0000EC   F0           MOVX      @DPTR,A
    954                req.tunnel->tna = device->parentAddr;
   \   0000ED   8E82         MOV       DPL,R6
   \   0000EF   8F83         MOV       DPH,R7
   \   0000F1   A3           INC       DPTR
   \   0000F2   A3           INC       DPTR
   \   0000F3   A3           INC       DPTR
   \   0000F4   A3           INC       DPTR
   \   0000F5   E0           MOVX      A,@DPTR
   \   0000F6   F8           MOV       R0,A
   \   0000F7   A3           INC       DPTR
   \   0000F8   E0           MOVX      A,@DPTR
   \   0000F9   F9           MOV       R1,A
   \   0000FA   740B         MOV       A,#0xb
   \   0000FC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FF   E0           MOVX      A,@DPTR
   \   000100   FA           MOV       R2,A
   \   000101   A3           INC       DPTR
   \   000102   E0           MOVX      A,@DPTR
   \   000103   F583         MOV       DPH,A
   \   000105   8A82         MOV       DPL,R2
   \   000107   E8           MOV       A,R0
   \   000108   F0           MOVX      @DPTR,A
   \   000109   A3           INC       DPTR
   \   00010A   E9           MOV       A,R1
   \   00010B   F0           MOVX      @DPTR,A
    955                req.tunnel->dea = device->extAddr;
   \   00010C   8E82         MOV       DPL,R6
   \   00010E   8F83         MOV       DPH,R7
   \   000110   A3           INC       DPTR
   \   000111   A3           INC       DPTR
   \   000112   E0           MOVX      A,@DPTR
   \   000113   F8           MOV       R0,A
   \   000114   A3           INC       DPTR
   \   000115   E0           MOVX      A,@DPTR
   \   000116   F9           MOV       R1,A
   \   000117   740B         MOV       A,#0xb
   \   000119   12....       LCALL     ?XSTACK_DISP0_8
   \   00011C   E0           MOVX      A,@DPTR
   \   00011D   FA           MOV       R2,A
   \   00011E   A3           INC       DPTR
   \   00011F   E0           MOVX      A,@DPTR
   \   000120   F583         MOV       DPH,A
   \   000122   8A82         MOV       DPL,R2
   \   000124   A3           INC       DPTR
   \   000125   A3           INC       DPTR
   \   000126   E8           MOV       A,R0
   \   000127   F0           MOVX      @DPTR,A
   \   000128   A3           INC       DPTR
   \   000129   E9           MOV       A,R1
   \   00012A   F0           MOVX      @DPTR,A
    956              }
    957            }
    958            else
    959            {
    960              // default values
    961              //devtag.0604.verify
    962              req.nwkSecure = TRUE;
    963              req.apsSecure = FALSE;
    964              req.tunnel    = NULL;
    965          
    966              if ( device->parentAddr != NLME_GetShortAddr() )
    967              {
    968                req.dstAddr = device->parentAddr;
    969              }
    970          
    971              // send the real key
    972              if ( zgPreConfigKeys == FALSE )
    973              {
    974                req.keySeqNum = tmpKey.keySeqNum;
    975                req.key       = tmpKey.key;
    976          
    977                // check if using secure hop to to parent
    978                if ( device->parentAddr == NLME_GetShortAddr() )
    979                {
    980                  req.nwkSecure = FALSE;
    981                }
    982              }
    983              else
    984              {
    985                // this is to send the all zero key when the NWK key has been preconfigured
    986                req.key       = NULL;
    987                req.keySeqNum = 0;
    988              }
    989            }
    990          
    991            status = APSME_TransportKeyReq( &req );
   \                     ??ZDSecMgrSendNwkKey_3:
   \   00012B                ; Setup parameters for call to function APSME_TransportKeyReq
   \   00012B   AA..         MOV       R2,?XSP + 0
   \   00012D   AB..         MOV       R3,?XSP + 1
   \   00012F   12....       LCALL     `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
   \   000132   E9           MOV       A,R1
   \   000133   F5..         MOV       ?V0,A
    992          
    993            // clear copy of key in RAM before return
    994            osal_memset( &tmpKey, 0x00, sizeof(nwkKeyDesc) );
   \   000135                ; Setup parameters for call to function osal_memset
   \   000135   7C11         MOV       R4,#0x11
   \   000137   7D00         MOV       R5,#0x0
   \   000139   7900         MOV       R1,#0x0
   \   00013B   7411         MOV       A,#0x11
   \   00013D   12....       LCALL     ?XSTACK_DISP101_8
   \   000140   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    995          
    996            return status;
   \   000143   A9..         MOV       R1,?V0
   \   000145   7422         MOV       A,#0x22
   \   000147   12....       LCALL     ?DEALLOC_XSTACK8
   \   00014A   7F04         MOV       R7,#0x4
   \   00014C   02....       LJMP      ?BANKED_LEAVE_XDATA
    997          }
    998          
    999          /******************************************************************************
   1000           * @fn          ZDSecMgrDeviceRemoveByExtAddr
   1001           *
   1002           * @brief       Remove device entry by its ext address.
   1003           *
   1004           * @param       pAddr - pointer to the extended address
   1005           *
   1006           * @return      ZStatus_t
   1007           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1008          ZStatus_t ZDSecMgrDeviceRemoveByExtAddr( uint8 *pAddr )
   \                     ZDSecMgrDeviceRemoveByExtAddr:
   1009          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1010            ZDSecMgrEntry_t *pEntry;
   1011            uint8           retValue;
   1012          
   1013            retValue = (uint8)ZDSecMgrEntryLookupExt( pAddr, &pEntry );
   \   00000E                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   00000E   AC..         MOV       R4,?XSP + 0
   \   000010   AD..         MOV       R5,?XSP + 1
   \   000012   EE           MOV       A,R6
   \   000013   FA           MOV       R2,A
   \   000014   EF           MOV       A,R7
   \   000015   FB           MOV       R3,A
   \   000016   12....       LCALL     `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   000019   E9           MOV       A,R1
   \   00001A   F5..         MOV       ?V0,A
   1014          
   1015            if( retValue == ZSuccess )
   \   00001C   E5..         MOV       A,?V0
   \   00001E   700E         JNZ       ??ZDSecMgrDeviceRemoveByExtAddr_0
   1016            {
   1017              // remove device from entry data
   1018              ZDSecMgrEntryFree( pEntry );
   \   000020                ; Setup parameters for call to function ZDSecMgrEntryFree
   \   000020   85..82       MOV       DPL,?XSP + 0
   \   000023   85..83       MOV       DPH,?XSP + 1
   \   000026   E0           MOVX      A,@DPTR
   \   000027   FA           MOV       R2,A
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   FB           MOV       R3,A
   \   00002B   12....       LCALL     `??ZDSecMgrEntryFree::?relay`; Banked call to: ZDSecMgrEntryFree
   1019            }
   1020          
   1021            return retValue;
   \                     ??ZDSecMgrDeviceRemoveByExtAddr_0:
   \   00002E   A9..         MOV       R1,?V0
   \   000030   7402         MOV       A,#0x2
   \   000032   12....       LCALL     ?DEALLOC_XSTACK8
   \   000035   7F01         MOV       R7,#0x1
   \   000037   02....       LJMP      ?BANKED_LEAVE_XDATA
   1022          }
   1023          
   1024          /******************************************************************************
   1025           * @fn          ZDSecMgrDeviceRemove
   1026           *
   1027           * @brief       Remove device from network.
   1028           *
   1029           * @param       device - [in] ZDSecMgrDevice_t, device info
   1030           *
   1031           * @return      none
   1032           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1033          void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceRemove:
   1034          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV       A,#-0x13
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1035            APSME_RemoveDeviceReq_t remDevReq;
   1036            NLME_LeaveReq_t         leaveReq;
   1037            associated_devices_t*   assoc;
   1038            uint8 TC_ExtAddr[Z_EXTADDR_LEN];
   1039          
   1040            // check if parent, remove the device
   1041            if ( device->parentAddr == NLME_GetShortAddr() )
   \   00000E                ; Setup parameters for call to function NLME_GetShortAddr
   \   00000E   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000011   8A..         MOV       ?V2,R2
   \   000013   8B..         MOV       ?V3,R3
   \   000015   A8..         MOV       R0,?V2
   \   000017   A9..         MOV       R1,?V3
   \   000019   8E82         MOV       DPL,R6
   \   00001B   8F83         MOV       DPH,R7
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   68           XRL       A,R0
   \   000023   7003         JNZ       ??ZDSecMgrDeviceRemove_0
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   69           XRL       A,R1
   \                     ??ZDSecMgrDeviceRemove_0:
   \   000028   6003         JZ        $+5
   \   00002A   02....       LJMP      ??ZDSecMgrDeviceRemove_1 & 0xFFFF
   1042            {
   1043              // this is the parent of the device
   1044              leaveReq.extAddr        = device->extAddr;
   \   00002D   8E82         MOV       DPL,R6
   \   00002F   8F83         MOV       DPH,R7
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F8           MOV       R0,A
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F9           MOV       R1,A
   \   000038   7401         MOV       A,#0x1
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   E8           MOV       A,R0
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   A3           INC       DPTR
   \   000040   E9           MOV       A,R1
   \   000041   F0           MOVX      @DPTR,A
   1045              leaveReq.removeChildren = FALSE;
   \   000042   7403         MOV       A,#0x3
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   7400         MOV       A,#0x0
   \   000049   F0           MOVX      @DPTR,A
   1046              leaveReq.rejoin         = FALSE;
   \   00004A   7404         MOV       A,#0x4
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   7400         MOV       A,#0x0
   \   000051   F0           MOVX      @DPTR,A
   1047          
   1048              // find child association
   1049              assoc = AssocGetWithExt( device->extAddr );
   \   000052                ; Setup parameters for call to function AssocGetWithExt
   \   000052   8E82         MOV       DPL,R6
   \   000054   8F83         MOV       DPH,R7
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   E0           MOVX      A,@DPTR
   \   000059   FA           MOV       R2,A
   \   00005A   A3           INC       DPTR
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   FB           MOV       R3,A
   \   00005D   12....       LCALL     `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   000060   8A..         MOV       ?V2,R2
   \   000062   8B..         MOV       ?V3,R3
   \   000064   85....       MOV       ?V0,?V2
   \   000067   85....       MOV       ?V1,?V3
   1050          
   1051              if ( ( assoc != NULL                            ) &&
   1052                   ( assoc->nodeRelation >= CHILD_RFD         ) &&
   1053                   ( assoc->nodeRelation <= CHILD_FFD_RX_IDLE )    )
   \   00006A   E5..         MOV       A,?V0
   \   00006C   45..         ORL       A,?V1
   \   00006E   604B         JZ        ??ZDSecMgrDeviceRemove_2
   \   000070   85..82       MOV       DPL,?V0
   \   000073   85..83       MOV       DPH,?V1
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   A3           INC       DPTR
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   603E         JZ        ??ZDSecMgrDeviceRemove_2
   \   00007D   85..82       MOV       DPL,?V0
   \   000080   85..83       MOV       DPH,?V1
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   E0           MOVX      A,@DPTR
   \   000088   C3           CLR       C
   \   000089   9405         SUBB      A,#0x5
   \   00008B   502E         JNC       ??ZDSecMgrDeviceRemove_2
   1054              {
   1055                // check if associated device is authenticated
   1056                if ( assoc->devStatus & DEV_SEC_AUTH_STATUS )
   \   00008D   85..82       MOV       DPL,?V0
   \   000090   85..83       MOV       DPH,?V1
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   E0           MOVX      A,@DPTR
   \   000099   A2E3         MOV       C,0xE0 /* A   */.3
   \   00009B   500A         JNC       ??ZDSecMgrDeviceRemove_3
   1057                {
   1058                  leaveReq.silent = FALSE;
   \   00009D   7405         MOV       A,#0x5
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   7400         MOV       A,#0x0
   \   0000A4   F0           MOVX      @DPTR,A
   \   0000A5   8008         SJMP      ??ZDSecMgrDeviceRemove_4
   1059                }
   1060                else
   1061                {
   1062                  leaveReq.silent = TRUE;
   \                     ??ZDSecMgrDeviceRemove_3:
   \   0000A7   7405         MOV       A,#0x5
   \   0000A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AC   7401         MOV       A,#0x1
   \   0000AE   F0           MOVX      @DPTR,A
   1063                }
   1064          
   1065                NLME_LeaveReq( &leaveReq );
   \                     ??ZDSecMgrDeviceRemove_4:
   \   0000AF                ; Setup parameters for call to function NLME_LeaveReq
   \   0000AF   7401         MOV       A,#0x1
   \   0000B1   12....       LCALL     ?XSTACK_DISP101_8
   \   0000B4   12....       LCALL     `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   0000B7   E9           MOV       A,R1
   \   0000B8   02....       LJMP      ??ZDSecMgrDeviceRemove_5 & 0xFFFF
   1066              }
   1067              else if ( device->nwkAddr == NLME_GetShortAddr() )
   \                     ??ZDSecMgrDeviceRemove_2:
   \   0000BB                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000BB   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000BE   8A..         MOV       ?V2,R2
   \   0000C0   8B..         MOV       ?V3,R3
   \   0000C2   A8..         MOV       R0,?V2
   \   0000C4   A9..         MOV       R1,?V3
   \   0000C6   8E82         MOV       DPL,R6
   \   0000C8   8F83         MOV       DPH,R7
   \   0000CA   E0           MOVX      A,@DPTR
   \   0000CB   68           XRL       A,R0
   \   0000CC   7003         JNZ       ??ZDSecMgrDeviceRemove_6
   \   0000CE   A3           INC       DPTR
   \   0000CF   E0           MOVX      A,@DPTR
   \   0000D0   69           XRL       A,R1
   \                     ??ZDSecMgrDeviceRemove_6:
   \   0000D1   6003         JZ        $+5
   \   0000D3   02....       LJMP      ??ZDSecMgrDeviceRemove_5 & 0xFFFF
   1068              {
   1069                // this is when ZC wants that ZR removes itself from the network
   1070                leaveReq.extAddr = NULL;
   \   0000D6   7401         MOV       A,#0x1
   \   0000D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DB   7400         MOV       A,#0x0
   \   0000DD   F0           MOVX      @DPTR,A
   \   0000DE   A3           INC       DPTR
   \   0000DF   7400         MOV       A,#0x0
   \   0000E1   F0           MOVX      @DPTR,A
   1071                leaveReq.silent = FALSE;
   \   0000E2   7405         MOV       A,#0x5
   \   0000E4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E7   7400         MOV       A,#0x0
   \   0000E9   F0           MOVX      @DPTR,A
   1072          
   1073                NLME_LeaveReq( &leaveReq );
   \   0000EA                ; Setup parameters for call to function NLME_LeaveReq
   \   0000EA   7401         MOV       A,#0x1
   \   0000EC   12....       LCALL     ?XSTACK_DISP101_8
   \   0000EF   12....       LCALL     `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   0000F2   E9           MOV       A,R1
   \   0000F3   02....       LJMP      ??ZDSecMgrDeviceRemove_5 & 0xFFFF
   1074              }
   1075            }
   1076            else
   1077            {
   1078              // this is not the parent of the device
   1079              remDevReq.parentAddr   = device->parentAddr;
   \                     ??ZDSecMgrDeviceRemove_1:
   \   0000F6   8E82         MOV       DPL,R6
   \   0000F8   8F83         MOV       DPH,R7
   \   0000FA   A3           INC       DPTR
   \   0000FB   A3           INC       DPTR
   \   0000FC   A3           INC       DPTR
   \   0000FD   A3           INC       DPTR
   \   0000FE   E0           MOVX      A,@DPTR
   \   0000FF   F8           MOV       R0,A
   \   000100   A3           INC       DPTR
   \   000101   E0           MOVX      A,@DPTR
   \   000102   F9           MOV       R1,A
   \   000103   7406         MOV       A,#0x6
   \   000105   12....       LCALL     ?XSTACK_DISP0_8
   \   000108   E8           MOV       A,R0
   \   000109   F0           MOVX      @DPTR,A
   \   00010A   A3           INC       DPTR
   \   00010B   E9           MOV       A,R1
   \   00010C   F0           MOVX      @DPTR,A
   1080              remDevReq.childExtAddr = device->extAddr;
   \   00010D   8E82         MOV       DPL,R6
   \   00010F   8F83         MOV       DPH,R7
   \   000111   A3           INC       DPTR
   \   000112   A3           INC       DPTR
   \   000113   E0           MOVX      A,@DPTR
   \   000114   F8           MOV       R0,A
   \   000115   A3           INC       DPTR
   \   000116   E0           MOVX      A,@DPTR
   \   000117   F9           MOV       R1,A
   \   000118   7408         MOV       A,#0x8
   \   00011A   12....       LCALL     ?XSTACK_DISP0_8
   \   00011D   E8           MOV       A,R0
   \   00011E   F0           MOVX      @DPTR,A
   \   00011F   A3           INC       DPTR
   \   000120   E9           MOV       A,R1
   \   000121   F0           MOVX      @DPTR,A
   1081          
   1082              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1083              {
   1084                uint8 found;
   1085                APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
   \   000122                ; Setup parameters for call to function APSME_GetRequest
   \   000122   740B         MOV       A,#0xb
   \   000124   12....       LCALL     ?XSTACK_DISP102_8
   \   000127   7A00         MOV       R2,#0x0
   \   000129   7B00         MOV       R3,#0x0
   \   00012B   79AB         MOV       R1,#-0x55
   \   00012D   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   \   000130   E9           MOV       A,R1
   1086                
   1087                APSME_SearchTCLinkKeyEntry(TC_ExtAddr,&found,NULL);
   \   000131                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   000131   E4           CLR       A
   \   000132   F5..         MOV       ?V2,A
   \   000134   F5..         MOV       ?V3,A
   \   000136   78..         MOV       R0,#?V2
   \   000138   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00013B   7402         MOV       A,#0x2
   \   00013D   12....       LCALL     ?XSTACK_DISP102_8
   \   000140   740D         MOV       A,#0xd
   \   000142   12....       LCALL     ?XSTACK_DISP101_8
   \   000145   12....       LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
   \   000148   7402         MOV       A,#0x2
   \   00014A   12....       LCALL     ?DEALLOC_XSTACK8
   1088                
   1089                // For ZG_GLOBAL_LINK_KEY the message has to be sent twice, one
   1090                // APS un-encrypted and one APS encrypted, to make sure that it can interoperate
   1091                // with legacy Coordinator devices which can only handle one or the other.
   1092          #if defined ( APP_TP2_TEST_MODE )
   1093                if ( ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY ) && ( guTxApsSecON != TRUE ) )
   1094          #else
   1095                if ( ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY ) && ( found == FALSE ) )
   \   00014D   90....       MOV       DPTR,#zgApsLinkKeyType
   \   000150   E0           MOVX      A,@DPTR
   \   000151   6401         XRL       A,#0x1
   \   000153   701A         JNZ       ??ZDSecMgrDeviceRemove_7
   \   000155   85..82       MOV       DPL,?XSP + 0
   \   000158   85..83       MOV       DPH,?XSP + 1
   \   00015B   E0           MOVX      A,@DPTR
   \   00015C   7011         JNZ       ??ZDSecMgrDeviceRemove_7
   1096          #endif
   1097                {
   1098                  remDevReq.apsSecure = FALSE;
   \   00015E   740A         MOV       A,#0xa
   \   000160   12....       LCALL     ?XSTACK_DISP0_8
   \   000163   7400         MOV       A,#0x0
   \   000165   F0           MOVX      @DPTR,A
   1099          
   1100                  APSME_RemoveDeviceReq( &remDevReq );
   \   000166                ; Setup parameters for call to function APSME_RemoveDeviceReq
   \   000166   7406         MOV       A,#0x6
   \   000168   12....       LCALL     ?XSTACK_DISP101_8
   \   00016B   12....       LCALL     `??APSME_RemoveDeviceReq::?relay`; Banked call to: APSME_RemoveDeviceReq
   \   00016E   E9           MOV       A,R1
   1101                }
   1102          
   1103          #if defined ( APP_TP2_TEST_MODE )
   1104                if ( guTxApsSecON != FALSE )
   1105                {
   1106                  remDevReq.apsSecure = TRUE;
   1107          
   1108                  APSME_RemoveDeviceReq( &remDevReq );
   1109                }
   1110          #else
   1111                remDevReq.apsSecure = TRUE;
   \                     ??ZDSecMgrDeviceRemove_7:
   \   00016F   740A         MOV       A,#0xa
   \   000171   12....       LCALL     ?XSTACK_DISP0_8
   \   000174   7401         MOV       A,#0x1
   \   000176   F0           MOVX      @DPTR,A
   1112          
   1113                APSME_RemoveDeviceReq( &remDevReq );
   \   000177                ; Setup parameters for call to function APSME_RemoveDeviceReq
   \   000177   7406         MOV       A,#0x6
   \   000179   12....       LCALL     ?XSTACK_DISP101_8
   \   00017C   12....       LCALL     `??APSME_RemoveDeviceReq::?relay`; Banked call to: APSME_RemoveDeviceReq
   \   00017F   E9           MOV       A,R1
   1114          #endif
   1115              }
   1116              else
   1117              {
   1118                remDevReq.apsSecure = FALSE;
   1119          
   1120                APSME_RemoveDeviceReq( &remDevReq );
   1121              }
   1122            }
   1123          }
   \                     ??ZDSecMgrDeviceRemove_5:
   \   000180   7413         MOV       A,#0x13
   \   000182   12....       LCALL     ?DEALLOC_XSTACK8
   \   000185   7F04         MOV       R7,#0x4
   \   000187   02....       LJMP      ?BANKED_LEAVE_XDATA
   1124          
   1125          /******************************************************************************
   1126           * @fn          ZDSecMgrDeviceValidateRM (RESIDENTIAL MODE)
   1127           *
   1128           * @brief       Decide whether device is allowed.
   1129           *
   1130           * @param       device - [in] ZDSecMgrDevice_t, device info
   1131           *
   1132           * @return      ZStatus_t
   1133           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1134          ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceValidateRM:
   1135          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1136            ZStatus_t status;
   1137          
   1138            status = ZSuccess;
   \   000004   7900         MOV       R1,#0x0
   1139          
   1140            (void)device;  // Intentionally unreferenced parameter
   1141          
   1142            // For test purpose, turning off the zgSecurePermitJoin flag will force
   1143            // the trust center to reject any newly joining devices by sending
   1144            // Remove-device to the parents.
   1145            if ( zgSecurePermitJoin == FALSE )
   \   000006   90....       MOV       DPTR,#zgSecurePermitJoin
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   7002         JNZ       ??ZDSecMgrDeviceValidateRM_0
   1146            {
   1147              status = ZNwkUnknownDevice;
   \   00000C   79C8         MOV       R1,#-0x38
   1148            }
   1149          
   1150          
   1151          
   1152          #if 0  // Taken out because the following functionality is only used for test
   1153                 // purpose. A more efficient (above) way is used. It can be put
   1154                 // back in if customers request for a white/black list feature.
   1155                 // ZDSecMgrStoredDeviceList[] is defined in ZDSecMgr.c
   1156          
   1157            // The following code processes the device black list (stored device list)
   1158            // If the joining device is not part of the forbidden device list
   1159            // Return ZSuccess. Otherwise, return ZNwkUnknownDevice. The trust center
   1160            // will send Remove-device and ban the device from joining.
   1161          
   1162            uint8     index;
   1163            uint8*    restricted;
   1164          
   1165            // Look through the stored device list - used for restricted devices
   1166            for ( index = 0; index < ZDSECMGR_STORED_DEVICES; index++ )
   1167            {
   1168              restricted = ZDSecMgrStoredDeviceList[index];
   1169          
   1170              if ( AddrMgrExtAddrEqual( restricted, device->extAddr )  == TRUE )
   1171              {
   1172                // return as unknown device in regards to validation
   1173                status = ZNwkUnknownDevice;
   1174          
   1175                // break from loop
   1176                index = ZDSECMGR_STORED_DEVICES;
   1177              }
   1178            }
   1179          
   1180          #endif
   1181          
   1182            return status;
   \                     ??ZDSecMgrDeviceValidateRM_0:
   \   00000E   D083         POP       DPH
   \   000010   D082         POP       DPL
   \   000012   02....       LJMP      ?BRET
   1183          }
   1184          
   1185          /******************************************************************************
   1186           * @fn          ZDSecMgrDeviceValidate
   1187           *
   1188           * @brief       Decide whether device is allowed.
   1189           *
   1190           * @param       device - [in] ZDSecMgrDevice_t, device info
   1191           *
   1192           * @return      ZStatus_t
   1193           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1194          ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceValidate:
   1195          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1196            ZStatus_t status;
   1197          
   1198            if ( ZDSecMgrPermitJoiningEnabled == TRUE )
   \   000009   90....       MOV       DPTR,#ZDSecMgrPermitJoiningEnabled
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6401         XRL       A,#0x1
   \   00000F   700C         JNZ       ??ZDSecMgrDeviceValidate_0
   1199            {
   1200              status = ZDSecMgrDeviceValidateRM( device );
   \   000011                ; Setup parameters for call to function ZDSecMgrDeviceValidateRM
   \   000011   EE           MOV       A,R6
   \   000012   FA           MOV       R2,A
   \   000013   EF           MOV       A,R7
   \   000014   FB           MOV       R3,A
   \   000015   12....       LCALL     `??ZDSecMgrDeviceValidateRM::?relay`; Banked call to: ZDSecMgrDeviceValidateRM
   \   000018   E9           MOV       A,R1
   \   000019   F5..         MOV       ?V0,A
   \   00001B   8003         SJMP      ??ZDSecMgrDeviceValidate_1
   1201            }
   1202            else
   1203            {
   1204              status = ZNwkUnknownDevice;
   \                     ??ZDSecMgrDeviceValidate_0:
   \   00001D   75..C8       MOV       ?V0,#-0x38
   1205            }
   1206          
   1207            return status;
   \                     ??ZDSecMgrDeviceValidate_1:
   \   000020   A9..         MOV       R1,?V0
   \   000022   7F01         MOV       R7,#0x1
   \   000024   02....       LJMP      ?BANKED_LEAVE_XDATA
   1208          }
   1209          
   1210          /******************************************************************************
   1211           * @fn          ZDSecMgrDeviceJoin
   1212           *
   1213           * @brief       Try to join this device.
   1214           *
   1215           * @param       device - [in] ZDSecMgrDevice_t, device info
   1216           *
   1217           * @return      ZStatus_t
   1218           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1219          ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceJoin:
   1220          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1221            ZStatus_t status = ZSuccess;
   \   00000E   75..00       MOV       ?V0,#0x0
   1222            uint16    ami;
   1223          
   1224            // attempt to validate device that joined/rejoined without security
   1225            if ( device->secure == FALSE )
   \   000011   8E82         MOV       DPL,R6
   \   000013   8F83         MOV       DPH,R7
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   700A         JNZ       ??ZDSecMgrDeviceJoin_0
   1226            {
   1227              status = ZDSecMgrDeviceValidate( device );
   \   00001E                ; Setup parameters for call to function ZDSecMgrDeviceValidate
   \   00001E   EE           MOV       A,R6
   \   00001F   FA           MOV       R2,A
   \   000020   EF           MOV       A,R7
   \   000021   FB           MOV       R3,A
   \   000022   12....       LCALL     `??ZDSecMgrDeviceValidate::?relay`; Banked call to: ZDSecMgrDeviceValidate
   \   000025   E9           MOV       A,R1
   \   000026   F5..         MOV       ?V0,A
   1228            }
   1229          
   1230            if ( status == ZSuccess )
   \                     ??ZDSecMgrDeviceJoin_0:
   \   000028   E5..         MOV       A,?V0
   \   00002A   7064         JNZ       ??ZDSecMgrDeviceJoin_1
   1231            {
   1232              // Add the device to the address manager
   1233              ZDSecMgrAddrStore( device->nwkAddr, device->extAddr, &ami );
   \   00002C                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   00002C   A8..         MOV       R0,?XSP + 0
   \   00002E   A9..         MOV       R1,?XSP + 1
   \   000030   88..         MOV       ?V2,R0
   \   000032   89..         MOV       ?V3,R1
   \   000034   78..         MOV       R0,#?V2
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000039   8E82         MOV       DPL,R6
   \   00003B   8F83         MOV       DPH,R7
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   FC           MOV       R4,A
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   FD           MOV       R5,A
   \   000044   8E82         MOV       DPL,R6
   \   000046   8F83         MOV       DPH,R7
   \   000048   E0           MOVX      A,@DPTR
   \   000049   FA           MOV       R2,A
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   FB           MOV       R3,A
   \   00004D   12....       LCALL     `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
   \   000050   7402         MOV       A,#0x2
   \   000052   12....       LCALL     ?DEALLOC_XSTACK8
   \   000055   E9           MOV       A,R1
   1234          
   1235              // Only send the key to devices that have not been authenticated
   1236              if ( ( device->devStatus & DEV_SEC_INIT_STATUS ) &&
   1237                   ( device->secure == FALSE ) )
   \   000056   8E82         MOV       DPL,R6
   \   000058   8F83         MOV       DPH,R7
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   A2E2         MOV       C,0xE0 /* A   */.2
   \   000064   5017         JNC       ??ZDSecMgrDeviceJoin_2
   \   000066   8E82         MOV       DPL,R6
   \   000068   8F83         MOV       DPH,R7
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   E0           MOVX      A,@DPTR
   \   000071   700A         JNZ       ??ZDSecMgrDeviceJoin_2
   1238              {
   1239                //send the nwk key data to the joining device
   1240                status = ZDSecMgrSendNwkKey( device );
   \   000073                ; Setup parameters for call to function ZDSecMgrSendNwkKey
   \   000073   EE           MOV       A,R6
   \   000074   FA           MOV       R2,A
   \   000075   EF           MOV       A,R7
   \   000076   FB           MOV       R3,A
   \   000077   12....       LCALL     `??ZDSecMgrSendNwkKey::?relay`; Banked call to: ZDSecMgrSendNwkKey
   \   00007A   E9           MOV       A,R1
   \   00007B   F5..         MOV       ?V0,A
   1241              }
   1242          
   1243              if ( status != ZSuccess )
   \                     ??ZDSecMgrDeviceJoin_2:
   \   00007D   E5..         MOV       A,?V0
   \   00007F   600F         JZ        ??ZDSecMgrDeviceJoin_1
   1244              {
   1245                ZDSecMgrAddrClear( device->extAddr );
   \   000081                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   000081   8E82         MOV       DPL,R6
   \   000083   8F83         MOV       DPH,R7
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   E0           MOVX      A,@DPTR
   \   000088   FA           MOV       R2,A
   \   000089   A3           INC       DPTR
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   FB           MOV       R3,A
   \   00008C   12....       LCALL     `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   \   00008F   E9           MOV       A,R1
   1246              }
   1247            }
   1248          
   1249            if ( status != ZSuccess )
   \                     ??ZDSecMgrDeviceJoin_1:
   \   000090   E5..         MOV       A,?V0
   \   000092   6009         JZ        ??ZDSecMgrDeviceJoin_3
   1250            {
   1251              // not allowed or transport key failed, remove the device
   1252              ZDSecMgrDeviceRemove( device );
   \   000094                ; Setup parameters for call to function ZDSecMgrDeviceRemove
   \   000094   EE           MOV       A,R6
   \   000095   FA           MOV       R2,A
   \   000096   EF           MOV       A,R7
   \   000097   FB           MOV       R3,A
   \   000098   12....       LCALL     `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
   \   00009B   8073         SJMP      ??ZDSecMgrDeviceJoin_4
   1253            }
   1254            else
   1255            {
   1256              // Pass the Trust Center Device Indication to higher layer if callback registered
   1257              if (zdoCBFunc[ZDO_TC_DEVICE_CBID] != NULL )
   \                     ??ZDSecMgrDeviceJoin_3:
   \   00009D   90....       MOV       DPTR,#zdoCBFunc + 16
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   F8           MOV       R0,A
   \   0000A2   A3           INC       DPTR
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   F9           MOV       R1,A
   \   0000A5   E8           MOV       A,R0
   \   0000A6   49           ORL       A,R1
   \   0000A7   6067         JZ        ??ZDSecMgrDeviceJoin_4
   1258              {
   1259                ZDO_TC_Device_t dev;
   1260          
   1261                dev.nwkAddr = device->nwkAddr;
   \   0000A9   8E82         MOV       DPL,R6
   \   0000AB   8F83         MOV       DPH,R7
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   F8           MOV       R0,A
   \   0000AF   A3           INC       DPTR
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   F9           MOV       R1,A
   \   0000B2   7402         MOV       A,#0x2
   \   0000B4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B7   E8           MOV       A,R0
   \   0000B8   F0           MOVX      @DPTR,A
   \   0000B9   A3           INC       DPTR
   \   0000BA   E9           MOV       A,R1
   \   0000BB   F0           MOVX      @DPTR,A
   1262                osal_memcpy( dev.extAddr, device->extAddr, Z_EXTADDR_LEN );
   \   0000BC                ; Setup parameters for call to function osal_memcpy
   \   0000BC   8E82         MOV       DPL,R6
   \   0000BE   8F83         MOV       DPH,R7
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   F5..         MOV       ?V4,A
   \   0000C5   A3           INC       DPTR
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   F5..         MOV       ?V5,A
   \   0000C9   75..00       MOV       ?V6,#0x0
   \   0000CC   78..         MOV       R0,#?V4
   \   0000CE   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000D1   7C08         MOV       R4,#0x8
   \   0000D3   7D00         MOV       R5,#0x0
   \   0000D5   7407         MOV       A,#0x7
   \   0000D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DA   AA82         MOV       R2,DPL
   \   0000DC   AB83         MOV       R3,DPH
   \   0000DE   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000E1   7403         MOV       A,#0x3
   \   0000E3   12....       LCALL     ?DEALLOC_XSTACK8
   1263                dev.parentAddr = device->parentAddr;
   \   0000E6   8E82         MOV       DPL,R6
   \   0000E8   8F83         MOV       DPH,R7
   \   0000EA   A3           INC       DPTR
   \   0000EB   A3           INC       DPTR
   \   0000EC   A3           INC       DPTR
   \   0000ED   A3           INC       DPTR
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   F8           MOV       R0,A
   \   0000F0   A3           INC       DPTR
   \   0000F1   E0           MOVX      A,@DPTR
   \   0000F2   F9           MOV       R1,A
   \   0000F3   740C         MOV       A,#0xc
   \   0000F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F8   E8           MOV       A,R0
   \   0000F9   F0           MOVX      @DPTR,A
   \   0000FA   A3           INC       DPTR
   \   0000FB   E9           MOV       A,R1
   \   0000FC   F0           MOVX      @DPTR,A
   1264          
   1265                zdoCBFunc[ZDO_TC_DEVICE_CBID]( (void*)&dev );
   \   0000FD                ; Setup parameters for indirect call
   \   0000FD   7402         MOV       A,#0x2
   \   0000FF   12....       LCALL     ?XSTACK_DISP101_8
   \   000102   90....       MOV       DPTR,#zdoCBFunc + 16
   \   000105   E0           MOVX      A,@DPTR
   \   000106   F8           MOV       R0,A
   \   000107   A3           INC       DPTR
   \   000108   E0           MOVX      A,@DPTR
   \   000109   F583         MOV       DPH,A
   \   00010B   8882         MOV       DPL,R0
   \   00010D   12....       LCALL     ?CALL_IND
   1266              }
   1267            }
   1268                
   1269                
   1270          
   1271            return status;
   \                     ??ZDSecMgrDeviceJoin_4:
   \   000110   A9..         MOV       R1,?V0
   \   000112   740E         MOV       A,#0xe
   \   000114   12....       LCALL     ?DEALLOC_XSTACK8
   \   000117   7F07         MOV       R7,#0x7
   \   000119   02....       LJMP      ?BANKED_LEAVE_XDATA
   1272          }
   1273          
   1274          /******************************************************************************
   1275           * @fn          ZDSecMgrDeviceJoinDirect
   1276           *
   1277           * @brief       Try to join this device as a direct child.
   1278           *
   1279           * @param       device - [in] ZDSecMgrDevice_t, device info
   1280           *
   1281           * @return      ZStatus_t
   1282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1283          ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceJoinDirect:
   1284          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1285            ZStatus_t status;
   1286            
   1287            if(device->secure == FALSE)
   \   00000E   8E82         MOV       DPL,R6
   \   000010   8F83         MOV       DPH,R7
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   6003         JZ        $+5
   \   00001B   02....       LJMP      ??ZDSecMgrDeviceJoinDirect_0 & 0xFFFF
   1288            {  
   1289              uint8  found;
   1290              uint16 keyNvIndex;
   1291              APSME_TCLKDevEntry_t TCLKDevEntry;
   1292              
   1293              keyNvIndex = APSME_SearchTCLinkKeyEntry(device->extAddr,&found, &TCLKDevEntry);
   \   00001E                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   00001E   7401         MOV       A,#0x1
   \   000020   12....       LCALL     ?XSTACK_DISP100_8
   \   000023   88..         MOV       ?V0,R0
   \   000025   89..         MOV       ?V1,R1
   \   000027   78..         MOV       R0,#?V0
   \   000029   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002C   7402         MOV       A,#0x2
   \   00002E   12....       LCALL     ?XSTACK_DISP102_8
   \   000031   8E82         MOV       DPL,R6
   \   000033   8F83         MOV       DPH,R7
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   FA           MOV       R2,A
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   FB           MOV       R3,A
   \   00003C   12....       LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
   \   00003F   7402         MOV       A,#0x2
   \   000041   12....       LCALL     ?DEALLOC_XSTACK8
   \   000044   8A..         MOV       ?V0,R2
   \   000046   8B..         MOV       ?V1,R3
   \   000048   85....       MOV       ?V2,?V0
   \   00004B   85....       MOV       ?V3,?V1
   1294              
   1295              //If found and it was verified, then allow it to join in a fresh state by erasing the key entry
   1296              if((found == TRUE) && (TCLKDevEntry.keyAttributes == ZG_VERIFIED_KEY))
   \   00004E   85..82       MOV       DPL,?XSP + 0
   \   000051   85..83       MOV       DPH,?XSP + 1
   \   000054   E0           MOVX      A,@DPTR
   \   000055   6401         XRL       A,#0x1
   \   000057   6003         JZ        $+5
   \   000059   02....       LJMP      ??ZDSecMgrDeviceJoinDirect_0 & 0xFFFF
   \   00005C   7411         MOV       A,#0x11
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   E0           MOVX      A,@DPTR
   \   000062   6402         XRL       A,#0x2
   \   000064   6003         JZ        $+5
   \   000066   02....       LJMP      ??ZDSecMgrDeviceJoinDirect_0 & 0xFFFF
   1297              {
   1298                uint16 index;
   1299                TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
   \   000069   7411         MOV       A,#0x11
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   74FF         MOV       A,#-0x1
   \   000070   F0           MOVX      @DPTR,A
   1300                //Increase the shift by one. Validate the maximum shift of the seed which is 15
   1301                TCLKDevEntry.SeedShift_IcIndex++;
   \   000071   7413         MOV       A,#0x13
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   E0           MOVX      A,@DPTR
   \   000077   2401         ADD       A,#0x1
   \   000079   F0           MOVX      @DPTR,A
   1302                TCLKDevEntry.SeedShift_IcIndex &= 0x0F;
   \   00007A   7413         MOV       A,#0x13
   \   00007C   12....       LCALL     ?XSTACK_DISP0_8
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   540F         ANL       A,#0xf
   \   000082   F0           MOVX      @DPTR,A
   1303                
   1304                TCLKDevEntry.rxFrmCntr = 0;
   \   000083   7405         MOV       A,#0x5
   \   000085   12....       LCALL     ?XSTACK_DISP0_8
   \   000088   7400         MOV       A,#0x0
   \   00008A   F0           MOVX      @DPTR,A
   \   00008B   A3           INC       DPTR
   \   00008C   7400         MOV       A,#0x0
   \   00008E   F0           MOVX      @DPTR,A
   \   00008F   A3           INC       DPTR
   \   000090   7400         MOV       A,#0x0
   \   000092   F0           MOVX      @DPTR,A
   \   000093   A3           INC       DPTR
   \   000094   7400         MOV       A,#0x0
   \   000096   F0           MOVX      @DPTR,A
   1305                TCLKDevEntry.txFrmCntr = 0;
   \   000097   7401         MOV       A,#0x1
   \   000099   12....       LCALL     ?XSTACK_DISP0_8
   \   00009C   7400         MOV       A,#0x0
   \   00009E   F0           MOVX      @DPTR,A
   \   00009F   A3           INC       DPTR
   \   0000A0   7400         MOV       A,#0x0
   \   0000A2   F0           MOVX      @DPTR,A
   \   0000A3   A3           INC       DPTR
   \   0000A4   7400         MOV       A,#0x0
   \   0000A6   F0           MOVX      @DPTR,A
   \   0000A7   A3           INC       DPTR
   \   0000A8   7400         MOV       A,#0x0
   \   0000AA   F0           MOVX      @DPTR,A
   1306                
   1307                index = keyNvIndex - ZCD_NV_TCLK_TABLE_START;
   \   0000AB   E5..         MOV       A,?V2
   \   0000AD   24EF         ADD       A,#-0x11
   \   0000AF   F8           MOV       R0,A
   \   0000B0   E5..         MOV       A,?V3
   \   0000B2   34FE         ADDC      A,#-0x2
   \   0000B4   F9           MOV       R1,A
   \   0000B5   88..         MOV       ?V0,R0
   \   0000B7   89..         MOV       ?V1,R1
   1308                
   1309                TCLinkKeyFrmCntr[index].rxFrmCntr = 0;
   \   0000B9   A8..         MOV       R0,?V0
   \   0000BB   A9..         MOV       R1,?V1
   \   0000BD   E8           MOV       A,R0
   \   0000BE   75F009       MOV       B,#0x9
   \   0000C1   A4           MUL       AB
   \   0000C2   C8           XCH       A,R0
   \   0000C3   AAF0         MOV       R2,B
   \   0000C5   75F000       MOV       B,#0x0
   \   0000C8   A4           MUL       AB
   \   0000C9   2A           ADD       A,R2
   \   0000CA   FA           MOV       R2,A
   \   0000CB   75F009       MOV       B,#0x9
   \   0000CE   E9           MOV       A,R1
   \   0000CF   A4           MUL       AB
   \   0000D0   2A           ADD       A,R2
   \   0000D1   F9           MOV       R1,A
   \   0000D2   74..         MOV       A,#(TCLinkKeyFrmCntr + 4) & 0xff
   \   0000D4   28           ADD       A,R0
   \   0000D5   F582         MOV       DPL,A
   \   0000D7   74..         MOV       A,#((TCLinkKeyFrmCntr + 4) >> 8) & 0xff
   \   0000D9   39           ADDC      A,R1
   \   0000DA   F583         MOV       DPH,A
   \   0000DC   7400         MOV       A,#0x0
   \   0000DE   F0           MOVX      @DPTR,A
   \   0000DF   A3           INC       DPTR
   \   0000E0   7400         MOV       A,#0x0
   \   0000E2   F0           MOVX      @DPTR,A
   \   0000E3   A3           INC       DPTR
   \   0000E4   7400         MOV       A,#0x0
   \   0000E6   F0           MOVX      @DPTR,A
   \   0000E7   A3           INC       DPTR
   \   0000E8   7400         MOV       A,#0x0
   \   0000EA   F0           MOVX      @DPTR,A
   1310                TCLinkKeyFrmCntr[index].txFrmCntr = 0;
   \   0000EB   A8..         MOV       R0,?V0
   \   0000ED   A9..         MOV       R1,?V1
   \   0000EF   E8           MOV       A,R0
   \   0000F0   75F009       MOV       B,#0x9
   \   0000F3   A4           MUL       AB
   \   0000F4   C8           XCH       A,R0
   \   0000F5   AAF0         MOV       R2,B
   \   0000F7   75F000       MOV       B,#0x0
   \   0000FA   A4           MUL       AB
   \   0000FB   2A           ADD       A,R2
   \   0000FC   FA           MOV       R2,A
   \   0000FD   75F009       MOV       B,#0x9
   \   000100   E9           MOV       A,R1
   \   000101   A4           MUL       AB
   \   000102   2A           ADD       A,R2
   \   000103   F9           MOV       R1,A
   \   000104   74..         MOV       A,#TCLinkKeyFrmCntr & 0xff
   \   000106   28           ADD       A,R0
   \   000107   F582         MOV       DPL,A
   \   000109   74..         MOV       A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   00010B   39           ADDC      A,R1
   \   00010C   F583         MOV       DPH,A
   \   00010E   7400         MOV       A,#0x0
   \   000110   F0           MOVX      @DPTR,A
   \   000111   A3           INC       DPTR
   \   000112   7400         MOV       A,#0x0
   \   000114   F0           MOVX      @DPTR,A
   \   000115   A3           INC       DPTR
   \   000116   7400         MOV       A,#0x0
   \   000118   F0           MOVX      @DPTR,A
   \   000119   A3           INC       DPTR
   \   00011A   7400         MOV       A,#0x0
   \   00011C   F0           MOVX      @DPTR,A
   1311                
   1312                //Update the entry
   1313                osal_nv_write(keyNvIndex,0,sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
   \   00011D                ; Setup parameters for call to function osal_nv_write
   \   00011D   7401         MOV       A,#0x1
   \   00011F   12....       LCALL     ?XSTACK_DISP100_8
   \   000122   88..         MOV       ?V6,R0
   \   000124   89..         MOV       ?V7,R1
   \   000126   78..         MOV       R0,#?V6
   \   000128   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012B   75..13       MOV       ?V6,#0x13
   \   00012E   75..00       MOV       ?V7,#0x0
   \   000131   78..         MOV       R0,#?V6
   \   000133   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000136   7C00         MOV       R4,#0x0
   \   000138   7D00         MOV       R5,#0x0
   \   00013A   AA..         MOV       R2,?V2
   \   00013C   AB..         MOV       R3,?V3
   \   00013E   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000141   7404         MOV       A,#0x4
   \   000143   12....       LCALL     ?DEALLOC_XSTACK8
   \   000146   E9           MOV       A,R1
   1314              }
   1315              
   1316            }
   1317          
   1318            status = ZDSecMgrDeviceJoin( device );
   \                     ??ZDSecMgrDeviceJoinDirect_0:
   \   000147                ; Setup parameters for call to function ZDSecMgrDeviceJoin
   \   000147   EE           MOV       A,R6
   \   000148   FA           MOV       R2,A
   \   000149   EF           MOV       A,R7
   \   00014A   FB           MOV       R3,A
   \   00014B   12....       LCALL     `??ZDSecMgrDeviceJoin::?relay`; Banked call to: ZDSecMgrDeviceJoin
   \   00014E   E9           MOV       A,R1
   \   00014F   F5..         MOV       ?V4,A
   1319          
   1320            if ( status == ZSuccess )
   \   000151   E5..         MOV       A,?V4
   \   000153   7017         JNZ       ??ZDSecMgrDeviceJoinDirect_1
   1321            {
   1322              // set association status to authenticated
   1323              ZDSecMgrAssocDeviceAuth( AssocGetWithShort( device->nwkAddr ) );
   \   000155                ; Setup parameters for call to function AssocGetWithShort
   \   000155   8E82         MOV       DPL,R6
   \   000157   8F83         MOV       DPH,R7
   \   000159   E0           MOVX      A,@DPTR
   \   00015A   FA           MOV       R2,A
   \   00015B   A3           INC       DPTR
   \   00015C   E0           MOVX      A,@DPTR
   \   00015D   FB           MOV       R3,A
   \   00015E   12....       LCALL     `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   000161   8A..         MOV       ?V0,R2
   \   000163   8B..         MOV       ?V1,R3
   \   000165   AA..         MOV       R2,?V0
   \   000167   AB..         MOV       R3,?V1
   \   000169                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   000169   12....       LCALL     `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   1324              
   1325            #if (ZG_BUILD_COORDINATOR_TYPE)    
   1326              //Add the device as joining device, if it did join unsecured
   1327              if(device->secure == FALSE)
   1328              {
   1329                bdb_TCAddJoiningDevice(NLME_GetShortAddr(),device->extAddr);
   1330              }
   1331            #endif
   1332            }
   1333          
   1334            return status;
   \                     ??ZDSecMgrDeviceJoinDirect_1:
   \   00016C   A9..         MOV       R1,?V4
   \   00016E   7414         MOV       A,#0x14
   \   000170   12....       LCALL     ?DEALLOC_XSTACK8
   \   000173   7F08         MOV       R7,#0x8
   \   000175   02....       LJMP      ?BANKED_LEAVE_XDATA
   1335          }
   1336          
   1337          /******************************************************************************
   1338           * @fn          ZDSecMgrDeviceJoinFwd
   1339           *
   1340           * @brief       Forward join to Trust Center.
   1341           *
   1342           * @param       device - [in] ZDSecMgrDevice_t, device info
   1343           *
   1344           * @return      ZStatus_t
   1345           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1346          ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceJoinFwd:
   1347          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1348            ZStatus_t               status;
   1349            APSME_UpdateDeviceReq_t req;
   1350            uint8 TC_ExtAddr[Z_EXTADDR_LEN];
   1351          
   1352            // forward any joining device to the Trust Center -- the Trust Center will
   1353            // decide if the device is allowed to join
   1354            status = ZSuccess;
   \   00000E   75..00       MOV       ?V0,#0x0
   1355          
   1356            // forward authorization to the Trust Center
   1357            req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   \   000011   7401         MOV       A,#0x1
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   7400         MOV       A,#0x0
   \   000018   F0           MOVX      @DPTR,A
   \   000019   A3           INC       DPTR
   \   00001A   7400         MOV       A,#0x0
   \   00001C   F0           MOVX      @DPTR,A
   1358            req.devAddr    = device->nwkAddr;
   \   00001D   8E82         MOV       DPL,R6
   \   00001F   8F83         MOV       DPH,R7
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F8           MOV       R0,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F9           MOV       R1,A
   \   000026   7403         MOV       A,#0x3
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   E8           MOV       A,R0
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   A3           INC       DPTR
   \   00002E   E9           MOV       A,R1
   \   00002F   F0           MOVX      @DPTR,A
   1359            req.devExtAddr = device->extAddr;
   \   000030   8E82         MOV       DPL,R6
   \   000032   8F83         MOV       DPH,R7
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F8           MOV       R0,A
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F9           MOV       R1,A
   \   00003B   7405         MOV       A,#0x5
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   E8           MOV       A,R0
   \   000041   F0           MOVX      @DPTR,A
   \   000042   A3           INC       DPTR
   \   000043   E9           MOV       A,R1
   \   000044   F0           MOVX      @DPTR,A
   1360          
   1361            // set security status, option for router to reject if policy set
   1362            if ( (device->devStatus & DEV_HIGH_SEC_STATUS) )
   \   000045   8E82         MOV       DPL,R6
   \   000047   8F83         MOV       DPH,R7
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   E0           MOVX      A,@DPTR
   \   000051   A2E7         MOV       C,0xE0 /* A   */.7
   \   000053   503D         JNC       ??ZDSecMgrDeviceJoinFwd_0
   1363            {
   1364              if ( device->devStatus & DEV_REJOIN_STATUS )
   \   000055   8E82         MOV       DPL,R6
   \   000057   8F83         MOV       DPH,R7
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   E0           MOVX      A,@DPTR
   \   000061   A2E6         MOV       C,0xE0 /* A   */.6
   \   000063   5023         JNC       ??ZDSecMgrDeviceJoinFwd_1
   1365              {
   1366                if ( device->secure == TRUE )
   \   000065   8E82         MOV       DPL,R6
   \   000067   8F83         MOV       DPH,R7
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   6401         XRL       A,#0x1
   \   000072   700A         JNZ       ??ZDSecMgrDeviceJoinFwd_2
   1367                {
   1368                  req.status = APSME_UD_HIGH_SECURED_REJOIN;
   \   000074   7407         MOV       A,#0x7
   \   000076   12....       LCALL     ?XSTACK_DISP0_8
   \   000079   7404         MOV       A,#0x4
   \   00007B   F0           MOVX      @DPTR,A
   \   00007C   804F         SJMP      ??ZDSecMgrDeviceJoinFwd_3
   1369                }
   1370                else
   1371                {
   1372                  req.status = APSME_UD_HIGH_UNSECURED_REJOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_2:
   \   00007E   7407         MOV       A,#0x7
   \   000080   12....       LCALL     ?XSTACK_DISP0_8
   \   000083   7407         MOV       A,#0x7
   \   000085   F0           MOVX      @DPTR,A
   \   000086   8045         SJMP      ??ZDSecMgrDeviceJoinFwd_3
   1373                }
   1374              }
   1375              else
   1376              {
   1377                req.status = APSME_UD_HIGH_UNSECURED_JOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_1:
   \   000088   7407         MOV       A,#0x7
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   7405         MOV       A,#0x5
   \   00008F   F0           MOVX      @DPTR,A
   \   000090   803B         SJMP      ??ZDSecMgrDeviceJoinFwd_3
   1378              }
   1379            }
   1380            else
   1381            {
   1382              if ( device->devStatus & DEV_REJOIN_STATUS )
   \                     ??ZDSecMgrDeviceJoinFwd_0:
   \   000092   8E82         MOV       DPL,R6
   \   000094   8F83         MOV       DPH,R7
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   A2E6         MOV       C,0xE0 /* A   */.6
   \   0000A0   5023         JNC       ??ZDSecMgrDeviceJoinFwd_4
   1383              {
   1384                if ( device->secure == TRUE )
   \   0000A2   8E82         MOV       DPL,R6
   \   0000A4   8F83         MOV       DPH,R7
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   A3           INC       DPTR
   \   0000AB   A3           INC       DPTR
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   6401         XRL       A,#0x1
   \   0000AF   700A         JNZ       ??ZDSecMgrDeviceJoinFwd_5
   1385                {
   1386                  req.status = APSME_UD_STANDARD_SECURED_REJOIN;
   \   0000B1   7407         MOV       A,#0x7
   \   0000B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B6   7400         MOV       A,#0x0
   \   0000B8   F0           MOVX      @DPTR,A
   \   0000B9   8012         SJMP      ??ZDSecMgrDeviceJoinFwd_3
   1387                }
   1388                else
   1389                {
   1390                  req.status = APSME_UD_STANDARD_TRUST_CENTER_REJOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_5:
   \   0000BB   7407         MOV       A,#0x7
   \   0000BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C0   7403         MOV       A,#0x3
   \   0000C2   F0           MOVX      @DPTR,A
   \   0000C3   8008         SJMP      ??ZDSecMgrDeviceJoinFwd_3
   1391                }
   1392              }
   1393              else
   1394              {
   1395                req.status = APSME_UD_STANDARD_UNSECURED_JOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_4:
   \   0000C5   7407         MOV       A,#0x7
   \   0000C7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CA   7401         MOV       A,#0x1
   \   0000CC   F0           MOVX      @DPTR,A
   1396              }
   1397            }
   1398          
   1399            // set association status to authenticated
   1400            ZDSecMgrAssocDeviceAuth( AssocGetWithShort( device->nwkAddr ) );
   \                     ??ZDSecMgrDeviceJoinFwd_3:
   \   0000CD                ; Setup parameters for call to function AssocGetWithShort
   \   0000CD   8E82         MOV       DPL,R6
   \   0000CF   8F83         MOV       DPH,R7
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   FA           MOV       R2,A
   \   0000D3   A3           INC       DPTR
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   FB           MOV       R3,A
   \   0000D6   12....       LCALL     `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   0000D9   8A..         MOV       ?V2,R2
   \   0000DB   8B..         MOV       ?V3,R3
   \   0000DD   AA..         MOV       R2,?V2
   \   0000DF   AB..         MOV       R3,?V3
   \   0000E1                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   0000E1   12....       LCALL     `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   1401          
   1402            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1403            {
   1404              uint8 found;
   1405              APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
   \   0000E4                ; Setup parameters for call to function APSME_GetRequest
   \   0000E4   7409         MOV       A,#0x9
   \   0000E6   12....       LCALL     ?XSTACK_DISP102_8
   \   0000E9   7A00         MOV       R2,#0x0
   \   0000EB   7B00         MOV       R3,#0x0
   \   0000ED   79AB         MOV       R1,#-0x55
   \   0000EF   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   \   0000F2   E9           MOV       A,R1
   1406              
   1407              APSME_SearchTCLinkKeyEntry(TC_ExtAddr,&found,NULL);
   \   0000F3                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   0000F3   E4           CLR       A
   \   0000F4   F5..         MOV       ?V2,A
   \   0000F6   F5..         MOV       ?V3,A
   \   0000F8   78..         MOV       R0,#?V2
   \   0000FA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FD   7402         MOV       A,#0x2
   \   0000FF   12....       LCALL     ?XSTACK_DISP102_8
   \   000102   740B         MOV       A,#0xb
   \   000104   12....       LCALL     ?XSTACK_DISP101_8
   \   000107   12....       LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
   \   00010A   7402         MOV       A,#0x2
   \   00010C   12....       LCALL     ?DEALLOC_XSTACK8
   1408              
   1409              // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
   1410              // un-encrypted and one APS encrypted, to make sure that it can interoperate
   1411              // with legacy Coordinator devices which can only handle one or the other.
   1412          #if defined ( APP_TP2_TEST_MODE )
   1413              if ( ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY ) && ( guTxApsSecON != TRUE ) )
   1414          #else
   1415              if ( ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY ) && ( found == FALSE ) )
   \   00010F   90....       MOV       DPTR,#zgApsLinkKeyType
   \   000112   E0           MOVX      A,@DPTR
   \   000113   6401         XRL       A,#0x1
   \   000115   701C         JNZ       ??ZDSecMgrDeviceJoinFwd_6
   \   000117   85..82       MOV       DPL,?XSP + 0
   \   00011A   85..83       MOV       DPH,?XSP + 1
   \   00011D   E0           MOVX      A,@DPTR
   \   00011E   7013         JNZ       ??ZDSecMgrDeviceJoinFwd_6
   1416          #endif
   1417              {
   1418                req.apsSecure = FALSE;
   \   000120   7408         MOV       A,#0x8
   \   000122   12....       LCALL     ?XSTACK_DISP0_8
   \   000125   7400         MOV       A,#0x0
   \   000127   F0           MOVX      @DPTR,A
   1419          
   1420                // send and APSME_UPDATE_DEVICE request to the trust center
   1421                status = APSME_UpdateDeviceReq( &req );
   \   000128                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   000128   7401         MOV       A,#0x1
   \   00012A   12....       LCALL     ?XSTACK_DISP101_8
   \   00012D   12....       LCALL     `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
   \   000130   E9           MOV       A,R1
   \   000131   F5..         MOV       ?V0,A
   1422              }
   1423          
   1424          #if defined ( APP_TP2_TEST_MODE )
   1425              if ( guTxApsSecON != FALSE )
   1426              {
   1427                // send the message APS encrypted
   1428                req.apsSecure = TRUE;
   1429          
   1430                // send and APSME_UPDATE_DEVICE request to the trust center
   1431                status = APSME_UpdateDeviceReq( &req );
   1432              }
   1433          #else
   1434              // send the message APS encrypted
   1435              req.apsSecure = TRUE;
   \                     ??ZDSecMgrDeviceJoinFwd_6:
   \   000133   7408         MOV       A,#0x8
   \   000135   12....       LCALL     ?XSTACK_DISP0_8
   \   000138   7401         MOV       A,#0x1
   \   00013A   F0           MOVX      @DPTR,A
   1436          
   1437              // send and APSME_UPDATE_DEVICE request to the trust center
   1438              status = APSME_UpdateDeviceReq( &req );
   \   00013B                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   00013B   7401         MOV       A,#0x1
   \   00013D   12....       LCALL     ?XSTACK_DISP101_8
   \   000140   12....       LCALL     `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
   \   000143   E9           MOV       A,R1
   \   000144   F5..         MOV       ?V0,A
   1439          #endif
   1440            }
   1441            else
   1442            {
   1443              req.apsSecure = FALSE;
   1444          
   1445              // send and APSME_UPDATE_DEVICE request to the trust center
   1446              status = APSME_UpdateDeviceReq( &req );
   1447            }
   1448          
   1449            return status;
   \   000146   A9..         MOV       R1,?V0
   \   000148   7411         MOV       A,#0x11
   \   00014A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00014D   7F04         MOV       R7,#0x4
   \   00014F   02....       LJMP      ?BANKED_LEAVE_XDATA
   1450          }
   1451          
   1452          /******************************************************************************
   1453           * @fn          ZDSecMgrDeviceNew
   1454           *
   1455           * @brief       Process a new device.
   1456           *
   1457           * @param       device - [in] ZDSecMgrDevice_t, device info
   1458           *
   1459           * @return      ZStatus_t
   1460           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1461          ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* joiner )
   \                     ZDSecMgrDeviceNew:
   1462          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1463            ZStatus_t status;
   1464          
   1465            if ( ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1466                || ( ( ZG_BUILD_RTR_TYPE ) && APSME_IsDistributedSecurity() ) )
   1467            {
   1468              // try to join this device
   1469              status = ZDSecMgrDeviceJoinDirect( joiner );
   1470            }
   1471            else
   1472            {
   1473              status = ZDSecMgrDeviceJoinFwd( joiner );
   \   000009                ; Setup parameters for call to function ZDSecMgrDeviceJoinFwd
   \   000009   EE           MOV       A,R6
   \   00000A   FA           MOV       R2,A
   \   00000B   EF           MOV       A,R7
   \   00000C   FB           MOV       R3,A
   \   00000D   12....       LCALL     `??ZDSecMgrDeviceJoinFwd::?relay`; Banked call to: ZDSecMgrDeviceJoinFwd
   \   000010   E9           MOV       A,R1
   \   000011   F5..         MOV       ?V0,A
   1474            }
   1475          
   1476            return status;
   \   000013   A9..         MOV       R1,?V0
   \   000015   7F01         MOV       R7,#0x1
   \   000017   02....       LJMP      ?BANKED_LEAVE_XDATA
   1477          }
   1478          
   1479          /******************************************************************************
   1480           * @fn          ZDSecMgrAssocDeviceAuth
   1481           *
   1482           * @brief       Set associated device status to authenticated
   1483           *
   1484           * @param       assoc - [in, out] associated_devices_t
   1485           *
   1486           * @return      none
   1487           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1488          void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc )
   \                     ZDSecMgrAssocDeviceAuth:
   1489          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1490            if ( assoc != NULL )
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   600D         JZ        ??ZDSecMgrAssocDeviceAuth_0
   1491            {
   1492              assoc->devStatus |= DEV_SEC_AUTH_STATUS;
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   D2E3         SETB      0xE0 /* A   */.3
   \   000014   F0           MOVX      @DPTR,A
   1493            }
   1494          }
   \                     ??ZDSecMgrAssocDeviceAuth_0:
   \   000015   D083         POP       DPH
   \   000017   D082         POP       DPL
   \   000019   02....       LJMP      ?BRET
   1495          
   1496          /******************************************************************************
   1497           * @fn          ZDSecMgrAuthNwkKey
   1498           *
   1499           * @brief       Handle next step in authentication process
   1500           *
   1501           * @param       none
   1502           *
   1503           * @return      none
   1504           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1505          void ZDSecMgrAuthNwkKey()
   \                     ZDSecMgrAuthNwkKey:
   1506          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1507            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6405         XRL       A,#0x5
   \   00000A   700D         JNZ       ??ZDSecMgrAuthNwkKey_0
   1508            {
   1509              // inform ZDO that device has been authenticated
   1510              osal_set_event ( ZDAppTaskID, ZDO_DEVICE_AUTH );
   \   00000C                ; Setup parameters for call to function osal_set_event
   \   00000C   7A80         MOV       R2,#-0x80
   \   00000E   7B00         MOV       R3,#0x0
   \   000010   90....       MOV       DPTR,#ZDAppTaskID
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F9           MOV       R1,A
   \   000015   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000018   E9           MOV       A,R1
   1511            }
   1512          }
   \                     ??ZDSecMgrAuthNwkKey_0:
   \   000019   D083         POP       DPH
   \   00001B   D082         POP       DPL
   \   00001D   02....       LJMP      ?BRET
   1513          
   1514          /******************************************************************************
   1515           * PUBLIC FUNCTIONS
   1516           */
   1517          /******************************************************************************
   1518           * @fn          ZDSecMgrInit
   1519           *
   1520           * @brief       Initialize ZigBee Device Security Manager.
   1521           *
   1522           * @param       state - device initialization state
   1523           *
   1524           * @return      none
   1525           */
   1526          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
   1527          void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
   1528          void ZDSecMgrAddrMgrCB( uint8           update,
   1529                                  AddrMgrEntry_t* newEntry,
   1530                                  AddrMgrEntry_t* oldEntry )
   1531          {
   1532            (void)update;
   1533            (void)newEntry;
   1534            (void)oldEntry;
   1535          }
   1536          #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
   1537          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1538          void ZDSecMgrInit(uint8 state)
   \                     ZDSecMgrInit:
   1539          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   1540            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1541            {
   1542              // initialize sub modules
   1543              ZDSecMgrEntryInit(state);
   \   000007                ; Setup parameters for call to function ZDSecMgrEntryInit
   \   000007   EE           MOV       A,R6
   \   000008   F9           MOV       R1,A
   \   000009   12....       LCALL     `??ZDSecMgrEntryInit::?relay`; Banked call to: ZDSecMgrEntryInit
   1544          
   1545              if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1546              {
   1547                APSME_SetRequest( apsTrustCenterAddress, 0, NLME_GetExtAddr() );
   1548              }
   1549          
   1550              // register with Address Manager
   1551          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
   1552              AddrMgrRegister( ADDRMGR_REG_SECURITY, ZDSecMgrAddrMgrCB );
   1553          #endif
   1554            }
   1555          
   1556            if ( ZG_SECURE_ENABLED )
   1557            {
   1558              if ( ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1559                   || ( ( ZG_BUILD_RTR_TYPE ) && APSME_IsDistributedSecurity() ) )
   1560              {
   1561                // setup joining permissions
   1562                ZDSecMgrPermitJoiningEnabled = TRUE;  
   1563                ZDSecMgrPermitJoiningTimed   = FALSE;
   1564              }
   1565            }
   1566          
   1567            // configure security based on security mode and type of device
   1568            ZDSecMgrConfig();
   \   00000C                ; Setup parameters for call to function ZDSecMgrConfig
   \   00000C   12....       LCALL     `??ZDSecMgrConfig::?relay`; Banked call to: ZDSecMgrConfig
   1569          }
   \   00000F   7F01         MOV       R7,#0x1
   \   000011   02....       LJMP      ?BANKED_LEAVE_XDATA
   1570          
   1571          /******************************************************************************
   1572           * @fn          ZDSecMgrConfig
   1573           *
   1574           * @brief       Configure ZigBee Device Security Manager.
   1575           *
   1576           * @param       none
   1577           *
   1578           * @return      none
   1579           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1580          void ZDSecMgrConfig( void )
   \                     ZDSecMgrConfig:
   1581          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1582            if ( ZG_SECURE_ENABLED )
   1583            {
   1584              SSP_Init();
   \   000004                ; Setup parameters for call to function SSP_Init
   \   000004   12....       LCALL     `??SSP_Init::?relay`; Banked call to: SSP_Init
   1585          
   1586              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1587              {
   1588                if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1589                {
   1590                  // COMMERCIAL MODE - COORDINATOR DEVICE
   1591                  APSME_SecurityCM_CD();
   1592                }
   1593                else if ( ZSTACK_ROUTER_BUILD )
   1594                {
   1595                  // COMMERCIAL MODE - ROUTER DEVICE
   1596                  APSME_SecurityCM_RD();
   1597                }
   1598                else
   1599                {
   1600                  // COMMERCIAL MODE - END DEVICE
   1601                  APSME_SecurityCM_ED();
   \   000007                ; Setup parameters for call to function APSME_SecurityCM_ED
   \   000007   12....       LCALL     `??APSME_SecurityCM_ED::?relay`; Banked call to: APSME_SecurityCM_ED
   1602                }
   1603              }
   1604              else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   1605              {
   1606                if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1607                {
   1608                  // RESIDENTIAL MODE - COORDINATOR DEVICE
   1609                  APSME_SecurityRM_CD();
   1610                }
   1611                else if ( ZSTACK_ROUTER_BUILD )
   1612                {
   1613                  // RESIDENTIAL MODE - ROUTER DEVICE
   1614                  APSME_SecurityRM_RD();
   1615                }
   1616                else
   1617                {
   1618                  // RESIDENTIAL MODE - END DEVICE
   1619                  APSME_SecurityRM_ED();
   1620                }
   1621              }
   1622            }
   1623            else
   1624            {
   1625              // NO SECURITY
   1626              APSME_SecurityNM();
   1627            }
   1628          }
   \   00000A   D083         POP       DPH
   \   00000C   D082         POP       DPL
   \   00000E   02....       LJMP      ?BRET
   1629          
   1630          /******************************************************************************
   1631           * @fn          ZDSecMgrPermitJoining
   1632           *
   1633           * @brief       Process request to change joining permissions.
   1634           *
   1635           * @param       duration - [in] timed duration for join in seconds
   1636           *                         - 0x00 not allowed
   1637           *                         - 0xFF allowed without timeout
   1638           *
   1639           * @return      uint8 - success(TRUE:FALSE)
   1640           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1641          uint8 ZDSecMgrPermitJoining( uint8 duration )
   \                     ZDSecMgrPermitJoining:
   1642          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   F8           MOV       R0,A
   1643            uint8 accept;
   1644          
   1645            ZDSecMgrPermitJoiningTimed = FALSE;
   \   000006   90....       MOV       DPTR,#ZDSecMgrPermitJoiningTimed
   \   000009   7400         MOV       A,#0x0
   \   00000B   F0           MOVX      @DPTR,A
   1646          
   1647            if ( duration > 0 )
   \   00000C   E8           MOV       A,R0
   \   00000D   600E         JZ        ??ZDSecMgrPermitJoining_0
   1648            {
   1649              ZDSecMgrPermitJoiningEnabled = TRUE;
   \   00000F   90....       MOV       DPTR,#ZDSecMgrPermitJoiningEnabled
   \   000012   7401         MOV       A,#0x1
   \   000014   F0           MOVX      @DPTR,A
   1650          
   1651              ZDSecMgrPermitJoiningTimed = TRUE;
   \   000015   90....       MOV       DPTR,#ZDSecMgrPermitJoiningTimed
   \   000018   7401         MOV       A,#0x1
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   8006         SJMP      ??ZDSecMgrPermitJoining_1
   1652            }
   1653            else
   1654            {
   1655              ZDSecMgrPermitJoiningEnabled = FALSE;
   \                     ??ZDSecMgrPermitJoining_0:
   \   00001D   90....       MOV       DPTR,#ZDSecMgrPermitJoiningEnabled
   \   000020   7400         MOV       A,#0x0
   \   000022   F0           MOVX      @DPTR,A
   1656            }
   1657          
   1658            accept = TRUE;
   \                     ??ZDSecMgrPermitJoining_1:
   \   000023   7901         MOV       R1,#0x1
   1659          
   1660            return accept;
   \   000025   D083         POP       DPH
   \   000027   D082         POP       DPL
   \   000029   02....       LJMP      ?BRET
   1661          }
   1662          
   1663          /******************************************************************************
   1664           * @fn          ZDSecMgrPermitJoiningTimeout
   1665           *
   1666           * @brief       Process permit joining timeout
   1667           *
   1668           * @param       none
   1669           *
   1670           * @return      none
   1671           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1672          void ZDSecMgrPermitJoiningTimeout( void )
   \                     ZDSecMgrPermitJoiningTimeout:
   1673          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1674            if ( ZDSecMgrPermitJoiningTimed == TRUE )
   \   000004   90....       MOV       DPTR,#ZDSecMgrPermitJoiningTimed
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   700C         JNZ       ??ZDSecMgrPermitJoiningTimeout_0
   1675            {
   1676              ZDSecMgrPermitJoiningEnabled = FALSE;
   \   00000C   90....       MOV       DPTR,#ZDSecMgrPermitJoiningEnabled
   \   00000F   7400         MOV       A,#0x0
   \   000011   F0           MOVX      @DPTR,A
   1677              ZDSecMgrPermitJoiningTimed   = FALSE;
   \   000012   90....       MOV       DPTR,#ZDSecMgrPermitJoiningTimed
   \   000015   7400         MOV       A,#0x0
   \   000017   F0           MOVX      @DPTR,A
   1678            }
   1679          }
   \                     ??ZDSecMgrPermitJoiningTimeout_0:
   \   000018   D083         POP       DPH
   \   00001A   D082         POP       DPL
   \   00001C   02....       LJMP      ?BRET
   1680          
   1681          /******************************************************************************
   1682           * @fn          ZDSecMgrNewDeviceEvent
   1683           *
   1684           * @brief       Process a the new device event, if found reset new device
   1685           *              event/timer.
   1686           *
   1687           * @param       ShortAddr - of New Device to process
   1688           *
   1689           * @return      uint8 - found(TRUE:FALSE)
   1690           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1691          uint8 ZDSecMgrNewDeviceEvent( uint16 ShortAddr )
   \                     ZDSecMgrNewDeviceEvent:
   1692          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   1693            uint8                 found;
   1694            ZDSecMgrDevice_t      device;
   1695            AddrMgrEntry_t        addrEntry;
   1696            associated_devices_t* assoc;
   1697            ZStatus_t             status;
   1698          
   1699            // initialize return results
   1700            found = FALSE;
   \   00000E   75..00       MOV       ?V2,#0x0
   1701          
   1702            assoc = AssocGetWithShort( ShortAddr );
   \   000011                ; Setup parameters for call to function AssocGetWithShort
   \   000011   AA..         MOV       R2,?V0
   \   000013   AB..         MOV       R3,?V1
   \   000015   12....       LCALL     `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   000018   8A..         MOV       ?V4,R2
   \   00001A   8B..         MOV       ?V5,R3
   \   00001C   AE..         MOV       R6,?V4
   \   00001E   AF..         MOV       R7,?V5
   1703          
   1704            if ( assoc != NULL )
   \   000020   EE           MOV       A,R6
   \   000021   4F           ORL       A,R7
   \   000022   7003         JNZ       $+5
   \   000024   02....       LJMP      ??ZDSecMgrNewDeviceEvent_0 & 0xFFFF
   1705            {
   1706              // device found
   1707              found = TRUE;
   \   000027   75..01       MOV       ?V2,#0x1
   1708          
   1709              // check for preconfigured security
   1710              if ( zgPreConfigKeys == TRUE )
   \   00002A   90....       MOV       DPTR,#zgPreConfigKeys
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   6401         XRL       A,#0x1
   \   000030   7007         JNZ       ??ZDSecMgrNewDeviceEvent_1
   1711              {
   1712                // set association status to authenticated
   1713                ZDSecMgrAssocDeviceAuth( assoc );
   \   000032                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   000032   EE           MOV       A,R6
   \   000033   FA           MOV       R2,A
   \   000034   EF           MOV       A,R7
   \   000035   FB           MOV       R3,A
   \   000036   12....       LCALL     `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   1714              }
   1715          
   1716              // set up device info
   1717              addrEntry.user  = ADDRMGR_USER_DEFAULT;
   \                     ??ZDSecMgrNewDeviceEvent_1:
   \   000039   7408         MOV       A,#0x8
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   7400         MOV       A,#0x0
   \   000040   F0           MOVX      @DPTR,A
   1718              addrEntry.index = assoc->addrIdx;
   \   000041   8E82         MOV       DPL,R6
   \   000043   8F83         MOV       DPH,R7
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F8           MOV       R0,A
   \   000049   A3           INC       DPTR
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F9           MOV       R1,A
   \   00004C   7413         MOV       A,#0x13
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   E8           MOV       A,R0
   \   000052   F0           MOVX      @DPTR,A
   \   000053   A3           INC       DPTR
   \   000054   E9           MOV       A,R1
   \   000055   F0           MOVX      @DPTR,A
   1719              AddrMgrEntryGet( &addrEntry );
   \   000056                ; Setup parameters for call to function AddrMgrEntryGet
   \   000056   7408         MOV       A,#0x8
   \   000058   12....       LCALL     ?XSTACK_DISP101_8
   \   00005B   12....       LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   \   00005E   E9           MOV       A,R1
   1720          
   1721              device.nwkAddr    = assoc->shortAddr;
   \   00005F   8E82         MOV       DPL,R6
   \   000061   8F83         MOV       DPH,R7
   \   000063   E0           MOVX      A,@DPTR
   \   000064   F8           MOV       R0,A
   \   000065   A3           INC       DPTR
   \   000066   E0           MOVX      A,@DPTR
   \   000067   F9           MOV       R1,A
   \   000068   85..82       MOV       DPL,?XSP + 0
   \   00006B   85..83       MOV       DPH,?XSP + 1
   \   00006E   E8           MOV       A,R0
   \   00006F   F0           MOVX      @DPTR,A
   \   000070   A3           INC       DPTR
   \   000071   E9           MOV       A,R1
   \   000072   F0           MOVX      @DPTR,A
   1722              device.extAddr    = addrEntry.extAddr;
   \   000073   740B         MOV       A,#0xb
   \   000075   12....       LCALL     ?XSTACK_DISP0_8
   \   000078   A882         MOV       R0,DPL
   \   00007A   A983         MOV       R1,DPH
   \   00007C   7402         MOV       A,#0x2
   \   00007E   12....       LCALL     ?XSTACK_DISP0_8
   \   000081   E8           MOV       A,R0
   \   000082   F0           MOVX      @DPTR,A
   \   000083   A3           INC       DPTR
   \   000084   E9           MOV       A,R1
   \   000085   F0           MOVX      @DPTR,A
   1723              device.parentAddr = NLME_GetShortAddr();
   \   000086                ; Setup parameters for call to function NLME_GetShortAddr
   \   000086   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000089   7404         MOV       A,#0x4
   \   00008B   12....       LCALL     ?XSTACK_DISP0_8
   \   00008E   EA           MOV       A,R2
   \   00008F   F0           MOVX      @DPTR,A
   \   000090   A3           INC       DPTR
   \   000091   EB           MOV       A,R3
   \   000092   F0           MOVX      @DPTR,A
   1724          
   1725              // the new device performed Secured Rejoin
   1726              if ( ( assoc->devStatus & DEV_SECURED_JOIN ) &&
   1727                   ( assoc->devStatus & DEV_REJOIN_STATUS ) )
   \   000093   8E82         MOV       DPL,R6
   \   000095   8F83         MOV       DPH,R7
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   5460         ANL       A,#0x60
   \   00009F   6460         XRL       A,#0x60
   \   0000A1   700A         JNZ       ??ZDSecMgrNewDeviceEvent_2
   1728              {
   1729                device.secure     = TRUE;
   \   0000A3   7406         MOV       A,#0x6
   \   0000A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A8   7401         MOV       A,#0x1
   \   0000AA   F0           MOVX      @DPTR,A
   \   0000AB   8008         SJMP      ??ZDSecMgrNewDeviceEvent_3
   1730              }
   1731              else
   1732              {
   1733                device.secure     = FALSE;
   \                     ??ZDSecMgrNewDeviceEvent_2:
   \   0000AD   7406         MOV       A,#0x6
   \   0000AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B2   7400         MOV       A,#0x0
   \   0000B4   F0           MOVX      @DPTR,A
   1734              }
   1735              device.devStatus  = assoc->devStatus;
   \                     ??ZDSecMgrNewDeviceEvent_3:
   \   0000B5   8E82         MOV       DPL,R6
   \   0000B7   8F83         MOV       DPH,R7
   \   0000B9   A3           INC       DPTR
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   C0E0         PUSH      A
   \   0000C1   7407         MOV       A,#0x7
   \   0000C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C6   D0E0         POP       A
   \   0000C8   F0           MOVX      @DPTR,A
   1736          
   1737              // process new device
   1738              status = ZDSecMgrDeviceNew( &device );
   \   0000C9                ; Setup parameters for call to function ZDSecMgrDeviceNew
   \   0000C9   AA..         MOV       R2,?XSP + 0
   \   0000CB   AB..         MOV       R3,?XSP + 1
   \   0000CD   12....       LCALL     `??ZDSecMgrDeviceNew::?relay`; Banked call to: ZDSecMgrDeviceNew
   \   0000D0   E9           MOV       A,R1
   \   0000D1   F5..         MOV       ?V3,A
   1739          
   1740              if ( status == ZSuccess )
   \   0000D3   E5..         MOV       A,?V3
   \   0000D5   700F         JNZ       ??ZDSecMgrNewDeviceEvent_4
   1741              {
   1742                assoc->devStatus &= ~DEV_SEC_INIT_STATUS;
   \   0000D7   8E82         MOV       DPL,R6
   \   0000D9   8F83         MOV       DPH,R7
   \   0000DB   A3           INC       DPTR
   \   0000DC   A3           INC       DPTR
   \   0000DD   A3           INC       DPTR
   \   0000DE   A3           INC       DPTR
   \   0000DF   A3           INC       DPTR
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   C2E2         CLR       0xE0 /* A   */.2
   \   0000E3   F0           MOVX      @DPTR,A
   \   0000E4   801A         SJMP      ??ZDSecMgrNewDeviceEvent_0
   1743              }
   1744              else
   1745              {
   1746                // Clear SECURITY bit from Address Manager
   1747                ZDSecMgrAddrClear( addrEntry.extAddr );
   \                     ??ZDSecMgrNewDeviceEvent_4:
   \   0000E6                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   0000E6   740B         MOV       A,#0xb
   \   0000E8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EB   AA82         MOV       R2,DPL
   \   0000ED   AB83         MOV       R3,DPH
   \   0000EF   12....       LCALL     `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   \   0000F2   E9           MOV       A,R1
   1748          
   1749                // Remove the Association completely
   1750                AssocRemove( addrEntry.extAddr );
   \   0000F3                ; Setup parameters for call to function AssocRemove
   \   0000F3   740B         MOV       A,#0xb
   \   0000F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F8   AA82         MOV       R2,DPL
   \   0000FA   AB83         MOV       R3,DPH
   \   0000FC   12....       LCALL     `??AssocRemove::?relay`; Banked call to: AssocRemove
   \   0000FF   E9           MOV       A,R1
   1751              }
   1752            }
   1753          
   1754            return found;
   \                     ??ZDSecMgrNewDeviceEvent_0:
   \   000100   A9..         MOV       R1,?V2
   \   000102   7415         MOV       A,#0x15
   \   000104   12....       LCALL     ?DEALLOC_XSTACK8
   \   000107   7F06         MOV       R7,#0x6
   \   000109   02....       LJMP      ?BANKED_LEAVE_XDATA
   1755          }
   1756          
   1757          /******************************************************************************
   1758           * @fn          ZDSecMgrTCExtAddrCheck
   1759           *
   1760           * @brief       Verifies if received ext. address matches TC ext. address.
   1761           *
   1762           * @param       extAddr - Extended address to be verified.
   1763           *
   1764           * @return      TRUE - extended address matches
   1765           *              FALSE - otherwise
   1766           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1767          uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr )
   \                     ZDSecMgrTCExtAddrCheck:
   1768          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1769            uint8  lookup[Z_EXTADDR_LEN];
   1770            APSME_GetRequest( apsTrustCenterAddress, 0, lookup );
   \   00000E                ; Setup parameters for call to function APSME_GetRequest
   \   00000E   AC..         MOV       R4,?XSP + 0
   \   000010   AD..         MOV       R5,?XSP + 1
   \   000012   7A00         MOV       R2,#0x0
   \   000014   7B00         MOV       R3,#0x0
   \   000016   79AB         MOV       R1,#-0x55
   \   000018   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   \   00001B   E9           MOV       A,R1
   1771            return osal_ExtAddrEqual( extAddr, lookup );
   \   00001C                ; Setup parameters for call to function sAddrExtCmp
   \   00001C   AC..         MOV       R4,?XSP + 0
   \   00001E   AD..         MOV       R5,?XSP + 1
   \   000020   EE           MOV       A,R6
   \   000021   FA           MOV       R2,A
   \   000022   EF           MOV       A,R7
   \   000023   FB           MOV       R3,A
   \   000024   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000027   7408         MOV       A,#0x8
   \   000029   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002C   7F01         MOV       R7,#0x1
   \   00002E   02....       LJMP      ?BANKED_LEAVE_XDATA
   1772          }
   1773          
   1774          /******************************************************************************
   1775           * @fn          ZDSecMgrTCDataLoad
   1776           *
   1777           * @brief       Stores the address of TC into address manager.
   1778           *
   1779           * @param       extAddr - Extended address to be verified.
   1780           *
   1781           * @return      none
   1782           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1783          void ZDSecMgrTCDataLoad( uint8* extAddr )
   \                     ZDSecMgrTCDataLoad:
   1784          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV       A,#-0xf
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1785            uint16 ami;
   1786            AddrMgrEntry_t entry;
   1787          
   1788            // lookup using TC short address
   1789            entry.user    = ADDRMGR_USER_DEFAULT;
   \   00000E   7402         MOV       A,#0x2
   \   000010   12....       LCALL     ?XSTACK_DISP0_8
   \   000013   7400         MOV       A,#0x0
   \   000015   F0           MOVX      @DPTR,A
   1790            osal_cpyExtAddr( entry.extAddr, extAddr );
   \   000016                ; Setup parameters for call to function sAddrExtCpy
   \   000016   EE           MOV       A,R6
   \   000017   FC           MOV       R4,A
   \   000018   EF           MOV       A,R7
   \   000019   FD           MOV       R5,A
   \   00001A   7405         MOV       A,#0x5
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   AA82         MOV       R2,DPL
   \   000021   AB83         MOV       R3,DPH
   \   000023   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1791          
   1792            // Verify if TC address has been added to Address Manager
   1793            if ( !APSME_IsDistributedSecurity() && ( AddrMgrEntryLookupExt( &entry ) != TRUE ) )
   \   000026                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   000026   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   000029   E9           MOV       A,R1
   \   00002A   702B         JNZ       ??ZDSecMgrTCDataLoad_0
   \   00002C                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   00002C   7402         MOV       A,#0x2
   \   00002E   12....       LCALL     ?XSTACK_DISP101_8
   \   000031   12....       LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000034   E9           MOV       A,R1
   \   000035   6401         XRL       A,#0x1
   \   000037   601E         JZ        ??ZDSecMgrTCDataLoad_0
   1794            {
   1795              ZDSecMgrAddrStore( APSME_TRUSTCENTER_NWKADDR, extAddr, &ami );
   \   000039                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   000039   A8..         MOV       R0,?XSP + 0
   \   00003B   A9..         MOV       R1,?XSP + 1
   \   00003D   88..         MOV       ?V0,R0
   \   00003F   89..         MOV       ?V1,R1
   \   000041   78..         MOV       R0,#?V0
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000046   EE           MOV       A,R6
   \   000047   FC           MOV       R4,A
   \   000048   EF           MOV       A,R7
   \   000049   FD           MOV       R5,A
   \   00004A   7A00         MOV       R2,#0x0
   \   00004C   7B00         MOV       R3,#0x0
   \   00004E   12....       LCALL     `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
   \   000051   7402         MOV       A,#0x2
   \   000053   12....       LCALL     ?DEALLOC_XSTACK8
   \   000056   E9           MOV       A,R1
   1796            }
   1797          }
   \                     ??ZDSecMgrTCDataLoad_0:
   \   000057   740F         MOV       A,#0xf
   \   000059   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005C   7F02         MOV       R7,#0x2
   \   00005E   02....       LJMP      ?BANKED_LEAVE_XDATA
   1798          
   1799          /******************************************************************************
   1800           * @fn          ZDSecMgrTransportKeyInd
   1801           *
   1802           * @brief       Process the ZDO_TransportKeyInd_t message.
   1803           *
   1804           * @param       ind - [in] ZDO_TransportKeyInd_t indication
   1805           *
   1806           * @return      none
   1807           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1808          void ZDSecMgrTransportKeyInd( ZDO_TransportKeyInd_t* ind )
   \                     ZDSecMgrTransportKeyInd:
   1809          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 40
   \   000005   74D8         MOV       A,#-0x28
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1810            uint8 index;
   1811            uint8 zgPreConfigKey[SEC_KEY_LEN];
   1812          
   1813            ZDSecMgrUpdateTCAddress( ind->srcExtAddr );
   \   00000E                ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
   \   00000E   EE           MOV       A,R6
   \   00000F   2416         ADD       A,#0x16
   \   000011   FA           MOV       R2,A
   \   000012   E4           CLR       A
   \   000013   3F           ADDC      A,R7
   \   000014   FB           MOV       R3,A
   \   000015   12....       LCALL     `??ZDSecMgrUpdateTCAddress::?relay`; Banked call to: ZDSecMgrUpdateTCAddress
   1814            
   1815          #if ZG_BUILD_JOINING_TYPE
   1816            if(ZG_DEVICE_JOINING_TYPE)
   \   000018   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   6401         XRL       A,#0x1
   \   00001E   6008         JZ        ??ZDSecMgrTransportKeyInd_0
   \   000020   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6402         XRL       A,#0x2
   \   000026   702A         JNZ       ??ZDSecMgrTransportKeyInd_1
   1817            {
   1818              //Update the TC address in the entry
   1819              osal_nv_write(ZCD_NV_TCLK_TABLE_START, osal_offsetof(APSME_TCLKDevEntry_t,extAddr), Z_EXTADDR_LEN, ind->srcExtAddr);
   \                     ??ZDSecMgrTransportKeyInd_0:
   \   000028                ; Setup parameters for call to function osal_nv_write
   \   000028   EE           MOV       A,R6
   \   000029   2416         ADD       A,#0x16
   \   00002B   F5..         MOV       ?V2,A
   \   00002D   E4           CLR       A
   \   00002E   3F           ADDC      A,R7
   \   00002F   F5..         MOV       ?V3,A
   \   000031   78..         MOV       R0,#?V2
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000036   75..08       MOV       ?V2,#0x8
   \   000039   75..00       MOV       ?V3,#0x0
   \   00003C   78..         MOV       R0,#?V2
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000041   7C08         MOV       R4,#0x8
   \   000043   7D00         MOV       R5,#0x0
   \   000045   7A11         MOV       R2,#0x11
   \   000047   7B01         MOV       R3,#0x1
   \   000049   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00004C   7404         MOV       A,#0x4
   \   00004E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000051   E9           MOV       A,R1
   1820            }
   1821          #endif
   1822            
   1823            // check for distributed security
   1824            if ( ( ZG_BUILD_RTR_TYPE ) && osal_isbufset( ind->srcExtAddr, 0xFF, Z_EXTADDR_LEN ) )
   1825            {
   1826              ZDSecMgrPermitJoiningEnabled = TRUE;  
   1827            }
   1828            
   1829            // load Trust Center data if needed
   1830            ZDSecMgrTCDataLoad( ind->srcExtAddr );
   \                     ??ZDSecMgrTransportKeyInd_1:
   \   000052                ; Setup parameters for call to function ZDSecMgrTCDataLoad
   \   000052   EE           MOV       A,R6
   \   000053   2416         ADD       A,#0x16
   \   000055   FA           MOV       R2,A
   \   000056   E4           CLR       A
   \   000057   3F           ADDC      A,R7
   \   000058   FB           MOV       R3,A
   \   000059   12....       LCALL     `??ZDSecMgrTCDataLoad::?relay`; Banked call to: ZDSecMgrTCDataLoad
   1831            
   1832            if ( ( ind->keyType == KEY_TYPE_NWK ) ||
   1833                 ( ind->keyType == 6            ) )
   \   00005C   8E82         MOV       DPL,R6
   \   00005E   8F83         MOV       DPH,R7
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   6401         XRL       A,#0x1
   \   000067   6010         JZ        ??ZDSecMgrTransportKeyInd_2
   \   000069   8E82         MOV       DPL,R6
   \   00006B   8F83         MOV       DPH,R7
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   6406         XRL       A,#0x6
   \   000074   6003         JZ        $+5
   \   000076   02....       LJMP      ??ZDSecMgrTransportKeyInd_3 & 0xFFFF
   1834            {
   1835              // check for dummy NWK key (all zeros)
   1836              for ( index = 0;
   \                     ??ZDSecMgrTransportKeyInd_2:
   \   000079   75..00       MOV       ?V0,#0x0
   1837                    ( (index < SEC_KEY_LEN) && (ind->key[index] == 0) );
   \                     ??ZDSecMgrTransportKeyInd_4:
   \   00007C   E5..         MOV       A,?V0
   \   00007E   C3           CLR       C
   \   00007F   9410         SUBB      A,#0x10
   \   000081   501A         JNC       ??ZDSecMgrTransportKeyInd_5
   \   000083   E5..         MOV       A,?V0
   \   000085   F8           MOV       R0,A
   \   000086   7900         MOV       R1,#0x0
   \   000088   EE           MOV       A,R6
   \   000089   28           ADD       A,R0
   \   00008A   F582         MOV       DPL,A
   \   00008C   EF           MOV       A,R7
   \   00008D   39           ADDC      A,R1
   \   00008E   F583         MOV       DPH,A
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   E0           MOVX      A,@DPTR
   \   000097   7004         JNZ       ??ZDSecMgrTransportKeyInd_5
   1838                    index++ );
   \   000099   05..         INC       ?V0
   \   00009B   80DF         SJMP      ??ZDSecMgrTransportKeyInd_4
   1839          
   1840              if ( index == SEC_KEY_LEN )
   \                     ??ZDSecMgrTransportKeyInd_5:
   \   00009D   7410         MOV       A,#0x10
   \   00009F   65..         XRL       A,?V0
   \   0000A1   7032         JNZ       ??ZDSecMgrTransportKeyInd_6
   1841              {
   1842                // load preconfigured key - once!!
   1843                if ( !_NIB.nwkKeyLoaded )
   \   0000A3   90....       MOV       DPTR,#_NIB + 61
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   7055         JNZ       ??ZDSecMgrTransportKeyInd_7
   1844                {
   1845                  ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
   \   0000A9                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   0000A9   7418         MOV       A,#0x18
   \   0000AB   12....       LCALL     ?XSTACK_DISP102_8
   \   0000AE   7A62         MOV       R2,#0x62
   \   0000B0   7B00         MOV       R3,#0x0
   \   0000B2   12....       LCALL     `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
   \   0000B5   E9           MOV       A,R1
   1846                  SSP_UpdateNwkKey( zgPreConfigKey, 0 );
   \   0000B6                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   0000B6   7900         MOV       R1,#0x0
   \   0000B8   7418         MOV       A,#0x18
   \   0000BA   12....       LCALL     ?XSTACK_DISP101_8
   \   0000BD   12....       LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
   1847                  SSP_SwitchNwkKey( 0 );
   \   0000C0                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   0000C0   7900         MOV       R1,#0x0
   \   0000C2   12....       LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   1848          
   1849                  // clear local copy of key
   1850                  osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
   \   0000C5                ; Setup parameters for call to function osal_memset
   \   0000C5   7C10         MOV       R4,#0x10
   \   0000C7   7D00         MOV       R5,#0x0
   \   0000C9   7900         MOV       R1,#0x0
   \   0000CB   7418         MOV       A,#0x18
   \   0000CD   12....       LCALL     ?XSTACK_DISP101_8
   \   0000D0   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000D3   8029         SJMP      ??ZDSecMgrTransportKeyInd_7
   1851                }
   1852              }
   1853              else
   1854              {
   1855                SSP_UpdateNwkKey( ind->key, ind->keySeqNum );
   \                     ??ZDSecMgrTransportKeyInd_6:
   \   0000D5                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   0000D5   8E82         MOV       DPL,R6
   \   0000D7   8F83         MOV       DPH,R7
   \   0000D9   A3           INC       DPTR
   \   0000DA   A3           INC       DPTR
   \   0000DB   A3           INC       DPTR
   \   0000DC   A3           INC       DPTR
   \   0000DD   A3           INC       DPTR
   \   0000DE   E0           MOVX      A,@DPTR
   \   0000DF   F9           MOV       R1,A
   \   0000E0   EE           MOV       A,R6
   \   0000E1   2406         ADD       A,#0x6
   \   0000E3   FA           MOV       R2,A
   \   0000E4   E4           CLR       A
   \   0000E5   3F           ADDC      A,R7
   \   0000E6   FB           MOV       R3,A
   \   0000E7   12....       LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
   1856                if ( !_NIB.nwkKeyLoaded )
   \   0000EA   90....       MOV       DPTR,#_NIB + 61
   \   0000ED   E0           MOVX      A,@DPTR
   \   0000EE   700E         JNZ       ??ZDSecMgrTransportKeyInd_7
   1857                {
   1858                  SSP_SwitchNwkKey( ind->keySeqNum );
   \   0000F0                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   0000F0   8E82         MOV       DPL,R6
   \   0000F2   8F83         MOV       DPH,R7
   \   0000F4   A3           INC       DPTR
   \   0000F5   A3           INC       DPTR
   \   0000F6   A3           INC       DPTR
   \   0000F7   A3           INC       DPTR
   \   0000F8   A3           INC       DPTR
   \   0000F9   E0           MOVX      A,@DPTR
   \   0000FA   F9           MOV       R1,A
   \   0000FB   12....       LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   1859                }
   1860              }
   1861          
   1862              // handle next step in authentication process
   1863              ZDSecMgrAuthNwkKey();
   \                     ??ZDSecMgrTransportKeyInd_7:
   \   0000FE                ; Setup parameters for call to function ZDSecMgrAuthNwkKey
   \   0000FE   12....       LCALL     `??ZDSecMgrAuthNwkKey::?relay`; Banked call to: ZDSecMgrAuthNwkKey
   \   000101   02....       LJMP      ??ZDSecMgrTransportKeyInd_8 & 0xFFFF
   1864            }
   1865            else if ( ind->keyType == KEY_TYPE_TC_LINK )
   \                     ??ZDSecMgrTransportKeyInd_3:
   \   000104   8E82         MOV       DPL,R6
   \   000106   8F83         MOV       DPH,R7
   \   000108   A3           INC       DPTR
   \   000109   A3           INC       DPTR
   \   00010A   A3           INC       DPTR
   \   00010B   A3           INC       DPTR
   \   00010C   E0           MOVX      A,@DPTR
   \   00010D   6404         XRL       A,#0x4
   \   00010F   6003         JZ        $+5
   \   000111   02....       LJMP      ??ZDSecMgrTransportKeyInd_9 & 0xFFFF
   1866            {
   1867              uint16 entryIndex;
   1868              uint8 found;
   1869              APSME_TCLKDevEntry_t TCLKDevEntry;
   1870              
   1871              //Search the entry, which should exist at this point
   1872              entryIndex = APSME_SearchTCLinkKeyEntry(ind->srcExtAddr, &found, &TCLKDevEntry);
   \   000114                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   000114   7405         MOV       A,#0x5
   \   000116   12....       LCALL     ?XSTACK_DISP100_8
   \   000119   88..         MOV       ?V4,R0
   \   00011B   89..         MOV       ?V5,R1
   \   00011D   78..         MOV       R0,#?V4
   \   00011F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000122   7402         MOV       A,#0x2
   \   000124   12....       LCALL     ?XSTACK_DISP102_8
   \   000127   EE           MOV       A,R6
   \   000128   2416         ADD       A,#0x16
   \   00012A   FA           MOV       R2,A
   \   00012B   E4           CLR       A
   \   00012C   3F           ADDC      A,R7
   \   00012D   FB           MOV       R3,A
   \   00012E   12....       LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
   \   000131   7402         MOV       A,#0x2
   \   000133   12....       LCALL     ?DEALLOC_XSTACK8
   \   000136   8A..         MOV       ?V4,R2
   \   000138   8B..         MOV       ?V5,R3
   \   00013A   85....       MOV       ?V2,?V4
   \   00013D   85....       MOV       ?V3,?V5
   1873              
   1874              if(found)
   \   000140   85..82       MOV       DPL,?XSP + 0
   \   000143   85..83       MOV       DPH,?XSP + 1
   \   000146   E0           MOVX      A,@DPTR
   \   000147   7003         JNZ       $+5
   \   000149   02....       LJMP      ??ZDSecMgrTransportKeyInd_8 & 0xFFFF
   1875              {
   1876                //If the key was an IC, then erase the entry since that will not longer be used.
   1877                if(TCLKDevEntry.keyAttributes == ZG_PROVISIONAL_KEY)
   \   00014C   7415         MOV       A,#0x15
   \   00014E   12....       LCALL     ?XSTACK_DISP0_8
   \   000151   E0           MOVX      A,@DPTR
   \   000152   700C         JNZ       ??ZDSecMgrTransportKeyInd_10
   1878                {
   1879                  APSME_EraseICEntry(&TCLKDevEntry.SeedShift_IcIndex);
   \   000154                ; Setup parameters for call to function APSME_EraseICEntry
   \   000154   7417         MOV       A,#0x17
   \   000156   12....       LCALL     ?XSTACK_DISP0_8
   \   000159   AA82         MOV       R2,DPL
   \   00015B   AB83         MOV       R3,DPH
   \   00015D   12....       LCALL     `??APSME_EraseICEntry::?relay`; Banked call to: APSME_EraseICEntry
   1880                }
   1881                
   1882                TCLKDevEntry.keyAttributes = ZG_UNVERIFIED_KEY;
   \                     ??ZDSecMgrTransportKeyInd_10:
   \   000160   7415         MOV       A,#0x15
   \   000162   12....       LCALL     ?XSTACK_DISP0_8
   \   000165   7401         MOV       A,#0x1
   \   000167   F0           MOVX      @DPTR,A
   1883                TCLKDevEntry.keyType = ZG_UNIQUE_LINK_KEY;
   \   000168   7416         MOV       A,#0x16
   \   00016A   12....       LCALL     ?XSTACK_DISP0_8
   \   00016D   7400         MOV       A,#0x0
   \   00016F   F0           MOVX      @DPTR,A
   1884                TCLKDevEntry.rxFrmCntr = 0;
   \   000170   7409         MOV       A,#0x9
   \   000172   12....       LCALL     ?XSTACK_DISP0_8
   \   000175   7400         MOV       A,#0x0
   \   000177   F0           MOVX      @DPTR,A
   \   000178   A3           INC       DPTR
   \   000179   7400         MOV       A,#0x0
   \   00017B   F0           MOVX      @DPTR,A
   \   00017C   A3           INC       DPTR
   \   00017D   7400         MOV       A,#0x0
   \   00017F   F0           MOVX      @DPTR,A
   \   000180   A3           INC       DPTR
   \   000181   7400         MOV       A,#0x0
   \   000183   F0           MOVX      @DPTR,A
   1885                TCLKDevEntry.txFrmCntr = 0;
   \   000184   7405         MOV       A,#0x5
   \   000186   12....       LCALL     ?XSTACK_DISP0_8
   \   000189   7400         MOV       A,#0x0
   \   00018B   F0           MOVX      @DPTR,A
   \   00018C   A3           INC       DPTR
   \   00018D   7400         MOV       A,#0x0
   \   00018F   F0           MOVX      @DPTR,A
   \   000190   A3           INC       DPTR
   \   000191   7400         MOV       A,#0x0
   \   000193   F0           MOVX      @DPTR,A
   \   000194   A3           INC       DPTR
   \   000195   7400         MOV       A,#0x0
   \   000197   F0           MOVX      @DPTR,A
   1886                TCLKDevEntry.SeedShift_IcIndex = 0;
   \   000198   7417         MOV       A,#0x17
   \   00019A   12....       LCALL     ?XSTACK_DISP0_8
   \   00019D   7400         MOV       A,#0x0
   \   00019F   F0           MOVX      @DPTR,A
   1887                
   1888                //Update the entry
   1889                osal_nv_write(entryIndex,0,sizeof(APSME_TCLKDevEntry_t),&TCLKDevEntry);
   \   0001A0                ; Setup parameters for call to function osal_nv_write
   \   0001A0   7405         MOV       A,#0x5
   \   0001A2   12....       LCALL     ?XSTACK_DISP100_8
   \   0001A5   88..         MOV       ?V4,R0
   \   0001A7   89..         MOV       ?V5,R1
   \   0001A9   78..         MOV       R0,#?V4
   \   0001AB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001AE   75..13       MOV       ?V4,#0x13
   \   0001B1   75..00       MOV       ?V5,#0x0
   \   0001B4   78..         MOV       R0,#?V4
   \   0001B6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B9   7C00         MOV       R4,#0x0
   \   0001BB   7D00         MOV       R5,#0x0
   \   0001BD   AA..         MOV       R2,?V2
   \   0001BF   AB..         MOV       R3,?V3
   \   0001C1   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0001C4   7404         MOV       A,#0x4
   \   0001C6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001C9   E9           MOV       A,R1
   1890          
   1891                //Create the entry for the key
   1892                if(ZSUCCESS == osal_nv_item_init(ZCD_NV_TCLK_JOIN_DEV,SEC_KEY_LEN,ind->key) )
   \   0001CA                ; Setup parameters for call to function osal_nv_item_init
   \   0001CA   EE           MOV       A,R6
   \   0001CB   2406         ADD       A,#0x6
   \   0001CD   F5..         MOV       ?V4,A
   \   0001CF   E4           CLR       A
   \   0001D0   3F           ADDC      A,R7
   \   0001D1   F5..         MOV       ?V5,A
   \   0001D3   78..         MOV       R0,#?V4
   \   0001D5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001D8   7C10         MOV       R4,#0x10
   \   0001DA   7D00         MOV       R5,#0x0
   \   0001DC   7A02         MOV       R2,#0x2
   \   0001DE   7B01         MOV       R3,#0x1
   \   0001E0   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   0001E3   7402         MOV       A,#0x2
   \   0001E5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001E8   E9           MOV       A,R1
   \   0001E9   702A         JNZ       ??ZDSecMgrTransportKeyInd_11
   1893                {
   1894                  //Or replace it if already existed
   1895                  osal_nv_write(ZCD_NV_TCLK_JOIN_DEV,0,SEC_KEY_LEN,ind->key);
   \   0001EB                ; Setup parameters for call to function osal_nv_write
   \   0001EB   EE           MOV       A,R6
   \   0001EC   2406         ADD       A,#0x6
   \   0001EE   F5..         MOV       ?V4,A
   \   0001F0   E4           CLR       A
   \   0001F1   3F           ADDC      A,R7
   \   0001F2   F5..         MOV       ?V5,A
   \   0001F4   78..         MOV       R0,#?V4
   \   0001F6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001F9   75..10       MOV       ?V4,#0x10
   \   0001FC   75..00       MOV       ?V5,#0x0
   \   0001FF   78..         MOV       R0,#?V4
   \   000201   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000204   7C00         MOV       R4,#0x0
   \   000206   7D00         MOV       R5,#0x0
   \   000208   7A02         MOV       R2,#0x2
   \   00020A   7B01         MOV       R3,#0x1
   \   00020C   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00020F   7404         MOV       A,#0x4
   \   000211   12....       LCALL     ?DEALLOC_XSTACK8
   \   000214   E9           MOV       A,R1
   1896                }
   1897                
   1898                bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_VERIFY_TC_LINK_KEY);
   \                     ??ZDSecMgrTransportKeyInd_11:
   \   000215                ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
   \   000215   7A03         MOV       R2,#0x3
   \   000217   7901         MOV       R1,#0x1
   \   000219   12....       LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
   \   00021C   02....       LJMP      ??ZDSecMgrTransportKeyInd_8 & 0xFFFF
   1899              }
   1900            }
   1901            else if ( ind->keyType == KEY_TYPE_APP_LINK )
   \                     ??ZDSecMgrTransportKeyInd_9:
   \   00021F   8E82         MOV       DPL,R6
   \   000221   8F83         MOV       DPH,R7
   \   000223   A3           INC       DPTR
   \   000224   A3           INC       DPTR
   \   000225   A3           INC       DPTR
   \   000226   A3           INC       DPTR
   \   000227   E0           MOVX      A,@DPTR
   \   000228   6403         XRL       A,#0x3
   \   00022A   6003         JZ        $+5
   \   00022C   02....       LJMP      ??ZDSecMgrTransportKeyInd_8 & 0xFFFF
   1902            {
   1903              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1904              {
   1905                uint16           ami;
   1906                ZDSecMgrEntry_t* entry;
   1907          
   1908                // get the address index
   1909                if ( ZDSecMgrExtAddrLookup( ind->srcExtAddr, &ami ) != ZSuccess )
   \   00022F                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   00022F   7403         MOV       A,#0x3
   \   000231   12....       LCALL     ?XSTACK_DISP102_8
   \   000234   EE           MOV       A,R6
   \   000235   2416         ADD       A,#0x16
   \   000237   FA           MOV       R2,A
   \   000238   E4           CLR       A
   \   000239   3F           ADDC      A,R7
   \   00023A   FB           MOV       R3,A
   \   00023B   12....       LCALL     `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   00023E   E9           MOV       A,R1
   \   00023F   6033         JZ        ??ZDSecMgrTransportKeyInd_12
   1910                {
   1911                  // store new EXT address
   1912                  ZDSecMgrAddrStore( INVALID_NODE_ADDR, ind->srcExtAddr, &ami );
   \   000241                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   000241   7403         MOV       A,#0x3
   \   000243   12....       LCALL     ?XSTACK_DISP100_8
   \   000246   88..         MOV       ?V2,R0
   \   000248   89..         MOV       ?V3,R1
   \   00024A   78..         MOV       R0,#?V2
   \   00024C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00024F   EE           MOV       A,R6
   \   000250   2416         ADD       A,#0x16
   \   000252   FC           MOV       R4,A
   \   000253   E4           CLR       A
   \   000254   3F           ADDC      A,R7
   \   000255   FD           MOV       R5,A
   \   000256   7AFE         MOV       R2,#-0x2
   \   000258   7BFF         MOV       R3,#-0x1
   \   00025A   12....       LCALL     `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
   \   00025D   7402         MOV       A,#0x2
   \   00025F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000262   E9           MOV       A,R1
   1913                  ZDP_NwkAddrReq( ind->srcExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   000263                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000263   7D00         MOV       R5,#0x0
   \   000265   7C00         MOV       R4,#0x0
   \   000267   7900         MOV       R1,#0x0
   \   000269   EE           MOV       A,R6
   \   00026A   2416         ADD       A,#0x16
   \   00026C   FA           MOV       R2,A
   \   00026D   E4           CLR       A
   \   00026E   3F           ADDC      A,R7
   \   00026F   FB           MOV       R3,A
   \   000270   12....       LCALL     `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   000273   E9           MOV       A,R1
   1914                }
   1915          
   1916                ZDSecMgrEntryLookupAMI( ami, &entry );
   \                     ??ZDSecMgrTransportKeyInd_12:
   \   000274                ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
   \   000274   7401         MOV       A,#0x1
   \   000276   12....       LCALL     ?XSTACK_DISP102_8
   \   000279   7403         MOV       A,#0x3
   \   00027B   12....       LCALL     ?XSTACK_DISP0_8
   \   00027E   E0           MOVX      A,@DPTR
   \   00027F   FA           MOV       R2,A
   \   000280   A3           INC       DPTR
   \   000281   E0           MOVX      A,@DPTR
   \   000282   FB           MOV       R3,A
   \   000283   12....       LCALL     `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
   \   000286   E9           MOV       A,R1
   1917          
   1918                if ( entry == NULL )
   \   000287   7401         MOV       A,#0x1
   \   000289   12....       LCALL     ?XSTACK_DISP0_8
   \   00028C   E0           MOVX      A,@DPTR
   \   00028D   F8           MOV       R0,A
   \   00028E   A3           INC       DPTR
   \   00028F   E0           MOVX      A,@DPTR
   \   000290   F9           MOV       R1,A
   \   000291   E8           MOV       A,R0
   \   000292   49           ORL       A,R1
   \   000293   7027         JNZ       ??ZDSecMgrTransportKeyInd_13
   1919                {
   1920                  // get new entry
   1921                  if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
   \   000295                ; Setup parameters for call to function ZDSecMgrEntryNew
   \   000295   7401         MOV       A,#0x1
   \   000297   12....       LCALL     ?XSTACK_DISP101_8
   \   00029A   12....       LCALL     `??ZDSecMgrEntryNew::?relay`; Banked call to: ZDSecMgrEntryNew
   \   00029D   E9           MOV       A,R1
   \   00029E   701C         JNZ       ??ZDSecMgrTransportKeyInd_13
   1922                  {
   1923                    // finish setting up entry
   1924                    entry->ami = ami;
   \   0002A0   7403         MOV       A,#0x3
   \   0002A2   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A5   E0           MOVX      A,@DPTR
   \   0002A6   F8           MOV       R0,A
   \   0002A7   A3           INC       DPTR
   \   0002A8   E0           MOVX      A,@DPTR
   \   0002A9   F9           MOV       R1,A
   \   0002AA   7401         MOV       A,#0x1
   \   0002AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0002AF   E0           MOVX      A,@DPTR
   \   0002B0   FA           MOV       R2,A
   \   0002B1   A3           INC       DPTR
   \   0002B2   E0           MOVX      A,@DPTR
   \   0002B3   F583         MOV       DPH,A
   \   0002B5   8A82         MOV       DPL,R2
   \   0002B7   E8           MOV       A,R0
   \   0002B8   F0           MOVX      @DPTR,A
   \   0002B9   A3           INC       DPTR
   \   0002BA   E9           MOV       A,R1
   \   0002BB   F0           MOVX      @DPTR,A
   1925                  }
   1926                }
   1927          
   1928                ZDSecMgrLinkKeySet( ind->srcExtAddr, ind->key );
   \                     ??ZDSecMgrTransportKeyInd_13:
   \   0002BC                ; Setup parameters for call to function APSME_LinkKeySet
   \   0002BC   EE           MOV       A,R6
   \   0002BD   2406         ADD       A,#0x6
   \   0002BF   FC           MOV       R4,A
   \   0002C0   E4           CLR       A
   \   0002C1   3F           ADDC      A,R7
   \   0002C2   FD           MOV       R5,A
   \   0002C3   EE           MOV       A,R6
   \   0002C4   2416         ADD       A,#0x16
   \   0002C6   FA           MOV       R2,A
   \   0002C7   E4           CLR       A
   \   0002C8   3F           ADDC      A,R7
   \   0002C9   FB           MOV       R3,A
   \   0002CA   12....       LCALL     `??APSME_LinkKeySet::?relay`; Banked call to: APSME_LinkKeySet
   \   0002CD   E9           MOV       A,R1
   1929          
   1930          #if defined NV_RESTORE
   1931                ZDSecMgrWriteNV();  // Write the control record for the new established link key to NV.
   \   0002CE                ; Setup parameters for call to function ZDSecMgrWriteNV
   \   0002CE   12....       LCALL     `??ZDSecMgrWriteNV::?relay`; Banked call to: ZDSecMgrWriteNV
   1932          #endif
   1933              }
   1934            }
   1935          }
   \                     ??ZDSecMgrTransportKeyInd_8:
   \   0002D1   7428         MOV       A,#0x28
   \   0002D3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002D6   7F06         MOV       R7,#0x6
   \   0002D8   02....       LJMP      ?BANKED_LEAVE_XDATA
   1936          
   1937          /******************************************************************************
   1938           * @fn          ZDSecMgrUpdateDeviceInd
   1939           *
   1940           * @brief       Process the ZDO_UpdateDeviceInd_t message.
   1941           *
   1942           * @param       ind - [in] ZDO_UpdateDeviceInd_t indication
   1943           *
   1944           * @return      none
   1945           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1946          void ZDSecMgrUpdateDeviceInd( ZDO_UpdateDeviceInd_t* ind )
   \                     ZDSecMgrUpdateDeviceInd:
   1947          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1948            ZDSecMgrDevice_t device;
   1949          
   1950            device.nwkAddr    = ind->devAddr;
   \   00000E   EE           MOV       A,R6
   \   00000F   240C         ADD       A,#0xc
   \   000011   F582         MOV       DPL,A
   \   000013   E4           CLR       A
   \   000014   3F           ADDC      A,R7
   \   000015   F583         MOV       DPH,A
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F8           MOV       R0,A
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F9           MOV       R1,A
   \   00001C   85..82       MOV       DPL,?XSP + 0
   \   00001F   85..83       MOV       DPH,?XSP + 1
   \   000022   E8           MOV       A,R0
   \   000023   F0           MOVX      @DPTR,A
   \   000024   A3           INC       DPTR
   \   000025   E9           MOV       A,R1
   \   000026   F0           MOVX      @DPTR,A
   1951            device.extAddr    = ind->devExtAddr;
   \   000027   EE           MOV       A,R6
   \   000028   2404         ADD       A,#0x4
   \   00002A   F8           MOV       R0,A
   \   00002B   E4           CLR       A
   \   00002C   3F           ADDC      A,R7
   \   00002D   F9           MOV       R1,A
   \   00002E   7402         MOV       A,#0x2
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   E8           MOV       A,R0
   \   000034   F0           MOVX      @DPTR,A
   \   000035   A3           INC       DPTR
   \   000036   E9           MOV       A,R1
   \   000037   F0           MOVX      @DPTR,A
   1952            device.parentAddr = ind->srcAddr;
   \   000038   8E82         MOV       DPL,R6
   \   00003A   8F83         MOV       DPH,R7
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F8           MOV       R0,A
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F9           MOV       R1,A
   \   000043   7404         MOV       A,#0x4
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   E8           MOV       A,R0
   \   000049   F0           MOVX      @DPTR,A
   \   00004A   A3           INC       DPTR
   \   00004B   E9           MOV       A,R1
   \   00004C   F0           MOVX      @DPTR,A
   1953            device.devStatus  = DEV_SEC_INIT_STATUS;
   \   00004D   7407         MOV       A,#0x7
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   7404         MOV       A,#0x4
   \   000054   F0           MOVX      @DPTR,A
   1954            device.secure     = FALSE;
   \   000055   7406         MOV       A,#0x6
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   7400         MOV       A,#0x0
   \   00005C   F0           MOVX      @DPTR,A
   1955          
   1956            // Trust Center should identify the type of JOIN/REJOIN and
   1957            // Transport the NWK key accordingly, it will only be transported for:
   1958            //              APSME_UD_STANDARD_UNSECURED_JOIN
   1959            //   OR         APSME_UD_STANDARD_TRUST_CENTER_REJOIN
   1960            if ( ind->status != APSME_UD_DEVICE_LEFT )
   \   00005D   EE           MOV       A,R6
   \   00005E   240E         ADD       A,#0xe
   \   000060   F582         MOV       DPL,A
   \   000062   E4           CLR       A
   \   000063   3F           ADDC      A,R7
   \   000064   F583         MOV       DPH,A
   \   000066   E0           MOVX      A,@DPTR
   \   000067   6402         XRL       A,#0x2
   \   000069   602E         JZ        ??ZDSecMgrUpdateDeviceInd_0
   1961            {
   1962              if ( ind->status == APSME_UD_STANDARD_SECURED_REJOIN )
   \   00006B   EE           MOV       A,R6
   \   00006C   240E         ADD       A,#0xe
   \   00006E   F582         MOV       DPL,A
   \   000070   E4           CLR       A
   \   000071   3F           ADDC      A,R7
   \   000072   F583         MOV       DPH,A
   \   000074   E0           MOVX      A,@DPTR
   \   000075   701A         JNZ       ??ZDSecMgrUpdateDeviceInd_1
   1963              {
   1964                device.devStatus &= ~DEV_SEC_INIT_STATUS;
   \   000077   7407         MOV       A,#0x7
   \   000079   12....       LCALL     ?XSTACK_DISP0_8
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   C2E2         CLR       0xE0 /* A   */.2
   \   00007F   F0           MOVX      @DPTR,A
   1965                device.devStatus |=  DEV_SEC_AUTH_STATUS;
   \   000080   7407         MOV       A,#0x7
   \   000082   12....       LCALL     ?XSTACK_DISP0_8
   \   000085   E0           MOVX      A,@DPTR
   \   000086   D2E3         SETB      0xE0 /* A   */.3
   \   000088   F0           MOVX      @DPTR,A
   1966                device.secure = TRUE;
   \   000089   7406         MOV       A,#0x6
   \   00008B   12....       LCALL     ?XSTACK_DISP0_8
   \   00008E   7401         MOV       A,#0x1
   \   000090   F0           MOVX      @DPTR,A
   1967              }
   1968              else
   1969              {
   1970          #if (ZG_BUILD_COORDINATOR_TYPE)
   1971                uint8  found;
   1972                uint16 keyNvIndex;
   1973                APSME_TCLKDevEntry_t TCLKDevEntry;
   1974                
   1975                keyNvIndex = APSME_SearchTCLinkKeyEntry(device.extAddr,&found, &TCLKDevEntry);
   1976                
   1977                //If found and it was verified, then allow it to join in a fresh state by erasing the key entry
   1978                if((found == TRUE) && (TCLKDevEntry.keyAttributes == ZG_VERIFIED_KEY))
   1979                {
   1980                  TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
   1981                  //Increase the shift by one. Validate the maximum shift of the seed which is 15
   1982                  TCLKDevEntry.SeedShift_IcIndex++;
   1983                  TCLKDevEntry.SeedShift_IcIndex &= 0x0F;
   1984                  
   1985                  TCLKDevEntry.rxFrmCntr = 0;
   1986                  TCLKDevEntry.txFrmCntr = 0;  
   1987                  
   1988                  //Update the entry
   1989                  osal_nv_write(keyNvIndex,0,sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
   1990                }
   1991                
   1992                bdb_TCAddJoiningDevice(device.parentAddr,device.extAddr);
   1993          #endif
   1994              
   1995              }
   1996          
   1997              ZDSecMgrDeviceJoin( &device );
   \                     ??ZDSecMgrUpdateDeviceInd_1:
   \   000091                ; Setup parameters for call to function ZDSecMgrDeviceJoin
   \   000091   AA..         MOV       R2,?XSP + 0
   \   000093   AB..         MOV       R3,?XSP + 1
   \   000095   12....       LCALL     `??ZDSecMgrDeviceJoin::?relay`; Banked call to: ZDSecMgrDeviceJoin
   \   000098   E9           MOV       A,R1
   1998            }
   1999          }
   \                     ??ZDSecMgrUpdateDeviceInd_0:
   \   000099   7408         MOV       A,#0x8
   \   00009B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009E   7F01         MOV       R7,#0x1
   \   0000A0   02....       LJMP      ?BANKED_LEAVE_XDATA
   2000          
   2001          /******************************************************************************
   2002           * @fn          ZDSecMgrRemoveDeviceInd
   2003           *
   2004           * @brief       Process the ZDO_RemoveDeviceInd_t message.
   2005           *
   2006           * @param       ind - [in] ZDO_RemoveDeviceInd_t indication
   2007           *
   2008           * @return      none
   2009           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2010          void ZDSecMgrRemoveDeviceInd( ZDO_RemoveDeviceInd_t* ind )
   \                     ZDSecMgrRemoveDeviceInd:
   2011          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2012            ZDSecMgrDevice_t device;
   2013          
   2014            // only accept from Trust Center
   2015            if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
   \   00000E   8E82         MOV       DPL,R6
   \   000010   8F83         MOV       DPH,R7
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F8           MOV       R0,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F9           MOV       R1,A
   \   000019   E8           MOV       A,R0
   \   00001A   49           ORL       A,R1
   \   00001B   7038         JNZ       ??ZDSecMgrRemoveDeviceInd_0
   2016            {
   2017              // look up NWK address
   2018              if ( APSME_LookupNwkAddr( ind->childExtAddr, &device.nwkAddr ) == TRUE )
   \   00001D                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   00001D   AC..         MOV       R4,?XSP + 0
   \   00001F   AD..         MOV       R5,?XSP + 1
   \   000021   EE           MOV       A,R6
   \   000022   2404         ADD       A,#0x4
   \   000024   FA           MOV       R2,A
   \   000025   E4           CLR       A
   \   000026   3F           ADDC      A,R7
   \   000027   FB           MOV       R3,A
   \   000028   12....       LCALL     `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   00002B   E9           MOV       A,R1
   \   00002C   6401         XRL       A,#0x1
   \   00002E   7025         JNZ       ??ZDSecMgrRemoveDeviceInd_0
   2019              {
   2020                device.parentAddr = NLME_GetShortAddr();
   \   000030                ; Setup parameters for call to function NLME_GetShortAddr
   \   000030   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000033   7404         MOV       A,#0x4
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   EA           MOV       A,R2
   \   000039   F0           MOVX      @DPTR,A
   \   00003A   A3           INC       DPTR
   \   00003B   EB           MOV       A,R3
   \   00003C   F0           MOVX      @DPTR,A
   2021                device.extAddr    = ind->childExtAddr;
   \   00003D   EE           MOV       A,R6
   \   00003E   2404         ADD       A,#0x4
   \   000040   F8           MOV       R0,A
   \   000041   E4           CLR       A
   \   000042   3F           ADDC      A,R7
   \   000043   F9           MOV       R1,A
   \   000044   7402         MOV       A,#0x2
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   E8           MOV       A,R0
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B   A3           INC       DPTR
   \   00004C   E9           MOV       A,R1
   \   00004D   F0           MOVX      @DPTR,A
   2022          
   2023                // remove device
   2024                ZDSecMgrDeviceRemove( &device );
   \   00004E                ; Setup parameters for call to function ZDSecMgrDeviceRemove
   \   00004E   AA..         MOV       R2,?XSP + 0
   \   000050   AB..         MOV       R3,?XSP + 1
   \   000052   12....       LCALL     `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
   2025              }
   2026            }
   2027          }
   \                     ??ZDSecMgrRemoveDeviceInd_0:
   \   000055   7408         MOV       A,#0x8
   \   000057   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005A   7F01         MOV       R7,#0x1
   \   00005C   02....       LJMP      ?BANKED_LEAVE_XDATA
   2028          
   2029          /******************************************************************************
   2030           * @fn          ZDSecMgrRequestKeyInd
   2031           *
   2032           * @brief       Process the ZDO_RequestKeyInd_t message.
   2033           *
   2034           * @param       ind - [in] ZDO_RequestKeyInd_t indication
   2035           *
   2036           * @return      none
   2037           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2038          void ZDSecMgrRequestKeyInd( ZDO_RequestKeyInd_t* ind )
   \                     ZDSecMgrRequestKeyInd:
   2039          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2040            if ( ind->keyType == KEY_TYPE_NWK )
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   6401         XRL       A,#0x1
   \   000014   602A         JZ        ??ZDSecMgrRequestKeyInd_0
   2041            {
   2042            }
   2043            else if ( ind->keyType == KEY_TYPE_APP_MASTER )
   \   000016   8E82         MOV       DPL,R6
   \   000018   8F83         MOV       DPH,R7
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   6402         XRL       A,#0x2
   \   000021   7009         JNZ       ??ZDSecMgrRequestKeyInd_1
   2044            {
   2045              ZDSecMgrAppKeyReq( ind );
   \   000023                ; Setup parameters for call to function ZDSecMgrAppKeyReq
   \   000023   EE           MOV       A,R6
   \   000024   FA           MOV       R2,A
   \   000025   EF           MOV       A,R7
   \   000026   FB           MOV       R3,A
   \   000027   12....       LCALL     `??ZDSecMgrAppKeyReq::?relay`; Banked call to: ZDSecMgrAppKeyReq
   \   00002A   8014         SJMP      ??ZDSecMgrRequestKeyInd_0
   2046            }
   2047            else if ( ind->keyType == KEY_TYPE_TC_LINK )
   \                     ??ZDSecMgrRequestKeyInd_1:
   \   00002C   8E82         MOV       DPL,R6
   \   00002E   8F83         MOV       DPH,R7
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   6404         XRL       A,#0x4
   \   000037   7007         JNZ       ??ZDSecMgrRequestKeyInd_0
   2048            {
   2049              ZDSecMgrTclkReq( ind );
   \   000039                ; Setup parameters for call to function ZDSecMgrTclkReq
   \   000039   EE           MOV       A,R6
   \   00003A   FA           MOV       R2,A
   \   00003B   EF           MOV       A,R7
   \   00003C   FB           MOV       R3,A
   \   00003D   12....       LCALL     `??ZDSecMgrTclkReq::?relay`; Banked call to: ZDSecMgrTclkReq
   2050            }
   2051            //else ignore
   2052          }
   \                     ??ZDSecMgrRequestKeyInd_0:
   \   000040   7F01         MOV       R7,#0x1
   \   000042   02....       LJMP      ?BANKED_LEAVE_XDATA
   2053          
   2054          
   2055          /******************************************************************************
   2056           * @fn          ZDSecMgrVerifyKeyInd
   2057           *
   2058           * @brief       Process the ZDO_VerifyKeyInd_t message.
   2059           *
   2060           * @param       ind - [in] ZDO_VerifyKeyInd_t indication
   2061           *
   2062           * @return      none
   2063           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2064          void ZDSecMgrVerifyKeyInd( ZDO_VerifyKeyInd_t* ind )
   \                     ZDSecMgrVerifyKeyInd:
   2065          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2066            ZDSecMgrAppConfKeyReq( ind );
   \   000009                ; Setup parameters for call to function ZDSecMgrAppConfKeyReq
   \   000009   EE           MOV       A,R6
   \   00000A   FA           MOV       R2,A
   \   00000B   EF           MOV       A,R7
   \   00000C   FB           MOV       R3,A
   \   00000D   12....       LCALL     `??ZDSecMgrAppConfKeyReq::?relay`; Banked call to: ZDSecMgrAppConfKeyReq
   2067          }
   \   000010   7F01         MOV       R7,#0x1
   \   000012   02....       LJMP      ?BANKED_LEAVE_XDATA
   2068          
   2069          
   2070          /******************************************************************************
   2071           * @fn          ZDSecMgrSwitchKeyInd
   2072           *
   2073           * @brief       Process the ZDO_SwitchKeyInd_t message.
   2074           *
   2075           * @param       ind - [in] ZDO_SwitchKeyInd_t indication
   2076           *
   2077           * @return      none
   2078           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2079          void ZDSecMgrSwitchKeyInd( ZDO_SwitchKeyInd_t* ind )
   \                     ZDSecMgrSwitchKeyInd:
   2080          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2081            SSP_SwitchNwkKey( ind->keySeqNum );
   \   000009                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F9           MOV       R1,A
   \   000013   12....       LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   2082          
   2083            // Save if nv
   2084            ZDApp_NVUpdate();
   \   000016                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000016   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   2085          }
   \   000019   7F01         MOV       R7,#0x1
   \   00001B   02....       LJMP      ?BANKED_LEAVE_XDATA
   2086            
   2087          /******************************************************************************
   2088           * @fn          ZDSecMgrGenerateSeed
   2089           *
   2090           * @brief       Generate the seed for TC link keys and store it in Nv
   2091           *
   2092           * @param       SetDefault, force to use new seed
   2093           *
   2094           * @return      none
   2095           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2096          void ZDSecMgrGenerateSeed(uint8 SetDefault)
   \                     ZDSecMgrGenerateSeed:
   2097          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   2098            uint8 SeedKey[SEC_KEY_LEN];  
   2099            
   2100            ZDSecMgrGenerateRndKey(SeedKey);
   \   00000C                ; Setup parameters for call to function ZDSecMgrGenerateRndKey
   \   00000C   AA..         MOV       R2,?XSP + 0
   \   00000E   AB..         MOV       R3,?XSP + 1
   \   000010   12....       LCALL     `??ZDSecMgrGenerateRndKey::?relay`; Banked call to: ZDSecMgrGenerateRndKey
   2101            
   2102            if((SUCCESS == osal_nv_item_init(ZCD_NV_TCLK_SEED,SEC_KEY_LEN,SeedKey)) && SetDefault)
   \   000013                ; Setup parameters for call to function osal_nv_item_init
   \   000013   A8..         MOV       R0,?XSP + 0
   \   000015   A9..         MOV       R1,?XSP + 1
   \   000017   88..         MOV       ?V0,R0
   \   000019   89..         MOV       ?V1,R1
   \   00001B   78..         MOV       R0,#?V0
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000020   7C10         MOV       R4,#0x10
   \   000022   7D00         MOV       R5,#0x0
   \   000024   7A01         MOV       R2,#0x1
   \   000026   7B01         MOV       R3,#0x1
   \   000028   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000030   E9           MOV       A,R1
   \   000031   702C         JNZ       ??ZDSecMgrGenerateSeed_0
   \   000033   EE           MOV       A,R6
   \   000034   6029         JZ        ??ZDSecMgrGenerateSeed_0
   2103            {
   2104              //Force to use a new seed
   2105              osal_nv_write(ZCD_NV_TCLK_SEED,0,SEC_KEY_LEN,SeedKey);
   \   000036                ; Setup parameters for call to function osal_nv_write
   \   000036   A8..         MOV       R0,?XSP + 0
   \   000038   A9..         MOV       R1,?XSP + 1
   \   00003A   88..         MOV       ?V0,R0
   \   00003C   89..         MOV       ?V1,R1
   \   00003E   78..         MOV       R0,#?V0
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000043   75..10       MOV       ?V0,#0x10
   \   000046   75..00       MOV       ?V1,#0x0
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   7C00         MOV       R4,#0x0
   \   000050   7D00         MOV       R5,#0x0
   \   000052   7A01         MOV       R2,#0x1
   \   000054   7B01         MOV       R3,#0x1
   \   000056   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000059   7404         MOV       A,#0x4
   \   00005B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005E   E9           MOV       A,R1
   2106            }
   2107          
   2108            osal_memset(SeedKey,0,SEC_KEY_LEN);
   \                     ??ZDSecMgrGenerateSeed_0:
   \   00005F                ; Setup parameters for call to function osal_memset
   \   00005F   7C10         MOV       R4,#0x10
   \   000061   7D00         MOV       R5,#0x0
   \   000063   7900         MOV       R1,#0x0
   \   000065   AA..         MOV       R2,?XSP + 0
   \   000067   AB..         MOV       R3,?XSP + 1
   \   000069   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2109          }
   \   00006C   7410         MOV       A,#0x10
   \   00006E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000071   7F02         MOV       R7,#0x2
   \   000073   02....       LJMP      ?BANKED_LEAVE_XDATA
   2110          
   2111          
   2112          /******************************************************************************
   2113           * @fn          ZDSecMgrGenerateKeyFromSeed
   2114           *
   2115           * @brief       Generate the TC link key for an specific device usign seed and ExtAddr
   2116           *
   2117           * @param       [in]  extAddr  
   2118           * @param       [in]  shift    number of byte shifts that the seed will do to 
   2119           *                             generate a new key for the same device. 
   2120           *                             This value must be less than SEC_KEY_LEN
   2121           * @param       [out] key      buffer in which the key will be copied
   2122           *
   2123           * @return      none
   2124           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2125          void ZDSecMgrGenerateKeyFromSeed(uint8 *extAddr, uint8 shift, uint8 *key)
   \                     ZDSecMgrGenerateKeyFromSeed:
   2126          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
   \   00000E   89..         MOV       ?V4,R1
   \   000010   EC           MOV       A,R4
   \   000011   FE           MOV       R6,A
   \   000012   ED           MOV       A,R5
   \   000013   FF           MOV       R7,A
   2127            uint8 i;
   2128            uint8 tempKey[SEC_KEY_LEN];
   2129            
   2130            if((key != NULL) && (extAddr != NULL))
   \   000014   EE           MOV       A,R6
   \   000015   4F           ORL       A,R7
   \   000016   7003         JNZ       $+5
   \   000018   02....       LJMP      ??ZDSecMgrGenerateKeyFromSeed_0 & 0xFFFF
   \   00001B   E5..         MOV       A,?V6
   \   00001D   45..         ORL       A,?V7
   \   00001F   7003         JNZ       $+5
   \   000021   02....       LJMP      ??ZDSecMgrGenerateKeyFromSeed_0 & 0xFFFF
   2131            {
   2132              //Read the key
   2133              osal_nv_read(ZCD_NV_TCLK_SEED,0,SEC_KEY_LEN,tempKey);
   \   000024                ; Setup parameters for call to function osal_nv_read
   \   000024   A8..         MOV       R0,?XSP + 0
   \   000026   A9..         MOV       R1,?XSP + 1
   \   000028   88..         MOV       ?V0,R0
   \   00002A   89..         MOV       ?V1,R1
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   75..10       MOV       ?V0,#0x10
   \   000034   75..00       MOV       ?V1,#0x0
   \   000037   78..         MOV       R0,#?V0
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   7C00         MOV       R4,#0x0
   \   00003E   7D00         MOV       R5,#0x0
   \   000040   7A01         MOV       R2,#0x1
   \   000042   7B01         MOV       R3,#0x1
   \   000044   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000047   7404         MOV       A,#0x4
   \   000049   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004C   E9           MOV       A,R1
   2134          
   2135              //shift the seed
   2136              osal_memcpy(key, &tempKey[shift], SEC_KEY_LEN - shift);
   \   00004D                ; Setup parameters for call to function osal_memcpy
   \   00004D   E5..         MOV       A,?V4
   \   00004F   F8           MOV       R0,A
   \   000050   7900         MOV       R1,#0x0
   \   000052   85..82       MOV       DPL,?XSP + 0
   \   000055   85..83       MOV       DPH,?XSP + 1
   \   000058   E582         MOV       A,DPL
   \   00005A   28           ADD       A,R0
   \   00005B   F5..         MOV       ?V0,A
   \   00005D   E583         MOV       A,DPH
   \   00005F   39           ADDC      A,R1
   \   000060   F5..         MOV       ?V1,A
   \   000062   75..00       MOV       ?V2,#0x0
   \   000065   78..         MOV       R0,#?V0
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00006A   E5..         MOV       A,?V4
   \   00006C   F8           MOV       R0,A
   \   00006D   7900         MOV       R1,#0x0
   \   00006F   7410         MOV       A,#0x10
   \   000071   C3           CLR       C
   \   000072   98           SUBB      A,R0
   \   000073   FC           MOV       R4,A
   \   000074   7400         MOV       A,#0x0
   \   000076   99           SUBB      A,R1
   \   000077   FD           MOV       R5,A
   \   000078   EE           MOV       A,R6
   \   000079   FA           MOV       R2,A
   \   00007A   EF           MOV       A,R7
   \   00007B   FB           MOV       R3,A
   \   00007C   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00007F   7403         MOV       A,#0x3
   \   000081   12....       LCALL     ?DEALLOC_XSTACK8
   2137              osal_memcpy(&key[SEC_KEY_LEN - shift], tempKey, shift);
   \   000084                ; Setup parameters for call to function osal_memcpy
   \   000084   A8..         MOV       R0,?XSP + 0
   \   000086   A9..         MOV       R1,?XSP + 1
   \   000088   88..         MOV       ?V0,R0
   \   00008A   89..         MOV       ?V1,R1
   \   00008C   75..00       MOV       ?V2,#0x0
   \   00008F   78..         MOV       R0,#?V0
   \   000091   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000094   E5..         MOV       A,?V4
   \   000096   FC           MOV       R4,A
   \   000097   7D00         MOV       R5,#0x0
   \   000099   E5..         MOV       A,?V4
   \   00009B   F8           MOV       R0,A
   \   00009C   7900         MOV       R1,#0x0
   \   00009E   C3           CLR       C
   \   00009F   E4           CLR       A
   \   0000A0   98           SUBB      A,R0
   \   0000A1   F8           MOV       R0,A
   \   0000A2   E4           CLR       A
   \   0000A3   99           SUBB      A,R1
   \   0000A4   F9           MOV       R1,A
   \   0000A5   EE           MOV       A,R6
   \   0000A6   28           ADD       A,R0
   \   0000A7   F8           MOV       R0,A
   \   0000A8   EF           MOV       A,R7
   \   0000A9   39           ADDC      A,R1
   \   0000AA   F9           MOV       R1,A
   \   0000AB   E8           MOV       A,R0
   \   0000AC   2410         ADD       A,#0x10
   \   0000AE   FA           MOV       R2,A
   \   0000AF   E4           CLR       A
   \   0000B0   39           ADDC      A,R1
   \   0000B1   FB           MOV       R3,A
   \   0000B2   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000B5   7403         MOV       A,#0x3
   \   0000B7   12....       LCALL     ?DEALLOC_XSTACK8
   2138             
   2139              //Create the key from the seed
   2140              for(i = 0; i < Z_EXTADDR_LEN; i++)
   \   0000BA   75..00       MOV       ?V3,#0x0
   \                     ??ZDSecMgrGenerateKeyFromSeed_1:
   \   0000BD   E5..         MOV       A,?V3
   \   0000BF   C3           CLR       C
   \   0000C0   9408         SUBB      A,#0x8
   \   0000C2   504E         JNC       ??ZDSecMgrGenerateKeyFromSeed_0
   2141              {
   2142                key[i] ^= extAddr[i];
   \   0000C4   E5..         MOV       A,?V3
   \   0000C6   F8           MOV       R0,A
   \   0000C7   7900         MOV       R1,#0x0
   \   0000C9   E5..         MOV       A,?V6
   \   0000CB   28           ADD       A,R0
   \   0000CC   F582         MOV       DPL,A
   \   0000CE   E5..         MOV       A,?V7
   \   0000D0   39           ADDC      A,R1
   \   0000D1   F583         MOV       DPH,A
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   FA           MOV       R2,A
   \   0000D5   E5..         MOV       A,?V3
   \   0000D7   F8           MOV       R0,A
   \   0000D8   7900         MOV       R1,#0x0
   \   0000DA   EE           MOV       A,R6
   \   0000DB   28           ADD       A,R0
   \   0000DC   F582         MOV       DPL,A
   \   0000DE   EF           MOV       A,R7
   \   0000DF   39           ADDC      A,R1
   \   0000E0   F583         MOV       DPH,A
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   6A           XRL       A,R2
   \   0000E4   F0           MOVX      @DPTR,A
   2143                key[i+Z_EXTADDR_LEN] ^= extAddr[i];
   \   0000E5   E5..         MOV       A,?V3
   \   0000E7   F8           MOV       R0,A
   \   0000E8   7900         MOV       R1,#0x0
   \   0000EA   E5..         MOV       A,?V6
   \   0000EC   28           ADD       A,R0
   \   0000ED   F582         MOV       DPL,A
   \   0000EF   E5..         MOV       A,?V7
   \   0000F1   39           ADDC      A,R1
   \   0000F2   F583         MOV       DPH,A
   \   0000F4   E0           MOVX      A,@DPTR
   \   0000F5   FA           MOV       R2,A
   \   0000F6   E5..         MOV       A,?V3
   \   0000F8   F8           MOV       R0,A
   \   0000F9   7900         MOV       R1,#0x0
   \   0000FB   EE           MOV       A,R6
   \   0000FC   28           ADD       A,R0
   \   0000FD   F582         MOV       DPL,A
   \   0000FF   EF           MOV       A,R7
   \   000100   39           ADDC      A,R1
   \   000101   F583         MOV       DPH,A
   \   000103   A3           INC       DPTR
   \   000104   A3           INC       DPTR
   \   000105   A3           INC       DPTR
   \   000106   A3           INC       DPTR
   \   000107   A3           INC       DPTR
   \   000108   A3           INC       DPTR
   \   000109   A3           INC       DPTR
   \   00010A   A3           INC       DPTR
   \   00010B   E0           MOVX      A,@DPTR
   \   00010C   6A           XRL       A,R2
   \   00010D   F0           MOVX      @DPTR,A
   2144              }
   \   00010E   05..         INC       ?V3
   \   000110   80AB         SJMP      ??ZDSecMgrGenerateKeyFromSeed_1
   2145            }
   2146          }
   \                     ??ZDSecMgrGenerateKeyFromSeed_0:
   \   000112   7410         MOV       A,#0x10
   \   000114   12....       LCALL     ?DEALLOC_XSTACK8
   \   000117   7F08         MOV       R7,#0x8
   \   000119   02....       LJMP      ?BANKED_LEAVE_XDATA
   2147          
   2148          
   2149          /******************************************************************************
   2150           * @fn          ZDSecMgrGenerateRndKey
   2151           *
   2152          * @brief       Generate a random key. NOTE: Random key is generated by osal_rand, refer to osal_rand to see the random properties of the key generated by this mean.
   2153           *
   2154           * @param       pKey - [out] Buffer pointer in which the key will be passed.
   2155           *
   2156           * @return      none
   2157           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2158          void ZDSecMgrGenerateRndKey(uint8* pKey)
   \                     ZDSecMgrGenerateRndKey:
   2159          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2160            uint16  temp;
   2161            uint8   index = 0;
   \   000009   75..00       MOV       ?V2,#0x0
   2162            
   2163            while(index < (SEC_KEY_LEN/2))
   \                     ??ZDSecMgrGenerateRndKey_0:
   \   00000C   E5..         MOV       A,?V2
   \   00000E   C3           CLR       C
   \   00000F   9408         SUBB      A,#0x8
   \   000011   506A         JNC       ??ZDSecMgrGenerateRndKey_1
   2164            {
   2165              temp = osal_rand();
   \   000013                ; Setup parameters for call to function osal_rand
   \   000013   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000016   8A..         MOV       ?V4,R2
   \   000018   8B..         MOV       ?V5,R3
   \   00001A   85....       MOV       ?V0,?V4
   \   00001D   85....       MOV       ?V1,?V5
   2166              pKey[index*2]   = (uint8) (temp & 0x00FF);
   \   000020   E5..         MOV       A,?V0
   \   000022   C0E0         PUSH      A
   \   000024   E5..         MOV       A,?V2
   \   000026   F8           MOV       R0,A
   \   000027   7900         MOV       R1,#0x0
   \   000029   E8           MOV       A,R0
   \   00002A   75F002       MOV       B,#0x2
   \   00002D   A4           MUL       AB
   \   00002E   C8           XCH       A,R0
   \   00002F   AAF0         MOV       R2,B
   \   000031   75F000       MOV       B,#0x0
   \   000034   A4           MUL       AB
   \   000035   2A           ADD       A,R2
   \   000036   FA           MOV       R2,A
   \   000037   75F002       MOV       B,#0x2
   \   00003A   E9           MOV       A,R1
   \   00003B   A4           MUL       AB
   \   00003C   2A           ADD       A,R2
   \   00003D   F9           MOV       R1,A
   \   00003E   EE           MOV       A,R6
   \   00003F   28           ADD       A,R0
   \   000040   F582         MOV       DPL,A
   \   000042   EF           MOV       A,R7
   \   000043   39           ADDC      A,R1
   \   000044   F583         MOV       DPH,A
   \   000046   D0E0         POP       A
   \   000048   F0           MOVX      @DPTR,A
   2167              pKey[index*2+1] = (uint8) ((temp >> 8) & 0x00FF);
   \   000049   A8..         MOV       R0,?V0
   \   00004B   A9..         MOV       R1,?V1
   \   00004D   E4           CLR       A
   \   00004E   C9           XCH       A,R1
   \   00004F   F8           MOV       R0,A
   \   000050   E8           MOV       A,R0
   \   000051   C0E0         PUSH      A
   \   000053   E5..         MOV       A,?V2
   \   000055   F8           MOV       R0,A
   \   000056   7900         MOV       R1,#0x0
   \   000058   E8           MOV       A,R0
   \   000059   75F002       MOV       B,#0x2
   \   00005C   A4           MUL       AB
   \   00005D   C8           XCH       A,R0
   \   00005E   AAF0         MOV       R2,B
   \   000060   75F000       MOV       B,#0x0
   \   000063   A4           MUL       AB
   \   000064   2A           ADD       A,R2
   \   000065   FA           MOV       R2,A
   \   000066   75F002       MOV       B,#0x2
   \   000069   E9           MOV       A,R1
   \   00006A   A4           MUL       AB
   \   00006B   2A           ADD       A,R2
   \   00006C   F9           MOV       R1,A
   \   00006D   EE           MOV       A,R6
   \   00006E   28           ADD       A,R0
   \   00006F   F582         MOV       DPL,A
   \   000071   EF           MOV       A,R7
   \   000072   39           ADDC      A,R1
   \   000073   F583         MOV       DPH,A
   \   000075   A3           INC       DPTR
   \   000076   D0E0         POP       A
   \   000078   F0           MOVX      @DPTR,A
   2168              index++;
   \   000079   05..         INC       ?V2
   \   00007B   808F         SJMP      ??ZDSecMgrGenerateRndKey_0
   2169            }
   2170          }
   \                     ??ZDSecMgrGenerateRndKey_1:
   \   00007D   7F06         MOV       R7,#0x6
   \   00007F   02....       LJMP      ?BANKED_LEAVE_XDATA
   2171          
   2172          
   2173          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2174          /******************************************************************************
   2175           * @fn          ZDSecMgrUpdateNwkKey
   2176           *
   2177           * @brief       Load a new NWK key and trigger a network update to the dstAddr.
   2178           *
   2179           * @param       key       - [in] new NWK key
   2180           * @param       keySeqNum - [in] new NWK key sequence number
   2181           *
   2182           * @return      ZStatus_t
   2183           */
   2184          ZStatus_t ZDSecMgrUpdateNwkKey( uint8* key, uint8 keySeqNum, uint16 dstAddr )
   2185          {
   2186            ZStatus_t               status;
   2187            APSME_TransportKeyReq_t req;
   2188          
   2189            // initialize common elements of local variables
   2190            req.keyType   = KEY_TYPE_NWK;
   2191          
   2192            req.dstAddr   = dstAddr;
   2193            req.keySeqNum = keySeqNum;
   2194            req.key       = key;
   2195            req.extAddr   = NULL;
   2196            req.nwkSecure = TRUE;
   2197            req.tunnel    = NULL;
   2198          
   2199            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   2200            {
   2201              // Broadcast transport NWK key
   2202              if (( dstAddr == NWK_BROADCAST_SHORTADDR_DEVALL ) ||
   2203                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR) ||
   2204                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVRXON))
   2205              {
   2206                req.apsSecure = FALSE;
   2207                status = APSME_TransportKeyReq( &req );
   2208              }
   2209              else
   2210              {
   2211                AddrMgrEntry_t          addrEntry;
   2212          
   2213                addrEntry.user = ADDRMGR_USER_SECURITY;
   2214                addrEntry.nwkAddr = dstAddr;
   2215          
   2216                status = ZFailure;
   2217          
   2218                if ( AddrMgrEntryLookupNwk( &addrEntry ) == TRUE )
   2219                {
   2220                  req.extAddr = addrEntry.extAddr;
   2221                  req.apsSecure = TRUE;
   2222                  status = APSME_TransportKeyReq( &req );
   2223                }
   2224              }
   2225            }
   2226            else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   2227            {
   2228              req.apsSecure = FALSE;
   2229              status = APSME_TransportKeyReq( &req );
   2230            }
   2231          
   2232            SSP_UpdateNwkKey( key, keySeqNum );
   2233          
   2234            // Save if nv
   2235            ZDApp_NVUpdate();
   2236          
   2237            return status;
   2238          }
   2239          #endif // ( ZG_BUILD_COORDINATOR_TYPE )
   2240          
   2241          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2242          /******************************************************************************
   2243           * @fn          ZDSecMgrSwitchNwkKey
   2244           *
   2245           * @brief       Causes the NWK key to switch via a network command to the dstAddr.
   2246           *
   2247           * @param       keySeqNum - [in] new NWK key sequence number
   2248           *
   2249           * @return      ZStatus_t
   2250           */
   2251          ZStatus_t ZDSecMgrSwitchNwkKey( uint8 keySeqNum, uint16 dstAddr )
   2252          {
   2253            ZStatus_t            status;
   2254            APSME_SwitchKeyReq_t req;
   2255          
   2256            // initialize common elements of local variables
   2257            req.dstAddr = dstAddr;
   2258            req.keySeqNum = keySeqNum;
   2259          
   2260            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   2261            {
   2262              // Broadcast switch NWK key
   2263              if (( dstAddr == NWK_BROADCAST_SHORTADDR_DEVALL ) ||
   2264                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR) ||
   2265                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVRXON))
   2266              {
   2267                req.apsSecure = FALSE;
   2268                status = APSME_SwitchKeyReq( &req );
   2269              }
   2270              else
   2271              {
   2272                AddrMgrEntry_t          addrEntry;
   2273          
   2274                addrEntry.user = ADDRMGR_USER_SECURITY;
   2275                addrEntry.nwkAddr = dstAddr;
   2276          
   2277                status = ZFailure;
   2278          
   2279                if ( AddrMgrEntryLookupNwk( &addrEntry ) == TRUE )
   2280                {
   2281                  req.dstAddr = addrEntry.nwkAddr;
   2282                  req.apsSecure = TRUE;
   2283                  status = APSME_SwitchKeyReq( &req );
   2284                }
   2285              }
   2286            }
   2287            else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   2288            {
   2289              req.apsSecure = FALSE;
   2290              status = APSME_SwitchKeyReq( &req );
   2291            }
   2292          
   2293            if ( dstAddr >= NWK_BROADCAST_SHORTADDR_DEVZCZR)
   2294            {
   2295              zgSwitchCoordKey = TRUE;
   2296              zgSwitchCoordKeyIndex = keySeqNum;
   2297            }
   2298            // Save if nv
   2299            ZDApp_NVUpdate();
   2300          
   2301            return status;
   2302          }
   2303          #endif // ( ZG_BUILD_COORDINATOR_TYPE )
   2304          
   2305          /******************************************************************************
   2306           * @fn          ZDSecMgrRequestAppKey
   2307           *
   2308           * @brief       Request an application key with partner.
   2309           *
   2310           * @param       partExtAddr - [in] partner extended address
   2311           *
   2312           * @return      ZStatus_t
   2313           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2314          ZStatus_t ZDSecMgrRequestAppKey( uint8 *partExtAddr )
   \                     ZDSecMgrRequestAppKey:
   2315          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2316            ZStatus_t status;
   2317            APSME_RequestKeyReq_t req;
   2318          
   2319            req.dstAddr = 0;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   7400         MOV       A,#0x0
   \   000016   F0           MOVX      @DPTR,A
   2320            req.keyType = KEY_TYPE_APP_MASTER;
   \   000017   7401         MOV       A,#0x1
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   7402         MOV       A,#0x2
   \   00001E   F0           MOVX      @DPTR,A
   2321          
   2322            req.partExtAddr = partExtAddr;
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   EE           MOV       A,R6
   \   000025   F0           MOVX      @DPTR,A
   \   000026   A3           INC       DPTR
   \   000027   EF           MOV       A,R7
   \   000028   F0           MOVX      @DPTR,A
   2323            status = APSME_RequestKeyReq( &req );
   \   000029                ; Setup parameters for call to function APSME_RequestKeyReq
   \   000029   AA..         MOV       R2,?XSP + 0
   \   00002B   AB..         MOV       R3,?XSP + 1
   \   00002D   12....       LCALL     `??APSME_RequestKeyReq::?relay`; Banked call to: APSME_RequestKeyReq
   \   000030   E9           MOV       A,R1
   \   000031   F5..         MOV       ?V0,A
   2324          
   2325            return status;
   \   000033   A9..         MOV       R1,?V0
   \   000035   7404         MOV       A,#0x4
   \   000037   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003A   7F01         MOV       R7,#0x1
   \   00003C   02....       LJMP      ?BANKED_LEAVE_XDATA
   2326          }
   2327          
   2328          #if ( ZG_BUILD_JOINING_TYPE )
   2329          /******************************************************************************
   2330           * @fn          ZDSecMgrSetupPartner
   2331           *
   2332           * @brief       Setup for application key partner.
   2333           *
   2334           * @param       partNwkAddr - [in] partner network address
   2335           *
   2336           * @return      ZStatus_t
   2337           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2338          ZStatus_t ZDSecMgrSetupPartner( uint16 partNwkAddr, uint8* partExtAddr )
   \                     ZDSecMgrSetupPartner:
   2339          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   8C..         MOV       ?V2,R4
   \   000010   8D..         MOV       ?V3,R5
   2340            AddrMgrEntry_t entry;
   2341            ZStatus_t      status;
   2342          
   2343            status = ZFailure;
   \   000012   7E01         MOV       R6,#0x1
   2344          
   2345            // update the address manager
   2346            entry.user    = ADDRMGR_USER_SECURITY;
   \   000014   85..82       MOV       DPL,?XSP + 0
   \   000017   85..83       MOV       DPH,?XSP + 1
   \   00001A   7402         MOV       A,#0x2
   \   00001C   F0           MOVX      @DPTR,A
   2347            entry.nwkAddr = partNwkAddr;
   \   00001D   7401         MOV       A,#0x1
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   E5..         MOV       A,?V0
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   E5..         MOV       A,?V1
   \   000028   F0           MOVX      @DPTR,A
   2348            AddrMgrExtAddrSet( entry.extAddr, partExtAddr );
   \   000029                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000029   AC..         MOV       R4,?V2
   \   00002B   AD..         MOV       R5,?V3
   \   00002D   7403         MOV       A,#0x3
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   AA82         MOV       R2,DPL
   \   000034   AB83         MOV       R3,DPH
   \   000036   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   2349          
   2350            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \   000039                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000039   AA..         MOV       R2,?XSP + 0
   \   00003B   AB..         MOV       R3,?XSP + 1
   \   00003D   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   000040   E9           MOV       A,R1
   \   000041   6401         XRL       A,#0x1
   \   000043   7038         JNZ       ??ZDSecMgrSetupPartner_0
   2351            {
   2352              status = ZSuccess;
   \   000045   7E00         MOV       R6,#0x0
   2353          
   2354              // check for address discovery
   2355              if ( partNwkAddr == INVALID_NODE_ADDR )
   \   000047   74FE         MOV       A,#-0x2
   \   000049   65..         XRL       A,?V0
   \   00004B   7004         JNZ       ??ZDSecMgrSetupPartner_1
   \   00004D   74FF         MOV       A,#-0x1
   \   00004F   65..         XRL       A,?V1
   \                     ??ZDSecMgrSetupPartner_1:
   \   000051   7011         JNZ       ??ZDSecMgrSetupPartner_2
   2356              {
   2357                status = ZDP_NwkAddrReq( partExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   000053                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000053   7D00         MOV       R5,#0x0
   \   000055   7C00         MOV       R4,#0x0
   \   000057   7900         MOV       R1,#0x0
   \   000059   AA..         MOV       R2,?V2
   \   00005B   AB..         MOV       R3,?V3
   \   00005D   12....       LCALL     `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   000060   E9           MOV       A,R1
   \   000061   FE           MOV       R6,A
   \   000062   8019         SJMP      ??ZDSecMgrSetupPartner_0
   2358              }
   2359              else if ( !AddrMgrExtAddrValid( partExtAddr ) )
   \                     ??ZDSecMgrSetupPartner_2:
   \   000064                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000064   AA..         MOV       R2,?V2
   \   000066   AB..         MOV       R3,?V3
   \   000068   12....       LCALL     `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   00006B   E9           MOV       A,R1
   \   00006C   700F         JNZ       ??ZDSecMgrSetupPartner_0
   2360              {
   2361                status = ZDP_IEEEAddrReq( partNwkAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   00006E                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   00006E   7D00         MOV       R5,#0x0
   \   000070   7C00         MOV       R4,#0x0
   \   000072   7900         MOV       R1,#0x0
   \   000074   AA..         MOV       R2,?V0
   \   000076   AB..         MOV       R3,?V1
   \   000078   12....       LCALL     `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
   \   00007B   E9           MOV       A,R1
   \   00007C   FE           MOV       R6,A
   2362              }
   2363            }
   2364          
   2365            return status;
   \                     ??ZDSecMgrSetupPartner_0:
   \   00007D   EE           MOV       A,R6
   \   00007E   F9           MOV       R1,A
   \   00007F   740D         MOV       A,#0xd
   \   000081   12....       LCALL     ?DEALLOC_XSTACK8
   \   000084   7F04         MOV       R7,#0x4
   \   000086   02....       LJMP      ?BANKED_LEAVE_XDATA
   2366          }
   2367          #endif // ( ZG_BUILD_JOINING_TYPE )
   2368          
   2369          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2370          /******************************************************************************
   2371           * @fn          ZDSecMgrAppKeyTypeSet
   2372           *
   2373           * @brief       Set application key type.
   2374           *
   2375           * @param       keyType - [in] application key type (KEY_TYPE_APP_MASTER@2 or
   2376           *                                                   KEY_TYPE_APP_LINK@3
   2377           *
   2378           * @return      ZStatus_t
   2379           */
   2380          ZStatus_t ZDSecMgrAppKeyTypeSet( uint8 keyType )
   2381          {
   2382            if ( keyType == KEY_TYPE_APP_LINK )
   2383            {
   2384              ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;
   2385            }
   2386            else
   2387            {
   2388              ZDSecMgrAppKeyType = KEY_TYPE_APP_MASTER;
   2389            }
   2390          
   2391            return ZSuccess;
   2392          }
   2393          #endif
   2394          
   2395          /******************************************************************************
   2396           * ZigBee Device Security Manager - Stub Implementations
   2397           */
   2398          
   2399          
   2400          /******************************************************************************
   2401           * @fn          ZDSecMgrLinkKeySet (stubs APSME_LinkKeySet)
   2402           *
   2403           * @brief       Set <APSME_LinkKeyData_t> for specified NWK address.
   2404           *
   2405           * @param       extAddr - [in] EXT address
   2406           * @param       data    - [in] APSME_LinkKeyData_t
   2407           *
   2408           * @return      ZStatus_t
   2409           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2410          ZStatus_t ZDSecMgrLinkKeySet( uint8* extAddr, uint8* key )
   \                     APSME_LinkKeySet:
   2411          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   2412            ZStatus_t status;
   2413            ZDSecMgrEntry_t* entry;
   2414            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   \   000012   75..00       MOV       ?V8,#0x0
   \   000015   75..00       MOV       ?V9,#0x0
   2415            uint16 Index;
   2416          
   2417            // lookup entry index for specified EXT address
   2418            status = ZDSecMgrEntryLookupExtGetIndex( extAddr, &entry, &Index );
   \   000018                ; Setup parameters for call to function ZDSecMgrEntryLookupExtGetIndex
   \   000018   7402         MOV       A,#0x2
   \   00001A   12....       LCALL     ?XSTACK_DISP100_8
   \   00001D   88..         MOV       ?V4,R0
   \   00001F   89..         MOV       ?V5,R1
   \   000021   78..         MOV       R0,#?V4
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ?XSTACK_DISP102_8
   \   00002B   AA..         MOV       R2,?V2
   \   00002D   AB..         MOV       R3,?V3
   \   00002F   12....       LCALL     `??ZDSecMgrEntryLookupExtGetIndex::?relay`; Banked call to: ZDSecMgrEntryLookupExtGetIndex
   \   000032   7402         MOV       A,#0x2
   \   000034   12....       LCALL     ?DEALLOC_XSTACK8
   \   000037   E9           MOV       A,R1
   \   000038   F5..         MOV       ?V0,A
   2419          
   2420            if ( status == ZSuccess )
   \   00003A   E5..         MOV       A,?V0
   \   00003C   6003         JZ        $+5
   \   00003E   02....       LJMP      ??APSME_LinkKeySet_0 & 0xFFFF
   2421            {
   2422              // point to NV item
   2423              entry->keyNvId = ZCD_NV_APS_LINK_KEY_DATA_START + Index;
   \   000041   7402         MOV       A,#0x2
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   E0           MOVX      A,@DPTR
   \   000047   2401         ADD       A,#0x1
   \   000049   F8           MOV       R0,A
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   3402         ADDC      A,#0x2
   \   00004E   F9           MOV       R1,A
   \   00004F   85..82       MOV       DPL,?XSP + 0
   \   000052   85..83       MOV       DPH,?XSP + 1
   \   000055   E0           MOVX      A,@DPTR
   \   000056   FA           MOV       R2,A
   \   000057   A3           INC       DPTR
   \   000058   E0           MOVX      A,@DPTR
   \   000059   F583         MOV       DPH,A
   \   00005B   8A82         MOV       DPL,R2
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   E8           MOV       A,R0
   \   000060   F0           MOVX      @DPTR,A
   \   000061   A3           INC       DPTR
   \   000062   E9           MOV       A,R1
   \   000063   F0           MOVX      @DPTR,A
   2424          
   2425              pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   000064                ; Setup parameters for call to function osal_mem_alloc
   \   000064   7A18         MOV       R2,#0x18
   \   000066   7B00         MOV       R3,#0x0
   \   000068   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00006B   8A..         MOV       ?V4,R2
   \   00006D   8B..         MOV       ?V5,R3
   \   00006F   85....       MOV       ?V8,?V4
   \   000072   85....       MOV       ?V9,?V5
   2426          
   2427              if (pApsLinkKey != NULL)
   \   000075   E5..         MOV       A,?V8
   \   000077   45..         ORL       A,?V9
   \   000079   7003         JNZ       $+5
   \   00007B   02....       LJMP      ??APSME_LinkKeySet_0 & 0xFFFF
   2428              {
   2429                // read the key form NV, keyNvId must be ZCD_NV_APS_LINK_KEY_DATA_START based
   2430                osal_nv_read( entry->keyNvId, 0,
   2431                             sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   \   00007E                ; Setup parameters for call to function osal_nv_read
   \   00007E   78..         MOV       R0,#?V8
   \   000080   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000083   75..18       MOV       ?V4,#0x18
   \   000086   75..00       MOV       ?V5,#0x0
   \   000089   78..         MOV       R0,#?V4
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008E   7C00         MOV       R4,#0x0
   \   000090   7D00         MOV       R5,#0x0
   \   000092   7404         MOV       A,#0x4
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   E0           MOVX      A,@DPTR
   \   000098   F8           MOV       R0,A
   \   000099   A3           INC       DPTR
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   F583         MOV       DPH,A
   \   00009D   8882         MOV       DPL,R0
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   FA           MOV       R2,A
   \   0000A3   A3           INC       DPTR
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   FB           MOV       R3,A
   \   0000A6   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000A9   7404         MOV       A,#0x4
   \   0000AB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AE   E9           MOV       A,R1
   2432          
   2433                // set new values of the key
   2434                osal_memcpy( pApsLinkKey->key, key, SEC_KEY_LEN );
   \   0000AF                ; Setup parameters for call to function osal_memcpy
   \   0000AF   8E..         MOV       ?V4,R6
   \   0000B1   8F..         MOV       ?V5,R7
   \   0000B3   75..00       MOV       ?V6,#0x0
   \   0000B6   78..         MOV       R0,#?V4
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000BB   7C10         MOV       R4,#0x10
   \   0000BD   7D00         MOV       R5,#0x0
   \   0000BF   AA..         MOV       R2,?V8
   \   0000C1   AB..         MOV       R3,?V9
   \   0000C3   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000C6   7403         MOV       A,#0x3
   \   0000C8   12....       LCALL     ?DEALLOC_XSTACK8
   2435                pApsLinkKey->rxFrmCntr = 0;
   \   0000CB   E5..         MOV       A,?V8
   \   0000CD   2414         ADD       A,#0x14
   \   0000CF   F582         MOV       DPL,A
   \   0000D1   E4           CLR       A
   \   0000D2   35..         ADDC      A,?V9
   \   0000D4   F583         MOV       DPH,A
   \   0000D6   7400         MOV       A,#0x0
   \   0000D8   F0           MOVX      @DPTR,A
   \   0000D9   A3           INC       DPTR
   \   0000DA   7400         MOV       A,#0x0
   \   0000DC   F0           MOVX      @DPTR,A
   \   0000DD   A3           INC       DPTR
   \   0000DE   7400         MOV       A,#0x0
   \   0000E0   F0           MOVX      @DPTR,A
   \   0000E1   A3           INC       DPTR
   \   0000E2   7400         MOV       A,#0x0
   \   0000E4   F0           MOVX      @DPTR,A
   2436                pApsLinkKey->txFrmCntr = 0;
   \   0000E5   E5..         MOV       A,?V8
   \   0000E7   2410         ADD       A,#0x10
   \   0000E9   F582         MOV       DPL,A
   \   0000EB   E4           CLR       A
   \   0000EC   35..         ADDC      A,?V9
   \   0000EE   F583         MOV       DPH,A
   \   0000F0   7400         MOV       A,#0x0
   \   0000F2   F0           MOVX      @DPTR,A
   \   0000F3   A3           INC       DPTR
   \   0000F4   7400         MOV       A,#0x0
   \   0000F6   F0           MOVX      @DPTR,A
   \   0000F7   A3           INC       DPTR
   \   0000F8   7400         MOV       A,#0x0
   \   0000FA   F0           MOVX      @DPTR,A
   \   0000FB   A3           INC       DPTR
   \   0000FC   7400         MOV       A,#0x0
   \   0000FE   F0           MOVX      @DPTR,A
   2437          
   2438                osal_nv_write( entry->keyNvId, 0,
   2439                              sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   \   0000FF                ; Setup parameters for call to function osal_nv_write
   \   0000FF   78..         MOV       R0,#?V8
   \   000101   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000104   75..18       MOV       ?V4,#0x18
   \   000107   75..00       MOV       ?V5,#0x0
   \   00010A   78..         MOV       R0,#?V4
   \   00010C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010F   7C00         MOV       R4,#0x0
   \   000111   7D00         MOV       R5,#0x0
   \   000113   7404         MOV       A,#0x4
   \   000115   12....       LCALL     ?XSTACK_DISP0_8
   \   000118   E0           MOVX      A,@DPTR
   \   000119   F8           MOV       R0,A
   \   00011A   A3           INC       DPTR
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   F583         MOV       DPH,A
   \   00011E   8882         MOV       DPL,R0
   \   000120   A3           INC       DPTR
   \   000121   A3           INC       DPTR
   \   000122   E0           MOVX      A,@DPTR
   \   000123   FA           MOV       R2,A
   \   000124   A3           INC       DPTR
   \   000125   E0           MOVX      A,@DPTR
   \   000126   FB           MOV       R3,A
   \   000127   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00012A   7404         MOV       A,#0x4
   \   00012C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00012F   E9           MOV       A,R1
   2440          
   2441                // clear copy of key in RAM
   2442                osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   \   000130                ; Setup parameters for call to function osal_memset
   \   000130   7C18         MOV       R4,#0x18
   \   000132   7D00         MOV       R5,#0x0
   \   000134   7900         MOV       R1,#0x0
   \   000136   AA..         MOV       R2,?V8
   \   000138   AB..         MOV       R3,?V9
   \   00013A   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2443          
   2444                osal_mem_free(pApsLinkKey);
   \   00013D                ; Setup parameters for call to function osal_mem_free
   \   00013D   AA..         MOV       R2,?V8
   \   00013F   AB..         MOV       R3,?V9
   \   000141   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2445          
   2446                // set initial values for counters in RAM
   2447                ApsLinkKeyFrmCntr[entry->keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr = 0;
   \   000144   85..82       MOV       DPL,?XSP + 0
   \   000147   85..83       MOV       DPH,?XSP + 1
   \   00014A   E0           MOVX      A,@DPTR
   \   00014B   F8           MOV       R0,A
   \   00014C   A3           INC       DPTR
   \   00014D   E0           MOVX      A,@DPTR
   \   00014E   F583         MOV       DPH,A
   \   000150   8882         MOV       DPL,R0
   \   000152   A3           INC       DPTR
   \   000153   A3           INC       DPTR
   \   000154   E0           MOVX      A,@DPTR
   \   000155   F8           MOV       R0,A
   \   000156   A3           INC       DPTR
   \   000157   E0           MOVX      A,@DPTR
   \   000158   F9           MOV       R1,A
   \   000159   E8           MOV       A,R0
   \   00015A   75F009       MOV       B,#0x9
   \   00015D   A4           MUL       AB
   \   00015E   C8           XCH       A,R0
   \   00015F   AAF0         MOV       R2,B
   \   000161   75F000       MOV       B,#0x0
   \   000164   A4           MUL       AB
   \   000165   2A           ADD       A,R2
   \   000166   FA           MOV       R2,A
   \   000167   75F009       MOV       B,#0x9
   \   00016A   E9           MOV       A,R1
   \   00016B   A4           MUL       AB
   \   00016C   2A           ADD       A,R2
   \   00016D   F9           MOV       R1,A
   \   00016E   74..         MOV       A,#(ApsLinkKeyFrmCntr + 247) & 0xff
   \   000170   28           ADD       A,R0
   \   000171   F582         MOV       DPL,A
   \   000173   74..         MOV       A,#((ApsLinkKeyFrmCntr - 4617) >> 8) & 0xff
   \   000175   39           ADDC      A,R1
   \   000176   F583         MOV       DPH,A
   \   000178   7400         MOV       A,#0x0
   \   00017A   F0           MOVX      @DPTR,A
   \   00017B   A3           INC       DPTR
   \   00017C   7400         MOV       A,#0x0
   \   00017E   F0           MOVX      @DPTR,A
   \   00017F   A3           INC       DPTR
   \   000180   7400         MOV       A,#0x0
   \   000182   F0           MOVX      @DPTR,A
   \   000183   A3           INC       DPTR
   \   000184   7400         MOV       A,#0x0
   \   000186   F0           MOVX      @DPTR,A
   2448                ApsLinkKeyFrmCntr[entry->keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr = 0;
   \   000187   85..82       MOV       DPL,?XSP + 0
   \   00018A   85..83       MOV       DPH,?XSP + 1
   \   00018D   E0           MOVX      A,@DPTR
   \   00018E   F8           MOV       R0,A
   \   00018F   A3           INC       DPTR
   \   000190   E0           MOVX      A,@DPTR
   \   000191   F583         MOV       DPH,A
   \   000193   8882         MOV       DPL,R0
   \   000195   A3           INC       DPTR
   \   000196   A3           INC       DPTR
   \   000197   E0           MOVX      A,@DPTR
   \   000198   F8           MOV       R0,A
   \   000199   A3           INC       DPTR
   \   00019A   E0           MOVX      A,@DPTR
   \   00019B   F9           MOV       R1,A
   \   00019C   E8           MOV       A,R0
   \   00019D   75F009       MOV       B,#0x9
   \   0001A0   A4           MUL       AB
   \   0001A1   C8           XCH       A,R0
   \   0001A2   AAF0         MOV       R2,B
   \   0001A4   75F000       MOV       B,#0x0
   \   0001A7   A4           MUL       AB
   \   0001A8   2A           ADD       A,R2
   \   0001A9   FA           MOV       R2,A
   \   0001AA   75F009       MOV       B,#0x9
   \   0001AD   E9           MOV       A,R1
   \   0001AE   A4           MUL       AB
   \   0001AF   2A           ADD       A,R2
   \   0001B0   F9           MOV       R1,A
   \   0001B1   74..         MOV       A,#(ApsLinkKeyFrmCntr + 251) & 0xff
   \   0001B3   28           ADD       A,R0
   \   0001B4   F582         MOV       DPL,A
   \   0001B6   74..         MOV       A,#((ApsLinkKeyFrmCntr - 4613) >> 8) & 0xff
   \   0001B8   39           ADDC      A,R1
   \   0001B9   F583         MOV       DPH,A
   \   0001BB   7400         MOV       A,#0x0
   \   0001BD   F0           MOVX      @DPTR,A
   \   0001BE   A3           INC       DPTR
   \   0001BF   7400         MOV       A,#0x0
   \   0001C1   F0           MOVX      @DPTR,A
   \   0001C2   A3           INC       DPTR
   \   0001C3   7400         MOV       A,#0x0
   \   0001C5   F0           MOVX      @DPTR,A
   \   0001C6   A3           INC       DPTR
   \   0001C7   7400         MOV       A,#0x0
   \   0001C9   F0           MOVX      @DPTR,A
   2449              }
   2450            }
   2451          
   2452            return status;
   \                     ??APSME_LinkKeySet_0:
   \   0001CA   A9..         MOV       R1,?V0
   \   0001CC   7404         MOV       A,#0x4
   \   0001CE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001D1   7F0A         MOV       R7,#0xa
   \   0001D3   02....       LJMP      ?BANKED_LEAVE_XDATA
   2453          }
   2454          
   2455          /******************************************************************************
   2456           * @fn          ZDSecMgrAuthenticationSet
   2457           *
   2458           * @brief       Mark the specific device as authenticated or not
   2459           *
   2460           * @param       extAddr - [in] EXT address
   2461           * @param       option  - [in] authenticated or not
   2462           *
   2463           * @return      ZStatus_t
   2464           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2465          ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option )
   \                     ZDSecMgrAuthenticationSet:
   2466          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   89..         MOV       ?V1,R1
   2467            ZStatus_t        status;
   2468            ZDSecMgrEntry_t* entry;
   2469          
   2470          
   2471            // lookup entry index for specified EXT address
   2472            status = ZDSecMgrEntryLookupExt( extAddr, &entry );
   \   000010                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   000010   AC..         MOV       R4,?XSP + 0
   \   000012   AD..         MOV       R5,?XSP + 1
   \   000014   EE           MOV       A,R6
   \   000015   FA           MOV       R2,A
   \   000016   EF           MOV       A,R7
   \   000017   FB           MOV       R3,A
   \   000018   12....       LCALL     `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   00001B   E9           MOV       A,R1
   \   00001C   F5..         MOV       ?V0,A
   2473          
   2474            if ( status == ZSuccess )
   \   00001E   E5..         MOV       A,?V0
   \   000020   7019         JNZ       ??ZDSecMgrAuthenticationSet_0
   2475            {
   2476              entry->authenticateOption = option;
   \   000022   E5..         MOV       A,?V1
   \   000024   C0E0         PUSH      A
   \   000026   85..82       MOV       DPL,?XSP + 0
   \   000029   85..83       MOV       DPH,?XSP + 1
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F8           MOV       R0,A
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F583         MOV       DPH,A
   \   000032   8882         MOV       DPL,R0
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   D0E0         POP       A
   \   00003A   F0           MOVX      @DPTR,A
   2477            }
   2478          
   2479            return status;
   \                     ??ZDSecMgrAuthenticationSet_0:
   \   00003B   A9..         MOV       R1,?V0
   \   00003D   7402         MOV       A,#0x2
   \   00003F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000042   7F02         MOV       R7,#0x2
   \   000044   02....       LJMP      ?BANKED_LEAVE_XDATA
   2480          }
   2481          
   2482          /******************************************************************************
   2483           * @fn          ZDSecMgrAuthenticationCheck
   2484           *
   2485           * @brief       Check if the specific device has been authenticated or not
   2486           *              For non-trust center device, always return TRUE
   2487           *
   2488           * @param       shortAddr - [in] short address
   2489           *
   2490           * @return      TRUE @ authenticated with CBKE
   2491           *              FALSE @ not authenticated
   2492           */
   2493          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2494          uint8 ZDSecMgrAuthenticationCheck( uint16 shortAddr )
   \                     ZDSecMgrAuthenticationCheck:
   2495          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2496          #if defined (TC_LINKKEY_JOIN)
   2497          
   2498            ZDSecMgrEntry_t* entry;
   2499            uint8 extAddr[Z_EXTADDR_LEN];
   2500          
   2501            // If the local device is not the trust center, always return TRUE
   2502            APSME_GetRequest( apsTrustCenterAddress, 0, extAddr );
   \   00000E                ; Setup parameters for call to function APSME_GetRequest
   \   00000E   7404         MOV       A,#0x4
   \   000010   12....       LCALL     ?XSTACK_DISP102_8
   \   000013   7A00         MOV       R2,#0x0
   \   000015   7B00         MOV       R3,#0x0
   \   000017   79AB         MOV       R1,#-0x55
   \   000019   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   \   00001C   E9           MOV       A,R1
   2503            if ( ! osal_ExtAddrEqual( extAddr , NLME_GetExtAddr() ) )
   \   00001D                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001D   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000020   8A..         MOV       ?V0,R2
   \   000022   8B..         MOV       ?V1,R3
   \   000024   AC..         MOV       R4,?V0
   \   000026   AD..         MOV       R5,?V1
   \   000028                ; Setup parameters for call to function sAddrExtCmp
   \   000028   7404         MOV       A,#0x4
   \   00002A   12....       LCALL     ?XSTACK_DISP101_8
   \   00002D   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000030   E9           MOV       A,R1
   \   000031   7004         JNZ       ??ZDSecMgrAuthenticationCheck_0
   2504            {
   2505              return TRUE;
   \   000033   7901         MOV       R1,#0x1
   \   000035   8051         SJMP      ??ZDSecMgrAuthenticationCheck_1
   2506            }
   2507            // Otherwise, check the authentication option
   2508            else if ( AddrMgrExtAddrLookup( shortAddr, extAddr ) )
   \                     ??ZDSecMgrAuthenticationCheck_0:
   \   000037                ; Setup parameters for call to function AddrMgrExtAddrLookup
   \   000037   7404         MOV       A,#0x4
   \   000039   12....       LCALL     ?XSTACK_DISP102_8
   \   00003C   EE           MOV       A,R6
   \   00003D   FA           MOV       R2,A
   \   00003E   EF           MOV       A,R7
   \   00003F   FB           MOV       R3,A
   \   000040   12....       LCALL     `??AddrMgrExtAddrLookup::?relay`; Banked call to: AddrMgrExtAddrLookup
   \   000043   E9           MOV       A,R1
   \   000044   6040         JZ        ??ZDSecMgrAuthenticationCheck_2
   2509            {
   2510              // lookup entry index for specified EXT address
   2511              if ( ZDSecMgrEntryLookupExt( extAddr, &entry ) == ZSuccess )
   \   000046                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   000046   AC..         MOV       R4,?XSP + 0
   \   000048   AD..         MOV       R5,?XSP + 1
   \   00004A   7404         MOV       A,#0x4
   \   00004C   12....       LCALL     ?XSTACK_DISP101_8
   \   00004F   12....       LCALL     `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   000052   E9           MOV       A,R1
   \   000053   701D         JNZ       ??ZDSecMgrAuthenticationCheck_3
   2512              {
   2513                if ( entry->authenticateOption != ZDSecMgr_Not_Authenticated )
   \   000055   85..82       MOV       DPL,?XSP + 0
   \   000058   85..83       MOV       DPH,?XSP + 1
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F8           MOV       R0,A
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F583         MOV       DPH,A
   \   000061   8882         MOV       DPL,R0
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   E0           MOVX      A,@DPTR
   \   000068   6004         JZ        ??ZDSecMgrAuthenticationCheck_4
   2514                {
   2515                  return TRUE;
   \   00006A   7901         MOV       R1,#0x1
   \   00006C   801A         SJMP      ??ZDSecMgrAuthenticationCheck_1
   2516                }
   2517                else
   2518                {
   2519                  return FALSE;
   \                     ??ZDSecMgrAuthenticationCheck_4:
   \   00006E   7900         MOV       R1,#0x0
   \   000070   8016         SJMP      ??ZDSecMgrAuthenticationCheck_1
   2520                }
   2521              }
   2522              else
   2523              {
   2524                // it may have been secured with TCLK only
   2525                uint16    ami;
   2526          
   2527                // lookup address index in address manager
   2528                if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
   \                     ??ZDSecMgrAuthenticationCheck_3:
   \   000072                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   000072   7402         MOV       A,#0x2
   \   000074   12....       LCALL     ?XSTACK_DISP102_8
   \   000077   7404         MOV       A,#0x4
   \   000079   12....       LCALL     ?XSTACK_DISP101_8
   \   00007C   12....       LCALL     `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   00007F   E9           MOV       A,R1
   \   000080   7004         JNZ       ??ZDSecMgrAuthenticationCheck_2
   2529                {
   2530                  return TRUE;
   \   000082   7901         MOV       R1,#0x1
   \   000084   8002         SJMP      ??ZDSecMgrAuthenticationCheck_1
   2531                }
   2532              }
   2533            }
   2534            return FALSE;
   \                     ??ZDSecMgrAuthenticationCheck_2:
   \   000086   7900         MOV       R1,#0x0
   \                     ??ZDSecMgrAuthenticationCheck_1:
   \   000088   740C         MOV       A,#0xc
   \   00008A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008D   7F02         MOV       R7,#0x2
   \   00008F   02....       LJMP      ?BANKED_LEAVE_XDATA
   2535          
   2536          #else
   2537            (void)shortAddr;  // Intentionally unreferenced parameter
   2538          
   2539            // For non AMI/SE Profile, perform no check and always return TRUE.
   2540            return TRUE;
   2541          
   2542          #endif // TC_LINKKEY_JOIN
   2543          }
   2544          
   2545          
   2546          /******************************************************************************
   2547           * @fn          ZDSecMgrLinkKeyNVIdGet (stubs APSME_LinkKeyNVIdGet)
   2548           *
   2549           * @brief       Get Key NV ID for specified NWK address.
   2550           *
   2551           * @param       extAddr - [in] EXT address
   2552           * @param       keyNvId - [out] NV ID
   2553           *
   2554           * @return      ZStatus_t
   2555           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2556          ZStatus_t ZDSecMgrLinkKeyNVIdGet(uint8* extAddr, uint16 *pKeyNvId)
   \                     APSME_LinkKeyNVIdGet:
   2557          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
   2558            ZStatus_t status;
   2559            ZDSecMgrEntry_t* entry;
   2560          
   2561            // lookup entry index for specified NWK address
   2562            status = ZDSecMgrEntryLookupExt( extAddr, &entry );
   \   000012                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   000012   AC..         MOV       R4,?XSP + 0
   \   000014   AD..         MOV       R5,?XSP + 1
   \   000016   EE           MOV       A,R6
   \   000017   FA           MOV       R2,A
   \   000018   EF           MOV       A,R7
   \   000019   FB           MOV       R3,A
   \   00001A   12....       LCALL     `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   00001D   E9           MOV       A,R1
   \   00001E   F5..         MOV       ?V2,A
   2563          
   2564            if ( status == ZSuccess )
   \   000020   E5..         MOV       A,?V2
   \   000022   7022         JNZ       ??APSME_LinkKeyNVIdGet_0
   2565            {
   2566              // return the index to the NV table
   2567              *pKeyNvId = entry->keyNvId;
   \   000024   85..82       MOV       DPL,?XSP + 0
   \   000027   85..83       MOV       DPH,?XSP + 1
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   F8           MOV       R0,A
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F583         MOV       DPH,A
   \   000030   8882         MOV       DPL,R0
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F8           MOV       R0,A
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F9           MOV       R1,A
   \   000039   85..82       MOV       DPL,?V0
   \   00003C   85..83       MOV       DPH,?V1
   \   00003F   E8           MOV       A,R0
   \   000040   F0           MOVX      @DPTR,A
   \   000041   A3           INC       DPTR
   \   000042   E9           MOV       A,R1
   \   000043   F0           MOVX      @DPTR,A
   \   000044   800D         SJMP      ??APSME_LinkKeyNVIdGet_1
   2568            }
   2569            else
   2570            {
   2571              *pKeyNvId = SEC_NO_KEY_NV_ID;
   \                     ??APSME_LinkKeyNVIdGet_0:
   \   000046   85..82       MOV       DPL,?V0
   \   000049   85..83       MOV       DPH,?V1
   \   00004C   7400         MOV       A,#0x0
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   A3           INC       DPTR
   \   000050   7400         MOV       A,#0x0
   \   000052   F0           MOVX      @DPTR,A
   2572            }
   2573          
   2574            return status;
   \                     ??APSME_LinkKeyNVIdGet_1:
   \   000053   A9..         MOV       R1,?V2
   \   000055   7402         MOV       A,#0x2
   \   000057   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005A   7F03         MOV       R7,#0x3
   \   00005C   02....       LJMP      ?BANKED_LEAVE_XDATA
   2575          }
   2576          
   2577          /******************************************************************************
   2578           * @fn          ZDSecMgrIsLinkKeyValid (stubs APSME_IsLinkKeyValid)
   2579           *
   2580           * @brief       Verifies if Link Key in NV has been set.
   2581           *
   2582           * @param       extAddr - [in] EXT address
   2583           *
   2584           * @return      TRUE - Link Key has been established
   2585           *              FALSE - Link Key in NV has default value.
   2586           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2587          uint8 ZDSecMgrIsLinkKeyValid(uint8* extAddr)
   \                     APSME_IsLinkKeyValid:
   2588          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV       A,#-0x12
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2589            APSME_LinkKeyData_t *pKeyData;
   2590            uint16 apsLinkKeyNvId;
   2591            uint8 nullKey[SEC_KEY_LEN];
   2592            uint8 status = FALSE;
   \   00000E   75..00       MOV       ?V0,#0x0
   2593          
   2594            // initialize default vealue to compare to
   2595            osal_memset(nullKey, 0x00, SEC_KEY_LEN);
   \   000011                ; Setup parameters for call to function osal_memset
   \   000011   7C10         MOV       R4,#0x10
   \   000013   7D00         MOV       R5,#0x0
   \   000015   7900         MOV       R1,#0x0
   \   000017   7402         MOV       A,#0x2
   \   000019   12....       LCALL     ?XSTACK_DISP101_8
   \   00001C   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2596          
   2597            // check for APS link NV ID
   2598            APSME_LinkKeyNVIdGet( extAddr, &apsLinkKeyNvId );
   \   00001F                ; Setup parameters for call to function APSME_LinkKeyNVIdGet
   \   00001F   AC..         MOV       R4,?XSP + 0
   \   000021   AD..         MOV       R5,?XSP + 1
   \   000023   EE           MOV       A,R6
   \   000024   FA           MOV       R2,A
   \   000025   EF           MOV       A,R7
   \   000026   FB           MOV       R3,A
   \   000027   12....       LCALL     `??APSME_LinkKeyNVIdGet::?relay`; Banked call to: APSME_LinkKeyNVIdGet
   \   00002A   E9           MOV       A,R1
   2599          
   2600            if (apsLinkKeyNvId != SEC_NO_KEY_NV_ID )
   \   00002B   85..82       MOV       DPL,?XSP + 0
   \   00002E   85..83       MOV       DPH,?XSP + 1
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F8           MOV       R0,A
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F9           MOV       R1,A
   \   000036   E8           MOV       A,R0
   \   000037   49           ORL       A,R1
   \   000038   7003         JNZ       $+5
   \   00003A   02....       LJMP      ??APSME_IsLinkKeyValid_0 & 0xFFFF
   2601            {
   2602              pKeyData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   00003D                ; Setup parameters for call to function osal_mem_alloc
   \   00003D   7A18         MOV       R2,#0x18
   \   00003F   7B00         MOV       R3,#0x0
   \   000041   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000044   8A..         MOV       ?V4,R2
   \   000046   8B..         MOV       ?V5,R3
   \   000048   85....       MOV       ?V2,?V4
   \   00004B   85....       MOV       ?V3,?V5
   2603          
   2604              if (pKeyData != NULL)
   \   00004E   E5..         MOV       A,?V2
   \   000050   45..         ORL       A,?V3
   \   000052   606C         JZ        ??APSME_IsLinkKeyValid_0
   2605              {
   2606                // retrieve key from NV
   2607                if ( osal_nv_read( apsLinkKeyNvId, 0,
   2608                                  sizeof(APSME_LinkKeyData_t), pKeyData) == ZSUCCESS)
   \   000054                ; Setup parameters for call to function osal_nv_read
   \   000054   78..         MOV       R0,#?V2
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000059   75..18       MOV       ?V4,#0x18
   \   00005C   75..00       MOV       ?V5,#0x0
   \   00005F   78..         MOV       R0,#?V4
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000064   7C00         MOV       R4,#0x0
   \   000066   7D00         MOV       R5,#0x0
   \   000068   7404         MOV       A,#0x4
   \   00006A   12....       LCALL     ?XSTACK_DISP0_8
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   FA           MOV       R2,A
   \   00006F   A3           INC       DPTR
   \   000070   E0           MOVX      A,@DPTR
   \   000071   FB           MOV       R3,A
   \   000072   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000075   7404         MOV       A,#0x4
   \   000077   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007A   E9           MOV       A,R1
   \   00007B   702F         JNZ       ??APSME_IsLinkKeyValid_1
   2609                {
   2610                  // if stored key is different than default value, then a key has been established
   2611                  if (!osal_memcmp(pKeyData, nullKey, SEC_KEY_LEN))
   \   00007D                ; Setup parameters for call to function osal_memcmp
   \   00007D   7402         MOV       A,#0x2
   \   00007F   12....       LCALL     ?XSTACK_DISP100_8
   \   000082   88..         MOV       ?V4,R0
   \   000084   89..         MOV       ?V5,R1
   \   000086   75..00       MOV       ?V6,#0x0
   \   000089   78..         MOV       R0,#?V4
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00008E   7C10         MOV       R4,#0x10
   \   000090   7D00         MOV       R5,#0x0
   \   000092   85..82       MOV       DPL,?V2
   \   000095   85..83       MOV       DPH,?V3
   \   000098   A982         MOV       R1,DPL
   \   00009A   AA83         MOV       R2,DPH
   \   00009C   7B00         MOV       R3,#0x0
   \   00009E   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000A1   7403         MOV       A,#0x3
   \   0000A3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A6   E9           MOV       A,R1
   \   0000A7   7003         JNZ       ??APSME_IsLinkKeyValid_1
   2612                  {
   2613                    status = TRUE;
   \   0000A9   75..01       MOV       ?V0,#0x1
   2614                  }
   2615                }
   2616          
   2617                // clear copy of key in RAM
   2618                osal_memset(pKeyData, 0x00, sizeof(APSME_LinkKeyData_t));
   \                     ??APSME_IsLinkKeyValid_1:
   \   0000AC                ; Setup parameters for call to function osal_memset
   \   0000AC   7C18         MOV       R4,#0x18
   \   0000AE   7D00         MOV       R5,#0x0
   \   0000B0   7900         MOV       R1,#0x0
   \   0000B2   AA..         MOV       R2,?V2
   \   0000B4   AB..         MOV       R3,?V3
   \   0000B6   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2619          
   2620                osal_mem_free(pKeyData);
   \   0000B9                ; Setup parameters for call to function osal_mem_free
   \   0000B9   AA..         MOV       R2,?V2
   \   0000BB   AB..         MOV       R3,?V3
   \   0000BD   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2621              }
   2622            }
   2623          
   2624            return status;
   \                     ??APSME_IsLinkKeyValid_0:
   \   0000C0   A9..         MOV       R1,?V0
   \   0000C2   7412         MOV       A,#0x12
   \   0000C4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C7   7F07         MOV       R7,#0x7
   \   0000C9   02....       LJMP      ?BANKED_LEAVE_XDATA
   2625          }
   2626          
   2627          /******************************************************************************
   2628           * @fn          ZDSecMgrKeyFwdToChild (stubs APSME_KeyFwdToChild)
   2629           *
   2630           * @brief       Verify and process key transportation to child.
   2631           *
   2632           * @param       ind - [in] APSME_TransportKeyInd_t
   2633           *
   2634           * @return      uint8 - success(TRUE:FALSE)
   2635           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2636          uint8 ZDSecMgrKeyFwdToChild( APSME_TransportKeyInd_t* ind )
   \                     APSME_KeyFwdToChild:
   2637          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2638            // verify from Trust Center
   2639            if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F8           MOV       R0,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F9           MOV       R1,A
   \   000012   E8           MOV       A,R0
   \   000013   49           ORL       A,R1
   \   000014   702F         JNZ       ??APSME_KeyFwdToChild_0
   2640            {
   2641              // check for initial NWK key
   2642              if ( ( ind->keyType == KEY_TYPE_NWK ) ||
   2643                   ( ind->keyType == 6            ) )
   \   000016   8E82         MOV       DPL,R6
   \   000018   8F83         MOV       DPH,R7
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   6401         XRL       A,#0x1
   \   00001F   600B         JZ        ??APSME_KeyFwdToChild_1
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   6406         XRL       A,#0x6
   \   00002A   7015         JNZ       ??APSME_KeyFwdToChild_2
   2644              {
   2645                // set association status to authenticated
   2646                ZDSecMgrAssocDeviceAuth( AssocGetWithExt( ind->dstExtAddr ) );
   \                     ??APSME_KeyFwdToChild_1:
   \   00002C                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   00002C                ; Setup parameters for call to function AssocGetWithExt
   \   00002C   8E82         MOV       DPL,R6
   \   00002E   8F83         MOV       DPH,R7
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   FA           MOV       R2,A
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   FB           MOV       R3,A
   \   00003B   12....       LCALL     `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   00003E   12....       LCALL     `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   2647              }
   2648          
   2649              return TRUE;
   \                     ??APSME_KeyFwdToChild_2:
   \   000041   7901         MOV       R1,#0x1
   \   000043   8002         SJMP      ??APSME_KeyFwdToChild_3
   2650            }
   2651          
   2652            return FALSE;
   \                     ??APSME_KeyFwdToChild_0:
   \   000045   7900         MOV       R1,#0x0
   \                     ??APSME_KeyFwdToChild_3:
   \   000047   7F01         MOV       R7,#0x1
   \   000049   02....       LJMP      ?BANKED_LEAVE_XDATA
   2653          }
   2654          
   2655          /******************************************************************************
   2656           * @fn          ZDSecMgrAddLinkKey
   2657           *
   2658           * @brief       Add the application link key to ZDSecMgr. Also mark the device
   2659           *              as authenticated in the authenticateOption. Note that this function
   2660           *              is hardwared to CBKE right now.
   2661           *
   2662           * @param       shortAddr - short address of the partner device
   2663           * @param       extAddr - extended address of the partner device
   2664           * @param       key - link key
   2665           *
   2666           * @return      ZStatus_t
   2667           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2668          ZStatus_t ZDSecMgrAddLinkKey( uint16 shortAddr, uint8 *extAddr, uint8 *key)
   \                     ZDSecMgrAddLinkKey:
   2669          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   \   000012   7412         MOV       A,#0x12
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V0,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V1,A
   2670            uint16           ami;
   2671            ZDSecMgrEntry_t* entry;
   2672          
   2673            /* Store the device address in the addr manager */
   2674            if( ZDSecMgrAddrStore( shortAddr, extAddr, &ami ) != ZSuccess )
   \   00001E                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   00001E   7402         MOV       A,#0x2
   \   000020   12....       LCALL     ?XSTACK_DISP100_8
   \   000023   88..         MOV       ?V4,R0
   \   000025   89..         MOV       ?V5,R1
   \   000027   78..         MOV       R0,#?V4
   \   000029   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002C   EE           MOV       A,R6
   \   00002D   FC           MOV       R4,A
   \   00002E   EF           MOV       A,R7
   \   00002F   FD           MOV       R5,A
   \   000030   AA..         MOV       R2,?V2
   \   000032   AB..         MOV       R3,?V3
   \   000034   12....       LCALL     `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
   \   000037   7402         MOV       A,#0x2
   \   000039   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003C   E9           MOV       A,R1
   \   00003D   6004         JZ        ??ZDSecMgrAddLinkKey_0
   2675            {
   2676              /* Adding to Addr Manager fails */
   2677              return ZFailure;
   \   00003F   7901         MOV       R1,#0x1
   \   000041   8069         SJMP      ??ZDSecMgrAddLinkKey_1
   2678            }
   2679          
   2680            /* Lookup entry using specified address index */
   2681            ZDSecMgrEntryLookupAMI( ami, &entry );
   \                     ??ZDSecMgrAddLinkKey_0:
   \   000043                ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
   \   000043   AC..         MOV       R4,?XSP + 0
   \   000045   AD..         MOV       R5,?XSP + 1
   \   000047   7402         MOV       A,#0x2
   \   000049   12....       LCALL     ?XSTACK_DISP0_8
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   FA           MOV       R2,A
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   FB           MOV       R3,A
   \   000051   12....       LCALL     `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
   \   000054   E9           MOV       A,R1
   2682          
   2683            // If no existing entry, create one
   2684            if ( entry == NULL )
   \   000055   85..82       MOV       DPL,?XSP + 0
   \   000058   85..83       MOV       DPH,?XSP + 1
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F8           MOV       R0,A
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F9           MOV       R1,A
   \   000060   E8           MOV       A,R0
   \   000061   49           ORL       A,R1
   \   000062   702D         JNZ       ??ZDSecMgrAddLinkKey_2
   2685            {
   2686              if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
   \   000064                ; Setup parameters for call to function ZDSecMgrEntryNew
   \   000064   AA..         MOV       R2,?XSP + 0
   \   000066   AB..         MOV       R3,?XSP + 1
   \   000068   12....       LCALL     `??ZDSecMgrEntryNew::?relay`; Banked call to: ZDSecMgrEntryNew
   \   00006B   E9           MOV       A,R1
   \   00006C   701F         JNZ       ??ZDSecMgrAddLinkKey_3
   2687              {
   2688                entry->ami = ami;
   \   00006E   7402         MOV       A,#0x2
   \   000070   12....       LCALL     ?XSTACK_DISP0_8
   \   000073   E0           MOVX      A,@DPTR
   \   000074   FA           MOV       R2,A
   \   000075   A3           INC       DPTR
   \   000076   E0           MOVX      A,@DPTR
   \   000077   FB           MOV       R3,A
   \   000078   85..82       MOV       DPL,?XSP + 0
   \   00007B   85..83       MOV       DPH,?XSP + 1
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   F8           MOV       R0,A
   \   000080   A3           INC       DPTR
   \   000081   E0           MOVX      A,@DPTR
   \   000082   F583         MOV       DPH,A
   \   000084   8882         MOV       DPL,R0
   \   000086   EA           MOV       A,R2
   \   000087   F0           MOVX      @DPTR,A
   \   000088   A3           INC       DPTR
   \   000089   EB           MOV       A,R3
   \   00008A   F0           MOVX      @DPTR,A
   \   00008B   8004         SJMP      ??ZDSecMgrAddLinkKey_2
   2689              }
   2690              else
   2691              {
   2692                /* Security Manager full */
   2693                return ZBufferFull;
   \                     ??ZDSecMgrAddLinkKey_3:
   \   00008D   7911         MOV       R1,#0x11
   \   00008F   801B         SJMP      ??ZDSecMgrAddLinkKey_1
   2694              }
   2695            }
   2696            // Write the link key
   2697            APSME_LinkKeySet( extAddr, key );
   \                     ??ZDSecMgrAddLinkKey_2:
   \   000091                ; Setup parameters for call to function APSME_LinkKeySet
   \   000091   AC..         MOV       R4,?V0
   \   000093   AD..         MOV       R5,?V1
   \   000095   EE           MOV       A,R6
   \   000096   FA           MOV       R2,A
   \   000097   EF           MOV       A,R7
   \   000098   FB           MOV       R3,A
   \   000099   12....       LCALL     `??APSME_LinkKeySet::?relay`; Banked call to: APSME_LinkKeySet
   \   00009C   E9           MOV       A,R1
   2698          
   2699          #if defined (TC_LINKKEY_JOIN)
   2700            // Mark the device as authenticated.
   2701            ZDSecMgrAuthenticationSet( extAddr, ZDSecMgr_Authenticated_CBCK );
   \   00009D                ; Setup parameters for call to function ZDSecMgrAuthenticationSet
   \   00009D   7901         MOV       R1,#0x1
   \   00009F   EE           MOV       A,R6
   \   0000A0   FA           MOV       R2,A
   \   0000A1   EF           MOV       A,R7
   \   0000A2   FB           MOV       R3,A
   \   0000A3   12....       LCALL     `??ZDSecMgrAuthenticationSet::?relay`; Banked call to: ZDSecMgrAuthenticationSet
   \   0000A6   E9           MOV       A,R1
   2702          #endif
   2703          
   2704          #if defined NV_RESTORE
   2705            ZDSecMgrWriteNV();  // Write the new established link key to NV.
   \   0000A7                ; Setup parameters for call to function ZDSecMgrWriteNV
   \   0000A7   12....       LCALL     `??ZDSecMgrWriteNV::?relay`; Banked call to: ZDSecMgrWriteNV
   2706          #endif
   2707          
   2708            return ZSuccess;
   \   0000AA   7900         MOV       R1,#0x0
   \                     ??ZDSecMgrAddLinkKey_1:
   \   0000AC   7404         MOV       A,#0x4
   \   0000AE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B1   7F06         MOV       R7,#0x6
   \   0000B3   02....       LJMP      ?BANKED_LEAVE_XDATA
   2709          }
   2710          
   2711          /******************************************************************************
   2712           * @fn          ZDSecMgrInitNV
   2713           *
   2714           * @brief       Initialize the SecMgr entry data in NV with all values set to 0
   2715           *
   2716           * @param       none
   2717           *
   2718           * @return      uint8 - <osal_nv_item_init> return codes
   2719           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2720          uint8 ZDSecMgrInitNV(void)
   \                     ZDSecMgrInitNV:
   2721          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2722          
   2723            uint8 rtrn = osal_nv_item_init(ZCD_NV_APS_LINK_KEY_TABLE,
   2724                          (sizeof(nvDeviceListHdr_t) + (sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)), NULL);
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   E4           CLR       A
   \   00000B   F5..         MOV       ?V0,A
   \   00000D   F5..         MOV       ?V1,A
   \   00000F   78..         MOV       R0,#?V0
   \   000011   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000014   7C11         MOV       R4,#0x11
   \   000016   7D00         MOV       R5,#0x0
   \   000018   7A4C         MOV       R2,#0x4c
   \   00001A   7B00         MOV       R3,#0x0
   \   00001C   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?DEALLOC_XSTACK8
   \   000024   E9           MOV       A,R1
   \   000025   FE           MOV       R6,A
   2725          
   2726            // If the item does not already exist, set all values to 0
   2727            if (rtrn == NV_ITEM_UNINIT)
   \   000026   7409         MOV       A,#0x9
   \   000028   6E           XRL       A,R6
   \   000029   7036         JNZ       ??ZDSecMgrInitNV_0
   2728            {
   2729              nvDeviceListHdr_t hdr;
   2730              hdr.numRecs = 0;
   \   00002B   85..82       MOV       DPL,?XSP + 0
   \   00002E   85..83       MOV       DPH,?XSP + 1
   \   000031   7400         MOV       A,#0x0
   \   000033   F0           MOVX      @DPTR,A
   \   000034   A3           INC       DPTR
   \   000035   7400         MOV       A,#0x0
   \   000037   F0           MOVX      @DPTR,A
   2731              osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
   \   000038                ; Setup parameters for call to function osal_nv_write
   \   000038   A8..         MOV       R0,?XSP + 0
   \   00003A   A9..         MOV       R1,?XSP + 1
   \   00003C   88..         MOV       ?V0,R0
   \   00003E   89..         MOV       ?V1,R1
   \   000040   78..         MOV       R0,#?V0
   \   000042   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000045   75..02       MOV       ?V0,#0x2
   \   000048   75..00       MOV       ?V1,#0x0
   \   00004B   78..         MOV       R0,#?V0
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000050   7C00         MOV       R4,#0x0
   \   000052   7D00         MOV       R5,#0x0
   \   000054   7A4C         MOV       R2,#0x4c
   \   000056   7B00         MOV       R3,#0x0
   \   000058   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00005B   7404         MOV       A,#0x4
   \   00005D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000060   E9           MOV       A,R1
   2732            }
   2733          
   2734            rtrn |= osal_nv_item_init( ZCD_NV_TRUSTCENTER_ADDR, Z_EXTADDR_LEN,
   2735                                       zgApsTrustCenterAddr );
   \                     ??ZDSecMgrInitNV_0:
   \   000061                ; Setup parameters for call to function osal_nv_item_init
   \   000061   75....       MOV       ?V0,#zgApsTrustCenterAddr & 0xff
   \   000064   75....       MOV       ?V1,#(zgApsTrustCenterAddr >> 8) & 0xff
   \   000067   78..         MOV       R0,#?V0
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006C   7C08         MOV       R4,#0x8
   \   00006E   7D00         MOV       R5,#0x0
   \   000070   7A71         MOV       R2,#0x71
   \   000072   7B00         MOV       R3,#0x0
   \   000074   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000077   7402         MOV       A,#0x2
   \   000079   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007C   E9           MOV       A,R1
   \   00007D   CE           XCH       A,R6
   \   00007E   4E           ORL       A,R6
   \   00007F   CE           XCH       A,R6
   2736          
   2737            return rtrn;
   \   000080   EE           MOV       A,R6
   \   000081   F9           MOV       R1,A
   \   000082   7402         MOV       A,#0x2
   \   000084   12....       LCALL     ?DEALLOC_XSTACK8
   \   000087   7F02         MOV       R7,#0x2
   \   000089   02....       LJMP      ?BANKED_LEAVE_XDATA
   2738          }
   2739          
   2740          #if defined ( NV_RESTORE )
   2741          /*********************************************************************
   2742           * @fn      ZDSecMgrWriteNV()
   2743           *
   2744           * @brief   Save off the APS link key list to NV
   2745           *
   2746           * @param   none
   2747           *
   2748           * @return  none
   2749           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2750          static void ZDSecMgrWriteNV( void )
   \                     ZDSecMgrWriteNV:
   2751          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2752            uint16 i;
   2753            nvDeviceListHdr_t hdr;
   2754          
   2755            hdr.numRecs = 0;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   7400         MOV       A,#0x0
   \   000012   F0           MOVX      @DPTR,A
   \   000013   A3           INC       DPTR
   \   000014   7400         MOV       A,#0x0
   \   000016   F0           MOVX      @DPTR,A
   2756          
   2757            if (ZDSecMgrEntries != NULL)
   \   000017   90....       MOV       DPTR,#ZDSecMgrEntries
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F8           MOV       R0,A
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F9           MOV       R1,A
   \   00001F   E8           MOV       A,R0
   \   000020   49           ORL       A,R1
   \   000021   7003         JNZ       $+5
   \   000023   02....       LJMP      ??ZDSecMgrWriteNV_0 & 0xFFFF
   2758            {
   2759              for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   000026   7E00         MOV       R6,#0x0
   \   000028   7F00         MOV       R7,#0x0
   \                     ??ZDSecMgrWriteNV_1:
   \   00002A   C3           CLR       C
   \   00002B   EE           MOV       A,R6
   \   00002C   9403         SUBB      A,#0x3
   \   00002E   EF           MOV       A,R7
   \   00002F   9400         SUBB      A,#0x0
   \   000031   4003         JC        $+5
   \   000033   02....       LJMP      ??ZDSecMgrWriteNV_0 & 0xFFFF
   2760              {
   2761                // Save off the record
   2762                osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
   2763                              (uint16)((sizeof(nvDeviceListHdr_t)) + (i * sizeof(ZDSecMgrEntry_t))),
   2764                              sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[i] );
   \   000036                ; Setup parameters for call to function osal_nv_write
   \   000036   EE           MOV       A,R6
   \   000037   F8           MOV       R0,A
   \   000038   EF           MOV       A,R7
   \   000039   F9           MOV       R1,A
   \   00003A   E8           MOV       A,R0
   \   00003B   75F005       MOV       B,#0x5
   \   00003E   A4           MUL       AB
   \   00003F   C8           XCH       A,R0
   \   000040   AAF0         MOV       R2,B
   \   000042   75F000       MOV       B,#0x0
   \   000045   A4           MUL       AB
   \   000046   2A           ADD       A,R2
   \   000047   FA           MOV       R2,A
   \   000048   75F005       MOV       B,#0x5
   \   00004B   E9           MOV       A,R1
   \   00004C   A4           MUL       AB
   \   00004D   2A           ADD       A,R2
   \   00004E   F9           MOV       R1,A
   \   00004F   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000052   E0           MOVX      A,@DPTR
   \   000053   28           ADD       A,R0
   \   000054   F5..         MOV       ?V0,A
   \   000056   A3           INC       DPTR
   \   000057   E0           MOVX      A,@DPTR
   \   000058   39           ADDC      A,R1
   \   000059   F5..         MOV       ?V1,A
   \   00005B   78..         MOV       R0,#?V0
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000060   75..05       MOV       ?V0,#0x5
   \   000063   75..00       MOV       ?V1,#0x0
   \   000066   78..         MOV       R0,#?V0
   \   000068   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006B   EE           MOV       A,R6
   \   00006C   F8           MOV       R0,A
   \   00006D   EF           MOV       A,R7
   \   00006E   F9           MOV       R1,A
   \   00006F   E8           MOV       A,R0
   \   000070   75F005       MOV       B,#0x5
   \   000073   A4           MUL       AB
   \   000074   C8           XCH       A,R0
   \   000075   AAF0         MOV       R2,B
   \   000077   75F000       MOV       B,#0x0
   \   00007A   A4           MUL       AB
   \   00007B   2A           ADD       A,R2
   \   00007C   FA           MOV       R2,A
   \   00007D   75F005       MOV       B,#0x5
   \   000080   E9           MOV       A,R1
   \   000081   A4           MUL       AB
   \   000082   2A           ADD       A,R2
   \   000083   F9           MOV       R1,A
   \   000084   E8           MOV       A,R0
   \   000085   2402         ADD       A,#0x2
   \   000087   FC           MOV       R4,A
   \   000088   E4           CLR       A
   \   000089   39           ADDC      A,R1
   \   00008A   FD           MOV       R5,A
   \   00008B   7A4C         MOV       R2,#0x4c
   \   00008D   7B00         MOV       R3,#0x0
   \   00008F   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000092   7404         MOV       A,#0x4
   \   000094   12....       LCALL     ?DEALLOC_XSTACK8
   \   000097   E9           MOV       A,R1
   2765          
   2766                if ( ZDSecMgrEntries[i].ami != INVALID_NODE_ADDR )
   \   000098   EE           MOV       A,R6
   \   000099   F8           MOV       R0,A
   \   00009A   EF           MOV       A,R7
   \   00009B   F9           MOV       R1,A
   \   00009C   E8           MOV       A,R0
   \   00009D   75F005       MOV       B,#0x5
   \   0000A0   A4           MUL       AB
   \   0000A1   C8           XCH       A,R0
   \   0000A2   AAF0         MOV       R2,B
   \   0000A4   75F000       MOV       B,#0x0
   \   0000A7   A4           MUL       AB
   \   0000A8   2A           ADD       A,R2
   \   0000A9   FA           MOV       R2,A
   \   0000AA   75F005       MOV       B,#0x5
   \   0000AD   E9           MOV       A,R1
   \   0000AE   A4           MUL       AB
   \   0000AF   2A           ADD       A,R2
   \   0000B0   F9           MOV       R1,A
   \   0000B1   90....       MOV       DPTR,#ZDSecMgrEntries
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   28           ADD       A,R0
   \   0000B6   FA           MOV       R2,A
   \   0000B7   A3           INC       DPTR
   \   0000B8   E0           MOVX      A,@DPTR
   \   0000B9   39           ADDC      A,R1
   \   0000BA   8A82         MOV       DPL,R2
   \   0000BC   F583         MOV       DPH,A
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   64FE         XRL       A,#0xfe
   \   0000C1   7004         JNZ       ??ZDSecMgrWriteNV_2
   \   0000C3   A3           INC       DPTR
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   64FF         XRL       A,#0xff
   \                     ??ZDSecMgrWriteNV_2:
   \   0000C7   600F         JZ        ??ZDSecMgrWriteNV_3
   2767                {
   2768                  hdr.numRecs++;
   \   0000C9   85..82       MOV       DPL,?XSP + 0
   \   0000CC   85..83       MOV       DPH,?XSP + 1
   \   0000CF   E0           MOVX      A,@DPTR
   \   0000D0   2401         ADD       A,#0x1
   \   0000D2   F0           MOVX      @DPTR,A
   \   0000D3   A3           INC       DPTR
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   3400         ADDC      A,#0x0
   \   0000D7   F0           MOVX      @DPTR,A
   2769                }
   2770              }
   \                     ??ZDSecMgrWriteNV_3:
   \   0000D8   0E           INC       R6
   \   0000D9   EE           MOV       A,R6
   \   0000DA   7001         JNZ       ??ZDSecMgrWriteNV_4
   \   0000DC   0F           INC       R7
   \                     ??ZDSecMgrWriteNV_4:
   \   0000DD   02....       LJMP      ??ZDSecMgrWriteNV_1 & 0xFFFF
   2771            }
   2772          
   2773            // Save off the header
   2774            osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
   \                     ??ZDSecMgrWriteNV_0:
   \   0000E0                ; Setup parameters for call to function osal_nv_write
   \   0000E0   A8..         MOV       R0,?XSP + 0
   \   0000E2   A9..         MOV       R1,?XSP + 1
   \   0000E4   88..         MOV       ?V0,R0
   \   0000E6   89..         MOV       ?V1,R1
   \   0000E8   78..         MOV       R0,#?V0
   \   0000EA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000ED   75..02       MOV       ?V0,#0x2
   \   0000F0   75..00       MOV       ?V1,#0x0
   \   0000F3   78..         MOV       R0,#?V0
   \   0000F5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F8   7C00         MOV       R4,#0x0
   \   0000FA   7D00         MOV       R5,#0x0
   \   0000FC   7A4C         MOV       R2,#0x4c
   \   0000FE   7B00         MOV       R3,#0x0
   \   000100   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000103   7404         MOV       A,#0x4
   \   000105   12....       LCALL     ?DEALLOC_XSTACK8
   \   000108   E9           MOV       A,R1
   2775          }
   \   000109   7402         MOV       A,#0x2
   \   00010B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00010E   7F02         MOV       R7,#0x2
   \   000110   02....       LJMP      ?BANKED_LEAVE_XDATA
   2776          #endif // NV_RESTORE
   2777          
   2778          #if defined ( NV_RESTORE )
   2779          /******************************************************************************
   2780           * @fn          ZDSecMgrRestoreFromNV
   2781           *
   2782           * @brief       Restore the APS Link Key entry data from NV. It does not restore
   2783           *              the key data itself as they remain in NV until they are used.
   2784           *              Only list data is restored.
   2785           *              Restore zgTrustCenterAdress from NV.
   2786           *
   2787           * @param       none
   2788           *
   2789           * @return      None.
   2790           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2791          static void ZDSecMgrRestoreFromNV( void )
   \                     ZDSecMgrRestoreFromNV:
   2792          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2793            nvDeviceListHdr_t hdr;
   2794            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   \   00000A   75..00       MOV       ?V0,#0x0
   \   00000D   75..00       MOV       ?V1,#0x0
   2795          
   2796            if ((osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS) &&
   2797                ((hdr.numRecs > 0) && (hdr.numRecs <= ZDSECMGR_ENTRY_MAX)))
   \   000010                ; Setup parameters for call to function osal_nv_read
   \   000010   A8..         MOV       R0,?XSP + 0
   \   000012   A9..         MOV       R1,?XSP + 1
   \   000014   88..         MOV       ?V2,R0
   \   000016   89..         MOV       ?V3,R1
   \   000018   78..         MOV       R0,#?V2
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   75..02       MOV       ?V2,#0x2
   \   000020   75..00       MOV       ?V3,#0x0
   \   000023   78..         MOV       R0,#?V2
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   7C00         MOV       R4,#0x0
   \   00002A   7D00         MOV       R5,#0x0
   \   00002C   7A4C         MOV       R2,#0x4c
   \   00002E   7B00         MOV       R3,#0x0
   \   000030   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000033   7404         MOV       A,#0x4
   \   000035   12....       LCALL     ?DEALLOC_XSTACK8
   \   000038   E9           MOV       A,R1
   \   000039   6003         JZ        $+5
   \   00003B   02....       LJMP      ??ZDSecMgrRestoreFromNV_0 & 0xFFFF
   \   00003E   85..82       MOV       DPL,?XSP + 0
   \   000041   85..83       MOV       DPH,?XSP + 1
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F8           MOV       R0,A
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F9           MOV       R1,A
   \   000049   E8           MOV       A,R0
   \   00004A   49           ORL       A,R1
   \   00004B   7003         JNZ       $+5
   \   00004D   02....       LJMP      ??ZDSecMgrRestoreFromNV_0 & 0xFFFF
   \   000050   85..82       MOV       DPL,?XSP + 0
   \   000053   85..83       MOV       DPH,?XSP + 1
   \   000056   C3           CLR       C
   \   000057   E0           MOVX      A,@DPTR
   \   000058   9404         SUBB      A,#0x4
   \   00005A   A3           INC       DPTR
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   9400         SUBB      A,#0x0
   \   00005E   4003         JC        $+5
   \   000060   02....       LJMP      ??ZDSecMgrRestoreFromNV_0 & 0xFFFF
   2798            {
   2799              uint8 x;
   2800          
   2801              pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   000063                ; Setup parameters for call to function osal_mem_alloc
   \   000063   7A18         MOV       R2,#0x18
   \   000065   7B00         MOV       R3,#0x0
   \   000067   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00006A   8A..         MOV       ?V2,R2
   \   00006C   8B..         MOV       ?V3,R3
   \   00006E   85....       MOV       ?V0,?V2
   \   000071   85....       MOV       ?V1,?V3
   2802          
   2803              for (x = 0; x < ZDSECMGR_ENTRY_MAX; x++)
   \   000074   7E00         MOV       R6,#0x0
   \                     ??ZDSecMgrRestoreFromNV_1:
   \   000076   EE           MOV       A,R6
   \   000077   C3           CLR       C
   \   000078   9403         SUBB      A,#0x3
   \   00007A   4003         JC        $+5
   \   00007C   02....       LJMP      ??ZDSecMgrRestoreFromNV_2 & 0xFFFF
   2804              {
   2805                if ( osal_nv_read( ZCD_NV_APS_LINK_KEY_TABLE,
   2806                                  (uint16)(sizeof(nvDeviceListHdr_t) + (x * sizeof(ZDSecMgrEntry_t))),
   2807                                  sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[x] ) == SUCCESS )
   \   00007F                ; Setup parameters for call to function osal_nv_read
   \   00007F   EE           MOV       A,R6
   \   000080   F8           MOV       R0,A
   \   000081   7900         MOV       R1,#0x0
   \   000083   E8           MOV       A,R0
   \   000084   75F005       MOV       B,#0x5
   \   000087   A4           MUL       AB
   \   000088   C8           XCH       A,R0
   \   000089   AAF0         MOV       R2,B
   \   00008B   75F000       MOV       B,#0x0
   \   00008E   A4           MUL       AB
   \   00008F   2A           ADD       A,R2
   \   000090   FA           MOV       R2,A
   \   000091   75F005       MOV       B,#0x5
   \   000094   E9           MOV       A,R1
   \   000095   A4           MUL       AB
   \   000096   2A           ADD       A,R2
   \   000097   F9           MOV       R1,A
   \   000098   90....       MOV       DPTR,#ZDSecMgrEntries
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   28           ADD       A,R0
   \   00009D   F5..         MOV       ?V2,A
   \   00009F   A3           INC       DPTR
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   39           ADDC      A,R1
   \   0000A2   F5..         MOV       ?V3,A
   \   0000A4   78..         MOV       R0,#?V2
   \   0000A6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A9   75..05       MOV       ?V2,#0x5
   \   0000AC   75..00       MOV       ?V3,#0x0
   \   0000AF   78..         MOV       R0,#?V2
   \   0000B1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B4   EE           MOV       A,R6
   \   0000B5   F8           MOV       R0,A
   \   0000B6   7900         MOV       R1,#0x0
   \   0000B8   E8           MOV       A,R0
   \   0000B9   75F005       MOV       B,#0x5
   \   0000BC   A4           MUL       AB
   \   0000BD   C8           XCH       A,R0
   \   0000BE   AAF0         MOV       R2,B
   \   0000C0   75F000       MOV       B,#0x0
   \   0000C3   A4           MUL       AB
   \   0000C4   2A           ADD       A,R2
   \   0000C5   FA           MOV       R2,A
   \   0000C6   75F005       MOV       B,#0x5
   \   0000C9   E9           MOV       A,R1
   \   0000CA   A4           MUL       AB
   \   0000CB   2A           ADD       A,R2
   \   0000CC   F9           MOV       R1,A
   \   0000CD   E8           MOV       A,R0
   \   0000CE   2402         ADD       A,#0x2
   \   0000D0   FC           MOV       R4,A
   \   0000D1   E4           CLR       A
   \   0000D2   39           ADDC      A,R1
   \   0000D3   FD           MOV       R5,A
   \   0000D4   7A4C         MOV       R2,#0x4c
   \   0000D6   7B00         MOV       R3,#0x0
   \   0000D8   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000DB   7404         MOV       A,#0x4
   \   0000DD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E0   E9           MOV       A,R1
   \   0000E1   6003         JZ        $+5
   \   0000E3   02....       LJMP      ??ZDSecMgrRestoreFromNV_3 & 0xFFFF
   2808                {
   2809                  // update data only for valid entries
   2810                  if ( ZDSecMgrEntries[x].ami != INVALID_NODE_ADDR )
   \   0000E6   EE           MOV       A,R6
   \   0000E7   F8           MOV       R0,A
   \   0000E8   7900         MOV       R1,#0x0
   \   0000EA   E8           MOV       A,R0
   \   0000EB   75F005       MOV       B,#0x5
   \   0000EE   A4           MUL       AB
   \   0000EF   C8           XCH       A,R0
   \   0000F0   AAF0         MOV       R2,B
   \   0000F2   75F000       MOV       B,#0x0
   \   0000F5   A4           MUL       AB
   \   0000F6   2A           ADD       A,R2
   \   0000F7   FA           MOV       R2,A
   \   0000F8   75F005       MOV       B,#0x5
   \   0000FB   E9           MOV       A,R1
   \   0000FC   A4           MUL       AB
   \   0000FD   2A           ADD       A,R2
   \   0000FE   F9           MOV       R1,A
   \   0000FF   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000102   E0           MOVX      A,@DPTR
   \   000103   28           ADD       A,R0
   \   000104   FA           MOV       R2,A
   \   000105   A3           INC       DPTR
   \   000106   E0           MOVX      A,@DPTR
   \   000107   39           ADDC      A,R1
   \   000108   8A82         MOV       DPL,R2
   \   00010A   F583         MOV       DPH,A
   \   00010C   E0           MOVX      A,@DPTR
   \   00010D   64FE         XRL       A,#0xfe
   \   00010F   7004         JNZ       ??ZDSecMgrRestoreFromNV_4
   \   000111   A3           INC       DPTR
   \   000112   E0           MOVX      A,@DPTR
   \   000113   64FF         XRL       A,#0xff
   \                     ??ZDSecMgrRestoreFromNV_4:
   \   000115   7003         JNZ       $+5
   \   000117   02....       LJMP      ??ZDSecMgrRestoreFromNV_3 & 0xFFFF
   2811                  {
   2812                    if (pApsLinkKey != NULL)
   \   00011A   E5..         MOV       A,?V0
   \   00011C   45..         ORL       A,?V1
   \   00011E   7003         JNZ       $+5
   \   000120   02....       LJMP      ??ZDSecMgrRestoreFromNV_3 & 0xFFFF
   2813                    {
   2814                      // read the key form NV, keyNvId must be ZCD_NV_APS_LINK_KEY_DATA_START based
   2815                      osal_nv_read( ZDSecMgrEntries[x].keyNvId, 0,
   2816                                   sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   \   000123                ; Setup parameters for call to function osal_nv_read
   \   000123   78..         MOV       R0,#?V0
   \   000125   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000128   75..18       MOV       ?V2,#0x18
   \   00012B   75..00       MOV       ?V3,#0x0
   \   00012E   78..         MOV       R0,#?V2
   \   000130   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000133   7C00         MOV       R4,#0x0
   \   000135   7D00         MOV       R5,#0x0
   \   000137   EE           MOV       A,R6
   \   000138   F8           MOV       R0,A
   \   000139   7900         MOV       R1,#0x0
   \   00013B   E8           MOV       A,R0
   \   00013C   75F005       MOV       B,#0x5
   \   00013F   A4           MUL       AB
   \   000140   C8           XCH       A,R0
   \   000141   AAF0         MOV       R2,B
   \   000143   75F000       MOV       B,#0x0
   \   000146   A4           MUL       AB
   \   000147   2A           ADD       A,R2
   \   000148   FA           MOV       R2,A
   \   000149   75F005       MOV       B,#0x5
   \   00014C   E9           MOV       A,R1
   \   00014D   A4           MUL       AB
   \   00014E   2A           ADD       A,R2
   \   00014F   F9           MOV       R1,A
   \   000150   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000153   E0           MOVX      A,@DPTR
   \   000154   28           ADD       A,R0
   \   000155   FA           MOV       R2,A
   \   000156   A3           INC       DPTR
   \   000157   E0           MOVX      A,@DPTR
   \   000158   39           ADDC      A,R1
   \   000159   8A82         MOV       DPL,R2
   \   00015B   F583         MOV       DPH,A
   \   00015D   A3           INC       DPTR
   \   00015E   A3           INC       DPTR
   \   00015F   E0           MOVX      A,@DPTR
   \   000160   FA           MOV       R2,A
   \   000161   A3           INC       DPTR
   \   000162   E0           MOVX      A,@DPTR
   \   000163   FB           MOV       R3,A
   \   000164   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000167   7404         MOV       A,#0x4
   \   000169   12....       LCALL     ?DEALLOC_XSTACK8
   \   00016C   E9           MOV       A,R1
   2817          
   2818                      // set new values for the counter
   2819                      pApsLinkKey->txFrmCntr += ( MAX_APS_FRAMECOUNTER_CHANGES + 1 );
   \   00016D   90....       MOV       DPTR,#__Constant_3e9
   \   000170   78..         MOV       R0,#?V4
   \   000172   12....       LCALL     ?L_MOV_X
   \   000175   E5..         MOV       A,?V0
   \   000177   2410         ADD       A,#0x10
   \   000179   F582         MOV       DPL,A
   \   00017B   E4           CLR       A
   \   00017C   35..         ADDC      A,?V1
   \   00017E   F583         MOV       DPH,A
   \   000180   78..         MOV       R0,#?V4
   \   000182   12....       LCALL     ?L_ADD_TO_X
   2820          
   2821                      // restore values for counters in RAM
   2822                      ApsLinkKeyFrmCntr[ZDSecMgrEntries[x].keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr =
   2823                                                      pApsLinkKey->txFrmCntr;
   \   000185   E5..         MOV       A,?V0
   \   000187   2410         ADD       A,#0x10
   \   000189   F582         MOV       DPL,A
   \   00018B   E4           CLR       A
   \   00018C   35..         ADDC      A,?V1
   \   00018E   F583         MOV       DPH,A
   \   000190   12....       LCALL     ?XLOAD_R0123
   \   000193   EE           MOV       A,R6
   \   000194   FC           MOV       R4,A
   \   000195   7D00         MOV       R5,#0x0
   \   000197   EC           MOV       A,R4
   \   000198   75F005       MOV       B,#0x5
   \   00019B   A4           MUL       AB
   \   00019C   CC           XCH       A,R4
   \   00019D   AFF0         MOV       R7,B
   \   00019F   75F000       MOV       B,#0x0
   \   0001A2   A4           MUL       AB
   \   0001A3   2F           ADD       A,R7
   \   0001A4   FF           MOV       R7,A
   \   0001A5   75F005       MOV       B,#0x5
   \   0001A8   ED           MOV       A,R5
   \   0001A9   A4           MUL       AB
   \   0001AA   2F           ADD       A,R7
   \   0001AB   FD           MOV       R5,A
   \   0001AC   90....       MOV       DPTR,#ZDSecMgrEntries
   \   0001AF   E0           MOVX      A,@DPTR
   \   0001B0   2C           ADD       A,R4
   \   0001B1   FF           MOV       R7,A
   \   0001B2   A3           INC       DPTR
   \   0001B3   E0           MOVX      A,@DPTR
   \   0001B4   3D           ADDC      A,R5
   \   0001B5   8F82         MOV       DPL,R7
   \   0001B7   F583         MOV       DPH,A
   \   0001B9   A3           INC       DPTR
   \   0001BA   A3           INC       DPTR
   \   0001BB   E0           MOVX      A,@DPTR
   \   0001BC   FC           MOV       R4,A
   \   0001BD   A3           INC       DPTR
   \   0001BE   E0           MOVX      A,@DPTR
   \   0001BF   FD           MOV       R5,A
   \   0001C0   EC           MOV       A,R4
   \   0001C1   75F009       MOV       B,#0x9
   \   0001C4   A4           MUL       AB
   \   0001C5   CC           XCH       A,R4
   \   0001C6   AFF0         MOV       R7,B
   \   0001C8   75F000       MOV       B,#0x0
   \   0001CB   A4           MUL       AB
   \   0001CC   2F           ADD       A,R7
   \   0001CD   FF           MOV       R7,A
   \   0001CE   75F009       MOV       B,#0x9
   \   0001D1   ED           MOV       A,R5
   \   0001D2   A4           MUL       AB
   \   0001D3   2F           ADD       A,R7
   \   0001D4   FD           MOV       R5,A
   \   0001D5   74..         MOV       A,#(ApsLinkKeyFrmCntr + 247) & 0xff
   \   0001D7   2C           ADD       A,R4
   \   0001D8   F582         MOV       DPL,A
   \   0001DA   74..         MOV       A,#((ApsLinkKeyFrmCntr - 4617) >> 8) & 0xff
   \   0001DC   3D           ADDC      A,R5
   \   0001DD   F583         MOV       DPH,A
   \   0001DF   12....       LCALL     ?XSTORE_R0123
   2824          
   2825                      ApsLinkKeyFrmCntr[ZDSecMgrEntries[x].keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr =
   2826                                                      pApsLinkKey->rxFrmCntr;
   \   0001E2   E5..         MOV       A,?V0
   \   0001E4   2414         ADD       A,#0x14
   \   0001E6   F582         MOV       DPL,A
   \   0001E8   E4           CLR       A
   \   0001E9   35..         ADDC      A,?V1
   \   0001EB   F583         MOV       DPH,A
   \   0001ED   12....       LCALL     ?XLOAD_R0123
   \   0001F0   EE           MOV       A,R6
   \   0001F1   FC           MOV       R4,A
   \   0001F2   7D00         MOV       R5,#0x0
   \   0001F4   EC           MOV       A,R4
   \   0001F5   75F005       MOV       B,#0x5
   \   0001F8   A4           MUL       AB
   \   0001F9   CC           XCH       A,R4
   \   0001FA   AFF0         MOV       R7,B
   \   0001FC   75F000       MOV       B,#0x0
   \   0001FF   A4           MUL       AB
   \   000200   2F           ADD       A,R7
   \   000201   FF           MOV       R7,A
   \   000202   75F005       MOV       B,#0x5
   \   000205   ED           MOV       A,R5
   \   000206   A4           MUL       AB
   \   000207   2F           ADD       A,R7
   \   000208   FD           MOV       R5,A
   \   000209   90....       MOV       DPTR,#ZDSecMgrEntries
   \   00020C   E0           MOVX      A,@DPTR
   \   00020D   2C           ADD       A,R4
   \   00020E   FF           MOV       R7,A
   \   00020F   A3           INC       DPTR
   \   000210   E0           MOVX      A,@DPTR
   \   000211   3D           ADDC      A,R5
   \   000212   8F82         MOV       DPL,R7
   \   000214   F583         MOV       DPH,A
   \   000216   A3           INC       DPTR
   \   000217   A3           INC       DPTR
   \   000218   E0           MOVX      A,@DPTR
   \   000219   FC           MOV       R4,A
   \   00021A   A3           INC       DPTR
   \   00021B   E0           MOVX      A,@DPTR
   \   00021C   FD           MOV       R5,A
   \   00021D   EC           MOV       A,R4
   \   00021E   75F009       MOV       B,#0x9
   \   000221   A4           MUL       AB
   \   000222   CC           XCH       A,R4
   \   000223   AFF0         MOV       R7,B
   \   000225   75F000       MOV       B,#0x0
   \   000228   A4           MUL       AB
   \   000229   2F           ADD       A,R7
   \   00022A   FF           MOV       R7,A
   \   00022B   75F009       MOV       B,#0x9
   \   00022E   ED           MOV       A,R5
   \   00022F   A4           MUL       AB
   \   000230   2F           ADD       A,R7
   \   000231   FD           MOV       R5,A
   \   000232   74..         MOV       A,#(ApsLinkKeyFrmCntr + 251) & 0xff
   \   000234   2C           ADD       A,R4
   \   000235   F582         MOV       DPL,A
   \   000237   74..         MOV       A,#((ApsLinkKeyFrmCntr - 4613) >> 8) & 0xff
   \   000239   3D           ADDC      A,R5
   \   00023A   F583         MOV       DPH,A
   \   00023C   12....       LCALL     ?XSTORE_R0123
   2827          
   2828                      osal_nv_write( ZDSecMgrEntries[x].keyNvId, 0,
   2829                                    sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   \   00023F                ; Setup parameters for call to function osal_nv_write
   \   00023F   78..         MOV       R0,#?V0
   \   000241   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000244   75..18       MOV       ?V2,#0x18
   \   000247   75..00       MOV       ?V3,#0x0
   \   00024A   78..         MOV       R0,#?V2
   \   00024C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00024F   7C00         MOV       R4,#0x0
   \   000251   7D00         MOV       R5,#0x0
   \   000253   EE           MOV       A,R6
   \   000254   F8           MOV       R0,A
   \   000255   7900         MOV       R1,#0x0
   \   000257   E8           MOV       A,R0
   \   000258   75F005       MOV       B,#0x5
   \   00025B   A4           MUL       AB
   \   00025C   C8           XCH       A,R0
   \   00025D   AAF0         MOV       R2,B
   \   00025F   75F000       MOV       B,#0x0
   \   000262   A4           MUL       AB
   \   000263   2A           ADD       A,R2
   \   000264   FA           MOV       R2,A
   \   000265   75F005       MOV       B,#0x5
   \   000268   E9           MOV       A,R1
   \   000269   A4           MUL       AB
   \   00026A   2A           ADD       A,R2
   \   00026B   F9           MOV       R1,A
   \   00026C   90....       MOV       DPTR,#ZDSecMgrEntries
   \   00026F   E0           MOVX      A,@DPTR
   \   000270   28           ADD       A,R0
   \   000271   FA           MOV       R2,A
   \   000272   A3           INC       DPTR
   \   000273   E0           MOVX      A,@DPTR
   \   000274   39           ADDC      A,R1
   \   000275   8A82         MOV       DPL,R2
   \   000277   F583         MOV       DPH,A
   \   000279   A3           INC       DPTR
   \   00027A   A3           INC       DPTR
   \   00027B   E0           MOVX      A,@DPTR
   \   00027C   FA           MOV       R2,A
   \   00027D   A3           INC       DPTR
   \   00027E   E0           MOVX      A,@DPTR
   \   00027F   FB           MOV       R3,A
   \   000280   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000283   7404         MOV       A,#0x4
   \   000285   12....       LCALL     ?DEALLOC_XSTACK8
   \   000288   E9           MOV       A,R1
   2830          
   2831                      // clear copy of key in RAM
   2832                      osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   \   000289                ; Setup parameters for call to function osal_memset
   \   000289   7C18         MOV       R4,#0x18
   \   00028B   7D00         MOV       R5,#0x0
   \   00028D   7900         MOV       R1,#0x0
   \   00028F   AA..         MOV       R2,?V0
   \   000291   AB..         MOV       R3,?V1
   \   000293   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2833                    }
   2834                  }
   2835                }
   2836              }
   \                     ??ZDSecMgrRestoreFromNV_3:
   \   000296   0E           INC       R6
   \   000297   02....       LJMP      ??ZDSecMgrRestoreFromNV_1 & 0xFFFF
   2837          
   2838              if (pApsLinkKey != NULL)
   \                     ??ZDSecMgrRestoreFromNV_2:
   \   00029A   E5..         MOV       A,?V0
   \   00029C   45..         ORL       A,?V1
   \   00029E   6007         JZ        ??ZDSecMgrRestoreFromNV_0
   2839              {
   2840                osal_mem_free(pApsLinkKey);
   \   0002A0                ; Setup parameters for call to function osal_mem_free
   \   0002A0   AA..         MOV       R2,?V0
   \   0002A2   AB..         MOV       R3,?V1
   \   0002A4   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2841              }
   2842            }
   2843          
   2844            osal_nv_read( ZCD_NV_TRUSTCENTER_ADDR, 0, Z_EXTADDR_LEN, zgApsTrustCenterAddr );
   \                     ??ZDSecMgrRestoreFromNV_0:
   \   0002A7                ; Setup parameters for call to function osal_nv_read
   \   0002A7   75....       MOV       ?V2,#zgApsTrustCenterAddr & 0xff
   \   0002AA   75....       MOV       ?V3,#(zgApsTrustCenterAddr >> 8) & 0xff
   \   0002AD   78..         MOV       R0,#?V2
   \   0002AF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002B2   75..08       MOV       ?V2,#0x8
   \   0002B5   75..00       MOV       ?V3,#0x0
   \   0002B8   78..         MOV       R0,#?V2
   \   0002BA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002BD   7C00         MOV       R4,#0x0
   \   0002BF   7D00         MOV       R5,#0x0
   \   0002C1   7A71         MOV       R2,#0x71
   \   0002C3   7B00         MOV       R3,#0x0
   \   0002C5   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0002C8   7404         MOV       A,#0x4
   \   0002CA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002CD   E9           MOV       A,R1
   2845          }
   \   0002CE   7402         MOV       A,#0x2
   \   0002D0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002D3   7F08         MOV       R7,#0x8
   \   0002D5   02....       LJMP      ?BANKED_LEAVE_XDATA
   2846          #endif // NV_RESTORE
   2847          
   2848          /*********************************************************************
   2849           * @fn          ZDSecMgrSetDefaultNV
   2850           *
   2851           * @brief       Write the defaults to NV for Entry table and for APS key data table
   2852           *
   2853           * @param       none
   2854           *
   2855           * @return      none
   2856           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2857          void ZDSecMgrSetDefaultNV( void )
   \                     ZDSecMgrSetDefaultNV:
   2858          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV       A,#-0x7
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2859            uint16 i;
   2860            nvDeviceListHdr_t hdr;
   2861            ZDSecMgrEntry_t secMgrEntry;
   2862            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   \   00000A   75..00       MOV       ?V0,#0x0
   \   00000D   75..00       MOV       ?V1,#0x0
   2863          
   2864            // Initialize the header
   2865            hdr.numRecs = 0;
   \   000010   85..82       MOV       DPL,?XSP + 0
   \   000013   85..83       MOV       DPH,?XSP + 1
   \   000016   7400         MOV       A,#0x0
   \   000018   F0           MOVX      @DPTR,A
   \   000019   A3           INC       DPTR
   \   00001A   7400         MOV       A,#0x0
   \   00001C   F0           MOVX      @DPTR,A
   2866          
   2867            // clear the header
   2868            osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
   \   00001D                ; Setup parameters for call to function osal_nv_write
   \   00001D   A8..         MOV       R0,?XSP + 0
   \   00001F   A9..         MOV       R1,?XSP + 1
   \   000021   88..         MOV       ?V2,R0
   \   000023   89..         MOV       ?V3,R1
   \   000025   78..         MOV       R0,#?V2
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002A   75..02       MOV       ?V2,#0x2
   \   00002D   75..00       MOV       ?V3,#0x0
   \   000030   78..         MOV       R0,#?V2
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   7C00         MOV       R4,#0x0
   \   000037   7D00         MOV       R5,#0x0
   \   000039   7A4C         MOV       R2,#0x4c
   \   00003B   7B00         MOV       R3,#0x0
   \   00003D   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000040   7404         MOV       A,#0x4
   \   000042   12....       LCALL     ?DEALLOC_XSTACK8
   \   000045   E9           MOV       A,R1
   2869          
   2870            osal_memset( &secMgrEntry, 0x00, sizeof(ZDSecMgrEntry_t) );
   \   000046                ; Setup parameters for call to function osal_memset
   \   000046   7C05         MOV       R4,#0x5
   \   000048   7D00         MOV       R5,#0x0
   \   00004A   7900         MOV       R1,#0x0
   \   00004C   7402         MOV       A,#0x2
   \   00004E   12....       LCALL     ?XSTACK_DISP101_8
   \   000051   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2871          
   2872            for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   000054   7E00         MOV       R6,#0x0
   \   000056   7F00         MOV       R7,#0x0
   \                     ??ZDSecMgrSetDefaultNV_0:
   \   000058   C3           CLR       C
   \   000059   EE           MOV       A,R6
   \   00005A   9403         SUBB      A,#0x3
   \   00005C   EF           MOV       A,R7
   \   00005D   9400         SUBB      A,#0x0
   \   00005F   504D         JNC       ??ZDSecMgrSetDefaultNV_1
   2873            {
   2874              // Clear the record
   2875              osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
   2876                          (uint16)((sizeof(nvDeviceListHdr_t)) + (i * sizeof(ZDSecMgrEntry_t))),
   2877                                  sizeof(ZDSecMgrEntry_t), &secMgrEntry );
   \   000061                ; Setup parameters for call to function osal_nv_write
   \   000061   7402         MOV       A,#0x2
   \   000063   12....       LCALL     ?XSTACK_DISP100_8
   \   000066   88..         MOV       ?V2,R0
   \   000068   89..         MOV       ?V3,R1
   \   00006A   78..         MOV       R0,#?V2
   \   00006C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006F   75..05       MOV       ?V2,#0x5
   \   000072   75..00       MOV       ?V3,#0x0
   \   000075   78..         MOV       R0,#?V2
   \   000077   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007A   EE           MOV       A,R6
   \   00007B   F8           MOV       R0,A
   \   00007C   EF           MOV       A,R7
   \   00007D   F9           MOV       R1,A
   \   00007E   E8           MOV       A,R0
   \   00007F   75F005       MOV       B,#0x5
   \   000082   A4           MUL       AB
   \   000083   C8           XCH       A,R0
   \   000084   AAF0         MOV       R2,B
   \   000086   75F000       MOV       B,#0x0
   \   000089   A4           MUL       AB
   \   00008A   2A           ADD       A,R2
   \   00008B   FA           MOV       R2,A
   \   00008C   75F005       MOV       B,#0x5
   \   00008F   E9           MOV       A,R1
   \   000090   A4           MUL       AB
   \   000091   2A           ADD       A,R2
   \   000092   F9           MOV       R1,A
   \   000093   E8           MOV       A,R0
   \   000094   2402         ADD       A,#0x2
   \   000096   FC           MOV       R4,A
   \   000097   E4           CLR       A
   \   000098   39           ADDC      A,R1
   \   000099   FD           MOV       R5,A
   \   00009A   7A4C         MOV       R2,#0x4c
   \   00009C   7B00         MOV       R3,#0x0
   \   00009E   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000A1   7404         MOV       A,#0x4
   \   0000A3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A6   E9           MOV       A,R1
   2878            }
   \   0000A7   0E           INC       R6
   \   0000A8   EE           MOV       A,R6
   \   0000A9   70AD         JNZ       ??ZDSecMgrSetDefaultNV_0
   \   0000AB   0F           INC       R7
   \   0000AC   80AA         SJMP      ??ZDSecMgrSetDefaultNV_0
   2879          
   2880            pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \                     ??ZDSecMgrSetDefaultNV_1:
   \   0000AE                ; Setup parameters for call to function osal_mem_alloc
   \   0000AE   7A18         MOV       R2,#0x18
   \   0000B0   7B00         MOV       R3,#0x0
   \   0000B2   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000B5   8A..         MOV       ?V2,R2
   \   0000B7   8B..         MOV       ?V3,R3
   \   0000B9   85....       MOV       ?V0,?V2
   \   0000BC   85....       MOV       ?V1,?V3
   2881          
   2882            if (pApsLinkKey != NULL)
   \   0000BF   E5..         MOV       A,?V0
   \   0000C1   45..         ORL       A,?V1
   \   0000C3   604D         JZ        ??ZDSecMgrSetDefaultNV_2
   2883            {
   2884              osal_memset( pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   0000C5                ; Setup parameters for call to function osal_memset
   \   0000C5   7C18         MOV       R4,#0x18
   \   0000C7   7D00         MOV       R5,#0x0
   \   0000C9   7900         MOV       R1,#0x0
   \   0000CB   AA..         MOV       R2,?V0
   \   0000CD   AB..         MOV       R3,?V1
   \   0000CF   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2885          
   2886              for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   0000D2   7E00         MOV       R6,#0x0
   \   0000D4   7F00         MOV       R7,#0x0
   \                     ??ZDSecMgrSetDefaultNV_3:
   \   0000D6   C3           CLR       C
   \   0000D7   EE           MOV       A,R6
   \   0000D8   9403         SUBB      A,#0x3
   \   0000DA   EF           MOV       A,R7
   \   0000DB   9400         SUBB      A,#0x0
   \   0000DD   502C         JNC       ??ZDSecMgrSetDefaultNV_4
   2887              {
   2888                // Clear the record
   2889                osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
   2890                              sizeof(APSME_LinkKeyData_t), pApsLinkKey);
   \   0000DF                ; Setup parameters for call to function osal_nv_write
   \   0000DF   78..         MOV       R0,#?V0
   \   0000E1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E4   75..18       MOV       ?V2,#0x18
   \   0000E7   75..00       MOV       ?V3,#0x0
   \   0000EA   78..         MOV       R0,#?V2
   \   0000EC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000EF   7C00         MOV       R4,#0x0
   \   0000F1   7D00         MOV       R5,#0x0
   \   0000F3   EE           MOV       A,R6
   \   0000F4   2401         ADD       A,#0x1
   \   0000F6   FA           MOV       R2,A
   \   0000F7   EF           MOV       A,R7
   \   0000F8   3402         ADDC      A,#0x2
   \   0000FA   FB           MOV       R3,A
   \   0000FB   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000FE   7404         MOV       A,#0x4
   \   000100   12....       LCALL     ?DEALLOC_XSTACK8
   \   000103   E9           MOV       A,R1
   2891              }
   \   000104   0E           INC       R6
   \   000105   EE           MOV       A,R6
   \   000106   70CE         JNZ       ??ZDSecMgrSetDefaultNV_3
   \   000108   0F           INC       R7
   \   000109   80CB         SJMP      ??ZDSecMgrSetDefaultNV_3
   2892          
   2893              osal_mem_free(pApsLinkKey);
   \                     ??ZDSecMgrSetDefaultNV_4:
   \   00010B                ; Setup parameters for call to function osal_mem_free
   \   00010B   AA..         MOV       R2,?V0
   \   00010D   AB..         MOV       R3,?V1
   \   00010F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2894            }
   2895          }
   \                     ??ZDSecMgrSetDefaultNV_2:
   \   000112   7407         MOV       A,#0x7
   \   000114   12....       LCALL     ?DEALLOC_XSTACK8
   \   000117   7F04         MOV       R7,#0x4
   \   000119   02....       LJMP      ?BANKED_LEAVE_XDATA
   2896          
   2897          #if defined ( NV_RESTORE )
   2898          /*********************************************************************
   2899           * @fn      ZDSecMgrUpdateNV()
   2900           *
   2901           * @brief   Updates one entry of the APS link key table to NV
   2902           *
   2903           * @param   index - to the entry in security manager table
   2904           *
   2905           * @return  none
   2906           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2907          static void ZDSecMgrUpdateNV( uint16 index )
   \                     ZDSecMgrUpdateNV:
   2908          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2909            nvDeviceListHdr_t hdr;
   2910          
   2911            if (ZDSecMgrEntries != NULL)
   \   00000E   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F8           MOV       R0,A
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F9           MOV       R1,A
   \   000016   E8           MOV       A,R0
   \   000017   49           ORL       A,R1
   \   000018   6062         JZ        ??ZDSecMgrUpdateNV_0
   2912            {
   2913              // Save off the record
   2914              osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
   2915                             (uint16)((sizeof(nvDeviceListHdr_t)) + (index * sizeof(ZDSecMgrEntry_t))),
   2916                             sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[index] );
   \   00001A                ; Setup parameters for call to function osal_nv_write
   \   00001A   EE           MOV       A,R6
   \   00001B   F8           MOV       R0,A
   \   00001C   EF           MOV       A,R7
   \   00001D   F9           MOV       R1,A
   \   00001E   E8           MOV       A,R0
   \   00001F   75F005       MOV       B,#0x5
   \   000022   A4           MUL       AB
   \   000023   C8           XCH       A,R0
   \   000024   AAF0         MOV       R2,B
   \   000026   75F000       MOV       B,#0x0
   \   000029   A4           MUL       AB
   \   00002A   2A           ADD       A,R2
   \   00002B   FA           MOV       R2,A
   \   00002C   75F005       MOV       B,#0x5
   \   00002F   E9           MOV       A,R1
   \   000030   A4           MUL       AB
   \   000031   2A           ADD       A,R2
   \   000032   F9           MOV       R1,A
   \   000033   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000036   E0           MOVX      A,@DPTR
   \   000037   28           ADD       A,R0
   \   000038   F5..         MOV       ?V0,A
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   39           ADDC      A,R1
   \   00003D   F5..         MOV       ?V1,A
   \   00003F   78..         MOV       R0,#?V0
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000044   75..05       MOV       ?V0,#0x5
   \   000047   75..00       MOV       ?V1,#0x0
   \   00004A   78..         MOV       R0,#?V0
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004F   EE           MOV       A,R6
   \   000050   F8           MOV       R0,A
   \   000051   EF           MOV       A,R7
   \   000052   F9           MOV       R1,A
   \   000053   E8           MOV       A,R0
   \   000054   75F005       MOV       B,#0x5
   \   000057   A4           MUL       AB
   \   000058   C8           XCH       A,R0
   \   000059   AAF0         MOV       R2,B
   \   00005B   75F000       MOV       B,#0x0
   \   00005E   A4           MUL       AB
   \   00005F   2A           ADD       A,R2
   \   000060   FA           MOV       R2,A
   \   000061   75F005       MOV       B,#0x5
   \   000064   E9           MOV       A,R1
   \   000065   A4           MUL       AB
   \   000066   2A           ADD       A,R2
   \   000067   F9           MOV       R1,A
   \   000068   E8           MOV       A,R0
   \   000069   2402         ADD       A,#0x2
   \   00006B   FC           MOV       R4,A
   \   00006C   E4           CLR       A
   \   00006D   39           ADDC      A,R1
   \   00006E   FD           MOV       R5,A
   \   00006F   7A4C         MOV       R2,#0x4c
   \   000071   7B00         MOV       R3,#0x0
   \   000073   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000076   7404         MOV       A,#0x4
   \   000078   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007B   E9           MOV       A,R1
   2917            }
   2918          
   2919            if (osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS)
   \                     ??ZDSecMgrUpdateNV_0:
   \   00007C                ; Setup parameters for call to function osal_nv_read
   \   00007C   A8..         MOV       R0,?XSP + 0
   \   00007E   A9..         MOV       R1,?XSP + 1
   \   000080   88..         MOV       ?V0,R0
   \   000082   89..         MOV       ?V1,R1
   \   000084   78..         MOV       R0,#?V0
   \   000086   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000089   75..02       MOV       ?V0,#0x2
   \   00008C   75..00       MOV       ?V1,#0x0
   \   00008F   78..         MOV       R0,#?V0
   \   000091   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000094   7C00         MOV       R4,#0x0
   \   000096   7D00         MOV       R5,#0x0
   \   000098   7A4C         MOV       R2,#0x4c
   \   00009A   7B00         MOV       R3,#0x0
   \   00009C   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00009F   7404         MOV       A,#0x4
   \   0000A1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A4   E9           MOV       A,R1
   \   0000A5   6003         JZ        $+5
   \   0000A7   02....       LJMP      ??ZDSecMgrUpdateNV_1 & 0xFFFF
   2920            {
   2921              if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
   \   0000AA   EE           MOV       A,R6
   \   0000AB   F8           MOV       R0,A
   \   0000AC   EF           MOV       A,R7
   \   0000AD   F9           MOV       R1,A
   \   0000AE   E8           MOV       A,R0
   \   0000AF   75F005       MOV       B,#0x5
   \   0000B2   A4           MUL       AB
   \   0000B3   C8           XCH       A,R0
   \   0000B4   AAF0         MOV       R2,B
   \   0000B6   75F000       MOV       B,#0x0
   \   0000B9   A4           MUL       AB
   \   0000BA   2A           ADD       A,R2
   \   0000BB   FA           MOV       R2,A
   \   0000BC   75F005       MOV       B,#0x5
   \   0000BF   E9           MOV       A,R1
   \   0000C0   A4           MUL       AB
   \   0000C1   2A           ADD       A,R2
   \   0000C2   F9           MOV       R1,A
   \   0000C3   90....       MOV       DPTR,#ZDSecMgrEntries
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   28           ADD       A,R0
   \   0000C8   FA           MOV       R2,A
   \   0000C9   A3           INC       DPTR
   \   0000CA   E0           MOVX      A,@DPTR
   \   0000CB   39           ADDC      A,R1
   \   0000CC   8A82         MOV       DPL,R2
   \   0000CE   F583         MOV       DPH,A
   \   0000D0   E0           MOVX      A,@DPTR
   \   0000D1   64FE         XRL       A,#0xfe
   \   0000D3   7004         JNZ       ??ZDSecMgrUpdateNV_2
   \   0000D5   A3           INC       DPTR
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   64FF         XRL       A,#0xff
   \                     ??ZDSecMgrUpdateNV_2:
   \   0000D9   7020         JNZ       ??ZDSecMgrUpdateNV_3
   2922              {
   2923                if (hdr.numRecs > 0)
   \   0000DB   85..82       MOV       DPL,?XSP + 0
   \   0000DE   85..83       MOV       DPH,?XSP + 1
   \   0000E1   E0           MOVX      A,@DPTR
   \   0000E2   F8           MOV       R0,A
   \   0000E3   A3           INC       DPTR
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   F9           MOV       R1,A
   \   0000E6   E8           MOV       A,R0
   \   0000E7   49           ORL       A,R1
   \   0000E8   6020         JZ        ??ZDSecMgrUpdateNV_4
   2924                {
   2925                  hdr.numRecs--;
   \   0000EA   85..82       MOV       DPL,?XSP + 0
   \   0000ED   85..83       MOV       DPH,?XSP + 1
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   24FF         ADD       A,#-0x1
   \   0000F3   F0           MOVX      @DPTR,A
   \   0000F4   A3           INC       DPTR
   \   0000F5   E0           MOVX      A,@DPTR
   \   0000F6   34FF         ADDC      A,#-0x1
   \   0000F8   F0           MOVX      @DPTR,A
   \   0000F9   800F         SJMP      ??ZDSecMgrUpdateNV_4
   2926                }
   2927              }
   2928              else
   2929              {
   2930                hdr.numRecs++;
   \                     ??ZDSecMgrUpdateNV_3:
   \   0000FB   85..82       MOV       DPL,?XSP + 0
   \   0000FE   85..83       MOV       DPH,?XSP + 1
   \   000101   E0           MOVX      A,@DPTR
   \   000102   2401         ADD       A,#0x1
   \   000104   F0           MOVX      @DPTR,A
   \   000105   A3           INC       DPTR
   \   000106   E0           MOVX      A,@DPTR
   \   000107   3400         ADDC      A,#0x0
   \   000109   F0           MOVX      @DPTR,A
   2931              }
   2932          
   2933              // Save off the header
   2934              osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
   \                     ??ZDSecMgrUpdateNV_4:
   \   00010A                ; Setup parameters for call to function osal_nv_write
   \   00010A   A8..         MOV       R0,?XSP + 0
   \   00010C   A9..         MOV       R1,?XSP + 1
   \   00010E   88..         MOV       ?V0,R0
   \   000110   89..         MOV       ?V1,R1
   \   000112   78..         MOV       R0,#?V0
   \   000114   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000117   75..02       MOV       ?V0,#0x2
   \   00011A   75..00       MOV       ?V1,#0x0
   \   00011D   78..         MOV       R0,#?V0
   \   00011F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000122   7C00         MOV       R4,#0x0
   \   000124   7D00         MOV       R5,#0x0
   \   000126   7A4C         MOV       R2,#0x4c
   \   000128   7B00         MOV       R3,#0x0
   \   00012A   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00012D   7404         MOV       A,#0x4
   \   00012F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000132   E9           MOV       A,R1
   2935            }
   2936          }
   \                     ??ZDSecMgrUpdateNV_1:
   \   000133   7402         MOV       A,#0x2
   \   000135   12....       LCALL     ?DEALLOC_XSTACK8
   \   000138   7F02         MOV       R7,#0x2
   \   00013A   02....       LJMP      ?BANKED_LEAVE_XDATA
   2937          #endif // NV_RESTORE
   2938          
   2939          /******************************************************************************
   2940           * @fn          ZDSecMgrAPSRemove
   2941           *
   2942           * @brief       Remove device from network.
   2943           *
   2944           * @param       nwkAddr - device's NWK address
   2945           * @param       extAddr - device's Extended address
   2946           * @param       parentAddr - parent's NWK address
   2947           *
   2948           * @return      ZStatus_t
   2949           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2950          ZStatus_t ZDSecMgrAPSRemove( uint16 nwkAddr, uint8 *extAddr, uint16 parentAddr )
   \                     ZDSecMgrAPSRemove:
   2951          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   \   000012   7414         MOV       A,#0x14
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V2,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V3,A
   2952            ZDSecMgrDevice_t device;
   2953          
   2954            if ( ( nwkAddr == INVALID_NODE_ADDR ) ||
   2955                 ( extAddr == NULL )              ||
   2956                 ( parentAddr == INVALID_NODE_ADDR ) )
   \   00001E   74FE         MOV       A,#-0x2
   \   000020   65..         XRL       A,?V0
   \   000022   7004         JNZ       ??ZDSecMgrAPSRemove_0
   \   000024   74FF         MOV       A,#-0x1
   \   000026   65..         XRL       A,?V1
   \                     ??ZDSecMgrAPSRemove_0:
   \   000028   6010         JZ        ??ZDSecMgrAPSRemove_1
   \   00002A   EE           MOV       A,R6
   \   00002B   4F           ORL       A,R7
   \   00002C   600C         JZ        ??ZDSecMgrAPSRemove_1
   \   00002E   74FE         MOV       A,#-0x2
   \   000030   65..         XRL       A,?V2
   \   000032   7004         JNZ       ??ZDSecMgrAPSRemove_2
   \   000034   74FF         MOV       A,#-0x1
   \   000036   65..         XRL       A,?V3
   \                     ??ZDSecMgrAPSRemove_2:
   \   000038   7004         JNZ       ??ZDSecMgrAPSRemove_3
   2957            {
   2958              return ( ZFailure );
   \                     ??ZDSecMgrAPSRemove_1:
   \   00003A   7901         MOV       R1,#0x1
   \   00003C   802C         SJMP      ??ZDSecMgrAPSRemove_4
   2959            }
   2960          
   2961            device.nwkAddr = nwkAddr;
   \                     ??ZDSecMgrAPSRemove_3:
   \   00003E   85..82       MOV       DPL,?XSP + 0
   \   000041   85..83       MOV       DPH,?XSP + 1
   \   000044   E5..         MOV       A,?V0
   \   000046   F0           MOVX      @DPTR,A
   \   000047   A3           INC       DPTR
   \   000048   E5..         MOV       A,?V1
   \   00004A   F0           MOVX      @DPTR,A
   2962            device.extAddr = extAddr;
   \   00004B   7402         MOV       A,#0x2
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   EE           MOV       A,R6
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   EF           MOV       A,R7
   \   000054   F0           MOVX      @DPTR,A
   2963            device.parentAddr = parentAddr;
   \   000055   7404         MOV       A,#0x4
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   E5..         MOV       A,?V2
   \   00005C   F0           MOVX      @DPTR,A
   \   00005D   A3           INC       DPTR
   \   00005E   E5..         MOV       A,?V3
   \   000060   F0           MOVX      @DPTR,A
   2964          
   2965            // remove device
   2966            ZDSecMgrDeviceRemove( &device );
   \   000061                ; Setup parameters for call to function ZDSecMgrDeviceRemove
   \   000061   AA..         MOV       R2,?XSP + 0
   \   000063   AB..         MOV       R3,?XSP + 1
   \   000065   12....       LCALL     `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
   2967          
   2968            return ( ZSuccess );
   \   000068   7900         MOV       R1,#0x0
   \                     ??ZDSecMgrAPSRemove_4:
   \   00006A   7408         MOV       A,#0x8
   \   00006C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006F   7F04         MOV       R7,#0x4
   \   000071   02....       LJMP      ?BANKED_LEAVE_XDATA
   2969          }
   2970          
   2971          /******************************************************************************
   2972           * @fn          APSME_TCLinkKeyInit
   2973           *
   2974           * @brief       Initialize the NV table for preconfigured TC link key
   2975           *
   2976           *              When zgUseDefaultTCL is set to TRUE, the default preconfig
   2977           *              Trust Center Link Key is written to NV. A single tclk is used
   2978           *              by all devices joining the network.
   2979           *
   2980           * @param       setDefault - TRUE to set default values
   2981           *
   2982           * @return      none
   2983           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2984          void APSME_TCLinkKeyInit(uint8 setDefault)
   \                     APSME_TCLinkKeyInit:
   2985          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV       A,#-0x13
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   2986            APSME_TCLKDevEntry_t TCLKDevEntry;
   2987            uint8                rtrn;
   2988            uint16               i;
   2989            
   2990            // Clear the data for the keys
   2991            osal_memset( &TCLKDevEntry, 0x00, sizeof(APSME_TCLKDevEntry_t) );
   \   00000C                ; Setup parameters for call to function osal_memset
   \   00000C   7C13         MOV       R4,#0x13
   \   00000E   7D00         MOV       R5,#0x0
   \   000010   7900         MOV       R1,#0x0
   \   000012   AA..         MOV       R2,?XSP + 0
   \   000014   AB..         MOV       R3,?XSP + 1
   \   000016   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2992            TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
   \   000019   7410         MOV       A,#0x10
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   74FF         MOV       A,#-0x1
   \   000020   F0           MOVX      @DPTR,A
   2993            
   2994            // Initialize all NV items
   2995            for( i = 0; i < gZDSECMGR_TC_DEVICE_MAX; i++ )
   \   000021   7E00         MOV       R6,#0x0
   \   000023   7F00         MOV       R7,#0x0
   \                     ??APSME_TCLinkKeyInit_0:
   \   000025   90....       MOV       DPTR,#gZDSECMGR_TC_DEVICE_MAX
   \   000028   E4           CLR       A
   \   000029   93           MOVC      A,@A+DPTR
   \   00002A   F8           MOV       R0,A
   \   00002B   7401         MOV       A,#0x1
   \   00002D   93           MOVC      A,@A+DPTR
   \   00002E   F9           MOV       R1,A
   \   00002F   C3           CLR       C
   \   000030   EE           MOV       A,R6
   \   000031   98           SUBB      A,R0
   \   000032   EF           MOV       A,R7
   \   000033   99           SUBB      A,R1
   \   000034   4003         JC        $+5
   \   000036   02....       LJMP      ??APSME_TCLinkKeyInit_1 & 0xFFFF
   2996            {
   2997              // If the item doesn't exist in NV memory, create and initialize
   2998              // it with the default value passed in, either defaultTCLK or 0
   2999              rtrn = osal_nv_item_init( (ZCD_NV_TCLK_TABLE_START + i),
   3000                                         sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry);
   \   000039                ; Setup parameters for call to function osal_nv_item_init
   \   000039   A8..         MOV       R0,?XSP + 0
   \   00003B   A9..         MOV       R1,?XSP + 1
   \   00003D   88..         MOV       ?V2,R0
   \   00003F   89..         MOV       ?V3,R1
   \   000041   78..         MOV       R0,#?V2
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000046   7C13         MOV       R4,#0x13
   \   000048   7D00         MOV       R5,#0x0
   \   00004A   EE           MOV       A,R6
   \   00004B   2411         ADD       A,#0x11
   \   00004D   FA           MOV       R2,A
   \   00004E   EF           MOV       A,R7
   \   00004F   3401         ADDC      A,#0x1
   \   000051   FB           MOV       R3,A
   \   000052   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000055   7402         MOV       A,#0x2
   \   000057   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005A   E9           MOV       A,R1
   \   00005B   F5..         MOV       ?V1,A
   3001          
   3002              if (rtrn == SUCCESS)
   \   00005D   E5..         MOV       A,?V1
   \   00005F   6003         JZ        $+5
   \   000061   02....       LJMP      ??APSME_TCLinkKeyInit_2 & 0xFFFF
   3003              {
   3004                if(setDefault)
   \   000064   E5..         MOV       A,?V0
   \   000066   7003         JNZ       $+5
   \   000068   02....       LJMP      ??APSME_TCLinkKeyInit_3 & 0xFFFF
   3005                {
   3006                  //Force to initialize the entry
   3007                  osal_nv_write(ZCD_NV_TCLK_TABLE_START + i, 0, sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry);
   \   00006B                ; Setup parameters for call to function osal_nv_write
   \   00006B   A8..         MOV       R0,?XSP + 0
   \   00006D   A9..         MOV       R1,?XSP + 1
   \   00006F   88..         MOV       ?V2,R0
   \   000071   89..         MOV       ?V3,R1
   \   000073   78..         MOV       R0,#?V2
   \   000075   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000078   75..13       MOV       ?V2,#0x13
   \   00007B   75..00       MOV       ?V3,#0x0
   \   00007E   78..         MOV       R0,#?V2
   \   000080   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000083   7C00         MOV       R4,#0x0
   \   000085   7D00         MOV       R5,#0x0
   \   000087   EE           MOV       A,R6
   \   000088   2411         ADD       A,#0x11
   \   00008A   FA           MOV       R2,A
   \   00008B   EF           MOV       A,R7
   \   00008C   3401         ADDC      A,#0x1
   \   00008E   FB           MOV       R3,A
   \   00008F   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000092   7404         MOV       A,#0x4
   \   000094   12....       LCALL     ?DEALLOC_XSTACK8
   \   000097   E9           MOV       A,R1
   3008                  TCLinkKeyFrmCntr[i].txFrmCntr = 0;
   \   000098   EE           MOV       A,R6
   \   000099   F8           MOV       R0,A
   \   00009A   EF           MOV       A,R7
   \   00009B   F9           MOV       R1,A
   \   00009C   E8           MOV       A,R0
   \   00009D   75F009       MOV       B,#0x9
   \   0000A0   A4           MUL       AB
   \   0000A1   C8           XCH       A,R0
   \   0000A2   AAF0         MOV       R2,B
   \   0000A4   75F000       MOV       B,#0x0
   \   0000A7   A4           MUL       AB
   \   0000A8   2A           ADD       A,R2
   \   0000A9   FA           MOV       R2,A
   \   0000AA   75F009       MOV       B,#0x9
   \   0000AD   E9           MOV       A,R1
   \   0000AE   A4           MUL       AB
   \   0000AF   2A           ADD       A,R2
   \   0000B0   F9           MOV       R1,A
   \   0000B1   74..         MOV       A,#TCLinkKeyFrmCntr & 0xff
   \   0000B3   28           ADD       A,R0
   \   0000B4   F582         MOV       DPL,A
   \   0000B6   74..         MOV       A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   0000B8   39           ADDC      A,R1
   \   0000B9   F583         MOV       DPH,A
   \   0000BB   7400         MOV       A,#0x0
   \   0000BD   F0           MOVX      @DPTR,A
   \   0000BE   A3           INC       DPTR
   \   0000BF   7400         MOV       A,#0x0
   \   0000C1   F0           MOVX      @DPTR,A
   \   0000C2   A3           INC       DPTR
   \   0000C3   7400         MOV       A,#0x0
   \   0000C5   F0           MOVX      @DPTR,A
   \   0000C6   A3           INC       DPTR
   \   0000C7   7400         MOV       A,#0x0
   \   0000C9   F0           MOVX      @DPTR,A
   3009                  TCLinkKeyFrmCntr[i].rxFrmCntr = 0;
   \   0000CA   EE           MOV       A,R6
   \   0000CB   F8           MOV       R0,A
   \   0000CC   EF           MOV       A,R7
   \   0000CD   F9           MOV       R1,A
   \   0000CE   E8           MOV       A,R0
   \   0000CF   75F009       MOV       B,#0x9
   \   0000D2   A4           MUL       AB
   \   0000D3   C8           XCH       A,R0
   \   0000D4   AAF0         MOV       R2,B
   \   0000D6   75F000       MOV       B,#0x0
   \   0000D9   A4           MUL       AB
   \   0000DA   2A           ADD       A,R2
   \   0000DB   FA           MOV       R2,A
   \   0000DC   75F009       MOV       B,#0x9
   \   0000DF   E9           MOV       A,R1
   \   0000E0   A4           MUL       AB
   \   0000E1   2A           ADD       A,R2
   \   0000E2   F9           MOV       R1,A
   \   0000E3   74..         MOV       A,#(TCLinkKeyFrmCntr + 4) & 0xff
   \   0000E5   28           ADD       A,R0
   \   0000E6   F582         MOV       DPL,A
   \   0000E8   74..         MOV       A,#((TCLinkKeyFrmCntr + 4) >> 8) & 0xff
   \   0000EA   39           ADDC      A,R1
   \   0000EB   F583         MOV       DPH,A
   \   0000ED   7400         MOV       A,#0x0
   \   0000EF   F0           MOVX      @DPTR,A
   \   0000F0   A3           INC       DPTR
   \   0000F1   7400         MOV       A,#0x0
   \   0000F3   F0           MOVX      @DPTR,A
   \   0000F4   A3           INC       DPTR
   \   0000F5   7400         MOV       A,#0x0
   \   0000F7   F0           MOVX      @DPTR,A
   \   0000F8   A3           INC       DPTR
   \   0000F9   7400         MOV       A,#0x0
   \   0000FB   F0           MOVX      @DPTR,A
   \   0000FC   02....       LJMP      ??APSME_TCLinkKeyInit_2 & 0xFFFF
   3010                }
   3011                else
   3012                {
   3013                  // set the Frame counters to 0 to existing keys in NV
   3014                  osal_nv_read( ( ZCD_NV_TCLK_TABLE_START + i), 0,
   3015                                 sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
   \                     ??APSME_TCLinkKeyInit_3:
   \   0000FF                ; Setup parameters for call to function osal_nv_read
   \   0000FF   A8..         MOV       R0,?XSP + 0
   \   000101   A9..         MOV       R1,?XSP + 1
   \   000103   88..         MOV       ?V2,R0
   \   000105   89..         MOV       ?V3,R1
   \   000107   78..         MOV       R0,#?V2
   \   000109   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010C   75..13       MOV       ?V2,#0x13
   \   00010F   75..00       MOV       ?V3,#0x0
   \   000112   78..         MOV       R0,#?V2
   \   000114   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000117   7C00         MOV       R4,#0x0
   \   000119   7D00         MOV       R5,#0x0
   \   00011B   EE           MOV       A,R6
   \   00011C   2411         ADD       A,#0x11
   \   00011E   FA           MOV       R2,A
   \   00011F   EF           MOV       A,R7
   \   000120   3401         ADDC      A,#0x1
   \   000122   FB           MOV       R3,A
   \   000123   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000126   7404         MOV       A,#0x4
   \   000128   12....       LCALL     ?DEALLOC_XSTACK8
   \   00012B   E9           MOV       A,R1
   3016          
   3017                  // increase the value stored in NV
   3018                  TCLKDevEntry.txFrmCntr += ( MAX_TCLK_FRAMECOUNTER_CHANGES + 1 );
   \   00012C   90....       MOV       DPTR,#__Constant_b
   \   00012F   78..         MOV       R0,#?V4
   \   000131   12....       LCALL     ?L_MOV_X
   \   000134   85..82       MOV       DPL,?XSP + 0
   \   000137   85..83       MOV       DPH,?XSP + 1
   \   00013A   78..         MOV       R0,#?V4
   \   00013C   12....       LCALL     ?L_ADD_TO_X
   3019          
   3020                  osal_nv_write( ( ZCD_NV_TCLK_TABLE_START + i), 0,
   3021                                  sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
   \   00013F                ; Setup parameters for call to function osal_nv_write
   \   00013F   A8..         MOV       R0,?XSP + 0
   \   000141   A9..         MOV       R1,?XSP + 1
   \   000143   88..         MOV       ?V2,R0
   \   000145   89..         MOV       ?V3,R1
   \   000147   78..         MOV       R0,#?V2
   \   000149   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014C   75..13       MOV       ?V2,#0x13
   \   00014F   75..00       MOV       ?V3,#0x0
   \   000152   78..         MOV       R0,#?V2
   \   000154   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000157   7C00         MOV       R4,#0x0
   \   000159   7D00         MOV       R5,#0x0
   \   00015B   EE           MOV       A,R6
   \   00015C   2411         ADD       A,#0x11
   \   00015E   FA           MOV       R2,A
   \   00015F   EF           MOV       A,R7
   \   000160   3401         ADDC      A,#0x1
   \   000162   FB           MOV       R3,A
   \   000163   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000166   7404         MOV       A,#0x4
   \   000168   12....       LCALL     ?DEALLOC_XSTACK8
   \   00016B   E9           MOV       A,R1
   3022          
   3023                  // set initial values for counters in RAM
   3024                  TCLinkKeyFrmCntr[i].txFrmCntr = TCLKDevEntry.txFrmCntr;
   \   00016C   85..82       MOV       DPL,?XSP + 0
   \   00016F   85..83       MOV       DPH,?XSP + 1
   \   000172   12....       LCALL     ?XLOAD_R0123
   \   000175   EE           MOV       A,R6
   \   000176   FC           MOV       R4,A
   \   000177   EF           MOV       A,R7
   \   000178   FD           MOV       R5,A
   \   000179   EC           MOV       A,R4
   \   00017A   75F009       MOV       B,#0x9
   \   00017D   A4           MUL       AB
   \   00017E   CC           XCH       A,R4
   \   00017F   85F0..       MOV       ?V2,B
   \   000182   75F000       MOV       B,#0x0
   \   000185   A4           MUL       AB
   \   000186   25..         ADD       A,?V2
   \   000188   F5..         MOV       ?V2,A
   \   00018A   75F009       MOV       B,#0x9
   \   00018D   ED           MOV       A,R5
   \   00018E   A4           MUL       AB
   \   00018F   25..         ADD       A,?V2
   \   000191   FD           MOV       R5,A
   \   000192   74..         MOV       A,#TCLinkKeyFrmCntr & 0xff
   \   000194   2C           ADD       A,R4
   \   000195   F582         MOV       DPL,A
   \   000197   74..         MOV       A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   000199   3D           ADDC      A,R5
   \   00019A   F583         MOV       DPH,A
   \   00019C   12....       LCALL     ?XSTORE_R0123
   3025                  TCLinkKeyFrmCntr[i].rxFrmCntr = TCLKDevEntry.rxFrmCntr;
   \   00019F   7404         MOV       A,#0x4
   \   0001A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A4   12....       LCALL     ?XLOAD_R0123
   \   0001A7   EE           MOV       A,R6
   \   0001A8   FC           MOV       R4,A
   \   0001A9   EF           MOV       A,R7
   \   0001AA   FD           MOV       R5,A
   \   0001AB   EC           MOV       A,R4
   \   0001AC   75F009       MOV       B,#0x9
   \   0001AF   A4           MUL       AB
   \   0001B0   CC           XCH       A,R4
   \   0001B1   85F0..       MOV       ?V2,B
   \   0001B4   75F000       MOV       B,#0x0
   \   0001B7   A4           MUL       AB
   \   0001B8   25..         ADD       A,?V2
   \   0001BA   F5..         MOV       ?V2,A
   \   0001BC   75F009       MOV       B,#0x9
   \   0001BF   ED           MOV       A,R5
   \   0001C0   A4           MUL       AB
   \   0001C1   25..         ADD       A,?V2
   \   0001C3   FD           MOV       R5,A
   \   0001C4   74..         MOV       A,#(TCLinkKeyFrmCntr + 4) & 0xff
   \   0001C6   2C           ADD       A,R4
   \   0001C7   F582         MOV       DPL,A
   \   0001C9   74..         MOV       A,#((TCLinkKeyFrmCntr + 4) >> 8) & 0xff
   \   0001CB   3D           ADDC      A,R5
   \   0001CC   F583         MOV       DPH,A
   \   0001CE   12....       LCALL     ?XSTORE_R0123
   3026                  
   3027                  // Making sure data is cleared and set to default for every key all the time
   3028                  osal_memset( &TCLKDevEntry, 0x00, sizeof(APSME_TCLKDevEntry_t) );
   \   0001D1                ; Setup parameters for call to function osal_memset
   \   0001D1   7C13         MOV       R4,#0x13
   \   0001D3   7D00         MOV       R5,#0x0
   \   0001D5   7900         MOV       R1,#0x0
   \   0001D7   AA..         MOV       R2,?XSP + 0
   \   0001D9   AB..         MOV       R3,?XSP + 1
   \   0001DB   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3029                  TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
   \   0001DE   7410         MOV       A,#0x10
   \   0001E0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E3   74FF         MOV       A,#-0x1
   \   0001E5   F0           MOVX      @DPTR,A
   3030                }
   3031              }
   3032            }
   \                     ??APSME_TCLinkKeyInit_2:
   \   0001E6   0E           INC       R6
   \   0001E7   EE           MOV       A,R6
   \   0001E8   7001         JNZ       ??APSME_TCLinkKeyInit_4
   \   0001EA   0F           INC       R7
   \                     ??APSME_TCLinkKeyInit_4:
   \   0001EB   02....       LJMP      ??APSME_TCLinkKeyInit_0 & 0xFFFF
   3033          
   3034            if(setDefault)
   \                     ??APSME_TCLinkKeyInit_1:
   \   0001EE   E5..         MOV       A,?V0
   \   0001F0   6007         JZ        ??APSME_TCLinkKeyInit_5
   3035            {
   3036              //Force to erase all IC
   3037              APSME_EraseICEntry(NULL);
   \   0001F2                ; Setup parameters for call to function APSME_EraseICEntry
   \   0001F2   7A00         MOV       R2,#0x0
   \   0001F4   7B00         MOV       R3,#0x0
   \   0001F6   12....       LCALL     `??APSME_EraseICEntry::?relay`; Banked call to: APSME_EraseICEntry
   3038            }
   3039          }
   \                     ??APSME_TCLinkKeyInit_5:
   \   0001F9   7413         MOV       A,#0x13
   \   0001FB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001FE   7F08         MOV       R7,#0x8
   \   000200   02....       LJMP      ?BANKED_LEAVE_XDATA
   3040          
   3041          
   3042          /******************************************************************************
   3043           * @fn          APSME_TCLinkKeySync
   3044           *
   3045           * @brief       Sync Trust Center LINK key data.
   3046           *
   3047           * @param       srcAddr - [in] srcAddr
   3048           * @param       si      - [in, out] SSP_Info_t
   3049           *
   3050           * @return      ZStatus_t
   3051           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3052          ZStatus_t APSME_TCLinkKeySync( uint16 srcAddr, SSP_Info_t* si )
   \                     APSME_TCLinkKeySync:
   3053          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 28
   \   000005   74E4         MOV       A,#-0x1c
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V12,R2
   \   00000C   8B..         MOV       ?V13,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   3054            APSME_TCLKDevEntry_t  TCLKDevEntry;
   3055            ZStatus_t             status = ZSecNoKey;
   \   000012   75..A1       MOV       ?V0,#-0x5f
   3056            uint32                *tclkRxFrmCntr;
   3057            uint16                entryIndex = 0xFFFF;
   \   000015   75..FF       MOV       ?V2,#-0x1
   \   000018   75..FF       MOV       ?V3,#-0x1
   3058            uint16                selectedId = gZDSECMGR_TC_DEVICE_MAX;
   \   00001B   90....       MOV       DPTR,#gZDSECMGR_TC_DEVICE_MAX
   \   00001E   E4           CLR       A
   \   00001F   93           MOVC      A,@A+DPTR
   \   000020   C0E0         PUSH      A
   \   000022   7401         MOV       A,#0x1
   \   000024   93           MOVC      A,@A+DPTR
   \   000025   F583         MOV       DPH,A
   \   000027   D082         POP       DPL
   \   000029   8582..       MOV       ?V8,DPL
   \   00002C   8583..       MOV       ?V9,DPH
   3059            uint8                 entryFound = FALSE;
   \   00002F   85..82       MOV       DPL,?XSP + 0
   \   000032   85..83       MOV       DPH,?XSP + 1
   \   000035   7400         MOV       A,#0x0
   \   000037   F0           MOVX      @DPTR,A
   3060            
   3061          #if ZG_BUILD_JOINING_TYPE
   3062            uint8   defaultEntry[Z_EXTADDR_LEN];
   3063          #endif
   3064           
   3065            // Look up the IEEE address of the trust center if it's available
   3066            if ( AddrMgrExtAddrValid( si->extAddr ) == FALSE )
   \   000038                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000038   EE           MOV       A,R6
   \   000039   2406         ADD       A,#0x6
   \   00003B   FA           MOV       R2,A
   \   00003C   E4           CLR       A
   \   00003D   3F           ADDC      A,R7
   \   00003E   FB           MOV       R3,A
   \   00003F   12....       LCALL     `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   000042   E9           MOV       A,R1
   \   000043   700F         JNZ       ??APSME_TCLinkKeySync_0
   3067            {
   3068              APSME_LookupExtAddr( srcAddr, si->extAddr );
   \   000045                ; Setup parameters for call to function APSME_LookupExtAddr
   \   000045   EE           MOV       A,R6
   \   000046   2406         ADD       A,#0x6
   \   000048   FC           MOV       R4,A
   \   000049   E4           CLR       A
   \   00004A   3F           ADDC      A,R7
   \   00004B   FD           MOV       R5,A
   \   00004C   AA..         MOV       R2,?V12
   \   00004E   AB..         MOV       R3,?V13
   \   000050   12....       LCALL     `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
   \   000053   E9           MOV       A,R1
   3069            }
   3070          
   3071            entryIndex = APSME_SearchTCLinkKeyEntry(si->extAddr,&entryFound,&TCLKDevEntry);
   \                     ??APSME_TCLinkKeySync_0:
   \   000054                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   000054   7409         MOV       A,#0x9
   \   000056   12....       LCALL     ?XSTACK_DISP100_8
   \   000059   88..         MOV       ?V4,R0
   \   00005B   89..         MOV       ?V5,R1
   \   00005D   78..         MOV       R0,#?V4
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000062   7402         MOV       A,#0x2
   \   000064   12....       LCALL     ?XSTACK_DISP102_8
   \   000067   EE           MOV       A,R6
   \   000068   2406         ADD       A,#0x6
   \   00006A   FA           MOV       R2,A
   \   00006B   E4           CLR       A
   \   00006C   3F           ADDC      A,R7
   \   00006D   FB           MOV       R3,A
   \   00006E   12....       LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
   \   000071   7402         MOV       A,#0x2
   \   000073   12....       LCALL     ?DEALLOC_XSTACK8
   \   000076   8A..         MOV       ?V4,R2
   \   000078   8B..         MOV       ?V5,R3
   \   00007A   85....       MOV       ?V2,?V4
   \   00007D   85....       MOV       ?V3,?V5
   3072            
   3073          #if ZG_BUILD_JOINING_TYPE
   3074            if(ZG_DEVICE_JOINING_TYPE && !entryFound)
   \   000080   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000083   E0           MOVX      A,@DPTR
   \   000084   6401         XRL       A,#0x1
   \   000086   6008         JZ        ??APSME_TCLinkKeySync_1
   \   000088   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   6402         XRL       A,#0x2
   \   00008E   7041         JNZ       ??APSME_TCLinkKeySync_2
   \                     ??APSME_TCLinkKeySync_1:
   \   000090   85..82       MOV       DPL,?XSP + 0
   \   000093   85..83       MOV       DPH,?XSP + 1
   \   000096   E0           MOVX      A,@DPTR
   \   000097   7038         JNZ       ??APSME_TCLinkKeySync_2
   3075            {
   3076              osal_memset(defaultEntry, 0, Z_EXTADDR_LEN);
   \   000099                ; Setup parameters for call to function osal_memset
   \   000099   7C08         MOV       R4,#0x8
   \   00009B   7D00         MOV       R5,#0x0
   \   00009D   7900         MOV       R1,#0x0
   \   00009F   7401         MOV       A,#0x1
   \   0000A1   12....       LCALL     ?XSTACK_DISP101_8
   \   0000A4   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3077              entryIndex = APSME_SearchTCLinkKeyEntry(defaultEntry,&entryFound,&TCLKDevEntry);
   \   0000A7                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   0000A7   7409         MOV       A,#0x9
   \   0000A9   12....       LCALL     ?XSTACK_DISP100_8
   \   0000AC   88..         MOV       ?V4,R0
   \   0000AE   89..         MOV       ?V5,R1
   \   0000B0   78..         MOV       R0,#?V4
   \   0000B2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B5   7402         MOV       A,#0x2
   \   0000B7   12....       LCALL     ?XSTACK_DISP102_8
   \   0000BA   7403         MOV       A,#0x3
   \   0000BC   12....       LCALL     ?XSTACK_DISP101_8
   \   0000BF   12....       LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
   \   0000C2   7402         MOV       A,#0x2
   \   0000C4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C7   8A..         MOV       ?V4,R2
   \   0000C9   8B..         MOV       ?V5,R3
   \   0000CB   85....       MOV       ?V2,?V4
   \   0000CE   85....       MOV       ?V3,?V5
   3078            }
   3079          #endif
   3080            
   3081            if(entryFound)
   \                     ??APSME_TCLinkKeySync_2:
   \   0000D1   85..82       MOV       DPL,?XSP + 0
   \   0000D4   85..83       MOV       DPH,?XSP + 1
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   7003         JNZ       $+5
   \   0000DA   02....       LJMP      ??APSME_TCLinkKeySync_3 & 0xFFFF
   3082            {
   3083              status = ZSuccess;
   \   0000DD   75..00       MOV       ?V0,#0x0
   3084              
   3085              selectedId = entryIndex - ZCD_NV_TCLK_TABLE_START;
   \   0000E0   E5..         MOV       A,?V2
   \   0000E2   24EF         ADD       A,#-0x11
   \   0000E4   F8           MOV       R0,A
   \   0000E5   E5..         MOV       A,?V3
   \   0000E7   34FE         ADDC      A,#-0x2
   \   0000E9   F9           MOV       R1,A
   \   0000EA   88..         MOV       ?V8,R0
   \   0000EC   89..         MOV       ?V9,R1
   3086          
   3087              switch(TCLKDevEntry.keyAttributes)
   \   0000EE   7419         MOV       A,#0x19
   \   0000F0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F3   E0           MOVX      A,@DPTR
   \   0000F4   6069         JZ        ??APSME_TCLinkKeySync_4
   \   0000F6   14           DEC       A
   \   0000F7   6014         JZ        ??APSME_TCLinkKeySync_5
   \   0000F9   14           DEC       A
   \   0000FA   7003         JNZ       $+5
   \   0000FC   02....       LJMP      ??APSME_TCLinkKeySync_6 & 0xFFFF
   \   0000FF   2405         ADD       A,#0x5
   \   000101   7003         JNZ       $+5
   \   000103   02....       LJMP      ??APSME_TCLinkKeySync_6 & 0xFFFF
   \   000106   24FE         ADD       A,#-0x2
   \   000108   6026         JZ        ??APSME_TCLinkKeySync_7
   \   00010A   02....       LJMP      ??APSME_TCLinkKeySync_8 & 0xFFFF
   3088              {
   3089                case ZG_UNVERIFIED_KEY:
   3090                  #if ZG_BUILD_JOINING_TYPE
   3091                  if(ZG_DEVICE_JOINING_TYPE)
   \                     ??APSME_TCLinkKeySync_5:
   \   00010D   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000110   E0           MOVX      A,@DPTR
   \   000111   6401         XRL       A,#0x1
   \   000113   6008         JZ        ??APSME_TCLinkKeySync_9
   \   000115   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000118   E0           MOVX      A,@DPTR
   \   000119   6402         XRL       A,#0x2
   \   00011B   7013         JNZ       ??APSME_TCLinkKeySync_7
   3092                  {   
   3093                    si->keyNvId = ZCD_NV_TCLK_JOIN_DEV;
   \                     ??APSME_TCLinkKeySync_9:
   \   00011D   EE           MOV       A,R6
   \   00011E   240F         ADD       A,#0xf
   \   000120   F582         MOV       DPL,A
   \   000122   E4           CLR       A
   \   000123   3F           ADDC      A,R7
   \   000124   F583         MOV       DPH,A
   \   000126   7402         MOV       A,#0x2
   \   000128   F0           MOVX      @DPTR,A
   \   000129   A3           INC       DPTR
   \   00012A   7401         MOV       A,#0x1
   \   00012C   F0           MOVX      @DPTR,A
   3094                    break;
   \   00012D   02....       LJMP      ??APSME_TCLinkKeySync_8 & 0xFFFF
   3095                  }
   3096                  #endif
   3097                case ZG_DEFAULT_KEY:
   3098                  if(ZG_DEVICE_JOINING_TYPE)
   \                     ??APSME_TCLinkKeySync_7:
   \   000130   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000133   E0           MOVX      A,@DPTR
   \   000134   6401         XRL       A,#0x1
   \   000136   6008         JZ        ??APSME_TCLinkKeySync_10
   \   000138   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00013B   E0           MOVX      A,@DPTR
   \   00013C   6402         XRL       A,#0x2
   \   00013E   700C         JNZ       ??APSME_TCLinkKeySync_11
   3099                  { 
   3100                    //If default was found, then it is joining as FN, then try distributed key as well
   3101                    si->distributedKeyTry = TRUE;
   \                     ??APSME_TCLinkKeySync_10:
   \   000140   EE           MOV       A,R6
   \   000141   2420         ADD       A,#0x20
   \   000143   F582         MOV       DPL,A
   \   000145   E4           CLR       A
   \   000146   3F           ADDC      A,R7
   \   000147   F583         MOV       DPH,A
   \   000149   7401         MOV       A,#0x1
   \   00014B   F0           MOVX      @DPTR,A
   3102                  }
   3103                  si->keyNvId = ZCD_NV_TCLK_DEFAULT;
   \                     ??APSME_TCLinkKeySync_11:
   \   00014C   EE           MOV       A,R6
   \   00014D   240F         ADD       A,#0xf
   \   00014F   F582         MOV       DPL,A
   \   000151   E4           CLR       A
   \   000152   3F           ADDC      A,R7
   \   000153   F583         MOV       DPH,A
   \   000155   7403         MOV       A,#0x3
   \   000157   F0           MOVX      @DPTR,A
   \   000158   A3           INC       DPTR
   \   000159   7401         MOV       A,#0x1
   \   00015B   F0           MOVX      @DPTR,A
   3104                break;
   \   00015C   02....       LJMP      ??APSME_TCLinkKeySync_8 & 0xFFFF
   3105                case ZG_PROVISIONAL_KEY:
   3106                  si->keyNvId = ZCD_NV_TCLK_IC_TABLE_START + TCLKDevEntry.SeedShift_IcIndex;
   \                     ??APSME_TCLinkKeySync_4:
   \   00015F   741B         MOV       A,#0x1b
   \   000161   12....       LCALL     ?XSTACK_DISP0_8
   \   000164   E0           MOVX      A,@DPTR
   \   000165   F8           MOV       R0,A
   \   000166   7900         MOV       R1,#0x0
   \   000168   E8           MOV       A,R0
   \   000169   2404         ADD       A,#0x4
   \   00016B   F8           MOV       R0,A
   \   00016C   E9           MOV       A,R1
   \   00016D   3401         ADDC      A,#0x1
   \   00016F   F9           MOV       R1,A
   \   000170   EE           MOV       A,R6
   \   000171   240F         ADD       A,#0xf
   \   000173   F582         MOV       DPL,A
   \   000175   E4           CLR       A
   \   000176   3F           ADDC      A,R7
   \   000177   F583         MOV       DPH,A
   \   000179   E8           MOV       A,R0
   \   00017A   F0           MOVX      @DPTR,A
   \   00017B   A3           INC       DPTR
   \   00017C   E9           MOV       A,R1
   \   00017D   F0           MOVX      @DPTR,A
   3107                  //Attempt to use default keys (centralized and distributed) if IC fails?
   3108                  si->distributedKeyTry = gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY;
   \   00017E   90....       MOV       DPTR,#gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY
   \   000181   E0           MOVX      A,@DPTR
   \   000182   C0E0         PUSH      A
   \   000184   EE           MOV       A,R6
   \   000185   2420         ADD       A,#0x20
   \   000187   F582         MOV       DPL,A
   \   000189   E4           CLR       A
   \   00018A   3F           ADDC      A,R7
   \   00018B   F583         MOV       DPH,A
   \   00018D   D0E0         POP       A
   \   00018F   F0           MOVX      @DPTR,A
   3109                  si->defaultKeyTry = gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY;
   \   000190   90....       MOV       DPTR,#gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY
   \   000193   E0           MOVX      A,@DPTR
   \   000194   C0E0         PUSH      A
   \   000196   EE           MOV       A,R6
   \   000197   2421         ADD       A,#0x21
   \   000199   F582         MOV       DPL,A
   \   00019B   E4           CLR       A
   \   00019C   3F           ADDC      A,R7
   \   00019D   F583         MOV       DPH,A
   \   00019F   D0E0         POP       A
   \   0001A1   F0           MOVX      @DPTR,A
   3110                break;
   \   0001A2   02....       LJMP      ??APSME_TCLinkKeySync_8 & 0xFFFF
   3111                case ZG_VERIFIED_KEY:
   3112                case ZG_NON_R21_NWK_JOINED:
   3113                  //Only verify the frame counter for Verified keys, or keys used with non R21 TC
   3114                  tclkRxFrmCntr = &TCLinkKeyFrmCntr[selectedId].rxFrmCntr;
   \                     ??APSME_TCLinkKeySync_6:
   \   0001A5   A8..         MOV       R0,?V8
   \   0001A7   A9..         MOV       R1,?V9
   \   0001A9   E8           MOV       A,R0
   \   0001AA   75F009       MOV       B,#0x9
   \   0001AD   A4           MUL       AB
   \   0001AE   C8           XCH       A,R0
   \   0001AF   AAF0         MOV       R2,B
   \   0001B1   75F000       MOV       B,#0x0
   \   0001B4   A4           MUL       AB
   \   0001B5   2A           ADD       A,R2
   \   0001B6   FA           MOV       R2,A
   \   0001B7   75F009       MOV       B,#0x9
   \   0001BA   E9           MOV       A,R1
   \   0001BB   A4           MUL       AB
   \   0001BC   2A           ADD       A,R2
   \   0001BD   F9           MOV       R1,A
   \   0001BE   74..         MOV       A,#(TCLinkKeyFrmCntr + 4) & 0xff
   \   0001C0   28           ADD       A,R0
   \   0001C1   F8           MOV       R0,A
   \   0001C2   74..         MOV       A,#((TCLinkKeyFrmCntr + 4) >> 8) & 0xff
   \   0001C4   39           ADDC      A,R1
   \   0001C5   F9           MOV       R1,A
   \   0001C6   88..         MOV       ?V10,R0
   \   0001C8   89..         MOV       ?V11,R1
   3115          
   3116                  if ( si->frmCntr >= *tclkRxFrmCntr )
   \   0001CA   85..82       MOV       DPL,?V10
   \   0001CD   85..83       MOV       DPH,?V11
   \   0001D0   78..         MOV       R0,#?V4
   \   0001D2   12....       LCALL     ?L_MOV_X
   \   0001D5   EE           MOV       A,R6
   \   0001D6   2412         ADD       A,#0x12
   \   0001D8   F582         MOV       DPL,A
   \   0001DA   E4           CLR       A
   \   0001DB   3F           ADDC      A,R7
   \   0001DC   F583         MOV       DPH,A
   \   0001DE   78..         MOV       R0,#?V4
   \   0001E0   12....       LCALL     ?UL_GT_X
   \   0001E3   407F         JC        ??APSME_TCLinkKeySync_12
   3117                  {
   3118                    // update the rx frame counter
   3119                    *tclkRxFrmCntr = si->frmCntr + 1;
   \   0001E5   EE           MOV       A,R6
   \   0001E6   2412         ADD       A,#0x12
   \   0001E8   F582         MOV       DPL,A
   \   0001EA   E4           CLR       A
   \   0001EB   3F           ADDC      A,R7
   \   0001EC   F583         MOV       DPH,A
   \   0001EE   78..         MOV       R0,#?V4
   \   0001F0   12....       LCALL     ?L_MOV_X
   \   0001F3   90....       MOV       DPTR,#__Constant_1
   \   0001F6   78..         MOV       R0,#?V4
   \   0001F8   12....       LCALL     ?L_ADD_X
   \   0001FB   AA..         MOV       R2,?V4
   \   0001FD   AB..         MOV       R3,?V5
   \   0001FF   AC..         MOV       R4,?V6
   \   000201   AD..         MOV       R5,?V7
   \   000203   85..82       MOV       DPL,?V10
   \   000206   85..83       MOV       DPH,?V11
   \   000209   EA           MOV       A,R2
   \   00020A   F0           MOVX      @DPTR,A
   \   00020B   A3           INC       DPTR
   \   00020C   EB           MOV       A,R3
   \   00020D   F0           MOVX      @DPTR,A
   \   00020E   A3           INC       DPTR
   \   00020F   EC           MOV       A,R4
   \   000210   F0           MOVX      @DPTR,A
   \   000211   A3           INC       DPTR
   \   000212   ED           MOV       A,R5
   \   000213   F0           MOVX      @DPTR,A
   3120                    status = ZSuccess;
   \   000214   75..00       MOV       ?V0,#0x0
   3121                    
   3122                    #if ZG_BUILD_JOINING_TYPE
   3123                    if(ZG_DEVICE_JOINING_TYPE)
   \   000217   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00021A   E0           MOVX      A,@DPTR
   \   00021B   6401         XRL       A,#0x1
   \   00021D   6008         JZ        ??APSME_TCLinkKeySync_13
   \   00021F   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000222   E0           MOVX      A,@DPTR
   \   000223   6402         XRL       A,#0x2
   \   000225   7012         JNZ       ??APSME_TCLinkKeySync_14
   3124                    {   
   3125                      si->keyNvId = ZCD_NV_TCLK_JOIN_DEV;
   \                     ??APSME_TCLinkKeySync_13:
   \   000227   EE           MOV       A,R6
   \   000228   240F         ADD       A,#0xf
   \   00022A   F582         MOV       DPL,A
   \   00022C   E4           CLR       A
   \   00022D   3F           ADDC      A,R7
   \   00022E   F583         MOV       DPH,A
   \   000230   7402         MOV       A,#0x2
   \   000232   F0           MOVX      @DPTR,A
   \   000233   A3           INC       DPTR
   \   000234   7401         MOV       A,#0x1
   \   000236   F0           MOVX      @DPTR,A
   3126                      break;
   \   000237   804F         SJMP      ??APSME_TCLinkKeySync_8
   3127                    }
   3128                    #endif
   3129                    #if ZG_BUILD_COORDINATOR_TYPE
   3130                    if(ZG_DEVICE_COORDINATOR_TYPE)
   3131                    {
   3132                      si->keyNvId = ZCD_NV_TCLK_SEED;
   3133                      si->seedShift = TCLKDevEntry.SeedShift_IcIndex;
   3134                    }
   3135                    #endif
   3136                    osal_memcpy(si->dstExtAddr, TCLKDevEntry.extAddr,Z_EXTADDR_LEN);
   \                     ??APSME_TCLinkKeySync_14:
   \   000239                ; Setup parameters for call to function osal_memcpy
   \   000239   7411         MOV       A,#0x11
   \   00023B   12....       LCALL     ?XSTACK_DISP0_8
   \   00023E   A982         MOV       R1,DPL
   \   000240   AA83         MOV       R2,DPH
   \   000242   7B00         MOV       R3,#0x0
   \   000244   89..         MOV       ?V4,R1
   \   000246   8A..         MOV       ?V5,R2
   \   000248   8B..         MOV       ?V6,R3
   \   00024A   78..         MOV       R0,#?V4
   \   00024C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00024F   7C08         MOV       R4,#0x8
   \   000251   7D00         MOV       R5,#0x0
   \   000253   EE           MOV       A,R6
   \   000254   2418         ADD       A,#0x18
   \   000256   FA           MOV       R2,A
   \   000257   E4           CLR       A
   \   000258   3F           ADDC      A,R7
   \   000259   FB           MOV       R3,A
   \   00025A   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00025D   7403         MOV       A,#0x3
   \   00025F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000262   8024         SJMP      ??APSME_TCLinkKeySync_8
   3137                  }
   3138                  else
   3139                  {
   3140                    status = ZSecOldFrmCount;
   \                     ??APSME_TCLinkKeySync_12:
   \   000264   75..A2       MOV       ?V0,#-0x5e
   3141                  }
   3142                break;
   \   000267   801F         SJMP      ??APSME_TCLinkKeySync_8
   3143                default:
   3144                  //This should not happen
   3145                break;
   3146              }
   3147            }
   3148            else
   3149            {
   3150              if (ZG_DEVICE_COORDINATOR_TYPE) 
   \                     ??APSME_TCLinkKeySync_3:
   \   000269   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00026C   E0           MOVX      A,@DPTR
   \   00026D   7019         JNZ       ??APSME_TCLinkKeySync_8
   3151              {    
   3152                if(bdb_doTrustCenterRequireKeyExchange() == FALSE)
   \   00026F                ; Setup parameters for call to function bdb_doTrustCenterRequireKeyExchange
   \   00026F   12....       LCALL     `??bdb_doTrustCenterRequireKeyExchange::?relay`; Banked call to: bdb_doTrustCenterRequireKeyExchange
   \   000272   E9           MOV       A,R1
   \   000273   7013         JNZ       ??APSME_TCLinkKeySync_8
   3153                {
   3154                  //If the TCLK exchange is not mandated, and the key cannot be found for this device, 
   3155                  //is because we have erased the entry. Try with default key.
   3156                  si->keyNvId = ZCD_NV_TCLK_DEFAULT;
   \   000275   EE           MOV       A,R6
   \   000276   240F         ADD       A,#0xf
   \   000278   F582         MOV       DPL,A
   \   00027A   E4           CLR       A
   \   00027B   3F           ADDC      A,R7
   \   00027C   F583         MOV       DPH,A
   \   00027E   7403         MOV       A,#0x3
   \   000280   F0           MOVX      @DPTR,A
   \   000281   A3           INC       DPTR
   \   000282   7401         MOV       A,#0x1
   \   000284   F0           MOVX      @DPTR,A
   3157                  status = ZSuccess;
   \   000285   75..00       MOV       ?V0,#0x0
   3158                }
   3159              }
   3160            }
   3161            
   3162            
   3163            return status;
   \                     ??APSME_TCLinkKeySync_8:
   \   000288   A9..         MOV       R1,?V0
   \   00028A   741C         MOV       A,#0x1c
   \   00028C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00028F   7F0E         MOV       R7,#0xe
   \   000291   02....       LJMP      ?BANKED_LEAVE_XDATA
   3164          }
   3165          
   3166          /******************************************************************************
   3167           * @fn          APSME_TCLinkKeyLoad
   3168           *
   3169           * @brief       Load Trust Center LINK key data.
   3170           *
   3171           * @param       dstAddr - [in] dstAddr
   3172           * @param       si      - [in, out] SSP_Info_t
   3173           *
   3174           * @return      ZStatus_t
   3175           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3176          ZStatus_t APSME_TCLinkKeyLoad( uint16 dstAddr, SSP_Info_t* si )
   \                     APSME_TCLinkKeyLoad:
   3177          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 33
   \   000005   74DF         MOV       A,#-0x21
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V14,R2
   \   00000C   8B..         MOV       ?V15,R3
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
   3178            APSME_TCLKDevEntry_t TCLKDevEntry;
   3179            AddrMgrEntry_t       addrEntry;
   3180            ZStatus_t            status = ZSecNoKey;
   \   000012   75..A1       MOV       ?V2,#-0x5f
   3181            uint16               entryIndex;
   3182            uint8                extAddrFound;
   3183            uint8                found;
   3184          
   3185            
   3186            // Look up the ami of the srcAddr if available
   3187            addrEntry.user    = ADDRMGR_USER_DEFAULT;
   \   000015   7414         MOV       A,#0x14
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   7400         MOV       A,#0x0
   \   00001C   F0           MOVX      @DPTR,A
   3188            addrEntry.nwkAddr = dstAddr;
   \   00001D   7415         MOV       A,#0x15
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   E5..         MOV       A,?V14
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   E5..         MOV       A,?V15
   \   000028   F0           MOVX      @DPTR,A
   3189          
   3190            extAddrFound = AddrMgrExtAddrValid( si->extAddr );
   \   000029                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000029   E5..         MOV       A,?V0
   \   00002B   2406         ADD       A,#0x6
   \   00002D   FA           MOV       R2,A
   \   00002E   E4           CLR       A
   \   00002F   35..         ADDC      A,?V1
   \   000031   FB           MOV       R3,A
   \   000032   12....       LCALL     `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   000035   E9           MOV       A,R1
   \   000036   F5..         MOV       ?V3,A
   3191            
   3192            if(extAddrFound)
   \   000038   E5..         MOV       A,?V3
   \   00003A   7003         JNZ       $+5
   \   00003C   02....       LJMP      ??APSME_TCLinkKeyLoad_0 & 0xFFFF
   3193            {
   3194              entryIndex = APSME_SearchTCLinkKeyEntry(si->extAddr,&found,&TCLKDevEntry);
   \   00003F                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   00003F   7401         MOV       A,#0x1
   \   000041   12....       LCALL     ?XSTACK_DISP100_8
   \   000044   88..         MOV       ?V4,R0
   \   000046   89..         MOV       ?V5,R1
   \   000048   78..         MOV       R0,#?V4
   \   00004A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004D   7402         MOV       A,#0x2
   \   00004F   12....       LCALL     ?XSTACK_DISP102_8
   \   000052   E5..         MOV       A,?V0
   \   000054   2406         ADD       A,#0x6
   \   000056   FA           MOV       R2,A
   \   000057   E4           CLR       A
   \   000058   35..         ADDC      A,?V1
   \   00005A   FB           MOV       R3,A
   \   00005B   12....       LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
   \   00005E   7402         MOV       A,#0x2
   \   000060   12....       LCALL     ?DEALLOC_XSTACK8
   \   000063   8A..         MOV       ?V4,R2
   \   000065   8B..         MOV       ?V5,R3
   \   000067   85....       MOV       ?V12,?V4
   \   00006A   85....       MOV       ?V13,?V5
   3195              if(entryIndex != 0xFFFF)
   \   00006D   74FF         MOV       A,#-0x1
   \   00006F   65..         XRL       A,?V12
   \   000071   7004         JNZ       ??APSME_TCLinkKeyLoad_1
   \   000073   74FF         MOV       A,#-0x1
   \   000075   65..         XRL       A,?V13
   \                     ??APSME_TCLinkKeyLoad_1:
   \   000077   7003         JNZ       $+5
   \   000079   02....       LJMP      ??APSME_TCLinkKeyLoad_2 & 0xFFFF
   3196              {
   3197                uint16 i = entryIndex - ZCD_NV_TCLK_TABLE_START;
   \   00007C   E5..         MOV       A,?V12
   \   00007E   24EF         ADD       A,#-0x11
   \   000080   FE           MOV       R6,A
   \   000081   E5..         MOV       A,?V13
   \   000083   34FE         ADDC      A,#-0x2
   \   000085   FF           MOV       R7,A
   3198                
   3199                if(found)
   \   000086   85..82       MOV       DPL,?XSP + 0
   \   000089   85..83       MOV       DPH,?XSP + 1
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   7003         JNZ       $+5
   \   00008F   02....       LJMP      ??APSME_TCLinkKeyLoad_3 & 0xFFFF
   3200                {
   3201                  switch(TCLKDevEntry.keyAttributes)
   \   000092   7411         MOV       A,#0x11
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   E0           MOVX      A,@DPTR
   \   000098   604B         JZ        ??APSME_TCLinkKeyLoad_4
   \   00009A   14           DEC       A
   \   00009B   600E         JZ        ??APSME_TCLinkKeyLoad_5
   \   00009D   14           DEC       A
   \   00009E   6069         JZ        ??APSME_TCLinkKeyLoad_6
   \   0000A0   2405         ADD       A,#0x5
   \   0000A2   602C         JZ        ??APSME_TCLinkKeyLoad_7
   \   0000A4   24FE         ADD       A,#-0x2
   \   0000A6   6028         JZ        ??APSME_TCLinkKeyLoad_7
   \   0000A8   02....       LJMP      ??APSME_TCLinkKeyLoad_8 & 0xFFFF
   3202                  {
   3203                    case ZG_UNVERIFIED_KEY:
   3204                      #if ZG_BUILD_JOINING_TYPE
   3205                      if(ZG_DEVICE_JOINING_TYPE)
   \                     ??APSME_TCLinkKeyLoad_5:
   \   0000AB   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   6401         XRL       A,#0x1
   \   0000B1   6008         JZ        ??APSME_TCLinkKeyLoad_9
   \   0000B3   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000B6   E0           MOVX      A,@DPTR
   \   0000B7   6402         XRL       A,#0x2
   \   0000B9   7015         JNZ       ??APSME_TCLinkKeyLoad_7
   3206                      {   
   3207                        si->keyNvId = ZCD_NV_TCLK_JOIN_DEV;
   \                     ??APSME_TCLinkKeyLoad_9:
   \   0000BB   E5..         MOV       A,?V0
   \   0000BD   240F         ADD       A,#0xf
   \   0000BF   F582         MOV       DPL,A
   \   0000C1   E4           CLR       A
   \   0000C2   35..         ADDC      A,?V1
   \   0000C4   F583         MOV       DPH,A
   \   0000C6   7402         MOV       A,#0x2
   \   0000C8   F0           MOVX      @DPTR,A
   \   0000C9   A3           INC       DPTR
   \   0000CA   7401         MOV       A,#0x1
   \   0000CC   F0           MOVX      @DPTR,A
   3208                        break;
   \   0000CD   02....       LJMP      ??APSME_TCLinkKeyLoad_8 & 0xFFFF
   3209                      }
   3210                      #endif
   3211                    case ZG_DEFAULT_KEY:
   3212                    case ZG_NON_R21_NWK_JOINED:
   3213                      si->keyNvId = ZCD_NV_TCLK_DEFAULT;
   \                     ??APSME_TCLinkKeyLoad_7:
   \   0000D0   E5..         MOV       A,?V0
   \   0000D2   240F         ADD       A,#0xf
   \   0000D4   F582         MOV       DPL,A
   \   0000D6   E4           CLR       A
   \   0000D7   35..         ADDC      A,?V1
   \   0000D9   F583         MOV       DPH,A
   \   0000DB   7403         MOV       A,#0x3
   \   0000DD   F0           MOVX      @DPTR,A
   \   0000DE   A3           INC       DPTR
   \   0000DF   7401         MOV       A,#0x1
   \   0000E1   F0           MOVX      @DPTR,A
   3214                    break;
   \   0000E2   02....       LJMP      ??APSME_TCLinkKeyLoad_8 & 0xFFFF
   3215                    case ZG_PROVISIONAL_KEY:
   3216                      si->keyNvId = ZCD_NV_TCLK_IC_TABLE_START + TCLKDevEntry.SeedShift_IcIndex;
   \                     ??APSME_TCLinkKeyLoad_4:
   \   0000E5   7413         MOV       A,#0x13
   \   0000E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   F8           MOV       R0,A
   \   0000EC   7900         MOV       R1,#0x0
   \   0000EE   E8           MOV       A,R0
   \   0000EF   2404         ADD       A,#0x4
   \   0000F1   F8           MOV       R0,A
   \   0000F2   E9           MOV       A,R1
   \   0000F3   3401         ADDC      A,#0x1
   \   0000F5   F9           MOV       R1,A
   \   0000F6   E5..         MOV       A,?V0
   \   0000F8   240F         ADD       A,#0xf
   \   0000FA   F582         MOV       DPL,A
   \   0000FC   E4           CLR       A
   \   0000FD   35..         ADDC      A,?V1
   \   0000FF   F583         MOV       DPH,A
   \   000101   E8           MOV       A,R0
   \   000102   F0           MOVX      @DPTR,A
   \   000103   A3           INC       DPTR
   \   000104   E9           MOV       A,R1
   \   000105   F0           MOVX      @DPTR,A
   3217                    break;
   \   000106   02....       LJMP      ??APSME_TCLinkKeyLoad_8 & 0xFFFF
   3218                    case ZG_VERIFIED_KEY:
   3219                      #if ZG_BUILD_JOINING_TYPE
   3220                      if(ZG_DEVICE_JOINING_TYPE)
   \                     ??APSME_TCLinkKeyLoad_6:
   \   000109   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00010C   E0           MOVX      A,@DPTR
   \   00010D   6401         XRL       A,#0x1
   \   00010F   6008         JZ        ??APSME_TCLinkKeyLoad_10
   \   000111   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000114   E0           MOVX      A,@DPTR
   \   000115   6402         XRL       A,#0x2
   \   000117   7015         JNZ       ??APSME_TCLinkKeyLoad_11
   3221                      {   
   3222                        si->keyNvId = ZCD_NV_TCLK_JOIN_DEV;
   \                     ??APSME_TCLinkKeyLoad_10:
   \   000119   E5..         MOV       A,?V0
   \   00011B   240F         ADD       A,#0xf
   \   00011D   F582         MOV       DPL,A
   \   00011F   E4           CLR       A
   \   000120   35..         ADDC      A,?V1
   \   000122   F583         MOV       DPH,A
   \   000124   7402         MOV       A,#0x2
   \   000126   F0           MOVX      @DPTR,A
   \   000127   A3           INC       DPTR
   \   000128   7401         MOV       A,#0x1
   \   00012A   F0           MOVX      @DPTR,A
   3223                        break;
   \   00012B   02....       LJMP      ??APSME_TCLinkKeyLoad_8 & 0xFFFF
   3224                      }
   3225                      #endif
   3226                      #if ZG_BUILD_COORDINATOR_TYPE
   3227                      if(ZG_DEVICE_COORDINATOR_TYPE)
   3228                      {
   3229                        si->keyNvId = ZCD_NV_TCLK_SEED;
   3230                        si->seedShift = TCLKDevEntry.SeedShift_IcIndex;
   3231                      }
   3232                      #endif
   3233                      osal_memcpy(si->dstExtAddr, TCLKDevEntry.extAddr,Z_EXTADDR_LEN);
   \                     ??APSME_TCLinkKeyLoad_11:
   \   00012E                ; Setup parameters for call to function osal_memcpy
   \   00012E   7409         MOV       A,#0x9
   \   000130   12....       LCALL     ?XSTACK_DISP0_8
   \   000133   A982         MOV       R1,DPL
   \   000135   AA83         MOV       R2,DPH
   \   000137   7B00         MOV       R3,#0x0
   \   000139   89..         MOV       ?V4,R1
   \   00013B   8A..         MOV       ?V5,R2
   \   00013D   8B..         MOV       ?V6,R3
   \   00013F   78..         MOV       R0,#?V4
   \   000141   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000144   7C08         MOV       R4,#0x8
   \   000146   7D00         MOV       R5,#0x0
   \   000148   E5..         MOV       A,?V0
   \   00014A   2418         ADD       A,#0x18
   \   00014C   FA           MOV       R2,A
   \   00014D   E4           CLR       A
   \   00014E   35..         ADDC      A,?V1
   \   000150   FB           MOV       R3,A
   \   000151   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000154   7403         MOV       A,#0x3
   \   000156   12....       LCALL     ?DEALLOC_XSTACK8
   3234                    break;
   \   000159   02....       LJMP      ??APSME_TCLinkKeyLoad_8 & 0xFFFF
   3235                    default:
   3236                      //This should not happen
   3237                    break;
   3238                  }
   3239                }
   3240                //Not found, then create an entry for it. Adding the device to the TCLKDev Entries for first time
   3241                else
   3242                {
   3243                  //Initialize the entry
   3244                  osal_memcpy(TCLKDevEntry.extAddr, si->extAddr, Z_EXTADDR_LEN);
   \                     ??APSME_TCLinkKeyLoad_3:
   \   00015C                ; Setup parameters for call to function osal_memcpy
   \   00015C   E5..         MOV       A,?V0
   \   00015E   2406         ADD       A,#0x6
   \   000160   F5..         MOV       ?V4,A
   \   000162   E4           CLR       A
   \   000163   35..         ADDC      A,?V1
   \   000165   F5..         MOV       ?V5,A
   \   000167   75..00       MOV       ?V6,#0x0
   \   00016A   78..         MOV       R0,#?V4
   \   00016C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00016F   7C08         MOV       R4,#0x8
   \   000171   7D00         MOV       R5,#0x0
   \   000173   740C         MOV       A,#0xc
   \   000175   12....       LCALL     ?XSTACK_DISP0_8
   \   000178   AA82         MOV       R2,DPL
   \   00017A   AB83         MOV       R3,DPH
   \   00017C   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00017F   7403         MOV       A,#0x3
   \   000181   12....       LCALL     ?DEALLOC_XSTACK8
   3245                  TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
   \   000184   7411         MOV       A,#0x11
   \   000186   12....       LCALL     ?XSTACK_DISP0_8
   \   000189   74FF         MOV       A,#-0x1
   \   00018B   F0           MOVX      @DPTR,A
   3246                  TCLKDevEntry.keyType = ZG_GLOBAL_LINK_KEY;
   \   00018C   7412         MOV       A,#0x12
   \   00018E   12....       LCALL     ?XSTACK_DISP0_8
   \   000191   7401         MOV       A,#0x1
   \   000193   F0           MOVX      @DPTR,A
   3247                  //Create the entry with a random shift of the seed. Validate the maximum shift of the seed which is 15
   3248                  TCLKDevEntry.SeedShift_IcIndex = osal_rand() & 0x000F;
   \   000194                ; Setup parameters for call to function osal_rand
   \   000194   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000197   EA           MOV       A,R2
   \   000198   540F         ANL       A,#0xf
   \   00019A   C0E0         PUSH      A
   \   00019C   7413         MOV       A,#0x13
   \   00019E   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A1   D0E0         POP       A
   \   0001A3   F0           MOVX      @DPTR,A
   3249                  TCLKDevEntry.txFrmCntr = 0;
   \   0001A4   7401         MOV       A,#0x1
   \   0001A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A9   7400         MOV       A,#0x0
   \   0001AB   F0           MOVX      @DPTR,A
   \   0001AC   A3           INC       DPTR
   \   0001AD   7400         MOV       A,#0x0
   \   0001AF   F0           MOVX      @DPTR,A
   \   0001B0   A3           INC       DPTR
   \   0001B1   7400         MOV       A,#0x0
   \   0001B3   F0           MOVX      @DPTR,A
   \   0001B4   A3           INC       DPTR
   \   0001B5   7400         MOV       A,#0x0
   \   0001B7   F0           MOVX      @DPTR,A
   3250                  TCLKDevEntry.rxFrmCntr = 0;
   \   0001B8   7405         MOV       A,#0x5
   \   0001BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BD   7400         MOV       A,#0x0
   \   0001BF   F0           MOVX      @DPTR,A
   \   0001C0   A3           INC       DPTR
   \   0001C1   7400         MOV       A,#0x0
   \   0001C3   F0           MOVX      @DPTR,A
   \   0001C4   A3           INC       DPTR
   \   0001C5   7400         MOV       A,#0x0
   \   0001C7   F0           MOVX      @DPTR,A
   \   0001C8   A3           INC       DPTR
   \   0001C9   7400         MOV       A,#0x0
   \   0001CB   F0           MOVX      @DPTR,A
   3251                  //save entry in nv
   3252                  osal_nv_write(entryIndex,0,sizeof(APSME_TCLKDevEntry_t),&TCLKDevEntry);
   \   0001CC                ; Setup parameters for call to function osal_nv_write
   \   0001CC   7401         MOV       A,#0x1
   \   0001CE   12....       LCALL     ?XSTACK_DISP100_8
   \   0001D1   88..         MOV       ?V4,R0
   \   0001D3   89..         MOV       ?V5,R1
   \   0001D5   78..         MOV       R0,#?V4
   \   0001D7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001DA   75..13       MOV       ?V4,#0x13
   \   0001DD   75..00       MOV       ?V5,#0x0
   \   0001E0   78..         MOV       R0,#?V4
   \   0001E2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001E5   7C00         MOV       R4,#0x0
   \   0001E7   7D00         MOV       R5,#0x0
   \   0001E9   AA..         MOV       R2,?V12
   \   0001EB   AB..         MOV       R3,?V13
   \   0001ED   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0001F0   7404         MOV       A,#0x4
   \   0001F2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001F5   E9           MOV       A,R1
   3253                  //Initialize framecounter
   3254                  osal_memset(&TCLinkKeyFrmCntr[i],0,sizeof(APSME_TCLinkKeyFrmCntr_t));
   \   0001F6                ; Setup parameters for call to function osal_memset
   \   0001F6   7C09         MOV       R4,#0x9
   \   0001F8   7D00         MOV       R5,#0x0
   \   0001FA   7900         MOV       R1,#0x0
   \   0001FC   EE           MOV       A,R6
   \   0001FD   FA           MOV       R2,A
   \   0001FE   EF           MOV       A,R7
   \   0001FF   FB           MOV       R3,A
   \   000200   EA           MOV       A,R2
   \   000201   75F009       MOV       B,#0x9
   \   000204   A4           MUL       AB
   \   000205   CA           XCH       A,R2
   \   000206   A8F0         MOV       R0,B
   \   000208   75F000       MOV       B,#0x0
   \   00020B   A4           MUL       AB
   \   00020C   28           ADD       A,R0
   \   00020D   F8           MOV       R0,A
   \   00020E   75F009       MOV       B,#0x9
   \   000211   EB           MOV       A,R3
   \   000212   A4           MUL       AB
   \   000213   28           ADD       A,R0
   \   000214   FB           MOV       R3,A
   \   000215   74..         MOV       A,#TCLinkKeyFrmCntr & 0xff
   \   000217   2A           ADD       A,R2
   \   000218   FA           MOV       R2,A
   \   000219   74..         MOV       A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   00021B   3B           ADDC      A,R3
   \   00021C   FB           MOV       R3,A
   \   00021D   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3255                  // set the keyNvId to use
   3256                  si->keyNvId = ZCD_NV_TCLK_DEFAULT;
   \   000220   E5..         MOV       A,?V0
   \   000222   240F         ADD       A,#0xf
   \   000224   F582         MOV       DPL,A
   \   000226   E4           CLR       A
   \   000227   35..         ADDC      A,?V1
   \   000229   F583         MOV       DPH,A
   \   00022B   7403         MOV       A,#0x3
   \   00022D   F0           MOVX      @DPTR,A
   \   00022E   A3           INC       DPTR
   \   00022F   7401         MOV       A,#0x1
   \   000231   F0           MOVX      @DPTR,A
   3257                }
   3258          
   3259                // update link key related fields
   3260                si->keyID   = SEC_KEYID_LINK;
   \                     ??APSME_TCLinkKeyLoad_8:
   \   000232   E5..         MOV       A,?V0
   \   000234   240E         ADD       A,#0xe
   \   000236   F582         MOV       DPL,A
   \   000238   E4           CLR       A
   \   000239   35..         ADDC      A,?V1
   \   00023B   F583         MOV       DPH,A
   \   00023D   7400         MOV       A,#0x0
   \   00023F   F0           MOVX      @DPTR,A
   3261                si->frmCntr = TCLinkKeyFrmCntr[i].txFrmCntr;
   \   000240   EE           MOV       A,R6
   \   000241   F8           MOV       R0,A
   \   000242   EF           MOV       A,R7
   \   000243   F9           MOV       R1,A
   \   000244   E8           MOV       A,R0
   \   000245   75F009       MOV       B,#0x9
   \   000248   A4           MUL       AB
   \   000249   C8           XCH       A,R0
   \   00024A   AAF0         MOV       R2,B
   \   00024C   75F000       MOV       B,#0x0
   \   00024F   A4           MUL       AB
   \   000250   2A           ADD       A,R2
   \   000251   FA           MOV       R2,A
   \   000252   75F009       MOV       B,#0x9
   \   000255   E9           MOV       A,R1
   \   000256   A4           MUL       AB
   \   000257   2A           ADD       A,R2
   \   000258   F9           MOV       R1,A
   \   000259   74..         MOV       A,#TCLinkKeyFrmCntr & 0xff
   \   00025B   28           ADD       A,R0
   \   00025C   F582         MOV       DPL,A
   \   00025E   74..         MOV       A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   000260   39           ADDC      A,R1
   \   000261   F583         MOV       DPH,A
   \   000263   12....       LCALL     ?XLOAD_R0123
   \   000266   E5..         MOV       A,?V0
   \   000268   2412         ADD       A,#0x12
   \   00026A   F582         MOV       DPL,A
   \   00026C   E4           CLR       A
   \   00026D   35..         ADDC      A,?V1
   \   00026F   F583         MOV       DPH,A
   \   000271   12....       LCALL     ?XSTORE_R0123
   3262          
   3263                // update outgoing frame counter
   3264                TCLinkKeyFrmCntr[i].txFrmCntr++;
   \   000274   90....       MOV       DPTR,#__Constant_1
   \   000277   78..         MOV       R0,#?V4
   \   000279   12....       LCALL     ?L_MOV_X
   \   00027C   EE           MOV       A,R6
   \   00027D   F8           MOV       R0,A
   \   00027E   EF           MOV       A,R7
   \   00027F   F9           MOV       R1,A
   \   000280   E8           MOV       A,R0
   \   000281   75F009       MOV       B,#0x9
   \   000284   A4           MUL       AB
   \   000285   C8           XCH       A,R0
   \   000286   AAF0         MOV       R2,B
   \   000288   75F000       MOV       B,#0x0
   \   00028B   A4           MUL       AB
   \   00028C   2A           ADD       A,R2
   \   00028D   FA           MOV       R2,A
   \   00028E   75F009       MOV       B,#0x9
   \   000291   E9           MOV       A,R1
   \   000292   A4           MUL       AB
   \   000293   2A           ADD       A,R2
   \   000294   F9           MOV       R1,A
   \   000295   74..         MOV       A,#TCLinkKeyFrmCntr & 0xff
   \   000297   28           ADD       A,R0
   \   000298   F582         MOV       DPL,A
   \   00029A   74..         MOV       A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   00029C   39           ADDC      A,R1
   \   00029D   F583         MOV       DPH,A
   \   00029F   78..         MOV       R0,#?V4
   \   0002A1   12....       LCALL     ?L_ADD_TO_X
   3265          
   3266            #if defined ( NV_RESTORE )
   3267                // write periodically to NV
   3268                if ( !(TCLinkKeyFrmCntr[i].txFrmCntr % MAX_TCLK_FRAMECOUNTER_CHANGES) )
   \   0002A4   EE           MOV       A,R6
   \   0002A5   F8           MOV       R0,A
   \   0002A6   EF           MOV       A,R7
   \   0002A7   F9           MOV       R1,A
   \   0002A8   E8           MOV       A,R0
   \   0002A9   75F009       MOV       B,#0x9
   \   0002AC   A4           MUL       AB
   \   0002AD   C8           XCH       A,R0
   \   0002AE   AAF0         MOV       R2,B
   \   0002B0   75F000       MOV       B,#0x0
   \   0002B3   A4           MUL       AB
   \   0002B4   2A           ADD       A,R2
   \   0002B5   FA           MOV       R2,A
   \   0002B6   75F009       MOV       B,#0x9
   \   0002B9   E9           MOV       A,R1
   \   0002BA   A4           MUL       AB
   \   0002BB   2A           ADD       A,R2
   \   0002BC   F9           MOV       R1,A
   \   0002BD   74..         MOV       A,#TCLinkKeyFrmCntr & 0xff
   \   0002BF   28           ADD       A,R0
   \   0002C0   F582         MOV       DPL,A
   \   0002C2   74..         MOV       A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   0002C4   39           ADDC      A,R1
   \   0002C5   F583         MOV       DPH,A
   \   0002C7   78..         MOV       R0,#?V8
   \   0002C9   12....       LCALL     ?L_MOV_X
   \   0002CC   90....       MOV       DPTR,#__Constant_a
   \   0002CF   78..         MOV       R0,#?V4
   \   0002D1   12....       LCALL     ?L_MOV_X
   \   0002D4   78..         MOV       R0,#?V8
   \   0002D6   79..         MOV       R1,#?V4
   \   0002D8   12....       LCALL     ?UL_DIV_MOD
   \   0002DB   E5..         MOV       A,?V4
   \   0002DD   45..         ORL       A,?V5
   \   0002DF   45..         ORL       A,?V6
   \   0002E1   45..         ORL       A,?V7
   \   0002E3   7047         JNZ       ??APSME_TCLinkKeyLoad_12
   3269                {
   3270                  // set the flag to write key to NV
   3271                  TCLinkKeyFrmCntr[i].pendingFlag = TRUE;
   \   0002E5   EE           MOV       A,R6
   \   0002E6   F8           MOV       R0,A
   \   0002E7   EF           MOV       A,R7
   \   0002E8   F9           MOV       R1,A
   \   0002E9   E8           MOV       A,R0
   \   0002EA   75F009       MOV       B,#0x9
   \   0002ED   A4           MUL       AB
   \   0002EE   C8           XCH       A,R0
   \   0002EF   AAF0         MOV       R2,B
   \   0002F1   75F000       MOV       B,#0x0
   \   0002F4   A4           MUL       AB
   \   0002F5   2A           ADD       A,R2
   \   0002F6   FA           MOV       R2,A
   \   0002F7   75F009       MOV       B,#0x9
   \   0002FA   E9           MOV       A,R1
   \   0002FB   A4           MUL       AB
   \   0002FC   2A           ADD       A,R2
   \   0002FD   F9           MOV       R1,A
   \   0002FE   74..         MOV       A,#(TCLinkKeyFrmCntr + 8) & 0xff
   \   000300   28           ADD       A,R0
   \   000301   F582         MOV       DPL,A
   \   000303   74..         MOV       A,#((TCLinkKeyFrmCntr + 8) >> 8) & 0xff
   \   000305   39           ADDC      A,R1
   \   000306   F583         MOV       DPH,A
   \   000308   7401         MOV       A,#0x1
   \   00030A   F0           MOVX      @DPTR,A
   3272          
   3273                  // Notify the ZDApp that the frame counter has changed.
   3274                  osal_set_event( ZDAppTaskID, ZDO_TCLK_FRAMECOUNTER_CHANGE );
   \   00030B                ; Setup parameters for call to function osal_set_event
   \   00030B   7A00         MOV       R2,#0x0
   \   00030D   7B04         MOV       R3,#0x4
   \   00030F   90....       MOV       DPTR,#ZDAppTaskID
   \   000312   E0           MOVX      A,@DPTR
   \   000313   F9           MOV       R1,A
   \   000314   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000317   E9           MOV       A,R1
   \   000318   8012         SJMP      ??APSME_TCLinkKeyLoad_12
   3275                }
   3276            #endif
   3277              }  
   3278              else
   3279              {
   3280                //If no more TCLK entries, try global so we can try to add legacy devices
   3281                si->keyNvId = ZCD_NV_TCLK_DEFAULT;
   \                     ??APSME_TCLinkKeyLoad_2:
   \   00031A   E5..         MOV       A,?V0
   \   00031C   240F         ADD       A,#0xf
   \   00031E   F582         MOV       DPL,A
   \   000320   E4           CLR       A
   \   000321   35..         ADDC      A,?V1
   \   000323   F583         MOV       DPH,A
   \   000325   7403         MOV       A,#0x3
   \   000327   F0           MOVX      @DPTR,A
   \   000328   A3           INC       DPTR
   \   000329   7401         MOV       A,#0x1
   \   00032B   F0           MOVX      @DPTR,A
   3282              }
   3283              status = ZSuccess;
   \                     ??APSME_TCLinkKeyLoad_12:
   \   00032C   75..00       MOV       ?V2,#0x0
   3284            }
   3285            
   3286            // If no TC link key found, remove the device from the address manager
   3287            if ( (status != ZSuccess) && (AddrMgrEntryLookupNwk(&addrEntry) == TRUE) )
   \                     ??APSME_TCLinkKeyLoad_0:
   \   00032F   E5..         MOV       A,?V2
   \   000331   6016         JZ        ??APSME_TCLinkKeyLoad_13
   \   000333                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000333   7414         MOV       A,#0x14
   \   000335   12....       LCALL     ?XSTACK_DISP101_8
   \   000338   12....       LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   00033B   E9           MOV       A,R1
   \   00033C   6401         XRL       A,#0x1
   \   00033E   7009         JNZ       ??APSME_TCLinkKeyLoad_13
   3288            {
   3289              AddrMgrEntryRelease( &addrEntry );
   \   000340                ; Setup parameters for call to function AddrMgrEntryRelease
   \   000340   7414         MOV       A,#0x14
   \   000342   12....       LCALL     ?XSTACK_DISP101_8
   \   000345   12....       LCALL     `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   \   000348   E9           MOV       A,R1
   3290            }
   3291          
   3292            return status;
   \                     ??APSME_TCLinkKeyLoad_13:
   \   000349   A9..         MOV       R1,?V2
   \   00034B   7421         MOV       A,#0x21
   \   00034D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000350   7F10         MOV       R7,#0x10
   \   000352   02....       LJMP      ?BANKED_LEAVE_XDATA
   3293          }
   3294          
   3295          /******************************************************************************
   3296           * @fn          APSME_IsDefaultTCLK
   3297           *
   3298           * @brief       Return TRUE or FALSE based on the extended address.  If the
   3299           *              input ext address is all FFs, it means the trust center link
   3300           *              assoiciated with the address is the default trust center link key
   3301           *
   3302           * @param       extAddr - [in] extended address
   3303           *
   3304           * @return      uint8 TRUE/FALSE
   3305           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3306          uint8 APSME_IsDefaultTCLK( uint8 *extAddr )
   \                     APSME_IsDefaultTCLK:
   3307          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   3308            return osal_isbufset( extAddr, 0xFF, Z_EXTADDR_LEN );
   \   000009                ; Setup parameters for call to function osal_isbufset
   \   000009   7C08         MOV       R4,#0x8
   \   00000B   79FF         MOV       R1,#-0x1
   \   00000D   EE           MOV       A,R6
   \   00000E   FA           MOV       R2,A
   \   00000F   EF           MOV       A,R7
   \   000010   FB           MOV       R3,A
   \   000011   12....       LCALL     `??osal_isbufset::?relay`; Banked call to: osal_isbufset
   \   000014   7F01         MOV       R7,#0x1
   \   000016   02....       LJMP      ?BANKED_LEAVE_XDATA
   3309          }
   3310          
   3311          /******************************************************************************
   3312           * @fn          ZDSecMgrNwkKeyInit
   3313           *
   3314           * @brief       Initialize the NV items for
   3315           *                  ZCD_NV_NWKKEY,
   3316           *                  ZCD_NV_NWK_ACTIVE_KEY_INFO and
   3317           *                  ZCD_NV_NWK_ALTERN_KEY_INFO
   3318           *
   3319           * @param       setDefault
   3320           *
   3321           * @return      none
   3322           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3323          void ZDSecMgrNwkKeyInit(uint8 setDefault)
   \                     ZDSecMgrNwkKeyInit:
   3324          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 50
   \   000005   74CE         MOV       A,#-0x32
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V1,R1
   3325            uint8 status;
   3326            nwkKeyDesc nwkKey;
   3327            // Initialize NV items for NWK key, this structure contains the frame counter
   3328            // and is only used when NV_RESTORE is enabled
   3329            nwkActiveKeyItems keyItems;
   3330            
   3331          
   3332            uint8 i,nwkFrameCounterReset = FALSE;
   \   00000C   75..00       MOV       ?V0,#0x0
   3333            nwkSecMaterialDesc_t nwkSecMaterialDesc;
   3334            
   3335            //NwkSecMaterial entry is empty if set to 0s
   3336            osal_memset(&nwkSecMaterialDesc,0,sizeof(nwkSecMaterialDesc_t));
   \   00000F                ; Setup parameters for call to function osal_memset
   \   00000F   7C0C         MOV       R4,#0xc
   \   000011   7D00         MOV       R5,#0x0
   \   000013   7900         MOV       R1,#0x0
   \   000015   AA..         MOV       R2,?XSP + 0
   \   000017   AB..         MOV       R3,?XSP + 1
   \   000019   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3337          #ifdef NV_RESTORE  
   3338            // Has been set to reset the nwk security material?
   3339            if ( zgReadStartupOptions() & ZCD_STARTOPT_CLEAR_NWK_FRAME_COUNTER )
   \   00001C                ; Setup parameters for call to function zgReadStartupOptions
   \   00001C   12....       LCALL     `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00001F   E9           MOV       A,R1
   \   000020   F8           MOV       R0,A
   \   000021   E8           MOV       A,R0
   \   000022   A2E7         MOV       C,0xE0 /* A   */.7
   \   000024   5003         JNC       ??ZDSecMgrNwkKeyInit_0
   3340            {
   3341              nwkFrameCounterReset = TRUE;
   \   000026   75..01       MOV       ?V0,#0x1
   3342            }
   3343          #else
   3344            nwkFrameCounterReset = TRUE;
   3345          #endif
   3346            
   3347            //Initialize the nwk security material
   3348            for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
   \                     ??ZDSecMgrNwkKeyInit_0:
   \   000029   7F00         MOV       R7,#0x0
   \                     ??ZDSecMgrNwkKeyInit_1:
   \   00002B   90....       MOV       DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
   \   00002E   E4           CLR       A
   \   00002F   93           MOVC      A,@A+DPTR
   \   000030   F8           MOV       R0,A
   \   000031   EF           MOV       A,R7
   \   000032   C3           CLR       C
   \   000033   98           SUBB      A,R0
   \   000034   505E         JNC       ??ZDSecMgrNwkKeyInit_2
   3349            {
   3350              if((osal_nv_item_init(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc) == SUCCESS) && (nwkFrameCounterReset))
   \   000036                ; Setup parameters for call to function osal_nv_item_init
   \   000036   A8..         MOV       R0,?XSP + 0
   \   000038   A9..         MOV       R1,?XSP + 1
   \   00003A   88..         MOV       ?V2,R0
   \   00003C   89..         MOV       ?V3,R1
   \   00003E   78..         MOV       R0,#?V2
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000043   7C0C         MOV       R4,#0xc
   \   000045   7D00         MOV       R5,#0x0
   \   000047   EF           MOV       A,R7
   \   000048   F8           MOV       R0,A
   \   000049   7900         MOV       R1,#0x0
   \   00004B   E8           MOV       A,R0
   \   00004C   2475         ADD       A,#0x75
   \   00004E   FA           MOV       R2,A
   \   00004F   E4           CLR       A
   \   000050   39           ADDC      A,R1
   \   000051   FB           MOV       R3,A
   \   000052   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000055   7402         MOV       A,#0x2
   \   000057   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005A   E9           MOV       A,R1
   \   00005B   7034         JNZ       ??ZDSecMgrNwkKeyInit_3
   \   00005D   E5..         MOV       A,?V0
   \   00005F   6030         JZ        ??ZDSecMgrNwkKeyInit_3
   3351              {
   3352                osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   000061                ; Setup parameters for call to function osal_nv_write
   \   000061   A8..         MOV       R0,?XSP + 0
   \   000063   A9..         MOV       R1,?XSP + 1
   \   000065   88..         MOV       ?V2,R0
   \   000067   89..         MOV       ?V3,R1
   \   000069   78..         MOV       R0,#?V2
   \   00006B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006E   75..0C       MOV       ?V2,#0xc
   \   000071   75..00       MOV       ?V3,#0x0
   \   000074   78..         MOV       R0,#?V2
   \   000076   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000079   7C00         MOV       R4,#0x0
   \   00007B   7D00         MOV       R5,#0x0
   \   00007D   EF           MOV       A,R7
   \   00007E   F8           MOV       R0,A
   \   00007F   7900         MOV       R1,#0x0
   \   000081   E8           MOV       A,R0
   \   000082   2475         ADD       A,#0x75
   \   000084   FA           MOV       R2,A
   \   000085   E4           CLR       A
   \   000086   39           ADDC      A,R1
   \   000087   FB           MOV       R3,A
   \   000088   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00008B   7404         MOV       A,#0x4
   \   00008D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000090   E9           MOV       A,R1
   3353              }
   3354            }
   \                     ??ZDSecMgrNwkKeyInit_3:
   \   000091   0F           INC       R7
   \   000092   8097         SJMP      ??ZDSecMgrNwkKeyInit_1
   3355            //Set the last item to the generic nwk security material by setting extPanId to 0xFFs
   3356            osal_memset(nwkSecMaterialDesc.extendedPanID,0xFF,Z_EXTADDR_LEN);
   \                     ??ZDSecMgrNwkKeyInit_2:
   \   000094                ; Setup parameters for call to function osal_memset
   \   000094   7C08         MOV       R4,#0x8
   \   000096   7D00         MOV       R5,#0x0
   \   000098   79FF         MOV       R1,#-0x1
   \   00009A   7404         MOV       A,#0x4
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   AA82         MOV       R2,DPL
   \   0000A1   AB83         MOV       R3,DPH
   \   0000A3   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3357            
   3358            if((osal_nv_item_init(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i - 1,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc) == SUCCESS) && (nwkFrameCounterReset))
   \   0000A6                ; Setup parameters for call to function osal_nv_item_init
   \   0000A6   A8..         MOV       R0,?XSP + 0
   \   0000A8   A9..         MOV       R1,?XSP + 1
   \   0000AA   88..         MOV       ?V2,R0
   \   0000AC   89..         MOV       ?V3,R1
   \   0000AE   78..         MOV       R0,#?V2
   \   0000B0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B3   7C0C         MOV       R4,#0xc
   \   0000B5   7D00         MOV       R5,#0x0
   \   0000B7   EF           MOV       A,R7
   \   0000B8   F8           MOV       R0,A
   \   0000B9   7900         MOV       R1,#0x0
   \   0000BB   E8           MOV       A,R0
   \   0000BC   2474         ADD       A,#0x74
   \   0000BE   FA           MOV       R2,A
   \   0000BF   E4           CLR       A
   \   0000C0   39           ADDC      A,R1
   \   0000C1   FB           MOV       R3,A
   \   0000C2   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   0000C5   7402         MOV       A,#0x2
   \   0000C7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000CA   E9           MOV       A,R1
   \   0000CB   7034         JNZ       ??ZDSecMgrNwkKeyInit_4
   \   0000CD   E5..         MOV       A,?V0
   \   0000CF   6030         JZ        ??ZDSecMgrNwkKeyInit_4
   3359            {
   3360              osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i - 1,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   0000D1                ; Setup parameters for call to function osal_nv_write
   \   0000D1   A8..         MOV       R0,?XSP + 0
   \   0000D3   A9..         MOV       R1,?XSP + 1
   \   0000D5   88..         MOV       ?V2,R0
   \   0000D7   89..         MOV       ?V3,R1
   \   0000D9   78..         MOV       R0,#?V2
   \   0000DB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DE   75..0C       MOV       ?V2,#0xc
   \   0000E1   75..00       MOV       ?V3,#0x0
   \   0000E4   78..         MOV       R0,#?V2
   \   0000E6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E9   7C00         MOV       R4,#0x0
   \   0000EB   7D00         MOV       R5,#0x0
   \   0000ED   EF           MOV       A,R7
   \   0000EE   F8           MOV       R0,A
   \   0000EF   7900         MOV       R1,#0x0
   \   0000F1   E8           MOV       A,R0
   \   0000F2   2474         ADD       A,#0x74
   \   0000F4   FA           MOV       R2,A
   \   0000F5   E4           CLR       A
   \   0000F6   39           ADDC      A,R1
   \   0000F7   FB           MOV       R3,A
   \   0000F8   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000FB   7404         MOV       A,#0x4
   \   0000FD   12....       LCALL     ?DEALLOC_XSTACK8
   \   000100   E9           MOV       A,R1
   3361            }
   3362          
   3363          
   3364            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \                     ??ZDSecMgrNwkKeyInit_4:
   \   000101                ; Setup parameters for call to function osal_memset
   \   000101   7C15         MOV       R4,#0x15
   \   000103   7D00         MOV       R5,#0x0
   \   000105   7900         MOV       R1,#0x0
   \   000107   741D         MOV       A,#0x1d
   \   000109   12....       LCALL     ?XSTACK_DISP101_8
   \   00010C   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3365          
   3366            status = osal_nv_item_init( ZCD_NV_NWKKEY, sizeof(nwkActiveKeyItems), (void *)&keyItems );
   \   00010F                ; Setup parameters for call to function osal_nv_item_init
   \   00010F   741D         MOV       A,#0x1d
   \   000111   12....       LCALL     ?XSTACK_DISP100_8
   \   000114   88..         MOV       ?V2,R0
   \   000116   89..         MOV       ?V3,R1
   \   000118   78..         MOV       R0,#?V2
   \   00011A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011D   7C15         MOV       R4,#0x15
   \   00011F   7D00         MOV       R5,#0x0
   \   000121   7A82         MOV       R2,#-0x7e
   \   000123   7B00         MOV       R3,#0x0
   \   000125   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000128   7402         MOV       A,#0x2
   \   00012A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00012D   E9           MOV       A,R1
   \   00012E   FE           MOV       R6,A
   3367          
   3368          #if defined ( NV_RESTORE )
   3369            // reset the values of NV items if NV_RESTORE is not enabled
   3370            if ((status == SUCCESS) && (setDefault == TRUE))
   \   00012F   EE           MOV       A,R6
   \   000130   7030         JNZ       ??ZDSecMgrNwkKeyInit_5
   \   000132   7401         MOV       A,#0x1
   \   000134   65..         XRL       A,?V1
   \   000136   702A         JNZ       ??ZDSecMgrNwkKeyInit_5
   3371            {
   3372              // clear NV data to default values
   3373              osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems );
   \   000138                ; Setup parameters for call to function osal_nv_write
   \   000138   741D         MOV       A,#0x1d
   \   00013A   12....       LCALL     ?XSTACK_DISP100_8
   \   00013D   88..         MOV       ?V2,R0
   \   00013F   89..         MOV       ?V3,R1
   \   000141   78..         MOV       R0,#?V2
   \   000143   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000146   75..15       MOV       ?V2,#0x15
   \   000149   75..00       MOV       ?V3,#0x0
   \   00014C   78..         MOV       R0,#?V2
   \   00014E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000151   7C00         MOV       R4,#0x0
   \   000153   7D00         MOV       R5,#0x0
   \   000155   7A82         MOV       R2,#-0x7e
   \   000157   7B00         MOV       R3,#0x0
   \   000159   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00015C   7404         MOV       A,#0x4
   \   00015E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000161   E9           MOV       A,R1
   3374            }
   3375          #else
   3376            (void)setDefault;   // to eliminate compiler warning
   3377          
   3378            // reset the values of NV items if NV_RESTORE is not enabled
   3379            if (status == SUCCESS)
   3380            {
   3381              osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems );
   3382            }
   3383          #endif // defined (NV_RESTORE)
   3384          
   3385            // Initialize NV items for NWK Active and Alternate keys. These items are used
   3386            // all the time, independently of NV_RESTORE being set or not
   3387            osal_memset( &nwkKey, 0x00, sizeof(nwkKey) );
   \                     ??ZDSecMgrNwkKeyInit_5:
   \   000162                ; Setup parameters for call to function osal_memset
   \   000162   7C11         MOV       R4,#0x11
   \   000164   7D00         MOV       R5,#0x0
   \   000166   7900         MOV       R1,#0x0
   \   000168   740C         MOV       A,#0xc
   \   00016A   12....       LCALL     ?XSTACK_DISP101_8
   \   00016D   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3388          
   3389            status = osal_nv_item_init( ZCD_NV_NWK_ACTIVE_KEY_INFO, sizeof(nwkKey), &nwkKey);
   \   000170                ; Setup parameters for call to function osal_nv_item_init
   \   000170   740C         MOV       A,#0xc
   \   000172   12....       LCALL     ?XSTACK_DISP100_8
   \   000175   88..         MOV       ?V2,R0
   \   000177   89..         MOV       ?V3,R1
   \   000179   78..         MOV       R0,#?V2
   \   00017B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00017E   7C11         MOV       R4,#0x11
   \   000180   7D00         MOV       R5,#0x0
   \   000182   7A3A         MOV       R2,#0x3a
   \   000184   7B00         MOV       R3,#0x0
   \   000186   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000189   7402         MOV       A,#0x2
   \   00018B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00018E   E9           MOV       A,R1
   \   00018F   FE           MOV       R6,A
   3390          
   3391          #if defined ( NV_RESTORE )
   3392            // reset the values of NV items if NV_RESTORE is not enabled
   3393            if ((status == SUCCESS) && (setDefault == TRUE))
   \   000190   EE           MOV       A,R6
   \   000191   7030         JNZ       ??ZDSecMgrNwkKeyInit_6
   \   000193   7401         MOV       A,#0x1
   \   000195   65..         XRL       A,?V1
   \   000197   702A         JNZ       ??ZDSecMgrNwkKeyInit_6
   3394            {
   3395              // clear NV data to default values
   3396              osal_nv_write( ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   \   000199                ; Setup parameters for call to function osal_nv_write
   \   000199   740C         MOV       A,#0xc
   \   00019B   12....       LCALL     ?XSTACK_DISP100_8
   \   00019E   88..         MOV       ?V2,R0
   \   0001A0   89..         MOV       ?V3,R1
   \   0001A2   78..         MOV       R0,#?V2
   \   0001A4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A7   75..11       MOV       ?V2,#0x11
   \   0001AA   75..00       MOV       ?V3,#0x0
   \   0001AD   78..         MOV       R0,#?V2
   \   0001AF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B2   7C00         MOV       R4,#0x0
   \   0001B4   7D00         MOV       R5,#0x0
   \   0001B6   7A3A         MOV       R2,#0x3a
   \   0001B8   7B00         MOV       R3,#0x0
   \   0001BA   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0001BD   7404         MOV       A,#0x4
   \   0001BF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001C2   E9           MOV       A,R1
   3397            }
   3398          #else
   3399            // reset the values of NV items if NV_RESTORE is not enabled
   3400            if (status == SUCCESS)
   3401            {
   3402              osal_nv_write( ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   3403            }
   3404          #endif // defined (NV_RESTORE)
   3405          
   3406            status = osal_nv_item_init( ZCD_NV_NWK_ALTERN_KEY_INFO, sizeof(nwkKey), &nwkKey );
   \                     ??ZDSecMgrNwkKeyInit_6:
   \   0001C3                ; Setup parameters for call to function osal_nv_item_init
   \   0001C3   740C         MOV       A,#0xc
   \   0001C5   12....       LCALL     ?XSTACK_DISP100_8
   \   0001C8   88..         MOV       ?V2,R0
   \   0001CA   89..         MOV       ?V3,R1
   \   0001CC   78..         MOV       R0,#?V2
   \   0001CE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001D1   7C11         MOV       R4,#0x11
   \   0001D3   7D00         MOV       R5,#0x0
   \   0001D5   7A3B         MOV       R2,#0x3b
   \   0001D7   7B00         MOV       R3,#0x0
   \   0001D9   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   0001DC   7402         MOV       A,#0x2
   \   0001DE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001E1   E9           MOV       A,R1
   \   0001E2   FE           MOV       R6,A
   3407          
   3408          #if defined ( NV_RESTORE )
   3409            // reset the values of NV items if NV_RESTORE is not enabled
   3410            if ((status == SUCCESS) && (setDefault == TRUE))
   \   0001E3   EE           MOV       A,R6
   \   0001E4   7030         JNZ       ??ZDSecMgrNwkKeyInit_7
   \   0001E6   7401         MOV       A,#0x1
   \   0001E8   65..         XRL       A,?V1
   \   0001EA   702A         JNZ       ??ZDSecMgrNwkKeyInit_7
   3411            {
   3412              // clear NV data to default values
   3413              osal_nv_write( ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   \   0001EC                ; Setup parameters for call to function osal_nv_write
   \   0001EC   740C         MOV       A,#0xc
   \   0001EE   12....       LCALL     ?XSTACK_DISP100_8
   \   0001F1   88..         MOV       ?V2,R0
   \   0001F3   89..         MOV       ?V3,R1
   \   0001F5   78..         MOV       R0,#?V2
   \   0001F7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001FA   75..11       MOV       ?V2,#0x11
   \   0001FD   75..00       MOV       ?V3,#0x0
   \   000200   78..         MOV       R0,#?V2
   \   000202   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000205   7C00         MOV       R4,#0x0
   \   000207   7D00         MOV       R5,#0x0
   \   000209   7A3B         MOV       R2,#0x3b
   \   00020B   7B00         MOV       R3,#0x0
   \   00020D   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000210   7404         MOV       A,#0x4
   \   000212   12....       LCALL     ?DEALLOC_XSTACK8
   \   000215   E9           MOV       A,R1
   3414            }
   3415          #else
   3416            // reset the values of NV items if NV_RESTORE is not enabled
   3417            if (status == SUCCESS)
   3418            {
   3419              osal_nv_write( ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   3420            }
   3421          #endif // defined (NV_RESTORE)
   3422          
   3423          }
   \                     ??ZDSecMgrNwkKeyInit_7:
   \   000216   7432         MOV       A,#0x32
   \   000218   12....       LCALL     ?DEALLOC_XSTACK8
   \   00021B   7F04         MOV       R7,#0x4
   \   00021D   02....       LJMP      ?BANKED_LEAVE_XDATA
   3424          
   3425          
   3426          
   3427          /*********************************************************************
   3428           * @fn          ZDSecMgrReadKeyFromNv
   3429           *
   3430           * @brief       Looks for a specific key in NV based on Index value
   3431           *
   3432           * @param   keyNvId - Index of key to look in NV
   3433           *                    valid values are:
   3434           *                    ZCD_NV_NWK_ACTIVE_KEY_INFO
   3435           *                    ZCD_NV_NWK_ALTERN_KEY_INFO
   3436           *                    ZCD_NV_TCLK_TABLE_START + <offset_in_table>
   3437           *                    ZCD_NV_APS_LINK_KEY_DATA_START + <offset_in_table>
   3438           *                    ZCD_NV_PRECFGKEY
   3439           *
   3440           * @param  *keyinfo - Data is read into this buffer.
   3441           *
   3442           * @return  SUCCESS if NV data was copied to the keyinfo parameter .
   3443           *          Otherwise, NV_OPER_FAILED for failure.
   3444           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3445          ZStatus_t ZDSecMgrReadKeyFromNv(uint16 keyNvId, void *keyinfo)
   \                     ZDSecMgrReadKeyFromNv:
   3446          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   3447            if ((keyNvId == ZCD_NV_NWK_ACTIVE_KEY_INFO) ||
   3448                (keyNvId == ZCD_NV_NWK_ALTERN_KEY_INFO))
   \   00000D   743A         MOV       A,#0x3a
   \   00000F   6E           XRL       A,R6
   \   000010   7003         JNZ       ??ZDSecMgrReadKeyFromNv_0
   \   000012   7400         MOV       A,#0x0
   \   000014   6F           XRL       A,R7
   \                     ??ZDSecMgrReadKeyFromNv_0:
   \   000015   600A         JZ        ??ZDSecMgrReadKeyFromNv_1
   \   000017   743B         MOV       A,#0x3b
   \   000019   6E           XRL       A,R6
   \   00001A   7003         JNZ       ??ZDSecMgrReadKeyFromNv_2
   \   00001C   7400         MOV       A,#0x0
   \   00001E   6F           XRL       A,R7
   \                     ??ZDSecMgrReadKeyFromNv_2:
   \   00001F   7023         JNZ       ??ZDSecMgrReadKeyFromNv_3
   3449            {
   3450              // get NWK active or alternate key from NV
   3451              return (osal_nv_read(keyNvId,
   3452                                   osal_offsetof(nwkKeyDesc, key),
   3453                                   SEC_KEY_LEN,
   3454                                   keyinfo));
   \                     ??ZDSecMgrReadKeyFromNv_1:
   \   000021                ; Setup parameters for call to function osal_nv_read
   \   000021   78..         MOV       R0,#?V0
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000026   75..10       MOV       ?V2,#0x10
   \   000029   75..00       MOV       ?V3,#0x0
   \   00002C   78..         MOV       R0,#?V2
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   7C01         MOV       R4,#0x1
   \   000033   7D00         MOV       R5,#0x0
   \   000035   EE           MOV       A,R6
   \   000036   FA           MOV       R2,A
   \   000037   EF           MOV       A,R7
   \   000038   FB           MOV       R3,A
   \   000039   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00003C   7404         MOV       A,#0x4
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000041   02....       LJMP      ??ZDSecMgrReadKeyFromNv_4 & 0xFFFF
   3455            }
   3456            
   3457            else if(keyNvId == ZCD_NV_TCLK_DEFAULT)
   \                     ??ZDSecMgrReadKeyFromNv_3:
   \   000044   7403         MOV       A,#0x3
   \   000046   6E           XRL       A,R6
   \   000047   7003         JNZ       ??ZDSecMgrReadKeyFromNv_5
   \   000049   7401         MOV       A,#0x1
   \   00004B   6F           XRL       A,R7
   \                     ??ZDSecMgrReadKeyFromNv_5:
   \   00004C   7023         JNZ       ??ZDSecMgrReadKeyFromNv_6
   3458            {
   3459              osal_memcpy(keyinfo,defaultTCLinkKey,SEC_KEY_LEN);
   \   00004E                ; Setup parameters for call to function osal_memcpy
   \   00004E   75....       MOV       ?V4,#defaultTCLinkKey & 0xff
   \   000051   75....       MOV       ?V5,#(defaultTCLinkKey >> 8) & 0xff
   \   000054   75..80       MOV       ?V6,#-0x80
   \   000057   78..         MOV       R0,#?V4
   \   000059   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00005C   7C10         MOV       R4,#0x10
   \   00005E   7D00         MOV       R5,#0x0
   \   000060   AA..         MOV       R2,?V0
   \   000062   AB..         MOV       R3,?V1
   \   000064   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000067   7403         MOV       A,#0x3
   \   000069   12....       LCALL     ?DEALLOC_XSTACK8
   3460              return ZSuccess;
   \   00006C   7900         MOV       R1,#0x0
   \   00006E   02....       LJMP      ??ZDSecMgrReadKeyFromNv_4 & 0xFFFF
   3461            }
   3462            
   3463          #if (ZG_BUILD_JOINING_TYPE) 
   3464            else if(keyNvId == ZCD_NV_DISTRIBUTED_KEY)
   \                     ??ZDSecMgrReadKeyFromNv_6:
   \   000071   7468         MOV       A,#0x68
   \   000073   6E           XRL       A,R6
   \   000074   7003         JNZ       ??ZDSecMgrReadKeyFromNv_7
   \   000076   7400         MOV       A,#0x0
   \   000078   6F           XRL       A,R7
   \                     ??ZDSecMgrReadKeyFromNv_7:
   \   000079   7036         JNZ       ??ZDSecMgrReadKeyFromNv_8
   3465            {
   3466              if(ZG_DEVICE_JOINING_TYPE)
   \   00007B   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   6401         XRL       A,#0x1
   \   000081   600B         JZ        ??ZDSecMgrReadKeyFromNv_9
   \   000083   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000086   E0           MOVX      A,@DPTR
   \   000087   6402         XRL       A,#0x2
   \   000089   6003         JZ        $+5
   \   00008B   02....       LJMP      ??ZDSecMgrReadKeyFromNv_10 & 0xFFFF
   3467              {
   3468                osal_memcpy(keyinfo,distributedDefaultKey,SEC_KEY_LEN);
   \                     ??ZDSecMgrReadKeyFromNv_9:
   \   00008E                ; Setup parameters for call to function osal_memcpy
   \   00008E   75....       MOV       ?V4,#distributedDefaultKey & 0xff
   \   000091   75....       MOV       ?V5,#(distributedDefaultKey >> 8) & 0xff
   \   000094   75..80       MOV       ?V6,#-0x80
   \   000097   78..         MOV       R0,#?V4
   \   000099   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00009C   7C10         MOV       R4,#0x10
   \   00009E   7D00         MOV       R5,#0x0
   \   0000A0   AA..         MOV       R2,?V0
   \   0000A2   AB..         MOV       R3,?V1
   \   0000A4   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000A7   7403         MOV       A,#0x3
   \   0000A9   12....       LCALL     ?DEALLOC_XSTACK8
   3469                return ZSuccess;
   \   0000AC   7900         MOV       R1,#0x0
   \   0000AE   02....       LJMP      ??ZDSecMgrReadKeyFromNv_4 & 0xFFFF
   3470              }
   3471            }
   3472          #endif
   3473            
   3474            else if((keyNvId == ZCD_NV_TCLK_JOIN_DEV) || (keyNvId == ZCD_NV_PRECFGKEY)) 
   \                     ??ZDSecMgrReadKeyFromNv_8:
   \   0000B1   7402         MOV       A,#0x2
   \   0000B3   6E           XRL       A,R6
   \   0000B4   7003         JNZ       ??ZDSecMgrReadKeyFromNv_11
   \   0000B6   7401         MOV       A,#0x1
   \   0000B8   6F           XRL       A,R7
   \                     ??ZDSecMgrReadKeyFromNv_11:
   \   0000B9   600A         JZ        ??ZDSecMgrReadKeyFromNv_12
   \   0000BB   7462         MOV       A,#0x62
   \   0000BD   6E           XRL       A,R6
   \   0000BE   7003         JNZ       ??ZDSecMgrReadKeyFromNv_13
   \   0000C0   7400         MOV       A,#0x0
   \   0000C2   6F           XRL       A,R7
   \                     ??ZDSecMgrReadKeyFromNv_13:
   \   0000C3   7023         JNZ       ??ZDSecMgrReadKeyFromNv_14
   3475            {
   3476              // Read entry keyNvId of the TC link key table from NV. keyNvId should be
   3477              // ZCD_NV_TCLK_TABLE_START + <offset_in_table>
   3478              return (osal_nv_read(keyNvId,
   3479                                   0,
   3480                                   SEC_KEY_LEN,
   3481                                   keyinfo));
   \                     ??ZDSecMgrReadKeyFromNv_12:
   \   0000C5                ; Setup parameters for call to function osal_nv_read
   \   0000C5   78..         MOV       R0,#?V0
   \   0000C7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CA   75..10       MOV       ?V2,#0x10
   \   0000CD   75..00       MOV       ?V3,#0x0
   \   0000D0   78..         MOV       R0,#?V2
   \   0000D2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D5   7C00         MOV       R4,#0x0
   \   0000D7   7D00         MOV       R5,#0x0
   \   0000D9   EE           MOV       A,R6
   \   0000DA   FA           MOV       R2,A
   \   0000DB   EF           MOV       A,R7
   \   0000DC   FB           MOV       R3,A
   \   0000DD   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000E0   7404         MOV       A,#0x4
   \   0000E2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E5   02....       LJMP      ??ZDSecMgrReadKeyFromNv_4 & 0xFFFF
   3482            }
   3483              else if (keyNvId == ZCD_NV_PRECFGKEY)
   \                     ??ZDSecMgrReadKeyFromNv_14:
   \   0000E8   7462         MOV       A,#0x62
   \   0000EA   6E           XRL       A,R6
   \   0000EB   7003         JNZ       ??ZDSecMgrReadKeyFromNv_15
   \   0000ED   7400         MOV       A,#0x0
   \   0000EF   6F           XRL       A,R7
   \                     ??ZDSecMgrReadKeyFromNv_15:
   \   0000F0   7022         JNZ       ??ZDSecMgrReadKeyFromNv_16
   3484            {
   3485              // Read entry keyNvId of the Preconfig key from NV.
   3486              return (osal_nv_read(keyNvId,
   3487                                   0,
   3488                                   SEC_KEY_LEN,
   3489                                   keyinfo));
   \   0000F2                ; Setup parameters for call to function osal_nv_read
   \   0000F2   78..         MOV       R0,#?V0
   \   0000F4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F7   75..10       MOV       ?V2,#0x10
   \   0000FA   75..00       MOV       ?V3,#0x0
   \   0000FD   78..         MOV       R0,#?V2
   \   0000FF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000102   7C00         MOV       R4,#0x0
   \   000104   7D00         MOV       R5,#0x0
   \   000106   EE           MOV       A,R6
   \   000107   FA           MOV       R2,A
   \   000108   EF           MOV       A,R7
   \   000109   FB           MOV       R3,A
   \   00010A   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00010D   7404         MOV       A,#0x4
   \   00010F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000112   8076         SJMP      ??ZDSecMgrReadKeyFromNv_4
   3490            }
   3491          
   3492            else if((keyNvId >= ZCD_NV_TCLK_IC_TABLE_START) &&
   3493                     (keyNvId < (ZCD_NV_TCLK_IC_TABLE_START + gZDSECMGR_TC_DEVICE_IC_MAX)))
   \                     ??ZDSecMgrReadKeyFromNv_16:
   \   000114   C3           CLR       C
   \   000115   EE           MOV       A,R6
   \   000116   9404         SUBB      A,#0x4
   \   000118   EF           MOV       A,R7
   \   000119   9401         SUBB      A,#0x1
   \   00011B   4037         JC        ??ZDSecMgrReadKeyFromNv_17
   \   00011D   90....       MOV       DPTR,#gZDSECMGR_TC_DEVICE_IC_MAX
   \   000120   E4           CLR       A
   \   000121   93           MOVC      A,@A+DPTR
   \   000122   2404         ADD       A,#0x4
   \   000124   F8           MOV       R0,A
   \   000125   A3           INC       DPTR
   \   000126   E4           CLR       A
   \   000127   93           MOVC      A,@A+DPTR
   \   000128   3401         ADDC      A,#0x1
   \   00012A   F9           MOV       R1,A
   \   00012B   C3           CLR       C
   \   00012C   EE           MOV       A,R6
   \   00012D   98           SUBB      A,R0
   \   00012E   EF           MOV       A,R7
   \   00012F   99           SUBB      A,R1
   \   000130   5022         JNC       ??ZDSecMgrReadKeyFromNv_17
   3494            {
   3495              //Read the key derived from the IC
   3496              return (osal_nv_read(keyNvId,
   3497                                   0,
   3498                                   SEC_KEY_LEN,
   3499                                   keyinfo));
   \   000132                ; Setup parameters for call to function osal_nv_read
   \   000132   78..         MOV       R0,#?V0
   \   000134   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000137   75..10       MOV       ?V2,#0x10
   \   00013A   75..00       MOV       ?V3,#0x0
   \   00013D   78..         MOV       R0,#?V2
   \   00013F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000142   7C00         MOV       R4,#0x0
   \   000144   7D00         MOV       R5,#0x0
   \   000146   EE           MOV       A,R6
   \   000147   FA           MOV       R2,A
   \   000148   EF           MOV       A,R7
   \   000149   FB           MOV       R3,A
   \   00014A   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00014D   7404         MOV       A,#0x4
   \   00014F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000152   8036         SJMP      ??ZDSecMgrReadKeyFromNv_4
   3500            
   3501            }
   3502            else if ((keyNvId >= ZCD_NV_APS_LINK_KEY_DATA_START) &&
   3503                     (keyNvId < (ZCD_NV_APS_LINK_KEY_DATA_START + ZDSECMGR_ENTRY_MAX)))
   \                     ??ZDSecMgrReadKeyFromNv_17:
   \   000154   C3           CLR       C
   \   000155   EE           MOV       A,R6
   \   000156   9401         SUBB      A,#0x1
   \   000158   EF           MOV       A,R7
   \   000159   9402         SUBB      A,#0x2
   \   00015B   402B         JC        ??ZDSecMgrReadKeyFromNv_10
   \   00015D   C3           CLR       C
   \   00015E   EE           MOV       A,R6
   \   00015F   9404         SUBB      A,#0x4
   \   000161   EF           MOV       A,R7
   \   000162   9402         SUBB      A,#0x2
   \   000164   5022         JNC       ??ZDSecMgrReadKeyFromNv_10
   3504            {
   3505              // Read entry keyNvId of the APS link key table from NV. keyNvId should be
   3506              // ZCD_NV_APS_LINK_KEY_DATA_START + <offset_in_table>
   3507              return (osal_nv_read(keyNvId,
   3508                                   osal_offsetof(APSME_LinkKeyData_t, key),
   3509                                   SEC_KEY_LEN,
   3510                                   keyinfo));
   \   000166                ; Setup parameters for call to function osal_nv_read
   \   000166   78..         MOV       R0,#?V0
   \   000168   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00016B   75..10       MOV       ?V2,#0x10
   \   00016E   75..00       MOV       ?V3,#0x0
   \   000171   78..         MOV       R0,#?V2
   \   000173   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000176   7C00         MOV       R4,#0x0
   \   000178   7D00         MOV       R5,#0x0
   \   00017A   EE           MOV       A,R6
   \   00017B   FA           MOV       R2,A
   \   00017C   EF           MOV       A,R7
   \   00017D   FB           MOV       R3,A
   \   00017E   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000181   7404         MOV       A,#0x4
   \   000183   12....       LCALL     ?DEALLOC_XSTACK8
   \   000186   8002         SJMP      ??ZDSecMgrReadKeyFromNv_4
   3511            }
   3512          
   3513            return NV_OPER_FAILED;
   \                     ??ZDSecMgrReadKeyFromNv_10:
   \   000188   790A         MOV       R1,#0xa
   \                     ??ZDSecMgrReadKeyFromNv_4:
   \   00018A   7F07         MOV       R7,#0x7
   \   00018C   02....       LJMP      ?BANKED_LEAVE_XDATA
   3514          }
   3515          
   3516          /******************************************************************************
   3517           * @fn          ZDSecMgrApsLinkKeyInit
   3518           *
   3519           * @brief       Initialize the NV table for Application link keys
   3520           *
   3521           * @param       setDefault - TRUE to set default values
   3522           *
   3523           * @return      none
   3524           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3525          void ZDSecMgrApsLinkKeyInit(uint8 setDefault)
   \                     ZDSecMgrApsLinkKeyInit:
   3526          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV       A,#-0x18
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   3527            APSME_LinkKeyData_t pApsLinkKey;
   3528            uint8 i;
   3529            uint8 status;
   3530          
   3531            // Initialize all NV items for APS link key, if not exist already.
   3532            osal_memset( &pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   00000C                ; Setup parameters for call to function osal_memset
   \   00000C   7C18         MOV       R4,#0x18
   \   00000E   7D00         MOV       R5,#0x0
   \   000010   7900         MOV       R1,#0x0
   \   000012   AA..         MOV       R2,?XSP + 0
   \   000014   AB..         MOV       R3,?XSP + 1
   \   000016   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3533          
   3534            for( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   000019   7E00         MOV       R6,#0x0
   \                     ??ZDSecMgrApsLinkKeyInit_0:
   \   00001B   EE           MOV       A,R6
   \   00001C   C3           CLR       C
   \   00001D   9403         SUBB      A,#0x3
   \   00001F   5064         JNC       ??ZDSecMgrApsLinkKeyInit_1
   3535            {
   3536              status = osal_nv_item_init( (ZCD_NV_APS_LINK_KEY_DATA_START + i),
   3537                                         sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
   \   000021                ; Setup parameters for call to function osal_nv_item_init
   \   000021   A8..         MOV       R0,?XSP + 0
   \   000023   A9..         MOV       R1,?XSP + 1
   \   000025   88..         MOV       ?V2,R0
   \   000027   89..         MOV       ?V3,R1
   \   000029   78..         MOV       R0,#?V2
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   7C18         MOV       R4,#0x18
   \   000030   7D00         MOV       R5,#0x0
   \   000032   EE           MOV       A,R6
   \   000033   F8           MOV       R0,A
   \   000034   7900         MOV       R1,#0x0
   \   000036   E8           MOV       A,R0
   \   000037   2401         ADD       A,#0x1
   \   000039   FA           MOV       R2,A
   \   00003A   E9           MOV       A,R1
   \   00003B   3402         ADDC      A,#0x2
   \   00003D   FB           MOV       R3,A
   \   00003E   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000041   7402         MOV       A,#0x2
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
   \   000046   E9           MOV       A,R1
   \   000047   FF           MOV       R7,A
   3538          
   3539          #if defined ( NV_RESTORE )
   3540            // If the set default is requested, the APS Link key needs to be erased, regardless of the NV_RESTORE enabled
   3541                if ((status == SUCCESS) && (setDefault == TRUE ))
   \   000048   EF           MOV       A,R7
   \   000049   7037         JNZ       ??ZDSecMgrApsLinkKeyInit_2
   \   00004B   7401         MOV       A,#0x1
   \   00004D   65..         XRL       A,?V0
   \   00004F   7031         JNZ       ??ZDSecMgrApsLinkKeyInit_2
   3542                {
   3543                  osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
   3544                                sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
   \   000051                ; Setup parameters for call to function osal_nv_write
   \   000051   A8..         MOV       R0,?XSP + 0
   \   000053   A9..         MOV       R1,?XSP + 1
   \   000055   88..         MOV       ?V2,R0
   \   000057   89..         MOV       ?V3,R1
   \   000059   78..         MOV       R0,#?V2
   \   00005B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005E   75..18       MOV       ?V2,#0x18
   \   000061   75..00       MOV       ?V3,#0x0
   \   000064   78..         MOV       R0,#?V2
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000069   7C00         MOV       R4,#0x0
   \   00006B   7D00         MOV       R5,#0x0
   \   00006D   EE           MOV       A,R6
   \   00006E   F8           MOV       R0,A
   \   00006F   7900         MOV       R1,#0x0
   \   000071   E8           MOV       A,R0
   \   000072   2401         ADD       A,#0x1
   \   000074   FA           MOV       R2,A
   \   000075   E9           MOV       A,R1
   \   000076   3402         ADDC      A,#0x2
   \   000078   FB           MOV       R3,A
   \   000079   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00007C   7404         MOV       A,#0x4
   \   00007E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000081   E9           MOV       A,R1
   3545          
   3546                }
   3547          #else
   3548              // reset the values of NV items if NV_RESTORE is not enabled
   3549              if (status == SUCCESS)
   3550              {
   3551                osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
   3552                              sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
   3553          
   3554              }
   3555          #endif // defined (NV_RESTORE)
   3556            }
   \                     ??ZDSecMgrApsLinkKeyInit_2:
   \   000082   0E           INC       R6
   \   000083   8096         SJMP      ??ZDSecMgrApsLinkKeyInit_0
   3557          }
   \                     ??ZDSecMgrApsLinkKeyInit_1:
   \   000085   7418         MOV       A,#0x18
   \   000087   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008A   7F04         MOV       R7,#0x4
   \   00008C   02....       LJMP      ?BANKED_LEAVE_XDATA
   3558          
   3559          
   3560          /******************************************************************************
   3561           * @fn          ZDSecMgrInitNVKeyTables
   3562           *
   3563           * @brief       Initialize the NV table for All keys: NWK, Master, TCLK and APS
   3564           *
   3565           * @param       setDefault - TRUE to set default values
   3566           *
   3567           * @return      none
   3568           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3569          void ZDSecMgrInitNVKeyTables(uint8 setDefault)
   \                     ZDSecMgrInitNVKeyTables:
   3570          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3571            ZDSecMgrNwkKeyInit(setDefault);
   \   000007                ; Setup parameters for call to function ZDSecMgrNwkKeyInit
   \   000007   EE           MOV       A,R6
   \   000008   F9           MOV       R1,A
   \   000009   12....       LCALL     `??ZDSecMgrNwkKeyInit::?relay`; Banked call to: ZDSecMgrNwkKeyInit
   3572            ZDSecMgrApsLinkKeyInit(setDefault); 
   \   00000C                ; Setup parameters for call to function ZDSecMgrApsLinkKeyInit
   \   00000C   EE           MOV       A,R6
   \   00000D   F9           MOV       R1,A
   \   00000E   12....       LCALL     `??ZDSecMgrApsLinkKeyInit::?relay`; Banked call to: ZDSecMgrApsLinkKeyInit
   3573            APSME_TCLinkKeyInit(setDefault);
   \   000011                ; Setup parameters for call to function APSME_TCLinkKeyInit
   \   000011   EE           MOV       A,R6
   \   000012   F9           MOV       R1,A
   \   000013   12....       LCALL     `??APSME_TCLinkKeyInit::?relay`; Banked call to: APSME_TCLinkKeyInit
   3574            
   3575          #if ZG_BUILD_COORDINATOR_TYPE
   3576            if(ZG_DEVICE_COORDINATOR_TYPE)
   3577            {
   3578              ZDSecMgrGenerateSeed(setDefault);
   3579              
   3580            }
   3581          #endif
   3582          }
   \   000016   7F01         MOV       R7,#0x1
   \   000018   02....       LJMP      ?BANKED_LEAVE_XDATA
   3583          
   3584          
   3585          /******************************************************************************
   3586           * @fn          ZDSecMgrSaveApsLinkKey
   3587           *
   3588           * @brief       Save APS Link Key to NV. It will loop through all the keys
   3589           *              to see which one to save.
   3590           *
   3591           * @param       none
   3592           *
   3593           * @return      none
   3594           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3595          void ZDSecMgrSaveApsLinkKey(void)
   \                     ZDSecMgrSaveApsLinkKey:
   3596          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3597            APSME_LinkKeyData_t *pKeyData = NULL;
   \   000005   75..00       MOV       ?V0,#0x0
   \   000008   75..00       MOV       ?V1,#0x0
   3598            int i;
   3599          
   3600            pKeyData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   7A18         MOV       R2,#0x18
   \   00000D   7B00         MOV       R3,#0x0
   \   00000F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000012   8A..         MOV       ?V2,R2
   \   000014   8B..         MOV       ?V3,R3
   \   000016   85....       MOV       ?V0,?V2
   \   000019   85....       MOV       ?V1,?V3
   3601          
   3602            if (pKeyData != NULL)
   \   00001C   E5..         MOV       A,?V0
   \   00001E   45..         ORL       A,?V1
   \   000020   7003         JNZ       $+5
   \   000022   02....       LJMP      ??ZDSecMgrSaveApsLinkKey_0 & 0xFFFF
   3603            {
   3604              // checks all pending flags to know which one to save
   3605              for (i = 0; i < ZDSECMGR_ENTRY_MAX; i++)
   \   000025   7E00         MOV       R6,#0x0
   \   000027   7F00         MOV       R7,#0x0
   \                     ??ZDSecMgrSaveApsLinkKey_1:
   \   000029   C3           CLR       C
   \   00002A   EE           MOV       A,R6
   \   00002B   9403         SUBB      A,#0x3
   \   00002D   EF           MOV       A,R7
   \   00002E   9400         SUBB      A,#0x0
   \   000030   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000032   65D0         XRL       A,PSW
   \   000034   33           RLC       A
   \   000035   4003         JC        $+5
   \   000037   02....       LJMP      ??ZDSecMgrSaveApsLinkKey_2 & 0xFFFF
   3606              {
   3607                if (ApsLinkKeyFrmCntr[i].pendingFlag == TRUE)
   \   00003A   EE           MOV       A,R6
   \   00003B   F8           MOV       R0,A
   \   00003C   EF           MOV       A,R7
   \   00003D   F9           MOV       R1,A
   \   00003E   E8           MOV       A,R0
   \   00003F   75F009       MOV       B,#0x9
   \   000042   A4           MUL       AB
   \   000043   C8           XCH       A,R0
   \   000044   AAF0         MOV       R2,B
   \   000046   75F000       MOV       B,#0x0
   \   000049   A4           MUL       AB
   \   00004A   2A           ADD       A,R2
   \   00004B   FA           MOV       R2,A
   \   00004C   75F009       MOV       B,#0x9
   \   00004F   E9           MOV       A,R1
   \   000050   A4           MUL       AB
   \   000051   2A           ADD       A,R2
   \   000052   F9           MOV       R1,A
   \   000053   74..         MOV       A,#(ApsLinkKeyFrmCntr + 8) & 0xff
   \   000055   28           ADD       A,R0
   \   000056   F582         MOV       DPL,A
   \   000058   74..         MOV       A,#((ApsLinkKeyFrmCntr + 8) >> 8) & 0xff
   \   00005A   39           ADDC      A,R1
   \   00005B   F583         MOV       DPH,A
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   6401         XRL       A,#0x1
   \   000060   6003         JZ        $+5
   \   000062   02....       LJMP      ??ZDSecMgrSaveApsLinkKey_3 & 0xFFFF
   3608                {
   3609                  // retrieve key from NV
   3610                  if (osal_nv_read(ZCD_NV_APS_LINK_KEY_DATA_START + i, 0,
   3611                                   sizeof(APSME_LinkKeyData_t), pKeyData) == SUCCESS)
   \   000065                ; Setup parameters for call to function osal_nv_read
   \   000065   78..         MOV       R0,#?V0
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006A   75..18       MOV       ?V2,#0x18
   \   00006D   75..00       MOV       ?V3,#0x0
   \   000070   78..         MOV       R0,#?V2
   \   000072   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000075   7C00         MOV       R4,#0x0
   \   000077   7D00         MOV       R5,#0x0
   \   000079   EE           MOV       A,R6
   \   00007A   2401         ADD       A,#0x1
   \   00007C   FA           MOV       R2,A
   \   00007D   EF           MOV       A,R7
   \   00007E   3402         ADDC      A,#0x2
   \   000080   FB           MOV       R3,A
   \   000081   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000084   7404         MOV       A,#0x4
   \   000086   12....       LCALL     ?DEALLOC_XSTACK8
   \   000089   E9           MOV       A,R1
   \   00008A   6003         JZ        $+5
   \   00008C   02....       LJMP      ??ZDSecMgrSaveApsLinkKey_3 & 0xFFFF
   3612                  {
   3613                    pKeyData->txFrmCntr = ApsLinkKeyFrmCntr[i].txFrmCntr;
   \   00008F   EE           MOV       A,R6
   \   000090   F8           MOV       R0,A
   \   000091   EF           MOV       A,R7
   \   000092   F9           MOV       R1,A
   \   000093   E8           MOV       A,R0
   \   000094   75F009       MOV       B,#0x9
   \   000097   A4           MUL       AB
   \   000098   C8           XCH       A,R0
   \   000099   AAF0         MOV       R2,B
   \   00009B   75F000       MOV       B,#0x0
   \   00009E   A4           MUL       AB
   \   00009F   2A           ADD       A,R2
   \   0000A0   FA           MOV       R2,A
   \   0000A1   75F009       MOV       B,#0x9
   \   0000A4   E9           MOV       A,R1
   \   0000A5   A4           MUL       AB
   \   0000A6   2A           ADD       A,R2
   \   0000A7   F9           MOV       R1,A
   \   0000A8   74..         MOV       A,#ApsLinkKeyFrmCntr & 0xff
   \   0000AA   28           ADD       A,R0
   \   0000AB   F582         MOV       DPL,A
   \   0000AD   74..         MOV       A,#(ApsLinkKeyFrmCntr >> 8) & 0xff
   \   0000AF   39           ADDC      A,R1
   \   0000B0   F583         MOV       DPH,A
   \   0000B2   12....       LCALL     ?XLOAD_R0123
   \   0000B5   E5..         MOV       A,?V0
   \   0000B7   2410         ADD       A,#0x10
   \   0000B9   F582         MOV       DPL,A
   \   0000BB   E4           CLR       A
   \   0000BC   35..         ADDC      A,?V1
   \   0000BE   F583         MOV       DPH,A
   \   0000C0   12....       LCALL     ?XSTORE_R0123
   3614                    pKeyData->rxFrmCntr = ApsLinkKeyFrmCntr[i].rxFrmCntr;
   \   0000C3   EE           MOV       A,R6
   \   0000C4   F8           MOV       R0,A
   \   0000C5   EF           MOV       A,R7
   \   0000C6   F9           MOV       R1,A
   \   0000C7   E8           MOV       A,R0
   \   0000C8   75F009       MOV       B,#0x9
   \   0000CB   A4           MUL       AB
   \   0000CC   C8           XCH       A,R0
   \   0000CD   AAF0         MOV       R2,B
   \   0000CF   75F000       MOV       B,#0x0
   \   0000D2   A4           MUL       AB
   \   0000D3   2A           ADD       A,R2
   \   0000D4   FA           MOV       R2,A
   \   0000D5   75F009       MOV       B,#0x9
   \   0000D8   E9           MOV       A,R1
   \   0000D9   A4           MUL       AB
   \   0000DA   2A           ADD       A,R2
   \   0000DB   F9           MOV       R1,A
   \   0000DC   74..         MOV       A,#(ApsLinkKeyFrmCntr + 4) & 0xff
   \   0000DE   28           ADD       A,R0
   \   0000DF   F582         MOV       DPL,A
   \   0000E1   74..         MOV       A,#((ApsLinkKeyFrmCntr + 4) >> 8) & 0xff
   \   0000E3   39           ADDC      A,R1
   \   0000E4   F583         MOV       DPH,A
   \   0000E6   12....       LCALL     ?XLOAD_R0123
   \   0000E9   E5..         MOV       A,?V0
   \   0000EB   2414         ADD       A,#0x14
   \   0000ED   F582         MOV       DPL,A
   \   0000EF   E4           CLR       A
   \   0000F0   35..         ADDC      A,?V1
   \   0000F2   F583         MOV       DPH,A
   \   0000F4   12....       LCALL     ?XSTORE_R0123
   3615          
   3616                    // Write the APS link key back to the NV
   3617                    osal_nv_write(ZCD_NV_APS_LINK_KEY_DATA_START + i, 0,
   3618                                  sizeof(APSME_LinkKeyData_t), pKeyData);
   \   0000F7                ; Setup parameters for call to function osal_nv_write
   \   0000F7   78..         MOV       R0,#?V0
   \   0000F9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FC   75..18       MOV       ?V2,#0x18
   \   0000FF   75..00       MOV       ?V3,#0x0
   \   000102   78..         MOV       R0,#?V2
   \   000104   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000107   7C00         MOV       R4,#0x0
   \   000109   7D00         MOV       R5,#0x0
   \   00010B   EE           MOV       A,R6
   \   00010C   2401         ADD       A,#0x1
   \   00010E   FA           MOV       R2,A
   \   00010F   EF           MOV       A,R7
   \   000110   3402         ADDC      A,#0x2
   \   000112   FB           MOV       R3,A
   \   000113   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000116   7404         MOV       A,#0x4
   \   000118   12....       LCALL     ?DEALLOC_XSTACK8
   \   00011B   E9           MOV       A,R1
   3619          
   3620                    // clear the pending write flag
   3621                    ApsLinkKeyFrmCntr[i].pendingFlag = FALSE;
   \   00011C   EE           MOV       A,R6
   \   00011D   F8           MOV       R0,A
   \   00011E   EF           MOV       A,R7
   \   00011F   F9           MOV       R1,A
   \   000120   E8           MOV       A,R0
   \   000121   75F009       MOV       B,#0x9
   \   000124   A4           MUL       AB
   \   000125   C8           XCH       A,R0
   \   000126   AAF0         MOV       R2,B
   \   000128   75F000       MOV       B,#0x0
   \   00012B   A4           MUL       AB
   \   00012C   2A           ADD       A,R2
   \   00012D   FA           MOV       R2,A
   \   00012E   75F009       MOV       B,#0x9
   \   000131   E9           MOV       A,R1
   \   000132   A4           MUL       AB
   \   000133   2A           ADD       A,R2
   \   000134   F9           MOV       R1,A
   \   000135   74..         MOV       A,#(ApsLinkKeyFrmCntr + 8) & 0xff
   \   000137   28           ADD       A,R0
   \   000138   F582         MOV       DPL,A
   \   00013A   74..         MOV       A,#((ApsLinkKeyFrmCntr + 8) >> 8) & 0xff
   \   00013C   39           ADDC      A,R1
   \   00013D   F583         MOV       DPH,A
   \   00013F   7400         MOV       A,#0x0
   \   000141   F0           MOVX      @DPTR,A
   3622                  }
   3623                }
   3624              }
   \                     ??ZDSecMgrSaveApsLinkKey_3:
   \   000142   0E           INC       R6
   \   000143   EE           MOV       A,R6
   \   000144   7001         JNZ       ??ZDSecMgrSaveApsLinkKey_4
   \   000146   0F           INC       R7
   \                     ??ZDSecMgrSaveApsLinkKey_4:
   \   000147   02....       LJMP      ??ZDSecMgrSaveApsLinkKey_1 & 0xFFFF
   3625          
   3626              // clear copy of key in RAM
   3627              osal_memset( pKeyData, 0x00, sizeof(APSME_LinkKeyData_t) );
   \                     ??ZDSecMgrSaveApsLinkKey_2:
   \   00014A                ; Setup parameters for call to function osal_memset
   \   00014A   7C18         MOV       R4,#0x18
   \   00014C   7D00         MOV       R5,#0x0
   \   00014E   7900         MOV       R1,#0x0
   \   000150   AA..         MOV       R2,?V0
   \   000152   AB..         MOV       R3,?V1
   \   000154   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3628          
   3629              osal_mem_free(pKeyData);
   \   000157                ; Setup parameters for call to function osal_mem_free
   \   000157   AA..         MOV       R2,?V0
   \   000159   AB..         MOV       R3,?V1
   \   00015B   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3630            }
   3631          }
   \                     ??ZDSecMgrSaveApsLinkKey_0:
   \   00015E   7F04         MOV       R7,#0x4
   \   000160   02....       LJMP      ?BANKED_LEAVE_XDATA
   3632          
   3633          /******************************************************************************
   3634           * @fn          ZDSecMgrSaveTCLinkKey
   3635           *
   3636           * @brief       Save TC Link Key to NV. It will loop through all the keys
   3637           *              to see which one to save.
   3638           *
   3639           * @param       none
   3640           *
   3641           * @return      none
   3642           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3643          void ZDSecMgrSaveTCLinkKey(void)
   \                     ZDSecMgrSaveTCLinkKey:
   3644          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3645            APSME_TCLKDevEntry_t *pKeyData = NULL;
   \   000005   75..00       MOV       ?V0,#0x0
   \   000008   75..00       MOV       ?V1,#0x0
   3646            uint16 i;
   3647          
   3648            pKeyData = (APSME_TCLKDevEntry_t *)osal_mem_alloc(sizeof(APSME_TCLKDevEntry_t));
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   7A13         MOV       R2,#0x13
   \   00000D   7B00         MOV       R3,#0x0
   \   00000F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000012   8A..         MOV       ?V2,R2
   \   000014   8B..         MOV       ?V3,R3
   \   000016   85....       MOV       ?V0,?V2
   \   000019   85....       MOV       ?V1,?V3
   3649          
   3650            if (pKeyData != NULL)
   \   00001C   E5..         MOV       A,?V0
   \   00001E   45..         ORL       A,?V1
   \   000020   7003         JNZ       $+5
   \   000022   02....       LJMP      ??ZDSecMgrSaveTCLinkKey_0 & 0xFFFF
   3651            {
   3652              for( i = 0; i < gZDSECMGR_TC_DEVICE_MAX; i++ )
   \   000025   7E00         MOV       R6,#0x0
   \   000027   7F00         MOV       R7,#0x0
   \                     ??ZDSecMgrSaveTCLinkKey_1:
   \   000029   90....       MOV       DPTR,#gZDSECMGR_TC_DEVICE_MAX
   \   00002C   E4           CLR       A
   \   00002D   93           MOVC      A,@A+DPTR
   \   00002E   F8           MOV       R0,A
   \   00002F   7401         MOV       A,#0x1
   \   000031   93           MOVC      A,@A+DPTR
   \   000032   F9           MOV       R1,A
   \   000033   C3           CLR       C
   \   000034   EE           MOV       A,R6
   \   000035   98           SUBB      A,R0
   \   000036   EF           MOV       A,R7
   \   000037   99           SUBB      A,R1
   \   000038   4003         JC        $+5
   \   00003A   02....       LJMP      ??ZDSecMgrSaveTCLinkKey_2 & 0xFFFF
   3653              {
   3654                if (TCLinkKeyFrmCntr[i].pendingFlag == TRUE)
   \   00003D   EE           MOV       A,R6
   \   00003E   F8           MOV       R0,A
   \   00003F   EF           MOV       A,R7
   \   000040   F9           MOV       R1,A
   \   000041   E8           MOV       A,R0
   \   000042   75F009       MOV       B,#0x9
   \   000045   A4           MUL       AB
   \   000046   C8           XCH       A,R0
   \   000047   AAF0         MOV       R2,B
   \   000049   75F000       MOV       B,#0x0
   \   00004C   A4           MUL       AB
   \   00004D   2A           ADD       A,R2
   \   00004E   FA           MOV       R2,A
   \   00004F   75F009       MOV       B,#0x9
   \   000052   E9           MOV       A,R1
   \   000053   A4           MUL       AB
   \   000054   2A           ADD       A,R2
   \   000055   F9           MOV       R1,A
   \   000056   74..         MOV       A,#(TCLinkKeyFrmCntr + 8) & 0xff
   \   000058   28           ADD       A,R0
   \   000059   F582         MOV       DPL,A
   \   00005B   74..         MOV       A,#((TCLinkKeyFrmCntr + 8) >> 8) & 0xff
   \   00005D   39           ADDC      A,R1
   \   00005E   F583         MOV       DPH,A
   \   000060   E0           MOVX      A,@DPTR
   \   000061   6401         XRL       A,#0x1
   \   000063   6003         JZ        $+5
   \   000065   02....       LJMP      ??ZDSecMgrSaveTCLinkKey_3 & 0xFFFF
   3655                {
   3656                  if (osal_nv_read(ZCD_NV_TCLK_TABLE_START + i, 0,
   3657                                   sizeof(APSME_TCLKDevEntry_t), pKeyData) == SUCCESS)
   \   000068                ; Setup parameters for call to function osal_nv_read
   \   000068   78..         MOV       R0,#?V0
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006D   75..13       MOV       ?V2,#0x13
   \   000070   75..00       MOV       ?V3,#0x0
   \   000073   78..         MOV       R0,#?V2
   \   000075   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000078   7C00         MOV       R4,#0x0
   \   00007A   7D00         MOV       R5,#0x0
   \   00007C   EE           MOV       A,R6
   \   00007D   2411         ADD       A,#0x11
   \   00007F   FA           MOV       R2,A
   \   000080   EF           MOV       A,R7
   \   000081   3401         ADDC      A,#0x1
   \   000083   FB           MOV       R3,A
   \   000084   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000087   7404         MOV       A,#0x4
   \   000089   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008C   E9           MOV       A,R1
   \   00008D   6003         JZ        $+5
   \   00008F   02....       LJMP      ??ZDSecMgrSaveTCLinkKey_3 & 0xFFFF
   3658                  {
   3659                    pKeyData->txFrmCntr = TCLinkKeyFrmCntr[i].txFrmCntr;
   \   000092   EE           MOV       A,R6
   \   000093   F8           MOV       R0,A
   \   000094   EF           MOV       A,R7
   \   000095   F9           MOV       R1,A
   \   000096   E8           MOV       A,R0
   \   000097   75F009       MOV       B,#0x9
   \   00009A   A4           MUL       AB
   \   00009B   C8           XCH       A,R0
   \   00009C   AAF0         MOV       R2,B
   \   00009E   75F000       MOV       B,#0x0
   \   0000A1   A4           MUL       AB
   \   0000A2   2A           ADD       A,R2
   \   0000A3   FA           MOV       R2,A
   \   0000A4   75F009       MOV       B,#0x9
   \   0000A7   E9           MOV       A,R1
   \   0000A8   A4           MUL       AB
   \   0000A9   2A           ADD       A,R2
   \   0000AA   F9           MOV       R1,A
   \   0000AB   74..         MOV       A,#TCLinkKeyFrmCntr & 0xff
   \   0000AD   28           ADD       A,R0
   \   0000AE   F582         MOV       DPL,A
   \   0000B0   74..         MOV       A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   0000B2   39           ADDC      A,R1
   \   0000B3   F583         MOV       DPH,A
   \   0000B5   12....       LCALL     ?XLOAD_R0123
   \   0000B8   85..82       MOV       DPL,?V0
   \   0000BB   85..83       MOV       DPH,?V1
   \   0000BE   12....       LCALL     ?XSTORE_R0123
   3660                    pKeyData->rxFrmCntr = TCLinkKeyFrmCntr[i].rxFrmCntr;
   \   0000C1   EE           MOV       A,R6
   \   0000C2   F8           MOV       R0,A
   \   0000C3   EF           MOV       A,R7
   \   0000C4   F9           MOV       R1,A
   \   0000C5   E8           MOV       A,R0
   \   0000C6   75F009       MOV       B,#0x9
   \   0000C9   A4           MUL       AB
   \   0000CA   C8           XCH       A,R0
   \   0000CB   AAF0         MOV       R2,B
   \   0000CD   75F000       MOV       B,#0x0
   \   0000D0   A4           MUL       AB
   \   0000D1   2A           ADD       A,R2
   \   0000D2   FA           MOV       R2,A
   \   0000D3   75F009       MOV       B,#0x9
   \   0000D6   E9           MOV       A,R1
   \   0000D7   A4           MUL       AB
   \   0000D8   2A           ADD       A,R2
   \   0000D9   F9           MOV       R1,A
   \   0000DA   74..         MOV       A,#(TCLinkKeyFrmCntr + 4) & 0xff
   \   0000DC   28           ADD       A,R0
   \   0000DD   F582         MOV       DPL,A
   \   0000DF   74..         MOV       A,#((TCLinkKeyFrmCntr + 4) >> 8) & 0xff
   \   0000E1   39           ADDC      A,R1
   \   0000E2   F583         MOV       DPH,A
   \   0000E4   12....       LCALL     ?XLOAD_R0123
   \   0000E7   85..82       MOV       DPL,?V0
   \   0000EA   85..83       MOV       DPH,?V1
   \   0000ED   A3           INC       DPTR
   \   0000EE   A3           INC       DPTR
   \   0000EF   A3           INC       DPTR
   \   0000F0   A3           INC       DPTR
   \   0000F1   12....       LCALL     ?XSTORE_R0123
   3661          
   3662                    // Write the TC link key back to the NV
   3663                    osal_nv_write(ZCD_NV_TCLK_TABLE_START + i, 0,
   3664                                  sizeof(APSME_TCLKDevEntry_t), pKeyData);
   \   0000F4                ; Setup parameters for call to function osal_nv_write
   \   0000F4   78..         MOV       R0,#?V0
   \   0000F6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F9   75..13       MOV       ?V2,#0x13
   \   0000FC   75..00       MOV       ?V3,#0x0
   \   0000FF   78..         MOV       R0,#?V2
   \   000101   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000104   7C00         MOV       R4,#0x0
   \   000106   7D00         MOV       R5,#0x0
   \   000108   EE           MOV       A,R6
   \   000109   2411         ADD       A,#0x11
   \   00010B   FA           MOV       R2,A
   \   00010C   EF           MOV       A,R7
   \   00010D   3401         ADDC      A,#0x1
   \   00010F   FB           MOV       R3,A
   \   000110   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000113   7404         MOV       A,#0x4
   \   000115   12....       LCALL     ?DEALLOC_XSTACK8
   \   000118   E9           MOV       A,R1
   3665          
   3666                    // clear the pending write flag
   3667                    TCLinkKeyFrmCntr[i].pendingFlag = FALSE;
   \   000119   EE           MOV       A,R6
   \   00011A   F8           MOV       R0,A
   \   00011B   EF           MOV       A,R7
   \   00011C   F9           MOV       R1,A
   \   00011D   E8           MOV       A,R0
   \   00011E   75F009       MOV       B,#0x9
   \   000121   A4           MUL       AB
   \   000122   C8           XCH       A,R0
   \   000123   AAF0         MOV       R2,B
   \   000125   75F000       MOV       B,#0x0
   \   000128   A4           MUL       AB
   \   000129   2A           ADD       A,R2
   \   00012A   FA           MOV       R2,A
   \   00012B   75F009       MOV       B,#0x9
   \   00012E   E9           MOV       A,R1
   \   00012F   A4           MUL       AB
   \   000130   2A           ADD       A,R2
   \   000131   F9           MOV       R1,A
   \   000132   74..         MOV       A,#(TCLinkKeyFrmCntr + 8) & 0xff
   \   000134   28           ADD       A,R0
   \   000135   F582         MOV       DPL,A
   \   000137   74..         MOV       A,#((TCLinkKeyFrmCntr + 8) >> 8) & 0xff
   \   000139   39           ADDC      A,R1
   \   00013A   F583         MOV       DPH,A
   \   00013C   7400         MOV       A,#0x0
   \   00013E   F0           MOVX      @DPTR,A
   3668                  }
   3669                }
   3670              }
   \                     ??ZDSecMgrSaveTCLinkKey_3:
   \   00013F   0E           INC       R6
   \   000140   EE           MOV       A,R6
   \   000141   7001         JNZ       ??ZDSecMgrSaveTCLinkKey_4
   \   000143   0F           INC       R7
   \                     ??ZDSecMgrSaveTCLinkKey_4:
   \   000144   02....       LJMP      ??ZDSecMgrSaveTCLinkKey_1 & 0xFFFF
   3671          
   3672              osal_mem_free(pKeyData);
   \                     ??ZDSecMgrSaveTCLinkKey_2:
   \   000147                ; Setup parameters for call to function osal_mem_free
   \   000147   AA..         MOV       R2,?V0
   \   000149   AB..         MOV       R3,?V1
   \   00014B   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3673            }
   3674          }
   \                     ??ZDSecMgrSaveTCLinkKey_0:
   \   00014E   7F04         MOV       R7,#0x4
   \   000150   02....       LJMP      ?BANKED_LEAVE_XDATA
   3675          
   3676          /******************************************************************************
   3677           * @fn          ZDSecMgrUpdateTCAddress
   3678           *
   3679           * @brief       Update Trust Center address and save to NV.
   3680           *
   3681           * @param       extAddr - [in] extended address or NULL if no TC protected
   3682           *
   3683           * @return      none
   3684           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3685          void ZDSecMgrUpdateTCAddress( uint8 *extAddr )
   \                     ZDSecMgrUpdateTCAddress:
   3686          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   3687            uint8 noTCAddress[Z_EXTADDR_LEN] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
   \   00000E   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   000011   AC..         MOV       R4,?XSP + 0
   \   000013   AD..         MOV       R5,?XSP + 1
   \   000015   7408         MOV       A,#0x8
   \   000017   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   3688            APSME_SetRequest( apsTrustCenterAddress, 0, ( extAddr != NULL) ? extAddr : noTCAddress );
   \   00001A   EE           MOV       A,R6
   \   00001B   4F           ORL       A,R7
   \   00001C   6006         JZ        ??ZDSecMgrUpdateTCAddress_0
   \   00001E   EE           MOV       A,R6
   \   00001F   FC           MOV       R4,A
   \   000020   EF           MOV       A,R7
   \   000021   FD           MOV       R5,A
   \   000022   800C         SJMP      ??ZDSecMgrUpdateTCAddress_1
   \                     ??ZDSecMgrUpdateTCAddress_0:
   \   000024   A8..         MOV       R0,?XSP + 0
   \   000026   A9..         MOV       R1,?XSP + 1
   \   000028   88..         MOV       ?V0,R0
   \   00002A   89..         MOV       ?V1,R1
   \   00002C   AC..         MOV       R4,?V0
   \   00002E   AD..         MOV       R5,?V1
   \                     ??ZDSecMgrUpdateTCAddress_1:
   \   000030                ; Setup parameters for call to function APSME_SetRequest
   \   000030   7A00         MOV       R2,#0x0
   \   000032   7B00         MOV       R3,#0x0
   \   000034   79AB         MOV       R1,#-0x55
   \   000036   12....       LCALL     `??APSME_SetRequest::?relay`; Banked call to: APSME_SetRequest
   \   000039   E9           MOV       A,R1
   3689            osal_cpyExtAddr( zgApsTrustCenterAddr, ( extAddr != NULL) ? extAddr : noTCAddress );
   \   00003A   EE           MOV       A,R6
   \   00003B   4F           ORL       A,R7
   \   00003C   6006         JZ        ??ZDSecMgrUpdateTCAddress_2
   \   00003E   EE           MOV       A,R6
   \   00003F   FC           MOV       R4,A
   \   000040   EF           MOV       A,R7
   \   000041   FD           MOV       R5,A
   \   000042   800C         SJMP      ??ZDSecMgrUpdateTCAddress_3
   \                     ??ZDSecMgrUpdateTCAddress_2:
   \   000044   A8..         MOV       R0,?XSP + 0
   \   000046   A9..         MOV       R1,?XSP + 1
   \   000048   88..         MOV       ?V0,R0
   \   00004A   89..         MOV       ?V1,R1
   \   00004C   AC..         MOV       R4,?V0
   \   00004E   AD..         MOV       R5,?V1
   \                     ??ZDSecMgrUpdateTCAddress_3:
   \   000050                ; Setup parameters for call to function sAddrExtCpy
   \   000050   7A..         MOV       R2,#zgApsTrustCenterAddr & 0xff
   \   000052   7B..         MOV       R3,#(zgApsTrustCenterAddr >> 8) & 0xff
   \   000054   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3690            
   3691          #if defined ( NV_RESTORE )
   3692            osal_nv_write( ZCD_NV_TRUSTCENTER_ADDR, 0, Z_EXTADDR_LEN, zgApsTrustCenterAddr );
   \   000057                ; Setup parameters for call to function osal_nv_write
   \   000057   75....       MOV       ?V0,#zgApsTrustCenterAddr & 0xff
   \   00005A   75....       MOV       ?V1,#(zgApsTrustCenterAddr >> 8) & 0xff
   \   00005D   78..         MOV       R0,#?V0
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000062   75..08       MOV       ?V0,#0x8
   \   000065   75..00       MOV       ?V1,#0x0
   \   000068   78..         MOV       R0,#?V0
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006D   7C00         MOV       R4,#0x0
   \   00006F   7D00         MOV       R5,#0x0
   \   000071   7A71         MOV       R2,#0x71
   \   000073   7B00         MOV       R3,#0x0
   \   000075   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000078   7404         MOV       A,#0x4
   \   00007A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007D   E9           MOV       A,R1
   3693          #endif
   3694          }
   \   00007E   7408         MOV       A,#0x8
   \   000080   12....       LCALL     ?DEALLOC_XSTACK8
   \   000083   7F02         MOV       R7,#0x2
   \   000085   02....       LJMP      ?BANKED_LEAVE_XDATA
   3695          
   3696          #if defined ( ZBA_FALLBACK_NWKKEY )
   3697          /******************************************************************************
   3698           * @fn          ZDSecMgrFallbackNwkKey
   3699           *
   3700           * @brief       Use the ZBA fallback network key.
   3701           *
   3702           * @param       none
   3703           *
   3704           * @return      none
   3705           */
   3706          void ZDSecMgrFallbackNwkKey( void )
   3707          {
   3708            if ( !_NIB.nwkKeyLoaded )
   3709            {
   3710              uint8 fallbackKey[SEC_KEY_LEN];
   3711          
   3712              ZDSecMgrReadKeyFromNv( ZCD_NV_PRECFGKEY, fallbackKey );
   3713              SSP_UpdateNwkKey( fallbackKey, 0);
   3714              SSP_SwitchNwkKey( 0 );
   3715          
   3716              // clear local copy of key
   3717              osal_memset( fallbackKey, 0x00, SEC_KEY_LEN );
   3718          
   3719              // handle next step in authentication process
   3720              ZDSecMgrAuthNwkKey();
   3721            }
   3722          }
   3723          #endif // defined ( ZBA_FALLBACK_NWKKEY )
   3724          
   3725          #if defined ( NV_RESTORE )
   3726          /******************************************************************************
   3727           * @fn          ZDSecMgrClearNVKeyValues
   3728           *
   3729           * @brief       If NV_RESTORE is enabled and the status of the network needs
   3730           *              default values this fuction clears ZCD_NV_NWKKEY,
   3731           *              ZCD_NV_NWK_ACTIVE_KEY_INFO and ZCD_NV_NWK_ALTERN_KEY_INFO link
   3732           *
   3733           * @param       none
   3734           *
   3735           * @return      none
   3736           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3737          void ZDSecMgrClearNVKeyValues(void)
   \                     ZDSecMgrClearNVKeyValues:
   3738          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 38
   \   000005   74DA         MOV       A,#-0x26
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3739            nwkActiveKeyItems keyItems;
   3740            nwkKeyDesc nwkKey;
   3741          
   3742            osal_memset(&keyItems, 0x00, sizeof(nwkActiveKeyItems));
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV       R4,#0x15
   \   00000C   7D00         MOV       R5,#0x0
   \   00000E   7900         MOV       R1,#0x0
   \   000010   7411         MOV       A,#0x11
   \   000012   12....       LCALL     ?XSTACK_DISP101_8
   \   000015   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3743          
   3744            osal_nv_write(ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems);
   \   000018                ; Setup parameters for call to function osal_nv_write
   \   000018   7411         MOV       A,#0x11
   \   00001A   12....       LCALL     ?XSTACK_DISP100_8
   \   00001D   88..         MOV       ?V0,R0
   \   00001F   89..         MOV       ?V1,R1
   \   000021   78..         MOV       R0,#?V0
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000026   75..15       MOV       ?V0,#0x15
   \   000029   75..00       MOV       ?V1,#0x0
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   7C00         MOV       R4,#0x0
   \   000033   7D00         MOV       R5,#0x0
   \   000035   7A82         MOV       R2,#-0x7e
   \   000037   7B00         MOV       R3,#0x0
   \   000039   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003C   7404         MOV       A,#0x4
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000041   E9           MOV       A,R1
   3745          
   3746            // Initialize NV items for NWK Active and Alternate keys.
   3747            osal_memset( &nwkKey, 0x00, sizeof(nwkKeyDesc) );
   \   000042                ; Setup parameters for call to function osal_memset
   \   000042   7C11         MOV       R4,#0x11
   \   000044   7D00         MOV       R5,#0x0
   \   000046   7900         MOV       R1,#0x0
   \   000048   AA..         MOV       R2,?XSP + 0
   \   00004A   AB..         MOV       R3,?XSP + 1
   \   00004C   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3748          
   3749            osal_nv_write(ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKeyDesc), &nwkKey);
   \   00004F                ; Setup parameters for call to function osal_nv_write
   \   00004F   A8..         MOV       R0,?XSP + 0
   \   000051   A9..         MOV       R1,?XSP + 1
   \   000053   88..         MOV       ?V0,R0
   \   000055   89..         MOV       ?V1,R1
   \   000057   78..         MOV       R0,#?V0
   \   000059   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005C   75..11       MOV       ?V0,#0x11
   \   00005F   75..00       MOV       ?V1,#0x0
   \   000062   78..         MOV       R0,#?V0
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000067   7C00         MOV       R4,#0x0
   \   000069   7D00         MOV       R5,#0x0
   \   00006B   7A3A         MOV       R2,#0x3a
   \   00006D   7B00         MOV       R3,#0x0
   \   00006F   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000072   7404         MOV       A,#0x4
   \   000074   12....       LCALL     ?DEALLOC_XSTACK8
   \   000077   E9           MOV       A,R1
   3750          
   3751            osal_nv_write(ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKeyDesc), &nwkKey);
   \   000078                ; Setup parameters for call to function osal_nv_write
   \   000078   A8..         MOV       R0,?XSP + 0
   \   00007A   A9..         MOV       R1,?XSP + 1
   \   00007C   88..         MOV       ?V0,R0
   \   00007E   89..         MOV       ?V1,R1
   \   000080   78..         MOV       R0,#?V0
   \   000082   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000085   75..11       MOV       ?V0,#0x11
   \   000088   75..00       MOV       ?V1,#0x0
   \   00008B   78..         MOV       R0,#?V0
   \   00008D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000090   7C00         MOV       R4,#0x0
   \   000092   7D00         MOV       R5,#0x0
   \   000094   7A3B         MOV       R2,#0x3b
   \   000096   7B00         MOV       R3,#0x0
   \   000098   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00009B   7404         MOV       A,#0x4
   \   00009D   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A0   E9           MOV       A,R1
   3752          }
   \   0000A1   7426         MOV       A,#0x26
   \   0000A3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A6   7F02         MOV       R7,#0x2
   \   0000A8   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for requestNewTrustCenterLinkKey`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for requestLinkKeyTimeout>`:
   \   000000   88130000     DD 5000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDSecMgrAppKeyType>`:
   \   000000   03           DB 3

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e9:
   \   000000   E9030000     DD 1001

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_b:
   \   000000   0B000000     DD 11

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_a:
   \   000000   0A000000     DD 10
   3753          #endif // defined ( NV_RESTORE )
   3754          
   3755          /******************************************************************************
   3756          ******************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   APSME_IsDefaultTCLK
        0      9   -> osal_isbufset
      0     37   APSME_IsLinkKeyValid
        0     33   -> APSME_LinkKeyNVIdGet
        0     33   -> osal_mem_alloc
        0     33   -> osal_mem_free
        0     36   -> osal_memcmp
        0     33   -> osal_memset
        0     37   -> osal_nv_read
      0      9   APSME_KeyFwdToChild
        0      9   -> AssocGetWithExt
        0      9   -> ZDSecMgrAssocDeviceAuth
      0     46   APSME_LinkKeyNVIdGet
        0     13   -> ZDSecMgrEntryLookupExt
      0     80   APSME_LinkKeySet
        0     24   -> ZDSecMgrEntryLookupExtGetIndex
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     25   -> osal_memcpy
        0     22   -> osal_memset
        0     26   -> osal_nv_read
        0     26   -> osal_nv_write
      0     48   APSME_TCLinkKeyInit
        0     35   -> APSME_EraseICEntry
        0     35   -> osal_memset
        0     37   -> osal_nv_item_init
        0     39   -> osal_nv_read
        0     39   -> osal_nv_write
      1     61   APSME_TCLinkKeyLoad
        0     59   -> APSME_SearchTCLinkKeyEntry
        0     57   -> AddrMgrEntryLookupNwk
        0     57   -> AddrMgrEntryRelease
        0     57   -> AddrMgrExtAddrValid
        0     60   -> osal_memcpy
        0     57   -> osal_memset
        0     61   -> osal_nv_write
        0     57   -> osal_rand
        0     57   -> osal_set_event
      1     53   APSME_TCLinkKeySync
        0     50   -> APSME_LookupExtAddr
        0     52   -> APSME_SearchTCLinkKeyEntry
        0     50   -> AddrMgrExtAddrValid
        0     50   -> bdb_doTrustCenterRequireKeyExchange
        0     53   -> osal_memcpy
        0     50   -> osal_memset
      0     22   ZDSecMgrAPSRemove
        0     20   -> ZDSecMgrDeviceRemove
      0     22   ZDSecMgrAddLinkKey
        0     18   -> APSME_LinkKeySet
        0     20   -> ZDSecMgrAddrStore
        0     18   -> ZDSecMgrAuthenticationSet
        0     18   -> ZDSecMgrEntryLookupAMI
        0     18   -> ZDSecMgrEntryNew
        0     18   -> ZDSecMgrWriteNV
      0     59   ZDSecMgrAddrClear
        0     24   -> AddrMgrEntryRelease
        0     24   -> ZDSecMgrExtAddrLookup
      0     82   ZDSecMgrAddrStore
        0     26   -> AddrMgrEntryUpdate
        0     26   -> AddrMgrExtAddrSet
      3     15   ZDSecMgrAppConfKeyReq
      1     71   ZDSecMgrAppKeyGet
        0     14   -> SSP_GetTrueRand
      0     66   ZDSecMgrAppKeyReq
        0     49   -> APSME_LookupExtAddr
        0     49   -> APSME_LookupNwkAddr
        0     49   -> APSME_TransportKeyReq
        0     57   -> ZDSecMgrAppKeyGet
        0     49   -> osal_memset
      0     49   ZDSecMgrApsLinkKeyInit
        0     36   -> osal_memset
        0     38   -> osal_nv_item_init
        0     40   -> osal_nv_write
      2     36   ZDSecMgrAssocDeviceAuth
      2     54   ZDSecMgrAuthNwkKey
        2      0   -> osal_set_event
      0     22   ZDSecMgrAuthenticationCheck
        0     22   -> APSME_GetRequest
        0     22   -> AddrMgrExtAddrLookup
        0     22   -> NLME_GetExtAddr
        0     22   -> ZDSecMgrEntryLookupExt
        0     22   -> ZDSecMgrExtAddrLookup
        0     22   -> sAddrExtCmp
      1     30   ZDSecMgrAuthenticationSet
        0     12   -> ZDSecMgrEntryLookupExt
      0     52   ZDSecMgrClearNVKeyValues
        0     48   -> osal_memset
        0     52   -> osal_nv_write
      2      9   ZDSecMgrConfig
        2      0   -> APSME_SecurityCM_ED
        2      0   -> SSP_Init
      0     68   ZDSecMgrDeviceJoin
        0     29   -> ZDSecMgrAddrClear
        0     31   -> ZDSecMgrAddrStore
        0     29   -> ZDSecMgrDeviceRemove
        0     29   -> ZDSecMgrDeviceValidate
        0     29   -> ZDSecMgrSendNwkKey
        0     32   -> osal_memcpy
      0     40   ZDSecMgrDeviceJoinDirect
        0     38   -> APSME_SearchTCLinkKeyEntry
        0     36   -> AssocGetWithShort
        0     36   -> ZDSecMgrAssocDeviceAuth
        0     36   -> ZDSecMgrDeviceJoin
        0     40   -> osal_nv_write
      0     40   ZDSecMgrDeviceJoinFwd
        0     29   -> APSME_GetRequest
        0     31   -> APSME_SearchTCLinkKeyEntry
        0     29   -> APSME_UpdateDeviceReq
        0     29   -> AssocGetWithShort
        0     29   -> ZDSecMgrAssocDeviceAuth
      0     44   ZDSecMgrDeviceNew
        0      9   -> ZDSecMgrDeviceJoinFwd
      0     62   ZDSecMgrDeviceRemove
        0     31   -> APSME_GetRequest
        0     31   -> APSME_RemoveDeviceReq
        0     33   -> APSME_SearchTCLinkKeyEntry
        0     31   -> AssocGetWithExt
        0     31   -> NLME_GetShortAddr
        0     31   -> NLME_LeaveReq
      0     11   ZDSecMgrDeviceRemoveByExtAddr
        0     11   -> ZDSecMgrEntryFree
        0     11   -> ZDSecMgrEntryLookupExt
      0     38   ZDSecMgrDeviceValidate
        0      9   -> ZDSecMgrDeviceValidateRM
      2      9   ZDSecMgrDeviceValidateRM
      0     31   ZDSecMgrEntryFree
        0     16   -> ZDSecMgrEntryLookupAMIGetIndex
        0     16   -> ZDSecMgrUpdateNV
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
        0     16   -> osal_memset
        0     20   -> osal_nv_write
      0     18   ZDSecMgrEntryInit
        0      9   -> ZDSecMgrRestoreFromNV
        0      9   -> osal_mem_alloc
      0     25   ZDSecMgrEntryLookup
        0     25   -> AddrMgrEntryLookupNwk
      0     63   ZDSecMgrEntryLookupAMI
      0     25   ZDSecMgrEntryLookupAMIGetIndex
      0     35   ZDSecMgrEntryLookupExt
        0     13   -> ZDSecMgrEntryLookupAMI
        0     13   -> ZDSecMgrExtAddrLookup
      0     40   ZDSecMgrEntryLookupExtGetIndex
        0     16   -> ZDSecMgrExtAddrLookup
      0     63   ZDSecMgrEntryNew
      0     78   ZDSecMgrExtAddrLookup
        0     24   -> AddrMgrEntryLookupExt
        0     24   -> AddrMgrExtAddrSet
      0     28   ZDSecMgrExtAddrStore
        0     26   -> AddrMgrEntryUpdate
        0     26   -> AddrMgrExtAddrSet
      0    105   ZDSecMgrGenerateKeyFromSeed
        0     35   -> osal_memcpy
        0     36   -> osal_nv_read
      1     40   ZDSecMgrGenerateRndKey
        0     14   -> osal_rand
      0     30   ZDSecMgrGenerateSeed
        0     26   -> ZDSecMgrGenerateRndKey
        0     26   -> osal_memset
        0     28   -> osal_nv_item_init
        0     30   -> osal_nv_write
      0      9   ZDSecMgrInit
        0      9   -> ZDSecMgrConfig
        0      9   -> ZDSecMgrEntryInit
      0     16   ZDSecMgrInitNV
        0     14   -> osal_nv_item_init
        0     16   -> osal_nv_write
      0      9   ZDSecMgrInitNVKeyTables
        0      9   -> APSME_TCLinkKeyInit
        0      9   -> ZDSecMgrApsLinkKeyInit
        0      9   -> ZDSecMgrNwkKeyInit
      1     35   ZDSecMgrNewDeviceEvent
        0     35   -> AddrMgrEntryGet
        0     35   -> AssocGetWithShort
        0     35   -> AssocRemove
        0     35   -> NLME_GetShortAddr
        0     35   -> ZDSecMgrAddrClear
        0     35   -> ZDSecMgrAssocDeviceAuth
        0     35   -> ZDSecMgrDeviceNew
      0     75   ZDSecMgrNwkKeyInit
        0     62   -> osal_memset
        0     64   -> osal_nv_item_init
        0     66   -> osal_nv_write
        0     62   -> zgReadStartupOptions
      2      0   ZDSecMgrPermitJoining
      2      0   ZDSecMgrPermitJoiningTimeout
      0     73   ZDSecMgrReadKeyFromNv
        0     18   -> osal_memcpy
        0     19   -> osal_nv_read
      0     17   ZDSecMgrRemoveDeviceInd
        0     17   -> APSME_LookupNwkAddr
        0     17   -> NLME_GetShortAddr
        0     17   -> ZDSecMgrDeviceRemove
      0     13   ZDSecMgrRequestAppKey
        0     13   -> APSME_RequestKeyReq
      0      9   ZDSecMgrRequestKeyInd
        0      9   -> ZDSecMgrAppKeyReq
        0      9   -> ZDSecMgrTclkReq
      0     31   ZDSecMgrRestoreFromNV
        0     18   -> osal_mem_alloc
        0     18   -> osal_mem_free
        0     18   -> osal_memset
        0     22   -> osal_nv_read
        0     22   -> osal_nv_write
      0     16   ZDSecMgrSaveApsLinkKey
        0     12   -> osal_mem_alloc
        0     12   -> osal_mem_free
        0     12   -> osal_memset
        0     16   -> osal_nv_read
        0     16   -> osal_nv_write
      0     16   ZDSecMgrSaveTCLinkKey
        0     12   -> osal_mem_alloc
        0     12   -> osal_mem_free
        0     16   -> osal_nv_read
        0     16   -> osal_nv_write
      1     79   ZDSecMgrSendNwkKey
        0     46   -> APSME_TransportKeyReq
        0     46   -> NLME_GetShortAddr
        0     50   -> NLME_ReadNwkKeyInfo
        0     46   -> osal_memset
      0     23   ZDSecMgrSetDefaultNV
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     19   -> osal_memset
        0     23   -> osal_nv_write
      0     25   ZDSecMgrSetupPartner
        0     25   -> AddrMgrEntryUpdate
        0     25   -> AddrMgrExtAddrSet
        0     25   -> AddrMgrExtAddrValid
        0     25   -> ZDP_IEEEAddrReq
        0     25   -> ZDP_NwkAddrReq
      0      9   ZDSecMgrSwitchKeyInd
        0      9   -> SSP_SwitchNwkKey
        0      9   -> ZDApp_NVUpdate
      0     81   ZDSecMgrTCDataLoad
        0     25   -> APSME_IsDistributedSecurity
        0     25   -> AddrMgrEntryLookupExt
        0     27   -> ZDSecMgrAddrStore
        0     25   -> sAddrExtCpy
      0     17   ZDSecMgrTCExtAddrCheck
        0     17   -> APSME_GetRequest
        0     17   -> sAddrExtCmp
      0     80   ZDSecMgrTclkReq
        0     69   -> APSME_LookupExtAddr
        0     69   -> APSME_LookupNwkAddr
        0     71   -> APSME_SearchTCLinkKeyEntry
        0     69   -> APSME_TransportKeyReq
        0     69   -> ZDSecMgrGenerateKeyFromSeed
        0     69   -> osal_memset
      0     58   ZDSecMgrTransportKeyInd
        0     54   -> APSME_EraseICEntry
        0     54   -> APSME_LinkKeySet
        0     56   -> APSME_SearchTCLinkKeyEntry
        0     54   -> SSP_SwitchNwkKey
        0     54   -> SSP_UpdateNwkKey
        0     54   -> ZDP_NwkAddrReq
        0     56   -> ZDSecMgrAddrStore
        0     54   -> ZDSecMgrAuthNwkKey
        0     54   -> ZDSecMgrEntryLookupAMI
        0     54   -> ZDSecMgrEntryNew
        0     54   -> ZDSecMgrExtAddrLookup
        0     54   -> ZDSecMgrReadKeyFromNv
        0     54   -> ZDSecMgrTCDataLoad
        0     54   -> ZDSecMgrUpdateTCAddress
        0     54   -> ZDSecMgrWriteNV
        0     54   -> bdb_tcLinkKeyExchangeAttempt
        0     54   -> osal_memset
        0     56   -> osal_nv_item_init
        0     58   -> osal_nv_write
      0     17   ZDSecMgrUpdateDeviceInd
        0     17   -> ZDSecMgrDeviceJoin
      0     32   ZDSecMgrUpdateNV
        0     16   -> osal_nv_read
        0     16   -> osal_nv_write
      0     76   ZDSecMgrUpdateTCAddress
        0     18   -> APSME_SetRequest
        0     22   -> osal_nv_write
        0     18   -> sAddrExtCpy
      0      9   ZDSecMgrVerifyKeyInd
        0      9   -> ZDSecMgrAppConfKeyReq
      0     70   ZDSecMgrWriteNV
        0     16   -> osal_nv_write


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant {255, 255, 255, 255, 255, 255, 255,
       1  ?<Initializer for ZDSecMgrAppKeyType>
       4  ?<Initializer for requestLinkKeyTimeout>
       1  ?<Initializer for requestNewTrustCenterLinkKey
      25  APSME_IsDefaultTCLK
     204  APSME_IsLinkKeyValid
      76  APSME_KeyFwdToChild
      95  APSME_LinkKeyNVIdGet
     470  APSME_LinkKeySet
     515  APSME_TCLinkKeyInit
     853  APSME_TCLinkKeyLoad
     660  APSME_TCLinkKeySync
      27  ApsLinkKeyFrmCntr
      27  TCLinkKeyFrmCntr
      19  TrustCenterLinkKey
     116  ZDSecMgrAPSRemove
     182  ZDSecMgrAddLinkKey
      89  ZDSecMgrAddrClear
     141  ZDSecMgrAddrStore
      99  ZDSecMgrAppConfKeyReq
      79  ZDSecMgrAppKeyGet
     322  ZDSecMgrAppKeyReq
       1  ZDSecMgrAppKeyType
     143  ZDSecMgrApsLinkKeyInit
      28  ZDSecMgrAssocDeviceAuth
      32  ZDSecMgrAuthNwkKey
     146  ZDSecMgrAuthenticationCheck
      71  ZDSecMgrAuthenticationSet
     171  ZDSecMgrClearNVKeyValues
      17  ZDSecMgrConfig
     284  ZDSecMgrDeviceJoin
     376  ZDSecMgrDeviceJoinDirect
     338  ZDSecMgrDeviceJoinFwd
      26  ZDSecMgrDeviceNew
     394  ZDSecMgrDeviceRemove
      58  ZDSecMgrDeviceRemoveByExtAddr
      39  ZDSecMgrDeviceValidate
      21  ZDSecMgrDeviceValidateRM
       2  ZDSecMgrEntries
     185  ZDSecMgrEntryFree
     173  ZDSecMgrEntryInit
     218  ZDSecMgrEntryLookup
     164  ZDSecMgrEntryLookupAMI
     110  ZDSecMgrEntryLookupAMIGetIndex
      79  ZDSecMgrEntryLookupExt
     224  ZDSecMgrEntryLookupExtGetIndex
     208  ZDSecMgrEntryNew
     117  ZDSecMgrExtAddrLookup
     141  ZDSecMgrExtAddrStore
     284  ZDSecMgrGenerateKeyFromSeed
     130  ZDSecMgrGenerateRndKey
     118  ZDSecMgrGenerateSeed
      20  ZDSecMgrInit
     140  ZDSecMgrInitNV
      27  ZDSecMgrInitNVKeyTables
     268  ZDSecMgrNewDeviceEvent
     544  ZDSecMgrNwkKeyInit
      44  ZDSecMgrPermitJoining
       1  ZDSecMgrPermitJoiningEnabled
       1  ZDSecMgrPermitJoiningTimed
      31  ZDSecMgrPermitJoiningTimeout
     399  ZDSecMgrReadKeyFromNv
      95  ZDSecMgrRemoveDeviceInd
      63  ZDSecMgrRequestAppKey
      69  ZDSecMgrRequestKeyInd
     728  ZDSecMgrRestoreFromNV
     355  ZDSecMgrSaveApsLinkKey
     339  ZDSecMgrSaveTCLinkKey
     335  ZDSecMgrSendNwkKey
     284  ZDSecMgrSetDefaultNV
     137  ZDSecMgrSetupPartner
      30  ZDSecMgrSwitchKeyInd
       1  ZDSecMgrTCAuthenticated
      97  ZDSecMgrTCDataLoad
       8  ZDSecMgrTCExtAddr
      49  ZDSecMgrTCExtAddrCheck
     278  ZDSecMgrTclkReq
     731  ZDSecMgrTransportKeyInd
     163  ZDSecMgrUpdateDeviceInd
     317  ZDSecMgrUpdateNV
     136  ZDSecMgrUpdateTCAddress
      21  ZDSecMgrVerifyKeyInd
     275  ZDSecMgrWriteNV
       4  __Constant_1
       4  __Constant_3e9
       4  __Constant_a
       4  __Constant_b
       1  gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY
       2  gZDSECMGR_TC_DEVICE_IC_MAX
       2  gZDSECMGR_TC_DEVICE_MAX
       4  requestLinkKeyTimeout
       1  requestNewTrustCenterLinkKey
     420  -- Other

 
 14 196 bytes in segment BANKED_CODE
    420 bytes in segment BANK_RELAYS
      4 bytes in segment CODE_C
      6 bytes in segment XDATA_I
      6 bytes in segment XDATA_ID
     24 bytes in segment XDATA_ROM_C
     87 bytes in segment XDATA_Z
 
    430 bytes of CODE     memory
      8 bytes of CONST    memory (+ 16 bytes shared)
 14 196 bytes of HUGECODE memory
     93 bytes of XDATA    memory

Errors: none
Warnings: none
