###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               30/Jul/2020  15:22:08
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack 3.0.2\Components\hal\target\CC2530EB\hal_adc.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW4B8.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\hal\target\CC2530EB\hal_adc.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xPOWER_SAVING -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_GROUPS -D BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\hal_adc.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\hal_adc.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\hal\target\CC2530EB\hal_adc.c
      1          /**************************************************************************************************
      2            Filename:       hal_adc.c
      3            Revised:        $Date: 2010-03-12 16:10:36 -0800 (Fri, 12 Mar 2010) $
      4            Revision:       $Revision: 21910 $
      5          
      6            Description:    This file contains the interface to the HAL ADC.
      7          
      8          
      9            Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /**************************************************************************************************
     41           *                                           INCLUDES
     42           **************************************************************************************************/
     43          
     44          #include  "hal_adc.h"

   \                                 In  segment SFR_AN, at 0xb4
   \   unsigned char volatile __sfr ADCCON1
   \                     ADCCON1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1
     45          #include  "hal_defs.h"
     46          #include  "hal_mcu.h"
     47          #include  "hal_types.h"
     48          #include <math.h>
     49          
     50          /**************************************************************************************************
     51           *                                            CONSTANTS
     52           **************************************************************************************************/
     53          #define HAL_ADC_EOC         0x80    /* End of Conversion bit */
     54          #define HAL_ADC_START       0x40    /* Starts Conversion */
     55          
     56          #define HAL_ADC_STSEL_EXT   0x00    /* External Trigger */
     57          #define HAL_ADC_STSEL_FULL  0x10    /* Full Speed, No Trigger */
     58          #define HAL_ADC_STSEL_T1C0  0x20    /* Timer1, Channel 0 Compare Event Trigger */
     59          #define HAL_ADC_STSEL_ST    0x30    /* ADCCON1.ST =1 Trigger */
     60          
     61          #define HAL_ADC_RAND_NORM   0x00    /* Normal Operation */
     62          #define HAL_ADC_RAND_LFSR   0x04    /* Clock LFSR */
     63          #define HAL_ADC_RAND_SEED   0x08    /* Seed Modulator */
     64          #define HAL_ADC_RAND_STOP   0x0c    /* Stop Random Generator */
     65          #define HAL_ADC_RAND_BITS   0x0c    /* Bits [3:2] */
     66          
     67          #define HAL_ADC_DEC_064     0x00    /* Decimate by 64 : 8-bit resolution */
     68          #define HAL_ADC_DEC_128     0x10    /* Decimate by 128 : 10-bit resolution */
     69          #define HAL_ADC_DEC_256     0x20    /* Decimate by 256 : 12-bit resolution */
     70          #define HAL_ADC_DEC_512     0x30    /* Decimate by 512 : 14-bit resolution */
     71          #define HAL_ADC_DEC_BITS    0x30    /* Bits [5:4] */
     72          
     73          #define HAL_ADC_STSEL       HAL_ADC_STSEL_ST
     74          #define HAL_ADC_RAND_GEN    HAL_ADC_RAND_STOP
     75          #define HAL_ADC_REF_VOLT    HAL_ADC_REF_AVDD
     76          #define HAL_ADC_DEC_RATE    HAL_ADC_DEC_064
     77          #define HAL_ADC_SCHN        HAL_ADC_CHN_VDD3
     78          #define HAL_ADC_ECHN        HAL_ADC_CHN_GND
     79          
     80          #ifdef ADC_CAL
     81          #define INFO_CAL_H              (*((uint8 *)0x7826)) //calibration values stored here
     82          #define INFO_CAL_L              (*((uint8 *)0x7827))
     83          #endif //ADC_CAL
     84          
     85          /* ------------------------------------------------------------------------------------------------
     86           *                                       Local Variables
     87           * ------------------------------------------------------------------------------------------------
     88           */
     89          
     90          #if (HAL_ADC == TRUE)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     91          static uint8 adcRef;
   \                     adcRef:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     92          #endif
     93          
     94          #ifdef ADC_CAL
     95          uint32 IDEAL_VDD3_CODE = 1780; // this is ideal value for Vdd/3 at 3.0V input and 1.15V V_ref at 12 bit resolution
     96          uint16 vdd3InfoPg;
     97          int16 compensation;
     98          #endif //ADC_CAL
     99          
    100          /***************************************************************************************************
    101           *                                            LOCAL FUNCTION
    102           ***************************************************************************************************/
    103          #ifdef ADC_CAL
    104          static uint16 HalAdcCompensate ( uint16 rawAdcVal, uint8 resolution );
    105          #endif //ADC_CAL
    106          
    107          /**************************************************************************************************
    108           * @fn      HalAdcInit
    109           *
    110           * @brief   Initialize ADC Service
    111           *
    112           * @param   None
    113           *
    114           * @return  None
    115           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    116          void HalAdcInit(void)
   \                     HalAdcInit:
    117          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    118          #if (HAL_ADC == TRUE)
    119            adcRef = HAL_ADC_REF_VOLT;
   \   000004   90....       MOV       DPTR,#adcRef
   \   000007   7480         MOV       A,#-0x80
   \   000009   F0           MOVX      @DPTR,A
    120          #ifdef ADC_CAL
    121            {
    122              vdd3InfoPg = ((INFO_CAL_H << 8) | INFO_CAL_L) >> 4;
    123              compensation = IDEAL_VDD3_CODE - vdd3InfoPg;
    124             }
    125          #endif //ADC_CAL
    126          #endif
    127          }
   \   00000A   D083         POP       DPH
   \   00000C   D082         POP       DPL
   \   00000E   02....       LJMP      ?BRET
    128          
    129          #ifdef ADC_CAL
    130          /**************************************************************************************************
    131           * @fn      HalAdcRead
    132           *
    133           * @brief   Compensate a raw ADC value
    134           *
    135           * @param   rawAdcVal - channel where ADC will be read
    136           *
    137           * @param   voltValue - Pointer that will be set to the converted voltage value
    138          *                      Note: Pass NULL if convertion to voltage is not needed
    139           *
    140           * @param   resolution - Resolution of the rawAdcVal, only needed if converting
    141           *                       to voltageValue
    142           *
    143           * @return  16 bit value of the Compensated ADC value.
    144           *
    145           *          
    146           **************************************************************************************************/
    147          uint16 HalAdcCompensate ( uint16 rawAdcVal, uint8 resolution )
    148          {
    149          {
    150            uint16 compAdcVal;
    151            int16 comp ;
    152            
    153            switch (resolution)
    154            {
    155              case HAL_ADC_RESOLUTION_8:
    156                comp = compensation >> 4;
    157                break;
    158              case HAL_ADC_RESOLUTION_10:
    159                comp = compensation >> 2;
    160                break;
    161              case HAL_ADC_RESOLUTION_14:    
    162                comp = compensation << 2;
    163                break;
    164              case HAL_ADC_RESOLUTION_12:
    165              default:
    166                break;
    167            }
    168            compAdcVal = rawAdcVal + comp;
    169          
    170            return compAdcVal;
    171          }
    172          #endif //ADC_CAL
    173          
    174          /**************************************************************************************************
    175           * @fn      HalAdcRead
    176           *
    177           * @brief   Read the ADC based on given channel and resolution
    178           *
    179           * @param   channel - channel where ADC will be read
    180           * @param   resolution - the resolution of the value
    181           *
    182           * @return  16 bit value of the ADC in offset binary format.
    183           *
    184           *          Note that the ADC is "bipolar", which means the GND (0V) level is mid-scale.
    185           *          Note2: This function assumes that ADCCON3 contains the voltage reference.
    186           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    187          uint16 HalAdcRead (uint8 channel, uint8 resolution)
   \                     HalAdcRead:
    188          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FF           MOV       R7,A
    189            int16  reading = 0;
   \   000009   7A00         MOV       R2,#0x0
   \   00000B   7B00         MOV       R3,#0x0
    190          
    191          #if (HAL_ADC == TRUE)
    192            uint8   i, resbits;
    193            uint8  adcChannel = 1;
   \   00000D   7C01         MOV       R4,#0x1
    194          
    195            /*
    196             * If Analog input channel is AIN0..AIN7, make sure corresponing P0 I/O pin is enabled.  The code
    197             * does NOT disable the pin at the end of this function.  I think it is better to leave the pin
    198             * enabled because the results will be more accurate.  Because of the inherent capacitance on the
    199             * pin, it takes time for the voltage on the pin to charge up to its steady-state level.  If
    200             * HalAdcRead() has to turn on the pin for every conversion, the results may show a lower voltage
    201             * than actuality because the pin did not have time to fully charge.
    202             */
    203            if (channel < 8)
   \   00000F   EE           MOV       A,R6
   \   000010   C3           CLR       C
   \   000011   9408         SUBB      A,#0x8
   \   000013   500E         JNC       ??HalAdcRead_0
    204            {
    205              for (i=0; i < channel; i++)
   \   000015   7D00         MOV       R5,#0x0
   \                     ??HalAdcRead_1:
   \   000017   ED           MOV       A,R5
   \   000018   C3           CLR       C
   \   000019   9E           SUBB      A,R6
   \   00001A   5007         JNC       ??HalAdcRead_0
    206              {
    207                adcChannel <<= 1;
   \   00001C   EC           MOV       A,R4
   \   00001D   C3           CLR       C
   \   00001E   33           RLC       A
   \   00001F   FC           MOV       R4,A
    208              }
   \   000020   0D           INC       R5
   \   000021   80F4         SJMP      ??HalAdcRead_1
    209            }
    210          
    211            /* Enable channel */
    212            ADCCFG |= adcChannel;
   \                     ??HalAdcRead_0:
   \   000023   EC           MOV       A,R4
   \   000024   42F2         ORL       0xf2,A
    213          
    214            /* Convert resolution to decimation rate */
    215            switch (resolution)
   \   000026   EF           MOV       A,R7
   \   000027   14           DEC       A
   \   000028   6008         JZ        ??HalAdcRead_2
   \   00002A   14           DEC       A
   \   00002B   6009         JZ        ??HalAdcRead_3
   \   00002D   14           DEC       A
   \   00002E   600A         JZ        ??HalAdcRead_4
   \   000030   800C         SJMP      ??HalAdcRead_5
    216            {
    217              case HAL_ADC_RESOLUTION_8:
    218                resbits = HAL_ADC_DEC_064;
   \                     ??HalAdcRead_2:
   \   000032   7900         MOV       R1,#0x0
    219                break;
   \   000034   800A         SJMP      ??HalAdcRead_6
    220              case HAL_ADC_RESOLUTION_10:
    221                resbits = HAL_ADC_DEC_128;
   \                     ??HalAdcRead_3:
   \   000036   7910         MOV       R1,#0x10
    222                break;
   \   000038   8006         SJMP      ??HalAdcRead_6
    223              case HAL_ADC_RESOLUTION_12:
    224                resbits = HAL_ADC_DEC_256;
   \                     ??HalAdcRead_4:
   \   00003A   7920         MOV       R1,#0x20
    225                break;
   \   00003C   8002         SJMP      ??HalAdcRead_6
    226              case HAL_ADC_RESOLUTION_14:
    227              default:
    228                resbits = HAL_ADC_DEC_512;
   \                     ??HalAdcRead_5:
   \   00003E   7930         MOV       R1,#0x30
    229                break;
    230            }
    231          
    232            /* writing to this register starts the extra conversion */
    233            ADCCON3 = channel | resbits | adcRef;
   \                     ??HalAdcRead_6:
   \   000040   90....       MOV       DPTR,#adcRef
   \   000043   E0           MOVX      A,@DPTR
   \   000044   F8           MOV       R0,A
   \   000045   EE           MOV       A,R6
   \   000046   49           ORL       A,R1
   \   000047   48           ORL       A,R0
   \   000048   F5B6         MOV       0xb6,A
    234          
    235            /* Wait for the conversion to be done */
    236            while (!(ADCCON1 & HAL_ADC_EOC));
   \                     ??HalAdcRead_7:
   \   00004A   E5B4         MOV       A,0xb4
   \   00004C   A2E7         MOV       C,0xE0 /* A   */.7
   \   00004E   50FA         JNC       ??HalAdcRead_7
    237          
    238            /* Disable channel after done conversion */
    239            ADCCFG &= (adcChannel ^ 0xFF);
   \   000050   74FF         MOV       A,#-0x1
   \   000052   6C           XRL       A,R4
   \   000053   52F2         ANL       0xf2,A
    240          
    241            /* Read the result */
    242            reading = (int16) (ADCL);
   \   000055   E5BA         MOV       A,0xba
   \   000057   F5..         MOV       ?V0,A
   \   000059   75..00       MOV       ?V1,#0x0
   \   00005C   AA..         MOV       R2,?V0
   \   00005E   AB..         MOV       R3,?V1
    243            reading |= (int16) (ADCH << 8);
   \   000060   85BB..       MOV       ?V1,0xbb
   \   000063   85....       MOV       ?V1,?V1
   \   000066   E4           CLR       A
   \   000067   F5..         MOV       ?V0,A
   \   000069   E5..         MOV       A,?V0
   \   00006B   4A           ORL       A,R2
   \   00006C   FA           MOV       R2,A
   \   00006D   E5..         MOV       A,?V1
   \   00006F   4B           ORL       A,R3
   \   000070   FB           MOV       R3,A
    244          
    245            /* Treat small negative as 0 */
    246            if (reading < 0)
   \   000071   C3           CLR       C
   \   000072   EA           MOV       A,R2
   \   000073   9400         SUBB      A,#0x0
   \   000075   EB           MOV       A,R3
   \   000076   9400         SUBB      A,#0x0
   \   000078   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00007A   65D0         XRL       A,PSW
   \   00007C   33           RLC       A
   \   00007D   5004         JNC       ??HalAdcRead_8
    247              reading = 0;
   \   00007F   7A00         MOV       R2,#0x0
   \   000081   7B00         MOV       R3,#0x0
    248          
    249            switch (resolution)
   \                     ??HalAdcRead_8:
   \   000083   EF           MOV       A,R7
   \   000084   14           DEC       A
   \   000085   6008         JZ        ??HalAdcRead_9
   \   000087   14           DEC       A
   \   000088   6016         JZ        ??HalAdcRead_10
   \   00008A   14           DEC       A
   \   00008B   6024         JZ        ??HalAdcRead_11
   \   00008D   8033         SJMP      ??HalAdcRead_12
    250            {
    251              case HAL_ADC_RESOLUTION_8:
    252                reading >>= 8;
   \                     ??HalAdcRead_9:
   \   00008F   8A..         MOV       ?V0,R2
   \   000091   8B..         MOV       ?V1,R3
   \   000093   7408         MOV       A,#0x8
   \   000095   78..         MOV       R0,#?V0
   \   000097   12....       LCALL     ?SS_SHR
   \   00009A   AA..         MOV       R2,?V0
   \   00009C   AB..         MOV       R3,?V1
    253                break;
   \   00009E   8031         SJMP      ??HalAdcRead_13
    254              case HAL_ADC_RESOLUTION_10:
    255                reading >>= 6;
   \                     ??HalAdcRead_10:
   \   0000A0   8A..         MOV       ?V0,R2
   \   0000A2   8B..         MOV       ?V1,R3
   \   0000A4   7406         MOV       A,#0x6
   \   0000A6   78..         MOV       R0,#?V0
   \   0000A8   12....       LCALL     ?SS_SHR
   \   0000AB   AA..         MOV       R2,?V0
   \   0000AD   AB..         MOV       R3,?V1
    256                break;
   \   0000AF   8020         SJMP      ??HalAdcRead_13
    257              case HAL_ADC_RESOLUTION_12:
    258                reading >>= 4;
   \                     ??HalAdcRead_11:
   \   0000B1   8A..         MOV       ?V0,R2
   \   0000B3   8B..         MOV       ?V1,R3
   \   0000B5   7404         MOV       A,#0x4
   \   0000B7   78..         MOV       R0,#?V0
   \   0000B9   12....       LCALL     ?SS_SHR
   \   0000BC   AA..         MOV       R2,?V0
   \   0000BE   AB..         MOV       R3,?V1
    259                break;
   \   0000C0   800F         SJMP      ??HalAdcRead_13
    260              case HAL_ADC_RESOLUTION_14:
    261              default:
    262                reading >>= 2;
   \                     ??HalAdcRead_12:
   \   0000C2   8A..         MOV       ?V0,R2
   \   0000C4   8B..         MOV       ?V1,R3
   \   0000C6   7402         MOV       A,#0x2
   \   0000C8   78..         MOV       R0,#?V0
   \   0000CA   12....       LCALL     ?SS_SHR
   \   0000CD   AA..         MOV       R2,?V0
   \   0000CF   AB..         MOV       R3,?V1
    263              break;
    264            }
    265            
    266          
    267          #else
    268            // unused arguments
    269            (void) channel;
    270            (void) resolution;
    271          #endif
    272          
    273            return ((uint16)reading);
   \                     ??HalAdcRead_13:
   \   0000D1   7F02         MOV       R7,#0x2
   \   0000D3   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   0000D6                REQUIRE ADCCFG
   \   0000D6                REQUIRE ADCCON3
   \   0000D6                REQUIRE ADCCON1
   \   0000D6                REQUIRE ADCL
   \   0000D6                REQUIRE ADCH
    274          }
    275          
    276          /**************************************************************************************************
    277           * @fn      HalAdcSetReference
    278           *
    279           * @brief   Sets the reference voltage for the ADC and initializes the service
    280           *
    281           * @param   reference - the reference voltage to be used by the ADC
    282           *
    283           * @return  none
    284           *
    285           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    286          void HalAdcSetReference ( uint8 reference )
   \                     HalAdcSetReference:
    287          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    288          #if (HAL_ADC == TRUE)
    289            adcRef = reference;
   \   000004   E9           MOV       A,R1
   \   000005   90....       MOV       DPTR,#adcRef
   \   000008   F0           MOVX      @DPTR,A
    290          #endif
    291          }
   \   000009   D083         POP       DPH
   \   00000B   D082         POP       DPL
   \   00000D   02....       LJMP      ?BRET
    292          
    293          /*********************************************************************
    294           * @fn      HalAdcCheckVdd
    295           *
    296           * @brief   Check for minimum Vdd specified.
    297           *
    298           * @param   vdd - The board-specific Vdd reading to check for.
    299           *
    300           * @return  TRUE if the Vdd measured is greater than the 'vdd' minimum parameter;
    301           *          FALSE if not.
    302           *
    303           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    304          bool HalAdcCheckVdd(uint8 vdd)
   \                     HalAdcCheckVdd:
    305          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   \   000001   F8           MOV       R0,A
    306          #ifdef ADC_CAL
    307            uint16 compAdcVal;  
    308          #endif //ADC_CAL
    309            
    310            ADCCON3 = 0x0F;
   \   000002   75B60F       MOV       0xb6,#0xf
    311            while (!(ADCCON1 & 0x80));
   \                     ??HalAdcCheckVdd_0:
   \   000005   E5B4         MOV       A,0xb4
   \   000007   A2E7         MOV       C,0xE0 /* A   */.7
   \   000009   50FA         JNC       ??HalAdcCheckVdd_0
    312            
    313          #ifdef ADC_CAL
    314            compAdcVal = HalAdcCompensate (ADCH, HAL_ADC_RESOLUTION_8);
    315            return (compAdcVal > vdd);
    316          #else
    317            return (ADCH > vdd);
   \   00000B   E8           MOV       A,R0
   \   00000C   C3           CLR       C
   \   00000D   95BB         SUBB      A,0xbb
   \   00000F   5004         JNC       ??HalAdcCheckVdd_1
   \   000011   7901         MOV       R1,#0x1
   \   000013   8002         SJMP      ??HalAdcCheckVdd_2
   \                     ??HalAdcCheckVdd_1:
   \   000015   7900         MOV       R1,#0x0
   \                     ??HalAdcCheckVdd_2:
   \   000017   02....       LJMP      ?BRET
   \   00001A                REQUIRE ADCCON3
   \   00001A                REQUIRE ADCCON1
   \   00001A                REQUIRE ADCH
    318          #endif //ADC_CAL
    319          }
    320          
    321          /*********************************************************************
    322           * @fn      HalAdcCheckVddRaw
    323           *
    324           * @brief   Check Vdd.
    325           *
    326           * @param   none.
    327           *
    328           * @return  value measured
    329           *
    330           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    331          uint8 HalAdcCheckVddRaw( void )
   \                     HalAdcCheckVddRaw:
    332          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    333          #ifdef ADC_CAL
    334            uint16 compAdcVal;  
    335          #endif //ADC_CAL
    336            
    337            ADCCON3 = 0x0F;
   \   000000   75B60F       MOV       0xb6,#0xf
    338            while (!(ADCCON1 & 0x80));
   \                     ??HalAdcCheckVddRaw_0:
   \   000003   E5B4         MOV       A,0xb4
   \   000005   A2E7         MOV       C,0xE0 /* A   */.7
   \   000007   50FA         JNC       ??HalAdcCheckVddRaw_0
    339            
    340          #ifdef ADC_CAL
    341            compAdcVal = HalAdcCompensate (ADCH, HAL_ADC_RESOLUTION_8);
    342            return compAdcVal;
    343          #else
    344            return ADCH;
   \   000009   E5BB         MOV       A,0xbb
   \   00000B   F9           MOV       R1,A
   \   00000C   02....       LJMP      ?BRET
   \   00000F                REQUIRE ADCCON3
   \   00000F                REQUIRE ADCCON1
   \   00000F                REQUIRE ADCH
    345          #endif
    346          }
    347          
    348          /**************************************************************************************************
    349          **************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   HalAdcCheckVdd
      0      0   HalAdcCheckVddRaw
      2      0   HalAdcInit
      0     10   HalAdcRead
      2      0   HalAdcSetReference


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ADCCFG
       1  ADCCON1
       1  ADCCON3
       1  ADCH
       1  ADCL
      26  HalAdcCheckVdd
      15  HalAdcCheckVddRaw
      17  HalAdcInit
     214  HalAdcRead
      16  HalAdcSetReference
       1  adcRef
      30  -- Other

 
 288 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
   5 bytes in segment SFR_AN
   1 byte  in segment XDATA_Z
 
  30 bytes of CODE     memory
   0 bytes of DATA     memory (+ 5 bytes shared)
 288 bytes of HUGECODE memory
   1 byte  of XDATA    memory

Errors: none
Warnings: none
