###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               30/Jul/2020  15:22:08
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack 3.0.2\Components\hal\common\hal_assert.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW4C9.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\hal\common\hal_assert.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xPOWER_SAVING -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_GROUPS -D BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\hal_assert.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\hal_assert.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\hal\common\hal_assert.c
      1          /**************************************************************************************************
      2            Filename:       hal_assert.c
      3            Revised:        $Date: 2014-07-23 12:14:30 -0700 (Wed, 23 Jul 2014) $
      4            Revision:       $Revision: 39492 $
      5          
      6            Description:    Describe the purpose and contents of the file.
      7          
      8          
      9            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          
     41          /* ------------------------------------------------------------------------------------------------
     42           *                                          Includes
     43           * ------------------------------------------------------------------------------------------------
     44           */
     45          #include "hal_assert.h"
     46          #include "hal_types.h"
     47          #include "hal_board.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     48          #include "hal_defs.h"
     49          #include "hal_mcu.h"
     50          
     51          #if (defined HAL_MCU_AVR) || (defined HAL_MCU_CC2430) || (defined HAL_MCU_CC2530) || \
     52              (defined HAL_MCU_CC2533) || (defined HAL_MCU_MSP430)
     53            /* for access to debug data */
     54          #include "mac_rx.h"
     55          #include "mac_tx.h"
     56          #endif
     57          
     58          /* ------------------------------------------------------------------------------------------------
     59           *                                       Local Prototypes
     60           * ------------------------------------------------------------------------------------------------
     61           */
     62          void halAssertHazardLights(void);
     63          
     64          
     65          /**************************************************************************************************
     66           * @fn          halAssertHandler
     67           *
     68           * @brief       Logic to handle an assert.
     69           *
     70           * @param       none
     71           *
     72           * @return      none
     73           **************************************************************************************************
     74           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     75          void halAssertHandler( void )
   \                     halAssertHandler:
     76          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     77          #if defined( HAL_ASSERT_RESET )
     78            HAL_SYSTEM_RESET();
     79          #elif defined ( HAL_ASSERT_LIGHTS )
     80            halAssertHazardLights();
     81          #elif defined( HAL_ASSERT_SPIN )
     82            volatile uint8 i = 1;
     83            HAL_DISABLE_INTERRUPTS();
     84            while(i);
     85          #endif
     86          
     87            return;
   \   000000   02....       LJMP      ?BRET
     88          }
     89          
     90          #if !defined ASSERT_WHILE
     91          /**************************************************************************************************
     92           * @fn          halAssertHazardLights
     93           *
     94           * @brief       Blink LEDs to indicate an error.
     95           *
     96           * @param       none
     97           *
     98           * @return      none
     99           **************************************************************************************************
    100           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    101          void halAssertHazardLights(void)
   \                     halAssertHazardLights:
    102          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    103            enum
    104            {
    105              DEBUG_DATA_RSTACK_HIGH_OFS,
    106              DEBUG_DATA_RSTACK_LOW_OFS,
    107              DEBUG_DATA_TX_ACTIVE_OFS,
    108              DEBUG_DATA_RX_ACTIVE_OFS,
    109          
    110          #if (defined HAL_MCU_AVR) || (defined HAL_MCU_CC2430)
    111              DEBUG_DATA_INT_MASK_OFS,
    112          #elif (defined HAL_MCU_CC2530) || (defined HAL_MCU_CC2533)
    113              DEBUG_DATA_INT_MASK0_OFS,
    114              DEBUG_DATA_INT_MASK1_OFS,
    115          #endif
    116          
    117              DEBUG_DATA_SIZE
    118            };
    119          
    120            uint8 buttonHeld;
    121            uint8 debugData[DEBUG_DATA_SIZE];
    122          
    123            /* disable all interrupts before anything else */
    124            HAL_DISABLE_INTERRUPTS();
   \   00000A   C2AF         CLR       0xa8.7
    125          
    126            /*-------------------------------------------------------------------------------
    127             *  Initialize LEDs and turn them off.
    128             */
    129            HAL_BOARD_INIT();
   \   00000C   53BEFB       ANL       0xbe,#0xfb
   \                     ??halAssertHazardLights_0:
   \   00000F   E59D         MOV       A,0x9d
   \   000011   A2E6         MOV       C,0xE0 /* A   */.6
   \   000013   50FA         JNC       ??halAssertHazardLights_0
   \   000015   00           NOP
   \   000016   7A00         MOV       R2,#0x0
   \   000018   7B00         MOV       R3,#0x0
   \                     ??halAssertHazardLights_1:
   \   00001A   C3           CLR       C
   \   00001B   EA           MOV       A,R2
   \   00001C   94F8         SUBB      A,#-0x8
   \   00001E   EB           MOV       A,R3
   \   00001F   9401         SUBB      A,#0x1
   \   000021   5008         JNC       ??halAssertHazardLights_2
   \   000023   00           NOP
   \   000024   0A           INC       R2
   \   000025   EA           MOV       A,R2
   \   000026   70F2         JNZ       ??halAssertHazardLights_1
   \   000028   0B           INC       R3
   \   000029   80EF         SJMP      ??halAssertHazardLights_1
   \                     ??halAssertHazardLights_2:
   \   00002B   75C600       MOV       0xc6,#0x0
   \                     ??halAssertHazardLights_3:
   \   00002E   E59E         MOV       A,0x9e
   \   000030   70FC         JNZ       ??halAssertHazardLights_3
   \   000032   43BE04       ORL       0xbe,#0x4
   \   000035   906270       MOV       DPTR,#0x6270
   \   000038   7408         MOV       A,#0x8
   \   00003A   F0           MOVX      @DPTR,A
   \   00003B   C290         CLR       0x90.0
   \   00003D   43FE01       ORL       0xfe,#0x1
   \   000040   C291         CLR       0x90.1
   \   000042   43FE02       ORL       0xfe,#0x2
   \   000045   C294         CLR       0x90.4
   \   000047   43FE10       ORL       0xfe,#0x10
   \   00004A   C281         CLR       0x80.1
   \   00004C   43FD02       ORL       0xfd,#0x2
   \   00004F   438F01       ORL       0x8f,#0x1
    130          
    131            HAL_TURN_OFF_LED1();
   \   000052   C290         CLR       0x90.0
    132            HAL_TURN_OFF_LED2();
   \   000054   C291         CLR       0x90.1
    133            HAL_TURN_OFF_LED3();
   \   000056   C294         CLR       0x90.4
    134            HAL_TURN_OFF_LED4();
   \   000058   C281         CLR       0x80.1
    135          
    136            /*-------------------------------------------------------------------------------
    137             *  Master infinite loop.
    138             */
    139            for (;;)
    140            {
    141              buttonHeld = 0;
   \                     ??halAssertHazardLights_4:
   \   00005A   7900         MOV       R1,#0x0
    142          
    143              /*-------------------------------------------------------------------------------
    144               *  "Hazard lights" loop.  A held keypress will exit this loop.
    145               */
    146              do
    147              {
    148                HAL_LED_BLINK_DELAY();
   \                     ??halAssertHazardLights_5:
   \   00005C   85..82       MOV       DPL,?XSP + 0
   \   00005F   85..83       MOV       DPH,?XSP + 1
   \   000062   7400         MOV       A,#0x0
   \   000064   F0           MOVX      @DPTR,A
   \   000065   A3           INC       DPTR
   \   000066   7400         MOV       A,#0x0
   \   000068   F0           MOVX      @DPTR,A
   \   000069   A3           INC       DPTR
   \   00006A   7400         MOV       A,#0x0
   \   00006C   F0           MOVX      @DPTR,A
   \   00006D   A3           INC       DPTR
   \   00006E   7400         MOV       A,#0x0
   \   000070   F0           MOVX      @DPTR,A
   \                     ??halAssertHazardLights_6:
   \   000071   90....       MOV       DPTR,#__Constant_5800
   \   000074   78..         MOV       R0,#?V0
   \   000076   12....       LCALL     ?L_MOV_X
   \   000079   85..82       MOV       DPL,?XSP + 0
   \   00007C   85..83       MOV       DPH,?XSP + 1
   \   00007F   78..         MOV       R0,#?V0
   \   000081   12....       LCALL     ?UL_GT_X
   \   000084   5015         JNC       ??halAssertHazardLights_7
   \   000086   90....       MOV       DPTR,#__Constant_1
   \   000089   78..         MOV       R0,#?V0
   \   00008B   12....       LCALL     ?L_MOV_X
   \   00008E   85..82       MOV       DPL,?XSP + 0
   \   000091   85..83       MOV       DPH,?XSP + 1
   \   000094   78..         MOV       R0,#?V0
   \   000096   12....       LCALL     ?L_ADD_TO_X
   \   000099   80D6         SJMP      ??halAssertHazardLights_6
    149          
    150                /* toggle LEDS, the #ifdefs are in case HAL has logically remapped non-existent LEDs */
    151          #if (HAL_NUM_LEDS >= 1)
    152                HAL_TOGGLE_LED1();
   \                     ??halAssertHazardLights_7:
   \   00009B   A290         MOV       C,0x90.0
   \   00009D   5004         JNC       ??halAssertHazardLights_8
   \   00009F   C290         CLR       0x90.0
   \   0000A1   8002         SJMP      ??halAssertHazardLights_9
   \                     ??halAssertHazardLights_8:
   \   0000A3   D290         SETB      0x90.0
    153          #if (HAL_NUM_LEDS >= 2)
    154                HAL_TOGGLE_LED2();
   \                     ??halAssertHazardLights_9:
   \   0000A5   A291         MOV       C,0x90.1
   \   0000A7   5004         JNC       ??halAssertHazardLights_10
   \   0000A9   C291         CLR       0x90.1
   \   0000AB   8002         SJMP      ??halAssertHazardLights_11
   \                     ??halAssertHazardLights_10:
   \   0000AD   D291         SETB      0x90.1
    155          #if (HAL_NUM_LEDS >= 3)
    156                HAL_TOGGLE_LED3();
   \                     ??halAssertHazardLights_11:
   \   0000AF   A294         MOV       C,0x90.4
   \   0000B1   5004         JNC       ??halAssertHazardLights_12
   \   0000B3   C294         CLR       0x90.4
   \   0000B5   8002         SJMP      ??halAssertHazardLights_13
   \                     ??halAssertHazardLights_12:
   \   0000B7   D294         SETB      0x90.4
    157          #if (HAL_NUM_LEDS >= 4)
    158                HAL_TOGGLE_LED4();
    159          #endif
    160          #endif
    161          #endif
    162          #endif
    163          
    164                /* escape hatch to continue execution, set escape to '1' to continue execution */
    165                {
    166                  static uint8 escape = 0;
    167                  if (escape)
   \                     ??halAssertHazardLights_13:
   \   0000B9   90....       MOV       DPTR,#??escape
   \   0000BC   E0           MOVX      A,@DPTR
   \   0000BD   6009         JZ        ??halAssertHazardLights_14
    168                  {
    169                    escape = 0;
   \   0000BF   90....       MOV       DPTR,#??escape
   \   0000C2   7400         MOV       A,#0x0
   \   0000C4   F0           MOVX      @DPTR,A
    170                    return;
   \   0000C5   02....       LJMP      ??halAssertHazardLights_15 & 0xFFFF
    171                  }
    172                }
    173          
    174                /* break out of loop if button is held long enough */
    175                if (HAL_PUSH_BUTTON1())
   \                     ??halAssertHazardLights_14:
   \   0000C8   A281         MOV       C,0x80.1
   \   0000CA   4003         JC        ??halAssertHazardLights_16
    176                {
    177                  buttonHeld++;
   \   0000CC   09           INC       R1
   \   0000CD   8002         SJMP      ??halAssertHazardLights_17
    178                }
    179                else
    180                {
    181                  buttonHeld = 0;
   \                     ??halAssertHazardLights_16:
   \   0000CF   7900         MOV       R1,#0x0
    182                }
    183              }
    184              while (buttonHeld != 10);  /* loop until button is held specified number of loops */
   \                     ??halAssertHazardLights_17:
   \   0000D1   740A         MOV       A,#0xa
   \   0000D3   69           XRL       A,R1
   \   0000D4   7086         JNZ       ??halAssertHazardLights_5
    185          
    186              /*-------------------------------------------------------------------------------
    187               *  Just exited from "hazard lights" loop.
    188               */
    189          
    190              /* turn off all LEDs */
    191              HAL_TURN_OFF_LED1();
   \   0000D6   C290         CLR       0x90.0
    192              HAL_TURN_OFF_LED2();
   \   0000D8   C291         CLR       0x90.1
    193              HAL_TURN_OFF_LED3();
   \   0000DA   C294         CLR       0x90.4
    194              HAL_TURN_OFF_LED4();
   \   0000DC   C281         CLR       0x80.1
    195          
    196              /* wait for button release */
    197              HAL_DEBOUNCE(!HAL_PUSH_BUTTON1());
   \   0000DE   7A00         MOV       R2,#0x0
   \   0000E0   7B00         MOV       R3,#0x0
   \                     ??halAssertHazardLights_18:
   \   0000E2   C3           CLR       C
   \   0000E3   EA           MOV       A,R2
   \   0000E4   94F4         SUBB      A,#-0xc
   \   0000E6   EB           MOV       A,R3
   \   0000E7   9401         SUBB      A,#0x1
   \   0000E9   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0000EB   65D0         XRL       A,PSW
   \   0000ED   33           RLC       A
   \   0000EE   500F         JNC       ??halAssertHazardLights_19
   \   0000F0   A281         MOV       C,0x80.1
   \   0000F2   4004         JC        ??halAssertHazardLights_20
   \   0000F4   7A00         MOV       R2,#0x0
   \   0000F6   7B00         MOV       R3,#0x0
   \                     ??halAssertHazardLights_20:
   \   0000F8   0A           INC       R2
   \   0000F9   EA           MOV       A,R2
   \   0000FA   70E6         JNZ       ??halAssertHazardLights_18
   \   0000FC   0B           INC       R3
   \   0000FD   80E3         SJMP      ??halAssertHazardLights_18
    198          
    199              /*-------------------------------------------------------------------------------
    200               *  Load debug data into memory.
    201               */
    202          #ifdef HAL_MCU_AVR
    203              {
    204                uint8 * pStack;
    205                pStack = (uint8 *) SP;
    206                pStack++; /* point to return address on stack */
    207                debugData[DEBUG_DATA_RSTACK_HIGH_OFS] = *pStack;
    208                pStack++;
    209                debugData[DEBUG_DATA_RSTACK_LOW_OFS] = *pStack;
    210              }
    211              debugData[DEBUG_DATA_INT_MASK_OFS] = EIMSK;
    212          #endif
    213          
    214          #if (defined HAL_MCU_CC2430)
    215              debugData[DEBUG_DATA_INT_MASK_OFS] = RFIM;
    216          #elif (defined HAL_MCU_CC2530) || (defined HAL_MCU_CC2533)
    217              debugData[DEBUG_DATA_INT_MASK0_OFS] = RFIRQM0;
   \                     ??halAssertHazardLights_19:
   \   0000FF   9061A3       MOV       DPTR,#0x61a3
   \   000102   E0           MOVX      A,@DPTR
   \   000103   C0E0         PUSH      A
   \   000105   7408         MOV       A,#0x8
   \   000107   12....       LCALL     ?XSTACK_DISP0_8
   \   00010A   D0E0         POP       A
   \   00010C   F0           MOVX      @DPTR,A
    218              debugData[DEBUG_DATA_INT_MASK1_OFS] = RFIRQM1;
   \   00010D   9061A4       MOV       DPTR,#0x61a4
   \   000110   E0           MOVX      A,@DPTR
   \   000111   C0E0         PUSH      A
   \   000113   7409         MOV       A,#0x9
   \   000115   12....       LCALL     ?XSTACK_DISP0_8
   \   000118   D0E0         POP       A
   \   00011A   F0           MOVX      @DPTR,A
    219          #endif
    220          
    221          
    222          #if (defined HAL_MCU_AVR) || (defined HAL_MCU_CC2430) || (defined HAL_MCU_CC2530) || \
    223              (defined HAL_MCU_CC2533) || (defined HAL_MCU_MSP430)
    224              debugData[DEBUG_DATA_TX_ACTIVE_OFS] = macTxActive;
   \   00011B   90....       MOV       DPTR,#macTxActive
   \   00011E   E0           MOVX      A,@DPTR
   \   00011F   C0E0         PUSH      A
   \   000121   7406         MOV       A,#0x6
   \   000123   12....       LCALL     ?XSTACK_DISP0_8
   \   000126   D0E0         POP       A
   \   000128   F0           MOVX      @DPTR,A
    225              debugData[DEBUG_DATA_RX_ACTIVE_OFS] = macRxActive;
   \   000129   90....       MOV       DPTR,#macRxActive
   \   00012C   E0           MOVX      A,@DPTR
   \   00012D   C0E0         PUSH      A
   \   00012F   7407         MOV       A,#0x7
   \   000131   12....       LCALL     ?XSTACK_DISP0_8
   \   000134   D0E0         POP       A
   \   000136   F0           MOVX      @DPTR,A
    226          #endif
    227          
    228             /* initialize for data dump loop */
    229              {
    230                uint8 iBit;
    231                uint8 iByte;
    232          
    233                iBit  = 0;
   \   000137   7A00         MOV       R2,#0x0
    234                iByte = 0;
   \   000139   7B00         MOV       R3,#0x0
    235          
    236                /*-------------------------------------------------------------------------------
    237                 *  Data dump loop.  A button press cycles data bits to an LED.
    238                 */
    239                while (iByte < DEBUG_DATA_SIZE)
   \                     ??halAssertHazardLights_21:
   \   00013B   EB           MOV       A,R3
   \   00013C   C3           CLR       C
   \   00013D   9406         SUBB      A,#0x6
   \   00013F   5074         JNC       ??halAssertHazardLights_22
    240                {
    241                  /* wait for key press */
    242                  while(!HAL_PUSH_BUTTON1());
   \                     ??halAssertHazardLights_23:
   \   000141   A281         MOV       C,0x80.1
   \   000143   40FC         JC        ??halAssertHazardLights_23
    243          
    244                  /* turn on all LEDs for first bit of byte, turn on three LEDs if not first bit */
    245                  HAL_TURN_ON_LED1();
   \   000145   D290         SETB      0x90.0
    246                  HAL_TURN_ON_LED2();
   \   000147   D291         SETB      0x90.1
    247                  HAL_TURN_ON_LED3();
   \   000149   D294         SETB      0x90.4
    248                  if (iBit == 0)
   \   00014B   EA           MOV       A,R2
   \   00014C   7004         JNZ       ??halAssertHazardLights_24
    249                  {
    250                    HAL_TURN_ON_LED4();
   \   00014E   D281         SETB      0x80.1
   \   000150   8002         SJMP      ??halAssertHazardLights_25
    251                  }
    252                  else
    253                  {
    254                    HAL_TURN_OFF_LED4();
   \                     ??halAssertHazardLights_24:
   \   000152   C281         CLR       0x80.1
    255                  }
    256          
    257                  /* wait for debounced key release */
    258                  HAL_DEBOUNCE(!HAL_PUSH_BUTTON1());
   \                     ??halAssertHazardLights_25:
   \   000154   7C00         MOV       R4,#0x0
   \   000156   7D00         MOV       R5,#0x0
   \                     ??halAssertHazardLights_26:
   \   000158   C3           CLR       C
   \   000159   EC           MOV       A,R4
   \   00015A   94F4         SUBB      A,#-0xc
   \   00015C   ED           MOV       A,R5
   \   00015D   9401         SUBB      A,#0x1
   \   00015F   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000161   65D0         XRL       A,PSW
   \   000163   33           RLC       A
   \   000164   500F         JNC       ??halAssertHazardLights_27
   \   000166   A281         MOV       C,0x80.1
   \   000168   4004         JC        ??halAssertHazardLights_28
   \   00016A   7C00         MOV       R4,#0x0
   \   00016C   7D00         MOV       R5,#0x0
   \                     ??halAssertHazardLights_28:
   \   00016E   0C           INC       R4
   \   00016F   EC           MOV       A,R4
   \   000170   70E6         JNZ       ??halAssertHazardLights_26
   \   000172   0D           INC       R5
   \   000173   80E3         SJMP      ??halAssertHazardLights_26
    259          
    260                  /* turn off all LEDs */
    261                  HAL_TURN_OFF_LED1();
   \                     ??halAssertHazardLights_27:
   \   000175   C290         CLR       0x90.0
    262                  HAL_TURN_OFF_LED2();
   \   000177   C291         CLR       0x90.1
    263                  HAL_TURN_OFF_LED3();
   \   000179   C294         CLR       0x90.4
    264                  HAL_TURN_OFF_LED4();
   \   00017B   C281         CLR       0x80.1
    265          
    266                  /* output value of data bit to LED1 */
    267                  if (debugData[iByte] & (1 << (7 - iBit)))
   \   00017D   75..01       MOV       ?V0,#0x1
   \   000180   75..00       MOV       ?V1,#0x0
   \   000183   7407         MOV       A,#0x7
   \   000185   C3           CLR       C
   \   000186   9A           SUBB      A,R2
   \   000187   78..         MOV       R0,#?V0
   \   000189   12....       LCALL     ?S_SHL
   \   00018C   EB           MOV       A,R3
   \   00018D   FC           MOV       R4,A
   \   00018E   7D00         MOV       R5,#0x0
   \   000190   7404         MOV       A,#0x4
   \   000192   12....       LCALL     ?XSTACK_DISP0_8
   \   000195   E582         MOV       A,DPL
   \   000197   2C           ADD       A,R4
   \   000198   F582         MOV       DPL,A
   \   00019A   E583         MOV       A,DPH
   \   00019C   3D           ADDC      A,R5
   \   00019D   F583         MOV       DPH,A
   \   00019F   E0           MOVX      A,@DPTR
   \   0001A0   55..         ANL       A,?V0
   \   0001A2   6004         JZ        ??halAssertHazardLights_29
    268                  {
    269                    HAL_TURN_ON_LED1();
   \   0001A4   D290         SETB      0x90.0
   \   0001A6   8002         SJMP      ??halAssertHazardLights_30
    270                  }
    271                  else
    272                  {
    273                    HAL_TURN_OFF_LED1();
   \                     ??halAssertHazardLights_29:
   \   0001A8   C290         CLR       0x90.0
    274                  }
    275          
    276                  /* advance to next bit */
    277                  iBit++;
   \                     ??halAssertHazardLights_30:
   \   0001AA   0A           INC       R2
    278                  if (iBit == 8)
   \   0001AB   7408         MOV       A,#0x8
   \   0001AD   6A           XRL       A,R2
   \   0001AE   708B         JNZ       ??halAssertHazardLights_21
    279                  {
    280                    iBit = 0;
   \   0001B0   7A00         MOV       R2,#0x0
    281                    iByte++;
   \   0001B2   0B           INC       R3
   \   0001B3   8086         SJMP      ??halAssertHazardLights_21
    282                  }
    283                }
    284              }
    285          
    286              /*
    287               *  About to enter "hazard lights" loop again.  Turn off LED1 in case the last bit
    288               *  displayed happened to be one.  This guarantees all LEDs are off at the start of
    289               *  the flashing loop which uses a toggle operation to change LED states.
    290               */
    291              HAL_TURN_OFF_LED1();
   \                     ??halAssertHazardLights_22:
   \   0001B5   C290         CLR       0x90.0
   \   0001B7   02....       LJMP      ??halAssertHazardLights_4 & 0xFFFF
    292            }
   \                     ??halAssertHazardLights_15:
   \   0001BA   740A         MOV       A,#0xa
   \   0001BC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001BF   7F04         MOV       R7,#0x4
   \   0001C1   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   0001C4                REQUIRE _A_IEN0
   \   0001C4                REQUIRE SLEEPCMD
   \   0001C4                REQUIRE SLEEPSTA
   \   0001C4                REQUIRE CLKCONCMD
   \   0001C4                REQUIRE CLKCONSTA
   \   0001C4                REQUIRE _A_P1
   \   0001C4                REQUIRE P1DIR
   \   0001C4                REQUIRE _A_P0
   \   0001C4                REQUIRE P0DIR
   \   0001C4                REQUIRE P0INP
    293          }

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??escape:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_5800:
   \   000000   00580000     DD 22528

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1
    294          #endif
    295          
    296          /* ------------------------------------------------------------------------------------------------
    297           *                                    Compile Time Assertions
    298           * ------------------------------------------------------------------------------------------------
    299           */
    300          
    301          /* integrity check of type sizes */
    302          HAL_ASSERT_SIZE(  int8, 1);
    303          HAL_ASSERT_SIZE( uint8, 1);
    304          HAL_ASSERT_SIZE( int16, 2);
    305          HAL_ASSERT_SIZE(uint16, 2);
    306          HAL_ASSERT_SIZE( int32, 4);
    307          HAL_ASSERT_SIZE(uint32, 4);
    308          
    309          
    310          /**************************************************************************************************
    311          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   halAssertHandler
      1     22   halAssertHazardLights


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  CLKCONCMD
       1  CLKCONSTA
       1  P0DIR
       1  P0INP
       1  P1DIR
       1  SLEEPCMD
       1  SLEEPSTA
       1  _A_IEN0
       1  _A_P0
       1  _A_P1
       4  __Constant_1
       4  __Constant_5800
       1  escape
       3  halAssertHandler
     452  halAssertHazardLights
      12  -- Other

 
 455 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
  10 bytes in segment SFR_AN
   8 bytes in segment XDATA_ROM_C
   1 byte  in segment XDATA_Z
 
  12 bytes of CODE     memory
   0 bytes of CONST    memory (+  8 bytes shared)
   0 bytes of DATA     memory (+ 10 bytes shared)
 455 bytes of HUGECODE memory
   1 byte  of XDATA    memory

Errors: none
Warnings: none
