###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               06/Aug/2020  10:36:21
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EWE10B.tmp ("D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c"
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        POWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC
#        -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_GROUPS -D BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=0
#        -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0 -DREJOIN_POLL_RATE=0
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\zcl_samplesw.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\zcl_samplesw.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c
      1          /**************************************************************************************************
      2            Filename:       zcl_samplesw.c
      3            Revised:        $Date: 2015-08-19 17:11:00 -0700 (Wed, 19 Aug 2015) $
      4            Revision:       $Revision: 44460 $
      5          
      6            Description:    Zigbee Cluster Library - sample switch application.
      7          
      8          
      9            Copyright 2006-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application implements a ZigBee On/Off Switch, based on Z-Stack 3.0.
     42          
     43            This application is based on the common sample-application user interface. Please see the main
     44            comment in zcl_sampleapp_ui.c. The rest of this comment describes only the content specific for
     45            this sample applicetion.
     46            
     47            Application-specific UI peripherals being used:
     48          
     49            - none (LED1 is currently unused by this application).
     50          
     51            Application-specific menu system:
     52          
     53              <TOGGLE LIGHT> Send an On, Off or Toggle command targeting appropriate devices from the binding table.
     54                Pressing / releasing [OK] will have the following functionality, depending on the value of the 
     55                zclSampleSw_OnOffSwitchActions attribute:
     56                - OnOffSwitchActions == 0: pressing [OK] will send ON command, releasing it will send OFF command;
     57                - OnOffSwitchActions == 1: pressing [OK] will send OFF command, releasing it will send ON command;
     58                - OnOffSwitchActions == 2: pressing [OK] will send TOGGLE command, releasing it will not send any command.
     59          
     60          *********************************************************************/
     61          
     62          #if ! defined ZCL_ON_OFF
     63          #error ZCL_ON_OFF must be defined for this project.
     64          #endif
     65          
     66          /*********************************************************************
     67           * INCLUDES
     68           */
     69          #include "ZComDef.h"
     70          #include "OSAL.h"
     71          #include "AF.h"
     72          #include "ZDApp.h"
     73          #include "ZDObject.h"
     74          #include "ZDProfile.h"
     75          #include "MT_SYS.h"
     76          
     77          #include "zcl.h"
     78          #include "zcl_general.h"
     79          #include "zcl_ha.h"
     80          #include "zcl_samplesw.h"
     81          #include "zcl_diagnostic.h"
     82          
     83          #include "onboard.h"
     84          
     85          /* HAL */
     86          #include "hal_lcd.h"
     87          #include "hal_led.h"
     88          #include "hal_key.h"
     89          
     90          /* UART */
     91          #include "uart0.h"
     92          #include "user_printf.h"
     93          
     94          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
     95          #include "zcl_ota.h"
     96          #include "hal_ota.h"
     97          #endif
     98          
     99          #include "bdb.h"
    100          #include "bdb_interface.h"
    101          #include "bdb_touchlink_initiator.h"
    102          
    103          #include "OSAL_PwrMgr.h"
    104          /*********************************************************************
    105           * MACROS
    106           */
    107          
    108          #define APP_TITLE "TI Sample Switch"
    109          
    110          /*********************************************************************
    111           * TYPEDEFS
    112           */
    113          
    114          /*********************************************************************
    115           * GLOBAL VARIABLES
    116           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          byte zclSampleSw_TaskID;
   \                     zclSampleSw_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    118          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    119          uint8 zclSampleSwSeqNum;
   \                     zclSampleSwSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    120          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    121          uint8 zclSampleSw_OnOffSwitchType = ON_OFF_SWITCH_TYPE_MOMENTARY;
   \                     zclSampleSw_OnOffSwitchType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleSw_OnOffSwitchType>`
   \   000001                REQUIRE __INIT_XDATA_I
    122          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    123          uint8 zclSampleSw_OnOffSwitchActions;
   \                     zclSampleSw_OnOffSwitchActions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    124          
    125          /*********************************************************************
    126           * GLOBAL FUNCTIONS
    127           */
    128          
    129          /*********************************************************************
    130           * LOCAL VARIABLES
    131           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          afAddrType_t zclSampleSw_DstAddr;
   \                     zclSampleSw_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          afAddrType_t SW_DstAddr;
   \                     SW_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    134          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          uint16 SourceAddr;
   \                     SourceAddr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    136          // Endpoint to allow SYS_APP_MSGs
    137          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    138          devStates_t zclSampleSw_NwkState = DEV_INIT;
   \                     zclSampleSw_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleSw_NwkState>`
   \   000001                REQUIRE __INIT_XDATA_I
    139          
    140          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    141          #define DEVICE_POLL_RATE                 8000   // Poll rate for end device
    142          #endif
    143          
    144          #define SAMPLESW_TOGGLE_TEST_EVT   0x1000
    145          #define TOUCHLINK_RESET_TARGET_EVT    0x1001
    146          /*********************************************************************
    147           * LOCAL FUNCTIONS
    148           */
    149          
    150          
    151          static void zclSampleSw_HandleKeys( byte shift, byte keys );
    152          static void zclSampleSw_BasicResetCB( void );
    153          
    154          static void zclSampleSw_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg);
    155          
    156          
    157          // Functions to process ZCL Foundation incoming Command/Response messages
    158          
    159          static void zclSampleSw_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    160          #ifdef ZCL_READ
    161          static uint8 zclSampleSw_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    162          #endif
    163          #ifdef ZCL_WRITE
    164          static uint8 zclSampleSw_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    165          #endif
    166          static uint8 zclSampleSw_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    167          #ifdef ZCL_DISCOVER
    168          static uint8 zclSampleSw_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    169          static uint8 zclSampleSw_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    170          static uint8 zclSampleSw_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    171          #endif
    172          
    173          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    174          static void zclSampleSw_ProcessOTAMsgs( zclOTA_CallbackMsg_t* pMsg );
    175          #endif
    176          
    177          
    178          static void zclSampleApp_BatteryWarningCB( uint8 voltLevel);
    179          
    180          
    181          /*********************************************************************
    182           * CONSTANTS
    183           */
    184          
    185            
    186          /*********************************************************************
    187           * REFERENCED EXTERNALS
    188           */
    189          extern int16 zdpExternalStateTaskID;
    190          
    191          /*********************************************************************
    192           * ZCL General Profile Callback table
    193           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    194          static zclGeneral_AppCallbacks_t zclSampleSw_CmdCallbacks =
   \                     zclSampleSw_CmdCallbacks:
   \   000000                DS 18
   \   000012                REQUIRE `?<Initializer for zclSampleSw_CmdCallbacks>`
   \   000012                REQUIRE __INIT_XDATA_I
    195          {
    196            zclSampleSw_BasicResetCB,               // Basic Cluster Reset command
    197            NULL,                                   // Identify Trigger Effect command
    198            NULL,                                   // On/Off cluster commands
    199            NULL,                                   // On/Off cluster enhanced command Off with Effect
    200            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    201            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    202          #ifdef ZCL_LEVEL_CTRL
    203            NULL,                                   // Level Control Move to Level command
    204            NULL,                                   // Level Control Move command
    205            NULL,                                   // Level Control Step command
    206            NULL,                                   // Level Control Stop command
    207          #endif
    208          #ifdef ZCL_GROUPS
    209            NULL,                                   // Group Response commands
    210          #endif
    211          #ifdef ZCL_SCENES
    212            NULL,                                   // Scene Store Request command
    213            NULL,                                   // Scene Recall Request command
    214            NULL,                                   // Scene Response command
    215          #endif
    216          #ifdef ZCL_ALARMS
    217            NULL,                                   // Alarm (Response) commands
    218          #endif
    219          #ifdef SE_UK_EXT
    220            NULL,                                   // Get Event Log command
    221            NULL,                                   // Publish Event Log command
    222          #endif
    223            NULL,                                   // RSSI Location command
    224            NULL                                    // RSSI Location Response command
    225          };
    226          
    227          /*********************************************************************
    228           * @fn          zclSampleSw_Init
    229           *
    230           * @brief       Initialization function for the zclGeneral layer.
    231           *
    232           * @param       none
    233           *
    234           * @return      none
    235           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    236          void zclSampleSw_Init( byte task_id )
   \                     zclSampleSw_Init:
    237          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    238            zclSampleSw_TaskID = task_id;
   \   000007   EE           MOV       A,R6
   \   000008   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00000B   F0           MOVX      @DPTR,A
    239          
    240            osal_pwrmgr_device(PWRMGR_BATTERY);
   \   00000C                ; Setup parameters for call to function osal_pwrmgr_device
   \   00000C   7901         MOV       R1,#0x1
   \   00000E   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
    241          
    242            // Set destination address to indirect
    243            zclSampleSw_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   000011   90....       MOV       DPTR,#zclSampleSw_DstAddr + 8
   \   000014   7400         MOV       A,#0x0
   \   000016   F0           MOVX      @DPTR,A
    244            zclSampleSw_DstAddr.endPoint = 0;
   \   000017   90....       MOV       DPTR,#zclSampleSw_DstAddr + 9
   \   00001A   7400         MOV       A,#0x0
   \   00001C   F0           MOVX      @DPTR,A
    245            zclSampleSw_DstAddr.addr.shortAddr = 0;
   \   00001D   90....       MOV       DPTR,#zclSampleSw_DstAddr
   \   000020   7400         MOV       A,#0x0
   \   000022   F0           MOVX      @DPTR,A
   \   000023   A3           INC       DPTR
   \   000024   7400         MOV       A,#0x0
   \   000026   F0           MOVX      @DPTR,A
    246          
    247            //Initialize the Uart0
    248            Uart0_Init(HAL_UART_BR_115200);
   \   000027                ; Setup parameters for call to function Uart0_Init
   \   000027   7904         MOV       R1,#0x4
   \   000029   12....       LCALL     `??Uart0_Init::?relay`; Banked call to: Uart0_Init
    249          
    250            // Register the Uart0
    251            RegisterForUart0( zclSampleSw_TaskID );
   \   00002C                ; Setup parameters for call to function RegisterForUart0
   \   00002C   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F9           MOV       R1,A
   \   000031   12....       LCALL     `??RegisterForUart0::?relay`; Banked call to: RegisterForUart0
   \   000034   E9           MOV       A,R1
    252          
    253            // Register the Simple Descriptor for this application
    254            bdb_RegisterSimpleDescriptor( &zclSampleSw_SimpleDesc );
   \   000035                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   000035   7A..         MOV       R2,#zclSampleSw_SimpleDesc & 0xff
   \   000037   7B..         MOV       R3,#(zclSampleSw_SimpleDesc >> 8) & 0xff
   \   000039   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    255          
    256            // Register the ZCL General Cluster Library callback functions
    257            zclGeneral_RegisterCmdCallbacks( SW1_ENDPOINT, &zclSampleSw_CmdCallbacks );
   \   00003C                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   00003C   7A..         MOV       R2,#zclSampleSw_CmdCallbacks & 0xff
   \   00003E   7B..         MOV       R3,#(zclSampleSw_CmdCallbacks >> 8) & 0xff
   \   000040   7908         MOV       R1,#0x8
   \   000042   12....       LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
   \   000045   E9           MOV       A,R1
    258          
    259            zclSampleSw_ResetAttributesToDefaultValues();
   \   000046                ; Setup parameters for call to function zclSampleSw_ResetAttributesToDefaultValues
   \   000046   12....       LCALL     `??zclSampleSw_ResetAttributesToDefaultValues::?`; Banked call to: zclSampleSw_ResetAttributesToDefaultValues
    260            
    261            // Register the application's attribute list
    262            zcl_registerAttrList( SW1_ENDPOINT, zclSampleSw_NumAttributes, zclSampleSw_Attrs );
   \   000049                ; Setup parameters for call to function zcl_registerAttrList
   \   000049   7C..         MOV       R4,#zclSampleSw_Attrs & 0xff
   \   00004B   7D..         MOV       R5,#(zclSampleSw_Attrs >> 8) & 0xff
   \   00004D   90....       MOV       DPTR,#zclSampleSw_NumAttributes
   \   000050   E4           CLR       A
   \   000051   93           MOVC      A,@A+DPTR
   \   000052   FA           MOV       R2,A
   \   000053   7908         MOV       R1,#0x8
   \   000055   12....       LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
   \   000058   E9           MOV       A,R1
    263            
    264            // Register the Application to receive the unprocessed Foundation command/response messages
    265            zcl_registerForMsg( zclSampleSw_TaskID );
   \   000059                ; Setup parameters for call to function zcl_registerForMsg
   \   000059   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   F9           MOV       R1,A
   \   00005E   12....       LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
   \   000061   E9           MOV       A,R1
    266            
    267            // Register low voltage NV memory protection application callback
    268            RegisterVoltageWarningCB( zclSampleApp_BatteryWarningCB );
   \   000062                ; Setup parameters for call to function RegisterVoltageWarningCB
   \   000062   7A..         MOV       R2,#`??zclSampleApp_BatteryWarningCB::?relay` & 0xff
   \   000064   7B..         MOV       R3,#(`??zclSampleApp_BatteryWarningCB::?relay` >> 8) & 0xff
   \   000066   12....       LCALL     `??RegisterVoltageWarningCB::?relay`; Banked call to: RegisterVoltageWarningCB
    269          
    270            // Register for all key events - This app will handle all key events
    271            RegisterForKeys( zclSampleSw_TaskID );
   \   000069                ; Setup parameters for call to function RegisterForKeys
   \   000069   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   F9           MOV       R1,A
   \   00006E   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
   \   000071   E9           MOV       A,R1
    272            
    273            bdb_RegisterCommissioningStatusCB( zclSampleSw_ProcessCommissioningStatus );
   \   000072                ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
   \   000072   7A..         MOV       R2,#`??zclSampleSw_ProcessCommissioningStatus::?rela` & 0xff
   \   000074   7B..         MOV       R3,#(`??zclSampleSw_ProcessCommissioningStatus::?rela` >> 8) & 0xff
   \   000076   12....       LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
    274            
    275          #ifdef ZCL_DIAGNOSTIC
    276            // Register the application's callback function to read/write attribute data.
    277            // This is only required when the attribute data format is unknown to ZCL.
    278            zcl_registerReadWriteCB( SAMPLESW_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
    279          
    280            if ( zclDiagnostic_InitStats() == ZSuccess )
    281            {
    282              // Here the user could start the timer to save Diagnostics to NV
    283            }
    284          #endif
    285          
    286          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    287            // Register for callback events from the ZCL OTA
    288            zclOTA_Register(zclSampleSw_TaskID);
    289          #endif
    290          
    291            zdpExternalStateTaskID = zclSampleSw_TaskID;
   \   000079   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   F8           MOV       R0,A
   \   00007E   7900         MOV       R1,#0x0
   \   000080   90....       MOV       DPTR,#zdpExternalStateTaskID
   \   000083   E8           MOV       A,R0
   \   000084   F0           MOVX      @DPTR,A
   \   000085   A3           INC       DPTR
   \   000086   E9           MOV       A,R1
   \   000087   F0           MOVX      @DPTR,A
    292          
    293            bdb_StartCommissioning( BDB_COMMISSIONING_MODE_INITIATOR_TL );
   \   000088                ; Setup parameters for call to function bdb_StartCommissioning
   \   000088   7901         MOV       R1,#0x1
   \   00008A   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    294          
    295          }
   \   00008D   7F01         MOV       R7,#0x1
   \   00008F   02....       LJMP      ?BANKED_LEAVE_XDATA
    296          
    297          /*********************************************************************
    298           * @fn          zclSample_event_loop
    299           *
    300           * @brief       Event Loop Processor for zclGeneral.
    301           *
    302           * @param       none
    303           *
    304           * @return      none
    305           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    306          uint16 zclSampleSw_event_loop( uint8 task_id, uint16 events )
   \                     zclSampleSw_event_loop:
    307          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    308            afIncomingMSGPacket_t *MSGpkt;
    309            (void)task_id;  // Intentionally unreferenced parameter
    310          
    311            if( events & TOUCHLINK_RESET_TARGET_EVT )
   \   00000B   EE           MOV       A,R6
   \   00000C   5401         ANL       A,#0x1
   \   00000E   F8           MOV       R0,A
   \   00000F   EF           MOV       A,R7
   \   000010   5410         ANL       A,#0x10
   \   000012   F9           MOV       R1,A
   \   000013   E8           MOV       A,R0
   \   000014   49           ORL       A,R1
   \   000015   6004         JZ        ??zclSampleSw_event_loop_0
    312            {
    313              touchLinkInitiator_ResetToFNSelectedTarget();
   \   000017                ; Setup parameters for call to function touchLinkInitiator_ResetToFNSelectedTarget
   \   000017   12....       LCALL     `??touchLinkInitiator_ResetToFNSelectedTarget::?`; Banked call to: touchLinkInitiator_ResetToFNSelectedTarget
   \   00001A   E9           MOV       A,R1
    314            }
    315          
    316            if ( events & SYS_EVENT_MSG )
   \                     ??zclSampleSw_event_loop_0:
   \   00001B   EE           MOV       A,R6
   \   00001C   5400         ANL       A,#0x0
   \   00001E   F8           MOV       R0,A
   \   00001F   EF           MOV       A,R7
   \   000020   5480         ANL       A,#0x80
   \   000022   F9           MOV       R1,A
   \   000023   E8           MOV       A,R0
   \   000024   49           ORL       A,R1
   \   000025   6062         JZ        ??zclSampleSw_event_loop_1
    317            {
    318              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleSw_TaskID )) )
   \                     ??zclSampleSw_event_loop_2:
   \   000027                ; Setup parameters for call to function osal_msg_receive
   \   000027   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   F9           MOV       R1,A
   \   00002C   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00002F   8A..         MOV       ?V4,R2
   \   000031   8B..         MOV       ?V5,R3
   \   000033   85....       MOV       ?V0,?V4
   \   000036   85....       MOV       ?V1,?V5
   \   000039   E5..         MOV       A,?V0
   \   00003B   45..         ORL       A,?V1
   \   00003D   6040         JZ        ??zclSampleSw_event_loop_3
    319              {
    320                switch ( MSGpkt->hdr.event )
   \   00003F   85..82       MOV       DPL,?V0
   \   000042   85..83       MOV       DPH,?V1
   \   000045   E0           MOVX      A,@DPTR
   \   000046   24CC         ADD       A,#-0x34
   \   000048   600A         JZ        ??zclSampleSw_event_loop_4
   \   00004A   2474         ADD       A,#0x74
   \   00004C   600F         JZ        ??zclSampleSw_event_loop_5
   \   00004E   24EF         ADD       A,#-0x11
   \   000050   6023         JZ        ??zclSampleSw_event_loop_6
   \   000052   8021         SJMP      ??zclSampleSw_event_loop_6
    321                {
    322                  case ZCL_INCOMING_MSG:
    323                    // Incoming ZCL Foundation command/response messages
    324                    zclSampleSw_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
   \                     ??zclSampleSw_event_loop_4:
   \   000054                ; Setup parameters for call to function zclSampleSw_ProcessIncomingMsg
   \   000054   AA..         MOV       R2,?V0
   \   000056   AB..         MOV       R3,?V1
   \   000058   12....       LCALL     `??zclSampleSw_ProcessIncomingMsg::?relay`; Banked call to: zclSampleSw_ProcessIncomingMsg
    325                    break;
   \   00005B   8018         SJMP      ??zclSampleSw_event_loop_6
    326          
    327                  case KEY_CHANGE:
    328                    zclSampleSw_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
   \                     ??zclSampleSw_event_loop_5:
   \   00005D                ; Setup parameters for call to function zclSampleSw_HandleKeys
   \   00005D   85..82       MOV       DPL,?V0
   \   000060   85..83       MOV       DPH,?V1
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   E0           MOVX      A,@DPTR
   \   000067   FA           MOV       R2,A
   \   000068   85..82       MOV       DPL,?V0
   \   00006B   85..83       MOV       DPH,?V1
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   E0           MOVX      A,@DPTR
   \   000071   F9           MOV       R1,A
   \   000072   12....       LCALL     `??zclSampleSw_HandleKeys::?relay`; Banked call to: zclSampleSw_HandleKeys
    329                    break;
    330          
    331                  case ZDO_STATE_CHANGE:
    332                    break;
    333          
    334          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    335                  case ZCL_OTA_CALLBACK_IND:
    336                    zclSampleSw_ProcessOTAMsgs( (zclOTA_CallbackMsg_t*)MSGpkt  );
    337                    break;
    338          #endif
    339          
    340                  default:
    341                    break;
    342                }
    343          
    344                // Release the memory
    345                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??zclSampleSw_event_loop_6:
   \   000075                ; Setup parameters for call to function osal_msg_deallocate
   \   000075   AA..         MOV       R2,?V0
   \   000077   AB..         MOV       R3,?V1
   \   000079   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \   00007C   E9           MOV       A,R1
   \   00007D   80A8         SJMP      ??zclSampleSw_event_loop_2
    346              }
    347          
    348              // return unprocessed events
    349              return (events ^ SYS_EVENT_MSG);
   \                     ??zclSampleSw_event_loop_3:
   \   00007F   EE           MOV       A,R6
   \   000080   6400         XRL       A,#0x0
   \   000082   FA           MOV       R2,A
   \   000083   EF           MOV       A,R7
   \   000084   6480         XRL       A,#0x80
   \   000086   FB           MOV       R3,A
   \   000087   8035         SJMP      ??zclSampleSw_event_loop_7
    350            }
    351          
    352          #if ZG_BUILD_ENDDEVICE_TYPE    
    353            if ( events & SAMPLEAPP_END_DEVICE_REJOIN_EVT )
   \                     ??zclSampleSw_event_loop_1:
   \   000089   EE           MOV       A,R6
   \   00008A   A2E0         MOV       C,0xE0 /* A   */.0
   \   00008C   500E         JNC       ??zclSampleSw_event_loop_8
    354            {
    355              bdb_ZedAttemptRecoverNwk();
   \   00008E                ; Setup parameters for call to function bdb_ZedAttemptRecoverNwk
   \   00008E   12....       LCALL     `??bdb_ZedAttemptRecoverNwk::?relay`; Banked call to: bdb_ZedAttemptRecoverNwk
   \   000091   E9           MOV       A,R1
    356              return ( events ^ SAMPLEAPP_END_DEVICE_REJOIN_EVT );
   \   000092   EE           MOV       A,R6
   \   000093   6401         XRL       A,#0x1
   \   000095   FA           MOV       R2,A
   \   000096   EF           MOV       A,R7
   \   000097   6400         XRL       A,#0x0
   \   000099   FB           MOV       R3,A
   \   00009A   8022         SJMP      ??zclSampleSw_event_loop_7
    357            }
    358          #endif
    359          
    360            if ( events & SAMPLEAPP_LCD_AUTO_UPDATE_EVT )
   \                     ??zclSampleSw_event_loop_8:
   \   00009C   EE           MOV       A,R6
   \   00009D   5410         ANL       A,#0x10
   \   00009F   600A         JZ        ??zclSampleSw_event_loop_9
    361            {
    362              return ( events ^ SAMPLEAPP_LCD_AUTO_UPDATE_EVT );
   \   0000A1   EE           MOV       A,R6
   \   0000A2   6410         XRL       A,#0x10
   \   0000A4   FA           MOV       R2,A
   \   0000A5   EF           MOV       A,R7
   \   0000A6   6400         XRL       A,#0x0
   \   0000A8   FB           MOV       R3,A
   \   0000A9   8013         SJMP      ??zclSampleSw_event_loop_7
    363            }
    364          
    365            if ( events & SAMPLEAPP_KEY_AUTO_REPEAT_EVT )
   \                     ??zclSampleSw_event_loop_9:
   \   0000AB   EE           MOV       A,R6
   \   0000AC   5420         ANL       A,#0x20
   \   0000AE   600A         JZ        ??zclSampleSw_event_loop_10
    366            {
    367              return ( events ^ SAMPLEAPP_KEY_AUTO_REPEAT_EVT );
   \   0000B0   EE           MOV       A,R6
   \   0000B1   6420         XRL       A,#0x20
   \   0000B3   FA           MOV       R2,A
   \   0000B4   EF           MOV       A,R7
   \   0000B5   6400         XRL       A,#0x0
   \   0000B7   FB           MOV       R3,A
   \   0000B8   8004         SJMP      ??zclSampleSw_event_loop_7
    368            }
    369            // Discard unknown events
    370            return 0;
   \                     ??zclSampleSw_event_loop_10:
   \   0000BA   7A00         MOV       R2,#0x0
   \   0000BC   7B00         MOV       R3,#0x0
   \                     ??zclSampleSw_event_loop_7:
   \   0000BE   7F06         MOV       R7,#0x6
   \   0000C0   02....       LJMP      ?BANKED_LEAVE_XDATA
    371          }
    372          
    373          /*********************************************************************
    374           * @fn      zclSampleSw_HandleKeys
    375           *
    376           * @brief   Handles all key events for this device.
    377           *
    378           * @param   shift - true if in shift/alt.
    379           * @param   keys - bit field for key events. Valid entries:
    380           *                 HAL_KEY_SW_5
    381           *                 HAL_KEY_SW_4
    382           *                 HAL_KEY_SW_2
    383           *                 HAL_KEY_SW_1
    384           *
    385           * @return  none
    386           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    387          static void zclSampleSw_HandleKeys( byte shift, byte keys )
   \                     zclSampleSw_HandleKeys:
    388          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FF           MOV       R7,A
    389            if ( keys & HAL_KEY_SW_6 ) //key1
   \   000009   EF           MOV       A,R7
   \   00000A   A2E5         MOV       C,0xE0 /* A   */.5
   \   00000C   501C         JNC       ??zclSampleSw_HandleKeys_0
    390            {
    391              touchLinkInitiator_StartDevDisc();
   \   00000E                ; Setup parameters for call to function touchLinkInitiator_StartDevDisc
   \   00000E   12....       LCALL     `??touchLinkInitiator_StartDevDisc::?relay`; Banked call to: touchLinkInitiator_StartDevDisc
   \   000011   E9           MOV       A,R1
    392              osal_start_timerEx(zclSampleSw_TaskID,TOUCHLINK_RESET_TARGET_EVT,2500);
   \   000012                ; Setup parameters for call to function osal_start_timerEx
   \   000012   90....       MOV       DPTR,#__Constant_9c4
   \   000015   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000018   7A01         MOV       R2,#0x1
   \   00001A   7B10         MOV       R3,#0x10
   \   00001C   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F9           MOV       R1,A
   \   000021   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000024   7404         MOV       A,#0x4
   \   000026   12....       LCALL     ?DEALLOC_XSTACK8
   \   000029   E9           MOV       A,R1
    393            }    
    394          }
   \                     ??zclSampleSw_HandleKeys_0:
   \   00002A   7F01         MOV       R7,#0x1
   \   00002C   02....       LJMP      ?BANKED_LEAVE_XDATA
    395          
    396          /*********************************************************************
    397           * @fn      zclSampleSw_ProcessCommissioningStatus
    398           *
    399           * @brief   Callback in which the status of the commissioning process are reported
    400           *
    401           * @param   bdbCommissioningModeMsg - Context message of the status of a commissioning process
    402           *
    403           * @return  none
    404           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    405          static void zclSampleSw_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
   \                     zclSampleSw_ProcessCommissioningStatus:
    406          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    407            switch(bdbCommissioningModeMsg->bdbCommissioningMode)
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   6046         JZ        ??zclSampleSw_ProcessCommissioningStatus_0
   \   000011   14           DEC       A
   \   000012   6043         JZ        ??zclSampleSw_ProcessCommissioningStatus_0
   \   000014   14           DEC       A
   \   000015   6009         JZ        ??zclSampleSw_ProcessCommissioningStatus_1
   \   000017   14           DEC       A
   \   000018   603D         JZ        ??zclSampleSw_ProcessCommissioningStatus_0
   \   00001A   24FE         ADD       A,#-0x2
   \   00001C   6018         JZ        ??zclSampleSw_ProcessCommissioningStatus_2
   \   00001E   8037         SJMP      ??zclSampleSw_ProcessCommissioningStatus_0
    408            {
    409              case BDB_COMMISSIONING_FORMATION:
    410                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \                     ??zclSampleSw_ProcessCommissioningStatus_1:
   \   000020   8E82         MOV       DPL,R6
   \   000022   8F83         MOV       DPH,R7
   \   000024   E0           MOVX      A,@DPTR
   \   000025   7030         JNZ       ??zclSampleSw_ProcessCommissioningStatus_0
    411                {
    412                  //After formation, perform nwk steering again plus the remaining commissioning modes that has not been processed yet
    413                  bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
   \   000027                ; Setup parameters for call to function bdb_StartCommissioning
   \   000027   8E82         MOV       DPL,R6
   \   000029   8F83         MOV       DPH,R7
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   4402         ORL       A,#0x2
   \   000030   F9           MOV       R1,A
   \   000031   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    414                }
    415                else
    416                {
    417                  //Want to try other channels?
    418                  //try with bdb_setChannelAttribute
    419                }
    420              break;
   \   000034   8021         SJMP      ??zclSampleSw_ProcessCommissioningStatus_0
    421              case BDB_COMMISSIONING_NWK_STEERING:
    422                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    423                {
    424                  //YOUR JOB:
    425                  //We are on the nwk, what now?
    426                }
    427                else
    428                {
    429                  //See the possible errors for nwk steering procedure
    430                  //No suitable networks found
    431                  //Want to try other channels?
    432                  //try with bdb_setChannelAttribute
    433                }
    434              break;
    435              case BDB_COMMISSIONING_FINDING_BINDING:
    436                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    437                {
    438                  //YOUR JOB:
    439                }
    440                else
    441                {
    442                  //YOUR JOB:
    443                  //retry?, wait for user interaction?
    444                }
    445              break;
    446              case BDB_COMMISSIONING_INITIALIZATION:
    447                //Initialization notification can only be successful. Failure on initialization 
    448                //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
    449                
    450                //YOUR JOB:
    451                //We are on a network, what now?
    452                
    453              break;
    454          #if ZG_BUILD_ENDDEVICE_TYPE    
    455              case BDB_COMMISSIONING_PARENT_LOST:
    456                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
   \                     ??zclSampleSw_ProcessCommissioningStatus_2:
   \   000036   8E82         MOV       DPL,R6
   \   000038   8F83         MOV       DPH,R7
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   640D         XRL       A,#0xd
   \   00003D   6018         JZ        ??zclSampleSw_ProcessCommissioningStatus_0
    457                {
    458                  //We did recover from losing parent
    459                }
    460                else
    461                {
    462                  //Parent not found, attempt to rejoin again after a fixed delay
    463                  osal_start_timerEx(zclSampleSw_TaskID, SAMPLEAPP_END_DEVICE_REJOIN_EVT, SAMPLEAPP_END_DEVICE_REJOIN_DELAY);
   \   00003F                ; Setup parameters for call to function osal_start_timerEx
   \   00003F   90....       MOV       DPTR,#__Constant_2710
   \   000042   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000045   7A01         MOV       R2,#0x1
   \   000047   7B00         MOV       R3,#0x0
   \   000049   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   F9           MOV       R1,A
   \   00004E   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000051   7404         MOV       A,#0x4
   \   000053   12....       LCALL     ?DEALLOC_XSTACK8
   \   000056   E9           MOV       A,R1
    464                }
    465              break;
    466          #endif 
    467            }
    468            
    469          }
   \                     ??zclSampleSw_ProcessCommissioningStatus_0:
   \   000057   7F01         MOV       R7,#0x1
   \   000059   02....       LJMP      ?BANKED_LEAVE_XDATA
    470          
    471          /*********************************************************************
    472           * @fn      zclSampleSw_BasicResetCB
    473           *
    474           * @brief   Callback from the ZCL General Cluster Library
    475           *          to set all the Basic Cluster attributes to  default values.
    476           *
    477           * @param   none
    478           *
    479           * @return  none
    480           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    481          static void zclSampleSw_BasicResetCB( void )
   \                     zclSampleSw_BasicResetCB:
    482          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    483            zclSampleSw_ResetAttributesToDefaultValues();
   \   000004                ; Setup parameters for call to function zclSampleSw_ResetAttributesToDefaultValues
   \   000004   12....       LCALL     `??zclSampleSw_ResetAttributesToDefaultValues::?`; Banked call to: zclSampleSw_ResetAttributesToDefaultValues
    484          }
   \   000007   D083         POP       DPH
   \   000009   D082         POP       DPL
   \   00000B   02....       LJMP      ?BRET
    485          
    486          /*********************************************************************
    487           * @fn      zclSampleApp_BatteryWarningCB
    488           *
    489           * @brief   Called to handle battery-low situation.
    490           *
    491           * @param   voltLevel - level of severity
    492           *
    493           * @return  none
    494           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          void zclSampleApp_BatteryWarningCB( uint8 voltLevel )
   \                     zclSampleApp_BatteryWarningCB:
    496          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    497            if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
   \   000000   7401         MOV       A,#0x1
   \   000002   69           XRL       A,R1
    498            {
    499              // Send warning message to the gateway and blink LED
    500            }
    501            else if ( voltLevel == VOLT_LEVEL_BAD )
    502            {
    503              // Shut down the system
    504            }
    505          }
   \   000003   02....       LJMP      ?BRET
    506          
    507          /******************************************************************************
    508           *
    509           *  Functions for processing ZCL Foundation incoming Command/Response messages
    510           *
    511           *****************************************************************************/
    512          
    513          /*********************************************************************
    514           * @fn      zclSampleSw_ProcessIncomingMsg
    515           *
    516           * @brief   Process ZCL Foundation incoming message
    517           *
    518           * @param   pInMsg - pointer to the received message
    519           *
    520           * @return  none
    521           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    522          static void zclSampleSw_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSw_ProcessIncomingMsg:
    523          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    524            switch ( pInMsg->zclHdr.commandID )
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   14           DEC       A
   \   000016   601A         JZ        ??zclSampleSw_ProcessIncomingMsg_0
   \   000018   24FD         ADD       A,#-0x3
   \   00001A   6020         JZ        ??zclSampleSw_ProcessIncomingMsg_1
   \   00001C   24F9         ADD       A,#-0x7
   \   00001E   6026         JZ        ??zclSampleSw_ProcessIncomingMsg_2
   \   000020   24FE         ADD       A,#-0x2
   \   000022   6040         JZ        ??zclSampleSw_ProcessIncomingMsg_3
   \   000024   24FB         ADD       A,#-0x5
   \   000026   6028         JZ        ??zclSampleSw_ProcessIncomingMsg_4
   \   000028   24FE         ADD       A,#-0x2
   \   00002A   602E         JZ        ??zclSampleSw_ProcessIncomingMsg_5
   \   00002C   24FE         ADD       A,#-0x2
   \   00002E   603E         JZ        ??zclSampleSw_ProcessIncomingMsg_6
   \   000030   8044         SJMP      ??zclSampleSw_ProcessIncomingMsg_7
    525            {
    526          #ifdef ZCL_READ
    527              case ZCL_CMD_READ_RSP:
    528                zclSampleSw_ProcessInReadRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_0:
   \   000032                ; Setup parameters for call to function zclSampleSw_ProcessInReadRspCmd
   \   000032   EE           MOV       A,R6
   \   000033   FA           MOV       R2,A
   \   000034   EF           MOV       A,R7
   \   000035   FB           MOV       R3,A
   \   000036   12....       LCALL     `??zclSampleSw_ProcessInReadRspCmd::?relay`; Banked call to: zclSampleSw_ProcessInReadRspCmd
   \   000039   E9           MOV       A,R1
    529                break;
   \   00003A   803A         SJMP      ??zclSampleSw_ProcessIncomingMsg_7
    530          #endif
    531          #ifdef ZCL_WRITE
    532              case ZCL_CMD_WRITE_RSP:
    533                zclSampleSw_ProcessInWriteRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_1:
   \   00003C                ; Setup parameters for call to function zclSampleSw_ProcessInWriteRspCmd
   \   00003C   EE           MOV       A,R6
   \   00003D   FA           MOV       R2,A
   \   00003E   EF           MOV       A,R7
   \   00003F   FB           MOV       R3,A
   \   000040   12....       LCALL     `??zclSampleSw_ProcessInWriteRspCmd::?relay`; Banked call to: zclSampleSw_ProcessInWriteRspCmd
   \   000043   E9           MOV       A,R1
    534                break;
   \   000044   8030         SJMP      ??zclSampleSw_ProcessIncomingMsg_7
    535          #endif
    536          #ifdef ZCL_REPORT
    537              // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
    538              case ZCL_CMD_CONFIG_REPORT:
    539                //zclSampleSw_ProcessInConfigReportCmd( pInMsg );
    540                break;
    541          
    542              case ZCL_CMD_CONFIG_REPORT_RSP:
    543                //zclSampleSw_ProcessInConfigReportRspCmd( pInMsg );
    544                break;
    545          
    546              case ZCL_CMD_READ_REPORT_CFG:
    547                //zclSampleSw_ProcessInReadReportCfgCmd( pInMsg );
    548                break;
    549          
    550              case ZCL_CMD_READ_REPORT_CFG_RSP:
    551                //zclSampleSw_ProcessInReadReportCfgRspCmd( pInMsg );
    552                break;
    553          
    554              case ZCL_CMD_REPORT:
    555                zclSampleSw_ProcessInReportCmd( pInMsg );
    556                break;
    557          #endif
    558              case ZCL_CMD_DEFAULT_RSP:
    559                zclSampleSw_ProcessInDefaultRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_2:
   \   000046                ; Setup parameters for call to function zclSampleSw_ProcessInDefaultRspCmd
   \   000046   EE           MOV       A,R6
   \   000047   FA           MOV       R2,A
   \   000048   EF           MOV       A,R7
   \   000049   FB           MOV       R3,A
   \   00004A   12....       LCALL     `??zclSampleSw_ProcessInDefaultRspCmd::?relay`; Banked call to: zclSampleSw_ProcessInDefaultRspCmd
   \   00004D   E9           MOV       A,R1
    560                break;
   \   00004E   8026         SJMP      ??zclSampleSw_ProcessIncomingMsg_7
    561          #ifdef ZCL_DISCOVER
    562              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
    563                zclSampleSw_ProcessInDiscCmdsRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_4:
   \   000050                ; Setup parameters for call to function zclSampleSw_ProcessInDiscCmdsRspCmd
   \   000050   EE           MOV       A,R6
   \   000051   FA           MOV       R2,A
   \   000052   EF           MOV       A,R7
   \   000053   FB           MOV       R3,A
   \   000054   12....       LCALL     `??zclSampleSw_ProcessInDiscCmdsRspCmd::?relay`; Banked call to: zclSampleSw_ProcessInDiscCmdsRspCmd
   \   000057   E9           MOV       A,R1
    564                break;
   \   000058   801C         SJMP      ??zclSampleSw_ProcessIncomingMsg_7
    565          
    566              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
    567                zclSampleSw_ProcessInDiscCmdsRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_5:
   \   00005A                ; Setup parameters for call to function zclSampleSw_ProcessInDiscCmdsRspCmd
   \   00005A   EE           MOV       A,R6
   \   00005B   FA           MOV       R2,A
   \   00005C   EF           MOV       A,R7
   \   00005D   FB           MOV       R3,A
   \   00005E   12....       LCALL     `??zclSampleSw_ProcessInDiscCmdsRspCmd::?relay`; Banked call to: zclSampleSw_ProcessInDiscCmdsRspCmd
   \   000061   E9           MOV       A,R1
    568                break;
   \   000062   8012         SJMP      ??zclSampleSw_ProcessIncomingMsg_7
    569          
    570              case ZCL_CMD_DISCOVER_ATTRS_RSP:
    571                zclSampleSw_ProcessInDiscAttrsRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_3:
   \   000064                ; Setup parameters for call to function zclSampleSw_ProcessInDiscAttrsRspCmd
   \   000064   EE           MOV       A,R6
   \   000065   FA           MOV       R2,A
   \   000066   EF           MOV       A,R7
   \   000067   FB           MOV       R3,A
   \   000068   12....       LCALL     `??zclSampleSw_ProcessInDiscAttrsRspCmd::?relay`; Banked call to: zclSampleSw_ProcessInDiscAttrsRspCmd
   \   00006B   E9           MOV       A,R1
    572                break;
   \   00006C   8008         SJMP      ??zclSampleSw_ProcessIncomingMsg_7
    573          
    574              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
    575                zclSampleSw_ProcessInDiscAttrsExtRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_6:
   \   00006E                ; Setup parameters for call to function zclSampleSw_ProcessInDiscAttrsExtRspCmd
   \   00006E   EE           MOV       A,R6
   \   00006F   FA           MOV       R2,A
   \   000070   EF           MOV       A,R7
   \   000071   FB           MOV       R3,A
   \   000072   12....       LCALL     `??zclSampleSw_ProcessInDiscAttrsExtRspCmd::?rel`; Banked call to: zclSampleSw_ProcessInDiscAttrsExtRspCmd
   \   000075   E9           MOV       A,R1
    576                break;
    577          #endif
    578              default:
    579                break;
    580            }
    581          
    582            if ( pInMsg->attrCmd )
   \                     ??zclSampleSw_ProcessIncomingMsg_7:
   \   000076   EE           MOV       A,R6
   \   000077   2417         ADD       A,#0x17
   \   000079   F582         MOV       DPL,A
   \   00007B   E4           CLR       A
   \   00007C   3F           ADDC      A,R7
   \   00007D   F583         MOV       DPH,A
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   F8           MOV       R0,A
   \   000081   A3           INC       DPTR
   \   000082   E0           MOVX      A,@DPTR
   \   000083   F9           MOV       R1,A
   \   000084   E8           MOV       A,R0
   \   000085   49           ORL       A,R1
   \   000086   6011         JZ        ??zclSampleSw_ProcessIncomingMsg_8
    583              osal_mem_free( pInMsg->attrCmd );
   \   000088                ; Setup parameters for call to function osal_mem_free
   \   000088   EE           MOV       A,R6
   \   000089   2417         ADD       A,#0x17
   \   00008B   F582         MOV       DPL,A
   \   00008D   E4           CLR       A
   \   00008E   3F           ADDC      A,R7
   \   00008F   F583         MOV       DPH,A
   \   000091   E0           MOVX      A,@DPTR
   \   000092   FA           MOV       R2,A
   \   000093   A3           INC       DPTR
   \   000094   E0           MOVX      A,@DPTR
   \   000095   FB           MOV       R3,A
   \   000096   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    584          }
   \                     ??zclSampleSw_ProcessIncomingMsg_8:
   \   000099   7F01         MOV       R7,#0x1
   \   00009B   02....       LJMP      ?BANKED_LEAVE_XDATA
    585          
    586          #ifdef ZCL_READ
    587          /*********************************************************************
    588           * @fn      zclSampleSw_ProcessInReadRspCmd
    589           *
    590           * @brief   Process the "Profile" Read Response Command
    591           *
    592           * @param   pInMsg - incoming message to process
    593           *
    594           * @return  none
    595           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    596          static uint8 zclSampleSw_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSw_ProcessInReadRspCmd:
    597          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    598            zclReadRspCmd_t *readRspCmd;
    599            uint8 i;
    600          
    601            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
   \   000005   EA           MOV       A,R2
   \   000006   2417         ADD       A,#0x17
   \   000008   F582         MOV       DPL,A
   \   00000A   E4           CLR       A
   \   00000B   3B           ADDC      A,R3
   \   00000C   F583         MOV       DPH,A
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F8           MOV       R0,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F9           MOV       R1,A
   \   000013   E8           MOV       A,R0
   \   000014   FE           MOV       R6,A
   \   000015   E9           MOV       A,R1
   \   000016   FF           MOV       R7,A
    602            for (i = 0; i < readRspCmd->numAttr; i++)
   \   000017   7C00         MOV       R4,#0x0
   \                     ??zclSampleSw_ProcessInReadRspCmd_0:
   \   000019   8E82         MOV       DPL,R6
   \   00001B   8F83         MOV       DPH,R7
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F8           MOV       R0,A
   \   00001F   EC           MOV       A,R4
   \   000020   C3           CLR       C
   \   000021   98           SUBB      A,R0
   \   000022   5003         JNC       ??zclSampleSw_ProcessInReadRspCmd_1
   \   000024   0C           INC       R4
   \   000025   80F2         SJMP      ??zclSampleSw_ProcessInReadRspCmd_0
    603            {
    604              // Notify the originator of the results of the original read attributes
    605              // attempt and, for each successfull request, the value of the requested
    606              // attribute
    607            }
    608          
    609            return TRUE;
   \                     ??zclSampleSw_ProcessInReadRspCmd_1:
   \   000027   7901         MOV       R1,#0x1
   \   000029   7F01         MOV       R7,#0x1
   \   00002B   02....       LJMP      ?BANKED_LEAVE_XDATA
    610          }
    611          #endif // ZCL_READ
    612          
    613          #ifdef ZCL_WRITE
    614          /*********************************************************************
    615           * @fn      zclSampleSw_ProcessInWriteRspCmd
    616           *
    617           * @brief   Process the "Profile" Write Response Command
    618           *
    619           * @param   pInMsg - incoming message to process
    620           *
    621           * @return  none
    622           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    623          static uint8 zclSampleSw_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSw_ProcessInWriteRspCmd:
    624          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    625            zclWriteRspCmd_t *writeRspCmd;
    626            uint8 i;
    627          
    628            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
   \   000005   EA           MOV       A,R2
   \   000006   2417         ADD       A,#0x17
   \   000008   F582         MOV       DPL,A
   \   00000A   E4           CLR       A
   \   00000B   3B           ADDC      A,R3
   \   00000C   F583         MOV       DPH,A
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F8           MOV       R0,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F9           MOV       R1,A
   \   000013   E8           MOV       A,R0
   \   000014   FE           MOV       R6,A
   \   000015   E9           MOV       A,R1
   \   000016   FF           MOV       R7,A
    629            for (i = 0; i < writeRspCmd->numAttr; i++)
   \   000017   7C00         MOV       R4,#0x0
   \                     ??zclSampleSw_ProcessInWriteRspCmd_0:
   \   000019   8E82         MOV       DPL,R6
   \   00001B   8F83         MOV       DPH,R7
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F8           MOV       R0,A
   \   00001F   EC           MOV       A,R4
   \   000020   C3           CLR       C
   \   000021   98           SUBB      A,R0
   \   000022   5003         JNC       ??zclSampleSw_ProcessInWriteRspCmd_1
   \   000024   0C           INC       R4
   \   000025   80F2         SJMP      ??zclSampleSw_ProcessInWriteRspCmd_0
    630            {
    631              // Notify the device of the results of the its original write attributes
    632              // command.
    633            }
    634          
    635            return TRUE;
   \                     ??zclSampleSw_ProcessInWriteRspCmd_1:
   \   000027   7901         MOV       R1,#0x1
   \   000029   7F01         MOV       R7,#0x1
   \   00002B   02....       LJMP      ?BANKED_LEAVE_XDATA
    636          }
    637          #endif // ZCL_WRITE
    638          
    639          /*********************************************************************
    640           * @fn      zclSampleSw_ProcessInDefaultRspCmd
    641           *
    642           * @brief   Process the "Profile" Default Response Command
    643           *
    644           * @param   pInMsg - incoming message to process
    645           *
    646           * @return  none
    647           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    648          static uint8 zclSampleSw_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSw_ProcessInDefaultRspCmd:
    649          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    650            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
    651            // Device is notified of the Default Response command.
    652            (void)pInMsg;
    653            return TRUE;
   \   000000   7901         MOV       R1,#0x1
   \   000002   02....       LJMP      ?BRET
    654          }
    655          
    656          #ifdef ZCL_DISCOVER
    657          /*********************************************************************
    658           * @fn      zclSampleSw_ProcessInDiscCmdsRspCmd
    659           *
    660           * @brief   Process the Discover Commands Response Command
    661           *
    662           * @param   pInMsg - incoming message to process
    663           *
    664           * @return  none
    665           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    666          static uint8 zclSampleSw_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSw_ProcessInDiscCmdsRspCmd:
    667          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    668            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
    669            uint8 i;
    670          
    671            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
   \   000005   EA           MOV       A,R2
   \   000006   2417         ADD       A,#0x17
   \   000008   F582         MOV       DPL,A
   \   00000A   E4           CLR       A
   \   00000B   3B           ADDC      A,R3
   \   00000C   F583         MOV       DPH,A
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F8           MOV       R0,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F9           MOV       R1,A
   \   000013   E8           MOV       A,R0
   \   000014   FE           MOV       R6,A
   \   000015   E9           MOV       A,R1
   \   000016   FF           MOV       R7,A
    672            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
   \   000017   7C00         MOV       R4,#0x0
   \                     ??zclSampleSw_ProcessInDiscCmdsRspCmd_0:
   \   000019   8E82         MOV       DPL,R6
   \   00001B   8F83         MOV       DPH,R7
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F8           MOV       R0,A
   \   000021   EC           MOV       A,R4
   \   000022   C3           CLR       C
   \   000023   98           SUBB      A,R0
   \   000024   5003         JNC       ??zclSampleSw_ProcessInDiscCmdsRspCmd_1
   \   000026   0C           INC       R4
   \   000027   80F0         SJMP      ??zclSampleSw_ProcessInDiscCmdsRspCmd_0
    673            {
    674              // Device is notified of the result of its attribute discovery command.
    675            }
    676          
    677            return TRUE;
   \                     ??zclSampleSw_ProcessInDiscCmdsRspCmd_1:
   \   000029   7901         MOV       R1,#0x1
   \   00002B   7F01         MOV       R7,#0x1
   \   00002D   02....       LJMP      ?BANKED_LEAVE_XDATA
    678          }
    679          
    680          /*********************************************************************
    681           * @fn      zclSampleSw_ProcessInDiscAttrsRspCmd
    682           *
    683           * @brief   Process the "Profile" Discover Attributes Response Command
    684           *
    685           * @param   pInMsg - incoming message to process
    686           *
    687           * @return  none
    688           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    689          static uint8 zclSampleSw_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSw_ProcessInDiscAttrsRspCmd:
    690          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    691            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
    692            uint8 i;
    693          
    694            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
   \   000005   EA           MOV       A,R2
   \   000006   2417         ADD       A,#0x17
   \   000008   F582         MOV       DPL,A
   \   00000A   E4           CLR       A
   \   00000B   3B           ADDC      A,R3
   \   00000C   F583         MOV       DPH,A
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F8           MOV       R0,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F9           MOV       R1,A
   \   000013   E8           MOV       A,R0
   \   000014   FE           MOV       R6,A
   \   000015   E9           MOV       A,R1
   \   000016   FF           MOV       R7,A
    695            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   \   000017   7C00         MOV       R4,#0x0
   \                     ??zclSampleSw_ProcessInDiscAttrsRspCmd_0:
   \   000019   8E82         MOV       DPL,R6
   \   00001B   8F83         MOV       DPH,R7
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F8           MOV       R0,A
   \   000020   EC           MOV       A,R4
   \   000021   C3           CLR       C
   \   000022   98           SUBB      A,R0
   \   000023   5003         JNC       ??zclSampleSw_ProcessInDiscAttrsRspCmd_1
   \   000025   0C           INC       R4
   \   000026   80F1         SJMP      ??zclSampleSw_ProcessInDiscAttrsRspCmd_0
    696            {
    697              // Device is notified of the result of its attribute discovery command.
    698            }
    699          
    700            return TRUE;
   \                     ??zclSampleSw_ProcessInDiscAttrsRspCmd_1:
   \   000028   7901         MOV       R1,#0x1
   \   00002A   7F01         MOV       R7,#0x1
   \   00002C   02....       LJMP      ?BANKED_LEAVE_XDATA
    701          }
    702          
    703          /*********************************************************************
    704           * @fn      zclSampleSw_ProcessInDiscAttrsExtRspCmd
    705           *
    706           * @brief   Process the "Profile" Discover Attributes Extended Response Command
    707           *
    708           * @param   pInMsg - incoming message to process
    709           *
    710           * @return  none
    711           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    712          static uint8 zclSampleSw_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSw_ProcessInDiscAttrsExtRspCmd:
    713          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    714            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
    715            uint8 i;
    716          
    717            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
   \   000005   EA           MOV       A,R2
   \   000006   2417         ADD       A,#0x17
   \   000008   F582         MOV       DPL,A
   \   00000A   E4           CLR       A
   \   00000B   3B           ADDC      A,R3
   \   00000C   F583         MOV       DPH,A
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F8           MOV       R0,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F9           MOV       R1,A
   \   000013   E8           MOV       A,R0
   \   000014   FE           MOV       R6,A
   \   000015   E9           MOV       A,R1
   \   000016   FF           MOV       R7,A
    718            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   \   000017   7C00         MOV       R4,#0x0
   \                     ??zclSampleSw_ProcessInDiscAttrsExtRspCmd_0:
   \   000019   8E82         MOV       DPL,R6
   \   00001B   8F83         MOV       DPH,R7
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F8           MOV       R0,A
   \   000020   EC           MOV       A,R4
   \   000021   C3           CLR       C
   \   000022   98           SUBB      A,R0
   \   000023   5003         JNC       ??zclSampleSw_ProcessInDiscAttrsExtRspCmd_1
   \   000025   0C           INC       R4
   \   000026   80F1         SJMP      ??zclSampleSw_ProcessInDiscAttrsExtRspCmd_0
    719            {
    720              // Device is notified of the result of its attribute discovery command.
    721            }
    722          
    723            return TRUE;
   \                     ??zclSampleSw_ProcessInDiscAttrsExtRspCmd_1:
   \   000028   7901         MOV       R1,#0x1
   \   00002A   7F01         MOV       R7,#0x1
   \   00002C   02....       LJMP      ?BANKED_LEAVE_XDATA
    724          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleSw_OnOffSwitchType>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleSw_NwkState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleSw_CmdCallbacks>`:
   \   000000   ....         DW `??zclSampleSw_BasicResetCB::?relay`
   \   000002   0000         DW 0H
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   0000         DW 0H
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_9c4:
   \   000000   C4090000     DD 2500

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2710:
   \   000000   10270000     DD 10000
    725          #endif // ZCL_DISCOVER
    726          
    727          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    728          /*********************************************************************
    729           * @fn      zclSampleSw_ProcessOTAMsgs
    730           *
    731           * @brief   Called to process callbacks from the ZCL OTA.
    732           *
    733           * @param   none
    734           *
    735           * @return  none
    736           */
    737          static void zclSampleSw_ProcessOTAMsgs( zclOTA_CallbackMsg_t* pMsg )
    738          {
    739            uint8 RxOnIdle;
    740          
    741            switch(pMsg->ota_event)
    742            {
    743            case ZCL_OTA_START_CALLBACK:
    744              if (pMsg->hdr.status == ZSuccess)
    745              {
    746                // Speed up the poll rate
    747                RxOnIdle = TRUE;
    748                ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    749                NLME_SetPollRate( 2000 );
    750              }
    751              break;
    752          
    753            case ZCL_OTA_DL_COMPLETE_CALLBACK:
    754              if (pMsg->hdr.status == ZSuccess)
    755              {
    756                // Reset the CRC Shadow and reboot.  The bootloader will see the
    757                // CRC shadow has been cleared and switch to the new image
    758                HalOTAInvRC();
    759                SystemReset();
    760              }
    761              else
    762              {
    763          #if (ZG_BUILD_ENDDEVICE_TYPE)    
    764                // slow the poll rate back down.
    765                RxOnIdle = FALSE;
    766                ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    767                NLME_SetPollRate(DEVICE_POLL_RATE);
    768          #endif
    769              }
    770              break;
    771          
    772            default:
    773              break;
    774            }
    775          }
    776          #endif // defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    777          
    778          /****************************************************************************
    779          ****************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   zclSampleApp_BatteryWarningCB
      2      0   zclSampleSw_BasicResetCB
        2      0   -> zclSampleSw_ResetAttributesToDefaultValues
      0     27   zclSampleSw_HandleKeys
        0     13   -> osal_start_timerEx
        0      9   -> touchLinkInitiator_StartDevDisc
      0      9   zclSampleSw_Init
        0      9   -> RegisterForKeys
        0      9   -> RegisterForUart0
        0      9   -> RegisterVoltageWarningCB
        0      9   -> Uart0_Init
        0      9   -> bdb_RegisterCommissioningStatusCB
        0      9   -> bdb_RegisterSimpleDescriptor
        0      9   -> bdb_StartCommissioning
        0      9   -> osal_pwrmgr_device
        0      9   -> zclGeneral_RegisterCmdCallbacks
        0      9   -> zclSampleSw_ResetAttributesToDefaultValues
        0      9   -> zcl_registerAttrList
        0      9   -> zcl_registerForMsg
      0     13   zclSampleSw_ProcessCommissioningStatus
        0      9   -> bdb_StartCommissioning
        0     13   -> osal_start_timerEx
      0      9   zclSampleSw_ProcessInDefaultRspCmd
      0     18   zclSampleSw_ProcessInDiscAttrsExtRspCmd
      0     18   zclSampleSw_ProcessInDiscAttrsRspCmd
      0     18   zclSampleSw_ProcessInDiscCmdsRspCmd
      0     18   zclSampleSw_ProcessInReadRspCmd
      0     18   zclSampleSw_ProcessInWriteRspCmd
      0     23   zclSampleSw_ProcessIncomingMsg
        0      9   -> osal_mem_free
        0      9   -> zclSampleSw_ProcessInDefaultRspCmd
        0      9   -> zclSampleSw_ProcessInDiscAttrsExtRspCmd
        0      9   -> zclSampleSw_ProcessInDiscAttrsRspCmd
        0      9   -> zclSampleSw_ProcessInDiscCmdsRspCmd
        0      9   -> zclSampleSw_ProcessInReadRspCmd
        0      9   -> zclSampleSw_ProcessInWriteRspCmd
      0     14   zclSampleSw_event_loop
        0     14   -> bdb_ZedAttemptRecoverNwk
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
        0     14   -> touchLinkInitiator_ResetToFNSelectedTarget
        0     14   -> zclSampleSw_HandleKeys
        0     14   -> zclSampleSw_ProcessIncomingMsg


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      18  ?<Initializer for zclSampleSw_CmdCallbacks>
       1  ?<Initializer for zclSampleSw_NwkState>
       1  ?<Initializer for zclSampleSw_OnOffSwitchType>
      12  SW_DstAddr
       2  SourceAddr
       4  __Constant_2710
       4  __Constant_9c4
       6  zclSampleApp_BatteryWarningCB
       1  zclSampleSwSeqNum
      14  zclSampleSw_BasicResetCB
      18  zclSampleSw_CmdCallbacks
      12  zclSampleSw_DstAddr
      47  zclSampleSw_HandleKeys
     146  zclSampleSw_Init
       1  zclSampleSw_NwkState
       1  zclSampleSw_OnOffSwitchActions
       1  zclSampleSw_OnOffSwitchType
      92  zclSampleSw_ProcessCommissioningStatus
       5  zclSampleSw_ProcessInDefaultRspCmd
      47  zclSampleSw_ProcessInDiscAttrsExtRspCmd
      47  zclSampleSw_ProcessInDiscAttrsRspCmd
      48  zclSampleSw_ProcessInDiscCmdsRspCmd
      46  zclSampleSw_ProcessInReadRspCmd
      46  zclSampleSw_ProcessInWriteRspCmd
     158  zclSampleSw_ProcessIncomingMsg
       1  zclSampleSw_TaskID
     195  zclSampleSw_event_loop
      78  -- Other

 
 897 bytes in segment BANKED_CODE
  78 bytes in segment BANK_RELAYS
  20 bytes in segment XDATA_I
  20 bytes in segment XDATA_ID
   8 bytes in segment XDATA_ROM_C
  29 bytes in segment XDATA_Z
 
  98 bytes of CODE     memory
   0 bytes of CONST    memory (+ 8 bytes shared)
 897 bytes of HUGECODE memory
  49 bytes of XDATA    memory

Errors: none
Warnings: none
