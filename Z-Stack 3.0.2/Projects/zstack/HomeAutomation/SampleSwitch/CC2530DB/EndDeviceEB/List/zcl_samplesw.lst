###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               31/Jul/2020  11:49:42
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EWE494.tmp ("D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c"
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        POWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC
#        -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_GROUPS -D BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\zcl_samplesw.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\zcl_samplesw.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c
      1          /**************************************************************************************************
      2            Filename:       zcl_samplesw.c
      3            Revised:        $Date: 2015-08-19 17:11:00 -0700 (Wed, 19 Aug 2015) $
      4            Revision:       $Revision: 44460 $
      5          
      6            Description:    Zigbee Cluster Library - sample switch application.
      7          
      8          
      9            Copyright 2006-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application implements a ZigBee On/Off Switch, based on Z-Stack 3.0.
     42          
     43            This application is based on the common sample-application user interface. Please see the main
     44            comment in zcl_sampleapp_ui.c. The rest of this comment describes only the content specific for
     45            this sample applicetion.
     46            
     47            Application-specific UI peripherals being used:
     48          
     49            - none (LED1 is currently unused by this application).
     50          
     51            Application-specific menu system:
     52          
     53              <TOGGLE LIGHT> Send an On, Off or Toggle command targeting appropriate devices from the binding table.
     54                Pressing / releasing [OK] will have the following functionality, depending on the value of the 
     55                zclSampleSw_OnOffSwitchActions attribute:
     56                - OnOffSwitchActions == 0: pressing [OK] will send ON command, releasing it will send OFF command;
     57                - OnOffSwitchActions == 1: pressing [OK] will send OFF command, releasing it will send ON command;
     58                - OnOffSwitchActions == 2: pressing [OK] will send TOGGLE command, releasing it will not send any command.
     59          
     60          *********************************************************************/
     61          
     62          #if ! defined ZCL_ON_OFF
     63          #error ZCL_ON_OFF must be defined for this project.
     64          #endif
     65          
     66          /*********************************************************************
     67           * INCLUDES
     68           */
     69          #include "ZComDef.h"
     70          #include "OSAL.h"
     71          #include "AF.h"
     72          #include "ZDApp.h"
     73          #include "ZDObject.h"
     74          #include "ZDProfile.h"
     75          #include "MT_SYS.h"
     76          
     77          #include "zcl.h"
     78          #include "zcl_general.h"
     79          #include "zcl_ha.h"
     80          #include "zcl_samplesw.h"
     81          #include "zcl_diagnostic.h"
     82          
     83          #include "onboard.h"
     84          
     85          /* HAL */
     86          #include "hal_lcd.h"
     87          #include "hal_led.h"
     88          #include "hal_key.h"
     89          
     90          /* UART */
     91          #include "uart0.h"
     92          #include "user_printf.h"
     93          
     94          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
     95          #include "zcl_ota.h"
     96          #include "hal_ota.h"
     97          #endif
     98          
     99          #include "bdb.h"
    100          #include "bdb_interface.h"
    101          #include "bdb_touchlink_initiator.h"
    102          
    103          /*********************************************************************
    104           * MACROS
    105           */
    106          
    107          #define APP_TITLE "TI Sample Switch"
    108          
    109          /*********************************************************************
    110           * TYPEDEFS
    111           */
    112          
    113          /*********************************************************************
    114           * GLOBAL VARIABLES
    115           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    116          byte zclSampleSw_TaskID;
   \                     zclSampleSw_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    117          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          uint8 zclSampleSwSeqNum;
   \                     zclSampleSwSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    119          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    120          uint8 zclSampleSw_OnOffSwitchType = ON_OFF_SWITCH_TYPE_MOMENTARY;
   \                     zclSampleSw_OnOffSwitchType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleSw_OnOffSwitchType>`
   \   000001                REQUIRE __INIT_XDATA_I
    121          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    122          uint8 zclSampleSw_OnOffSwitchActions;
   \                     zclSampleSw_OnOffSwitchActions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    123          
    124          /*********************************************************************
    125           * GLOBAL FUNCTIONS
    126           */
    127          //extern ZStatus_t touchLinkInitiator_StartDevDisc( void );
    128          //extern ZStatus_t touchLinkInitiator_ResetToFNSelectedTarget( void );
    129          /*********************************************************************
    130           * LOCAL VARIABLES
    131           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          afAddrType_t zclSampleSw_DstAddr;
   \                     zclSampleSw_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          afAddrType_t SW_DstAddr;
   \                     SW_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    134          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          uint16 SourceAddr;
   \                     SourceAddr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    136          // Endpoint to allow SYS_APP_MSGs
    137          
    138          //static uint8 aProcessCmd[] = { 1, 0, 0, 0 }; // used for reset command, { length + cmd0 + cmd1 + data }
    139          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    140          devStates_t zclSampleSw_NwkState = DEV_INIT;
   \                     zclSampleSw_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleSw_NwkState>`
   \   000001                REQUIRE __INIT_XDATA_I
    141          
    142          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    143          #define DEVICE_POLL_RATE                 8000   // Poll rate for end device
    144          #endif
    145          
    146          #define SAMPLESW_TOGGLE_TEST_EVT   0x1000
    147          /*********************************************************************
    148           * LOCAL FUNCTIONS
    149           */
    150          //static void Send_To_SW1( void );
    151          //static void Send_To_SW2( void );
    152          //static void Send_To_SW3( void );
    153          
    154          static void zclSampleSw_HandleKeys( byte shift, byte keys );
    155          static void zclSampleSw_BasicResetCB( void );
    156          
    157          static void zclSampleSw_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg);
    158          
    159          
    160          // Functions to process ZCL Foundation incoming Command/Response messages
    161          
    162          //static void zclSampleSw_ProcessInReportCmd( zclIncomingMsg_t *pInMsg );
    163          
    164          static void zclSampleSw_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    165          #ifdef ZCL_READ
    166          static uint8 zclSampleSw_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    167          #endif
    168          #ifdef ZCL_WRITE
    169          static uint8 zclSampleSw_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    170          #endif
    171          static uint8 zclSampleSw_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    172          #ifdef ZCL_DISCOVER
    173          static uint8 zclSampleSw_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    174          static uint8 zclSampleSw_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    175          static uint8 zclSampleSw_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    176          #endif
    177          
    178          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    179          static void zclSampleSw_ProcessOTAMsgs( zclOTA_CallbackMsg_t* pMsg );
    180          #endif
    181          
    182          
    183          static void zclSampleApp_BatteryWarningCB( uint8 voltLevel);
    184          
    185          
    186          /*********************************************************************
    187           * CONSTANTS
    188           */
    189          
    190            
    191          /*********************************************************************
    192           * REFERENCED EXTERNALS
    193           */
    194          extern int16 zdpExternalStateTaskID;
    195          
    196          /*********************************************************************
    197           * ZCL General Profile Callback table
    198           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    199          static zclGeneral_AppCallbacks_t zclSampleSw_CmdCallbacks =
   \                     zclSampleSw_CmdCallbacks:
   \   000000                DS 18
   \   000012                REQUIRE `?<Initializer for zclSampleSw_CmdCallbacks>`
   \   000012                REQUIRE __INIT_XDATA_I
    200          {
    201            zclSampleSw_BasicResetCB,               // Basic Cluster Reset command
    202            NULL,                                   // Identify Trigger Effect command
    203            NULL,                                   // On/Off cluster commands
    204            NULL,                                   // On/Off cluster enhanced command Off with Effect
    205            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    206            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    207          #ifdef ZCL_LEVEL_CTRL
    208            NULL,                                   // Level Control Move to Level command
    209            NULL,                                   // Level Control Move command
    210            NULL,                                   // Level Control Step command
    211            NULL,                                   // Level Control Stop command
    212          #endif
    213          #ifdef ZCL_GROUPS
    214            NULL,                                   // Group Response commands
    215          #endif
    216          #ifdef ZCL_SCENES
    217            NULL,                                   // Scene Store Request command
    218            NULL,                                   // Scene Recall Request command
    219            NULL,                                   // Scene Response command
    220          #endif
    221          #ifdef ZCL_ALARMS
    222            NULL,                                   // Alarm (Response) commands
    223          #endif
    224          #ifdef SE_UK_EXT
    225            NULL,                                   // Get Event Log command
    226            NULL,                                   // Publish Event Log command
    227          #endif
    228            NULL,                                   // RSSI Location command
    229            NULL                                    // RSSI Location Response command
    230          };
    231          
    232          /*********************************************************************
    233           * @fn          zclSampleSw_Init
    234           *
    235           * @brief       Initialization function for the zclGeneral layer.
    236           *
    237           * @param       none
    238           *
    239           * @return      none
    240           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    241          void zclSampleSw_Init( byte task_id )
   \                     zclSampleSw_Init:
    242          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    243            zclSampleSw_TaskID = task_id;
   \   000007   EE           MOV       A,R6
   \   000008   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00000B   F0           MOVX      @DPTR,A
    244          
    245            // Set destination address to indirect
    246            zclSampleSw_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000C   90....       MOV       DPTR,#zclSampleSw_DstAddr + 8
   \   00000F   7400         MOV       A,#0x0
   \   000011   F0           MOVX      @DPTR,A
    247            zclSampleSw_DstAddr.endPoint = 0;
   \   000012   90....       MOV       DPTR,#zclSampleSw_DstAddr + 9
   \   000015   7400         MOV       A,#0x0
   \   000017   F0           MOVX      @DPTR,A
    248            zclSampleSw_DstAddr.addr.shortAddr = 0;
   \   000018   90....       MOV       DPTR,#zclSampleSw_DstAddr
   \   00001B   7400         MOV       A,#0x0
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   A3           INC       DPTR
   \   00001F   7400         MOV       A,#0x0
   \   000021   F0           MOVX      @DPTR,A
    249          
    250            //Initialize the Uart0
    251            Uart0_Init(HAL_UART_BR_115200);
   \   000022                ; Setup parameters for call to function Uart0_Init
   \   000022   7904         MOV       R1,#0x4
   \   000024   12....       LCALL     `??Uart0_Init::?relay`; Banked call to: Uart0_Init
    252          
    253            // Register the Uart0
    254            RegisterForUart0( zclSampleSw_TaskID );
   \   000027                ; Setup parameters for call to function RegisterForUart0
   \   000027   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   F9           MOV       R1,A
   \   00002C   12....       LCALL     `??RegisterForUart0::?relay`; Banked call to: RegisterForUart0
   \   00002F   E9           MOV       A,R1
    255          
    256            // Register the Simple Descriptor for this application
    257            bdb_RegisterSimpleDescriptor( &zclSampleSw_SimpleDesc );
   \   000030                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   000030   7A..         MOV       R2,#zclSampleSw_SimpleDesc & 0xff
   \   000032   7B..         MOV       R3,#(zclSampleSw_SimpleDesc >> 8) & 0xff
   \   000034   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    258          
    259            // Register the ZCL General Cluster Library callback functions
    260            zclGeneral_RegisterCmdCallbacks( SW1_ENDPOINT, &zclSampleSw_CmdCallbacks );
   \   000037                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   000037   7A..         MOV       R2,#zclSampleSw_CmdCallbacks & 0xff
   \   000039   7B..         MOV       R3,#(zclSampleSw_CmdCallbacks >> 8) & 0xff
   \   00003B   7908         MOV       R1,#0x8
   \   00003D   12....       LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
   \   000040   E9           MOV       A,R1
    261          
    262            zclSampleSw_ResetAttributesToDefaultValues();
   \   000041                ; Setup parameters for call to function zclSampleSw_ResetAttributesToDefaultValues
   \   000041   12....       LCALL     `??zclSampleSw_ResetAttributesToDefaultValues::?`; Banked call to: zclSampleSw_ResetAttributesToDefaultValues
    263            
    264            // Register the application's attribute list
    265            zcl_registerAttrList( SW1_ENDPOINT, zclSampleSw_NumAttributes, zclSampleSw_Attrs );
   \   000044                ; Setup parameters for call to function zcl_registerAttrList
   \   000044   7C..         MOV       R4,#zclSampleSw_Attrs & 0xff
   \   000046   7D..         MOV       R5,#(zclSampleSw_Attrs >> 8) & 0xff
   \   000048   90....       MOV       DPTR,#zclSampleSw_NumAttributes
   \   00004B   E4           CLR       A
   \   00004C   93           MOVC      A,@A+DPTR
   \   00004D   FA           MOV       R2,A
   \   00004E   7908         MOV       R1,#0x8
   \   000050   12....       LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
   \   000053   E9           MOV       A,R1
    266            
    267            // Register the Application to receive the unprocessed Foundation command/response messages
    268            zcl_registerForMsg( zclSampleSw_TaskID );
   \   000054                ; Setup parameters for call to function zcl_registerForMsg
   \   000054   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000057   E0           MOVX      A,@DPTR
   \   000058   F9           MOV       R1,A
   \   000059   12....       LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
   \   00005C   E9           MOV       A,R1
    269            
    270            // Register low voltage NV memory protection application callback
    271            RegisterVoltageWarningCB( zclSampleApp_BatteryWarningCB );
   \   00005D                ; Setup parameters for call to function RegisterVoltageWarningCB
   \   00005D   7A..         MOV       R2,#`??zclSampleApp_BatteryWarningCB::?relay` & 0xff
   \   00005F   7B..         MOV       R3,#(`??zclSampleApp_BatteryWarningCB::?relay` >> 8) & 0xff
   \   000061   12....       LCALL     `??RegisterVoltageWarningCB::?relay`; Banked call to: RegisterVoltageWarningCB
    272          
    273            // Register for all key events - This app will handle all key events
    274            RegisterForKeys( zclSampleSw_TaskID );
   \   000064                ; Setup parameters for call to function RegisterForKeys
   \   000064   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000067   E0           MOVX      A,@DPTR
   \   000068   F9           MOV       R1,A
   \   000069   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
   \   00006C   E9           MOV       A,R1
    275            
    276            bdb_RegisterCommissioningStatusCB( zclSampleSw_ProcessCommissioningStatus );
   \   00006D                ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
   \   00006D   7A..         MOV       R2,#`??zclSampleSw_ProcessCommissioningStatus::?rela` & 0xff
   \   00006F   7B..         MOV       R3,#(`??zclSampleSw_ProcessCommissioningStatus::?rela` >> 8) & 0xff
   \   000071   12....       LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
    277            
    278          #ifdef ZCL_DIAGNOSTIC
    279            // Register the application's callback function to read/write attribute data.
    280            // This is only required when the attribute data format is unknown to ZCL.
    281            zcl_registerReadWriteCB( SAMPLESW_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
    282          
    283            if ( zclDiagnostic_InitStats() == ZSuccess )
    284            {
    285              // Here the user could start the timer to save Diagnostics to NV
    286            }
    287          #endif
    288          
    289          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    290            // Register for callback events from the ZCL OTA
    291            zclOTA_Register(zclSampleSw_TaskID);
    292          #endif
    293          
    294            zdpExternalStateTaskID = zclSampleSw_TaskID;
   \   000074   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000077   E0           MOVX      A,@DPTR
   \   000078   F8           MOV       R0,A
   \   000079   7900         MOV       R1,#0x0
   \   00007B   90....       MOV       DPTR,#zdpExternalStateTaskID
   \   00007E   E8           MOV       A,R0
   \   00007F   F0           MOVX      @DPTR,A
   \   000080   A3           INC       DPTR
   \   000081   E9           MOV       A,R1
   \   000082   F0           MOVX      @DPTR,A
    295          
    296            bdb_StartCommissioning( BDB_COMMISSIONING_MODE_INITIATOR_TL );
   \   000083                ; Setup parameters for call to function bdb_StartCommissioning
   \   000083   7901         MOV       R1,#0x1
   \   000085   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    297            //touchLinkInitiator_ChannelChange( 11 );
    298            printf("init successful\r\n"); 
   \   000088                ; Setup parameters for call to function printf
   \   000088   7A..         MOV       R2,#`?<Constant "init successful\\r\\n">` & 0xff
   \   00008A   7B..         MOV       R3,#(`?<Constant "init successful\\r\\n">` >> 8) & 0xff
   \   00008C   12....       LCALL     `??printf::?relay`; Banked call to: printf
    299          }
   \   00008F   7F01         MOV       R7,#0x1
   \   000091   02....       LJMP      ?BANKED_LEAVE_XDATA
    300          
    301          /*********************************************************************
    302           * @fn          zclSample_event_loop
    303           *
    304           * @brief       Event Loop Processor for zclGeneral.
    305           *
    306           * @param       none
    307           *
    308           * @return      none
    309           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    310          uint16 zclSampleSw_event_loop( uint8 task_id, uint16 events )
   \                     zclSampleSw_event_loop:
    311          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    312            afIncomingMSGPacket_t *MSGpkt;
    313            (void)task_id;  // Intentionally unreferenced parameter
    314          
    315            //Send toggle every 500ms
    316            if( events & SAMPLESW_TOGGLE_TEST_EVT )
   \   00000B   EE           MOV       A,R6
   \   00000C   5400         ANL       A,#0x0
   \   00000E   F8           MOV       R0,A
   \   00000F   EF           MOV       A,R7
   \   000010   5410         ANL       A,#0x10
   \   000012   F9           MOV       R1,A
   \   000013   E8           MOV       A,R0
   \   000014   49           ORL       A,R1
   \   000015   607C         JZ        ??zclSampleSw_event_loop_0
    317            {
    318              osal_start_timerEx(zclSampleSw_TaskID,SAMPLESW_TOGGLE_TEST_EVT,500);
   \   000017                ; Setup parameters for call to function osal_start_timerEx
   \   000017   90....       MOV       DPTR,#__Constant_1f4
   \   00001A   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00001D   7A00         MOV       R2,#0x0
   \   00001F   7B10         MOV       R3,#0x10
   \   000021   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F9           MOV       R1,A
   \   000026   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000029   7404         MOV       A,#0x4
   \   00002B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002E   E9           MOV       A,R1
    319              zclGeneral_SendOnOff_CmdToggle( SW1_ENDPOINT, &zclSampleSw_DstAddr, FALSE, 0 );
   \   00002F                ; Setup parameters for call to function zcl_SendCommand
   \   00002F   E4           CLR       A
   \   000030   F5..         MOV       ?V4,A
   \   000032   F5..         MOV       ?V5,A
   \   000034   78..         MOV       R0,#?V4
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000039   E4           CLR       A
   \   00003A   F5..         MOV       ?V4,A
   \   00003C   F5..         MOV       ?V5,A
   \   00003E   78..         MOV       R0,#?V4
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000043   75..00       MOV       ?V3,#0x0
   \   000046   78..         MOV       R0,#?V3
   \   000048   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004B   E4           CLR       A
   \   00004C   F5..         MOV       ?V4,A
   \   00004E   F5..         MOV       ?V5,A
   \   000050   78..         MOV       R0,#?V4
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000055   75..00       MOV       ?V3,#0x0
   \   000058   78..         MOV       R0,#?V3
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005D   75..00       MOV       ?V3,#0x0
   \   000060   78..         MOV       R0,#?V3
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000065   75..01       MOV       ?V3,#0x1
   \   000068   78..         MOV       R0,#?V3
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006D   75..02       MOV       ?V3,#0x2
   \   000070   78..         MOV       R0,#?V3
   \   000072   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000075   7C06         MOV       R4,#0x6
   \   000077   7D00         MOV       R5,#0x0
   \   000079   7A..         MOV       R2,#zclSampleSw_DstAddr & 0xff
   \   00007B   7B..         MOV       R3,#(zclSampleSw_DstAddr >> 8) & 0xff
   \   00007D   7908         MOV       R1,#0x8
   \   00007F   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000082   740B         MOV       A,#0xb
   \   000084   12....       LCALL     ?DEALLOC_XSTACK8
   \   000087   E9           MOV       A,R1
    320              
    321              // return unprocessed events
    322              return (events ^ SAMPLESW_TOGGLE_TEST_EVT);
   \   000088   EE           MOV       A,R6
   \   000089   6400         XRL       A,#0x0
   \   00008B   FA           MOV       R2,A
   \   00008C   EF           MOV       A,R7
   \   00008D   6410         XRL       A,#0x10
   \   00008F   FB           MOV       R3,A
   \   000090   02....       LJMP      ??zclSampleSw_event_loop_1 & 0xFFFF
    323            }
    324            
    325          
    326            if ( events & SYS_EVENT_MSG )
   \                     ??zclSampleSw_event_loop_0:
   \   000093   EE           MOV       A,R6
   \   000094   5400         ANL       A,#0x0
   \   000096   F8           MOV       R0,A
   \   000097   EF           MOV       A,R7
   \   000098   5480         ANL       A,#0x80
   \   00009A   F9           MOV       R1,A
   \   00009B   E8           MOV       A,R0
   \   00009C   49           ORL       A,R1
   \   00009D   6062         JZ        ??zclSampleSw_event_loop_2
    327            {
    328              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleSw_TaskID )) )
   \                     ??zclSampleSw_event_loop_3:
   \   00009F                ; Setup parameters for call to function osal_msg_receive
   \   00009F   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   F9           MOV       R1,A
   \   0000A4   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   0000A7   8A..         MOV       ?V4,R2
   \   0000A9   8B..         MOV       ?V5,R3
   \   0000AB   85....       MOV       ?V0,?V4
   \   0000AE   85....       MOV       ?V1,?V5
   \   0000B1   E5..         MOV       A,?V0
   \   0000B3   45..         ORL       A,?V1
   \   0000B5   6040         JZ        ??zclSampleSw_event_loop_4
    329              {
    330                switch ( MSGpkt->hdr.event )
   \   0000B7   85..82       MOV       DPL,?V0
   \   0000BA   85..83       MOV       DPH,?V1
   \   0000BD   E0           MOVX      A,@DPTR
   \   0000BE   24CC         ADD       A,#-0x34
   \   0000C0   600A         JZ        ??zclSampleSw_event_loop_5
   \   0000C2   2474         ADD       A,#0x74
   \   0000C4   600F         JZ        ??zclSampleSw_event_loop_6
   \   0000C6   24EF         ADD       A,#-0x11
   \   0000C8   6023         JZ        ??zclSampleSw_event_loop_7
   \   0000CA   8021         SJMP      ??zclSampleSw_event_loop_7
    331                {
    332                  case ZCL_INCOMING_MSG:
    333                    // Incoming ZCL Foundation command/response messages
    334                    zclSampleSw_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
   \                     ??zclSampleSw_event_loop_5:
   \   0000CC                ; Setup parameters for call to function zclSampleSw_ProcessIncomingMsg
   \   0000CC   AA..         MOV       R2,?V0
   \   0000CE   AB..         MOV       R3,?V1
   \   0000D0   12....       LCALL     `??zclSampleSw_ProcessIncomingMsg::?relay`; Banked call to: zclSampleSw_ProcessIncomingMsg
    335                    break;
   \   0000D3   8018         SJMP      ??zclSampleSw_event_loop_7
    336          
    337                  case KEY_CHANGE:
    338                    zclSampleSw_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
   \                     ??zclSampleSw_event_loop_6:
   \   0000D5                ; Setup parameters for call to function zclSampleSw_HandleKeys
   \   0000D5   85..82       MOV       DPL,?V0
   \   0000D8   85..83       MOV       DPH,?V1
   \   0000DB   A3           INC       DPTR
   \   0000DC   A3           INC       DPTR
   \   0000DD   A3           INC       DPTR
   \   0000DE   E0           MOVX      A,@DPTR
   \   0000DF   FA           MOV       R2,A
   \   0000E0   85..82       MOV       DPL,?V0
   \   0000E3   85..83       MOV       DPH,?V1
   \   0000E6   A3           INC       DPTR
   \   0000E7   A3           INC       DPTR
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   F9           MOV       R1,A
   \   0000EA   12....       LCALL     `??zclSampleSw_HandleKeys::?relay`; Banked call to: zclSampleSw_HandleKeys
    339                    break;
    340          
    341                  case ZDO_STATE_CHANGE:
    342                    break;
    343          
    344          //        case UART0_MESSAGE_SW1_TOGGLE:
    345          //          Send_To_SW1();
    346          //          break;
    347          //
    348          //        case UART0_MESSAGE_SW2_TOGGLE:
    349          //          Send_To_SW2();
    350          //          break;
    351          
    352          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    353                  case ZCL_OTA_CALLBACK_IND:
    354                    zclSampleSw_ProcessOTAMsgs( (zclOTA_CallbackMsg_t*)MSGpkt  );
    355                    break;
    356          #endif
    357          
    358                  default:
    359                    break;
    360                }
    361          
    362                // Release the memory
    363                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??zclSampleSw_event_loop_7:
   \   0000ED                ; Setup parameters for call to function osal_msg_deallocate
   \   0000ED   AA..         MOV       R2,?V0
   \   0000EF   AB..         MOV       R3,?V1
   \   0000F1   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \   0000F4   E9           MOV       A,R1
   \   0000F5   80A8         SJMP      ??zclSampleSw_event_loop_3
    364              }
    365          
    366              // return unprocessed events
    367              return (events ^ SYS_EVENT_MSG);
   \                     ??zclSampleSw_event_loop_4:
   \   0000F7   EE           MOV       A,R6
   \   0000F8   6400         XRL       A,#0x0
   \   0000FA   FA           MOV       R2,A
   \   0000FB   EF           MOV       A,R7
   \   0000FC   6480         XRL       A,#0x80
   \   0000FE   FB           MOV       R3,A
   \   0000FF   8035         SJMP      ??zclSampleSw_event_loop_1
    368            }
    369          
    370          #if ZG_BUILD_ENDDEVICE_TYPE    
    371            if ( events & SAMPLEAPP_END_DEVICE_REJOIN_EVT )
   \                     ??zclSampleSw_event_loop_2:
   \   000101   EE           MOV       A,R6
   \   000102   A2E0         MOV       C,0xE0 /* A   */.0
   \   000104   500E         JNC       ??zclSampleSw_event_loop_8
    372            {
    373              bdb_ZedAttemptRecoverNwk();
   \   000106                ; Setup parameters for call to function bdb_ZedAttemptRecoverNwk
   \   000106   12....       LCALL     `??bdb_ZedAttemptRecoverNwk::?relay`; Banked call to: bdb_ZedAttemptRecoverNwk
   \   000109   E9           MOV       A,R1
    374              return ( events ^ SAMPLEAPP_END_DEVICE_REJOIN_EVT );
   \   00010A   EE           MOV       A,R6
   \   00010B   6401         XRL       A,#0x1
   \   00010D   FA           MOV       R2,A
   \   00010E   EF           MOV       A,R7
   \   00010F   6400         XRL       A,#0x0
   \   000111   FB           MOV       R3,A
   \   000112   8022         SJMP      ??zclSampleSw_event_loop_1
    375            }
    376          #endif
    377          
    378            if ( events & SAMPLEAPP_LCD_AUTO_UPDATE_EVT )
   \                     ??zclSampleSw_event_loop_8:
   \   000114   EE           MOV       A,R6
   \   000115   5410         ANL       A,#0x10
   \   000117   600A         JZ        ??zclSampleSw_event_loop_9
    379            {
    380              return ( events ^ SAMPLEAPP_LCD_AUTO_UPDATE_EVT );
   \   000119   EE           MOV       A,R6
   \   00011A   6410         XRL       A,#0x10
   \   00011C   FA           MOV       R2,A
   \   00011D   EF           MOV       A,R7
   \   00011E   6400         XRL       A,#0x0
   \   000120   FB           MOV       R3,A
   \   000121   8013         SJMP      ??zclSampleSw_event_loop_1
    381            }
    382          
    383            if ( events & SAMPLEAPP_KEY_AUTO_REPEAT_EVT )
   \                     ??zclSampleSw_event_loop_9:
   \   000123   EE           MOV       A,R6
   \   000124   5420         ANL       A,#0x20
   \   000126   600A         JZ        ??zclSampleSw_event_loop_10
    384            {
    385              return ( events ^ SAMPLEAPP_KEY_AUTO_REPEAT_EVT );
   \   000128   EE           MOV       A,R6
   \   000129   6420         XRL       A,#0x20
   \   00012B   FA           MOV       R2,A
   \   00012C   EF           MOV       A,R7
   \   00012D   6400         XRL       A,#0x0
   \   00012F   FB           MOV       R3,A
   \   000130   8004         SJMP      ??zclSampleSw_event_loop_1
    386            }
    387            // Discard unknown events
    388            return 0;
   \                     ??zclSampleSw_event_loop_10:
   \   000132   7A00         MOV       R2,#0x0
   \   000134   7B00         MOV       R3,#0x0
   \                     ??zclSampleSw_event_loop_1:
   \   000136   7F06         MOV       R7,#0x6
   \   000138   02....       LJMP      ?BANKED_LEAVE_XDATA
    389          }
    390          
    391          /*********************************************************************
    392           * @fn      zclSampleSw_HandleKeys
    393           *
    394           * @brief   Handles all key events for this device.
    395           *
    396           * @param   shift - true if in shift/alt.
    397           * @param   keys - bit field for key events. Valid entries:
    398           *                 HAL_KEY_SW_5
    399           *                 HAL_KEY_SW_4
    400           *                 HAL_KEY_SW_2
    401           *                 HAL_KEY_SW_1
    402           *bdbAttributes.bdbNodeIsOnANetwork
    403           * @return  none
    404           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    405          static void zclSampleSw_HandleKeys( byte shift, byte keys )
   \                     zclSampleSw_HandleKeys:
    406          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FF           MOV       R7,A
    407            if ( keys & HAL_KEY_SW_6 ) //key1
   \   000009   EF           MOV       A,R7
   \   00000A   A2E5         MOV       C,0xE0 /* A   */.5
   \   00000C   500C         JNC       ??zclSampleSw_HandleKeys_0
    408            {
    409              HalLedSet ( HAL_LED_2, HAL_LED_MODE_TOGGLE );
   \   00000E                ; Setup parameters for call to function HalLedSet
   \   00000E   7A08         MOV       R2,#0x8
   \   000010   7902         MOV       R1,#0x2
   \   000012   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000015   E9           MOV       A,R1
    410             // bdb_StartCommissioning( BDB_COMMISSIONING_MODE_NWK_FORMATION | BDB_COMMISSIONING_MODE_INITIATOR_TL );  //Coordiinator BDB_COMMISSIONING_TOUCHLINK
    411          //    bdb_StartCommissioning( BDB_COMMISSIONING_MODE_INITIATOR_TL );
    412              touchLinkInitiator_StartDevDisc();
   \   000016                ; Setup parameters for call to function touchLinkInitiator_StartDevDisc
   \   000016   12....       LCALL     `??touchLinkInitiator_StartDevDisc::?relay`; Banked call to: touchLinkInitiator_StartDevDisc
   \   000019   E9           MOV       A,R1
    413              
    414            }    
    415            if ( keys & HAL_KEY_SW_5 ) //key2
   \                     ??zclSampleSw_HandleKeys_0:
   \   00001A   EF           MOV       A,R7
   \   00001B   A2E2         MOV       C,0xE0 /* A   */.2
   \   00001D   500C         JNC       ??zclSampleSw_HandleKeys_1
    416            {
    417          //    Send_To_SW1();
    418              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );
   \   00001F                ; Setup parameters for call to function HalLedSet
   \   00001F   7A04         MOV       R2,#0x4
   \   000021   7904         MOV       R1,#0x4
   \   000023   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000026   E9           MOV       A,R1
    419              touchLinkInitiator_ResetToFNSelectedTarget();
   \   000027                ; Setup parameters for call to function touchLinkInitiator_ResetToFNSelectedTarget
   \   000027   12....       LCALL     `??touchLinkInitiator_ResetToFNSelectedTarget::?`; Banked call to: touchLinkInitiator_ResetToFNSelectedTarget
   \   00002A   E9           MOV       A,R1
    420          //    Send_To_SW2();
    421            }
    422          }
   \                     ??zclSampleSw_HandleKeys_1:
   \   00002B   7F01         MOV       R7,#0x1
   \   00002D   02....       LJMP      ?BANKED_LEAVE_XDATA
    423          
    424          
    425          /*********************************************************************
    426           * @fn      zclSampleSw_ProcessCommissioningStatus
    427           *
    428           * @brief   Callback in which the status of the commissioning process are reported
    429           *
    430           * @param   bdbCommissioningModeMsg - Context message of the status of a commissioning process
    431           *
    432           * @return  none
    433           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    434          static void zclSampleSw_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
   \                     zclSampleSw_ProcessCommissioningStatus:
    435          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    436            switch(bdbCommissioningModeMsg->bdbCommissioningMode)
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   6046         JZ        ??zclSampleSw_ProcessCommissioningStatus_0
   \   000011   14           DEC       A
   \   000012   6043         JZ        ??zclSampleSw_ProcessCommissioningStatus_0
   \   000014   14           DEC       A
   \   000015   6009         JZ        ??zclSampleSw_ProcessCommissioningStatus_1
   \   000017   14           DEC       A
   \   000018   603D         JZ        ??zclSampleSw_ProcessCommissioningStatus_0
   \   00001A   24FE         ADD       A,#-0x2
   \   00001C   6018         JZ        ??zclSampleSw_ProcessCommissioningStatus_2
   \   00001E   8037         SJMP      ??zclSampleSw_ProcessCommissioningStatus_0
    437            {
    438              case BDB_COMMISSIONING_FORMATION:
    439                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \                     ??zclSampleSw_ProcessCommissioningStatus_1:
   \   000020   8E82         MOV       DPL,R6
   \   000022   8F83         MOV       DPH,R7
   \   000024   E0           MOVX      A,@DPTR
   \   000025   7030         JNZ       ??zclSampleSw_ProcessCommissioningStatus_0
    440                {
    441                  //After formation, perform nwk steering again plus the remaining commissioning modes that has not been processed yet
    442                  //HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
    443                  bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
   \   000027                ; Setup parameters for call to function bdb_StartCommissioning
   \   000027   8E82         MOV       DPL,R6
   \   000029   8F83         MOV       DPH,R7
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   4402         ORL       A,#0x2
   \   000030   F9           MOV       R1,A
   \   000031   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    444                }
    445                else
    446                {
    447                  //Want to try other channels?
    448                  //try with bdb_setChannelAttribute
    449                }
    450              break;
   \   000034   8021         SJMP      ??zclSampleSw_ProcessCommissioningStatus_0
    451              case BDB_COMMISSIONING_NWK_STEERING:
    452                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    453                {
    454                  //YOUR JOB:
    455                  //We are on the nwk, what now?
    456                }
    457                else
    458                {
    459                  //See the possible errors for nwk steering procedure
    460                  //No suitable networks found
    461                  //Want to try other channels?
    462                  //try with bdb_setChannelAttribute
    463                }
    464              break;
    465              case BDB_COMMISSIONING_FINDING_BINDING:
    466                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    467                {
    468                  //YOUR JOB:
    469                }
    470                else
    471                {
    472                  //YOUR JOB:
    473                  //retry?, wait for user interaction?
    474                }
    475              break;
    476              case BDB_COMMISSIONING_INITIALIZATION:
    477                //Initialization notification can only be successful. Failure on initialization 
    478                //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
    479                
    480                //YOUR JOB:
    481                //We are on a network, what now?
    482                
    483              break;
    484          #if ZG_BUILD_ENDDEVICE_TYPE    
    485              case BDB_COMMISSIONING_PARENT_LOST:
    486                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
   \                     ??zclSampleSw_ProcessCommissioningStatus_2:
   \   000036   8E82         MOV       DPL,R6
   \   000038   8F83         MOV       DPH,R7
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   640D         XRL       A,#0xd
   \   00003D   6018         JZ        ??zclSampleSw_ProcessCommissioningStatus_0
    487                {
    488                  //We did recover from losing parent
    489                }
    490                else
    491                {
    492                  //Parent not found, attempt to rejoin again after a fixed delay
    493                  osal_start_timerEx(zclSampleSw_TaskID, SAMPLEAPP_END_DEVICE_REJOIN_EVT, SAMPLEAPP_END_DEVICE_REJOIN_DELAY);
   \   00003F                ; Setup parameters for call to function osal_start_timerEx
   \   00003F   90....       MOV       DPTR,#__Constant_2710
   \   000042   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000045   7A01         MOV       R2,#0x1
   \   000047   7B00         MOV       R3,#0x0
   \   000049   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   F9           MOV       R1,A
   \   00004E   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000051   7404         MOV       A,#0x4
   \   000053   12....       LCALL     ?DEALLOC_XSTACK8
   \   000056   E9           MOV       A,R1
    494                }
    495              break;
    496          #endif 
    497            }
    498            
    499          }
   \                     ??zclSampleSw_ProcessCommissioningStatus_0:
   \   000057   7F01         MOV       R7,#0x1
   \   000059   02....       LJMP      ?BANKED_LEAVE_XDATA
    500          
    501          /*********************************************************************
    502           * @fn      zclSampleSw_BasicResetCB
    503           *
    504           * @brief   Callback from the ZCL General Cluster Library
    505           *          to set all the Basic Cluster attributes to  default values.
    506           *
    507           * @param   none
    508           *
    509           * @return  none
    510           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    511          static void zclSampleSw_BasicResetCB( void )
   \                     zclSampleSw_BasicResetCB:
    512          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    513            zclSampleSw_ResetAttributesToDefaultValues();
   \   000004                ; Setup parameters for call to function zclSampleSw_ResetAttributesToDefaultValues
   \   000004   12....       LCALL     `??zclSampleSw_ResetAttributesToDefaultValues::?`; Banked call to: zclSampleSw_ResetAttributesToDefaultValues
    514          }
   \   000007   D083         POP       DPH
   \   000009   D082         POP       DPL
   \   00000B   02....       LJMP      ?BRET
    515          
    516          /*********************************************************************
    517           * @fn      zclSampleApp_BatteryWarningCB
    518           *
    519           * @brief   Called to handle battery-low situation.
    520           *
    521           * @param   voltLevel - level of severity
    522           *
    523           * @return  none
    524           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    525          void zclSampleApp_BatteryWarningCB( uint8 voltLevel )
   \                     zclSampleApp_BatteryWarningCB:
    526          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    527            if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
   \   000000   7401         MOV       A,#0x1
   \   000002   69           XRL       A,R1
    528            {
    529              // Send warning message to the gateway and blink LED
    530            }
    531            else if ( voltLevel == VOLT_LEVEL_BAD )
    532            {
    533              // Shut down the system
    534            }
    535          }
   \   000003   02....       LJMP      ?BRET
    536          
    537          /******************************************************************************
    538           *
    539           *  Functions for processing ZCL Foundation incoming Command/Response messages
    540           *
    541           *****************************************************************************/
    542          
    543          /*********************************************************************
    544           * @fn      zclSampleSw_ProcessIncomingMsg
    545           *
    546           * @brief   Process ZCL Foundation incoming message
    547           *
    548           * @param   pInMsg - pointer to the received message
    549           *
    550           * @return  none
    551           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    552          static void zclSampleSw_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSw_ProcessIncomingMsg:
    553          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    554            switch ( pInMsg->zclHdr.commandID )
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   14           DEC       A
   \   000016   601A         JZ        ??zclSampleSw_ProcessIncomingMsg_0
   \   000018   24FD         ADD       A,#-0x3
   \   00001A   6020         JZ        ??zclSampleSw_ProcessIncomingMsg_1
   \   00001C   24F9         ADD       A,#-0x7
   \   00001E   6026         JZ        ??zclSampleSw_ProcessIncomingMsg_2
   \   000020   24FE         ADD       A,#-0x2
   \   000022   6040         JZ        ??zclSampleSw_ProcessIncomingMsg_3
   \   000024   24FB         ADD       A,#-0x5
   \   000026   6028         JZ        ??zclSampleSw_ProcessIncomingMsg_4
   \   000028   24FE         ADD       A,#-0x2
   \   00002A   602E         JZ        ??zclSampleSw_ProcessIncomingMsg_5
   \   00002C   24FE         ADD       A,#-0x2
   \   00002E   603E         JZ        ??zclSampleSw_ProcessIncomingMsg_6
   \   000030   8044         SJMP      ??zclSampleSw_ProcessIncomingMsg_7
    555            {
    556          #ifdef ZCL_READ
    557              case ZCL_CMD_READ_RSP:
    558                zclSampleSw_ProcessInReadRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_0:
   \   000032                ; Setup parameters for call to function zclSampleSw_ProcessInReadRspCmd
   \   000032   EE           MOV       A,R6
   \   000033   FA           MOV       R2,A
   \   000034   EF           MOV       A,R7
   \   000035   FB           MOV       R3,A
   \   000036   12....       LCALL     `??zclSampleSw_ProcessInReadRspCmd::?relay`; Banked call to: zclSampleSw_ProcessInReadRspCmd
   \   000039   E9           MOV       A,R1
    559                break;
   \   00003A   803A         SJMP      ??zclSampleSw_ProcessIncomingMsg_7
    560          #endif
    561          #ifdef ZCL_WRITE
    562              case ZCL_CMD_WRITE_RSP:
    563                zclSampleSw_ProcessInWriteRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_1:
   \   00003C                ; Setup parameters for call to function zclSampleSw_ProcessInWriteRspCmd
   \   00003C   EE           MOV       A,R6
   \   00003D   FA           MOV       R2,A
   \   00003E   EF           MOV       A,R7
   \   00003F   FB           MOV       R3,A
   \   000040   12....       LCALL     `??zclSampleSw_ProcessInWriteRspCmd::?relay`; Banked call to: zclSampleSw_ProcessInWriteRspCmd
   \   000043   E9           MOV       A,R1
    564                break;
   \   000044   8030         SJMP      ??zclSampleSw_ProcessIncomingMsg_7
    565          #endif
    566          #ifdef ZCL_REPORT
    567              // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
    568              case ZCL_CMD_CONFIG_REPORT:
    569                //zclSampleSw_ProcessInConfigReportCmd( pInMsg );
    570                break;
    571          
    572              case ZCL_CMD_CONFIG_REPORT_RSP:
    573                //zclSampleSw_ProcessInConfigReportRspCmd( pInMsg );
    574                break;
    575          
    576              case ZCL_CMD_READ_REPORT_CFG:
    577                //zclSampleSw_ProcessInReadReportCfgCmd( pInMsg );
    578                break;
    579          
    580              case ZCL_CMD_READ_REPORT_CFG_RSP:
    581                //zclSampleSw_ProcessInReadReportCfgRspCmd( pInMsg );
    582                break;
    583          
    584              case ZCL_CMD_REPORT:
    585                zclSampleSw_ProcessInReportCmd( pInMsg );
    586                break;
    587          #endif
    588              case ZCL_CMD_DEFAULT_RSP:
    589                zclSampleSw_ProcessInDefaultRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_2:
   \   000046                ; Setup parameters for call to function zclSampleSw_ProcessInDefaultRspCmd
   \   000046   EE           MOV       A,R6
   \   000047   FA           MOV       R2,A
   \   000048   EF           MOV       A,R7
   \   000049   FB           MOV       R3,A
   \   00004A   12....       LCALL     `??zclSampleSw_ProcessInDefaultRspCmd::?relay`; Banked call to: zclSampleSw_ProcessInDefaultRspCmd
   \   00004D   E9           MOV       A,R1
    590                break;
   \   00004E   8026         SJMP      ??zclSampleSw_ProcessIncomingMsg_7
    591          #ifdef ZCL_DISCOVER
    592              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
    593                zclSampleSw_ProcessInDiscCmdsRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_4:
   \   000050                ; Setup parameters for call to function zclSampleSw_ProcessInDiscCmdsRspCmd
   \   000050   EE           MOV       A,R6
   \   000051   FA           MOV       R2,A
   \   000052   EF           MOV       A,R7
   \   000053   FB           MOV       R3,A
   \   000054   12....       LCALL     `??zclSampleSw_ProcessInDiscCmdsRspCmd::?relay`; Banked call to: zclSampleSw_ProcessInDiscCmdsRspCmd
   \   000057   E9           MOV       A,R1
    594                break;
   \   000058   801C         SJMP      ??zclSampleSw_ProcessIncomingMsg_7
    595          
    596              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
    597                zclSampleSw_ProcessInDiscCmdsRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_5:
   \   00005A                ; Setup parameters for call to function zclSampleSw_ProcessInDiscCmdsRspCmd
   \   00005A   EE           MOV       A,R6
   \   00005B   FA           MOV       R2,A
   \   00005C   EF           MOV       A,R7
   \   00005D   FB           MOV       R3,A
   \   00005E   12....       LCALL     `??zclSampleSw_ProcessInDiscCmdsRspCmd::?relay`; Banked call to: zclSampleSw_ProcessInDiscCmdsRspCmd
   \   000061   E9           MOV       A,R1
    598                break;
   \   000062   8012         SJMP      ??zclSampleSw_ProcessIncomingMsg_7
    599          
    600              case ZCL_CMD_DISCOVER_ATTRS_RSP:
    601                zclSampleSw_ProcessInDiscAttrsRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_3:
   \   000064                ; Setup parameters for call to function zclSampleSw_ProcessInDiscAttrsRspCmd
   \   000064   EE           MOV       A,R6
   \   000065   FA           MOV       R2,A
   \   000066   EF           MOV       A,R7
   \   000067   FB           MOV       R3,A
   \   000068   12....       LCALL     `??zclSampleSw_ProcessInDiscAttrsRspCmd::?relay`; Banked call to: zclSampleSw_ProcessInDiscAttrsRspCmd
   \   00006B   E9           MOV       A,R1
    602                break;
   \   00006C   8008         SJMP      ??zclSampleSw_ProcessIncomingMsg_7
    603          
    604              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
    605                zclSampleSw_ProcessInDiscAttrsExtRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_6:
   \   00006E                ; Setup parameters for call to function zclSampleSw_ProcessInDiscAttrsExtRspCmd
   \   00006E   EE           MOV       A,R6
   \   00006F   FA           MOV       R2,A
   \   000070   EF           MOV       A,R7
   \   000071   FB           MOV       R3,A
   \   000072   12....       LCALL     `??zclSampleSw_ProcessInDiscAttrsExtRspCmd::?rel`; Banked call to: zclSampleSw_ProcessInDiscAttrsExtRspCmd
   \   000075   E9           MOV       A,R1
    606                break;
    607          #endif
    608              default:
    609                break;
    610            }
    611          
    612            if ( pInMsg->attrCmd )
   \                     ??zclSampleSw_ProcessIncomingMsg_7:
   \   000076   EE           MOV       A,R6
   \   000077   2417         ADD       A,#0x17
   \   000079   F582         MOV       DPL,A
   \   00007B   E4           CLR       A
   \   00007C   3F           ADDC      A,R7
   \   00007D   F583         MOV       DPH,A
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   F8           MOV       R0,A
   \   000081   A3           INC       DPTR
   \   000082   E0           MOVX      A,@DPTR
   \   000083   F9           MOV       R1,A
   \   000084   E8           MOV       A,R0
   \   000085   49           ORL       A,R1
   \   000086   6011         JZ        ??zclSampleSw_ProcessIncomingMsg_8
    613              osal_mem_free( pInMsg->attrCmd );
   \   000088                ; Setup parameters for call to function osal_mem_free
   \   000088   EE           MOV       A,R6
   \   000089   2417         ADD       A,#0x17
   \   00008B   F582         MOV       DPL,A
   \   00008D   E4           CLR       A
   \   00008E   3F           ADDC      A,R7
   \   00008F   F583         MOV       DPH,A
   \   000091   E0           MOVX      A,@DPTR
   \   000092   FA           MOV       R2,A
   \   000093   A3           INC       DPTR
   \   000094   E0           MOVX      A,@DPTR
   \   000095   FB           MOV       R3,A
   \   000096   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    614          }
   \                     ??zclSampleSw_ProcessIncomingMsg_8:
   \   000099   7F01         MOV       R7,#0x1
   \   00009B   02....       LJMP      ?BANKED_LEAVE_XDATA
    615          
    616          #ifdef ZCL_READ
    617          /*********************************************************************
    618           * @fn      zclSampleSw_ProcessInReadRspCmd
    619           *
    620           * @brief   Process the "Profile" Read Response Command
    621           *
    622           * @param   pInMsg - incoming message to process
    623           *
    624           * @return  none
    625           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    626          static uint8 zclSampleSw_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSw_ProcessInReadRspCmd:
    627          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    628            zclReadRspCmd_t *readRspCmd;
    629            uint8 i;
    630          
    631            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
   \   000005   EA           MOV       A,R2
   \   000006   2417         ADD       A,#0x17
   \   000008   F582         MOV       DPL,A
   \   00000A   E4           CLR       A
   \   00000B   3B           ADDC      A,R3
   \   00000C   F583         MOV       DPH,A
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F8           MOV       R0,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F9           MOV       R1,A
   \   000013   E8           MOV       A,R0
   \   000014   FE           MOV       R6,A
   \   000015   E9           MOV       A,R1
   \   000016   FF           MOV       R7,A
    632            for (i = 0; i < readRspCmd->numAttr; i++)
   \   000017   7C00         MOV       R4,#0x0
   \                     ??zclSampleSw_ProcessInReadRspCmd_0:
   \   000019   8E82         MOV       DPL,R6
   \   00001B   8F83         MOV       DPH,R7
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F8           MOV       R0,A
   \   00001F   EC           MOV       A,R4
   \   000020   C3           CLR       C
   \   000021   98           SUBB      A,R0
   \   000022   5003         JNC       ??zclSampleSw_ProcessInReadRspCmd_1
   \   000024   0C           INC       R4
   \   000025   80F2         SJMP      ??zclSampleSw_ProcessInReadRspCmd_0
    633            {
    634              // Notify the originator of the results of the original read attributes
    635              // attempt and, for each successfull request, the value of the requested
    636              // attribute
    637            }
    638          
    639            return TRUE;
   \                     ??zclSampleSw_ProcessInReadRspCmd_1:
   \   000027   7901         MOV       R1,#0x1
   \   000029   7F01         MOV       R7,#0x1
   \   00002B   02....       LJMP      ?BANKED_LEAVE_XDATA
    640          }
    641          #endif // ZCL_READ
    642          
    643          #ifdef ZCL_WRITE
    644          /*********************************************************************
    645           * @fn      zclSampleSw_ProcessInWriteRspCmd
    646           *
    647           * @brief   Process the "Profile" Write Response Command
    648           *
    649           * @param   pInMsg - incoming message to process
    650           *
    651           * @return  none
    652           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    653          static uint8 zclSampleSw_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSw_ProcessInWriteRspCmd:
    654          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    655            zclWriteRspCmd_t *writeRspCmd;
    656            uint8 i;
    657          
    658            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
   \   000005   EA           MOV       A,R2
   \   000006   2417         ADD       A,#0x17
   \   000008   F582         MOV       DPL,A
   \   00000A   E4           CLR       A
   \   00000B   3B           ADDC      A,R3
   \   00000C   F583         MOV       DPH,A
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F8           MOV       R0,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F9           MOV       R1,A
   \   000013   E8           MOV       A,R0
   \   000014   FE           MOV       R6,A
   \   000015   E9           MOV       A,R1
   \   000016   FF           MOV       R7,A
    659            for (i = 0; i < writeRspCmd->numAttr; i++)
   \   000017   7C00         MOV       R4,#0x0
   \                     ??zclSampleSw_ProcessInWriteRspCmd_0:
   \   000019   8E82         MOV       DPL,R6
   \   00001B   8F83         MOV       DPH,R7
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F8           MOV       R0,A
   \   00001F   EC           MOV       A,R4
   \   000020   C3           CLR       C
   \   000021   98           SUBB      A,R0
   \   000022   5003         JNC       ??zclSampleSw_ProcessInWriteRspCmd_1
   \   000024   0C           INC       R4
   \   000025   80F2         SJMP      ??zclSampleSw_ProcessInWriteRspCmd_0
    660            {
    661              // Notify the device of the results of the its original write attributes
    662              // command.
    663            }
    664          
    665            return TRUE;
   \                     ??zclSampleSw_ProcessInWriteRspCmd_1:
   \   000027   7901         MOV       R1,#0x1
   \   000029   7F01         MOV       R7,#0x1
   \   00002B   02....       LJMP      ?BANKED_LEAVE_XDATA
    666          }
    667          #endif // ZCL_WRITE
    668          
    669          /*********************************************************************
    670           * @fn      zclSampleSw_ProcessInDefaultRspCmd
    671           *
    672           * @brief   Process the "Profile" Default Response Command
    673           *
    674           * @param   pInMsg - incoming message to process
    675           *
    676           * @return  none
    677           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    678          static uint8 zclSampleSw_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSw_ProcessInDefaultRspCmd:
    679          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    680            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
    681            // Device is notified of the Default Response command.
    682            (void)pInMsg;
    683            return TRUE;
   \   000000   7901         MOV       R1,#0x1
   \   000002   02....       LJMP      ?BRET
    684          }
    685          
    686          #ifdef ZCL_DISCOVER
    687          /*********************************************************************
    688           * @fn      zclSampleSw_ProcessInDiscCmdsRspCmd
    689           *
    690           * @brief   Process the Discover Commands Response Command
    691           *
    692           * @param   pInMsg - incoming message to process
    693           *
    694           * @return  none
    695           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    696          static uint8 zclSampleSw_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSw_ProcessInDiscCmdsRspCmd:
    697          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    698            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
    699            uint8 i;
    700          
    701            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
   \   000005   EA           MOV       A,R2
   \   000006   2417         ADD       A,#0x17
   \   000008   F582         MOV       DPL,A
   \   00000A   E4           CLR       A
   \   00000B   3B           ADDC      A,R3
   \   00000C   F583         MOV       DPH,A
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F8           MOV       R0,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F9           MOV       R1,A
   \   000013   E8           MOV       A,R0
   \   000014   FE           MOV       R6,A
   \   000015   E9           MOV       A,R1
   \   000016   FF           MOV       R7,A
    702            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
   \   000017   7C00         MOV       R4,#0x0
   \                     ??zclSampleSw_ProcessInDiscCmdsRspCmd_0:
   \   000019   8E82         MOV       DPL,R6
   \   00001B   8F83         MOV       DPH,R7
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F8           MOV       R0,A
   \   000021   EC           MOV       A,R4
   \   000022   C3           CLR       C
   \   000023   98           SUBB      A,R0
   \   000024   5003         JNC       ??zclSampleSw_ProcessInDiscCmdsRspCmd_1
   \   000026   0C           INC       R4
   \   000027   80F0         SJMP      ??zclSampleSw_ProcessInDiscCmdsRspCmd_0
    703            {
    704              // Device is notified of the result of its attribute discovery command.
    705            }
    706          
    707            return TRUE;
   \                     ??zclSampleSw_ProcessInDiscCmdsRspCmd_1:
   \   000029   7901         MOV       R1,#0x1
   \   00002B   7F01         MOV       R7,#0x1
   \   00002D   02....       LJMP      ?BANKED_LEAVE_XDATA
    708          }
    709          
    710          /*********************************************************************
    711           * @fn      zclSampleSw_ProcessInDiscAttrsRspCmd
    712           *
    713           * @brief   Process the "Profile" Discover Attributes Response Command
    714           *
    715           * @param   pInMsg - incoming message to process
    716           *
    717           * @return  none
    718           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    719          static uint8 zclSampleSw_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSw_ProcessInDiscAttrsRspCmd:
    720          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    721            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
    722            uint8 i;
    723          
    724            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
   \   000005   EA           MOV       A,R2
   \   000006   2417         ADD       A,#0x17
   \   000008   F582         MOV       DPL,A
   \   00000A   E4           CLR       A
   \   00000B   3B           ADDC      A,R3
   \   00000C   F583         MOV       DPH,A
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F8           MOV       R0,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F9           MOV       R1,A
   \   000013   E8           MOV       A,R0
   \   000014   FE           MOV       R6,A
   \   000015   E9           MOV       A,R1
   \   000016   FF           MOV       R7,A
    725            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   \   000017   7C00         MOV       R4,#0x0
   \                     ??zclSampleSw_ProcessInDiscAttrsRspCmd_0:
   \   000019   8E82         MOV       DPL,R6
   \   00001B   8F83         MOV       DPH,R7
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F8           MOV       R0,A
   \   000020   EC           MOV       A,R4
   \   000021   C3           CLR       C
   \   000022   98           SUBB      A,R0
   \   000023   5003         JNC       ??zclSampleSw_ProcessInDiscAttrsRspCmd_1
   \   000025   0C           INC       R4
   \   000026   80F1         SJMP      ??zclSampleSw_ProcessInDiscAttrsRspCmd_0
    726            {
    727              // Device is notified of the result of its attribute discovery command.
    728            }
    729          
    730            return TRUE;
   \                     ??zclSampleSw_ProcessInDiscAttrsRspCmd_1:
   \   000028   7901         MOV       R1,#0x1
   \   00002A   7F01         MOV       R7,#0x1
   \   00002C   02....       LJMP      ?BANKED_LEAVE_XDATA
    731          }
    732          
    733          /*********************************************************************
    734           * @fn      zclSampleSw_ProcessInDiscAttrsExtRspCmd
    735           *
    736           * @brief   Process the "Profile" Discover Attributes Extended Response Command
    737           *
    738           * @param   pInMsg - incoming message to process
    739           *
    740           * @return  none
    741           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    742          static uint8 zclSampleSw_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSw_ProcessInDiscAttrsExtRspCmd:
    743          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    744            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
    745            uint8 i;
    746          
    747            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
   \   000005   EA           MOV       A,R2
   \   000006   2417         ADD       A,#0x17
   \   000008   F582         MOV       DPL,A
   \   00000A   E4           CLR       A
   \   00000B   3B           ADDC      A,R3
   \   00000C   F583         MOV       DPH,A
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F8           MOV       R0,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F9           MOV       R1,A
   \   000013   E8           MOV       A,R0
   \   000014   FE           MOV       R6,A
   \   000015   E9           MOV       A,R1
   \   000016   FF           MOV       R7,A
    748            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   \   000017   7C00         MOV       R4,#0x0
   \                     ??zclSampleSw_ProcessInDiscAttrsExtRspCmd_0:
   \   000019   8E82         MOV       DPL,R6
   \   00001B   8F83         MOV       DPH,R7
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F8           MOV       R0,A
   \   000020   EC           MOV       A,R4
   \   000021   C3           CLR       C
   \   000022   98           SUBB      A,R0
   \   000023   5003         JNC       ??zclSampleSw_ProcessInDiscAttrsExtRspCmd_1
   \   000025   0C           INC       R4
   \   000026   80F1         SJMP      ??zclSampleSw_ProcessInDiscAttrsExtRspCmd_0
    749            {
    750              // Device is notified of the result of its attribute discovery command.
    751            }
    752          
    753            return TRUE;
   \                     ??zclSampleSw_ProcessInDiscAttrsExtRspCmd_1:
   \   000028   7901         MOV       R1,#0x1
   \   00002A   7F01         MOV       R7,#0x1
   \   00002C   02....       LJMP      ?BANKED_LEAVE_XDATA
    754          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleSw_OnOffSwitchType>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleSw_NwkState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleSw_CmdCallbacks>`:
   \   000000   ....         DW `??zclSampleSw_BasicResetCB::?relay`
   \   000002   0000         DW 0H
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   0000         DW 0H
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "init successful\\r\\n">`:
   \   000000   696E6974     DB "init successful\015\012"
   \            20737563
   \            63657373
   \            66756C0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1f4:
   \   000000   F4010000     DD 500

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2710:
   \   000000   10270000     DD 10000
    755          #endif // ZCL_DISCOVER
    756          
    757          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    758          /*********************************************************************
    759           * @fn      zclSampleSw_ProcessOTAMsgs
    760           *
    761           * @brief   Called to process callbacks from the ZCL OTA.
    762           *
    763           * @param   none
    764           *
    765           * @return  none
    766           */
    767          static void zclSampleSw_ProcessOTAMsgs( zclOTA_CallbackMsg_t* pMsg )
    768          {
    769            uint8 RxOnIdle;
    770          
    771            switch(pMsg->ota_event)
    772            {
    773            case ZCL_OTA_START_CALLBACK:
    774              if (pMsg->hdr.status == ZSuccess)
    775              {
    776                // Speed up the poll rate
    777                RxOnIdle = TRUE;
    778                ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    779                NLME_SetPollRate( 2000 );
    780              }
    781              break;
    782          
    783            case ZCL_OTA_DL_COMPLETE_CALLBACK:
    784              if (pMsg->hdr.status == ZSuccess)
    785              {
    786                // Reset the CRC Shadow and reboot.  The bootloader will see the
    787                // CRC shadow has been cleared and switch to the new image
    788                HalOTAInvRC();
    789                SystemReset();
    790              }
    791              else
    792              {
    793          #if (ZG_BUILD_ENDDEVICE_TYPE)    
    794                // slow the poll rate back down.
    795                RxOnIdle = FALSE;
    796                ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    797                NLME_SetPollRate(DEVICE_POLL_RATE);
    798          #endif
    799              }
    800              break;
    801          
    802            default:
    803              break;
    804            }
    805          }
    806          #endif // defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    807          
    808          /****************************************************************************
    809          ****************************************************************************/
    810          //static void zclSampleSw_ProcessInReportCmd( zclIncomingMsg_t *pInMsg )
    811          //{
    812          ////  HalLedSet ( HAL_LED_3, HAL_LED_MODE_TOGGLE );
    813          //  
    814          //  zclReportCmd_t *pInTempSensorReport;
    815          //
    816          //  uint8 On_Off_State;
    817          //  uint16 Dev_Nwk_ID;
    818          //  uint8 End_Point;
    819          //  
    820          //  Dev_Nwk_ID = pInMsg->srcAddr.addr.shortAddr;
    821          //  End_Point = pInMsg->srcAddr.endPoint;
    822          //  SourceAddr = Dev_Nwk_ID;
    823          //    
    824          //  pInTempSensorReport = (zclReportCmd_t *)pInMsg->attrCmd;
    825          //  
    826          //  On_Off_State = pInTempSensorReport->attrList[0].attrData[0];
    827          ////  zclSampleThermostat_LocalTemperature2 = BUILD_UINT16(pInTempSensorReport->attrList[0].attrData[1], pInTempSensorReport->attrList[0].attrData[2]);
    828          //
    829          //  printf( "0x%04X", Dev_Nwk_ID );
    830          //  printf( " %d", End_Point);
    831          //  printf( " %d\n", On_Off_State );
    832          //}
    833          
    834          //static void Send_To_SW1( void )
    835          //{
    836          //  SW_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    837          //  SW_DstAddr.endPoint = SW1_ENDPOINT;
    838          //  SW_DstAddr.addr.shortAddr = SourceAddr; 
    839          //  zclGeneral_SendOnOff_CmdToggle( SW1_ENDPOINT, &SW_DstAddr, FALSE, 0 );
    840          //}
    841          //
    842          //static void Send_To_SW2( void )
    843          //{
    844          //  SW_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    845          //  SW_DstAddr.endPoint = SW2_ENDPOINT;
    846          //  SW_DstAddr.addr.shortAddr = SourceAddr; 
    847          //  zclGeneral_SendOnOff_CmdToggle( SW1_ENDPOINT, &SW_DstAddr, FALSE, 0 );
    848          //}
    849          
    850          //static void Send_To_SW3( void )
    851          //{
    852          //  SW_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    853          //  SW_DstAddr.endPoint = SW3_ENDPOINT;
    854          //  SW_DstAddr.addr.shortAddr = SourceAddr; 
    855          //  zclGeneral_SendOnOff_CmdToggle( SW1_ENDPOINT, &SW_DstAddr, FALSE, 0 );
    856          //}

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   zclSampleApp_BatteryWarningCB
      2      0   zclSampleSw_BasicResetCB
        2      0   -> zclSampleSw_ResetAttributesToDefaultValues
      0     23   zclSampleSw_HandleKeys
        0      9   -> HalLedSet
        0      9   -> touchLinkInitiator_ResetToFNSelectedTarget
        0      9   -> touchLinkInitiator_StartDevDisc
      0      9   zclSampleSw_Init
        0      9   -> RegisterForKeys
        0      9   -> RegisterForUart0
        0      9   -> RegisterVoltageWarningCB
        0      9   -> Uart0_Init
        0      9   -> bdb_RegisterCommissioningStatusCB
        0      9   -> bdb_RegisterSimpleDescriptor
        0      9   -> bdb_StartCommissioning
        0      9   -> printf
        0      9   -> zclGeneral_RegisterCmdCallbacks
        0      9   -> zclSampleSw_ResetAttributesToDefaultValues
        0      9   -> zcl_registerAttrList
        0      9   -> zcl_registerForMsg
      0     13   zclSampleSw_ProcessCommissioningStatus
        0      9   -> bdb_StartCommissioning
        0     13   -> osal_start_timerEx
      0      9   zclSampleSw_ProcessInDefaultRspCmd
      0     18   zclSampleSw_ProcessInDiscAttrsExtRspCmd
      0     18   zclSampleSw_ProcessInDiscAttrsRspCmd
      0     18   zclSampleSw_ProcessInDiscCmdsRspCmd
      0     18   zclSampleSw_ProcessInReadRspCmd
      0     18   zclSampleSw_ProcessInWriteRspCmd
      0     23   zclSampleSw_ProcessIncomingMsg
        0      9   -> osal_mem_free
        0      9   -> zclSampleSw_ProcessInDefaultRspCmd
        0      9   -> zclSampleSw_ProcessInDiscAttrsExtRspCmd
        0      9   -> zclSampleSw_ProcessInDiscAttrsRspCmd
        0      9   -> zclSampleSw_ProcessInDiscCmdsRspCmd
        0      9   -> zclSampleSw_ProcessInReadRspCmd
        0      9   -> zclSampleSw_ProcessInWriteRspCmd
      0     25   zclSampleSw_event_loop
        0     14   -> bdb_ZedAttemptRecoverNwk
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
        0     18   -> osal_start_timerEx
        0     14   -> zclSampleSw_HandleKeys
        0     14   -> zclSampleSw_ProcessIncomingMsg
        0     25   -> zcl_SendCommand


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      18  ?<Constant "init successful\r\n">
      18  ?<Initializer for zclSampleSw_CmdCallbacks>
       1  ?<Initializer for zclSampleSw_NwkState>
       1  ?<Initializer for zclSampleSw_OnOffSwitchType>
      12  SW_DstAddr
       2  SourceAddr
       4  __Constant_1f4
       4  __Constant_2710
       6  zclSampleApp_BatteryWarningCB
       1  zclSampleSwSeqNum
      14  zclSampleSw_BasicResetCB
      18  zclSampleSw_CmdCallbacks
      12  zclSampleSw_DstAddr
      48  zclSampleSw_HandleKeys
     148  zclSampleSw_Init
       1  zclSampleSw_NwkState
       1  zclSampleSw_OnOffSwitchActions
       1  zclSampleSw_OnOffSwitchType
      92  zclSampleSw_ProcessCommissioningStatus
       5  zclSampleSw_ProcessInDefaultRspCmd
      47  zclSampleSw_ProcessInDiscAttrsExtRspCmd
      47  zclSampleSw_ProcessInDiscAttrsRspCmd
      48  zclSampleSw_ProcessInDiscCmdsRspCmd
      46  zclSampleSw_ProcessInReadRspCmd
      46  zclSampleSw_ProcessInWriteRspCmd
     158  zclSampleSw_ProcessIncomingMsg
       1  zclSampleSw_TaskID
     315  zclSampleSw_event_loop
      78  -- Other

 
 1 020 bytes in segment BANKED_CODE
    78 bytes in segment BANK_RELAYS
    20 bytes in segment XDATA_I
    20 bytes in segment XDATA_ID
    26 bytes in segment XDATA_ROM_C
    29 bytes in segment XDATA_Z
 
    98 bytes of CODE     memory
    18 bytes of CONST    memory (+ 8 bytes shared)
 1 020 bytes of HUGECODE memory
    49 bytes of XDATA    memory

Errors: none
Warnings: none
