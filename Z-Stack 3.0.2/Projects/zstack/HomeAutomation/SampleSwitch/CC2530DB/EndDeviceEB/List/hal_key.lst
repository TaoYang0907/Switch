###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               31/Jul/2020  16:01:57
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack 3.0.2\Components\hal\target\CC2530EB\hal_key.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EWD69C.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\hal\target\CC2530EB\hal_key.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D POWER_SAVING -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_GROUPS -D BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=0
#        -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0 -DREJOIN_POLL_RATE=0
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\hal_key.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\hal_key.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\hal\target\CC2530EB\hal_key.c
      1          /**************************************************************************************************
      2            Filename:       hal_key.c
      3            Revised:        $Date: 2010-09-15 19:02:45 -0700 (Wed, 15 Sep 2010) $
      4            Revision:       $Revision: 23815 $
      5          
      6            Description:    This file contains the interface to the HAL KEY Service.
      7          
      8          
      9            Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          /*********************************************************************
     40           NOTE: If polling is used, the hal_driver task schedules the KeyRead()
     41                 to occur every 100ms.  This should be long enough to naturally
     42                 debounce the keys.  The KeyRead() function remembers the key
     43                 state of the previous poll and will only return a non-zero
     44                 value if the key state changes.
     45          
     46           NOTE: If interrupts are used, the KeyRead() function is scheduled
     47                 25ms after the interrupt occurs by the ISR.  This delay is used
     48                 for key debouncing.  The ISR disables any further Key interrupt
     49                 until KeyRead() is executed.  KeyRead() will re-enable Key
     50                 interrupts after executing.  Unlike polling, when interrupts
     51                 are enabled, the previous key state is not remembered.  This
     52                 means that KeyRead() will return the current state of the keys
     53                 (not a change in state of the keys).
     54          
     55           NOTE: If interrupts are used, the KeyRead() fucntion is scheduled by
     56                 the ISR.  Therefore, the joystick movements will only be detected
     57                 during a pushbutton interrupt caused by S1 or the center joystick
     58                 pushbutton.
     59          
     60           NOTE: When a switch like S1 is pushed, the S1 signal goes from a normally
     61                 high state to a low state.  This transition is typically clean.  The
     62                 duration of the low state is around 200ms.  When the signal returns
     63                 to the high state, there is a high likelihood of signal bounce, which
     64                 causes a unwanted interrupts.  Normally, we would set the interrupt
     65                 edge to falling edge to generate an interrupt when S1 is pushed, but
     66                 because of the signal bounce, it is better to set the edge to rising
     67                 edge to generate an interrupt when S1 is released.  The debounce logic
     68                 can then filter out the signal bounce.  The result is that we typically
     69                 get only 1 interrupt per button push.  This mechanism is not totally
     70                 foolproof because occasionally, signal bound occurs during the falling
     71                 edge as well.  A similar mechanism is used to handle the joystick
     72                 pushbutton on the DB.  For the EB, we do not have independent control
     73                 of the interrupt edge for the S1 and center joystick pushbutton.  As
     74                 a result, only one or the other pushbuttons work reasonably well with
     75                 interrupts.  The default is the make the S1 switch on the EB work more
     76                 reliably.
     77          
     78          *********************************************************************/
     79          
     80          /**************************************************************************************************
     81           *                                            INCLUDES
     82           **************************************************************************************************/
     83          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x89
   \   unsigned char volatile __sfr P0IFG
   \                     P0IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8b
   \   unsigned char volatile __sfr P2IFG
   \                     P2IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8c
   \   unsigned char volatile __sfr PICTL
   \                     PICTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9a
   \   unsigned char volatile __sfr IEN2
   \                     IEN2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xab
   \   unsigned char volatile __sfr P0IEN
   \                     P0IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xac
   \   unsigned char volatile __sfr P2IEN
   \                     P2IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb8
   \   union <unnamed> volatile __sfr _A_IEN1
   \                     _A_IEN1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc0
   \   union <unnamed> volatile __sfr _A_IRCON
   \                     _A_IRCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf5
   \   unsigned char volatile __sfr P2SEL
   \                     P2SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf7
   \   unsigned char volatile __sfr P2INP
   \                     P2INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     84          #include "hal_defs.h"
     85          #include "hal_types.h"
     86          #include "hal_board.h"
     87          #include "hal_drivers.h"
     88          #include "hal_adc.h"
     89          #include "hal_key.h"
     90          #include "osal.h"
     91          
     92          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
     93          
     94          /**************************************************************************************************
     95           *                                              MACROS
     96           **************************************************************************************************/
     97          
     98          /**************************************************************************************************
     99           *                                            CONSTANTS
    100           **************************************************************************************************/
    101          #define HAL_KEY_RISING_EDGE   0
    102          #define HAL_KEY_FALLING_EDGE  1
    103          
    104          #define HAL_KEY_DEBOUNCE_VALUE  25
    105          
    106          /* CPU port interrupt */
    107          #define HAL_KEY_CPU_PORT_0_IF P0IF
    108          #define HAL_KEY_CPU_PORT_2_IF P2IF
    109          
    110          /* SW_6 is at P0.1 */
    111          #define HAL_KEY_SW_6_PORT   P0
    112          #define HAL_KEY_SW_6_BIT    BV(1)
    113          #define HAL_KEY_SW_6_SEL    P0SEL
    114          #define HAL_KEY_SW_6_DIR    P0DIR
    115          
    116          /* SW3 */
    117          #define HAL_KEY_SW3_PORT   P0
    118          #define HAL_KEY_SW3_BIT    BV(5)
    119          #define HAL_KEY_SW3_SEL    P0SEL
    120          #define HAL_KEY_SW3_DIR    P0DIR
    121          
    122          /* edge interrupt */ 
    123          #define HAL_KEY_SW_6_EDGEBIT  BV(0)
    124          #define HAL_KEY_SW_6_EDGE     HAL_KEY_FALLING_EDGE
    125          
    126          #define HAL_KEY_SW3_EDGEBIT  BV(3)
    127          #define HAL_KEY_SW3_EDGE     HAL_KEY_FALLING_EDGE
    128          
    129          /* SW_6 interrupts */
    130          #define HAL_KEY_SW_6_IEN      IEN1  /* CPU interrupt mask register */
    131          #define HAL_KEY_SW_6_IENBIT   BV(5) /* Mask bit for all of Port_0 */
    132          #define HAL_KEY_SW_6_ICTL     P0IEN /* Port Interrupt Control register */
    133          #define HAL_KEY_SW_6_ICTLBIT  BV(1) /* P0IEN - P0.1 enable/disable bit */
    134          #define HAL_KEY_SW_6_PXIFG    P0IFG /* Interrupt flag at source */
    135          
    136          #define HAL_KEY_SW3_IEN      IEN1  /* CPU interrupt mask register */
    137          #define HAL_KEY_SW3_IENBIT   BV(5) /* Mask bit for all of Port_2 */
    138          #define HAL_KEY_SW3_ICTL     P0IEN /* Port Interrupt Control register */
    139          #define HAL_KEY_SW3_ICTLBIT  BV(5) /* P2IENL - P2.0<->P2.3 enable/disable bit */
    140          #define HAL_KEY_SW3_PXIFG    P0IFG /* Interrupt flag at source */
    141          
    142          /* Joy stick move at P2.0 */
    143          #define HAL_KEY_JOY_MOVE_PORT   P2
    144          #define HAL_KEY_JOY_MOVE_BIT    BV(0)
    145          #define HAL_KEY_JOY_MOVE_SEL    P2SEL
    146          #define HAL_KEY_JOY_MOVE_DIR    P2DIR
    147          
    148          /* edge interrupt */
    149          #define HAL_KEY_JOY_MOVE_EDGEBIT  BV(3)
    150          //#define HAL_KEY_JOY_MOVE_EDGE     HAL_KEY_FALLING_EDGE 
    151          #define HAL_KEY_JOY_MOVE_EDGE     HAL_KEY_RISING_EDGE
    152          
    153          /* Joy move interrupts */
    154          #define HAL_KEY_JOY_MOVE_IEN      IEN2  /* CPU interrupt mask register */
    155          #define HAL_KEY_JOY_MOVE_IENBIT   BV(1) /* Mask bit for all of Port_2 */
    156          #define HAL_KEY_JOY_MOVE_ICTL     P2IEN /* Port Interrupt Control register */
    157          #define HAL_KEY_JOY_MOVE_ICTLBIT  BV(0) /* P2IENL - P2.0<->P2.3 enable/disable bit */
    158          #define HAL_KEY_JOY_MOVE_PXIFG    P2IFG /* Interrupt flag at source */
    159          
    160          #define HAL_KEY_JOY_CHN   HAL_ADC_CHANNEL_6
    161          
    162          
    163          /**************************************************************************************************
    164           *                                            TYPEDEFS
    165           **************************************************************************************************/
    166          
    167          
    168          /**************************************************************************************************
    169           *                                        GLOBAL VARIABLES
    170           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    171          static uint8 halKeySavedKeys;     /* used to store previous key state in polling mode */
   \                     halKeySavedKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          static halKeyCBack_t pHalKeyProcessFunction;
   \                     pHalKeyProcessFunction:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          static uint8 HalKeyConfigured;
   \                     HalKeyConfigured:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    174          bool Hal_KeyIntEnable;            /* interrupt enable/disable flag */
   \                     Hal_KeyIntEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    175          
    176          /**************************************************************************************************
    177           *                                        FUNCTIONS - Local
    178           **************************************************************************************************/
    179          void halProcessKeyInterrupt(void);
    180          uint8 halGetJoyKeyInput(void);
    181          
    182          
    183          
    184          /**************************************************************************************************
    185           *                                        FUNCTIONS - API
    186           **************************************************************************************************/
    187          
    188          
    189          /**************************************************************************************************
    190           * @fn      HalKeyInit
    191           *
    192           * @brief   Initilize Key Service
    193           *
    194           * @param   none
    195           *
    196           * @return  None
    197           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    198          void HalKeyInit( void )
   \                     HalKeyInit:
    199          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    200            /* Initialize previous key to 0 */
    201            halKeySavedKeys = 0;
   \   000004   90....       MOV       DPTR,#halKeySavedKeys
   \   000007   7400         MOV       A,#0x0
   \   000009   F0           MOVX      @DPTR,A
    202          
    203            HAL_KEY_SW_6_SEL &= ~(HAL_KEY_SW_6_BIT);    /* Set pin function to GPIO */
   \   00000A   53F3FD       ANL       0xf3,#0xfd
    204            HAL_KEY_SW_6_DIR &= ~(HAL_KEY_SW_6_BIT);    /* Set pin direction to Input */
   \   00000D   53FDFD       ANL       0xfd,#0xfd
    205            P0INP &= ~(HAL_KEY_SW_6_BIT);
   \   000010   538FFD       ANL       0x8f,#0xfd
    206            P2INP &= ~BV(5);
   \   000013   53F7DF       ANL       0xf7,#0xdf
    207            
    208            HAL_KEY_JOY_MOVE_SEL &= ~(HAL_KEY_JOY_MOVE_BIT); /* Set pin function to GPIO */
   \   000016   53F5FE       ANL       0xf5,#0xfe
    209            HAL_KEY_JOY_MOVE_DIR &= ~(HAL_KEY_JOY_MOVE_BIT); /* Set pin direction to Input */
   \   000019   53FFFE       ANL       0xff,#0xfe
    210            P2INP &= ~(HAL_KEY_JOY_MOVE_BIT);
   \   00001C   53F7FE       ANL       0xf7,#0xfe
    211            P2INP |= BV(7);
   \   00001F   43F780       ORL       0xf7,#0x80
    212          
    213            HAL_KEY_SW3_SEL &= ~(HAL_KEY_SW3_BIT); /* Set pin function to GPIO */
   \   000022   53F3DF       ANL       0xf3,#0xdf
    214            HAL_KEY_SW3_DIR &= ~(HAL_KEY_SW3_BIT); /* Set pin direction to Input */
   \   000025   53FDDF       ANL       0xfd,#0xdf
    215            P0INP &= ~(HAL_KEY_SW3_BIT);
   \   000028   538FDF       ANL       0x8f,#0xdf
    216          
    217            /* Initialize callback function */
    218            pHalKeyProcessFunction  = NULL;
   \   00002B   90....       MOV       DPTR,#pHalKeyProcessFunction
   \   00002E   7400         MOV       A,#0x0
   \   000030   F0           MOVX      @DPTR,A
   \   000031   A3           INC       DPTR
   \   000032   7400         MOV       A,#0x0
   \   000034   F0           MOVX      @DPTR,A
    219          
    220            /* Start with key is not configured */
    221            HalKeyConfigured = FALSE;
   \   000035   90....       MOV       DPTR,#HalKeyConfigured
   \   000038   7400         MOV       A,#0x0
   \   00003A   F0           MOVX      @DPTR,A
    222          }
   \   00003B   D083         POP       DPH
   \   00003D   D082         POP       DPL
   \   00003F   02....       LJMP      ?BRET
   \   000042                REQUIRE P0SEL
   \   000042                REQUIRE P0DIR
   \   000042                REQUIRE P0INP
   \   000042                REQUIRE P2INP
   \   000042                REQUIRE P2SEL
   \   000042                REQUIRE P2DIR
    223          
    224          
    225          /**************************************************************************************************
    226           * @fn      HalKeyConfig
    227           *
    228           * @brief   Configure the Key serivce
    229           *
    230           * @param   interruptEnable - TRUE/FALSE, enable/disable interrupt
    231           *          cback - pointer to the CallBack function
    232           *
    233           * @return  None
    234           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    235          void HalKeyConfig (bool interruptEnable, halKeyCBack_t cback)
   \                     HalKeyConfig:
    236          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    237            /* Enable/Disable Interrupt or */
    238            Hal_KeyIntEnable = interruptEnable;
   \   00000B   E5..         MOV       A,?V0
   \   00000D   90....       MOV       DPTR,#Hal_KeyIntEnable
   \   000010   F0           MOVX      @DPTR,A
    239          
    240            /* Register the callback fucntion */
    241            pHalKeyProcessFunction = cback;
   \   000011   90....       MOV       DPTR,#pHalKeyProcessFunction
   \   000014   EE           MOV       A,R6
   \   000015   F0           MOVX      @DPTR,A
   \   000016   A3           INC       DPTR
   \   000017   EF           MOV       A,R7
   \   000018   F0           MOVX      @DPTR,A
    242          
    243            /* Determine if interrupt is enable or not */
    244            if (Hal_KeyIntEnable)
   \   000019   90....       MOV       DPTR,#Hal_KeyIntEnable
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   6042         JZ        ??HalKeyConfig_0
    245            {
    246              /* Rising/Falling edge configuratinn */
    247          
    248              PICTL &= ~(HAL_KEY_SW_6_EDGEBIT);    /* Clear the edge bit */
   \   00001F   538CFE       ANL       0x8c,#0xfe
    249              /* For falling edge, the bit must be set. */
    250            #if (HAL_KEY_SW_6_EDGE == HAL_KEY_FALLING_EDGE)
    251              PICTL |= HAL_KEY_SW_6_EDGEBIT;
   \   000022   438C01       ORL       0x8c,#0x1
    252            #endif
    253          
    254          
    255              /* Interrupt configuration:
    256               * - Enable interrupt generation at the port
    257               * - Enable CPU interrupt
    258               * - Clear any pending interrupt
    259               */
    260              HAL_KEY_SW_6_ICTL |= HAL_KEY_SW_6_ICTLBIT;
   \   000025   43AB02       ORL       0xab,#0x2
    261              HAL_KEY_SW_6_IEN |= HAL_KEY_SW_6_IENBIT;
   \   000028   D2BD         SETB      0xb8.5
    262              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT);
   \   00002A   7589FD       MOV       0x89,#-0x3
    263          
    264          
    265          
    266              /* Rising/Falling edge configuratinn */
    267          
    268              HAL_KEY_JOY_MOVE_ICTL &= ~(HAL_KEY_JOY_MOVE_EDGEBIT);    /* Clear the edge bit */
   \   00002D   53ACF7       ANL       0xac,#0xf7
    269              /* For falling edge, the bit must be set. */
    270            #if (HAL_KEY_JOY_MOVE_EDGE == HAL_KEY_RISING_EDGE)
    271          //    HAL_KEY_JOY_MOVE_ICTL &= ~HAL_KEY_JOY_MOVE_EDGEBIT;
    272              PICTL &= ~HAL_KEY_JOY_MOVE_EDGEBIT;
   \   000030   538CF7       ANL       0x8c,#0xf7
    273            #endif
    274          
    275          
    276              /* Interrupt configuration:
    277               * - Enable interrupt generation at the port
    278               * - Enable CPU interrupt
    279               * - Clear any pending interrupt
    280               */
    281              HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_ICTLBIT;
   \   000033   43AC01       ORL       0xac,#0x1
    282              HAL_KEY_JOY_MOVE_IEN |= HAL_KEY_JOY_MOVE_IENBIT;
   \   000036   439A02       ORL       0x9a,#0x2
    283              HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT);
   \   000039   758BFE       MOV       0x8b,#-0x2
    284          
    285              
    286          
    287              /* SW3 INIT */
    288              HAL_KEY_SW3_ICTL &= ~(HAL_KEY_SW3_EDGEBIT);    /* Clear the edge bit */
   \   00003C   53ABF7       ANL       0xab,#0xf7
    289              /* For falling edge, the bit must be set. */
    290            #if (HAL_KEY_JOY_MOVE_EDGE == HAL_KEY_RISING_EDGE)
    291          //    HAL_KEY_SW3_ICTL &= ~HAL_KEY_SW3_EDGEBIT;
    292              PICTL |= HAL_KEY_SW_6_EDGEBIT;
   \   00003F   438C01       ORL       0x8c,#0x1
    293            #endif
    294          
    295          
    296              /* Interrupt configuration:
    297               * - Enable interrupt generation at the port
    298               * - Enable CPU interrupt
    299               * - Clear any pending interrupt
    300               */
    301              HAL_KEY_SW3_ICTL |= HAL_KEY_SW3_ICTLBIT;
   \   000042   43AB20       ORL       0xab,#0x20
    302              HAL_KEY_SW3_IEN |= HAL_KEY_SW3_IENBIT;
   \   000045   D2BD         SETB      0xb8.5
    303              HAL_KEY_SW3_PXIFG = ~(HAL_KEY_SW3_BIT);
   \   000047   7589DF       MOV       0x89,#-0x21
    304          
    305          
    306              /* Do this only after the hal_key is configured - to work with sleep stuff */
    307              if (HalKeyConfigured == TRUE)
   \   00004A   90....       MOV       DPTR,#HalKeyConfigured
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   6401         XRL       A,#0x1
   \   000050   7021         JNZ       ??HalKeyConfig_1
    308              {
    309                osal_stop_timerEx(Hal_TaskID, HAL_KEY_EVENT);  /* Cancel polling if active */
   \   000052                ; Setup parameters for call to function osal_stop_timerEx
   \   000052   7A10         MOV       R2,#0x10
   \   000054   7B00         MOV       R3,#0x0
   \   000056   90....       MOV       DPTR,#Hal_TaskID
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   F9           MOV       R1,A
   \   00005B   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   00005E   E9           MOV       A,R1
   \   00005F   8012         SJMP      ??HalKeyConfig_1
    310              }
    311            }
    312            else    /* Interrupts NOT enabled */
    313            {
    314              HAL_KEY_SW_6_ICTL &= ~(HAL_KEY_SW_6_ICTLBIT); /* don't generate interrupt */
   \                     ??HalKeyConfig_0:
   \   000061   53ABFD       ANL       0xab,#0xfd
    315              HAL_KEY_SW_6_IEN &= ~(HAL_KEY_SW_6_IENBIT);   /* Clear interrupt enable bit */
   \   000064   C2BD         CLR       0xb8.5
    316          
    317              osal_set_event(Hal_TaskID, HAL_KEY_EVENT);
   \   000066                ; Setup parameters for call to function osal_set_event
   \   000066   7A10         MOV       R2,#0x10
   \   000068   7B00         MOV       R3,#0x0
   \   00006A   90....       MOV       DPTR,#Hal_TaskID
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   F9           MOV       R1,A
   \   00006F   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000072   E9           MOV       A,R1
    318            }
    319          
    320            /* Key now is configured */
    321            HalKeyConfigured = TRUE;
   \                     ??HalKeyConfig_1:
   \   000073   90....       MOV       DPTR,#HalKeyConfigured
   \   000076   7401         MOV       A,#0x1
   \   000078   F0           MOVX      @DPTR,A
    322          }
   \   000079   7F01         MOV       R7,#0x1
   \   00007B   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   00007E                REQUIRE PICTL
   \   00007E                REQUIRE P0IEN
   \   00007E                REQUIRE _A_IEN1
   \   00007E                REQUIRE P0IFG
   \   00007E                REQUIRE P2IEN
   \   00007E                REQUIRE IEN2
   \   00007E                REQUIRE P2IFG
    323          
    324          
    325          /**************************************************************************************************
    326           * @fn      HalKeyRead
    327           *
    328           * @brief   Read the current value of a key
    329           *
    330           * @param   None
    331           *
    332           * @return  keys - current keys status
    333           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    334          uint8 HalKeyRead ( void )
   \                     HalKeyRead:
    335          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    336            uint8 keys = 0;
   \   000005   7E00         MOV       R6,#0x0
    337          
    338            if (HAL_PUSH_BUTTON1())
   \   000007   A281         MOV       C,0x80.1
   \   000009   4005         JC        ??HalKeyRead_0
    339            {
    340              keys |= HAL_KEY_SW_6;
   \   00000B   D3           SETB      C
   \   00000C   EE           MOV       A,R6
   \   00000D   92E5         MOV       0xE0 /* A   */.5,C
   \   00000F   FE           MOV       R6,A
    341            }
    342          
    343            if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  /* Key is active low */
   \                     ??HalKeyRead_0:
   \   000010   A2A0         MOV       C,0xa0.0
   \   000012   5007         JNC       ??HalKeyRead_1
    344            {
    345              keys |= halGetJoyKeyInput();
   \   000014                ; Setup parameters for call to function halGetJoyKeyInput
   \   000014   12....       LCALL     `??halGetJoyKeyInput::?relay`; Banked call to: halGetJoyKeyInput
   \   000017   E9           MOV       A,R1
   \   000018   CE           XCH       A,R6
   \   000019   4E           ORL       A,R6
   \   00001A   CE           XCH       A,R6
    346            }
    347          
    348            return keys;
   \                     ??HalKeyRead_1:
   \   00001B   EE           MOV       A,R6
   \   00001C   F9           MOV       R1,A
   \   00001D   7F01         MOV       R7,#0x1
   \   00001F   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000022                REQUIRE _A_P0
   \   000022                REQUIRE _A_P2
    349          }
    350          
    351          
    352          /**************************************************************************************************
    353           * @fn      HalKeyPoll
    354           *
    355           * @brief   Called by hal_driver to poll the keys
    356           *
    357           * @param   None
    358           *
    359           * @return  None
    360           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    361          void HalKeyPoll (void)
   \                     HalKeyPoll:
    362          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    363            uint8 keys = 0;
   \   000005   7E00         MOV       R6,#0x0
    364          
    365            if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  /* Key is active HIGH */
   \   000007   A2A0         MOV       C,0xa0.0
   \   000009   5005         JNC       ??HalKeyPoll_0
    366            {
    367              keys = halGetJoyKeyInput();
   \   00000B                ; Setup parameters for call to function halGetJoyKeyInput
   \   00000B   12....       LCALL     `??halGetJoyKeyInput::?relay`; Banked call to: halGetJoyKeyInput
   \   00000E   E9           MOV       A,R1
   \   00000F   FE           MOV       R6,A
    368            }
    369          
    370            /* If interrupts are not enabled, previous key status and current key status
    371             * are compared to find out if a key has changed status.
    372             */
    373            if (!Hal_KeyIntEnable)
   \                     ??HalKeyPoll_0:
   \   000010   90....       MOV       DPTR,#Hal_KeyIntEnable
   \   000013   E0           MOVX      A,@DPTR
   \   000014   700E         JNZ       ??HalKeyPoll_1
    374            {
    375              if (keys == halKeySavedKeys)
   \   000016   90....       MOV       DPTR,#halKeySavedKeys
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   6E           XRL       A,R6
   \   00001B   6047         JZ        ??HalKeyPoll_2
    376              {
    377                /* Exit - since no keys have changed */
    378                return;
    379              }
    380              /* Store the current keys for comparation next time */
    381              halKeySavedKeys = keys;
   \   00001D   EE           MOV       A,R6
   \   00001E   90....       MOV       DPTR,#halKeySavedKeys
   \   000021   F0           MOVX      @DPTR,A
   \   000022   801F         SJMP      ??HalKeyPoll_3
    382            }
    383            else
    384            {
    385              /* Key interrupt handled here */
    386              if (HAL_PUSH_BUTTON1())
   \                     ??HalKeyPoll_1:
   \   000024   A281         MOV       C,0x80.1
   \   000026   4007         JC        ??HalKeyPoll_4
    387              {
    388                keys |= HAL_KEY_SW_6;
   \   000028   D3           SETB      C
   \   000029   EE           MOV       A,R6
   \   00002A   92E5         MOV       0xE0 /* A   */.5,C
   \   00002C   FE           MOV       R6,A
   \   00002D   8014         SJMP      ??HalKeyPoll_3
    389              }
    390              else if (HAL_PUSH_BUTTON2())
   \                     ??HalKeyPoll_4:
   \   00002F   A2A0         MOV       C,0xa0.0
   \   000031   5007         JNC       ??HalKeyPoll_5
    391              {
    392                keys |= HAL_KEY_SW_5;
   \   000033   D3           SETB      C
   \   000034   EE           MOV       A,R6
   \   000035   92E2         MOV       0xE0 /* A   */.2,C
   \   000037   FE           MOV       R6,A
   \   000038   8009         SJMP      ??HalKeyPoll_3
    393              }
    394              else if (HAL_PUSH_BUTTON3())
   \                     ??HalKeyPoll_5:
   \   00003A   A285         MOV       C,0x80.5
   \   00003C   4005         JC        ??HalKeyPoll_3
    395              {
    396                keys |= HAL_KEY_SW3;
   \   00003E   D3           SETB      C
   \   00003F   EE           MOV       A,R6
   \   000040   92E6         MOV       0xE0 /* A   */.6,C
   \   000042   FE           MOV       R6,A
    397              }
    398            }
    399          
    400            /* Invoke Callback if new keys were depressed */
    401            if (keys && (pHalKeyProcessFunction))
   \                     ??HalKeyPoll_3:
   \   000043   EE           MOV       A,R6
   \   000044   601E         JZ        ??HalKeyPoll_2
   \   000046   90....       MOV       DPTR,#pHalKeyProcessFunction
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   F8           MOV       R0,A
   \   00004B   A3           INC       DPTR
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   F9           MOV       R1,A
   \   00004E   E8           MOV       A,R0
   \   00004F   49           ORL       A,R1
   \   000050   6012         JZ        ??HalKeyPoll_2
    402            {
    403              (pHalKeyProcessFunction) (keys, HAL_KEY_STATE_NORMAL);
   \   000052                ; Setup parameters for indirect call
   \   000052   7A00         MOV       R2,#0x0
   \   000054   EE           MOV       A,R6
   \   000055   F9           MOV       R1,A
   \   000056   90....       MOV       DPTR,#pHalKeyProcessFunction
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   F8           MOV       R0,A
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   F583         MOV       DPH,A
   \   00005F   8882         MOV       DPL,R0
   \   000061   12....       LCALL     ?CALL_IND
    404            }
    405          }
   \                     ??HalKeyPoll_2:
   \   000064   7F01         MOV       R7,#0x1
   \   000066   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000069                REQUIRE _A_P2
   \   000069                REQUIRE _A_P0
    406          
    407          /**************************************************************************************************
    408           * @fn      halGetJoyKeyInput
    409           *
    410           * @brief   Map the ADC value to its corresponding key.
    411           *
    412           * @param   None
    413           *
    414           * @return  keys - current joy key status
    415           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    416          uint8 halGetJoyKeyInput(void)
   \                     halGetJoyKeyInput:
    417          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    418            /* The joystick control is encoded as an analog voltage.
    419             * Read the JOY_LEVEL analog value and map it to joy movement.
    420             */
    421            uint8 adc;
    422            uint8 ksave0 = 0;
   \   000005   7E00         MOV       R6,#0x0
    423            uint8 ksave1;
    424          
    425            /* Keep on reading the ADC until two consecutive key decisions are the same. */
    426            do
    427            {
    428              ksave1 = ksave0;    /* save previouse key reading */
   \                     ??halGetJoyKeyInput_0:
   \   000007   8E..         MOV       ?V0,R6
    429          
    430              adc = HalAdcRead (HAL_KEY_JOY_CHN, HAL_ADC_RESOLUTION_8);
   \   000009                ; Setup parameters for call to function HalAdcRead
   \   000009   7A01         MOV       R2,#0x1
   \   00000B   7906         MOV       R1,#0x6
   \   00000D   12....       LCALL     `??HalAdcRead::?relay`; Banked call to: HalAdcRead
   \   000010   EA           MOV       A,R2
   \   000011   FF           MOV       R7,A
    431          
    432              if ((adc >= 2) && (adc <= 38))
   \   000012   EF           MOV       A,R7
   \   000013   C3           CLR       C
   \   000014   9402         SUBB      A,#0x2
   \   000016   400D         JC        ??halGetJoyKeyInput_1
   \   000018   EF           MOV       A,R7
   \   000019   C3           CLR       C
   \   00001A   9427         SUBB      A,#0x27
   \   00001C   5007         JNC       ??halGetJoyKeyInput_1
    433              {
    434                 ksave0 |= HAL_KEY_UP;
   \   00001E   D3           SETB      C
   \   00001F   EE           MOV       A,R6
   \   000020   92E0         MOV       0xE0 /* A   */.0,C
   \   000022   FE           MOV       R6,A
   \   000023   804A         SJMP      ??halGetJoyKeyInput_2
    435              }
    436              else if ((adc >= 74) && (adc <= 88))
   \                     ??halGetJoyKeyInput_1:
   \   000025   EF           MOV       A,R7
   \   000026   C3           CLR       C
   \   000027   944A         SUBB      A,#0x4a
   \   000029   400D         JC        ??halGetJoyKeyInput_3
   \   00002B   EF           MOV       A,R7
   \   00002C   C3           CLR       C
   \   00002D   9459         SUBB      A,#0x59
   \   00002F   5007         JNC       ??halGetJoyKeyInput_3
    437              {
    438                ksave0 |= HAL_KEY_RIGHT;
   \   000031   D3           SETB      C
   \   000032   EE           MOV       A,R6
   \   000033   92E1         MOV       0xE0 /* A   */.1,C
   \   000035   FE           MOV       R6,A
   \   000036   8037         SJMP      ??halGetJoyKeyInput_2
    439              }
    440              else if ((adc >= 60) && (adc <= 73))
   \                     ??halGetJoyKeyInput_3:
   \   000038   EF           MOV       A,R7
   \   000039   C3           CLR       C
   \   00003A   943C         SUBB      A,#0x3c
   \   00003C   400D         JC        ??halGetJoyKeyInput_4
   \   00003E   EF           MOV       A,R7
   \   00003F   C3           CLR       C
   \   000040   944A         SUBB      A,#0x4a
   \   000042   5007         JNC       ??halGetJoyKeyInput_4
    441              {
    442                ksave0 |= HAL_KEY_LEFT;
   \   000044   D3           SETB      C
   \   000045   EE           MOV       A,R6
   \   000046   92E3         MOV       0xE0 /* A   */.3,C
   \   000048   FE           MOV       R6,A
   \   000049   8024         SJMP      ??halGetJoyKeyInput_2
    443              }
    444              else if ((adc >= 39) && (adc <= 59))
   \                     ??halGetJoyKeyInput_4:
   \   00004B   EF           MOV       A,R7
   \   00004C   C3           CLR       C
   \   00004D   9427         SUBB      A,#0x27
   \   00004F   400D         JC        ??halGetJoyKeyInput_5
   \   000051   EF           MOV       A,R7
   \   000052   C3           CLR       C
   \   000053   943C         SUBB      A,#0x3c
   \   000055   5007         JNC       ??halGetJoyKeyInput_5
    445              {
    446                ksave0 |= HAL_KEY_DOWN;
   \   000057   D3           SETB      C
   \   000058   EE           MOV       A,R6
   \   000059   92E4         MOV       0xE0 /* A   */.4,C
   \   00005B   FE           MOV       R6,A
   \   00005C   8011         SJMP      ??halGetJoyKeyInput_2
    447              }
    448              else if ((adc >= 89) && (adc <= 100))
   \                     ??halGetJoyKeyInput_5:
   \   00005E   EF           MOV       A,R7
   \   00005F   C3           CLR       C
   \   000060   9459         SUBB      A,#0x59
   \   000062   400B         JC        ??halGetJoyKeyInput_2
   \   000064   EF           MOV       A,R7
   \   000065   C3           CLR       C
   \   000066   9465         SUBB      A,#0x65
   \   000068   5005         JNC       ??halGetJoyKeyInput_2
    449              {
    450                ksave0 |= HAL_KEY_CENTER;
   \   00006A   D3           SETB      C
   \   00006B   EE           MOV       A,R6
   \   00006C   92E2         MOV       0xE0 /* A   */.2,C
   \   00006E   FE           MOV       R6,A
    451              }
    452            } while (ksave0 != ksave1);
   \                     ??halGetJoyKeyInput_2:
   \   00006F   E5..         MOV       A,?V0
   \   000071   6E           XRL       A,R6
   \   000072   7093         JNZ       ??halGetJoyKeyInput_0
    453          
    454            return ksave0;
   \   000074   EE           MOV       A,R6
   \   000075   F9           MOV       R1,A
   \   000076   7F01         MOV       R7,#0x1
   \   000078   02....       LJMP      ?BANKED_LEAVE_XDATA
    455          }
    456          
    457          
    458          
    459          
    460          
    461          /**************************************************************************************************
    462           * @fn      halProcessKeyInterrupt
    463           *
    464           * @brief   Checks to see if it's a valid key interrupt, saves interrupt driven key states for
    465           *          processing by HalKeyRead(), and debounces keys by scheduling HalKeyRead() 25ms later.
    466           *
    467           * @param
    468           *
    469           * @return
    470           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    471          void halProcessKeyInterrupt (void)
   \                     halProcessKeyInterrupt:
    472          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    473            bool valid=FALSE;
   \   000005   7E00         MOV       R6,#0x0
    474          
    475            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)  /* Interrupt Flag has been set */
   \   000007   E589         MOV       A,0x89
   \   000009   A2E1         MOV       C,0xE0 /* A   */.1
   \   00000B   5005         JNC       ??halProcessKeyInterrupt_0
    476            {
    477              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT); /* Clear Interrupt Flag */
   \   00000D   7589FD       MOV       0x89,#-0x3
    478              valid = TRUE;
   \   000010   7E01         MOV       R6,#0x1
    479            }
    480          
    481            if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)  /* Interrupt Flag has been set */
   \                     ??halProcessKeyInterrupt_0:
   \   000012   E58B         MOV       A,0x8b
   \   000014   A2E0         MOV       C,0xE0 /* A   */.0
   \   000016   5005         JNC       ??halProcessKeyInterrupt_1
    482            {
    483              HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT); /* Clear Interrupt Flag */
   \   000018   758BFE       MOV       0x8b,#-0x2
    484              valid = TRUE;
   \   00001B   7E01         MOV       R6,#0x1
    485            }
    486          
    487            if (HAL_KEY_SW3_PXIFG & HAL_KEY_SW3_BIT)  /* Interrupt Flag has been set */
   \                     ??halProcessKeyInterrupt_1:
   \   00001D   E589         MOV       A,0x89
   \   00001F   A2E5         MOV       C,0xE0 /* A   */.5
   \   000021   5005         JNC       ??halProcessKeyInterrupt_2
    488            {
    489              HAL_KEY_SW3_PXIFG = ~(HAL_KEY_SW3_BIT); /* Clear Interrupt Flag */
   \   000023   7589DF       MOV       0x89,#-0x21
    490              valid = TRUE;
   \   000026   7E01         MOV       R6,#0x1
    491            }
    492            
    493            if (valid)
   \                     ??halProcessKeyInterrupt_2:
   \   000028   EE           MOV       A,R6
   \   000029   6018         JZ        ??halProcessKeyInterrupt_3
    494            {
    495              osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_DEBOUNCE_VALUE);
   \   00002B                ; Setup parameters for call to function osal_start_timerEx
   \   00002B   90....       MOV       DPTR,#__Constant_19
   \   00002E   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000031   7A10         MOV       R2,#0x10
   \   000033   7B00         MOV       R3,#0x0
   \   000035   90....       MOV       DPTR,#Hal_TaskID
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F9           MOV       R1,A
   \   00003A   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00003D   7404         MOV       A,#0x4
   \   00003F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000042   E9           MOV       A,R1
    496            }
    497          }
   \                     ??halProcessKeyInterrupt_3:
   \   000043   7F01         MOV       R7,#0x1
   \   000045   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000048                REQUIRE P0IFG
   \   000048                REQUIRE P2IFG
    498          
    499          /**************************************************************************************************
    500           * @fn      HalKeyEnterSleep
    501           *
    502           * @brief  - Get called to enter sleep mode
    503           *
    504           * @param
    505           *
    506           * @return
    507           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    508          void HalKeyEnterSleep ( void )
   \                     HalKeyEnterSleep:
    509          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    510          }
   \   000000   02....       LJMP      ?BRET
    511          
    512          /**************************************************************************************************
    513           * @fn      HalKeyExitSleep
    514           *
    515           * @brief   - Get called when sleep is over
    516           *
    517           * @param
    518           *
    519           * @return  - return saved keys
    520           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    521          uint8 HalKeyExitSleep ( void )
   \                     HalKeyExitSleep:
    522          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    523            /* Wake up and read keys */
    524            return ( HalKeyRead () );
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL     `??HalKeyRead::?relay`; Banked call to: HalKeyRead
   \   000007   D083         POP       DPH
   \   000009   D082         POP       DPL
   \   00000B   02....       LJMP      ?BRET
    525          }
    526          
    527          /***************************************************************************************************
    528           *                                    INTERRUPT SERVICE ROUTINE
    529           ***************************************************************************************************/
    530          
    531          /**************************************************************************************************
    532           * @fn      halKeyPort0Isr
    533           *
    534           * @brief   Port0 ISR
    535           *
    536           * @param
    537           *
    538           * @return
    539           **************************************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    540          HAL_ISR_FUNCTION( halKeyPort0Isr, P0INT_VECTOR )
   \                     halKeyPort0Isr:
    541          {
   \   000000   C0E0         PUSH      A
   \   000002   74F2         MOV       A,#-0xe
   \   000004   12....       LCALL     ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 14
   \   000007                ; Auto size: 0
    542            HAL_ENTER_ISR();
   \   000007   A2AF         MOV       C,0xa8.7
   \   000009   E4           CLR       A
   \   00000A   33           RLC       A
   \   00000B   FE           MOV       R6,A
   \   00000C   D2AF         SETB      0xa8.7
    543          
    544            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)
   \   00000E   E589         MOV       A,0x89
   \   000010   A2E1         MOV       C,0xE0 /* A   */.1
   \   000012   5005         JNC       ??halKeyPort0Isr_0
    545            {
    546              halProcessKeyInterrupt();
   \   000014                ; Setup parameters for call to function halProcessKeyInterrupt
   \   000014   12....       LCALL     `??halProcessKeyInterrupt::?relay`; Banked call to: halProcessKeyInterrupt
   \   000017   8009         SJMP      ??halKeyPort0Isr_1
    547            }
    548            else if (HAL_KEY_SW3_PXIFG & HAL_KEY_SW3_BIT)
   \                     ??halKeyPort0Isr_0:
   \   000019   E589         MOV       A,0x89
   \   00001B   A2E5         MOV       C,0xE0 /* A   */.5
   \   00001D   5003         JNC       ??halKeyPort0Isr_1
    549            {
    550              halProcessKeyInterrupt();
   \   00001F                ; Setup parameters for call to function halProcessKeyInterrupt
   \   00001F   12....       LCALL     `??halProcessKeyInterrupt::?relay`; Banked call to: halProcessKeyInterrupt
    551            }
    552            
    553            /*
    554              Clear the CPU interrupt flag for Port_0
    555              PxIFG has to be cleared before PxIF
    556            */
    557            HAL_KEY_SW_6_PXIFG = 0;
   \                     ??halKeyPort0Isr_1:
   \   000022   758900       MOV       0x89,#0x0
    558            HAL_KEY_CPU_PORT_0_IF = 0;
   \   000025   C2C5         CLR       0xc0.5
    559            
    560            CLEAR_SLEEP_MODE();
   \   000027   75..00       MOV       halSleepPconValue,#0x0
    561            HAL_EXIT_ISR();
   \   00002A   EE           MOV       A,R6
   \   00002B   A2E0         MOV       C,0xE0 /* A   */.0
   \   00002D   92AF         MOV       0xa8.7,C
    562          }
   \   00002F   7F01         MOV       R7,#0x1
   \   000031   02....       LJMP      ?INTERRUPT_LEAVE_XSP
   \   000034                REQUIRE _A_IEN0
   \   000034                REQUIRE P0IFG
   \   000034                REQUIRE _A_IRCON
    563          
    564          
    565          /**************************************************************************************************
    566           * @fn      halKeyPort2Isr
    567           *
    568           * @brief   Port2 ISR
    569           *
    570           * @param
    571           *
    572           * @return
    573           **************************************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    574          HAL_ISR_FUNCTION( halKeyPort2Isr, P2INT_VECTOR )
   \                     halKeyPort2Isr:
    575          {
   \   000000   C0E0         PUSH      A
   \   000002   74F2         MOV       A,#-0xe
   \   000004   12....       LCALL     ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 14
   \   000007                ; Auto size: 0
    576            HAL_ENTER_ISR();
   \   000007   A2AF         MOV       C,0xa8.7
   \   000009   E4           CLR       A
   \   00000A   33           RLC       A
   \   00000B   FE           MOV       R6,A
   \   00000C   D2AF         SETB      0xa8.7
    577            
    578            if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)
   \   00000E   E58B         MOV       A,0x8b
   \   000010   A2E0         MOV       C,0xE0 /* A   */.0
   \   000012   5003         JNC       ??halKeyPort2Isr_0
    579            {
    580              halProcessKeyInterrupt();
   \   000014                ; Setup parameters for call to function halProcessKeyInterrupt
   \   000014   12....       LCALL     `??halProcessKeyInterrupt::?relay`; Banked call to: halProcessKeyInterrupt
    581            }
    582          
    583            /*
    584              Clear the CPU interrupt flag for Port_2
    585              PxIFG has to be cleared before PxIF
    586              Notes: P2_1 and P2_2 are debug lines.
    587            */
    588            HAL_KEY_JOY_MOVE_PXIFG = 0;
   \                     ??halKeyPort2Isr_0:
   \   000017   758B00       MOV       0x8b,#0x0
    589            HAL_KEY_CPU_PORT_2_IF = 0;
   \   00001A   C2E8         CLR       0xe8.0
    590          
    591            CLEAR_SLEEP_MODE();
   \   00001C   75..00       MOV       halSleepPconValue,#0x0
    592            HAL_EXIT_ISR();
   \   00001F   EE           MOV       A,R6
   \   000020   A2E0         MOV       C,0xE0 /* A   */.0
   \   000022   92AF         MOV       0xa8.7,C
    593          }
   \   000024   7F01         MOV       R7,#0x1
   \   000026   02....       LJMP      ?INTERRUPT_LEAVE_XSP
   \   000029                REQUIRE _A_IEN0
   \   000029                REQUIRE P2IFG
   \   000029                REQUIRE _A_IRCON2

   \                                 In  segment INTVEC, offset 0x33, root
   \                     `??halKeyPort2Isr::??INTVEC 51`:
   \   000033   02....       LJMP       (halKeyPort2Isr)

   \                                 In  segment INTVEC, offset 0x6b, root
   \                     `??halKeyPort0Isr::??INTVEC 107`:
   \   00006B   02....       LJMP       (halKeyPort0Isr)

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_19:
   \   000000   19000000     DD 25
    594          
    595          #else
    596          
    597          
    598          void HalKeyInit(void){}
    599          void HalKeyConfig(bool interruptEnable, halKeyCBack_t cback){}
    600          uint8 HalKeyRead(void){ return 0;}
    601          void HalKeyPoll(void){}
    602          
    603          #endif /* HAL_KEY */
    604          
    605          
    606          
    607          
    608          
    609          /**************************************************************************************************
    610          **************************************************************************************************/
    611          
    612          
    613          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   HalKeyConfig
        0      9   -> osal_set_event
        0      9   -> osal_stop_timerEx
      0      0   HalKeyEnterSleep
      2      0   HalKeyExitSleep
        2      0   -> HalKeyRead
      2      0   HalKeyInit
      0      9   HalKeyPoll
        0      9   -> halGetJoyKeyInput
      0      9   HalKeyRead
        0      9   -> halGetJoyKeyInput
      0     18   halGetJoyKeyInput
        0      9   -> HalAdcRead
      0     14   halKeyPort0Isr
        0     14   -> halProcessKeyInterrupt
      0     14   halKeyPort2Isr
        0     14   -> halProcessKeyInterrupt
      0     27   halProcessKeyInterrupt
        0     13   -> osal_start_timerEx


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     126  HalKeyConfig
       1  HalKeyConfigured
       3  HalKeyEnterSleep
      14  HalKeyExitSleep
      66  HalKeyInit
     105  HalKeyPoll
      34  HalKeyRead
       1  Hal_KeyIntEnable
       1  IEN2
       1  P0DIR
       1  P0IEN
       1  P0IFG
       1  P0INP
       1  P0SEL
       1  P2DIR
       1  P2IEN
       1  P2IFG
       1  P2INP
       1  P2SEL
       1  PICTL
       1  _A_IEN0
       1  _A_IEN1
       1  _A_IRCON
       1  _A_IRCON2
       1  _A_P0
       1  _A_P2
       4  __Constant_19
     123  halGetJoyKeyInput
      52  halKeyPort0Isr
       3  halKeyPort0Isr::??INTVEC 107
      41  halKeyPort2Isr
       3  halKeyPort2Isr::??INTVEC 51
       1  halKeySavedKeys
      72  halProcessKeyInterrupt
       2  pHalKeyProcessFunction
      48  -- Other

 
 543 bytes in segment BANKED_CODE
  48 bytes in segment BANK_RELAYS
   6 bytes in segment INTVEC
  93 bytes in segment NEAR_CODE
  18 bytes in segment SFR_AN
   4 bytes in segment XDATA_ROM_C
   5 bytes in segment XDATA_Z
 
 141 bytes of CODE     memory (+  6 bytes shared)
   0 bytes of CONST    memory (+  4 bytes shared)
   0 bytes of DATA     memory (+ 18 bytes shared)
 543 bytes of HUGECODE memory
   5 bytes of XDATA    memory

Errors: none
Warnings: none
