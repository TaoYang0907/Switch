###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               05/Aug/2020  22:51:11
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\Source\user_printf.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW4D57.tmp ("D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\Source\user_printf.c"
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        POWER_SAVING -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC
#        -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_GROUPS -D BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=0
#        -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0 -DREJOIN_POLL_RATE=0
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_cross_call)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\user_printf.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\user_printf.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\Source\user_printf.c
      1          /*
      2          	Copyright 2001, 2002 Georges Menie (www.menie.org)
      3          	stdarg version contributed by Christian Ettinger
      4          
      5              This program is free software; you can redistribute it and/or modify
      6              it under the terms of the GNU Lesser General Public License as published by
      7              the Free Software Foundation; either version 2 of the License, or
      8              (at your option) any later version.
      9          
     10              This program is distributed in the hope that it will be useful,
     11              but WITHOUT ANY WARRANTY; without even the implied warranty of
     12              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     13              GNU Lesser General Public License for more details.
     14          
     15              You should have received a copy of the GNU Lesser General Public License
     16              along with this program; if not, write to the Free Software
     17              Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
     18          */
     19          
     20          /*
     21          	putchar is the only external dependency for this file,
     22          	if you have a working putchar, leave it commented out.
     23          	If not, uncomment the define below and
     24          	replace outbyte(c) by your own function call.
     25          
     26          #define putchar(c) outbyte(c)
     27          */
     28          
     29          #include "stdarg.h"
     30          #include "user_printf.h"
     31          #include "hal_uart.h"
     32          
     33          void putchar(char c);

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     34          void putchar(char c){
   \                     putchar:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV       A,#-0x1
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   \   000009   E9           MOV       A,R1
   \   00000A   C0E0         PUSH      A
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   D0E0         POP       A
   \   000014   F0           MOVX      @DPTR,A
     35            HalUARTWrite(HAL_UART_PORT_0,(uint8*)&c,1);
   \   000015                ; Setup parameters for call to function HalUARTWrite
   \   000015   7C01         MOV       R4,#0x1
   \   000017   7D00         MOV       R5,#0x0
   \   000019   AA..         MOV       R2,?XSP + 0
   \   00001B   AB..         MOV       R3,?XSP + 1
   \   00001D   7900         MOV       R1,#0x0
   \   00001F   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
     36          }
   \   000022   7401         MOV       A,#0x1
   \   000024   12....       LCALL     ?DEALLOC_XSTACK8
   \   000027   D083         POP       DPH
   \   000029   D082         POP       DPL
   \   00002B   02....       LJMP      ?BRET
     37          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     38          static void printchar(char **str, int c)
   \                     printchar:
     39          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
     40          	extern void putchar(char c);
     41          	
     42          	if (str) {
   \   00000D   E5..         MOV       A,?V0
   \   00000F   45..         ORL       A,?V1
   \   000011   6030         JZ        ??printchar_0
     43          		**str = c;
   \   000013   EE           MOV       A,R6
   \   000014   C0E0         PUSH      A
   \   000016   85..82       MOV       DPL,?V0
   \   000019   85..83       MOV       DPH,?V1
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F8           MOV       R0,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F583         MOV       DPH,A
   \   000022   8882         MOV       DPL,R0
   \   000024   D0E0         POP       A
   \   000026   F0           MOVX      @DPTR,A
     44          		++(*str);
   \   000027   85..82       MOV       DPL,?V0
   \   00002A   85..83       MOV       DPH,?V1
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   2401         ADD       A,#0x1
   \   000030   F8           MOV       R0,A
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   3400         ADDC      A,#0x0
   \   000035   F9           MOV       R1,A
   \   000036   85..82       MOV       DPL,?V0
   \   000039   85..83       MOV       DPH,?V1
   \   00003C   E8           MOV       A,R0
   \   00003D   F0           MOVX      @DPTR,A
   \   00003E   A3           INC       DPTR
   \   00003F   E9           MOV       A,R1
   \   000040   F0           MOVX      @DPTR,A
   \   000041   8005         SJMP      ??printchar_1
     45          	}
     46          	else (void)putchar((char)c);
   \                     ??printchar_0:
   \   000043                ; Setup parameters for call to function putchar
   \   000043   EE           MOV       A,R6
   \   000044   F9           MOV       R1,A
   \   000045   12....       LCALL     `??putchar::?relay`; Banked call to: putchar
     47          }
   \                     ??printchar_1:
   \   000048   7F02         MOV       R7,#0x2
   \   00004A   02....       LJMP      ?BANKED_LEAVE_XDATA
     48          
     49          #define PAD_RIGHT 1
     50          #define PAD_ZERO 2
     51          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     52          static int prints(char **out, const char *string, int width, int pad)
   \                     prints:
     53          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V8,R2
   \   000007   8B..         MOV       ?V9,R3
   \   000009   8C..         MOV       ?V4,R4
   \   00000B   8D..         MOV       ?V5,R5
   \   00000D   7412         MOV       A,#0x12
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   E0           MOVX      A,@DPTR
   \   000013   FE           MOV       R6,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   FF           MOV       R7,A
   \   000017   7414         MOV       A,#0x14
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V0,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V1,A
     54          	register int pc = 0, padchar = ' ';
   \   000023   75..00       MOV       ?V2,#0x0
   \   000026   75..00       MOV       ?V3,#0x0
   \   000029   75..20       MOV       ?V6,#0x20
   \   00002C   75..00       MOV       ?V7,#0x0
     55          
     56          	if (width > 0) {
   \   00002F   C3           CLR       C
   \   000030   EE           MOV       A,R6
   \   000031   9401         SUBB      A,#0x1
   \   000033   EF           MOV       A,R7
   \   000034   9400         SUBB      A,#0x0
   \   000036   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000038   65D0         XRL       A,PSW
   \   00003A   33           RLC       A
   \   00003B   403A         JC        ??prints_0
     57          		register int len = 0;
   \   00003D   7800         MOV       R0,#0x0
   \   00003F   7900         MOV       R1,#0x0
     58          		register const char *ptr;
     59          		for (ptr = string; *ptr; ++ptr) ++len;
   \   000041   85..82       MOV       DPL,?V4
   \   000044   85..83       MOV       DPH,?V5
   \                     ??prints_1:
   \   000047   E0           MOVX      A,@DPTR
   \   000048   6008         JZ        ??prints_2
   \   00004A   08           INC       R0
   \   00004B   E8           MOV       A,R0
   \   00004C   7001         JNZ       ??prints_3
   \   00004E   09           INC       R1
   \                     ??prints_3:
   \   00004F   A3           INC       DPTR
   \   000050   80F5         SJMP      ??prints_1
     60          		if (len >= width) width = 0;
   \                     ??prints_2:
   \   000052   C3           CLR       C
   \   000053   E8           MOV       A,R0
   \   000054   9E           SUBB      A,R6
   \   000055   E9           MOV       A,R1
   \   000056   9F           SUBB      A,R7
   \   000057   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000059   65D0         XRL       A,PSW
   \   00005B   33           RLC       A
   \   00005C   4006         JC        ??prints_4
   \   00005E   7E00         MOV       R6,#0x0
   \   000060   7F00         MOV       R7,#0x0
   \   000062   8007         SJMP      ??prints_5
     61          		else width -= len;
   \                     ??prints_4:
   \   000064   C3           CLR       C
   \   000065   EE           MOV       A,R6
   \   000066   98           SUBB      A,R0
   \   000067   FE           MOV       R6,A
   \   000068   EF           MOV       A,R7
   \   000069   99           SUBB      A,R1
   \   00006A   FF           MOV       R7,A
     62          		if (pad & PAD_ZERO) padchar = '0';
   \                     ??prints_5:
   \   00006B   E5..         MOV       A,?V0
   \   00006D   5402         ANL       A,#0x2
   \   00006F   6006         JZ        ??prints_0
   \   000071   75..30       MOV       ?V6,#0x30
   \   000074   75..00       MOV       ?V7,#0x0
     63          	}
     64          	if (!(pad & PAD_RIGHT)) {
   \                     ??prints_0:
   \   000077   E5..         MOV       A,?V0
   \   000079   A2E0         MOV       C,0xE0 /* A   */.0
   \   00007B   402B         JC        ??prints_6
     65          		for ( ; width > 0; --width) {
   \                     ??prints_7:
   \   00007D   C3           CLR       C
   \   00007E   EE           MOV       A,R6
   \   00007F   9401         SUBB      A,#0x1
   \   000081   EF           MOV       A,R7
   \   000082   9400         SUBB      A,#0x0
   \   000084   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000086   65D0         XRL       A,PSW
   \   000088   33           RLC       A
   \   000089   401D         JC        ??prints_6
     66          			printchar (out, padchar);
   \   00008B                ; Setup parameters for call to function printchar
   \   00008B   AC..         MOV       R4,?V6
   \   00008D   AD..         MOV       R5,?V7
   \   00008F   AA..         MOV       R2,?V8
   \   000091   AB..         MOV       R3,?V9
   \   000093   12....       LCALL     `??printchar::?relay`; Banked call to: printchar
     67          			++pc;
   \   000096   05..         INC       ?V2
   \   000098   E5..         MOV       A,?V2
   \   00009A   7002         JNZ       ??prints_8
   \   00009C   05..         INC       ?V3
     68          		}
   \                     ??prints_8:
   \   00009E   EE           MOV       A,R6
   \   00009F   24FF         ADD       A,#-0x1
   \   0000A1   FE           MOV       R6,A
   \   0000A2   EF           MOV       A,R7
   \   0000A3   34FF         ADDC      A,#-0x1
   \   0000A5   FF           MOV       R7,A
   \   0000A6   80D5         SJMP      ??prints_7
     69          	}
     70          	for ( ; *string ; ++string) {
   \                     ??prints_6:
   \   0000A8   85..82       MOV       DPL,?V4
   \   0000AB   85..83       MOV       DPH,?V5
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   6028         JZ        ??prints_9
     71          		printchar (out, *string);
   \   0000B1                ; Setup parameters for call to function printchar
   \   0000B1   85..82       MOV       DPL,?V4
   \   0000B4   85..83       MOV       DPH,?V5
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   FC           MOV       R4,A
   \   0000B9   7D00         MOV       R5,#0x0
   \   0000BB   AA..         MOV       R2,?V8
   \   0000BD   AB..         MOV       R3,?V9
   \   0000BF   12....       LCALL     `??printchar::?relay`; Banked call to: printchar
     72          		++pc;
   \   0000C2   05..         INC       ?V2
   \   0000C4   E5..         MOV       A,?V2
   \   0000C6   7002         JNZ       ??prints_10
   \   0000C8   05..         INC       ?V3
     73          	}
   \                     ??prints_10:
   \   0000CA   85..82       MOV       DPL,?V4
   \   0000CD   85..83       MOV       DPH,?V5
   \   0000D0   A3           INC       DPTR
   \   0000D1   8582..       MOV       ?V4,DPL
   \   0000D4   8583..       MOV       ?V5,DPH
   \   0000D7   80CF         SJMP      ??prints_6
     74          	for ( ; width > 0; --width) {
   \                     ??prints_9:
   \   0000D9   C3           CLR       C
   \   0000DA   EE           MOV       A,R6
   \   0000DB   9401         SUBB      A,#0x1
   \   0000DD   EF           MOV       A,R7
   \   0000DE   9400         SUBB      A,#0x0
   \   0000E0   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0000E2   65D0         XRL       A,PSW
   \   0000E4   33           RLC       A
   \   0000E5   401D         JC        ??prints_11
     75          		printchar (out, padchar);
   \   0000E7                ; Setup parameters for call to function printchar
   \   0000E7   AC..         MOV       R4,?V6
   \   0000E9   AD..         MOV       R5,?V7
   \   0000EB   AA..         MOV       R2,?V8
   \   0000ED   AB..         MOV       R3,?V9
   \   0000EF   12....       LCALL     `??printchar::?relay`; Banked call to: printchar
     76          		++pc;
   \   0000F2   05..         INC       ?V2
   \   0000F4   E5..         MOV       A,?V2
   \   0000F6   7002         JNZ       ??prints_12
   \   0000F8   05..         INC       ?V3
     77          	}
   \                     ??prints_12:
   \   0000FA   EE           MOV       A,R6
   \   0000FB   24FF         ADD       A,#-0x1
   \   0000FD   FE           MOV       R6,A
   \   0000FE   EF           MOV       A,R7
   \   0000FF   34FF         ADDC      A,#-0x1
   \   000101   FF           MOV       R7,A
   \   000102   80D5         SJMP      ??prints_9
     78          
     79          	return pc;
   \                     ??prints_11:
   \   000104   AA..         MOV       R2,?V2
   \   000106   AB..         MOV       R3,?V3
   \   000108   7F0A         MOV       R7,#0xa
   \   00010A   02....       LJMP      ?BANKED_LEAVE_XDATA
     80          }
     81          
     82          /* the following should be enough for 16 bit int */
     83          #define PRINT_BUF_LEN 6
     84          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     85          static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
   \                     printi:
     86          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V10,R2
   \   00000C   8B..         MOV       ?V11,R3
   \   00000E   8C..         MOV       ?V8,R4
   \   000010   8D..         MOV       ?V9,R5
   \   000012   7424         MOV       A,#0x24
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V2,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V3,A
   \   00001E   7426         MOV       A,#0x26
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E0           MOVX      A,@DPTR
   \   000024   FE           MOV       R6,A
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   FF           MOV       R7,A
     87          	char print_buf[PRINT_BUF_LEN];
     88          	register char *s;
     89          	register int t, neg = 0, pc = 0;
   \   000028   85..82       MOV       DPL,?XSP + 0
   \   00002B   85..83       MOV       DPH,?XSP + 1
   \   00002E   7400         MOV       A,#0x0
   \   000030   F0           MOVX      @DPTR,A
   \   000031   A3           INC       DPTR
   \   000032   7400         MOV       A,#0x0
   \   000034   F0           MOVX      @DPTR,A
   \   000035   75..00       MOV       ?V14,#0x0
   \   000038   75..00       MOV       ?V15,#0x0
     90          	register unsigned int u = i;
   \   00003B   85....       MOV       ?V0,?V8
   \   00003E   85....       MOV       ?V1,?V9
     91          
     92          	if (i == 0) {
   \   000041   E5..         MOV       A,?V8
   \   000043   45..         ORL       A,?V9
   \   000045   7032         JNZ       ??printi_0
     93          		print_buf[0] = '0';
   \   000047   7402         MOV       A,#0x2
   \   000049   12....       LCALL     ?XSTACK_DISP0_8
   \   00004C   7430         MOV       A,#0x30
   \   00004E   F0           MOVX      @DPTR,A
     94          		print_buf[1] = '\0';
   \   00004F   7403         MOV       A,#0x3
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   7400         MOV       A,#0x0
   \   000056   F0           MOVX      @DPTR,A
     95          		return prints (out, print_buf, width, pad);
   \   000057                ; Setup parameters for call to function prints
   \   000057   8E..         MOV       ?V12,R6
   \   000059   8F..         MOV       ?V13,R7
   \   00005B   78..         MOV       R0,#?V12
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000060   78..         MOV       R0,#?V2
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000065   7406         MOV       A,#0x6
   \   000067   12....       LCALL     ?XSTACK_DISP102_8
   \   00006A   AA..         MOV       R2,?V10
   \   00006C   AB..         MOV       R3,?V11
   \   00006E   12....       LCALL     `??prints::?relay`; Banked call to: prints
   \   000071   7404         MOV       A,#0x4
   \   000073   12....       LCALL     ?DEALLOC_XSTACK8
   \   000076   02....       LJMP      ??printi_1 & 0xFFFF
     96          	}
     97          
     98          	if (sg && b == 10 && i < 0) {
   \                     ??printi_0:
   \   000079   7422         MOV       A,#0x22
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   F8           MOV       R0,A
   \   000080   A3           INC       DPTR
   \   000081   E0           MOVX      A,@DPTR
   \   000082   F9           MOV       R1,A
   \   000083   E8           MOV       A,R0
   \   000084   49           ORL       A,R1
   \   000085   603A         JZ        ??printi_2
   \   000087   7420         MOV       A,#0x20
   \   000089   12....       LCALL     ?XSTACK_DISP0_8
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   640A         XRL       A,#0xa
   \   00008F   7004         JNZ       ??printi_3
   \   000091   A3           INC       DPTR
   \   000092   E0           MOVX      A,@DPTR
   \   000093   6400         XRL       A,#0x0
   \                     ??printi_3:
   \   000095   702A         JNZ       ??printi_2
   \   000097   C3           CLR       C
   \   000098   E5..         MOV       A,?V8
   \   00009A   9400         SUBB      A,#0x0
   \   00009C   E5..         MOV       A,?V9
   \   00009E   9400         SUBB      A,#0x0
   \   0000A0   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0000A2   65D0         XRL       A,PSW
   \   0000A4   33           RLC       A
   \   0000A5   501A         JNC       ??printi_2
     99          		neg = 1;
   \   0000A7   85..82       MOV       DPL,?XSP + 0
   \   0000AA   85..83       MOV       DPH,?XSP + 1
   \   0000AD   7401         MOV       A,#0x1
   \   0000AF   F0           MOVX      @DPTR,A
   \   0000B0   A3           INC       DPTR
   \   0000B1   7400         MOV       A,#0x0
   \   0000B3   F0           MOVX      @DPTR,A
    100          		u = -i;
   \   0000B4   C3           CLR       C
   \   0000B5   E4           CLR       A
   \   0000B6   95..         SUBB      A,?V8
   \   0000B8   F8           MOV       R0,A
   \   0000B9   E4           CLR       A
   \   0000BA   95..         SUBB      A,?V9
   \   0000BC   F9           MOV       R1,A
   \   0000BD   88..         MOV       ?V0,R0
   \   0000BF   89..         MOV       ?V1,R1
    101          	}
    102          
    103          	s = print_buf + PRINT_BUF_LEN-1;
   \                     ??printi_2:
   \   0000C1   7407         MOV       A,#0x7
   \   0000C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C6   8582..       MOV       ?V6,DPL
   \   0000C9   8583..       MOV       ?V7,DPH
    104          	*s = '\0';
   \   0000CC   85..82       MOV       DPL,?V6
   \   0000CF   85..83       MOV       DPH,?V7
   \   0000D2   7400         MOV       A,#0x0
   \   0000D4   F0           MOVX      @DPTR,A
    105          
    106          	while (u) {
   \                     ??printi_4:
   \   0000D5   E5..         MOV       A,?V0
   \   0000D7   45..         ORL       A,?V1
   \   0000D9   607C         JZ        ??printi_5
    107          		t = u % b;
   \   0000DB   A8..         MOV       R0,?V0
   \   0000DD   A9..         MOV       R1,?V1
   \   0000DF   7420         MOV       A,#0x20
   \   0000E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   FA           MOV       R2,A
   \   0000E6   A3           INC       DPTR
   \   0000E7   E0           MOVX      A,@DPTR
   \   0000E8   FB           MOV       R3,A
   \   0000E9   12....       LCALL     ?US_DIV_MOD
   \   0000EC   8A..         MOV       ?V12,R2
   \   0000EE   8B..         MOV       ?V13,R3
   \   0000F0   85....       MOV       ?V4,?V12
   \   0000F3   85....       MOV       ?V5,?V13
    108          		if( t >= 10 )
   \   0000F6   C3           CLR       C
   \   0000F7   E5..         MOV       A,?V4
   \   0000F9   940A         SUBB      A,#0xa
   \   0000FB   E5..         MOV       A,?V5
   \   0000FD   9400         SUBB      A,#0x0
   \   0000FF   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000101   65D0         XRL       A,PSW
   \   000103   33           RLC       A
   \   000104   4018         JC        ??printi_6
    109          			t += letbase - '0' - 10;
   \   000106   7428         MOV       A,#0x28
   \   000108   12....       LCALL     ?XSTACK_DISP0_8
   \   00010B   E0           MOVX      A,@DPTR
   \   00010C   24C6         ADD       A,#-0x3a
   \   00010E   F8           MOV       R0,A
   \   00010F   A3           INC       DPTR
   \   000110   E0           MOVX      A,@DPTR
   \   000111   34FF         ADDC      A,#-0x1
   \   000113   F9           MOV       R1,A
   \   000114   E5..         MOV       A,?V4
   \   000116   28           ADD       A,R0
   \   000117   F5..         MOV       ?V4,A
   \   000119   E5..         MOV       A,?V5
   \   00011B   39           ADDC      A,R1
   \   00011C   F5..         MOV       ?V5,A
    110          		*--s = t + '0';
   \                     ??printi_6:
   \   00011E   E5..         MOV       A,?V6
   \   000120   24FF         ADD       A,#-0x1
   \   000122   F5..         MOV       ?V6,A
   \   000124   E5..         MOV       A,?V7
   \   000126   34FF         ADDC      A,#-0x1
   \   000128   F5..         MOV       ?V7,A
   \   00012A   E5..         MOV       A,?V4
   \   00012C   2430         ADD       A,#0x30
   \   00012E   C0E0         PUSH      A
   \   000130   85..82       MOV       DPL,?V6
   \   000133   85..83       MOV       DPH,?V7
   \   000136   D0E0         POP       A
   \   000138   F0           MOVX      @DPTR,A
    111          		u /= b;
   \   000139   A8..         MOV       R0,?V0
   \   00013B   A9..         MOV       R1,?V1
   \   00013D   7420         MOV       A,#0x20
   \   00013F   12....       LCALL     ?XSTACK_DISP0_8
   \   000142   E0           MOVX      A,@DPTR
   \   000143   FA           MOV       R2,A
   \   000144   A3           INC       DPTR
   \   000145   E0           MOVX      A,@DPTR
   \   000146   FB           MOV       R3,A
   \   000147   12....       LCALL     ?US_DIV_MOD
   \   00014A   88..         MOV       ?V12,R0
   \   00014C   89..         MOV       ?V13,R1
   \   00014E   85....       MOV       ?V0,?V12
   \   000151   85....       MOV       ?V1,?V13
   \   000154   02....       LJMP      ??printi_4 & 0xFFFF
    112          	}
    113          
    114          	if (neg) {
   \                     ??printi_5:
   \   000157   85..82       MOV       DPL,?XSP + 0
   \   00015A   85..83       MOV       DPH,?XSP + 1
   \   00015D   E0           MOVX      A,@DPTR
   \   00015E   F8           MOV       R0,A
   \   00015F   A3           INC       DPTR
   \   000160   E0           MOVX      A,@DPTR
   \   000161   F9           MOV       R1,A
   \   000162   E8           MOV       A,R0
   \   000163   49           ORL       A,R1
   \   000164   6041         JZ        ??printi_7
    115          		if( width && (pad & PAD_ZERO) ) {
   \   000166   E5..         MOV       A,?V2
   \   000168   45..         ORL       A,?V3
   \   00016A   6026         JZ        ??printi_8
   \   00016C   EE           MOV       A,R6
   \   00016D   5402         ANL       A,#0x2
   \   00016F   6021         JZ        ??printi_8
    116          			printchar (out, '-');
   \   000171                ; Setup parameters for call to function printchar
   \   000171   7C2D         MOV       R4,#0x2d
   \   000173   7D00         MOV       R5,#0x0
   \   000175   AA..         MOV       R2,?V10
   \   000177   AB..         MOV       R3,?V11
   \   000179   12....       LCALL     `??printchar::?relay`; Banked call to: printchar
    117          			++pc;
   \   00017C   05..         INC       ?V14
   \   00017E   E5..         MOV       A,?V14
   \   000180   7002         JNZ       ??printi_9
   \   000182   05..         INC       ?V15
    118          			--width;
   \                     ??printi_9:
   \   000184   E5..         MOV       A,?V2
   \   000186   24FF         ADD       A,#-0x1
   \   000188   F5..         MOV       ?V2,A
   \   00018A   E5..         MOV       A,?V3
   \   00018C   34FF         ADDC      A,#-0x1
   \   00018E   F5..         MOV       ?V3,A
   \   000190   8015         SJMP      ??printi_7
    119          		}
    120          		else {
    121          			*--s = '-';
   \                     ??printi_8:
   \   000192   E5..         MOV       A,?V6
   \   000194   24FF         ADD       A,#-0x1
   \   000196   F5..         MOV       ?V6,A
   \   000198   E5..         MOV       A,?V7
   \   00019A   34FF         ADDC      A,#-0x1
   \   00019C   F5..         MOV       ?V7,A
   \   00019E   85..82       MOV       DPL,?V6
   \   0001A1   85..83       MOV       DPH,?V7
   \   0001A4   742D         MOV       A,#0x2d
   \   0001A6   F0           MOVX      @DPTR,A
    122          		}
    123          	}
    124          
    125          	return pc + prints (out, s, width, pad);
   \                     ??printi_7:
   \   0001A7                ; Setup parameters for call to function prints
   \   0001A7   8E..         MOV       ?V12,R6
   \   0001A9   8F..         MOV       ?V13,R7
   \   0001AB   78..         MOV       R0,#?V12
   \   0001AD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B0   78..         MOV       R0,#?V2
   \   0001B2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B5   AC..         MOV       R4,?V6
   \   0001B7   AD..         MOV       R5,?V7
   \   0001B9   AA..         MOV       R2,?V10
   \   0001BB   AB..         MOV       R3,?V11
   \   0001BD   12....       LCALL     `??prints::?relay`; Banked call to: prints
   \   0001C0   7404         MOV       A,#0x4
   \   0001C2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001C5   8A..         MOV       ?V12,R2
   \   0001C7   8B..         MOV       ?V13,R3
   \   0001C9   E5..         MOV       A,?V14
   \   0001CB   25..         ADD       A,?V12
   \   0001CD   FA           MOV       R2,A
   \   0001CE   E5..         MOV       A,?V15
   \   0001D0   35..         ADDC      A,?V13
   \   0001D2   FB           MOV       R3,A
   \                     ??printi_1:
   \   0001D3   7408         MOV       A,#0x8
   \   0001D5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001D8   7F10         MOV       R7,#0x10
   \   0001DA   02....       LJMP      ?BANKED_LEAVE_XDATA
    126          }
    127          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    128          static int print(char **out, const char *format, va_list args )
   \                     print:
    129          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
   \   00000E   8C..         MOV       ?V2,R4
   \   000010   8D..         MOV       ?V3,R5
   \   000012   7418         MOV       A,#0x18
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V8,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V9,A
    130          	register int width, pad;
    131          	register int pc = 0;
   \   00001E   75..00       MOV       ?V4,#0x0
   \   000021   75..00       MOV       ?V5,#0x0
    132          	char scr[2];
    133          
    134          	for (; *format != 0; ++format) {
   \                     ??print_0:
   \   000024   85..82       MOV       DPL,?V2
   \   000027   85..83       MOV       DPH,?V3
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   7003         JNZ       $+5
   \   00002D   02....       LJMP      ??print_1 & 0xFFFF
    135          		if (*format == '%') {
   \   000030   85..82       MOV       DPL,?V2
   \   000033   85..83       MOV       DPH,?V3
   \   000036   E0           MOVX      A,@DPTR
   \   000037   6425         XRL       A,#0x25
   \   000039   6003         JZ        $+5
   \   00003B   02....       LJMP      ??print_2 & 0xFFFF
    136          			++format;
   \   00003E   85..82       MOV       DPL,?V2
   \   000041   85..83       MOV       DPH,?V3
   \   000044   A3           INC       DPTR
   \   000045   8582..       MOV       ?V2,DPL
   \   000048   8583..       MOV       ?V3,DPH
    137          			width = pad = 0;
   \   00004B   75..00       MOV       ?V0,#0x0
   \   00004E   75..00       MOV       ?V1,#0x0
   \   000051   AE..         MOV       R6,?V0
   \   000053   AF..         MOV       R7,?V1
    138          			if (*format == '\0') break;
   \   000055   85..82       MOV       DPL,?V2
   \   000058   85..83       MOV       DPH,?V3
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   7003         JNZ       $+5
   \   00005E   02....       LJMP      ??print_1 & 0xFFFF
    139          			if (*format == '%') goto out;
   \   000061   85..82       MOV       DPL,?V2
   \   000064   85..83       MOV       DPH,?V3
   \   000067   E0           MOVX      A,@DPTR
   \   000068   6425         XRL       A,#0x25
   \   00006A   7003         JNZ       $+5
   \   00006C   02....       LJMP      ??print_2 & 0xFFFF
    140          			if (*format == '-') {
   \   00006F   85..82       MOV       DPL,?V2
   \   000072   85..83       MOV       DPH,?V3
   \   000075   E0           MOVX      A,@DPTR
   \   000076   642D         XRL       A,#0x2d
   \   000078   7013         JNZ       ??print_3
    141          				++format;
   \   00007A   85..82       MOV       DPL,?V2
   \   00007D   85..83       MOV       DPH,?V3
   \   000080   A3           INC       DPTR
   \   000081   8582..       MOV       ?V2,DPL
   \   000084   8583..       MOV       ?V3,DPH
    142          				pad = PAD_RIGHT;
   \   000087   75..01       MOV       ?V0,#0x1
   \   00008A   75..00       MOV       ?V1,#0x0
    143          			}
    144          			while (*format == '0') {
   \                     ??print_3:
   \   00008D   85..82       MOV       DPL,?V2
   \   000090   85..83       MOV       DPH,?V3
   \   000093   E0           MOVX      A,@DPTR
   \   000094   6430         XRL       A,#0x30
   \   000096   701B         JNZ       ??print_4
    145          				++format;
   \   000098   85..82       MOV       DPL,?V2
   \   00009B   85..83       MOV       DPH,?V3
   \   00009E   A3           INC       DPTR
   \   00009F   8582..       MOV       ?V2,DPL
   \   0000A2   8583..       MOV       ?V3,DPH
    146          				pad |= PAD_ZERO;
   \   0000A5   7402         MOV       A,#0x2
   \   0000A7   45..         ORL       A,?V0
   \   0000A9   F5..         MOV       ?V0,A
   \   0000AB   7400         MOV       A,#0x0
   \   0000AD   45..         ORL       A,?V1
   \   0000AF   F5..         MOV       ?V1,A
   \   0000B1   80DA         SJMP      ??print_3
    147          			}
    148          			for ( ; *format >= '0' && *format <= '9'; ++format) {
   \                     ??print_4:
   \   0000B3   85..82       MOV       DPL,?V2
   \   0000B6   85..83       MOV       DPH,?V3
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   C3           CLR       C
   \   0000BB   9430         SUBB      A,#0x30
   \   0000BD   4048         JC        ??print_5
   \   0000BF   85..82       MOV       DPL,?V2
   \   0000C2   85..83       MOV       DPH,?V3
   \   0000C5   E0           MOVX      A,@DPTR
   \   0000C6   C3           CLR       C
   \   0000C7   943A         SUBB      A,#0x3a
   \   0000C9   503C         JNC       ??print_5
    149          				width *= 10;
   \   0000CB   EE           MOV       A,R6
   \   0000CC   75F00A       MOV       B,#0xa
   \   0000CF   A4           MUL       AB
   \   0000D0   CE           XCH       A,R6
   \   0000D1   A8F0         MOV       R0,B
   \   0000D3   75F000       MOV       B,#0x0
   \   0000D6   A4           MUL       AB
   \   0000D7   28           ADD       A,R0
   \   0000D8   F8           MOV       R0,A
   \   0000D9   75F00A       MOV       B,#0xa
   \   0000DC   EF           MOV       A,R7
   \   0000DD   A4           MUL       AB
   \   0000DE   28           ADD       A,R0
   \   0000DF   FF           MOV       R7,A
    150          				width += *format - '0';
   \   0000E0   85..82       MOV       DPL,?V2
   \   0000E3   85..83       MOV       DPH,?V3
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   F8           MOV       R0,A
   \   0000E8   7900         MOV       R1,#0x0
   \   0000EA   E8           MOV       A,R0
   \   0000EB   24D0         ADD       A,#-0x30
   \   0000ED   F8           MOV       R0,A
   \   0000EE   E9           MOV       A,R1
   \   0000EF   34FF         ADDC      A,#-0x1
   \   0000F1   F9           MOV       R1,A
   \   0000F2   EE           MOV       A,R6
   \   0000F3   28           ADD       A,R0
   \   0000F4   FE           MOV       R6,A
   \   0000F5   EF           MOV       A,R7
   \   0000F6   39           ADDC      A,R1
   \   0000F7   FF           MOV       R7,A
    151          			}
   \   0000F8   85..82       MOV       DPL,?V2
   \   0000FB   85..83       MOV       DPH,?V3
   \   0000FE   A3           INC       DPTR
   \   0000FF   8582..       MOV       ?V2,DPL
   \   000102   8583..       MOV       ?V3,DPH
   \   000105   80AC         SJMP      ??print_4
    152          			if( *format == 's' ) {
   \                     ??print_5:
   \   000107   85..82       MOV       DPL,?V2
   \   00010A   85..83       MOV       DPH,?V3
   \   00010D   E0           MOVX      A,@DPTR
   \   00010E   6473         XRL       A,#0x73
   \   000110   706C         JNZ       ??print_6
    153          				register char *s = (char *)va_arg( args, int );
   \   000112   85..82       MOV       DPL,?V8
   \   000115   85..83       MOV       DPH,?V9
   \   000118   E0           MOVX      A,@DPTR
   \   000119   F8           MOV       R0,A
   \   00011A   A3           INC       DPTR
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   F583         MOV       DPH,A
   \   00011E   8882         MOV       DPL,R0
   \   000120   E0           MOVX      A,@DPTR
   \   000121   F5..         MOV       ?V10,A
   \   000123   A3           INC       DPTR
   \   000124   E0           MOVX      A,@DPTR
   \   000125   F5..         MOV       ?V11,A
   \   000127   85..82       MOV       DPL,?V8
   \   00012A   85..83       MOV       DPH,?V9
   \   00012D   E0           MOVX      A,@DPTR
   \   00012E   2402         ADD       A,#0x2
   \   000130   F8           MOV       R0,A
   \   000131   A3           INC       DPTR
   \   000132   E0           MOVX      A,@DPTR
   \   000133   3400         ADDC      A,#0x0
   \   000135   F9           MOV       R1,A
   \   000136   85..82       MOV       DPL,?V8
   \   000139   85..83       MOV       DPH,?V9
   \   00013C   E8           MOV       A,R0
   \   00013D   F0           MOVX      @DPTR,A
   \   00013E   A3           INC       DPTR
   \   00013F   E9           MOV       A,R1
   \   000140   F0           MOVX      @DPTR,A
    154          				pc += prints (out, s?s:"(null)", width, pad);
   \   000141   E5..         MOV       A,?V10
   \   000143   45..         ORL       A,?V11
   \   000145   6006         JZ        ??print_7
   \   000147   AC..         MOV       R4,?V10
   \   000149   AD..         MOV       R5,?V11
   \   00014B   8004         SJMP      ??print_8
   \                     ??print_7:
   \   00014D   7C..         MOV       R4,#`?<Constant "(null)">` & 0xff
   \   00014F   7D..         MOV       R5,#(`?<Constant "(null)">` >> 8) & 0xff
   \                     ??print_8:
   \   000151                ; Setup parameters for call to function prints
   \   000151   78..         MOV       R0,#?V0
   \   000153   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000156   8E..         MOV       ?V12,R6
   \   000158   8F..         MOV       ?V13,R7
   \   00015A   78..         MOV       R0,#?V12
   \   00015C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00015F   AA..         MOV       R2,?V6
   \   000161   AB..         MOV       R3,?V7
   \   000163   12....       LCALL     `??prints::?relay`; Banked call to: prints
   \   000166   7404         MOV       A,#0x4
   \   000168   12....       LCALL     ?DEALLOC_XSTACK8
   \   00016B   8A..         MOV       ?V12,R2
   \   00016D   8B..         MOV       ?V13,R3
   \   00016F   E5..         MOV       A,?V4
   \   000171   25..         ADD       A,?V12
   \   000173   F5..         MOV       ?V4,A
   \   000175   E5..         MOV       A,?V5
   \   000177   35..         ADDC      A,?V13
   \   000179   F5..         MOV       ?V5,A
    155          				continue;
   \   00017B   02....       LJMP      ??print_9 & 0xFFFF
    156          			}
    157          			if( *format == 'd' ) {
   \                     ??print_6:
   \   00017E   85..82       MOV       DPL,?V2
   \   000181   85..83       MOV       DPH,?V3
   \   000184   E0           MOVX      A,@DPTR
   \   000185   6464         XRL       A,#0x64
   \   000187   7078         JNZ       ??print_10
    158          				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   \   000189   85..82       MOV       DPL,?V8
   \   00018C   85..83       MOV       DPH,?V9
   \   00018F   E0           MOVX      A,@DPTR
   \   000190   F8           MOV       R0,A
   \   000191   A3           INC       DPTR
   \   000192   E0           MOVX      A,@DPTR
   \   000193   F9           MOV       R1,A
   \   000194   E8           MOV       A,R0
   \   000195   FA           MOV       R2,A
   \   000196   E9           MOV       A,R1
   \   000197   FB           MOV       R3,A
   \   000198   EA           MOV       A,R2
   \   000199   2402         ADD       A,#0x2
   \   00019B   F8           MOV       R0,A
   \   00019C   E4           CLR       A
   \   00019D   3B           ADDC      A,R3
   \   00019E   F9           MOV       R1,A
   \   00019F   85..82       MOV       DPL,?V8
   \   0001A2   85..83       MOV       DPH,?V9
   \   0001A5   E8           MOV       A,R0
   \   0001A6   F0           MOVX      @DPTR,A
   \   0001A7   A3           INC       DPTR
   \   0001A8   E9           MOV       A,R1
   \   0001A9   F0           MOVX      @DPTR,A
   \   0001AA                ; Setup parameters for call to function printi
   \   0001AA   75..61       MOV       ?V10,#0x61
   \   0001AD   75..00       MOV       ?V11,#0x0
   \   0001B0   78..         MOV       R0,#?V10
   \   0001B2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B5   78..         MOV       R0,#?V0
   \   0001B7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001BA   8E..         MOV       ?V10,R6
   \   0001BC   8F..         MOV       ?V11,R7
   \   0001BE   78..         MOV       R0,#?V10
   \   0001C0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001C3   75..01       MOV       ?V10,#0x1
   \   0001C6   75..00       MOV       ?V11,#0x0
   \   0001C9   78..         MOV       R0,#?V10
   \   0001CB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001CE   75..0A       MOV       ?V10,#0xa
   \   0001D1   75..00       MOV       ?V11,#0x0
   \   0001D4   78..         MOV       R0,#?V10
   \   0001D6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001D9   8A82         MOV       DPL,R2
   \   0001DB   8B83         MOV       DPH,R3
   \   0001DD   E0           MOVX      A,@DPTR
   \   0001DE   FC           MOV       R4,A
   \   0001DF   A3           INC       DPTR
   \   0001E0   E0           MOVX      A,@DPTR
   \   0001E1   FD           MOV       R5,A
   \   0001E2   AA..         MOV       R2,?V6
   \   0001E4   AB..         MOV       R3,?V7
   \   0001E6   12....       LCALL     `??printi::?relay`; Banked call to: printi
   \   0001E9   740A         MOV       A,#0xa
   \   0001EB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001EE   8A..         MOV       ?V10,R2
   \   0001F0   8B..         MOV       ?V11,R3
   \   0001F2   E5..         MOV       A,?V4
   \   0001F4   25..         ADD       A,?V10
   \   0001F6   F5..         MOV       ?V4,A
   \   0001F8   E5..         MOV       A,?V5
   \   0001FA   35..         ADDC      A,?V11
   \   0001FC   F5..         MOV       ?V5,A
    159          				continue;
   \   0001FE   02....       LJMP      ??print_9 & 0xFFFF
    160          			}
    161          			if( *format == 'x' ) {
   \                     ??print_10:
   \   000201   85..82       MOV       DPL,?V2
   \   000204   85..83       MOV       DPH,?V3
   \   000207   E0           MOVX      A,@DPTR
   \   000208   6478         XRL       A,#0x78
   \   00020A   7077         JNZ       ??print_11
    162          				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   \   00020C   85..82       MOV       DPL,?V8
   \   00020F   85..83       MOV       DPH,?V9
   \   000212   E0           MOVX      A,@DPTR
   \   000213   F8           MOV       R0,A
   \   000214   A3           INC       DPTR
   \   000215   E0           MOVX      A,@DPTR
   \   000216   F9           MOV       R1,A
   \   000217   E8           MOV       A,R0
   \   000218   FA           MOV       R2,A
   \   000219   E9           MOV       A,R1
   \   00021A   FB           MOV       R3,A
   \   00021B   EA           MOV       A,R2
   \   00021C   2402         ADD       A,#0x2
   \   00021E   F8           MOV       R0,A
   \   00021F   E4           CLR       A
   \   000220   3B           ADDC      A,R3
   \   000221   F9           MOV       R1,A
   \   000222   85..82       MOV       DPL,?V8
   \   000225   85..83       MOV       DPH,?V9
   \   000228   E8           MOV       A,R0
   \   000229   F0           MOVX      @DPTR,A
   \   00022A   A3           INC       DPTR
   \   00022B   E9           MOV       A,R1
   \   00022C   F0           MOVX      @DPTR,A
   \   00022D                ; Setup parameters for call to function printi
   \   00022D   75..61       MOV       ?V10,#0x61
   \   000230   75..00       MOV       ?V11,#0x0
   \   000233   78..         MOV       R0,#?V10
   \   000235   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000238   78..         MOV       R0,#?V0
   \   00023A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00023D   8E..         MOV       ?V10,R6
   \   00023F   8F..         MOV       ?V11,R7
   \   000241   78..         MOV       R0,#?V10
   \   000243   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000246   E4           CLR       A
   \   000247   F5..         MOV       ?V10,A
   \   000249   F5..         MOV       ?V11,A
   \   00024B   78..         MOV       R0,#?V10
   \   00024D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000250   75..10       MOV       ?V10,#0x10
   \   000253   75..00       MOV       ?V11,#0x0
   \   000256   78..         MOV       R0,#?V10
   \   000258   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00025B   8A82         MOV       DPL,R2
   \   00025D   8B83         MOV       DPH,R3
   \   00025F   E0           MOVX      A,@DPTR
   \   000260   FC           MOV       R4,A
   \   000261   A3           INC       DPTR
   \   000262   E0           MOVX      A,@DPTR
   \   000263   FD           MOV       R5,A
   \   000264   AA..         MOV       R2,?V6
   \   000266   AB..         MOV       R3,?V7
   \   000268   12....       LCALL     `??printi::?relay`; Banked call to: printi
   \   00026B   740A         MOV       A,#0xa
   \   00026D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000270   8A..         MOV       ?V10,R2
   \   000272   8B..         MOV       ?V11,R3
   \   000274   E5..         MOV       A,?V4
   \   000276   25..         ADD       A,?V10
   \   000278   F5..         MOV       ?V4,A
   \   00027A   E5..         MOV       A,?V5
   \   00027C   35..         ADDC      A,?V11
   \   00027E   F5..         MOV       ?V5,A
    163          				continue;
   \   000280   02....       LJMP      ??print_9 & 0xFFFF
    164          			}
    165          			if( *format == 'X' ) {
   \                     ??print_11:
   \   000283   85..82       MOV       DPL,?V2
   \   000286   85..83       MOV       DPH,?V3
   \   000289   E0           MOVX      A,@DPTR
   \   00028A   6458         XRL       A,#0x58
   \   00028C   7077         JNZ       ??print_12
    166          				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   \   00028E   85..82       MOV       DPL,?V8
   \   000291   85..83       MOV       DPH,?V9
   \   000294   E0           MOVX      A,@DPTR
   \   000295   F8           MOV       R0,A
   \   000296   A3           INC       DPTR
   \   000297   E0           MOVX      A,@DPTR
   \   000298   F9           MOV       R1,A
   \   000299   E8           MOV       A,R0
   \   00029A   FA           MOV       R2,A
   \   00029B   E9           MOV       A,R1
   \   00029C   FB           MOV       R3,A
   \   00029D   EA           MOV       A,R2
   \   00029E   2402         ADD       A,#0x2
   \   0002A0   F8           MOV       R0,A
   \   0002A1   E4           CLR       A
   \   0002A2   3B           ADDC      A,R3
   \   0002A3   F9           MOV       R1,A
   \   0002A4   85..82       MOV       DPL,?V8
   \   0002A7   85..83       MOV       DPH,?V9
   \   0002AA   E8           MOV       A,R0
   \   0002AB   F0           MOVX      @DPTR,A
   \   0002AC   A3           INC       DPTR
   \   0002AD   E9           MOV       A,R1
   \   0002AE   F0           MOVX      @DPTR,A
   \   0002AF                ; Setup parameters for call to function printi
   \   0002AF   75..41       MOV       ?V10,#0x41
   \   0002B2   75..00       MOV       ?V11,#0x0
   \   0002B5   78..         MOV       R0,#?V10
   \   0002B7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002BA   78..         MOV       R0,#?V0
   \   0002BC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002BF   8E..         MOV       ?V10,R6
   \   0002C1   8F..         MOV       ?V11,R7
   \   0002C3   78..         MOV       R0,#?V10
   \   0002C5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002C8   E4           CLR       A
   \   0002C9   F5..         MOV       ?V10,A
   \   0002CB   F5..         MOV       ?V11,A
   \   0002CD   78..         MOV       R0,#?V10
   \   0002CF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002D2   75..10       MOV       ?V10,#0x10
   \   0002D5   75..00       MOV       ?V11,#0x0
   \   0002D8   78..         MOV       R0,#?V10
   \   0002DA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002DD   8A82         MOV       DPL,R2
   \   0002DF   8B83         MOV       DPH,R3
   \   0002E1   E0           MOVX      A,@DPTR
   \   0002E2   FC           MOV       R4,A
   \   0002E3   A3           INC       DPTR
   \   0002E4   E0           MOVX      A,@DPTR
   \   0002E5   FD           MOV       R5,A
   \   0002E6   AA..         MOV       R2,?V6
   \   0002E8   AB..         MOV       R3,?V7
   \   0002EA   12....       LCALL     `??printi::?relay`; Banked call to: printi
   \   0002ED   740A         MOV       A,#0xa
   \   0002EF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002F2   8A..         MOV       ?V10,R2
   \   0002F4   8B..         MOV       ?V11,R3
   \   0002F6   E5..         MOV       A,?V4
   \   0002F8   25..         ADD       A,?V10
   \   0002FA   F5..         MOV       ?V4,A
   \   0002FC   E5..         MOV       A,?V5
   \   0002FE   35..         ADDC      A,?V11
   \   000300   F5..         MOV       ?V5,A
    167          				continue;
   \   000302   02....       LJMP      ??print_9 & 0xFFFF
    168          			}
    169          			if( *format == 'u' ) {
   \                     ??print_12:
   \   000305   85..82       MOV       DPL,?V2
   \   000308   85..83       MOV       DPH,?V3
   \   00030B   E0           MOVX      A,@DPTR
   \   00030C   6475         XRL       A,#0x75
   \   00030E   7077         JNZ       ??print_13
    170          				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   \   000310   85..82       MOV       DPL,?V8
   \   000313   85..83       MOV       DPH,?V9
   \   000316   E0           MOVX      A,@DPTR
   \   000317   F8           MOV       R0,A
   \   000318   A3           INC       DPTR
   \   000319   E0           MOVX      A,@DPTR
   \   00031A   F9           MOV       R1,A
   \   00031B   E8           MOV       A,R0
   \   00031C   FA           MOV       R2,A
   \   00031D   E9           MOV       A,R1
   \   00031E   FB           MOV       R3,A
   \   00031F   EA           MOV       A,R2
   \   000320   2402         ADD       A,#0x2
   \   000322   F8           MOV       R0,A
   \   000323   E4           CLR       A
   \   000324   3B           ADDC      A,R3
   \   000325   F9           MOV       R1,A
   \   000326   85..82       MOV       DPL,?V8
   \   000329   85..83       MOV       DPH,?V9
   \   00032C   E8           MOV       A,R0
   \   00032D   F0           MOVX      @DPTR,A
   \   00032E   A3           INC       DPTR
   \   00032F   E9           MOV       A,R1
   \   000330   F0           MOVX      @DPTR,A
   \   000331                ; Setup parameters for call to function printi
   \   000331   75..61       MOV       ?V10,#0x61
   \   000334   75..00       MOV       ?V11,#0x0
   \   000337   78..         MOV       R0,#?V10
   \   000339   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00033C   78..         MOV       R0,#?V0
   \   00033E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000341   8E..         MOV       ?V10,R6
   \   000343   8F..         MOV       ?V11,R7
   \   000345   78..         MOV       R0,#?V10
   \   000347   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00034A   E4           CLR       A
   \   00034B   F5..         MOV       ?V10,A
   \   00034D   F5..         MOV       ?V11,A
   \   00034F   78..         MOV       R0,#?V10
   \   000351   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000354   75..0A       MOV       ?V10,#0xa
   \   000357   75..00       MOV       ?V11,#0x0
   \   00035A   78..         MOV       R0,#?V10
   \   00035C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00035F   8A82         MOV       DPL,R2
   \   000361   8B83         MOV       DPH,R3
   \   000363   E0           MOVX      A,@DPTR
   \   000364   FC           MOV       R4,A
   \   000365   A3           INC       DPTR
   \   000366   E0           MOVX      A,@DPTR
   \   000367   FD           MOV       R5,A
   \   000368   AA..         MOV       R2,?V6
   \   00036A   AB..         MOV       R3,?V7
   \   00036C   12....       LCALL     `??printi::?relay`; Banked call to: printi
   \   00036F   740A         MOV       A,#0xa
   \   000371   12....       LCALL     ?DEALLOC_XSTACK8
   \   000374   8A..         MOV       ?V10,R2
   \   000376   8B..         MOV       ?V11,R3
   \   000378   E5..         MOV       A,?V4
   \   00037A   25..         ADD       A,?V10
   \   00037C   F5..         MOV       ?V4,A
   \   00037E   E5..         MOV       A,?V5
   \   000380   35..         ADDC      A,?V11
   \   000382   F5..         MOV       ?V5,A
    171          				continue;
   \   000384   02....       LJMP      ??print_9 & 0xFFFF
    172          			}
    173          			if( *format == 'c' ) {
   \                     ??print_13:
   \   000387   85..82       MOV       DPL,?V2
   \   00038A   85..83       MOV       DPH,?V3
   \   00038D   E0           MOVX      A,@DPTR
   \   00038E   6463         XRL       A,#0x63
   \   000390   6003         JZ        $+5
   \   000392   02....       LJMP      ??print_9 & 0xFFFF
    174          				/* char are converted to int then pushed on the stack */
    175          				scr[0] = (char)va_arg( args, int );
   \   000395   85..82       MOV       DPL,?V8
   \   000398   85..83       MOV       DPH,?V9
   \   00039B   E0           MOVX      A,@DPTR
   \   00039C   F8           MOV       R0,A
   \   00039D   A3           INC       DPTR
   \   00039E   E0           MOVX      A,@DPTR
   \   00039F   F583         MOV       DPH,A
   \   0003A1   8882         MOV       DPL,R0
   \   0003A3   E0           MOVX      A,@DPTR
   \   0003A4   F8           MOV       R0,A
   \   0003A5   A3           INC       DPTR
   \   0003A6   E0           MOVX      A,@DPTR
   \   0003A7   F9           MOV       R1,A
   \   0003A8   E8           MOV       A,R0
   \   0003A9   C0E0         PUSH      A
   \   0003AB   85..82       MOV       DPL,?XSP + 0
   \   0003AE   85..83       MOV       DPH,?XSP + 1
   \   0003B1   D0E0         POP       A
   \   0003B3   F0           MOVX      @DPTR,A
   \   0003B4   85..82       MOV       DPL,?V8
   \   0003B7   85..83       MOV       DPH,?V9
   \   0003BA   E0           MOVX      A,@DPTR
   \   0003BB   2402         ADD       A,#0x2
   \   0003BD   F8           MOV       R0,A
   \   0003BE   A3           INC       DPTR
   \   0003BF   E0           MOVX      A,@DPTR
   \   0003C0   3400         ADDC      A,#0x0
   \   0003C2   F9           MOV       R1,A
   \   0003C3   85..82       MOV       DPL,?V8
   \   0003C6   85..83       MOV       DPH,?V9
   \   0003C9   E8           MOV       A,R0
   \   0003CA   F0           MOVX      @DPTR,A
   \   0003CB   A3           INC       DPTR
   \   0003CC   E9           MOV       A,R1
   \   0003CD   F0           MOVX      @DPTR,A
    176          				scr[1] = '\0';
   \   0003CE   7401         MOV       A,#0x1
   \   0003D0   12....       LCALL     ?XSTACK_DISP0_8
   \   0003D3   7400         MOV       A,#0x0
   \   0003D5   F0           MOVX      @DPTR,A
    177          				pc += prints (out, scr, width, pad);
   \   0003D6                ; Setup parameters for call to function prints
   \   0003D6   78..         MOV       R0,#?V0
   \   0003D8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003DB   8E..         MOV       ?V10,R6
   \   0003DD   8F..         MOV       ?V11,R7
   \   0003DF   78..         MOV       R0,#?V10
   \   0003E1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003E4   7404         MOV       A,#0x4
   \   0003E6   12....       LCALL     ?XSTACK_DISP102_8
   \   0003E9   AA..         MOV       R2,?V6
   \   0003EB   AB..         MOV       R3,?V7
   \   0003ED   12....       LCALL     `??prints::?relay`; Banked call to: prints
   \   0003F0   7404         MOV       A,#0x4
   \   0003F2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003F5   8A..         MOV       ?V10,R2
   \   0003F7   8B..         MOV       ?V11,R3
   \   0003F9   E5..         MOV       A,?V4
   \   0003FB   25..         ADD       A,?V10
   \   0003FD   F5..         MOV       ?V4,A
   \   0003FF   E5..         MOV       A,?V5
   \   000401   35..         ADDC      A,?V11
   \   000403   F5..         MOV       ?V5,A
    178          				continue;
   \   000405   8019         SJMP      ??print_9
    179          			}
    180          		}
    181          		else {
    182          		out:
    183          			printchar (out, *format);
   \                     ??print_2:
   \   000407                ; Setup parameters for call to function printchar
   \   000407   85..82       MOV       DPL,?V2
   \   00040A   85..83       MOV       DPH,?V3
   \   00040D   E0           MOVX      A,@DPTR
   \   00040E   FC           MOV       R4,A
   \   00040F   7D00         MOV       R5,#0x0
   \   000411   AA..         MOV       R2,?V6
   \   000413   AB..         MOV       R3,?V7
   \   000415   12....       LCALL     `??printchar::?relay`; Banked call to: printchar
    184          			++pc;
   \   000418   05..         INC       ?V4
   \   00041A   E5..         MOV       A,?V4
   \   00041C   7002         JNZ       ??print_9
   \   00041E   05..         INC       ?V5
    185          		}
    186          	}
   \                     ??print_9:
   \   000420   85..82       MOV       DPL,?V2
   \   000423   85..83       MOV       DPH,?V3
   \   000426   A3           INC       DPTR
   \   000427   8582..       MOV       ?V2,DPL
   \   00042A   8583..       MOV       ?V3,DPH
   \   00042D   02....       LJMP      ??print_0 & 0xFFFF
    187          	if (out) **out = '\0';
   \                     ??print_1:
   \   000430   E5..         MOV       A,?V6
   \   000432   45..         ORL       A,?V7
   \   000434   6011         JZ        ??print_14
   \   000436   85..82       MOV       DPL,?V6
   \   000439   85..83       MOV       DPH,?V7
   \   00043C   E0           MOVX      A,@DPTR
   \   00043D   F8           MOV       R0,A
   \   00043E   A3           INC       DPTR
   \   00043F   E0           MOVX      A,@DPTR
   \   000440   F583         MOV       DPH,A
   \   000442   8882         MOV       DPL,R0
   \   000444   7400         MOV       A,#0x0
   \   000446   F0           MOVX      @DPTR,A
    188          	va_end( args );
    189          	return pc;
   \                     ??print_14:
   \   000447   AA..         MOV       R2,?V4
   \   000449   AB..         MOV       R3,?V5
   \   00044B   7402         MOV       A,#0x2
   \   00044D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000450   7F0E         MOV       R7,#0xe
   \   000452   02....       LJMP      ?BANKED_LEAVE_XDATA
    190          }
    191          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    192          int printf(const char *format, ...)
   \                     printf:
    193          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    194                  va_list args;
    195                  
    196                  va_start( args, format );
   \   00000E   740C         MOV       A,#0xc
   \   000010   12....       LCALL     ?XSTACK_DISP100_8
   \   000013   85..82       MOV       DPL,?XSP + 0
   \   000016   85..83       MOV       DPH,?XSP + 1
   \   000019   E8           MOV       A,R0
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   A3           INC       DPTR
   \   00001C   E9           MOV       A,R1
   \   00001D   F0           MOVX      @DPTR,A
    197                  return print( 0, format, args );
   \   00001E                ; Setup parameters for call to function print
   \   00001E   A8..         MOV       R0,?XSP + 0
   \   000020   A9..         MOV       R1,?XSP + 1
   \   000022   88..         MOV       ?V0,R0
   \   000024   89..         MOV       ?V1,R1
   \   000026   78..         MOV       R0,#?V0
   \   000028   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002B   EE           MOV       A,R6
   \   00002C   FC           MOV       R4,A
   \   00002D   EF           MOV       A,R7
   \   00002E   FD           MOV       R5,A
   \   00002F   7A00         MOV       R2,#0x0
   \   000031   7B00         MOV       R3,#0x0
   \   000033   12....       LCALL     `??print::?relay`; Banked call to: print
   \   000036   7402         MOV       A,#0x2
   \   000038   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003B   7402         MOV       A,#0x2
   \   00003D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000040   7F02         MOV       R7,#0x2
   \   000042   02....       LJMP      ?BANKED_LEAVE_XDATA
    198          }
    199          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    200          int sprintf(char *out, const char *format, ...)
   \                     sprintf:
    201          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   EC           MOV       A,R4
   \   000015   FE           MOV       R6,A
   \   000016   ED           MOV       A,R5
   \   000017   FF           MOV       R7,A
    202                  va_list args;
    203                  
    204                  va_start( args, format );
   \   000018   740E         MOV       A,#0xe
   \   00001A   12....       LCALL     ?XSTACK_DISP100_8
   \   00001D   85..82       MOV       DPL,?XSP + 0
   \   000020   85..83       MOV       DPH,?XSP + 1
   \   000023   E8           MOV       A,R0
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   E9           MOV       A,R1
   \   000027   F0           MOVX      @DPTR,A
    205                  return print( &out, format, args );
   \   000028                ; Setup parameters for call to function print
   \   000028   A8..         MOV       R0,?XSP + 0
   \   00002A   A9..         MOV       R1,?XSP + 1
   \   00002C   88..         MOV       ?V0,R0
   \   00002E   89..         MOV       ?V1,R1
   \   000030   78..         MOV       R0,#?V0
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   EE           MOV       A,R6
   \   000036   FC           MOV       R4,A
   \   000037   EF           MOV       A,R7
   \   000038   FD           MOV       R5,A
   \   000039   7404         MOV       A,#0x4
   \   00003B   12....       LCALL     ?XSTACK_DISP101_8
   \   00003E   12....       LCALL     `??print::?relay`; Banked call to: print
   \   000041   7402         MOV       A,#0x2
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
   \   000046   7404         MOV       A,#0x4
   \   000048   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004B   7F02         MOV       R7,#0x2
   \   00004D   02....       LJMP      ?BANKED_LEAVE_XDATA
    206          }

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "(null)">`:
   \   000000   286E756C     DB "(null)"
   \            6C2900  
    207          
    208          #ifdef TEST_PRINTF
    209          int main(void)
    210          {
    211          	char *ptr = "Hello world!";
    212          	char *np = 0;
    213          	int i = 5;
    214          	unsigned int bs = sizeof(int)*8;
    215          	int mi;
    216          	//char buf[80];
    217          
    218          	mi = (1 << (bs-1)) + 1;
    219          	printf("%s\n", ptr);
    220          	printf("printf test\n");
    221          	printf("%s is null pointer\n", np);
    222          	printf("%d = 5\n", i);
    223          	printf("%d = - max int\n", mi);
    224          	printf("char %c = 'a'\n", 'a');
    225          	printf("hex %x = ff\n", 0xff);
    226          	printf("hex %02x = 00\n", 0);
    227          	printf("signed %d = unsigned %u = hex %x\n", -3, -3, -3);
    228          	printf("%d %s(s)%", 0, "message");
    229          	printf("\n");
    230          	printf("%d %s(s) with %%\n", 0, "message");
    231          	sprintf(buf, "justif: \"%-10s\"\n", "left"); printf("%s", buf);
    232          	sprintf(buf, "justif: \"%10s\"\n", "right"); printf("%s", buf);
    233          	sprintf(buf, " 3: %04d zero padded\n", 3); printf("%s", buf);
    234          	sprintf(buf, " 3: %-4d left justif.\n", 3); printf("%s", buf);
    235          	sprintf(buf, " 3: %4d right justif.\n", 3); printf("%s", buf);
    236          	sprintf(buf, "-3: %04d zero padded\n", -3); printf("%s", buf);
    237          	sprintf(buf, "-3: %-4d left justif.\n", -3); printf("%s", buf);
    238          	sprintf(buf, "-3: %4d right justif.\n", -3); printf("%s", buf);
    239          
    240          	return 0;
    241          }
    242          
    243          /*
    244           * if you compile this file with
    245           *   gcc -Wall $(YOUR_C_OPTIONS) -DTEST_PRINTF -c printf.c
    246           * you will get a normal warning:
    247           *   printf.c:214: warning: spurious trailing `%' in format
    248           * this line is testing an invalid % at the end of the format string.
    249           *
    250           * this should display (on 32bit int machine) :
    251           *
    252           * Hello world!
    253           * printf test
    254           * (null) is null pointer
    255           * 5 = 5
    256           * -2147483647 = - max int
    257           * char a = 'a'
    258           * hex ff = ff
    259           * hex 00 = 00
    260           * signed -3 = unsigned 4294967293 = hex fffffffd
    261           * 0 message(s)
    262           * 0 message(s) with %
    263           * justif: "left      "
    264           * justif: "     right"
    265           *  3: 0003 zero padded
    266           *  3: 3    left justif.
    267           *  3:    3 right justif.
    268           * -3: -003 zero padded
    269           * -3: -3   left justif.
    270           * -3:   -3 right justif.
    271           */
    272          
    273          #endif

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     50   print
        0     24   -> printchar
        0     34   -> printi
        0     28   -> prints
      1     42   printchar
        0     10   -> putchar
      0     14   printf
        0     14   -> print
      1     70   printi
        0     32   -> printchar
        0     36   -> prints
      0     54   prints
        0     18   -> printchar
      3     11   putchar
        2      1   -> HalUARTWrite
      0     16   sprintf
        0     16   -> print


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?<Constant "(null)">
    1109  print
      77  printchar
      69  printf
     477  printi
     269  prints
      46  putchar
      80  sprintf
      42  -- Other

 
 2 127 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
     7 bytes in segment XDATA_ROM_C
 
    42 bytes of CODE     memory
     7 bytes of CONST    memory
 2 127 bytes of HUGECODE memory

Errors: none
Warnings: none
