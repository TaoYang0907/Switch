###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               21/Jul/2020  11:19:20
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack 3.0.2\Components\stack\zcl\zcl_general.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW9636.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\stack\zcl\zcl_general.c" -D BDB_REPORTING -D SECURE=1
#        -D TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK
#        -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
#        xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_ON_OFF -D ZCL_GROUPS -D ZCL_REPORT -D ZCL_REPORTING_DEVICE -D
#        ZCL_REPORT_DESTINATION_DEVICE -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\zcl_general.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj\zcl_general.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\stack\zcl\zcl_general.c
      1          /**************************************************************************************************
      2            Filename:       zcl_general.c
      3            Revised:        $Date: 2015-09-10 09:36:48 -0700 (Thu, 10 Sep 2015) $
      4            Revision:       $Revision: 44493 $
      5          
      6            Description:    Zigbee Cluster Library - General.  This application receives all
      7                            ZCL messages and initially parses them before passing to application.
      8          
      9          
     10            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          #include "ZComDef.h"
     45          #include "zcl.h"
     46          #include "zcl_general.h"
     47          //#include "ZDApp.h"
     48          
     49          #if defined ( INTER_PAN )
     50            #include "stub_aps.h"
     51          #endif
     52          #include "bdb.h"
     53          
     54          /*********************************************************************
     55           * MACROS
     56           */
     57          #define locationTypeAbsolute( a )          ( (a) & LOCATION_TYPE_ABSOLUTE )
     58          #define locationType2D( a )                ( (a) & LOCATION_TYPE_2_D )
     59          #define locationTypeCoordinateSystem( a )  ( (a) & LOCATION_TYPE_COORDINATE_SYSTEM )
     60          
     61          #ifdef ZCL_SCENES
     62          #define zclGeneral_ScenesRemaingCapacity() ( ZCL_GEN_MAX_SCENES - zclGeneral_CountAllScenes() )
     63          #endif // ZCL_SCENES
     64          
     65          /*********************************************************************
     66           * CONSTANTS
     67           */
     68          
     69          /*********************************************************************
     70           * TYPEDEFS
     71           */
     72          typedef struct zclGenCBRec
     73          {
     74            struct zclGenCBRec        *next;
     75            uint8                     endpoint; // Used to link it into the endpoint descriptor
     76            zclGeneral_AppCallbacks_t *CBs;     // Pointer to Callback function
     77          } zclGenCBRec_t;
     78          
     79          typedef struct zclGenSceneItem
     80          {
     81            struct zclGenSceneItem    *next;
     82            uint8                     endpoint; // Used to link it into the endpoint descriptor
     83            zclGeneral_Scene_t        scene;    // Scene info
     84          } zclGenSceneItem_t;
     85          
     86          typedef struct zclGenAlarmItem
     87          {
     88            struct zclGenAlarmItem    *next;
     89            uint8                     endpoint; // Used to link it into the endpoint descriptor
     90            zclGeneral_Alarm_t        alarm;    // Alarm info
     91          } zclGenAlarmItem_t;
     92          
     93          // Scene NV types
     94          typedef struct
     95          {
     96            uint16                    numRecs;
     97          } nvGenScenesHdr_t;
     98          
     99          typedef struct zclGenSceneNVItem
    100          {
    101            uint8                     endpoint;
    102            zclGeneral_Scene_t        scene;
    103          } zclGenSceneNVItem_t;
    104          
    105          /*********************************************************************
    106           * GLOBAL VARIABLES
    107           */
    108          
    109          /*********************************************************************
    110           * GLOBAL FUNCTIONS
    111           */
    112          
    113          /*********************************************************************
    114           * LOCAL VARIABLES
    115           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    116          static zclGenCBRec_t *zclGenCBs = (zclGenCBRec_t *)NULL;
   \                     zclGenCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          static uint8 zclGenPluginRegisted = FALSE;
   \                     zclGenPluginRegisted:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    118          
    119          #if defined( ZCL_SCENES )
    120            #if !defined ( ZCL_STANDALONE )
    121              static zclGenSceneItem_t *zclGenSceneTable = (zclGenSceneItem_t *)NULL;
    122            #endif
    123          #endif // ZCL_SCENES
    124          
    125          #ifdef ZCL_ALARMS
    126          static zclGenAlarmItem_t *zclGenAlarmTable = (zclGenAlarmItem_t *)NULL;
    127          #endif // ZCL_ALARMS
    128          
    129          /*********************************************************************
    130           * LOCAL FUNCTIONS
    131           */
    132          static ZStatus_t zclGeneral_HdlIncoming( zclIncoming_t *pInMsg );
    133          static ZStatus_t zclGeneral_HdlInSpecificCommands( zclIncoming_t *pInMsg );
    134          static zclGeneral_AppCallbacks_t *zclGeneral_FindCallbacks( uint8 endpoint );
    135          
    136          // Device Configuration and Installation clusters
    137          #ifdef ZCL_BASIC
    138          static ZStatus_t zclGeneral_ProcessInBasic( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    139          #endif // ZCL_BASIC
    140          
    141          #ifdef ZCL_IDENTIFY
    142          static ZStatus_t zclGeneral_ProcessInIdentity( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    143          #endif // ZCL_IDENTIFY
    144          
    145          // Groups and Scenes clusters
    146          #ifdef ZCL_GROUPS
    147          static ZStatus_t zclGeneral_ProcessInGroupsServer( zclIncoming_t *pInMsg );
    148          static ZStatus_t zclGeneral_ProcessInGroupsClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    149          static ZStatus_t zclGeneral_AddGroup( uint8 endPoint, aps_Group_t *group, uint8 *pData );
    150          #endif // ZCL_GROUPS
    151          
    152          #ifdef ZCL_SCENES
    153          static ZStatus_t zclGeneral_ProcessInScenesServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    154          static ZStatus_t zclGeneral_ProcessInScenesClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    155          #endif // ZCL_SCENES
    156          
    157          // On/Off and Level Control Configuration clusters
    158          #ifdef ZCL_ON_OFF
    159          static ZStatus_t zclGeneral_ProcessInOnOff( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    160          #endif // ZCL_ONOFF
    161          
    162          #ifdef ZCL_LEVEL_CTRL
    163          static ZStatus_t zclGeneral_ProcessInLevelControl( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    164          #endif // ZCL_LEVEL_CTRL
    165          
    166          // Alarms cluster
    167          #ifdef ZCL_ALARMS
    168          static ZStatus_t zclGeneral_ProcessInAlarmsServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    169          static ZStatus_t zclGeneral_ProcessInAlarmsClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    170          #endif // ZCL_ALARMS
    171          
    172          // Location cluster
    173          #ifdef ZCL_LOCATION
    174          static ZStatus_t zclGeneral_ProcessInLocationServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    175          static ZStatus_t zclGeneral_ProcessInLocationClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    176          #endif // ZCL_LOCATION
    177          
    178          #ifdef ZCL_SCENES
    179            #if !defined ( ZCL_STANDALONE )
    180              static uint8 zclGeneral_ScenesInitNV( void );
    181              static void zclGeneral_ScenesSetDefaultNV( void );
    182              static void zclGeneral_ScenesWriteNV( void );
    183              static uint16 zclGeneral_ScenesRestoreFromNV( void );
    184            #endif
    185          #endif // ZCL_SCENES
    186          
    187          /*********************************************************************
    188           * @fn      zclGeneral_RegisterCmdCallbacks
    189           *
    190           * @brief   Register an applications command callbacks
    191           *
    192           * @param   endpoint - application's endpoint
    193           * @param   callbacks - pointer to the callback record.
    194           *
    195           * @return  ZMemError if not able to allocate
    196           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    197          ZStatus_t zclGeneral_RegisterCmdCallbacks( uint8 endpoint, zclGeneral_AppCallbacks_t *callbacks )
   \                     zclGeneral_RegisterCmdCallbacks:
    198          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    199            zclGenCBRec_t *pNewItem;
    200            zclGenCBRec_t *pLoop;
    201          
    202            // Register as a ZCL Plugin
    203            if ( zclGenPluginRegisted == FALSE )
   \   00000B   90....       MOV       DPTR,#zclGenPluginRegisted
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   7021         JNZ       ??zclGeneral_RegisterCmdCallbacks_0
    204            {
    205              zcl_registerPlugin( ZCL_CLUSTER_ID_GEN_BASIC,
    206                                  ZCL_CLUSTER_ID_GEN_MULTISTATE_VALUE_BASIC,
    207                                  zclGeneral_HdlIncoming );
   \   000011                ; Setup parameters for call to function zcl_registerPlugin
   \   000011   75....       MOV       ?V2,#`??zclGeneral_HdlIncoming::?relay` & 0xff
   \   000014   75....       MOV       ?V3,#(`??zclGeneral_HdlIncoming::?relay` >> 8) & 0xff
   \   000017   78..         MOV       R0,#?V2
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   7C14         MOV       R4,#0x14
   \   00001E   7D00         MOV       R5,#0x0
   \   000020   7A00         MOV       R2,#0x0
   \   000022   7B00         MOV       R3,#0x0
   \   000024   12....       LCALL     `??zcl_registerPlugin::?relay`; Banked call to: zcl_registerPlugin
   \   000027   7402         MOV       A,#0x2
   \   000029   12....       LCALL     ?DEALLOC_XSTACK8
    208          
    209          #ifdef ZCL_SCENES
    210              // Initialize the Scenes Table
    211              zclGeneral_ScenesInit();
    212          #endif // ZCL_SCENES
    213          
    214              zclGenPluginRegisted = TRUE;
   \   00002C   90....       MOV       DPTR,#zclGenPluginRegisted
   \   00002F   7401         MOV       A,#0x1
   \   000031   F0           MOVX      @DPTR,A
    215            }
    216          
    217            // Fill in the new profile list
    218            pNewItem = zcl_mem_alloc( sizeof( zclGenCBRec_t ) );
   \                     ??zclGeneral_RegisterCmdCallbacks_0:
   \   000032                ; Setup parameters for call to function osal_mem_alloc
   \   000032   7A05         MOV       R2,#0x5
   \   000034   7B00         MOV       R3,#0x0
   \   000036   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000039   8A..         MOV       ?V2,R2
   \   00003B   8B..         MOV       ?V3,R3
   \   00003D   A8..         MOV       R0,?V2
   \   00003F   A9..         MOV       R1,?V3
    219            if ( pNewItem == NULL )
   \   000041   EA           MOV       A,R2
   \   000042   49           ORL       A,R1
   \   000043   7004         JNZ       ??zclGeneral_RegisterCmdCallbacks_1
    220              return (ZMemError);
   \   000045   7910         MOV       R1,#0x10
   \   000047   8047         SJMP      ??zclGeneral_RegisterCmdCallbacks_2
    221          
    222            pNewItem->next = (zclGenCBRec_t *)NULL;
   \                     ??zclGeneral_RegisterCmdCallbacks_1:
   \   000049   8A82         MOV       DPL,R2
   \   00004B   8B83         MOV       DPH,R3
   \   00004D   E4           CLR       A
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   A3           INC       DPTR
   \   000050   F0           MOVX      @DPTR,A
    223            pNewItem->endpoint = endpoint;
   \   000051   8A82         MOV       DPL,R2
   \   000053   8B83         MOV       DPH,R3
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   E5..         MOV       A,?V0
   \   000059   F0           MOVX      @DPTR,A
    224            pNewItem->CBs = callbacks;
   \   00005A   8A82         MOV       DPL,R2
   \   00005C   8B83         MOV       DPH,R3
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   EE           MOV       A,R6
   \   000062   F0           MOVX      @DPTR,A
   \   000063   A3           INC       DPTR
   \   000064   EF           MOV       A,R7
   \   000065   F0           MOVX      @DPTR,A
    225          
    226            // Find spot in list
    227            if (  zclGenCBs == NULL )
   \   000066   90....       MOV       DPTR,#zclGenCBs
   \   000069   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00006C   EA           MOV       A,R2
   \   00006D   4B           ORL       A,R3
   \   00006E   90....       MOV       DPTR,#zclGenCBs
   \   000071   6018         JZ        ??zclGeneral_RegisterCmdCallbacks_3
    228            {
    229              zclGenCBs = pNewItem;
    230            }
    231            else
    232            {
    233              // Look for end of list
    234              pLoop = zclGenCBs;
   \   000073   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000076   8003         SJMP      ??zclGeneral_RegisterCmdCallbacks_4
    235              while ( pLoop->next != NULL )
    236                pLoop = pLoop->next;
   \                     ??zclGeneral_RegisterCmdCallbacks_5:
   \   000078   EA           MOV       A,R2
   \   000079   FC           MOV       R4,A
   \   00007A   EB           MOV       A,R3
   \                     ??zclGeneral_RegisterCmdCallbacks_4:
   \   00007B   FD           MOV       R5,A
   \   00007C   8C82         MOV       DPL,R4
   \   00007E   8D83         MOV       DPH,R5
   \   000080   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000083   EA           MOV       A,R2
   \   000084   4B           ORL       A,R3
   \   000085   70F1         JNZ       ??zclGeneral_RegisterCmdCallbacks_5
    237          
    238              // Put new item at end of list
    239              pLoop->next = pNewItem;
   \   000087   8C82         MOV       DPL,R4
   \   000089   8D83         MOV       DPH,R5
    240            }
   \                     ??zclGeneral_RegisterCmdCallbacks_3:
   \   00008B   12....       LCALL     ?Subroutine24 & 0xFFFF
    241          
    242            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_106:
   \   00008E   7900         MOV       R1,#0x0
   \                     ??zclGeneral_RegisterCmdCallbacks_2:
   \   000090   02....       LJMP      ??Subroutine45_0 & 0xFFFF
    243          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E8           MOV       A,R0
   \   000001                REQUIRE ??Subroutine51_0
   \   000001                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET
    244          
    245          #ifdef ZCL_IDENTIFY
    246          /*********************************************************************
    247           * @fn      zclGeneral_SendIdentify
    248           *
    249           * @brief   Call to send out an Identify Command
    250           *
    251           * @param   srcEP - Sending application's endpoint
    252           * @param   dstAddr - where you want the message to go
    253           * @param   identifyTime - how long the device will continue to identify itself (in seconds)
    254           * @param   seqNum - identification number for the transaction
    255           *
    256           * @return  ZStatus_t
    257           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    258          ZStatus_t zclGeneral_SendIdentify( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendIdentify:
    259                                             uint16 identifyTime, uint8 disableDefaultRsp, uint8 seqNum )
    260          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    261            uint8 buf[2];
    262          
    263            buf[0] = LO_UINT16( identifyTime );
   \   00000C   EC           MOV       A,R4
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
    264            buf[1] = HI_UINT16( identifyTime );
   \   000014   7401         MOV       A,#0x1
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ?Subroutine23 & 0xFFFF
    265          
    266            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    267                                    COMMAND_IDENTIFY, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    268                                    disableDefaultRsp, 0, seqNum, 2, buf );
   \                     ??CrossCallReturnLabel_43:
   \   00001C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001F   75..02       MOV       ?V0,#0x2
   \   000022   75..00       MOV       ?V1,#0x0
   \   000025   78..         MOV       R0,#?V0
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002A   7411         MOV       A,#0x11
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000035   E4           CLR       A
   \   000036   F5..         MOV       ?V0,A
   \   000038   78..         MOV       R0,#?V0
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   7413         MOV       A,#0x13
   \   00003F   12....       LCALL     ?XSTACK_DISP0_8
   \   000042   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000045   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000048   75..00       MOV       ?V0,#0x0
   \   00004B   78..         MOV       R0,#?V0
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000050   75..01       MOV       ?V0,#0x1
   \   000053                REQUIRE ?Subroutine1
   \   000053                ; // Fall through to label ?Subroutine1
    269          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   78..         MOV       R0,#?V0
   \   000002   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000005   75..00       MOV       ?V0,#0x0
   \   000008   78..         MOV       R0,#?V0
   \   00000A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00000D   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000010   12....       LCALL     ?DEALLOC_XSTACK8
   \   000013   7402         MOV       A,#0x2
   \   000015   12....       LCALL     ?DEALLOC_XSTACK8
   \   000018                REQUIRE ??Subroutine38_0
   \   000018                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   ED           MOV       A,R5
   \   000001   F0           MOVX      @DPTR,A
   \   000002                ; Setup parameters for call to function zcl_SendCommand
   \   000002                ; Setup parameters for call to function zcl_SendCommand
   \   000002   A8..         MOV       R0,?XSP + 0
   \   000004   A9..         MOV       R1,?XSP + 1
   \   000006   88..         MOV       ?V0,R0
   \   000008   89..         MOV       ?V1,R1
   \   00000A   78..         MOV       R0,#?V0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   7C03         MOV       R4,#0x3
   \   000002                REQUIRE ??Subroutine46_0
   \   000002                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   7D00         MOV       R5,#0x0
   \   000002   EE           MOV       A,R6
   \   000003   F9           MOV       R1,A
   \   000004                REQUIRE ??Subroutine47_0
   \   000004                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000003   740B         MOV       A,#0xb
   \   000005   22           RET
    270          
    271          /*********************************************************************
    272           * @fn      zclGeneral_SendIdentifyEZModeInvoke
    273           *
    274           * @brief   Call to send out an Identify EZ-Mode Invoke Command
    275           *
    276           * @param   srcEP - Sending application's endpoint
    277           * @param   dstAddr - where you want the message to go
    278           * @param   action - describes the EZ-Mode action to be performed
    279           * @param   seqNum - identification number for the transaction
    280           *
    281           * @return  ZStatus_t
    282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    283          ZStatus_t zclGeneral_SendIdentifyEZModeInvoke( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendIdentifyEZModeInvoke:
    284                                                         uint8 action, uint8 disableDefaultRsp, uint8 seqNum )
    285          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EC           MOV       A,R4
    286            uint8 buf[1];
    287          
    288            buf[0] = action;
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   12....       LCALL     ??Subroutine39_0 & 0xFFFF
    289          
    290            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    291                                    COMMAND_IDENTIFY_EZMODE_INVOKE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    292                                    disableDefaultRsp, 0, seqNum, 1, buf );
   \                     ??CrossCallReturnLabel_64:
   \   000016   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000019   75..01       MOV       ?V2,#0x1
   \   00001C   75..00       MOV       ?V3,#0x0
   \   00001F   78..         MOV       R0,#?V2
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000024   7411         MOV       A,#0x11
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00002F   E4           CLR       A
   \   000030   F5..         MOV       ?V2,A
   \   000032   78..         MOV       R0,#?V2
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   ED           MOV       A,R5
   \   000038   F5..         MOV       ?V1,A
   \   00003A   78..         MOV       R0,#?V1
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003F   75..00       MOV       ?V1,#0x0
   \   000042   78..         MOV       R0,#?V1
   \   000044   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000047   75..01       MOV       ?V1,#0x1
   \   00004A   78..         MOV       R0,#?V1
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004F   75..02       MOV       ?V1,#0x2
   \   000052   78..         MOV       R0,#?V1
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000057   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00005A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005D   7401         MOV       A,#0x1
   \   00005F   02....       LJMP      ??Subroutine44_0 & 0xFFFF
    293          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001   A8..         MOV       R0,?XSP + 0
   \   000003   A9..         MOV       R1,?XSP + 1
   \   000005   88..         MOV       ?V2,R0
   \   000007   89..         MOV       ?V3,R1
   \   000009   78..         MOV       R0,#?V2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V1,A
   \   000003   78..         MOV       R0,#?V1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine45_0
   \   000003                ; // Fall through to label ??Subroutine45_0
    294          
    295          /*********************************************************************
    296           * @fn      zclGeneral_SendIdentifyUpdateCommState
    297           *
    298           * @brief   Call to send out an Identify Update Commission State Command
    299           *
    300           * @param   srcEP - Sending application's endpoint
    301           * @param   dstAddr - where you want the message to go
    302           * @param   action - describes the EZ-Mode action to be performed
    303           * @param   commissionStateMask - updates the device's commission state
    304           * @param   seqNum - identification number for the transaction
    305           *
    306           * @return  ZStatus_t
    307           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    308          ZStatus_t zclGeneral_SendIdentifyUpdateCommState( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendIdentifyUpdateCommState:
    309                                                            uint8 action, uint8 commissionStateMask,
    310                                                            uint8 disableDefaultRsp, uint8 seqNum )
    311          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EC           MOV       A,R4
    312            uint8 buf[2];
    313          
    314            buf[0] = action;
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
    315            buf[1] = commissionStateMask;
   \   000014   7401         MOV       A,#0x1
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   ED           MOV       A,R5
   \   00001A   12....       LCALL     ??Subroutine39_0 & 0xFFFF
    316          
    317            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    318                                    COMMAND_IDENTIFY_UPDATE_COMMISSION_STATE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    319                                    disableDefaultRsp, 0, seqNum, 2, buf );
   \                     ??CrossCallReturnLabel_65:
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000020   75..02       MOV       ?V2,#0x2
   \   000023   75..00       MOV       ?V3,#0x0
   \   000026   78..         MOV       R0,#?V2
   \   000028   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002B   7413         MOV       A,#0x13
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000036   E4           CLR       A
   \   000037   F5..         MOV       ?V2,A
   \   000039   78..         MOV       R0,#?V2
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003E   7415         MOV       A,#0x15
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000049   75..00       MOV       ?V1,#0x0
   \   00004C   78..         MOV       R0,#?V1
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000051   75..01       MOV       ?V1,#0x1
   \   000054   78..         MOV       R0,#?V1
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000059   75..03       MOV       ?V1,#0x3
   \   00005C   78..         MOV       R0,#?V1
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000061   7C03         MOV       R4,#0x3
   \   000063   7D00         MOV       R5,#0x0
   \   000065   EE           MOV       A,R6
   \   000066   F9           MOV       R1,A
   \   000067   02....       LJMP      ?Subroutine0 & 0xFFFF
    320          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000003   12....       LCALL     ?DEALLOC_XSTACK8
   \   000006   7402         MOV       A,#0x2
   \   000008                REQUIRE ??Subroutine44_0
   \   000008                ; // Fall through to label ??Subroutine44_0
    321          
    322          #ifdef ZCL_LIGHT_LINK_ENHANCE
    323          /*********************************************************************
    324           * @fn      zclGeneral_SendIdentifyTriggerEffect
    325           *
    326           * @brief   Call to send out a Trigger Effect Command
    327           *
    328           * @param   srcEP - Sending application's endpoint
    329           * @param   dstAddr - where you want the message to go
    330           * @param   effectId - identify effect to use
    331           * @param   effectVariant - which variant of effect to be triggered
    332           * @param   disableDefaultRsp - whether to disable the Default Response command
    333           * @param   seqNum - identification number for the transaction
    334           *
    335           * @return  ZStatus_t
    336           */
    337          ZStatus_t zclGeneral_SendIdentifyTriggerEffect( uint8 srcEP, afAddrType_t *dstAddr,
    338                                                          uint8 effectId, uint8 effectVariant,
    339                                                          uint8 disableDefaultRsp, uint8 seqNum )
    340          {
    341            uint8 buf[2];
    342          
    343            buf[0] = effectId;
    344            buf[1] = effectVariant;
    345          
    346            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    347                                    COMMAND_IDENTIFY_TRIGGER_EFFECT, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    348                                    disableDefaultRsp, 0, seqNum, 2, buf );
    349          }
    350          #endif // ZCL_LIGHT_LINK_ENHANCE
    351          
    352          /*********************************************************************
    353           * @fn      zclGeneral_SendIdentifyQueryResponse
    354           *
    355           * @brief   Call to send out an Identify Query Response Command
    356           *
    357           * @param   srcEP - Sending application's endpoint
    358           * @param   dstAddr - where you want the message to go
    359           * @param   timeout - how long the device will continue to identify itself (in seconds)
    360           * @param   seqNum - identification number for the transaction
    361           *
    362           * @return  ZStatus_t
    363           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    364          ZStatus_t zclGeneral_SendIdentifyQueryResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendIdentifyQueryResponse:
    365                                                          uint16 timeout, uint8 disableDefaultRsp, uint8 seqNum )
    366          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    367            uint8 buf[2];
    368          
    369            buf[0] = LO_UINT16( timeout );
   \   00000C   EC           MOV       A,R4
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
    370            buf[1] = HI_UINT16( timeout );
   \   000014   7401         MOV       A,#0x1
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ?Subroutine23 & 0xFFFF
    371          
    372            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    373                                    COMMAND_IDENTIFY_QUERY_RSP, TRUE,
    374                                    ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, 2, buf );
   \                     ??CrossCallReturnLabel_44:
   \   00001C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001F   75..02       MOV       ?V0,#0x2
   \   000022   75..00       MOV       ?V1,#0x0
   \   000025   78..         MOV       R0,#?V0
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002A   7411         MOV       A,#0x11
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000035   E4           CLR       A
   \   000036   F5..         MOV       ?V0,A
   \   000038   78..         MOV       R0,#?V0
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   7413         MOV       A,#0x13
   \   00003F   12....       LCALL     ?XSTACK_DISP0_8
   \   000042   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000045   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000048   75..01       MOV       ?V0,#0x1
   \   00004B   78..         MOV       R0,#?V0
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000050   02....       LJMP      ?Subroutine1 & 0xFFFF
    375          }
    376          #endif // ZCL_IDENTIFY
    377          
    378          #ifdef ZCL_GROUPS
    379          /*********************************************************************
    380           * @fn      zclGeneral_SendGroupRequest
    381           *
    382           * @brief   Send a Group Request to a device.  You can also use the
    383           *          appropriate macro.
    384           *
    385           * @param   srcEP - Sending Apps endpoint
    386           * @param   dstAddr - where to send the request
    387           * @param   cmd - one of the following:
    388           *              COMMAND_GROUP_VIEW
    389           *              COMMAND_GROUP_REMOVE
    390           * @param   groupID -
    391           *
    392           * @return  ZStatus_t
    393           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    394          ZStatus_t zclGeneral_SendGroupRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendGroupRequest:
    395                                                 uint8 cmd, uint16 groupID, uint8 disableDefaultRsp, uint8 seqNum )
    396          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   740E         MOV       A,#0xe
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?Subroutine18 & 0xFFFF
    397            uint8 buf[2];
    398          
    399            buf[0] = LO_UINT16( groupID );
   \                     ??CrossCallReturnLabel_36:
   \   000014   85..82       MOV       DPL,?XSP + 0
   \   000017   85..83       MOV       DPH,?XSP + 1
   \   00001A   F0           MOVX      @DPTR,A
    400            buf[1] = HI_UINT16( groupID );
   \   00001B   7401         MOV       A,#0x1
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   12....       LCALL     ?Subroutine21 & 0xFFFF
    401          
    402            return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    403                                      cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    404                                      disableDefaultRsp, 0, seqNum, 2, buf ) );
   \                     ??CrossCallReturnLabel_62:
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000026   75..02       MOV       ?V2,#0x2
   \   000029   75..00       MOV       ?V3,#0x0
   \   00002C   78..         MOV       R0,#?V2
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   7414         MOV       A,#0x14
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003C   E4           CLR       A
   \   00003D   F5..         MOV       ?V2,A
   \   00003F   78..         MOV       R0,#?V2
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000044   ED           MOV       A,R5
   \   000045   F5..         MOV       ?V1,A
   \   000047   78..         MOV       R0,#?V1
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004C   75..00       MOV       ?V1,#0x0
   \   00004F   78..         MOV       R0,#?V1
   \   000051   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000054   75..01       MOV       ?V1,#0x1
   \   000057   78..         MOV       R0,#?V1
   \   000059   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005C   EC           MOV       A,R4
   \   00005D   F5..         MOV       ?V1,A
   \   00005F   78..         MOV       R0,#?V1
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000064   7C04         MOV       R4,#0x4
   \   000066   7D00         MOV       R5,#0x0
   \   000068   A9..         MOV       R1,?V0
   \   00006A   02....       LJMP      ?Subroutine0 & 0xFFFF
    405          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E9           MOV       A,R1
   \   000001                REQUIRE ??Subroutine39_0
   \   000001                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   22           RET
    406          
    407          /*********************************************************************
    408           * @fn      zclGeneral_SendAddGroupRequest
    409           *
    410           * @brief   Send the Add Group Request to a device
    411           *
    412           * @param   srcEP - Sending Apps endpoint
    413           * @param   dstAddr - where to send the request
    414           * @param   cmd - one of the following:
    415           *                COMMAND_GROUP_ADD
    416           *                COMMAND_GROUP_ADD_IF_IDENTIFYING
    417           * @param   groupID - pointer to the group structure
    418           * @param   groupName - pointer to Group Name.  This is a Zigbee
    419           *          string data type, so the first byte is the length of the
    420           *          name (in bytes), then the name.
    421           *
    422           * @return  ZStatus_t
    423           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    424          ZStatus_t zclGeneral_SendAddGroupRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendAddGroupRequest:
    425                                                    uint8 cmd, uint16 groupID, uint8 *groupName,
    426                                                    uint8 disableDefaultRsp, uint8 seqNum )
    427          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V7,R1
   \   00000C   8A..         MOV       ?V10,R2
   \   00000E   8B..         MOV       ?V11,R3
   \   000010   8C..         MOV       ?V9,R4
   \   000012   8D..         MOV       ?V8,R5
   \   000014   7417         MOV       A,#0x17
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ?Subroutine14 & 0xFFFF
    428            uint8 *buf;
    429            uint8 *pBuf;
    430            uint8 len;
    431            ZStatus_t status;
    432          
    433            len = 2;    // Group ID
    434            len += groupName[0] + 1;  // String + 1 for length
   \                     ??CrossCallReturnLabel_22:
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   2403         ADD       A,#0x3
   \   00001F   85..82       MOV       DPL,?XSP + 0
   \   000022   85..83       MOV       DPH,?XSP + 1
   \   000025   F0           MOVX      @DPTR,A
    435          
    436            buf = zcl_mem_alloc( len );
   \   000026   12....       LCALL     ?Subroutine22 & 0xFFFF
    437            if ( buf )
   \                     ??CrossCallReturnLabel_70:
   \   000029   7003         JNZ       $+5
   \   00002B   02....       LJMP      ??zclGeneral_SendAddGroupRequest_0 & 0xFFFF
   \   00002E   7415         MOV       A,#0x15
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   12....       LCALL     ?Subroutine18 & 0xFFFF
    438            {
    439              pBuf = buf;
    440              *pBuf++ = LO_UINT16( groupID );
   \                     ??CrossCallReturnLabel_37:
   \   000036   8A82         MOV       DPL,R2
   \   000038   8B83         MOV       DPH,R3
   \   00003A   F0           MOVX      @DPTR,A
    441              *pBuf++ = HI_UINT16( groupID );
   \   00003B   E9           MOV       A,R1
   \   00003C   A3           INC       DPTR
   \   00003D   12....       LCALL     ?Subroutine35 & 0xFFFF
    442              *pBuf++ = groupName[0]; // string length
   \                     ??CrossCallReturnLabel_59:
   \   000040   12....       LCALL     ?Subroutine19 & 0xFFFF
    443              zcl_memcpy( pBuf, &(groupName[1]), groupName[0] );
   \                     ??CrossCallReturnLabel_39:
   \   000043                ; Setup parameters for call to function osal_memcpy
   \   000043   85..82       MOV       DPL,?V2
   \   000046   85..83       MOV       DPH,?V3
   \   000049   A3           INC       DPTR
   \   00004A   A982         MOV       R1,DPL
   \   00004C   AA83         MOV       R2,DPH
   \   00004E   89..         MOV       ?V4,R1
   \   000050   8A..         MOV       ?V5,R2
   \   000052   75..00       MOV       ?V6,#0x0
   \   000055   78..         MOV       R0,#?V4
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00005A   85..82       MOV       DPL,?V2
   \   00005D   85..83       MOV       DPH,?V3
   \   000060   E0           MOVX      A,@DPTR
   \   000061   FC           MOV       R4,A
   \   000062   7D00         MOV       R5,#0x0
   \   000064   E5..         MOV       A,?V0
   \   000066   2403         ADD       A,#0x3
   \   000068   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00006B   12....       LCALL     ?DEALLOC_XSTACK8
    444          
    445              status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    446                                        cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    447                                        disableDefaultRsp, 0, seqNum, len, buf );
   \   00006E                ; Setup parameters for call to function zcl_SendCommand
   \   00006E   78..         MOV       R0,#?V0
   \   000070   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000073   8E..         MOV       ?V2,R6
   \   000075   75..00       MOV       ?V3,#0x0
   \   000078   78..         MOV       R0,#?V2
   \   00007A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007D   741D         MOV       A,#0x1d
   \   00007F   12....       LCALL     ?XSTACK_DISP0_8
   \   000082   E0           MOVX      A,@DPTR
   \   000083   F5..         MOV       ?V2,A
   \   000085   78..         MOV       R0,#?V2
   \   000087   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008A   E4           CLR       A
   \   00008B   F5..         MOV       ?V2,A
   \   00008D   78..         MOV       R0,#?V2
   \   00008F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000092   E5..         MOV       A,?V8
   \   000094   F5..         MOV       ?V2,A
   \   000096   78..         MOV       R0,#?V2
   \   000098   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009B   75..00       MOV       ?V2,#0x0
   \   00009E   78..         MOV       R0,#?V2
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A3   75..01       MOV       ?V2,#0x1
   \   0000A6   78..         MOV       R0,#?V2
   \   0000A8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AB   E5..         MOV       A,?V9
   \   0000AD   F5..         MOV       ?V2,A
   \   0000AF   78..         MOV       R0,#?V2
   \   0000B1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B4   7C04         MOV       R4,#0x4
   \   0000B6   7D00         MOV       R5,#0x0
   \   0000B8   AA..         MOV       R2,?V10
   \   0000BA   AB..         MOV       R3,?V11
   \   0000BC   A9..         MOV       R1,?V7
   \   0000BE   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0000C1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C4   E9           MOV       A,R1
   \   0000C5   FE           MOV       R6,A
    448              zcl_mem_free( buf );
   \   0000C6                ; Setup parameters for call to function osal_mem_free
   \   0000C6   AA..         MOV       R2,?V0
   \   0000C8   AB..         MOV       R3,?V1
   \   0000CA   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000CD   8002         SJMP      ??zclGeneral_SendAddGroupRequest_1
    449            }
    450            else
    451              status = ZMemError;
   \                     ??zclGeneral_SendAddGroupRequest_0:
   \   0000CF   7E10         MOV       R6,#0x10
    452          
    453            return ( status );
   \                     ??zclGeneral_SendAddGroupRequest_1:
   \   0000D1   EE           MOV       A,R6
   \   0000D2   F9           MOV       R1,A
   \   0000D3   7401         MOV       A,#0x1
   \   0000D5                REQUIRE ?Subroutine2
   \   0000D5                ; // Fall through to label ?Subroutine2
    454          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine40_0
   \   000003                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   7F0C         MOV       R7,#0xc
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   FA           MOV       R2,A
   \   000001   E4           CLR       A
   \   000002   35..         ADDC      A,?V1
   \   000004                REQUIRE ??Subroutine41_0
   \   000004                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine42_0
   \   000001                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   FE           MOV       R6,A
   \   000001                ; Setup parameters for call to function osal_mem_alloc
   \   000001                ; Setup parameters for call to function osal_mem_alloc
   \   000001   FA           MOV       R2,A
   \   000002   7B00         MOV       R3,#0x0
   \   000004                REQUIRE ??Subroutine43_0
   \   000004                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000003   8A..         MOV       ?V0,R2
   \   000005   8B..         MOV       ?V1,R3
   \   000007   EA           MOV       A,R2
   \   000008   4B           ORL       A,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V3,A
   \   000007   85..82       MOV       DPL,?V2
   \   00000A   F583         MOV       DPH,A
   \   00000C   22           RET
    455          
    456          /*********************************************************************
    457           * @fn      zclGeneral_SendGroupGetMembershipRequest
    458           *
    459           * @brief   Send a Get Group Membership (Resposne) Command to a device
    460           *
    461           * @param   srcEP - Sending Apps endpoint
    462           * @param   dstAddr - where to send the request
    463           * @param   cmd - one of the following:
    464           *                COMMAND_GROUP_GET_MEMBERSHIP
    465           *                COMMAND_GROUP_GET_MEMBERSHIP_RSP
    466           * @param   groupID - pointer to the group structure
    467           * @param   groupName - pointer to Group Name.  This is a Zigbee
    468           *          string data type, so the first byte is the length of the
    469           *          name (in bytes), then the name.
    470           *
    471           * @return  ZStatus_t
    472           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    473          ZStatus_t zclGeneral_SendGroupGetMembershipRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendGroupGetMembershipRequest:
    474                                                              uint8 cmd, uint8 rspCmd, uint8 direction, uint8 capacity,
    475                                                              uint8 grpCnt, uint16 *grpList, uint8 disableDefaultRsp, uint8 seqNum )
    476          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V6,R2
   \   000009   8B..         MOV       ?V7,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
    477            uint8 *buf;
    478            uint8 *pBuf;
    479            uint8 len = 0;
   \   00000F   7800         MOV       R0,#0x0
    480            uint8 i;
    481            ZStatus_t status;
    482          
    483            if ( rspCmd )
   \   000011   6002         JZ        ??zclGeneral_SendGroupGetMembershipRequest_0
    484              len++;  // Capacity
   \   000013   7801         MOV       R0,#0x1
   \                     ??zclGeneral_SendGroupGetMembershipRequest_0:
   \   000015   7416         MOV       A,#0x16
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V3,A
    485          
    486            len++;  // Group Count
    487            len += sizeof ( uint16 ) * grpCnt;  // Group List
   \   00001D   C3           CLR       C
   \   00001E   33           RLC       A
   \   00001F   04           INC       A
   \   000020   28           ADD       A,R0
    488          
    489            buf = zcl_mem_alloc( len );
   \   000021   F5..         MOV       ?V4,A
   \   000023   75..00       MOV       ?V5,#0x0
   \   000026                ; Setup parameters for call to function osal_mem_alloc
   \   000026   FA           MOV       R2,A
   \   000027   AB..         MOV       R3,?V5
   \   000029   12....       LCALL     ??Subroutine43_0 & 0xFFFF
    490            if ( buf )
   \                     ??CrossCallReturnLabel_72:
   \   00002C   7003         JNZ       $+5
   \   00002E   02....       LJMP      ??zclGeneral_SendGroupGetMembershipRequest_1 & 0xFFFF
    491            {
    492              pBuf = buf;
   \   000031   A8..         MOV       R0,?V0
   \   000033   A9..         MOV       R1,?V1
    493              if ( rspCmd )
   \   000035   EF           MOV       A,R7
   \   000036   6010         JZ        ??zclGeneral_SendGroupGetMembershipRequest_2
    494                *pBuf++ = capacity;
   \   000038   7415         MOV       A,#0x15
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   8A82         MOV       DPL,R2
   \   000040   8B83         MOV       DPH,R3
   \   000042   F0           MOVX      @DPTR,A
   \   000043   A3           INC       DPTR
   \   000044   A882         MOV       R0,DPL
   \   000046   A983         MOV       R1,DPH
    495          
    496              *pBuf++ = grpCnt;
   \                     ??zclGeneral_SendGroupGetMembershipRequest_2:
   \   000048   8882         MOV       DPL,R0
   \   00004A   8983         MOV       DPH,R1
   \   00004C   E5..         MOV       A,?V3
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   A3           INC       DPTR
   \   000050   A882         MOV       R0,DPL
   \   000052   A983         MOV       R1,DPH
    497              for ( i = 0; i < grpCnt; i++ )
   \   000054   7C00         MOV       R4,#0x0
   \   000056   7417         MOV       A,#0x17
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00005E   8034         SJMP      ??zclGeneral_SendGroupGetMembershipRequest_3
    498              {
    499                *pBuf++ = LO_UINT16( grpList[i] );
   \                     ??zclGeneral_SendGroupGetMembershipRequest_4:
   \   000060   EC           MOV       A,R4
   \   000061   25E0         ADD       A,0xE0 /* A   */
   \   000063   F5..         MOV       ?V8,A
   \   000065   E4           CLR       A
   \   000066   33           RLC       A
   \   000067   F5..         MOV       ?V9,A
   \   000069   EA           MOV       A,R2
   \   00006A   25..         ADD       A,?V8
   \   00006C   F5..         MOV       ?V8,A
   \   00006E   EB           MOV       A,R3
   \   00006F   35..         ADDC      A,?V9
   \   000071   F5..         MOV       ?V9,A
   \   000073   85..82       MOV       DPL,?V8
   \   000076   F583         MOV       DPH,A
   \   000078   E0           MOVX      A,@DPTR
   \   000079   8882         MOV       DPL,R0
   \   00007B   8983         MOV       DPH,R1
   \   00007D   F0           MOVX      @DPTR,A
    500                *pBuf++ = HI_UINT16( grpList[i] );
   \   00007E   85..82       MOV       DPL,?V8
   \   000081   85..83       MOV       DPH,?V9
   \   000084   A3           INC       DPTR
   \   000085   E0           MOVX      A,@DPTR
   \   000086   8882         MOV       DPL,R0
   \   000088   8983         MOV       DPH,R1
   \   00008A   A3           INC       DPTR
   \   00008B   F0           MOVX      @DPTR,A
   \   00008C   E8           MOV       A,R0
   \   00008D   2402         ADD       A,#0x2
   \   00008F   F8           MOV       R0,A
   \   000090   5001         JNC       ??zclGeneral_SendGroupGetMembershipRequest_5
   \   000092   09           INC       R1
    501              }
   \                     ??zclGeneral_SendGroupGetMembershipRequest_5:
   \   000093   0C           INC       R4
   \                     ??zclGeneral_SendGroupGetMembershipRequest_3:
   \   000094   EC           MOV       A,R4
   \   000095   C3           CLR       C
   \   000096   95..         SUBB      A,?V3
   \   000098   40C6         JC        ??zclGeneral_SendGroupGetMembershipRequest_4
    502          
    503              status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    504                                        cmd, TRUE, direction,
    505                                        disableDefaultRsp, 0, seqNum, len, buf );
   \   00009A                ; Setup parameters for call to function zcl_SendCommand
   \   00009A   78..         MOV       R0,#?V0
   \   00009C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009F   78..         MOV       R0,#?V4
   \   0000A1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A4   741E         MOV       A,#0x1e
   \   0000A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   F5..         MOV       ?V3,A
   \   0000AC   78..         MOV       R0,#?V3
   \   0000AE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B1   E4           CLR       A
   \   0000B2   F5..         MOV       ?V4,A
   \   0000B4   78..         MOV       R0,#?V4
   \   0000B6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B9   7420         MOV       A,#0x20
   \   0000BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   F5..         MOV       ?V3,A
   \   0000C1   78..         MOV       R0,#?V3
   \   0000C3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C6   741C         MOV       A,#0x1c
   \   0000C8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CB   E0           MOVX      A,@DPTR
   \   0000CC   F5..         MOV       ?V3,A
   \   0000CE   78..         MOV       R0,#?V3
   \   0000D0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D3   75..01       MOV       ?V3,#0x1
   \   0000D6   78..         MOV       R0,#?V3
   \   0000D8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DB   EE           MOV       A,R6
   \   0000DC   F5..         MOV       ?V3,A
   \   0000DE   78..         MOV       R0,#?V3
   \   0000E0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E3   7C04         MOV       R4,#0x4
   \   0000E5   7D00         MOV       R5,#0x0
   \   0000E7   AA..         MOV       R2,?V6
   \   0000E9   AB..         MOV       R3,?V7
   \   0000EB   A9..         MOV       R1,?V2
   \   0000ED   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   0000F0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F3   E9           MOV       A,R1
   \   0000F4   F5..         MOV       ?V3,A
    506              zcl_mem_free( buf );
   \   0000F6                ; Setup parameters for call to function osal_mem_free
   \   0000F6   AA..         MOV       R2,?V0
   \   0000F8   AB..         MOV       R3,?V1
   \   0000FA   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000FD   8003         SJMP      ??zclGeneral_SendGroupGetMembershipRequest_6
    507            }
    508            else
    509              status = ZMemError;
   \                     ??zclGeneral_SendGroupGetMembershipRequest_1:
   \   0000FF   75..10       MOV       ?V3,#0x10
    510          
    511            return ( status );
   \                     ??zclGeneral_SendGroupGetMembershipRequest_6:
   \   000102   A9..         MOV       R1,?V3
   \   000104   02....       LJMP      ??Subroutine40_0 & 0xFFFF
    512          }
    513          
    514          /*********************************************************************
    515           * @fn      zclGeneral_SendGroupResponse
    516           *
    517           * @brief   Send Group Response (not Group View Response)
    518           *
    519           * @param   srcEP - Sending application's endpoint
    520           * @param   dstAddr - where you want the message to go
    521           * @param   cmd - either COMMAND_GROUP_ADD_RSP or COMMAND_GROUP_REMOVE_RSP
    522           * @param   status - group command status
    523           * @param   groupID - what group
    524           *
    525           * @return  ZStatus_t
    526           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    527          ZStatus_t zclGeneral_SendGroupResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendGroupResponse:
    528                                                  uint8 cmd, uint8 status, uint16 groupID,
    529                                                  uint8 disableDefaultRsp, uint8 seqNum )
    530          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    531            uint8 buf[3];
    532          
    533            buf[0] = status;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   ED           MOV       A,R5
   \   000013   F0           MOVX      @DPTR,A
   \   000014   740F         MOV       A,#0xf
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F8           MOV       R0,A
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F9           MOV       R1,A
    534            buf[1] = LO_UINT16( groupID );
   \   00001E   7401         MOV       A,#0x1
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E8           MOV       A,R0
   \   000024   F0           MOVX      @DPTR,A
    535            buf[2] = HI_UINT16( groupID );
   \   000025   7402         MOV       A,#0x2
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   12....       LCALL     ?Subroutine21 & 0xFFFF
    536          
    537            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    538                                    cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    539                                    disableDefaultRsp, 0, seqNum, 3, buf );
   \                     ??CrossCallReturnLabel_63:
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   75..03       MOV       ?V2,#0x3
   \   000033   75..00       MOV       ?V3,#0x0
   \   000036   78..         MOV       R0,#?V2
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   7416         MOV       A,#0x16
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000046   E4           CLR       A
   \   000047   F5..         MOV       ?V2,A
   \   000049   78..         MOV       R0,#?V2
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   7418         MOV       A,#0x18
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000059   75..01       MOV       ?V1,#0x1
   \   00005C   78..         MOV       R0,#?V1
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000061   78..         MOV       R0,#?V1
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000066   EC           MOV       A,R4
   \   000067   F5..         MOV       ?V1,A
   \   000069   78..         MOV       R0,#?V1
   \   00006B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006E   7C04         MOV       R4,#0x4
   \   000070   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000073   12....       LCALL     ?DEALLOC_XSTACK8
   \   000076   7403         MOV       A,#0x3
   \   000078   80..         SJMP      ??Subroutine44_0
    540          }
    541          
    542          /*********************************************************************
    543           * @fn      zclGeneral_SendGroupViewResponse
    544           *
    545           * @brief   Call to send Group Response Command
    546           *
    547           * @param   srcEP - Sending application's endpoint
    548           * @param   dstAddr - where you want the message to go
    549           * @param   cmd - either COMMAND_GROUP_ADD_RSP or COMMAND_GROUP_REMOVE_RSP
    550           * @param   status - group command status
    551           * @param   grp - group info
    552           *
    553           * @return  ZStatus_t
    554           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    555          ZStatus_t zclGeneral_SendGroupViewResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendGroupViewResponse:
    556                                                      uint8 status, aps_Group_t *grp, uint8 disableDefaultRsp, uint8 seqNum )
    557          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V8,R1
   \   000007   8A..         MOV       ?V12,R2
   \   000009   8B..         MOV       ?V13,R3
   \   00000B   8C..         MOV       ?V7,R4
   \   00000D   8D..         MOV       ?V9,R5
    558            uint8 *buf;
    559            uint8 len;
    560            ZStatus_t stat;
    561          
    562            len = 1 + 2 + 1; // Status + Group ID + name length
   \   00000F   7804         MOV       R0,#0x4
   \   000011   7416         MOV       A,#0x16
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F5..         MOV       ?V4,A
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V5,A
    563          
    564            if ( status == ZCL_STATUS_SUCCESS )
   \   00001D   E5..         MOV       A,?V4
   \   00001F   2402         ADD       A,#0x2
   \   000021   F5..         MOV       ?V2,A
   \   000023   E4           CLR       A
   \   000024   35..         ADDC      A,?V5
   \   000026   F5..         MOV       ?V3,A
   \   000028   EC           MOV       A,R4
   \   000029   7009         JNZ       ??zclGeneral_SendGroupViewResponse_0
    565            {
    566              len += grp->name[0];  // String length
   \   00002B   85..82       MOV       DPL,?V2
   \   00002E   85..83       MOV       DPH,?V3
   \   000031   E0           MOVX      A,@DPTR
   \   000032   28           ADD       A,R0
   \   000033   F8           MOV       R0,A
    567            }
    568          
    569            buf = zcl_mem_alloc( len );
   \                     ??zclGeneral_SendGroupViewResponse_0:
   \   000034   E8           MOV       A,R0
   \   000035   12....       LCALL     ?Subroutine22 & 0xFFFF
    570            if ( buf )
   \                     ??CrossCallReturnLabel_71:
   \   000038   7003         JNZ       $+5
   \   00003A   02....       LJMP      ??zclGeneral_SendGroupViewResponse_1 & 0xFFFF
    571            {
    572              buf[0] = status;
   \   00003D   8A82         MOV       DPL,R2
   \   00003F   8B83         MOV       DPH,R3
   \   000041   E5..         MOV       A,?V7
   \   000043   F0           MOVX      @DPTR,A
    573              buf[1] = LO_UINT16( grp->ID );
   \   000044   85..82       MOV       DPL,?V4
   \   000047   85..83       MOV       DPH,?V5
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   8A82         MOV       DPL,R2
   \   00004D   8B83         MOV       DPH,R3
   \   00004F   A3           INC       DPTR
   \   000050   12....       LCALL     ?Subroutine26 & 0xFFFF
    574              buf[2] = HI_UINT16( grp->ID );
   \                     ??CrossCallReturnLabel_47:
   \   000053   12....       LCALL     ?Subroutine19 & 0xFFFF
    575          
    576              if ( status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_40:
   \   000056   EA           MOV       A,R2
   \   000057   2403         ADD       A,#0x3
   \   000059   F8           MOV       R0,A
   \   00005A   E4           CLR       A
   \   00005B   35..         ADDC      A,?V1
   \   00005D   F9           MOV       R1,A
   \   00005E   E5..         MOV       A,?V7
   \   000060   7036         JNZ       ??zclGeneral_SendGroupViewResponse_2
    577              {
    578                buf[3] = grp->name[0]; // string length
   \   000062   85..82       MOV       DPL,?V2
   \   000065   85..83       MOV       DPH,?V3
   \   000068   E0           MOVX      A,@DPTR
   \   000069   8882         MOV       DPL,R0
   \   00006B   8983         MOV       DPH,R1
   \   00006D   12....       LCALL     ?Subroutine26 & 0xFFFF
    579                zcl_memcpy( &buf[4], (&grp->name[1]), grp->name[0] );
    580              }
   \                     ??CrossCallReturnLabel_48:
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   A982         MOV       R1,DPL
   \   000074   AA83         MOV       R2,DPH
   \   000076   89..         MOV       ?V4,R1
   \   000078   8A..         MOV       ?V5,R2
   \   00007A   75..00       MOV       ?V6,#0x0
   \   00007D   78..         MOV       R0,#?V4
   \   00007F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000082   85..82       MOV       DPL,?V2
   \   000085   85..83       MOV       DPH,?V3
   \   000088   E0           MOVX      A,@DPTR
   \   000089   FC           MOV       R4,A
   \   00008A   7D00         MOV       R5,#0x0
   \   00008C   E5..         MOV       A,?V0
   \   00008E   2404         ADD       A,#0x4
   \   000090   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000093   12....       LCALL     ?DEALLOC_XSTACK8
   \   000096   8006         SJMP      ??zclGeneral_SendGroupViewResponse_3
    581              else //ZCL_STATUS_NOT_FOUND
    582              {
    583                buf[3] = 0;
   \                     ??zclGeneral_SendGroupViewResponse_2:
   \   000098   8882         MOV       DPL,R0
   \   00009A   8983         MOV       DPH,R1
   \   00009C   E4           CLR       A
   \   00009D   F0           MOVX      @DPTR,A
    584              }
    585          
    586              stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    587                                      COMMAND_GROUP_VIEW_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    588                                      disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zclGeneral_SendGroupViewResponse_3:
   \   00009E                ; Setup parameters for call to function zcl_SendCommand
   \   00009E   78..         MOV       R0,#?V0
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A3   8E..         MOV       ?V2,R6
   \   0000A5   75..00       MOV       ?V3,#0x0
   \   0000A8   78..         MOV       R0,#?V2
   \   0000AA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AD   741C         MOV       A,#0x1c
   \   0000AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   F5..         MOV       ?V2,A
   \   0000B5   78..         MOV       R0,#?V2
   \   0000B7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BA   E4           CLR       A
   \   0000BB   F5..         MOV       ?V2,A
   \   0000BD   78..         MOV       R0,#?V2
   \   0000BF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C2   E5..         MOV       A,?V9
   \   0000C4   F5..         MOV       ?V2,A
   \   0000C6   78..         MOV       R0,#?V2
   \   0000C8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CB   75..01       MOV       ?V2,#0x1
   \   0000CE   78..         MOV       R0,#?V2
   \   0000D0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D3   78..         MOV       R0,#?V2
   \   0000D5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D8   78..         MOV       R0,#?V2
   \   0000DA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DD   7C04         MOV       R4,#0x4
   \   0000DF   7D00         MOV       R5,#0x0
   \   0000E1   AA..         MOV       R2,?V12
   \   0000E3   AB..         MOV       R3,?V13
   \   0000E5   A9..         MOV       R1,?V8
   \   0000E7   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   0000EA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000ED   E9           MOV       A,R1
   \   0000EE   FE           MOV       R6,A
    589              zcl_mem_free( buf );
   \   0000EF                ; Setup parameters for call to function osal_mem_free
   \   0000EF   AA..         MOV       R2,?V0
   \   0000F1   AB..         MOV       R3,?V1
   \   0000F3   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000F6   8002         SJMP      ??zclGeneral_SendGroupViewResponse_4
    590            }
    591            else
    592            {
    593              stat = ZMemError;
   \                     ??zclGeneral_SendGroupViewResponse_1:
   \   0000F8   7E10         MOV       R6,#0x10
    594            }
    595          
    596            return ( stat );
   \                     ??zclGeneral_SendGroupViewResponse_4:
   \   0000FA   EE           MOV       A,R6
   \   0000FB   F9           MOV       R1,A
   \   0000FC                REQUIRE ?Subroutine3
   \   0000FC                ; // Fall through to label ?Subroutine3
    597          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F0E         MOV       R7,#0xe
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   85..82       MOV       DPL,?V4
   \   000004   85..83       MOV       DPH,?V5
   \   000007   A3           INC       DPTR
   \   000008   22           RET
    598          #endif // ZCL_GROUPS
    599          
    600          #ifdef ZCL_SCENES
    601          /*********************************************************************
    602           * @fn      zclGeneral_SendAddSceneRequest
    603           *
    604           * @brief   Send the (Enhanced) Add Scene Request to a device. You can
    605           *           also use the appropriate macro.
    606           *
    607           * @param   srcEP - Sending Apps endpoint
    608           * @param   dstAddr - where to send the request
    609           * @param   scene - pointer to the scene structure
    610           * @param  cmd - COMMAND_SCENE_ADD or COMMAND_SCENE_ENHANCED_ADD
    611           * @param   disableDefaultRsp - whether to disable the Default Response command
    612           * @param   seqNum - sequence number
    613           *
    614           * @return  ZStatus_t
    615           */
    616          ZStatus_t zclGeneral_SendAddSceneRequest( uint8 srcEP, afAddrType_t *dstAddr,
    617                                                    uint8 cmd, zclGeneral_Scene_t *scene,
    618                                                    uint8 disableDefaultRsp, uint8 seqNum )
    619          {
    620            uint8 *buf;
    621            uint8 *pBuf;
    622            uint8 len;
    623            ZStatus_t status;
    624          
    625            len = 2 + 1 + 2;    // Group ID + Scene ID + transition time
    626            len += scene->name[0] + 1; // String + 1 for length
    627          
    628            // Add something for the extension field length
    629            len += scene->extLen;
    630          
    631            buf = zcl_mem_alloc( len );
    632            if ( buf )
    633            {
    634              pBuf = buf;
    635              *pBuf++ = LO_UINT16( scene->groupID );
    636              *pBuf++ = HI_UINT16( scene->groupID );
    637              *pBuf++ = scene->ID;
    638              *pBuf++ = LO_UINT16( scene->transTime );
    639              *pBuf++ = HI_UINT16( scene->transTime );
    640              *pBuf++ = scene->name[0]; // string length
    641              zcl_memcpy( pBuf, &(scene->name[1]), scene->name[0] );
    642              pBuf += scene->name[0]; // move pass name
    643          
    644              // Add the extension fields
    645              if ( scene->extLen > 0 )
    646                zcl_memcpy( pBuf, scene->extField, scene->extLen );
    647          
    648              status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    649                                        cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    650                                        disableDefaultRsp, 0, seqNum, len, buf );
    651              zcl_mem_free( buf );
    652            }
    653            else
    654              status = ZMemError;
    655          
    656            return ( status );
    657          }
    658          
    659          /*********************************************************************
    660           * @fn      zclGeneral_SendSceneRequest
    661           *
    662           * @brief   Send a Scene Request to a device.  You can also use the
    663           *          appropriate macro.
    664           *
    665           * @param   srcEP - Sending Apps endpoint
    666           * @param   dstAddr - where to send the request
    667           * @param   cmd - one of the following:
    668           *              COMMAND_SCENE_VIEW
    669           *              COMMAND_SCENE_REMOVE
    670           *              COMMAND_SCENE_REMOVE_ALL
    671           *              COMMAND_SCENE_STORE
    672           *              COMMAND_SCENE_RECALL
    673           *              COMMAND_SCENE_GET_MEMBERSHIP
    674           *              COMMAND_SCENE_ENHANCED_VIEW
    675           * @param   groupID - group ID
    676           * @param   sceneID - scene ID (not applicable to COMMAND_SCENE_REMOVE_ALL and
    677           *                    COMMAND_SCENE_GET_MEMBERSHIP)
    678           * @param   disableDefaultRsp - whether to disable the Default Response command
    679           * @param   seqNum - sequence number
    680           * @return  ZStatus_t
    681           */
    682          ZStatus_t zclGeneral_SendSceneRequest( uint8 srcEP, afAddrType_t *dstAddr,
    683                                                 uint8 cmd, uint16 groupID, uint8 sceneID,
    684                                                 uint8 disableDefaultRsp, uint8 seqNum )
    685          {
    686            uint8 buf[3];
    687            uint8 len = 2;
    688          
    689            buf[0] = LO_UINT16( groupID );
    690            buf[1] = HI_UINT16( groupID );
    691          
    692            if ( cmd != COMMAND_SCENE_REMOVE_ALL && cmd != COMMAND_SCENE_GET_MEMBERSHIP )
    693            {
    694              buf[2] = sceneID;
    695              len++;
    696            }
    697          
    698            return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    699                                      cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    700                                      disableDefaultRsp, 0, seqNum, len, buf ) );
    701          }
    702          
    703          /*********************************************************************
    704           * @fn      zclGeneral_SendSceneResponse
    705           *
    706           * @brief   Send Group Response (not Group View Response)
    707           *
    708           * @param   srcEP - Sending application's endpoint
    709           * @param   dstAddr - where you want the message to go
    710           * @param   cmd - either COMMAND_SCENE_ADD_RSP, COMMAND_SCENE_REMOVE_RSP
    711           *                COMMAND_SCENE_STORE_RSP, or COMMAND_SCENE_REMOVE_ALL_RSP
    712           * @param   status - scene command status
    713           * @param   groupID - what group
    714           * @param   sceneID - what scene (not applicable to COMMAND_SCENE_REMOVE_ALL_RSP)
    715           *
    716           * @return  ZStatus_t
    717           */
    718          ZStatus_t zclGeneral_SendSceneResponse( uint8 srcEP, afAddrType_t *dstAddr,
    719                                                  uint8 cmd, uint8 status, uint16 groupID,
    720                                                  uint8 sceneID, uint8 disableDefaultRsp, uint8 seqNum )
    721          {
    722            uint8 buf[4];
    723            uint8 len = 1 + 2; // Status + Group ID
    724          
    725            buf[0] = status;
    726            buf[1] = LO_UINT16( groupID );
    727            buf[2] = HI_UINT16( groupID );
    728          
    729            if ( cmd != COMMAND_SCENE_REMOVE_ALL_RSP )
    730            {
    731              buf[3] = sceneID;
    732              len++;
    733            }
    734          
    735            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    736                                    cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    737                                    disableDefaultRsp, 0, seqNum, len, buf );
    738          }
    739          
    740          /*********************************************************************
    741           * @fn      zclGeneral_SendSceneViewResponse
    742           *
    743           * @brief   Call to send Scene (Enahced) View Response Command. You can
    744           *           also use the appropriate macro.
    745           *
    746           * @param   srcEP - Sending application's endpoint
    747           * @param   dstAddr - where you want the message to go
    748           * @param   cmd - either COMMAND_SCENE_VIEW_RSP or COMMAND_SCENE_ENHANCED_VIEW_RSP
    749           * @param   status - scene command status
    750           * @param   scene - scene info
    751           *
    752           * @return  ZStatus_t
    753           */
    754          ZStatus_t zclGeneral_SendSceneViewRsp( uint8 srcEP, afAddrType_t *dstAddr,
    755                                                 uint8 cmd, uint8 status, zclGeneral_Scene_t *scene,
    756                                                 uint8 disableDefaultRsp, uint8 seqNum )
    757          {
    758            uint8 *buf;
    759            uint8 *pBuf;
    760            uint8 len = 1 + 2 + 1; // Status + Group ID + Scene ID
    761            ZStatus_t stat;
    762          
    763            if ( status == ZCL_STATUS_SUCCESS )
    764            {
    765              len += 2; // Transition Time
    766              len += scene->name[0] + 1; // string + 1 for length
    767          
    768              // Add something for the extension field length
    769              len += scene->extLen;
    770            }
    771          
    772            buf = zcl_mem_alloc( len );
    773            if ( buf )
    774            {
    775              pBuf = buf;
    776              *pBuf++ = status;
    777              *pBuf++ = LO_UINT16( scene->groupID );
    778              *pBuf++ = HI_UINT16( scene->groupID );
    779              *pBuf++ = scene->ID;
    780              if ( status == ZCL_STATUS_SUCCESS )
    781              {
    782                uint16 transTime = scene->transTime;
    783                if ( cmd == COMMAND_SCENE_ENHANCED_VIEW_RSP )
    784                {
    785                  // Transition time is in 1/10s
    786                  transTime *= 10;
    787                  transTime += scene->transTime100ms;
    788                }
    789          
    790                *pBuf++ = LO_UINT16( transTime );
    791                *pBuf++ = HI_UINT16( transTime );
    792                *pBuf++ = scene->name[0]; // string length
    793                if ( scene->name[0] != 0 )
    794                {
    795                  zcl_memcpy( pBuf, &(scene->name[1]), scene->name[0] );
    796                  pBuf += scene->name[0]; // move pass name
    797                }
    798          
    799                // Add the extension fields
    800                if ( scene->extLen > 0 )
    801                  zcl_memcpy( pBuf, scene->extField, scene->extLen );
    802              }
    803          
    804              stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    805                                      cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    806                                      disableDefaultRsp, 0, seqNum, len, buf );
    807              zcl_mem_free( buf );
    808            }
    809            else
    810              stat = ZMemError;
    811          
    812            return ( stat );
    813          }
    814          
    815          /*********************************************************************
    816           * @fn      zclGeneral_SendSceneGetMembershipResponse
    817           *
    818           * @brief   Call to send Scene Get Membership Response Command
    819           *
    820           * @param   srcEP - Sending application's endpoint
    821           * @param   dstAddr - where you want the message to go
    822           * @param   status - scene command status
    823           * @param   capacity - remaining capacity of the scene table
    824           * @param   sceneCnt - number of scenes in the scene list
    825           * @param   sceneList - list of scene IDs
    826           * @param   groupID - group ID that scene belongs to
    827           * @param   seqNum - sequence number
    828           *
    829           * @return  ZStatus_t
    830           */
    831          ZStatus_t zclGeneral_SendSceneGetMembershipResponse( uint8 srcEP, afAddrType_t *dstAddr,
    832                                                               uint8 status, uint8 capacity, uint8 sceneCnt, uint8 *sceneList,
    833                                                               uint16 groupID, uint8 disableDefaultRsp, uint8 seqNum )
    834          {
    835            uint8 *buf;
    836            uint8 *pBuf;
    837            uint8 len = 1 + 1 + 2; // Status + Capacity + Group ID;
    838            uint8 i;
    839            ZStatus_t stat;
    840          
    841            if ( status == ZCL_STATUS_SUCCESS )
    842            {
    843              len++; // Scene Count
    844              len += sceneCnt; // Scene List (Scene ID is a single octet)
    845            }
    846          
    847            buf = zcl_mem_alloc( len );
    848            if ( buf )
    849            {
    850              pBuf = buf;
    851              *pBuf++ = status;
    852              *pBuf++ = capacity;
    853              *pBuf++ = LO_UINT16( groupID );
    854              *pBuf++ = HI_UINT16( groupID );
    855              if ( status == ZCL_STATUS_SUCCESS )
    856              {
    857                *pBuf++ = sceneCnt;
    858                for ( i = 0; i < sceneCnt; i++ )
    859                  *pBuf++ = sceneList[i];
    860              }
    861          
    862              stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    863                                      COMMAND_SCENE_GET_MEMBERSHIP_RSP, TRUE,
    864                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, len, buf );
    865              zcl_mem_free( buf );
    866            }
    867            else
    868              stat = ZMemError;
    869          
    870            return ( stat );
    871          }
    872          
    873          #ifdef ZCL_LIGHT_LINK_ENHANCE
    874          /*********************************************************************
    875           * @fn      zclGeneral_SendSceneCopy
    876           *
    877           * @brief   Send Scene Copy Request to a device
    878           *
    879           * @param   srcEP - sending application's endpoint
    880           * @param   dstAddr - where to send the request
    881           * @param   mode - how scene copy is to proceed
    882           * @param   groupIDFrom - group from which scene to be copied
    883           * @param   sceneIDFrom - scene from which scene to be copied
    884           * @param   groupIDTo - group to which scene to be copied
    885           * @param   sceneIDTo - scene to which scene to be copied
    886           * @param   disableDefaultRsp - disable Default Response command
    887           * @param   seqNum - the identification number for the transaction
    888           *
    889           * @return  ZStatus_t
    890           */
    891          ZStatus_t zclGeneral_SendSceneCopy( uint8 srcEP, afAddrType_t *dstAddr,
    892                                              uint8 mode, uint16 groupIDFrom, uint8 sceneIDFrom,
    893                                              uint16 groupIDTo, uint8 sceneIDTo,
    894                                              uint8 disableDefaultRsp, uint8 seqNum )
    895          {
    896            uint8 buf[7];
    897          
    898            buf[0] = mode;
    899            buf[1] = LO_UINT16( groupIDFrom );
    900            buf[2] = HI_UINT16( groupIDFrom );
    901            buf[3] = sceneIDFrom;
    902            buf[4] = LO_UINT16( groupIDTo );
    903            buf[5] = HI_UINT16( groupIDTo );
    904            buf[6] = sceneIDTo;
    905          
    906            return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    907                                      COMMAND_SCENE_COPY, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    908                                      disableDefaultRsp, 0, seqNum, 7, buf ) );
    909          }
    910          
    911          /*********************************************************************
    912           * @fn      zclGeneral_SendSceneCopyResponse
    913           *
    914           * @brief   Send Scene Copy Response to a device
    915           *
    916           * @param   srcEP - sending application's endpoint
    917           * @param   dstAddr - where to send the request
    918           * @param   status - status of copy scene attemp
    919           * @param   groupIDFrom - group from which scene was copied
    920           * @param   sceneIDFrom - scene from which scene was copied
    921           * @param   disableDefaultRsp - disable Default Response command
    922           * @param   seqNum - the identification number for the transaction
    923           *
    924           * @return  ZStatus_t
    925           */
    926          ZStatus_t zclGeneral_SendSceneCopyResponse( uint8 srcEP, afAddrType_t *dstAddr,
    927                                                      uint8 status, uint16 groupIDFrom, uint8 sceneIDFrom,
    928                                                      uint8 disableDefaultRsp, uint8 seqNum )
    929          {
    930            uint8 buf[4];
    931          
    932            buf[0] = status;
    933            buf[1] = LO_UINT16( groupIDFrom );
    934            buf[2] = HI_UINT16( groupIDFrom );
    935            buf[3] = sceneIDFrom;
    936          
    937            return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    938                                      COMMAND_SCENE_COPY_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    939                                      disableDefaultRsp, 0, seqNum, 4, buf ) );
    940          }
    941          #endif // ZCL_LIGHT_LINK_ENHANCE
    942          #endif // ZCL_SCENES
    943          
    944          #ifdef ZCL_ON_OFF
    945          #ifdef ZCL_LIGHT_LINK_ENHANCE
    946          /*********************************************************************
    947           * @fn      zclGeneral_SendOnOff_CmdOffWithEffect
    948           *
    949           * @brief   Call to send out an Off with Effect Command.
    950           *
    951           * @param   srcEP - Sending application's endpoint
    952           * @param   dstAddr - where you want the message to go
    953           * @param   effectId - fading effect to use when switching light off
    954           * @param   effectVariant - which variant of effect to be triggered
    955           * @param   disableDefaultRsp - whether to disable the Default Response command
    956           * @param   seqNum - sequence number
    957           *
    958           * @return  ZStatus_t
    959           */
    960          ZStatus_t zclGeneral_SendOnOff_CmdOffWithEffect( uint8 srcEP, afAddrType_t *dstAddr,
    961                                                           uint8 effectId, uint8 effectVariant,
    962                                                           uint8 disableDefaultRsp, uint8 seqNum )
    963          {
    964            uint8 buf[2];
    965          
    966            buf[0] = effectId;
    967            buf[1] = effectVariant;
    968          
    969            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF,
    970                                    COMMAND_OFF_WITH_EFFECT, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    971                                    disableDefaultRsp, 0, seqNum, 2, buf );
    972          }
    973          
    974          /*********************************************************************
    975           * @fn      zclGeneral_SendOnOff_CmdOnWithTimedOff
    976           *
    977           * @brief   Call to send out an On with Timed Off Command.
    978           *
    979           * @param   srcEP - Sending application's endpoint
    980           * @param   dstAddr - where you want the message to go
    981           * @param   onOffCtrl - how the lamp is to be operated
    982           * @param   onTime - the length of time (in 1/10ths second) that the lamp is to remain on, before automatically turning off
    983           * @param   offWaitTime - the length of time (in 1/10ths second) that the lamp shall remain off, and guarded to prevent an on command turning the light back on.
    984           * @param   disableDefaultRsp - whether to disable the Default Response command
    985           * @param   seqNum - sequence number
    986           *
    987           * @return  ZStatus_t
    988           */
    989          ZStatus_t zclGeneral_SendOnOff_CmdOnWithTimedOff ( uint8 srcEP, afAddrType_t *dstAddr,
    990                                                             zclOnOffCtrl_t onOffCtrl, uint16 onTime, uint16 offWaitTime,
    991                                                             uint8 disableDefaultRsp, uint8 seqNum )
    992          {
    993            uint8 buf[5];
    994          
    995            buf[0] = onOffCtrl.byte;
    996            buf[1] = LO_UINT16( onTime );
    997            buf[2] = HI_UINT16( onTime );
    998            buf[3] = LO_UINT16( offWaitTime );
    999            buf[4] = HI_UINT16( offWaitTime );
   1000          
   1001            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF,
   1002                                    COMMAND_ON_WITH_TIMED_OFF, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1003                                    disableDefaultRsp, 0, seqNum, 5, buf );
   1004          }
   1005          #endif // ZCL_LIGHT_LINK_ENHANCE
   1006          #endif // ZCL_ON_OFF
   1007          
   1008          #ifdef ZCL_LEVEL_CTRL
   1009          /*********************************************************************
   1010           * @fn      zclGeneral_SendLevelControlMoveToLevelRequest
   1011           *
   1012           * @brief   Call to send out a Level Control Request. You can also use
   1013           *          the appropriate macro.
   1014           *
   1015           * @param   srcEP - Sending application's endpoint
   1016           * @param   dstAddr - where you want the message to go
   1017           * @param   cmd - one of the following:
   1018           *              COMMAND_LEVEL_MOVE_TO_LEVEL or
   1019           *              COMMAND_LEVEL_MOVE_TO_LEVEL_WITH_ON_OFF
   1020           * @param   level - what level to move to
   1021           * @param   transitionTime - how long to take to get to the level (in seconds)
   1022           *
   1023           * @return  ZStatus_t
   1024           */
   1025          ZStatus_t zclGeneral_SendLevelControlMoveToLevelRequest( uint8 srcEP, afAddrType_t *dstAddr,
   1026                                                                   uint8 cmd, uint8 level, uint16 transTime,
   1027                                                                   uint8 disableDefaultRsp, uint8 seqNum )
   1028          {
   1029            uint8 buf[3];
   1030          
   1031            buf[0] = level;
   1032            buf[1] = LO_UINT16( transTime );
   1033            buf[2] = HI_UINT16( transTime );
   1034          
   1035            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
   1036                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1037                                    disableDefaultRsp, 0, seqNum, 3, buf );
   1038          }
   1039          
   1040          /*********************************************************************
   1041           * @fn      zclGeneral_SendLevelControlMoveRequest
   1042           *
   1043           * @brief   Call to send out a Level Control Request. You can also use
   1044           *          the appropriate macro.
   1045           *
   1046           * @param   srcEP - Sending application's endpoint
   1047           * @param   dstAddr - where you want the message to go
   1048           * @param   cmd - one of the following:
   1049           *              COMMAND_LEVEL_MOVE or
   1050           *              COMMAND_LEVEL_MOVE_WITH_ON_OFF
   1051           * @param   moveMode - LEVEL_MOVE_UP or
   1052           *                     LEVEL_MOVE_DOWN
   1053           * @param   rate - number of steps to take per second
   1054           *
   1055           * @return  ZStatus_t
   1056           */
   1057          ZStatus_t zclGeneral_SendLevelControlMoveRequest( uint8 srcEP, afAddrType_t *dstAddr,
   1058                                                            uint8 cmd, uint8 moveMode, uint8 rate,
   1059                                                            uint8 disableDefaultRsp, uint8 seqNum )
   1060          {
   1061            uint8 buf[2];
   1062          
   1063            buf[0] = moveMode;
   1064            buf[1] = rate;
   1065          
   1066            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
   1067                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1068                                    disableDefaultRsp, 0, seqNum, 2, buf );
   1069          }
   1070          
   1071          /*********************************************************************
   1072           * @fn      zclGeneral_SendLevelControlStepRequest
   1073           *
   1074           * @brief   Call to send out a Level Control Request. You can also use
   1075           *          the appropriate macro.
   1076           *
   1077           * @param   srcEP - Sending application's endpoint
   1078           * @param   dstAddr - where you want the message to go
   1079           * @param   cmd - one of the following:
   1080           *              COMMAND_LEVEL_STEP
   1081           *              COMMAND_LEVEL_STEP_WITH_ON_OFF
   1082           * @param   stepMode - LEVEL_STEP_UP or
   1083           *                     LEVEL_STEP_DOWN
   1084           * @param   amount - number of levels to step
   1085           * @param   transitionTime - time, in 1/10ths of a second, to take to perform the step
   1086           *
   1087           * @return  ZStatus_t
   1088           */
   1089          ZStatus_t zclGeneral_SendLevelControlStepRequest( uint8 srcEP, afAddrType_t *dstAddr,
   1090                                                            uint8 cmd, uint8 stepMode, uint8 stepSize, uint16 transTime,
   1091                                                            uint8 disableDefaultRsp, uint8 seqNum )
   1092          {
   1093            uint8 buf[4];
   1094          
   1095            buf[0] = stepMode;
   1096            buf[1] = stepSize;
   1097            buf[2] = LO_UINT16( transTime );
   1098            buf[3] = HI_UINT16( transTime );
   1099          
   1100            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
   1101                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1102                                    disableDefaultRsp, 0, seqNum, 4, buf );
   1103          }
   1104          
   1105          /*********************************************************************
   1106           * @fn      zclGeneral_SendLevelControlStepRequest
   1107           *
   1108           * @brief   Call to send out a Level Control Request. You can also use
   1109           *          the appropriate macro.
   1110           *
   1111           * @param   srcEP - Sending application's endpoint
   1112           * @param   dstAddr - where you want the message to go
   1113           * @param   cmd - one of the following:
   1114           *              COMMAND_LEVEL_STOP
   1115           *              COMMAND_LEVEL_STOP_WITH_ON_OFF
   1116           *
   1117           * @return  ZStatus_t
   1118           */
   1119          ZStatus_t zclGeneral_SendLevelControlStopRequest( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
   1120                                                            uint8 disableDefaultRsp, uint8 seqNum )
   1121          {
   1122            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
   1123                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1124                                    disableDefaultRsp, 0, seqNum, 0, NULL );
   1125          }
   1126          #endif // ZCL_LEVEL_CTRL
   1127          
   1128          #ifdef ZCL_ALARMS
   1129          /*********************************************************************
   1130           * @fn      zclGeneral_SendAlarm
   1131           *
   1132           * @brief   Call to send out an Alarm Request Command
   1133           *
   1134           * @param   srcEP - Sending application's endpoint
   1135           * @param   dstAddr - where you want the message to go
   1136           * @param   cmd - COMMAND_ALARMS_ALARM
   1137           * @param   alarmCode - code for the cause of the alarm
   1138           * @param   clusterID - cluster whose attribute generate the alarm
   1139           *
   1140           * @return  ZStatus_t
   1141           */
   1142          ZStatus_t zclGeneral_SendAlarm( uint8 srcEP, afAddrType_t *dstAddr,
   1143                                          uint8 alarmCode, uint16 clusterID,
   1144                                          uint8 disableDefaultRsp, uint8 seqNum )
   1145          {
   1146            uint8 buf[3];
   1147          
   1148            buf[0] = alarmCode;
   1149            buf[1] = LO_UINT16( clusterID );
   1150            buf[2] = HI_UINT16( clusterID );
   1151          
   1152            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1153                                    COMMAND_ALARMS_ALARM, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   1154                                    disableDefaultRsp, 0, seqNum, 3, buf );
   1155          }
   1156          
   1157          /*********************************************************************
   1158           * @fn      zclGeneral_SendAlarmReset
   1159           *
   1160           * @brief   Call to send out an Alarm Reset Command
   1161           *
   1162           * @param   srcEP - Sending application's endpoint
   1163           * @param   dstAddr - where you want the message to go
   1164           * @param   alarmCode - code for the cause of the alarm
   1165           * @param   clusterID - cluster whose attribute generate the alarm
   1166           *
   1167           * @return  ZStatus_t
   1168          */
   1169          ZStatus_t zclGeneral_SendAlarmReset( uint8 srcEP, afAddrType_t *dstAddr,
   1170                                               uint8 alarmCode, uint16 clusterID,
   1171                                               uint8 disableDefaultRsp, uint8 seqNum )
   1172          {
   1173            uint8 buf[3];
   1174          
   1175            buf[0] = alarmCode;
   1176            buf[1] = LO_UINT16( clusterID );
   1177            buf[2] = HI_UINT16( clusterID );
   1178          
   1179            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1180                                    COMMAND_ALARMS_RESET, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1181                                    disableDefaultRsp, 0, seqNum, 3, buf );
   1182          }
   1183          
   1184          /*********************************************************************
   1185           * @fn      zclGeneral_SendAlarmGetResponse
   1186           *
   1187           * @brief   Call to send out an Alarm Get Response Command
   1188           *
   1189           * @param   srcEP - Sending application's endpoint
   1190           * @param   dstAddr - where you want the message to go
   1191           * @param   status - SUCCESS or NOT_FOUND
   1192           * @param   alarmCode - code for the cause of the alarm
   1193           * @param   clusterID - cluster whose attribute generate the alarm
   1194           * @param   timeStamp - time at which the alarm occured
   1195           *
   1196           * @return  ZStatus_t
   1197           */
   1198          ZStatus_t zclGeneral_SendAlarmGetResponse( uint8 srcEP, afAddrType_t *dstAddr,
   1199                                                     uint8 status, uint8 alarmCode, uint16 clusterID,
   1200                                                     uint32 timeStamp, uint8 disableDefaultRsp, uint8 seqNum )
   1201          {
   1202            uint8 buf[8];
   1203            uint8 len = 1; // Status
   1204          
   1205            buf[0] = status;
   1206            if ( status == ZCL_STATUS_SUCCESS )
   1207            {
   1208              len += 1 + 2 + 4; // Alarm code + Cluster ID + Time stamp
   1209              buf[1] = alarmCode;
   1210              buf[2] = LO_UINT16( clusterID );
   1211              buf[3] = HI_UINT16( clusterID );
   1212              zcl_buffer_uint32( &buf[4], timeStamp );
   1213            }
   1214          
   1215            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1216                                    COMMAND_ALARMS_GET_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   1217                                    disableDefaultRsp, 0, seqNum, len, buf );
   1218          }
   1219          
   1220          #ifdef SE_UK_EXT
   1221          /*********************************************************************
   1222           * @fn      zclGeneral_SendAlarmGetEventLog
   1223           *
   1224           * @brief   Call to send out an Alarm Get Event Log Command
   1225           *
   1226           * @param   srcEP - Sending application's endpoint
   1227           * @param   dstAddr - where you want the message to go
   1228           * @param   pEventLog - pointer to Get Event Log Command
   1229           * @param   disableDefaultRsp - disable default response
   1230           * @param   seqNum - ZCL sequence number
   1231           *
   1232           * @return  ZStatus_t
   1233           */
   1234          ZStatus_t zclGeneral_SendAlarmGetEventLog( uint8 srcEP, afAddrType_t *dstAddr,
   1235                                                     zclGetEventLog_t *pEventLog,
   1236                                                     uint8 disableDefaultRsp, uint8 seqNum )
   1237          {
   1238            uint8 buf[10];
   1239          
   1240            buf[0] = pEventLog->logID;
   1241            zcl_buffer_uint32( &buf[1], pEventLog->startTime );
   1242            zcl_buffer_uint32( &buf[5], pEventLog->endTime );
   1243            buf[9] = pEventLog->numEvents;
   1244          
   1245            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1246                                    COMMAND_ALARMS_GET_EVENT_LOG, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   1247                                    disableDefaultRsp, 0, seqNum, 10, buf );
   1248          }
   1249          
   1250          /*********************************************************************
   1251           * @fn      zclGeneral_SendAlarmPublishEventLog
   1252           *
   1253           * @brief   Call to send out an Alarm Publish Event Log Command
   1254           *
   1255           * @param   srcEP - Sending application's endpoint
   1256           * @param   dstAddr - where you want the message to go
   1257           * @param   pEventLog - pointer to Publish Event Log Command
   1258           * @param   disableDefaultRsp - disable default response
   1259           * @param   seqNum - ZCL sequence number
   1260           *
   1261           * @return  ZStatus_t
   1262           */
   1263          ZStatus_t zclGeneral_SendAlarmPublishEventLog( uint8 srcEP, afAddrType_t *dstAddr,
   1264                                                         zclPublishEventLog_t *pEventLog,
   1265                                                         uint8 disableDefaultRsp, uint8 seqNum )
   1266          {
   1267            uint8 *buf;
   1268            uint8 *pBuf;
   1269            uint8 bufLen;
   1270          
   1271            // Log ID + Command Index + Total Commands + (numSubLogs * ( Event ID + Event Time))
   1272            bufLen = 1 + 1 + 1 + (pEventLog->numSubLogs * (1 + 4));
   1273          
   1274            buf = zcl_mem_alloc( bufLen );
   1275            if ( buf == NULL )
   1276            {
   1277              return (ZMemError);
   1278            }
   1279          
   1280            pBuf = buf;
   1281            *pBuf++ = pEventLog->logID;
   1282            *pBuf++ = pEventLog->cmdIndex;
   1283            *pBuf++ = pEventLog->totalCmds;
   1284          
   1285            for ( uint8 i = 0; i < pEventLog->numSubLogs; i++ )
   1286            {
   1287              zclEventLogPayload_t *pLogs = &(pEventLog->pLogs[i]);
   1288          
   1289              *pBuf++ = pLogs->eventId;
   1290              pBuf = zcl_buffer_uint32( pBuf, pLogs->eventTime );
   1291            }
   1292          
   1293            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1294                                    COMMAND_ALARMS_PUBLISH_EVENT_LOG, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1295                                    disableDefaultRsp, 0, seqNum, bufLen, buf );
   1296          }
   1297          #endif // SE_UK_EXT
   1298          #endif // ZCL_ALARMS
   1299          
   1300          #ifdef ZCL_LOCATION
   1301          /*********************************************************************
   1302           * @fn      zclGeneral_SendLocationSetAbsolute
   1303           *
   1304           * @brief   Call to send out a Set Absolute Location Command
   1305           *
   1306           * @param   srcEP - Sending application's endpoint
   1307           * @param   dstAddr - where you want the message to go
   1308           * @param   absLoc - absolute location info
   1309           *
   1310           * @return  ZStatus_t
   1311           */
   1312          ZStatus_t zclGeneral_SendLocationSetAbsolute( uint8 srcEP, afAddrType_t *dstAddr,
   1313                                                        zclLocationAbsolute_t *absLoc,
   1314                                                        uint8 disableDefaultRsp, uint8 seqNum )
   1315          {
   1316             uint8 buf[10]; // 5 fields (2 octects each)
   1317          
   1318             buf[0] = LO_UINT16( absLoc->coordinate1 );
   1319             buf[1] = HI_UINT16( absLoc->coordinate1 );
   1320             buf[2] = LO_UINT16( absLoc->coordinate2 );
   1321             buf[3] = HI_UINT16( absLoc->coordinate2 );
   1322             buf[4] = LO_UINT16( absLoc->coordinate3 );
   1323             buf[5] = HI_UINT16( absLoc->coordinate3 );
   1324             buf[6] = LO_UINT16( absLoc->power );
   1325             buf[7] = HI_UINT16( absLoc->power );
   1326             buf[8] = LO_UINT16( absLoc->pathLossExponent );
   1327             buf[9] = HI_UINT16( absLoc->pathLossExponent );
   1328          
   1329             return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1330                                     COMMAND_LOCATION_SET_ABSOLUTE, TRUE,
   1331                                     ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 10, buf );
   1332          }
   1333          
   1334          /*********************************************************************
   1335           * @fn      zclGeneral_SendLocationSetDevCfg
   1336           *
   1337           * @brief   Call to send out a Set Device Configuration Command
   1338           *
   1339           * @param   srcEP - Sending application's endpoint
   1340           * @param   dstAddr - where you want the message to go
   1341           * @param   devCfg - device configuration info
   1342           *
   1343           * @return  ZStatus_t
   1344           */
   1345          ZStatus_t zclGeneral_SendLocationSetDevCfg( uint8 srcEP, afAddrType_t *dstAddr,
   1346                                                      zclLocationDevCfg_t *devCfg,
   1347                                                      uint8 disableDefaultRsp, uint8 seqNum )
   1348          {
   1349             uint8 buf[9];  // 4 fields (2 octects each) + 1 field with 1 octect
   1350          
   1351             buf[0] = LO_UINT16( devCfg->power );
   1352             buf[1] = HI_UINT16( devCfg->power );
   1353             buf[2] = LO_UINT16( devCfg->pathLossExponent );
   1354             buf[3] = HI_UINT16( devCfg->pathLossExponent );
   1355             buf[4] = LO_UINT16( devCfg->calcPeriod );
   1356             buf[5] = HI_UINT16( devCfg->calcPeriod );
   1357             buf[6] = devCfg->numMeasurements;
   1358             buf[7] = LO_UINT16( devCfg->reportPeriod );
   1359             buf[8] = HI_UINT16( devCfg->reportPeriod );
   1360          
   1361             return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1362                                     COMMAND_LOCATION_SET_DEV_CFG, TRUE,
   1363                                     ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 9, buf );
   1364          }
   1365          
   1366          /*********************************************************************
   1367           * @fn      zclGeneral_SendLocationGetDevCfg
   1368           *
   1369           * @brief   Call to send out a Get Device Configuration Command
   1370           *
   1371           * @param   srcEP - Sending application's endpoint
   1372           * @param   dstAddr - where you want the message to go
   1373           * @param   targetAddr - device for which location parameters are being requested
   1374           *
   1375           * @return  ZStatus_t
   1376           */
   1377          ZStatus_t zclGeneral_SendLocationGetDevCfg( uint8 srcEP, afAddrType_t *dstAddr,
   1378                                                      uint8 *targetAddr, uint8 disableDefaultRsp, uint8 seqNum )
   1379          {
   1380            uint8 buf[8];
   1381          
   1382            zcl_memcpy( buf, targetAddr, 8 );
   1383          
   1384            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1385                                    COMMAND_LOCATION_GET_DEV_CFG, TRUE,
   1386                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 8, buf );
   1387          }
   1388          
   1389          /*********************************************************************
   1390           * @fn      zclGeneral_SendLocationGetData
   1391           *
   1392           * @brief   Call to send out a Get Location Data Command
   1393           *
   1394           * @param   srcEP - Sending application's endpoint
   1395           * @param   dstAddr - where you want the message to go
   1396           * @param   locaData - location information and channel parameters that are requested.
   1397           *
   1398           * @return  ZStatus_t
   1399           */
   1400          ZStatus_t zclGeneral_SendLocationGetData( uint8 srcEP, afAddrType_t *dstAddr,
   1401                                                    zclLocationGetData_t *locData,
   1402                                                    uint8 disableDefaultRsp, uint8 seqNum )
   1403          {
   1404            uint8 buf[10]; // bitmap (1) + number responses (1) + IEEE Address (8)
   1405            uint8 *pBuf = buf;
   1406            uint8 len = 2; // bitmap + number responses
   1407          
   1408            *pBuf  = locData->absoluteOnly;
   1409            *pBuf |= locData->recalculate << 1;
   1410            *pBuf |= locData->brdcastIndicator << 2;
   1411            *pBuf |= locData->brdcastResponse << 3;
   1412            *pBuf |= locData->compactResponse << 4;
   1413            pBuf++;  // move past the bitmap field
   1414          
   1415            *pBuf++ = locData->numResponses;
   1416          
   1417            if ( locData->brdcastIndicator == 0 )
   1418            {
   1419              zcl_memcpy( pBuf, locData->targetAddr, 8 );
   1420              len += 8; // ieee addr
   1421            }
   1422          
   1423            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1424                                    COMMAND_LOCATION_GET_DATA, TRUE,
   1425                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, len, buf );
   1426          }
   1427          
   1428          /*********************************************************************
   1429           * @fn      zclGeneral_SendLocationDevCfgResponse
   1430           *
   1431           * @brief   Call to send out a Device Configuration Response Command
   1432           *
   1433           * @param   srcEP - Sending application's endpoint
   1434           * @param   dstAddr - where you want the message to go
   1435           * @param   devCfg - device's location parameters that are requested
   1436           *
   1437           * @return  ZStatus_t
   1438           */
   1439          ZStatus_t zclGeneral_SendLocationDevCfgResponse( uint8 srcEP, afAddrType_t *dstAddr,
   1440                                                           zclLocationDevCfgRsp_t *devCfg,
   1441                                                           uint8 disableDefaultRsp, uint8 seqNum )
   1442          {
   1443            uint8 buf[10]; // 4 fields (2 octects each) + 2 fields (1 octect each)
   1444            uint8 len = 1; // Status
   1445          
   1446            buf[0] = devCfg->status;
   1447            if ( devCfg->status == ZCL_STATUS_SUCCESS )
   1448            {
   1449              buf[1] = LO_UINT16( devCfg->data.power );
   1450              buf[2] = HI_UINT16( devCfg->data.power );
   1451              buf[3] = LO_UINT16( devCfg->data.pathLossExponent );
   1452              buf[4] = HI_UINT16( devCfg->data.pathLossExponent );
   1453              buf[5] = LO_UINT16( devCfg->data.calcPeriod );
   1454              buf[6] = HI_UINT16( devCfg->data.calcPeriod );
   1455              buf[7] = devCfg->data.numMeasurements;
   1456              buf[8] = LO_UINT16( devCfg->data.reportPeriod );
   1457              buf[9] = HI_UINT16( devCfg->data.reportPeriod );
   1458              len += 9;
   1459            }
   1460          
   1461            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1462                                    COMMAND_LOCATION_DEV_CFG_RSP, TRUE,
   1463                                    ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, len, buf );
   1464          }
   1465          
   1466          /*********************************************************************
   1467           * @fn      zclGeneral_SendLocationData
   1468           *
   1469           * @brief   Call to send out location data
   1470           *
   1471           * @param   srcEP - Sending application's endpoint
   1472           * @param   dstAddr - where you want the message to go
   1473           * @param   status - indicates whether response to request was successful or not
   1474           * @param   locData - location information and channel parameters being sent
   1475           *
   1476           * @return  ZStatus_t
   1477           */
   1478          ZStatus_t zclGeneral_SendLocationData( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
   1479                                                 uint8 status, zclLocationData_t *locData,
   1480                                                 uint8 disableDefaultRsp, uint8 seqNum )
   1481          {
   1482            uint8 buf[16];
   1483            uint8 *pBuf = buf;
   1484            uint8 len = 0;
   1485          
   1486            if ( cmd == COMMAND_LOCATION_DATA_RSP )
   1487            {
   1488              // Only response command includes a status field
   1489              *pBuf++ = status;
   1490              len++;
   1491            }
   1492          
   1493            if ( cmd != COMMAND_LOCATION_DATA_RSP || status == ZCL_STATUS_SUCCESS )
   1494            {
   1495              // Notification or Response with successful status
   1496              *pBuf++ = locData->type;
   1497              *pBuf++ = LO_UINT16( locData->absLoc.coordinate1 );
   1498              *pBuf++ = HI_UINT16( locData->absLoc.coordinate1 );
   1499              *pBuf++ = LO_UINT16( locData->absLoc.coordinate2 );
   1500              *pBuf++ = HI_UINT16( locData->absLoc.coordinate2 );
   1501              len += 5;
   1502          
   1503              if ( locationType2D(locData->type) == 0 )
   1504              {
   1505                // 2D location doesn't have coordinate 3
   1506                *pBuf++ = LO_UINT16( locData->absLoc.coordinate3 );
   1507                *pBuf++ = HI_UINT16( locData->absLoc.coordinate3 );
   1508                len += 2;
   1509              }
   1510          
   1511              if ( cmd != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
   1512              {
   1513                // Compact notification doesn't include these fields
   1514                *pBuf++ = LO_UINT16( locData->absLoc.power );
   1515                *pBuf++ = HI_UINT16( locData->absLoc.power );
   1516                *pBuf++ = LO_UINT16( locData->absLoc.pathLossExponent );
   1517                *pBuf++ = HI_UINT16( locData->absLoc.pathLossExponent );
   1518                len += 4;
   1519              }
   1520          
   1521              if ( locationTypeAbsolute(locData->type) == 0 )
   1522              {
   1523                // Absolute location doesn't include these fields
   1524                if ( cmd != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
   1525                {
   1526                  // Compact notification doesn't include this field
   1527                  *pBuf++ = locData->calcLoc.locationMethod;
   1528                  len++;
   1529                }
   1530          
   1531                *pBuf++ = locData->calcLoc.qualityMeasure;
   1532                *pBuf++ = LO_UINT16( locData->calcLoc.locationAge );
   1533                *pBuf++ = HI_UINT16( locData->calcLoc.locationAge );
   1534                len += 3;
   1535              }
   1536            }
   1537          
   1538            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1539                                    cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   1540                                    disableDefaultRsp, 0, seqNum, len, buf );
   1541          }
   1542          #endif // ZCL_LOCATION
   1543          
   1544          /*********************************************************************
   1545           * @fn      zclGeneral_FindCallbacks
   1546           *
   1547           * @brief   Find the callbacks for an endpoint
   1548           *
   1549           * @param   endpoint - endpoint to find the application callbacks for
   1550           *
   1551           * @return  pointer to the callbacks
   1552           */
   1553          static zclGeneral_AppCallbacks_t *zclGeneral_FindCallbacks( uint8 endpoint )
   1554          {
   1555            zclGenCBRec_t *pCBs;
   1556          
   1557            pCBs = zclGenCBs;
   1558            while ( pCBs )
   1559            {
   1560              if ( pCBs->endpoint == endpoint )
   1561                return ( pCBs->CBs );
   1562              pCBs = pCBs->next;
   1563            }
   1564            return ( (zclGeneral_AppCallbacks_t *)NULL );
   1565          }
   1566          
   1567          /*********************************************************************
   1568           * @fn      zclGeneral_HdlIncoming
   1569           *
   1570           * @brief   Callback from ZCL to process incoming Commands specific
   1571           *          to this cluster library or Profile commands for attributes
   1572           *          that aren't in the attribute list
   1573           *
   1574           *
   1575           * @param   pInMsg - pointer to the incoming message
   1576           *
   1577           * @return  ZStatus_t
   1578           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1579          static ZStatus_t zclGeneral_HdlIncoming( zclIncoming_t *pInMsg )
   \                     zclGeneral_HdlIncoming:
   1580          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1581            ZStatus_t stat = ZSuccess;
   1582          
   1583          #if defined ( INTER_PAN )
   1584            if ( StubAPS_InterPan( pInMsg->msg->srcAddr.panId, pInMsg->msg->srcAddr.endPoint ) )
   1585              return ( stat ); // Cluster not supported thru Inter-PAN
   1586          #endif
   1587            if ( zcl_ClusterCmd( pInMsg->hdr.fc.type ) )
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   5407         ANL       A,#0x7
   \   00000D   6401         XRL       A,#0x1
   \   00000F   7007         JNZ       ??zclGeneral_HdlIncoming_0
   1588            {
   1589              // Is this a manufacturer specific command?
   1590              if ( pInMsg->hdr.fc.manuSpecific == 0 )
   1591              {
   1592                stat = zclGeneral_HdlInSpecificCommands( pInMsg );
   \   000011                ; Setup parameters for call to function zclGeneral_HdlInSpecificCommands
   \   000011   12....       LCALL     `??zclGeneral_HdlInSpecificCommands::?relay`; Banked call to: zclGeneral_HdlInSpecificCommands
   \   000014   E9           MOV       A,R1
   \   000015   F9           MOV       R1,A
   \   000016   8002         SJMP      ??zclGeneral_HdlIncoming_1
   1593              }
   1594              else
   1595              {
   1596                // We don't support any manufacturer specific command.
   1597                stat = ZFailure;
   1598              }
   1599            }
   1600            else
   1601            {
   1602              // Handle all the normal (Read, Write...) commands -- should never get here
   1603              stat = ZFailure;
   \                     ??zclGeneral_HdlIncoming_0:
   \   000018   7901         MOV       R1,#0x1
   1604            }
   1605            return ( stat );
   \                     ??zclGeneral_HdlIncoming_1:
   \   00001A   D083         POP       DPH
   \   00001C   D082         POP       DPL
   \   00001E   02....       LJMP      ?BRET
   1606          }
   1607          
   1608          /*********************************************************************
   1609           * @fn      zclGeneral_HdlInSpecificCommands
   1610           *
   1611           * @brief   Callback from ZCL to process incoming Commands specific
   1612           *          to this cluster library
   1613          
   1614           * @param   pInMsg - pointer to the incoming message
   1615           *
   1616           * @return  ZStatus_t
   1617           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1618          static ZStatus_t zclGeneral_HdlInSpecificCommands( zclIncoming_t *pInMsg )
   \                     zclGeneral_HdlInSpecificCommands:
   1619          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1620            ZStatus_t stat;
   1621            zclGeneral_AppCallbacks_t *pCBs;
   1622          
   1623            // make sure endpoint exists
   1624            pCBs = zclGeneral_FindCallbacks( pInMsg->msg->endPoint );
   \   000005   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000008   E8           MOV       A,R0
   \   000009   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   00000C   FC           MOV       R4,A
   \   00000D   90....       MOV       DPTR,#zclGenCBs
   \                     ??zclGeneral_HdlInSpecificCommands_0:
   \   000010   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000013   6059         JZ        ??zclGeneral_HdlInSpecificCommands_1
   \   000015   8882         MOV       DPL,R0
   \   000017   8983         MOV       DPH,R1
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   6C           XRL       A,R4
   \   00001D   8882         MOV       DPL,R0
   \   00001F   8983         MOV       DPH,R1
   \   000021   70ED         JNZ       ??zclGeneral_HdlInSpecificCommands_0
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000029   FD           MOV       R5,A
   1625            if ( pCBs == NULL )
   \   00002A   EC           MOV       A,R4
   \   00002B   4D           ORL       A,R5
   \   00002C   6040         JZ        ??zclGeneral_HdlInSpecificCommands_1
   1626              return ( ZFailure );
   1627          
   1628            switch ( pInMsg->msg->clusterId )
   \   00002E   8E82         MOV       DPL,R6
   \   000030   8F83         MOV       DPH,R7
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F5..         MOV       ?V0,A
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F5..         MOV       ?V1,A
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for zclGeneral_HdlInSpecificComman_0`:
   \   000042   0000         DW        0
   \   000044   06           DB        6
   \   000045   ....         DW        ??zclGeneral_HdlInSpecificCommands_1
   \   000047   ....         DW        ??zclGeneral_HdlInSpecificCommands_2
   \   000049   ....         DW        ??zclGeneral_HdlInSpecificCommands_1
   \   00004B   ....         DW        ??zclGeneral_HdlInSpecificCommands_1
   \   00004D   ....         DW        ??zclGeneral_HdlInSpecificCommands_3
   \   00004F   ....         DW        ??zclGeneral_HdlInSpecificCommands_4
   \   000051   ....         DW        ??zclGeneral_HdlInSpecificCommands_1
   \   000053   ....         DW        ??zclGeneral_HdlInSpecificCommands_5
   1629            {
   1630          #ifdef ZCL_BASIC
   1631              case ZCL_CLUSTER_ID_GEN_BASIC:
   1632                stat = zclGeneral_ProcessInBasic( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_2:
   \   000055   8A82         MOV       DPL,R2
   \   000057   8B83         MOV       DPH,R3
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   5408         ANL       A,#0x8
   \   00005E   701E         JNZ       ??zclGeneral_HdlInSpecificCommands_6
   \   000060   8A82         MOV       DPL,R2
   \   000062   8B83         MOV       DPH,R3
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   6004         JZ        ??zclGeneral_HdlInSpecificCommands_7
   \                     ??zclGeneral_HdlInSpecificCommands_1:
   \   00006E   7901         MOV       R1,#0x1
   \   000070   8065         SJMP      ??zclGeneral_HdlInSpecificCommands_8
   \                     ??zclGeneral_HdlInSpecificCommands_7:
   \   000072   8C82         MOV       DPL,R4
   \   000074   8D83         MOV       DPH,R5
   \   000076   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000079   6003         JZ        ??zclGeneral_HdlInSpecificCommands_6
   \   00007B                ; Setup parameters for indirect call
   \   00007B   12....       LCALL     ?CALL_IND
   \                     ??zclGeneral_HdlInSpecificCommands_6:
   \   00007E   7900         MOV       R1,#0x0
   \   000080   8055         SJMP      ??zclGeneral_HdlInSpecificCommands_8
   1633                break;
   1634          #endif // ZCL_BASIC
   1635          
   1636          #ifdef ZCL_IDENTIFY
   1637              case ZCL_CLUSTER_ID_GEN_IDENTIFY:
   1638                stat = zclGeneral_ProcessInIdentity( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_3:
   \   000082                ; Setup parameters for call to function zclGeneral_ProcessInIdentity
   \   000082   12....       LCALL     `??zclGeneral_ProcessInIdentity::?relay`; Banked call to: zclGeneral_ProcessInIdentity
   \   000085   8013         SJMP      ??zclGeneral_HdlInSpecificCommands_9
   1639                break;
   1640          #endif // ZCL_IDENTIFY
   1641          
   1642          #ifdef ZCL_GROUPS
   1643              case ZCL_CLUSTER_ID_GEN_GROUPS:
   1644                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \                     ??zclGeneral_HdlInSpecificCommands_4:
   \   000087   8A82         MOV       DPL,R2
   \   000089   8B83         MOV       DPH,R3
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   5408         ANL       A,#0x8
   \   000090   7005         JNZ       ??zclGeneral_HdlInSpecificCommands_10
   1645                  stat = zclGeneral_ProcessInGroupsServer( pInMsg );
   \   000092                ; Setup parameters for call to function zclGeneral_ProcessInGroupsServer
   \   000092   12....       LCALL     `??zclGeneral_ProcessInGroupsServer::?relay`; Banked call to: zclGeneral_ProcessInGroupsServer
   \   000095   8003         SJMP      ??zclGeneral_HdlInSpecificCommands_9
   1646                else
   1647                  stat = zclGeneral_ProcessInGroupsClient( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_10:
   \   000097                ; Setup parameters for call to function zclGeneral_ProcessInGroupsClient
   \   000097   12....       LCALL     `??zclGeneral_ProcessInGroupsClient::?relay`; Banked call to: zclGeneral_ProcessInGroupsClient
   \                     ??zclGeneral_HdlInSpecificCommands_9:
   \   00009A   E9           MOV       A,R1
   \   00009B   8039         SJMP      ??zclGeneral_HdlInSpecificCommands_11
   1648                break;
   1649          #endif // ZCL_GROUPS
   1650          
   1651          #ifdef ZCL_SCENES
   1652              case ZCL_CLUSTER_ID_GEN_SCENES:
   1653                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   1654                  stat = zclGeneral_ProcessInScenesServer( pInMsg, pCBs );
   1655                else
   1656                  stat = zclGeneral_ProcessInScenesClient( pInMsg, pCBs );
   1657                break;
   1658          #endif // ZCL_SCENES
   1659          
   1660          #ifdef ZCL_ON_OFF
   1661              case ZCL_CLUSTER_ID_GEN_ON_OFF:
   1662                stat = zclGeneral_ProcessInOnOff( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_5:
   \   00009D   7E00         MOV       R6,#0x0
   \   00009F   8A82         MOV       DPL,R2
   \   0000A1   8B83         MOV       DPH,R3
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   5408         ANL       A,#0x8
   \   0000A8   702B         JNZ       ??zclGeneral_HdlInSpecificCommands_12
   \   0000AA   8A82         MOV       DPL,R2
   \   0000AC   8B83         MOV       DPH,R3
   \   0000AE   A3           INC       DPTR
   \   0000AF   A3           INC       DPTR
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   A3           INC       DPTR
   \   0000B3   A3           INC       DPTR
   \   0000B4   A3           INC       DPTR
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   FA           MOV       R2,A
   \   0000B7   6006         JZ        ??zclGeneral_HdlInSpecificCommands_13
   \   0000B9   14           DEC       A
   \   0000BA   6003         JZ        ??zclGeneral_HdlInSpecificCommands_13
   \   0000BC   14           DEC       A
   \   0000BD   7014         JNZ       ??zclGeneral_HdlInSpecificCommands_14
   \                     ??zclGeneral_HdlInSpecificCommands_13:
   \   0000BF   8C82         MOV       DPL,R4
   \   0000C1   8D83         MOV       DPH,R5
   \   0000C3   A3           INC       DPTR
   \   0000C4   A3           INC       DPTR
   \   0000C5   A3           INC       DPTR
   \   0000C6   A3           INC       DPTR
   \   0000C7   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0000CA   6009         JZ        ??zclGeneral_HdlInSpecificCommands_12
   \   0000CC                ; Setup parameters for indirect call
   \   0000CC   EA           MOV       A,R2
   \   0000CD   F9           MOV       R1,A
   \   0000CE   12....       LCALL     ?CALL_IND
   \   0000D1   8002         SJMP      ??zclGeneral_HdlInSpecificCommands_12
   \                     ??zclGeneral_HdlInSpecificCommands_14:
   \   0000D3   7E01         MOV       R6,#0x1
   1663                //stat = zclGeneral_ProcessInOnOffTest( pInMsg );
   1664                break;
   1665          #endif // ZCL_ON_OFF
   1666          
   1667          #ifdef ZCL_LEVEL_CTRL
   1668              case ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL:
   1669                stat = zclGeneral_ProcessInLevelControl( pInMsg, pCBs );
   1670                break;
   1671          #endif // ZCL_LEVEL_CTRL
   1672          
   1673          #ifdef ZCL_ALARMS
   1674              case ZCL_CLUSTER_ID_GEN_ALARMS:
   1675                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   1676                  stat = zclGeneral_ProcessInAlarmsServer( pInMsg, pCBs );
   1677                else
   1678                  stat = zclGeneral_ProcessInAlarmsClient( pInMsg, pCBs );
   1679                break;
   1680          #endif // ZCL_ALARMS
   1681          
   1682          #ifdef ZCL_LOCATION
   1683              case ZCL_CLUSTER_ID_GEN_LOCATION:
   1684                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   1685                  stat = zclGeneral_ProcessInLocationServer( pInMsg, pCBs );
   1686                else
   1687                  stat = zclGeneral_ProcessInLocationClient( pInMsg, pCBs );
   1688                break;
   1689          #endif // ZCL_LOCATION
   1690          
   1691              case ZCL_CLUSTER_ID_GEN_POWER_CFG:
   1692              case ZCL_CLUSTER_ID_GEN_DEVICE_TEMP_CONFIG:
   1693              case ZCL_CLUSTER_ID_GEN_ON_OFF_SWITCH_CONFIG:
   1694              case ZCL_CLUSTER_ID_GEN_TIME:
   1695              default:
   1696                stat = ZFailure;
   1697                break;
   1698            }
   \                     ??zclGeneral_HdlInSpecificCommands_12:
   \   0000D5   EE           MOV       A,R6
   \                     ??zclGeneral_HdlInSpecificCommands_11:
   \   0000D6   F9           MOV       R1,A
   1699          
   1700            return ( stat );
   \                     ??zclGeneral_HdlInSpecificCommands_8:
   \   0000D7   02....       LJMP      ??Subroutine38_0 & 0xFFFF
   1701          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   8882         MOV       DPL,R0
   \   000006   F583         MOV       DPH,A
   \   000008   E582         MOV       A,DPL
   \   00000A   4583         ORL       A,DPH
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000007   FE           MOV       R6,A
   \   000008   E9           MOV       A,R1
   \   000009   FF           MOV       R7,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   2414         ADD       A,#0x14
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F583         MOV       DPH,A
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET
   1702          
   1703          #ifdef ZCL_BASIC
   1704          /*********************************************************************
   1705           * @fn      zclGeneral_ProcessInBasic
   1706           *
   1707           * @brief   Process in the received Basic Command.
   1708           *
   1709           * @param   pInMsg - pointer to the incoming message
   1710           *
   1711           * @return  ZStatus_t
   1712           */
   1713          static ZStatus_t zclGeneral_ProcessInBasic( zclIncoming_t *pInMsg,
   1714                                                      zclGeneral_AppCallbacks_t *pCBs )
   1715          {
   1716            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   1717            {
   1718              if ( pInMsg->hdr.commandID > COMMAND_BASIC_RESET_FACT_DEFAULT )
   1719                return ( ZFailure );   // Error ignore the command
   1720          
   1721              if ( pCBs->pfnBasicReset )
   1722                pCBs->pfnBasicReset();
   1723            }
   1724            // no Client command
   1725          
   1726            return ( ZSuccess );
   1727          }
   1728          #endif // ZCL_BASIC
   1729          
   1730          #ifdef ZCL_IDENTIFY
   1731          /*********************************************************************
   1732           * @fn      zclGeneral_ProcessInIdentity
   1733           *
   1734           * @brief   Process in the received Identity Command.
   1735           *
   1736           * @param   pInMsg - pointer to the incoming message
   1737           *
   1738           * @return  ZStatus_t
   1739           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1740          static ZStatus_t zclGeneral_ProcessInIdentity( zclIncoming_t *pInMsg,
   \                     zclGeneral_ProcessInIdentity:
   1741                                                         zclGeneral_AppCallbacks_t *pCBs )
   1742          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   1743            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F8           MOV       R0,A
   \   00001B   8A82         MOV       DPL,R2
   \   00001D   8B83         MOV       DPH,R3
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   5408         ANL       A,#0x8
   \   000024   6003         JZ        $+5
   \   000026   02....       LJMP      ??zclGeneral_ProcessInIdentity_0 & 0xFFFF
   1744            {
   1745              if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY )
   \   000029   E8           MOV       A,R0
   \   00002A   7024         JNZ       ??zclGeneral_ProcessInIdentity_1
   1746              {
   1747                uint16 identifyTime;
   1748                
   1749                identifyTime = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1750                
   1751                bdb_ZclIdentifyCmdInd( identifyTime, pInMsg->msg->endPoint);
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   12....       LCALL     ?Subroutine18 & 0xFFFF
   1752              }
   \                     ??CrossCallReturnLabel_38:
   \   00003B   FA           MOV       R2,A
   \   00003C   E9           MOV       A,R1
   \   00003D   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000040   8A82         MOV       DPL,R2
   \   000042   8B83         MOV       DPH,R3
   \   000044   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000047   FB           MOV       R3,A
   \   000048   EC           MOV       A,R4
   \   000049   FA           MOV       R2,A
   \   00004A   12....       LCALL     `??bdb_ZclIdentifyCmdInd::?relay`; Banked call to: bdb_ZclIdentifyCmdInd
   \   00004D   02....       LJMP      ??zclGeneral_ProcessInIdentity_2 & 0xFFFF
   1753              else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_QUERY )
   \                     ??zclGeneral_ProcessInIdentity_1:
   \   000050   7401         MOV       A,#0x1
   \   000052   68           XRL       A,R0
   \   000053   6003         JZ        $+5
   \   000055   02....       LJMP      ??zclGeneral_ProcessInIdentity_3 & 0xFFFF
   1754              {
   1755                uint16 identifyTime = 0;
   \   000058   85..82       MOV       DPL,?XSP + 0
   \   00005B   85..83       MOV       DPH,?XSP + 1
   \   00005E   E4           CLR       A
   \   00005F   F0           MOVX      @DPTR,A
   \   000060   A3           INC       DPTR
   \   000061   F0           MOVX      @DPTR,A
   1756          
   1757                // Retrieve Identify Time
   1758                zcl_ReadAttrData( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   1759                                  ATTRID_IDENTIFY_TIME, (uint8 *)&identifyTime, NULL );
   \   000062   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000065                ; Setup parameters for call to function zcl_ReadAttrData
   \   000065   E4           CLR       A
   \   000066   F5..         MOV       ?V2,A
   \   000068   F5..         MOV       ?V3,A
   \   00006A   78..         MOV       R0,#?V2
   \   00006C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006F   7402         MOV       A,#0x2
   \   000071   12....       LCALL     ?XSTACK_DISP100_8
   \   000074   88..         MOV       ?V2,R0
   \   000076   89..         MOV       ?V3,R1
   \   000078   78..         MOV       R0,#?V2
   \   00007A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007D   7C00         MOV       R4,#0x0
   \   00007F   7D00         MOV       R5,#0x0
   \   000081   8E82         MOV       DPL,R6
   \   000083   8F83         MOV       DPH,R7
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00008C   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00008F   12....       LCALL     `??zcl_ReadAttrData::?relay`; Banked call to: zcl_ReadAttrData
   \   000092   7404         MOV       A,#0x4
   \   000094   12....       LCALL     ?DEALLOC_XSTACK8
   1760          
   1761                // Is device identifying itself?
   1762                if ( identifyTime > 0 )
   \   000097   85..82       MOV       DPL,?XSP + 0
   \   00009A   85..83       MOV       DPH,?XSP + 1
   \   00009D   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0000A0   6078         JZ        ??zclGeneral_ProcessInIdentity_2
   1763                {
   1764                  zclGeneral_SendIdentifyQueryResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1765                                                        identifyTime, true, pInMsg->hdr.transSeqNum );
   \   0000A2   85..82       MOV       DPL,?V0
   \   0000A5   85..83       MOV       DPH,?V1
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   FE           MOV       R6,A
   \   0000AA   A3           INC       DPTR
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   FF           MOV       R7,A
   \   0000AD                ; Setup parameters for call to function zclGeneral_SendIdentifyQueryResponse
   \   0000AD   85..82       MOV       DPL,?V0
   \   0000B0   85..83       MOV       DPH,?V1
   \   0000B3   A3           INC       DPTR
   \   0000B4   A3           INC       DPTR
   \   0000B5   A3           INC       DPTR
   \   0000B6   A3           INC       DPTR
   \   0000B7   A3           INC       DPTR
   \   0000B8   A3           INC       DPTR
   \   0000B9   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0000BC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BF   75..01       MOV       ?V0,#0x1
   \   0000C2   78..         MOV       R0,#?V0
   \   0000C4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C7   7402         MOV       A,#0x2
   \   0000C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CC   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000CF   12....       LCALL     `??zclGeneral_SendIdentifyQueryResponse::?relay`; Banked call to: zclGeneral_SendIdentifyQueryResponse
   \   0000D2   7402         MOV       A,#0x2
   \   0000D4   12....       LCALL     ?DEALLOC_XSTACK8
   1766                  return ( ZCL_STATUS_CMD_HAS_RSP );
   \   0000D7   79FF         MOV       R1,#-0x1
   \   0000D9   8041         SJMP      ??zclGeneral_ProcessInIdentity_4
   1767                }
   1768              }
   1769          
   1770          #ifdef ZCL_LIGHT_LINK_ENHANCE
   1771              else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_TRIGGER_EFFECT )
   1772              {
   1773                if ( pCBs->pfnIdentifyTriggerEffect )
   1774                {
   1775                  zclIdentifyTriggerEffect_t cmd;
   1776          
   1777                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   1778                  cmd.effectId = pInMsg->pData[0];
   1779                  cmd.effectVariant = pInMsg->pData[1];
   1780          
   1781                  pCBs->pfnIdentifyTriggerEffect( &cmd );
   1782                }
   1783              }
   1784          #endif //ZCL_LIGHT_LINK_ENHANCE
   1785              else
   1786              {
   1787                return ( ZFailure );   // Error ignore the command
   1788              }
   1789            }
   1790            else // Client Command
   1791            {
   1792              if ( pInMsg->hdr.commandID > COMMAND_IDENTIFY_QUERY_RSP )
   \                     ??zclGeneral_ProcessInIdentity_0:
   \   0000DB   E8           MOV       A,R0
   \   0000DC   6004         JZ        ??zclGeneral_ProcessInIdentity_5
   1793                return ( ZFailure );   // Error ignore the command
   \                     ??zclGeneral_ProcessInIdentity_3:
   \   0000DE   7901         MOV       R1,#0x1
   \   0000E0   803A         SJMP      ??zclGeneral_ProcessInIdentity_4
   1794          
   1795              zclIdentifyQueryRsp_t rsp;
   1796              
   1797              rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \                     ??zclGeneral_ProcessInIdentity_5:
   \   0000E2   8A82         MOV       DPL,R2
   \   0000E4   8B83         MOV       DPH,R3
   \   0000E6   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0000E9   7402         MOV       A,#0x2
   \   0000EB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EE   12....       LCALL     ?Subroutine24 & 0xFFFF
   1798              rsp.timeout = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   \                     ??CrossCallReturnLabel_107:
   \   0000F1   8A82         MOV       DPL,R2
   \   0000F3   8B83         MOV       DPH,R3
   \   0000F5   A3           INC       DPTR
   \   0000F6   A3           INC       DPTR
   \   0000F7   A3           INC       DPTR
   \   0000F8   A3           INC       DPTR
   \   0000F9   A3           INC       DPTR
   \   0000FA   A3           INC       DPTR
   \   0000FB   A3           INC       DPTR
   \   0000FC   A3           INC       DPTR
   \   0000FD   E0           MOVX      A,@DPTR
   \   0000FE   FA           MOV       R2,A
   \   0000FF   A3           INC       DPTR
   \   000100   E0           MOVX      A,@DPTR
   \   000101   8A82         MOV       DPL,R2
   \   000103   F583         MOV       DPH,A
   \   000105   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000108   F9           MOV       R1,A
   \   000109   7404         MOV       A,#0x4
   \   00010B   12....       LCALL     ?XSTACK_DISP0_8
   \   00010E   EC           MOV       A,R4
   \   00010F   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   1799              
   1800              bdb_ZclIdentifyQueryCmdInd( &rsp );
   \                     ??CrossCallReturnLabel_103:
   \   000112                ; Setup parameters for call to function bdb_ZclIdentifyQueryCmdInd
   \   000112   7402         MOV       A,#0x2
   \   000114   12....       LCALL     ?XSTACK_DISP101_8
   \   000117   12....       LCALL     `??bdb_ZclIdentifyQueryCmdInd::?relay`; Banked call to: bdb_ZclIdentifyQueryCmdInd
   1801            }
   1802            return ( ZSuccess );
   \                     ??zclGeneral_ProcessInIdentity_2:
   \   00011A   7900         MOV       R1,#0x0
   \                     ??zclGeneral_ProcessInIdentity_4:
   \   00011C   7406         MOV       A,#0x6
   \   00011E   02....       LJMP      ??Subroutine44_0 & 0xFFFF
   1803          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   FB           MOV       R3,A
   \   000001                ; Setup parameters for call to function bdb_ZclIdentifyCmdInd
   \   000001                REQUIRE ??Subroutine48_0
   \   000001                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000003   49           ORL       A,R1
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000003   FD           MOV       R5,A
   \   000004   EE           MOV       A,R6
   \   000005   2406         ADD       A,#0x6
   \   000007   FA           MOV       R2,A
   \   000008   E4           CLR       A
   \   000009   3F           ADDC      A,R7
   \   00000A   FB           MOV       R3,A
   \   00000B   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   EE           MOV       A,R6
   \   000001   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F8           MOV       R0,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   C8           XCH       A,R0
   \   00000B   2414         ADD       A,#0x14
   \   00000D   F582         MOV       DPL,A
   \   00000F   E4           CLR       A
   \   000010   38           ADDC      A,R0
   \   000011   F583         MOV       DPH,A
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F9           MOV       R1,A
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2406         ADD       A,#0x6
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   F9           MOV       R1,A
   \   000009   22           RET
   1804          #endif // ZCL_IDENTIFY
   1805          
   1806          #ifdef ZCL_GROUPS
   1807          
   1808          /*********************************************************************
   1809           * @fn      zclGeneral_AddGroup
   1810           *
   1811           * @brief   Add a Group.
   1812           *
   1813           * @param   endPoint - application endpoint
   1814           * @param   group - group to be added
   1815           * @param   pData - pointer to the group info
   1816           *
   1817           * @return  ZStatus_t
   1818           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1819          static ZStatus_t zclGeneral_AddGroup( uint8 endPoint, aps_Group_t *group, uint8 *pData )
   \                     zclGeneral_AddGroup:
   1820          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V1,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   \   000010   8C..         MOV       ?V2,R4
   \   000012   8D..         MOV       ?V3,R5
   1821            uint8 nameLen;
   1822            uint8 nameSupport = FALSE;
   \   000014   85..82       MOV       DPL,?XSP + 0
   \   000017   85..83       MOV       DPH,?XSP + 1
   \   00001A   E4           CLR       A
   \   00001B   F0           MOVX      @DPTR,A
   1823          
   1824            pData += 2;   // Move past group ID
   1825            nameLen = *pData++;
   \   00001C   8C82         MOV       DPL,R4
   \   00001E   8D83         MOV       DPH,R5
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F5..         MOV       ?V0,A
   1826          
   1827            // Retrieve Name Support attribute
   1828            zcl_ReadAttrData( endPoint, ZCL_CLUSTER_ID_GEN_GROUPS,
   1829                              ATTRID_GROUP_NAME_SUPPORT, &nameSupport, NULL );
   \   000025                ; Setup parameters for call to function zcl_ReadAttrData
   \   000025   E4           CLR       A
   \   000026   F5..         MOV       ?V4,A
   \   000028   F5..         MOV       ?V5,A
   \   00002A   78..         MOV       R0,#?V4
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002F   7402         MOV       A,#0x2
   \   000031   12....       LCALL     ?XSTACK_DISP100_8
   \   000034   88..         MOV       ?V4,R0
   \   000036   89..         MOV       ?V5,R1
   \   000038   78..         MOV       R0,#?V4
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   7C00         MOV       R4,#0x0
   \   00003F   7D00         MOV       R5,#0x0
   \   000041   7A04         MOV       R2,#0x4
   \   000043   7B00         MOV       R3,#0x0
   \   000045   A9..         MOV       R1,?V1
   \   000047   12....       LCALL     `??zcl_ReadAttrData::?relay`; Banked call to: zcl_ReadAttrData
   \   00004A   7404         MOV       A,#0x4
   \   00004C   12....       LCALL     ?DEALLOC_XSTACK8
   1830          
   1831            if ( nameSupport )
   \   00004F   85..82       MOV       DPL,?XSP + 0
   \   000052   85..83       MOV       DPH,?XSP + 1
   \   000055   E0           MOVX      A,@DPTR
   \   000056   6038         JZ        ??zclGeneral_AddGroup_0
   1832            {
   1833              if ( nameLen > (APS_GROUP_NAME_LEN-1) )
   \   000058   E5..         MOV       A,?V0
   \   00005A   C3           CLR       C
   \   00005B   9410         SUBB      A,#0x10
   \   00005D   4003         JC        ??zclGeneral_AddGroup_1
   1834                 nameLen = (APS_GROUP_NAME_LEN-1);
   \   00005F   75..0F       MOV       ?V0,#0xf
   1835              group->name[0] = nameLen;
   \                     ??zclGeneral_AddGroup_1:
   \   000062   8E82         MOV       DPL,R6
   \   000064   8F83         MOV       DPH,R7
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   E5..         MOV       A,?V0
   \   00006A   12....       LCALL     ?Subroutine35 & 0xFFFF
   1836              zcl_memcpy( &(group->name[1]), pData, nameLen );
   1837            }
   \                     ??CrossCallReturnLabel_60:
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A982         MOV       R1,DPL
   \   000072   AA83         MOV       R2,DPH
   \   000074   89..         MOV       ?V4,R1
   \   000076   8A..         MOV       ?V5,R2
   \   000078   75..00       MOV       ?V6,#0x0
   \   00007B   78..         MOV       R0,#?V4
   \   00007D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000080   AC..         MOV       R4,?V0
   \   000082   7D00         MOV       R5,#0x0
   \   000084   EE           MOV       A,R6
   \   000085   2403         ADD       A,#0x3
   \   000087   FA           MOV       R2,A
   \   000088   E4           CLR       A
   \   000089   3F           ADDC      A,R7
   \   00008A   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00008D   12....       LCALL     ?DEALLOC_XSTACK8
   1838          
   1839            return ( aps_AddGroup( endPoint, group ) );
   \                     ??zclGeneral_AddGroup_0:
   \   000090                ; Setup parameters for call to function aps_AddGroup
   \   000090   EE           MOV       A,R6
   \   000091   FA           MOV       R2,A
   \   000092   EF           MOV       A,R7
   \   000093   FB           MOV       R3,A
   \   000094   A9..         MOV       R1,?V1
   \   000096   12....       LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
   \   000099   7401         MOV       A,#0x1
   \   00009B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009E   7F07         MOV       R7,#0x7
   \   0000A0   02....       LJMP      ?BANKED_LEAVE_XDATA
   1840          }
   1841          
   1842          /*********************************************************************
   1843           * @fn      zclGeneral_ProcessInGroupsServer
   1844           *
   1845           * @brief   Process in the received Groups Command.
   1846           *
   1847           * @param   pInMsg - pointer to the incoming message
   1848           *
   1849           * @return  ZStatus_t
   1850           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1851          static ZStatus_t zclGeneral_ProcessInGroupsServer( zclIncoming_t *pInMsg )
   \                     zclGeneral_ProcessInGroupsServer:
   1852          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 54
   \   000005   74CA         MOV       A,#-0x36
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   1853            aps_Group_t group;
   1854            aps_Group_t *pGroup;
   1855            uint8 *pData;
   1856            uint8 status;
   1857            uint8 grpCnt;
   1858            uint8 grpRspCnt = 0;
   \   00000E   7F00         MOV       R7,#0x0
   1859            uint16 *grpList;
   1860            uint16 identifyTime = 0;
   \   000010   7402         MOV       A,#0x2
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   E4           CLR       A
   \   000016   F0           MOVX      @DPTR,A
   \   000017   A3           INC       DPTR
   \   000018   F0           MOVX      @DPTR,A
   1861            uint8 i;
   1862            ZStatus_t stat = ZSuccess;
   \   000019   7E00         MOV       R6,#0x0
   1863          
   1864            zcl_memset( (uint8*)&group, 0, sizeof( aps_Group_t ) );
   \   00001B                ; Setup parameters for call to function osal_memset
   \   00001B   7C12         MOV       R4,#0x12
   \   00001D   FD           MOV       R5,A
   \   00001E   F9           MOV       R1,A
   \   00001F   7404         MOV       A,#0x4
   \   000021   12....       LCALL     ?XSTACK_DISP101_8
   \   000024   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1865          
   1866            pData = pInMsg->pData;
   \   000027   85..82       MOV       DPL,?V0
   \   00002A   85..83       MOV       DPH,?V1
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   12....       LCALL     ?Subroutine14 & 0xFFFF
   1867            group.ID = BUILD_UINT16( pData[0], pData[1] );
   \                     ??CrossCallReturnLabel_23:
   \   000038   A3           INC       DPTR
   \   000039   A882         MOV       R0,DPL
   \   00003B   A983         MOV       R1,DPH
   \   00003D   85..82       MOV       DPL,?V2
   \   000040   F583         MOV       DPH,A
   \   000042   E0           MOVX      A,@DPTR
   \   000043   FC           MOV       R4,A
   \   000044   8882         MOV       DPL,R0
   \   000046   8983         MOV       DPH,R1
   \   000048   E0           MOVX      A,@DPTR
   \   000049   FB           MOV       R3,A
   \   00004A   7404         MOV       A,#0x4
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   EC           MOV       A,R4
   \   000050   F0           MOVX      @DPTR,A
   \   000051   A3           INC       DPTR
   \   000052   EB           MOV       A,R3
   \   000053   F0           MOVX      @DPTR,A
   1868            switch ( pInMsg->hdr.commandID )
   \   000054   E5..         MOV       A,?V0
   \   000056   2406         ADD       A,#0x6
   \   000058   F5..         MOV       ?V8,A
   \   00005A   E4           CLR       A
   \   00005B   35..         ADDC      A,?V1
   \   00005D   F5..         MOV       ?V9,A
   \   00005F   E5..         MOV       A,?V0
   \   000061   2407         ADD       A,#0x7
   \   000063   F5..         MOV       ?V6,A
   \   000065   E4           CLR       A
   \   000066   35..         ADDC      A,?V1
   \   000068   F5..         MOV       ?V7,A
   \   00006A   85..82       MOV       DPL,?V6
   \   00006D   F583         MOV       DPH,A
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   601E         JZ        ??zclGeneral_ProcessInGroupsServer_0
   \   000072   14           DEC       A
   \   000073   6053         JZ        ??zclGeneral_ProcessInGroupsServer_1
   \   000075   14           DEC       A
   \   000076   7003         JNZ       $+5
   \   000078   02....       LJMP      ??zclGeneral_ProcessInGroupsServer_2 & 0xFFFF
   \   00007B   14           DEC       A
   \   00007C   7003         JNZ       $+5
   \   00007E   02....       LJMP      ??zclGeneral_ProcessInGroupsServer_3 & 0xFFFF
   \   000081   14           DEC       A
   \   000082   7003         JNZ       $+5
   \   000084   02....       LJMP      ??zclGeneral_ProcessInGroupsServer_4 & 0xFFFF
   \   000087   14           DEC       A
   \   000088   7003         JNZ       $+5
   \   00008A   02....       LJMP      ??zclGeneral_ProcessInGroupsServer_5 & 0xFFFF
   \   00008D   02....       LJMP      ??zclGeneral_ProcessInGroupsServer_6 & 0xFFFF
   1869            {
   1870              case COMMAND_GROUP_ADD:
   1871                status = zclGeneral_AddGroup( pInMsg->msg->endPoint, &group, pData );
   \                     ??zclGeneral_ProcessInGroupsServer_0:
   \   000090                ; Setup parameters for call to function zclGeneral_AddGroup
   \   000090   AC..         MOV       R4,?V2
   \   000092   AD..         MOV       R5,?V3
   \   000094   7404         MOV       A,#0x4
   \   000096   12....       LCALL     ?XSTACK_DISP101_8
   \   000099   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00009C   E9           MOV       A,R1
   \   00009D   FC           MOV       R4,A
   1872                if ( status != ZSuccess )
   \   00009E   600B         JZ        ??zclGeneral_ProcessInGroupsServer_7
   1873                {
   1874                  if ( status == ZApsDuplicateEntry )
   \   0000A0   74B8         MOV       A,#-0x48
   \   0000A2   6C           XRL       A,R4
   \   0000A3   7004         JNZ       ??zclGeneral_ProcessInGroupsServer_8
   1875                  {
   1876                    status = ZCL_STATUS_DUPLICATE_EXISTS;
   \   0000A5   7C8A         MOV       R4,#-0x76
   \   0000A7   8002         SJMP      ??zclGeneral_ProcessInGroupsServer_7
   1877                  }
   1878                  else
   1879                  {
   1880                    status = ZCL_STATUS_INSUFFICIENT_SPACE;
   \                     ??zclGeneral_ProcessInGroupsServer_8:
   \   0000A9   7C89         MOV       R4,#-0x77
   1881                  }
   1882                }
   1883          #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
   1884                if ( UNICAST_MSG( pInMsg->msg ) )
   1885          #endif
   1886                {
   1887                  zclGeneral_SendGroupAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1888                                                   status, group.ID, true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInGroupsServer_7:
   \   0000AB   12....       LCALL     ?Subroutine4 & 0xFFFF
   1889                  stat = ZCL_STATUS_CMD_HAS_RSP;
   1890                }
   \                     ??CrossCallReturnLabel_0:
   \   0000AE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B1   75..01       MOV       ?V0,#0x1
   \   0000B4   78..         MOV       R0,#?V0
   \   0000B6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B9   7406         MOV       A,#0x6
   \   0000BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BE   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000C1   EC           MOV       A,R4
   \   0000C2   FD           MOV       R5,A
   \   0000C3   7C00         MOV       R4,#0x0
   \   0000C5   02....       LJMP      ??zclGeneral_ProcessInGroupsServer_9 & 0xFFFF
   1891                break;
   1892          
   1893              case COMMAND_GROUP_VIEW:
   1894          #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
   1895                if ( UNICAST_MSG( pInMsg->msg ) )
   1896          #endif
   1897                {
   1898                  pGroup = aps_FindGroup( pInMsg->msg->endPoint, group.ID );
   \                     ??zclGeneral_ProcessInGroupsServer_1:
   \   0000C8                ; Setup parameters for call to function aps_FindGroup
   \   0000C8   7404         MOV       A,#0x4
   \   0000CA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CD   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000D0   12....       LCALL     `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   \   0000D3   8A..         MOV       ?V2,R2
   \   0000D5   8B..         MOV       ?V3,R3
   1899                  if ( pGroup )
   \   0000D7   EA           MOV       A,R2
   \   0000D8   4B           ORL       A,R3
   \   0000D9   6004         JZ        ??zclGeneral_ProcessInGroupsServer_10
   1900                  {
   1901                    status = ZCL_STATUS_SUCCESS;
   \   0000DB   7C00         MOV       R4,#0x0
   \   0000DD   800B         SJMP      ??zclGeneral_ProcessInGroupsServer_11
   1902                  }
   1903                  else
   1904                  {
   1905                    // Group not found
   1906                    status = ZCL_STATUS_NOT_FOUND;
   \                     ??zclGeneral_ProcessInGroupsServer_10:
   \   0000DF   7C8B         MOV       R4,#-0x75
   1907                    pGroup = &group;
   \   0000E1   7404         MOV       A,#0x4
   \   0000E3   12....       LCALL     ?XSTACK_DISP100_8
   \   0000E6   88..         MOV       ?V2,R0
   \   0000E8   89..         MOV       ?V3,R1
   1908                  }
   1909                  zclGeneral_SendGroupViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1910                                                    status, pGroup, true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInGroupsServer_11:
   \   0000EA   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000ED   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F0   78..         MOV       R0,#?V2
   \   0000F2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F5   7D01         MOV       R5,#0x1
   \   0000F7   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   0000FA   12....       LCALL     `??zclGeneral_SendGroupViewResponse::?relay`; Banked call to: zclGeneral_SendGroupViewResponse
   \   0000FD   7403         MOV       A,#0x3
   \   0000FF   12....       LCALL     ?DEALLOC_XSTACK8
   1911                  stat = ZCL_STATUS_CMD_HAS_RSP;
   \   000102   02....       LJMP      ??zclGeneral_ProcessInGroupsServer_12 & 0xFFFF
   1912                }
   1913                break;
   1914          
   1915              case COMMAND_GROUP_GET_MEMBERSHIP:
   1916          #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
   1917                if ( UNICAST_MSG( pInMsg->msg ) )
   1918          #endif
   1919                {
   1920                  grpCnt = *pData++;
   \                     ??zclGeneral_ProcessInGroupsServer_2:
   \   000105   85..82       MOV       DPL,?V2
   \   000108   85..83       MOV       DPH,?V3
   \   00010B   E0           MOVX      A,@DPTR
   \   00010C   FE           MOV       R6,A
   \   00010D   88..         MOV       ?V2,R0
   \   00010F   89..         MOV       ?V3,R1
   1921          
   1922                  // Allocate space for the group list
   1923                  grpList = zcl_mem_alloc( sizeof( uint16 ) * APS_MAX_GROUPS );
   \   000111                ; Setup parameters for call to function osal_mem_alloc
   \   000111   7A20         MOV       R2,#0x20
   \   000113   7B00         MOV       R3,#0x0
   \   000115   12....       LCALL     ?Subroutine25 & 0xFFFF
   1924                  if ( grpList != NULL )
   \                     ??CrossCallReturnLabel_45:
   \   000118   7003         JNZ       $+5
   \   00011A   02....       LJMP      ??zclGeneral_ProcessInGroupsServer_13 & 0xFFFF
   1925                  {
   1926                    if ( grpCnt == 0 )
   \   00011D   EE           MOV       A,R6
   \   00011E   7006         JNZ       ??zclGeneral_ProcessInGroupsServer_14
   1927                    {
   1928                      // Find out all the groups of which the endpoint is a member.
   1929                      grpRspCnt = aps_FindAllGroupsForEndpoint( pInMsg->msg->endPoint, grpList );
   \   000120                ; Setup parameters for call to function aps_FindAllGroupsForEndpoint
   \   000120   12....       LCALL     ?Subroutine10 & 0xFFFF
   1930                    }
   \                     ??CrossCallReturnLabel_12:
   \   000123   FF           MOV       R7,A
   \   000124   8053         SJMP      ??zclGeneral_ProcessInGroupsServer_15
   1931                    else
   1932                    {
   1933                      // Find out the groups (in the list) of which the endpoint is a member.
   1934                      for ( i = 0; i < grpCnt; i++ )
   \                     ??zclGeneral_ProcessInGroupsServer_14:
   \   000126   8E..         MOV       ?V10,R6
   1935                      {
   1936                        group.ID = BUILD_UINT16( pData[0], pData[1] );
   \                     ??zclGeneral_ProcessInGroupsServer_16:
   \   000128   85..82       MOV       DPL,?V2
   \   00012B   85..83       MOV       DPH,?V3
   \   00012E   E0           MOVX      A,@DPTR
   \   00012F   FA           MOV       R2,A
   \   000130   A3           INC       DPTR
   \   000131   E0           MOVX      A,@DPTR
   \   000132   F9           MOV       R1,A
   \   000133   7404         MOV       A,#0x4
   \   000135   12....       LCALL     ?XSTACK_DISP0_8
   \   000138   EA           MOV       A,R2
   \   000139   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   1937                        pData += 2;
   \                     ??CrossCallReturnLabel_104:
   \   00013C   E5..         MOV       A,?V2
   \   00013E   2402         ADD       A,#0x2
   \   000140   F5..         MOV       ?V2,A
   \   000142   5002         JNC       ??zclGeneral_ProcessInGroupsServer_17
   \   000144   05..         INC       ?V3
   1938          
   1939                        if ( aps_FindGroup( pInMsg->msg->endPoint, group.ID ) )
   \                     ??zclGeneral_ProcessInGroupsServer_17:
   \   000146                ; Setup parameters for call to function aps_FindGroup
   \   000146   7404         MOV       A,#0x4
   \   000148   12....       LCALL     ?XSTACK_DISP0_8
   \   00014B   E0           MOVX      A,@DPTR
   \   00014C   FA           MOV       R2,A
   \   00014D   A3           INC       DPTR
   \   00014E   E0           MOVX      A,@DPTR
   \   00014F   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000152   12....       LCALL     `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   \   000155   EA           MOV       A,R2
   \   000156   4B           ORL       A,R3
   \   000157   6017         JZ        ??zclGeneral_ProcessInGroupsServer_18
   1940                          grpList[grpRspCnt++] = group.ID;
   \   000159   7404         MOV       A,#0x4
   \   00015B   12....       LCALL     ?XSTACK_DISP0_8
   \   00015E   12....       LCALL     ?Subroutine15 & 0xFFFF
   1941                      }
   \                     ??CrossCallReturnLabel_28:
   \   000161   EF           MOV       A,R7
   \   000162   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000165   E5..         MOV       A,?V5
   \   000167   39           ADDC      A,R1
   \   000168   F583         MOV       DPH,A
   \   00016A   EA           MOV       A,R2
   \   00016B   F0           MOVX      @DPTR,A
   \   00016C   A3           INC       DPTR
   \   00016D   EB           MOV       A,R3
   \   00016E   F0           MOVX      @DPTR,A
   \   00016F   0F           INC       R7
   \                     ??zclGeneral_ProcessInGroupsServer_18:
   \   000170   15..         DEC       ?V10
   \   000172   E5..         MOV       A,?V10
   \   000174   70B2         JNZ       ??zclGeneral_ProcessInGroupsServer_16
   \   000176   EF           MOV       A,R7
   \   000177   606A         JZ        ??zclGeneral_ProcessInGroupsServer_19
   1942                    }
   1943          
   1944                    if ( grpCnt == 0 ||  grpRspCnt != 0 )
   1945                    {
   1946                      zclGeneral_SendGroupGetMembershipResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1947                                                                 aps_GroupsRemaingCapacity(), grpRspCnt,
   1948                                                                 grpList, true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInGroupsServer_15:
   \   000179                ; Setup parameters for call to function aps_CountAllGroups
   \   000179   12....       LCALL     `??aps_CountAllGroups::?relay`; Banked call to: aps_CountAllGroups
   \   00017C   E9           MOV       A,R1
   \   00017D   F9           MOV       R1,A
   \   00017E   85..82       MOV       DPL,?V0
   \   000181   85..83       MOV       DPH,?V1
   \   000184   E0           MOVX      A,@DPTR
   \   000185   F5..         MOV       ?V0,A
   \   000187   A3           INC       DPTR
   \   000188   E0           MOVX      A,@DPTR
   \   000189   F5..         MOV       ?V1,A
   \   00018B                ; Setup parameters for call to function zclGeneral_SendGroupGetMembershipRequest
   \   00018B   85..82       MOV       DPL,?V8
   \   00018E   85..83       MOV       DPH,?V9
   \   000191   E0           MOVX      A,@DPTR
   \   000192   F5..         MOV       ?V2,A
   \   000194   78..         MOV       R0,#?V2
   \   000196   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000199   75..01       MOV       ?V2,#0x1
   \   00019C   78..         MOV       R0,#?V2
   \   00019E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001A1   78..         MOV       R0,#?V4
   \   0001A3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A6   EF           MOV       A,R7
   \   0001A7   F5..         MOV       ?V2,A
   \   0001A9   78..         MOV       R0,#?V2
   \   0001AB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001AE   7410         MOV       A,#0x10
   \   0001B0   C3           CLR       C
   \   0001B1   99           SUBB      A,R1
   \   0001B2   F5..         MOV       ?V2,A
   \   0001B4   78..         MOV       R0,#?V2
   \   0001B6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001B9   75..01       MOV       ?V2,#0x1
   \   0001BC   78..         MOV       R0,#?V2
   \   0001BE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001C1   7D01         MOV       R5,#0x1
   \   0001C3   7C02         MOV       R4,#0x2
   \   0001C5   E5..         MOV       A,?V0
   \   0001C7   2406         ADD       A,#0x6
   \   0001C9   FA           MOV       R2,A
   \   0001CA   E4           CLR       A
   \   0001CB   35..         ADDC      A,?V1
   \   0001CD   FB           MOV       R3,A
   \   0001CE   E5..         MOV       A,?V0
   \   0001D0   2414         ADD       A,#0x14
   \   0001D2   F582         MOV       DPL,A
   \   0001D4   E4           CLR       A
   \   0001D5   35..         ADDC      A,?V1
   \   0001D7   F583         MOV       DPH,A
   \   0001D9   E0           MOVX      A,@DPTR
   \   0001DA   F9           MOV       R1,A
   \   0001DB   12....       LCALL     `??zclGeneral_SendGroupGetMembershipRequest::?re`; Banked call to: zclGeneral_SendGroupGetMembershipRequest
   \   0001DE   7407         MOV       A,#0x7
   \   0001E0   12....       LCALL     ?DEALLOC_XSTACK8
   1949                    }
   1950          
   1951                    zcl_mem_free( grpList );
   \                     ??zclGeneral_ProcessInGroupsServer_19:
   \   0001E3                ; Setup parameters for call to function osal_mem_free
   \   0001E3   AA..         MOV       R2,?V4
   \   0001E5   AB..         MOV       R3,?V5
   \   0001E7   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001EA   8054         SJMP      ??zclGeneral_ProcessInGroupsServer_20
   1952                  }
   1953                  else
   1954                  {
   1955                    // Couldn't allocate space for the group list -- send a Default Response command back.
   1956                    zclDefaultRspCmd_t defaultRspCmd;
   1957          
   1958                    defaultRspCmd.commandID = pInMsg->hdr.commandID;
   \                     ??zclGeneral_ProcessInGroupsServer_13:
   \   0001EC   85..82       MOV       DPL,?V6
   \   0001EF   85..83       MOV       DPH,?V7
   \   0001F2   E0           MOVX      A,@DPTR
   \   0001F3   85..82       MOV       DPL,?XSP + 0
   \   0001F6   85..83       MOV       DPH,?XSP + 1
   \   0001F9   F0           MOVX      @DPTR,A
   1959                    defaultRspCmd.statusCode = ZCL_STATUS_INSUFFICIENT_SPACE;
   \   0001FA   7401         MOV       A,#0x1
   \   0001FC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001FF   7489         MOV       A,#-0x77
   \   000201   F0           MOVX      @DPTR,A
   1960                    zcl_SendDefaultRspCmd( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   1961                                           pInMsg->msg->clusterId, &defaultRspCmd,
   1962                                           ZCL_FRAME_SERVER_CLIENT_DIR, true, 0, pInMsg->hdr.transSeqNum );
   \   000202   12....       LCALL     ?Subroutine4 & 0xFFFF
   1963                  }
   \                     ??CrossCallReturnLabel_2:
   \   000205   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000208   E4           CLR       A
   \   000209   F5..         MOV       ?V0,A
   \   00020B   F5..         MOV       ?V1,A
   \   00020D   78..         MOV       R0,#?V0
   \   00020F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000212   75..01       MOV       ?V0,#0x1
   \   000215   78..         MOV       R0,#?V0
   \   000217   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00021A   78..         MOV       R0,#?V0
   \   00021C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00021F   7405         MOV       A,#0x5
   \   000221   12....       LCALL     ?XSTACK_DISP100_8
   \   000224   88..         MOV       ?V0,R0
   \   000226   89..         MOV       ?V1,R1
   \   000228   78..         MOV       R0,#?V0
   \   00022A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00022D   8E82         MOV       DPL,R6
   \   00022F   8F83         MOV       DPH,R7
   \   000231   A3           INC       DPTR
   \   000232   A3           INC       DPTR
   \   000233   A3           INC       DPTR
   \   000234   A3           INC       DPTR
   \   000235   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000238   12....       LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
   \   00023B   7407         MOV       A,#0x7
   \   00023D   12....       LCALL     ?DEALLOC_XSTACK8
   1964          
   1965                  stat = ZCL_STATUS_CMD_HAS_RSP;
   \                     ??zclGeneral_ProcessInGroupsServer_20:
   \   000240   8039         SJMP      ??zclGeneral_ProcessInGroupsServer_12
   1966                }
   1967                break;
   1968          
   1969              case COMMAND_GROUP_REMOVE:
   1970          #if defined ( ZCL_SCENES )
   1971                zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, group.ID );
   1972          #endif
   1973                if ( aps_RemoveGroup( pInMsg->msg->endPoint, group.ID ) )
   \                     ??zclGeneral_ProcessInGroupsServer_3:
   \   000242                ; Setup parameters for call to function aps_RemoveGroup
   \   000242   7404         MOV       A,#0x4
   \   000244   12....       LCALL     ?XSTACK_DISP0_8
   \   000247   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00024A   12....       LCALL     `??aps_RemoveGroup::?relay`; Banked call to: aps_RemoveGroup
   \   00024D   E9           MOV       A,R1
   \   00024E   6004         JZ        ??zclGeneral_ProcessInGroupsServer_21
   1974                {
   1975                  status = ZCL_STATUS_SUCCESS;
   \   000250   7C00         MOV       R4,#0x0
   \   000252   8002         SJMP      ??zclGeneral_ProcessInGroupsServer_22
   1976                }
   1977                else
   1978                {
   1979                  status = ZCL_STATUS_NOT_FOUND;
   \                     ??zclGeneral_ProcessInGroupsServer_21:
   \   000254   7C8B         MOV       R4,#-0x75
   1980                }
   1981          
   1982          #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
   1983                if ( UNICAST_MSG( pInMsg->msg ) )
   1984          #endif
   1985                {
   1986                  zclGeneral_SendGroupRemoveResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1987                                                      status, group.ID, true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInGroupsServer_22:
   \   000256   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000259   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00025C   75..01       MOV       ?V0,#0x1
   \   00025F   78..         MOV       R0,#?V0
   \   000261   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000264   7406         MOV       A,#0x6
   \   000266   12....       LCALL     ?XSTACK_DISP0_8
   \   000269   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00026C   EC           MOV       A,R4
   \   00026D   FD           MOV       R5,A
   \   00026E   7C03         MOV       R4,#0x3
   \                     ??zclGeneral_ProcessInGroupsServer_9:
   \   000270   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000273   12....       LCALL     `??zclGeneral_SendGroupResponse::?relay`; Banked call to: zclGeneral_SendGroupResponse
   \   000276   7404         MOV       A,#0x4
   \   000278   12....       LCALL     ?DEALLOC_XSTACK8
   1988                  stat = ZCL_STATUS_CMD_HAS_RSP;
   \                     ??zclGeneral_ProcessInGroupsServer_12:
   \   00027B   7EFF         MOV       R6,#-0x1
   1989                }
   1990                break;
   \   00027D   8057         SJMP      ??zclGeneral_ProcessInGroupsServer_23
   1991          
   1992              case COMMAND_GROUP_REMOVE_ALL:
   1993                {
   1994                  uint8 numGroups;
   1995                  uint16 groupList[APS_MAX_GROUPS];
   1996          
   1997                  if ( numGroups = aps_FindAllGroupsForEndpoint( pInMsg->msg->endPoint, groupList ) )
   \                     ??zclGeneral_ProcessInGroupsServer_4:
   \   00027F                ; Setup parameters for call to function aps_FindAllGroupsForEndpoint
   \   00027F   7416         MOV       A,#0x16
   \   000281   12....       LCALL     ?XSTACK_DISP101_8
   \   000284   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000287   604D         JZ        ??zclGeneral_ProcessInGroupsServer_23
   1998                  {
   1999                    for ( i = 0; i < numGroups; i++ )
   2000                    {
   2001          #if defined ( ZCL_SCENES )
   2002                      zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, groupList[i] );
   2003          #endif
   2004                    }
   2005          
   2006                    aps_RemoveAllGroup( pInMsg->msg->endPoint );
   \   000289                ; Setup parameters for call to function aps_RemoveAllGroup
   \   000289   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   2007                  }
   2008                }
   \                     ??CrossCallReturnLabel_80:
   \   00028C   12....       LCALL     `??aps_RemoveAllGroup::?relay`; Banked call to: aps_RemoveAllGroup
   \   00028F   8045         SJMP      ??zclGeneral_ProcessInGroupsServer_23
   2009                break;
   2010          
   2011              case COMMAND_GROUP_ADD_IF_IDENTIFYING:
   2012                // Retrieve Identify Time
   2013                zcl_ReadAttrData( pInMsg->msg->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
   2014                                  ATTRID_IDENTIFY_TIME, (uint8 *)&identifyTime, NULL );
   \                     ??zclGeneral_ProcessInGroupsServer_5:
   \   000291                ; Setup parameters for call to function zcl_ReadAttrData
   \   000291   E4           CLR       A
   \   000292   F5..         MOV       ?V4,A
   \   000294   F5..         MOV       ?V5,A
   \   000296   78..         MOV       R0,#?V4
   \   000298   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00029B   7404         MOV       A,#0x4
   \   00029D   12....       LCALL     ?XSTACK_DISP100_8
   \   0002A0   88..         MOV       ?V4,R0
   \   0002A2   89..         MOV       ?V5,R1
   \   0002A4   78..         MOV       R0,#?V4
   \   0002A6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002A9   7C00         MOV       R4,#0x0
   \   0002AB   7D00         MOV       R5,#0x0
   \   0002AD   7A03         MOV       R2,#0x3
   \   0002AF   7B00         MOV       R3,#0x0
   \   0002B1   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0002B4   12....       LCALL     `??zcl_ReadAttrData::?relay`; Banked call to: zcl_ReadAttrData
   \   0002B7   7404         MOV       A,#0x4
   \   0002B9   12....       LCALL     ?DEALLOC_XSTACK8
   2015          
   2016                // Is device identifying itself?
   2017                if ( identifyTime > 0 )
   \   0002BC   7402         MOV       A,#0x2
   \   0002BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0002C1   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   0002C4   6010         JZ        ??zclGeneral_ProcessInGroupsServer_23
   2018                {
   2019                  zclGeneral_AddGroup( pInMsg->msg->endPoint, &group, pData );
   \   0002C6                ; Setup parameters for call to function zclGeneral_AddGroup
   \   0002C6   AC..         MOV       R4,?V2
   \   0002C8   AD..         MOV       R5,?V3
   \   0002CA   7404         MOV       A,#0x4
   \   0002CC   12....       LCALL     ?XSTACK_DISP101_8
   \   0002CF   12....       LCALL     ?Subroutine9 & 0xFFFF
   2020                }
   \                     ??CrossCallReturnLabel_11:
   \   0002D2   8002         SJMP      ??zclGeneral_ProcessInGroupsServer_23
   2021                break;
   2022          
   2023              default:
   2024                stat = ZFailure;
   \                     ??zclGeneral_ProcessInGroupsServer_6:
   \   0002D4   7E01         MOV       R6,#0x1
   2025                break;
   2026            }
   2027          
   2028            return ( stat );
   \                     ??zclGeneral_ProcessInGroupsServer_23:
   \   0002D6   EE           MOV       A,R6
   \   0002D7   F9           MOV       R1,A
   \   0002D8   7436         MOV       A,#0x36
   \   0002DA   02....       LJMP      ?Subroutine2 & 0xFFFF
   2029          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   EE           MOV       A,R6
   \   000001   2406         ADD       A,#0x6
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   FB           MOV       R3,A
   \   000007                REQUIRE ??Subroutine49_0
   \   000007                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000003   12....       LCALL     `??aps_FindAllGroupsForEndpoint::?relay`; Banked call to: aps_FindAllGroupsForEndpoint
   \   000006   E9           MOV       A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000003   12....       LCALL     `??zclGeneral_AddGroup::?relay`; Banked call to: zclGeneral_AddGroup
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FE           MOV       R6,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   FF           MOV       R7,A
   \   00000B                ; Setup parameters for call to function zclGeneral_SendGroupResponse
   \   00000B                ; Setup parameters for call to function zclGeneral_SendGroupViewResponse
   \   00000B                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   00000B                ; Setup parameters for call to function zclGeneral_SendGroupResponse
   \   00000B   85..82       MOV       DPL,?V8
   \   00000E   85..83       MOV       DPH,?V9
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F5..         MOV       ?V0,A
   \   000014   78..         MOV       R0,#?V0
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   F9           MOV       R1,A
   \   000006   E5..         MOV       A,?V4
   \   000008   28           ADD       A,R0
   \   000009   F582         MOV       DPL,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000003   8A..         MOV       ?V4,R2
   \   000005   8B..         MOV       ?V5,R3
   \   000007   EA           MOV       A,R2
   \   000008   4B           ORL       A,R3
   \   000009   22           RET
   2030          
   2031          /*********************************************************************
   2032           * @fn      zclGeneral_ProcessInGroupsClient
   2033           *
   2034           * @brief   Process in the received Groups Command.
   2035           *
   2036           * @param   pInMsg - pointer to the incoming message
   2037           *
   2038           * @return  ZStatus_t
   2039           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine50_0
   \   000006                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2040          static ZStatus_t zclGeneral_ProcessInGroupsClient( zclIncoming_t *pInMsg,
   \                     zclGeneral_ProcessInGroupsClient:
   2041                                                             zclGeneral_AppCallbacks_t *pCBs )
   2042          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 28
   \   000005   74E4         MOV       A,#-0x1c
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
   2043            aps_Group_t group;
   2044            uint8 *pData = pInMsg->pData;
   \   000012   8A82         MOV       DPL,R2
   \   000014   8B83         MOV       DPH,R3
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   FE           MOV       R6,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   FF           MOV       R7,A
   2045            uint8 grpCnt;
   2046            uint8 nameLen;
   2047            zclGroupRsp_t rsp;
   2048            uint8 i;
   2049            ZStatus_t stat = ZSuccess;
   \   000023   75..00       MOV       ?V11,#0x0
   2050          
   2051            zcl_memset( (uint8*)&group, 0, sizeof( aps_Group_t ) );
   \   000026                ; Setup parameters for call to function osal_memset
   \   000026   7C12         MOV       R4,#0x12
   \   000028   7D00         MOV       R5,#0x0
   \   00002A   7900         MOV       R1,#0x0
   \   00002C   740A         MOV       A,#0xa
   \   00002E   12....       LCALL     ?XSTACK_DISP101_8
   \   000031   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2052            zcl_memset( (uint8*)&rsp, 0, sizeof( zclGroupRsp_t ) );
   \   000034                ; Setup parameters for call to function osal_memset
   \   000034   7C0A         MOV       R4,#0xa
   \   000036   7D00         MOV       R5,#0x0
   \   000038   7900         MOV       R1,#0x0
   \   00003A   AA..         MOV       R2,?XSP + 0
   \   00003C   AB..         MOV       R3,?XSP + 1
   \   00003E   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2053          
   2054            switch ( pInMsg->hdr.commandID )
   \   000041   EE           MOV       A,R6
   \   000042   2402         ADD       A,#0x2
   \   000044   FA           MOV       R2,A
   \   000045   E4           CLR       A
   \   000046   3F           ADDC      A,R7
   \   000047   FB           MOV       R3,A
   \   000048   E5..         MOV       A,?V0
   \   00004A   240C         ADD       A,#0xc
   \   00004C   F5..         MOV       ?V0,A
   \   00004E   5002         JNC       ??zclGeneral_ProcessInGroupsClient_0
   \   000050   05..         INC       ?V1
   \                     ??zclGeneral_ProcessInGroupsClient_0:
   \   000052   8E82         MOV       DPL,R6
   \   000054   8F83         MOV       DPH,R7
   \   000056   A3           INC       DPTR
   \   000057   A882         MOV       R0,DPL
   \   000059   A983         MOV       R1,DPH
   \   00005B   E5..         MOV       A,?V6
   \   00005D   2407         ADD       A,#0x7
   \   00005F   F5..         MOV       ?V2,A
   \   000061   E4           CLR       A
   \   000062   35..         ADDC      A,?V7
   \   000064   F5..         MOV       ?V3,A
   \   000066   85..82       MOV       DPL,?V2
   \   000069   F583         MOV       DPH,A
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   600F         JZ        ??zclGeneral_ProcessInGroupsClient_1
   \   00006E   14           DEC       A
   \   00006F   600C         JZ        ??zclGeneral_ProcessInGroupsClient_1
   \   000071   14           DEC       A
   \   000072   7003         JNZ       $+5
   \   000074   02....       LJMP      ??zclGeneral_ProcessInGroupsClient_2 & 0xFFFF
   \   000077   14           DEC       A
   \   000078   6003         JZ        $+5
   \   00007A   02....       LJMP      ??zclGeneral_ProcessInGroupsClient_3 & 0xFFFF
   2055            {
   2056              case COMMAND_GROUP_ADD_RSP:
   2057              case COMMAND_GROUP_VIEW_RSP:
   2058              case COMMAND_GROUP_REMOVE_RSP:
   2059                rsp.status = *pData++;
   \                     ??zclGeneral_ProcessInGroupsClient_1:
   \   00007D   8E82         MOV       DPL,R6
   \   00007F   8F83         MOV       DPH,R7
   \   000081   E0           MOVX      A,@DPTR
   \   000082   FC           MOV       R4,A
   \   000083   7403         MOV       A,#0x3
   \   000085   12....       LCALL     ?XSTACK_DISP0_8
   \   000088   EC           MOV       A,R4
   \   000089   F0           MOVX      @DPTR,A
   \   00008A   E9           MOV       A,R1
   \   00008B   FF           MOV       R7,A
   2060                group.ID = BUILD_UINT16( pData[0], pData[1] );
   \   00008C   8882         MOV       DPL,R0
   \   00008E   F583         MOV       DPH,A
   \   000090   E0           MOVX      A,@DPTR
   \   000091   F5..         MOV       ?V4,A
   \   000093   8A82         MOV       DPL,R2
   \   000095   8B83         MOV       DPH,R3
   \   000097   E0           MOVX      A,@DPTR
   \   000098   F9           MOV       R1,A
   \   000099   740A         MOV       A,#0xa
   \   00009B   12....       LCALL     ?XSTACK_DISP0_8
   \   00009E   E5..         MOV       A,?V4
   \   0000A0   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   2061          
   2062                if ( rsp.status == ZCL_STATUS_SUCCESS && pInMsg->hdr.commandID == COMMAND_GROUP_VIEW_RSP )
   \                     ??CrossCallReturnLabel_105:
   \   0000A3   EC           MOV       A,R4
   \   0000A4   7059         JNZ       ??CrossCallReturnLabel_108
   \   0000A6   85..82       MOV       DPL,?V2
   \   0000A9   85..83       MOV       DPH,?V3
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   6401         XRL       A,#0x1
   \   0000AF   704E         JNZ       ??CrossCallReturnLabel_108
   2063                {
   2064                  pData += 2;   // Move past ID
   2065                  nameLen = *pData++;
   \   0000B1   8882         MOV       DPL,R0
   \   0000B3   8F83         MOV       DPH,R7
   \   0000B5   A3           INC       DPTR
   \   0000B6   A3           INC       DPTR
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   F9           MOV       R1,A
   \   0000B9   E8           MOV       A,R0
   \   0000BA   2403         ADD       A,#0x3
   \   0000BC   FE           MOV       R6,A
   \   0000BD   5001         JNC       ??zclGeneral_ProcessInGroupsClient_4
   \   0000BF   0F           INC       R7
   2066                  if ( nameLen > (APS_GROUP_NAME_LEN-1) )
   \                     ??zclGeneral_ProcessInGroupsClient_4:
   \   0000C0   E9           MOV       A,R1
   \   0000C1   C3           CLR       C
   \   0000C2   9410         SUBB      A,#0x10
   \   0000C4   4002         JC        ??zclGeneral_ProcessInGroupsClient_5
   2067                    nameLen = (APS_GROUP_NAME_LEN-1);
   \   0000C6   790F         MOV       R1,#0xf
   2068                  group.name[0] = nameLen;
   \                     ??zclGeneral_ProcessInGroupsClient_5:
   \   0000C8   740C         MOV       A,#0xc
   \   0000CA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CD   E9           MOV       A,R1
   \   0000CE   F0           MOVX      @DPTR,A
   2069                  zcl_memcpy( &(group.name[1]), pData, nameLen );
   \   0000CF                ; Setup parameters for call to function osal_memcpy
   \   0000CF   8E..         MOV       ?V8,R6
   \   0000D1   8F..         MOV       ?V9,R7
   \   0000D3   75..00       MOV       ?V10,#0x0
   \   0000D6   78..         MOV       R0,#?V8
   \   0000D8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000DB   E9           MOV       A,R1
   \   0000DC   FC           MOV       R4,A
   \   0000DD   7D00         MOV       R5,#0x0
   \   0000DF   7410         MOV       A,#0x10
   \   0000E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E4   AA82         MOV       R2,DPL
   \   0000E6   AB83         MOV       R3,DPH
   \   0000E8   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   0000EB   12....       LCALL     ?DEALLOC_XSTACK8
   2070                  rsp.grpName = group.name;
   \   0000EE   740C         MOV       A,#0xc
   \   0000F0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F3   A882         MOV       R0,DPL
   \   0000F5   A983         MOV       R1,DPH
   \   0000F7   7408         MOV       A,#0x8
   \   0000F9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FC   12....       LCALL     ?Subroutine24 & 0xFFFF
   2071                }
   2072          
   2073                if ( pCBs->pfnGroupRsp )
   \                     ??CrossCallReturnLabel_108:
   \   0000FF   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000102   7003         JNZ       $+5
   \   000104   02....       LJMP      ??zclGeneral_ProcessInGroupsClient_6 & 0xFFFF
   2074                {
   2075                  rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \   000107   12....       LCALL     ?Subroutine5 & 0xFFFF
   2076                  rsp.cmdID = pInMsg->hdr.commandID;
   \                     ??CrossCallReturnLabel_4:
   \   00010A   C0E0         PUSH      A
   \   00010C   7402         MOV       A,#0x2
   \   00010E   12....       LCALL     ?XSTACK_DISP0_8
   \   000111   D0E0         POP       A
   \   000113   F0           MOVX      @DPTR,A
   2077                  rsp.grpCnt = 1;
   \   000114   7404         MOV       A,#0x4
   \   000116   12....       LCALL     ?XSTACK_DISP0_8
   \   000119   7401         MOV       A,#0x1
   \   00011B   F0           MOVX      @DPTR,A
   2078                  rsp.grpList = &group.ID;
   \   00011C   740A         MOV       A,#0xa
   \   00011E   12....       LCALL     ?XSTACK_DISP100_8
   \   000121   7405         MOV       A,#0x5
   \   000123   12....       LCALL     ?XSTACK_DISP0_8
   \   000126   12....       LCALL     ?Subroutine24 & 0xFFFF
   2079                  rsp.capacity = 0;
   \                     ??CrossCallReturnLabel_109:
   \   000129   7407         MOV       A,#0x7
   \   00012B   12....       LCALL     ?XSTACK_DISP0_8
   \   00012E   E4           CLR       A
   \   00012F   12....       LCALL     ?Subroutine20 & 0xFFFF
   2080          
   2081                  pCBs->pfnGroupRsp( &rsp );
   2082                }
   \                     ??CrossCallReturnLabel_41:
   \   000132   12....       LCALL     ?CALL_IND
   \   000135   02....       LJMP      ??zclGeneral_ProcessInGroupsClient_6 & 0xFFFF
   2083                break;
   2084          
   2085              case COMMAND_GROUP_GET_MEMBERSHIP_RSP:
   2086                {
   2087                  uint16 *grpList = NULL;
   \                     ??zclGeneral_ProcessInGroupsClient_2:
   \   000138   75..00       MOV       ?V4,#0x0
   \   00013B   75..00       MOV       ?V5,#0x0
   2088                  rsp.capacity = *pData++;
   \   00013E   8E82         MOV       DPL,R6
   \   000140   8F83         MOV       DPH,R7
   \   000142   E0           MOVX      A,@DPTR
   \   000143   C0E0         PUSH      A
   \   000145   7407         MOV       A,#0x7
   \   000147   12....       LCALL     ?XSTACK_DISP0_8
   \   00014A   D0E0         POP       A
   \   00014C   F0           MOVX      @DPTR,A
   2089                  grpCnt = *pData++;
   \   00014D   8882         MOV       DPL,R0
   \   00014F   8983         MOV       DPH,R1
   \   000151   E0           MOVX      A,@DPTR
   \   000152   F5..         MOV       ?V8,A
   \   000154   0E           INC       R6
   \   000155   0E           INC       R6
   \   000156   EB           MOV       A,R3
   \   000157   FF           MOV       R7,A
   2090          
   2091                  if ( grpCnt > 0 )
   \   000158   E5..         MOV       A,?V8
   \   00015A   6042         JZ        ??zclGeneral_ProcessInGroupsClient_7
   2092                  {
   2093                    // Allocate space for the group list
   2094                    grpList = zcl_mem_alloc( sizeof( uint16 ) * grpCnt );
   \   00015C                ; Setup parameters for call to function osal_mem_alloc
   \   00015C   25E0         ADD       A,0xE0 /* A   */
   \   00015E   FA           MOV       R2,A
   \   00015F   E4           CLR       A
   \   000160   33           RLC       A
   \   000161   FB           MOV       R3,A
   \   000162   12....       LCALL     ?Subroutine25 & 0xFFFF
   2095                    if ( grpList != NULL )
   \                     ??CrossCallReturnLabel_46:
   \   000165   6037         JZ        ??zclGeneral_ProcessInGroupsClient_7
   2096                    {
   2097                      rsp.grpCnt = grpCnt;
   \   000167   7404         MOV       A,#0x4
   \   000169   12....       LCALL     ?XSTACK_DISP0_8
   \   00016C   E5..         MOV       A,?V8
   \   00016E   F0           MOVX      @DPTR,A
   2098                      for ( i = 0; i < grpCnt; i++ )
   \   00016F   7A00         MOV       R2,#0x0
   \   000171   8025         SJMP      ??zclGeneral_ProcessInGroupsClient_8
   2099                      {
   2100                        grpList[i] = BUILD_UINT16( pData[0], pData[1] );
   \                     ??zclGeneral_ProcessInGroupsClient_9:
   \   000173   8E82         MOV       DPL,R6
   \   000175   8F83         MOV       DPH,R7
   \   000177   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00017A   F8           MOV       R0,A
   \   00017B   E4           CLR       A
   \   00017C   C8           XCH       A,R0
   \   00017D   F9           MOV       R1,A
   \   00017E   EC           MOV       A,R4
   \   00017F   28           ADD       A,R0
   \   000180   E4           CLR       A
   \   000181   39           ADDC      A,R1
   \   000182   FD           MOV       R5,A
   \   000183   EA           MOV       A,R2
   \   000184   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000187   EB           MOV       A,R3
   \   000188   39           ADDC      A,R1
   \   000189   F583         MOV       DPH,A
   \   00018B   EC           MOV       A,R4
   \   00018C   F0           MOVX      @DPTR,A
   \   00018D   A3           INC       DPTR
   \   00018E   ED           MOV       A,R5
   \   00018F   F0           MOVX      @DPTR,A
   2101                        pData += 2;
   \   000190   EE           MOV       A,R6
   \   000191   2402         ADD       A,#0x2
   \   000193   FE           MOV       R6,A
   \   000194   5001         JNC       ??zclGeneral_ProcessInGroupsClient_10
   \   000196   0F           INC       R7
   2102                      }
   \                     ??zclGeneral_ProcessInGroupsClient_10:
   \   000197   0A           INC       R2
   \                     ??zclGeneral_ProcessInGroupsClient_8:
   \   000198   EA           MOV       A,R2
   \   000199   C3           CLR       C
   \   00019A   95..         SUBB      A,?V8
   \   00019C   40D5         JC        ??zclGeneral_ProcessInGroupsClient_9
   2103                    }
   2104                  }
   2105          
   2106                  if ( pCBs->pfnGroupRsp )
   \                     ??zclGeneral_ProcessInGroupsClient_7:
   \   00019E   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   0001A1   601E         JZ        ??zclGeneral_ProcessInGroupsClient_11
   2107                  {
   2108                    rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \   0001A3   12....       LCALL     ?Subroutine5 & 0xFFFF
   2109                    rsp.cmdID = pInMsg->hdr.commandID;
   \                     ??CrossCallReturnLabel_5:
   \   0001A6   C0E0         PUSH      A
   \   0001A8   7402         MOV       A,#0x2
   \   0001AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AD   D0E0         POP       A
   \   0001AF   F0           MOVX      @DPTR,A
   2110                    rsp.grpList = grpList;
   \   0001B0   7405         MOV       A,#0x5
   \   0001B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B5   E5..         MOV       A,?V4
   \   0001B7   F0           MOVX      @DPTR,A
   \   0001B8   A3           INC       DPTR
   \   0001B9   E5..         MOV       A,?V5
   \   0001BB   12....       LCALL     ?Subroutine20 & 0xFFFF
   2111          
   2112                    pCBs->pfnGroupRsp( &rsp );
   2113                  }
   \                     ??CrossCallReturnLabel_42:
   \   0001BE   12....       LCALL     ?CALL_IND
   2114          
   2115                  if ( grpList != NULL )
   \                     ??zclGeneral_ProcessInGroupsClient_11:
   \   0001C1   E5..         MOV       A,?V4
   \   0001C3   45..         ORL       A,?V5
   \   0001C5   600C         JZ        ??zclGeneral_ProcessInGroupsClient_6
   2116                  {
   2117                    zcl_mem_free( grpList );
   \   0001C7                ; Setup parameters for call to function osal_mem_free
   \   0001C7   AA..         MOV       R2,?V4
   \   0001C9   AB..         MOV       R3,?V5
   \   0001CB   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001CE   8003         SJMP      ??zclGeneral_ProcessInGroupsClient_6
   2118                  }
   2119                }
   2120                break;
   2121          
   2122              default:
   2123                stat = ZFailure;
   \                     ??zclGeneral_ProcessInGroupsClient_3:
   \   0001D0   75..01       MOV       ?V11,#0x1
   2124                break;
   2125            }
   2126          
   2127            return ( stat );
   \                     ??zclGeneral_ProcessInGroupsClient_6:
   \   0001D3   A9..         MOV       R1,?V11
   \   0001D5   741C         MOV       A,#0x1c
   \   0001D7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001DA   02....       LJMP      ?Subroutine3 & 0xFFFF
   2128          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for indirect call
   \   000001                ; Setup parameters for indirect call
   \   000001   AA..         MOV       R2,?XSP + 0
   \   000003   AB..         MOV       R3,?XSP + 1
   \   000005   85..82       MOV       DPL,?V0
   \   000008   85..83       MOV       DPH,?V1
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F8           MOV       R0,A
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F583         MOV       DPH,A
   \   000011   8882         MOV       DPL,R0
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   85..82       MOV       DPL,?V6
   \   000003   85..83       MOV       DPH,?V7
   \   000006   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000009   85..82       MOV       DPL,?XSP + 0
   \   00000C   85..83       MOV       DPH,?XSP + 1
   \   00000F   E8           MOV       A,R0
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   E9           MOV       A,R1
   \   000013   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000016   E0           MOVX      A,@DPTR
   \   000017   22           RET
   2129          #endif // ZCL_GROUPS
   2130          
   2131          #if defined( ZCL_SCENES )
   2132          #if !defined ( ZCL_STANDALONE )
   2133          /*********************************************************************
   2134           * @fn      zclGeneral_AddScene
   2135           *
   2136           * @brief   Add a scene for an endpoint
   2137           *
   2138           * @param   endpoint -
   2139           * @param   scene - new scene item
   2140           *
   2141           * @return  ZStatus_t
   2142           */
   2143          ZStatus_t zclGeneral_AddScene( uint8 endpoint, zclGeneral_Scene_t *scene )
   2144          {
   2145            zclGenSceneItem_t *pNewItem;
   2146            zclGenSceneItem_t *pLoop;
   2147          
   2148            // Fill in the new profile list
   2149            pNewItem = zcl_mem_alloc( sizeof( zclGenSceneItem_t ) );
   2150            if ( pNewItem == NULL )
   2151              return ( ZMemError );
   2152          
   2153            // Fill in the plugin record.
   2154            pNewItem->next = (zclGenSceneItem_t *)NULL;
   2155            pNewItem->endpoint = endpoint;
   2156            zcl_memcpy( (uint8*)&(pNewItem->scene), (uint8*)scene, sizeof ( zclGeneral_Scene_t ));
   2157          
   2158            // Find spot in list
   2159            if (  zclGenSceneTable == NULL )
   2160            {
   2161              zclGenSceneTable = pNewItem;
   2162            }
   2163            else
   2164            {
   2165              // Look for end of list
   2166              pLoop = zclGenSceneTable;
   2167              while ( pLoop->next != NULL )
   2168                pLoop = pLoop->next;
   2169          
   2170              // Put new item at end of list
   2171              pLoop->next = pNewItem;
   2172            }
   2173          
   2174            // Update NV
   2175            zclGeneral_ScenesWriteNV();
   2176          
   2177            return ( ZSuccess );
   2178          }
   2179          #endif // ZCL_STANDALONE
   2180          
   2181          #if !defined ( ZCL_STANDALONE )
   2182          /*********************************************************************
   2183           * @fn      zclGeneral_FindScene
   2184           *
   2185           * @brief   Find a scene with endpoint and sceneID
   2186           *
   2187           * @param   endpoint -
   2188           * @param   groupID - what group the scene belongs to
   2189           * @param   sceneID - ID to look for scene
   2190           *
   2191           * @return  a pointer to the scene information, NULL if not found
   2192           */
   2193          zclGeneral_Scene_t *zclGeneral_FindScene( uint8 endpoint, uint16 groupID, uint8 sceneID )
   2194          {
   2195            zclGenSceneItem_t *pLoop;
   2196          
   2197            // Look for end of list
   2198            pLoop = zclGenSceneTable;
   2199            while ( pLoop )
   2200            {
   2201              if ( (pLoop->endpoint == endpoint || endpoint == 0xFF)
   2202                  && pLoop->scene.groupID == groupID && pLoop->scene.ID == sceneID )
   2203              {
   2204                return ( &(pLoop->scene) );
   2205              }
   2206              pLoop = pLoop->next;
   2207            }
   2208          
   2209            return ( (zclGeneral_Scene_t *)NULL );
   2210          }
   2211          #endif // ZCL_STANDALONE
   2212          
   2213          #if !defined ( ZCL_STANDALONE )
   2214          /*********************************************************************
   2215           * @fn      zclGeneral_FindAllScenesForGroup
   2216           *
   2217           * @brief   Find all the scenes with groupID
   2218           *
   2219           * @param   endpoint - endpoint to look for
   2220           * @param   sceneList - List to hold scene IDs (should hold APS_MAX_SCENES entries)
   2221           *
   2222           * @return  number of scenes copied to sceneList
   2223           */
   2224          uint8 zclGeneral_FindAllScenesForGroup( uint8 endpoint, uint16 groupID, uint8 *sceneList )
   2225          {
   2226            zclGenSceneItem_t *pLoop;
   2227            uint8 cnt = 0;
   2228          
   2229            // Look for end of list
   2230            pLoop = zclGenSceneTable;
   2231            while ( pLoop )
   2232            {
   2233              if ( pLoop->endpoint == endpoint && pLoop->scene.groupID == groupID )
   2234                sceneList[cnt++] = pLoop->scene.ID;
   2235              pLoop = pLoop->next;
   2236            }
   2237            return ( cnt );
   2238          }
   2239          #endif // ZCL_STANDALONE
   2240          
   2241          #if !defined ( ZCL_STANDALONE )
   2242          /*********************************************************************
   2243           * @fn      zclGeneral_RemoveScene
   2244           *
   2245           * @brief   Remove a scene with endpoint and sceneID
   2246           *
   2247           * @param   endpoint -
   2248           * @param   groupID - what group the scene belongs to
   2249           * @param   sceneID - ID to look for scene
   2250           *
   2251           * @return  TRUE if removed, FALSE if not found
   2252           */
   2253          uint8 zclGeneral_RemoveScene( uint8 endpoint, uint16 groupID, uint8 sceneID )
   2254          {
   2255            zclGenSceneItem_t *pLoop;
   2256            zclGenSceneItem_t *pPrev;
   2257          
   2258            // Look for end of list
   2259            pLoop = zclGenSceneTable;
   2260            pPrev = NULL;
   2261            while ( pLoop )
   2262            {
   2263              if ( pLoop->endpoint == endpoint
   2264                  && pLoop->scene.groupID == groupID && pLoop->scene.ID == sceneID )
   2265              {
   2266                if ( pPrev == NULL )
   2267                  zclGenSceneTable = pLoop->next;
   2268                else
   2269                  pPrev->next = pLoop->next;
   2270          
   2271                // Free the memory
   2272                zcl_mem_free( pLoop );
   2273          
   2274                // Update NV
   2275                zclGeneral_ScenesWriteNV();
   2276          
   2277                return ( TRUE );
   2278              }
   2279              pPrev = pLoop;
   2280              pLoop = pLoop->next;
   2281            }
   2282          
   2283            return ( FALSE );
   2284          }
   2285          #endif // ZCL_STANDALONE
   2286          
   2287          #if !defined ( ZCL_STANDALONE )
   2288          /*********************************************************************
   2289           * @fn      zclGeneral_RemoveAllScenes
   2290           *
   2291           * @brief   Remove all scenes with endpoint and group Id
   2292           *
   2293           * @param   endpoint -
   2294           * @param   groupID - ID to look for group
   2295           *
   2296           * @return  none
   2297           */
   2298          void zclGeneral_RemoveAllScenes( uint8 endpoint, uint16 groupID )
   2299          {
   2300            zclGenSceneItem_t *pLoop;
   2301            zclGenSceneItem_t *pPrev;
   2302            zclGenSceneItem_t *pNext;
   2303          
   2304            // Look for end of list
   2305            pLoop = zclGenSceneTable;
   2306            pPrev = NULL;
   2307            while ( pLoop )
   2308            {
   2309              if ( pLoop->endpoint == endpoint && pLoop->scene.groupID == groupID )
   2310              {
   2311                if ( pPrev == NULL )
   2312                  zclGenSceneTable = pLoop->next;
   2313                else
   2314                  pPrev->next = pLoop->next;
   2315                pNext = pLoop->next;
   2316          
   2317                // Free the memory
   2318                zcl_mem_free( pLoop );
   2319                pLoop = pNext;
   2320              }
   2321              else
   2322              {
   2323                pPrev = pLoop;
   2324                pLoop = pLoop->next;
   2325              }
   2326            }
   2327          
   2328            // Update NV
   2329            zclGeneral_ScenesWriteNV();
   2330          }
   2331          #endif // ZCL_STANDALONE
   2332          
   2333          #if !defined ( ZCL_STANDALONE )
   2334          /*********************************************************************
   2335           * @fn      zclGeneral_CountScenes
   2336           *
   2337           * @brief   Count the number of scenes for an endpoint
   2338           *
   2339           * @param   endpoint -
   2340           *
   2341           * @return  number of scenes assigned to an endpoint
   2342           */
   2343          uint8 zclGeneral_CountScenes( uint8 endpoint )
   2344          {
   2345            zclGenSceneItem_t *pLoop;
   2346            uint8 cnt = 0;
   2347          
   2348            // Look for end of list
   2349            pLoop = zclGenSceneTable;
   2350            while ( pLoop )
   2351            {
   2352              if ( pLoop->endpoint == endpoint  )
   2353                cnt++;
   2354              pLoop = pLoop->next;
   2355            }
   2356            return ( cnt );
   2357          }
   2358          #endif
   2359          
   2360          #if !defined ( ZCL_STANDALONE )
   2361          /*********************************************************************
   2362           * @fn      zclGeneral_CountAllScenes
   2363           *
   2364           * @brief   Count the total number of scenes
   2365           *
   2366           * @param   none
   2367           *
   2368           * @return  number of scenes
   2369           */
   2370          uint8 zclGeneral_CountAllScenes( void )
   2371          {
   2372            zclGenSceneItem_t *pLoop;
   2373            uint8 cnt = 0;
   2374          
   2375            // Look for end of list
   2376            pLoop = zclGenSceneTable;
   2377            while ( pLoop )
   2378            {
   2379              cnt++;
   2380              pLoop = pLoop->next;
   2381            }
   2382            return ( cnt );
   2383          }
   2384          #endif // ZCL_STANDALONE
   2385          
   2386          /*********************************************************************
   2387           * @fn      zclGeneral_ReadSceneCountCB
   2388           *
   2389           * @brief   Read the number of scenes currently in the device's
   2390           *          scene table (i.e., the Scene Count attribute).
   2391           *
   2392           *          Note: This function gets called only when the pointer
   2393           *                'dataPtr' to the Scene Count attribute value is
   2394           *                NULL in the attribute database registered with
   2395           *                the ZCL.
   2396           *
   2397           * @param   clusterId - cluster that attribute belongs to
   2398           * @param   attrId - attribute to be read or written
   2399           * @param   oper - ZCL_OPER_LEN, ZCL_OPER_READ, or ZCL_OPER_WRITE
   2400           * @param   pValue - pointer to attribute value
   2401           * @param   pLen - pointer to length of attribute value read
   2402           *
   2403           * @return  status
   2404           */
   2405          ZStatus_t zclGeneral_ReadSceneCountCB( uint16 clusterId, uint16 attrId,
   2406                                                 uint8 oper, uint8 *pValue, uint16 *pLen )
   2407          {
   2408            ZStatus_t status = ZCL_STATUS_SUCCESS;
   2409          
   2410            // This callback function should only be called for the Scene Count attribute
   2411            switch ( oper )
   2412            {
   2413              case ZCL_OPER_LEN:
   2414                *pLen = 1; // uint8
   2415                break;
   2416          
   2417              case ZCL_OPER_READ:
   2418                *pValue = zclGeneral_CountAllScenes();
   2419          
   2420                if ( pLen != NULL )
   2421                {
   2422                  *pLen = 1;
   2423                }
   2424                break;
   2425          
   2426              case ZCL_OPER_WRITE:
   2427                // Fall through
   2428          
   2429              default:
   2430                status = ZCL_STATUS_SOFTWARE_FAILURE; // should never get here!
   2431                break;
   2432            }
   2433          
   2434            return ( status );
   2435          }
   2436          
   2437          /*********************************************************************
   2438           * @fn      zclGeneral_ProcessInScenesServer
   2439           *
   2440           * @brief   Process in the received Scenes Command.
   2441           *
   2442           * @param   pInMsg - pointer to the incoming message
   2443           *
   2444           * @return  ZStatus_t
   2445           */
   2446          static ZStatus_t zclGeneral_ProcessInScenesServer( zclIncoming_t *pInMsg,
   2447                                                             zclGeneral_AppCallbacks_t *pCBs )
   2448          {
   2449            zclGeneral_Scene_t scene;
   2450            zclGeneral_Scene_t *pScene;
   2451            uint8 *pData = pInMsg->pData;
   2452            uint8 nameLen;
   2453            uint8 status;
   2454            uint8 sceneCnt = 0;
   2455            uint8 *sceneList = NULL;
   2456            uint8 sendRsp = TRUE;
   2457            uint8 nameSupport = FALSE;
   2458            ZStatus_t stat = ZSuccess;
   2459          
   2460            zcl_memset( (uint8*)&scene, 0, sizeof( zclGeneral_Scene_t ) );
   2461          
   2462            scene.groupID = BUILD_UINT16( pData[0], pData[1] );
   2463            pData += 2;   // Move past group ID
   2464            scene.ID = *pData++;
   2465          
   2466            switch ( pInMsg->hdr.commandID )
   2467            {
   2468              case COMMAND_SCENE_ADD:
   2469          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2470              case COMMAND_SCENE_ENHANCED_ADD:
   2471          #endif // ZCL_LIGHT_LINK_ENHANCE
   2472                // Parse the rest of the incoming message
   2473                scene.transTime = BUILD_UINT16( pData[0], pData[1] );
   2474                pData += 2;
   2475          
   2476                if ( pInMsg->hdr.commandID == COMMAND_SCENE_ENHANCED_ADD )
   2477                {
   2478                  // Received transition time is in 1/10 second
   2479                  scene.transTime100ms = scene.transTime % 10;
   2480                  scene.transTime /= 10;
   2481                }
   2482          
   2483                nameLen= *pData++; // Name length
   2484          
   2485                // Retrieve Name Support attribute
   2486                zcl_ReadAttrData( pInMsg->msg->endPoint, ZCL_CLUSTER_ID_GEN_SCENES,
   2487                                  ATTRID_SCENES_NAME_SUPPORT, &nameSupport, NULL );
   2488          
   2489                if ( nameSupport )
   2490                {
   2491                  if ( nameLen > (ZCL_GEN_SCENE_NAME_LEN-1) )
   2492                    nameLen = (ZCL_GEN_SCENE_NAME_LEN-1);
   2493                  scene.name[0] = nameLen;
   2494                  zcl_memcpy( &(scene.name[1]), pData, nameLen );
   2495                }
   2496          
   2497                pData += nameLen; // move past name, use original length
   2498          
   2499                scene.extLen = pInMsg->pDataLen - ( (uint16)( pData - pInMsg->pData ) );
   2500                if ( scene.extLen > 0 )
   2501                {
   2502                  // Copy the extention field(s)
   2503                  if ( scene.extLen > ZCL_GEN_SCENE_EXT_LEN )
   2504                  {
   2505                    scene.extLen = ZCL_GEN_SCENE_EXT_LEN;
   2506                  }
   2507                  zcl_memcpy( scene.extField, pData, scene.extLen );
   2508                }
   2509          
   2510                if ( scene.groupID == 0x0000 ||
   2511                     aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
   2512                {
   2513                  // Either the Scene doesn't belong to a Group (Group ID = 0x0000) or it
   2514                  // does and the corresponding Group exits
   2515                  pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
   2516                  if ( pScene || ( zclGeneral_CountAllScenes() < ZCL_GEN_MAX_SCENES ) )
   2517                  {
   2518                    status = ZCL_STATUS_SUCCESS;
   2519                    if ( pScene != NULL )
   2520                    {
   2521                      // The Scene already exists so update it
   2522                      pScene->transTime = scene.transTime;
   2523                      zcl_memcpy( pScene->name, scene.name, ZCL_GEN_SCENE_NAME_LEN );
   2524          
   2525                      // Use the new extention field(s)
   2526                      zcl_memcpy( pScene->extField, scene.extField, scene.extLen );
   2527                      pScene->extLen = scene.extLen;
   2528          
   2529                      // Save Scenes
   2530                      zclGeneral_ScenesSave();
   2531                    }
   2532                    else
   2533                    {
   2534                      // The Scene doesn't exist so add it
   2535                      zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
   2536                    }
   2537                  }
   2538                  else
   2539                  {
   2540                    status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
   2541                  }
   2542                }
   2543                else
   2544                {
   2545                  status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
   2546                }
   2547          
   2548                if ( UNICAST_MSG( pInMsg->msg ) )
   2549                {
   2550                  if ( pInMsg->hdr.commandID == COMMAND_SCENE_ADD )
   2551                  {
   2552                    zclGeneral_SendSceneAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2553                                                    status, scene.groupID, scene.ID,
   2554                                                    true, pInMsg->hdr.transSeqNum );
   2555                  }
   2556          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2557                  else // COMMAND_SCENE_ENHANCED_ADD
   2558                  {
   2559                    zclGeneral_SendSceneEnhancedAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2560                                                            status, scene.groupID, scene.ID,
   2561                                                            true, pInMsg->hdr.transSeqNum );
   2562                  }
   2563          #endif // ZCL_LIGHT_LINK_ENHANCE
   2564                }
   2565                stat = ZCL_STATUS_CMD_HAS_RSP;
   2566          
   2567                break;
   2568          
   2569              case COMMAND_SCENE_VIEW:
   2570          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2571              case COMMAND_SCENE_ENHANCED_VIEW:
   2572          #endif // ZCL_LIGHT_LINK_ENHANCE
   2573                pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
   2574                if ( pScene != NULL )
   2575                {
   2576                  status = ZCL_STATUS_SUCCESS;
   2577                }
   2578                else
   2579                {
   2580                  // Scene not found
   2581                  if ( scene.groupID != 0x0000 &&
   2582                       aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) == NULL )
   2583                  {
   2584                    status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
   2585                  }
   2586                  else
   2587                  {
   2588                    status = ZCL_STATUS_NOT_FOUND;
   2589                  }
   2590                  pScene = &scene;
   2591                }
   2592          
   2593                if ( UNICAST_MSG( pInMsg->msg ) )
   2594                {
   2595                  if ( pInMsg->hdr.commandID == COMMAND_SCENE_VIEW )
   2596                  {
   2597                    zclGeneral_SendSceneViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2598                                                     status, pScene, true, pInMsg->hdr.transSeqNum );
   2599                  }
   2600          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2601                  else
   2602                  {
   2603                    zclGeneral_SendSceneEnhancedViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2604                                                             status, pScene, true, pInMsg->hdr.transSeqNum );
   2605                  }
   2606          #endif // ZCL_LIGHT_LINK_ENHANCE
   2607                }
   2608                stat = ZCL_STATUS_CMD_HAS_RSP;
   2609                break;
   2610          
   2611              case COMMAND_SCENE_REMOVE:
   2612                if ( zclGeneral_RemoveScene( pInMsg->msg->endPoint, scene.groupID, scene.ID ) )
   2613                {
   2614                  status = ZCL_STATUS_SUCCESS;
   2615                }
   2616                else
   2617                {
   2618                  // Scene not found
   2619                  if ( aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) == NULL )
   2620                  {
   2621                    // The Group is not in the Group Table
   2622                    status = ZCL_STATUS_INVALID_FIELD;
   2623                  }
   2624                  else
   2625                  {
   2626                    status = ZCL_STATUS_NOT_FOUND;
   2627                  }
   2628                }
   2629          
   2630                if ( UNICAST_MSG( pInMsg->msg ) )
   2631                {
   2632                  // Addressed to this device (not to a group) - send a response back
   2633                  zclGeneral_SendSceneRemoveResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2634                                                      status, scene.groupID,
   2635                                                      scene.ID, true, pInMsg->hdr.transSeqNum );
   2636                }
   2637                stat = ZCL_STATUS_CMD_HAS_RSP;
   2638                break;
   2639          
   2640              case COMMAND_SCENE_REMOVE_ALL:
   2641                if ( scene.groupID == 0x0000 ||
   2642                     aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
   2643                {
   2644                  zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, scene.groupID );
   2645                  status = ZCL_STATUS_SUCCESS;
   2646                }
   2647                else
   2648                {
   2649                  status = ZCL_STATUS_INVALID_FIELD;
   2650                }
   2651          
   2652                if ( UNICAST_MSG( pInMsg->msg ) )
   2653                {
   2654                  // Addressed to this device (not to a group) - send a response back
   2655                  zclGeneral_SendSceneRemoveAllResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2656                                                         status, scene.groupID, true, pInMsg->hdr.transSeqNum );
   2657                }
   2658                stat = ZCL_STATUS_CMD_HAS_RSP;
   2659                break;
   2660          
   2661              case COMMAND_SCENE_STORE:
   2662                if ( scene.groupID == 0x0000 ||
   2663                     aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
   2664                {
   2665                  // Either the Scene doesn't belong to a Group (Group ID = 0x0000) or it
   2666                  // does and the corresponding Group exits
   2667                  pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
   2668                  if ( pScene || ( zclGeneral_CountAllScenes() < ZCL_GEN_MAX_SCENES ) )
   2669                  {
   2670                    uint8 sceneChanged = FALSE;
   2671          
   2672                    status = ZCL_STATUS_SUCCESS;
   2673                    if ( pScene == NULL )
   2674                    {
   2675                      // Haven't been added yet
   2676                      pScene = &scene;
   2677                    }
   2678          
   2679                    if ( pCBs->pfnSceneStoreReq )
   2680                    {
   2681                      zclSceneReq_t req;
   2682          
   2683                      req.srcAddr = &(pInMsg->msg->srcAddr);
   2684                      req.scene = pScene;
   2685          
   2686                      // Get the latest Scene info
   2687                      if ( pCBs->pfnSceneStoreReq( &req ) )
   2688                      {
   2689                        sceneChanged = TRUE;
   2690                      }
   2691                    }
   2692          
   2693                    if ( pScene == &scene )
   2694                    {
   2695                      // The Scene doesn't exist so add it
   2696                      zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
   2697                    }
   2698                    else if ( sceneChanged )
   2699                    {
   2700                      // The Scene already exists so update only NV
   2701                      zclGeneral_ScenesSave();
   2702                    }
   2703                  }
   2704                  else
   2705                  {
   2706                    status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
   2707                  }
   2708                }
   2709                else
   2710                {
   2711                  status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
   2712                }
   2713          
   2714                if ( UNICAST_MSG( pInMsg->msg ) )
   2715                {
   2716                  // Addressed to this device (not to a group) - send a response back
   2717                  zclGeneral_SendSceneStoreResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2718                                                     status, scene.groupID, scene.ID,
   2719                                                     true, pInMsg->hdr.transSeqNum );
   2720                }
   2721                stat = ZCL_STATUS_CMD_HAS_RSP;
   2722                break;
   2723          
   2724              case COMMAND_SCENE_RECALL:
   2725                pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
   2726                if ( pScene && pCBs->pfnSceneRecallReq )
   2727                {
   2728                  zclSceneReq_t req;
   2729          
   2730                  req.srcAddr = &(pInMsg->msg->srcAddr);
   2731                  req.scene = pScene;
   2732          
   2733                  pCBs->pfnSceneRecallReq( &req );
   2734                }
   2735                // No response
   2736                break;
   2737          
   2738              case COMMAND_SCENE_GET_MEMBERSHIP:
   2739                // Find all the Scenes corresponding to the Group ID
   2740                if ( scene.groupID == 0x0000 ||
   2741                     aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
   2742                {
   2743                  // Allocate space for the scene list
   2744                  sceneList = zcl_mem_alloc( ZCL_GEN_MAX_SCENES );
   2745                  if ( sceneList != NULL )
   2746                  {
   2747                    sceneCnt = zclGeneral_FindAllScenesForGroup( pInMsg->msg->endPoint,
   2748                                                                 scene.groupID, sceneList );
   2749                    status = ZCL_STATUS_SUCCESS;
   2750                    if ( ! UNICAST_MSG( pInMsg->msg ) )
   2751                    {
   2752                      // Addressed to the Group - ONLY send a response if an entry within the
   2753                      // Scene Table corresponds to the Group ID
   2754                      if ( sceneCnt == 0 )
   2755                      {
   2756                        sendRsp = FALSE;
   2757                      }
   2758                    }
   2759                  }
   2760                  else
   2761                  {
   2762                    // Couldn't allocate space for the scene list!
   2763                    status = ZCL_STATUS_INSUFFICIENT_SPACE;
   2764                  }
   2765                }
   2766                else
   2767                {
   2768                  // The Group is not in the Group Table - send a response back
   2769                  status = ZCL_STATUS_INVALID_FIELD;
   2770                }
   2771          
   2772          #ifdef ZCL_LIGHT_LINK_ENHANCE //ZLL allows response to unicast only
   2773                if ( sendRsp && UNICAST_MSG( pInMsg->msg ) )
   2774          #else
   2775                if ( sendRsp )
   2776          #endif //ZCL_LIGHT_LINK_ENHANCE
   2777                {
   2778                  zclGeneral_SendSceneGetMembershipResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2779                                              status, zclGeneral_ScenesRemaingCapacity(), sceneCnt, sceneList,
   2780                                              scene.groupID, true, pInMsg->hdr.transSeqNum );
   2781                }
   2782          
   2783                if ( sceneList != NULL )
   2784                  zcl_mem_free( sceneList );
   2785          
   2786                stat = ZCL_STATUS_CMD_HAS_RSP;
   2787                break;
   2788          
   2789          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2790              case COMMAND_SCENE_COPY:
   2791                {
   2792                  uint8 mode;
   2793                  uint16 groupIDFrom, groupIDTo;
   2794                  uint8 sceneIDFrom, sceneIDTo;
   2795          
   2796                  pData = pInMsg->pData; // different payload format
   2797          
   2798                  mode = *pData++;
   2799                  groupIDFrom = BUILD_UINT16( pData[0], pData[1] ); // from group ID
   2800                  pData += 2;
   2801                  sceneIDFrom = *pData++; // from scene ID
   2802                  groupIDTo = BUILD_UINT16( pData[0], pData[1] ); // to group ID
   2803                  pData += 2;
   2804                  if ( (mode & SCENE_COPY_MODE_ALL_BIT) == 0 )
   2805                  {
   2806                    sceneIDTo = *pData++; // to scene ID
   2807                  }
   2808          
   2809                  // Make sure the groups exist
   2810                  if ( ( aps_FindGroup( pInMsg->msg->endPoint, groupIDFrom ) != NULL ) &&
   2811                       ( aps_FindGroup( pInMsg->msg->endPoint, groupIDTo ) != NULL ) )
   2812                  {
   2813                    // Allocate space for the scene list
   2814                    sceneList = zcl_mem_alloc( (mode & SCENE_COPY_MODE_ALL_BIT) ? ZCL_GEN_MAX_SCENES : 1 );
   2815                    if ( sceneList == NULL )
   2816                    {
   2817                      status = ZCL_STATUS_INSUFFICIENT_SPACE; // Couldn't allocate space for the scene list!
   2818                    }
   2819                    else
   2820                    {
   2821                      status = ZCL_STATUS_SUCCESS;
   2822                      if ( mode & SCENE_COPY_MODE_ALL_BIT ) // Copy all scenes
   2823                      {
   2824                        sceneCnt = zclGeneral_FindAllScenesForGroup( pInMsg->msg->endPoint,
   2825                                                                     groupIDFrom, sceneList );
   2826                      }
   2827                      else // Copy single scene
   2828                      {
   2829                        // Make sure the scene exists
   2830                        pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDFrom, sceneIDFrom );
   2831                        if ( pScene != NULL )
   2832                        {
   2833                          sceneList[0] = sceneIDFrom;
   2834                          sceneCnt = 1;
   2835                        }
   2836                        else
   2837                        {
   2838                          status = ZCL_STATUS_INVALID_FIELD; // Scene not found
   2839                        }
   2840                      }
   2841                    }
   2842          
   2843                    if ( status == ZCL_STATUS_SUCCESS )
   2844                    {
   2845                      uint8 numScenesToAdd = 0;
   2846                      uint8 i;
   2847                      for ( i = 0; i < sceneCnt; i++ )
   2848                      {
   2849                        if ( zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDTo, sceneList[i] ) == NULL )
   2850                        {
   2851                          numScenesToAdd++;
   2852                        }
   2853                      }
   2854                      if ( zclGeneral_ScenesRemaingCapacity() >= numScenesToAdd )
   2855                      {
   2856                        // Copy the scenes
   2857                        for ( i = 0; i < sceneCnt; i++ )
   2858                        {
   2859                          // Ignore scene ID from and scene ID to fields
   2860                          pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDFrom, sceneList[i] );
   2861                          if ( pScene != NULL )
   2862                          {
   2863                            zclGeneral_Scene_t *pToScene;
   2864                            scene = *pScene;
   2865                            scene.groupID = groupIDTo;
   2866                            scene.ID = ( (mode & SCENE_COPY_MODE_ALL_BIT) ? sceneList[i] : sceneIDTo );
   2867          
   2868                            pToScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDTo, scene.ID );
   2869                            if( pToScene != NULL )
   2870                            {
   2871                              zclGeneral_RemoveScene( pInMsg->msg->endPoint, groupIDTo, scene.ID );
   2872                            }
   2873                            // Add the scene
   2874                            zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
   2875                          }
   2876                        }
   2877                      }
   2878                      else
   2879                      {
   2880                        status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
   2881                      }
   2882                    }
   2883                  }
   2884                  else
   2885                  {
   2886                    status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
   2887                  }
   2888          
   2889                  if ( UNICAST_MSG( pInMsg->msg ) )
   2890                  {
   2891                    if ( pScene == NULL )
   2892                    {
   2893                      pScene = &scene;
   2894                    }
   2895                    // Addressed to this device (not to a group) - send a response back
   2896                    zclGeneral_SendSceneCopyResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2897                                                      status, pScene->groupID, pScene->ID,
   2898                                                      true, pInMsg->hdr.transSeqNum );
   2899                  }
   2900          
   2901                  if ( sceneList != NULL )
   2902                  {
   2903                    zcl_mem_free( sceneList );
   2904                  }
   2905                }
   2906          
   2907                stat = ZCL_STATUS_CMD_HAS_RSP;
   2908                break;
   2909          #endif // ZCL_LIGHT_LINK_ENHANCE
   2910          
   2911              default:
   2912                stat = ZFailure;
   2913              break;
   2914            }
   2915          
   2916            return ( stat );
   2917          }
   2918          
   2919          /*********************************************************************
   2920           * @fn      zclGeneral_ProcessInScenesClient
   2921           *
   2922           * @brief   Process in the received Scenes Command.
   2923           *
   2924           * @param   pInMsg - pointer to the incoming message
   2925           *
   2926           * @return  ZStatus_t
   2927           */
   2928          static ZStatus_t zclGeneral_ProcessInScenesClient( zclIncoming_t *pInMsg,
   2929                                                             zclGeneral_AppCallbacks_t *pCBs )
   2930          {
   2931            zclGeneral_Scene_t scene;
   2932            uint8 *pData = pInMsg->pData;
   2933            uint8 nameLen;
   2934            zclSceneRsp_t rsp;
   2935            uint8 i;
   2936            ZStatus_t stat = ZSuccess;
   2937          
   2938            zcl_memset( (uint8*)&scene, 0, sizeof( zclGeneral_Scene_t ) );
   2939            zcl_memset( (uint8*)&rsp, 0, sizeof( zclSceneRsp_t ) );
   2940          
   2941            // Get the status field first
   2942            rsp.status = *pData++;
   2943          
   2944            if ( pInMsg->hdr.commandID == COMMAND_SCENE_GET_MEMBERSHIP_RSP )
   2945            {
   2946              rsp.capacity = *pData++;
   2947            }
   2948          
   2949            scene.groupID = BUILD_UINT16( pData[0], pData[1] );
   2950            pData += 2;   // Move past group ID
   2951          
   2952            switch ( pInMsg->hdr.commandID )
   2953            {
   2954              case COMMAND_SCENE_VIEW_RSP:
   2955                // Parse the rest of the incoming message
   2956                scene.ID = *pData++; // Not applicable to Remove All Response command
   2957                scene.transTime = BUILD_UINT16( pData[0], pData[1] );
   2958                pData += 2;
   2959                nameLen = *pData++; // Name length
   2960                if ( nameLen > (ZCL_GEN_SCENE_NAME_LEN-1) )
   2961                  nameLen = (ZCL_GEN_SCENE_NAME_LEN-1);
   2962          
   2963                scene.name[0] = nameLen;
   2964                zcl_memcpy( &(scene.name[1]), pData, nameLen );
   2965          
   2966                pData += nameLen; // move past name, use original length
   2967          
   2968                //*** Do something with the extension field(s)
   2969          
   2970                // Fall through to callback - break is left off intentionally
   2971          
   2972              case COMMAND_SCENE_ADD_RSP:
   2973              case COMMAND_SCENE_REMOVE_RSP:
   2974              case COMMAND_SCENE_REMOVE_ALL_RSP:
   2975              case COMMAND_SCENE_STORE_RSP:
   2976                if ( pCBs->pfnSceneRsp )
   2977                {
   2978                  if ( pInMsg->hdr.commandID != COMMAND_SCENE_REMOVE_ALL_RSP )
   2979                  {
   2980                    scene.ID = *pData++;
   2981                  }
   2982                  rsp.srcAddr = &(pInMsg->msg->srcAddr);
   2983                  rsp.cmdID = pInMsg->hdr.commandID;
   2984                  rsp.scene = &scene;
   2985          
   2986                  pCBs->pfnSceneRsp( &rsp );
   2987                }
   2988                break;
   2989          
   2990              case COMMAND_SCENE_GET_MEMBERSHIP_RSP:
   2991                {
   2992                  uint8 *sceneList = NULL;
   2993          
   2994                  if ( rsp.status == ZCL_STATUS_SUCCESS )
   2995                  {
   2996                    uint8 sceneCnt = *pData++;
   2997          
   2998                    if ( sceneCnt > 0 )
   2999                    {
   3000                      // Allocate space for the scene list
   3001                      sceneList = zcl_mem_alloc( sceneCnt );
   3002                      if ( sceneList != NULL )
   3003                      {
   3004                        rsp.sceneCnt = sceneCnt;
   3005                        for ( i = 0; i < sceneCnt; i++ )
   3006                          sceneList[i] = *pData++;
   3007                      }
   3008                    }
   3009                  }
   3010          
   3011                  if ( pCBs->pfnSceneRsp )
   3012                  {
   3013                    rsp.srcAddr = &(pInMsg->msg->srcAddr);
   3014                    rsp.cmdID = pInMsg->hdr.commandID;
   3015                    rsp.sceneList = sceneList;
   3016                    rsp.scene = &scene;
   3017          
   3018                    pCBs->pfnSceneRsp( &rsp);
   3019                  }
   3020          
   3021                  if ( sceneList != NULL )
   3022                  {
   3023                    zcl_mem_free( sceneList );
   3024                  }
   3025                }
   3026                break;
   3027          
   3028              default:
   3029                stat = ZFailure;
   3030                break;
   3031            }
   3032          
   3033            return ( stat );
   3034          }
   3035          #endif // ZCL_SCENES
   3036          
   3037          #ifdef ZCL_ON_OFF
   3038          /*********************************************************************
   3039           * @fn      zclGeneral_ProcessInCmdOnOff
   3040           *
   3041           * @brief   Process in the received On/Off Command.
   3042           *
   3043           * @param   pInMsg - pointer to the incoming message
   3044           *
   3045           * @return  ZStatus_t
   3046           */
   3047          static ZStatus_t zclGeneral_ProcessInOnOff( zclIncoming_t *pInMsg,
   3048                                                      zclGeneral_AppCallbacks_t *pCBs )
   3049          {
   3050            ZStatus_t stat = ZSuccess;
   3051          
   3052            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   3053            {
   3054              switch ( pInMsg->hdr.commandID )
   3055              {
   3056                case COMMAND_OFF:
   3057                case COMMAND_ON:
   3058                case COMMAND_TOGGLE:
   3059                  if ( pCBs->pfnOnOff )
   3060                  {
   3061                    pCBs->pfnOnOff( pInMsg->hdr.commandID );
   3062                  }
   3063                  break;
   3064          
   3065          #ifdef ZCL_LIGHT_LINK_ENHANCE
   3066                case COMMAND_OFF_WITH_EFFECT:
   3067                  if ( pCBs->pfnOnOff_OffWithEffect )
   3068                  {
   3069                    zclOffWithEffect_t cmd;
   3070          
   3071                    cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3072                    cmd.effectId = pInMsg->pData[0];
   3073                    cmd.effectVariant = pInMsg->pData[1];
   3074          
   3075                    pCBs->pfnOnOff_OffWithEffect( &cmd );
   3076                  }
   3077                  break;
   3078          
   3079                case COMMAND_ON_WITH_RECALL_GLOBAL_SCENE:
   3080                  if ( pCBs->pfnOnOff_OnWithRecallGlobalScene )
   3081                  {
   3082                    pCBs->pfnOnOff_OnWithRecallGlobalScene();
   3083                  }
   3084                  break;
   3085          
   3086                case COMMAND_ON_WITH_TIMED_OFF:
   3087                  if ( pCBs->pfnOnOff_OnWithTimedOff )
   3088                  {
   3089                    zclOnWithTimedOff_t cmd;
   3090          
   3091                    cmd.onOffCtrl.byte = pInMsg->pData[0];
   3092                    cmd.onTime = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   3093                    cmd.offWaitTime = BUILD_UINT16( pInMsg->pData[3], pInMsg->pData[4] );
   3094                    pCBs->pfnOnOff_OnWithTimedOff( &cmd );
   3095                  }
   3096                  break;
   3097          #endif // ZCL_LIGHT_LINK_ENHANCE
   3098          
   3099                default:
   3100                  stat = ZFailure;
   3101                  break;
   3102              }
   3103            }
   3104            // no Client command
   3105          
   3106            return ( stat );
   3107          }
   3108          #endif // ZCL_ON_OFF
   3109          
   3110          #ifdef ZCL_LEVEL_CTRL
   3111          /*********************************************************************
   3112           * @fn      zclGeneral_ProcessInLevelControl
   3113           *
   3114           * @brief   Process in the received Level Control Command.
   3115           *
   3116           * @param   pInMsg - pointer to the incoming message
   3117           *
   3118           * @return  ZStatus_t
   3119           */
   3120          static ZStatus_t zclGeneral_ProcessInLevelControl( zclIncoming_t *pInMsg,
   3121                                                             zclGeneral_AppCallbacks_t *pCBs )
   3122          {
   3123            uint8 withOnOff = FALSE;
   3124            ZStatus_t stat = ZSuccess;
   3125          
   3126            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   3127            {
   3128              switch ( pInMsg->hdr.commandID )
   3129              {
   3130                case COMMAND_LEVEL_MOVE_TO_LEVEL_WITH_ON_OFF:
   3131                  withOnOff = TRUE;
   3132                  // fall through
   3133                case COMMAND_LEVEL_MOVE_TO_LEVEL:
   3134                  if ( pCBs->pfnLevelControlMoveToLevel )
   3135                  {
   3136                    zclLCMoveToLevel_t cmd;
   3137          
   3138                    cmd.level = pInMsg->pData[0];
   3139          
   3140                    if ( ( cmd.level >= ATTR_LEVEL_MIN_LEVEL ) &&
   3141                         ( cmd.level <= ATTR_LEVEL_MAX_LEVEL ) )
   3142                    {
   3143                      cmd.transitionTime = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   3144                      cmd.withOnOff = withOnOff;
   3145          
   3146                      pCBs->pfnLevelControlMoveToLevel( &cmd );
   3147                    }
   3148                    else
   3149                    {
   3150                      // level range requested is invalid
   3151                      stat = ZCL_STATUS_INVALID_VALUE;
   3152                    }
   3153                  }
   3154                  break;
   3155          
   3156                case COMMAND_LEVEL_MOVE_WITH_ON_OFF:
   3157                  withOnOff = TRUE;
   3158                  // fall through
   3159                case COMMAND_LEVEL_MOVE:
   3160                  if ( pCBs->pfnLevelControlMove )
   3161                  {
   3162                    zclLCMove_t cmd;
   3163          
   3164                    cmd.moveMode = pInMsg->pData[0];
   3165                    cmd.rate = pInMsg->pData[1];
   3166                    cmd.withOnOff = withOnOff;
   3167          
   3168                    pCBs->pfnLevelControlMove( &cmd );
   3169                  }
   3170                  break;
   3171          
   3172                case COMMAND_LEVEL_STEP_WITH_ON_OFF:
   3173                  withOnOff = TRUE;
   3174                  // fall through
   3175                case COMMAND_LEVEL_STEP:
   3176                  if ( pCBs->pfnLevelControlStep )
   3177                  {
   3178                    zclLCStep_t cmd;
   3179          
   3180                    cmd.stepMode = pInMsg->pData[0];
   3181                    cmd.amount =  pInMsg->pData[1];
   3182                    cmd.transitionTime = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
   3183                    cmd.withOnOff = withOnOff;
   3184          
   3185                    pCBs->pfnLevelControlStep( &cmd );
   3186                  }
   3187                  break;
   3188          
   3189                case COMMAND_LEVEL_STOP:
   3190                case COMMAND_LEVEL_STOP_WITH_ON_OFF:
   3191                  // Both Stop commands are identical
   3192                  if ( pCBs->pfnLevelControlStop )
   3193                  {
   3194                    pCBs->pfnLevelControlStop();
   3195                  }
   3196                  break;
   3197          
   3198                default:
   3199                  stat = ZFailure;
   3200                  break;
   3201              }
   3202            }
   3203            // no Client command
   3204          
   3205            return ( stat );
   3206          }
   3207          #endif // ZCL_LEVEL_CTRL
   3208          
   3209          #ifdef ZCL_ALARMS
   3210          /*********************************************************************
   3211           * @fn      zclGeneral_AddAlarm
   3212           *
   3213           * @brief   Add an alarm for a cluster
   3214           *
   3215           * @param   endpoint -
   3216           * @param   alarm - new alarm item
   3217           *
   3218           * @return  ZStatus_t
   3219           */
   3220          ZStatus_t zclGeneral_AddAlarm( uint8 endpoint, zclGeneral_Alarm_t *alarm )
   3221          {
   3222            zclGenAlarmItem_t *pNewItem;
   3223            zclGenAlarmItem_t *pLoop;
   3224          
   3225            // Fill in the new profile list
   3226            pNewItem = zcl_mem_alloc( sizeof( zclGenAlarmItem_t ) );
   3227            if ( pNewItem == NULL )
   3228              return ( ZMemError );
   3229          
   3230            // Fill in the plugin record.
   3231            pNewItem->next = (zclGenAlarmItem_t *)NULL;
   3232            pNewItem->endpoint =  endpoint;
   3233            zcl_memcpy( (uint8*)(&pNewItem->alarm), (uint8*)alarm, sizeof ( zclGeneral_Alarm_t ) );
   3234          
   3235            // Find spot in list
   3236            if (  zclGenAlarmTable == NULL )
   3237            {
   3238              zclGenAlarmTable = pNewItem;
   3239            }
   3240            else
   3241            {
   3242              // Look for end of list
   3243              pLoop = zclGenAlarmTable;
   3244              while ( pLoop->next != NULL )
   3245                pLoop = pLoop->next;
   3246          
   3247              // Put new item at end of list
   3248              pLoop->next = pNewItem;
   3249            }
   3250          
   3251            return ( ZSuccess );
   3252          }
   3253          
   3254          /*********************************************************************
   3255           * @fn      zclGeneral_FindAlarm
   3256           *
   3257           * @brief   Find an alarm with alarmCode and clusterID
   3258           *
   3259           * @param   endpoint -
   3260           * @param   groupID - what group the scene belongs to
   3261           * @param   sceneID - ID to look for scene
   3262           *
   3263           * @return  a pointer to the alarm information, NULL if not found
   3264           */
   3265          zclGeneral_Alarm_t *zclGeneral_FindAlarm( uint8 endpoint, uint8 alarmCode, uint16 clusterID )
   3266          {
   3267            zclGenAlarmItem_t *pLoop;
   3268          
   3269            // Look for the alarm
   3270            pLoop = zclGenAlarmTable;
   3271            while ( pLoop )
   3272            {
   3273              if ( pLoop->endpoint == endpoint &&
   3274                   pLoop->alarm.code == alarmCode && pLoop->alarm.clusterID == clusterID )
   3275              {
   3276                return ( &(pLoop->alarm) );
   3277              }
   3278              pLoop = pLoop->next;
   3279            }
   3280          
   3281            return ( (zclGeneral_Alarm_t *)NULL );
   3282          }
   3283          
   3284          /*********************************************************************
   3285           * @fn      zclGeneral_FindEarliestAlarm
   3286           *
   3287           * @brief   Find an alarm with the earliest timestamp
   3288           *
   3289           * @param   endpoint -
   3290           *
   3291           * @return  a pointer to the alarm information, NULL if not found
   3292           */
   3293          zclGeneral_Alarm_t *zclGeneral_FindEarliestAlarm( uint8 endpoint )
   3294          {
   3295            zclGenAlarmItem_t *pLoop;
   3296            zclGenAlarmItem_t earliestAlarm;
   3297            zclGenAlarmItem_t *pEarliestAlarm = &earliestAlarm;
   3298          
   3299            pEarliestAlarm->alarm.timeStamp = 0xFFFFFFFF;
   3300          
   3301            // Look for alarm with earliest time
   3302            pLoop = zclGenAlarmTable;
   3303            while ( pLoop )
   3304            {
   3305              if ( pLoop->endpoint == endpoint &&
   3306                   pLoop->alarm.timeStamp < pEarliestAlarm->alarm.timeStamp )
   3307              {
   3308                pEarliestAlarm = pLoop;
   3309              }
   3310              pLoop = pLoop->next;
   3311            }
   3312          
   3313            if ( pEarliestAlarm->alarm.timeStamp != 0xFFFFFFFF )
   3314              return ( &(pEarliestAlarm->alarm) );
   3315          
   3316            // No alarm
   3317            return ( (zclGeneral_Alarm_t *)NULL );
   3318          }
   3319          
   3320          /*********************************************************************
   3321           * @fn      zclGeneral_ResetAlarm
   3322           *
   3323           * @brief   Remove an alarm with alarmCode and clusterID
   3324           *
   3325           * @param   endpoint -
   3326           * @param   alarmCode -
   3327           * @param   clusterID -
   3328           *
   3329           * @return  TRUE if removed, FALSE if not found
   3330           */
   3331          void zclGeneral_ResetAlarm( uint8 endpoint, uint8 alarmCode, uint16 clusterID )
   3332          {
   3333            zclGenAlarmItem_t *pLoop;
   3334            zclGenAlarmItem_t *pPrev;
   3335          
   3336            // Look for end of list
   3337            pLoop = zclGenAlarmTable;
   3338            pPrev = NULL;
   3339            while ( pLoop )
   3340            {
   3341              if ( pLoop->endpoint == endpoint &&
   3342                   pLoop->alarm.code == alarmCode && pLoop->alarm.clusterID == clusterID )
   3343              {
   3344                if ( pPrev == NULL )
   3345                  zclGenAlarmTable = pLoop->next;
   3346                else
   3347                  pPrev->next = pLoop->next;
   3348          
   3349                // Free the memory
   3350                zcl_mem_free( pLoop );
   3351          
   3352                // Notify the Application so that if the alarm condition still active then
   3353                // a new notification will be generated, and a new alarm record will be
   3354                // added to the alarm log
   3355                // zclGeneral_NotifyReset( alarmCode, clusterID ); // callback function?
   3356                return;
   3357              }
   3358              pPrev = pLoop;
   3359              pLoop = pLoop->next;
   3360            }
   3361          }
   3362          
   3363          /*********************************************************************
   3364           * @fn      zclGeneral_ResetAllAlarms
   3365           *
   3366           * @brief   Remove all alarms with endpoint
   3367           *
   3368           * @param   endpoint -
   3369           * @param   notifyApp -
   3370           *
   3371           * @return  none
   3372           */
   3373          void zclGeneral_ResetAllAlarms( uint8 endpoint, uint8 notifyApp )
   3374          {
   3375            zclGenAlarmItem_t *pLoop;
   3376            zclGenAlarmItem_t *pPrev;
   3377            zclGenAlarmItem_t *pNext;
   3378          
   3379            // Look for end of list
   3380            pLoop = zclGenAlarmTable;
   3381            pPrev = NULL;
   3382            while ( pLoop )
   3383            {
   3384              if (  pLoop->endpoint == endpoint )
   3385              {
   3386                if ( pPrev == NULL )
   3387                  zclGenAlarmTable = pLoop->next;
   3388                else
   3389                  pPrev->next = pLoop->next;
   3390          
   3391                pNext = pLoop->next;
   3392          
   3393                // Free the memory
   3394                zcl_mem_free( pLoop );
   3395          
   3396                pLoop = pNext;
   3397              }
   3398              else
   3399              {
   3400                pPrev = pLoop;
   3401                pLoop = pLoop->next;
   3402              }
   3403            }
   3404          
   3405            if ( notifyApp )
   3406            {
   3407              // Notify the Application so that if any alarm conditions still active then
   3408              // a new notification will be generated, and a new alarm record will be
   3409              // added to the alarm log
   3410              // zclGeneral_NotifyResetAll(); // callback function?
   3411            }
   3412          }
   3413          
   3414          /*********************************************************************
   3415           * @fn      zclGeneral_ProcessInAlarmsServer
   3416           *
   3417           * @brief   Process in the received Alarms Command.
   3418           *
   3419           * @param   pInMsg - pointer to the incoming message
   3420           *
   3421           * @return  ZStatus_t
   3422           */
   3423          static ZStatus_t zclGeneral_ProcessInAlarmsServer( zclIncoming_t *pInMsg,
   3424                                                             zclGeneral_AppCallbacks_t *pCBs )
   3425          {
   3426            zclAlarm_t alarm;
   3427            zclGeneral_Alarm_t *pAlarm;
   3428            uint8 *pData = pInMsg->pData;
   3429            ZStatus_t stat = ZSuccess;
   3430          
   3431            switch ( pInMsg->hdr.commandID )
   3432            {
   3433              case COMMAND_ALARMS_RESET:
   3434                if ( pCBs->pfnAlarm )
   3435                {
   3436                  alarm.cmdID = pInMsg->hdr.commandID;
   3437                  alarm.alarmCode = pData[0];
   3438                  alarm.clusterID = BUILD_UINT16( pData[1], pData[2] );
   3439          
   3440                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3441                }
   3442                else
   3443                {
   3444                  stat = ZCL_STATUS_FAILURE;
   3445                }
   3446                break;
   3447          
   3448              case COMMAND_ALARMS_RESET_ALL:
   3449                if ( pCBs->pfnAlarm )
   3450                {
   3451                  alarm.cmdID = pInMsg->hdr.commandID;
   3452          
   3453                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3454                }
   3455                else
   3456                {
   3457                  stat = ZCL_STATUS_FAILURE;
   3458                }
   3459                break;
   3460          
   3461              case COMMAND_ALARMS_GET:
   3462                if ( pCBs->pfnAlarm )
   3463                {
   3464                  alarm.srcAddr = &(pInMsg->msg->srcAddr);
   3465                  alarm.cmdID = pInMsg->hdr.commandID;
   3466          
   3467                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3468          
   3469                  pAlarm = zclGeneral_FindEarliestAlarm( pInMsg->msg->endPoint );
   3470                  if ( pAlarm )
   3471                  {
   3472                    // Send a response back
   3473                    zclGeneral_SendAlarmGetResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   3474                                                     ZCL_STATUS_SUCCESS, pAlarm->code,
   3475                                                     pAlarm->clusterID, pAlarm->timeStamp,
   3476                                                     true, pInMsg->hdr.transSeqNum );
   3477                    // Remove the entry from the Alarm table
   3478                    zclGeneral_ResetAlarm( pInMsg->msg->endPoint, pAlarm->code, pAlarm->clusterID );
   3479                  }
   3480                  else
   3481                  {
   3482                    // Send a response back
   3483                    zclGeneral_SendAlarmGetResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   3484                                                     ZCL_STATUS_NOT_FOUND, 0, 0, 0,
   3485                                                     true, pInMsg->hdr.transSeqNum );
   3486                  }
   3487                  stat = ZCL_STATUS_CMD_HAS_RSP;
   3488                }
   3489                else
   3490                {
   3491                  stat = ZCL_STATUS_FAILURE;
   3492                }
   3493                break;
   3494          
   3495              case COMMAND_ALARMS_RESET_LOG:
   3496                if ( pCBs->pfnAlarm )
   3497                {
   3498                  alarm.cmdID = pInMsg->hdr.commandID;
   3499          
   3500                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3501          
   3502                  zclGeneral_ResetAllAlarms( pInMsg->msg->endPoint, FALSE );
   3503                }
   3504                else
   3505                {
   3506                  stat = ZCL_STATUS_FAILURE;
   3507                }
   3508                break;
   3509          
   3510          #ifdef SE_UK_EXT
   3511              case COMMAND_ALARMS_PUBLISH_EVENT_LOG:
   3512                if ( pCBs->pfnPublishEventLog )
   3513                {
   3514                  zclPublishEventLog_t eventLog;
   3515          
   3516                  eventLog.logID = *pData++;
   3517                  eventLog.cmdIndex = *pData++;
   3518                  eventLog.totalCmds = *pData++;
   3519          
   3520                  // First try to find out number of Sub Log Payloads
   3521                  eventLog.numSubLogs = (pInMsg->pDataLen-3)/(1+4); // event ID + event time
   3522                  if ( eventLog.numSubLogs > 0 )
   3523                  {
   3524                    // Try to alloc space for Log Payload
   3525                    eventLog.pLogs = (zclEventLogPayload_t *)zcl_mem_alloc( sizeof( zclEventLogPayload_t ) *
   3526                                                                             eventLog.numSubLogs );
   3527                    if ( eventLog.pLogs != NULL )
   3528                    {
   3529                      // Copy Log Payload
   3530                      for ( uint8 i = 0; i < eventLog.numSubLogs; i++ )
   3531                      {
   3532                        eventLog.pLogs[i].eventId = *pData++;
   3533                        eventLog.pLogs[i].eventTime = zcl_build_uint32( pData, 4 );
   3534                        pData += 4;
   3535                      }
   3536                    }
   3537                    else
   3538                    {
   3539                      stat = ZCL_STATUS_SOFTWARE_FAILURE;
   3540                    }
   3541                  }
   3542                  else
   3543                  {
   3544                    eventLog.pLogs = NULL;
   3545                  }
   3546          
   3547                  if ( stat == ZSuccess )
   3548                  {
   3549                    pCBs->pfnPublishEventLog( &(pInMsg->msg->srcAddr), &eventLog );
   3550                  }
   3551          
   3552                  if ( eventLog.pLogs != NULL )
   3553                  {
   3554                    zcl_mem_free( eventLog.pLogs );
   3555                  }
   3556                }
   3557                break;
   3558          #endif // SE_UK_EXT
   3559          
   3560              default:
   3561                stat = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   3562                break;
   3563            }
   3564          
   3565            return ( stat );
   3566          }
   3567          
   3568          /*********************************************************************
   3569           * @fn      zclGeneral_ProcessInAlarmsClient
   3570           *
   3571           * @brief   Process in the received Alarms Command.
   3572           *
   3573           * @param   pInMsg - pointer to the incoming message
   3574           *
   3575           * @return  ZStatus_t
   3576           */
   3577          static ZStatus_t zclGeneral_ProcessInAlarmsClient( zclIncoming_t *pInMsg,
   3578                                                             zclGeneral_AppCallbacks_t *pCBs )
   3579          {
   3580            uint8 *pData = pInMsg->pData;
   3581            zclAlarm_t alarm;
   3582            ZStatus_t stat = ZSuccess;
   3583          
   3584            zcl_memset( (uint8*)&alarm, 0, sizeof( zclAlarm_t ) );
   3585          
   3586            switch ( pInMsg->hdr.commandID )
   3587            {
   3588              case COMMAND_ALARMS_ALARM:
   3589                if ( pCBs->pfnAlarm )
   3590                {
   3591                  alarm.srcAddr = &(pInMsg->msg->srcAddr);
   3592                  alarm.cmdID = pInMsg->hdr.commandID;
   3593                  alarm.alarmCode = pData[0];
   3594                  alarm.clusterID = BUILD_UINT16( pData[1], pData[2] );
   3595          
   3596                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3597                }
   3598                else
   3599                {
   3600                  stat = ZCL_STATUS_FAILURE;
   3601                }
   3602                break;
   3603          
   3604              case COMMAND_ALARMS_GET_RSP:
   3605                if ( pCBs->pfnAlarm )
   3606                {
   3607                  alarm.srcAddr = &(pInMsg->msg->srcAddr);
   3608                  alarm.cmdID = pInMsg->hdr.commandID;
   3609                  alarm.alarmCode = *pData++;
   3610                  alarm.clusterID = BUILD_UINT16( pData[0], pData[1] );
   3611          
   3612                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3613                }
   3614                else
   3615                {
   3616                  stat = ZCL_STATUS_FAILURE;
   3617                }
   3618                break;
   3619          
   3620          #ifdef SE_UK_EXT
   3621              case COMMAND_ALARMS_GET_EVENT_LOG:
   3622                if ( pCBs->pfnGetEventLog )
   3623                {
   3624                  zclGetEventLog_t eventLog;
   3625          
   3626                  eventLog.logID = *pData++;
   3627                  eventLog.startTime = zcl_build_uint32( pData, 4 );
   3628                  pData += 4;
   3629                  eventLog.endTime = zcl_build_uint32( pData, 4 );
   3630                  pData += 4;
   3631                  eventLog.numEvents = *pData;
   3632          
   3633                  pCBs->pfnGetEventLog( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   3634                                        &eventLog, pInMsg->hdr.transSeqNum );
   3635                }
   3636                break;
   3637          #endif // SE_UK_EXT
   3638          
   3639              default:
   3640                stat = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   3641                break;
   3642            }
   3643          
   3644            return ( stat );
   3645          }
   3646          #endif // ZCL_ALARMS
   3647          
   3648          #ifdef ZCL_LOCATION
   3649          /*********************************************************************
   3650           * @fn      zclGeneral_ProcessInLocationServer
   3651           *
   3652           * @brief   Process in the received Location Command.
   3653           *
   3654           * @param   pInMsg - pointer to the incoming message
   3655           *
   3656           * @return  ZStatus_t
   3657           */
   3658          static ZStatus_t zclGeneral_ProcessInLocationServer( zclIncoming_t *pInMsg,
   3659                                                               zclGeneral_AppCallbacks_t *pCBs )
   3660          {
   3661            uint8 *pData = pInMsg->pData;
   3662            zclLocation_t cmd;
   3663            ZStatus_t stat = ZSuccess;
   3664          
   3665            zcl_memset( (uint8*)&cmd, 0, sizeof( zclLocation_t ) );
   3666          
   3667            switch ( pInMsg->hdr.commandID )
   3668            {
   3669              case COMMAND_LOCATION_SET_ABSOLUTE:
   3670                cmd.un.absLoc.coordinate1 = BUILD_UINT16( pData[0], pData[1] );
   3671                pData += 2;
   3672                cmd.un.absLoc.coordinate2 = BUILD_UINT16( pData[0], pData[1] );
   3673                pData += 2;
   3674                cmd.un.absLoc.coordinate3 = BUILD_UINT16( pData[0], pData[1] );
   3675                pData += 2;
   3676                cmd.un.absLoc.power = BUILD_UINT16( pData[0], pData[1] );
   3677                pData += 2;
   3678                cmd.un.absLoc.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
   3679          
   3680                if ( pCBs->pfnLocation )
   3681                {
   3682                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3683                  cmd.cmdID = pInMsg->hdr.commandID;
   3684          
   3685                  // Update the absolute location info
   3686                  pCBs->pfnLocation( &cmd );
   3687                }
   3688                break;
   3689          
   3690              case COMMAND_LOCATION_SET_DEV_CFG:
   3691                cmd.un.devCfg.power = BUILD_UINT16( pData[0], pData[1] );
   3692                pData += 2;
   3693                cmd.un.devCfg.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
   3694                pData += 2;
   3695                cmd.un.devCfg.calcPeriod = BUILD_UINT16( pData[0], pData[1] );
   3696                pData += 2;
   3697                cmd.un.devCfg.numMeasurements = *pData++;
   3698                cmd.un.devCfg.reportPeriod = BUILD_UINT16( pData[0], pData[1] );
   3699          
   3700                if ( pCBs->pfnLocation )
   3701                {
   3702                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3703                  cmd.cmdID = pInMsg->hdr.commandID;
   3704          
   3705                  // Update the device configuration info
   3706                  pCBs->pfnLocation( &cmd );
   3707                }
   3708                break;
   3709          
   3710              case COMMAND_LOCATION_GET_DEV_CFG:
   3711                cmd.un.ieeeAddr = pData;
   3712          
   3713                if ( pCBs->pfnLocation )
   3714                {
   3715                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3716                  cmd.cmdID = pInMsg->hdr.commandID;
   3717                  cmd.seqNum = pInMsg->hdr.transSeqNum;
   3718          
   3719                  // Retreive the Device Configuration
   3720                  pCBs->pfnLocation( &cmd );
   3721                }
   3722                stat = ZCL_STATUS_CMD_HAS_RSP;
   3723                break;
   3724          
   3725              case COMMAND_LOCATION_GET_DATA:
   3726                cmd.un.loc.bitmap.locByte = *pData++;
   3727                cmd.un.loc.numResponses = *pData++;
   3728          
   3729                if ( cmd.un.loc.brdcastResponse == 0 ) // command is sent as a unicast
   3730                  zcl_memcpy( cmd.un.loc.targetAddr, pData, 8 );
   3731          
   3732                if ( pCBs->pfnLocation )
   3733                {
   3734                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3735                  cmd.cmdID = pInMsg->hdr.commandID;
   3736                  cmd.seqNum = pInMsg->hdr.transSeqNum;
   3737          
   3738                  // Retreive the Location Data
   3739                  pCBs->pfnLocation( &cmd );
   3740                }
   3741                stat = ZCL_STATUS_CMD_HAS_RSP;
   3742                break;
   3743          
   3744              default:
   3745                stat = ZFailure;
   3746                break;
   3747            }
   3748          
   3749            return ( stat );
   3750          }
   3751          
   3752          /*********************************************************************
   3753           * @fn      zclGeneral_ProcessInLocationDataRsp
   3754           *
   3755           * @brief   Process in the received Location Command.
   3756           *
   3757           * @param   pInMsg - pointer to the incoming message
   3758           *
   3759           * @return  ZStatus_t
   3760           */
   3761          static void zclGeneral_ProcessInLocationDataRsp( zclIncoming_t *pInMsg,
   3762                                                           zclGeneral_AppCallbacks_t *pCBs )
   3763          {
   3764            uint8 *pData = pInMsg->pData;
   3765            zclLocationRsp_t rsp;
   3766          
   3767            zcl_memset( (uint8*)&rsp, 0, sizeof( zclLocationRsp_t ) );
   3768          
   3769            if ( pCBs->pfnLocationRsp )
   3770            {
   3771              if ( pInMsg->hdr.commandID == COMMAND_LOCATION_DATA_RSP )
   3772                rsp.un.loc.status = *pData++;
   3773          
   3774              if ( pInMsg->hdr.commandID != COMMAND_LOCATION_DATA_RSP ||
   3775                   rsp.un.loc.status == ZCL_STATUS_SUCCESS )
   3776              {
   3777                rsp.un.loc.data.type = *pData++;
   3778                rsp.un.loc.data.absLoc.coordinate1 = BUILD_UINT16( pData[0], pData[1] );
   3779                pData += 2;
   3780                rsp.un.loc.data.absLoc.coordinate2 = BUILD_UINT16( pData[0], pData[1] );
   3781                pData += 2;
   3782          
   3783                if ( locationType2D( rsp.un.loc.data.type ) == 0 )
   3784                {
   3785                  rsp.un.loc.data.absLoc.coordinate3 = BUILD_UINT16( pData[0], pData[1] );
   3786                  pData += 2;
   3787                }
   3788          
   3789                if ( pInMsg->hdr.commandID != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
   3790                {
   3791                  rsp.un.loc.data.absLoc.power = BUILD_UINT16( pData[0], pData[1] );
   3792                  pData += 2;
   3793                  rsp.un.loc.data.absLoc.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
   3794                  pData += 2;
   3795                }
   3796          
   3797                if ( locationTypeAbsolute( rsp.un.loc.data.type ) == 0 )
   3798                {
   3799                  if ( pInMsg->hdr.commandID != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
   3800                    rsp.un.loc.data.calcLoc.locationMethod = *pData++;
   3801          
   3802                  rsp.un.loc.data.calcLoc.qualityMeasure = *pData++;
   3803                  rsp.un.loc.data.calcLoc.locationAge = BUILD_UINT16( pData[0], pData[1] );
   3804                }
   3805              }
   3806          
   3807              rsp.srcAddr = &(pInMsg->msg->srcAddr);
   3808              rsp.cmdID = pInMsg->hdr.commandID;
   3809          
   3810              // Notify the Application
   3811              pCBs->pfnLocationRsp( &rsp );
   3812            }
   3813          }
   3814          
   3815          /*********************************************************************
   3816           * @fn      zclGeneral_ProcessInLocationClient
   3817           *
   3818           * @brief   Process in the received Location Command.
   3819           *
   3820           * @param   pInMsg - pointer to the incoming message
   3821           *
   3822           * @return  ZStatus_t
   3823           */
   3824          static ZStatus_t zclGeneral_ProcessInLocationClient( zclIncoming_t *pInMsg,
   3825                                                               zclGeneral_AppCallbacks_t *pCBs )
   3826          {
   3827            uint8 *pData = pInMsg->pData;
   3828            zclLocationRsp_t rsp;
   3829            ZStatus_t stat = ZSuccess;
   3830          
   3831            zcl_memset( (uint8*)&rsp, 0, sizeof( zclLocationRsp_t ) );
   3832          
   3833            switch ( pInMsg->hdr.commandID )
   3834            {
   3835              case COMMAND_LOCATION_DEV_CFG_RSP:
   3836                if ( pCBs->pfnLocationRsp )
   3837                {
   3838                  rsp.un.devCfg.status = *pData++;
   3839                  if ( rsp.un.devCfg.status == ZCL_STATUS_SUCCESS )
   3840                  {
   3841                    rsp.un.devCfg.data.power = BUILD_UINT16( pData[0], pData[1] );
   3842                    pData += 2;
   3843                    rsp.un.devCfg.data.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
   3844                    pData += 2;
   3845                    rsp.un.devCfg.data.calcPeriod = BUILD_UINT16( pData[0], pData[1] );
   3846                    pData += 2;
   3847                    rsp.un.devCfg.data.numMeasurements = *pData++;
   3848                    rsp.un.devCfg.data.reportPeriod = BUILD_UINT16( pData[0], pData[1] );
   3849          
   3850                    rsp.srcAddr = &(pInMsg->msg->srcAddr);
   3851                    rsp.cmdID = pInMsg->hdr.commandID;
   3852          
   3853                    // Notify the Application
   3854                    pCBs->pfnLocationRsp( &rsp );
   3855                  }
   3856                }
   3857                break;
   3858          
   3859              case COMMAND_LOCATION_DATA_RSP:
   3860              case COMMAND_LOCATION_DATA_NOTIF:
   3861              case COMMAND_LOCATION_COMPACT_DATA_NOTIF:
   3862                zclGeneral_ProcessInLocationDataRsp( pInMsg, pCBs );
   3863                break;
   3864          
   3865              case COMMAND_LOCATION_RSSI_PING:
   3866                if ( pCBs->pfnLocationRsp )
   3867                {
   3868                  rsp.un.locationType = *pData;
   3869          
   3870                  rsp.srcAddr = &(pInMsg->msg->srcAddr);
   3871                  rsp.cmdID = pInMsg->hdr.commandID;
   3872          
   3873                  // Notify the Application
   3874                  pCBs->pfnLocationRsp( &rsp );
   3875                }
   3876                break;
   3877          
   3878              default:
   3879                stat = ZFailure;
   3880                break;
   3881            }
   3882          
   3883            return ( stat );
   3884          }
   3885          #endif // ZCL_LOCATION
   3886          
   3887          #ifdef ZCL_SCENES
   3888          #if !defined ( ZCL_STANDALONE )
   3889          /*********************************************************************
   3890           * @fn      zclGeneral_ScenesInitNV
   3891           *
   3892           * @brief   Initialize the NV Scene Table Items
   3893           *
   3894           * @param   none
   3895           *
   3896           * @return  number of scenes
   3897           */
   3898          static uint8 zclGeneral_ScenesInitNV( void )
   3899          {
   3900            uint8  status;
   3901            uint16 size;
   3902          
   3903            size = (uint16)((sizeof ( nvGenScenesHdr_t ))
   3904                            + ( sizeof( zclGenSceneNVItem_t ) * ZCL_GEN_MAX_SCENES ));
   3905          
   3906            status = zcl_nv_item_init( ZCD_NV_SCENE_TABLE, size, NULL );
   3907          
   3908            if ( status != ZSUCCESS )
   3909            {
   3910              zclGeneral_ScenesSetDefaultNV();
   3911            }
   3912          
   3913            return status;
   3914          }
   3915          #endif // ZCL_STANDALONE
   3916          
   3917          #if !defined ( ZCL_STANDALONE )
   3918          /*********************************************************************
   3919           * @fn          zclGeneral_ScenesSetDefaultNV
   3920           *
   3921           * @brief       Write the defaults to NV
   3922           *
   3923           * @param       none
   3924           *
   3925           * @return      none
   3926           */
   3927          static void zclGeneral_ScenesSetDefaultNV( void )
   3928          {
   3929            nvGenScenesHdr_t hdr;
   3930          
   3931            // Initialize the header
   3932            hdr.numRecs = 0;
   3933          
   3934            // Save off the header
   3935            zcl_nv_write( ZCD_NV_SCENE_TABLE, 0, sizeof( nvGenScenesHdr_t ), &hdr );
   3936          }
   3937          #endif // ZCL_STANDALONE
   3938          
   3939          #if !defined ( ZCL_STANDALONE )
   3940          /*********************************************************************
   3941           * @fn          zclGeneral_ScenesWriteNV
   3942           *
   3943           * @brief       Save the Scene Table in NV
   3944           *
   3945           * @param       none
   3946           *
   3947           * @return      none
   3948           */
   3949          static void zclGeneral_ScenesWriteNV( void )
   3950          {
   3951            nvGenScenesHdr_t hdr;
   3952            zclGenSceneItem_t *pLoop;
   3953            zclGenSceneNVItem_t item;
   3954          
   3955            hdr.numRecs = 0;
   3956          
   3957            // Look for end of list
   3958            pLoop = zclGenSceneTable;
   3959            while ( pLoop )
   3960            {
   3961              // Build the record
   3962              item.endpoint = pLoop->endpoint;
   3963              zcl_memcpy( &(item.scene), &(pLoop->scene), sizeof ( zclGeneral_Scene_t ) );
   3964          
   3965              // Save the record to NV
   3966              zcl_nv_write( ZCD_NV_SCENE_TABLE,
   3967                      (uint16)((sizeof( nvGenScenesHdr_t )) + (hdr.numRecs * sizeof ( zclGenSceneNVItem_t ))),
   3968                              sizeof ( zclGenSceneNVItem_t ), &item );
   3969          
   3970              hdr.numRecs++;
   3971          
   3972              pLoop = pLoop->next;
   3973            }
   3974          
   3975            // Save off the header
   3976            zcl_nv_write( ZCD_NV_SCENE_TABLE, 0, sizeof( nvGenScenesHdr_t ), &hdr );
   3977          }
   3978          #endif // ZCL_STANDALONE
   3979          
   3980          #if !defined ( ZCL_STANDALONE )
   3981          /*********************************************************************
   3982           * @fn          zclGeneral_ScenesRestoreFromNV
   3983           *
   3984           * @brief       Restore the Scene table from NV
   3985           *
   3986           * @param       none
   3987           *
   3988           * @return      Number of entries restored
   3989           */
   3990          static uint16 zclGeneral_ScenesRestoreFromNV( void )
   3991          {
   3992            uint16 x;
   3993            nvGenScenesHdr_t hdr;
   3994          
   3995            zclGenSceneNVItem_t item;
   3996            uint16 numAdded = 0;
   3997          
   3998            if ( zcl_nv_read( ZCD_NV_SCENE_TABLE, 0, sizeof(nvGenScenesHdr_t), &hdr ) == ZSuccess )
   3999            {
   4000              // Read in the device list
   4001              for ( x = 0; x < hdr.numRecs; x++ )
   4002              {
   4003                if ( zcl_nv_read( ZCD_NV_SCENE_TABLE,
   4004                          (uint16)(sizeof(nvGenScenesHdr_t) + (x * sizeof ( zclGenSceneNVItem_t ))),
   4005                                            sizeof ( zclGenSceneNVItem_t ), &item ) == ZSUCCESS )
   4006                {
   4007                  // Add the scene
   4008                  if ( zclGeneral_AddScene( item.endpoint, &(item.scene) ) == ZSuccess )
   4009                  {
   4010                    numAdded++;
   4011                  }
   4012                }
   4013              }
   4014            }
   4015          
   4016            return ( numAdded );
   4017          }
   4018          #endif // ZCL_STANDALONE
   4019          
   4020          #if !defined ( ZCL_STANDALONE )
   4021          /*********************************************************************
   4022           * @fn          zclGeneral_ScenesInit
   4023           *
   4024           * @brief       Initialize the scenes table
   4025           *
   4026           * @param       none
   4027           *
   4028           * @return      none
   4029           */
   4030          void zclGeneral_ScenesInit( void )
   4031          {
   4032            // Initialize NV items
   4033            zclGeneral_ScenesInitNV();
   4034          
   4035            // Restore the Scene table
   4036            zclGeneral_ScenesRestoreFromNV();
   4037          }
   4038          #endif // ZCL_STANDALONE
   4039          
   4040          #if !defined ( ZCL_STANDALONE )
   4041          /*********************************************************************
   4042           * @fn          zclGeneral_ScenesSave
   4043           *
   4044           * @brief       Save the scenes table
   4045           *
   4046           * @param       none
   4047           *
   4048           * @return      none
   4049           */
   4050          void zclGeneral_ScenesSave( void )
   4051          {
   4052            // Update NV
   4053            zclGeneral_ScenesWriteNV();
   4054          }
   4055          #endif // ZCL_STANDALONE
   4056          
   4057          #endif // ZCL_SCENES
   4058          
   4059          /***************************************************************************
   4060          ****************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     94   zclGeneral_AddGroup
        0     16   -> aps_AddGroup
        0     19   -> osal_memcpy
        0     20   -> zcl_ReadAttrData
      0     10   zclGeneral_HdlInSpecificCommands
        0     10   -> zclGeneral_ProcessInGroupsClient
        0     10   -> zclGeneral_ProcessInGroupsServer
        0     10   -> zclGeneral_ProcessInIdentity
      2      0   zclGeneral_HdlIncoming
        2      0   -> zclGeneral_HdlInSpecificCommands
      1     63   zclGeneral_ProcessInGroupsClient
        0     50   -> osal_mem_alloc
        0     50   -> osal_mem_free
        0     53   -> osal_memcpy
        0     50   -> osal_memset
      1     91   zclGeneral_ProcessInGroupsServer
        0     74   -> aps_CountAllGroups
        0     74   -> aps_FindAllGroupsForEndpoint
        0     74   -> aps_FindGroup
        0     74   -> aps_RemoveAllGroup
        0     74   -> aps_RemoveGroup
        0     74   -> osal_mem_alloc
        0     74   -> osal_mem_free
        0     74   -> osal_memset
        0     74   -> zclGeneral_AddGroup
        0     81   -> zclGeneral_SendGroupGetMembershipRequest
        0     78   -> zclGeneral_SendGroupResponse
        0     77   -> zclGeneral_SendGroupViewResponse
        0     78   -> zcl_ReadAttrData
        0     81   -> zcl_SendDefaultRspCmd
      0     32   zclGeneral_ProcessInIdentity
        0     18   -> bdb_ZclIdentifyCmdInd
        0     18   -> bdb_ZclIdentifyQueryCmdInd
        0     20   -> zclGeneral_SendIdentifyQueryResponse
        0     22   -> zcl_ReadAttrData
      1     14   zclGeneral_RegisterCmdCallbacks
        0     12   -> osal_mem_alloc
        0     14   -> zcl_registerPlugin
      1     37   zclGeneral_SendAddGroupRequest
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     24   -> osal_memcpy
        0     32   -> zcl_SendCommand
      1    112   zclGeneral_SendGroupGetMembershipRequest
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     31   -> zcl_SendCommand
      1     28   zclGeneral_SendGroupRequest
        0     25   -> zcl_SendCommand
      1    104   zclGeneral_SendGroupResponse
        0     26   -> zcl_SendCommand
      1    110   zclGeneral_SendGroupViewResponse
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     25   -> osal_memcpy
        0     33   -> zcl_SendCommand
      1     25   zclGeneral_SendIdentify
        0     23   -> zcl_SendCommand
      1     25   zclGeneral_SendIdentifyEZModeInvoke
        0     24   -> zcl_SendCommand
      1     43   zclGeneral_SendIdentifyQueryResponse
        0     23   -> zcl_SendCommand
      1     27   zclGeneral_SendIdentifyUpdateCommState
        0     25   -> zcl_SendCommand


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ??Subroutine38_0
      12  ??Subroutine39_0
       5  ??Subroutine40_0
       1  ??Subroutine41_0
       6  ??Subroutine42_0
      10  ??Subroutine43_0
       3  ??Subroutine44_0
       5  ??Subroutine45_0
       4  ??Subroutine46_0
       6  ??Subroutine47_0
       4  ??Subroutine48_0
       4  ??Subroutine49_0
       5  ??Subroutine50_0
       5  ??Subroutine51_0
       8  ?Subroutine0
      24  ?Subroutine1
       8  ?Subroutine10
       1  ?Subroutine11
       6  ?Subroutine12
      13  ?Subroutine13
      13  ?Subroutine14
       6  ?Subroutine15
       6  ?Subroutine16
      11  ?Subroutine17
       4  ?Subroutine18
       9  ?Subroutine19
       3  ?Subroutine2
      20  ?Subroutine20
       1  ?Subroutine21
       4  ?Subroutine22
      13  ?Subroutine23
       1  ?Subroutine24
      10  ?Subroutine25
       9  ?Subroutine26
       7  ?Subroutine27
       2  ?Subroutine28
      12  ?Subroutine29
       5  ?Subroutine3
       4  ?Subroutine30
      22  ?Subroutine31
       7  ?Subroutine32
      10  ?Subroutine33
       5  ?Subroutine34
       8  ?Subroutine35
       6  ?Subroutine36
      10  ?Subroutine37
      23  ?Subroutine4
      24  ?Subroutine5
       6  ?Subroutine6
      15  ?Subroutine7
       6  ?Subroutine8
       7  ?Subroutine9
       2  zclGenCBs
       1  zclGenPluginRegisted
     163  zclGeneral_AddGroup
     218  zclGeneral_HdlInSpecificCommands
      33  zclGeneral_HdlIncoming
     477  zclGeneral_ProcessInGroupsClient
     733  zclGeneral_ProcessInGroupsServer
     289  zclGeneral_ProcessInIdentity
     147  zclGeneral_RegisterCmdCallbacks
     213  zclGeneral_SendAddGroupRequest
     263  zclGeneral_SendGroupGetMembershipRequest
     109  zclGeneral_SendGroupRequest
     122  zclGeneral_SendGroupResponse
     252  zclGeneral_SendGroupViewResponse
      83  zclGeneral_SendIdentify
      98  zclGeneral_SendIdentifyEZModeInvoke
      83  zclGeneral_SendIdentifyQueryResponse
     106  zclGeneral_SendIdentifyUpdateCommState
      96  -- Other

 
 3 813 bytes in segment BANKED_CODE
    96 bytes in segment BANK_RELAYS
     3 bytes in segment XDATA_Z
 
    96 bytes of CODE     memory
 3 813 bytes of HUGECODE memory
     3 bytes of XDATA    memory

Errors: none
Warnings: none
