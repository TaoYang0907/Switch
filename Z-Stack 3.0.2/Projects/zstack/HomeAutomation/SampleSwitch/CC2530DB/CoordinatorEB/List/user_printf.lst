###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               21/Jul/2020  00:00:35
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\Source\user_printf.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW2D2A.tmp ("D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\Source\user_printf.c"
#        -D BDB_REPORTING -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D
#        xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_GROUPS -D ZCL_REPORT -D ZCL_REPORTING_DEVICE -D
#        ZCL_REPORT_DESTINATION_DEVICE -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\user_printf.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj\user_printf.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\Source\user_printf.c
      1          /*
      2          	Copyright 2001, 2002 Georges Menie (www.menie.org)
      3          	stdarg version contributed by Christian Ettinger
      4          
      5              This program is free software; you can redistribute it and/or modify
      6              it under the terms of the GNU Lesser General Public License as published by
      7              the Free Software Foundation; either version 2 of the License, or
      8              (at your option) any later version.
      9          
     10              This program is distributed in the hope that it will be useful,
     11              but WITHOUT ANY WARRANTY; without even the implied warranty of
     12              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     13              GNU Lesser General Public License for more details.
     14          
     15              You should have received a copy of the GNU Lesser General Public License
     16              along with this program; if not, write to the Free Software
     17              Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
     18          */
     19          
     20          /*
     21          	putchar is the only external dependency for this file,
     22          	if you have a working putchar, leave it commented out.
     23          	If not, uncomment the define below and
     24          	replace outbyte(c) by your own function call.
     25          
     26          #define putchar(c) outbyte(c)
     27          */
     28          
     29          #include "stdarg.h"
     30          #include "user_printf.h"
     31          #include "hal_uart.h"
     32          
     33          void putchar(char c);

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     34          void putchar(char c){
   \                     putchar:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV       A,#-0x1
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   \   000009   E9           MOV       A,R1
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   F0           MOVX      @DPTR,A
     35            HalUARTWrite(HAL_UART_PORT_0,(uint8*)&c,1);
   \   000011                ; Setup parameters for call to function HalUARTWrite
   \   000011   7C01         MOV       R4,#0x1
   \   000013   7D00         MOV       R5,#0x0
   \   000015   AA..         MOV       R2,?XSP + 0
   \   000017   AB..         MOV       R3,?XSP + 1
   \   000019   7900         MOV       R1,#0x0
   \   00001B   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
     36          }
   \   00001E   7401         MOV       A,#0x1
   \   000020   12....       LCALL     ?DEALLOC_XSTACK8
   \   000023                REQUIRE ?Subroutine0
   \   000023                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
     37          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     38          static void printchar(char **str, int c)
   \                     printchar:
     39          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     40          	extern void putchar(char c);
     41          	
     42          	if (str) {
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   6021         JZ        ??printchar_0
     43          		**str = c;
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   \   00000C   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00000F   EC           MOV       A,R4
   \   000010   F0           MOVX      @DPTR,A
     44          		++(*str);
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   E0           MOVX      A,@DPTR
   \   000016   2401         ADD       A,#0x1
   \   000018   F8           MOV       R0,A
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   3400         ADDC      A,#0x0
   \   00001D   F9           MOV       R1,A
   \   00001E   8A82         MOV       DPL,R2
   \   000020   8B83         MOV       DPH,R3
   \   000022   E8           MOV       A,R0
   \   000023   F0           MOVX      @DPTR,A
   \   000024   A3           INC       DPTR
   \   000025   E9           MOV       A,R1
   \   000026   F0           MOVX      @DPTR,A
   \   000027   8005         SJMP      ??printchar_1
     45          	}
     46          	else (void)putchar((char)c);
   \                     ??printchar_0:
   \   000029                ; Setup parameters for call to function putchar
   \   000029   EC           MOV       A,R4
   \   00002A   F9           MOV       R1,A
   \   00002B   12....       LCALL     `??putchar::?relay`; Banked call to: putchar
     47          }
   \                     ??printchar_1:
   \   00002E   80..         SJMP      ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET
     48          
     49          #define PAD_RIGHT 1
     50          #define PAD_ZERO 2
     51          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     52          static int prints(char **out, const char *string, int width, int pad)
   \                     prints:
     53          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
     54          	register int pc = 0, padchar = ' ';
   \   00000D   7E00         MOV       R6,#0x0
   \   00000F   7F00         MOV       R7,#0x0
   \   000011   75..20       MOV       ?V4,#0x20
   \   000014   8E..         MOV       ?V5,R6
   \   000016   7410         MOV       A,#0x10
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V0,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V1,A
   \   000022   7412         MOV       A,#0x12
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F8           MOV       R0,A
     55          
     56          	if (width > 0) {
   \   000029   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00002C   403A         JC        ??prints_0
     57          		register int len = 0;
   \   00002E   7A00         MOV       R2,#0x0
   \   000030   7B00         MOV       R3,#0x0
     58          		register const char *ptr;
     59          		for (ptr = string; *ptr; ++ptr) ++len;
   \   000032   8C82         MOV       DPL,R4
   \   000034   8D83         MOV       DPH,R5
   \   000036   8006         SJMP      ??prints_1
   \                     ??prints_2:
   \   000038   0A           INC       R2
   \   000039   EA           MOV       A,R2
   \   00003A   7001         JNZ       ??prints_3
   \   00003C   0B           INC       R3
   \                     ??prints_3:
   \   00003D   A3           INC       DPTR
   \                     ??prints_1:
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   70F7         JNZ       ??prints_2
     60          		if (len >= width) width = 0;
   \   000041   C3           CLR       C
   \   000042   EA           MOV       A,R2
   \   000043   95..         SUBB      A,?V0
   \   000045   EB           MOV       A,R3
   \   000046   95..         SUBB      A,?V1
   \   000048   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00004A   65D0         XRL       A,PSW
   \   00004C   33           RLC       A
   \   00004D   4006         JC        ??prints_4
   \   00004F   8E..         MOV       ?V0,R6
   \   000051   8E..         MOV       ?V1,R6
   \   000053   800B         SJMP      ??prints_5
     61          		else width -= len;
   \                     ??prints_4:
   \   000055   C3           CLR       C
   \   000056   E5..         MOV       A,?V0
   \   000058   9A           SUBB      A,R2
   \   000059   F5..         MOV       ?V0,A
   \   00005B   E5..         MOV       A,?V1
   \   00005D   9B           SUBB      A,R3
   \   00005E   F5..         MOV       ?V1,A
     62          		if (pad & PAD_ZERO) padchar = '0';
   \                     ??prints_5:
   \   000060   E8           MOV       A,R0
   \   000061   5402         ANL       A,#0x2
   \   000063   6003         JZ        ??prints_0
   \   000065   75..30       MOV       ?V4,#0x30
     63          	}
     64          	if (!(pad & PAD_RIGHT)) {
   \                     ??prints_0:
   \   000068   E8           MOV       A,R0
   \   000069   A2E0         MOV       C,0xE0 /* A   */.0
   \   00006B   401A         JC        ??prints_6
   \   00006D   8013         SJMP      ??CrossCallReturnLabel_12
     65          		for ( ; width > 0; --width) {
     66          			printchar (out, padchar);
   \                     ??prints_7:
   \   00006F                ; Setup parameters for call to function printchar
   \   00006F   AC..         MOV       R4,?V4
   \   000071   AD..         MOV       R5,?V5
   \   000073   AA..         MOV       R2,?V6
   \   000075   AB..         MOV       R3,?V7
   \   000077   12....       LCALL     `??printchar::?relay`; Banked call to: printchar
     67          			++pc;
   \   00007A   0E           INC       R6
   \   00007B   EE           MOV       A,R6
   \   00007C   7001         JNZ       ??prints_8
   \   00007E   0F           INC       R7
     68          		}
   \                     ??prints_8:
   \   00007F   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000082   12....       LCALL     ?Subroutine4 & 0xFFFF
     69          	}
   \                     ??CrossCallReturnLabel_5:
   \   000085   50E8         JNC       ??prints_7
     70          	for ( ; *string ; ++string) {
   \                     ??prints_6:
   \   000087   85..82       MOV       DPL,?V2
   \   00008A   85..83       MOV       DPH,?V3
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   6031         JZ        ??CrossCallReturnLabel_13
     71          		printchar (out, *string);
   \   000090                ; Setup parameters for call to function printchar
   \   000090   FC           MOV       R4,A
   \   000091   7D00         MOV       R5,#0x0
   \   000093   AA..         MOV       R2,?V6
   \   000095   AB..         MOV       R3,?V7
   \   000097   12....       LCALL     `??printchar::?relay`; Banked call to: printchar
     72          		++pc;
   \   00009A   0E           INC       R6
   \   00009B   EE           MOV       A,R6
   \   00009C   7001         JNZ       ??prints_9
   \   00009E   0F           INC       R7
     73          	}
   \                     ??prints_9:
   \   00009F   85..82       MOV       DPL,?V2
   \   0000A2   85..83       MOV       DPH,?V3
   \   0000A5   A3           INC       DPTR
   \   0000A6   8582..       MOV       ?V2,DPL
   \   0000A9   8583..       MOV       ?V3,DPH
   \   0000AC   80D9         SJMP      ??prints_6
     74          	for ( ; width > 0; --width) {
     75          		printchar (out, padchar);
   \                     ??prints_10:
   \   0000AE                ; Setup parameters for call to function printchar
   \   0000AE   AC..         MOV       R4,?V4
   \   0000B0   AD..         MOV       R5,?V5
   \   0000B2   AA..         MOV       R2,?V6
   \   0000B4   AB..         MOV       R3,?V7
   \   0000B6   12....       LCALL     `??printchar::?relay`; Banked call to: printchar
     76          		++pc;
   \   0000B9   0E           INC       R6
   \   0000BA   EE           MOV       A,R6
   \   0000BB   7001         JNZ       ??prints_11
   \   0000BD   0F           INC       R7
     77          	}
   \                     ??prints_11:
   \   0000BE   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000C1   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000C4   50E8         JNC       ??prints_10
     78          
     79          	return pc;
   \   0000C6   EE           MOV       A,R6
   \   0000C7   FA           MOV       R2,A
   \   0000C8   EF           MOV       A,R7
   \   0000C9   FB           MOV       R3,A
   \   0000CA   7F08         MOV       R7,#0x8
   \   0000CC   02....       LJMP      ?BANKED_LEAVE_XDATA
     80          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   C3           CLR       C
   \   000001   E5..         MOV       A,?V0
   \   000003   9401         SUBB      A,#0x1
   \   000005   E5..         MOV       A,?V1
   \   000007   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   9400         SUBB      A,#0x0
   \   000002   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000004   65D0         XRL       A,PSW
   \   000006   33           RLC       A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E5..         MOV       A,?V0
   \   000002   24FF         ADD       A,#-0x1
   \   000004   F5..         MOV       ?V0,A
   \   000006   E5..         MOV       A,?V1
   \   000008   34FF         ADDC      A,#-0x1
   \   00000A   F5..         MOV       ?V1,A
   \   00000C   22           RET
     81          
     82          /* the following should be enough for 16 bit int */
     83          #define PRINT_BUF_LEN 6
     84          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     85          static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
   \                     printi:
     86          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   F8           MOV       R0,A
   \   000010   ED           MOV       A,R5
   \   000011   F9           MOV       R1,A
     87          	char print_buf[PRINT_BUF_LEN];
     88          	register char *s;
     89          	register int t, neg = 0, pc = 0;
   \   000012   C2..         CLR       ?VB.0
   \   000014   75..00       MOV       ?V4,#0x0
     90          	register unsigned int u = i;
   \   000017   7420         MOV       A,#0x20
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V0,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V1,A
   \   000023   7422         MOV       A,#0x22
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   E0           MOVX      A,@DPTR
   \   000029   FE           MOV       R6,A
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   FF           MOV       R7,A
     91          
     92          	if (i == 0) {
   \   00002D   EC           MOV       A,R4
   \   00002E   49           ORL       A,R1
   \   00002F   702E         JNZ       ??printi_0
     93          		print_buf[0] = '0';
   \   000031   85..82       MOV       DPL,?XSP + 0
   \   000034   85..83       MOV       DPH,?XSP + 1
   \   000037   7430         MOV       A,#0x30
   \   000039   F0           MOVX      @DPTR,A
     94          		print_buf[1] = '\0';
   \   00003A   7401         MOV       A,#0x1
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   E4           CLR       A
   \   000040   F0           MOVX      @DPTR,A
     95          		return prints (out, print_buf, width, pad);
   \   000041                ; Setup parameters for call to function prints
   \   000041   8E..         MOV       ?V2,R6
   \   000043   8F..         MOV       ?V3,R7
   \   000045   78..         MOV       R0,#?V2
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   78..         MOV       R0,#?V0
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004F   7404         MOV       A,#0x4
   \   000051   12....       LCALL     ?XSTACK_DISP102_8
   \   000054   12....       LCALL     `??prints::?relay`; Banked call to: prints
   \   000057   7404         MOV       A,#0x4
   \   000059   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005C   02....       LJMP      ??printi_1 & 0xFFFF
     96          	}
   \                     ??printi_0:
   \   00005F   741C         MOV       A,#0x1c
   \   000061   12....       LCALL     ?XSTACK_DISP0_8
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F5..         MOV       ?V8,A
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   F5..         MOV       ?V9,A
     97          
     98          	if (sg && b == 10 && i < 0) {
   \   00006B   741E         MOV       A,#0x1e
   \   00006D   12....       LCALL     ?XSTACK_DISP0_8
   \   000070   E0           MOVX      A,@DPTR
   \   000071   FA           MOV       R2,A
   \   000072   A3           INC       DPTR
   \   000073   E0           MOVX      A,@DPTR
   \   000074   FB           MOV       R3,A
   \   000075   EA           MOV       A,R2
   \   000076   4B           ORL       A,R3
   \   000077   6018         JZ        ??printi_2
   \   000079   740A         MOV       A,#0xa
   \   00007B   65..         XRL       A,?V8
   \   00007D   45..         ORL       A,?V9
   \   00007F   7010         JNZ       ??printi_2
   \   000081   C3           CLR       C
   \   000082   ED           MOV       A,R5
   \   000083   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000086   5009         JNC       ??printi_2
     99          		neg = 1;
   \   000088   D2..         SETB      ?VB.0
    100          		u = -i;
   \   00008A   C3           CLR       C
   \   00008B   E4           CLR       A
   \   00008C   98           SUBB      A,R0
   \   00008D   FC           MOV       R4,A
   \   00008E   E4           CLR       A
   \   00008F   99           SUBB      A,R1
   \   000090   FD           MOV       R5,A
    101          	}
    102          
    103          	s = print_buf + PRINT_BUF_LEN-1;
   \                     ??printi_2:
   \   000091   7405         MOV       A,#0x5
   \   000093   12....       LCALL     ?XSTACK_DISP0_8
   \   000096   8582..       MOV       ?V2,DPL
   \   000099   8583..       MOV       ?V3,DPH
    104          	*s = '\0';
   \   00009C   E4           CLR       A
   \   00009D   F0           MOVX      @DPTR,A
   \   00009E   7424         MOV       A,#0x24
   \   0000A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   F5..         MOV       ?V12,A
   \   0000A6   803D         SJMP      ??printi_3
    105          
    106          	while (u) {
    107          		t = u % b;
   \                     ??printi_4:
   \   0000A8   EC           MOV       A,R4
   \   0000A9   F8           MOV       R0,A
   \   0000AA   ED           MOV       A,R5
   \   0000AB   F9           MOV       R1,A
   \   0000AC   AA..         MOV       R2,?V8
   \   0000AE   AB..         MOV       R3,?V9
   \   0000B0   12....       LCALL     ?US_DIV_MOD
   \   0000B3   8A..         MOV       ?V2,R2
   \   0000B5   A8..         MOV       R0,?V2
    108          		if( t >= 10 )
   \   0000B7   EA           MOV       A,R2
   \   0000B8   940A         SUBB      A,#0xa
   \   0000BA   EB           MOV       A,R3
   \   0000BB   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000BE   4008         JC        ??printi_5
    109          			t += letbase - '0' - 10;
   \   0000C0   E5..         MOV       A,?V12
   \   0000C2   24C6         ADD       A,#-0x3a
   \   0000C4   FA           MOV       R2,A
   \   0000C5   E8           MOV       A,R0
   \   0000C6   2A           ADD       A,R2
   \   0000C7   F8           MOV       R0,A
    110          		*--s = t + '0';
   \                     ??printi_5:
   \   0000C8   8582..       MOV       ?V2,DPL
   \   0000CB   8583..       MOV       ?V3,DPH
   \   0000CE   E8           MOV       A,R0
   \   0000CF   2430         ADD       A,#0x30
   \   0000D1   F0           MOVX      @DPTR,A
    111          		u /= b;
   \   0000D2   EC           MOV       A,R4
   \   0000D3   F8           MOV       R0,A
   \   0000D4   ED           MOV       A,R5
   \   0000D5   F9           MOV       R1,A
   \   0000D6   AA..         MOV       R2,?V8
   \   0000D8   AB..         MOV       R3,?V9
   \   0000DA   12....       LCALL     ?US_DIV_MOD
   \   0000DD   88..         MOV       ?V10,R0
   \   0000DF   89..         MOV       ?V11,R1
   \   0000E1   AC..         MOV       R4,?V10
   \   0000E3   AD..         MOV       R5,?V11
    112          	}
   \                     ??printi_3:
   \   0000E5   E5..         MOV       A,?V2
   \   0000E7   24FF         ADD       A,#-0x1
   \   0000E9   F582         MOV       DPL,A
   \   0000EB   E5..         MOV       A,?V3
   \   0000ED   34FF         ADDC      A,#-0x1
   \   0000EF   F583         MOV       DPH,A
   \   0000F1   EC           MOV       A,R4
   \   0000F2   4D           ORL       A,R5
   \   0000F3   70B3         JNZ       ??printi_4
    113          
    114          	if (neg) {
   \   0000F5   A2..         MOV       C,?VB.0
   \   0000F7   5027         JNC       ??printi_6
    115          		if( width && (pad & PAD_ZERO) ) {
   \   0000F9   E5..         MOV       A,?V0
   \   0000FB   45..         ORL       A,?V1
   \   0000FD   6018         JZ        ??printi_7
   \   0000FF   EE           MOV       A,R6
   \   000100   5402         ANL       A,#0x2
   \   000102   6013         JZ        ??printi_7
    116          			printchar (out, '-');
   \   000104                ; Setup parameters for call to function printchar
   \   000104   7C2D         MOV       R4,#0x2d
   \   000106   7D00         MOV       R5,#0x0
   \   000108   AA..         MOV       R2,?V6
   \   00010A   AB..         MOV       R3,?V7
   \   00010C   12....       LCALL     `??printchar::?relay`; Banked call to: printchar
    117          			++pc;
   \   00010F   75..01       MOV       ?V4,#0x1
    118          			--width;
   \   000112   12....       LCALL     ?Subroutine7 & 0xFFFF
    119          		}
   \                     ??CrossCallReturnLabel_14:
   \   000115   8009         SJMP      ??printi_6
    120          		else {
    121          			*--s = '-';
   \                     ??printi_7:
   \   000117   8582..       MOV       ?V2,DPL
   \   00011A   8583..       MOV       ?V3,DPH
   \   00011D   742D         MOV       A,#0x2d
   \   00011F   F0           MOVX      @DPTR,A
    122          		}
    123          	}
    124          
    125          	return pc + prints (out, s, width, pad);
   \                     ??printi_6:
   \   000120                ; Setup parameters for call to function prints
   \   000120   8E..         MOV       ?V8,R6
   \   000122   8F..         MOV       ?V9,R7
   \   000124   78..         MOV       R0,#?V8
   \   000126   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000129   78..         MOV       R0,#?V0
   \   00012B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012E   AC..         MOV       R4,?V2
   \   000130   AD..         MOV       R5,?V3
   \   000132   AA..         MOV       R2,?V6
   \   000134   AB..         MOV       R3,?V7
   \   000136   12....       LCALL     `??prints::?relay`; Banked call to: prints
   \   000139   7404         MOV       A,#0x4
   \   00013B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00013E   8B..         MOV       ?V1,R3
   \   000140   E5..         MOV       A,?V4
   \   000142   2A           ADD       A,R2
   \   000143   FA           MOV       R2,A
   \   000144   E4           CLR       A
   \   000145   35..         ADDC      A,?V1
   \   000147   FB           MOV       R3,A
   \                     ??printi_1:
   \   000148   7406         MOV       A,#0x6
   \   00014A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00014D   7F0E         MOV       R7,#0xe
   \   00014F   02....       LJMP      ?BANKED_LEAVE_XDATA
    126          }
    127          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    128          static int print(char **out, const char *format, va_list args )
   \                     print:
    129          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
    130          	register int width, pad;
    131          	register int pc = 0;
   \   000012   75..00       MOV       ?V2,#0x0
   \   000015   75..00       MOV       ?V3,#0x0
   \   000018   7414         MOV       A,#0x14
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F5..         MOV       ?V4,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F5..         MOV       ?V5,A
   \   000024   8026         SJMP      ??print_0
    132          	char scr[2];
    133          
    134          	for (; *format != 0; ++format) {
    135          		if (*format == '%') {
    136          			++format;
    137          			width = pad = 0;
    138          			if (*format == '\0') break;
    139          			if (*format == '%') goto out;
    140          			if (*format == '-') {
    141          				++format;
    142          				pad = PAD_RIGHT;
    143          			}
    144          			while (*format == '0') {
    145          				++format;
    146          				pad |= PAD_ZERO;
    147          			}
    148          			for ( ; *format >= '0' && *format <= '9'; ++format) {
    149          				width *= 10;
    150          				width += *format - '0';
    151          			}
    152          			if( *format == 's' ) {
    153          				register char *s = (char *)va_arg( args, int );
    154          				pc += prints (out, s?s:"(null)", width, pad);
    155          				continue;
    156          			}
    157          			if( *format == 'd' ) {
    158          				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
    159          				continue;
    160          			}
    161          			if( *format == 'x' ) {
    162          				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
    163          				continue;
    164          			}
    165          			if( *format == 'X' ) {
    166          				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
    167          				continue;
    168          			}
    169          			if( *format == 'u' ) {
    170          				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
    171          				continue;
    172          			}
    173          			if( *format == 'c' ) {
    174          				/* char are converted to int then pushed on the stack */
    175          				scr[0] = (char)va_arg( args, int );
    176          				scr[1] = '\0';
    177          				pc += prints (out, scr, width, pad);
    178          				continue;
    179          			}
    180          		}
    181          		else {
    182          		out:
    183          			printchar (out, *format);
   \                     ??print_1:
   \   000026                ; Setup parameters for call to function printchar
   \   000026   85..82       MOV       DPL,?V0
   \   000029   85..83       MOV       DPH,?V1
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   FC           MOV       R4,A
   \   00002E   7D00         MOV       R5,#0x0
   \   000030   EE           MOV       A,R6
   \   000031   FA           MOV       R2,A
   \   000032   EF           MOV       A,R7
   \   000033   FB           MOV       R3,A
   \   000034   12....       LCALL     `??printchar::?relay`; Banked call to: printchar
    184          			++pc;
   \   000037   05..         INC       ?V2
   \   000039   E5..         MOV       A,?V2
   \   00003B   7002         JNZ       ??print_2
   \   00003D   05..         INC       ?V3
    185          		}
   \                     ??print_2:
   \   00003F   85..82       MOV       DPL,?V0
   \   000042   85..83       MOV       DPH,?V1
   \   000045   A3           INC       DPTR
   \   000046   8582..       MOV       ?V0,DPL
   \   000049   8583..       MOV       ?V1,DPH
   \                     ??print_0:
   \   00004C   85..82       MOV       DPL,?V0
   \   00004F   85..83       MOV       DPH,?V1
   \   000052   E0           MOVX      A,@DPTR
   \   000053   F8           MOV       R0,A
   \   000054   7003         JNZ       $+5
   \   000056   02....       LJMP      ??print_3 & 0xFFFF
   \   000059   7425         MOV       A,#0x25
   \   00005B   68           XRL       A,R0
   \   00005C   70C8         JNZ       ??print_1
   \   00005E   A3           INC       DPTR
   \   00005F   8582..       MOV       ?V0,DPL
   \   000062   8583..       MOV       ?V1,DPH
   \   000065   7C00         MOV       R4,#0x0
   \   000067   7D00         MOV       R5,#0x0
   \   000069   7A00         MOV       R2,#0x0
   \   00006B   7B00         MOV       R3,#0x0
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   F8           MOV       R0,A
   \   00006F   7003         JNZ       $+5
   \   000071   02....       LJMP      ??print_3 & 0xFFFF
   \   000074   7425         MOV       A,#0x25
   \   000076   68           XRL       A,R0
   \   000077   60AD         JZ        ??print_1
   \   000079   742D         MOV       A,#0x2d
   \   00007B   68           XRL       A,R0
   \   00007C   7015         JNZ       ??print_4
   \   00007E   A3           INC       DPTR
   \   00007F   8582..       MOV       ?V0,DPL
   \   000082   8583..       MOV       ?V1,DPH
   \   000085   0C           INC       R4
   \   000086   800B         SJMP      ??print_4
   \                     ??print_5:
   \   000088   A3           INC       DPTR
   \   000089   8582..       MOV       ?V0,DPL
   \   00008C   8583..       MOV       ?V1,DPH
   \   00008F   7402         MOV       A,#0x2
   \   000091   4C           ORL       A,R4
   \   000092   FC           MOV       R4,A
   \                     ??print_4:
   \   000093   85..82       MOV       DPL,?V0
   \   000096   85..83       MOV       DPH,?V1
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   6430         XRL       A,#0x30
   \   00009C   60EA         JZ        ??print_5
   \                     ??print_6:
   \   00009E   85..82       MOV       DPL,?V0
   \   0000A1   85..83       MOV       DPH,?V1
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   F8           MOV       R0,A
   \   0000A6   74D0         MOV       A,#-0x30
   \   0000A8   28           ADD       A,R0
   \   0000A9   C3           CLR       C
   \   0000AA   940A         SUBB      A,#0xa
   \   0000AC   5026         JNC       ??print_7
   \   0000AE   EA           MOV       A,R2
   \   0000AF   75F00A       MOV       B,#0xa
   \   0000B2   A4           MUL       AB
   \   0000B3   FA           MOV       R2,A
   \   0000B4   A9F0         MOV       R1,B
   \   0000B6   75F00A       MOV       B,#0xa
   \   0000B9   EB           MOV       A,R3
   \   0000BA   A4           MUL       AB
   \   0000BB   29           ADD       A,R1
   \   0000BC   FB           MOV       R3,A
   \   0000BD   EA           MOV       A,R2
   \   0000BE   28           ADD       A,R0
   \   0000BF   F8           MOV       R0,A
   \   0000C0   E4           CLR       A
   \   0000C1   3B           ADDC      A,R3
   \   0000C2   F9           MOV       R1,A
   \   0000C3   E8           MOV       A,R0
   \   0000C4   24D0         ADD       A,#-0x30
   \   0000C6   FA           MOV       R2,A
   \   0000C7   E9           MOV       A,R1
   \   0000C8   34FF         ADDC      A,#-0x1
   \   0000CA   FB           MOV       R3,A
   \   0000CB   A3           INC       DPTR
   \   0000CC   8582..       MOV       ?V0,DPL
   \   0000CF   8583..       MOV       ?V1,DPH
   \   0000D2   80CA         SJMP      ??print_6
   \                     ??print_7:
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   F8           MOV       R0,A
   \   0000D6   7473         MOV       A,#0x73
   \   0000D8   68           XRL       A,R0
   \   0000D9   7064         JNZ       ??print_8
   \   0000DB   85..82       MOV       DPL,?V4
   \   0000DE   85..83       MOV       DPH,?V5
   \   0000E1   E0           MOVX      A,@DPTR
   \   0000E2   F8           MOV       R0,A
   \   0000E3   A3           INC       DPTR
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   F9           MOV       R1,A
   \   0000E6   8882         MOV       DPL,R0
   \   0000E8   F583         MOV       DPH,A
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   F5..         MOV       ?V6,A
   \   0000ED   A3           INC       DPTR
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   F5..         MOV       ?V7,A
   \   0000F1   E8           MOV       A,R0
   \   0000F2   2402         ADD       A,#0x2
   \   0000F4   5001         JNC       ??print_9
   \   0000F6   09           INC       R1
   \                     ??print_9:
   \   0000F7   85..82       MOV       DPL,?V4
   \   0000FA   85..83       MOV       DPH,?V5
   \   0000FD   F0           MOVX      @DPTR,A
   \   0000FE   A3           INC       DPTR
   \   0000FF   E9           MOV       A,R1
   \   000100   F0           MOVX      @DPTR,A
   \   000101   E5..         MOV       A,?V6
   \   000103   45..         ORL       A,?V7
   \   000105   7006         JNZ       ??print_10
   \   000107   75....       MOV       ?V6,#`?<Constant "(null)">` & 0xff
   \   00010A   75....       MOV       ?V7,#(`?<Constant "(null)">` >> 8) & 0xff
   \                     ??print_10:
   \   00010D                ; Setup parameters for call to function prints
   \   00010D   8C..         MOV       ?V8,R4
   \   00010F   8D..         MOV       ?V9,R5
   \   000111   78..         MOV       R0,#?V8
   \   000113   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000116   8A..         MOV       ?V8,R2
   \   000118   8B..         MOV       ?V9,R3
   \   00011A   78..         MOV       R0,#?V8
   \   00011C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011F   AC..         MOV       R4,?V6
   \   000121   AD..         MOV       R5,?V7
   \                     ??print_11:
   \   000123   EE           MOV       A,R6
   \   000124   FA           MOV       R2,A
   \   000125   EF           MOV       A,R7
   \   000126   FB           MOV       R3,A
   \   000127   12....       LCALL     `??prints::?relay`; Banked call to: prints
   \   00012A   7404         MOV       A,#0x4
   \   00012C   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??print_12:
   \   00012F   8B..         MOV       ?V7,R3
   \   000131   E5..         MOV       A,?V2
   \   000133   2A           ADD       A,R2
   \   000134   F5..         MOV       ?V2,A
   \   000136   E5..         MOV       A,?V3
   \   000138   35..         ADDC      A,?V7
   \   00013A   F5..         MOV       ?V3,A
   \   00013C   02....       LJMP      ??print_2 & 0xFFFF
   \                     ??print_8:
   \   00013F   7464         MOV       A,#0x64
   \   000141   68           XRL       A,R0
   \   000142   7041         JNZ       ??print_13
   \   000144   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000147   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014A   8C..         MOV       ?V8,R4
   \   00014C   78..         MOV       R0,#?V8
   \   00014E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000151   8A..         MOV       ?V8,R2
   \   000153   8B..         MOV       ?V9,R3
   \   000155   78..         MOV       R0,#?V8
   \   000157   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00015A   75..01       MOV       ?V8,#0x1
   \   00015D   8D..         MOV       ?V9,R5
   \                     ??print_14:
   \   00015F   78..         MOV       R0,#?V8
   \   000161   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000164   75..0A       MOV       ?V8,#0xa
   \                     ??print_15:
   \   000167   78..         MOV       R0,#?V8
   \   000169   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00016C   85..82       MOV       DPL,?V6
   \   00016F   85..83       MOV       DPH,?V7
   \   000172   E0           MOVX      A,@DPTR
   \   000173   FC           MOV       R4,A
   \   000174   A3           INC       DPTR
   \   000175   E0           MOVX      A,@DPTR
   \   000176   FD           MOV       R5,A
   \   000177   EE           MOV       A,R6
   \   000178   FA           MOV       R2,A
   \   000179   EF           MOV       A,R7
   \   00017A   FB           MOV       R3,A
   \   00017B   12....       LCALL     `??printi::?relay`; Banked call to: printi
   \   00017E   740A         MOV       A,#0xa
   \   000180   12....       LCALL     ?DEALLOC_XSTACK8
   \   000183   80AA         SJMP      ??print_12
   \                     ??print_13:
   \   000185   7478         MOV       A,#0x78
   \   000187   68           XRL       A,R0
   \   000188   702C         JNZ       ??print_16
   \   00018A   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00018D                ; Setup parameters for call to function printi
   \   00018D   75..61       MOV       ?V8,#0x61
   \                     ??print_17:
   \   000190   8D..         MOV       ?V9,R5
   \   000192   78..         MOV       R0,#?V8
   \   000194   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000197   8C..         MOV       ?V8,R4
   \   000199   78..         MOV       R0,#?V8
   \   00019B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00019E   8A..         MOV       ?V8,R2
   \   0001A0   8B..         MOV       ?V9,R3
   \   0001A2   78..         MOV       R0,#?V8
   \   0001A4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A7   E4           CLR       A
   \   0001A8   F5..         MOV       ?V8,A
   \   0001AA   F5..         MOV       ?V9,A
   \   0001AC   78..         MOV       R0,#?V8
   \   0001AE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B1   75..10       MOV       ?V8,#0x10
   \   0001B4   80B1         SJMP      ??print_15
   \                     ??print_16:
   \   0001B6   7458         MOV       A,#0x58
   \   0001B8   68           XRL       A,R0
   \   0001B9   7008         JNZ       ??print_18
   \   0001BB   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0001BE                ; Setup parameters for call to function printi
   \   0001BE   75..41       MOV       ?V8,#0x41
   \   0001C1   80CD         SJMP      ??print_17
   \                     ??print_18:
   \   0001C3   7475         MOV       A,#0x75
   \   0001C5   68           XRL       A,R0
   \   0001C6   701E         JNZ       ??print_19
   \   0001C8   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0001CB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001CE   8C..         MOV       ?V8,R4
   \   0001D0   78..         MOV       R0,#?V8
   \   0001D2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001D5   8A..         MOV       ?V8,R2
   \   0001D7   8B..         MOV       ?V9,R3
   \   0001D9   78..         MOV       R0,#?V8
   \   0001DB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001DE   E4           CLR       A
   \   0001DF   F5..         MOV       ?V8,A
   \   0001E1   F5..         MOV       ?V9,A
   \   0001E3   02....       LJMP      ??print_14 & 0xFFFF
   \                     ??print_19:
   \   0001E6   7463         MOV       A,#0x63
   \   0001E8   68           XRL       A,R0
   \   0001E9   6003         JZ        $+5
   \   0001EB   02....       LJMP      ??print_2 & 0xFFFF
   \   0001EE   85..82       MOV       DPL,?V4
   \   0001F1   85..83       MOV       DPH,?V5
   \   0001F4   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0001F7   E0           MOVX      A,@DPTR
   \   0001F8   85..82       MOV       DPL,?XSP + 0
   \   0001FB   85..83       MOV       DPH,?XSP + 1
   \   0001FE   F0           MOVX      @DPTR,A
   \   0001FF   85..82       MOV       DPL,?V4
   \   000202   85..83       MOV       DPH,?V5
   \   000205   E0           MOVX      A,@DPTR
   \   000206   2402         ADD       A,#0x2
   \   000208   F8           MOV       R0,A
   \   000209   A3           INC       DPTR
   \   00020A   E0           MOVX      A,@DPTR
   \   00020B   3400         ADDC      A,#0x0
   \   00020D   F9           MOV       R1,A
   \   00020E   85..82       MOV       DPL,?V4
   \   000211   85..83       MOV       DPH,?V5
   \   000214   E8           MOV       A,R0
   \   000215   F0           MOVX      @DPTR,A
   \   000216   A3           INC       DPTR
   \   000217   E9           MOV       A,R1
   \   000218   F0           MOVX      @DPTR,A
   \   000219   7401         MOV       A,#0x1
   \   00021B   12....       LCALL     ?XSTACK_DISP0_8
   \   00021E   E4           CLR       A
   \   00021F   F0           MOVX      @DPTR,A
   \   000220                ; Setup parameters for call to function prints
   \   000220   8C..         MOV       ?V6,R4
   \   000222   8D..         MOV       ?V7,R5
   \   000224   78..         MOV       R0,#?V6
   \   000226   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000229   8A..         MOV       ?V6,R2
   \   00022B   8B..         MOV       ?V7,R3
   \   00022D   78..         MOV       R0,#?V6
   \   00022F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000232   7404         MOV       A,#0x4
   \   000234   12....       LCALL     ?XSTACK_DISP102_8
   \   000237   02....       LJMP      ??print_11 & 0xFFFF
    186          	}
    187          	if (out) **out = '\0';
   \                     ??print_3:
   \   00023A   EE           MOV       A,R6
   \   00023B   4F           ORL       A,R7
   \   00023C   6009         JZ        ??print_20
   \   00023E   8E82         MOV       DPL,R6
   \   000240   8F83         MOV       DPH,R7
   \   000242   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000245   E4           CLR       A
   \   000246   F0           MOVX      @DPTR,A
    188          	va_end( args );
    189          	return pc;
   \                     ??print_20:
   \   000247   AA..         MOV       R2,?V2
   \   000249   AB..         MOV       R3,?V3
   \   00024B   7402         MOV       A,#0x2
   \   00024D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000250   7F0A         MOV       R7,#0xa
   \   000252   02....       LJMP      ?BANKED_LEAVE_XDATA
    190          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F8           MOV       R0,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   88..         MOV       ?V6,R0
   \   00000C   F5..         MOV       ?V7,A
   \   00000E   E8           MOV       A,R0
   \   00000F   2402         ADD       A,#0x2
   \   000011   F8           MOV       R0,A
   \   000012   E4           CLR       A
   \   000013   35..         ADDC      A,?V7
   \   000015   F9           MOV       R1,A
   \   000016   85..82       MOV       DPL,?V4
   \   000019   85..83       MOV       DPH,?V5
   \   00001C   E8           MOV       A,R0
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   A3           INC       DPTR
   \   00001F   E9           MOV       A,R1
   \   000020   F0           MOVX      @DPTR,A
   \   000021   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000003                ; Setup parameters for call to function printi
   \   000003                ; Setup parameters for call to function printi
   \   000003   75..61       MOV       ?V8,#0x61
   \   000006   8D..         MOV       ?V9,R5
   \   000008   78..         MOV       R0,#?V8
   \   00000A   22           RET
    191          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    192          int printf(const char *format, ...)
   \                     printf:
    193          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    194                  va_list args;
    195                  
    196                  va_start( args, format );
   \   00000A   740C         MOV       A,#0xc
   \   00000C   12....       LCALL     ?XSTACK_DISP100_8
   \   00000F   12....       LCALL     ?Subroutine5 & 0xFFFF
    197                  return print( 0, format, args );
   \                     ??CrossCallReturnLabel_7:
   \   000012   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000015   EA           MOV       A,R2
   \   000016   FC           MOV       R4,A
   \   000017   EB           MOV       A,R3
   \   000018   FD           MOV       R5,A
   \   000019   7A00         MOV       R2,#0x0
   \   00001B   7B00         MOV       R3,#0x0
   \   00001D   12....       LCALL     `??print::?relay`; Banked call to: print
   \   000020   7402         MOV       A,#0x2
   \   000022   12....       LCALL     ?DEALLOC_XSTACK8
   \   000025   7402         MOV       A,#0x2
   \   000027                REQUIRE ?Subroutine1
   \   000027                ; // Fall through to label ?Subroutine1
    198          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F02         MOV       R7,#0x2
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E8           MOV       A,R0
   \   000007   F0           MOVX      @DPTR,A
   \   000008   A3           INC       DPTR
   \   000009   E9           MOV       A,R1
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B                ; Setup parameters for call to function print
   \   00000B                ; Setup parameters for call to function print
   \   00000B   A8..         MOV       R0,?XSP + 0
   \   00000D   A9..         MOV       R1,?XSP + 1
   \   00000F   88..         MOV       ?V0,R0
   \   000011   89..         MOV       ?V1,R1
   \   000013   78..         MOV       R0,#?V0
   \   000015   22           RET
    199          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    200          int sprintf(char *out, const char *format, ...)
   \                     sprintf:
    201          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
    202                  va_list args;
    203                  
    204                  va_start( args, format );
   \   000014   740E         MOV       A,#0xe
   \   000016   12....       LCALL     ?XSTACK_DISP100_8
   \   000019   12....       LCALL     ?Subroutine5 & 0xFFFF
    205                  return print( &out, format, args );
   \                     ??CrossCallReturnLabel_8:
   \   00001C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001F   7404         MOV       A,#0x4
   \   000021   12....       LCALL     ?XSTACK_DISP101_8
   \   000024   12....       LCALL     `??print::?relay`; Banked call to: print
   \   000027   7402         MOV       A,#0x2
   \   000029   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002C   7404         MOV       A,#0x4
   \   00002E   80..         SJMP      ?Subroutine1
    206          }

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "(null)">`:
   \   000000   286E756C     DB "(null)"
   \            6C2900  
    207          
    208          #ifdef TEST_PRINTF
    209          int main(void)
    210          {
    211          	char *ptr = "Hello world!";
    212          	char *np = 0;
    213          	int i = 5;
    214          	unsigned int bs = sizeof(int)*8;
    215          	int mi;
    216          	//char buf[80];
    217          
    218          	mi = (1 << (bs-1)) + 1;
    219          	printf("%s\n", ptr);
    220          	printf("printf test\n");
    221          	printf("%s is null pointer\n", np);
    222          	printf("%d = 5\n", i);
    223          	printf("%d = - max int\n", mi);
    224          	printf("char %c = 'a'\n", 'a');
    225          	printf("hex %x = ff\n", 0xff);
    226          	printf("hex %02x = 00\n", 0);
    227          	printf("signed %d = unsigned %u = hex %x\n", -3, -3, -3);
    228          	printf("%d %s(s)%", 0, "message");
    229          	printf("\n");
    230          	printf("%d %s(s) with %%\n", 0, "message");
    231          	sprintf(buf, "justif: \"%-10s\"\n", "left"); printf("%s", buf);
    232          	sprintf(buf, "justif: \"%10s\"\n", "right"); printf("%s", buf);
    233          	sprintf(buf, " 3: %04d zero padded\n", 3); printf("%s", buf);
    234          	sprintf(buf, " 3: %-4d left justif.\n", 3); printf("%s", buf);
    235          	sprintf(buf, " 3: %4d right justif.\n", 3); printf("%s", buf);
    236          	sprintf(buf, "-3: %04d zero padded\n", -3); printf("%s", buf);
    237          	sprintf(buf, "-3: %-4d left justif.\n", -3); printf("%s", buf);
    238          	sprintf(buf, "-3: %4d right justif.\n", -3); printf("%s", buf);
    239          
    240          	return 0;
    241          }
    242          
    243          /*
    244           * if you compile this file with
    245           *   gcc -Wall $(YOUR_C_OPTIONS) -DTEST_PRINTF -c printf.c
    246           * you will get a normal warning:
    247           *   printf.c:214: warning: spurious trailing `%' in format
    248           * this line is testing an invalid % at the end of the format string.
    249           *
    250           * this should display (on 32bit int machine) :
    251           *
    252           * Hello world!
    253           * printf test
    254           * (null) is null pointer
    255           * 5 = 5
    256           * -2147483647 = - max int
    257           * char a = 'a'
    258           * hex ff = ff
    259           * hex 00 = 00
    260           * signed -3 = unsigned 4294967293 = hex fffffffd
    261           * 0 message(s)
    262           * 0 message(s) with %
    263           * justif: "left      "
    264           * justif: "     right"
    265           *  3: 0003 zero padded
    266           *  3: 3    left justif.
    267           *  3:    3 right justif.
    268           * -3: -003 zero padded
    269           * -3: -3   left justif.
    270           * -3:   -3 right justif.
    271           */
    272          
    273          #endif

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     46   print
        0     20   -> printchar
        0     30   -> printi
        0     24   -> prints
      3     28   printchar
        2      0   -> putchar
      0     14   printf
        0     14   -> print
      1     62   printi
        0     28   -> printchar
        0     32   -> prints
      0     48   prints
        0     16   -> printchar
      3      1   putchar
        2      1   -> HalUARTWrite
      0     16   sprintf
        0     16   -> print


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?<Constant "(null)">
       7  ?Subroutine0
       8  ?Subroutine1
      11  ?Subroutine2
       4  ?Subroutine3
      11  ?Subroutine4
      22  ?Subroutine5
       9  ?Subroutine6
      13  ?Subroutine7
      34  ?Subroutine8
       8  ?Subroutine9
     597  print
      48  printchar
      39  printf
     338  printi
     207  prints
      35  putchar
      48  sprintf
      42  -- Other

 
 1 439 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
     7 bytes in segment XDATA_ROM_C
 
    42 bytes of CODE     memory
     7 bytes of CONST    memory
 1 439 bytes of HUGECODE memory

Errors: none
Warnings: none
