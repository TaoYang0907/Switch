###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               21/Jul/2020  23:54:58
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EW4B20.tmp ("D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c"
#        -D BDB_REPORTING -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D
#        xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_GROUPS -D ZCL_REPORT -D ZCL_REPORTING_DEVICE -D
#        ZCL_REPORT_DESTINATION_DEVICE -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\zcl_samplesw.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj\zcl_samplesw.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c
      1          /**************************************************************************************************
      2            Filename:       zcl_samplesw.c
      3            Revised:        $Date: 2015-08-19 17:11:00 -0700 (Wed, 19 Aug 2015) $
      4            Revision:       $Revision: 44460 $
      5          
      6            Description:    Zigbee Cluster Library - sample switch application.
      7          
      8          
      9            Copyright 2006-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application implements a ZigBee On/Off Switch, based on Z-Stack 3.0.
     42          
     43            This application is based on the common sample-application user interface. Please see the main
     44            comment in zcl_sampleapp_ui.c. The rest of this comment describes only the content specific for
     45            this sample applicetion.
     46            
     47            Application-specific UI peripherals being used:
     48          
     49            - none (LED1 is currently unused by this application).
     50          
     51            Application-specific menu system:
     52          
     53              <TOGGLE LIGHT> Send an On, Off or Toggle command targeting appropriate devices from the binding table.
     54                Pressing / releasing [OK] will have the following functionality, depending on the value of the 
     55                zclSampleSw_OnOffSwitchActions attribute:
     56                - OnOffSwitchActions == 0: pressing [OK] will send ON command, releasing it will send OFF command;
     57                - OnOffSwitchActions == 1: pressing [OK] will send OFF command, releasing it will send ON command;
     58                - OnOffSwitchActions == 2: pressing [OK] will send TOGGLE command, releasing it will not send any command.
     59          
     60          *********************************************************************/
     61          
     62          #if ! defined ZCL_ON_OFF
     63          #error ZCL_ON_OFF must be defined for this project.
     64          #endif
     65          
     66          /*********************************************************************
     67           * INCLUDES
     68           */
     69          #include "ZComDef.h"
     70          #include "OSAL.h"
     71          #include "AF.h"
     72          #include "ZDApp.h"
     73          #include "ZDObject.h"
     74          #include "ZDProfile.h"
     75          #include "MT_SYS.h"
     76          
     77          #include "zcl.h"
     78          #include "zcl_general.h"
     79          #include "zcl_ha.h"
     80          #include "zcl_samplesw.h"
     81          #include "zcl_diagnostic.h"
     82          
     83          #include "onboard.h"
     84          
     85          /* HAL */
     86          #include "hal_lcd.h"
     87          #include "hal_led.h"
     88          #include "hal_key.h"
     89          
     90          /* UART */
     91          #include "uart0.h"
     92          #include "user_printf.h"
     93          
     94          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
     95          #include "zcl_ota.h"
     96          #include "hal_ota.h"
     97          #endif
     98          
     99          #include "bdb.h"
    100          #include "bdb_interface.h"
    101          
    102          
    103          /*********************************************************************
    104           * MACROS
    105           */
    106          
    107          #define APP_TITLE "TI Sample Switch"
    108          
    109          /*********************************************************************
    110           * TYPEDEFS
    111           */
    112          
    113          /*********************************************************************
    114           * GLOBAL VARIABLES
    115           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    116          byte zclSampleSw_TaskID;
   \                     zclSampleSw_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    117          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          uint8 zclSampleSwSeqNum;
   \                     zclSampleSwSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    119          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    120          uint8 zclSampleSw_OnOffSwitchType = ON_OFF_SWITCH_TYPE_MOMENTARY;
   \                     zclSampleSw_OnOffSwitchType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleSw_OnOffSwitchType>`
   \   000001                REQUIRE __INIT_XDATA_I
    121          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    122          uint8 zclSampleSw_OnOffSwitchActions;
   \                     zclSampleSw_OnOffSwitchActions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    123          
    124          /*********************************************************************
    125           * GLOBAL FUNCTIONS
    126           */
    127          
    128          /*********************************************************************
    129           * LOCAL VARIABLES
    130           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          afAddrType_t zclSampleSw_DstAddr;
   \                     zclSampleSw_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          afAddrType_t SW_DstAddr;
   \                     SW_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    133          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          uint16 SourceAddr;
   \                     SourceAddr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    135          // Endpoint to allow SYS_APP_MSGs
    136          
    137          //static uint8 aProcessCmd[] = { 1, 0, 0, 0 }; // used for reset command, { length + cmd0 + cmd1 + data }
    138          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    139          devStates_t zclSampleSw_NwkState = DEV_INIT;
   \                     zclSampleSw_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleSw_NwkState>`
   \   000001                REQUIRE __INIT_XDATA_I
    140          
    141          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    142          #define DEVICE_POLL_RATE                 8000   // Poll rate for end device
    143          #endif
    144          
    145          #define SAMPLESW_TOGGLE_TEST_EVT   0x1000
    146          /*********************************************************************
    147           * LOCAL FUNCTIONS
    148           */
    149          static void Send_To_SW1( void );
    150          static void Send_To_SW2( void );
    151          static void Send_To_SW3( void );
    152          
    153          static void zclSampleSw_HandleKeys( byte shift, byte keys );
    154          static void zclSampleSw_BasicResetCB( void );
    155          
    156          static void zclSampleSw_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg);
    157          
    158          
    159          // Functions to process ZCL Foundation incoming Command/Response messages
    160          static void zclSampleSw_ProcessInReportCmd( zclIncomingMsg_t *pInMsg );
    161          
    162          static void zclSampleSw_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    163          #ifdef ZCL_READ
    164          static uint8 zclSampleSw_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    165          #endif
    166          #ifdef ZCL_WRITE
    167          static uint8 zclSampleSw_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    168          #endif
    169          static uint8 zclSampleSw_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    170          #ifdef ZCL_DISCOVER
    171          static uint8 zclSampleSw_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    172          static uint8 zclSampleSw_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    173          static uint8 zclSampleSw_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    174          #endif
    175          
    176          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    177          static void zclSampleSw_ProcessOTAMsgs( zclOTA_CallbackMsg_t* pMsg );
    178          #endif
    179          
    180          
    181          static void zclSampleApp_BatteryWarningCB( uint8 voltLevel);
    182          
    183          
    184          /*********************************************************************
    185           * CONSTANTS
    186           */
    187          
    188            
    189          /*********************************************************************
    190           * REFERENCED EXTERNALS
    191           */
    192          extern int16 zdpExternalStateTaskID;
    193          
    194          /*********************************************************************
    195           * ZCL General Profile Callback table
    196           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    197          static zclGeneral_AppCallbacks_t zclSampleSw_CmdCallbacks =
   \                     zclSampleSw_CmdCallbacks:
   \   000000                DS 18
   \   000012                REQUIRE `?<Initializer for zclSampleSw_CmdCallbacks>`
   \   000012                REQUIRE __INIT_XDATA_I
    198          {
    199            zclSampleSw_BasicResetCB,               // Basic Cluster Reset command
    200            NULL,                                   // Identify Trigger Effect command
    201            NULL,                                   // On/Off cluster commands
    202            NULL,                                   // On/Off cluster enhanced command Off with Effect
    203            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    204            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    205          #ifdef ZCL_LEVEL_CTRL
    206            NULL,                                   // Level Control Move to Level command
    207            NULL,                                   // Level Control Move command
    208            NULL,                                   // Level Control Step command
    209            NULL,                                   // Level Control Stop command
    210          #endif
    211          #ifdef ZCL_GROUPS
    212            NULL,                                   // Group Response commands
    213          #endif
    214          #ifdef ZCL_SCENES
    215            NULL,                                   // Scene Store Request command
    216            NULL,                                   // Scene Recall Request command
    217            NULL,                                   // Scene Response command
    218          #endif
    219          #ifdef ZCL_ALARMS
    220            NULL,                                   // Alarm (Response) commands
    221          #endif
    222          #ifdef SE_UK_EXT
    223            NULL,                                   // Get Event Log command
    224            NULL,                                   // Publish Event Log command
    225          #endif
    226            NULL,                                   // RSSI Location command
    227            NULL                                    // RSSI Location Response command
    228          };
    229          
    230          /*********************************************************************
    231           * @fn          zclSampleSw_Init
    232           *
    233           * @brief       Initialization function for the zclGeneral layer.
    234           *
    235           * @param       none
    236           *
    237           * @return      none
    238           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    239          void zclSampleSw_Init( byte task_id )
   \                     zclSampleSw_Init:
    240          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    241            zclSampleSw_TaskID = task_id;
   \   000006   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000009   F0           MOVX      @DPTR,A
    242          
    243            // Set destination address to indirect
    244            zclSampleSw_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000A   90....       MOV       DPTR,#zclSampleSw_DstAddr + 8
   \   00000D   E4           CLR       A
   \   00000E   F0           MOVX      @DPTR,A
    245            zclSampleSw_DstAddr.endPoint = 0;
   \   00000F   A3           INC       DPTR
   \   000010   F0           MOVX      @DPTR,A
    246            zclSampleSw_DstAddr.addr.shortAddr = 0;
   \   000011   90....       MOV       DPTR,#zclSampleSw_DstAddr
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   F0           MOVX      @DPTR,A
    247          
    248            //Initialize the Uart0
    249            Uart0_Init(HAL_UART_BR_115200);
   \   000017                ; Setup parameters for call to function Uart0_Init
   \   000017   7904         MOV       R1,#0x4
   \   000019   12....       LCALL     `??Uart0_Init::?relay`; Banked call to: Uart0_Init
    250          
    251            // Register the Uart0
    252            RegisterForUart0( zclSampleSw_TaskID );
   \   00001C                ; Setup parameters for call to function RegisterForUart0
   \   00001C   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F9           MOV       R1,A
   \   000021   12....       LCALL     `??RegisterForUart0::?relay`; Banked call to: RegisterForUart0
    253          
    254            // Register the Simple Descriptor for this application
    255            bdb_RegisterSimpleDescriptor( &zclSampleSw_SimpleDesc );
   \   000024                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   000024   7A..         MOV       R2,#zclSampleSw_SimpleDesc & 0xff
   \   000026   7B..         MOV       R3,#(zclSampleSw_SimpleDesc >> 8) & 0xff
   \   000028   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    256          
    257            // Register the ZCL General Cluster Library callback functions
    258            zclGeneral_RegisterCmdCallbacks( SW1_ENDPOINT, &zclSampleSw_CmdCallbacks );
   \   00002B                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   00002B   7A..         MOV       R2,#zclSampleSw_CmdCallbacks & 0xff
   \   00002D   7B..         MOV       R3,#(zclSampleSw_CmdCallbacks >> 8) & 0xff
   \   00002F   7908         MOV       R1,#0x8
   \   000031   12....       LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    259          
    260            zclSampleSw_ResetAttributesToDefaultValues();
   \   000034                ; Setup parameters for call to function zclSampleSw_ResetAttributesToDefaultValues
   \   000034   12....       LCALL     `??zclSampleSw_ResetAttributesToDefaultValues::?`; Banked call to: zclSampleSw_ResetAttributesToDefaultValues
    261            
    262            // Register the application's attribute list
    263            zcl_registerAttrList( SW1_ENDPOINT, zclSampleSw_NumAttributes, zclSampleSw_Attrs );
   \   000037                ; Setup parameters for call to function zcl_registerAttrList
   \   000037   7C..         MOV       R4,#zclSampleSw_Attrs & 0xff
   \   000039   7D..         MOV       R5,#(zclSampleSw_Attrs >> 8) & 0xff
   \   00003B   90....       MOV       DPTR,#zclSampleSw_NumAttributes
   \   00003E   E4           CLR       A
   \   00003F   93           MOVC      A,@A+DPTR
   \   000040   FA           MOV       R2,A
   \   000041   7908         MOV       R1,#0x8
   \   000043   12....       LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    264            
    265            // Register the Application to receive the unprocessed Foundation command/response messages
    266            zcl_registerForMsg( zclSampleSw_TaskID );
   \   000046                ; Setup parameters for call to function zcl_registerForMsg
   \   000046   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   F9           MOV       R1,A
   \   00004B   12....       LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    267            
    268            // Register low voltage NV memory protection application callback
    269            RegisterVoltageWarningCB( zclSampleApp_BatteryWarningCB );
   \   00004E                ; Setup parameters for call to function RegisterVoltageWarningCB
   \   00004E   7A..         MOV       R2,#`??zclSampleApp_BatteryWarningCB::?relay` & 0xff
   \   000050   7B..         MOV       R3,#(`??zclSampleApp_BatteryWarningCB::?relay` >> 8) & 0xff
   \   000052   12....       LCALL     `??RegisterVoltageWarningCB::?relay`; Banked call to: RegisterVoltageWarningCB
    270          
    271            // Register for all key events - This app will handle all key events
    272            RegisterForKeys( zclSampleSw_TaskID );
   \   000055                ; Setup parameters for call to function RegisterForKeys
   \   000055   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000058   E0           MOVX      A,@DPTR
   \   000059   F9           MOV       R1,A
   \   00005A   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    273            
    274            bdb_RegisterCommissioningStatusCB( zclSampleSw_ProcessCommissioningStatus );
   \   00005D                ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
   \   00005D   7A..         MOV       R2,#`??zclSampleSw_ProcessCommissioningStatus::?rela` & 0xff
   \   00005F   7B..         MOV       R3,#(`??zclSampleSw_ProcessCommissioningStatus::?rela` >> 8) & 0xff
   \   000061   12....       LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
    275            
    276          #ifdef ZCL_DIAGNOSTIC
    277            // Register the application's callback function to read/write attribute data.
    278            // This is only required when the attribute data format is unknown to ZCL.
    279            zcl_registerReadWriteCB( SAMPLESW_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
    280          
    281            if ( zclDiagnostic_InitStats() == ZSuccess )
    282            {
    283              // Here the user could start the timer to save Diagnostics to NV
    284            }
    285          #endif
    286          
    287          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    288            // Register for callback events from the ZCL OTA
    289            zclOTA_Register(zclSampleSw_TaskID);
    290          #endif
    291          
    292            zdpExternalStateTaskID = zclSampleSw_TaskID;
   \   000064   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000067   E0           MOVX      A,@DPTR
   \   000068   90....       MOV       DPTR,#zdpExternalStateTaskID
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   A3           INC       DPTR
   \   00006D   E4           CLR       A
   \   00006E   F0           MOVX      @DPTR,A
    293          
    294            printf("init successful\r\n");
   \   00006F                ; Setup parameters for call to function printf
   \   00006F   7A..         MOV       R2,#`?<Constant "init successful\\r\\n">` & 0xff
   \   000071   7B..         MOV       R3,#(`?<Constant "init successful\\r\\n">` >> 8) & 0xff
   \   000073   12....       LCALL     `??printf::?relay`; Banked call to: printf
    295          }
   \   000076                REQUIRE ?Subroutine0
   \   000076                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    296          
    297          /*********************************************************************
    298           * @fn          zclSample_event_loop
    299           *
    300           * @brief       Event Loop Processor for zclGeneral.
    301           *
    302           * @param       none
    303           *
    304           * @return      none
    305           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    306          uint16 zclSampleSw_event_loop( uint8 task_id, uint16 events )
   \                     zclSampleSw_event_loop:
    307          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    308            afIncomingMSGPacket_t *MSGpkt;
    309            (void)task_id;  // Intentionally unreferenced parameter
    310          
    311            //Send toggle every 500ms
    312            if( events & SAMPLESW_TOGGLE_TEST_EVT )
   \   000009   5410         ANL       A,#0x10
   \   00000B   6063         JZ        ??zclSampleSw_event_loop_0
    313            {
    314              osal_start_timerEx(zclSampleSw_TaskID,SAMPLESW_TOGGLE_TEST_EVT,500);
   \   00000D                ; Setup parameters for call to function osal_start_timerEx
   \   00000D   90....       MOV       DPTR,#__Constant_1f4
   \   000010   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000013   7A00         MOV       R2,#0x0
   \   000015   7B10         MOV       R3,#0x10
   \   000017   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F9           MOV       R1,A
   \   00001C   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00001F   7404         MOV       A,#0x4
   \   000021   12....       LCALL     ?DEALLOC_XSTACK8
    315              zclGeneral_SendOnOff_CmdToggle( SW1_ENDPOINT, &zclSampleSw_DstAddr, FALSE, 0 );
   \   000024                ; Setup parameters for call to function zcl_SendCommand
   \   000024   E4           CLR       A
   \   000025   F5..         MOV       ?V0,A
   \   000027   F5..         MOV       ?V1,A
   \   000029   78..         MOV       R0,#?V0
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   78..         MOV       R0,#?V0
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000038   78..         MOV       R0,#?V0
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000042   78..         MOV       R0,#?V0
   \   000044   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000047   75..01       MOV       ?V0,#0x1
   \   00004A   78..         MOV       R0,#?V0
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004F   75..02       MOV       ?V0,#0x2
   \   000052   78..         MOV       R0,#?V0
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000057   7C06         MOV       R4,#0x6
   \   000059   7D00         MOV       R5,#0x0
   \   00005B   7A..         MOV       R2,#zclSampleSw_DstAddr & 0xff
   \   00005D   7B..         MOV       R3,#(zclSampleSw_DstAddr >> 8) & 0xff
   \   00005F   7908         MOV       R1,#0x8
   \   000061   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000064   740B         MOV       A,#0xb
   \   000066   12....       LCALL     ?DEALLOC_XSTACK8
    316              
    317              // return unprocessed events
    318              return (events ^ SAMPLESW_TOGGLE_TEST_EVT);
   \   000069   EE           MOV       A,R6
   \   00006A   FA           MOV       R2,A
   \   00006B   EF           MOV       A,R7
   \   00006C   6410         XRL       A,#0x10
   \   00006E   8050         SJMP      ??zclSampleSw_event_loop_1
    319            }
    320            
    321          
    322            if ( events & SYS_EVENT_MSG )
   \                     ??zclSampleSw_event_loop_0:
   \   000070   EB           MOV       A,R3
   \   000071   5480         ANL       A,#0x80
   \   000073   7022         JNZ       ??zclSampleSw_event_loop_2
    323            {
    324              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleSw_TaskID )) )
    325              {
    326                switch ( MSGpkt->hdr.event )
    327                {
    328                  case ZCL_INCOMING_MSG:
    329                    // Incoming ZCL Foundation command/response messages
    330                    zclSampleSw_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    331                    break;
    332          
    333                  case KEY_CHANGE:
    334                    zclSampleSw_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    335                    break;
    336          
    337                  case ZDO_STATE_CHANGE:
    338                    break;
    339          
    340          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    341                  case ZCL_OTA_CALLBACK_IND:
    342                    zclSampleSw_ProcessOTAMsgs( (zclOTA_CallbackMsg_t*)MSGpkt  );
    343                    break;
    344          #endif
    345          
    346                  default:
    347                    break;
    348                }
    349          
    350                // Release the memory
    351                osal_msg_deallocate( (uint8 *)MSGpkt );
    352              }
    353          
    354              // return unprocessed events
    355              return (events ^ SYS_EVENT_MSG);
    356            }
    357          
    358          #if ZG_BUILD_ENDDEVICE_TYPE    
    359            if ( events & SAMPLEAPP_END_DEVICE_REJOIN_EVT )
    360            {
    361              bdb_ZedAttemptRecoverNwk();
    362              return ( events ^ SAMPLEAPP_END_DEVICE_REJOIN_EVT );
    363            }
    364          #endif
    365          
    366            if ( events & SAMPLEAPP_LCD_AUTO_UPDATE_EVT )
   \   000075   EA           MOV       A,R2
   \   000076   5410         ANL       A,#0x10
   \   000078   6049         JZ        ??zclSampleSw_event_loop_3
    367            {
    368              return ( events ^ SAMPLEAPP_LCD_AUTO_UPDATE_EVT );
   \   00007A   EA           MOV       A,R2
   \   00007B   6410         XRL       A,#0x10
   \   00007D   804C         SJMP      ??zclSampleSw_event_loop_4
    369            }
   \                     ??zclSampleSw_event_loop_5:
   \   00007F                ; Setup parameters for call to function zclSampleSw_HandleKeys
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   E0           MOVX      A,@DPTR
   \   000083   FA           MOV       R2,A
   \   000084   85..82       MOV       DPL,?V0
   \   000087   8B83         MOV       DPH,R3
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   F9           MOV       R1,A
   \   00008D   12....       LCALL     `??zclSampleSw_HandleKeys::?relay`; Banked call to: zclSampleSw_HandleKeys
   \                     ??zclSampleSw_event_loop_6:
   \   000090                ; Setup parameters for call to function osal_msg_deallocate
   \   000090   AA..         MOV       R2,?V0
   \   000092   AB..         MOV       R3,?V1
   \   000094   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zclSampleSw_event_loop_2:
   \   000097                ; Setup parameters for call to function osal_msg_receive
   \   000097   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   F9           MOV       R1,A
   \   00009C   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00009F   8A..         MOV       ?V0,R2
   \   0000A1   8B..         MOV       ?V1,R3
   \   0000A3   EA           MOV       A,R2
   \   0000A4   4B           ORL       A,R3
   \   0000A5   6014         JZ        ??zclSampleSw_event_loop_7
   \   0000A7   8A82         MOV       DPL,R2
   \   0000A9   8B83         MOV       DPH,R3
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   24CC         ADD       A,#-0x34
   \   0000AE   6006         JZ        ??zclSampleSw_event_loop_8
   \   0000B0   2474         ADD       A,#0x74
   \   0000B2   60CB         JZ        ??zclSampleSw_event_loop_5
   \   0000B4   80DA         SJMP      ??zclSampleSw_event_loop_6
   \                     ??zclSampleSw_event_loop_8:
   \   0000B6                ; Setup parameters for call to function zclSampleSw_ProcessIncomingMsg
   \   0000B6   12....       LCALL     `??zclSampleSw_ProcessIncomingMsg::?relay`; Banked call to: zclSampleSw_ProcessIncomingMsg
   \   0000B9   80D5         SJMP      ??zclSampleSw_event_loop_6
   \                     ??zclSampleSw_event_loop_7:
   \   0000BB   EE           MOV       A,R6
   \   0000BC   FA           MOV       R2,A
   \   0000BD   EF           MOV       A,R7
   \   0000BE   6480         XRL       A,#0x80
   \                     ??zclSampleSw_event_loop_1:
   \   0000C0   FB           MOV       R3,A
   \   0000C1   800F         SJMP      ??zclSampleSw_event_loop_9
    370          
    371            if ( events & SAMPLEAPP_KEY_AUTO_REPEAT_EVT )
   \                     ??zclSampleSw_event_loop_3:
   \   0000C3   EA           MOV       A,R2
   \   0000C4   5420         ANL       A,#0x20
   \   0000C6   6006         JZ        ??zclSampleSw_event_loop_10
    372            {
    373              return ( events ^ SAMPLEAPP_KEY_AUTO_REPEAT_EVT );
   \   0000C8   EA           MOV       A,R2
   \   0000C9   6420         XRL       A,#0x20
   \                     ??zclSampleSw_event_loop_4:
   \   0000CB   FA           MOV       R2,A
   \   0000CC   8004         SJMP      ??zclSampleSw_event_loop_9
    374            }
    375            // Discard unknown events
    376            return 0;
   \                     ??zclSampleSw_event_loop_10:
   \   0000CE   7A00         MOV       R2,#0x0
   \   0000D0   7B00         MOV       R3,#0x0
   \                     ??zclSampleSw_event_loop_9:
   \   0000D2                REQUIRE ?Subroutine1
   \   0000D2                ; // Fall through to label ?Subroutine1
    377          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    378          
    379          /*********************************************************************
    380           * @fn      zclSampleSw_HandleKeys
    381           *
    382           * @brief   Handles all key events for this device.
    383           *
    384           * @param   shift - true if in shift/alt.
    385           * @param   keys - bit field for key events. Valid entries:
    386           *                 HAL_KEY_SW_5
    387           *                 HAL_KEY_SW_4
    388           *                 HAL_KEY_SW_2
    389           *                 HAL_KEY_SW_1
    390           *
    391           * @return  none
    392           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    393          static void zclSampleSw_HandleKeys( byte shift, byte keys )
   \                     zclSampleSw_HandleKeys:
    394          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
    395            if ( keys & HAL_KEY_SW_6 ) //key1
   \   000007   A2E5         MOV       C,0xE0 /* A   */.5
   \   000009   5011         JNC       ??zclSampleSw_HandleKeys_0
    396            {
    397              HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
   \   00000B                ; Setup parameters for call to function HalLedSet
   \   00000B   7A01         MOV       R2,#0x1
   \   00000D   7902         MOV       R1,#0x2
   \   00000F   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    398              bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_FORMATION | BDB_COMMISSIONING_MODE_FINDING_BINDING );  //Coordiinator
   \   000012                ; Setup parameters for call to function bdb_StartCommissioning
   \   000012   790C         MOV       R1,#0xc
   \   000014   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    399              NLME_PermitJoiningRequest( 0xff );
   \   000017                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000017   79FF         MOV       R1,#-0x1
   \   000019   12....       LCALL     `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
    400            }    
    401            if ( keys & HAL_KEY_SW_5 ) //key2
   \                     ??zclSampleSw_HandleKeys_0:
   \   00001C   EE           MOV       A,R6
   \   00001D   A2E2         MOV       C,0xE0 /* A   */.2
   \   00001F   4003         JC        $+5
   \   000021   02....       LJMP      ??zclSampleSw_HandleKeys_1 & 0xFFFF
    402            {
    403              Send_To_SW1();
   \   000024   90....       MOV       DPTR,#SW_DstAddr + 8
   \   000027   7402         MOV       A,#0x2
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   7408         MOV       A,#0x8
   \   00002D   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000030   F5..         MOV       ?V1,A
   \   000032   78..         MOV       R0,#?V0
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   78..         MOV       R0,#?V0
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   78..         MOV       R0,#?V0
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000041   78..         MOV       R0,#?V0
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000046   78..         MOV       R0,#?V0
   \   000048   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004B   78..         MOV       R0,#?V0
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000050   75..01       MOV       ?V0,#0x1
   \   000053   78..         MOV       R0,#?V0
   \   000055   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000058   75..02       MOV       ?V0,#0x2
   \   00005B   78..         MOV       R0,#?V0
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000060   7C06         MOV       R4,#0x6
   \   000062   7D00         MOV       R5,#0x0
   \   000064   7A..         MOV       R2,#SW_DstAddr & 0xff
   \   000066   7B..         MOV       R3,#(SW_DstAddr >> 8) & 0xff
   \   000068   7908         MOV       R1,#0x8
   \   00006A   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00006D   740B         MOV       A,#0xb
   \   00006F   12....       LCALL     ?DEALLOC_XSTACK8
    404              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );
   \   000072                ; Setup parameters for call to function HalLedSet
   \   000072   7A04         MOV       R2,#0x4
   \   000074   7904         MOV       R1,#0x4
   \   000076   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    405              Send_To_SW2();
   \   000079   90....       MOV       DPTR,#SW_DstAddr + 8
   \   00007C   7402         MOV       A,#0x2
   \   00007E   F0           MOVX      @DPTR,A
   \   00007F   A3           INC       DPTR
   \   000080   7409         MOV       A,#0x9
   \   000082   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000085   78..         MOV       R0,#?V0
   \   000087   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008A   78..         MOV       R0,#?V0
   \   00008C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008F   78..         MOV       R0,#?V0
   \   000091   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000094   78..         MOV       R0,#?V0
   \   000096   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000099   78..         MOV       R0,#?V0
   \   00009B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009E   78..         MOV       R0,#?V0
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A3   75..01       MOV       ?V0,#0x1
   \   0000A6   78..         MOV       R0,#?V0
   \   0000A8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AB   75..02       MOV       ?V0,#0x2
   \   0000AE   78..         MOV       R0,#?V0
   \   0000B0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B3   7C06         MOV       R4,#0x6
   \   0000B5   7D00         MOV       R5,#0x0
   \   0000B7   7A..         MOV       R2,#SW_DstAddr & 0xff
   \   0000B9   7B..         MOV       R3,#(SW_DstAddr >> 8) & 0xff
   \   0000BB   7908         MOV       R1,#0x8
   \   0000BD   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000C0   740B         MOV       A,#0xb
   \   0000C2   12....       LCALL     ?DEALLOC_XSTACK8
    406            }
    407          }
   \                     ??zclSampleSw_HandleKeys_1:
   \   0000C5   7F02         MOV       R7,#0x2
   \   0000C7   02....       LJMP      ?BANKED_LEAVE_XDATA
    408          
    409          
    410          /*********************************************************************
    411           * @fn      zclSampleSw_ProcessCommissioningStatus
    412           *
    413           * @brief   Callback in which the status of the commissioning process are reported
    414           *
    415           * @param   bdbCommissioningModeMsg - Context message of the status of a commissioning process
    416           *
    417           * @return  none
    418           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    419          static void zclSampleSw_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
   \                     zclSampleSw_ProcessCommissioningStatus:
    420          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    421            switch(bdbCommissioningModeMsg->bdbCommissioningMode)
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   6402         XRL       A,#0x2
   \   000011   701B         JNZ       ??zclSampleSw_ProcessCommissioningStatus_0
    422            {
    423              case BDB_COMMISSIONING_FORMATION:
    424                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \   000013   8A82         MOV       DPL,R2
   \   000015   8B83         MOV       DPH,R3
   \   000017   E0           MOVX      A,@DPTR
   \   000018   7014         JNZ       ??zclSampleSw_ProcessCommissioningStatus_0
    425                {
    426                  //After formation, perform nwk steering again plus the remaining commissioning modes that has not been processed yet
    427                  HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
   \   00001A                ; Setup parameters for call to function HalLedSet
   \   00001A   7A01         MOV       R2,#0x1
   \   00001C   7901         MOV       R1,#0x1
   \   00001E   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    428                  bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
   \   000021                ; Setup parameters for call to function bdb_StartCommissioning
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   4402         ORL       A,#0x2
   \   00002A   F9           MOV       R1,A
   \   00002B   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    429                }
    430                else
    431                {
    432                  //Want to try other channels?
    433                  //try with bdb_setChannelAttribute
    434                }
    435              break;
    436              case BDB_COMMISSIONING_NWK_STEERING:
    437                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    438                {
    439                  //YOUR JOB:
    440                  //We are on the nwk, what now?
    441                }
    442                else
    443                {
    444                  //See the possible errors for nwk steering procedure
    445                  //No suitable networks found
    446                  //Want to try other channels?
    447                  //try with bdb_setChannelAttribute
    448                }
    449              break;
    450              case BDB_COMMISSIONING_FINDING_BINDING:
    451                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    452                {
    453                  //YOUR JOB:
    454                }
    455                else
    456                {
    457                  //YOUR JOB:
    458                  //retry?, wait for user interaction?
    459                }
    460              break;
    461              case BDB_COMMISSIONING_INITIALIZATION:
    462                //Initialization notification can only be successful. Failure on initialization 
    463                //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
    464                
    465                //YOUR JOB:
    466                //We are on a network, what now?
    467                
    468              break;
    469          #if ZG_BUILD_ENDDEVICE_TYPE    
    470              case BDB_COMMISSIONING_PARENT_LOST:
    471                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
    472                {
    473                  //We did recover from losing parent
    474                }
    475                else
    476                {
    477                  //Parent not found, attempt to rejoin again after a fixed delay
    478                  osal_start_timerEx(zclSampleSw_TaskID, SAMPLEAPP_END_DEVICE_REJOIN_EVT, SAMPLEAPP_END_DEVICE_REJOIN_DELAY);
    479                }
    480              break;
    481          #endif 
    482            }
    483            
    484          }
   \                     ??zclSampleSw_ProcessCommissioningStatus_0:
   \   00002E   02....       LJMP      ?Subroutine0 & 0xFFFF
    485          
    486          /*********************************************************************
    487           * @fn      zclSampleSw_BasicResetCB
    488           *
    489           * @brief   Callback from the ZCL General Cluster Library
    490           *          to set all the Basic Cluster attributes to  default values.
    491           *
    492           * @param   none
    493           *
    494           * @return  none
    495           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    496          static void zclSampleSw_BasicResetCB( void )
   \                     zclSampleSw_BasicResetCB:
    497          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    498            zclSampleSw_ResetAttributesToDefaultValues();
   \   000004                ; Setup parameters for call to function zclSampleSw_ResetAttributesToDefaultValues
   \   000004   12....       LCALL     `??zclSampleSw_ResetAttributesToDefaultValues::?`; Banked call to: zclSampleSw_ResetAttributesToDefaultValues
    499          }
   \   000007                REQUIRE ?Subroutine2
   \   000007                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    500          
    501          /*********************************************************************
    502           * @fn      zclSampleApp_BatteryWarningCB
    503           *
    504           * @brief   Called to handle battery-low situation.
    505           *
    506           * @param   voltLevel - level of severity
    507           *
    508           * @return  none
    509           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    510          void zclSampleApp_BatteryWarningCB( uint8 voltLevel )
   \                     zclSampleApp_BatteryWarningCB:
    511          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    512            if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
    513            {
    514              // Send warning message to the gateway and blink LED
    515            }
    516            else if ( voltLevel == VOLT_LEVEL_BAD )
    517            {
    518              // Shut down the system
    519            }
    520          }
   \   000000   02....       LJMP      ?BRET
    521          
    522          /******************************************************************************
    523           *
    524           *  Functions for processing ZCL Foundation incoming Command/Response messages
    525           *
    526           *****************************************************************************/
    527          
    528          /*********************************************************************
    529           * @fn      zclSampleSw_ProcessIncomingMsg
    530           *
    531           * @brief   Process ZCL Foundation incoming message
    532           *
    533           * @param   pInMsg - pointer to the received message
    534           *
    535           * @return  none
    536           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    537          static void zclSampleSw_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSw_ProcessIncomingMsg:
    538          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    539            switch ( pInMsg->zclHdr.commandID )
   \   000005   EA           MOV       A,R2
   \   000006   2417         ADD       A,#0x17
   \   000008   F8           MOV       R0,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F9           MOV       R1,A
   \   00000C   E8           MOV       A,R0
   \   00000D   FE           MOV       R6,A
   \   00000E   E9           MOV       A,R1
   \   00000F   FF           MOV       R7,A
   \   000010   8A82         MOV       DPL,R2
   \   000012   8B83         MOV       DPH,R3
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   14           DEC       A
   \   00001D   6027         JZ        ??zclSampleSw_ProcessIncomingMsg_0
   \   00001F   24FD         ADD       A,#-0x3
   \   000021   6033         JZ        ??zclSampleSw_ProcessIncomingMsg_1
   \   000023   24FA         ADD       A,#-0x6
   \   000025   603F         JZ        ??zclSampleSw_ProcessIncomingMsg_2
   \   000027   24FD         ADD       A,#-0x3
   \   000029   7003         JNZ       $+5
   \   00002B   02....       LJMP      ??zclSampleSw_ProcessIncomingMsg_3 & 0xFFFF
   \   00002E   24FB         ADD       A,#-0x5
   \   000030   7003         JNZ       $+5
   \   000032   02....       LJMP      ??zclSampleSw_ProcessIncomingMsg_4 & 0xFFFF
   \   000035   24FE         ADD       A,#-0x2
   \   000037   7003         JNZ       $+5
   \   000039   02....       LJMP      ??zclSampleSw_ProcessIncomingMsg_4 & 0xFFFF
   \   00003C   24FE         ADD       A,#-0x2
   \   00003E   7003         JNZ       $+5
   \   000040   02....       LJMP      ??zclSampleSw_ProcessIncomingMsg_5 & 0xFFFF
   \   000043   02....       LJMP      ??zclSampleSw_ProcessIncomingMsg_6 & 0xFFFF
    540            {
    541          #ifdef ZCL_READ
    542              case ZCL_CMD_READ_RSP:
    543                zclSampleSw_ProcessInReadRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_0:
   \   000046   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   F9           MOV       R1,A
   \   00004B   E8           MOV       A,R0
   \   00004C   C3           CLR       C
   \   00004D   99           SUBB      A,R1
   \   00004E   4003         JC        $+5
   \   000050   02....       LJMP      ??zclSampleSw_ProcessIncomingMsg_6 & 0xFFFF
   \   000053   08           INC       R0
   \   000054   80F3         SJMP      ??CrossCallReturnLabel_2
    544                break;
    545          #endif
    546          #ifdef ZCL_WRITE
    547              case ZCL_CMD_WRITE_RSP:
    548                zclSampleSw_ProcessInWriteRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_1:
   \   000056   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   F9           MOV       R1,A
   \   00005B   E8           MOV       A,R0
   \   00005C   C3           CLR       C
   \   00005D   99           SUBB      A,R1
   \   00005E   4003         JC        $+5
   \   000060   02....       LJMP      ??zclSampleSw_ProcessIncomingMsg_6 & 0xFFFF
   \   000063   08           INC       R0
   \   000064   80F3         SJMP      ??CrossCallReturnLabel_3
    549                break;
    550          #endif
    551          #ifdef ZCL_REPORT
    552              // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
    553              case ZCL_CMD_CONFIG_REPORT:
    554                //zclSampleSw_ProcessInConfigReportCmd( pInMsg );
    555                break;
    556          
    557              case ZCL_CMD_CONFIG_REPORT_RSP:
    558                //zclSampleSw_ProcessInConfigReportRspCmd( pInMsg );
    559                break;
    560          
    561              case ZCL_CMD_READ_REPORT_CFG:
    562                //zclSampleSw_ProcessInReadReportCfgCmd( pInMsg );
    563                break;
    564          
    565              case ZCL_CMD_READ_REPORT_CFG_RSP:
    566                //zclSampleSw_ProcessInReadReportCfgRspCmd( pInMsg );
    567                break;
    568          
    569              case ZCL_CMD_REPORT:
    570                zclSampleSw_ProcessInReportCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_2:
   \   000066   8A82         MOV       DPL,R2
   \   000068   8B83         MOV       DPH,R3
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   E0           MOVX      A,@DPTR
   \   000075   F5..         MOV       ?V2,A
   \   000077   A3           INC       DPTR
   \   000078   E0           MOVX      A,@DPTR
   \   000079   F5..         MOV       ?V3,A
   \   00007B   EA           MOV       A,R2
   \   00007C   2413         ADD       A,#0x13
   \   00007E   F582         MOV       DPL,A
   \   000080   E4           CLR       A
   \   000081   3B           ADDC      A,R3
   \   000082   F583         MOV       DPH,A
   \   000084   E0           MOVX      A,@DPTR
   \   000085   F5..         MOV       ?V1,A
   \   000087   90....       MOV       DPTR,#SourceAddr
   \   00008A   E5..         MOV       A,?V2
   \   00008C   F0           MOVX      @DPTR,A
   \   00008D   A3           INC       DPTR
   \   00008E   E5..         MOV       A,?V3
   \   000090   F0           MOVX      @DPTR,A
   \   000091   8882         MOV       DPL,R0
   \   000093   8983         MOV       DPH,R1
   \   000095   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   F5..         MOV       ?V0,A
   \   0000A2                ; Setup parameters for call to function printf
   \   0000A2   78..         MOV       R0,#?V2
   \   0000A4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A7   7A..         MOV       R2,#`?<Constant "0x%04X">` & 0xff
   \   0000A9   7B..         MOV       R3,#(`?<Constant "0x%04X">` >> 8) & 0xff
   \   0000AB   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0000AE   7402         MOV       A,#0x2
   \   0000B0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B3                ; Setup parameters for call to function printf
   \   0000B3   E5..         MOV       A,?V1
   \   0000B5   F5..         MOV       ?V2,A
   \   0000B7   75..00       MOV       ?V3,#0x0
   \   0000BA   78..         MOV       R0,#?V2
   \   0000BC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BF   7A..         MOV       R2,#`?<Constant " %d">` & 0xff
   \   0000C1   7B..         MOV       R3,#(`?<Constant " %d">` >> 8) & 0xff
   \   0000C3   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0000C6   7402         MOV       A,#0x2
   \   0000C8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000CB                ; Setup parameters for call to function printf
   \   0000CB   75..00       MOV       ?V1,#0x0
   \   0000CE   78..         MOV       R0,#?V0
   \   0000D0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D3   7A..         MOV       R2,#`?<Constant " %d\\n">` & 0xff
   \   0000D5   7B..         MOV       R3,#(`?<Constant " %d\\n">` >> 8) & 0xff
   \   0000D7   12....       LCALL     `??printf::?relay`; Banked call to: printf
   \   0000DA   7402         MOV       A,#0x2
   \   0000DC   12....       LCALL     ?DEALLOC_XSTACK8
    571                break;
   \   0000DF   8029         SJMP      ??zclSampleSw_ProcessIncomingMsg_6
    572          #endif
    573              case ZCL_CMD_DEFAULT_RSP:
    574                zclSampleSw_ProcessInDefaultRspCmd( pInMsg );
    575                break;
    576          #ifdef ZCL_DISCOVER
    577              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
    578                zclSampleSw_ProcessInDiscCmdsRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_4:
   \   0000E1                ; Setup parameters for call to function zclSampleSw_ProcessInDiscCmdsRspCmd
    579                break;
    580          
    581              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
    582                zclSampleSw_ProcessInDiscCmdsRspCmd( pInMsg );
   \   0000E1                ; Setup parameters for call to function zclSampleSw_ProcessInDiscCmdsRspCmd
   \   0000E1   12....       LCALL     `??zclSampleSw_ProcessInDiscCmdsRspCmd::?relay`; Banked call to: zclSampleSw_ProcessInDiscCmdsRspCmd
    583                break;
   \   0000E4   8024         SJMP      ??zclSampleSw_ProcessIncomingMsg_6
    584          
    585              case ZCL_CMD_DISCOVER_ATTRS_RSP:
    586                zclSampleSw_ProcessInDiscAttrsRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_3:
   \   0000E6   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000E9   8882         MOV       DPL,R0
   \   0000EB   8983         MOV       DPH,R1
   \   0000ED   A3           INC       DPTR
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   FB           MOV       R3,A
   \   0000F0   EA           MOV       A,R2
   \   0000F1   C3           CLR       C
   \   0000F2   9B           SUBB      A,R3
   \   0000F3   5015         JNC       ??zclSampleSw_ProcessIncomingMsg_6
   \   0000F5   0A           INC       R2
   \   0000F6   80F1         SJMP      ??CrossCallReturnLabel_7
    587                break;
    588          
    589              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
    590                zclSampleSw_ProcessInDiscAttrsExtRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_5:
   \   0000F8   12....       LCALL     ?Subroutine4 & 0xFFFF
    591                break;
    592          #endif
    593              default:
    594                break;
    595            }
   \                     ??CrossCallReturnLabel_8:
   \   0000FB   8001         SJMP      ??zclSampleSw_ProcessIncomingMsg_7
   \                     ??zclSampleSw_ProcessIncomingMsg_8:
   \   0000FD   0A           INC       R2
   \                     ??zclSampleSw_ProcessIncomingMsg_7:
   \   0000FE   8882         MOV       DPL,R0
   \   000100   8983         MOV       DPH,R1
   \   000102   A3           INC       DPTR
   \   000103   E0           MOVX      A,@DPTR
   \   000104   FB           MOV       R3,A
   \   000105   EA           MOV       A,R2
   \   000106   C3           CLR       C
   \   000107   9B           SUBB      A,R3
   \   000108   40F3         JC        ??zclSampleSw_ProcessIncomingMsg_8
    596          
    597            if ( pInMsg->attrCmd )
   \                     ??zclSampleSw_ProcessIncomingMsg_6:
   \   00010A   8E82         MOV       DPL,R6
   \   00010C   8F83         MOV       DPH,R7
   \   00010E   E0           MOVX      A,@DPTR
   \   00010F   FA           MOV       R2,A
   \   000110   A3           INC       DPTR
   \   000111   E0           MOVX      A,@DPTR
   \   000112   FB           MOV       R3,A
   \   000113   EA           MOV       A,R2
   \   000114   4B           ORL       A,R3
   \   000115   6003         JZ        ??zclSampleSw_ProcessIncomingMsg_9
    598              osal_mem_free( pInMsg->attrCmd );
   \   000117                ; Setup parameters for call to function osal_mem_free
   \   000117   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    599          }
   \                     ??zclSampleSw_ProcessIncomingMsg_9:
   \   00011A   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F8           MOV       R0,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   8882         MOV       DPL,R0
   \   00000A   F583         MOV       DPH,A
   \   00000C   7800         MOV       R0,#0x0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004                REQUIRE ??Subroutine7_0
   \   000004                ; // Fall through to label ??Subroutine7_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine7_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   7A00         MOV       R2,#0x0
   \   000007   22           RET
    600          
    601          #ifdef ZCL_READ
    602          /*********************************************************************
    603           * @fn      zclSampleSw_ProcessInReadRspCmd
    604           *
    605           * @brief   Process the "Profile" Read Response Command
    606           *
    607           * @param   pInMsg - incoming message to process
    608           *
    609           * @return  none
    610           */
    611          static uint8 zclSampleSw_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
    612          {
    613            zclReadRspCmd_t *readRspCmd;
    614            uint8 i;
    615          
    616            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
    617            for (i = 0; i < readRspCmd->numAttr; i++)
    618            {
    619              // Notify the originator of the results of the original read attributes
    620              // attempt and, for each successfull request, the value of the requested
    621              // attribute
    622            }
    623          
    624            return TRUE;
    625          }
    626          #endif // ZCL_READ
    627          
    628          #ifdef ZCL_WRITE
    629          /*********************************************************************
    630           * @fn      zclSampleSw_ProcessInWriteRspCmd
    631           *
    632           * @brief   Process the "Profile" Write Response Command
    633           *
    634           * @param   pInMsg - incoming message to process
    635           *
    636           * @return  none
    637           */
    638          static uint8 zclSampleSw_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
    639          {
    640            zclWriteRspCmd_t *writeRspCmd;
    641            uint8 i;
    642          
    643            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
    644            for (i = 0; i < writeRspCmd->numAttr; i++)
    645            {
    646              // Notify the device of the results of the its original write attributes
    647              // command.
    648            }
    649          
    650            return TRUE;
    651          }
    652          #endif // ZCL_WRITE
    653          
    654          /*********************************************************************
    655           * @fn      zclSampleSw_ProcessInDefaultRspCmd
    656           *
    657           * @brief   Process the "Profile" Default Response Command
    658           *
    659           * @param   pInMsg - incoming message to process
    660           *
    661           * @return  none
    662           */
    663          static uint8 zclSampleSw_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
    664          {
    665            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
    666            // Device is notified of the Default Response command.
    667            (void)pInMsg;
    668            return TRUE;
    669          }
    670          
    671          #ifdef ZCL_DISCOVER
    672          /*********************************************************************
    673           * @fn      zclSampleSw_ProcessInDiscCmdsRspCmd
    674           *
    675           * @brief   Process the Discover Commands Response Command
    676           *
    677           * @param   pInMsg - incoming message to process
    678           *
    679           * @return  none
    680           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    681          static uint8 zclSampleSw_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSw_ProcessInDiscCmdsRspCmd:
    682          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    683            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
    684            uint8 i;
    685          
    686            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
   \   000004   EA           MOV       A,R2
   \   000005   2417         ADD       A,#0x17
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F583         MOV       DPH,A
   \   00000D   12....       LCALL     ??Subroutine7_0 & 0xFFFF
    687            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
   \                     ??CrossCallReturnLabel_6:
   \   000010   8001         SJMP      ??zclSampleSw_ProcessInDiscCmdsRspCmd_0
   \                     ??zclSampleSw_ProcessInDiscCmdsRspCmd_1:
   \   000012   0A           INC       R2
   \                     ??zclSampleSw_ProcessInDiscCmdsRspCmd_0:
   \   000013   8882         MOV       DPL,R0
   \   000015   8983         MOV       DPH,R1
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FB           MOV       R3,A
   \   00001B   EA           MOV       A,R2
   \   00001C   C3           CLR       C
   \   00001D   9B           SUBB      A,R3
   \   00001E   40F2         JC        ??zclSampleSw_ProcessInDiscCmdsRspCmd_1
    688            {
    689              // Device is notified of the result of its attribute discovery command.
    690            }
    691          
    692            return TRUE;
   \   000020   7901         MOV       R1,#0x1
   \   000022   02....       LJMP      ?Subroutine2 & 0xFFFF
    693          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#SourceAddr
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F8           MOV       R0,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   90....       MOV       DPTR,#SW_DstAddr
   \   00000C   E8           MOV       A,R0
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   A3           INC       DPTR
   \   00000F   E9           MOV       A,R1
   \   000010   F0           MOVX      @DPTR,A
   \   000011                ; Setup parameters for call to function zcl_SendCommand
   \   000011                ; Setup parameters for call to function zcl_SendCommand
   \   000011   E4           CLR       A
   \   000012   F5..         MOV       ?V0,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleSw_OnOffSwitchType>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleSw_NwkState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleSw_CmdCallbacks>`:
   \   000000   ....         DW `??zclSampleSw_BasicResetCB::?relay`
   \   000002   0000         DW 0H
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   0000         DW 0H
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "init successful\\r\\n">`:
   \   000000   696E6974     DB "init successful\015\012"
   \            20737563
   \            63657373
   \            66756C0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0x%04X">`:
   \   000000   30782530     DB "0x%04X"
   \            345800  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " %d">`:
   \   000000   20256400     DB " %d"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " %d\\n">`:
   \   000000   2025640A     DB " %d\012"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1f4:
   \   000000   F4010000     DD 500
    694          
    695          /*********************************************************************
    696           * @fn      zclSampleSw_ProcessInDiscAttrsRspCmd
    697           *
    698           * @brief   Process the "Profile" Discover Attributes Response Command
    699           *
    700           * @param   pInMsg - incoming message to process
    701           *
    702           * @return  none
    703           */
    704          static uint8 zclSampleSw_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
    705          {
    706            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
    707            uint8 i;
    708          
    709            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
    710            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
    711            {
    712              // Device is notified of the result of its attribute discovery command.
    713            }
    714          
    715            return TRUE;
    716          }
    717          
    718          /*********************************************************************
    719           * @fn      zclSampleSw_ProcessInDiscAttrsExtRspCmd
    720           *
    721           * @brief   Process the "Profile" Discover Attributes Extended Response Command
    722           *
    723           * @param   pInMsg - incoming message to process
    724           *
    725           * @return  none
    726           */
    727          static uint8 zclSampleSw_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
    728          {
    729            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
    730            uint8 i;
    731          
    732            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
    733            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
    734            {
    735              // Device is notified of the result of its attribute discovery command.
    736            }
    737          
    738            return TRUE;
    739          }
    740          #endif // ZCL_DISCOVER
    741          
    742          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    743          /*********************************************************************
    744           * @fn      zclSampleSw_ProcessOTAMsgs
    745           *
    746           * @brief   Called to process callbacks from the ZCL OTA.
    747           *
    748           * @param   none
    749           *
    750           * @return  none
    751           */
    752          static void zclSampleSw_ProcessOTAMsgs( zclOTA_CallbackMsg_t* pMsg )
    753          {
    754            uint8 RxOnIdle;
    755          
    756            switch(pMsg->ota_event)
    757            {
    758            case ZCL_OTA_START_CALLBACK:
    759              if (pMsg->hdr.status == ZSuccess)
    760              {
    761                // Speed up the poll rate
    762                RxOnIdle = TRUE;
    763                ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    764                NLME_SetPollRate( 2000 );
    765              }
    766              break;
    767          
    768            case ZCL_OTA_DL_COMPLETE_CALLBACK:
    769              if (pMsg->hdr.status == ZSuccess)
    770              {
    771                // Reset the CRC Shadow and reboot.  The bootloader will see the
    772                // CRC shadow has been cleared and switch to the new image
    773                HalOTAInvRC();
    774                SystemReset();
    775              }
    776              else
    777              {
    778          #if (ZG_BUILD_ENDDEVICE_TYPE)    
    779                // slow the poll rate back down.
    780                RxOnIdle = FALSE;
    781                ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    782                NLME_SetPollRate(DEVICE_POLL_RATE);
    783          #endif
    784              }
    785              break;
    786          
    787            default:
    788              break;
    789            }
    790          }
    791          #endif // defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    792          
    793          /****************************************************************************
    794          ****************************************************************************/
    795          static void zclSampleSw_ProcessInReportCmd( zclIncomingMsg_t *pInMsg )
    796          {
    797          //  HalLedSet ( HAL_LED_3, HAL_LED_MODE_TOGGLE );
    798            
    799            zclReportCmd_t *pInTempSensorReport;
    800          
    801            uint8 On_Off_State;
    802            uint16 Dev_Nwk_ID;
    803            uint8 End_Point;
    804            
    805            Dev_Nwk_ID = pInMsg->srcAddr.addr.shortAddr;
    806            End_Point = pInMsg->srcAddr.endPoint;
    807            SourceAddr = Dev_Nwk_ID;
    808              
    809            pInTempSensorReport = (zclReportCmd_t *)pInMsg->attrCmd;
    810            
    811            On_Off_State = pInTempSensorReport->attrList[0].attrData[0];
    812          //  zclSampleThermostat_LocalTemperature2 = BUILD_UINT16(pInTempSensorReport->attrList[0].attrData[1], pInTempSensorReport->attrList[0].attrData[2]);
    813          
    814            printf( "0x%04X", Dev_Nwk_ID );
    815            printf( " %d", End_Point);
    816            printf( " %d\n", On_Off_State );
    817          }
    818          
    819          static void Send_To_SW1( void )
    820          {
    821            SW_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    822            SW_DstAddr.endPoint = SW1_ENDPOINT;
    823            SW_DstAddr.addr.shortAddr = SourceAddr; 
    824            zclGeneral_SendOnOff_CmdToggle( SW1_ENDPOINT, &SW_DstAddr, FALSE, 0 );
    825          }
    826          
    827          static void Send_To_SW2( void )
    828          {
    829            SW_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    830            SW_DstAddr.endPoint = SW2_ENDPOINT;
    831            SW_DstAddr.addr.shortAddr = SourceAddr; 
    832            zclGeneral_SendOnOff_CmdToggle( SW1_ENDPOINT, &SW_DstAddr, FALSE, 0 );
    833          }
    834          
    835          static void Send_To_SW3( void )
                             ^
Warning[Pe177]: function "Send_To_SW3" was declared but never referenced
    836          {
    837            SW_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    838            SW_DstAddr.endPoint = SW3_ENDPOINT;
    839            SW_DstAddr.addr.shortAddr = SourceAddr; 
    840            zclGeneral_SendOnOff_CmdToggle( SW1_ENDPOINT, &SW_DstAddr, FALSE, 0 );
    841          }

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   zclSampleApp_BatteryWarningCB
      2      0   zclSampleSw_BasicResetCB
        2      0   -> zclSampleSw_ResetAttributesToDefaultValues
      0     33   zclSampleSw_HandleKeys
        0     10   -> HalLedSet
        0     10   -> NLME_PermitJoiningRequest
        0     10   -> bdb_StartCommissioning
        0     21   -> zcl_SendCommand
      0      9   zclSampleSw_Init
        0      9   -> RegisterForKeys
        0      9   -> RegisterForUart0
        0      9   -> RegisterVoltageWarningCB
        0      9   -> Uart0_Init
        0      9   -> bdb_RegisterCommissioningStatusCB
        0      9   -> bdb_RegisterSimpleDescriptor
        0      9   -> printf
        0      9   -> zclGeneral_RegisterCmdCallbacks
        0      9   -> zclSampleSw_ResetAttributesToDefaultValues
        0      9   -> zcl_registerAttrList
        0      9   -> zcl_registerForMsg
      0      9   zclSampleSw_ProcessCommissioningStatus
        0      9   -> HalLedSet
        0      9   -> bdb_StartCommissioning
      2     12   zclSampleSw_ProcessInDiscCmdsRspCmd
      0     26   zclSampleSw_ProcessIncomingMsg
        0     12   -> osal_mem_free
        0     14   -> printf
        0     12   -> zclSampleSw_ProcessInDiscCmdsRspCmd
      0     23   zclSampleSw_event_loop
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     16   -> osal_start_timerEx
        0     12   -> zclSampleSw_HandleKeys
        0     12   -> zclSampleSw_ProcessIncomingMsg
        0     23   -> zcl_SendCommand


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant " %d">
       5  ?<Constant " %d\n">
       7  ?<Constant "0x%04X">
      18  ?<Constant "init successful\r\n">
      18  ?<Initializer for zclSampleSw_CmdCallbacks>
       1  ?<Initializer for zclSampleSw_NwkState>
       1  ?<Initializer for zclSampleSw_OnOffSwitchType>
       8  ??Subroutine7_0
       5  ?Subroutine0
       5  ?Subroutine1
       7  ?Subroutine2
      21  ?Subroutine3
       4  ?Subroutine4
      15  ?Subroutine5
       9  ?Subroutine6
      12  SW_DstAddr
       2  SourceAddr
       4  __Constant_1f4
       3  zclSampleApp_BatteryWarningCB
       1  zclSampleSwSeqNum
       7  zclSampleSw_BasicResetCB
      18  zclSampleSw_CmdCallbacks
      12  zclSampleSw_DstAddr
     202  zclSampleSw_HandleKeys
     118  zclSampleSw_Init
       1  zclSampleSw_NwkState
       1  zclSampleSw_OnOffSwitchActions
       1  zclSampleSw_OnOffSwitchType
      49  zclSampleSw_ProcessCommissioningStatus
      37  zclSampleSw_ProcessInDiscCmdsRspCmd
     285  zclSampleSw_ProcessIncomingMsg
       1  zclSampleSw_TaskID
     210  zclSampleSw_event_loop
      48  -- Other

 
 985 bytes in segment BANKED_CODE
  48 bytes in segment BANK_RELAYS
  20 bytes in segment XDATA_I
  20 bytes in segment XDATA_ID
  38 bytes in segment XDATA_ROM_C
  29 bytes in segment XDATA_Z
 
  68 bytes of CODE     memory
  34 bytes of CONST    memory (+ 4 bytes shared)
 985 bytes of HUGECODE memory
  49 bytes of XDATA    memory

Errors: none
Warnings: 1
