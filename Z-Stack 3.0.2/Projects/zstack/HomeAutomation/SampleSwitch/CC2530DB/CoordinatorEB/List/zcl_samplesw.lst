###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               14/Jul/2020  01:19:58
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EWE858.tmp ("D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c"
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D xZTOOL_P1
#        -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_GROUPS -D
#        ZCL_REPORTING_DEVICE -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\zcl_samplesw.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj\zcl_samplesw.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c
      1          /**************************************************************************************************
      2            Filename:       zcl_samplesw.c
      3            Revised:        $Date: 2015-08-19 17:11:00 -0700 (Wed, 19 Aug 2015) $
      4            Revision:       $Revision: 44460 $
      5          
      6            Description:    Zigbee Cluster Library - sample switch application.
      7          
      8          
      9            Copyright 2006-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application implements a ZigBee On/Off Switch, based on Z-Stack 3.0.
     42          
     43            This application is based on the common sample-application user interface. Please see the main
     44            comment in zcl_sampleapp_ui.c. The rest of this comment describes only the content specific for
     45            this sample applicetion.
     46            
     47            Application-specific UI peripherals being used:
     48          
     49            - none (LED1 is currently unused by this application).
     50          
     51            Application-specific menu system:
     52          
     53              <TOGGLE LIGHT> Send an On, Off or Toggle command targeting appropriate devices from the binding table.
     54                Pressing / releasing [OK] will have the following functionality, depending on the value of the 
     55                zclSampleSw_OnOffSwitchActions attribute:
     56                - OnOffSwitchActions == 0: pressing [OK] will send ON command, releasing it will send OFF command;
     57                - OnOffSwitchActions == 1: pressing [OK] will send OFF command, releasing it will send ON command;
     58                - OnOffSwitchActions == 2: pressing [OK] will send TOGGLE command, releasing it will not send any command.
     59          
     60          *********************************************************************/
     61          
     62          #if ! defined ZCL_ON_OFF
     63          #error ZCL_ON_OFF must be defined for this project.
     64          #endif
     65          
     66          /*********************************************************************
     67           * INCLUDES
     68           */
     69          #include "ZComDef.h"
     70          #include "OSAL.h"
     71          #include "AF.h"
     72          #include "ZDApp.h"
     73          #include "ZDObject.h"
     74          #include "ZDProfile.h"
     75          #include "MT_SYS.h"
     76          
     77          #include "zcl.h"
     78          #include "zcl_general.h"
     79          #include "zcl_ha.h"
     80          #include "zcl_samplesw.h"
     81          #include "zcl_diagnostic.h"
     82          
     83          #include "onboard.h"
     84          
     85          /* HAL */
     86          #include "hal_lcd.h"
     87          #include "hal_led.h"
     88          #include "hal_key.h"
     89          
     90          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
     91          #include "zcl_ota.h"
     92          #include "hal_ota.h"
     93          #endif
     94          
     95          #include "bdb.h"
     96          #include "bdb_interface.h"
     97          
     98          
     99          /*********************************************************************
    100           * MACROS
    101           */
    102          
    103          #define APP_TITLE "TI Sample Switch"
    104          
    105          /*********************************************************************
    106           * TYPEDEFS
    107           */
    108          
    109          /*********************************************************************
    110           * GLOBAL VARIABLES
    111           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    112          byte zclSampleSw_TaskID;
   \                     zclSampleSw_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    113          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    114          uint8 zclSampleSwSeqNum;
   \                     zclSampleSwSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    115          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    116          uint8 zclSampleSw_OnOffSwitchType = ON_OFF_SWITCH_TYPE_MOMENTARY;
   \                     zclSampleSw_OnOffSwitchType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleSw_OnOffSwitchType>`
   \   000001                REQUIRE __INIT_XDATA_I
    117          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          uint8 zclSampleSw_OnOffSwitchActions;
   \                     zclSampleSw_OnOffSwitchActions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    119          
    120          /*********************************************************************
    121           * GLOBAL FUNCTIONS
    122           */
    123          
    124          /*********************************************************************
    125           * LOCAL VARIABLES
    126           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          afAddrType_t zclSampleSw_DstAddr;
   \                     zclSampleSw_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    128          
    129          // Endpoint to allow SYS_APP_MSGs

   \                                 In  segment XDATA_I, align 1, keep-with-next
    130          static endPointDesc_t sampleSw_TestEp =
   \                     sampleSw_TestEp:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for sampleSw_TestEp>`
   \   000007                REQUIRE __INIT_XDATA_I
    131          {
    132            SAMPLESW_ENDPOINT,                  // endpoint
    133            0,
    134            &zclSampleSw_TaskID,
    135            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    136            (afNetworkLatencyReq_t)0            // No Network Latency req
    137          };
    138          
    139          //static uint8 aProcessCmd[] = { 1, 0, 0, 0 }; // used for reset command, { length + cmd0 + cmd1 + data }
    140          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    141          devStates_t zclSampleSw_NwkState = DEV_INIT;
   \                     zclSampleSw_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleSw_NwkState>`
   \   000001                REQUIRE __INIT_XDATA_I
    142          
    143          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    144          #define DEVICE_POLL_RATE                 8000   // Poll rate for end device
    145          #endif
    146          
    147          #define SAMPLESW_TOGGLE_TEST_EVT   0x1000
    148          /*********************************************************************
    149           * LOCAL FUNCTIONS
    150           */
    151          static void Send_Test( void );
    152          
    153          static void zclSampleSw_HandleKeys( byte shift, byte keys );
    154          static void zclSampleSw_BasicResetCB( void );
    155          
    156          static void zclSampleSw_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg);
    157          
    158          
    159          // Functions to process ZCL Foundation incoming Command/Response messages
    160          static void zclSampleSw_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    161          #ifdef ZCL_READ
    162          static uint8 zclSampleSw_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    163          #endif
    164          #ifdef ZCL_WRITE
    165          static uint8 zclSampleSw_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    166          #endif
    167          static uint8 zclSampleSw_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    168          #ifdef ZCL_DISCOVER
    169          static uint8 zclSampleSw_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    170          static uint8 zclSampleSw_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    171          static uint8 zclSampleSw_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    172          #endif
    173          
    174          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    175          static void zclSampleSw_ProcessOTAMsgs( zclOTA_CallbackMsg_t* pMsg );
    176          #endif
    177          
    178          
    179          static void zclSampleApp_BatteryWarningCB( uint8 voltLevel);
    180          
    181          
    182          /*********************************************************************
    183           * CONSTANTS
    184           */
    185          
    186            
    187          /*********************************************************************
    188           * REFERENCED EXTERNALS
    189           */
    190          extern int16 zdpExternalStateTaskID;
    191          
    192          /*********************************************************************
    193           * ZCL General Profile Callback table
    194           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    195          static zclGeneral_AppCallbacks_t zclSampleSw_CmdCallbacks =
   \                     zclSampleSw_CmdCallbacks:
   \   000000                DS 18
   \   000012                REQUIRE `?<Initializer for zclSampleSw_CmdCallbacks>`
   \   000012                REQUIRE __INIT_XDATA_I
    196          {
    197            zclSampleSw_BasicResetCB,               // Basic Cluster Reset command
    198            NULL,                                   // Identify Trigger Effect command
    199            NULL,                                   // On/Off cluster commands
    200            NULL,                                   // On/Off cluster enhanced command Off with Effect
    201            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    202            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    203          #ifdef ZCL_LEVEL_CTRL
    204            NULL,                                   // Level Control Move to Level command
    205            NULL,                                   // Level Control Move command
    206            NULL,                                   // Level Control Step command
    207            NULL,                                   // Level Control Stop command
    208          #endif
    209          #ifdef ZCL_GROUPS
    210            NULL,                                   // Group Response commands
    211          #endif
    212          #ifdef ZCL_SCENES
    213            NULL,                                   // Scene Store Request command
    214            NULL,                                   // Scene Recall Request command
    215            NULL,                                   // Scene Response command
    216          #endif
    217          #ifdef ZCL_ALARMS
    218            NULL,                                   // Alarm (Response) commands
    219          #endif
    220          #ifdef SE_UK_EXT
    221            NULL,                                   // Get Event Log command
    222            NULL,                                   // Publish Event Log command
    223          #endif
    224            NULL,                                   // RSSI Location command
    225            NULL                                    // RSSI Location Response command
    226          };
    227          
    228          /*********************************************************************
    229           * @fn          zclSampleSw_Init
    230           *
    231           * @brief       Initialization function for the zclGeneral layer.
    232           *
    233           * @param       none
    234           *
    235           * @return      none
    236           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    237          void zclSampleSw_Init( byte task_id )
   \                     zclSampleSw_Init:
    238          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    239            zclSampleSw_TaskID = task_id;
   \   000006   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000009   F0           MOVX      @DPTR,A
    240          
    241            // Set destination address to indirect
    242            zclSampleSw_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000A   90....       MOV       DPTR,#zclSampleSw_DstAddr + 8
   \   00000D   E4           CLR       A
   \   00000E   F0           MOVX      @DPTR,A
    243            zclSampleSw_DstAddr.endPoint = 0;
   \   00000F   A3           INC       DPTR
   \   000010   F0           MOVX      @DPTR,A
    244            zclSampleSw_DstAddr.addr.shortAddr = 0;
   \   000011   90....       MOV       DPTR,#zclSampleSw_DstAddr
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   F0           MOVX      @DPTR,A
    245          
    246            // Register the Simple Descriptor for this application
    247            bdb_RegisterSimpleDescriptor( &zclSampleSw_SimpleDesc );
   \   000017                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   000017   7A..         MOV       R2,#zclSampleSw_SimpleDesc & 0xff
   \   000019   7B..         MOV       R3,#(zclSampleSw_SimpleDesc >> 8) & 0xff
   \   00001B   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    248          
    249            // Register the ZCL General Cluster Library callback functions
    250            zclGeneral_RegisterCmdCallbacks( SAMPLESW_ENDPOINT, &zclSampleSw_CmdCallbacks );
   \   00001E                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   00001E   7A..         MOV       R2,#zclSampleSw_CmdCallbacks & 0xff
   \   000020   7B..         MOV       R3,#(zclSampleSw_CmdCallbacks >> 8) & 0xff
   \   000022   7908         MOV       R1,#0x8
   \   000024   12....       LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    251          
    252            zclSampleSw_ResetAttributesToDefaultValues();
   \   000027                ; Setup parameters for call to function zclSampleSw_ResetAttributesToDefaultValues
   \   000027   12....       LCALL     `??zclSampleSw_ResetAttributesToDefaultValues::?`; Banked call to: zclSampleSw_ResetAttributesToDefaultValues
    253            
    254            // Register the application's attribute list
    255            zcl_registerAttrList( SAMPLESW_ENDPOINT, zclSampleSw_NumAttributes, zclSampleSw_Attrs );
   \   00002A                ; Setup parameters for call to function zcl_registerAttrList
   \   00002A   7C..         MOV       R4,#zclSampleSw_Attrs & 0xff
   \   00002C   7D..         MOV       R5,#(zclSampleSw_Attrs >> 8) & 0xff
   \   00002E   90....       MOV       DPTR,#zclSampleSw_NumAttributes
   \   000031   E4           CLR       A
   \   000032   93           MOVC      A,@A+DPTR
   \   000033   FA           MOV       R2,A
   \   000034   7908         MOV       R1,#0x8
   \   000036   12....       LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    256          
    257            // Register the Application to receive the unprocessed Foundation command/response messages
    258            zcl_registerForMsg( zclSampleSw_TaskID );
   \   000039                ; Setup parameters for call to function zcl_registerForMsg
   \   000039   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   F9           MOV       R1,A
   \   00003E   12....       LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    259            
    260            // Register low voltage NV memory protection application callback
    261            RegisterVoltageWarningCB( zclSampleApp_BatteryWarningCB );
   \   000041                ; Setup parameters for call to function RegisterVoltageWarningCB
   \   000041   7A..         MOV       R2,#`??zclSampleApp_BatteryWarningCB::?relay` & 0xff
   \   000043   7B..         MOV       R3,#(`??zclSampleApp_BatteryWarningCB::?relay` >> 8) & 0xff
   \   000045   12....       LCALL     `??RegisterVoltageWarningCB::?relay`; Banked call to: RegisterVoltageWarningCB
    262          
    263            // Register for all key events - This app will handle all key events
    264            RegisterForKeys( zclSampleSw_TaskID );
   \   000048                ; Setup parameters for call to function RegisterForKeys
   \   000048   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   F9           MOV       R1,A
   \   00004D   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    265            
    266            bdb_RegisterCommissioningStatusCB( zclSampleSw_ProcessCommissioningStatus );
   \   000050                ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
   \   000050   7A..         MOV       R2,#`??zclSampleSw_ProcessCommissioningStatus::?rela` & 0xff
   \   000052   7B..         MOV       R3,#(`??zclSampleSw_ProcessCommissioningStatus::?rela` >> 8) & 0xff
   \   000054   12....       LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
    267          
    268            // Register for a test endpoint
    269            afRegister( &sampleSw_TestEp );
   \   000057                ; Setup parameters for call to function afRegister
   \   000057   7A..         MOV       R2,#sampleSw_TestEp & 0xff
   \   000059   7B..         MOV       R3,#(sampleSw_TestEp >> 8) & 0xff
   \   00005B   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    270            
    271          #ifdef ZCL_DIAGNOSTIC
    272            // Register the application's callback function to read/write attribute data.
    273            // This is only required when the attribute data format is unknown to ZCL.
    274            zcl_registerReadWriteCB( SAMPLESW_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
    275          
    276            if ( zclDiagnostic_InitStats() == ZSuccess )
    277            {
    278              // Here the user could start the timer to save Diagnostics to NV
    279            }
    280          #endif
    281          
    282          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    283            // Register for callback events from the ZCL OTA
    284            zclOTA_Register(zclSampleSw_TaskID);
    285          #endif
    286          
    287            zdpExternalStateTaskID = zclSampleSw_TaskID;
   \   00005E   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000061   E0           MOVX      A,@DPTR
   \   000062   90....       MOV       DPTR,#zdpExternalStateTaskID
   \   000065   F0           MOVX      @DPTR,A
   \   000066   A3           INC       DPTR
   \   000067   E4           CLR       A
   \   000068   F0           MOVX      @DPTR,A
    288          
    289          }
   \   000069                REQUIRE ?Subroutine0
   \   000069                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    290          
    291          /*********************************************************************
    292           * @fn          zclSample_event_loop
    293           *
    294           * @brief       Event Loop Processor for zclGeneral.
    295           *
    296           * @param       none
    297           *
    298           * @return      none
    299           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    300          uint16 zclSampleSw_event_loop( uint8 task_id, uint16 events )
   \                     zclSampleSw_event_loop:
    301          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    302            afIncomingMSGPacket_t *MSGpkt;
    303            (void)task_id;  // Intentionally unreferenced parameter
    304          
    305            //Send toggle every 500ms
    306            if( events & SAMPLESW_TOGGLE_TEST_EVT )
   \   000009   5410         ANL       A,#0x10
   \   00000B   6064         JZ        ??zclSampleSw_event_loop_0
    307            {
    308              osal_start_timerEx(zclSampleSw_TaskID,SAMPLESW_TOGGLE_TEST_EVT,500);
   \   00000D                ; Setup parameters for call to function osal_start_timerEx
   \   00000D   90....       MOV       DPTR,#__Constant_1f4
   \   000010   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000013   7A00         MOV       R2,#0x0
   \   000015   7B10         MOV       R3,#0x10
   \   000017   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F9           MOV       R1,A
   \   00001C   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00001F   7404         MOV       A,#0x4
   \   000021   12....       LCALL     ?DEALLOC_XSTACK8
    309              zclGeneral_SendOnOff_CmdToggle( SAMPLESW_ENDPOINT, &zclSampleSw_DstAddr, FALSE, 0 );
   \   000024                ; Setup parameters for call to function zcl_SendCommand
   \   000024   E4           CLR       A
   \   000025   F5..         MOV       ?V0,A
   \   000027   F5..         MOV       ?V1,A
   \   000029   78..         MOV       R0,#?V0
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   78..         MOV       R0,#?V0
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000038   78..         MOV       R0,#?V0
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000042   78..         MOV       R0,#?V0
   \   000044   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000047   75..01       MOV       ?V0,#0x1
   \   00004A   78..         MOV       R0,#?V0
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004F   75..02       MOV       ?V0,#0x2
   \   000052   78..         MOV       R0,#?V0
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000057   7C06         MOV       R4,#0x6
   \   000059   7D00         MOV       R5,#0x0
   \   00005B   7A..         MOV       R2,#zclSampleSw_DstAddr & 0xff
   \   00005D   7B..         MOV       R3,#(zclSampleSw_DstAddr >> 8) & 0xff
   \   00005F   7908         MOV       R1,#0x8
   \   000061   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000064   740B         MOV       A,#0xb
   \   000066   12....       LCALL     ?DEALLOC_XSTACK8
    310              
    311              // return unprocessed events
    312              return (events ^ SAMPLESW_TOGGLE_TEST_EVT);
   \   000069   EE           MOV       A,R6
   \   00006A   FA           MOV       R2,A
   \   00006B   EF           MOV       A,R7
   \   00006C   6410         XRL       A,#0x10
   \   00006E   02....       LJMP      ??zclSampleSw_event_loop_1 & 0xFFFF
    313            }
    314            
    315            
    316            if ( events & SYS_EVENT_MSG )
   \                     ??zclSampleSw_event_loop_0:
   \   000071   EB           MOV       A,R3
   \   000072   5480         ANL       A,#0x80
   \   000074   6003         JZ        $+5
   \   000076   02....       LJMP      ??zclSampleSw_event_loop_2 & 0xFFFF
    317            {
    318              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleSw_TaskID )) )
    319              {
    320                switch ( MSGpkt->hdr.event )
    321                {
    322                  case ZCL_INCOMING_MSG:
    323                    // Incoming ZCL Foundation command/response messages
    324                    zclSampleSw_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    325                    break;
    326          
    327                  case KEY_CHANGE:
    328                    zclSampleSw_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    329                    break;
    330          
    331                  case ZDO_STATE_CHANGE:
    332                    break;
    333          
    334          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    335                  case ZCL_OTA_CALLBACK_IND:
    336                    zclSampleSw_ProcessOTAMsgs( (zclOTA_CallbackMsg_t*)MSGpkt  );
    337                    break;
    338          #endif
    339          
    340                  default:
    341                    break;
    342                }
    343          
    344                // Release the memory
    345                osal_msg_deallocate( (uint8 *)MSGpkt );
    346              }
    347          
    348              // return unprocessed events
    349              return (events ^ SYS_EVENT_MSG);
    350            }
    351          
    352          #if ZG_BUILD_ENDDEVICE_TYPE    
    353            if ( events & SAMPLEAPP_END_DEVICE_REJOIN_EVT )
    354            {
    355              bdb_ZedAttemptRecoverNwk();
    356              return ( events ^ SAMPLEAPP_END_DEVICE_REJOIN_EVT );
    357            }
    358          #endif
    359          
    360            if ( events & SAMPLEAPP_LCD_AUTO_UPDATE_EVT )
   \   000079   EA           MOV       A,R2
   \   00007A   5410         ANL       A,#0x10
   \   00007C   7003         JNZ       $+5
   \   00007E   02....       LJMP      ??zclSampleSw_event_loop_3 & 0xFFFF
    361            {
    362              return ( events ^ SAMPLEAPP_LCD_AUTO_UPDATE_EVT );
   \   000081   EA           MOV       A,R2
   \   000082   6410         XRL       A,#0x10
   \   000084   02....       LJMP      ??zclSampleSw_event_loop_4 & 0xFFFF
    363            }
   \                     ??zclSampleSw_event_loop_5:
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   F5..         MOV       ?V2,A
   \   00008D   A2E5         MOV       C,0xE0 /* A   */.5
   \   00008F   5011         JNC       ??zclSampleSw_event_loop_6
   \   000091                ; Setup parameters for call to function HalLedSet
   \   000091   7A01         MOV       R2,#0x1
   \   000093   7902         MOV       R1,#0x2
   \   000095   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000098                ; Setup parameters for call to function bdb_StartCommissioning
   \   000098   790C         MOV       R1,#0xc
   \   00009A   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
   \   00009D                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   00009D   79FF         MOV       R1,#-0x1
   \   00009F   12....       LCALL     `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \                     ??zclSampleSw_event_loop_6:
   \   0000A2   E5..         MOV       A,?V2
   \   0000A4   A2E2         MOV       C,0xE0 /* A   */.2
   \   0000A6   5070         JNC       ??zclSampleSw_event_loop_7
   \   0000A8                ; Setup parameters for call to function HalLedSet
   \   0000A8   7A08         MOV       R2,#0x8
   \   0000AA   7902         MOV       R1,#0x2
   \   0000AC   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   0000AF                ; Setup parameters for call to function osal_mem_alloc
   \   0000AF   7A06         MOV       R2,#0x6
   \   0000B1   7B00         MOV       R3,#0x0
   \   0000B3   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000B6   8A..         MOV       ?V2,R2
   \   0000B8   8B..         MOV       ?V3,R3
   \   0000BA   EA           MOV       A,R2
   \   0000BB   4B           ORL       A,R3
   \   0000BC   6053         JZ        ??zclSampleSw_event_loop_8
   \   0000BE   8A82         MOV       DPL,R2
   \   0000C0   8B83         MOV       DPH,R3
   \   0000C2   7401         MOV       A,#0x1
   \   0000C4   F0           MOVX      @DPTR,A
   \   0000C5   A3           INC       DPTR
   \   0000C6   74FD         MOV       A,#-0x3
   \   0000C8   F0           MOVX      @DPTR,A
   \   0000C9   A3           INC       DPTR
   \   0000CA   74FF         MOV       A,#-0x1
   \   0000CC   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000CF   7421         MOV       A,#0x21
   \   0000D1   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000D4   A3           INC       DPTR
   \   0000D5   74..         MOV       A,#zclSampleSw_clusterRevision_all & 0xff
   \   0000D7   F0           MOVX      @DPTR,A
   \   0000D8   A3           INC       DPTR
   \   0000D9   74..         MOV       A,#(zclSampleSw_clusterRevision_all >> 8) & 0xff
   \   0000DB   F0           MOVX      @DPTR,A
   \   0000DC   90....       MOV       DPTR,#zclSampleSwSeqNum
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   F8           MOV       R0,A
   \   0000E1   7401         MOV       A,#0x1
   \   0000E3   28           ADD       A,R0
   \   0000E4   F0           MOVX      @DPTR,A
   \   0000E5                ; Setup parameters for call to function zcl_SendReportCmd
   \   0000E5   E8           MOV       A,R0
   \   0000E6   F5..         MOV       ?V4,A
   \   0000E8   78..         MOV       R0,#?V4
   \   0000EA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000ED   75..01       MOV       ?V4,#0x1
   \   0000F0   78..         MOV       R0,#?V4
   \   0000F2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F5   78..         MOV       R0,#?V4
   \   0000F7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FA   78..         MOV       R0,#?V2
   \   0000FC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FF   7C06         MOV       R4,#0x6
   \   000101   7D00         MOV       R5,#0x0
   \   000103   7A..         MOV       R2,#zclSampleSw_DstAddr & 0xff
   \   000105   7B..         MOV       R3,#(zclSampleSw_DstAddr >> 8) & 0xff
   \   000107   7908         MOV       R1,#0x8
   \   000109   12....       LCALL     `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
   \   00010C   7405         MOV       A,#0x5
   \   00010E   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??zclSampleSw_event_loop_8:
   \   000111                ; Setup parameters for call to function osal_mem_free
   \   000111   AA..         MOV       R2,?V2
   \   000113   AB..         MOV       R3,?V3
   \   000115   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??zclSampleSw_event_loop_7:
   \   000118                ; Setup parameters for call to function osal_msg_deallocate
   \   000118   AA..         MOV       R2,?V0
   \   00011A   AB..         MOV       R3,?V1
   \   00011C   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zclSampleSw_event_loop_2:
   \   00011F                ; Setup parameters for call to function osal_msg_receive
   \   00011F   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000122   E0           MOVX      A,@DPTR
   \   000123   F9           MOV       R1,A
   \   000124   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000127   8A..         MOV       ?V0,R2
   \   000129   8B..         MOV       ?V1,R3
   \   00012B   EA           MOV       A,R2
   \   00012C   4B           ORL       A,R3
   \   00012D   6017         JZ        ??zclSampleSw_event_loop_9
   \   00012F   8A82         MOV       DPL,R2
   \   000131   8B83         MOV       DPH,R3
   \   000133   E0           MOVX      A,@DPTR
   \   000134   24CC         ADD       A,#-0x34
   \   000136   6009         JZ        ??zclSampleSw_event_loop_10
   \   000138   2474         ADD       A,#0x74
   \   00013A   7003         JNZ       $+5
   \   00013C   02....       LJMP      ??zclSampleSw_event_loop_5 & 0xFFFF
   \   00013F   80D7         SJMP      ??zclSampleSw_event_loop_7
   \                     ??zclSampleSw_event_loop_10:
   \   000141                ; Setup parameters for call to function zclSampleSw_ProcessIncomingMsg
   \   000141   12....       LCALL     `??zclSampleSw_ProcessIncomingMsg::?relay`; Banked call to: zclSampleSw_ProcessIncomingMsg
   \   000144   80D2         SJMP      ??zclSampleSw_event_loop_7
   \                     ??zclSampleSw_event_loop_9:
   \   000146   EE           MOV       A,R6
   \   000147   FA           MOV       R2,A
   \   000148   EF           MOV       A,R7
   \   000149   6480         XRL       A,#0x80
   \                     ??zclSampleSw_event_loop_1:
   \   00014B   FB           MOV       R3,A
   \   00014C   800F         SJMP      ??zclSampleSw_event_loop_11
    364          
    365            if ( events & SAMPLEAPP_KEY_AUTO_REPEAT_EVT )
   \                     ??zclSampleSw_event_loop_3:
   \   00014E   EA           MOV       A,R2
   \   00014F   5420         ANL       A,#0x20
   \   000151   6006         JZ        ??zclSampleSw_event_loop_12
    366            {
    367              return ( events ^ SAMPLEAPP_KEY_AUTO_REPEAT_EVT );
   \   000153   EA           MOV       A,R2
   \   000154   6420         XRL       A,#0x20
   \                     ??zclSampleSw_event_loop_4:
   \   000156   FA           MOV       R2,A
   \   000157   8004         SJMP      ??zclSampleSw_event_loop_11
    368            }
    369            // Discard unknown events
    370            return 0;
   \                     ??zclSampleSw_event_loop_12:
   \   000159   7A00         MOV       R2,#0x0
   \   00015B   7B00         MOV       R3,#0x0
   \                     ??zclSampleSw_event_loop_11:
   \   00015D   7F06         MOV       R7,#0x6
   \   00015F   02....       LJMP      ?BANKED_LEAVE_XDATA
    371          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET
    372          
    373          /*********************************************************************
    374           * @fn      zclSampleSw_HandleKeys
    375           *
    376           * @brief   Handles all key events for this device.
    377           *
    378           * @param   shift - true if in shift/alt.
    379           * @param   keys - bit field for key events. Valid entries:
    380           *                 HAL_KEY_SW_5
    381           *                 HAL_KEY_SW_4
    382           *                 HAL_KEY_SW_2
    383           *                 HAL_KEY_SW_1
    384           *
    385           * @return  none
    386           */
    387          static void zclSampleSw_HandleKeys( byte shift, byte keys )
    388          {
    389            if ( keys & HAL_KEY_SW_6 ) //key1
    390            {
    391              HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
    392              bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_FORMATION | BDB_COMMISSIONING_MODE_FINDING_BINDING );  //Coordiinator
    393              NLME_PermitJoiningRequest( 0xff );
    394            }    
    395            if ( keys & HAL_KEY_SW_5 ) //key2
    396            {
    397              HalLedSet ( HAL_LED_2, HAL_LED_MODE_TOGGLE );
    398              //zclGeneral_SendOnOff_CmdToggle( SAMPLESW_ENDPOINT, &zclSampleSw_DstAddr, FALSE, 0 );
    399              Send_Test();
    400            }
    401          }
    402          
    403          
    404          /*********************************************************************
    405           * @fn      zclSampleSw_ProcessCommissioningStatus
    406           *
    407           * @brief   Callback in which the status of the commissioning process are reported
    408           *
    409           * @param   bdbCommissioningModeMsg - Context message of the status of a commissioning process
    410           *
    411           * @return  none
    412           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    413          static void zclSampleSw_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
   \                     zclSampleSw_ProcessCommissioningStatus:
    414          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    415            switch(bdbCommissioningModeMsg->bdbCommissioningMode)
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   6402         XRL       A,#0x2
   \   000011   701B         JNZ       ??zclSampleSw_ProcessCommissioningStatus_0
    416            {
    417              case BDB_COMMISSIONING_FORMATION:
    418                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \   000013   8A82         MOV       DPL,R2
   \   000015   8B83         MOV       DPH,R3
   \   000017   E0           MOVX      A,@DPTR
   \   000018   7014         JNZ       ??zclSampleSw_ProcessCommissioningStatus_0
    419                {
    420                  //After formation, perform nwk steering again plus the remaining commissioning modes that has not been processed yet
    421                  HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
   \   00001A                ; Setup parameters for call to function HalLedSet
   \   00001A   7A01         MOV       R2,#0x1
   \   00001C   7901         MOV       R1,#0x1
   \   00001E   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    422                  bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
   \   000021                ; Setup parameters for call to function bdb_StartCommissioning
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   4402         ORL       A,#0x2
   \   00002A   F9           MOV       R1,A
   \   00002B   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    423                }
    424                else
    425                {
    426                  //Want to try other channels?
    427                  //try with bdb_setChannelAttribute
    428                }
    429              break;
    430              case BDB_COMMISSIONING_NWK_STEERING:
    431                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    432                {
    433                  //YOUR JOB:
    434                  //We are on the nwk, what now?
    435                }
    436                else
    437                {
    438                  //See the possible errors for nwk steering procedure
    439                  //No suitable networks found
    440                  //Want to try other channels?
    441                  //try with bdb_setChannelAttribute
    442                }
    443              break;
    444              case BDB_COMMISSIONING_FINDING_BINDING:
    445                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    446                {
    447                  //YOUR JOB:
    448                }
    449                else
    450                {
    451                  //YOUR JOB:
    452                  //retry?, wait for user interaction?
    453                }
    454              break;
    455              case BDB_COMMISSIONING_INITIALIZATION:
    456                //Initialization notification can only be successful. Failure on initialization 
    457                //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
    458                
    459                //YOUR JOB:
    460                //We are on a network, what now?
    461                
    462              break;
    463          #if ZG_BUILD_ENDDEVICE_TYPE    
    464              case BDB_COMMISSIONING_PARENT_LOST:
    465                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
    466                {
    467                  //We did recover from losing parent
    468                }
    469                else
    470                {
    471                  //Parent not found, attempt to rejoin again after a fixed delay
    472                  osal_start_timerEx(zclSampleSw_TaskID, SAMPLEAPP_END_DEVICE_REJOIN_EVT, SAMPLEAPP_END_DEVICE_REJOIN_DELAY);
    473                }
    474              break;
    475          #endif 
    476            }
    477            
    478          }
   \                     ??zclSampleSw_ProcessCommissioningStatus_0:
   \   00002E   02....       LJMP      ?Subroutine0 & 0xFFFF
    479          
    480          /*********************************************************************
    481           * @fn      zclSampleSw_BasicResetCB
    482           *
    483           * @brief   Callback from the ZCL General Cluster Library
    484           *          to set all the Basic Cluster attributes to  default values.
    485           *
    486           * @param   none
    487           *
    488           * @return  none
    489           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    490          static void zclSampleSw_BasicResetCB( void )
   \                     zclSampleSw_BasicResetCB:
    491          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    492            zclSampleSw_ResetAttributesToDefaultValues();
   \   000004                ; Setup parameters for call to function zclSampleSw_ResetAttributesToDefaultValues
   \   000004   12....       LCALL     `??zclSampleSw_ResetAttributesToDefaultValues::?`; Banked call to: zclSampleSw_ResetAttributesToDefaultValues
    493          }
   \   000007                REQUIRE ?Subroutine1
   \   000007                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    494          
    495          /*********************************************************************
    496           * @fn      zclSampleApp_BatteryWarningCB
    497           *
    498           * @brief   Called to handle battery-low situation.
    499           *
    500           * @param   voltLevel - level of severity
    501           *
    502           * @return  none
    503           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    504          void zclSampleApp_BatteryWarningCB( uint8 voltLevel )
   \                     zclSampleApp_BatteryWarningCB:
    505          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    506            if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
    507            {
    508              // Send warning message to the gateway and blink LED
    509            }
    510            else if ( voltLevel == VOLT_LEVEL_BAD )
    511            {
    512              // Shut down the system
    513            }
    514          }
   \   000000   02....       LJMP      ?BRET
    515          
    516          /******************************************************************************
    517           *
    518           *  Functions for processing ZCL Foundation incoming Command/Response messages
    519           *
    520           *****************************************************************************/
    521          
    522          /*********************************************************************
    523           * @fn      zclSampleSw_ProcessIncomingMsg
    524           *
    525           * @brief   Process ZCL Foundation incoming message
    526           *
    527           * @param   pInMsg - pointer to the received message
    528           *
    529           * @return  none
    530           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    531          static void zclSampleSw_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSw_ProcessIncomingMsg:
    532          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    533            switch ( pInMsg->zclHdr.commandID )
   \   000005   EA           MOV       A,R2
   \   000006   2417         ADD       A,#0x17
   \   000008   F8           MOV       R0,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F9           MOV       R1,A
   \   00000C   E8           MOV       A,R0
   \   00000D   FE           MOV       R6,A
   \   00000E   E9           MOV       A,R1
   \   00000F   FF           MOV       R7,A
   \   000010   8A82         MOV       DPL,R2
   \   000012   8B83         MOV       DPH,R3
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   14           DEC       A
   \   00001D   6016         JZ        ??zclSampleSw_ProcessIncomingMsg_0
   \   00001F   24FD         ADD       A,#-0x3
   \   000021   601F         JZ        ??zclSampleSw_ProcessIncomingMsg_1
   \   000023   24F7         ADD       A,#-0x9
   \   000025   602D         JZ        ??zclSampleSw_ProcessIncomingMsg_2
   \   000027   24FB         ADD       A,#-0x5
   \   000029   6024         JZ        ??zclSampleSw_ProcessIncomingMsg_3
   \   00002B   24FE         ADD       A,#-0x2
   \   00002D   6020         JZ        ??zclSampleSw_ProcessIncomingMsg_3
   \   00002F   24FE         ADD       A,#-0x2
   \   000031   6033         JZ        ??zclSampleSw_ProcessIncomingMsg_4
   \   000033   8043         SJMP      ??zclSampleSw_ProcessIncomingMsg_5
    534            {
    535          #ifdef ZCL_READ
    536              case ZCL_CMD_READ_RSP:
    537                zclSampleSw_ProcessInReadRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_0:
   \   000035   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F9           MOV       R1,A
   \   00003A   E8           MOV       A,R0
   \   00003B   C3           CLR       C
   \   00003C   99           SUBB      A,R1
   \   00003D   5039         JNC       ??zclSampleSw_ProcessIncomingMsg_5
   \   00003F   08           INC       R0
   \   000040   80F6         SJMP      ??CrossCallReturnLabel_0
    538                break;
    539          #endif
    540          #ifdef ZCL_WRITE
    541              case ZCL_CMD_WRITE_RSP:
    542                zclSampleSw_ProcessInWriteRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_1:
   \   000042   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F9           MOV       R1,A
   \   000047   E8           MOV       A,R0
   \   000048   C3           CLR       C
   \   000049   99           SUBB      A,R1
   \   00004A   502C         JNC       ??zclSampleSw_ProcessIncomingMsg_5
   \   00004C   08           INC       R0
   \   00004D   80F6         SJMP      ??CrossCallReturnLabel_1
    543                break;
    544          #endif
    545          #ifdef ZCL_REPORT
    546              // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
    547              case ZCL_CMD_CONFIG_REPORT:
    548                //zclSampleSw_ProcessInConfigReportCmd( pInMsg );
    549                break;
    550          
    551              case ZCL_CMD_CONFIG_REPORT_RSP:
    552                //zclSampleSw_ProcessInConfigReportRspCmd( pInMsg );
    553                break;
    554          
    555              case ZCL_CMD_READ_REPORT_CFG:
    556                //zclSampleSw_ProcessInReadReportCfgCmd( pInMsg );
    557                break;
    558          
    559              case ZCL_CMD_READ_REPORT_CFG_RSP:
    560                //zclSampleSw_ProcessInReadReportCfgRspCmd( pInMsg );
    561                break;
    562          
    563              case ZCL_CMD_REPORT:
    564                //zclSampleSw_ProcessInReportCmd( pInMsg );
    565                break;
    566          #endif
    567              case ZCL_CMD_DEFAULT_RSP:
    568                zclSampleSw_ProcessInDefaultRspCmd( pInMsg );
    569                break;
    570          #ifdef ZCL_DISCOVER
    571              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
    572                zclSampleSw_ProcessInDiscCmdsRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_3:
   \   00004F                ; Setup parameters for call to function zclSampleSw_ProcessInDiscCmdsRspCmd
    573                break;
    574          
    575              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
    576                zclSampleSw_ProcessInDiscCmdsRspCmd( pInMsg );
   \   00004F                ; Setup parameters for call to function zclSampleSw_ProcessInDiscCmdsRspCmd
   \   00004F   12....       LCALL     `??zclSampleSw_ProcessInDiscCmdsRspCmd::?relay`; Banked call to: zclSampleSw_ProcessInDiscCmdsRspCmd
    577                break;
   \   000052   8024         SJMP      ??zclSampleSw_ProcessIncomingMsg_5
    578          
    579              case ZCL_CMD_DISCOVER_ATTRS_RSP:
    580                zclSampleSw_ProcessInDiscAttrsRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_2:
   \   000054   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000057   8882         MOV       DPL,R0
   \   000059   8983         MOV       DPH,R1
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   FB           MOV       R3,A
   \   00005E   EA           MOV       A,R2
   \   00005F   C3           CLR       C
   \   000060   9B           SUBB      A,R3
   \   000061   5015         JNC       ??zclSampleSw_ProcessIncomingMsg_5
   \   000063   0A           INC       R2
   \   000064   80F1         SJMP      ??CrossCallReturnLabel_5
    581                break;
    582          
    583              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
    584                zclSampleSw_ProcessInDiscAttrsExtRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_4:
   \   000066   12....       LCALL     ?Subroutine2 & 0xFFFF
    585                break;
    586          #endif
    587              default:
    588                break;
    589            }
   \                     ??CrossCallReturnLabel_6:
   \   000069   8001         SJMP      ??zclSampleSw_ProcessIncomingMsg_6
   \                     ??zclSampleSw_ProcessIncomingMsg_7:
   \   00006B   0A           INC       R2
   \                     ??zclSampleSw_ProcessIncomingMsg_6:
   \   00006C   8882         MOV       DPL,R0
   \   00006E   8983         MOV       DPH,R1
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   FB           MOV       R3,A
   \   000073   EA           MOV       A,R2
   \   000074   C3           CLR       C
   \   000075   9B           SUBB      A,R3
   \   000076   40F3         JC        ??zclSampleSw_ProcessIncomingMsg_7
    590          
    591            if ( pInMsg->attrCmd )
   \                     ??zclSampleSw_ProcessIncomingMsg_5:
   \   000078   8E82         MOV       DPL,R6
   \   00007A   8F83         MOV       DPH,R7
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   FA           MOV       R2,A
   \   00007E   A3           INC       DPTR
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   FB           MOV       R3,A
   \   000081   EA           MOV       A,R2
   \   000082   4B           ORL       A,R3
   \   000083   6003         JZ        ??zclSampleSw_ProcessIncomingMsg_8
    592              osal_mem_free( pInMsg->attrCmd );
   \   000085                ; Setup parameters for call to function osal_mem_free
   \   000085   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    593          }
   \                     ??zclSampleSw_ProcessIncomingMsg_8:
   \   000088   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F8           MOV       R0,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   8882         MOV       DPL,R0
   \   00000A   F583         MOV       DPH,A
   \   00000C   7800         MOV       R0,#0x0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004                REQUIRE ??Subroutine5_0
   \   000004                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   7A00         MOV       R2,#0x0
   \   000007   22           RET
    594          
    595          #ifdef ZCL_READ
    596          /*********************************************************************
    597           * @fn      zclSampleSw_ProcessInReadRspCmd
    598           *
    599           * @brief   Process the "Profile" Read Response Command
    600           *
    601           * @param   pInMsg - incoming message to process
    602           *
    603           * @return  none
    604           */
    605          static uint8 zclSampleSw_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
    606          {
    607            zclReadRspCmd_t *readRspCmd;
    608            uint8 i;
    609          
    610            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
    611            for (i = 0; i < readRspCmd->numAttr; i++)
    612            {
    613              // Notify the originator of the results of the original read attributes
    614              // attempt and, for each successfull request, the value of the requested
    615              // attribute
    616            }
    617          
    618            return TRUE;
    619          }
    620          #endif // ZCL_READ
    621          
    622          #ifdef ZCL_WRITE
    623          /*********************************************************************
    624           * @fn      zclSampleSw_ProcessInWriteRspCmd
    625           *
    626           * @brief   Process the "Profile" Write Response Command
    627           *
    628           * @param   pInMsg - incoming message to process
    629           *
    630           * @return  none
    631           */
    632          static uint8 zclSampleSw_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
    633          {
    634            zclWriteRspCmd_t *writeRspCmd;
    635            uint8 i;
    636          
    637            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
    638            for (i = 0; i < writeRspCmd->numAttr; i++)
    639            {
    640              // Notify the device of the results of the its original write attributes
    641              // command.
    642            }
    643          
    644            return TRUE;
    645          }
    646          #endif // ZCL_WRITE
    647          
    648          /*********************************************************************
    649           * @fn      zclSampleSw_ProcessInDefaultRspCmd
    650           *
    651           * @brief   Process the "Profile" Default Response Command
    652           *
    653           * @param   pInMsg - incoming message to process
    654           *
    655           * @return  none
    656           */
    657          static uint8 zclSampleSw_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
    658          {
    659            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
    660            // Device is notified of the Default Response command.
    661            (void)pInMsg;
    662            return TRUE;
    663          }
    664          
    665          #ifdef ZCL_DISCOVER
    666          /*********************************************************************
    667           * @fn      zclSampleSw_ProcessInDiscCmdsRspCmd
    668           *
    669           * @brief   Process the Discover Commands Response Command
    670           *
    671           * @param   pInMsg - incoming message to process
    672           *
    673           * @return  none
    674           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    675          static uint8 zclSampleSw_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSw_ProcessInDiscCmdsRspCmd:
    676          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    677            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
    678            uint8 i;
    679          
    680            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
   \   000004   EA           MOV       A,R2
   \   000005   2417         ADD       A,#0x17
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F583         MOV       DPH,A
   \   00000D   12....       LCALL     ??Subroutine5_0 & 0xFFFF
    681            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
   \                     ??CrossCallReturnLabel_4:
   \   000010   8001         SJMP      ??zclSampleSw_ProcessInDiscCmdsRspCmd_0
   \                     ??zclSampleSw_ProcessInDiscCmdsRspCmd_1:
   \   000012   0A           INC       R2
   \                     ??zclSampleSw_ProcessInDiscCmdsRspCmd_0:
   \   000013   8882         MOV       DPL,R0
   \   000015   8983         MOV       DPH,R1
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FB           MOV       R3,A
   \   00001B   EA           MOV       A,R2
   \   00001C   C3           CLR       C
   \   00001D   9B           SUBB      A,R3
   \   00001E   40F2         JC        ??zclSampleSw_ProcessInDiscCmdsRspCmd_1
    682            {
    683              // Device is notified of the result of its attribute discovery command.
    684            }
    685          
    686            return TRUE;
   \   000020   7901         MOV       R1,#0x1
   \   000022   02....       LJMP      ?Subroutine1 & 0xFFFF
    687          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleSw_OnOffSwitchType>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleSw_TestEp>`:
   \   000000   08           DB 8
   \   000001   00           DB 0
   \   000002   ....         DW zclSampleSw_TaskID
   \   000004   0000         DW 0H
   \   000006   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleSw_NwkState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleSw_CmdCallbacks>`:
   \   000000   ....         DW `??zclSampleSw_BasicResetCB::?relay`
   \   000002   0000         DW 0H
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   0000         DW 0H
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1f4:
   \   000000   F4010000     DD 500
    688          
    689          /*********************************************************************
    690           * @fn      zclSampleSw_ProcessInDiscAttrsRspCmd
    691           *
    692           * @brief   Process the "Profile" Discover Attributes Response Command
    693           *
    694           * @param   pInMsg - incoming message to process
    695           *
    696           * @return  none
    697           */
    698          static uint8 zclSampleSw_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
    699          {
    700            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
    701            uint8 i;
    702          
    703            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
    704            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
    705            {
    706              // Device is notified of the result of its attribute discovery command.
    707            }
    708          
    709            return TRUE;
    710          }
    711          
    712          /*********************************************************************
    713           * @fn      zclSampleSw_ProcessInDiscAttrsExtRspCmd
    714           *
    715           * @brief   Process the "Profile" Discover Attributes Extended Response Command
    716           *
    717           * @param   pInMsg - incoming message to process
    718           *
    719           * @return  none
    720           */
    721          static uint8 zclSampleSw_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
    722          {
    723            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
    724            uint8 i;
    725          
    726            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
    727            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
    728            {
    729              // Device is notified of the result of its attribute discovery command.
    730            }
    731          
    732            return TRUE;
    733          }
    734          #endif // ZCL_DISCOVER
    735          
    736          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    737          /*********************************************************************
    738           * @fn      zclSampleSw_ProcessOTAMsgs
    739           *
    740           * @brief   Called to process callbacks from the ZCL OTA.
    741           *
    742           * @param   none
    743           *
    744           * @return  none
    745           */
    746          static void zclSampleSw_ProcessOTAMsgs( zclOTA_CallbackMsg_t* pMsg )
    747          {
    748            uint8 RxOnIdle;
    749          
    750            switch(pMsg->ota_event)
    751            {
    752            case ZCL_OTA_START_CALLBACK:
    753              if (pMsg->hdr.status == ZSuccess)
    754              {
    755                // Speed up the poll rate
    756                RxOnIdle = TRUE;
    757                ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    758                NLME_SetPollRate( 2000 );
    759              }
    760              break;
    761          
    762            case ZCL_OTA_DL_COMPLETE_CALLBACK:
    763              if (pMsg->hdr.status == ZSuccess)
    764              {
    765                // Reset the CRC Shadow and reboot.  The bootloader will see the
    766                // CRC shadow has been cleared and switch to the new image
    767                HalOTAInvRC();
    768                SystemReset();
    769              }
    770              else
    771              {
    772          #if (ZG_BUILD_ENDDEVICE_TYPE)    
    773                // slow the poll rate back down.
    774                RxOnIdle = FALSE;
    775                ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    776                NLME_SetPollRate(DEVICE_POLL_RATE);
    777          #endif
    778              }
    779              break;
    780          
    781            default:
    782              break;
    783            }
    784          }
    785          #endif // defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    786          
    787          /****************************************************************************
    788          ****************************************************************************/
    789          static void Send_Test( void )
    790          {
    791            zclReportCmd_t *pReportCmd;
    792            
    793            pReportCmd = osal_mem_alloc( sizeof(zclReportCmd_t) + sizeof(zclReport_t) );
    794            
    795            if ( pReportCmd != NULL )
    796            {
    797              pReportCmd->numAttr = 1;
    798              pReportCmd->attrList[0].attrID = ATTRID_CLUSTER_REVISION;
    799              pReportCmd->attrList[0].dataType = ZCL_DATATYPE_UINT16;
    800              pReportCmd->attrList[0].attrData = (void *)(&zclSampleSw_clusterRevision_all);
    801              zcl_SendReportCmd(SAMPLESW_ENDPOINT, 
    802                                &zclSampleSw_DstAddr,
    803                                ZCL_CLUSTER_ID_GEN_ON_OFF,
    804                                pReportCmd, ZCL_FRAME_SERVER_CLIENT_DIR, TRUE, zclSampleSwSeqNum++);
    805            }
    806          
    807            osal_mem_free( pReportCmd );  
    808          
    809          }
    810          
    811          
    812          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   zclSampleApp_BatteryWarningCB
      2      0   zclSampleSw_BasicResetCB
        2      0   -> zclSampleSw_ResetAttributesToDefaultValues
      0      9   zclSampleSw_Init
        0      9   -> RegisterForKeys
        0      9   -> RegisterVoltageWarningCB
        0      9   -> afRegister
        0      9   -> bdb_RegisterCommissioningStatusCB
        0      9   -> bdb_RegisterSimpleDescriptor
        0      9   -> zclGeneral_RegisterCmdCallbacks
        0      9   -> zclSampleSw_ResetAttributesToDefaultValues
        0      9   -> zcl_registerAttrList
        0      9   -> zcl_registerForMsg
      0      9   zclSampleSw_ProcessCommissioningStatus
        0      9   -> HalLedSet
        0      9   -> bdb_StartCommissioning
      2      9   zclSampleSw_ProcessInDiscCmdsRspCmd
      0     23   zclSampleSw_ProcessIncomingMsg
        0      9   -> osal_mem_free
        0      9   -> zclSampleSw_ProcessInDiscCmdsRspCmd
      0     25   zclSampleSw_event_loop
        0     14   -> HalLedSet
        0     14   -> NLME_PermitJoiningRequest
        0     14   -> bdb_StartCommissioning
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
        0     18   -> osal_start_timerEx
        0     14   -> zclSampleSw_ProcessIncomingMsg
        0     25   -> zcl_SendCommand
        0     19   -> zcl_SendReportCmd


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?<Initializer for sampleSw_TestEp>
      18  ?<Initializer for zclSampleSw_CmdCallbacks>
       1  ?<Initializer for zclSampleSw_NwkState>
       1  ?<Initializer for zclSampleSw_OnOffSwitchType>
       8  ??Subroutine5_0
       5  ?Subroutine0
       7  ?Subroutine1
       4  ?Subroutine2
      15  ?Subroutine3
       9  ?Subroutine4
       4  __Constant_1f4
       7  sampleSw_TestEp
       3  zclSampleApp_BatteryWarningCB
       1  zclSampleSwSeqNum
       7  zclSampleSw_BasicResetCB
      18  zclSampleSw_CmdCallbacks
      12  zclSampleSw_DstAddr
     105  zclSampleSw_Init
       1  zclSampleSw_NwkState
       1  zclSampleSw_OnOffSwitchActions
       1  zclSampleSw_OnOffSwitchType
      49  zclSampleSw_ProcessCommissioningStatus
      37  zclSampleSw_ProcessInDiscCmdsRspCmd
     139  zclSampleSw_ProcessIncomingMsg
       1  zclSampleSw_TaskID
     354  zclSampleSw_event_loop
      42  -- Other

 
 742 bytes in segment BANKED_CODE
  42 bytes in segment BANK_RELAYS
  27 bytes in segment XDATA_I
  27 bytes in segment XDATA_ID
   4 bytes in segment XDATA_ROM_C
  15 bytes in segment XDATA_Z
 
  69 bytes of CODE     memory
   0 bytes of CONST    memory (+ 4 bytes shared)
 742 bytes of HUGECODE memory
  42 bytes of XDATA    memory

Errors: none
Warnings: none
