###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               29/Jul/2020  20:22:34
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EWB66B.tmp ("D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c"
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1
#        -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_GROUPS -D
#        BDB_TL_INITIATOR -D INTER_PAN -lC "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\List\zcl_samplesw.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\Obj\zcl_samplesw.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c
      1          /**************************************************************************************************
      2            Filename:       zcl_samplesw.c
      3            Revised:        $Date: 2015-08-19 17:11:00 -0700 (Wed, 19 Aug 2015) $
      4            Revision:       $Revision: 44460 $
      5          
      6            Description:    Zigbee Cluster Library - sample switch application.
      7          
      8          
      9            Copyright 2006-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application implements a ZigBee On/Off Switch, based on Z-Stack 3.0.
     42          
     43            This application is based on the common sample-application user interface. Please see the main
     44            comment in zcl_sampleapp_ui.c. The rest of this comment describes only the content specific for
     45            this sample applicetion.
     46            
     47            Application-specific UI peripherals being used:
     48          
     49            - none (LED1 is currently unused by this application).
     50          
     51            Application-specific menu system:
     52          
     53              <TOGGLE LIGHT> Send an On, Off or Toggle command targeting appropriate devices from the binding table.
     54                Pressing / releasing [OK] will have the following functionality, depending on the value of the 
     55                zclSampleSw_OnOffSwitchActions attribute:
     56                - OnOffSwitchActions == 0: pressing [OK] will send ON command, releasing it will send OFF command;
     57                - OnOffSwitchActions == 1: pressing [OK] will send OFF command, releasing it will send ON command;
     58                - OnOffSwitchActions == 2: pressing [OK] will send TOGGLE command, releasing it will not send any command.
     59          
     60          *********************************************************************/
     61          
     62          #if ! defined ZCL_ON_OFF
     63          #error ZCL_ON_OFF must be defined for this project.
     64          #endif
     65          
     66          /*********************************************************************
     67           * INCLUDES
     68           */
     69          #include "ZComDef.h"
     70          #include "OSAL.h"
     71          #include "AF.h"
     72          #include "ZDApp.h"
     73          #include "ZDObject.h"
     74          #include "ZDProfile.h"
     75          #include "MT_SYS.h"
     76          
     77          #include "zcl.h"
     78          #include "zcl_general.h"
     79          #include "zcl_ha.h"
     80          #include "zcl_samplesw.h"
     81          #include "zcl_diagnostic.h"
     82          
     83          #include "onboard.h"
     84          
     85          /* HAL */
     86          #include "hal_lcd.h"
     87          #include "hal_led.h"
     88          #include "hal_key.h"
     89          
     90          /* UART */
     91          #include "uart0.h"
     92          #include "user_printf.h"
     93          
     94          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
     95          #include "zcl_ota.h"
     96          #include "hal_ota.h"
     97          #endif
     98          
     99          #include "bdb.h"
    100          #include "bdb_interface.h"
    101          #include "bdb_touchlink_initiator.h"
    102          
    103          /*********************************************************************
    104           * MACROS
    105           */
    106          
    107          #define APP_TITLE "TI Sample Switch"
    108          
    109          /*********************************************************************
    110           * TYPEDEFS
    111           */
    112          
    113          /*********************************************************************
    114           * GLOBAL VARIABLES
    115           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    116          byte zclSampleSw_TaskID;
   \                     zclSampleSw_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    117          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          uint8 zclSampleSwSeqNum;
   \                     zclSampleSwSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    119          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    120          uint8 zclSampleSw_OnOffSwitchType = ON_OFF_SWITCH_TYPE_MOMENTARY;
   \                     zclSampleSw_OnOffSwitchType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleSw_OnOffSwitchType>`
   \   000001                REQUIRE __INIT_XDATA_I
    121          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    122          uint8 zclSampleSw_OnOffSwitchActions;
   \                     zclSampleSw_OnOffSwitchActions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    123          
    124          /*********************************************************************
    125           * GLOBAL FUNCTIONS
    126           */
    127          //extern ZStatus_t touchLinkInitiator_StartDevDisc( void );
    128          //extern ZStatus_t touchLinkInitiator_ResetToFNSelectedTarget( void );
    129          /*********************************************************************
    130           * LOCAL VARIABLES
    131           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          afAddrType_t zclSampleSw_DstAddr;
   \                     zclSampleSw_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          afAddrType_t SW_DstAddr;
   \                     SW_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    134          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          uint16 SourceAddr;
   \                     SourceAddr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    136          // Endpoint to allow SYS_APP_MSGs
    137          
    138          //static uint8 aProcessCmd[] = { 1, 0, 0, 0 }; // used for reset command, { length + cmd0 + cmd1 + data }
    139          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    140          devStates_t zclSampleSw_NwkState = DEV_INIT;
   \                     zclSampleSw_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleSw_NwkState>`
   \   000001                REQUIRE __INIT_XDATA_I
    141          
    142          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    143          #define DEVICE_POLL_RATE                 8000   // Poll rate for end device
    144          #endif
    145          
    146          #define SAMPLESW_TOGGLE_TEST_EVT   0x1000
    147          /*********************************************************************
    148           * LOCAL FUNCTIONS
    149           */
    150          static void Send_To_SW1( void );
    151          static void Send_To_SW2( void );
    152          //static void Send_To_SW3( void );
    153          
    154          static void zclSampleSw_HandleKeys( byte shift, byte keys );
    155          static void zclSampleSw_BasicResetCB( void );
    156          
    157          static void zclSampleSw_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg);
    158          
    159          
    160          // Functions to process ZCL Foundation incoming Command/Response messages
    161          static void zclSampleSw_ProcessInReportCmd( zclIncomingMsg_t *pInMsg );
    162          
    163          static void zclSampleSw_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    164          #ifdef ZCL_READ
    165          static uint8 zclSampleSw_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    166          #endif
    167          #ifdef ZCL_WRITE
    168          static uint8 zclSampleSw_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    169          #endif
    170          static uint8 zclSampleSw_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    171          #ifdef ZCL_DISCOVER
    172          static uint8 zclSampleSw_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    173          static uint8 zclSampleSw_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    174          static uint8 zclSampleSw_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    175          #endif
    176          
    177          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    178          static void zclSampleSw_ProcessOTAMsgs( zclOTA_CallbackMsg_t* pMsg );
    179          #endif
    180          
    181          
    182          static void zclSampleApp_BatteryWarningCB( uint8 voltLevel);
    183          
    184          
    185          /*********************************************************************
    186           * CONSTANTS
    187           */
    188          
    189            
    190          /*********************************************************************
    191           * REFERENCED EXTERNALS
    192           */
    193          extern int16 zdpExternalStateTaskID;
    194          
    195          /*********************************************************************
    196           * ZCL General Profile Callback table
    197           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    198          static zclGeneral_AppCallbacks_t zclSampleSw_CmdCallbacks =
   \                     zclSampleSw_CmdCallbacks:
   \   000000                DS 18
   \   000012                REQUIRE `?<Initializer for zclSampleSw_CmdCallbacks>`
   \   000012                REQUIRE __INIT_XDATA_I
    199          {
    200            zclSampleSw_BasicResetCB,               // Basic Cluster Reset command
    201            NULL,                                   // Identify Trigger Effect command
    202            NULL,                                   // On/Off cluster commands
    203            NULL,                                   // On/Off cluster enhanced command Off with Effect
    204            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    205            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    206          #ifdef ZCL_LEVEL_CTRL
    207            NULL,                                   // Level Control Move to Level command
    208            NULL,                                   // Level Control Move command
    209            NULL,                                   // Level Control Step command
    210            NULL,                                   // Level Control Stop command
    211          #endif
    212          #ifdef ZCL_GROUPS
    213            NULL,                                   // Group Response commands
    214          #endif
    215          #ifdef ZCL_SCENES
    216            NULL,                                   // Scene Store Request command
    217            NULL,                                   // Scene Recall Request command
    218            NULL,                                   // Scene Response command
    219          #endif
    220          #ifdef ZCL_ALARMS
    221            NULL,                                   // Alarm (Response) commands
    222          #endif
    223          #ifdef SE_UK_EXT
    224            NULL,                                   // Get Event Log command
    225            NULL,                                   // Publish Event Log command
    226          #endif
    227            NULL,                                   // RSSI Location command
    228            NULL                                    // RSSI Location Response command
    229          };
    230          
    231          /*********************************************************************
    232           * @fn          zclSampleSw_Init
    233           *
    234           * @brief       Initialization function for the zclGeneral layer.
    235           *
    236           * @param       none
    237           *
    238           * @return      none
    239           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    240          void zclSampleSw_Init( byte task_id )
   \                     zclSampleSw_Init:
    241          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    242            zclSampleSw_TaskID = task_id;
   \   000006   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000009   F0           MOVX      @DPTR,A
    243          
    244            // Set destination address to indirect
    245            zclSampleSw_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000A   90....       MOV       DPTR,#zclSampleSw_DstAddr + 8
   \   00000D   E4           CLR       A
   \   00000E   F0           MOVX      @DPTR,A
    246            zclSampleSw_DstAddr.endPoint = 0;
   \   00000F   A3           INC       DPTR
   \   000010   F0           MOVX      @DPTR,A
    247            zclSampleSw_DstAddr.addr.shortAddr = 0;
   \   000011   90....       MOV       DPTR,#zclSampleSw_DstAddr
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   F0           MOVX      @DPTR,A
    248          
    249            //Initialize the Uart0
    250            Uart0_Init(HAL_UART_BR_115200);
   \   000017                ; Setup parameters for call to function Uart0_Init
   \   000017   7904         MOV       R1,#0x4
   \   000019   12....       LCALL     `??Uart0_Init::?relay`; Banked call to: Uart0_Init
    251          
    252            // Register the Uart0
    253            RegisterForUart0( zclSampleSw_TaskID );
   \   00001C                ; Setup parameters for call to function RegisterForUart0
   \   00001C   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F9           MOV       R1,A
   \   000021   12....       LCALL     `??RegisterForUart0::?relay`; Banked call to: RegisterForUart0
    254          
    255            // Register the Simple Descriptor for this application
    256            bdb_RegisterSimpleDescriptor( &zclSampleSw_SimpleDesc );
   \   000024                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   000024   7A..         MOV       R2,#zclSampleSw_SimpleDesc & 0xff
   \   000026   7B..         MOV       R3,#(zclSampleSw_SimpleDesc >> 8) & 0xff
   \   000028   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    257          
    258            // Register the ZCL General Cluster Library callback functions
    259            zclGeneral_RegisterCmdCallbacks( SW1_ENDPOINT, &zclSampleSw_CmdCallbacks );
   \   00002B                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   00002B   7A..         MOV       R2,#zclSampleSw_CmdCallbacks & 0xff
   \   00002D   7B..         MOV       R3,#(zclSampleSw_CmdCallbacks >> 8) & 0xff
   \   00002F   7908         MOV       R1,#0x8
   \   000031   12....       LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    260          
    261            zclSampleSw_ResetAttributesToDefaultValues();
   \   000034                ; Setup parameters for call to function zclSampleSw_ResetAttributesToDefaultValues
   \   000034   12....       LCALL     `??zclSampleSw_ResetAttributesToDefaultValues::?`; Banked call to: zclSampleSw_ResetAttributesToDefaultValues
    262            
    263            // Register the application's attribute list
    264            zcl_registerAttrList( SW1_ENDPOINT, zclSampleSw_NumAttributes, zclSampleSw_Attrs );
   \   000037                ; Setup parameters for call to function zcl_registerAttrList
   \   000037   7C..         MOV       R4,#zclSampleSw_Attrs & 0xff
   \   000039   7D..         MOV       R5,#(zclSampleSw_Attrs >> 8) & 0xff
   \   00003B   90....       MOV       DPTR,#zclSampleSw_NumAttributes
   \   00003E   E4           CLR       A
   \   00003F   93           MOVC      A,@A+DPTR
   \   000040   FA           MOV       R2,A
   \   000041   7908         MOV       R1,#0x8
   \   000043   12....       LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    265            
    266            // Register the Application to receive the unprocessed Foundation command/response messages
    267            zcl_registerForMsg( zclSampleSw_TaskID );
   \   000046                ; Setup parameters for call to function zcl_registerForMsg
   \   000046   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   F9           MOV       R1,A
   \   00004B   12....       LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    268            
    269            // Register low voltage NV memory protection application callback
    270            RegisterVoltageWarningCB( zclSampleApp_BatteryWarningCB );
   \   00004E                ; Setup parameters for call to function RegisterVoltageWarningCB
   \   00004E   7A..         MOV       R2,#`??zclSampleApp_BatteryWarningCB::?relay` & 0xff
   \   000050   7B..         MOV       R3,#(`??zclSampleApp_BatteryWarningCB::?relay` >> 8) & 0xff
   \   000052   12....       LCALL     `??RegisterVoltageWarningCB::?relay`; Banked call to: RegisterVoltageWarningCB
    271          
    272            // Register for all key events - This app will handle all key events
    273            RegisterForKeys( zclSampleSw_TaskID );
   \   000055                ; Setup parameters for call to function RegisterForKeys
   \   000055   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000058   E0           MOVX      A,@DPTR
   \   000059   F9           MOV       R1,A
   \   00005A   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    274            
    275            bdb_RegisterCommissioningStatusCB( zclSampleSw_ProcessCommissioningStatus );
   \   00005D                ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
   \   00005D   7A..         MOV       R2,#`??zclSampleSw_ProcessCommissioningStatus::?rela` & 0xff
   \   00005F   7B..         MOV       R3,#(`??zclSampleSw_ProcessCommissioningStatus::?rela` >> 8) & 0xff
   \   000061   12....       LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
    276            
    277          #ifdef ZCL_DIAGNOSTIC
    278            // Register the application's callback function to read/write attribute data.
    279            // This is only required when the attribute data format is unknown to ZCL.
    280            zcl_registerReadWriteCB( SAMPLESW_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
    281          
    282            if ( zclDiagnostic_InitStats() == ZSuccess )
    283            {
    284              // Here the user could start the timer to save Diagnostics to NV
    285            }
    286          #endif
    287          
    288          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    289            // Register for callback events from the ZCL OTA
    290            zclOTA_Register(zclSampleSw_TaskID);
    291          #endif
    292          
    293            zdpExternalStateTaskID = zclSampleSw_TaskID;
   \   000064   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000067   E0           MOVX      A,@DPTR
   \   000068   90....       MOV       DPTR,#zdpExternalStateTaskID
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   A3           INC       DPTR
   \   00006D   E4           CLR       A
   \   00006E   F0           MOVX      @DPTR,A
    294          
    295            bdb_StartCommissioning( BDB_COMMISSIONING_MODE_INITIATOR_TL );
   \   00006F                ; Setup parameters for call to function bdb_StartCommissioning
   \   00006F   7901         MOV       R1,#0x1
   \   000071   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    296            //printf("init successful\r\n");
    297          }
   \   000074                REQUIRE ?Subroutine0
   \   000074                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    298          
    299          /*********************************************************************
    300           * @fn          zclSample_event_loop
    301           *
    302           * @brief       Event Loop Processor for zclGeneral.
    303           *
    304           * @param       none
    305           *
    306           * @return      none
    307           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    308          uint16 zclSampleSw_event_loop( uint8 task_id, uint16 events )
   \                     zclSampleSw_event_loop:
    309          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    310            afIncomingMSGPacket_t *MSGpkt;
    311            (void)task_id;  // Intentionally unreferenced parameter
    312          
    313            //Send toggle every 500ms
    314            if( events & SAMPLESW_TOGGLE_TEST_EVT )
   \   000009   5410         ANL       A,#0x10
   \   00000B   6064         JZ        ??zclSampleSw_event_loop_0
    315            {
    316              osal_start_timerEx(zclSampleSw_TaskID,SAMPLESW_TOGGLE_TEST_EVT,500);
   \   00000D                ; Setup parameters for call to function osal_start_timerEx
   \   00000D   90....       MOV       DPTR,#__Constant_1f4
   \   000010   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000013   7A00         MOV       R2,#0x0
   \   000015   7B10         MOV       R3,#0x10
   \   000017   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F9           MOV       R1,A
   \   00001C   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00001F   7404         MOV       A,#0x4
   \   000021   12....       LCALL     ?DEALLOC_XSTACK8
    317              zclGeneral_SendOnOff_CmdToggle( SW1_ENDPOINT, &zclSampleSw_DstAddr, FALSE, 0 );
   \   000024                ; Setup parameters for call to function zcl_SendCommand
   \   000024   E4           CLR       A
   \   000025   F5..         MOV       ?V0,A
   \   000027   F5..         MOV       ?V1,A
   \   000029   78..         MOV       R0,#?V0
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   78..         MOV       R0,#?V0
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000038   78..         MOV       R0,#?V0
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000042   78..         MOV       R0,#?V0
   \   000044   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000047   75..01       MOV       ?V0,#0x1
   \   00004A   78..         MOV       R0,#?V0
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004F   75..02       MOV       ?V0,#0x2
   \   000052   78..         MOV       R0,#?V0
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000057   7C06         MOV       R4,#0x6
   \   000059   7D00         MOV       R5,#0x0
   \   00005B   7A..         MOV       R2,#zclSampleSw_DstAddr & 0xff
   \   00005D   7B..         MOV       R3,#(zclSampleSw_DstAddr >> 8) & 0xff
   \   00005F   7908         MOV       R1,#0x8
   \   000061   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000064   740B         MOV       A,#0xb
   \   000066   12....       LCALL     ?DEALLOC_XSTACK8
    318              
    319              // return unprocessed events
    320              return (events ^ SAMPLESW_TOGGLE_TEST_EVT);
   \   000069   EE           MOV       A,R6
   \   00006A   FA           MOV       R2,A
   \   00006B   EF           MOV       A,R7
   \   00006C   6410         XRL       A,#0x10
   \   00006E   02....       LJMP      ??zclSampleSw_event_loop_1 & 0xFFFF
    321            }
    322            
    323          
    324            if ( events & SYS_EVENT_MSG )
   \                     ??zclSampleSw_event_loop_0:
   \   000071   EB           MOV       A,R3
   \   000072   5480         ANL       A,#0x80
   \   000074   7074         JNZ       ??zclSampleSw_event_loop_2
    325            {
    326              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleSw_TaskID )) )
    327              {
    328                switch ( MSGpkt->hdr.event )
    329                {
    330                  case ZCL_INCOMING_MSG:
    331                    // Incoming ZCL Foundation command/response messages
    332                    zclSampleSw_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    333                    break;
    334          
    335                  case KEY_CHANGE:
    336                    zclSampleSw_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    337                    break;
    338          
    339                  case ZDO_STATE_CHANGE:
    340                    break;
    341          
    342                  case UART0_MESSAGE_SW1_TOGGLE:
    343                    Send_To_SW1();
    344                    break;
    345          
    346                  case UART0_MESSAGE_SW2_TOGGLE:
    347                    Send_To_SW2();
    348                    break;
    349          
    350          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    351                  case ZCL_OTA_CALLBACK_IND:
    352                    zclSampleSw_ProcessOTAMsgs( (zclOTA_CallbackMsg_t*)MSGpkt  );
    353                    break;
    354          #endif
    355          
    356                  default:
    357                    break;
    358                }
    359          
    360                // Release the memory
    361                osal_msg_deallocate( (uint8 *)MSGpkt );
    362              }
    363          
    364              // return unprocessed events
    365              return (events ^ SYS_EVENT_MSG);
    366            }
    367          
    368          #if ZG_BUILD_ENDDEVICE_TYPE    
    369            if ( events & SAMPLEAPP_END_DEVICE_REJOIN_EVT )
    370            {
    371              bdb_ZedAttemptRecoverNwk();
    372              return ( events ^ SAMPLEAPP_END_DEVICE_REJOIN_EVT );
    373            }
    374          #endif
    375          
    376            if ( events & SAMPLEAPP_LCD_AUTO_UPDATE_EVT )
   \   000076   EA           MOV       A,R2
   \   000077   5410         ANL       A,#0x10
   \   000079   7003         JNZ       $+5
   \   00007B   02....       LJMP      ??zclSampleSw_event_loop_3 & 0xFFFF
    377            {
    378              return ( events ^ SAMPLEAPP_LCD_AUTO_UPDATE_EVT );
   \   00007E   EA           MOV       A,R2
   \   00007F   6410         XRL       A,#0x10
   \   000081   02....       LJMP      ??zclSampleSw_event_loop_4 & 0xFFFF
    379            }
   \                     ??zclSampleSw_event_loop_5:
   \   000084   90....       MOV       DPTR,#SW_DstAddr + 8
   \   000087   7402         MOV       A,#0x2
   \   000089   F0           MOVX      @DPTR,A
   \   00008A   A3           INC       DPTR
   \   00008B   7409         MOV       A,#0x9
   \                     ??zclSampleSw_event_loop_6:
   \   00008D   F0           MOVX      @DPTR,A
   \   00008E   90....       MOV       DPTR,#SourceAddr
   \   000091   E0           MOVX      A,@DPTR
   \   000092   F8           MOV       R0,A
   \   000093   A3           INC       DPTR
   \   000094   E0           MOVX      A,@DPTR
   \   000095   F9           MOV       R1,A
   \   000096   90....       MOV       DPTR,#SW_DstAddr
   \   000099   E8           MOV       A,R0
   \   00009A   F0           MOVX      @DPTR,A
   \   00009B   A3           INC       DPTR
   \   00009C   E9           MOV       A,R1
   \   00009D   F0           MOVX      @DPTR,A
   \   00009E                ; Setup parameters for call to function zcl_SendCommand
   \   00009E   E4           CLR       A
   \   00009F   F5..         MOV       ?V2,A
   \   0000A1   F5..         MOV       ?V3,A
   \   0000A3   78..         MOV       R0,#?V2
   \   0000A5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A8   78..         MOV       R0,#?V2
   \   0000AA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AD   78..         MOV       R0,#?V2
   \   0000AF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B2   78..         MOV       R0,#?V2
   \   0000B4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B7   78..         MOV       R0,#?V2
   \   0000B9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BC   78..         MOV       R0,#?V2
   \   0000BE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C1   75..01       MOV       ?V2,#0x1
   \   0000C4   78..         MOV       R0,#?V2
   \   0000C6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C9   75..02       MOV       ?V2,#0x2
   \   0000CC   78..         MOV       R0,#?V2
   \   0000CE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D1   7C06         MOV       R4,#0x6
   \   0000D3   7D00         MOV       R5,#0x0
   \   0000D5   7A..         MOV       R2,#SW_DstAddr & 0xff
   \   0000D7   7B..         MOV       R3,#(SW_DstAddr >> 8) & 0xff
   \   0000D9   7908         MOV       R1,#0x8
   \   0000DB   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000DE   740B         MOV       A,#0xb
   \   0000E0   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??zclSampleSw_event_loop_7:
   \   0000E3                ; Setup parameters for call to function osal_msg_deallocate
   \   0000E3   AA..         MOV       R2,?V0
   \   0000E5   AB..         MOV       R3,?V1
   \   0000E7   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zclSampleSw_event_loop_2:
   \   0000EA                ; Setup parameters for call to function osal_msg_receive
   \   0000EA   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   0000ED   E0           MOVX      A,@DPTR
   \   0000EE   F9           MOV       R1,A
   \   0000EF   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   0000F2   8A..         MOV       ?V0,R2
   \   0000F4   8B..         MOV       ?V1,R3
   \   0000F6   EA           MOV       A,R2
   \   0000F7   4B           ORL       A,R3
   \   0000F8   6050         JZ        ??zclSampleSw_event_loop_8
   \   0000FA   8A82         MOV       DPL,R2
   \   0000FC   8B83         MOV       DPH,R3
   \   0000FE   E0           MOVX      A,@DPTR
   \   0000FF   24CC         ADD       A,#-0x34
   \   000101   6010         JZ        ??zclSampleSw_event_loop_9
   \   000103   24FD         ADD       A,#-0x3
   \   000105   6037         JZ        ??zclSampleSw_event_loop_10
   \   000107   14           DEC       A
   \   000108   7003         JNZ       $+5
   \   00010A   02....       LJMP      ??zclSampleSw_event_loop_5 & 0xFFFF
   \   00010D   2478         ADD       A,#0x78
   \   00010F   6007         JZ        ??zclSampleSw_event_loop_11
   \   000111   80D0         SJMP      ??zclSampleSw_event_loop_7
   \                     ??zclSampleSw_event_loop_9:
   \   000113                ; Setup parameters for call to function zclSampleSw_ProcessIncomingMsg
   \   000113   12....       LCALL     `??zclSampleSw_ProcessIncomingMsg::?relay`; Banked call to: zclSampleSw_ProcessIncomingMsg
   \   000116   80CB         SJMP      ??zclSampleSw_event_loop_7
   \                     ??zclSampleSw_event_loop_11:
   \   000118   A3           INC       DPTR
   \   000119   A3           INC       DPTR
   \   00011A   A3           INC       DPTR
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   F5..         MOV       ?V2,A
   \   00011E   A2E5         MOV       C,0xE0 /* A   */.5
   \   000120   500A         JNC       ??zclSampleSw_event_loop_12
   \   000122                ; Setup parameters for call to function HalLedSet
   \   000122   7A08         MOV       R2,#0x8
   \   000124   7902         MOV       R1,#0x2
   \   000126   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000129                ; Setup parameters for call to function touchLinkInitiator_StartDevDisc
   \   000129   12....       LCALL     `??touchLinkInitiator_StartDevDisc::?relay`; Banked call to: touchLinkInitiator_StartDevDisc
   \                     ??zclSampleSw_event_loop_12:
   \   00012C   E5..         MOV       A,?V2
   \   00012E   A2E2         MOV       C,0xE0 /* A   */.2
   \   000130   50B1         JNC       ??zclSampleSw_event_loop_7
   \   000132                ; Setup parameters for call to function HalLedSet
   \   000132   7A04         MOV       R2,#0x4
   \   000134   7904         MOV       R1,#0x4
   \   000136   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000139                ; Setup parameters for call to function touchLinkInitiator_ResetToFNSelectedTarget
   \   000139   12....       LCALL     `??touchLinkInitiator_ResetToFNSelectedTarget::?`; Banked call to: touchLinkInitiator_ResetToFNSelectedTarget
   \   00013C   80A5         SJMP      ??zclSampleSw_event_loop_7
   \                     ??zclSampleSw_event_loop_10:
   \   00013E   90....       MOV       DPTR,#SW_DstAddr + 8
   \   000141   7402         MOV       A,#0x2
   \   000143   F0           MOVX      @DPTR,A
   \   000144   A3           INC       DPTR
   \   000145   7408         MOV       A,#0x8
   \   000147   02....       LJMP      ??zclSampleSw_event_loop_6 & 0xFFFF
   \                     ??zclSampleSw_event_loop_8:
   \   00014A   EE           MOV       A,R6
   \   00014B   FA           MOV       R2,A
   \   00014C   EF           MOV       A,R7
   \   00014D   6480         XRL       A,#0x80
   \                     ??zclSampleSw_event_loop_1:
   \   00014F   FB           MOV       R3,A
   \   000150   800F         SJMP      ??zclSampleSw_event_loop_13
    380          
    381            if ( events & SAMPLEAPP_KEY_AUTO_REPEAT_EVT )
   \                     ??zclSampleSw_event_loop_3:
   \   000152   EA           MOV       A,R2
   \   000153   5420         ANL       A,#0x20
   \   000155   6006         JZ        ??zclSampleSw_event_loop_14
    382            {
    383              return ( events ^ SAMPLEAPP_KEY_AUTO_REPEAT_EVT );
   \   000157   EA           MOV       A,R2
   \   000158   6420         XRL       A,#0x20
   \                     ??zclSampleSw_event_loop_4:
   \   00015A   FA           MOV       R2,A
   \   00015B   8004         SJMP      ??zclSampleSw_event_loop_13
    384            }
    385            // Discard unknown events
    386            return 0;
   \                     ??zclSampleSw_event_loop_14:
   \   00015D   7A00         MOV       R2,#0x0
   \   00015F   7B00         MOV       R3,#0x0
   \                     ??zclSampleSw_event_loop_13:
   \   000161   7F04         MOV       R7,#0x4
   \   000163   02....       LJMP      ?BANKED_LEAVE_XDATA
    387          }
    388          
    389          /*********************************************************************
    390           * @fn      zclSampleSw_HandleKeys
    391           *
    392           * @brief   Handles all key events for this device.
    393           *
    394           * @param   shift - true if in shift/alt.
    395           * @param   keys - bit field for key events. Valid entries:
    396           *                 HAL_KEY_SW_5
    397           *                 HAL_KEY_SW_4
    398           *                 HAL_KEY_SW_2
    399           *                 HAL_KEY_SW_1
    400           *
    401           * @return  none
    402           */
    403          static void zclSampleSw_HandleKeys( byte shift, byte keys )
    404          {
    405            if ( keys & HAL_KEY_SW_6 ) //key1
    406            {
    407              HalLedSet ( HAL_LED_2, HAL_LED_MODE_TOGGLE );
    408             // bdb_StartCommissioning( BDB_COMMISSIONING_MODE_NWK_FORMATION | BDB_COMMISSIONING_MODE_INITIATOR_TL );  //Coordiinator BDB_COMMISSIONING_TOUCHLINK
    409          //    bdb_StartCommissioning( BDB_COMMISSIONING_MODE_INITIATOR_TL );
    410              touchLinkInitiator_StartDevDisc();
    411              
    412            }    
    413            if ( keys & HAL_KEY_SW_5 ) //key2
    414            {
    415          //    Send_To_SW1();
    416              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );
    417              touchLinkInitiator_ResetToFNSelectedTarget();
    418          //    Send_To_SW2();
    419            }
    420          }
    421          
    422          
    423          /*********************************************************************
    424           * @fn      zclSampleSw_ProcessCommissioningStatus
    425           *
    426           * @brief   Callback in which the status of the commissioning process are reported
    427           *
    428           * @param   bdbCommissioningModeMsg - Context message of the status of a commissioning process
    429           *
    430           * @return  none
    431           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    432          static void zclSampleSw_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
   \                     zclSampleSw_ProcessCommissioningStatus:
    433          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    434            switch(bdbCommissioningModeMsg->bdbCommissioningMode)
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   6402         XRL       A,#0x2
   \   00000C   7010         JNZ       ??zclSampleSw_ProcessCommissioningStatus_0
    435            {
    436              case BDB_COMMISSIONING_FORMATION:
    437                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   E0           MOVX      A,@DPTR
   \   000013   7009         JNZ       ??zclSampleSw_ProcessCommissioningStatus_0
    438                {
    439                  //After formation, perform nwk steering again plus the remaining commissioning modes that has not been processed yet
    440                  //HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
    441                  bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
   \   000015                ; Setup parameters for call to function bdb_StartCommissioning
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   4402         ORL       A,#0x2
   \   00001A   F9           MOV       R1,A
   \   00001B   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    442                }
    443                else
    444                {
    445                  //Want to try other channels?
    446                  //try with bdb_setChannelAttribute
    447                }
    448              break;
    449              case BDB_COMMISSIONING_NWK_STEERING:
    450                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    451                {
    452                  //YOUR JOB:
    453                  //We are on the nwk, what now?
    454                }
    455                else
    456                {
    457                  //See the possible errors for nwk steering procedure
    458                  //No suitable networks found
    459                  //Want to try other channels?
    460                  //try with bdb_setChannelAttribute
    461                }
    462              break;
    463              case BDB_COMMISSIONING_FINDING_BINDING:
    464                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    465                {
    466                  //YOUR JOB:
    467                }
    468                else
    469                {
    470                  //YOUR JOB:
    471                  //retry?, wait for user interaction?
    472                }
    473              break;
    474              case BDB_COMMISSIONING_INITIALIZATION:
    475                //Initialization notification can only be successful. Failure on initialization 
    476                //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
    477                
    478                //YOUR JOB:
    479                //We are on a network, what now?
    480                
    481              break;
    482          #if ZG_BUILD_ENDDEVICE_TYPE    
    483              case BDB_COMMISSIONING_PARENT_LOST:
    484                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
    485                {
    486                  //We did recover from losing parent
    487                }
    488                else
    489                {
    490                  //Parent not found, attempt to rejoin again after a fixed delay
    491                  osal_start_timerEx(zclSampleSw_TaskID, SAMPLEAPP_END_DEVICE_REJOIN_EVT, SAMPLEAPP_END_DEVICE_REJOIN_DELAY);
    492                }
    493              break;
    494          #endif 
    495            }
    496            
    497          }
   \                     ??zclSampleSw_ProcessCommissioningStatus_0:
   \   00001E                REQUIRE ?Subroutine1
   \   00001E                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    498          
    499          /*********************************************************************
    500           * @fn      zclSampleSw_BasicResetCB
    501           *
    502           * @brief   Callback from the ZCL General Cluster Library
    503           *          to set all the Basic Cluster attributes to  default values.
    504           *
    505           * @param   none
    506           *
    507           * @return  none
    508           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    509          static void zclSampleSw_BasicResetCB( void )
   \                     zclSampleSw_BasicResetCB:
    510          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    511            zclSampleSw_ResetAttributesToDefaultValues();
   \   000004                ; Setup parameters for call to function zclSampleSw_ResetAttributesToDefaultValues
   \   000004   12....       LCALL     `??zclSampleSw_ResetAttributesToDefaultValues::?`; Banked call to: zclSampleSw_ResetAttributesToDefaultValues
    512          }
   \   000007   80..         SJMP      ?Subroutine1
    513          
    514          /*********************************************************************
    515           * @fn      zclSampleApp_BatteryWarningCB
    516           *
    517           * @brief   Called to handle battery-low situation.
    518           *
    519           * @param   voltLevel - level of severity
    520           *
    521           * @return  none
    522           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    523          void zclSampleApp_BatteryWarningCB( uint8 voltLevel )
   \                     zclSampleApp_BatteryWarningCB:
    524          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    525            if ( voltLevel == VOLT_LEVEL_CAUTIOUS )
    526            {
    527              // Send warning message to the gateway and blink LED
    528            }
    529            else if ( voltLevel == VOLT_LEVEL_BAD )
    530            {
    531              // Shut down the system
    532            }
    533          }
   \   000000   02....       LJMP      ?BRET
    534          
    535          /******************************************************************************
    536           *
    537           *  Functions for processing ZCL Foundation incoming Command/Response messages
    538           *
    539           *****************************************************************************/
    540          
    541          /*********************************************************************
    542           * @fn      zclSampleSw_ProcessIncomingMsg
    543           *
    544           * @brief   Process ZCL Foundation incoming message
    545           *
    546           * @param   pInMsg - pointer to the received message
    547           *
    548           * @return  none
    549           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    550          static void zclSampleSw_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSw_ProcessIncomingMsg:
    551          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    552            switch ( pInMsg->zclHdr.commandID )
   \   000005   EA           MOV       A,R2
   \   000006   2417         ADD       A,#0x17
   \   000008   F8           MOV       R0,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F9           MOV       R1,A
   \   00000C   E8           MOV       A,R0
   \   00000D   FE           MOV       R6,A
   \   00000E   E9           MOV       A,R1
   \   00000F   FF           MOV       R7,A
   \   000010   8A82         MOV       DPL,R2
   \   000012   8B83         MOV       DPH,R3
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   14           DEC       A
   \   00001D   6016         JZ        ??zclSampleSw_ProcessIncomingMsg_0
   \   00001F   24FD         ADD       A,#-0x3
   \   000021   601F         JZ        ??zclSampleSw_ProcessIncomingMsg_1
   \   000023   24F7         ADD       A,#-0x9
   \   000025   602D         JZ        ??zclSampleSw_ProcessIncomingMsg_2
   \   000027   24FB         ADD       A,#-0x5
   \   000029   6024         JZ        ??zclSampleSw_ProcessIncomingMsg_3
   \   00002B   24FE         ADD       A,#-0x2
   \   00002D   6020         JZ        ??zclSampleSw_ProcessIncomingMsg_3
   \   00002F   24FE         ADD       A,#-0x2
   \   000031   6033         JZ        ??zclSampleSw_ProcessIncomingMsg_4
   \   000033   8043         SJMP      ??zclSampleSw_ProcessIncomingMsg_5
    553            {
    554          #ifdef ZCL_READ
    555              case ZCL_CMD_READ_RSP:
    556                zclSampleSw_ProcessInReadRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_0:
   \   000035   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F9           MOV       R1,A
   \   00003A   E8           MOV       A,R0
   \   00003B   C3           CLR       C
   \   00003C   99           SUBB      A,R1
   \   00003D   5039         JNC       ??zclSampleSw_ProcessIncomingMsg_5
   \   00003F   08           INC       R0
   \   000040   80F6         SJMP      ??CrossCallReturnLabel_0
    557                break;
    558          #endif
    559          #ifdef ZCL_WRITE
    560              case ZCL_CMD_WRITE_RSP:
    561                zclSampleSw_ProcessInWriteRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_1:
   \   000042   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F9           MOV       R1,A
   \   000047   E8           MOV       A,R0
   \   000048   C3           CLR       C
   \   000049   99           SUBB      A,R1
   \   00004A   502C         JNC       ??zclSampleSw_ProcessIncomingMsg_5
   \   00004C   08           INC       R0
   \   00004D   80F6         SJMP      ??CrossCallReturnLabel_1
    562                break;
    563          #endif
    564          #ifdef ZCL_REPORT
    565              // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
    566              case ZCL_CMD_CONFIG_REPORT:
    567                //zclSampleSw_ProcessInConfigReportCmd( pInMsg );
    568                break;
    569          
    570              case ZCL_CMD_CONFIG_REPORT_RSP:
    571                //zclSampleSw_ProcessInConfigReportRspCmd( pInMsg );
    572                break;
    573          
    574              case ZCL_CMD_READ_REPORT_CFG:
    575                //zclSampleSw_ProcessInReadReportCfgCmd( pInMsg );
    576                break;
    577          
    578              case ZCL_CMD_READ_REPORT_CFG_RSP:
    579                //zclSampleSw_ProcessInReadReportCfgRspCmd( pInMsg );
    580                break;
    581          
    582              case ZCL_CMD_REPORT:
    583                zclSampleSw_ProcessInReportCmd( pInMsg );
    584                break;
    585          #endif
    586              case ZCL_CMD_DEFAULT_RSP:
    587                zclSampleSw_ProcessInDefaultRspCmd( pInMsg );
    588                break;
    589          #ifdef ZCL_DISCOVER
    590              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
    591                zclSampleSw_ProcessInDiscCmdsRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_3:
   \   00004F                ; Setup parameters for call to function zclSampleSw_ProcessInDiscCmdsRspCmd
    592                break;
    593          
    594              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
    595                zclSampleSw_ProcessInDiscCmdsRspCmd( pInMsg );
   \   00004F                ; Setup parameters for call to function zclSampleSw_ProcessInDiscCmdsRspCmd
   \   00004F   12....       LCALL     `??zclSampleSw_ProcessInDiscCmdsRspCmd::?relay`; Banked call to: zclSampleSw_ProcessInDiscCmdsRspCmd
    596                break;
   \   000052   8024         SJMP      ??zclSampleSw_ProcessIncomingMsg_5
    597          
    598              case ZCL_CMD_DISCOVER_ATTRS_RSP:
    599                zclSampleSw_ProcessInDiscAttrsRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_2:
   \   000054   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000057   8882         MOV       DPL,R0
   \   000059   8983         MOV       DPH,R1
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   FB           MOV       R3,A
   \   00005E   EA           MOV       A,R2
   \   00005F   C3           CLR       C
   \   000060   9B           SUBB      A,R3
   \   000061   5015         JNC       ??zclSampleSw_ProcessIncomingMsg_5
   \   000063   0A           INC       R2
   \   000064   80F1         SJMP      ??CrossCallReturnLabel_3
    600                break;
    601          
    602              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
    603                zclSampleSw_ProcessInDiscAttrsExtRspCmd( pInMsg );
   \                     ??zclSampleSw_ProcessIncomingMsg_4:
   \   000066   12....       LCALL     ?Subroutine2 & 0xFFFF
    604                break;
    605          #endif
    606              default:
    607                break;
    608            }
   \                     ??CrossCallReturnLabel_4:
   \   000069   8001         SJMP      ??zclSampleSw_ProcessIncomingMsg_6
   \                     ??zclSampleSw_ProcessIncomingMsg_7:
   \   00006B   0A           INC       R2
   \                     ??zclSampleSw_ProcessIncomingMsg_6:
   \   00006C   8882         MOV       DPL,R0
   \   00006E   8983         MOV       DPH,R1
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   FB           MOV       R3,A
   \   000073   EA           MOV       A,R2
   \   000074   C3           CLR       C
   \   000075   9B           SUBB      A,R3
   \   000076   40F3         JC        ??zclSampleSw_ProcessIncomingMsg_7
    609          
    610            if ( pInMsg->attrCmd )
   \                     ??zclSampleSw_ProcessIncomingMsg_5:
   \   000078   8E82         MOV       DPL,R6
   \   00007A   8F83         MOV       DPH,R7
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   FA           MOV       R2,A
   \   00007E   A3           INC       DPTR
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   FB           MOV       R3,A
   \   000081   EA           MOV       A,R2
   \   000082   4B           ORL       A,R3
   \   000083   6003         JZ        ??zclSampleSw_ProcessIncomingMsg_8
    611              osal_mem_free( pInMsg->attrCmd );
   \   000085                ; Setup parameters for call to function osal_mem_free
   \   000085   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    612          }
   \                     ??zclSampleSw_ProcessIncomingMsg_8:
   \   000088   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F8           MOV       R0,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   8882         MOV       DPL,R0
   \   00000A   F583         MOV       DPH,A
   \   00000C   7800         MOV       R0,#0x0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004                REQUIRE ??Subroutine4_0
   \   000004                ; // Fall through to label ??Subroutine4_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine4_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   7A00         MOV       R2,#0x0
   \   000007   22           RET
    613          
    614          #ifdef ZCL_READ
    615          /*********************************************************************
    616           * @fn      zclSampleSw_ProcessInReadRspCmd
    617           *
    618           * @brief   Process the "Profile" Read Response Command
    619           *
    620           * @param   pInMsg - incoming message to process
    621           *
    622           * @return  none
    623           */
    624          static uint8 zclSampleSw_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
    625          {
    626            zclReadRspCmd_t *readRspCmd;
    627            uint8 i;
    628          
    629            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
    630            for (i = 0; i < readRspCmd->numAttr; i++)
    631            {
    632              // Notify the originator of the results of the original read attributes
    633              // attempt and, for each successfull request, the value of the requested
    634              // attribute
    635            }
    636          
    637            return TRUE;
    638          }
    639          #endif // ZCL_READ
    640          
    641          #ifdef ZCL_WRITE
    642          /*********************************************************************
    643           * @fn      zclSampleSw_ProcessInWriteRspCmd
    644           *
    645           * @brief   Process the "Profile" Write Response Command
    646           *
    647           * @param   pInMsg - incoming message to process
    648           *
    649           * @return  none
    650           */
    651          static uint8 zclSampleSw_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
    652          {
    653            zclWriteRspCmd_t *writeRspCmd;
    654            uint8 i;
    655          
    656            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
    657            for (i = 0; i < writeRspCmd->numAttr; i++)
    658            {
    659              // Notify the device of the results of the its original write attributes
    660              // command.
    661            }
    662          
    663            return TRUE;
    664          }
    665          #endif // ZCL_WRITE
    666          
    667          /*********************************************************************
    668           * @fn      zclSampleSw_ProcessInDefaultRspCmd
    669           *
    670           * @brief   Process the "Profile" Default Response Command
    671           *
    672           * @param   pInMsg - incoming message to process
    673           *
    674           * @return  none
    675           */
    676          static uint8 zclSampleSw_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
    677          {
    678            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
    679            // Device is notified of the Default Response command.
    680            (void)pInMsg;
    681            return TRUE;
    682          }
    683          
    684          #ifdef ZCL_DISCOVER
    685          /*********************************************************************
    686           * @fn      zclSampleSw_ProcessInDiscCmdsRspCmd
    687           *
    688           * @brief   Process the Discover Commands Response Command
    689           *
    690           * @param   pInMsg - incoming message to process
    691           *
    692           * @return  none
    693           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    694          static uint8 zclSampleSw_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleSw_ProcessInDiscCmdsRspCmd:
    695          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    696            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
    697            uint8 i;
    698          
    699            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
   \   000004   EA           MOV       A,R2
   \   000005   2417         ADD       A,#0x17
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F583         MOV       DPH,A
   \   00000D   12....       LCALL     ??Subroutine4_0 & 0xFFFF
    700            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
   \                     ??CrossCallReturnLabel_2:
   \   000010   8001         SJMP      ??zclSampleSw_ProcessInDiscCmdsRspCmd_0
   \                     ??zclSampleSw_ProcessInDiscCmdsRspCmd_1:
   \   000012   0A           INC       R2
   \                     ??zclSampleSw_ProcessInDiscCmdsRspCmd_0:
   \   000013   8882         MOV       DPL,R0
   \   000015   8983         MOV       DPH,R1
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FB           MOV       R3,A
   \   00001B   EA           MOV       A,R2
   \   00001C   C3           CLR       C
   \   00001D   9B           SUBB      A,R3
   \   00001E   40F2         JC        ??zclSampleSw_ProcessInDiscCmdsRspCmd_1
    701            {
    702              // Device is notified of the result of its attribute discovery command.
    703            }
    704          
    705            return TRUE;
   \   000020   7901         MOV       R1,#0x1
   \   000022   02....       LJMP      ?Subroutine1 & 0xFFFF
    706          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleSw_OnOffSwitchType>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleSw_NwkState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleSw_CmdCallbacks>`:
   \   000000   ....         DW `??zclSampleSw_BasicResetCB::?relay`
   \   000002   0000         DW 0H
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   0000         DW 0H
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1f4:
   \   000000   F4010000     DD 500
    707          
    708          /*********************************************************************
    709           * @fn      zclSampleSw_ProcessInDiscAttrsRspCmd
    710           *
    711           * @brief   Process the "Profile" Discover Attributes Response Command
    712           *
    713           * @param   pInMsg - incoming message to process
    714           *
    715           * @return  none
    716           */
    717          static uint8 zclSampleSw_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
    718          {
    719            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
    720            uint8 i;
    721          
    722            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
    723            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
    724            {
    725              // Device is notified of the result of its attribute discovery command.
    726            }
    727          
    728            return TRUE;
    729          }
    730          
    731          /*********************************************************************
    732           * @fn      zclSampleSw_ProcessInDiscAttrsExtRspCmd
    733           *
    734           * @brief   Process the "Profile" Discover Attributes Extended Response Command
    735           *
    736           * @param   pInMsg - incoming message to process
    737           *
    738           * @return  none
    739           */
    740          static uint8 zclSampleSw_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
    741          {
    742            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
    743            uint8 i;
    744          
    745            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
    746            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
    747            {
    748              // Device is notified of the result of its attribute discovery command.
    749            }
    750          
    751            return TRUE;
    752          }
    753          #endif // ZCL_DISCOVER
    754          
    755          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    756          /*********************************************************************
    757           * @fn      zclSampleSw_ProcessOTAMsgs
    758           *
    759           * @brief   Called to process callbacks from the ZCL OTA.
    760           *
    761           * @param   none
    762           *
    763           * @return  none
    764           */
    765          static void zclSampleSw_ProcessOTAMsgs( zclOTA_CallbackMsg_t* pMsg )
    766          {
    767            uint8 RxOnIdle;
    768          
    769            switch(pMsg->ota_event)
    770            {
    771            case ZCL_OTA_START_CALLBACK:
    772              if (pMsg->hdr.status == ZSuccess)
    773              {
    774                // Speed up the poll rate
    775                RxOnIdle = TRUE;
    776                ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    777                NLME_SetPollRate( 2000 );
    778              }
    779              break;
    780          
    781            case ZCL_OTA_DL_COMPLETE_CALLBACK:
    782              if (pMsg->hdr.status == ZSuccess)
    783              {
    784                // Reset the CRC Shadow and reboot.  The bootloader will see the
    785                // CRC shadow has been cleared and switch to the new image
    786                HalOTAInvRC();
    787                SystemReset();
    788              }
    789              else
    790              {
    791          #if (ZG_BUILD_ENDDEVICE_TYPE)    
    792                // slow the poll rate back down.
    793                RxOnIdle = FALSE;
    794                ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    795                NLME_SetPollRate(DEVICE_POLL_RATE);
    796          #endif
    797              }
    798              break;
    799          
    800            default:
    801              break;
    802            }
    803          }
    804          #endif // defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    805          
    806          /****************************************************************************
    807          ****************************************************************************/
    808          static void zclSampleSw_ProcessInReportCmd( zclIncomingMsg_t *pInMsg )
                             ^
Warning[Pe177]: function "zclSampleSw_ProcessInReportCmd" was declared but
          never referenced
    809          {
    810          //  HalLedSet ( HAL_LED_3, HAL_LED_MODE_TOGGLE );
    811            
    812            zclReportCmd_t *pInTempSensorReport;
    813          
    814            uint8 On_Off_State;
    815            uint16 Dev_Nwk_ID;
    816            uint8 End_Point;
    817            
    818            Dev_Nwk_ID = pInMsg->srcAddr.addr.shortAddr;
    819            End_Point = pInMsg->srcAddr.endPoint;
    820            SourceAddr = Dev_Nwk_ID;
    821              
    822            pInTempSensorReport = (zclReportCmd_t *)pInMsg->attrCmd;
    823            
    824            On_Off_State = pInTempSensorReport->attrList[0].attrData[0];
    825          //  zclSampleThermostat_LocalTemperature2 = BUILD_UINT16(pInTempSensorReport->attrList[0].attrData[1], pInTempSensorReport->attrList[0].attrData[2]);
    826          
    827            printf( "0x%04X", Dev_Nwk_ID );
    828            printf( " %d", End_Point);
    829            printf( " %d\n", On_Off_State );
    830          }
    831          
    832          static void Send_To_SW1( void )
    833          {
    834            SW_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    835            SW_DstAddr.endPoint = SW1_ENDPOINT;
    836            SW_DstAddr.addr.shortAddr = SourceAddr; 
    837            zclGeneral_SendOnOff_CmdToggle( SW1_ENDPOINT, &SW_DstAddr, FALSE, 0 );
    838          }
    839          
    840          static void Send_To_SW2( void )
    841          {
    842            SW_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    843            SW_DstAddr.endPoint = SW2_ENDPOINT;
    844            SW_DstAddr.addr.shortAddr = SourceAddr; 
    845            zclGeneral_SendOnOff_CmdToggle( SW1_ENDPOINT, &SW_DstAddr, FALSE, 0 );
    846          }
    847          
    848          //static void Send_To_SW3( void )
    849          //{
    850          //  SW_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    851          //  SW_DstAddr.endPoint = SW3_ENDPOINT;
    852          //  SW_DstAddr.addr.shortAddr = SourceAddr; 
    853          //  zclGeneral_SendOnOff_CmdToggle( SW1_ENDPOINT, &SW_DstAddr, FALSE, 0 );
    854          //}

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   zclSampleApp_BatteryWarningCB
      2      0   zclSampleSw_BasicResetCB
        2      0   -> zclSampleSw_ResetAttributesToDefaultValues
      0      9   zclSampleSw_Init
        0      9   -> RegisterForKeys
        0      9   -> RegisterForUart0
        0      9   -> RegisterVoltageWarningCB
        0      9   -> Uart0_Init
        0      9   -> bdb_RegisterCommissioningStatusCB
        0      9   -> bdb_RegisterSimpleDescriptor
        0      9   -> bdb_StartCommissioning
        0      9   -> zclGeneral_RegisterCmdCallbacks
        0      9   -> zclSampleSw_ResetAttributesToDefaultValues
        0      9   -> zcl_registerAttrList
        0      9   -> zcl_registerForMsg
      2      0   zclSampleSw_ProcessCommissioningStatus
        2      0   -> bdb_StartCommissioning
      2      9   zclSampleSw_ProcessInDiscCmdsRspCmd
      0     21   zclSampleSw_ProcessIncomingMsg
        0      9   -> osal_mem_free
        0      9   -> zclSampleSw_ProcessInDiscCmdsRspCmd
      0     23   zclSampleSw_event_loop
        0     12   -> HalLedSet
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     16   -> osal_start_timerEx
        0     12   -> touchLinkInitiator_ResetToFNSelectedTarget
        0     12   -> touchLinkInitiator_StartDevDisc
        0     12   -> zclSampleSw_ProcessIncomingMsg
        0     23   -> zcl_SendCommand


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      18  ?<Initializer for zclSampleSw_CmdCallbacks>
       1  ?<Initializer for zclSampleSw_NwkState>
       1  ?<Initializer for zclSampleSw_OnOffSwitchType>
       8  ??Subroutine4_0
       5  ?Subroutine0
       7  ?Subroutine1
       4  ?Subroutine2
      15  ?Subroutine3
      12  SW_DstAddr
       2  SourceAddr
       4  __Constant_1f4
       3  zclSampleApp_BatteryWarningCB
       1  zclSampleSwSeqNum
       9  zclSampleSw_BasicResetCB
      18  zclSampleSw_CmdCallbacks
      12  zclSampleSw_DstAddr
     116  zclSampleSw_Init
       1  zclSampleSw_NwkState
       1  zclSampleSw_OnOffSwitchActions
       1  zclSampleSw_OnOffSwitchType
      30  zclSampleSw_ProcessCommissioningStatus
      37  zclSampleSw_ProcessInDiscCmdsRspCmd
     139  zclSampleSw_ProcessIncomingMsg
       1  zclSampleSw_TaskID
     358  zclSampleSw_event_loop
      42  -- Other

 
 731 bytes in segment BANKED_CODE
  42 bytes in segment BANK_RELAYS
  20 bytes in segment XDATA_I
  20 bytes in segment XDATA_ID
   4 bytes in segment XDATA_ROM_C
  29 bytes in segment XDATA_Z
 
  62 bytes of CODE     memory
   0 bytes of CONST    memory (+ 4 bytes shared)
 731 bytes of HUGECODE memory
  49 bytes of XDATA    memory

Errors: none
Warnings: 1
