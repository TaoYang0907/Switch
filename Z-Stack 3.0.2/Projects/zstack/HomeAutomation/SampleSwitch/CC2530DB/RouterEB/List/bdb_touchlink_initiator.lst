###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               29/Jul/2020  20:16:05
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack 3.0.2\Components\stack\bdb\bdb_touchlink_initiator.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EWC1E4.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\stack\bdb\bdb_touchlink_initiator.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D
#        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
#        xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_ON_OFF -D ZCL_GROUPS -D BDB_TL_INITIATOR -D INTER_PAN -lC
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\List\bdb_touchlink_initiator.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\Obj\bdb_touchlink_initiator.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\stack\bdb\bdb_touchlink_initiator.c
      1          /**************************************************************************************************
      2            Filename:       bdb_touchlink_initiator.c
      3            Revised:        $Date: 2013-11-22 16:17:23 -0800 (Fri, 22 Nov 2013) $
      4            Revision:       $Revision: 36220 $
      5          
      6            Description:    Zigbee Cluster Library - Light Link Initiator.
      7          
      8          
      9            Copyright 2011-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "OSAL_Tasks.h"
     47          #include "OSAL_Nv.h"
     48          #include "AF.h"
     49          #include "ZDApp.h"
     50          #include "ZDSecMgr.h"
     51          #include "ZDObject.h"
     52          #include "nwk_util.h"
     53          #include "ZGlobals.h"
     54          #include "AddrMgr.h"
     55          
     56          #if defined ( POWER_SAVING )
     57          #include "OSAL_PwrMgr.h"
     58          #endif
     59          
     60          #include "stub_aps.h"
     61          
     62          #include "zcl.h"
     63          #include "zcl_general.h"
     64          #include "bdb.h"
     65          #include "bdb_interface.h"
     66          #include "bdb_tlCommissioning.h"
     67          #include "bdb_touchlink.h"
     68          
     69          #include "bdb_touchlink_initiator.h"
     70          #include "hal_lcd.h"
     71          #include "hal_led.h"
     72          
     73          #if defined ( BDB_TL_INITIATOR )
     74             
     75          /*********************************************************************
     76           * MACROS
     77           */
     78          
     79          /*********************************************************************
     80           * CONSTANTS
     81           */
     82          
     83          #define TOUCHLINK_INITIATOR_REJOIN_TIMEOUT             2500 // 2.5 sec
     84          
     85          // for non-polling end-devices only
     86          #define TOUCHLINK_INITIATOR_TEMP_POST_TL_POLL_RATE     1000
     87          
     88          #define DEV_INFO_INVALID_EP                            0xFE
     89          
     90          #define TOUCHLINK_INITIATOR_NUM_SCAN_REQ_PRIMARY       8  // 5 times on 1st channel, plus once for each remianing primary channel
     91          #define TOUCHLINK_INITIATOR_NUM_SCAN_REQ_EXTENDED      20 // (TOUCHLINK_NUM_SCAN_REQ_PRIMARY + sizeof(TOUCHLINK_SECONDARY_CHANNELS_SET))
     92          
     93          /*********************************************************************
     94           * TYPEDEFS
     95           */
     96          typedef union
     97          {
     98            bdbTLNwkStartRsp_t nwkStartRsp;
     99            bdbTLNwkJoinRsp_t nwkJoinRsp;
    100          } bdbTLRsp_t;
    101          
    102          typedef struct
    103          {
    104            bdbTLScanRsp_t scanRsp;
    105            afAddrType_t srcAddr;
    106            uint16 newNwkAddr;
    107            uint8 rxChannel;  // channel scan response was heard on
    108            int8 lastRssi;    // receieved RSSI
    109          } targetCandidate_t;
    110          
    111          /*********************************************************************
    112           * GLOBAL VARIABLES
    113           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    114          uint8 touchLinkInitiator_TaskID;
   \                     touchLinkInitiator_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    115          
    116          /*********************************************************************
    117           * EXTERNAL VARIABLES
    118           */
    119          extern devStartModes_t devStartMode;
    120          extern uint8 _tmpRejoinState;
    121          
    122          /*********************************************************************
    123           * EXTERNAL FUNCTIONS
    124           */
    125          extern void bdb_setNodeIsOnANetwork(bool isOnANetwork);
    126          
    127          /*********************************************************************
    128           * LOCAL VARIABLES
    129           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    130          static uint8 initiatorSeqNum;
   \                     initiatorSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    131          
    132          // Touch Link channel tracking

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          static uint8 numScanReqSent;
   \                     numScanReqSent:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          static uint8 scanReqChannels;
   \                     scanReqChannels:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135          
    136          // Network key sent to the target to start the network with

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          static uint8 keyIndexSent;
   \                     keyIndexSent:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          static uint8 encKeySent[SEC_KEY_LEN];
   \                     encKeySent:
   \   000000                DS 16
   \   000010                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          static uint32 responseIDSent;
   \                     responseIDSent:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    140          
    141          // Info related to the received request
    142          #if ZSTACK_END_DEVICE_BUILD
    143          static bdbTLNwkJoinReq_t joinReq;
    144          #endif
    145          
    146          // Info related to the received response

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          static targetCandidate_t selectedTarget;
   \                     selectedTarget:
   \   000000                DS 54
   \   000036                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          static uint16 selectedTargetNwkAddr;
   \                     selectedTargetNwkAddr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          static ZLongAddr_t selectedTargetIEEEAddr;
   \                     selectedTargetIEEEAddr:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          static bdbTLRsp_t rxRsp; // network start or join response
   \                     rxRsp:
   \   000000                DS 17
   \   000011                REQUIRE __INIT_XDATA_Z
    151          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          static bdbTLNwkParams_t initiatorNwkParams = {0};
   \                     initiatorNwkParams:
   \   000000                DS 42
   \   00002A                REQUIRE __INIT_XDATA_Z
    153          
    154          // Addresses used for sending/receiving messages

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          static afAddrType_t bcastAddr;
   \                     bcastAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          static uint16 savedPollRate;
   \                     savedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          static uint16 savedQueuedPollRate;
   \                     savedQueuedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          static uint16 savedResponsePollRate;
   \                     savedResponsePollRate:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          static uint8 savedRxOnIdle;
   \                     savedRxOnIdle:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    161          
    162          // Application callback

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    163          static touchLink_NotifyAppTLCB_t pfnNotifyAppCB = NULL;
   \                     pfnNotifyAppCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    164          static touchLink_SelectDiscDevCB_t pfnSelectDiscDevCB = NULL;
   \                     pfnSelectDiscDevCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    165          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    166          static uint8 initiatorRegisteredMsgAppTaskID = TASK_NO_TASK;
   \                     initiatorRegisteredMsgAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for initiatorRegisteredMsgAppTas`
   \   000001                REQUIRE __INIT_XDATA_I
    167          
    168          /*********************************************************************
    169           * GLOBAL FUNCTIONS
    170           */
    171          extern void touchLink_ItemInit( uint16 id, uint16 len, void *pBuf );
    172          
    173          /*********************************************************************
    174           * LOCAL FUNCTIONS
    175           */
    176          
    177          static ZStatus_t initiatorScanReqCB( afAddrType_t *srcAddr, bdbTLScanReq_t *pReq, uint8 seqNum );
    178          static ZStatus_t initiatorDeviceInfoReqCB( afAddrType_t *srcAddr, bdbTLDeviceInfoReq_t *pReq, uint8 seqNum );
    179          static ZStatus_t initiatorIdentifyReqCB( afAddrType_t *srcAddr, bdbTLIdentifyReq_t *pReq );
    180          static ZStatus_t initiatorNwkJoinReqCB( afAddrType_t *srcAddr, bdbTLNwkJoinReq_t *pReq, uint8 seqNum );
    181          static ZStatus_t initiatorNwkUpdateReqCB( afAddrType_t *srcAddr, bdbTLNwkUpdateReq_t *pReq );
    182          static ZStatus_t initiatorScanRspCB( afAddrType_t *srcAddr, bdbTLScanRsp_t *pRsp );
    183          static ZStatus_t initiatorDeviceInfoRspCB( afAddrType_t *srcAddr, bdbTLDeviceInfoRsp_t *pRsp );
    184          static ZStatus_t initiatorNwkStartRspCB( afAddrType_t *srcAddr, bdbTLNwkStartRsp_t *pRsp );
    185          static ZStatus_t initiatorNwkJoinRtrRspCB( afAddrType_t *srcAddr, bdbTLNwkJoinRsp_t *pRsp );
    186          static ZStatus_t initiatorNwkJoinEDRspCB( afAddrType_t *srcAddr, bdbTLNwkJoinRsp_t *pRsp );
    187          static void *initiatorZdoLeaveCnfCB( void *pParam );
    188          static ZStatus_t touchLink_InitiatorSendScanRsp( uint8 srcEP, afAddrType_t *dstAddr, uint32 transID, uint8 seqNum );
    189          static void initiatorProcessStateChange( devStates_t state );
    190          static void initiatorSetNwkToInitState( void );
    191          #if ( ZSTACK_ROUTER_BUILD )
    192          static void initiatorJoinNwk( void );
    193          #endif
    194          static void initiatorReJoinNwk( devStartModes_t startMode );
    195          static void initiatorSendScanReq( bool freshScan );
    196          static ZStatus_t initiatorSendNwkStartReq( bdbTLScanRsp_t *pRsp );
    197          static ZStatus_t initiatorSendNwkJoinReq( bdbTLScanRsp_t *pRsp );
    198          static ZStatus_t initiatorSendNwkUpdateReq( bdbTLScanRsp_t *pRsp );
    199          static void initiatorClearSelectedTarget( void );
    200          
    201          /*********************************************************************
    202           * TOUCHLINK Initiator Callback Table
    203           */
    204          // Initiator Command Callbacks table

   \                                 In  segment XDATA_I, align 1, keep-with-next
    205          static bdbTL_InterPANCallbacks_t touchLinkInitiator_CmdCBs =
   \                     touchLinkInitiator_CmdCBs:
   \   000000                DS 26
   \   00001A                REQUIRE `?<Initializer for touchLinkInitiator_CmdCBs>`
   \   00001A                REQUIRE __INIT_XDATA_I
    206          {
    207            // Received Server Commands
    208            initiatorScanReqCB,       // Scan Request command
    209            initiatorDeviceInfoReqCB, // Device Information Request command
    210            initiatorIdentifyReqCB,   // Identify Request command
    211            NULL,                     // Reset to Factory New Request command
    212            NULL,                     // Network Start Request command
    213          #if ( ZSTACK_ROUTER_BUILD )
    214            initiatorNwkJoinReqCB,    // Network Join Router Request command
    215            NULL,                     // Network Join End Device Request command
    216          #else
    217            NULL,                     // Network Join Router Request command
    218            initiatorNwkJoinReqCB,    // Network Join End Device Request command
    219          #endif
    220            initiatorNwkUpdateReqCB,  // Network Update Request command
    221          
    222            // Received Client Commands
    223            initiatorScanRspCB,       // Scan Response command
    224            initiatorDeviceInfoRspCB, // Device Information Response command
    225            initiatorNwkStartRspCB,   // Network Start Response command
    226            initiatorNwkJoinRtrRspCB, // Network Join Router Response command
    227            initiatorNwkJoinEDRspCB   // Network Join End Device Response command
    228          };
    229          
    230          /*********************************************************************
    231           * PUBLIC FUNCTIONS
    232           */
    233          
    234          /*********************************************************************
    235           * @fn      touchLinkInitiator_InitDevice
    236           *
    237           * @brief   Start the TOUCHLINK Initiator device in the network if it's not
    238           *          factory new. Otherwise, determine the network parameters
    239           *          and wait for a touchlink command.
    240           *
    241           * @param   none
    242           *
    243           * @return  status
    244           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    245          ZStatus_t touchLinkInitiator_InitDevice( void )
   \                     touchLinkInitiator_InitDevice:
    246          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    247            ZDO_Config_Node_Descriptor.LogicalType = zgDeviceLogicalType;
   \   000004   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX      A,@DPTR
   \   000008   5407         ANL       A,#0x7
   \   00000A   F8           MOV       R0,A
   \   00000B   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   54F8         ANL       A,#0xf8
   \   000011   48           ORL       A,R0
   \   000012   F0           MOVX      @DPTR,A
    248            
    249            // Is not factory new?
    250            if ( bdbAttributes.bdbNodeIsOnANetwork == TRUE )
   \   000013   90....       MOV       DPTR,#bdbAttributes + 14
   \   000016   E0           MOVX      A,@DPTR
   \   000017   6401         XRL       A,#0x1
   \   000019   7007         JNZ       ??touchLinkInitiator_InitDevice_0
    251            {
    252              // Resume ZigBee functionality based on the info stored in NV
    253              initiatorReJoinNwk( MODE_RESUME );
   \   00001B                ; Setup parameters for call to function initiatorReJoinNwk
   \   00001B   7901         MOV       R1,#0x1
   \   00001D   12....       LCALL     `??initiatorReJoinNwk::?relay`; Banked call to: initiatorReJoinNwk
   \   000020   8003         SJMP      ??touchLinkInitiator_InitDevice_1
    254            }
    255            else
    256            {
    257              initiatorSelectNwkParams();
   \                     ??touchLinkInitiator_InitDevice_0:
   \   000022                ; Setup parameters for call to function initiatorSelectNwkParams
   \   000022   12....       LCALL     `??initiatorSelectNwkParams::?relay`; Banked call to: initiatorSelectNwkParams
    258            }
    259          
    260          #if defined ( POWER_SAVING )
    261            osal_pwrmgr_device( PWRMGR_BATTERY );
    262          #endif
    263          
    264          #if ( ZSTACK_ROUTER_BUILD )
    265            // Enable our receiver
    266            savedRxOnIdle = TRUE;
   \                     ??touchLinkInitiator_InitDevice_1:
   \   000025   90....       MOV       DPTR,#savedRxOnIdle
   \   000028   7401         MOV       A,#0x1
   \   00002A   F0           MOVX      @DPTR,A
    267            ZMacSetReq( ZMacRxOnIdle, &savedRxOnIdle );
   \   00002B                ; Setup parameters for call to function ZMacSetReq
   \   00002B   7A..         MOV       R2,#savedRxOnIdle & 0xff
   \   00002D   7B..         MOV       R3,#(savedRxOnIdle >> 8) & 0xff
   \   00002F   7952         MOV       R1,#0x52
   \   000031   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    268            touchLink_PermitJoin(0);
   \   000034                ; Setup parameters for call to function touchLink_PermitJoin
   \   000034   7900         MOV       R1,#0x0
   \   000036   12....       LCALL     `??touchLink_PermitJoin::?relay`; Banked call to: touchLink_PermitJoin
    269          #endif
    270          
    271            return ( ZSuccess );
   \   000039   7900         MOV       R1,#0x0
   \   00003B   02....       LJMP      ??Subroutine46_0 & 0xFFFF
    272          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    273          
    274          /*********************************************************************
    275           * @fn      touchLinkInitiator_RegisterNotifyTLCB
    276           *
    277           * @brief   Register an Application's Touch-Link Notify callback function.
    278           *
    279           * @param   pfnNotifyApp - application callback
    280           *
    281           * @return  none
    282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    283          void touchLinkInitiator_RegisterNotifyTLCB( touchLink_NotifyAppTLCB_t pfnNotifyApp )
   \                     touchLinkInitiator_RegisterNotifyTLCB:
    284          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    285            pfnNotifyAppCB = pfnNotifyApp;
   \   000004   90....       MOV       DPTR,#pfnNotifyAppCB
   \   000007   02....       LJMP      ?Subroutine0 & 0xFFFF
    286          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004                REQUIRE ??Subroutine45_0
   \   000004                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                REQUIRE ??Subroutine46_0
   \   000001                ; // Fall through to label ??Subroutine46_0
    287          
    288          /*********************************************************************
    289           * @fn      touchLinkInitiator_RegisterSelectDiscDevCB
    290           *
    291           * @brief   Register an Application's Selection callback function, to select
    292           *          a target from the discovered devices during a Touch-link scan.
    293           *
    294           * @param   pfnSelectDiscDev - application callback
    295           *
    296           * @return  none
    297           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    298          void touchLinkInitiator_RegisterSelectDiscDevCB( touchLink_SelectDiscDevCB_t pfnSelectDiscDev )
   \                     touchLinkInitiator_RegisterSelectDiscDevCB:
    299          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    300            pfnSelectDiscDevCB = pfnSelectDiscDev;
   \   000004   90....       MOV       DPTR,#pfnSelectDiscDevCB
   \   000007   02....       LJMP      ?Subroutine0 & 0xFFFF
    301          }
    302          
    303          /*********************************************************************
    304           * @fn      touchLinkInitiator_StartDevDisc
    305           *
    306           * @brief   Start device discovery, scanning for other devices in the vicinity
    307           *          of the originator (initiating first part of the Touch-Link process).
    308           *          Device discovery shall only be initiated by address assignment capable
    309           *          devices. To perform device discovery, the initiator shall broadcast
    310           *          inter-PAN Scan Requests, spaced at an interval of
    311           *          BDBCTL_SCAN_TIME_BASE_DURATION seconds.
    312           *
    313           * @param   none
    314           *
    315           * @return  status
    316           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    317          ZStatus_t touchLinkInitiator_StartDevDisc( void )
   \                     touchLinkInitiator_StartDevDisc:
    318          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    319            osal_clear_event( ZDAppTaskID, ZDO_NETWORK_INIT ); // in case orphaned rejoin was called
   \   00000A                ; Setup parameters for call to function osal_clear_event
   \   00000A   7A01         MOV       R2,#0x1
   \   00000C   7B00         MOV       R3,#0x0
   \   00000E   90....       MOV       DPTR,#ZDAppTaskID
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F9           MOV       R1,A
   \   000013   12....       LCALL     `??osal_clear_event::?relay`; Banked call to: osal_clear_event
    320            ZDApp_StopJoiningCycle();
   \   000016                ; Setup parameters for call to function ZDApp_StopJoiningCycle
   \   000016   12....       LCALL     `??ZDApp_StopJoiningCycle::?relay`; Banked call to: ZDApp_StopJoiningCycle
    321          
    322            //abort any touchlink in progress and start the new dev discovery.
    323            touchLinkInitiator_AbortTL();
   \   000019                ; Setup parameters for call to function touchLinkInitiator_AbortTL
   \   000019   12....       LCALL     `??touchLinkInitiator_AbortTL::?relay`; Banked call to: touchLinkInitiator_AbortTL
    324          
    325            // To perform device discovery, switch to channel 11 and broadcast five
    326            // consecutive inter-PAN Scan Requests. Then switch to each remaining
    327            // TOUCHLINK channels in turn (i.e., 15, 20, and 25) and broadcast a single
    328            // inter-PAN Scan Request on each channel.
    329            if ( !osal_get_timeoutEx( touchLinkInitiator_TaskID, TOUCHLINK_TL_SCAN_BASE_EVT ) )
   \   00001C                ; Setup parameters for call to function osal_get_timeoutEx
   \   00001C   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   00001F   6003         JZ        $+5
   \   000021   02....       LJMP      ??touchLinkInitiator_StartDevDisc_0 & 0xFFFF
    330            {
    331              uint8 x = TRUE;
   \   000024   85..82       MOV       DPL,?XSP + 0
   \   000027   85..83       MOV       DPH,?XSP + 1
   \   00002A   7401         MOV       A,#0x1
   \   00002C   F0           MOVX      @DPTR,A
    332          
    333              // Generate a new Transaction Id
    334              touchLinkTransID = ( ( (uint32)osal_rand() ) << 16 ) + osal_rand();
   \   00002D                ; Setup parameters for call to function osal_rand
   \   00002D   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000030   7410         MOV       A,#0x10
   \   000032   78..         MOV       R0,#?V4
   \   000034   12....       LCALL     ?L_SHL
   \   000037                ; Setup parameters for call to function osal_rand
   \   000037   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   00003A   8A..         MOV       ?V0,R2
   \   00003C   8B..         MOV       ?V1,R3
   \   00003E   E4           CLR       A
   \   00003F   F5..         MOV       ?V2,A
   \   000041   F5..         MOV       ?V3,A
   \   000043   78..         MOV       R0,#?V4
   \   000045   79..         MOV       R1,#?V0
   \   000047   12....       LCALL     ?L_ADD
   \   00004A   90....       MOV       DPTR,#touchLinkTransID
   \   00004D   78..         MOV       R0,#?V4
   \   00004F   12....       LCALL     ?L_MOV_TO_X
    335              osal_start_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_TRANS_LIFETIME_EXPIRED_EVT,
    336                                  BDBCTL_INTER_PAN_TRANS_ID_LIFETIME );
   \   000052                ; Setup parameters for call to function osal_start_timerEx
   \   000052   90....       MOV       DPTR,#__Constant_1f40
   \   000055   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000058   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   00005B   12....       LCALL     ?DEALLOC_XSTACK8
    337          
    338              if ( bdbAttributes.bdbNodeIsOnANetwork == TRUE )
   \   00005E   90....       MOV       DPTR,#bdbAttributes + 14
   \   000061   E0           MOVX      A,@DPTR
   \   000062   6401         XRL       A,#0x1
   \   000064   7041         JNZ       ??touchLinkInitiator_StartDevDisc_1
    339              {
    340                // Turn off polling during touch-link procedure
    341                savedPollRate = zgPollRate;
   \   000066   90....       MOV       DPTR,#zgPollRate
   \   000069   78..         MOV       R0,#?V0
   \   00006B   12....       LCALL     ?L_MOV_X
   \   00006E   90....       MOV       DPTR,#savedPollRate
   \   000071   E5..         MOV       A,?V0
   \   000073   F0           MOVX      @DPTR,A
   \   000074   A3           INC       DPTR
   \   000075   E5..         MOV       A,?V1
   \   000077   F0           MOVX      @DPTR,A
    342                savedQueuedPollRate = zgQueuedPollRate;
   \   000078   90....       MOV       DPTR,#zgQueuedPollRate
   \   00007B   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   00007E   90....       MOV       DPTR,#savedQueuedPollRate
   \   000081   12....       LCALL     ??Subroutine49_0 & 0xFFFF
    343                savedResponsePollRate = zgResponsePollRate;
   \                     ??CrossCallReturnLabel_85:
   \   000084   90....       MOV       DPTR,#zgResponsePollRate
   \   000087   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   00008A   90....       MOV       DPTR,#savedResponsePollRate
   \   00008D   12....       LCALL     ??Subroutine49_0 & 0xFFFF
    344          
    345                NLME_SetPollRate( 0 );
   \                     ??CrossCallReturnLabel_86:
   \   000090                ; Setup parameters for call to function NLME_SetPollRate
   \   000090   90....       MOV       DPTR,#__Constant_0
   \   000093   12....       LCALL     ?XLOAD_R2345
   \   000096   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
    346                NLME_SetQueuedPollRate( 0 );
   \   000099                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000099   7A00         MOV       R2,#0x0
   \   00009B   7B00         MOV       R3,#0x0
   \   00009D   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
    347                NLME_SetResponseRate( 0 );
   \   0000A0                ; Setup parameters for call to function NLME_SetResponseRate
   \   0000A0   7A00         MOV       R2,#0x0
   \   0000A2   7B00         MOV       R3,#0x0
   \   0000A4   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
    348              }
    349          
    350              // Remember current rx state
    351              ZMacGetReq( ZMacRxOnIdle, &savedRxOnIdle );
   \                     ??touchLinkInitiator_StartDevDisc_1:
   \   0000A7                ; Setup parameters for call to function ZMacGetReq
   \   0000A7   7A..         MOV       R2,#savedRxOnIdle & 0xff
   \   0000A9   7B..         MOV       R3,#(savedRxOnIdle >> 8) & 0xff
   \   0000AB   7952         MOV       R1,#0x52
   \   0000AD   12....       LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
    352          
    353              // MAC receiver should be on during touch-link procedure
    354              ZMacSetReq( ZMacRxOnIdle, &x );
   \   0000B0                ; Setup parameters for call to function ZMacSetReq
   \   0000B0   AA..         MOV       R2,?XSP + 0
   \   0000B2   AB..         MOV       R3,?XSP + 1
   \   0000B4   7952         MOV       R1,#0x52
   \   0000B6   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    355          
    356              scanReqChannels = TOUCHLINK_SCAN_PRIMARY_CHANNELS;
   \   0000B9   90....       MOV       DPTR,#scanReqChannels
   \   0000BC   7401         MOV       A,#0x1
   \   0000BE   F0           MOVX      @DPTR,A
    357              numScanReqSent = 0;
   \   0000BF   90....       MOV       DPTR,#numScanReqSent
   \   0000C2   E4           CLR       A
   \   0000C3   F0           MOVX      @DPTR,A
    358          
    359              // Send out the first Scan Request
    360              initiatorSendScanReq( TRUE );
   \   0000C4                ; Setup parameters for call to function initiatorSendScanReq
   \   0000C4   7901         MOV       R1,#0x1
   \   0000C6   12....       LCALL     `??initiatorSendScanReq::?relay`; Banked call to: initiatorSendScanReq
    361          
    362              return ( ZSuccess );
   \   0000C9   7900         MOV       R1,#0x0
   \   0000CB   8002         SJMP      ??touchLinkInitiator_StartDevDisc_2
    363            }
    364          
    365            return ( ZFailure );
   \                     ??touchLinkInitiator_StartDevDisc_0:
   \   0000CD   7901         MOV       R1,#0x1
   \                     ??touchLinkInitiator_StartDevDisc_2:
   \   0000CF   7401         MOV       A,#0x1
   \   0000D1   02....       LJMP      ?Subroutine1 & 0xFFFF
    366          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   E8           MOV       A,R0
   \   000001                REQUIRE ??Subroutine50_0
   \   000001                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000003   8A..         MOV       ?V4,R2
   \   000005   8B..         MOV       ?V5,R3
   \   000007   E4           CLR       A
   \   000008   F5..         MOV       ?V6,A
   \   00000A   F5..         MOV       ?V7,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine57_0
   \   000003                ; // Fall through to label ??Subroutine57_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7A10         MOV       R2,#0x10
   \   000002                REQUIRE ??Subroutine58_0
   \   000002                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine59_0
   \   000002                ; // Fall through to label ??Subroutine59_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000003                REQUIRE ??Subroutine60_0
   \   000003                ; // Fall through to label ??Subroutine60_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000005   7404         MOV       A,#0x4
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine63_0:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7A20         MOV       R2,#0x20
   \   000002                REQUIRE ??Subroutine65_0
   \   000002                ; // Fall through to label ??Subroutine65_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine65_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine66_0
   \   000002                ; // Fall through to label ??Subroutine66_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine66_0:
   \   000000   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000003                REQUIRE ??Subroutine67_0
   \   000003                ; // Fall through to label ??Subroutine67_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine67_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000005   EA           MOV       A,R2
   \   000006   4B           ORL       A,R3
   \   000007   4C           ORL       A,R4
   \   000008   4D           ORL       A,R5
   \   000009   22           RET
    367          
    368          /*********************************************************************
    369           * @fn      bdbTL_Send_IndentifyReq
    370           *
    371           * @brief   Call to send out a scan request for factory new procedure
    372           *
    373           * @param   
    374           *
    375           * @return 
    376           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    377          void touchLinkInitiator_ResetToFNProcedure( void )
   \                     touchLinkInitiator_ResetToFNProcedure:
    378          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    379            if ( ( bdbCommissioningProcedureState.bdbCommissioningState == 0 ) || ( osal_get_timeoutEx( bdb_TaskID,BDB_CHANGE_COMMISSIONING_STATE ) == 0 ) )
   \   000004   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   600C         JZ        ??touchLinkInitiator_ResetToFNProcedure_0
   \   00000A                ; Setup parameters for call to function osal_get_timeoutEx
   \   00000A   7A04         MOV       R2,#0x4
   \   00000C   7B00         MOV       R3,#0x0
   \   00000E   90....       MOV       DPTR,#bdb_TaskID
   \   000011   12....       LCALL     ??Subroutine67_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000014   7009         JNZ       ??touchLinkInitiator_ResetToFNProcedure_1
    380            {
    381              touchlinkFNReset = TRUE;
   \                     ??touchLinkInitiator_ResetToFNProcedure_0:
   \   000016   90....       MOV       DPTR,#touchlinkFNReset
   \   000019   7401         MOV       A,#0x1
   \   00001B   F0           MOVX      @DPTR,A
    382              touchLinkInitiator_StartDevDisc( );
   \   00001C                ; Setup parameters for call to function touchLinkInitiator_StartDevDisc
   \   00001C   12....       LCALL     `??touchLinkInitiator_StartDevDisc::?relay`; Banked call to: touchLinkInitiator_StartDevDisc
    383            }
    384          }
   \                     ??touchLinkInitiator_ResetToFNProcedure_1:
   \   00001F   80..         SJMP      ??Subroutine46_0
    385          
    386          /*********************************************************************
    387           * @fn      touchLinkInitiator_AbortTL
    388           *
    389           * @brief   Abort Touch-link device discovery.
    390           *          Successful execution could be done before Network Start/Join
    391           *          commands are sent. Until then, since no device parameters
    392           *          such as network settings are altered, the Touch-Link is
    393           *          still reversible.
    394           *
    395           * @param   none
    396           *
    397           * @return  status
    398           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    399          ZStatus_t touchLinkInitiator_AbortTL( void )
   \                     touchLinkInitiator_AbortTL:
    400          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    401            if ( ( osal_stop_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_TL_SCAN_BASE_EVT ) == SUCCESS )
    402                 || ( osal_stop_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_CFG_TARGET_EVT ) == SUCCESS )
    403                 || ( osal_stop_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_W4_NWK_START_RSP_EVT ) == SUCCESS )
    404                 || ( osal_stop_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_W4_NWK_JOIN_RSP_EVT ) == SUCCESS ) )
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A20         MOV       R2,#0x20
   \   000006   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000009   6017         JZ        ??touchLinkInitiator_AbortTL_0
   \   00000B                ; Setup parameters for call to function osal_stop_timerEx
   \   00000B   7A40         MOV       R2,#0x40
   \   00000D   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000010   6010         JZ        ??touchLinkInitiator_AbortTL_0
   \   000012                ; Setup parameters for call to function osal_stop_timerEx
   \   000012   7A80         MOV       R2,#-0x80
   \   000014   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000017   6009         JZ        ??touchLinkInitiator_AbortTL_0
   \   000019                ; Setup parameters for call to function osal_stop_timerEx
   \   000019   7A00         MOV       R2,#0x0
   \   00001B   7B01         MOV       R3,#0x1
   \   00001D   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000020   701A         JNZ       ??touchLinkInitiator_AbortTL_1
    405            {
    406              initiatorSetNwkToInitState();
   \                     ??touchLinkInitiator_AbortTL_0:
   \   000022                ; Setup parameters for call to function initiatorSetNwkToInitState
   \   000022   12....       LCALL     `??initiatorSetNwkToInitState::?relay`; Banked call to: initiatorSetNwkToInitState
    407              touchLinkTransID = 0;
   \   000025   90....       MOV       DPTR,#touchLinkTransID
   \   000028   E4           CLR       A
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   F0           MOVX      @DPTR,A
   \   00002C   A3           INC       DPTR
   \   00002D   F0           MOVX      @DPTR,A
   \   00002E   A3           INC       DPTR
   \   00002F   12....       LCALL     ?Subroutine29 & 0xFFFF
    408              numScanReqSent = 0;
    409              initiatorClearSelectedTarget();
    410              selectedTargetNwkAddr = 0;
   \                     ??CrossCallReturnLabel_28:
   \   000032   90....       MOV       DPTR,#selectedTargetNwkAddr
   \   000035   E4           CLR       A
   \   000036   F0           MOVX      @DPTR,A
   \   000037   A3           INC       DPTR
   \   000038   F0           MOVX      @DPTR,A
    411          
    412              return ( ZSuccess );
   \   000039   F9           MOV       R1,A
   \   00003A   8002         SJMP      ??touchLinkInitiator_AbortTL_2
    413            }
    414          
    415            return ( ZFailure );
   \                     ??touchLinkInitiator_AbortTL_1:
   \   00003C   7901         MOV       R1,#0x1
   \                     ??touchLinkInitiator_AbortTL_2:
   \   00003E   80..         SJMP      ??Subroutine46_0
    416          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine44_0
   \   000002                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000008   E9           MOV       A,R1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#numScanReqSent
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function initiatorClearSelectedTarget
   \   000005                ; Setup parameters for call to function initiatorClearSelectedTarget
   \   000005   12....       LCALL     `??initiatorClearSelectedTarget::?relay`; Banked call to: initiatorClearSelectedTarget
   \   000008   22           RET
    417          
    418          /*********************************************************************
    419           * @fn          touchLinkInitiator_Init
    420           *
    421           * @brief       Initialization function for the TOUCHLINK Initiator task.
    422           *
    423           * @param       task_id - TOUCHLINK Initiator task id
    424           *
    425           * @return      none
    426           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    427          void touchLinkInitiator_Init( uint8 task_id )
   \                     touchLinkInitiator_Init:
    428          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    429            // Save our own Task ID
    430            touchLinkInitiator_TaskID = task_id;
   \   000006   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000009   F0           MOVX      @DPTR,A
    431          
    432            touchLink_SetTouchLinkTaskId( touchLinkInitiator_TaskID );
   \   00000A                ; Setup parameters for call to function touchLink_SetTouchLinkTaskId
   \   00000A   12....       LCALL     `??touchLink_SetTouchLinkTaskId::?relay`; Banked call to: touchLink_SetTouchLinkTaskId
    433          
    434          
    435            // Build a broadcast address for the Scan Request
    436            bcastAddr.addrMode = afAddrBroadcast;
   \   00000D   90....       MOV       DPTR,#bcastAddr + 8
   \   000010   740F         MOV       A,#0xf
   \   000012   F0           MOVX      @DPTR,A
    437            bcastAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVALL;
   \   000013   90....       MOV       DPTR,#bcastAddr
   \   000016   74FF         MOV       A,#-0x1
   \   000018   F0           MOVX      @DPTR,A
   \   000019   A3           INC       DPTR
   \   00001A   F0           MOVX      @DPTR,A
    438            bcastAddr.panId = 0xFFFF;
   \   00001B   90....       MOV       DPTR,#bcastAddr + 10
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   A3           INC       DPTR
   \   000020   F0           MOVX      @DPTR,A
    439            bcastAddr.endPoint = STUBAPS_INTER_PAN_EP;
   \   000021   90....       MOV       DPTR,#bcastAddr + 9
   \   000024   14           DEC       A
   \   000025   F0           MOVX      @DPTR,A
    440          
    441            // Initialize TOUCHLINK common variables
    442            touchLink_InitVariables( TRUE );
   \   000026                ; Setup parameters for call to function touchLink_InitVariables
   \   000026   7901         MOV       R1,#0x1
   \   000028   12....       LCALL     `??touchLink_InitVariables::?relay`; Banked call to: touchLink_InitVariables
    443          
    444            savedPollRate = POLL_RATE;
   \   00002B   90....       MOV       DPTR,#savedPollRate
   \   00002E   74E8         MOV       A,#-0x18
   \   000030   F0           MOVX      @DPTR,A
   \   000031   A3           INC       DPTR
   \   000032   7403         MOV       A,#0x3
   \   000034   F0           MOVX      @DPTR,A
    445            savedQueuedPollRate = QUEUED_POLL_RATE;
   \   000035   90....       MOV       DPTR,#savedQueuedPollRate
   \   000038   7464         MOV       A,#0x64
   \   00003A   F0           MOVX      @DPTR,A
   \   00003B   A3           INC       DPTR
   \   00003C   E4           CLR       A
   \   00003D   F0           MOVX      @DPTR,A
    446            savedResponsePollRate = RESPONSE_POLL_RATE;
   \   00003E   90....       MOV       DPTR,#savedResponsePollRate
   \   000041   7464         MOV       A,#0x64
   \   000043   F0           MOVX      @DPTR,A
   \   000044   A3           INC       DPTR
   \   000045   E4           CLR       A
   \   000046   12....       LCALL     ?Subroutine29 & 0xFFFF
    447          
    448            numScanReqSent = 0;
    449            initiatorClearSelectedTarget();
    450            scanReqChannels = TOUCHLINK_SCAN_PRIMARY_CHANNELS;
   \                     ??CrossCallReturnLabel_29:
   \   000049   90....       MOV       DPTR,#scanReqChannels
   \   00004C   7401         MOV       A,#0x1
   \   00004E   F0           MOVX      @DPTR,A
    451          
    452            initiatorSeqNum = 0;
   \   00004F   90....       MOV       DPTR,#initiatorSeqNum
   \   000052   E4           CLR       A
   \   000053   F0           MOVX      @DPTR,A
    453          
    454            // Register to receive the unprocessed Foundation command/response messages
    455            zcl_registerForMsg( touchLinkInitiator_TaskID );
   \   000054                ; Setup parameters for call to function zcl_registerForMsg
   \   000054   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000057   E0           MOVX      A,@DPTR
   \   000058   F9           MOV       R1,A
   \   000059   12....       LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    456          
    457            // Register for TOUCHLINK Initiator callbacks (for Inter-PAN commands)
    458            bdbTL_RegisterInterPANCmdCallbacks( &touchLinkInitiator_CmdCBs );
   \   00005C                ; Setup parameters for call to function bdbTL_RegisterInterPANCmdCallbacks
   \   00005C   7A..         MOV       R2,#touchLinkInitiator_CmdCBs & 0xff
   \   00005E   7B..         MOV       R3,#(touchLinkInitiator_CmdCBs >> 8) & 0xff
   \   000060   12....       LCALL     `??bdbTL_RegisterInterPANCmdCallbacks::?relay`; Banked call to: bdbTL_RegisterInterPANCmdCallbacks
    459          
    460            // Register for Initiator to receive Leave Confirm
    461            ZDO_RegisterForZdoCB( ZDO_LEAVE_CNF_CBID, initiatorZdoLeaveCnfCB );
   \   000063                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000063   7A..         MOV       R2,#`??initiatorZdoLeaveCnfCB::?relay` & 0xff
   \   000065   7B..         MOV       R3,#(`??initiatorZdoLeaveCnfCB::?relay` >> 8) & 0xff
   \   000067   7905         MOV       R1,#0x5
   \   000069   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
    462          
    463          #if (ZSTACK_ROUTER_BUILD)
    464            // Register to process ZDO messages
    465            ZDO_RegisterForZDOMsg( touchLinkInitiator_TaskID, Mgmt_Permit_Join_req );
   \   00006C                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00006C   7A36         MOV       R2,#0x36
   \   00006E   7B00         MOV       R3,#0x0
   \   000070   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000073   E0           MOVX      A,@DPTR
   \   000074   F9           MOV       R1,A
   \   000075   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    466            ZDO_RegisterForZDOMsg( touchLinkInitiator_TaskID, Device_annce );
   \   000078                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000078   7A13         MOV       R2,#0x13
   \   00007A   7B00         MOV       R3,#0x0
   \   00007C   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   F9           MOV       R1,A
   \   000081   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    467          #endif
    468          
    469          }
   \   000084   02....       LJMP      ??Subroutine54_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    470          
    471          /*********************************************************************
    472           * @fn      initiatorSelectNwkParams
    473           *
    474           * @brief   Select a unique PAN ID and Extended PAN ID when compared to
    475           *          the PAN IDs and Extended PAN IDs of the networks detected
    476           *          on the TOUCHLINK channels. The selected Extended PAN ID must be
    477           *          a random number (and not equal to our IEEE address).
    478           *
    479           * @param   void
    480           *
    481           * @return  void
    482           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    483          void initiatorSelectNwkParams( void )
   \                     initiatorSelectNwkParams:
    484          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    485            // Set our group ID range
    486            touchLink_PopGrpIDRange( touchLink_GetNumGrpIDs(), &touchLinkGrpIDsBegin, &touchLinkGrpIDsEnd );
   \   000004                ; Setup parameters for call to function touchLink_GetNumGrpIDs
   \   000004   12....       LCALL     `??touchLink_GetNumGrpIDs::?relay`; Banked call to: touchLink_GetNumGrpIDs
   \   000007   E9           MOV       A,R1
   \   000008   F9           MOV       R1,A
   \   000009                ; Setup parameters for call to function touchLink_PopGrpIDRange
   \   000009   7C..         MOV       R4,#touchLinkGrpIDsEnd & 0xff
   \   00000B   7D..         MOV       R5,#(touchLinkGrpIDsEnd >> 8) & 0xff
   \   00000D   7A..         MOV       R2,#touchLinkGrpIDsBegin & 0xff
   \   00000F   7B..         MOV       R3,#(touchLinkGrpIDsBegin >> 8) & 0xff
   \   000011   12....       LCALL     `??touchLink_PopGrpIDRange::?relay`; Banked call to: touchLink_PopGrpIDRange
    487          
    488            // Select a random Extended PAN ID
    489            touchLink_GenerateRandNum( _NIB.extendedPANID, Z_EXTADDR_LEN );
   \   000014                ; Setup parameters for call to function touchLink_GenerateRandNum
   \   000014   7908         MOV       R1,#0x8
   \   000016   7A..         MOV       R2,#(_NIB + 53) & 0xff
   \   000018   7B..         MOV       R3,#((_NIB + 53) >> 8) & 0xff
   \   00001A   12....       LCALL     `??touchLink_GenerateRandNum::?relay`; Banked call to: touchLink_GenerateRandNum
    490          
    491            // Select a random PAN ID
    492            _NIB.nwkPanId = osal_rand();
   \   00001D                ; Setup parameters for call to function osal_rand
   \   00001D   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000020   90....       MOV       DPTR,#_NIB + 33
   \   000023   12....       LCALL     ?Subroutine26 & 0xFFFF
    493          
    494            if ( _NIB.nwkLogicalChannel == 0 )
   \                     ??CrossCallReturnLabel_76:
   \   000026   90....       MOV       DPTR,#_NIB + 22
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   7008         JNZ       ??initiatorSelectNwkParams_0
    495            {
    496              if (TOUCHLINK_FIXED_CHANNEL_ENABLE == TRUE )
    497              {
    498                // Use the fixed channel defined in bdb_interface
    499                _NIB.nwkLogicalChannel = TOUCHLINK_FIXED_CHANNEL;
    500              }
    501              else
    502              {
    503                // Select randomly one of the TouchLink channels as our logical channel
    504                _NIB.nwkLogicalChannel = touchLink_GetRandPrimaryChannel( );
   \   00002C                ; Setup parameters for call to function touchLink_GetRandPrimaryChannel
   \   00002C   12....       LCALL     `??touchLink_GetRandPrimaryChannel::?relay`; Banked call to: touchLink_GetRandPrimaryChannel
   \   00002F   E9           MOV       A,R1
   \   000030   90....       MOV       DPTR,#_NIB + 22
   \   000033   F0           MOVX      @DPTR,A
    505              }
    506            }
    507            
    508            selectedTargetNwkAddr = 0;
   \                     ??initiatorSelectNwkParams_0:
   \   000034   90....       MOV       DPTR,#selectedTargetNwkAddr
   \   000037   E4           CLR       A
   \   000038   F0           MOVX      @DPTR,A
   \   000039   A3           INC       DPTR
   \   00003A   F0           MOVX      @DPTR,A
    509          
    510            if ( devState != DEV_INIT )
   \   00003B   90....       MOV       DPTR,#devState
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   6401         XRL       A,#0x1
   \   000041   6009         JZ        ??CrossCallReturnLabel_77
    511            {
    512              // Let's assume we're the first initiator
    513              _NIB.nwkDevAddress = touchLink_PopNwkAddress();
   \   000043                ; Setup parameters for call to function touchLink_PopNwkAddress
   \   000043   12....       LCALL     `??touchLink_PopNwkAddress::?relay`; Banked call to: touchLink_PopNwkAddress
   \   000046   90....       MOV       DPTR,#_NIB + 20
   \   000049   12....       LCALL     ?Subroutine26 & 0xFFFF
    514            }
    515          
    516            // Configure MAC with our network parameters
    517            touchLink_SetMacNwkParams( _NIB.nwkDevAddress, _NIB.nwkPanId, _NIB.nwkLogicalChannel );
   \                     ??CrossCallReturnLabel_77:
   \   00004C                ; Setup parameters for call to function touchLink_SetMacNwkParams
   \   00004C   12....       LCALL     ?Subroutine9 & 0xFFFF
    518          }
   \                     ??CrossCallReturnLabel_0:
   \   00004F   02....       LJMP      ??Subroutine46_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine47_0
   \   000001                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   EB           MOV       A,R3
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   90....       MOV       DPTR,#_NIB + 22
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   90....       MOV       DPTR,#_NIB + 33
   \   000008   E0           MOVX      A,@DPTR
   \   000009   FC           MOV       R4,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   FD           MOV       R5,A
   \   00000D   90....       MOV       DPTR,#_NIB + 20
   \   000010   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000013   12....       LCALL     `??touchLink_SetMacNwkParams::?relay`; Banked call to: touchLink_SetMacNwkParams
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET
    519          
    520          /*********************************************************************
    521           * @fn      touchLinkInitiator_RegisterForMsg
    522           *
    523           * @brief   Register application task to receive unprocessed messages
    524           *          received by the initiator endpoint.
    525           *
    526           * @param   taskId - task Id of the Application where commands will be sent to
    527           *
    528           * @return  ZSuccess if task registration successful
    529           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    530          ZStatus_t touchLinkInitiator_RegisterForMsg( uint8 taskId )
   \                     touchLinkInitiator_RegisterForMsg:
    531          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    532            if ( initiatorRegisteredMsgAppTaskID == TASK_NO_TASK )
   \   000004   90....       MOV       DPTR,#initiatorRegisteredMsgAppTaskID
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F4           CPL       A
   \   000009   7006         JNZ       ??touchLinkInitiator_RegisterForMsg_0
    533            {
    534              initiatorRegisteredMsgAppTaskID = taskId;
   \   00000B   E9           MOV       A,R1
   \   00000C   F0           MOVX      @DPTR,A
    535              return ( ZSuccess );
   \   00000D   7900         MOV       R1,#0x0
   \   00000F   8002         SJMP      ??touchLinkInitiator_RegisterForMsg_1
    536            }
    537            return ( ZFailure );
   \                     ??touchLinkInitiator_RegisterForMsg_0:
   \   000011   7901         MOV       R1,#0x1
   \                     ??touchLinkInitiator_RegisterForMsg_1:
   \   000013   02....       LJMP      ??Subroutine46_0 & 0xFFFF
    538          }
    539          
    540          /*********************************************************************
    541           * @fn          touchLinkInitiator_event_loop
    542           *
    543           * @brief       Event Loop Processor for TOUCHLINK Initiator.
    544           *
    545           * @param       task_id - task id
    546           * @param       events - event bitmap
    547           *
    548           * @return      unprocessed events
    549           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    550          uint16 touchLinkInitiator_event_loop( uint8 task_id, uint16 events )
   \                     touchLinkInitiator_event_loop:
    551          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 59
   \   000005   74C5         MOV       A,#-0x3b
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    552            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL       A,#0x80
   \   000010   603C         JZ        ??touchLinkInitiator_event_loop_0
    553            {
    554              osal_event_hdr_t *pMsg;
    555              ZStatus_t stat = ZFailure;
    556          
    557              if ( (pMsg = (osal_event_hdr_t *)osal_msg_receive( task_id )) != NULL )
   \   000012                ; Setup parameters for call to function osal_msg_receive
   \   000012   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000015   8A..         MOV       ?V0,R2
   \   000017   8B..         MOV       ?V1,R3
   \   000019   EA           MOV       A,R2
   \   00001A   4B           ORL       A,R3
   \   00001B   6017         JZ        ??touchLinkInitiator_event_loop_1
    558              {
    559                switch ( pMsg->event )
   \   00001D   8A82         MOV       DPL,R2
   \   00001F   8B83         MOV       DPH,R3
   \   000021   E0           MOVX      A,@DPTR
   \   000022   242F         ADD       A,#0x2f
   \   000024   6016         JZ        ??touchLinkInitiator_event_loop_2
   \   000026   24FE         ADD       A,#-0x2
   \   000028   701A         JNZ       ??touchLinkInitiator_event_loop_3
    560                {
    561          
    562          #if (ZSTACK_ROUTER_BUILD)
    563                  case ZDO_CB_MSG:
    564                    // ZDO sends the message that we registered for
    565                    touchLink_RouterProcessZDOMsg( (zdoIncomingMsg_t *)pMsg );
   \   00002A                ; Setup parameters for call to function touchLink_RouterProcessZDOMsg
   \   00002A   12....       LCALL     `??touchLink_RouterProcessZDOMsg::?relay`; Banked call to: touchLink_RouterProcessZDOMsg
    566                    stat = ZSuccess;
    567                    break;
    568          #endif
    569                  case ZDO_STATE_CHANGE:
    570                    initiatorProcessStateChange( (devStates_t)pMsg->status );
    571                    stat = ZSuccess;
    572                    break;
    573          
    574                  default:
    575                    break;
    576                }
    577          
    578                if ( stat == ZSuccess )
    579                {
    580                  // Release the OSAL message
    581                  VOID osal_msg_deallocate( (uint8 *)pMsg );
   \                     ??touchLinkInitiator_event_loop_4:
   \   00002D                ; Setup parameters for call to function osal_msg_deallocate
   \   00002D   AA..         MOV       R2,?V0
   \   00002F   AB..         MOV       R3,?V1
   \   000031   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    582                }
    583                else
    584                {
    585                  // forward to the application
    586                  osal_msg_send( initiatorRegisteredMsgAppTaskID, (uint8 *)pMsg );
    587                }
    588              }
    589          
    590              // return unprocessed events
    591              return ( events ^ SYS_EVENT_MSG );
   \                     ??touchLinkInitiator_event_loop_1:
   \   000034   EE           MOV       A,R6
   \   000035   FA           MOV       R2,A
   \   000036   EF           MOV       A,R7
   \   000037   6480         XRL       A,#0x80
   \   000039   02....       LJMP      ??touchLinkInitiator_event_loop_5 & 0xFFFF
   \                     ??touchLinkInitiator_event_loop_2:
   \   00003C                ; Setup parameters for call to function initiatorProcessStateChange
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   F9           MOV       R1,A
   \   00003F   12....       LCALL     `??initiatorProcessStateChange::?relay`; Banked call to: initiatorProcessStateChange
   \   000042   80E9         SJMP      ??touchLinkInitiator_event_loop_4
   \                     ??touchLinkInitiator_event_loop_3:
   \   000044                ; Setup parameters for call to function osal_msg_send
   \   000044   90....       MOV       DPTR,#initiatorRegisteredMsgAppTaskID
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F9           MOV       R1,A
   \   000049   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   00004C   80E6         SJMP      ??touchLinkInitiator_event_loop_1
    592            }
    593          
    594            if ( events & TOUCHLINK_TL_SCAN_BASE_EVT )
   \                     ??touchLinkInitiator_event_loop_0:
   \   00004E   EA           MOV       A,R2
   \   00004F   5420         ANL       A,#0x20
   \   000051   7003         JNZ       $+5
   \   000053   02....       LJMP      ??touchLinkInitiator_event_loop_6 & 0xFFFF
    595            {
    596              if ( ( ( scanReqChannels == TOUCHLINK_SCAN_PRIMARY_CHANNELS ) && ( numScanReqSent < TOUCHLINK_INITIATOR_NUM_SCAN_REQ_PRIMARY  ) ) ||
    597                   ( ( scanReqChannels == TOUCHLINK_SCAN_SECONDARY_CHANNELS ) && ( numScanReqSent < TOUCHLINK_INITIATOR_NUM_SCAN_REQ_EXTENDED ) ) )
   \   000056   EA           MOV       A,R2
   \   000057   6420         XRL       A,#0x20
   \   000059   FE           MOV       R6,A
   \   00005A   90....       MOV       DPTR,#scanReqChannels
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   6401         XRL       A,#0x1
   \   000060   7017         JNZ       ??touchLinkInitiator_event_loop_7
   \   000062   90....       MOV       DPTR,#numScanReqSent
   \   000065   E0           MOVX      A,@DPTR
   \   000066   C3           CLR       C
   \   000067   9408         SUBB      A,#0x8
   \   000069   401C         JC        ??touchLinkInitiator_event_loop_8
   \   00006B   90....       MOV       DPTR,#bdbAttributes + 14
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   701E         JNZ       ??touchLinkInitiator_event_loop_9
    598              {
    599                // Send another Scan Request on the next channel
    600                initiatorSendScanReq( FALSE );
    601              }
    602              else // Channels scan is complete
    603              {
    604                if ( ( scanReqChannels == TOUCHLINK_SCAN_PRIMARY_CHANNELS ) && ( bdbAttributes.bdbNodeIsOnANetwork == FALSE ) )
    605                {
    606                  // Extended scan is required, lets scan secondary channels
    607                  scanReqChannels = TOUCHLINK_SCAN_SECONDARY_CHANNELS;
   \   000071   90....       MOV       DPTR,#scanReqChannels
   \   000074   7402         MOV       A,#0x2
   \   000076   F0           MOVX      @DPTR,A
    608          
    609                  // Send another Scan Request on the next channel
    610                  initiatorSendScanReq( FALSE );
   \   000077                ; Setup parameters for call to function initiatorSendScanReq
   \   000077   800E         SJMP      ??touchLinkInitiator_event_loop_8
    611                }
   \                     ??touchLinkInitiator_event_loop_7:
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   6402         XRL       A,#0x2
   \   00007C   7011         JNZ       ??touchLinkInitiator_event_loop_9
   \   00007E   90....       MOV       DPTR,#numScanReqSent
   \   000081   E0           MOVX      A,@DPTR
   \   000082   C3           CLR       C
   \   000083   9414         SUBB      A,#0x14
   \   000085   5008         JNC       ??touchLinkInitiator_event_loop_9
   \                     ??touchLinkInitiator_event_loop_8:
   \   000087                ; Setup parameters for call to function initiatorSendScanReq
   \   000087   7900         MOV       R1,#0x0
   \   000089   12....       LCALL     `??initiatorSendScanReq::?relay`; Banked call to: initiatorSendScanReq
   \   00008C   02....       LJMP      ??touchLinkInitiator_event_loop_10 & 0xFFFF
    612                // See if we've received any Scan Responses back
    613                else if ( ( selectedTarget.lastRssi != TOUCHLINK_WORST_RSSI )
    614                         && ( selectedTarget.scanRsp.deviceInfo.endpoint != DEV_INFO_INVALID_EP ) )
   \                     ??touchLinkInitiator_event_loop_9:
   \   00008F   90....       MOV       DPTR,#selectedTarget + 53
   \   000092   E0           MOVX      A,@DPTR
   \   000093   64BA         XRL       A,#0xba
   \   000095   7003         JNZ       $+5
   \   000097   02....       LJMP      ??touchLinkInitiator_event_loop_11 & 0xFFFF
   \   00009A   90....       MOV       DPTR,#selectedTarget + 31
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   64FE         XRL       A,#0xfe
   \   0000A0   7003         JNZ       $+5
   \   0000A2   02....       LJMP      ??touchLinkInitiator_event_loop_11 & 0xFFFF
    615                {
    616                  // Make sure the responder is not a factory new initiator if this device is also 
    617                  // factory new
    618                  if ( ( selectedTarget.scanRsp.touchLinkInitiator == FALSE ) ||
    619                       ( bdbAttributes.bdbNodeIsOnANetwork == TRUE ) )
   \   0000A5   90....       MOV       DPTR,#selectedTarget + 7
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   5410         ANL       A,#0x10
   \   0000AB   600B         JZ        ??touchLinkInitiator_event_loop_12
   \   0000AD   90....       MOV       DPTR,#bdbAttributes + 14
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   6401         XRL       A,#0x1
   \   0000B3   6003         JZ        $+5
   \   0000B5   02....       LJMP      ??touchLinkInitiator_event_loop_10 & 0xFFFF
    620                  {
    621                    bdbTLIdentifyReq_t req;
    622          
    623                    // Tune to the channel that the Scan Response was heard on
    624                    touchLink_SetChannel( selectedTarget.rxChannel );
   \                     ??touchLinkInitiator_event_loop_12:
   \   0000B8                ; Setup parameters for call to function touchLink_SetChannel
   \   0000B8   12....       LCALL     ?Subroutine17 & 0xFFFF
    625          
    626                    req.transID = selectedTarget.scanRsp.transID;
   \                     ??CrossCallReturnLabel_180:
   \   0000BB   90....       MOV       DPTR,#selectedTarget
   \   0000BE   12....       LCALL     ?XLOAD_R0123
   \   0000C1   7408         MOV       A,#0x8
   \   0000C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C6   12....       LCALL     ?XSTORE_R0123
    627                    req.IdDuration = BDB_TL_IDENTIFY_TIME;
   \   0000C9   740C         MOV       A,#0xc
   \   0000CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CE   74FF         MOV       A,#-0x1
   \   0000D0   F0           MOVX      @DPTR,A
   \   0000D1   A3           INC       DPTR
   \   0000D2   F0           MOVX      @DPTR,A
    628                    
    629                    if ( touchlinkFNReset == TRUE )
   \   0000D3   90....       MOV       DPTR,#touchlinkFNReset
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   6401         XRL       A,#0x1
   \   0000D9   7007         JNZ       ??touchLinkInitiator_event_loop_13
    630                    {
    631                      osal_set_event( touchLinkInitiator_TaskID, TOUCHLINK_CFG_TARGET_EVT );
   \   0000DB                ; Setup parameters for call to function osal_set_event
   \   0000DB   7A40         MOV       R2,#0x40
   \   0000DD   7B00         MOV       R3,#0x0
   \   0000DF   02....       LJMP      ??touchLinkInitiator_event_loop_14 & 0xFFFF
    632                      return ( events ^ TOUCHLINK_TL_SCAN_BASE_EVT );
    633                    }
    634                    
    635                    bdbTL_Send_IndentifyReq( TOUCHLINK_INTERNAL_ENDPOINT, &(selectedTarget.srcAddr), &req, initiatorSeqNum++ );
   \                     ??touchLinkInitiator_event_loop_13:
   \   0000E2   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   0000E5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E8   7409         MOV       A,#0x9
   \   0000EA   12....       LCALL     ?XSTACK_DISP102_8
   \   0000ED   7A..         MOV       R2,#(selectedTarget + 38) & 0xff
   \   0000EF   7B..         MOV       R3,#((selectedTarget + 38) >> 8) & 0xff
   \   0000F1   790D         MOV       R1,#0xd
   \   0000F3   12....       LCALL     `??bdbTL_Send_IndentifyReq::?relay`; Banked call to: bdbTL_Send_IndentifyReq
   \   0000F6   7401         MOV       A,#0x1
   \   0000F8   12....       LCALL     ?DEALLOC_XSTACK8
    636          
    637          #if ZSTACK_ROUTER_BUILD
    638                    uint8 i = 0;
   \   0000FB   7900         MOV       R1,#0x0
   \   0000FD   8001         SJMP      ??touchLinkInitiator_event_loop_15
    639                      
    640                    while ( !CHECK_BIT ( selectedTarget.scanRsp.keyBitmask , i ) ) 
    641                    {
    642                      i++;
   \                     ??touchLinkInitiator_event_loop_16:
   \   0000FF   09           INC       R1
    643                    }
   \                     ??touchLinkInitiator_event_loop_15:
   \   000100   90....       MOV       DPTR,#selectedTarget + 9
   \   000103   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000106   E9           MOV       A,R1
   \   000107   78..         MOV       R0,#?V0
   \   000109   12....       LCALL     ?US_SHR
   \   00010C   E5..         MOV       A,?V0
   \   00010E   A2E0         MOV       C,0xE0 /* A   */.0
   \   000110   50ED         JNC       ??touchLinkInitiator_event_loop_16
    644              
    645                    initiatorNwkParams.keyIndex = i;
   \   000112   E9           MOV       A,R1
   \   000113   90....       MOV       DPTR,#initiatorNwkParams + 8
   \   000116   F0           MOVX      @DPTR,A
    646                    zTouchLinkNwkStartRtr = TRUE;
   \   000117   90....       MOV       DPTR,#zTouchLinkNwkStartRtr
   \   00011A   7401         MOV       A,#0x1
   \   00011C   F0           MOVX      @DPTR,A
    647                    // Disabe other TouchLink events
    648                    osal_set_event( touchLinkInitiator_TaskID, TOUCHLINK_DISABLE_RX_EVT );
   \   00011D                ; Setup parameters for call to function osal_set_event
   \   00011D   12....       LCALL     ?Subroutine10 & 0xFFFF
    649          #endif
    650                    osal_start_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_CFG_TARGET_EVT, TOUCHLINK_INITIATOR_IDENTIFY_INTERVAL );
   \                     ??CrossCallReturnLabel_169:
   \   000120                ; Setup parameters for call to function osal_start_timerEx
   \   000120   90....       MOV       DPTR,#__Constant_1f4
   \   000123   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000126   7A40         MOV       R2,#0x40
   \   000128   12....       LCALL     ??Subroutine58_0 & 0xFFFF
    651                  }
    652                  // else wait for touch-link commands from the other initiator
    653                }
   \                     ??CrossCallReturnLabel_114:
   \   00012B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00012E   800B         SJMP      ??CrossCallReturnLabel_30
    654                else
    655                {
    656                  // We did not manage to select any target
    657                  // Let's just go back to our initial configuration
    658                  osal_set_event( touchLinkInitiator_TaskID, TOUCHLINK_DISABLE_RX_EVT );
   \                     ??touchLinkInitiator_event_loop_11:
   \   000130                ; Setup parameters for call to function osal_set_event
   \   000130   12....       LCALL     ?Subroutine10 & 0xFFFF
    659                  bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_TL_NO_SCAN_RESPONSE;
   \                     ??CrossCallReturnLabel_170:
   \   000133   90....       MOV       DPTR,#bdbAttributes + 10
   \   000136   7405         MOV       A,#0x5
   \   000138   12....       LCALL     ?Subroutine30 & 0xFFFF
    660                  bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, FALSE );
    661                }
    662              }
    663          
    664              // return unprocessed events
    665              return ( events ^ TOUCHLINK_TL_SCAN_BASE_EVT );
   \                     ??CrossCallReturnLabel_30:
   \   00013B   02....       LJMP      ??touchLinkInitiator_event_loop_10 & 0xFFFF
    666            }
    667          
    668            if ( events & TOUCHLINK_CFG_TARGET_EVT )
   \                     ??touchLinkInitiator_event_loop_6:
   \   00013E   EA           MOV       A,R2
   \   00013F   5440         ANL       A,#0x40
   \   000141   7003         JNZ       $+5
   \   000143   02....       LJMP      ??touchLinkInitiator_event_loop_17 & 0xFFFF
    669            {
    670              ZStatus_t status = ZFailure;
    671          
    672              bdbTLIdentifyReq_t req;
    673          
    674              req.transID = selectedTarget.scanRsp.transID;
   \   000146   90....       MOV       DPTR,#selectedTarget
   \   000149   12....       LCALL     ?XLOAD_R0123
   \   00014C   7408         MOV       A,#0x8
   \   00014E   12....       LCALL     ?XSTACK_DISP0_8
   \   000151   12....       LCALL     ?XSTORE_R0123
    675              req.IdDuration = 0x00;
   \   000154   740C         MOV       A,#0xc
   \   000156   12....       LCALL     ?XSTACK_DISP0_8
   \   000159   E4           CLR       A
   \   00015A   F0           MOVX      @DPTR,A
   \   00015B   A3           INC       DPTR
   \   00015C   F0           MOVX      @DPTR,A
    676              uint8 tcExtAddr[Z_EXTADDR_LEN];
    677              uint8 DistributedSecurityNwkAddress[Z_EXTADDR_LEN] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
   \   00015D   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   000160   7433         MOV       A,#0x33
   \   000162   12....       LCALL     ?XSTACK_DISP102_8
   \   000165   7408         MOV       A,#0x8
   \   000167   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    678                  
    679              if ( zTouchLinkNwkStartRtr == FALSE )
   \   00016A   90....       MOV       DPTR,#zTouchLinkNwkStartRtr
   \   00016D   E0           MOVX      A,@DPTR
   \   00016E   7019         JNZ       ??touchLinkInitiator_event_loop_18
    680              {
    681                // Send an Identify stop Request
    682                bdbTL_Send_IndentifyReq( TOUCHLINK_INTERNAL_ENDPOINT, &(selectedTarget.srcAddr), &req, initiatorSeqNum++ );
   \   000170   12....       LCALL     ??Subroutine51_0 & 0xFFFF
    683              }
   \                     ??CrossCallReturnLabel_103:
   \   000173   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000176   7409         MOV       A,#0x9
   \   000178   12....       LCALL     ?XSTACK_DISP102_8
   \   00017B   7A..         MOV       R2,#(selectedTarget + 38) & 0xff
   \   00017D   7B..         MOV       R3,#((selectedTarget + 38) >> 8) & 0xff
   \   00017F   790D         MOV       R1,#0xd
   \   000181   12....       LCALL     `??bdbTL_Send_IndentifyReq::?relay`; Banked call to: bdbTL_Send_IndentifyReq
   \   000184   7401         MOV       A,#0x1
   \   000186   12....       LCALL     ?DEALLOC_XSTACK8
    684              
    685             // See if the target is part of our network
    686              if ( !TOUCHLINK_SAME_NWK( selectedTarget.scanRsp.PANID, selectedTarget.scanRsp.extendedPANID ) )
   \                     ??touchLinkInitiator_event_loop_18:
   \   000189   EE           MOV       A,R6
   \   00018A   6440         XRL       A,#0x40
   \   00018C   FE           MOV       R6,A
   \   00018D   90....       MOV       DPTR,#_NIB + 33
   \   000190   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000193   90....       MOV       DPTR,#selectedTarget + 25
   \   000196   E0           MOVX      A,@DPTR
   \   000197   68           XRL       A,R0
   \   000198   7003         JNZ       ??touchLinkInitiator_event_loop_19
   \   00019A   A3           INC       DPTR
   \   00019B   E0           MOVX      A,@DPTR
   \   00019C   69           XRL       A,R1
   \                     ??touchLinkInitiator_event_loop_19:
   \   00019D   7011         JNZ       ??touchLinkInitiator_event_loop_20
   \   00019F                ; Setup parameters for call to function sAddrExtCmp
   \   00019F   7C..         MOV       R4,#(selectedTarget + 15) & 0xff
   \   0001A1   7D..         MOV       R5,#((selectedTarget + 15) >> 8) & 0xff
   \   0001A3   7A..         MOV       R2,#(_NIB + 53) & 0xff
   \   0001A5   7B..         MOV       R3,#((_NIB + 53) >> 8) & 0xff
   \   0001A7   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   0001AA   E9           MOV       A,R1
   \   0001AB   6003         JZ        $+5
   \   0001AD   02....       LJMP      ??touchLinkInitiator_event_loop_21 & 0xFFFF
    687              {
    688                // If the local device is not the trust center, always return TRUE
    689                status = APSME_GetRequest( apsTrustCenterAddress, 0, tcExtAddr );
   \                     ??touchLinkInitiator_event_loop_20:
   \   0001B0                ; Setup parameters for call to function APSME_GetRequest
   \   0001B0   742B         MOV       A,#0x2b
   \   0001B2   12....       LCALL     ?XSTACK_DISP102_8
   \   0001B5   7A00         MOV       R2,#0x0
   \   0001B7   7B00         MOV       R3,#0x0
   \   0001B9   79AB         MOV       R1,#-0x55
   \   0001BB   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   \   0001BE   E9           MOV       A,R1
   \   0001BF   F8           MOV       R0,A
    690                  
    691                // Notify BDB state machine
    692                if ( bdbAttributes.bdbNodeIsOnANetwork == TRUE )
   \   0001C0   90....       MOV       DPTR,#bdbAttributes + 14
   \   0001C3   E0           MOVX      A,@DPTR
   \   0001C4   6401         XRL       A,#0x1
   \   0001C6   701A         JNZ       ??touchLinkInitiator_event_loop_22
    693                {
    694                  if ( ( status == ZSuccess ) && ( !osal_ExtAddrEqual( DistributedSecurityNwkAddress, tcExtAddr ) ) )
   \   0001C8   E9           MOV       A,R1
   \   0001C9   7017         JNZ       ??touchLinkInitiator_event_loop_22
   \   0001CB                ; Setup parameters for call to function sAddrExtCmp
   \   0001CB   742B         MOV       A,#0x2b
   \   0001CD   12....       LCALL     ?XSTACK_DISP102_8
   \   0001D0   7433         MOV       A,#0x33
   \   0001D2   12....       LCALL     ?XSTACK_DISP101_8
   \   0001D5   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   0001D8   E9           MOV       A,R1
   \   0001D9   7007         JNZ       ??touchLinkInitiator_event_loop_22
    695                  {
    696                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_TL_NOT_PERMITTED;
   \   0001DB   90....       MOV       DPTR,#bdbAttributes + 10
   \   0001DE   7406         MOV       A,#0x6
   \   0001E0   8010         SJMP      ??touchLinkInitiator_event_loop_23
    697                    bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, FALSE );
    698                    return ( events ^ TOUCHLINK_CFG_TARGET_EVT );
    699                  }
    700                }
    701                      
    702                // verify address ranges split possible if required
    703                if ( !touchLink_IsValidSplitFreeRanges( selectedTarget.scanRsp.totalGrpIDs ) )
   \                     ??touchLinkInitiator_event_loop_22:
   \   0001E2                ; Setup parameters for call to function touchLink_IsValidSplitFreeRanges
   \   0001E2   90....       MOV       DPTR,#selectedTarget + 30
   \   0001E5   E0           MOVX      A,@DPTR
   \   0001E6   F9           MOV       R1,A
   \   0001E7   12....       LCALL     `??touchLink_IsValidSplitFreeRanges::?relay`; Banked call to: touchLink_IsValidSplitFreeRanges
   \   0001EA   E9           MOV       A,R1
   \   0001EB   700B         JNZ       ??touchLinkInitiator_event_loop_24
    704                {
    705                  bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_TL_NOT_AA_CAPABLE;
   \   0001ED   90....       MOV       DPTR,#bdbAttributes + 10
   \   0001F0   7404         MOV       A,#0x4
   \                     ??touchLinkInitiator_event_loop_23:
   \   0001F2   F0           MOVX      @DPTR,A
    706                  bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, FALSE );
   \   0001F3                ; Setup parameters for call to function bdb_reportCommissioningState
   \   0001F3   7A00         MOV       R2,#0x0
   \   0001F5   02....       LJMP      ??touchLinkInitiator_event_loop_25 & 0xFFFF
    707                  return ( events ^ TOUCHLINK_CFG_TARGET_EVT );
    708                }
    709                
    710                if ( touchlinkFNReset == TRUE )
   \                     ??touchLinkInitiator_event_loop_24:
   \   0001F8   90....       MOV       DPTR,#touchlinkFNReset
   \   0001FB   E0           MOVX      A,@DPTR
   \   0001FC   6401         XRL       A,#0x1
   \   0001FE   700B         JNZ       ??touchLinkInitiator_event_loop_26
    711                {
    712                  touchlinkFNReset = FALSE;
   \   000200   E4           CLR       A
   \   000201   F0           MOVX      @DPTR,A
    713                  touchLinkInitiator_ResetToFNSelectedTarget( );
   \   000202                ; Setup parameters for call to function touchLinkInitiator_ResetToFNSelectedTarget
   \   000202   12....       LCALL     `??touchLinkInitiator_ResetToFNSelectedTarget::?`; Banked call to: touchLinkInitiator_ResetToFNSelectedTarget
    714                  osal_set_event( touchLinkInitiator_TaskID, TOUCHLINK_DISABLE_RX_EVT );
   \   000205                ; Setup parameters for call to function osal_set_event
   \   000205   7A00         MOV       R2,#0x0
   \   000207   7B02         MOV       R3,#0x2
   \   000209   8027         SJMP      ??touchLinkInitiator_event_loop_14
    715                  
    716                  return ( events ^ TOUCHLINK_CFG_TARGET_EVT );
    717                }
    718                  
    719                if ( bdbAttributes.bdbNodeIsOnANetwork == TRUE )
   \                     ??touchLinkInitiator_event_loop_26:
   \   00020B   90....       MOV       DPTR,#bdbAttributes + 14
   \   00020E   E0           MOVX      A,@DPTR
   \   00020F   6401         XRL       A,#0x1
   \   000211   7018         JNZ       ??touchLinkInitiator_event_loop_27
    720                {
    721                  // Ask the target to join our network
    722                  osal_start_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_NWK_FORMATION_SUCCESS_EVT, 50);
   \   000213                ; Setup parameters for call to function osal_start_timerEx
   \   000213   90....       MOV       DPTR,#__Constant_32
   \   000216   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000219   7A00         MOV       R2,#0x0
   \   00021B   7B20         MOV       R3,#0x20
   \   00021D   12....       LCALL     ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000220   12....       LCALL     ?DEALLOC_XSTACK8
    723                  zTouchLinkNwkStartRtr = FALSE;
   \   000223   90....       MOV       DPTR,#zTouchLinkNwkStartRtr
   \   000226   E4           CLR       A
   \   000227   F0           MOVX      @DPTR,A
    724                  return ( events ^ TOUCHLINK_CFG_TARGET_EVT );
   \   000228   02....       LJMP      ??touchLinkInitiator_event_loop_10 & 0xFFFF
    725                }
    726                else if ( ZSTACK_ROUTER_BUILD == TRUE )
    727                {
    728                  // Tune to the channel that the Scan Response was heard on
    729                  touchLink_SetChannel( selectedTarget.rxChannel );
   \                     ??touchLinkInitiator_event_loop_27:
   \   00022B                ; Setup parameters for call to function touchLink_SetChannel
   \   00022B   12....       LCALL     ?Subroutine17 & 0xFFFF
    730                  
    731                  // Try to form a new network
    732                  osal_set_event( touchLinkInitiator_TaskID, TOUCHLINK_NWK_RTR_START_EVT);
   \                     ??CrossCallReturnLabel_181:
   \   00022E                ; Setup parameters for call to function osal_set_event
   \   00022E   7A00         MOV       R2,#0x0
   \   000230   7B10         MOV       R3,#0x10
   \                     ??touchLinkInitiator_event_loop_14:
   \   000232   12....       LCALL     ??Subroutine68_0 & 0xFFFF
    733                  return ( events ^ TOUCHLINK_CFG_TARGET_EVT );
   \                     ??CrossCallReturnLabel_171:
   \   000235   02....       LJMP      ??touchLinkInitiator_event_loop_10 & 0xFFFF
    734                }
    735                else if ( ZSTACK_ROUTER_BUILD == FALSE )
    736                {
    737                  if ( selectedTarget.scanRsp.zLogicalType == ZG_DEVICETYPE_ROUTER )
    738                  {
    739                    if ( bdbAttributes.bdbNodeIsOnANetwork == FALSE )
    740                    {
    741                      _NIB.nwkDevAddress = APL_FREE_NWK_ADDR_RANGE_BEGIN;
    742                    }
    743                    
    744                    // Must be the first light; ask the light to start the network
    745                    status = initiatorSendNwkStartReq( &(selectedTarget.scanRsp) );
    746                  }
    747                  else
    748                  {
    749                    // Notify the BDB state machine 
    750                    bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
    751                    bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, FALSE );
    752                    return ( events ^ TOUCHLINK_CFG_TARGET_EVT );
    753                  }
    754                }
    755              }
    756              
    757              else if ( _NIB.nwkUpdateId != selectedTarget.scanRsp.nwkUpdateId )
   \                     ??touchLinkInitiator_event_loop_21:
   \   000238   90....       MOV       DPTR,#_NIB + 109
   \   00023B   E0           MOVX      A,@DPTR
   \   00023C   F8           MOV       R0,A
   \   00023D   90....       MOV       DPTR,#selectedTarget + 23
   \   000240   E0           MOVX      A,@DPTR
   \   000241   68           XRL       A,R0
   \   000242   7003         JNZ       $+5
   \   000244   02....       LJMP      ??touchLinkInitiator_event_loop_28 & 0xFFFF
    758              {
    759                // Set NWK task to run
    760                nwk_setStateIdle( TRUE );
   \   000247                ; Setup parameters for call to function nwk_setStateIdle
   \   000247   7901         MOV       R1,#0x1
   \   000249   12....       LCALL     `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
    761                
    762                // Target is already part of our network
    763                if ( selectedTarget.scanRsp.nwkUpdateId > _NIB.nwkUpdateId )
   \   00024C   90....       MOV       DPTR,#selectedTarget + 23
   \   00024F   E0           MOVX      A,@DPTR
   \   000250   F9           MOV       R1,A
   \   000251   90....       MOV       DPTR,#_NIB + 109
   \   000254   E0           MOVX      A,@DPTR
   \   000255   F8           MOV       R0,A
   \   000256   C3           CLR       C
   \   000257   99           SUBB      A,R1
   \   000258   500B         JNC       ??touchLinkInitiator_event_loop_29
    764                {
    765                  // Update our network update id and logical channel
    766                  touchLink_ProcessNwkUpdate( selectedTarget.scanRsp.nwkUpdateId, selectedTarget.scanRsp.logicalChannel );
   \   00025A                ; Setup parameters for call to function touchLink_ProcessNwkUpdate
   \   00025A   90....       MOV       DPTR,#selectedTarget + 24
   \   00025D   E0           MOVX      A,@DPTR
   \   00025E   FA           MOV       R2,A
   \   00025F   12....       LCALL     `??touchLink_ProcessNwkUpdate::?relay`; Banked call to: touchLink_ProcessNwkUpdate
    767          
    768                  // We're done here
    769                  status = ZSuccess;
   \   000262   02....       LJMP      ??touchLinkInitiator_event_loop_30 & 0xFFFF
    770                }
    771                else if ( selectedTarget.scanRsp.nwkUpdateId < _NIB.nwkUpdateId )
   \                     ??touchLinkInitiator_event_loop_29:
   \   000265   E9           MOV       A,R1
   \   000266   C3           CLR       C
   \   000267   98           SUBB      A,R0
   \   000268   4003         JC        $+5
   \   00026A   02....       LJMP      ??touchLinkInitiator_event_loop_30 & 0xFFFF
    772                {
    773                  // Inform the target to update its network update id and logical channel
    774                  initiatorSendNwkUpdateReq( &(selectedTarget.scanRsp) ); // there's no corresponding response!
   \   00026D                ; Setup parameters for call to function osal_mem_alloc
   \   00026D   7A12         MOV       R2,#0x12
   \   00026F   7B00         MOV       R3,#0x0
   \   000271   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000274   8A..         MOV       ?V0,R2
   \   000276   8B..         MOV       ?V1,R3
   \   000278   EA           MOV       A,R2
   \   000279   4B           ORL       A,R3
   \   00027A   7003         JNZ       $+5
   \   00027C   02....       LJMP      ??touchLinkInitiator_event_loop_31 & 0xFFFF
   \   00027F   90....       MOV       DPTR,#selectedTarget
   \   000282   12....       LCALL     ?XLOAD_R0123
   \   000285   85..82       MOV       DPL,?V0
   \   000288   85..83       MOV       DPH,?V1
   \   00028B   12....       LCALL     ?XSTORE_R0123
   \   00028E                ; Setup parameters for call to function sAddrExtCpy
   \   00028E   7C..         MOV       R4,#(_NIB + 53) & 0xff
   \   000290   7D..         MOV       R5,#((_NIB + 53) >> 8) & 0xff
   \   000292   E5..         MOV       A,?V0
   \   000294   2404         ADD       A,#0x4
   \   000296   FA           MOV       R2,A
   \   000297   E4           CLR       A
   \   000298   35..         ADDC      A,?V1
   \   00029A   FB           MOV       R3,A
   \   00029B   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00029E   90....       MOV       DPTR,#_NIB + 109
   \   0002A1   E0           MOVX      A,@DPTR
   \   0002A2   C0E0         PUSH      A
   \   0002A4   E5..         MOV       A,?V0
   \   0002A6   240C         ADD       A,#0xc
   \   0002A8   F582         MOV       DPL,A
   \   0002AA   E4           CLR       A
   \   0002AB   35..         ADDC      A,?V1
   \   0002AD   F583         MOV       DPH,A
   \   0002AF   D0E0         POP       A
   \   0002B1   F0           MOVX      @DPTR,A
   \   0002B2   90....       MOV       DPTR,#_NIB + 22
   \   0002B5   E0           MOVX      A,@DPTR
   \   0002B6   C0E0         PUSH      A
   \   0002B8   E5..         MOV       A,?V0
   \   0002BA   240D         ADD       A,#0xd
   \   0002BC   F582         MOV       DPL,A
   \   0002BE   E4           CLR       A
   \   0002BF   35..         ADDC      A,?V1
   \   0002C1   F583         MOV       DPH,A
   \   0002C3   D0E0         POP       A
   \   0002C5   F0           MOVX      @DPTR,A
   \   0002C6   90....       MOV       DPTR,#_NIB + 33
   \   0002C9   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   0002CC   E5..         MOV       A,?V0
   \   0002CE   240E         ADD       A,#0xe
   \   0002D0   F582         MOV       DPL,A
   \   0002D2   E4           CLR       A
   \   0002D3   35..         ADDC      A,?V1
   \   0002D5   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0002D8   90....       MOV       DPTR,#selectedTarget + 27
   \   0002DB   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   0002DE   E5..         MOV       A,?V0
   \   0002E0   2410         ADD       A,#0x10
   \   0002E2   F582         MOV       DPL,A
   \   0002E4   E4           CLR       A
   \   0002E5   35..         ADDC      A,?V1
   \   0002E7   F583         MOV       DPH,A
   \   0002E9   E8           MOV       A,R0
   \   0002EA   F0           MOVX      @DPTR,A
   \   0002EB   A3           INC       DPTR
   \   0002EC   E9           MOV       A,R1
   \   0002ED   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0002F0   F5..         MOV       ?V3,A
   \   0002F2   78..         MOV       R0,#?V3
   \   0002F4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002F7   AC..         MOV       R4,?V0
   \   0002F9   AD..         MOV       R5,?V1
   \   0002FB   7A..         MOV       R2,#(selectedTarget + 38) & 0xff
   \   0002FD   7B..         MOV       R3,#((selectedTarget + 38) >> 8) & 0xff
   \   0002FF   790D         MOV       R1,#0xd
   \   000301   12....       LCALL     `??bdbTL_Send_NwkUpdateReq::?relay`; Banked call to: bdbTL_Send_NwkUpdateReq
   \   000304   7401         MOV       A,#0x1
   \   000306   12....       LCALL     ?DEALLOC_XSTACK8
   \   000309                ; Setup parameters for call to function osal_mem_free
   \   000309   AA..         MOV       R2,?V0
   \   00030B   AB..         MOV       R3,?V1
   \   00030D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    775          
    776                  // Notify the application about this device
    777                  osal_set_event( touchLinkInitiator_TaskID, TOUCHLINK_NOTIFY_APP_EVT );
   \                     ??touchLinkInitiator_event_loop_31:
   \   000310                ; Setup parameters for call to function osal_set_event
   \   000310   7A00         MOV       R2,#0x0
   \   000312   7B08         MOV       R3,#0x8
   \   000314   12....       LCALL     ??Subroutine68_0 & 0xFFFF
    778                }
    779                
    780                bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \                     ??CrossCallReturnLabel_172:
   \   000317   8042         SJMP      ??touchLinkInitiator_event_loop_30
    781                bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, TRUE );
    782                return ( events ^ TOUCHLINK_CFG_TARGET_EVT );
    783              }
    784              
    785              //we are touchlinking to a light in our network, just send application the device info
    786              else if ( selectedTarget.scanRsp.touchLinkInitiator == FALSE )
   \                     ??touchLinkInitiator_event_loop_28:
   \   000319   90....       MOV       DPTR,#selectedTarget + 7
   \   00031C   E0           MOVX      A,@DPTR
   \   00031D   5410         ANL       A,#0x10
   \   00031F   7046         JNZ       ??touchLinkInitiator_event_loop_10
    787              {
    788                epInfoRec_t rec;
    789                rec.nwkAddr = selectedTarget.scanRsp.nwkAddr;
   \   000321   90....       MOV       DPTR,#selectedTarget + 27
   \   000324   12....       LCALL     ?Subroutine14 & 0xFFFF
    790                rec.endpoint = selectedTarget.scanRsp.deviceInfo.endpoint;
   \                     ??CrossCallReturnLabel_7:
   \   000327   C0E0         PUSH      A
   \   000329   7402         MOV       A,#0x2
   \   00032B   12....       LCALL     ?XSTACK_DISP0_8
   \   00032E   D0E0         POP       A
   \   000330   F0           MOVX      @DPTR,A
    791                rec.profileID = selectedTarget.scanRsp.deviceInfo.profileID;
   \   000331   90....       MOV       DPTR,#selectedTarget + 32
   \   000334   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000337   7403         MOV       A,#0x3
   \   000339   12....       LCALL     ?XSTACK_DISP0_8
   \   00033C   12....       LCALL     ?Subroutine25 & 0xFFFF
    792                rec.deviceID = selectedTarget.scanRsp.deviceInfo.deviceID;
   \                     ??CrossCallReturnLabel_130:
   \   00033F   7405         MOV       A,#0x5
   \   000341   12....       LCALL     ?XSTACK_DISP0_8
   \   000344   12....       LCALL     ?Subroutine31 & 0xFFFF
    793                rec.version = selectedTarget.scanRsp.deviceInfo.version;
   \                     ??CrossCallReturnLabel_32:
   \   000347   C0E0         PUSH      A
   \   000349   7407         MOV       A,#0x7
   \   00034B   12....       LCALL     ?XSTACK_DISP0_8
   \   00034E   D0E0         POP       A
   \   000350   12....       LCALL     ?Subroutine13 & 0xFFFF
    794                // Notify the application
    795                if ( pfnNotifyAppCB )
   \                     ??CrossCallReturnLabel_124:
   \   000353   6006         JZ        ??touchLinkInitiator_event_loop_30
    796                {
    797                  (*pfnNotifyAppCB)( &rec );
   \   000355                ; Setup parameters for indirect call
   \   000355   12....       LCALL     ?Subroutine23 & 0xFFFF
    798                }
   \                     ??CrossCallReturnLabel_159:
   \   000358   12....       LCALL     ?CALL_IND
    799                bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
   \                     ??touchLinkInitiator_event_loop_30:
   \   00035B   90....       MOV       DPTR,#bdbAttributes + 10
   \   00035E   E4           CLR       A
   \   00035F   F0           MOVX      @DPTR,A
    800                bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, TRUE );
   \   000360                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000360   7A01         MOV       R2,#0x1
   \                     ??touchLinkInitiator_event_loop_25:
   \   000362   7902         MOV       R1,#0x2
   \   000364   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    801              }
    802          
    803              // return unprocessed events
    804              return ( events ^ TOUCHLINK_CFG_TARGET_EVT );
   \                     ??touchLinkInitiator_event_loop_10:
   \   000367   EE           MOV       A,R6
   \   000368   02....       LJMP      ??touchLinkInitiator_event_loop_32 & 0xFFFF
    805            }
    806          
    807            if ( events & TOUCHLINK_W4_NWK_START_RSP_EVT )
   \                     ??touchLinkInitiator_event_loop_17:
   \   00036B   EA           MOV       A,R2
   \   00036C   5480         ANL       A,#0x80
   \   00036E   7003         JNZ       $+5
   \   000370   02....       LJMP      ??touchLinkInitiator_event_loop_33 & 0xFFFF
    808            {
    809              bdbTLNwkStartRsp_t *pRsp = &(rxRsp.nwkStartRsp);
    810          
    811              // Look if we have a valid response
    812              if ( ( pRsp->status == TOUCHLINK_NETWORK_START_RSP_STATUS_SUCCESS )
    813                 && ( ( nwk_ExtPANIDValid( pRsp->extendedPANID ) ) && ( touchLink_IsValidTransID( pRsp->transID ) ) ) )
   \   000373   90....       MOV       DPTR,#rxRsp + 4
   \   000376   E0           MOVX      A,@DPTR
   \   000377   7079         JNZ       ??touchLinkInitiator_event_loop_34
   \   000379                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000379   7A..         MOV       R2,#(rxRsp + 5) & 0xff
   \   00037B   7B..         MOV       R3,#((rxRsp + 5) >> 8) & 0xff
   \   00037D   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   000380   E9           MOV       A,R1
   \   000381   606F         JZ        ??touchLinkInitiator_event_loop_34
   \   000383                ; Setup parameters for call to function touchLink_IsValidTransID
   \   000383   90....       MOV       DPTR,#rxRsp
   \   000386   12....       LCALL     ?XLOAD_R2345
   \   000389   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00038C   6064         JZ        ??touchLinkInitiator_event_loop_34
    814              {
    815                // Copy the new network parameters to NIB
    816                touchLink_SetNIB( ( ZSTACK_ROUTER_BUILD ? NWK_ROUTER : NWK_REJOINING ),
    817                            _NIB.nwkDevAddress, pRsp->extendedPANID,
    818                            pRsp->logicalChannel, pRsp->panId, pRsp->nwkUpdateId );
   \   00038E                ; Setup parameters for call to function touchLink_SetNIB
   \   00038E   90....       MOV       DPTR,#rxRsp + 13
   \   000391   E0           MOVX      A,@DPTR
   \   000392   F5..         MOV       ?V0,A
   \   000394   78..         MOV       R0,#?V0
   \   000396   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000399   90....       MOV       DPTR,#rxRsp + 15
   \   00039C   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00039F   90....       MOV       DPTR,#rxRsp + 14
   \   0003A2   E0           MOVX      A,@DPTR
   \   0003A3   F5..         MOV       ?V0,A
   \   0003A5   78..         MOV       R0,#?V0
   \   0003A7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003AA   7C..         MOV       R4,#(rxRsp + 5) & 0xff
   \   0003AC   7D..         MOV       R5,#((rxRsp + 5) >> 8) & 0xff
   \   0003AE   90....       MOV       DPTR,#_NIB + 20
   \   0003B1   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0003B4   12....       LCALL     ?DEALLOC_XSTACK8
    819          
    820                // Apply the received network key
    821                touchLink_DecryptNwkKey( encKeySent, keyIndexSent, pRsp->transID, responseIDSent );
   \   0003B7                ; Setup parameters for call to function touchLink_DecryptNwkKey
   \   0003B7   90....       MOV       DPTR,#responseIDSent
   \   0003BA   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0003BD   90....       MOV       DPTR,#rxRsp
   \   0003C0   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0003C3   90....       MOV       DPTR,#keyIndexSent
   \   0003C6   E0           MOVX      A,@DPTR
   \   0003C7   F9           MOV       R1,A
   \   0003C8   7A..         MOV       R2,#encKeySent & 0xff
   \   0003CA   7B..         MOV       R3,#(encKeySent >> 8) & 0xff
   \   0003CC   12....       LCALL     `??touchLink_DecryptNwkKey::?relay`; Banked call to: touchLink_DecryptNwkKey
   \   0003CF   7408         MOV       A,#0x8
   \   0003D1   12....       LCALL     ?DEALLOC_XSTACK8
    822          
    823                // This is not a usual Trust Center protected network
    824                ZDSecMgrUpdateTCAddress( NULL );
   \   0003D4                ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
   \   0003D4   7A00         MOV       R2,#0x0
   \   0003D6   7B00         MOV       R3,#0x0
   \   0003D8   12....       LCALL     `??ZDSecMgrUpdateTCAddress::?relay`; Banked call to: ZDSecMgrUpdateTCAddress
    825          
    826                // Notify the application about this device
    827                osal_set_event( touchLinkInitiator_TaskID, TOUCHLINK_NOTIFY_APP_EVT );
   \   0003DB                ; Setup parameters for call to function osal_set_event
   \   0003DB   7A00         MOV       R2,#0x0
   \   0003DD   7B08         MOV       R3,#0x8
   \   0003DF   12....       LCALL     ??Subroutine68_0 & 0xFFFF
    828          
    829                // Wait at least BDBCTL_MIN_STARTUP_DELAY_TIME seconds to allow the
    830                // target to start the network correctly. Join the target afterwards.
    831                osal_start_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_START_NWK_EVT, BDBCTL_MIN_STARTUP_DELAY_TIME );
   \                     ??CrossCallReturnLabel_173:
   \   0003E2                ; Setup parameters for call to function osal_start_timerEx
   \   0003E2   90....       MOV       DPTR,#__Constant_7d0
   \   0003E5   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0003E8   7A04         MOV       R2,#0x4
   \   0003EA   12....       LCALL     ??Subroutine58_0 & 0xFFFF
    832              }
   \                     ??CrossCallReturnLabel_115:
   \   0003ED   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003F0   800C         SJMP      ??touchLinkInitiator_event_loop_35
    833              else
    834              {
    835                // Notify the BDB state machine 
    836                bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   \                     ??touchLinkInitiator_event_loop_34:
   \   0003F2   90....       MOV       DPTR,#bdbAttributes + 10
   \   0003F5   7402         MOV       A,#0x2
   \   0003F7   F0           MOVX      @DPTR,A
    837                bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, FALSE );        
   \   0003F8                ; Setup parameters for call to function bdb_reportCommissioningState
   \   0003F8   7A00         MOV       R2,#0x0
   \   0003FA   F9           MOV       R1,A
   \   0003FB   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    838              }
    839          
    840              // return unprocessed events
    841              return ( events ^ TOUCHLINK_W4_NWK_START_RSP_EVT );
   \                     ??touchLinkInitiator_event_loop_35:
   \   0003FE   EE           MOV       A,R6
   \   0003FF   6480         XRL       A,#0x80
   \   000401   02....       LJMP      ??touchLinkInitiator_event_loop_32 & 0xFFFF
    842            }
    843          
    844            if ( events & TOUCHLINK_START_NWK_EVT )
   \                     ??touchLinkInitiator_event_loop_33:
   \   000404   EA           MOV       A,R2
   \   000405   5404         ANL       A,#0x4
   \   000407   6065         JZ        ??touchLinkInitiator_event_loop_36
    845            {
    846              // Rejoins without NWK scan
    847          
    848              bdbTLNwkStartRsp_t *pRsp = &(rxRsp.nwkStartRsp);
    849              bdbTLNwkRejoin_t rejoinInf;
    850              
    851              rejoinInf.panId = pRsp->panId;
   \   000409   90....       MOV       DPTR,#rxRsp + 15
   \   00040C   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   00040F   741A         MOV       A,#0x1a
   \   000411   12....       LCALL     ?XSTACK_DISP0_8
   \   000414   12....       LCALL     ??Subroutine49_0 & 0xFFFF
    852              rejoinInf.logicalChannel = pRsp->logicalChannel;
   \                     ??CrossCallReturnLabel_87:
   \   000417   90....       MOV       DPTR,#rxRsp + 14
   \   00041A   E0           MOVX      A,@DPTR
   \   00041B   C0E0         PUSH      A
   \   00041D   7419         MOV       A,#0x19
   \   00041F   12....       LCALL     ?XSTACK_DISP0_8
   \   000422   D0E0         POP       A
   \   000424   F0           MOVX      @DPTR,A
    853              osal_memcpy( rejoinInf.extendedPANID, pRsp->extendedPANID, Z_EXTADDR_LEN);
   \   000425                ; Setup parameters for call to function osal_memcpy
   \   000425   75....       MOV       ?V4,#(rxRsp + 5) & 0xff
   \   000428   75....       MOV       ?V5,#((rxRsp + 5) >> 8) & 0xff
   \   00042B   75..00       MOV       ?V6,#0x0
   \   00042E   78..         MOV       R0,#?V4
   \   000430   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000433   7C08         MOV       R4,#0x8
   \   000435   7D00         MOV       R5,#0x0
   \   000437   7413         MOV       A,#0x13
   \   000439   12....       LCALL     ?XSTACK_DISP101_8
   \   00043C   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00043F   7403         MOV       A,#0x3
   \   000441   12....       LCALL     ?DEALLOC_XSTACK8
    854              rejoinInf.nwkAddr = selectedTargetNwkAddr;
   \   000444   90....       MOV       DPTR,#selectedTargetNwkAddr
   \   000447   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   00044A   741C         MOV       A,#0x1c
   \   00044C   12....       LCALL     ?XSTACK_DISP0_8
   \   00044F   12....       LCALL     ??Subroutine49_0 & 0xFFFF
    855              rejoinInf.nwkUpdateId = pRsp->nwkUpdateId;
   \                     ??CrossCallReturnLabel_88:
   \   000452   90....       MOV       DPTR,#rxRsp + 13
   \   000455   E0           MOVX      A,@DPTR
   \   000456   C0E0         PUSH      A
   \   000458   7418         MOV       A,#0x18
   \   00045A   12....       LCALL     ?XSTACK_DISP0_8
   \   00045D   D0E0         POP       A
   \   00045F   F0           MOVX      @DPTR,A
    856                
    857              touchLink_DevRejoin( &rejoinInf );
   \   000460                ; Setup parameters for call to function touchLink_DevRejoin
   \   000460   7410         MOV       A,#0x10
   \   000462   12....       LCALL     ?XSTACK_DISP101_8
   \   000465   12....       LCALL     `??touchLink_DevRejoin::?relay`; Banked call to: touchLink_DevRejoin
    858          
    859              // return unprocessed events
    860              return ( events ^ TOUCHLINK_START_NWK_EVT );
   \   000468   EE           MOV       A,R6
   \   000469   6404         XRL       A,#0x4
   \   00046B   02....       LJMP      ??touchLinkInitiator_event_loop_32 & 0xFFFF
    861            }
    862          
    863            if ( events & TOUCHLINK_W4_NWK_JOIN_RSP_EVT )
   \                     ??touchLinkInitiator_event_loop_36:
   \   00046E   EB           MOV       A,R3
   \   00046F   5401         ANL       A,#0x1
   \   000471   607C         JZ        ??touchLinkInitiator_event_loop_37
    864            {
    865              bdbTLNwkJoinRsp_t *pRsp = &(rxRsp.nwkJoinRsp);
    866          
    867              if ( pRsp->status == TOUCHLINK_NETWORK_JOIN_RSP_STATUS_SUCCESS )
   \   000473   90....       MOV       DPTR,#rxRsp + 4
   \   000476   E0           MOVX      A,@DPTR
   \   000477   7063         JNZ       ??touchLinkInitiator_event_loop_38
    868              {
    869                // Wait at least BDBCTL_MIN_STARTUP_DELAY_TIME seconds to allow the
    870                // target to start operating on the network correctly. Notify the
    871                // application afterwards.
    872                osal_start_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_NOTIFY_APP_EVT,
    873                                    BDBCTL_MIN_STARTUP_DELAY_TIME );
   \   000479                ; Setup parameters for call to function osal_start_timerEx
   \   000479   90....       MOV       DPTR,#__Constant_7d0
   \   00047C   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00047F   7A00         MOV       R2,#0x0
   \   000481   7B08         MOV       R3,#0x8
   \   000483   12....       LCALL     ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000486   12....       LCALL     ?DEALLOC_XSTACK8
    874                
    875                // Establish bind links
    876                if ( pRespondentHead != NULL )
   \   000489   90....       MOV       DPTR,#pRespondentHead
   \   00048C   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   00048F   6041         JZ        ??touchLinkInitiator_event_loop_39
    877                {
    878                  AddrMgrEntry_t entry;
    879          
    880                  // add the device's address information
    881                  entry.user    = ADDRMGR_USER_BINDING;
   \   000491   741E         MOV       A,#0x1e
   \   000493   12....       LCALL     ?XSTACK_DISP0_8
   \   000496   7404         MOV       A,#0x4
   \   000498   F0           MOVX      @DPTR,A
    882                  entry.nwkAddr = selectedTargetNwkAddr;
   \   000499   90....       MOV       DPTR,#selectedTargetNwkAddr
   \   00049C   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   00049F   741F         MOV       A,#0x1f
   \   0004A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0004A4   12....       LCALL     ??Subroutine49_0 & 0xFFFF
    883                  osal_cpyExtAddr( entry.extAddr, selectedTargetIEEEAddr );
   \                     ??CrossCallReturnLabel_89:
   \   0004A7                ; Setup parameters for call to function sAddrExtCpy
   \   0004A7   7C..         MOV       R4,#selectedTargetIEEEAddr & 0xff
   \   0004A9   7D..         MOV       R5,#(selectedTargetIEEEAddr >> 8) & 0xff
   \   0004AB   7421         MOV       A,#0x21
   \   0004AD   12....       LCALL     ?XSTACK_DISP0_8
   \   0004B0   AA82         MOV       R2,DPL
   \   0004B2   AB83         MOV       R3,DPH
   \   0004B4   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    884                  AddrMgrEntryUpdate( &entry );
   \   0004B7                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   0004B7   741E         MOV       A,#0x1e
   \   0004B9   12....       LCALL     ?XSTACK_DISP101_8
   \   0004BC   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
    885                  osal_start_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT, SIMPLEDESC_RESPONSE_TIMEOUT );
   \   0004BF                ; Setup parameters for call to function osal_start_timerEx
   \   0004BF   90....       MOV       DPTR,#__Constant_1388
   \   0004C2   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0004C5   7A00         MOV       R2,#0x0
   \   0004C7   7B40         MOV       R3,#0x40
   \   0004C9   90....       MOV       DPTR,#bdb_TaskID
   \   0004CC   12....       LCALL     ??Subroutine60_0 & 0xFFFF
    886                }
   \                     ??CrossCallReturnLabel_123:
   \   0004CF   12....       LCALL     ?DEALLOC_XSTACK8
    887                
    888                // We're done with touch-link procedure here
    889                initiatorSetNwkToInitState();
   \                     ??touchLinkInitiator_event_loop_39:
   \   0004D2                ; Setup parameters for call to function initiatorSetNwkToInitState
   \   0004D2   12....       LCALL     `??initiatorSetNwkToInitState::?relay`; Banked call to: initiatorSetNwkToInitState
    890                //bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_SUCCESS;
    891                //bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, TRUE );
    892          
    893                touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
   \   0004D5                ; Setup parameters for call to function touchLink_UpdateNV
   \   0004D5   7902         MOV       R1,#0x2
   \   0004D7   12....       LCALL     `??touchLink_UpdateNV::?relay`; Banked call to: touchLink_UpdateNV
    894          
    895                if ( ( POLL_RATE == 0 ) && ( selectedTarget.scanRsp.zLogicalType == ZG_DEVICETYPE_ENDDEVICE ) )
   \   0004DA   800B         SJMP      ??CrossCallReturnLabel_31
    896                {
    897                  //allow to respond to TOUCHLINK commission utility commands after TL
    898                  NLME_SetPollRate( TOUCHLINK_INITIATOR_TEMP_POST_TL_POLL_RATE );
    899                  //polling should reset when TL life time expires
    900                }
    901              }
    902              else 
    903              {
    904                touchLink_SendLeaveReq( );
   \                     ??touchLinkInitiator_event_loop_38:
   \   0004DC                ; Setup parameters for call to function touchLink_SendLeaveReq
   \   0004DC   12....       LCALL     `??touchLink_SendLeaveReq::?relay`; Banked call to: touchLink_SendLeaveReq
    905                bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_TL_TARGET_FAILURE;
   \   0004DF   90....       MOV       DPTR,#bdbAttributes + 10
   \   0004E2   7403         MOV       A,#0x3
   \   0004E4   12....       LCALL     ?Subroutine30 & 0xFFFF
    906                bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, FALSE );
    907              }
    908          
    909              // return unprocessed events
    910              return ( events ^ TOUCHLINK_W4_NWK_JOIN_RSP_EVT );
   \                     ??CrossCallReturnLabel_31:
   \   0004E7   EE           MOV       A,R6
   \   0004E8   FA           MOV       R2,A
   \   0004E9   EF           MOV       A,R7
   \   0004EA   6401         XRL       A,#0x1
   \   0004EC   02....       LJMP      ??touchLinkInitiator_event_loop_5 & 0xFFFF
    911            }
    912          
    913            if ( events & TOUCHLINK_NWK_JOIN_IND_EVT )
   \                     ??touchLinkInitiator_event_loop_37:
   \   0004EF   EA           MOV       A,R2
   \   0004F0   5402         ANL       A,#0x2
   \   0004F2   6023         JZ        ??touchLinkInitiator_event_loop_40
    914            {
    915              // If not factory new, perform a Leave on our old network
    916              if ( ( bdbAttributes.bdbNodeIsOnANetwork == TRUE ) && ( touchLink_SendLeaveReq( ) == ZSuccess ) )
   \   0004F4   90....       MOV       DPTR,#bdbAttributes + 14
   \   0004F7   E0           MOVX      A,@DPTR
   \   0004F8   6401         XRL       A,#0x1
   \   0004FA   700E         JNZ       ??touchLinkInitiator_event_loop_41
   \   0004FC                ; Setup parameters for call to function touchLink_SendLeaveReq
   \   0004FC   12....       LCALL     `??touchLink_SendLeaveReq::?relay`; Banked call to: touchLink_SendLeaveReq
   \   0004FF   E9           MOV       A,R1
   \   000500   7008         JNZ       ??touchLinkInitiator_event_loop_41
    917              {
    918                // Wait for Leave confirmation before joining the new network
    919                touchLinkLeaveInitiated = TOUCHLINK_LEAVE_TO_JOIN_NWK;
   \   000502   90....       MOV       DPTR,#touchLinkLeaveInitiated
   \   000505   7401         MOV       A,#0x1
   \   000507   F0           MOVX      @DPTR,A
   \   000508   8007         SJMP      ??CrossCallReturnLabel_174
    920              }
    921              else
    922              {
    923          #if ( ZSTACK_ROUTER_BUILD )
    924                // Notify our task to join this network
    925                osal_set_event( touchLinkInitiator_TaskID, TOUCHLINK_JOIN_NWK_ATTEMPT_EVT );
   \                     ??touchLinkInitiator_event_loop_41:
   \   00050A                ; Setup parameters for call to function osal_set_event
   \   00050A   7A08         MOV       R2,#0x8
   \   00050C   7B00         MOV       R3,#0x0
   \   00050E   12....       LCALL     ??Subroutine68_0 & 0xFFFF
    926          #else
    927                bdbTLNwkParams_t *pParams = &(joinReq.nwkParams);
    928                
    929                // Notify our task to join this network
    930                // Perform Network Discovery to verify our new network parameters uniqeness
    931                touchLink_PerformNetworkDisc( (uint32)1 << pParams->logicalChannel );
    932          #endif
    933              }
    934          
    935              // return unprocessed events
    936              return ( events ^ TOUCHLINK_NWK_JOIN_IND_EVT );
   \                     ??CrossCallReturnLabel_174:
   \   000511   EE           MOV       A,R6
   \   000512   6402         XRL       A,#0x2
   \   000514   02....       LJMP      ??touchLinkInitiator_event_loop_32 & 0xFFFF
    937            }
    938          
    939            if ( events & TOUCHLINK_JOIN_NWK_ATTEMPT_EVT )
   \                     ??touchLinkInitiator_event_loop_40:
   \   000517   EA           MOV       A,R2
   \   000518   5408         ANL       A,#0x8
   \   00051A   602F         JZ        ??touchLinkInitiator_event_loop_42
    940            {
    941              // Join the network
    942          #if ( ZSTACK_ROUTER_BUILD )
    943              initiatorJoinNwk();
   \   00051C                ; Setup parameters for call to function touchLink_UpdateNV
   \   00051C   7902         MOV       R1,#0x2
   \   00051E   12....       LCALL     `??touchLink_UpdateNV::?relay`; Banked call to: touchLink_UpdateNV
   \   000521   90....       MOV       DPTR,#touchLinkLeaveInitiated
   \   000524   E4           CLR       A
   \   000525   F0           MOVX      @DPTR,A
   \   000526                ; Setup parameters for call to function ZDApp_LeaveCtrlReset
   \   000526   12....       LCALL     `??ZDApp_LeaveCtrlReset::?relay`; Banked call to: ZDApp_LeaveCtrlReset
   \   000529                ; Setup parameters for call to function touchLink_PermitJoin
   \   000529   7900         MOV       R1,#0x0
   \   00052B   12....       LCALL     `??touchLink_PermitJoin::?relay`; Banked call to: touchLink_PermitJoin
   \   00052E                ; Setup parameters for call to function ZDOInitDeviceEx
   \   00052E   7900         MOV       R1,#0x0
   \   000530   7A00         MOV       R2,#0x0
   \   000532   7B00         MOV       R3,#0x0
   \   000534   12....       LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
   \   000537   90....       MOV       DPTR,#_NIB + 35
   \   00053A   7409         MOV       A,#0x9
   \   00053C   F0           MOVX      @DPTR,A
   \   00053D                ; Setup parameters for call to function initiatorReJoinNwk
   \   00053D   7903         MOV       R1,#0x3
   \   00053F   12....       LCALL     `??initiatorReJoinNwk::?relay`; Banked call to: initiatorReJoinNwk
    944          #else
    945              bdbTLNwkParams_t *pParams = &(joinReq.nwkParams);
    946              
    947              bdbTLNwkRejoin_t rejoinInf;
    948                   
    949              rejoinInf.panId = pParams->panId;
    950              rejoinInf.logicalChannel = pParams->logicalChannel;
    951              osal_memcpy( rejoinInf.extendedPANID, pParams->extendedPANID, Z_EXTADDR_LEN);
    952              rejoinInf.nwkAddr = pDiscoveredNwkParamList->chosenRouter;
    953              rejoinInf.nwkUpdateId = joinReq.nwkUpdateId;
    954                
    955              touchLink_DevRejoin( &rejoinInf );
    956          #endif
    957              touchLink_FreeNwkParamList();
   \   000542                ; Setup parameters for call to function touchLink_FreeNwkParamList
   \   000542   12....       LCALL     `??touchLink_FreeNwkParamList::?relay`; Banked call to: touchLink_FreeNwkParamList
    958          
    959              // return unprocessed events
    960              return ( events ^ TOUCHLINK_JOIN_NWK_ATTEMPT_EVT );
   \   000545   EE           MOV       A,R6
   \   000546   6408         XRL       A,#0x8
   \   000548   02....       LJMP      ??touchLinkInitiator_event_loop_32 & 0xFFFF
    961            }
    962          
    963            if ( events & TOUCHLINK_DISABLE_RX_EVT )
   \                     ??touchLinkInitiator_event_loop_42:
   \   00054B   EB           MOV       A,R3
   \   00054C   5402         ANL       A,#0x2
   \   00054E   601F         JZ        ??touchLinkInitiator_event_loop_43
    964            {
    965              // We're not asked to join a network
    966              initiatorSetNwkToInitState();
   \   000550                ; Setup parameters for call to function initiatorSetNwkToInitState
   \   000550   12....       LCALL     `??initiatorSetNwkToInitState::?relay`; Banked call to: initiatorSetNwkToInitState
    967          
    968              scanReqChannels = TOUCHLINK_SCAN_PRIMARY_CHANNELS;
   \   000553   90....       MOV       DPTR,#scanReqChannels
   \   000556   7401         MOV       A,#0x1
   \   000558   F0           MOVX      @DPTR,A
    969              numScanReqSent = 0;
   \   000559   90....       MOV       DPTR,#numScanReqSent
   \   00055C   E4           CLR       A
   \   00055D   F0           MOVX      @DPTR,A
    970              // Reset selected target
    971              if ( zTouchLinkNwkStartRtr == FALSE )
   \   00055E   90....       MOV       DPTR,#zTouchLinkNwkStartRtr
   \   000561   E0           MOVX      A,@DPTR
   \   000562   7003         JNZ       ??touchLinkInitiator_event_loop_44
    972              {
    973                initiatorClearSelectedTarget();
   \   000564                ; Setup parameters for call to function initiatorClearSelectedTarget
   \   000564   12....       LCALL     `??initiatorClearSelectedTarget::?relay`; Banked call to: initiatorClearSelectedTarget
    974              }
    975          
    976              // return unprocessed events
    977              return ( events ^ TOUCHLINK_DISABLE_RX_EVT );
   \                     ??touchLinkInitiator_event_loop_44:
   \   000567   EE           MOV       A,R6
   \   000568   FA           MOV       R2,A
   \   000569   EF           MOV       A,R7
   \   00056A   6402         XRL       A,#0x2
   \   00056C   02....       LJMP      ??touchLinkInitiator_event_loop_5 & 0xFFFF
    978            }
    979          
    980            if ( events & TOUCHLINK_W4_REJOIN_EVT )
   \                     ??touchLinkInitiator_event_loop_43:
   \   00056F   EB           MOV       A,R3
   \   000570   5404         ANL       A,#0x4
   \   000572   600B         JZ        ??touchLinkInitiator_event_loop_45
    981            {
    982              // Stop joining cycle
    983              ZDApp_StopJoiningCycle();
   \   000574                ; Setup parameters for call to function ZDApp_StopJoiningCycle
   \   000574   12....       LCALL     `??ZDApp_StopJoiningCycle::?relay`; Banked call to: ZDApp_StopJoiningCycle
    984          
    985              // return unprocessed events
    986              return ( events ^ TOUCHLINK_W4_REJOIN_EVT );
   \   000577   EE           MOV       A,R6
   \   000578   FA           MOV       R2,A
   \   000579   EF           MOV       A,R7
   \   00057A   6404         XRL       A,#0x4
   \   00057C   02....       LJMP      ??touchLinkInitiator_event_loop_5 & 0xFFFF
    987            }
    988          
    989            if ( events & TOUCHLINK_NOTIFY_APP_EVT )
   \                     ??touchLinkInitiator_event_loop_45:
   \   00057F   EB           MOV       A,R3
   \   000580   5408         ANL       A,#0x8
   \   000582   606E         JZ        ??touchLinkInitiator_event_loop_46
    990            {
    991              ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
    992                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   000584                ; Setup parameters for call to function NLME_GetExtAddr
   \   000584   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000587   8A..         MOV       ?V0,R2
   \   000589   8B..         MOV       ?V1,R3
   \   00058B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00058B   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00058E                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   00058E   75..00       MOV       ?V3,#0x0
   \   000591   78..         MOV       R0,#?V3
   \   000593   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000596   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000599   E0           MOVX      A,@DPTR
   \   00059A   F9           MOV       R1,A
   \   00059B   AC..         MOV       R4,?V0
   \   00059D   AD..         MOV       R5,?V1
   \   00059F   12....       LCALL     `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   0005A2   7401         MOV       A,#0x1
   \   0005A4   12....       LCALL     ?DEALLOC_XSTACK8
    993              
    994              if ( selectedTarget.lastRssi > TOUCHLINK_WORST_RSSI )
   \   0005A7   90....       MOV       DPTR,#selectedTarget + 53
   \   0005AA   E0           MOVX      A,@DPTR
   \   0005AB   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0005AE   403A         JC        ??touchLinkInitiator_event_loop_47
    995              {
    996                epInfoRec_t rec;
    997                rec.nwkAddr = selectedTarget.newNwkAddr; // newly assigned network address
   \   0005B0   90....       MOV       DPTR,#selectedTarget + 50
   \   0005B3   12....       LCALL     ?Subroutine14 & 0xFFFF
    998                rec.endpoint = selectedTarget.scanRsp.deviceInfo.endpoint;
   \                     ??CrossCallReturnLabel_8:
   \   0005B6   C0E0         PUSH      A
   \   0005B8   7402         MOV       A,#0x2
   \   0005BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0005BD   D0E0         POP       A
   \   0005BF   F0           MOVX      @DPTR,A
    999                rec.profileID = selectedTarget.scanRsp.deviceInfo.profileID;
   \   0005C0   90....       MOV       DPTR,#selectedTarget + 32
   \   0005C3   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   0005C6   7403         MOV       A,#0x3
   \   0005C8   12....       LCALL     ?XSTACK_DISP0_8
   \   0005CB   12....       LCALL     ?Subroutine25 & 0xFFFF
   1000                rec.deviceID = selectedTarget.scanRsp.deviceInfo.deviceID;
   \                     ??CrossCallReturnLabel_131:
   \   0005CE   7405         MOV       A,#0x5
   \   0005D0   12....       LCALL     ?XSTACK_DISP0_8
   \   0005D3   12....       LCALL     ?Subroutine31 & 0xFFFF
   1001                rec.version = selectedTarget.scanRsp.deviceInfo.version;
   \                     ??CrossCallReturnLabel_33:
   \   0005D6   C0E0         PUSH      A
   \   0005D8   7407         MOV       A,#0x7
   \   0005DA   12....       LCALL     ?XSTACK_DISP0_8
   \   0005DD   D0E0         POP       A
   \   0005DF   12....       LCALL     ?Subroutine13 & 0xFFFF
   1002                // Notify the application
   1003                if ( pfnNotifyAppCB )
   \                     ??CrossCallReturnLabel_125:
   \   0005E2   6006         JZ        ??touchLinkInitiator_event_loop_47
   1004                {
   1005                  (*pfnNotifyAppCB)( &rec );
   \   0005E4                ; Setup parameters for indirect call
   \   0005E4   12....       LCALL     ?Subroutine23 & 0xFFFF
   1006                }
   1007              }
   \                     ??CrossCallReturnLabel_160:
   \   0005E7   12....       LCALL     ?CALL_IND
   1008              // return unprocessed events
   1009              return ( events ^ TOUCHLINK_NOTIFY_APP_EVT );
   \                     ??touchLinkInitiator_event_loop_47:
   \   0005EA   EE           MOV       A,R6
   \   0005EB   FA           MOV       R2,A
   \   0005EC   EF           MOV       A,R7
   \   0005ED   6408         XRL       A,#0x8
   \   0005EF   02....       LJMP      ??touchLinkInitiator_event_loop_5 & 0xFFFF
   1010            }
   1011            
   1012            if ( events & TOUCHLINK_NWK_RTR_START_EVT )
   \                     ??touchLinkInitiator_event_loop_46:
   \   0005F2   EB           MOV       A,R3
   \   0005F3   5410         ANL       A,#0x10
   \   0005F5   7003         JNZ       $+5
   \   0005F7   02....       LJMP      ??touchLinkInitiator_event_loop_48 & 0xFFFF
   1013            {
   1014              uint16 nwkAddr = INVALID_NODE_ADDR;
   \   0005FA   740E         MOV       A,#0xe
   \   0005FC   12....       LCALL     ?XSTACK_DISP0_8
   \   0005FF   74FE         MOV       A,#-0x2
   \   000601   F0           MOVX      @DPTR,A
   \   000602   A3           INC       DPTR
   \   000603   04           INC       A
   \   000604   F0           MOVX      @DPTR,A
   1015              
   1016              osal_nv_write( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
   1017                             sizeof( uint16), &nwkAddr );
   \   000605                ; Setup parameters for call to function osal_nv_write
   \   000605   740E         MOV       A,#0xe
   \   000607   12....       LCALL     ?XSTACK_DISP100_8
   \   00060A   88..         MOV       ?V0,R0
   \   00060C   89..         MOV       ?V1,R1
   \   00060E   78..         MOV       R0,#?V0
   \   000610   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000613   75..02       MOV       ?V0,#0x2
   \   000616   75..00       MOV       ?V1,#0x0
   \   000619   78..         MOV       R0,#?V0
   \   00061B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00061E   7C14         MOV       R4,#0x14
   \   000620   7D00         MOV       R5,#0x0
   \   000622   7A21         MOV       R2,#0x21
   \   000624   7B00         MOV       R3,#0x0
   \   000626   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000629   7404         MOV       A,#0x4
   \   00062B   12....       LCALL     ?DEALLOC_XSTACK8
   1018              
   1019              // If the PAN Id, Extended PAN Id or Logical Channel are zero then
   1020              // determine each of these parameters
   1021              if ( !nwk_ExtPANIDValid( initiatorNwkParams.extendedPANID ) )
   \   00062E                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   00062E   7A..         MOV       R2,#initiatorNwkParams & 0xff
   \   000630   7B..         MOV       R3,#(initiatorNwkParams >> 8) & 0xff
   \   000632   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   000635   E9           MOV       A,R1
   \   000636   7009         JNZ       ??touchLinkInitiator_event_loop_49
   1022              {
   1023                touchLink_GenerateRandNum( initiatorNwkParams.extendedPANID, Z_EXTADDR_LEN );
   \   000638                ; Setup parameters for call to function touchLink_GenerateRandNum
   \   000638   7908         MOV       R1,#0x8
   \   00063A   7A..         MOV       R2,#initiatorNwkParams & 0xff
   \   00063C   7B..         MOV       R3,#(initiatorNwkParams >> 8) & 0xff
   \   00063E   12....       LCALL     `??touchLink_GenerateRandNum::?relay`; Banked call to: touchLink_GenerateRandNum
   1024              }
   1025          
   1026              if ( initiatorNwkParams.panId == 0 )
   \                     ??touchLinkInitiator_event_loop_49:
   \   000641   90....       MOV       DPTR,#initiatorNwkParams + 26
   \   000644   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000647   7009         JNZ       ??CrossCallReturnLabel_78
   1027              {
   1028                initiatorNwkParams.panId = osal_rand();
   \   000649                ; Setup parameters for call to function osal_rand
   \   000649   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   00064C   90....       MOV       DPTR,#initiatorNwkParams + 26
   \   00064F   12....       LCALL     ?Subroutine26 & 0xFFFF
   1029              }
   1030          
   1031              if ( initiatorNwkParams.logicalChannel == 0 )
   \                     ??CrossCallReturnLabel_78:
   \   000652   90....       MOV       DPTR,#initiatorNwkParams + 25
   \   000655   E0           MOVX      A,@DPTR
   \   000656   7008         JNZ       ??touchLinkInitiator_event_loop_50
   1032              {
   1033                initiatorNwkParams.logicalChannel = touchLink_GetRandPrimaryChannel();
   \   000658                ; Setup parameters for call to function touchLink_GetRandPrimaryChannel
   \   000658   12....       LCALL     `??touchLink_GetRandPrimaryChannel::?relay`; Banked call to: touchLink_GetRandPrimaryChannel
   \   00065B   E9           MOV       A,R1
   \   00065C   90....       MOV       DPTR,#initiatorNwkParams + 25
   \   00065F   F0           MOVX      @DPTR,A
   1034              }
   1035          
   1036              if ( selectedTarget.scanRsp.touchLinkAddressAssignment)
   \                     ??touchLinkInitiator_event_loop_50:
   \   000660   90....       MOV       DPTR,#selectedTarget + 7
   \   000663   E0           MOVX      A,@DPTR
   \   000664   5402         ANL       A,#0x2
   \   000666   6007         JZ        ??touchLinkInitiator_event_loop_51
   1037              {
   1038                touchLink_GerFreeRanges( &initiatorNwkParams );
   \   000668                ; Setup parameters for call to function touchLink_GerFreeRanges
   \   000668   7A..         MOV       R2,#initiatorNwkParams & 0xff
   \   00066A   7B..         MOV       R3,#(initiatorNwkParams >> 8) & 0xff
   \   00066C   12....       LCALL     `??touchLink_GerFreeRanges::?relay`; Banked call to: touchLink_GerFreeRanges
   1039              }
   1040          
   1041              // Perform Network Discovery to verify our new network parameters uniqeness
   1042              touchLink_PerformNetworkDisc( (uint32)1 << initiatorNwkParams.logicalChannel );
   \                     ??touchLinkInitiator_event_loop_51:
   \   00066F                ; Setup parameters for call to function touchLink_PerformNetworkDisc
   \   00066F   75..01       MOV       ?V4,#0x1
   \   000672   75..00       MOV       ?V5,#0x0
   \   000675   75..00       MOV       ?V6,#0x0
   \   000678   75..00       MOV       ?V7,#0x0
   \   00067B   90....       MOV       DPTR,#initiatorNwkParams + 25
   \   00067E   E0           MOVX      A,@DPTR
   \   00067F   78..         MOV       R0,#?V4
   \   000681   12....       LCALL     ?L_SHL
   \   000684   AA..         MOV       R2,?V4
   \   000686   AB..         MOV       R3,?V5
   \   000688   AC..         MOV       R4,?V6
   \   00068A   AD..         MOV       R5,?V7
   \   00068C   12....       LCALL     `??touchLink_PerformNetworkDisc::?relay`; Banked call to: touchLink_PerformNetworkDisc
   1043          
   1044              // return unprocessed events
   1045              return ( events ^ TOUCHLINK_NWK_RTR_START_EVT );
   \   00068F   EE           MOV       A,R6
   \   000690   FA           MOV       R2,A
   \   000691   EF           MOV       A,R7
   \   000692   6410         XRL       A,#0x10
   \   000694   02....       LJMP      ??touchLinkInitiator_event_loop_5 & 0xFFFF
   1046            }
   1047            
   1048            if ( events & TOUCHLINK_NWK_FORMATION_SUCCESS_EVT )
   \                     ??touchLinkInitiator_event_loop_48:
   \   000697   EB           MOV       A,R3
   \   000698   5420         ANL       A,#0x20
   \   00069A   6032         JZ        ??touchLinkInitiator_event_loop_52
   1049            {
   1050              if( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL )
   \   00069C   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00069F   E0           MOVX      A,@DPTR
   \   0006A0   6402         XRL       A,#0x2
   \   0006A2   7023         JNZ       ??touchLinkInitiator_event_loop_53
   1051              {
   1052                bdbTLNwkJoinRsp_t *pRsp = &(rxRsp.nwkJoinRsp);
   1053                pRsp->status = TOUCHLINK_NETWORK_JOIN_RSP_STATUS_FAILURE;
   \   0006A4   90....       MOV       DPTR,#rxRsp + 4
   \   0006A7   7401         MOV       A,#0x1
   \   0006A9   F0           MOVX      @DPTR,A
   1054                
   1055                // Tune to the channel that the Scan Response was heard on
   1056                touchLink_SetChannel( selectedTarget.rxChannel );
   \   0006AA                ; Setup parameters for call to function touchLink_SetChannel
   \   0006AA   12....       LCALL     ?Subroutine17 & 0xFFFF
   1057                
   1058                if ( _NIB.nwkUpdateId <= selectedTarget.scanRsp.nwkUpdateId )
   \                     ??CrossCallReturnLabel_182:
   \   0006AD   90....       MOV       DPTR,#selectedTarget + 23
   \   0006B0   E0           MOVX      A,@DPTR
   \   0006B1   F9           MOV       R1,A
   \   0006B2   90....       MOV       DPTR,#_NIB + 109
   \   0006B5   E0           MOVX      A,@DPTR
   \   0006B6   F8           MOV       R0,A
   \   0006B7   E9           MOV       A,R1
   \   0006B8   C3           CLR       C
   \   0006B9   98           SUBB      A,R0
   \   0006BA   4003         JC        ??touchLinkInitiator_event_loop_54
   1059                {
   1060                  NLME_SetUpdateID( selectedTarget.scanRsp.nwkUpdateId );
   \   0006BC                ; Setup parameters for call to function NLME_SetUpdateID
   \   0006BC   12....       LCALL     `??NLME_SetUpdateID::?relay`; Banked call to: NLME_SetUpdateID
   1061                }
   1062                // Ask the target to join our network
   1063                bdb_Initiator_SendNwkJoinReq( );
   \                     ??touchLinkInitiator_event_loop_54:
   \   0006BF                ; Setup parameters for call to function bdb_Initiator_SendNwkJoinReq
   \   0006BF   12....       LCALL     `??bdb_Initiator_SendNwkJoinReq::?relay`; Banked call to: bdb_Initiator_SendNwkJoinReq
   1064                zTouchLinkNwkStartRtr = FALSE;
   \   0006C2   90....       MOV       DPTR,#zTouchLinkNwkStartRtr
   \   0006C5   E4           CLR       A
   \   0006C6   F0           MOVX      @DPTR,A
   1065              }
   1066              return ( events ^ TOUCHLINK_NWK_FORMATION_SUCCESS_EVT );
   \                     ??touchLinkInitiator_event_loop_53:
   \   0006C7   EE           MOV       A,R6
   \   0006C8   FA           MOV       R2,A
   \   0006C9   EF           MOV       A,R7
   \   0006CA   6420         XRL       A,#0x20
   \   0006CC   8062         SJMP      ??touchLinkInitiator_event_loop_5
   1067            }
   1068          
   1069            if ( events & TOUCHLINK_NWK_DISC_CNF_EVT )
   \                     ??touchLinkInitiator_event_loop_52:
   \   0006CE   EA           MOV       A,R2
   \   0006CF   A2E0         MOV       C,0xE0 /* A   */.0
   \   0006D1   5043         JNC       ??touchLinkInitiator_event_loop_55
   1070            {
   1071          #if ZSTACK_ROUTER_BUILD
   1072              if ( bdbAttributes.bdbNodeIsOnANetwork == FALSE )
   \   0006D3   90....       MOV       DPTR,#bdbAttributes + 14
   \   0006D6   E0           MOVX      A,@DPTR
   \   0006D7   7009         JNZ       ??touchLinkInitiator_event_loop_56
   1073              {
   1074                initiatorNwkParams.nwkAddr = APL_FREE_NWK_ADDR_RANGE_BEGIN;
   \   0006D9   90....       MOV       DPTR,#initiatorNwkParams + 28
   \   0006DC   7401         MOV       A,#0x1
   \   0006DE   F0           MOVX      @DPTR,A
   \   0006DF   A3           INC       DPTR
   \   0006E0   E4           CLR       A
   \   0006E1   F0           MOVX      @DPTR,A
   1075              }
   1076              // Copy in the encrypted network key
   1077              touchLink_EncryptNwkKey( initiatorNwkParams.nwkKey, initiatorNwkParams.keyIndex, touchLinkTransID, touchLinkResponseID );
   \                     ??touchLinkInitiator_event_loop_56:
   \   0006E2                ; Setup parameters for call to function touchLink_EncryptNwkKey
   \   0006E2   90....       MOV       DPTR,#touchLinkResponseID
   \   0006E5   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0006E8   90....       MOV       DPTR,#touchLinkTransID
   \   0006EB   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0006EE   90....       MOV       DPTR,#initiatorNwkParams + 8
   \   0006F1   E0           MOVX      A,@DPTR
   \   0006F2   F9           MOV       R1,A
   \   0006F3   7A..         MOV       R2,#(initiatorNwkParams + 9) & 0xff
   \   0006F5   7B..         MOV       R3,#((initiatorNwkParams + 9) >> 8) & 0xff
   \   0006F7   12....       LCALL     `??touchLink_EncryptNwkKey::?relay`; Banked call to: touchLink_EncryptNwkKey
   \   0006FA   7408         MOV       A,#0x8
   \   0006FC   12....       LCALL     ?DEALLOC_XSTACK8
   1078              // Start operating on the new network
   1079              touchLinkStartRtr( &initiatorNwkParams, touchLinkTransID );
   \   0006FF                ; Setup parameters for call to function touchLinkStartRtr
   \   0006FF   90....       MOV       DPTR,#touchLinkTransID
   \   000702   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000705   7A..         MOV       R2,#initiatorNwkParams & 0xff
   \   000707   7B..         MOV       R3,#(initiatorNwkParams >> 8) & 0xff
   \   000709   12....       LCALL     `??touchLinkStartRtr::?relay`; Banked call to: touchLinkStartRtr
   \   00070C   7404         MOV       A,#0x4
   \   00070E   12....       LCALL     ?DEALLOC_XSTACK8
   1080          #else
   1081              // Join to the chosen network
   1082              osal_set_event( touchLinkInitiator_TaskID, TOUCHLINK_JOIN_NWK_ATTEMPT_EVT );
   1083          #endif
   1084              // return unprocessed events
   1085              return ( events ^ TOUCHLINK_NWK_DISC_CNF_EVT );
   \   000711   EE           MOV       A,R6
   \   000712   6401         XRL       A,#0x1
   \   000714   8018         SJMP      ??touchLinkInitiator_event_loop_32
   1086            }
   1087          
   1088            if ( events & TOUCHLINK_TRANS_LIFETIME_EXPIRED_EVT )
   \                     ??touchLinkInitiator_event_loop_55:
   \   000716   5410         ANL       A,#0x10
   \   000718   6019         JZ        ??touchLinkInitiator_event_loop_57
   1089            {
   1090              touchLinkTransID = 0;
   \   00071A   90....       MOV       DPTR,#touchLinkTransID
   \   00071D   E4           CLR       A
   \   00071E   F0           MOVX      @DPTR,A
   \   00071F   A3           INC       DPTR
   \   000720   F0           MOVX      @DPTR,A
   \   000721   A3           INC       DPTR
   \   000722   F0           MOVX      @DPTR,A
   \   000723   A3           INC       DPTR
   \   000724   F0           MOVX      @DPTR,A
   1091              initiatorClearSelectedTarget();
   \   000725                ; Setup parameters for call to function initiatorClearSelectedTarget
   \   000725   12....       LCALL     `??initiatorClearSelectedTarget::?relay`; Banked call to: initiatorClearSelectedTarget
   1092              initiatorSetNwkToInitState();
   \   000728                ; Setup parameters for call to function initiatorSetNwkToInitState
   \   000728   12....       LCALL     `??initiatorSetNwkToInitState::?relay`; Banked call to: initiatorSetNwkToInitState
   1093          
   1094              // return unprocessed events
   1095              return ( events ^ TOUCHLINK_TRANS_LIFETIME_EXPIRED_EVT );
   \   00072B   EE           MOV       A,R6
   \   00072C   6410         XRL       A,#0x10
   \                     ??touchLinkInitiator_event_loop_32:
   \   00072E   FA           MOV       R2,A
   \   00072F   EF           MOV       A,R7
   \                     ??touchLinkInitiator_event_loop_5:
   \   000730   FB           MOV       R3,A
   \   000731   8004         SJMP      ??touchLinkInitiator_event_loop_58
   1096            }
   1097          
   1098            // If reach here, the events are unknown
   1099            // Discard or make more handlers
   1100            return 0;
   \                     ??touchLinkInitiator_event_loop_57:
   \   000733   7A00         MOV       R2,#0x0
   \   000735   7B00         MOV       R3,#0x0
   \                     ??touchLinkInitiator_event_loop_58:
   \   000737   743B         MOV       A,#0x3b
   \   000739   02....       LJMP      ?Subroutine1 & 0xFFFF
   1101          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   90....       MOV       DPTR,#selectedTarget + 36
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000001                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000001   7A00         MOV       R2,#0x0
   \   000003   7902         MOV       R1,#0x2
   \   000005   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   E8           MOV       A,R0
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   E9           MOV       A,R1
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   90....       MOV       DPTR,#selectedTarget + 31
   \   000011   E0           MOVX      A,@DPTR
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   90....       MOV       DPTR,#initiatorSeqNum
   \   000003                REQUIRE ??Subroutine52_0
   \   000003                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   7401         MOV       A,#0x1
   \   000004   28           ADD       A,R0
   \   000005   F0           MOVX      @DPTR,A
   \   000006                ; Setup parameters for call to function bdbTL_Send_ResetToFNReq
   \   000006                ; Setup parameters for call to function bdbTL_Send_ScanReq
   \   000006                ; Setup parameters for call to function bdbTL_Send_IndentifyReq
   \   000006                ; Setup parameters for call to function bdbTL_Send_IndentifyReq
   \   000006                ; Setup parameters for call to function bdbTL_Send_NwkJoinReq
   \   000006                ; Setup parameters for call to function bdbTL_Send_NwkJoinReq
   \   000006   E8           MOV       A,R0
   \   000007   F5..         MOV       ?V0,A
   \   000009   78..         MOV       R0,#?V0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   C3           CLR       C
   \   000001   94BB         SUBB      A,#-0x45
   \   000003   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000005   65D0         XRL       A,PSW
   \   000007   33           RLC       A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000003   7908         MOV       R1,#0x8
   \   000005   12....       LCALL     `??touchLink_SetNIB::?relay`; Banked call to: touchLink_SetNIB
   \   000008   7404         MOV       A,#0x4
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     `??touchLink_IsValidTransID::?relay`; Banked call to: touchLink_IsValidTransID
   \   000003   E9           MOV       A,R1
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#pfnNotifyAppCB
   \   000004                REQUIRE ??Subroutine62_0
   \   000004                ; // Fall through to label ??Subroutine62_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine62_0:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   90....       MOV       DPTR,#selectedTarget + 34
   \   000008                REQUIRE ??Subroutine63_0
   \   000008                ; // Fall through to label ??Subroutine63_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   AA..         MOV       R2,?XSP + 0
   \   000002   AB..         MOV       R3,?XSP + 1
   \   000004                REQUIRE ??Subroutine64_0
   \   000004                ; // Fall through to label ??Subroutine64_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine64_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   7A00         MOV       R2,#0x0
   \   000002   7B02         MOV       R3,#0x2
   \   000004                REQUIRE ??Subroutine68_0
   \   000004                ; // Fall through to label ??Subroutine68_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine68_0:
   \   000000   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000003                REQUIRE ??Subroutine69_0
   \   000003                ; // Fall through to label ??Subroutine69_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine69_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   90....       MOV       DPTR,#selectedTarget + 52
   \   000003                REQUIRE ??Subroutine70_0
   \   000003                ; // Fall through to label ??Subroutine70_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine70_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??touchLink_SetChannel::?relay`; Banked call to: touchLink_SetChannel
   \   000005   22           RET
   1102          
   1103          /*********************************************************************
   1104           * @fn      touchLinkInitiator_ChannelChange
   1105           *
   1106           * @brief   Change channel to supprot Frequency agility.
   1107           *
   1108           * @param   targetChannel - channel to
   1109           *
   1110           * @return  status
   1111           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1112          ZStatus_t touchLinkInitiator_ChannelChange( uint8 targetChannel )
   \                     touchLinkInitiator_ChannelChange:
   1113          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   1114              uint32 channelMask;
   1115              zAddrType_t dstAddr = {0};
   \   00000C   90....       MOV       DPTR,#`?<Constant {{0}}>`
   \   00000F   AC..         MOV       R4,?XSP + 0
   \   000011   AD..         MOV       R5,?XSP + 1
   \   000013   7409         MOV       A,#0x9
   \   000015   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1116              if ( ( targetChannel < 11 ) || targetChannel > 26 )
   \   000018   74F5         MOV       A,#-0xb
   \   00001A   29           ADD       A,R1
   \   00001B   C3           CLR       C
   \   00001C   9410         SUBB      A,#0x10
   \   00001E   4025         JC        ??touchLinkInitiator_ChannelChange_0
   1117              {
   1118                if (TOUCHLINK_PRIMARY_CHANNEL (_NIB.nwkLogicalChannel))
   \   000020   90....       MOV       DPTR,#_NIB + 22
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F8           MOV       R0,A
   \   000025   740B         MOV       A,#0xb
   \   000027   68           XRL       A,R0
   \   000028   6074         JZ        ??touchLinkInitiator_ChannelChange_1
   \   00002A   740F         MOV       A,#0xf
   \   00002C   68           XRL       A,R0
   \   00002D   6073         JZ        ??touchLinkInitiator_ChannelChange_2
   \   00002F   7414         MOV       A,#0x14
   \   000031   68           XRL       A,R0
   \   000032   6072         JZ        ??touchLinkInitiator_ChannelChange_3
   \   000034   7419         MOV       A,#0x19
   \   000036   68           XRL       A,R0
   \   000037   600A         JZ        ??touchLinkInitiator_ChannelChange_4
   1119                {
   1120                  switch (_NIB.nwkLogicalChannel)
   1121                  {
   1122                  case TOUCHLINK_FIRST_CHANNEL:
   1123                    targetChannel = TOUCHLINK_SECOND_CHANNEL;
   1124                    break;
   1125                  case TOUCHLINK_SECOND_CHANNEL:
   1126                    targetChannel = TOUCHLINK_THIRD_CHANNEL;
   1127                    break;
   1128                  case TOUCHLINK_THIRD_CHANNEL:
   1129                    targetChannel = TOUCHLINK_FOURTH_CHANNEL;
   1130                    break;
   1131                  case TOUCHLINK_FOURTH_CHANNEL:
   1132                    targetChannel = TOUCHLINK_FIRST_CHANNEL;
   1133                  }
   1134                }
   1135                else
   1136                {
   1137                  targetChannel = _NIB.nwkLogicalChannel + 1;
   \   000039   7401         MOV       A,#0x1
   \   00003B   28           ADD       A,R0
   \   00003C   FE           MOV       R6,A
   1138                  if ( _NIB.nwkLogicalChannel > 26 )
   \   00003D   E8           MOV       A,R0
   \   00003E   C3           CLR       C
   \   00003F   941B         SUBB      A,#0x1b
   \   000041   4002         JC        ??touchLinkInitiator_ChannelChange_0
   1139                    targetChannel = 11;
   \                     ??touchLinkInitiator_ChannelChange_4:
   \   000043   7E0B         MOV       R6,#0xb
   1140                }
   1141              }
   1142          
   1143              dstAddr.addrMode = AddrBroadcast;
   \                     ??touchLinkInitiator_ChannelChange_0:
   \   000045   7408         MOV       A,#0x8
   \   000047   12....       LCALL     ?XSTACK_DISP0_8
   \   00004A   740F         MOV       A,#0xf
   \   00004C   F0           MOVX      @DPTR,A
   1144              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   00004D   85..82       MOV       DPL,?XSP + 0
   \   000050   85..83       MOV       DPH,?XSP + 1
   \   000053   74FD         MOV       A,#-0x3
   \   000055   F0           MOVX      @DPTR,A
   \   000056   A3           INC       DPTR
   \   000057   74FF         MOV       A,#-0x1
   \   000059   F0           MOVX      @DPTR,A
   1145              channelMask = (uint32)1 << targetChannel;
   1146          
   1147              // Increment the nwkUpdateId parameter and set the updateID in the beacon
   1148              NLME_SetUpdateID(_NIB.nwkUpdateId + 1);
   \   00005A                ; Setup parameters for call to function NLME_SetUpdateID
   \   00005A   90....       MOV       DPTR,#_NIB + 109
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   04           INC       A
   \   00005F   F9           MOV       R1,A
   \   000060   12....       LCALL     `??NLME_SetUpdateID::?relay`; Banked call to: NLME_SetUpdateID
   1149          
   1150              ZDP_MgmtNwkUpdateReq( &dstAddr, channelMask, 0xfe, 0, _NIB.nwkUpdateId, 0 );
   \   000063                ; Setup parameters for call to function ZDP_MgmtNwkUpdateReq
   \   000063   E4           CLR       A
   \   000064   F5..         MOV       ?V0,A
   \   000066   F5..         MOV       ?V1,A
   \   000068   78..         MOV       R0,#?V0
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006D   75..01       MOV       ?V0,#0x1
   \   000070   75..00       MOV       ?V2,#0x0
   \   000073   75..00       MOV       ?V3,#0x0
   \   000076   EE           MOV       A,R6
   \   000077   78..         MOV       R0,#?V0
   \   000079   12....       LCALL     ?L_SHL
   \   00007C   78..         MOV       R0,#?V0
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000081   90....       MOV       DPTR,#_NIB + 109
   \   000084   E0           MOVX      A,@DPTR
   \   000085   FD           MOV       R5,A
   \   000086   7C00         MOV       R4,#0x0
   \   000088   79FE         MOV       R1,#-0x2
   \   00008A   7406         MOV       A,#0x6
   \   00008C   12....       LCALL     ?XSTACK_DISP101_8
   \   00008F   12....       LCALL     `??ZDP_MgmtNwkUpdateReq::?relay`; Banked call to: ZDP_MgmtNwkUpdateReq
   \   000092   7406         MOV       A,#0x6
   \   000094   12....       LCALL     ?DEALLOC_XSTACK8
   1151          
   1152              return ZSuccess;
   \   000097   7900         MOV       R1,#0x0
   \   000099   7409         MOV       A,#0x9
   \   00009B   02....       LJMP      ?Subroutine3 & 0xFFFF
   \                     ??touchLinkInitiator_ChannelChange_1:
   \   00009E   7E0F         MOV       R6,#0xf
   \   0000A0   80A3         SJMP      ??touchLinkInitiator_ChannelChange_0
   \                     ??touchLinkInitiator_ChannelChange_2:
   \   0000A2   7E14         MOV       R6,#0x14
   \   0000A4   809F         SJMP      ??touchLinkInitiator_ChannelChange_0
   \                     ??touchLinkInitiator_ChannelChange_3:
   \   0000A6   7E19         MOV       R6,#0x19
   \   0000A8   809B         SJMP      ??touchLinkInitiator_ChannelChange_0
   1153          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine61_0
   \   000003                ; // Fall through to label ??Subroutine61_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {{0}}>`:
   \   000000   0000         DW 0
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    
   \   000008   00           DB 0
   1154          
   1155          /*********************************************************************
   1156           * @fn      touchLinkSampleRemote_SendEPInfo
   1157           *
   1158           * @brief   Send Endpoint info command.
   1159           *
   1160           * @param   srcEP - source endpoint
   1161           * @param   dstAddr - destination address
   1162           * @param   seqNum - transaction sequnece number
   1163           *
   1164           * @return  ZStatus_t
   1165           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1166          ZStatus_t touchLinkInitiator_SendEPInfo( uint8 srcEP, afAddrType_t *dstAddr, uint8 seqNum)
   \                     touchLinkInitiator_SendEPInfo:
   1167          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV       A,#-0x17
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   \   000010   8C..         MOV       ?V1,R4
   1168              bdbTLEndpointInfo_t bdbTLEndpointInfoCmd;
   1169              bdbTLDeviceInfo_t  bdbTLDeviceInfo;
   1170                //send Epinfo cmd
   1171              touchLink_GetSubDeviceInfo( 0, &bdbTLDeviceInfo );
   \   000012                ; Setup parameters for call to function touchLink_GetSubDeviceInfo
   \   000012   AA..         MOV       R2,?XSP + 0
   \   000014   AB..         MOV       R3,?XSP + 1
   \   000016   7900         MOV       R1,#0x0
   \   000018   12....       LCALL     `??touchLink_GetSubDeviceInfo::?relay`; Banked call to: touchLink_GetSubDeviceInfo
   1172              bdbTLEndpointInfoCmd.endpoint = bdbTLDeviceInfo.endpoint;
   \   00001B   85..82       MOV       DPL,?XSP + 0
   \   00001E   85..83       MOV       DPH,?XSP + 1
   \   000021   E0           MOVX      A,@DPTR
   \   000022   C0E0         PUSH      A
   \   000024   7411         MOV       A,#0x11
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   D0E0         POP       A
   \   00002B   F0           MOVX      @DPTR,A
   1173              bdbTLEndpointInfoCmd.profileID = bdbTLDeviceInfo.profileID;
   \   00002C   7401         MOV       A,#0x1
   \   00002E   12....       LCALL     ?XSTACK_DISP0_8
   \   000031   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000034   7412         MOV       A,#0x12
   \   000036   12....       LCALL     ?XSTACK_DISP0_8
   \   000039   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   1174              bdbTLEndpointInfoCmd.deviceID = bdbTLDeviceInfo.deviceID;
   \                     ??CrossCallReturnLabel_90:
   \   00003C   7403         MOV       A,#0x3
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000044   7414         MOV       A,#0x14
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   1175              bdbTLEndpointInfoCmd.version = bdbTLDeviceInfo.version;
   \                     ??CrossCallReturnLabel_91:
   \   00004C   7405         MOV       A,#0x5
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   E0           MOVX      A,@DPTR
   \   000052   C0E0         PUSH      A
   \   000054   7416         MOV       A,#0x16
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   D0E0         POP       A
   \   00005B   F0           MOVX      @DPTR,A
   1176          
   1177              osal_cpyExtAddr( bdbTLEndpointInfoCmd.ieeeAddr, NLME_GetExtAddr() );
   \   00005C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00005C   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00005F   8A..         MOV       ?V2,R2
   \   000061   8B..         MOV       ?V3,R3
   \   000063   AC..         MOV       R4,?V2
   \   000065   AD..         MOV       R5,?V3
   \   000067                ; Setup parameters for call to function sAddrExtCpy
   \   000067   7407         MOV       A,#0x7
   \   000069   12....       LCALL     ?XSTACK_DISP101_8
   \   00006C   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1178              bdbTLEndpointInfoCmd.nwkAddr = NLME_GetShortAddr();
   \   00006F                ; Setup parameters for call to function NLME_GetShortAddr
   \   00006F   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000072   740F         MOV       A,#0xf
   \   000074   12....       LCALL     ?XSTACK_DISP0_8
   \   000077   12....       LCALL     ?Subroutine26 & 0xFFFF
   1179          
   1180              dstAddr->panId = _NIB.nwkPanId;
   \                     ??CrossCallReturnLabel_79:
   \   00007A   90....       MOV       DPTR,#_NIB + 33
   \   00007D   12....       LCALL     ?Subroutine11 & 0xFFFF
   1181              return bdbTL_Send_EndpointInfo( srcEP, dstAddr, &bdbTLEndpointInfoCmd,
   1182                                                    0, seqNum );
   \                     ??CrossCallReturnLabel_3:
   \   000080                ; Setup parameters for call to function bdbTL_Send_EndpointInfo
   \   000080   E5..         MOV       A,?V1
   \   000082   F5..         MOV       ?V2,A
   \   000084   78..         MOV       R0,#?V2
   \   000086   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000089   75..00       MOV       ?V2,#0x0
   \   00008C   78..         MOV       R0,#?V2
   \   00008E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000091   7409         MOV       A,#0x9
   \   000093   12....       LCALL     ?XSTACK_DISP102_8
   \   000096   EE           MOV       A,R6
   \   000097   FA           MOV       R2,A
   \   000098   EF           MOV       A,R7
   \   000099   FB           MOV       R3,A
   \   00009A   A9..         MOV       R1,?V0
   \   00009C   12....       LCALL     `??bdbTL_Send_EndpointInfo::?relay`; Banked call to: bdbTL_Send_EndpointInfo
   \   00009F   7402         MOV       A,#0x2
   \   0000A1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A4   7417         MOV       A,#0x17
   \   0000A6   02....       LJMP      ?Subroutine3 & 0xFFFF
   1183          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   E8           MOV       A,R0
   \   000012   F0           MOVX      @DPTR,A
   \   000013   A3           INC       DPTR
   \   000014   E9           MOV       A,R1
   \   000015   F0           MOVX      @DPTR,A
   \   000016   22           RET
   1184          
   1185          /*********************************************************************
   1186           * @fn      touchLinkInitiator_ResetToFNSelectedTarget
   1187           *
   1188           * @brief   Send Reset to Factory New Request command to the selected
   1189           *          target of the current Touch-Link transaction.
   1190           *          Note - this function should be called within no later than
   1191           *          BDBCTL_INTER_PAN_TRANS_ID_LIFETIME ms from the Scan Request.
   1192           *
   1193           * @param   none
   1194           *
   1195           * @return  status - failure is returned due to invalid selected target or
   1196           *          expired Touch-Link transaction.
   1197           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1198          ZStatus_t touchLinkInitiator_ResetToFNSelectedTarget( void )
   \                     touchLinkInitiator_ResetToFNSelectedTarget:
   1199          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1200            bdbTLResetToFNReq_t req;
   1201            req.transID = touchLinkTransID;
   \   00000A   90....       MOV       DPTR,#touchLinkTransID
   \   00000D   12....       LCALL     ?XLOAD_R0123
   \   000010   85..82       MOV       DPL,?XSP + 0
   \   000013   85..83       MOV       DPH,?XSP + 1
   \   000016   12....       LCALL     ?XSTORE_R0123
   1202          
   1203            // Cancel further touch-link commissioning (if called during identify interval)
   1204            osal_stop_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_CFG_TARGET_EVT );
   \   000019                ; Setup parameters for call to function osal_stop_timerEx
   \   000019   12....       LCALL     ?Subroutine18 & 0xFFFF
   1205          
   1206            touchLink_SetChannel( selectedTarget.rxChannel );
   \                     ??CrossCallReturnLabel_107:
   \   00001C                ; Setup parameters for call to function touchLink_SetChannel
   \   00001C   90....       MOV       DPTR,#selectedTarget + 52
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   12....       LCALL     ?Subroutine8 & 0xFFFF
   1207            return bdbTL_Send_ResetToFNReq( TOUCHLINK_INTERNAL_ENDPOINT, &(selectedTarget.srcAddr), &req, initiatorSeqNum++ );
   \                     ??CrossCallReturnLabel_98:
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000026   7401         MOV       A,#0x1
   \   000028   12....       LCALL     ?XSTACK_DISP102_8
   \   00002B   7A..         MOV       R2,#(selectedTarget + 38) & 0xff
   \   00002D   7B..         MOV       R3,#((selectedTarget + 38) >> 8) & 0xff
   \   00002F   790D         MOV       R1,#0xd
   \   000031   12....       LCALL     `??bdbTL_Send_ResetToFNReq::?relay`; Banked call to: bdbTL_Send_ResetToFNReq
   \   000034   7401         MOV       A,#0x1
   \   000036   12....       LCALL     ?DEALLOC_XSTACK8
   \   000039   7404         MOV       A,#0x4
   \   00003B   02....       LJMP      ?Subroutine2 & 0xFFFF
   1208          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F9           MOV       R1,A
   \   000001   12....       LCALL     `??touchLink_SetChannel::?relay`; Banked call to: touchLink_SetChannel
   \   000004                REQUIRE ??Subroutine51_0
   \   000004                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine54_0
   \   000003                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   7A40         MOV       R2,#0x40
   \   000002                REQUIRE ??Subroutine55_0
   \   000002                ; // Fall through to label ??Subroutine55_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine56_0
   \   000002                ; // Fall through to label ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   90....       MOV       DPTR,#touchLinkInitiator_TaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000008   22           RET
   1209          
   1210          /*********************************************************************
   1211           * @fn      touchLink_InitiatorSendScanRsp
   1212           *
   1213           * @brief   Send out a Scan Response command.
   1214           *
   1215           * @param   srcEP - sender's endpoint
   1216           * @param   dstAddr - pointer to destination address struct
   1217           * @param   transID - received transaction id
   1218           * @param   seqNum - received sequence number
   1219           *
   1220           * @return  ZStatus_t
   1221           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004                REQUIRE ??Subroutine48_0
   \   000004                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine49_0
   \   000002                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1222          static ZStatus_t touchLink_InitiatorSendScanRsp( uint8 srcEP, afAddrType_t *dstAddr, uint32 transID, uint8 seqNum )
   \                     touchLink_InitiatorSendScanRsp:
   1223          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V12,R2
   \   000009   8B..         MOV       ?V13,R3
   \   00000B   8C..         MOV       ?V3,R4
   1224            ZStatus_t status = ZSuccess;
   \   00000D   75..00       MOV       ?V0,#0x0
   \   000010   7416         MOV       A,#0x16
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   78..         MOV       R0,#?V4
   \   000017   12....       LCALL     ?L_MOV_X
   1225          
   1226            // Make sure we respond only once during a Device Discovery
   1227            if ( touchLinkLastAcceptedTransID != transID )
   \   00001A   90....       MOV       DPTR,#touchLinkLastAcceptedTransID
   \   00001D   78..         MOV       R0,#?V4
   \   00001F   12....       LCALL     ?L_EQ_X
   \   000022   7003         JNZ       $+5
   \   000024   02....       LJMP      ??touchLink_InitiatorSendScanRsp_0 & 0xFFFF
   1228            {
   1229              bdbTLScanRsp_t *pRsp;    
   1230          
   1231              pRsp = (bdbTLScanRsp_t *)osal_mem_alloc( sizeof( bdbTLScanRsp_t ) );
   \   000027                ; Setup parameters for call to function osal_mem_alloc
   \   000027   7A26         MOV       R2,#0x26
   \   000029   7B00         MOV       R3,#0x0
   \   00002B   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002E   8A..         MOV       ?V0,R2
   \   000030   8B..         MOV       ?V1,R3
   \   000032   AE..         MOV       R6,?V0
   \   000034   AF..         MOV       R7,?V1
   1232              if ( pRsp )
   \   000036   EA           MOV       A,R2
   \   000037   4F           ORL       A,R7
   \   000038   7003         JNZ       $+5
   \   00003A   02....       LJMP      ??touchLink_InitiatorSendScanRsp_1 & 0xFFFF
   1233              {
   1234                osal_memset( pRsp, 0, sizeof( bdbTLScanRsp_t ) );
   \   00003D                ; Setup parameters for call to function osal_memset
   \   00003D   7C26         MOV       R4,#0x26
   \   00003F   7D00         MOV       R5,#0x0
   \   000041   7900         MOV       R1,#0x0
   \   000043   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1235          
   1236                // Save transaction id
   1237                touchLinkLastAcceptedTransID = transID;
   \   000046   90....       MOV       DPTR,#touchLinkLastAcceptedTransID
   \   000049   78..         MOV       R0,#?V4
   \   00004B   12....       LCALL     ?L_MOV_TO_X
   1238                osal_start_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_TRANS_LIFETIME_EXPIRED_EVT,
   1239                                    BDBCTL_INTER_PAN_TRANS_ID_LIFETIME );
   \   00004E                ; Setup parameters for call to function osal_start_timerEx
   \   00004E   90....       MOV       DPTR,#__Constant_1f40
   \   000051   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000054   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000057   12....       LCALL     ?DEALLOC_XSTACK8
   1240          
   1241                pRsp->transID = transID;
   \   00005A   8E82         MOV       DPL,R6
   \   00005C   8F83         MOV       DPH,R7
   \   00005E   78..         MOV       R0,#?V4
   \   000060   12....       LCALL     ?L_MOV_TO_X
   1242                pRsp->rssiCorrection = TOUCHLINK_RSSI_CORRECTION;
   \   000063   8E82         MOV       DPL,R6
   \   000065   8F83         MOV       DPH,R7
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   E4           CLR       A
   \   00006C   F0           MOVX      @DPTR,A
   1243                pRsp->zLogicalType = zgDeviceLogicalType;
   \   00006D   EE           MOV       A,R6
   \   00006E   2405         ADD       A,#0x5
   \   000070   F5..         MOV       ?V4,A
   \   000072   E4           CLR       A
   \   000073   3F           ADDC      A,R7
   \   000074   F5..         MOV       ?V5,A
   \   000076   85..82       MOV       DPL,?V4
   \   000079   F583         MOV       DPH,A
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   54FC         ANL       A,#0xfc
   \   00007E   F8           MOV       R0,A
   \   00007F   A3           INC       DPTR
   \   000080   E0           MOVX      A,@DPTR
   \   000081   F9           MOV       R1,A
   \   000082   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000085   E0           MOVX      A,@DPTR
   \   000086   5403         ANL       A,#0x3
   \   000088   FA           MOV       R2,A
   \   000089   E8           MOV       A,R0
   \   00008A   4A           ORL       A,R2
   \   00008B   85..82       MOV       DPL,?V4
   \   00008E   85..83       MOV       DPH,?V5
   \   000091   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   1244                pRsp->touchLinkAddressAssignment = touchLink_IsValidSplitFreeRanges( 0 );
   \                     ??CrossCallReturnLabel_84:
   \   000094                ; Setup parameters for call to function touchLink_IsValidSplitFreeRanges
   \   000094   7900         MOV       R1,#0x0
   \   000096   12....       LCALL     `??touchLink_IsValidSplitFreeRanges::?relay`; Banked call to: touchLink_IsValidSplitFreeRanges
   \   000099   E9           MOV       A,R1
   \   00009A   F8           MOV       R0,A
   1245                pRsp->touchLinkInitiator = TRUE;
   1246                pRsp->touchLinkProfileInterop = TRUE;
   \   00009B   EE           MOV       A,R6
   \   00009C   2407         ADD       A,#0x7
   \   00009E   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   54FD         ANL       A,#0xfd
   \   0000A4   FA           MOV       R2,A
   \   0000A5   A3           INC       DPTR
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   FB           MOV       R3,A
   \   0000A8   E9           MOV       A,R1
   \   0000A9   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000AB   E4           CLR       A
   \   0000AC   33           RLC       A
   \   0000AD   25E0         ADD       A,0xE0 /* A   */
   \   0000AF   F8           MOV       R0,A
   \   0000B0   EA           MOV       A,R2
   \   0000B1   48           ORL       A,R0
   \   0000B2   4490         ORL       A,#0x90
   \   0000B4   85..82       MOV       DPL,?V0
   \   0000B7   85..83       MOV       DPH,?V1
   \   0000BA   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   1247          
   1248                if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??CrossCallReturnLabel_75:
   \   0000BD   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   A2E3         MOV       C,0xE0 /* A   */.3
   \   0000C3   500A         JNC       ??touchLink_InitiatorSendScanRsp_2
   1249                {
   1250                  pRsp->zRxOnWhenIdle = TRUE;
   \   0000C5   85..82       MOV       DPL,?V4
   \   0000C8   85..83       MOV       DPH,?V5
   \   0000CB   E0           MOVX      A,@DPTR
   \   0000CC   4404         ORL       A,#0x4
   \   0000CE   F0           MOVX      @DPTR,A
   1251                }
   1252          
   1253                pRsp->touchLinklinkPriority = FALSE;
   \                     ??touchLink_InitiatorSendScanRsp_2:
   \   0000CF   85..82       MOV       DPL,?V0
   \   0000D2   85..83       MOV       DPH,?V1
   \   0000D5   E0           MOVX      A,@DPTR
   \   0000D6   54DF         ANL       A,#0xdf
   \   0000D8   F0           MOVX      @DPTR,A
   1254                pRsp->keyBitmask = touchLink_GetNwkKeyBitmask();
   \   0000D9                ; Setup parameters for call to function touchLink_GetNwkKeyBitmask
   \   0000D9   12....       LCALL     `??touchLink_GetNwkKeyBitmask::?relay`; Banked call to: touchLink_GetNwkKeyBitmask
   \   0000DC   8E82         MOV       DPL,R6
   \   0000DE   8F83         MOV       DPH,R7
   \   0000E0   A3           INC       DPTR
   \   0000E1   A3           INC       DPTR
   \   0000E2   A3           INC       DPTR
   \   0000E3   A3           INC       DPTR
   \   0000E4   A3           INC       DPTR
   \   0000E5   A3           INC       DPTR
   \   0000E6   A3           INC       DPTR
   \   0000E7   A3           INC       DPTR
   \   0000E8   A3           INC       DPTR
   \   0000E9   12....       LCALL     ?Subroutine26 & 0xFFFF
   1255          
   1256                // Generate a new Response ID
   1257                touchLinkResponseID = ( ((uint32)osal_rand()) << 16 ) + osal_rand();
   \                     ??CrossCallReturnLabel_80:
   \   0000EC                ; Setup parameters for call to function osal_rand
   \   0000EC   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   0000EF   8A..         MOV       ?V8,R2
   \   0000F1   8B..         MOV       ?V9,R3
   \   0000F3   E4           CLR       A
   \   0000F4   F5..         MOV       ?V10,A
   \   0000F6   F5..         MOV       ?V11,A
   \   0000F8   7410         MOV       A,#0x10
   \   0000FA   78..         MOV       R0,#?V8
   \   0000FC   12....       LCALL     ?L_SHL
   \   0000FF                ; Setup parameters for call to function osal_rand
   \   0000FF   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000102   78..         MOV       R0,#?V8
   \   000104   79..         MOV       R1,#?V4
   \   000106   12....       LCALL     ?L_ADD
   \   000109   90....       MOV       DPTR,#touchLinkResponseID
   \   00010C   E5..         MOV       A,?V8
   \   00010E   F0           MOVX      @DPTR,A
   \   00010F   A3           INC       DPTR
   \   000110   E5..         MOV       A,?V9
   \   000112   F0           MOVX      @DPTR,A
   \   000113   A3           INC       DPTR
   \   000114   E5..         MOV       A,?V10
   \   000116   F0           MOVX      @DPTR,A
   \   000117   A3           INC       DPTR
   \   000118   E5..         MOV       A,?V11
   \   00011A   F0           MOVX      @DPTR,A
   1258                pRsp->responseID = touchLinkResponseID;
   \   00011B   90....       MOV       DPTR,#touchLinkResponseID
   \   00011E   12....       LCALL     ?XLOAD_R0123
   \   000121   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000124   12....       LCALL     ?XSTORE_R0123
   1259          
   1260                pRsp->touchLinkFactoryNew = !bdbAttributes.bdbNodeIsOnANetwork;
   \   000127   90....       MOV       DPTR,#bdbAttributes + 14
   \   00012A   E0           MOVX      A,@DPTR
   \   00012B   7004         JNZ       ??touchLink_InitiatorSendScanRsp_3
   \   00012D   7801         MOV       R0,#0x1
   \   00012F   8002         SJMP      ??touchLink_InitiatorSendScanRsp_4
   \                     ??touchLink_InitiatorSendScanRsp_3:
   \   000131   7800         MOV       R0,#0x0
   \                     ??touchLink_InitiatorSendScanRsp_4:
   \   000133   85..82       MOV       DPL,?V0
   \   000136   85..83       MOV       DPH,?V1
   \   000139   E0           MOVX      A,@DPTR
   \   00013A   54FE         ANL       A,#0xfe
   \   00013C   F0           MOVX      @DPTR,A
   \   00013D   E0           MOVX      A,@DPTR
   \   00013E   48           ORL       A,R0
   \   00013F   F0           MOVX      @DPTR,A
   1261                if ( pRsp->touchLinkFactoryNew )
   \   000140   EE           MOV       A,R6
   \   000141   2417         ADD       A,#0x17
   \   000143   F8           MOV       R0,A
   \   000144   E4           CLR       A
   \   000145   3F           ADDC      A,R7
   \   000146   F9           MOV       R1,A
   \   000147   EE           MOV       A,R6
   \   000148   241B         ADD       A,#0x1b
   \   00014A   FA           MOV       R2,A
   \   00014B   E4           CLR       A
   \   00014C   3F           ADDC      A,R7
   \   00014D   FB           MOV       R3,A
   \   00014E   E0           MOVX      A,@DPTR
   \   00014F   A2E0         MOV       C,0xE0 /* A   */.0
   \   000151   5010         JNC       ??touchLink_InitiatorSendScanRsp_5
   1262                {
   1263                  pRsp->nwkAddr = 0xFFFF;
   \   000153   8A82         MOV       DPL,R2
   \   000155   8B83         MOV       DPH,R3
   \   000157   74FF         MOV       A,#-0x1
   \   000159   F0           MOVX      @DPTR,A
   \   00015A   A3           INC       DPTR
   \   00015B   F0           MOVX      @DPTR,A
   1264                  pRsp->nwkUpdateId = 0;
   \   00015C   8882         MOV       DPL,R0
   \   00015E   8983         MOV       DPH,R1
   \   000160   E4           CLR       A
   \   000161   8019         SJMP      ??touchLink_InitiatorSendScanRsp_6
   1265                }
   1266                else
   1267                {
   1268                  pRsp->nwkAddr = _NIB.nwkDevAddress;
   \                     ??touchLink_InitiatorSendScanRsp_5:
   \   000163   90....       MOV       DPTR,#_NIB + 20
   \   000166   E0           MOVX      A,@DPTR
   \   000167   FC           MOV       R4,A
   \   000168   A3           INC       DPTR
   \   000169   E0           MOVX      A,@DPTR
   \   00016A   FD           MOV       R5,A
   \   00016B   8A82         MOV       DPL,R2
   \   00016D   8B83         MOV       DPH,R3
   \   00016F   EC           MOV       A,R4
   \   000170   F0           MOVX      @DPTR,A
   \   000171   A3           INC       DPTR
   \   000172   ED           MOV       A,R5
   \   000173   F0           MOVX      @DPTR,A
   1269                  pRsp->nwkUpdateId = _NIB.nwkUpdateId;
   \   000174   90....       MOV       DPTR,#_NIB + 109
   \   000177   E0           MOVX      A,@DPTR
   \   000178   8882         MOV       DPL,R0
   \   00017A   8983         MOV       DPH,R1
   1270                }
   \                     ??touchLink_InitiatorSendScanRsp_6:
   \   00017C   12....       LCALL     ?Subroutine22 & 0xFFFF
   1271                pRsp->PANID = _NIB.nwkPanId;
   \                     ??CrossCallReturnLabel_104:
   \   00017F   2419         ADD       A,#0x19
   \   000181   12....       LCALL     ?Subroutine32 & 0xFFFF
   1272                pRsp->logicalChannel = _NIB.nwkLogicalChannel;
   \                     ??CrossCallReturnLabel_96:
   \   000184   90....       MOV       DPTR,#_NIB + 22
   \   000187   E0           MOVX      A,@DPTR
   \   000188   C0E0         PUSH      A
   \   00018A   EE           MOV       A,R6
   \   00018B   2418         ADD       A,#0x18
   \   00018D   F582         MOV       DPL,A
   \   00018F   E4           CLR       A
   \   000190   3F           ADDC      A,R7
   \   000191   F583         MOV       DPH,A
   \   000193   D0E0         POP       A
   \   000195   F0           MOVX      @DPTR,A
   1273                osal_cpyExtAddr( pRsp->extendedPANID, _NIB.extendedPANID );
   \   000196                ; Setup parameters for call to function sAddrExtCpy
   \   000196   7C..         MOV       R4,#(_NIB + 53) & 0xff
   \   000198   7D..         MOV       R5,#((_NIB + 53) >> 8) & 0xff
   \   00019A   EE           MOV       A,R6
   \   00019B   240F         ADD       A,#0xf
   \   00019D   FA           MOV       R2,A
   \   00019E   E4           CLR       A
   \   00019F   3F           ADDC      A,R7
   \   0001A0   FB           MOV       R3,A
   \   0001A1   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1274          
   1275                pRsp->numSubDevices = touchLink_GetNumSubDevices( 0 );
   \   0001A4                ; Setup parameters for call to function touchLink_GetNumSubDevices
   \   0001A4   7900         MOV       R1,#0x0
   \   0001A6   12....       LCALL     `??touchLink_GetNumSubDevices::?relay`; Banked call to: touchLink_GetNumSubDevices
   \   0001A9   E9           MOV       A,R1
   \   0001AA   F8           MOV       R0,A
   \   0001AB   EE           MOV       A,R6
   \   0001AC   241D         ADD       A,#0x1d
   \   0001AE   F582         MOV       DPL,A
   \   0001B0   E4           CLR       A
   \   0001B1   3F           ADDC      A,R7
   \   0001B2   F583         MOV       DPH,A
   \   0001B4   E9           MOV       A,R1
   \   0001B5   F0           MOVX      @DPTR,A
   1276                if ( pRsp->numSubDevices == 1 )
   \   0001B6   7401         MOV       A,#0x1
   \   0001B8   68           XRL       A,R0
   \   0001B9   700C         JNZ       ??touchLink_InitiatorSendScanRsp_7
   1277                {
   1278                  touchLink_GetSubDeviceInfo( 0, &(pRsp->deviceInfo) );
   \   0001BB                ; Setup parameters for call to function touchLink_GetSubDeviceInfo
   \   0001BB   EE           MOV       A,R6
   \   0001BC   241F         ADD       A,#0x1f
   \   0001BE   FA           MOV       R2,A
   \   0001BF   E4           CLR       A
   \   0001C0   3F           ADDC      A,R7
   \   0001C1   FB           MOV       R3,A
   \   0001C2   7900         MOV       R1,#0x0
   \   0001C4   12....       LCALL     `??touchLink_GetSubDeviceInfo::?relay`; Banked call to: touchLink_GetSubDeviceInfo
   1279                }
   1280          
   1281                pRsp->totalGrpIDs = touchLink_GetNumGrpIDs();
   \                     ??touchLink_InitiatorSendScanRsp_7:
   \   0001C7                ; Setup parameters for call to function touchLink_GetNumGrpIDs
   \   0001C7   12....       LCALL     `??touchLink_GetNumGrpIDs::?relay`; Banked call to: touchLink_GetNumGrpIDs
   \   0001CA   EE           MOV       A,R6
   \   0001CB   241E         ADD       A,#0x1e
   \   0001CD   F582         MOV       DPL,A
   \   0001CF   E4           CLR       A
   \   0001D0   3F           ADDC      A,R7
   \   0001D1   F583         MOV       DPH,A
   \   0001D3   E9           MOV       A,R1
   \   0001D4   F0           MOVX      @DPTR,A
   1282          
   1283                // Send a response back
   1284                status = bdbTL_Send_ScanRsp( srcEP, dstAddr, pRsp, seqNum );
   \   0001D5                ; Setup parameters for call to function bdbTL_Send_ScanRsp
   \   0001D5   E5..         MOV       A,?V3
   \   0001D7   F5..         MOV       ?V0,A
   \   0001D9   78..         MOV       R0,#?V0
   \   0001DB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001DE   EE           MOV       A,R6
   \   0001DF   FC           MOV       R4,A
   \   0001E0   EF           MOV       A,R7
   \   0001E1   FD           MOV       R5,A
   \   0001E2   AA..         MOV       R2,?V12
   \   0001E4   AB..         MOV       R3,?V13
   \   0001E6   A9..         MOV       R1,?V2
   \   0001E8   12....       LCALL     `??bdbTL_Send_ScanRsp::?relay`; Banked call to: bdbTL_Send_ScanRsp
   \   0001EB   7401         MOV       A,#0x1
   \   0001ED   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001F0   E9           MOV       A,R1
   \   0001F1   F5..         MOV       ?V0,A
   1285          
   1286                osal_mem_free( pRsp );
   \   0001F3                ; Setup parameters for call to function osal_mem_free
   \   0001F3   EE           MOV       A,R6
   \   0001F4   FA           MOV       R2,A
   \   0001F5   EF           MOV       A,R7
   \   0001F6   FB           MOV       R3,A
   \   0001F7   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001FA   8003         SJMP      ??touchLink_InitiatorSendScanRsp_0
   1287              }
   1288              else
   1289              {
   1290                status = ZMemError;
   \                     ??touchLink_InitiatorSendScanRsp_1:
   \   0001FC   75..10       MOV       ?V0,#0x10
   1291              }
   1292            }
   1293          
   1294            return ( status );
   \                     ??touchLink_InitiatorSendScanRsp_0:
   \   0001FF   A9..         MOV       R1,?V0
   \   000201   7F0E         MOV       R7,#0xe
   \   000203   02....       LJMP      ?BANKED_LEAVE_XDATA
   1295          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                REQUIRE ??Subroutine53_0
   \   000001                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   90....       MOV       DPTR,#_NIB + 33
   \   000003   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000006   EE           MOV       A,R6
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   EE           MOV       A,R6
   \   000001   240B         ADD       A,#0xb
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   F5..         MOV       ?V0,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F5..         MOV       ?V1,A
   \   000006   85..82       MOV       DPL,?V0
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET
   1296          
   1297          /*********************************************************************
   1298           * @fn      bdb_Initiator_SendNwkJoinReq
   1299           *
   1300           * @brief   Send out a Network Join Router or End Device Request command.
   1301           *          using the selected Target.
   1302           *
   1303           * @param   -
   1304           *
   1305           * @return  ZStatus_t
   1306           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1307          ZStatus_t bdb_Initiator_SendNwkJoinReq( void )
   \                     bdb_Initiator_SendNwkJoinReq:
   1308          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1309            // Set NWK task to idle
   1310            nwk_setStateIdle( TRUE );
   \   000004                ; Setup parameters for call to function nwk_setStateIdle
   \   000004   7901         MOV       R1,#0x1
   \   000006   12....       LCALL     `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
   1311            return initiatorSendNwkJoinReq( &(selectedTarget.scanRsp) );
   \   000009                ; Setup parameters for call to function initiatorSendNwkJoinReq
   \   000009   7A..         MOV       R2,#selectedTarget & 0xff
   \   00000B   7B..         MOV       R3,#(selectedTarget >> 8) & 0xff
   \   00000D   12....       LCALL     `??initiatorSendNwkJoinReq::?relay`; Banked call to: initiatorSendNwkJoinReq
   \   000010   02....       LJMP      ??Subroutine46_0 & 0xFFFF
   1312          }  
   1313          
   1314          #if (ZSTACK_ROUTER_BUILD)
   1315          /*********************************************************************
   1316           * @fn      touchLinkInitiator_PermitJoin
   1317           *
   1318           * @brief   Set the router permit join flag, to allow or deny classical
   1319           *          commissioning by other ZigBee devices.
   1320           *
   1321           * @param   duration - enable up to aplcMaxPermitJoinDuration seconds,
   1322           *                     0 to disable
   1323           *
   1324           * @return  status
   1325           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1326          ZStatus_t touchLinkInitiator_PermitJoin( uint8 duration )
   \                     touchLinkInitiator_PermitJoin:
   1327          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1328            return touchLink_PermitJoin( duration );
   \   000005                ; Setup parameters for call to function touchLink_PermitJoin
   \   000005   12....       LCALL     `??touchLink_PermitJoin::?relay`; Banked call to: touchLink_PermitJoin
   \   000008   80..         SJMP      ??Subroutine54_0
   1329          }  
   1330          #endif //(ZSTACK_ROUTER_BUILD)
   1331          
   1332          /*********************************************************************
   1333           * LOCAL FUNCTIONS
   1334           */
   1335          
   1336          /*********************************************************************
   1337           * @fn      initiatorScanReqCB
   1338           *
   1339           * @brief   This callback is called to process a Scan Request command.
   1340           *
   1341           * @param   srcAddr - sender's address
   1342           * @param   pReq - parsed command
   1343           * @param   seqNum - command sequence number
   1344           *
   1345           * @return  ZStatus_t
   1346           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1347          static ZStatus_t initiatorScanReqCB( afAddrType_t *srcAddr, bdbTLScanReq_t *pReq, uint8 seqNum )
   \                     initiatorScanReqCB:
   1348          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
   \   000012   89..         MOV       ?V4,R1
   1349            int8 rssi;
   1350            rssi = touchLink_GetMsgRssi();
   1351            if( ( rssi > TOUCHLINK_WORST_RSSI ) && ( pReq->touchLinkInitiator == TRUE ) )
   \   000014                ; Setup parameters for call to function touchLink_GetMsgRssi
   \   000014   12....       LCALL     `??touchLink_GetMsgRssi::?relay`; Banked call to: touchLink_GetMsgRssi
   \   000017   E9           MOV       A,R1
   \   000018   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00001B   5003         JNC       $+5
   \   00001D   02....       LJMP      ??CrossCallReturnLabel_109 & 0xFFFF
   \   000020   E5..         MOV       A,?V0
   \   000022   2406         ADD       A,#0x6
   \   000024   FE           MOV       R6,A
   \   000025   E4           CLR       A
   \   000026   35..         ADDC      A,?V1
   \   000028   FF           MOV       R7,A
   \   000029   8E82         MOV       DPL,R6
   \   00002B   F583         MOV       DPH,A
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   5410         ANL       A,#0x10
   \   000030   6074         JZ        ??CrossCallReturnLabel_109
   1352            {
   1353              // response to the originator, but switch to dst PAN 0xFFFF
   1354              afAddrType_t dstAddr;
   1355              osal_memcpy(&dstAddr, srcAddr, sizeof(afAddrType_t));
   \   000032                ; Setup parameters for call to function osal_memcpy
   \   000032   85....       MOV       ?V8,?V2
   \   000035   85....       MOV       ?V9,?V3
   \   000038   75..00       MOV       ?V10,#0x0
   \   00003B   78..         MOV       R0,#?V8
   \   00003D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000040   7C0C         MOV       R4,#0xc
   \   000042   7D00         MOV       R5,#0x0
   \   000044   7403         MOV       A,#0x3
   \   000046   12....       LCALL     ?XSTACK_DISP101_8
   \   000049   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00004C   7403         MOV       A,#0x3
   \   00004E   12....       LCALL     ?DEALLOC_XSTACK8
   1356              dstAddr.panId = 0xFFFF;
   \   000051   740A         MOV       A,#0xa
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   74FF         MOV       A,#-0x1
   \   000058   F0           MOVX      @DPTR,A
   \   000059   A3           INC       DPTR
   \   00005A   F0           MOVX      @DPTR,A
   1357          
   1358              // If we are factory new and revice a Scan Request from other factory new
   1359              // device then drop the request.
   1360              if ( ( pReq->touchLinkFactoryNew == TRUE ) && ( bdbAttributes.bdbNodeIsOnANetwork == FALSE ) )
   \   00005B   8E82         MOV       DPL,R6
   \   00005D   8F83         MOV       DPH,R7
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   A2E0         MOV       C,0xE0 /* A   */.0
   \   000062   5011         JNC       ??initiatorScanReqCB_0
   \   000064   90....       MOV       DPTR,#bdbAttributes + 14
   \   000067   E0           MOVX      A,@DPTR
   \   000068   F8           MOV       R0,A
   \   000069   603B         JZ        ??CrossCallReturnLabel_109
   \   00006B   7401         MOV       A,#0x1
   \   00006D   68           XRL       A,R0
   \   00006E   7005         JNZ       ??initiatorScanReqCB_0
   \   000070                ; Setup parameters for call to function osal_get_timeoutEx
   \   000070   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000073   7031         JNZ       ??CrossCallReturnLabel_109
   1361              {
   1362                return ( ZSuccess );
   1363              }
   1364              // If, during its scan, a non factory new initiator receives another scan
   1365              // request inter-PAN command frame from a factory new target, it shall be ignored.
   1366              if ( ( pReq->touchLinkFactoryNew == TRUE ) && ( bdbAttributes.bdbNodeIsOnANetwork == TRUE ) &&
   1367                   osal_get_timeoutEx( touchLinkInitiator_TaskID, TOUCHLINK_TL_SCAN_BASE_EVT ) )
   1368              {
   1369                return ( ZSuccess );
   1370              }
   1371          
   1372              // Send a Scan Response back
   1373              if ( touchLink_InitiatorSendScanRsp( TOUCHLINK_INTERNAL_ENDPOINT, &dstAddr, pReq->transID, seqNum ) == ZSuccess )
   \                     ??initiatorScanReqCB_0:
   \   000075                ; Setup parameters for call to function touchLink_InitiatorSendScanRsp
   \   000075   85..82       MOV       DPL,?V0
   \   000078   85..83       MOV       DPH,?V1
   \   00007B   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00007E   AC..         MOV       R4,?V4
   \   000080   7404         MOV       A,#0x4
   \   000082   12....       LCALL     ?XSTACK_DISP101_8
   \   000085   790D         MOV       R1,#0xd
   \   000087   12....       LCALL     `??touchLink_InitiatorSendScanRsp::?relay`; Banked call to: touchLink_InitiatorSendScanRsp
   \   00008A   7404         MOV       A,#0x4
   \   00008C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008F   E9           MOV       A,R1
   \   000090   7014         JNZ       ??CrossCallReturnLabel_109
   1374              {
   1375                // If we're a factory new initiator and are in the middle of a Device
   1376                // Discovery, stop the procedure and wait for subsequent configuration
   1377                // information from the non-factory new initiator that we just responded to.
   1378                if ( ( bdbAttributes.bdbNodeIsOnANetwork == FALSE ) && !pReq->touchLinkFactoryNew )
   \   000092   90....       MOV       DPTR,#bdbAttributes + 14
   \   000095   E0           MOVX      A,@DPTR
   \   000096   700E         JNZ       ??CrossCallReturnLabel_109
   \   000098   8E82         MOV       DPL,R6
   \   00009A   8F83         MOV       DPH,R7
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   A2E0         MOV       C,0xE0 /* A   */.0
   \   00009F   4005         JC        ??CrossCallReturnLabel_109
   1379                {
   1380                  osal_stop_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_TL_SCAN_BASE_EVT );
   \   0000A1                ; Setup parameters for call to function osal_stop_timerEx
   \   0000A1   7A20         MOV       R2,#0x20
   \   0000A3   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   1381                }
   1382              }
   1383            }
   1384          
   1385            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_109:
   \   0000A6   7900         MOV       R1,#0x0
   \   0000A8   740C         MOV       A,#0xc
   \   0000AA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AD   7F0B         MOV       R7,#0xb
   \   0000AF   02....       LJMP      ?BANKED_LEAVE_XDATA
   1386          }
   1387          
   1388          /*********************************************************************
   1389           * @fn      initiatorDeviceInfoReqCB
   1390           *
   1391           * @brief   This callback is called to process a Device Information
   1392           *          Request command.
   1393           *
   1394           * @param   srcAddr - sender's address
   1395           * @param   pReq - parsed command
   1396           * @param   seqNum - command sequence number
   1397           *
   1398           * @return  ZStatus_t
   1399           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1400          static ZStatus_t initiatorDeviceInfoReqCB( afAddrType_t *srcAddr, bdbTLDeviceInfoReq_t *pReq, uint8 seqNum )
   \                     initiatorDeviceInfoReqCB:
   1401          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   \   00000D   89..         MOV       ?V2,R1
   1402            if ( touchLink_IsValidTransID( pReq->transID ) == FALSE )
   \   00000F                ; Setup parameters for call to function touchLink_IsValidTransID
   \   00000F   8C82         MOV       DPL,R4
   \   000011   8D83         MOV       DPH,R5
   \   000013   12....       LCALL     ?XLOAD_R2345
   \   000016   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000019   7004         JNZ       ??initiatorDeviceInfoReqCB_0
   1403            {
   1404              return ( ZFailure );
   \   00001B   7901         MOV       R1,#0x1
   \   00001D   8025         SJMP      ??initiatorDeviceInfoReqCB_1
   1405            }
   1406            return ( touchLink_SendDeviceInfoRsp( TOUCHLINK_INTERNAL_ENDPOINT, srcAddr,
   1407                                            pReq->startIndex, pReq->transID, seqNum ) );
   \                     ??initiatorDeviceInfoReqCB_0:
   \   00001F                ; Setup parameters for call to function touchLink_SendDeviceInfoRsp
   \   00001F   85..82       MOV       DPL,?V0
   \   000022   85..83       MOV       DPH,?V1
   \   000025   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000028   AD..         MOV       R5,?V2
   \   00002A   85..82       MOV       DPL,?V0
   \   00002D   85..83       MOV       DPH,?V1
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   FC           MOV       R4,A
   \   000036   EE           MOV       A,R6
   \   000037   FA           MOV       R2,A
   \   000038   EF           MOV       A,R7
   \   000039   FB           MOV       R3,A
   \   00003A   790D         MOV       R1,#0xd
   \   00003C   12....       LCALL     `??touchLink_SendDeviceInfoRsp::?relay`; Banked call to: touchLink_SendDeviceInfoRsp
   \   00003F   7404         MOV       A,#0x4
   \   000041   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??initiatorDeviceInfoReqCB_1:
   \   000044                REQUIRE ?Subroutine4
   \   000044                ; // Fall through to label ?Subroutine4
   1408          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F03         MOV       R7,#0x3
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1409          
   1410          /*********************************************************************
   1411           * @fn      initiatorIdentifyReqCB
   1412           *
   1413           * @brief   This callback is called to process an Identify Request command.
   1414           *
   1415           * @param   srcAddr - sender's address
   1416           * @param   pReq - parsed command
   1417           *
   1418           * @return  ZStatus_t
   1419           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1420          static ZStatus_t initiatorIdentifyReqCB( afAddrType_t *srcAddr, bdbTLIdentifyReq_t *pReq )
   \                     initiatorIdentifyReqCB:
   1421          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FE           MOV       R6,A
   \   000007   ED           MOV       A,R5
   \   000008   FF           MOV       R7,A
   1422            if ( touchLink_IsValidTransID( pReq->transID ) == FALSE )
   \   000009                ; Setup parameters for call to function touchLink_IsValidTransID
   \   000009   8C82         MOV       DPL,R4
   \   00000B   F583         MOV       DPH,A
   \   00000D   12....       LCALL     ?XLOAD_R2345
   \   000010   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000013   7004         JNZ       ??initiatorIdentifyReqCB_0
   1423            {
   1424              return ( ZFailure );
   \   000015   7901         MOV       R1,#0x1
   \   000017   8031         SJMP      ??initiatorIdentifyReqCB_1
   1425            }
   1426          
   1427            uint16 identifyTime;
   1428            endPointDesc_t * bdb_CurrEpDescriptor;
   1429            
   1430            // Values of the Identify Duration field:
   1431            // - Exit identify mode: 0x0000
   1432            // - Length of time to remain in identify mode: 0x0001-0xfffe
   1433            // - Remain in identify mode for a default time known by the receiver: 0xffff
   1434            if ( pReq->IdDuration == 0xffff )
   \                     ??initiatorIdentifyReqCB_0:
   \   000019   8E82         MOV       DPL,R6
   \   00001B   8F83         MOV       DPH,R7
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000024   74FF         MOV       A,#-0x1
   \   000026   68           XRL       A,R0
   \   000027   7003         JNZ       ??initiatorIdentifyReqCB_2
   \   000029   74FF         MOV       A,#-0x1
   \   00002B   69           XRL       A,R1
   \                     ??initiatorIdentifyReqCB_2:
   \   00002C   7006         JNZ       ??initiatorIdentifyReqCB_3
   1435            {
   1436              identifyTime = TOUCHLINK_DEFAULT_IDENTIFY_TIME;
   \   00002E   7E03         MOV       R6,#0x3
   \   000030   7F00         MOV       R7,#0x0
   \   000032   8004         SJMP      ??initiatorIdentifyReqCB_4
   1437            }
   1438            else
   1439            {
   1440              identifyTime = pReq->IdDuration;
   \                     ??initiatorIdentifyReqCB_3:
   \   000034   E8           MOV       A,R0
   \   000035   FE           MOV       R6,A
   \   000036   E9           MOV       A,R1
   \   000037   FF           MOV       R7,A
   1441            }
   1442          
   1443            bdb_CurrEpDescriptor = bdb_setEpDescListToActiveEndpoint( );
   \                     ??initiatorIdentifyReqCB_4:
   \   000038                ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
   \   000038   12....       LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
   \   00003B   8A82         MOV       DPL,R2
   \   00003D   8B83         MOV       DPH,R3
   1444            
   1445            bdb_ZclIdentifyCmdInd( identifyTime, bdb_CurrEpDescriptor->endPoint );
   \   00003F                ; Setup parameters for call to function bdb_ZclIdentifyCmdInd
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F9           MOV       R1,A
   \   000041   EE           MOV       A,R6
   \   000042   FA           MOV       R2,A
   \   000043   EF           MOV       A,R7
   \   000044   FB           MOV       R3,A
   \   000045   12....       LCALL     `??bdb_ZclIdentifyCmdInd::?relay`; Banked call to: bdb_ZclIdentifyCmdInd
   1446          
   1447            return ( ZSuccess );
   \   000048   7900         MOV       R1,#0x0
   \                     ??initiatorIdentifyReqCB_1:
   \   00004A                REQUIRE ?Subroutine5
   \   00004A                ; // Fall through to label ?Subroutine5
   1448          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1449          
   1450          /*********************************************************************
   1451           * @fn      initiatorNwkJoinReqCB
   1452           *
   1453           * @brief   This callback is called to process Network Join
   1454           *          Request and Network Join End Device Request commands.
   1455           *
   1456           * @param   srcAddr - sender's address
   1457           * @param   pReq - parsed command
   1458           * @param   seqNum - command sequence number
   1459           *
   1460           * @return  ZStatus_t
   1461           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1462          static ZStatus_t initiatorNwkJoinReqCB( afAddrType_t *srcAddr, bdbTLNwkJoinReq_t *pReq, uint8 seqNum )
   \                     initiatorNwkJoinReqCB:
   1463          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   \   000012   89..         MOV       ?V0,R1
   1464            bdbTLNwkJoinRsp_t rsp;
   1465            afAddrType_t dstAddr;
   1466            nwk_states_t nwkState;
   1467          
   1468            if ( touchLink_IsValidTransID( pReq->transID ) == FALSE )
   \   000014                ; Setup parameters for call to function touchLink_IsValidTransID
   \   000014   8C82         MOV       DPL,R4
   \   000016   F583         MOV       DPH,A
   \   000018   12....       LCALL     ?XLOAD_R2345
   \   00001B   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00001E   7005         JNZ       ??initiatorNwkJoinReqCB_0
   1469            {
   1470              return ( ZFailure );
   \   000020   7901         MOV       R1,#0x1
   \   000022   02....       LJMP      ??initiatorNwkJoinReqCB_1 & 0xFFFF
   1471            }
   1472          
   1473            rsp.transID = pReq->transID;
   \                     ??initiatorNwkJoinReqCB_0:
   \   000025   8E82         MOV       DPL,R6
   \   000027   8F83         MOV       DPH,R7
   \   000029   12....       LCALL     ?XLOAD_R0123
   \   00002C   85..82       MOV       DPL,?XSP + 0
   \   00002F   85..83       MOV       DPH,?XSP + 1
   \   000032   12....       LCALL     ?XSTORE_R0123
   1474          
   1475            if ( nwk_ExtPANIDValid( pReq->nwkParams.extendedPANID ) )
   \   000035   EE           MOV       A,R6
   \   000036   2404         ADD       A,#0x4
   \   000038   F5..         MOV       ?V4,A
   \   00003A   E4           CLR       A
   \   00003B   3F           ADDC      A,R7
   \   00003C   F5..         MOV       ?V5,A
   \   00003E                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   00003E   AA..         MOV       R2,?V4
   \   000040   FB           MOV       R3,A
   \   000041   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   000044   E9           MOV       A,R1
   \   000045   7003         JNZ       $+5
   \   000047   02....       LJMP      ??initiatorNwkJoinReqCB_2 & 0xFFFF
   1476              //NOTE: additional nwk params verification may be added here, e.g. ranges.
   1477            {
   1478          #if ( ZSTACK_ROUTER_BUILD )
   1479              nwkState = NWK_ROUTER;
   1480          #else
   1481              // Save the request for later
   1482              joinReq = *pReq;
   1483              nwkState = NWK_ENDDEVICE;
   1484          #endif
   1485          
   1486              // Notify our task to join the new network
   1487              osal_start_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_NWK_JOIN_IND_EVT, BDBCTL_MIN_STARTUP_DELAY_TIME );
   \   00004A                ; Setup parameters for call to function osal_start_timerEx
   \   00004A   90....       MOV       DPTR,#__Constant_7d0
   \   00004D   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000050   7A02         MOV       R2,#0x2
   \   000052   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000055   12....       LCALL     ?DEALLOC_XSTACK8
   1488          
   1489              osal_stop_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_DISABLE_RX_EVT );
   \   000058                ; Setup parameters for call to function osal_stop_timerEx
   \   000058   7A00         MOV       R2,#0x0
   \   00005A   7B02         MOV       R3,#0x2
   \   00005C   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   1490              osal_stop_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_CFG_TARGET_EVT );
   \                     ??CrossCallReturnLabel_110:
   \   00005F                ; Setup parameters for call to function osal_stop_timerEx
   \   00005F   12....       LCALL     ?Subroutine18 & 0xFFFF
   1491          
   1492              rsp.status = TOUCHLINK_NETWORK_JOIN_RSP_STATUS_SUCCESS;
   \                     ??CrossCallReturnLabel_108:
   \   000062   7404         MOV       A,#0x4
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   E4           CLR       A
   \   000068   F0           MOVX      @DPTR,A
   1493              
   1494              bdb_setNodeIsOnANetwork(TRUE);
   \   000069                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000069   7901         MOV       R1,#0x1
   \   00006B   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
   1495              
   1496              // Apply the received network key
   1497              touchLink_DecryptNwkKey( pReq->nwkParams.nwkKey, pReq->nwkParams.keyIndex, pReq->transID, touchLinkResponseID );
   \   00006E                ; Setup parameters for call to function touchLink_DecryptNwkKey
   \   00006E   90....       MOV       DPTR,#touchLinkResponseID
   \   000071   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000074   8E82         MOV       DPL,R6
   \   000076   8F83         MOV       DPH,R7
   \   000078   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00007B   EE           MOV       A,R6
   \   00007C   240C         ADD       A,#0xc
   \   00007E   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000081   F9           MOV       R1,A
   \   000082   EE           MOV       A,R6
   \   000083   240D         ADD       A,#0xd
   \   000085   FA           MOV       R2,A
   \   000086   E4           CLR       A
   \   000087   3F           ADDC      A,R7
   \   000088   FB           MOV       R3,A
   \   000089   12....       LCALL     `??touchLink_DecryptNwkKey::?relay`; Banked call to: touchLink_DecryptNwkKey
   \   00008C   7408         MOV       A,#0x8
   \   00008E   12....       LCALL     ?DEALLOC_XSTACK8
   1498          
   1499              // This is not a usual Trust Center protected network
   1500              ZDSecMgrUpdateTCAddress( NULL );
   \   000091                ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
   \   000091   7A00         MOV       R2,#0x0
   \   000093   7B00         MOV       R3,#0x0
   \   000095   12....       LCALL     `??ZDSecMgrUpdateTCAddress::?relay`; Banked call to: ZDSecMgrUpdateTCAddress
   1501              
   1502              // Configure MAC with our network parameters
   1503              NLME_InitNV();
   \   000098                ; Setup parameters for call to function NLME_InitNV
   \   000098   12....       LCALL     `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
   1504              touchLink_SetNIB( nwkState, pReq->nwkParams.nwkAddr, pReq->nwkParams.extendedPANID,
   1505                           _NIB.nwkLogicalChannel, pReq->nwkParams.panId, pReq->nwkParams.panId );
   \   00009B   EE           MOV       A,R6
   \   00009C   241E         ADD       A,#0x1e
   \   00009E   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   0000A1   F5..         MOV       ?V6,A
   \   0000A3   A3           INC       DPTR
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   F5..         MOV       ?V7,A
   \   0000A7                ; Setup parameters for call to function touchLink_SetNIB
   \   0000A7   E5..         MOV       A,?V6
   \   0000A9   F5..         MOV       ?V1,A
   \   0000AB   78..         MOV       R0,#?V1
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B0   78..         MOV       R0,#?V6
   \   0000B2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B5   90....       MOV       DPTR,#_NIB + 22
   \   0000B8   E0           MOVX      A,@DPTR
   \   0000B9   F5..         MOV       ?V1,A
   \   0000BB   78..         MOV       R0,#?V1
   \   0000BD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C0   AC..         MOV       R4,?V4
   \   0000C2   AD..         MOV       R5,?V5
   \   0000C4   EE           MOV       A,R6
   \   0000C5   2420         ADD       A,#0x20
   \   0000C7   F582         MOV       DPL,A
   \   0000C9   E4           CLR       A
   \   0000CA   3F           ADDC      A,R7
   \   0000CB   F583         MOV       DPH,A
   \   0000CD   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000D0   12....       LCALL     ?DEALLOC_XSTACK8
   1506              
   1507              touchLink_SetChannel( _NIB.nwkLogicalChannel );
   \   0000D3                ; Setup parameters for call to function touchLink_SetChannel
   \   0000D3   90....       MOV       DPTR,#_NIB + 22
   \   0000D6   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   1508              touchLink_SetMacNwkParams( _NIB.nwkDevAddress, _NIB.nwkPanId, _NIB.nwkLogicalChannel );
   \                     ??CrossCallReturnLabel_183:
   \   0000D9                ; Setup parameters for call to function touchLink_SetMacNwkParams
   \   0000D9   12....       LCALL     ?Subroutine9 & 0xFFFF
   1509            }
   \                     ??CrossCallReturnLabel_1:
   \   0000DC   8008         SJMP      ??initiatorNwkJoinReqCB_3
   1510            else
   1511            {
   1512              rsp.status = TOUCHLINK_NETWORK_JOIN_RSP_STATUS_FAILURE;
   \                     ??initiatorNwkJoinReqCB_2:
   \   0000DE   7404         MOV       A,#0x4
   \   0000E0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E3   7401         MOV       A,#0x1
   \   0000E5   F0           MOVX      @DPTR,A
   1513            }
   1514          
   1515            dstAddr = *srcAddr;
   \                     ??initiatorNwkJoinReqCB_3:
   \   0000E6   85..82       MOV       DPL,?V2
   \   0000E9   85..83       MOV       DPH,?V3
   \   0000EC   7405         MOV       A,#0x5
   \   0000EE   12....       LCALL     ?XSTACK_DISP102_8
   \   0000F1   740C         MOV       A,#0xc
   \   0000F3   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1516            dstAddr.panId = 0xFFFF;
   \   0000F6   740F         MOV       A,#0xf
   \   0000F8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FB   74FF         MOV       A,#-0x1
   \   0000FD   F0           MOVX      @DPTR,A
   \   0000FE   A3           INC       DPTR
   \   0000FF   F0           MOVX      @DPTR,A
   1517          
   1518            // Send a response back
   1519          #if ( ZSTACK_ROUTER_BUILD )
   1520            bdbTL_Send_NwkJoinRtrRsp( TOUCHLINK_INTERNAL_ENDPOINT, &dstAddr, &rsp, seqNum );
   \   000100                ; Setup parameters for call to function bdbTL_Send_NwkJoinRsp
   \   000100   E5..         MOV       A,?V0
   \   000102   F5..         MOV       ?V1,A
   \   000104   78..         MOV       R0,#?V1
   \   000106   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000109   75..13       MOV       ?V1,#0x13
   \   00010C   78..         MOV       R0,#?V1
   \   00010E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000111   7402         MOV       A,#0x2
   \   000113   12....       LCALL     ?XSTACK_DISP102_8
   \   000116   7407         MOV       A,#0x7
   \   000118   12....       LCALL     ?XSTACK_DISP101_8
   \   00011B   790D         MOV       R1,#0xd
   \   00011D   12....       LCALL     `??bdbTL_Send_NwkJoinRsp::?relay`; Banked call to: bdbTL_Send_NwkJoinRsp
   \   000120   7402         MOV       A,#0x2
   \   000122   12....       LCALL     ?DEALLOC_XSTACK8
   1521          #else
   1522            bdbTL_Send_NwkJoinEDRsp( TOUCHLINK_INTERNAL_ENDPOINT, &dstAddr, &rsp, seqNum );
   1523          #endif
   1524          
   1525            return ( ZSuccess );
   \   000125   7900         MOV       R1,#0x0
   \                     ??initiatorNwkJoinReqCB_1:
   \   000127   7411         MOV       A,#0x11
   \   000129                REQUIRE ?Subroutine1
   \   000129                ; // Fall through to label ?Subroutine1
   1526          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006   E0           MOVX      A,@DPTR
   \   000007   22           RET
   1527          
   1528          /*********************************************************************
   1529           * @fn      initiatorNwkUpdateReqCB
   1530           *
   1531           * @brief   This callback is called to process a Network Update Request
   1532           *          command.
   1533           *
   1534           * @param   srcAddr - sender's address
   1535           * @param   pReq - parsed command
   1536           *
   1537           * @return  ZStatus_t
   1538           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1539          static ZStatus_t initiatorNwkUpdateReqCB( afAddrType_t *srcAddr, bdbTLNwkUpdateReq_t *pReq )
   \                     initiatorNwkUpdateReqCB:
   1540          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FE           MOV       R6,A
   \   000007   ED           MOV       A,R5
   \   000008   FF           MOV       R7,A
   1541            if ( touchLink_IsValidTransID( pReq->transID ) == FALSE )
   \   000009                ; Setup parameters for call to function touchLink_IsValidTransID
   \   000009   8C82         MOV       DPL,R4
   \   00000B   F583         MOV       DPH,A
   \   00000D   12....       LCALL     ?XLOAD_R2345
   \   000010   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000013   7004         JNZ       ??initiatorNwkUpdateReqCB_0
   1542            {
   1543              return ( ZFailure );
   \   000015   7901         MOV       R1,#0x1
   \   000017   8057         SJMP      ??initiatorNwkUpdateReqCB_1
   1544            }
   1545            // Discard the request if the Extended PAN ID and PAN ID are not
   1546            // identical with our corresponding stored values
   1547            if ( TOUCHLINK_SAME_NWK( pReq->PANID, pReq->extendedPANID ) )
   \                     ??initiatorNwkUpdateReqCB_0:
   \   000019   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00001C   240E         ADD       A,#0xe
   \   00001E   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000021   68           XRL       A,R0
   \   000022   7003         JNZ       ??initiatorNwkUpdateReqCB_2
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   69           XRL       A,R1
   \                     ??initiatorNwkUpdateReqCB_2:
   \   000027   7045         JNZ       ??initiatorNwkUpdateReqCB_3
   \   000029                ; Setup parameters for call to function sAddrExtCmp
   \   000029   EE           MOV       A,R6
   \   00002A   2404         ADD       A,#0x4
   \   00002C   FC           MOV       R4,A
   \   00002D   E4           CLR       A
   \   00002E   3F           ADDC      A,R7
   \   00002F   FD           MOV       R5,A
   \   000030   7A..         MOV       R2,#(_NIB + 53) & 0xff
   \   000032   7B..         MOV       R3,#((_NIB + 53) >> 8) & 0xff
   \   000034   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000037   E9           MOV       A,R1
   \   000038   6034         JZ        ??initiatorNwkUpdateReqCB_3
   1548            {
   1549              uint8 newUpdateId = touchLink_NewNwkUpdateId( pReq->nwkUpdateId, _NIB.nwkUpdateId);
   \   00003A   EE           MOV       A,R6
   \   00003B   240C         ADD       A,#0xc
   \   00003D   F8           MOV       R0,A
   \   00003E   E4           CLR       A
   \   00003F   3F           ADDC      A,R7
   \   000040   88..         MOV       ?V0,R0
   \   000042   F5..         MOV       ?V1,A
   \   000044                ; Setup parameters for call to function touchLink_NewNwkUpdateId
   \   000044   90....       MOV       DPTR,#_NIB + 109
   \   000047   E0           MOVX      A,@DPTR
   \   000048   FA           MOV       R2,A
   \   000049   8882         MOV       DPL,R0
   \   00004B   85..83       MOV       DPH,?V1
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   F9           MOV       R1,A
   \   000050   12....       LCALL     `??touchLink_NewNwkUpdateId::?relay`; Banked call to: touchLink_NewNwkUpdateId
   \   000053   E9           MOV       A,R1
   \   000054   F8           MOV       R0,A
   1550              if ( _NIB.nwkUpdateId != newUpdateId )
   \   000055   90....       MOV       DPTR,#_NIB + 109
   \   000058   E0           MOVX      A,@DPTR
   \   000059   68           XRL       A,R0
   \   00005A   6012         JZ        ??initiatorNwkUpdateReqCB_3
   1551              {
   1552                // Update the network update id and logical channel
   1553                touchLink_ProcessNwkUpdate( pReq->nwkUpdateId, pReq->logicalChannel );
   \   00005C                ; Setup parameters for call to function touchLink_ProcessNwkUpdate
   \   00005C   EE           MOV       A,R6
   \   00005D   240D         ADD       A,#0xd
   \   00005F   12....       LCALL     ?Subroutine37 & 0xFFFF
   1554              }
   1555            }
   \                     ??CrossCallReturnLabel_54:
   \   000062   FA           MOV       R2,A
   \   000063   85..82       MOV       DPL,?V0
   \   000066   85..83       MOV       DPH,?V1
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   F9           MOV       R1,A
   \   00006B   12....       LCALL     `??touchLink_ProcessNwkUpdate::?relay`; Banked call to: touchLink_ProcessNwkUpdate
   1556          
   1557            return ( ZSuccess );
   \                     ??initiatorNwkUpdateReqCB_3:
   \   00006E   7900         MOV       R1,#0x0
   \                     ??initiatorNwkUpdateReqCB_1:
   \   000070   02....       LJMP      ?Subroutine5 & 0xFFFF
   1558          }
   1559          
   1560          /*********************************************************************
   1561           * @fn      initiatorScanRspCB
   1562           *
   1563           * @brief   This callback is called to process a Scan Response command.
   1564           *
   1565           * @param   srcAddr - sender's address
   1566           * @param   pRsp - parsed command
   1567           *
   1568           * @return  ZStatus_t
   1569           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1570          static ZStatus_t initiatorScanRspCB( afAddrType_t *srcAddr, bdbTLScanRsp_t *pRsp )
   \                     initiatorScanRspCB:
   1571          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   1572            bdbFindingBindingRespondent_t *pCurr;
   1573            
   1574            if ( osal_get_timeoutEx( touchLinkInitiator_TaskID, TOUCHLINK_TL_SCAN_BASE_EVT )
   1575                 && ( touchLink_IsValidTransID( pRsp->transID ) )
   1576                 && ( pRsp->keyBitmask & touchLink_GetNwkKeyBitmask() ) )
   \   000012                ; Setup parameters for call to function osal_get_timeoutEx
   \   000012   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000015   7003         JNZ       $+5
   \   000017   02....       LJMP      ??initiatorScanRspCB_0 & 0xFFFF
   \   00001A                ; Setup parameters for call to function touchLink_IsValidTransID
   \   00001A   8E82         MOV       DPL,R6
   \   00001C   8F83         MOV       DPH,R7
   \   00001E   12....       LCALL     ?XLOAD_R2345
   \   000021   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000024   7003         JNZ       $+5
   \   000026   02....       LJMP      ??initiatorScanRspCB_0 & 0xFFFF
   \   000029                ; Setup parameters for call to function touchLink_GetNwkKeyBitmask
   \   000029   12....       LCALL     `??touchLink_GetNwkKeyBitmask::?relay`; Banked call to: touchLink_GetNwkKeyBitmask
   \   00002C   8A..         MOV       ?V2,R2
   \   00002E   8B..         MOV       ?V3,R3
   \   000030   A8..         MOV       R0,?V2
   \   000032   A9..         MOV       R1,?V3
   \   000034   8E82         MOV       DPL,R6
   \   000036   8F83         MOV       DPH,R7
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   58           ANL       A,R0
   \   000043   F8           MOV       R0,A
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \   000046   59           ANL       A,R1
   \   000047   F9           MOV       R1,A
   \   000048   E8           MOV       A,R0
   \   000049   49           ORL       A,R1
   \   00004A   7003         JNZ       $+5
   \   00004C   02....       LJMP      ??initiatorScanRspCB_0 & 0xFFFF
   1577            {
   1578          
   1579              uint8 selectThisTarget = FALSE;
   1580              int8 rssi = touchLink_GetMsgRssi();
   \   00004F                ; Setup parameters for call to function touchLink_GetMsgRssi
   \   00004F   12....       LCALL     `??touchLink_GetMsgRssi::?relay`; Banked call to: touchLink_GetMsgRssi
   \   000052   E9           MOV       A,R1
   \   000053   F5..         MOV       ?V2,A
   1581              if ( pfnSelectDiscDevCB != NULL )
   \   000055   90....       MOV       DPTR,#pfnSelectDiscDevCB
   \   000058   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   00005B   6012         JZ        ??initiatorScanRspCB_1
   1582              {
   1583                selectThisTarget = pfnSelectDiscDevCB( pRsp, rssi );
   1584              }
   1585              // Default selection - according to RSSI
   1586              else if ( rssi > TOUCHLINK_WORST_RSSI )
   1587              {
   1588                if ( ( rssi + pRsp->rssiCorrection ) > selectedTarget.lastRssi )
   1589                {
   1590                  // Better RSSI, select this target
   1591                  selectThisTarget = TRUE;
   1592                }
   1593              }
   1594          
   1595              if ( selectThisTarget )
   \   00005D                ; Setup parameters for indirect call
   \   00005D   A9..         MOV       R1,?V2
   \   00005F   EE           MOV       A,R6
   \   000060   FA           MOV       R2,A
   \   000061   EF           MOV       A,R7
   \   000062   FB           MOV       R3,A
   \   000063   12....       LCALL     ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000066   12....       LCALL     ?CALL_IND
   \   000069   E9           MOV       A,R1
   \   00006A   703C         JNZ       ??initiatorScanRspCB_2
   \   00006C   02....       LJMP      ??CrossCallReturnLabel_5 & 0xFFFF
   \                     ??initiatorScanRspCB_1:
   \   00006F   E5..         MOV       A,?V2
   \   000071   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000074   5003         JNC       $+5
   \   000076   02....       LJMP      ??CrossCallReturnLabel_5 & 0xFFFF
   \   000079   90....       MOV       DPTR,#selectedTarget + 53
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   FA           MOV       R2,A
   \   00007E   33           RLC       A
   \   00007F   95E0         SUBB      A,0xE0 /* A   */
   \   000081   FB           MOV       R3,A
   \   000082   E5..         MOV       A,?V2
   \   000084   F8           MOV       R0,A
   \   000085   33           RLC       A
   \   000086   95E0         SUBB      A,0xE0 /* A   */
   \   000088   F9           MOV       R1,A
   \   000089   8E82         MOV       DPL,R6
   \   00008B   8F83         MOV       DPH,R7
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   E0           MOVX      A,@DPTR
   \   000092   FC           MOV       R4,A
   \   000093   E8           MOV       A,R0
   \   000094   2C           ADD       A,R4
   \   000095   F8           MOV       R0,A
   \   000096   E4           CLR       A
   \   000097   39           ADDC      A,R1
   \   000098   F9           MOV       R1,A
   \   000099   C3           CLR       C
   \   00009A   EA           MOV       A,R2
   \   00009B   98           SUBB      A,R0
   \   00009C   EB           MOV       A,R3
   \   00009D   99           SUBB      A,R1
   \   00009E   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0000A0   65D0         XRL       A,PSW
   \   0000A2   33           RLC       A
   \   0000A3   4003         JC        $+5
   \   0000A5   02....       LJMP      ??CrossCallReturnLabel_5 & 0xFFFF
   1596              {
   1597                selectedTarget.scanRsp = *pRsp;
   \                     ??initiatorScanRspCB_2:
   \   0000A8   8E82         MOV       DPL,R6
   \   0000AA   8F83         MOV       DPH,R7
   \   0000AC   7C..         MOV       R4,#selectedTarget & 0xff
   \   0000AE   7D..         MOV       R5,#(selectedTarget >> 8) & 0xff
   \   0000B0   7426         MOV       A,#0x26
   \   0000B2   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1598                selectedTarget.lastRssi = rssi;
   \   0000B5   E5..         MOV       A,?V2
   \   0000B7   90....       MOV       DPTR,#selectedTarget + 53
   \   0000BA   12....       LCALL     ?Subroutine28 & 0xFFFF
   1599                selectedTarget.srcAddr = *srcAddr;
   \                     ??CrossCallReturnLabel_25:
   \   0000BD   740C         MOV       A,#0xc
   \   0000BF   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1600                selectedTarget.srcAddr.panId = 0xFFFF;
   \   0000C2   90....       MOV       DPTR,#selectedTarget + 48
   \   0000C5   74FF         MOV       A,#-0x1
   \   0000C7   F0           MOVX      @DPTR,A
   \   0000C8   A3           INC       DPTR
   \   0000C9   F0           MOVX      @DPTR,A
   1601                touchLinkResponseID = pRsp->responseID;
   \   0000CA   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0000CD   12....       LCALL     ?XLOAD_R0123
   \   0000D0   90....       MOV       DPTR,#touchLinkResponseID
   \   0000D3   12....       LCALL     ?XSTORE_R0123
   1602                touchLinkTransID = pRsp->transID;
   \   0000D6   8E82         MOV       DPL,R6
   \   0000D8   8F83         MOV       DPH,R7
   \   0000DA   12....       LCALL     ?XLOAD_R0123
   \   0000DD   90....       MOV       DPTR,#touchLinkTransID
   \   0000E0   12....       LCALL     ?XSTORE_R0123
   1603          
   1604                // Remember channel we heard back this scan response on
   1605                ZMacGetReq( ZMacChannel, &(selectedTarget.rxChannel));
   \   0000E3                ; Setup parameters for call to function ZMacGetReq
   \   0000E3   7A..         MOV       R2,#(selectedTarget + 52) & 0xff
   \   0000E5   7B..         MOV       R3,#((selectedTarget + 52) >> 8) & 0xff
   \   0000E7   79E1         MOV       R1,#-0x1f
   \   0000E9   12....       LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
   1606          
   1607                if ( pRsp->numSubDevices > 1 )
   \   0000EC   EE           MOV       A,R6
   \   0000ED   241D         ADD       A,#0x1d
   \   0000EF   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   0000F2   C3           CLR       C
   \   0000F3   9402         SUBB      A,#0x2
   \   0000F5   403B         JC        ??initiatorScanRspCB_3
   1608                {
   1609                  selectedTarget.scanRsp.deviceInfo.endpoint = DEV_INFO_INVALID_EP;
   \   0000F7   90....       MOV       DPTR,#selectedTarget + 31
   \   0000FA   74FE         MOV       A,#-0x2
   \   0000FC   F0           MOVX      @DPTR,A
   1610          
   1611                  bdbTLDeviceInfoReq_t devInfoReq;
   1612                  devInfoReq.transID = pRsp->transID;
   \   0000FD   8E82         MOV       DPL,R6
   \   0000FF   8F83         MOV       DPH,R7
   \   000101   12....       LCALL     ?XLOAD_R0123
   \   000104   85..82       MOV       DPL,?XSP + 0
   \   000107   85..83       MOV       DPH,?XSP + 1
   \   00010A   12....       LCALL     ?XSTORE_R0123
   1613                  devInfoReq.startIndex = 0;
   \   00010D   7404         MOV       A,#0x4
   \   00010F   12....       LCALL     ?XSTACK_DISP0_8
   \   000112   E4           CLR       A
   \   000113   12....       LCALL     ?Subroutine27 & 0xFFFF
   1614          
   1615                  return bdbTL_Send_DeviceInfoReq( TOUCHLINK_INTERNAL_ENDPOINT, srcAddr,
   1616                                              &devInfoReq, initiatorSeqNum++ );
   1617                }
   \                     ??CrossCallReturnLabel_24:
   \   000116   F5..         MOV       ?V2,A
   \   000118   78..         MOV       R0,#?V2
   \   00011A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00011D   7401         MOV       A,#0x1
   \   00011F   12....       LCALL     ?XSTACK_DISP102_8
   \   000122   AA..         MOV       R2,?V0
   \   000124   AB..         MOV       R3,?V1
   \   000126   790D         MOV       R1,#0xd
   \   000128   12....       LCALL     `??bdbTL_Send_DeviceInfoReq::?relay`; Banked call to: bdbTL_Send_DeviceInfoReq
   \   00012B   7401         MOV       A,#0x1
   \   00012D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000130   8040         SJMP      ??initiatorScanRspCB_4
   1618                  
   1619                // add new node to the list
   1620                pCurr = bdb_AddRespondentNode( &pRespondentHead, NULL );
   \                     ??initiatorScanRspCB_3:
   \   000132                ; Setup parameters for call to function bdb_AddRespondentNode
   \   000132   7C00         MOV       R4,#0x0
   \   000134   7D00         MOV       R5,#0x0
   \   000136   7A..         MOV       R2,#pRespondentHead & 0xff
   \   000138   7B..         MOV       R3,#(pRespondentHead >> 8) & 0xff
   \   00013A   12....       LCALL     `??bdb_AddRespondentNode::?relay`; Banked call to: bdb_AddRespondentNode
   \   00013D   8A..         MOV       ?V2,R2
   \   00013F   8B..         MOV       ?V3,R3
   \   000141   A8..         MOV       R0,?V2
   \   000143   A9..         MOV       R1,?V3
   1621                
   1622                if ( pCurr != NULL )
   \   000145   EA           MOV       A,R2
   \   000146   49           ORL       A,R1
   \   000147   6023         JZ        ??CrossCallReturnLabel_5
   1623                {
   1624                  pCurr->data.endPoint = pRsp->deviceInfo.endpoint;
   \   000149   EE           MOV       A,R6
   \   00014A   241F         ADD       A,#0x1f
   \   00014C   12....       LCALL     ?Subroutine37 & 0xFFFF
   1625                  pCurr->data.panId = srcAddr->panId;
   1626                }
   1627              }
   \                     ??CrossCallReturnLabel_56:
   \   00014F   8A82         MOV       DPL,R2
   \   000151   8B83         MOV       DPH,R3
   \   000153   A3           INC       DPTR
   \   000154   A3           INC       DPTR
   \   000155   A3           INC       DPTR
   \   000156   A3           INC       DPTR
   \   000157   A3           INC       DPTR
   \   000158   A3           INC       DPTR
   \   000159   A3           INC       DPTR
   \   00015A   A3           INC       DPTR
   \   00015B   A3           INC       DPTR
   \   00015C   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00015F   A3           INC       DPTR
   \   000160   A3           INC       DPTR
   \   000161   A3           INC       DPTR
   \   000162   A3           INC       DPTR
   \   000163   A3           INC       DPTR
   \   000164   A3           INC       DPTR
   \   000165   A3           INC       DPTR
   \   000166   A3           INC       DPTR
   \   000167   A3           INC       DPTR
   \   000168   A3           INC       DPTR
   \   000169   12....       LCALL     ?Subroutine12 & 0xFFFF
   1628              return ( ZSuccess );
   \                     ??CrossCallReturnLabel_5:
   \   00016C   7900         MOV       R1,#0x0
   \   00016E   8002         SJMP      ??initiatorScanRspCB_4
   1629            }
   1630          
   1631            return ( ZFailure );
   \                     ??initiatorScanRspCB_0:
   \   000170   7901         MOV       R1,#0x1
   \                     ??initiatorScanRspCB_4:
   \   000172   7405         MOV       A,#0x5
   \   000174                REQUIRE ?Subroutine3
   \   000174                ; // Fall through to label ?Subroutine3
   1632          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#initiatorSeqNum
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F8           MOV       R0,A
   \   000006   7401         MOV       A,#0x1
   \   000008   28           ADD       A,R0
   \   000009   F0           MOVX      @DPTR,A
   \   00000A                ; Setup parameters for call to function bdbTL_Send_NwkUpdateReq
   \   00000A                ; Setup parameters for call to function bdbTL_Send_DeviceInfoReq
   \   00000A   E8           MOV       A,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000003   8882         MOV       DPL,R0
   \   000005   8983         MOV       DPH,R1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   EA           MOV       A,R2
   \   000012   F0           MOVX      @DPTR,A
   \   000013   A3           INC       DPTR
   \   000014   EB           MOV       A,R3
   \   000015   F0           MOVX      @DPTR,A
   \   000016   22           RET
   1633          
   1634          /*********************************************************************
   1635           * @fn      initiatorDeviceInfoRspCB
   1636           *
   1637           * @brief   This callback is called to process a Device Information
   1638           *          Response command.
   1639           *          If sub-device is selected, selectedTarget data is updated.
   1640           *
   1641           * @param   srcAddr - sender's address
   1642           * @param   pRsp - parsed command
   1643           *
   1644           * @return  ZStatus_t
   1645           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1646          static ZStatus_t initiatorDeviceInfoRspCB( afAddrType_t *srcAddr, bdbTLDeviceInfoRsp_t *pRsp )
   \                     initiatorDeviceInfoRspCB:
   1647          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 38
   \   000005   74DA         MOV       A,#-0x26
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V8,R2
   \   00000C   8B..         MOV       ?V9,R3
   \   00000E   8C..         MOV       ?V2,R4
   \   000010   8D..         MOV       ?V3,R5
   1648            bdbFindingBindingRespondent_t *pCurr;
   1649            
   1650            if ( touchLink_IsValidTransID( pRsp->transID )
   1651                 && ( srcAddr->addr.shortAddr == selectedTarget.srcAddr.addr.shortAddr ) )
   \   000012                ; Setup parameters for call to function touchLink_IsValidTransID
   \   000012   8C82         MOV       DPL,R4
   \   000014   8D83         MOV       DPH,R5
   \   000016   12....       LCALL     ?XLOAD_R2345
   \   000019   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00001C   7003         JNZ       $+5
   \   00001E   02....       LJMP      ??initiatorDeviceInfoRspCB_0 & 0xFFFF
   \   000021   85..82       MOV       DPL,?V8
   \   000024   85..83       MOV       DPH,?V9
   \   000027   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   00002A   90....       MOV       DPTR,#selectedTarget + 38
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   68           XRL       A,R0
   \   00002F   7003         JNZ       ??initiatorDeviceInfoRspCB_1
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   69           XRL       A,R1
   \                     ??initiatorDeviceInfoRspCB_1:
   \   000034   6003         JZ        $+5
   \   000036   02....       LJMP      ??initiatorDeviceInfoRspCB_0 & 0xFFFF
   1652            {
   1653              uint8 i;
   1654              uint8 selectedIdx = pRsp->cnt;
   \   000039   E5..         MOV       A,?V2
   \   00003B   2406         ADD       A,#0x6
   \   00003D   F5..         MOV       ?V6,A
   \   00003F   E4           CLR       A
   \   000040   35..         ADDC      A,?V3
   \   000042   F5..         MOV       ?V7,A
   \   000044   85..82       MOV       DPL,?V6
   \   000047   F583         MOV       DPH,A
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   F5..         MOV       ?V1,A
   1655              bdbTLScanRsp_t tmpInfo = selectedTarget.scanRsp;
   \   00004C   90....       MOV       DPTR,#selectedTarget
   \   00004F   AC..         MOV       R4,?XSP + 0
   \   000051   AD..         MOV       R5,?XSP + 1
   \   000053   7426         MOV       A,#0x26
   \   000055   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1656          
   1657              for ( i = 0; i < pRsp->cnt; ++i )
   \   000058   75..00       MOV       ?V0,#0x0
   \   00005B   8036         SJMP      ??initiatorDeviceInfoRspCB_2
   1658              {
   1659                if ( pfnSelectDiscDevCB != NULL )
   1660                {
   1661                  tmpInfo.deviceInfo = pRsp->devInfoRec[i].deviceInfo;
   \                     ??initiatorDeviceInfoRspCB_3:
   \   00005D   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000060   C082         PUSH      DPL
   \   000062   C083         PUSH      DPH
   \   000064   741F         MOV       A,#0x1f
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   AC82         MOV       R4,DPL
   \   00006B   AD83         MOV       R5,DPH
   \   00006D   D083         POP       DPH
   \   00006F   D082         POP       DPL
   \   000071   7407         MOV       A,#0x7
   \   000073   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1662                  if ( pfnSelectDiscDevCB( &tmpInfo, selectedTarget.lastRssi ) )
   \   000076                ; Setup parameters for indirect call
   \   000076   90....       MOV       DPTR,#selectedTarget + 53
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   F9           MOV       R1,A
   \   00007B   AA..         MOV       R2,?XSP + 0
   \   00007D   AB..         MOV       R3,?XSP + 1
   \   00007F   90....       MOV       DPTR,#pfnSelectDiscDevCB
   \   000082   E0           MOVX      A,@DPTR
   \   000083   F8           MOV       R0,A
   \   000084   A3           INC       DPTR
   \   000085   12....       LCALL     ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000088   12....       LCALL     ?CALL_IND
   \   00008B   E9           MOV       A,R1
   \   00008C   6003         JZ        ??initiatorDeviceInfoRspCB_4
   1663                  {
   1664                    selectedIdx = i;
   \   00008E   85....       MOV       ?V1,?V0
   1665                    // no break here to allow cycling through all sub-devices
   1666                  }
   1667                }
   \                     ??initiatorDeviceInfoRspCB_4:
   \   000091   05..         INC       ?V0
   \                     ??initiatorDeviceInfoRspCB_2:
   \   000093   85..82       MOV       DPL,?V6
   \   000096   85..83       MOV       DPH,?V7
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   FC           MOV       R4,A
   \   00009B   E5..         MOV       A,?V0
   \   00009D   C3           CLR       C
   \   00009E   9C           SUBB      A,R4
   \   00009F   5039         JNC       ??initiatorDeviceInfoRspCB_5
   \   0000A1   E5..         MOV       A,?V0
   \   0000A3   F5..         MOV       ?V4,A
   \   0000A5   75..00       MOV       ?V5,#0x0
   \   0000A8   7404         MOV       A,#0x4
   \   0000AA   78..         MOV       R0,#?V4
   \   0000AC   12....       LCALL     ?S_SHL
   \   0000AF   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0000B2   90....       MOV       DPTR,#pfnSelectDiscDevCB
   \   0000B5   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000B8   EA           MOV       A,R2
   \   0000B9   4B           ORL       A,R3
   \   0000BA   70A1         JNZ       ??initiatorDeviceInfoRspCB_3
   \   0000BC   E8           MOV       A,R0
   \   0000BD   2410         ADD       A,#0x10
   \   0000BF   F582         MOV       DPL,A
   \   0000C1   E4           CLR       A
   \   0000C2   39           ADDC      A,R1
   \   0000C3   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0000C6   7003         JNZ       ??initiatorDeviceInfoRspCB_6
   \   0000C8   74C0         MOV       A,#-0x40
   \   0000CA   69           XRL       A,R1
   \                     ??initiatorDeviceInfoRspCB_6:
   \   0000CB   600A         JZ        ??initiatorDeviceInfoRspCB_7
   \   0000CD   7404         MOV       A,#0x4
   \   0000CF   68           XRL       A,R0
   \   0000D0   7003         JNZ       ??initiatorDeviceInfoRspCB_8
   \   0000D2   7401         MOV       A,#0x1
   \   0000D4   69           XRL       A,R1
   \                     ??initiatorDeviceInfoRspCB_8:
   \   0000D5   70BA         JNZ       ??initiatorDeviceInfoRspCB_4
   1668                else
   1669                {
   1670                  if ( ( pRsp->devInfoRec[i].deviceInfo.profileID == TOUCHLINK_PROFILE_ID ) ||
   1671                       ( pRsp->devInfoRec[i].deviceInfo.profileID == Z3_PROFILE_ID ) )
   1672                  {
   1673                    selectedIdx = i;
   \                     ??initiatorDeviceInfoRspCB_7:
   \   0000D7   85....       MOV       ?V1,?V0
   1674                    break; // first match
   1675                  }
   1676                }
   1677              }
   1678              if ( selectedIdx < pRsp->cnt )
   \                     ??initiatorDeviceInfoRspCB_5:
   \   0000DA   E5..         MOV       A,?V1
   \   0000DC   C3           CLR       C
   \   0000DD   9C           SUBB      A,R4
   \   0000DE   4003         JC        $+5
   \   0000E0   02....       LJMP      ??initiatorDeviceInfoRspCB_9 & 0xFFFF
   1679              {
   1680                // NOTE - the original scan response device info is overwritten with the
   1681                // selected sub-device info, to complete the data required for the application.
   1682                selectedTarget.scanRsp.deviceInfo = pRsp->devInfoRec[selectedIdx].deviceInfo;
   \   0000E3   E5..         MOV       A,?V1
   \   0000E5   F5..         MOV       ?V4,A
   \   0000E7   75..00       MOV       ?V5,#0x0
   \   0000EA   7404         MOV       A,#0x4
   \   0000EC   78..         MOV       R0,#?V4
   \   0000EE   12....       LCALL     ?S_SHL
   \   0000F1   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000F4   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0000F7   7C..         MOV       R4,#(selectedTarget + 31) & 0xff
   \   0000F9   7D..         MOV       R5,#((selectedTarget + 31) >> 8) & 0xff
   \   0000FB   7407         MOV       A,#0x7
   \   0000FD   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1683                
   1684                for ( i = 0; i < pRsp->cnt; ++i )
   \   000100   75..00       MOV       ?V0,#0x0
   \                     ??initiatorDeviceInfoRspCB_10:
   \   000103   85..82       MOV       DPL,?V6
   \   000106   85..83       MOV       DPH,?V7
   \   000109   E0           MOVX      A,@DPTR
   \   00010A   F8           MOV       R0,A
   \   00010B   E5..         MOV       A,?V0
   \   00010D   C3           CLR       C
   \   00010E   98           SUBB      A,R0
   \   00010F   4003         JC        $+5
   \   000111   02....       LJMP      ??initiatorDeviceInfoRspCB_11 & 0xFFFF
   1685                {
   1686                  if ( ( pRsp->devInfoRec[i].deviceInfo.profileID == TOUCHLINK_PROFILE_ID ) ||
   1687                       ( pRsp->devInfoRec[i].deviceInfo.profileID == Z3_PROFILE_ID ) )
   \   000114   E5..         MOV       A,?V0
   \   000116   F5..         MOV       ?V4,A
   \   000118   75..00       MOV       ?V5,#0x0
   \   00011B   7404         MOV       A,#0x4
   \   00011D   78..         MOV       R0,#?V4
   \   00011F   12....       LCALL     ?S_SHL
   \   000122   E5..         MOV       A,?V2
   \   000124   25..         ADD       A,?V4
   \   000126   F5..         MOV       ?V4,A
   \   000128   E5..         MOV       A,?V3
   \   00012A   35..         ADDC      A,?V5
   \   00012C   F5..         MOV       ?V5,A
   \   00012E   E5..         MOV       A,?V4
   \   000130   2410         ADD       A,#0x10
   \   000132   F582         MOV       DPL,A
   \   000134   E4           CLR       A
   \   000135   35..         ADDC      A,?V5
   \   000137   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00013A   7003         JNZ       ??initiatorDeviceInfoRspCB_12
   \   00013C   74C0         MOV       A,#-0x40
   \   00013E   69           XRL       A,R1
   \                     ??initiatorDeviceInfoRspCB_12:
   \   00013F   600A         JZ        ??initiatorDeviceInfoRspCB_13
   \   000141   7404         MOV       A,#0x4
   \   000143   68           XRL       A,R0
   \   000144   7003         JNZ       ??initiatorDeviceInfoRspCB_14
   \   000146   7401         MOV       A,#0x1
   \   000148   69           XRL       A,R1
   \                     ??initiatorDeviceInfoRspCB_14:
   \   000149   705D         JNZ       ??initiatorDeviceInfoRspCB_15
   1688                  {
   1689                    // add new node to the list
   1690                    pCurr = bdb_AddRespondentNode( &pRespondentHead, NULL );
   \                     ??initiatorDeviceInfoRspCB_13:
   \   00014B                ; Setup parameters for call to function bdb_AddRespondentNode
   \   00014B   7C00         MOV       R4,#0x0
   \   00014D   7D00         MOV       R5,#0x0
   \   00014F   7A..         MOV       R2,#pRespondentHead & 0xff
   \   000151   7B..         MOV       R3,#(pRespondentHead >> 8) & 0xff
   \   000153   12....       LCALL     `??bdb_AddRespondentNode::?relay`; Banked call to: bdb_AddRespondentNode
   \   000156   8A..         MOV       ?V10,R2
   \   000158   8B..         MOV       ?V11,R3
   \   00015A   AE..         MOV       R6,?V10
   \   00015C   AF..         MOV       R7,?V11
   1691                    
   1692                    if ( pCurr != NULL )
   \   00015E   EA           MOV       A,R2
   \   00015F   4F           ORL       A,R7
   \   000160   6046         JZ        ??initiatorDeviceInfoRspCB_15
   1693                    {
   1694                      osal_memset(pCurr, 0x00, sizeof(bdbFindingBindingRespondent_t));
   \   000162                ; Setup parameters for call to function osal_memset
   \   000162   7C11         MOV       R4,#0x11
   \   000164   7D00         MOV       R5,#0x0
   \   000166   7900         MOV       R1,#0x0
   \   000168   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1695                      pCurr->data.endPoint = pRsp->devInfoRec[i].deviceInfo.endpoint;
   \   00016B   E5..         MOV       A,?V4
   \   00016D   240F         ADD       A,#0xf
   \   00016F   F582         MOV       DPL,A
   \   000171   E4           CLR       A
   \   000172   35..         ADDC      A,?V5
   \   000174   F583         MOV       DPH,A
   \   000176   E0           MOVX      A,@DPTR
   \   000177   8E82         MOV       DPL,R6
   \   000179   8F83         MOV       DPH,R7
   \   00017B   A3           INC       DPTR
   \   00017C   A3           INC       DPTR
   \   00017D   A3           INC       DPTR
   \   00017E   A3           INC       DPTR
   \   00017F   A3           INC       DPTR
   \   000180   A3           INC       DPTR
   \   000181   A3           INC       DPTR
   \   000182   A3           INC       DPTR
   \   000183   A3           INC       DPTR
   \   000184   F0           MOVX      @DPTR,A
   1696                      pCurr->data.panId = srcAddr->panId;
   \   000185   85..82       MOV       DPL,?V8
   \   000188   85..83       MOV       DPH,?V9
   \   00018B   A3           INC       DPTR
   \   00018C   A3           INC       DPTR
   \   00018D   A3           INC       DPTR
   \   00018E   A3           INC       DPTR
   \   00018F   A3           INC       DPTR
   \   000190   A3           INC       DPTR
   \   000191   A3           INC       DPTR
   \   000192   A3           INC       DPTR
   \   000193   A3           INC       DPTR
   \   000194   A3           INC       DPTR
   \   000195   12....       LCALL     ?Subroutine11 & 0xFFFF
   1697                      osal_cpyExtAddr(selectedTargetIEEEAddr, pRsp->devInfoRec[i].ieeeAddr);
   \                     ??CrossCallReturnLabel_4:
   \   000198                ; Setup parameters for call to function sAddrExtCpy
   \   000198   E5..         MOV       A,?V4
   \   00019A   2407         ADD       A,#0x7
   \   00019C   FC           MOV       R4,A
   \   00019D   E4           CLR       A
   \   00019E   35..         ADDC      A,?V5
   \   0001A0   FD           MOV       R5,A
   \   0001A1   7A..         MOV       R2,#selectedTargetIEEEAddr & 0xff
   \   0001A3   7B..         MOV       R3,#(selectedTargetIEEEAddr >> 8) & 0xff
   \   0001A5   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1698                    }
   1699                  }
   1700                }
   \                     ??initiatorDeviceInfoRspCB_15:
   \   0001A8   05..         INC       ?V0
   \   0001AA   02....       LJMP      ??initiatorDeviceInfoRspCB_10 & 0xFFFF
   1701              }
   1702              else
   1703              {
   1704                // no sub-device of the currently selected device was selected.
   1705                // clear selection
   1706                initiatorClearSelectedTarget();
   \                     ??initiatorDeviceInfoRspCB_9:
   \   0001AD                ; Setup parameters for call to function initiatorClearSelectedTarget
   \   0001AD   12....       LCALL     `??initiatorClearSelectedTarget::?relay`; Banked call to: initiatorClearSelectedTarget
   1707                bdb_zclRespondentListClean( &pRespondentHead );
   \   0001B0                ; Setup parameters for call to function bdb_zclRespondentListClean
   \   0001B0   7A..         MOV       R2,#pRespondentHead & 0xff
   \   0001B2   7B..         MOV       R3,#(pRespondentHead >> 8) & 0xff
   \   0001B4   12....       LCALL     `??bdb_zclRespondentListClean::?relay`; Banked call to: bdb_zclRespondentListClean
   1708              }
   1709              return ( ZSuccess );
   \                     ??initiatorDeviceInfoRspCB_11:
   \   0001B7   7900         MOV       R1,#0x0
   \   0001B9   8002         SJMP      ??initiatorDeviceInfoRspCB_16
   1710            }
   1711            return ( ZFailure );
   \                     ??initiatorDeviceInfoRspCB_0:
   \   0001BB   7901         MOV       R1,#0x1
   \                     ??initiatorDeviceInfoRspCB_16:
   \   0001BD   7426         MOV       A,#0x26
   \   0001BF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001C2   7F0C         MOV       R7,#0xc
   \   0001C4   02....       LJMP      ?BANKED_LEAVE_XDATA
   1712          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   E5..         MOV       A,?V2
   \   000002   25..         ADD       A,?V4
   \   000004   F8           MOV       R0,A
   \   000005   E5..         MOV       A,?V3
   \   000007   35..         ADDC      A,?V5
   \   000009   F9           MOV       R1,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   F583         MOV       DPH,A
   \   000002   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000005   745E         MOV       A,#0x5e
   \   000007   68           XRL       A,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E8           MOV       A,R0
   \   000001   240F         ADD       A,#0xf
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   39           ADDC      A,R1
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET
   1713          
   1714          /*********************************************************************
   1715           * @fn      initiatorNwkStartRspCB
   1716           *
   1717           * @brief   This callback is called to process a Network Start Response command.
   1718           *
   1719           * @param   srcAddr - sender's address
   1720           * @param   pRsp - parsed command
   1721           *
   1722           * @return  ZStatus_t
   1723           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1724          static ZStatus_t initiatorNwkStartRspCB( afAddrType_t *srcAddr, bdbTLNwkStartRsp_t *pRsp )
   \                     initiatorNwkStartRspCB:
   1725          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FE           MOV       R6,A
   \   000007   ED           MOV       A,R5
   \   000008   FF           MOV       R7,A
   1726            if ( touchLink_IsValidTransID( pRsp->transID ) == FALSE )
   \   000009                ; Setup parameters for call to function touchLink_IsValidTransID
   \   000009   8C82         MOV       DPL,R4
   \   00000B   F583         MOV       DPH,A
   \   00000D   12....       LCALL     ?XLOAD_R2345
   \   000010   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000013   7004         JNZ       ??initiatorNwkStartRspCB_0
   1727            {
   1728              return ( ZFailure );
   \   000015   7901         MOV       R1,#0x1
   \   000017   801C         SJMP      ??initiatorNwkStartRspCB_1
   1729            }
   1730            // Make sure we didn't timeout waiting for this response
   1731            if ( osal_get_timeoutEx( touchLinkInitiator_TaskID, TOUCHLINK_W4_NWK_START_RSP_EVT ) )
   \                     ??initiatorNwkStartRspCB_0:
   \   000019                ; Setup parameters for call to function osal_get_timeoutEx
   \   000019   7A80         MOV       R2,#-0x80
   \   00001B   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   00001E   6013         JZ        ??CrossCallReturnLabel_175
   1732            {
   1733              // Save the Network Start Response for later
   1734              rxRsp.nwkStartRsp = *pRsp;
   \   000020   8E82         MOV       DPL,R6
   \   000022   8F83         MOV       DPH,R7
   \   000024   7C..         MOV       R4,#rxRsp & 0xff
   \   000026   7D..         MOV       R5,#(rxRsp >> 8) & 0xff
   \   000028   7411         MOV       A,#0x11
   \   00002A   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1735          
   1736              // No need to wait longer
   1737              osal_set_event( touchLinkInitiator_TaskID, TOUCHLINK_W4_NWK_START_RSP_EVT );  
   \   00002D                ; Setup parameters for call to function osal_set_event
   \   00002D   7A80         MOV       R2,#-0x80
   \   00002F   FB           MOV       R3,A
   \   000030   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   1738            }
   1739          
   1740            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_175:
   \   000033   7900         MOV       R1,#0x0
   \                     ??initiatorNwkStartRspCB_1:
   \   000035   02....       LJMP      ??Subroutine54_0 & 0xFFFF
   1741          }
   1742          
   1743          /*********************************************************************
   1744           * @fn      initiatorNwkJoinRtrRspCB
   1745           *
   1746           * @brief   This callback is called to process a Network Join Router
   1747           *          Response command.
   1748           *
   1749           * @param   srcAddr - sender's address
   1750           * @param   pRsp - parsed command
   1751           *
   1752           * @return  ZStatus_t
   1753           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1754          static ZStatus_t initiatorNwkJoinRtrRspCB( afAddrType_t *srcAddr, bdbTLNwkJoinRsp_t *pRsp )
   \                     initiatorNwkJoinRtrRspCB:
   1755          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   1756            if ( ( touchLink_IsValidTransID( pRsp->transID ) == FALSE ) || 
   1757               ( ( srcAddr->addrMode != afAddr64Bit ) || ( !osal_memcmp( selectedTarget.srcAddr.addr.extAddr, srcAddr->addr.extAddr, Z_EXTADDR_LEN ) ) ) )
   \   00000D                ; Setup parameters for call to function touchLink_IsValidTransID
   \   00000D   8C82         MOV       DPL,R4
   \   00000F   F583         MOV       DPH,A
   \   000011   12....       LCALL     ?XLOAD_R2345
   \   000014   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000017   6030         JZ        ??initiatorNwkJoinRtrRspCB_0
   \   000019   85..82       MOV       DPL,?V0
   \   00001C   85..83       MOV       DPH,?V1
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   6403         XRL       A,#0x3
   \   00002A   701D         JNZ       ??initiatorNwkJoinRtrRspCB_0
   \   00002C                ; Setup parameters for call to function osal_memcmp
   \   00002C   75..00       MOV       ?V2,#0x0
   \   00002F   78..         MOV       R0,#?V0
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000034   7C08         MOV       R4,#0x8
   \   000036   7D00         MOV       R5,#0x0
   \   000038   79..         MOV       R1,#(selectedTarget + 38) & 0xff
   \   00003A   7A..         MOV       R2,#((selectedTarget + 38) >> 8) & 0xff
   \   00003C   7B00         MOV       R3,#0x0
   \   00003E   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000041   7403         MOV       A,#0x3
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
   \   000046   E9           MOV       A,R1
   \   000047   7004         JNZ       ??initiatorNwkJoinRtrRspCB_1
   1758            {
   1759              return ( ZFailure );
   \                     ??initiatorNwkJoinRtrRspCB_0:
   \   000049   7901         MOV       R1,#0x1
   \   00004B   801E         SJMP      ??initiatorNwkJoinRtrRspCB_2
   1760            }
   1761            
   1762            // Make sure we didn't timeout waiting for this response
   1763            if ( osal_get_timeoutEx( touchLinkInitiator_TaskID, TOUCHLINK_W4_NWK_JOIN_RSP_EVT ) )
   \                     ??initiatorNwkJoinRtrRspCB_1:
   \   00004D                ; Setup parameters for call to function osal_get_timeoutEx
   \   00004D   7A00         MOV       R2,#0x0
   \   00004F   7B01         MOV       R3,#0x1
   \   000051   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000054   6013         JZ        ??CrossCallReturnLabel_176
   1764            {
   1765              // Save the Network Start Response for later
   1766              rxRsp.nwkJoinRsp = *pRsp;
   \   000056   8E82         MOV       DPL,R6
   \   000058   8F83         MOV       DPH,R7
   \   00005A   7C..         MOV       R4,#rxRsp & 0xff
   \   00005C   7D..         MOV       R5,#(rxRsp >> 8) & 0xff
   \   00005E   7405         MOV       A,#0x5
   \   000060   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1767          
   1768              // No need to wait longer
   1769              osal_set_event( touchLinkInitiator_TaskID, TOUCHLINK_W4_NWK_JOIN_RSP_EVT );
   \   000063                ; Setup parameters for call to function osal_set_event
   \   000063   FA           MOV       R2,A
   \   000064   7B01         MOV       R3,#0x1
   \   000066   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   1770            }
   1771          
   1772            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_176:
   \   000069   7900         MOV       R1,#0x0
   \                     ??initiatorNwkJoinRtrRspCB_2:
   \   00006B   02....       LJMP      ?Subroutine4 & 0xFFFF
   1773          }
   1774          
   1775          /*********************************************************************
   1776           * @fn      initiatorNwkJoinEDRspCB
   1777           *
   1778           * @brief   This callback is called to process a Network Join End Device
   1779           *          Response command.
   1780           *
   1781           * @param   srcAddr - sender's address
   1782           * @param   pRsp - parsed command
   1783           *
   1784           * @return  ZStatus_t
   1785           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1786          static ZStatus_t initiatorNwkJoinEDRspCB( afAddrType_t *srcAddr, bdbTLNwkJoinRsp_t *pRsp )
   \                     initiatorNwkJoinEDRspCB:
   1787          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   1788            if ( ( touchLink_IsValidTransID( pRsp->transID ) == FALSE ) || 
   1789               ( ( srcAddr->addrMode != afAddr64Bit ) || ( !osal_memcmp( selectedTarget.srcAddr.addr.extAddr, srcAddr->addr.extAddr, Z_EXTADDR_LEN ) ) ) )
   \   00000D                ; Setup parameters for call to function touchLink_IsValidTransID
   \   00000D   8C82         MOV       DPL,R4
   \   00000F   F583         MOV       DPH,A
   \   000011   12....       LCALL     ?XLOAD_R2345
   \   000014   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000017   6030         JZ        ??initiatorNwkJoinEDRspCB_0
   \   000019   85..82       MOV       DPL,?V0
   \   00001C   85..83       MOV       DPH,?V1
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   6403         XRL       A,#0x3
   \   00002A   701D         JNZ       ??initiatorNwkJoinEDRspCB_0
   \   00002C                ; Setup parameters for call to function osal_memcmp
   \   00002C   75..00       MOV       ?V2,#0x0
   \   00002F   78..         MOV       R0,#?V0
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000034   7C08         MOV       R4,#0x8
   \   000036   7D00         MOV       R5,#0x0
   \   000038   79..         MOV       R1,#(selectedTarget + 38) & 0xff
   \   00003A   7A..         MOV       R2,#((selectedTarget + 38) >> 8) & 0xff
   \   00003C   7B00         MOV       R3,#0x0
   \   00003E   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000041   7403         MOV       A,#0x3
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
   \   000046   E9           MOV       A,R1
   \   000047   7004         JNZ       ??initiatorNwkJoinEDRspCB_1
   1790            {
   1791              return ( ZFailure );
   \                     ??initiatorNwkJoinEDRspCB_0:
   \   000049   7901         MOV       R1,#0x1
   \   00004B   8026         SJMP      ??initiatorNwkJoinEDRspCB_2
   1792            }
   1793            
   1794            // Make sure we didn't timeout waiting for this response
   1795            if ( osal_get_timeoutEx( touchLinkInitiator_TaskID, TOUCHLINK_W4_NWK_JOIN_RSP_EVT ) )
   \                     ??initiatorNwkJoinEDRspCB_1:
   \   00004D                ; Setup parameters for call to function osal_get_timeoutEx
   \   00004D   7A00         MOV       R2,#0x0
   \   00004F   7B01         MOV       R3,#0x1
   \   000051   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000054   6015         JZ        ??initiatorNwkJoinEDRspCB_3
   1796            {
   1797              // Save the Network Start Response for later
   1798              rxRsp.nwkJoinRsp = *pRsp;
   \   000056   8E82         MOV       DPL,R6
   \   000058   8F83         MOV       DPH,R7
   \   00005A   7C..         MOV       R4,#rxRsp & 0xff
   \   00005C   7D..         MOV       R5,#(rxRsp >> 8) & 0xff
   \   00005E   7405         MOV       A,#0x5
   \   000060   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1799          
   1800              // No need to wait longer
   1801              osal_set_event( touchLinkInitiator_TaskID, TOUCHLINK_W4_NWK_JOIN_RSP_EVT );
   \   000063                ; Setup parameters for call to function osal_set_event
   \   000063   FA           MOV       R2,A
   \   000064   7B01         MOV       R3,#0x1
   \   000066   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   1802          
   1803            }
   \                     ??CrossCallReturnLabel_177:
   \   000069   8006         SJMP      ??initiatorNwkJoinEDRspCB_4
   1804            else
   1805            {
   1806              rxRsp.nwkJoinRsp.status = TOUCHLINK_NETWORK_JOIN_RSP_STATUS_FAILURE;
   \                     ??initiatorNwkJoinEDRspCB_3:
   \   00006B   90....       MOV       DPTR,#rxRsp + 4
   \   00006E   7401         MOV       A,#0x1
   \   000070   F0           MOVX      @DPTR,A
   1807            }
   1808          
   1809            return ( ZSuccess );
   \                     ??initiatorNwkJoinEDRspCB_4:
   \   000071   7900         MOV       R1,#0x0
   \                     ??initiatorNwkJoinEDRspCB_2:
   \   000073   02....       LJMP      ?Subroutine4 & 0xFFFF
   1810          }
   1811          
   1812          /******************************************************************************
   1813           * @fn      initiatorZdoLeaveCnfCB
   1814           *
   1815           * @brief   This callback is called to process a Leave Confirmation message.
   1816           *
   1817           *          Note: this callback function returns a pointer if it has handled
   1818           *                the confirmation message and no further action should be
   1819           *                taken with it. It returns NULL if it has not handled the
   1820           *                confirmation message and normal processing should take place.
   1821           *
   1822           * @param   pParam - received message
   1823           *
   1824           * @return  Pointer if message processed. NULL, otherwise.
   1825           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1826          static void *initiatorZdoLeaveCnfCB( void *pParam )
   \                     initiatorZdoLeaveCnfCB:
   1827          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1828            (void)pParam;
   1829          
   1830            // Did we initiate the leave?
   1831            if ( touchLinkLeaveInitiated == FALSE )
   \   000004   90....       MOV       DPTR,#touchLinkLeaveInitiated
   \   000007   E0           MOVX      A,@DPTR
   \   000008   7006         JNZ       ??initiatorZdoLeaveCnfCB_0
   1832            {
   1833              return ( NULL );
   \   00000A   7A00         MOV       R2,#0x0
   \   00000C   7B00         MOV       R3,#0x0
   \   00000E   800F         SJMP      ??initiatorZdoLeaveCnfCB_1
   1834            }
   1835          
   1836            if ( touchLinkLeaveInitiated == TOUCHLINK_LEAVE_TO_JOIN_NWK )
   \                     ??initiatorZdoLeaveCnfCB_0:
   \   000010   6401         XRL       A,#0x1
   \   000012   7007         JNZ       ??CrossCallReturnLabel_178
   1837            {
   1838              // Notify our task to join the new network
   1839              osal_set_event( touchLinkInitiator_TaskID, TOUCHLINK_JOIN_NWK_ATTEMPT_EVT );
   \   000014                ; Setup parameters for call to function osal_set_event
   \   000014   7A08         MOV       R2,#0x8
   \   000016   7B00         MOV       R3,#0x0
   \   000018   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   1840            }
   1841          
   1842            return ( (void *)&touchLinkLeaveInitiated );
   \                     ??CrossCallReturnLabel_178:
   \   00001B   7A..         MOV       R2,#touchLinkLeaveInitiated & 0xff
   \   00001D   7B..         MOV       R3,#(touchLinkLeaveInitiated >> 8) & 0xff
   \                     ??initiatorZdoLeaveCnfCB_1:
   \   00001F   02....       LJMP      ??Subroutine46_0 & 0xFFFF
   1843          }
   1844          
   1845          /*********************************************************************
   1846           * @fn      initiatorProcessStateChange
   1847           *
   1848           * @brief   Process ZDO device state change
   1849           *
   1850           * @param   state - The device's network state
   1851           *
   1852           * @return  none
   1853           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1854          static void initiatorProcessStateChange( devStates_t state )
   \                     initiatorProcessStateChange:
   1855          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   1856            if ( ( ( devState == DEV_ROUTER ) || ( devState == DEV_END_DEVICE ) ) && ( touchlinkDistNwk == TRUE ) )
   \   000007   90....       MOV       DPTR,#devState
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   6407         XRL       A,#0x7
   \   00000D   6005         JZ        ??initiatorProcessStateChange_0
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   6406         XRL       A,#0x6
   \   000012   7061         JNZ       ??initiatorProcessStateChange_1
   \                     ??initiatorProcessStateChange_0:
   \   000014   90....       MOV       DPTR,#touchlinkDistNwk
   \   000017   E0           MOVX      A,@DPTR
   \   000018   6401         XRL       A,#0x1
   \   00001A   7059         JNZ       ??initiatorProcessStateChange_1
   1857            {
   1858              // Set touchlink flag to false after joining is complete
   1859              touchlinkDistNwk = FALSE;
   \   00001C   E4           CLR       A
   \   00001D   F0           MOVX      @DPTR,A
   1860              
   1861              // Save the latest NIB to update our parent's address
   1862              touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_NIB );
   \   00001E                ; Setup parameters for call to function touchLink_UpdateNV
   \   00001E   7901         MOV       R1,#0x1
   \   000020   12....       LCALL     `??touchLink_UpdateNV::?relay`; Banked call to: touchLink_UpdateNV
   1863             
   1864              if ( !_NIB.CapabilityFlags )
   \   000023   90....       MOV       DPTR,#_NIB + 14
   \   000026   E0           MOVX      A,@DPTR
   \   000027   7008         JNZ       ??initiatorProcessStateChange_2
   1865              {
   1866                _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   000029   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   90....       MOV       DPTR,#_NIB + 14
   \   000030   F0           MOVX      @DPTR,A
   1867              }
   1868          
   1869          #if (ZSTACK_ROUTER_BUILD)
   1870                linkInfo_t *linkInfo;
   1871                
   1872                // check if entry exists
   1873                linkInfo = nwkNeighborGetLinkInfo( selectedTargetNwkAddr, _NIB.nwkPanId );
   1874          
   1875                // if not, look for a vacant entry to add this node...
   1876                if ( linkInfo == NULL )
   \                     ??initiatorProcessStateChange_2:
   \   000031                ; Setup parameters for call to function nwkNeighborGetLinkInfo
   \   000031   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000034   EA           MOV       A,R2
   \   000035   4B           ORL       A,R3
   \   000036   701F         JNZ       ??initiatorProcessStateChange_3
   1877                {
   1878                  nwkNeighborAdd( selectedTargetNwkAddr, _NIB.nwkPanId, DEF_LQI );
   \   000038                ; Setup parameters for call to function nwkNeighborAdd
   \   000038   79AA         MOV       R1,#-0x56
   \   00003A   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00003D   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000040   12....       LCALL     `??nwkNeighborAdd::?relay`; Banked call to: nwkNeighborAdd
   1879                  linkInfo = nwkNeighborGetLinkInfo( selectedTargetNwkAddr, _NIB.nwkPanId );
   \   000043                ; Setup parameters for call to function nwkNeighborGetLinkInfo
   \   000043   12....       LCALL     ?Subroutine15 & 0xFFFF
   1880                  linkInfo->txCost = DEF_LINK_COST;
   \                     ??CrossCallReturnLabel_10:
   \   000046   8A82         MOV       DPL,R2
   \   000048   8B83         MOV       DPH,R3
   \   00004A   A3           INC       DPTR
   \   00004B   7401         MOV       A,#0x1
   \   00004D   F0           MOVX      @DPTR,A
   1881                  linkInfo->rxLqi = MIN_LQI_COST_1; 
   \   00004E   8A82         MOV       DPL,R2
   \   000050   8B83         MOV       DPH,R3
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   740C         MOV       A,#0xc
   \   000056   F0           MOVX      @DPTR,A
   1882                }
   1883                
   1884                bdb_setNodeIsOnANetwork(TRUE);
   \                     ??initiatorProcessStateChange_3:
   \   000057                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000057   7901         MOV       R1,#0x1
   \   000059   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
   1885                osal_start_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_NWK_FORMATION_SUCCESS_EVT, 500);
   \   00005C                ; Setup parameters for call to function osal_start_timerEx
   \   00005C   90....       MOV       DPTR,#__Constant_1f4
   \   00005F   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000062   7A00         MOV       R2,#0x0
   \   000064   7B20         MOV       R3,#0x20
   \   000066   12....       LCALL     ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000069   12....       LCALL     ?DEALLOC_XSTACK8
   1886          #endif
   1887          
   1888              // We found our parent
   1889              osal_stop_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_W4_REJOIN_EVT );
   \   00006C                ; Setup parameters for call to function osal_stop_timerEx
   \   00006C   7A00         MOV       R2,#0x0
   \   00006E   7B04         MOV       R3,#0x4
   \   000070   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   1890            }
   \                     ??CrossCallReturnLabel_111:
   \   000073   8023         SJMP      ??initiatorProcessStateChange_4
   1891            
   1892            else if ( ( state == DEV_NWK_ORPHAN ) || ( state == DEV_NWK_DISC ) )
   \                     ??initiatorProcessStateChange_1:
   \   000075   740A         MOV       A,#0xa
   \   000077   6E           XRL       A,R6
   \   000078   6005         JZ        ??initiatorProcessStateChange_5
   \   00007A   7402         MOV       A,#0x2
   \   00007C   6E           XRL       A,R6
   \   00007D   7019         JNZ       ??initiatorProcessStateChange_4
   1893            {
   1894              // Device has lost information about its parent; give it some time to rejoin
   1895              if ( !osal_get_timeoutEx( touchLinkInitiator_TaskID, TOUCHLINK_W4_REJOIN_EVT ) )
   \                     ??initiatorProcessStateChange_5:
   \   00007F                ; Setup parameters for call to function osal_get_timeoutEx
   \   00007F   7A00         MOV       R2,#0x0
   \   000081   7B04         MOV       R3,#0x4
   \   000083   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000086   7010         JNZ       ??initiatorProcessStateChange_4
   1896              {
   1897                osal_start_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_W4_REJOIN_EVT,
   1898                                    (NUM_DISC_ATTEMPTS + 1) * TOUCHLINK_INITIATOR_REJOIN_TIMEOUT );
   \   000088                ; Setup parameters for call to function osal_start_timerEx
   \   000088   90....       MOV       DPTR,#__Constant_30d4
   \   00008B   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00008E   7A00         MOV       R2,#0x0
   \   000090   7B04         MOV       R3,#0x4
   \   000092   12....       LCALL     ??Subroutine59_0 & 0xFFFF
   1899              }
   1900            }
   \                     ??CrossCallReturnLabel_121:
   \   000095   12....       LCALL     ?DEALLOC_XSTACK8
   1901          }
   \                     ??initiatorProcessStateChange_4:
   \   000098   02....       LJMP      ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000003   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000006   12....       LCALL     `??nwkNeighborGetLinkInfo::?relay`; Banked call to: nwkNeighborGetLinkInfo
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   90....       MOV       DPTR,#_NIB + 33
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FC           MOV       R4,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FD           MOV       R5,A
   \   000008   90....       MOV       DPTR,#selectedTargetNwkAddr
   \   00000B   22           RET
   1902          
   1903          /*********************************************************************
   1904           * @fn      initiatorSetNwkToInitState
   1905           *
   1906           * @brief   Set our network state to its original state.
   1907           *
   1908           * @param   void
   1909           *
   1910           * @return  void
   1911           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1912          static void initiatorSetNwkToInitState()
   \                     initiatorSetNwkToInitState:
   1913          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   1914            // Turn MAC receiver back to its old state
   1915            ZMacSetReq( ZMacRxOnIdle, &savedRxOnIdle );
   \   000005                ; Setup parameters for call to function ZMacSetReq
   \   000005   7A..         MOV       R2,#savedRxOnIdle & 0xff
   \   000007   7B..         MOV       R3,#(savedRxOnIdle >> 8) & 0xff
   \   000009   7952         MOV       R1,#0x52
   \   00000B   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1916          
   1917            // Tune back to our channel
   1918            touchLink_SetChannel( _NIB.nwkLogicalChannel );
   \   00000E                ; Setup parameters for call to function touchLink_SetChannel
   \   00000E   90....       MOV       DPTR,#_NIB + 22
   \   000011   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   1919          
   1920            // Set NWK task to run
   1921            nwk_setStateIdle( FALSE );
   \                     ??CrossCallReturnLabel_184:
   \   000014                ; Setup parameters for call to function nwk_setStateIdle
   \   000014   7900         MOV       R1,#0x0
   \   000016   12....       LCALL     `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
   1922          
   1923            if ( savedPollRate != zgPollRate )
   \   000019   90....       MOV       DPTR,#savedPollRate
   \   00001C   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00001F   E4           CLR       A
   \   000020   F5..         MOV       ?V2,A
   \   000022   F5..         MOV       ?V3,A
   \   000024   90....       MOV       DPTR,#zgPollRate
   \   000027   78..         MOV       R0,#?V0
   \   000029   12....       LCALL     ?L_EQ_X
   \   00002C   6015         JZ        ??initiatorSetNwkToInitState_0
   1924            {
   1925              NLME_SetPollRate( savedPollRate );
   \   00002E                ; Setup parameters for call to function NLME_SetPollRate
   \   00002E   AA..         MOV       R2,?V0
   \   000030   AB..         MOV       R3,?V1
   \   000032   AC..         MOV       R4,?V2
   \   000034   AD..         MOV       R5,?V3
   \   000036   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1926              savedPollRate = POLL_RATE;
   \   000039   90....       MOV       DPTR,#savedPollRate
   \   00003C   74E8         MOV       A,#-0x18
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   A3           INC       DPTR
   \   000040   7403         MOV       A,#0x3
   \   000042   F0           MOVX      @DPTR,A
   1927            }
   1928          
   1929            if ( savedQueuedPollRate != zgQueuedPollRate )
   \                     ??initiatorSetNwkToInitState_0:
   \   000043   90....       MOV       DPTR,#savedQueuedPollRate
   \   000046   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000049   90....       MOV       DPTR,#zgQueuedPollRate
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   68           XRL       A,R0
   \   00004E   7003         JNZ       ??initiatorSetNwkToInitState_1
   \   000050   A3           INC       DPTR
   \   000051   E0           MOVX      A,@DPTR
   \   000052   69           XRL       A,R1
   \                     ??initiatorSetNwkToInitState_1:
   \   000053   6012         JZ        ??initiatorSetNwkToInitState_2
   1930            {
   1931              NLME_SetQueuedPollRate( savedQueuedPollRate );
   \   000055                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000055   90....       MOV       DPTR,#savedQueuedPollRate
   \   000058   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00005B   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1932              savedQueuedPollRate = QUEUED_POLL_RATE;
   \   00005E   90....       MOV       DPTR,#savedQueuedPollRate
   \   000061   7464         MOV       A,#0x64
   \   000063   F0           MOVX      @DPTR,A
   \   000064   A3           INC       DPTR
   \   000065   E4           CLR       A
   \   000066   F0           MOVX      @DPTR,A
   1933            }
   1934          
   1935            if ( savedResponsePollRate != zgResponsePollRate )
   \                     ??initiatorSetNwkToInitState_2:
   \   000067   90....       MOV       DPTR,#savedResponsePollRate
   \   00006A   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   00006D   90....       MOV       DPTR,#zgResponsePollRate
   \   000070   E0           MOVX      A,@DPTR
   \   000071   68           XRL       A,R0
   \   000072   7003         JNZ       ??initiatorSetNwkToInitState_3
   \   000074   A3           INC       DPTR
   \   000075   E0           MOVX      A,@DPTR
   \   000076   69           XRL       A,R1
   \                     ??initiatorSetNwkToInitState_3:
   \   000077   6012         JZ        ??initiatorSetNwkToInitState_4
   1936            {
   1937              NLME_SetResponseRate( savedResponsePollRate );
   \   000079                ; Setup parameters for call to function NLME_SetResponseRate
   \   000079   90....       MOV       DPTR,#savedResponsePollRate
   \   00007C   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00007F   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   1938              savedResponsePollRate = RESPONSE_POLL_RATE;
   \   000082   90....       MOV       DPTR,#savedResponsePollRate
   \   000085   7464         MOV       A,#0x64
   \   000087   F0           MOVX      @DPTR,A
   \   000088   A3           INC       DPTR
   \   000089   E4           CLR       A
   \   00008A   F0           MOVX      @DPTR,A
   1939            }
   1940          }
   \                     ??initiatorSetNwkToInitState_4:
   \   00008B   02....       LJMP      ??Subroutine61_0 & 0xFFFF
   1941          
   1942          #if ( ZSTACK_ROUTER_BUILD )
   1943          /*********************************************************************
   1944           * @fn      initiatorJoinNwk
   1945           *
   1946           * @brief   Initiate a network join request.
   1947           *
   1948           * @param   void
   1949           *
   1950           * @return  void
   1951           */
   1952          static void initiatorJoinNwk( void )
   1953          {
   1954            // Save free ranges
   1955            touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
   1956          
   1957            // In case we're here after a leave
   1958            touchLinkLeaveInitiated = FALSE;
   1959          
   1960            // Clear leave control logic
   1961            ZDApp_LeaveCtrlReset();
   1962          
   1963            if ( POLL_RATE == 0 )
   1964            {
   1965              //allow to respond to TOUCHLINK commission utility commands after TL
   1966              NLME_SetPollRate( TOUCHLINK_INITIATOR_TEMP_POST_TL_POLL_RATE );
   1967              //polling should reset when TL life time expires
   1968            }
   1969          
   1970            touchLinkInitiator_PermitJoin( 0 );
   1971          
   1972            ZDOInitDevice( 0 );
   1973            // Perform a network rejoin request
   1974            _NIB.nwkState = NWK_REJOINING;
   1975            initiatorReJoinNwk( MODE_REJOIN );
   1976          }
   1977          #endif
   1978          
   1979          /*********************************************************************
   1980           * @fn      initiatorReJoinNwk
   1981           *
   1982           * @brief   Send out an Rejoin Request.
   1983           *
   1984           * @param   startMode - MODE_REJOIN or MODE_RESUME
   1985           *
   1986           * @return  none
   1987           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1988          static void initiatorReJoinNwk( devStartModes_t startMode )
   \                     initiatorReJoinNwk:
   1989          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   1990            // Set NWK task to run
   1991            nwk_setStateIdle( FALSE );
   \   000007                ; Setup parameters for call to function nwk_setStateIdle
   \   000007   7900         MOV       R1,#0x0
   \   000009   12....       LCALL     `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
   1992          
   1993            // Configure MAC with our network parameters
   1994            touchLink_SetMacNwkParams( _NIB.nwkDevAddress, _NIB.nwkPanId, _NIB.nwkLogicalChannel );
   \   00000C                ; Setup parameters for call to function touchLink_SetMacNwkParams
   \   00000C   12....       LCALL     ?Subroutine9 & 0xFFFF
   1995          
   1996            // Use the new network paramters
   1997            zgConfigPANID = _NIB.nwkPanId;
   \                     ??CrossCallReturnLabel_2:
   \   00000F   90....       MOV       DPTR,#_NIB + 33
   \   000012   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000015   90....       MOV       DPTR,#zgConfigPANID
   \   000018   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   1998            zgDefaultChannelList = _NIB.channelList;
   \                     ??CrossCallReturnLabel_92:
   \   00001B   90....       MOV       DPTR,#_NIB + 36
   \   00001E   12....       LCALL     ?XLOAD_R0123
   \   000021   90....       MOV       DPTR,#zgDefaultChannelList
   \   000024   12....       LCALL     ?XSTORE_R0123
   1999            osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \   000027                ; Setup parameters for call to function sAddrExtCpy
   \   000027   7C..         MOV       R4,#(_NIB + 53) & 0xff
   \   000029   7D..         MOV       R5,#((_NIB + 53) >> 8) & 0xff
   \   00002B   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   00002D   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00002F   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2000          
   2001            devStartMode = startMode;
   \   000032   EE           MOV       A,R6
   \   000033   90....       MOV       DPTR,#devStartMode
   \   000036   F0           MOVX      @DPTR,A
   2002          
   2003            _tmpRejoinState = TRUE;
   \   000037   90....       MOV       DPTR,#_tmpRejoinState
   \   00003A   7401         MOV       A,#0x1
   \   00003C   F0           MOVX      @DPTR,A
   2004          
   2005            // Start the network joining process
   2006            osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   00003D                ; Setup parameters for call to function osal_set_event
   \   00003D   FA           MOV       R2,A
   \   00003E   7B00         MOV       R3,#0x0
   \   000040   90....       MOV       DPTR,#ZDAppTaskID
   \   000043   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   2007          }
   \                     ??CrossCallReturnLabel_179:
   \   000046   02....       LJMP      ??Subroutine54_0 & 0xFFFF
   2008          
   2009          /*********************************************************************
   2010           * @fn      initiatorSendScanReq
   2011           *
   2012           * @brief   Send out an Scan Request command on one of the TOUCHLINK channels.
   2013           *
   2014           * @param   freshScan - TRUE to start fresh scan, FALSE to resume existing process.
   2015           *
   2016           * @return  void
   2017           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2018          static void initiatorSendScanReq( bool freshScan )
   \                     initiatorSendScanReq:
   2019          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   2020            bdbTLScanReq_t req;
   2021            uint8 newChannel;
   2022            uint8 secondaryChList[] = TOUCHLINK_SECONDARY_CHANNELS_SET;
   \   00000C   90....       MOV       DPTR,#`?<Constant {12, 13, 14, 16, 17, 18, 19, 21, 22`
   \   00000F   7408         MOV       A,#0x8
   \   000011   12....       LCALL     ?XSTACK_DISP102_8
   \   000014   740C         MOV       A,#0xc
   \   000016   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   2023            static uint8 channelIndex = 0;
   2024            
   2025            // Set the device as initiator of touchlink commissioning
   2026            touchLink_DeviceIsInitiator( TRUE );
   \   000019                ; Setup parameters for call to function touchLink_DeviceIsInitiator
   \   000019   7901         MOV       R1,#0x1
   \   00001B   12....       LCALL     `??touchLink_DeviceIsInitiator::?relay`; Banked call to: touchLink_DeviceIsInitiator
   2027          
   2028            if ( freshScan )
   \   00001E   EE           MOV       A,R6
   \   00001F   6005         JZ        ??initiatorSendScanReq_0
   2029            {
   2030              channelIndex = 0;
   \   000021   90....       MOV       DPTR,#??channelIndex
   \   000024   E4           CLR       A
   \   000025   F0           MOVX      @DPTR,A
   2031            }
   2032          
   2033            // First figure out the channel
   2034            if ( scanReqChannels == TOUCHLINK_SCAN_PRIMARY_CHANNELS )
   \                     ??initiatorSendScanReq_0:
   \   000026   90....       MOV       DPTR,#scanReqChannels
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   6401         XRL       A,#0x1
   \   00002C   6003         JZ        $+5
   \   00002E   02....       LJMP      ??initiatorSendScanReq_1 & 0xFFFF
   2035            {
   2036              if ( numScanReqSent < 5 )
   \   000031   90....       MOV       DPTR,#numScanReqSent
   \   000034   E0           MOVX      A,@DPTR
   \   000035   C3           CLR       C
   \   000036   9405         SUBB      A,#0x5
   \   000038   5064         JNC       ??initiatorSendScanReq_2
   2037              {
   2038                // First five consecutive requests are sent on channel 11
   2039                newChannel = TOUCHLINK_FIRST_CHANNEL;
   \   00003A   7C0B         MOV       R4,#0xb
   2040              }
   2041              else if ( numScanReqSent == 5 )
   2042              {
   2043                // Sixth request is sent on channel 15
   2044                newChannel = TOUCHLINK_SECOND_CHANNEL;
   2045              }
   2046              else if ( numScanReqSent == 6 )
   2047              {
   2048                // Seventh request is sent on channel 20
   2049                newChannel = TOUCHLINK_THIRD_CHANNEL;
   2050              }
   2051              else
   2052              {
   2053                // Last request is sent on channel 25
   2054                newChannel = TOUCHLINK_FOURTH_CHANNEL;
   2055              }
   2056            }
   2057            else
   2058            {
   2059              // scan secondary channel list
   2060              if ( channelIndex < sizeof(secondaryChList) )
   2061              {
   2062                 newChannel = secondaryChList[channelIndex++];
   2063              }
   2064              else
   2065              {
   2066                // set it to initial value for next discovery process
   2067                channelIndex = 0;
   2068                return;
   2069              }
   2070            }
   2071          
   2072            if ( touchLinkTransID != 0 )
   \                     ??initiatorSendScanReq_3:
   \   00003C   90....       MOV       DPTR,#touchLinkTransID
   \   00003F   12....       LCALL     ?XLOAD_R0123
   \   000042   E8           MOV       A,R0
   \   000043   49           ORL       A,R1
   \   000044   4A           ORL       A,R2
   \   000045   4B           ORL       A,R3
   \   000046   7003         JNZ       $+5
   \   000048   02....       LJMP      ??initiatorSendScanReq_4 & 0xFFFF
   2073            {
   2074              // Build the request
   2075              req.transID = touchLinkTransID;
   \   00004B   90....       MOV       DPTR,#touchLinkTransID
   \   00004E   12....       LCALL     ?XLOAD_R0123
   \   000051   85..82       MOV       DPL,?XSP + 0
   \   000054   85..83       MOV       DPH,?XSP + 1
   \   000057   12....       LCALL     ?XSTORE_R0123
   2076              touchLinkLastAcceptedTransID = touchLinkTransID;
   \   00005A   90....       MOV       DPTR,#touchLinkTransID
   \   00005D   12....       LCALL     ?XLOAD_R0123
   \   000060   90....       MOV       DPTR,#touchLinkLastAcceptedTransID
   \   000063   12....       LCALL     ?XSTORE_R0123
   2077          
   2078              req.zInfo.zInfoByte = 0;
   \   000066   7404         MOV       A,#0x4
   \   000068   12....       LCALL     ?XSTACK_DISP0_8
   \   00006B   E4           CLR       A
   \   00006C   F0           MOVX      @DPTR,A
   2079              req.zLogicalType = zgDeviceLogicalType;
   \   00006D   F0           MOVX      @DPTR,A
   \   00006E   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000071   E0           MOVX      A,@DPTR
   \   000072   5403         ANL       A,#0x3
   \   000074   F8           MOV       R0,A
   \   000075   7404         MOV       A,#0x4
   \   000077   12....       LCALL     ?XSTACK_DISP0_8
   \   00007A   E8           MOV       A,R0
   \   00007B   F0           MOVX      @DPTR,A
   2080              if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \   00007C   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   A2E3         MOV       C,0xE0 /* A   */.3
   \   000082   5009         JNC       ??initiatorSendScanReq_5
   2081              {
   2082                req.zRxOnWhenIdle = TRUE;
   \   000084   7404         MOV       A,#0x4
   \   000086   12....       LCALL     ?XSTACK_DISP0_8
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   4404         ORL       A,#0x4
   \   00008C   F0           MOVX      @DPTR,A
   2083              }
   2084          
   2085              req.touchLinkInfo.touchLinkInfoByte = 0;
   \                     ??initiatorSendScanReq_5:
   \   00008D   7406         MOV       A,#0x6
   \   00008F   12....       LCALL     ?XSTACK_DISP0_8
   \   000092   E4           CLR       A
   \   000093   F0           MOVX      @DPTR,A
   2086              req.touchLinkFactoryNew = !bdbAttributes.bdbNodeIsOnANetwork;
   \   000094   90....       MOV       DPTR,#bdbAttributes + 14
   \   000097   E0           MOVX      A,@DPTR
   \   000098   7043         JNZ       ??initiatorSendScanReq_6
   \   00009A   7A01         MOV       R2,#0x1
   \   00009C   8041         SJMP      ??initiatorSendScanReq_7
   \                     ??initiatorSendScanReq_2:
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   6405         XRL       A,#0x5
   \   0000A1   7004         JNZ       ??initiatorSendScanReq_8
   \   0000A3   7C0F         MOV       R4,#0xf
   \   0000A5   8095         SJMP      ??initiatorSendScanReq_3
   \                     ??initiatorSendScanReq_8:
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   6406         XRL       A,#0x6
   \   0000AA   7004         JNZ       ??initiatorSendScanReq_9
   \   0000AC   7C14         MOV       R4,#0x14
   \   0000AE   808C         SJMP      ??initiatorSendScanReq_3
   \                     ??initiatorSendScanReq_9:
   \   0000B0   7C19         MOV       R4,#0x19
   \   0000B2   8088         SJMP      ??initiatorSendScanReq_3
   \                     ??initiatorSendScanReq_1:
   \   0000B4   90....       MOV       DPTR,#??channelIndex
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   C3           CLR       C
   \   0000B9   940C         SUBB      A,#0xc
   \   0000BB   501C         JNC       ??initiatorSendScanReq_10
   \   0000BD   E0           MOVX      A,@DPTR
   \   0000BE   F8           MOV       R0,A
   \   0000BF   7408         MOV       A,#0x8
   \   0000C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C4   E582         MOV       A,DPL
   \   0000C6   28           ADD       A,R0
   \   0000C7   F582         MOV       DPL,A
   \   0000C9   E4           CLR       A
   \   0000CA   3583         ADDC      A,DPH
   \   0000CC   F583         MOV       DPH,A
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   FC           MOV       R4,A
   \   0000D0   90....       MOV       DPTR,#??channelIndex
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   04           INC       A
   \   0000D5   F0           MOVX      @DPTR,A
   \   0000D6   02....       LJMP      ??initiatorSendScanReq_3 & 0xFFFF
   \                     ??initiatorSendScanReq_10:
   \   0000D9   E4           CLR       A
   \   0000DA   F0           MOVX      @DPTR,A
   \   0000DB   8049         SJMP      ??initiatorSendScanReq_11
   \                     ??initiatorSendScanReq_6:
   \   0000DD   7A00         MOV       R2,#0x0
   2087              req.touchLinkAddressAssignment = TRUE;
   2088              req.touchLinkInitiator = TRUE;
   \                     ??initiatorSendScanReq_7:
   \   0000DF   7406         MOV       A,#0x6
   \   0000E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E4   A3           INC       DPTR
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   F9           MOV       R1,A
   \   0000E7   EA           MOV       A,R2
   \   0000E8   4412         ORL       A,#0x12
   \   0000EA   F8           MOV       R0,A
   \   0000EB   7406         MOV       A,#0x6
   \   0000ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F0   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   2089          
   2090              // First switch to the right channel
   2091              touchLink_SetChannel( newChannel );
   \                     ??CrossCallReturnLabel_93:
   \   0000F3                ; Setup parameters for call to function touchLink_SetChannel
   \   0000F3   EC           MOV       A,R4
   \   0000F4   12....       LCALL     ?Subroutine8 & 0xFFFF
   2092          
   2093              // Broadcast the request
   2094              bdbTL_Send_ScanReq( TOUCHLINK_INTERNAL_ENDPOINT, &bcastAddr, &req, initiatorSeqNum++ );
   \                     ??CrossCallReturnLabel_99:
   \   0000F7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FA   7401         MOV       A,#0x1
   \   0000FC   12....       LCALL     ?XSTACK_DISP102_8
   \   0000FF   7A..         MOV       R2,#bcastAddr & 0xff
   \   000101   7B..         MOV       R3,#(bcastAddr >> 8) & 0xff
   \   000103   790D         MOV       R1,#0xd
   \   000105   12....       LCALL     `??bdbTL_Send_ScanReq::?relay`; Banked call to: bdbTL_Send_ScanReq
   \   000108   7401         MOV       A,#0x1
   \   00010A   12....       LCALL     ?DEALLOC_XSTACK8
   2095          
   2096              numScanReqSent++;
   \   00010D   90....       MOV       DPTR,#numScanReqSent
   \   000110   E0           MOVX      A,@DPTR
   \   000111   04           INC       A
   \   000112   F0           MOVX      @DPTR,A
   2097          
   2098              // After each transmission, wait BDBCTL_SCAN_TIME_BASE_DURATION seconds
   2099              // to receive any responses.
   2100              osal_start_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_TL_SCAN_BASE_EVT, BDBCTL_SCAN_TIME_BASE_DURATION );
   \   000113                ; Setup parameters for call to function osal_start_timerEx
   \   000113   90....       MOV       DPTR,#__Constant_fa
   \   000116   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000119   7A20         MOV       R2,#0x20
   \   00011B   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   2101            }
   \                     ??CrossCallReturnLabel_117:
   \   00011E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000121   8003         SJMP      ??initiatorSendScanReq_11
   2102            else
   2103            {
   2104              touchLinkInitiator_AbortTL();
   \                     ??initiatorSendScanReq_4:
   \   000123                ; Setup parameters for call to function touchLinkInitiator_AbortTL
   \   000123   12....       LCALL     `??touchLinkInitiator_AbortTL::?relay`; Banked call to: touchLinkInitiator_AbortTL
   2105            }
   2106          }
   \                     ??initiatorSendScanReq_11:
   \   000126   7414         MOV       A,#0x14
   \   000128   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??channelIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
   2107          
   2108          /*********************************************************************
   2109           * @fn      initiatorSendNwkStartReq
   2110           *
   2111           * @brief   Send out a Network Start Request command.
   2112           *
   2113           * @param   pRsp - received Scan Response
   2114           *
   2115           * @return  ZStatus_t
   2116           */
   2117          static ZStatus_t initiatorSendNwkStartReq( bdbTLScanRsp_t *pRsp )
   2118          {
   2119            bdbTLNwkStartReq_t *pReq;
   2120            ZStatus_t status;
   2121          
   2122            pReq = (bdbTLNwkStartReq_t *)osal_mem_alloc( sizeof( bdbTLNwkStartReq_t ) );
   2123            if ( pReq != NULL )
   2124            {
   2125              uint16 i;
   2126              bdbTLNwkParams_t *pParams = &(pReq->nwkParams);
   2127          
   2128              osal_memset( pReq, 0, sizeof( bdbTLNwkStartReq_t ) );
   2129          
   2130              // Build the request
   2131              pReq->transID = selectedTarget.scanRsp.transID;
   2132          
   2133              // Find out key index (prefer highest)
   2134              for ( i = 15; i > 0; i-- )
   2135              {
   2136                if ( ( (uint16)1 << i ) & pRsp->keyBitmask )
   2137                {
   2138                  break;
   2139                }
   2140              }
   2141              pParams->keyIndex = i;
   2142          
   2143              // Copy in the encrypted network key
   2144              touchLink_EncryptNwkKey( pParams->nwkKey, i, pRsp->transID, pRsp->responseID );
   2145          
   2146              pParams->nwkAddr = touchLink_PopNwkAddress();
   2147              if ( pParams->nwkAddr == 0 )
   2148              {
   2149                pParams->nwkAddr = osal_rand();
   2150              }
   2151              // update address for app notification
   2152              selectedTarget.newNwkAddr = pParams->nwkAddr;
   2153              selectedTargetNwkAddr = pParams->nwkAddr;
   2154          
   2155              // Set group ID range
   2156              if ( pRsp->totalGrpIDs > 0 )
   2157              {
   2158                touchLink_PopGrpIDRange( pRsp->totalGrpIDs, &(pParams->grpIDsBegin), &(pParams->grpIDsEnd) );
   2159              }
   2160          
   2161              if ( pRsp->touchLinkAddressAssignment )
   2162              {
   2163                touchLink_SplitFreeRanges( &(pParams->freeNwkAddrBegin), &(pParams->freeNwkAddrEnd),
   2164                                     &(pParams->freeGrpIDBegin), &(pParams->freeGrpIDEnd) );
   2165              }
   2166          
   2167          #ifdef TOUCHLINK_INITIATOR_SET_NEW_NWK_PARAMS
   2168              pParams->logicalChannel = _NIB.nwkLogicalChannel;
   2169              pParams->panId = _NIB.nwkPanId;
   2170              osal_memcpy( pParams->extendedPANID, _NIB.extendedPANID ,Z_EXTADDR_LEN);
   2171          #endif
   2172          
   2173              osal_cpyExtAddr( pReq->initiatorIeeeAddr, NLME_GetExtAddr() );
   2174              pReq->initiatorNwkAddr = _NIB.nwkDevAddress;
   2175          
   2176              status = bdbTL_Send_NwkStartReq( TOUCHLINK_INTERNAL_ENDPOINT, &(selectedTarget.srcAddr), pReq, initiatorSeqNum++ );
   2177              if ( status == ZSuccess )
   2178              {
   2179                // Keep a copy of the encryted network key sent to the target
   2180                keyIndexSent = i;
   2181                osal_memcpy( encKeySent, pParams->nwkKey, SEC_KEY_LEN );
   2182                responseIDSent = pRsp->responseID;
   2183          
   2184                // After the transmission, wait BDBCTL_RX_WINDOW_DURATION seconds to
   2185                // receive a response.
   2186                osal_start_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_W4_NWK_START_RSP_EVT, BDBCTL_RX_WINDOW_DURATION );
   2187              }
   2188          
   2189              osal_mem_free( pReq );
   2190            }
   2191            else
   2192            {
   2193              status = ZMemError;
   2194            }
   2195          
   2196            return ( status );
   2197          }
   2198          
   2199          /*********************************************************************
   2200           * @fn      initiatorSendNwkJoinReq
   2201           *
   2202           * @brief   Send out a Network Join Router or End Device Request command.
   2203           *
   2204           * @param   pRsp - received Scan Response
   2205           *
   2206           * @return  ZStatus_t
   2207           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2208          static ZStatus_t initiatorSendNwkJoinReq( bdbTLScanRsp_t *pRsp )
   \                     initiatorSendNwkJoinReq:
   2209          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   2210            bdbTLNwkJoinReq_t *pReq;
   2211            ZStatus_t status;
   2212            bdbFindingBindingRespondent_t *pCurr;
   2213          
   2214            pReq = (bdbTLNwkJoinReq_t *)osal_mem_alloc( sizeof( bdbTLNwkJoinReq_t ) );
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   7A2F         MOV       R2,#0x2f
   \   00000B   7B00         MOV       R3,#0x0
   \   00000D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000010   8A..         MOV       ?V2,R2
   \   000012   8B..         MOV       ?V3,R3
   2215            if ( pReq != NULL )
   \   000014   EA           MOV       A,R2
   \   000015   4B           ORL       A,R3
   \   000016   7003         JNZ       $+5
   \   000018   02....       LJMP      ??initiatorSendNwkJoinReq_0 & 0xFFFF
   2216            {
   2217              uint16 i;
   2218              bdbTLNwkParams_t *pParams = &(pReq->nwkParams);
   \   00001B   EA           MOV       A,R2
   \   00001C   2404         ADD       A,#0x4
   \   00001E   FE           MOV       R6,A
   \   00001F   E4           CLR       A
   \   000020   35..         ADDC      A,?V3
   \   000022   FF           MOV       R7,A
   2219          
   2220              osal_memset( pReq, 0, sizeof( bdbTLNwkJoinReq_t ) );
   \   000023                ; Setup parameters for call to function osal_memset
   \   000023   7C2F         MOV       R4,#0x2f
   \   000025   7D00         MOV       R5,#0x0
   \   000027   7900         MOV       R1,#0x0
   \   000029   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2221          
   2222              // Build the request
   2223              pReq->transID = selectedTarget.scanRsp.transID;
   \   00002C   90....       MOV       DPTR,#selectedTarget
   \   00002F   12....       LCALL     ?XLOAD_R0123
   \   000032   85..82       MOV       DPL,?V2
   \   000035   85..83       MOV       DPH,?V3
   \   000038   12....       LCALL     ?XSTORE_R0123
   2224          
   2225              // Find out key index (prefer highest)
   2226              for ( i = 15; i > 0; i-- )
   \   00003B   7A0F         MOV       R2,#0xf
   \   00003D   7B00         MOV       R3,#0x0
   2227              {
   2228                if ( ( (uint16)1 << i ) & pRsp->keyBitmask )
   \                     ??initiatorSendNwkJoinReq_1:
   \   00003F   85..82       MOV       DPL,?V4
   \   000042   85..83       MOV       DPH,?V5
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   12....       LCALL     ?Subroutine20 & 0xFFFF
   2229                {
   2230                  break;
   2231                }
   2232              }
   \                     ??CrossCallReturnLabel_15:
   \   000051   EA           MOV       A,R2
   \   000052   78..         MOV       R0,#?V0
   \   000054   12....       LCALL     ?US_SHR
   \   000057   E5..         MOV       A,?V0
   \   000059   A2E0         MOV       C,0xE0 /* A   */.0
   \   00005B   400C         JC        ??initiatorSendNwkJoinReq_2
   \   00005D   EA           MOV       A,R2
   \   00005E   24FF         ADD       A,#-0x1
   \   000060   1A           DEC       R2
   \   000061   EB           MOV       A,R3
   \   000062   34FF         ADDC      A,#-0x1
   \   000064   FB           MOV       R3,A
   \   000065   EA           MOV       A,R2
   \   000066   4B           ORL       A,R3
   \   000067   70D6         JNZ       ??initiatorSendNwkJoinReq_1
   2233              pParams->keyIndex = i;
   \                     ??initiatorSendNwkJoinReq_2:
   \   000069   EA           MOV       A,R2
   \   00006A   8E82         MOV       DPL,R6
   \   00006C   8F83         MOV       DPH,R7
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   F0           MOVX      @DPTR,A
   2234          
   2235              // Copy in the encrypted network key
   2236              touchLink_EncryptNwkKey( pParams->nwkKey, i, pRsp->transID, pRsp->responseID );
   \   000077                ; Setup parameters for call to function touchLink_EncryptNwkKey
   \   000077   E5..         MOV       A,?V4
   \   000079   240B         ADD       A,#0xb
   \   00007B   F582         MOV       DPL,A
   \   00007D   E4           CLR       A
   \   00007E   35..         ADDC      A,?V5
   \   000080   F583         MOV       DPH,A
   \   000082   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000085   85..82       MOV       DPL,?V4
   \   000088   85..83       MOV       DPH,?V5
   \   00008B   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00008E   EA           MOV       A,R2
   \   00008F   F9           MOV       R1,A
   \   000090   EE           MOV       A,R6
   \   000091   2409         ADD       A,#0x9
   \   000093   FA           MOV       R2,A
   \   000094   E4           CLR       A
   \   000095   3F           ADDC      A,R7
   \   000096   FB           MOV       R3,A
   \   000097   12....       LCALL     `??touchLink_EncryptNwkKey::?relay`; Banked call to: touchLink_EncryptNwkKey
   \   00009A   7408         MOV       A,#0x8
   \   00009C   12....       LCALL     ?DEALLOC_XSTACK8
   2237          
   2238              pParams->nwkAddr = touchLink_PopNwkAddress();
   \   00009F                ; Setup parameters for call to function touchLink_PopNwkAddress
   \   00009F   12....       LCALL     `??touchLink_PopNwkAddress::?relay`; Banked call to: touchLink_PopNwkAddress
   \   0000A2   8B..         MOV       ?V1,R3
   \   0000A4   A9..         MOV       R1,?V1
   \   0000A6   EE           MOV       A,R6
   \   0000A7   241C         ADD       A,#0x1c
   \   0000A9   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   0000AC   12....       LCALL     ?Subroutine26 & 0xFFFF
   2239              if ( pParams->nwkAddr == 0 )
   \                     ??CrossCallReturnLabel_81:
   \   0000AF   EA           MOV       A,R2
   \   0000B0   49           ORL       A,R1
   \   0000B1   700C         JNZ       ??CrossCallReturnLabel_82
   2240              {
   2241                pParams->nwkAddr = osal_rand();
   \   0000B3                ; Setup parameters for call to function osal_rand
   \   0000B3   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   0000B6   85..82       MOV       DPL,?V0
   \   0000B9   85..83       MOV       DPH,?V1
   \   0000BC   12....       LCALL     ?Subroutine26 & 0xFFFF
   2242              }
   2243              // update address for app notification
   2244              selectedTarget.newNwkAddr = pParams->nwkAddr;
   \                     ??CrossCallReturnLabel_82:
   \   0000BF   85..82       MOV       DPL,?V0
   \   0000C2   85..83       MOV       DPH,?V1
   \   0000C5   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   0000C8   90....       MOV       DPTR,#selectedTarget + 50
   \   0000CB   E8           MOV       A,R0
   \   0000CC   F0           MOVX      @DPTR,A
   \   0000CD   A3           INC       DPTR
   \   0000CE   E9           MOV       A,R1
   \   0000CF   12....       LCALL     ?Subroutine28 & 0xFFFF
   2245              selectedTargetNwkAddr = pParams->nwkAddr;
   \                     ??CrossCallReturnLabel_27:
   \   0000D2   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   0000D5   90....       MOV       DPTR,#selectedTargetNwkAddr
   \   0000D8   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   2246              
   2247              // Set group ID range
   2248              if ( pRsp->totalGrpIDs > 0 )
   \                     ??CrossCallReturnLabel_94:
   \   0000DB   E5..         MOV       A,?V4
   \   0000DD   241E         ADD       A,#0x1e
   \   0000DF   F582         MOV       DPL,A
   \   0000E1   E4           CLR       A
   \   0000E2   35..         ADDC      A,?V5
   \   0000E4   F583         MOV       DPH,A
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   F9           MOV       R1,A
   \   0000E8   6011         JZ        ??initiatorSendNwkJoinReq_3
   2249              {
   2250                touchLink_PopGrpIDRange( pRsp->totalGrpIDs, &(pParams->grpIDsBegin), &(pParams->grpIDsEnd) );
   \   0000EA                ; Setup parameters for call to function touchLink_PopGrpIDRange
   \   0000EA   EE           MOV       A,R6
   \   0000EB   2420         ADD       A,#0x20
   \   0000ED   FC           MOV       R4,A
   \   0000EE   E4           CLR       A
   \   0000EF   3F           ADDC      A,R7
   \   0000F0   FD           MOV       R5,A
   \   0000F1   EE           MOV       A,R6
   \   0000F2   241E         ADD       A,#0x1e
   \   0000F4   FA           MOV       R2,A
   \   0000F5   E4           CLR       A
   \   0000F6   3F           ADDC      A,R7
   \   0000F7   FB           MOV       R3,A
   \   0000F8   12....       LCALL     `??touchLink_PopGrpIDRange::?relay`; Banked call to: touchLink_PopGrpIDRange
   2251              }
   2252          
   2253              if ( pRsp->touchLinkAddressAssignment )
   \                     ??initiatorSendNwkJoinReq_3:
   \   0000FB   85..82       MOV       DPL,?V4
   \   0000FE   85..83       MOV       DPH,?V5
   \   000101   A3           INC       DPTR
   \   000102   A3           INC       DPTR
   \   000103   A3           INC       DPTR
   \   000104   A3           INC       DPTR
   \   000105   A3           INC       DPTR
   \   000106   A3           INC       DPTR
   \   000107   A3           INC       DPTR
   \   000108   E0           MOVX      A,@DPTR
   \   000109   5402         ANL       A,#0x2
   \   00010B   6032         JZ        ??initiatorSendNwkJoinReq_4
   2254              {
   2255                touchLink_SplitFreeRanges( &(pParams->freeNwkAddrBegin), &(pParams->freeNwkAddrEnd),
   2256                                     &(pParams->freeGrpIDBegin), &(pParams->freeGrpIDEnd) );
   \   00010D                ; Setup parameters for call to function touchLink_SplitFreeRanges
   \   00010D   EE           MOV       A,R6
   \   00010E   2428         ADD       A,#0x28
   \   000110   F5..         MOV       ?V6,A
   \   000112   E4           CLR       A
   \   000113   3F           ADDC      A,R7
   \   000114   F5..         MOV       ?V7,A
   \   000116   78..         MOV       R0,#?V6
   \   000118   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011B   EE           MOV       A,R6
   \   00011C   2426         ADD       A,#0x26
   \   00011E   F5..         MOV       ?V6,A
   \   000120   E4           CLR       A
   \   000121   3F           ADDC      A,R7
   \   000122   F5..         MOV       ?V7,A
   \   000124   78..         MOV       R0,#?V6
   \   000126   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000129   EE           MOV       A,R6
   \   00012A   2424         ADD       A,#0x24
   \   00012C   FC           MOV       R4,A
   \   00012D   E4           CLR       A
   \   00012E   3F           ADDC      A,R7
   \   00012F   FD           MOV       R5,A
   \   000130   EE           MOV       A,R6
   \   000131   2422         ADD       A,#0x22
   \   000133   FA           MOV       R2,A
   \   000134   E4           CLR       A
   \   000135   3F           ADDC      A,R7
   \   000136   FB           MOV       R3,A
   \   000137   12....       LCALL     `??touchLink_SplitFreeRanges::?relay`; Banked call to: touchLink_SplitFreeRanges
   \   00013A   7404         MOV       A,#0x4
   \   00013C   12....       LCALL     ?DEALLOC_XSTACK8
   2257              }
   2258              // update 
   2259              pCurr = pRespondentHead;
   \                     ??initiatorSendNwkJoinReq_4:
   \   00013F   90....       MOV       DPTR,#pRespondentHead
   \   000142   8028         SJMP      ??CrossCallReturnLabel_59
   2260              while( pCurr != NULL )
   2261              {
   2262                pCurr->data.addr.shortAddr = pParams->nwkAddr;
   \                     ??initiatorSendNwkJoinReq_5:
   \   000144   85..82       MOV       DPL,?V0
   \   000147   85..83       MOV       DPH,?V1
   \   00014A   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00014D   8882         MOV       DPL,R0
   \   00014F   8983         MOV       DPH,R1
   \   000151   12....       LCALL     ?Subroutine26 & 0xFFFF
   2263                pCurr->data.addrMode = afAddr16Bit;
   \                     ??CrossCallReturnLabel_83:
   \   000154   8882         MOV       DPL,R0
   \   000156   8983         MOV       DPH,R1
   \   000158   A3           INC       DPTR
   \   000159   A3           INC       DPTR
   \   00015A   A3           INC       DPTR
   \   00015B   A3           INC       DPTR
   \   00015C   A3           INC       DPTR
   \   00015D   A3           INC       DPTR
   \   00015E   A3           INC       DPTR
   \   00015F   A3           INC       DPTR
   \   000160   7402         MOV       A,#0x2
   \   000162   F0           MOVX      @DPTR,A
   2264                pCurr->data.panId = _NIB.nwkPanId;
   \   000163   90....       MOV       DPTR,#_NIB + 33
   \   000166   12....       LCALL     ?Subroutine12 & 0xFFFF
   2265                pCurr = pCurr->pNext;
   \                     ??CrossCallReturnLabel_6:
   \   000169   12....       LCALL     ?Subroutine38 & 0xFFFF
   2266              }
   \                     ??CrossCallReturnLabel_59:
   \   00016C   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   00016F   70D3         JNZ       ??initiatorSendNwkJoinReq_5
   2267          
   2268              pParams->logicalChannel = _NIB.nwkLogicalChannel;
   \   000171   90....       MOV       DPTR,#_NIB + 22
   \   000174   E0           MOVX      A,@DPTR
   \   000175   C0E0         PUSH      A
   \   000177   EE           MOV       A,R6
   \   000178   2419         ADD       A,#0x19
   \   00017A   F582         MOV       DPL,A
   \   00017C   E4           CLR       A
   \   00017D   3F           ADDC      A,R7
   \   00017E   F583         MOV       DPH,A
   \   000180   D0E0         POP       A
   \   000182   12....       LCALL     ?Subroutine22 & 0xFFFF
   2269              pParams->panId = _NIB.nwkPanId;
   \                     ??CrossCallReturnLabel_105:
   \   000185   241A         ADD       A,#0x1a
   \   000187   12....       LCALL     ?Subroutine32 & 0xFFFF
   2270              osal_cpyExtAddr( pParams->extendedPANID, _NIB.extendedPANID );
   \                     ??CrossCallReturnLabel_97:
   \   00018A                ; Setup parameters for call to function sAddrExtCpy
   \   00018A   7C..         MOV       R4,#(_NIB + 53) & 0xff
   \   00018C   7D..         MOV       R5,#((_NIB + 53) >> 8) & 0xff
   \   00018E   EE           MOV       A,R6
   \   00018F   FA           MOV       R2,A
   \   000190   EF           MOV       A,R7
   \   000191   FB           MOV       R3,A
   \   000192   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2271              pReq->nwkUpdateId = _NIB.nwkUpdateId;
   \   000195   90....       MOV       DPTR,#_NIB + 109
   \   000198   E0           MOVX      A,@DPTR
   \   000199   C0E0         PUSH      A
   \   00019B   E5..         MOV       A,?V2
   \   00019D   242E         ADD       A,#0x2e
   \   00019F   F582         MOV       DPL,A
   \   0001A1   E4           CLR       A
   \   0001A2   35..         ADDC      A,?V3
   \   0001A4   F583         MOV       DPH,A
   \   0001A6   D0E0         POP       A
   \   0001A8   F0           MOVX      @DPTR,A
   2272          
   2273              // Let PAN ID, Extended PAN ID and Logical Channel to be determined by the target
   2274              if ( pRsp->zLogicalType == ZG_DEVICETYPE_ROUTER )
   \   0001A9   85..82       MOV       DPL,?V4
   \   0001AC   85..83       MOV       DPH,?V5
   \   0001AF   A3           INC       DPTR
   \   0001B0   A3           INC       DPTR
   \   0001B1   A3           INC       DPTR
   \   0001B2   A3           INC       DPTR
   \   0001B3   A3           INC       DPTR
   \   0001B4   E0           MOVX      A,@DPTR
   \   0001B5   5403         ANL       A,#0x3
   \   0001B7   6401         XRL       A,#0x1
   \   0001B9   90....       MOV       DPTR,#initiatorSeqNum
   \   0001BC   700B         JNZ       ??initiatorSendNwkJoinReq_6
   2275              {
   2276                // It's a light
   2277                status = bdbTL_Send_NwkJoinRtrReq( TOUCHLINK_INTERNAL_ENDPOINT, &(selectedTarget.srcAddr), pReq, initiatorSeqNum++ );
   \   0001BE   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   2278              }
   \                     ??CrossCallReturnLabel_100:
   \   0001C1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001C4   75..12       MOV       ?V0,#0x12
   \   0001C7   8009         SJMP      ??initiatorSendNwkJoinReq_7
   2279              else // another controller
   2280              {
   2281                status = bdbTL_Send_NwkJoinEDReq( TOUCHLINK_INTERNAL_ENDPOINT, &(selectedTarget.srcAddr), pReq, initiatorSeqNum++ );
   \                     ??initiatorSendNwkJoinReq_6:
   \   0001C9   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   2282              }
   \                     ??CrossCallReturnLabel_101:
   \   0001CC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001CF   75..14       MOV       ?V0,#0x14
   \                     ??initiatorSendNwkJoinReq_7:
   \   0001D2   78..         MOV       R0,#?V0
   \   0001D4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001D7   AC..         MOV       R4,?V2
   \   0001D9   AD..         MOV       R5,?V3
   \   0001DB   7A..         MOV       R2,#(selectedTarget + 38) & 0xff
   \   0001DD   7B..         MOV       R3,#((selectedTarget + 38) >> 8) & 0xff
   \   0001DF   790D         MOV       R1,#0xd
   \   0001E1   12....       LCALL     `??bdbTL_Send_NwkJoinReq::?relay`; Banked call to: bdbTL_Send_NwkJoinReq
   \   0001E4   7402         MOV       A,#0x2
   \   0001E6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001E9   E9           MOV       A,R1
   \   0001EA   FE           MOV       R6,A
   2283          
   2284              if ( status == ZSuccess )
   \   0001EB   EE           MOV       A,R6
   \   0001EC   7010         JNZ       ??initiatorSendNwkJoinReq_8
   2285              {
   2286                // After the transmission, wait BDBCTL_RX_WINDOW_DURATION seconds to
   2287                // receive a response.
   2288                osal_start_timerEx( touchLinkInitiator_TaskID, TOUCHLINK_W4_NWK_JOIN_RSP_EVT, BDBCTL_RX_WINDOW_DURATION );
   \   0001EE                ; Setup parameters for call to function osal_start_timerEx
   \   0001EE   90....       MOV       DPTR,#__Constant_1388
   \   0001F1   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0001F4   7A00         MOV       R2,#0x0
   \   0001F6   7B01         MOV       R3,#0x1
   \   0001F8   12....       LCALL     ??Subroutine59_0 & 0xFFFF
   2289              }
   \                     ??CrossCallReturnLabel_122:
   \   0001FB   12....       LCALL     ?DEALLOC_XSTACK8
   2290          
   2291              osal_mem_free( pReq );
   \                     ??initiatorSendNwkJoinReq_8:
   \   0001FE                ; Setup parameters for call to function osal_mem_free
   \   0001FE   AA..         MOV       R2,?V2
   \   000200   AB..         MOV       R3,?V3
   \   000202   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000205   8002         SJMP      ??initiatorSendNwkJoinReq_9
   2292            }
   2293            else
   2294            {
   2295              status = ZMemError;
   \                     ??initiatorSendNwkJoinReq_0:
   \   000207   7E10         MOV       R6,#0x10
   2296            }
   2297          
   2298            return ( status );
   \                     ??initiatorSendNwkJoinReq_9:
   \   000209   EE           MOV       A,R6
   \   00020A   F9           MOV       R1,A
   \   00020B   02....       LJMP      ??Subroutine57_0 & 0xFFFF
   2299          }
   2300          
   2301          /*********************************************************************
   2302           * @fn      initiatorSendNwkUpdateReq
   2303           *
   2304           * @brief   Send out a Network Update Request command.
   2305           *
   2306           * @param   pRsp - received Scan Response
   2307           *
   2308           * @return  ZStatus_t
   2309           */
   2310          static ZStatus_t initiatorSendNwkUpdateReq( bdbTLScanRsp_t *pRsp )
   2311          {
   2312            bdbTLNwkUpdateReq_t *pReq;
   2313            ZStatus_t status;
   2314          
   2315            pReq = (bdbTLNwkUpdateReq_t *)osal_mem_alloc( sizeof( bdbTLNwkUpdateReq_t ) );
   2316            if ( pReq!= NULL )
   2317            {
   2318              // Build the request
   2319              pReq->transID = pRsp->transID;
   2320              osal_cpyExtAddr( pReq->extendedPANID, _NIB.extendedPANID );
   2321              pReq->nwkUpdateId = _NIB.nwkUpdateId;
   2322              pReq->logicalChannel = _NIB.nwkLogicalChannel;
   2323              pReq->PANID = _NIB.nwkPanId;
   2324              pReq->nwkAddr = pRsp->nwkAddr;
   2325          
   2326              status = bdbTL_Send_NwkUpdateReq( TOUCHLINK_INTERNAL_ENDPOINT, &(selectedTarget.srcAddr), pReq, initiatorSeqNum++ );
   2327          
   2328              osal_mem_free( pReq );
   2329            }
   2330            else
   2331            {
   2332              status = ZMemError;
   2333            }
   2334          
   2335            return ( status );
   2336          }
   2337          
   2338          /*********************************************************************
   2339           * @fn      initiatorClearSelectedTarget
   2340           *
   2341           * @brief   clear selected target variable.
   2342           *
   2343           * @param   none
   2344           *
   2345           * @return  none
   2346           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2347          static void initiatorClearSelectedTarget( void )
   \                     initiatorClearSelectedTarget:
   2348          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2349            osal_memset( &selectedTarget, 0x00, sizeof(targetCandidate_t) );
   \   000004                ; Setup parameters for call to function osal_memset
   \   000004   7C36         MOV       R4,#0x36
   \   000006   7D00         MOV       R5,#0x0
   \   000008   7900         MOV       R1,#0x0
   \   00000A   7A..         MOV       R2,#selectedTarget & 0xff
   \   00000C   7B..         MOV       R3,#(selectedTarget >> 8) & 0xff
   \   00000E   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2350            selectedTarget.lastRssi = TOUCHLINK_WORST_RSSI;
   \   000011   90....       MOV       DPTR,#selectedTarget + 53
   \   000014   74BA         MOV       A,#-0x46
   \   000016   02....       LJMP      ??Subroutine45_0 & 0xFFFF
   2351          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for initiatorRegisteredMsgAppTas`:
   \   000000   FF           DB 255

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for touchLinkInitiator_CmdCBs>`:
   \   000000   ....         DW `??initiatorScanReqCB::?relay`
   \   000002   ....         DW `??initiatorDeviceInfoReqCB::?relay`
   \   000004   ....         DW `??initiatorIdentifyReqCB::?relay`
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   ....         DW `??initiatorNwkJoinReqCB::?relay`
   \   00000C   0000         DW 0H
   \   00000E   ....         DW `??initiatorNwkUpdateReqCB::?relay`
   \   000010   ....         DW `??initiatorScanRspCB::?relay`
   \   000012   ....         DW `??initiatorDeviceInfoRspCB::?relay`
   \   000014   ....         DW `??initiatorNwkStartRspCB::?relay`
   \   000016   ....         DW `??initiatorNwkJoinRtrRspCB::?relay`
   \   000018   ....         DW `??initiatorNwkJoinEDRspCB::?relay`

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {12, 13, 14, 16, 17, 18, 19, 21, 22`:
   \   000000   0C           DB 12
   \   000001   0D           DB 13
   \   000002   0E           DB 14
   \   000003   10           DB 16
   \   000004   11           DB 17
   \   000005   12           DB 18
   \   000006   13           DB 19
   \   000007   15           DB 21
   \   000008   16           DB 22
   \   000009   17           DB 23
   \   00000A   18           DB 24
   \   00000B   1A           DB 26

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1f40:
   \   000000   401F0000     DD 8000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1f4:
   \   000000   F4010000     DD 500

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_32:
   \   000000   32000000     DD 50

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_7d0:
   \   000000   D0070000     DD 2000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1388:
   \   000000   88130000     DD 5000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_30d4:
   \   000000   D4300000     DD 12500

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_fa:
   \   000000   FA000000     DD 250
   2352          
   2353          #endif //BDB_TL_INITIATOR
   2354          
   2355          /*********************************************************************
   2356          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     75   bdb_Initiator_SendNwkJoinReq
        2      0   -> initiatorSendNwkJoinReq
        2      0   -> nwk_setStateIdle
      2     75   initiatorClearSelectedTarget
        2      0   -> osal_memset
      0     15   initiatorDeviceInfoReqCB
        0     11   -> touchLink_IsValidTransID
        0     15   -> touchLink_SendDeviceInfoRsp
      2     58   initiatorDeviceInfoRspCB
        0     58   -> bdb_AddRespondentNode
        0     58   -> bdb_zclRespondentListClean
        0     58   -> initiatorClearSelectedTarget
        0     58   -> osal_memset
        0     58   -> sAddrExtCpy
        0     58   -> touchLink_IsValidTransID
      0     10   initiatorIdentifyReqCB
        0     10   -> bdb_ZclIdentifyCmdInd
        0     10   -> bdb_setEpDescListToActiveEndpoint
        0     10   -> touchLink_IsValidTransID
      0     14   initiatorNwkJoinEDRspCB
        0     11   -> osal_get_timeoutEx
        0     14   -> osal_memcmp
        0     11   -> osal_set_event
        0     11   -> touchLink_IsValidTransID
      0     41   initiatorNwkJoinReqCB
        0     33   -> NLME_InitNV
        0     33   -> ZDSecMgrUpdateTCAddress
        0     35   -> bdbTL_Send_NwkJoinRsp
        0     33   -> bdb_setNodeIsOnANetwork
        0     33   -> nwk_ExtPANIDValid
        0     37   -> osal_start_timerEx
        0     33   -> osal_stop_timerEx
        0     41   -> touchLink_DecryptNwkKey
        0     33   -> touchLink_IsValidTransID
        0     33   -> touchLink_SetChannel
        0     33   -> touchLink_SetMacNwkParams
        0     37   -> touchLink_SetNIB
      0     14   initiatorNwkJoinRtrRspCB
        0     11   -> osal_get_timeoutEx
        0     14   -> osal_memcmp
        0     11   -> osal_set_event
        0     11   -> touchLink_IsValidTransID
      0      9   initiatorNwkStartRspCB
        0      9   -> osal_get_timeoutEx
        0      9   -> osal_set_event
        0      9   -> touchLink_IsValidTransID
      0     10   initiatorNwkUpdateReqCB
        0     10   -> sAddrExtCmp
        0     10   -> touchLink_IsValidTransID
        0     10   -> touchLink_NewNwkUpdateId
        0     10   -> touchLink_ProcessNwkUpdate
      0     89   initiatorProcessStateChange
        0     10   -> bdb_setNodeIsOnANetwork
        0     10   -> nwkNeighborAdd
        0     10   -> nwkNeighborGetLinkInfo
        0     10   -> osal_get_timeoutEx
        0     14   -> osal_start_timerEx
        0     10   -> osal_stop_timerEx
        0     10   -> touchLink_UpdateNV
      0     84   initiatorReJoinNwk
        0      9   -> nwk_setStateIdle
        0      9   -> osal_set_event
        0      9   -> sAddrExtCpy
        0      9   -> touchLink_SetMacNwkParams
      0     35   initiatorScanReqCB
        0     31   -> osal_get_timeoutEx
        0     34   -> osal_memcpy
        0     31   -> osal_stop_timerEx
        0     31   -> touchLink_GetMsgRssi
        0     35   -> touchLink_InitiatorSendScanRsp
      1     18   initiatorScanRspCB
        0     17   -> ZMacGetReq
        0     18   -> bdbTL_Send_DeviceInfoReq
        0     17   -> bdb_AddRespondentNode
        0     17   -> osal_get_timeoutEx
        0     17   -> touchLink_GetMsgRssi
        0     17   -> touchLink_GetNwkKeyBitmask
        0     17   -> touchLink_IsValidTransID
      2      0   initiatorSelectNwkParams
        2      0   -> osal_rand
        2      0   -> touchLink_GenerateRandNum
        2      0   -> touchLink_GetNumGrpIDs
        2      0   -> touchLink_GetRandPrimaryChannel
        2      0   -> touchLink_PopGrpIDRange
        2      0   -> touchLink_PopNwkAddress
        2      0   -> touchLink_SetMacNwkParams
      1     24   initiatorSendNwkJoinReq
        0     18   -> bdbTL_Send_NwkJoinReq
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
        0     16   -> osal_memset
        0     16   -> osal_rand
        0     20   -> osal_start_timerEx
        0     16   -> sAddrExtCpy
        0     24   -> touchLink_EncryptNwkKey
        0     16   -> touchLink_PopGrpIDRange
        0     16   -> touchLink_PopNwkAddress
        0     20   -> touchLink_SplitFreeRanges
      0    108   initiatorSendScanReq
        0     30   -> bdbTL_Send_ScanReq
        0     33   -> osal_start_timerEx
        0     29   -> touchLinkInitiator_AbortTL
        0     29   -> touchLink_DeviceIsInitiator
        0     29   -> touchLink_SetChannel
      0     87   initiatorSetNwkToInitState
        0     12   -> NLME_SetPollRate
        0     12   -> NLME_SetQueuedPollRate
        0     12   -> NLME_SetResponseRate
        0     12   -> ZMacSetReq
        0     12   -> nwk_setStateIdle
        0     12   -> touchLink_SetChannel
      2      0   initiatorZdoLeaveCnfCB
        2      0   -> osal_set_event
      2     29   touchLinkInitiator_AbortTL
        2      0   -> initiatorClearSelectedTarget
        2      0   -> initiatorSetNwkToInitState
        2      0   -> osal_stop_timerEx
      0     27   touchLinkInitiator_ChannelChange
        0     21   -> NLME_SetUpdateID
        0     27   -> ZDP_MgmtNwkUpdateReq
      0      9   touchLinkInitiator_Init
        0      9   -> ZDO_RegisterForZDOMsg
        0      9   -> ZDO_RegisterForZdoCB
        0      9   -> bdbTL_RegisterInterPANCmdCallbacks
        0      9   -> initiatorClearSelectedTarget
        0      9   -> touchLink_InitVariables
        0      9   -> touchLink_SetTouchLinkTaskId
        0      9   -> zcl_registerForMsg
      2      0   touchLinkInitiator_InitDevice
        2      0   -> ZMacSetReq
        2      0   -> initiatorReJoinNwk
        2      0   -> initiatorSelectNwkParams
        2      0   -> touchLink_PermitJoin
      0      9   touchLinkInitiator_PermitJoin
        0      9   -> touchLink_PermitJoin
      2      0   touchLinkInitiator_RegisterForMsg
      2      0   touchLinkInitiator_RegisterNotifyTLCB
      2      0   touchLinkInitiator_RegisterSelectDiscDevCB
      2      0   touchLinkInitiator_ResetToFNProcedure
        2      0   -> osal_get_timeoutEx
        2      0   -> touchLinkInitiator_StartDevDisc
      0     89   touchLinkInitiator_ResetToFNSelectedTarget
        0     14   -> bdbTL_Send_ResetToFNReq
        0     13   -> osal_stop_timerEx
        0     13   -> touchLink_SetChannel
      1     37   touchLinkInitiator_SendEPInfo
        0     35   -> NLME_GetExtAddr
        0     35   -> NLME_GetShortAddr
        0     37   -> bdbTL_Send_EndpointInfo
        0     35   -> sAddrExtCpy
        0     35   -> touchLink_GetSubDeviceInfo
      0     21   touchLinkInitiator_StartDevDisc
        0     17   -> NLME_SetPollRate
        0     17   -> NLME_SetQueuedPollRate
        0     17   -> NLME_SetResponseRate
        0     17   -> ZDApp_StopJoiningCycle
        0     17   -> ZMacGetReq
        0     17   -> ZMacSetReq
        0     17   -> initiatorSendScanReq
        0     17   -> osal_clear_event
        0     17   -> osal_get_timeoutEx
        0     17   -> osal_rand
        0     21   -> osal_start_timerEx
        0     17   -> touchLinkInitiator_AbortTL
      1     83   touchLinkInitiator_event_loop
        0     75   -> APSME_GetRequest
        0     75   -> AddrMgrEntryUpdate
        0     75   -> NLME_GetExtAddr
        0     75   -> NLME_GetShortAddr
        0     75   -> NLME_SetUpdateID
        0     75   -> ZDApp_LeaveCtrlReset
        0     75   -> ZDApp_StopJoiningCycle
        0     75   -> ZDOInitDeviceEx
        0     76   -> ZDP_DeviceAnnce
        0     75   -> ZDSecMgrUpdateTCAddress
        0     76   -> bdbTL_Send_IndentifyReq
        0     76   -> bdbTL_Send_NwkUpdateReq
        0     75   -> bdb_Initiator_SendNwkJoinReq
        0     75   -> bdb_reportCommissioningState
        0     75   -> initiatorClearSelectedTarget
        0     75   -> initiatorProcessStateChange
        0     75   -> initiatorReJoinNwk
        0     75   -> initiatorSendScanReq
        0     75   -> initiatorSetNwkToInitState
        0     75   -> nwk_ExtPANIDValid
        0     75   -> nwk_setStateIdle
        0     75   -> osal_mem_alloc
        0     75   -> osal_mem_free
        0     78   -> osal_memcpy
        0     75   -> osal_msg_deallocate
        0     75   -> osal_msg_receive
        0     75   -> osal_msg_send
        0     79   -> osal_nv_write
        0     75   -> osal_rand
        0     75   -> osal_set_event
        0     79   -> osal_start_timerEx
        0     75   -> sAddrExtCmp
        0     75   -> sAddrExtCpy
        0     75   -> touchLinkInitiator_ResetToFNSelectedTarget
        0     79   -> touchLinkStartRtr
        0     83   -> touchLink_DecryptNwkKey
        0     75   -> touchLink_DevRejoin
        0     83   -> touchLink_EncryptNwkKey
        0     75   -> touchLink_FreeNwkParamList
        0     75   -> touchLink_GenerateRandNum
        0     75   -> touchLink_GerFreeRanges
        0     75   -> touchLink_GetRandPrimaryChannel
        0     75   -> touchLink_IsValidSplitFreeRanges
        0     75   -> touchLink_IsValidTransID
        0     75   -> touchLink_PerformNetworkDisc
        0     75   -> touchLink_PermitJoin
        0     75   -> touchLink_ProcessNwkUpdate
        0     75   -> touchLink_RouterProcessZDOMsg
        0     75   -> touchLink_SendLeaveReq
        0     75   -> touchLink_SetChannel
        0     79   -> touchLink_SetNIB
        0     75   -> touchLink_UpdateNV
      1     61   touchLink_InitiatorSendScanRsp
        0     23   -> bdbTL_Send_ScanRsp
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     22   -> osal_memset
        0     22   -> osal_rand
        0     26   -> osal_start_timerEx
        0     22   -> sAddrExtCpy
        0     22   -> touchLink_GetNumGrpIDs
        0     22   -> touchLink_GetNumSubDevices
        0     22   -> touchLink_GetNwkKeyBitmask
        0     22   -> touchLink_GetSubDeviceInfo
        0     22   -> touchLink_IsValidSplitFreeRanges


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant {12, 13, 14, 16, 17, 18, 19, 21, 22
       8  ?<Constant {255, 255, 255, 255, 255, 255, 255,
       9  ?<Constant {{0}}>
       1  ?<Initializer for initiatorRegisteredMsgAppTas
      26  ?<Initializer for touchLinkInitiator_CmdCBs>
      10  ??Subroutine44_0
       1  ??Subroutine45_0
       7  ??Subroutine46_0
       5  ??Subroutine47_0
       2  ??Subroutine48_0
       1  ??Subroutine49_0
       5  ??Subroutine50_0
       3  ??Subroutine51_0
      12  ??Subroutine52_0
       8  ??Subroutine53_0
       5  ??Subroutine54_0
       2  ??Subroutine55_0
       9  ??Subroutine56_0
       5  ??Subroutine57_0
       2  ??Subroutine58_0
       3  ??Subroutine59_0
       8  ??Subroutine60_0
       5  ??Subroutine61_0
       6  ??Subroutine62_0
       4  ??Subroutine63_0
       6  ??Subroutine64_0
       2  ??Subroutine65_0
       3  ??Subroutine66_0
      10  ??Subroutine67_0
       3  ??Subroutine68_0
       6  ??Subroutine69_0
       6  ??Subroutine70_0
       4  ?Subroutine0
       3  ?Subroutine1
       4  ?Subroutine10
      23  ?Subroutine11
      23  ?Subroutine12
       4  ?Subroutine13
      19  ?Subroutine14
      10  ?Subroutine15
       2  ?Subroutine16
       3  ?Subroutine17
       2  ?Subroutine18
      11  ?Subroutine19
       3  ?Subroutine2
       8  ?Subroutine20
       4  ?Subroutine21
       1  ?Subroutine22
       4  ?Subroutine23
       9  ?Subroutine24
       8  ?Subroutine25
       1  ?Subroutine26
      12  ?Subroutine27
       8  ?Subroutine28
       9  ?Subroutine29
       3  ?Subroutine3
       9  ?Subroutine30
      10  ?Subroutine31
       4  ?Subroutine32
      13  ?Subroutine33
       5  ?Subroutine34
       9  ?Subroutine35
      12  ?Subroutine36
       8  ?Subroutine37
      10  ?Subroutine38
      10  ?Subroutine39
       5  ?Subroutine4
      11  ?Subroutine40
       6  ?Subroutine41
       6  ?Subroutine42
      12  ?Subroutine43
       5  ?Subroutine5
       2  ?Subroutine6
       2  ?Subroutine7
       4  ?Subroutine8
      23  ?Subroutine9
       4  __Constant_0
       4  __Constant_1388
       4  __Constant_1f4
       4  __Constant_1f40
       4  __Constant_30d4
       4  __Constant_32
       4  __Constant_7d0
       4  __Constant_fa
      12  bcastAddr
      19  bdb_Initiator_SendNwkJoinReq
       1  channelIndex
      16  encKeySent
      25  initiatorClearSelectedTarget
      68  initiatorDeviceInfoReqCB
     455  initiatorDeviceInfoRspCB
      74  initiatorIdentifyReqCB
     118  initiatorNwkJoinEDRspCB
     297  initiatorNwkJoinReqCB
     110  initiatorNwkJoinRtrRspCB
      42  initiatorNwkParams
      56  initiatorNwkStartRspCB
     115  initiatorNwkUpdateReqCB
     155  initiatorProcessStateChange
      73  initiatorReJoinNwk
       1  initiatorRegisteredMsgAppTaskID
     178  initiatorScanReqCB
     372  initiatorScanRspCB
      82  initiatorSelectNwkParams
     526  initiatorSendNwkJoinReq
     299  initiatorSendScanReq
       1  initiatorSeqNum
     142  initiatorSetNwkToInitState
      34  initiatorZdoLeaveCnfCB
       1  keyIndexSent
       1  numScanReqSent
       2  pfnNotifyAppCB
       2  pfnSelectDiscDevCB
       4  responseIDSent
      17  rxRsp
       2  savedPollRate
       2  savedQueuedPollRate
       2  savedResponsePollRate
       1  savedRxOnIdle
       1  scanReqChannels
      54  selectedTarget
       8  selectedTargetIEEEAddr
       2  selectedTargetNwkAddr
      64  touchLinkInitiator_AbortTL
     170  touchLinkInitiator_ChannelChange
      26  touchLinkInitiator_CmdCBs
     135  touchLinkInitiator_Init
      62  touchLinkInitiator_InitDevice
      10  touchLinkInitiator_PermitJoin
      22  touchLinkInitiator_RegisterForMsg
      10  touchLinkInitiator_RegisterNotifyTLCB
      10  touchLinkInitiator_RegisterSelectDiscDevCB
      33  touchLinkInitiator_ResetToFNProcedure
      62  touchLinkInitiator_ResetToFNSelectedTarget
     169  touchLinkInitiator_SendEPInfo
     212  touchLinkInitiator_StartDevDisc
       1  touchLinkInitiator_TaskID
    1852  touchLinkInitiator_event_loop
     518  touchLink_InitiatorSendScanRsp
     198  -- Other

 
 7 010 bytes in segment BANKED_CODE
   198 bytes in segment BANK_RELAYS
    27 bytes in segment XDATA_I
    27 bytes in segment XDATA_ID
    61 bytes in segment XDATA_ROM_C
   172 bytes in segment XDATA_Z
 
   225 bytes of CODE     memory
    29 bytes of CONST    memory (+ 32 bytes shared)
 7 010 bytes of HUGECODE memory
   199 bytes of XDATA    memory

Errors: none
Warnings: none
