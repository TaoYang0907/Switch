###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               29/Jul/2020  20:16:05
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\AA\Z-Stack 3.0.2\Components\stack\bdb\bdb_touchlink.c
#    Command line       =  
#        -f C:\Users\sunli\AppData\Local\Temp\EWC1E3.tmp ("D:\AA\Z-Stack
#        3.0.2\Components\stack\bdb\bdb_touchlink.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D
#        xMT_APP_FUNC -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D
#        xMT_APP_CNF_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_ON_OFF -D ZCL_GROUPS -D BDB_TL_INITIATOR -D INTER_PAN -lC
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\List"
#        -lA "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\List\bdb_touchlink.lst
#    Object file        =  
#        D:\AA\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\RouterEB\Obj\bdb_touchlink.r51
#
###############################################################################

D:\AA\Z-Stack 3.0.2\Components\stack\bdb\bdb_touchlink.c
      1          /**************************************************************************************************
      2            Filename:       bdb_touchlink.c
      3            Revised:        $Date: 2013-12-06 15:53:38 -0800 (Fri, 06 Dec 2013) $
      4            Revision:       $Revision: 36460 $
      5          
      6            Description:    Zigbee Cluster Library - Light Link Profile.
      7          
      8          
      9            Copyright 2011-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "OSAL_Nv.h"
     44          #include "hal_aes.h"
     45          #include "ssp_hash.h"
     46          #include "nwk_util.h"
     47          #include "ZDSecMgr.h"
     48          #include "ZDObject.h"
     49          
     50          #if defined( INTER_PAN )
     51            #include "stub_aps.h"
     52          #if defined ( BDB_TL_INITIATOR )
     53            #include "bdb_touchlink_initiator.h"
     54          #endif // BDB_TL_INITIATOR
     55          #if defined ( BDB_TL_TARGET )
     56            #include "bdb_touchlink_target.h"
     57          #endif // BDB_TL_TARGET
     58          #endif
     59          
     60          #include "bdb.h"
     61          #include "bdb_interface.h"
     62          #include "bdb_tlCommissioning.h"
     63          #include "bdb_touchlink.h"
     64          
     65          #if defined ( BDB_TL_TARGET ) || defined ( BDB_TL_INITIATOR )
     66          
     67          /*********************************************************************
     68           * MACROS
     69           */
     70          #define TOUCHLINK_NEW_MIN( min, max )                  ( ( (uint32)(max) + (uint32)(min) + 1 ) / 2 )
     71          
     72          /*********************************************************************
     73           * CONSTANTS
     74           */
     75          
     76          #define TOUCHLINK_NUM_DEVICE_INFO_ENTRIES              5
     77          
     78          
     79          /*********************************************************************
     80           * TYPEDEFS
     81           */
     82          
     83          /*********************************************************************
     84           * GLOBAL VARIABLES
     85           */
     86          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     87          uint32 touchLinkLastAcceptedTransID;
   \                     touchLinkLastAcceptedTransID:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     88             
     89          // Used for Network Discovery

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     90          touchLinkDiscoveredNwkParam_t *pDiscoveredNwkParamList = NULL;
   \                     pDiscoveredNwkParamList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     91          
     92          // Current Touch Link Transaction ID

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     93          uint32 touchLinkTransID;
   \                     touchLinkTransID:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     94          
     95          // Scan Response ID

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     96          uint32 touchLinkResponseID;
   \                     touchLinkResponseID:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     97          
     98          // Our group ID range

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     99          uint16 touchLinkGrpIDsBegin;
   \                     touchLinkGrpIDsBegin:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    100          uint16 touchLinkGrpIDsEnd;
   \                     touchLinkGrpIDsEnd:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    101          
    102          // Flag for leave

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          uint8 touchLinkLeaveInitiated;
   \                     touchLinkLeaveInitiated:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    104          
    105          // Device Information Table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    106          bdbTLDeviceInfo_t *touchLinkSubDevicesTbl[5];
   \                     touchLinkSubDevicesTbl:
   \   000000                DS 10
   \   00000A                REQUIRE __INIT_XDATA_Z
    107          
    108          // Touchlink distributed network flag

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    109          bool touchlinkDistNwk = FALSE;
   \                     touchlinkDistNwk:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    110          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    111          bool touchlinkFNReset;
   \                     touchlinkFNReset:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    112          
    113          /*********************************************************************
    114           * EXTERNAL VARIABLES
    115           */
    116          
    117          /*********************************************************************
    118           * EXTERNAL FUNCTIONS
    119           */
    120          
    121          /*********************************************************************
    122           * LOCAL VARIABLES
    123           */
    124          // TOUCHLINK Profile attributes - Our free network address and group ID ranges

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    125          static uint16 touchLinkFreeNwkAddrBegin;
   \                     touchLinkFreeNwkAddrBegin:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    126          static uint16 touchLinkFreeNwkAddrEnd;
   \                     touchLinkFreeNwkAddrEnd:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          static uint16 touchLinkFreeGrpIdBegin;
   \                     touchLinkFreeGrpIdBegin:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    128          static uint16 touchLinkFreeGrpIdEnd;
   \                     touchLinkFreeGrpIdEnd:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    129          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    130          static bool touchLinkIsInitiator;
   \                     touchLinkIsInitiator:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          static uint8 touchLinkTaskId;
   \                     touchLinkTaskId:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    132          
    133          // This is the Cluster ID List and should be filled with Application
    134          // specific cluster IDs.
    135          #define TOUCHLINK_EP_MAX_INCLUSTERS       1

   \                                 In  segment XDATA_ROM_C, align 1
    136          static const cId_t touchLink_EP_InClusterList[TOUCHLINK_EP_MAX_INCLUSTERS] =
   \                     touchLink_EP_InClusterList:
   \   000000   0010         DW 4096
    137          {
    138            ZCL_CLUSTER_ID_TOUCHLINK
    139          };
    140          
    141          #define TOUCHLINK_EP_MAX_OUTCLUSTERS       1

   \                                 In  segment XDATA_ROM_C, align 1
    142          static const cId_t touchLink_EP_OutClusterList[TOUCHLINK_EP_MAX_OUTCLUSTERS] =
   \                     touchLink_EP_OutClusterList:
   \   000000   0010         DW 4096
    143          {
    144            ZCL_CLUSTER_ID_TOUCHLINK
    145          };
    146          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    147          static SimpleDescriptionFormat_t touchLink_EP_SimpleDesc =
   \                     touchLink_EP_SimpleDesc:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for touchLink_EP_SimpleDesc>`
   \   00000C                REQUIRE __INIT_XDATA_I
    148          {
    149            TOUCHLINK_INTERNAL_ENDPOINT,         //  int Endpoint;
    150            TOUCHLINK_PROFILE_ID,                //  uint16 AppProfId[2];
    151            TOUCHLINK_INTERNAL_DEVICE_ID,        //  uint16 AppDeviceId[2];
    152            TOUCHLINK_DEVICE_VERSION,            //  int   AppDevVer:4;
    153            TOUCHLINK_INTERNAL_FLAGS,            //  int   AppFlags:4;
    154            TOUCHLINK_EP_MAX_INCLUSTERS,         //  byte  AppNumInClusters;
    155            (cId_t *)touchLink_EP_InClusterList, //  byte *pAppInClusterList;
    156            TOUCHLINK_EP_MAX_OUTCLUSTERS,        //  byte  AppNumInClusters;
    157            (cId_t *)touchLink_EP_OutClusterList //  byte *pAppInClusterList;
    158          };
    159          
    160          #if defined( INTER_PAN )
    161          // Define endpoint structure to register with STUB APS for INTER-PAN support

   \                                 In  segment XDATA_I, align 1, keep-with-next
    162          static endPointDesc_t touchLink_EP =
   \                     touchLink_EP:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for touchLink_EP>`
   \   000007                REQUIRE __INIT_XDATA_I
    163          {
    164            TOUCHLINK_INTERNAL_ENDPOINT,
    165            0,
    166            &touchLinkTaskId,
    167            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this endpoint
    168            (afNetworkLatencyReq_t)0            // No Network Latency req
    169          };
    170          #endif
    171          
    172          
    173          /*********************************************************************
    174           * LOCAL FUNCTIONS
    175           */
    176          static void touchLink_BuildAesKey( uint8 *pAesKey, uint32 transID, uint32 responseID, uint8 keyIndex );
    177          void touchLink_ItemInit( uint16 id, uint16 len, void *pBuf );
    178          static void *touchLink_BeaconIndCB ( void *param );
    179          static void *touchLink_NwkDiscoveryCnfCB ( void *param );
    180          static void touchLink_InitNV( void );
    181          
    182          /*********************************************************************
    183           * PUBLIC FUNCTIONS
    184           */
    185          
    186          /*********************************************************************
    187           * @fn      touchLink_InitVariables
    188           *
    189           * @brief   Initialize the TOUCHLINK global and local variables.
    190           *
    191           * @param   initiator - if caller is Initiator
    192           *
    193           * @return  none
    194           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    195          void touchLink_InitVariables( bool initiator )
   \                     touchLink_InitVariables:
    196          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    197            touchLinkTransID = 0;
   \   000007   90....       MOV       DPTR,#touchLinkTransID
   \   00000A   E4           CLR       A
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   A3           INC       DPTR
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   A3           INC       DPTR
   \   00000F   F0           MOVX      @DPTR,A
   \   000010   A3           INC       DPTR
   \   000011   F0           MOVX      @DPTR,A
    198            touchLinkIsInitiator = initiator;
   \   000012   E9           MOV       A,R1
   \   000013   90....       MOV       DPTR,#touchLinkIsInitiator
   \   000016   F0           MOVX      @DPTR,A
    199          
    200            if ( bdbAttributes.bdbNodeIsOnANetwork == FALSE )
   \   000017   90....       MOV       DPTR,#bdbAttributes + 14
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   7009         JNZ       ??touchLink_InitVariables_0
    201            {
    202              _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   00001D   90....       MOV       DPTR,#_NIB + 20
   \   000020   74FE         MOV       A,#-0x2
   \   000022   F0           MOVX      @DPTR,A
   \   000023   A3           INC       DPTR
   \   000024   04           INC       A
   \   000025   F0           MOVX      @DPTR,A
    203            }
    204          
    205            // verify groups communication is initiated by broadcasts rather than multicasts
    206            _NIB.nwkUseMultiCast = FALSE;
   \                     ??touchLink_InitVariables_0:
   \   000026   90....       MOV       DPTR,#_NIB + 100
   \   000029   E4           CLR       A
   \   00002A   F0           MOVX      @DPTR,A
    207            // detect and remove stored deprecated end device children after power up
    208            zgRouterOffAssocCleanup = TRUE;
   \   00002B   90....       MOV       DPTR,#zgRouterOffAssocCleanup
   \   00002E   04           INC       A
   \   00002F   F0           MOVX      @DPTR,A
    209            osal_nv_write(ZCD_NV_ROUTER_OFF_ASSOC_CLEANUP, 0, sizeof(zgRouterOffAssocCleanup), &zgRouterOffAssocCleanup);
   \   000030                ; Setup parameters for call to function osal_nv_write
   \   000030   75....       MOV       ?V0,#zgRouterOffAssocCleanup & 0xff
   \   000033   75....       MOV       ?V1,#(zgRouterOffAssocCleanup >> 8) & 0xff
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   75..01       MOV       ?V0,#0x1
   \   00003E   75..00       MOV       ?V1,#0x0
   \   000041   78..         MOV       R0,#?V0
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000046   7C00         MOV       R4,#0x0
   \   000048   7D00         MOV       R5,#0x0
   \   00004A   7A3C         MOV       R2,#0x3c
   \   00004C   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00004F   12....       LCALL     ?DEALLOC_XSTACK8
    210          
    211            touchLink_InitFreeRanges( initiator );
   \   000052                ; Setup parameters for call to function touchLink_InitFreeRanges
   \   000052   EE           MOV       A,R6
   \   000053   F9           MOV       R1,A
   \   000054   12....       LCALL     `??touchLink_InitFreeRanges::?relay`; Banked call to: touchLink_InitFreeRanges
    212          
    213            touchLink_InitNV();
   \   000057                ; Setup parameters for call to function touchLink_ItemInit
   \   000057   75....       MOV       ?V0,#touchLinkFreeNwkAddrBegin & 0xff
   \   00005A   75....       MOV       ?V1,#(touchLinkFreeNwkAddrBegin >> 8) & 0xff
   \   00005D   78..         MOV       R0,#?V0
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000062   7C02         MOV       R4,#0x2
   \   000064   7D00         MOV       R5,#0x0
   \   000066   7A92         MOV       R2,#-0x6e
   \   000068   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00006B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006E                ; Setup parameters for call to function touchLink_ItemInit
   \   00006E   75....       MOV       ?V0,#touchLinkFreeNwkAddrEnd & 0xff
   \   000071   75....       MOV       ?V1,#(touchLinkFreeNwkAddrEnd >> 8) & 0xff
   \   000074   78..         MOV       R0,#?V0
   \   000076   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000079   7C02         MOV       R4,#0x2
   \   00007B   7D00         MOV       R5,#0x0
   \   00007D   7A93         MOV       R2,#-0x6d
   \   00007F   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000082   12....       LCALL     ?DEALLOC_XSTACK8
   \   000085                ; Setup parameters for call to function touchLink_ItemInit
   \   000085   75....       MOV       ?V0,#touchLinkFreeGrpIdBegin & 0xff
   \   000088   75....       MOV       ?V1,#(touchLinkFreeGrpIdBegin >> 8) & 0xff
   \   00008B   78..         MOV       R0,#?V0
   \   00008D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000090   7C02         MOV       R4,#0x2
   \   000092   7D00         MOV       R5,#0x0
   \   000094   7A94         MOV       R2,#-0x6c
   \   000096   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000099   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009C                ; Setup parameters for call to function touchLink_ItemInit
   \   00009C   75....       MOV       ?V0,#touchLinkFreeGrpIdEnd & 0xff
   \   00009F   75....       MOV       ?V1,#(touchLinkFreeGrpIdEnd >> 8) & 0xff
   \   0000A2   78..         MOV       R0,#?V0
   \   0000A4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A7   7C02         MOV       R4,#0x2
   \   0000A9   7D00         MOV       R5,#0x0
   \   0000AB   7A95         MOV       R2,#-0x6b
   \   0000AD   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0000B0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B3                ; Setup parameters for call to function touchLink_ItemInit
   \   0000B3   75....       MOV       ?V0,#touchLinkGrpIDsBegin & 0xff
   \   0000B6   75....       MOV       ?V1,#(touchLinkGrpIDsBegin >> 8) & 0xff
   \   0000B9   78..         MOV       R0,#?V0
   \   0000BB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BE   7C02         MOV       R4,#0x2
   \   0000C0   7D00         MOV       R5,#0x0
   \   0000C2   7A96         MOV       R2,#-0x6a
   \   0000C4   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000C7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000CA                ; Setup parameters for call to function touchLink_ItemInit
   \   0000CA   75....       MOV       ?V0,#touchLinkGrpIDsEnd & 0xff
   \   0000CD   75....       MOV       ?V1,#(touchLinkGrpIDsEnd >> 8) & 0xff
   \   0000D0   78..         MOV       R0,#?V0
   \   0000D2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D5   7C02         MOV       R4,#0x2
   \   0000D7   7D00         MOV       R5,#0x0
   \   0000D9   7A97         MOV       R2,#-0x69
   \   0000DB   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0000DE   12....       LCALL     ?DEALLOC_XSTACK8
    214          
    215            touchLinkLeaveInitiated = FALSE;
   \   0000E1   90....       MOV       DPTR,#touchLinkLeaveInitiated
   \   0000E4   E4           CLR       A
   \   0000E5   F0           MOVX      @DPTR,A
    216          
    217            // Initialize device info table
    218            osal_memset( touchLinkSubDevicesTbl, 0, sizeof( touchLinkSubDevicesTbl ) );
   \   0000E6                ; Setup parameters for call to function osal_memset
   \   0000E6   7C0A         MOV       R4,#0xa
   \   0000E8   FD           MOV       R5,A
   \   0000E9   F9           MOV       R1,A
   \   0000EA   7A..         MOV       R2,#touchLinkSubDevicesTbl & 0xff
   \   0000EC   7B..         MOV       R3,#(touchLinkSubDevicesTbl >> 8) & 0xff
   \   0000EE   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    219            
    220            touchLinkIsInitiator = FALSE;
   \   0000F1   90....       MOV       DPTR,#touchLinkIsInitiator
   \   0000F4   E4           CLR       A
   \   0000F5   F0           MOVX      @DPTR,A
    221            
    222            // set broadcast address mask to support broadcast filtering
    223            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   0000F6                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   0000F6   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000F9   E0           MOVX      A,@DPTR
   \   0000FA   F9           MOV       R1,A
   \   0000FB   12....       LCALL     `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
    224          }
   \   0000FE   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000005   7404         MOV       A,#0x4
   \   000007   22           RET
    225          
    226          /*********************************************************************
    227           * @fn      touchLink_InitFreeRanges
    228           *
    229           * @brief   Initialize the TOUCHLINK free range global variables.
    230           *
    231           * @param   initiator - if caller is link initiator
    232           *
    233           * @return  none
    234           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    235          void touchLink_InitFreeRanges( bool initiator )
   \                     touchLink_InitFreeRanges:
    236          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    237            // Initialize our free network address and group ID ranges
    238            if ( initiator )
   \   000004   E9           MOV       A,R1
   \   000005   6026         JZ        ??touchLink_InitFreeRanges_0
    239            {
    240              touchLinkFreeNwkAddrBegin = APL_FREE_NWK_ADDR_RANGE_BEGIN;
   \   000007   90....       MOV       DPTR,#touchLinkFreeNwkAddrBegin
   \   00000A   7401         MOV       A,#0x1
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   A3           INC       DPTR
   \   00000E   E4           CLR       A
   \   00000F   F0           MOVX      @DPTR,A
    241              touchLinkFreeNwkAddrEnd = APL_FREE_NWK_ADDR_RANGE_END;
   \   000010   90....       MOV       DPTR,#touchLinkFreeNwkAddrEnd
   \   000013   74F7         MOV       A,#-0x9
   \   000015   F0           MOVX      @DPTR,A
   \   000016   A3           INC       DPTR
   \   000017   74FF         MOV       A,#-0x1
   \   000019   F0           MOVX      @DPTR,A
    242          
    243              touchLinkFreeGrpIdBegin = APL_FREE_GROUP_ID_RANGE_BEGIN;
   \   00001A   90....       MOV       DPTR,#touchLinkFreeGrpIdBegin
   \   00001D   7401         MOV       A,#0x1
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   A3           INC       DPTR
   \   000021   E4           CLR       A
   \   000022   F0           MOVX      @DPTR,A
    244              touchLinkFreeGrpIdEnd = APL_FREE_GROUP_ID_RANGE_END;
   \   000023   90....       MOV       DPTR,#touchLinkFreeGrpIdEnd
   \   000026   74FF         MOV       A,#-0x1
   \   000028   F0           MOVX      @DPTR,A
   \   000029   A3           INC       DPTR
   \   00002A   14           DEC       A
   \   00002B   8018         SJMP      ??touchLink_InitFreeRanges_1
    245            }
    246            else
    247            {
    248              touchLinkFreeNwkAddrBegin = touchLinkFreeNwkAddrEnd = 0;
   \                     ??touchLink_InitFreeRanges_0:
   \   00002D   90....       MOV       DPTR,#touchLinkFreeNwkAddrEnd
   \   000030   E4           CLR       A
   \   000031   F0           MOVX      @DPTR,A
   \   000032   A3           INC       DPTR
   \   000033   F0           MOVX      @DPTR,A
   \   000034   90....       MOV       DPTR,#touchLinkFreeNwkAddrBegin
   \   000037   F0           MOVX      @DPTR,A
   \   000038   A3           INC       DPTR
   \   000039   F0           MOVX      @DPTR,A
    249              touchLinkFreeGrpIdBegin = touchLinkFreeGrpIdEnd = 0;
   \   00003A   90....       MOV       DPTR,#touchLinkFreeGrpIdEnd
   \   00003D   F0           MOVX      @DPTR,A
   \   00003E   A3           INC       DPTR
   \   00003F   F0           MOVX      @DPTR,A
   \   000040   90....       MOV       DPTR,#touchLinkFreeGrpIdBegin
   \   000043   F0           MOVX      @DPTR,A
   \   000044   A3           INC       DPTR
   \                     ??touchLink_InitFreeRanges_1:
   \   000045   F0           MOVX      @DPTR,A
    250            }
    251          
    252            // Initialize our local group ID range
    253            touchLinkGrpIDsBegin = touchLinkGrpIDsEnd = 0;
   \   000046   90....       MOV       DPTR,#touchLinkGrpIDsEnd
   \   000049   E4           CLR       A
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B   A3           INC       DPTR
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   90....       MOV       DPTR,#touchLinkGrpIDsBegin
   \   000050   F0           MOVX      @DPTR,A
   \   000051   A3           INC       DPTR
   \   000052   02....       LJMP      ??Subroutine45_0 & 0xFFFF
    254          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                REQUIRE ??Subroutine46_0
   \   000001                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    255          
    256          /*********************************************************************
    257           * @fn      touchLink_UpdateFreeRanges
    258           *
    259           * @brief   Update the TOUCHLINK free range global variables.
    260           *
    261           * @param   pParams - new parameters
    262           *
    263           * @return  none
    264           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          void touchLink_UpdateFreeRanges( bdbTLNwkParams_t *pParams )
   \                     touchLink_UpdateFreeRanges:
    266          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    267            // Set our free network address and group ID ranges
    268            touchLinkFreeNwkAddrBegin = pParams->freeNwkAddrBegin;
   \   000004   EA           MOV       A,R2
   \   000005   2422         ADD       A,#0x22
   \   000007   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   00000A   90....       MOV       DPTR,#touchLinkFreeNwkAddrBegin
   \   00000D   12....       LCALL     ?Subroutine10 & 0xFFFF
    269            touchLinkFreeNwkAddrEnd = pParams->freeNwkAddrEnd;
   \                     ??CrossCallReturnLabel_8:
   \   000010   2424         ADD       A,#0x24
   \   000012   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000015   90....       MOV       DPTR,#touchLinkFreeNwkAddrEnd
   \   000018   12....       LCALL     ?Subroutine10 & 0xFFFF
    270            touchLinkFreeGrpIdBegin = pParams->freeGrpIDBegin;
   \                     ??CrossCallReturnLabel_9:
   \   00001B   2426         ADD       A,#0x26
   \   00001D   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000020   90....       MOV       DPTR,#touchLinkFreeGrpIdBegin
   \   000023   12....       LCALL     ?Subroutine10 & 0xFFFF
    271            touchLinkFreeGrpIdEnd = pParams->freeGrpIDEnd;
   \                     ??CrossCallReturnLabel_10:
   \   000026   2428         ADD       A,#0x28
   \   000028   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   00002B   90....       MOV       DPTR,#touchLinkFreeGrpIdEnd
   \   00002E   12....       LCALL     ?Subroutine10 & 0xFFFF
    272          
    273            // Set our group ID range
    274            touchLinkGrpIDsBegin = pParams->grpIDsBegin;
   \                     ??CrossCallReturnLabel_11:
   \   000031   241E         ADD       A,#0x1e
   \   000033   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000036   90....       MOV       DPTR,#touchLinkGrpIDsBegin
   \   000039   12....       LCALL     ?Subroutine10 & 0xFFFF
    275            touchLinkGrpIDsEnd = pParams->grpIDsEnd;
   \                     ??CrossCallReturnLabel_12:
   \   00003C   2420         ADD       A,#0x20
   \   00003E   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000041   90....       MOV       DPTR,#touchLinkGrpIDsEnd
   \   000044   02....       LJMP      ?Subroutine1 & 0xFFFF
    276          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   EA           MOV       A,R2
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004                REQUIRE ??Subroutine45_0
   \   000004                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3B           ADDC      A,R3
   \   000004                REQUIRE ??Subroutine52_0
   \   000004                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine53_0
   \   000002                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000003   22           RET
    277          
    278          /*********************************************************************
    279           * @fn      touchLink_GerFreeRanges
    280           *
    281           * @brief   Get the TOUCHLINK free range global variables.
    282           *
    283           * @param   pParams - parameter to get
    284           *
    285           * @return  none
    286           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    287          void touchLink_GerFreeRanges( bdbTLNwkParams_t *pParams )
   \                     touchLink_GerFreeRanges:
    288          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    289            // Set our free network address and group ID ranges
    290            pParams->freeNwkAddrBegin = touchLinkFreeNwkAddrBegin;
   \   000004   90....       MOV       DPTR,#touchLinkFreeNwkAddrBegin
   \   000007   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00000A   2422         ADD       A,#0x22
   \   00000C   F582         MOV       DPL,A
   \   00000E   E4           CLR       A
   \   00000F   3B           ADDC      A,R3
   \   000010   F583         MOV       DPH,A
   \   000012   E8           MOV       A,R0
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   E9           MOV       A,R1
   \   000016   12....       LCALL     ?Subroutine14 & 0xFFFF
    291            pParams->freeNwkAddrEnd = touchLinkFreeNwkAddrEnd;
   \                     ??CrossCallReturnLabel_17:
   \   000019   EA           MOV       A,R2
   \   00001A   2424         ADD       A,#0x24
   \   00001C   F582         MOV       DPL,A
   \   00001E   E4           CLR       A
   \   00001F   3B           ADDC      A,R3
   \   000020   F583         MOV       DPH,A
   \   000022   E8           MOV       A,R0
   \   000023   12....       LCALL     ?Subroutine16 & 0xFFFF
    292            pParams->freeGrpIDBegin = touchLinkFreeGrpIdBegin;
   \                     ??CrossCallReturnLabel_21:
   \   000026   F8           MOV       R0,A
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F9           MOV       R1,A
   \   00002A   EA           MOV       A,R2
   \   00002B   2426         ADD       A,#0x26
   \   00002D   F582         MOV       DPL,A
   \   00002F   E4           CLR       A
   \   000030   3B           ADDC      A,R3
   \   000031   F583         MOV       DPH,A
   \   000033   12....       LCALL     ?Subroutine9 & 0xFFFF
    293            pParams->freeGrpIDEnd = touchLinkFreeGrpIdEnd;
   \                     ??CrossCallReturnLabel_6:
   \   000036   EA           MOV       A,R2
   \   000037   2428         ADD       A,#0x28
   \   000039   12....       LCALL     ?Subroutine17 & 0xFFFF
    294            
    295              // Set our group ID range
    296            pParams->grpIDsBegin = touchLinkGrpIDsBegin;
   \                     ??CrossCallReturnLabel_104:
   \   00003C   90....       MOV       DPTR,#touchLinkGrpIDsBegin
   \   00003F   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000042   241E         ADD       A,#0x1e
   \   000044   12....       LCALL     ?Subroutine17 & 0xFFFF
    297            pParams->grpIDsEnd = touchLinkGrpIDsEnd;
   \                     ??CrossCallReturnLabel_105:
   \   000047   90....       MOV       DPTR,#touchLinkGrpIDsEnd
   \   00004A   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00004D   2420         ADD       A,#0x20
   \   00004F   F582         MOV       DPL,A
   \   000051   E4           CLR       A
   \   000052   3B           ADDC      A,R3
   \   000053   F583         MOV       DPH,A
   \   000055   02....       LJMP      ?Subroutine1 & 0xFFFF
    298          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000003   EA           MOV       A,R2
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#touchLinkFreeNwkAddrEnd
   \   000004   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   90....       MOV       DPTR,#touchLinkFreeGrpIdEnd
   \   000008   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   90....       MOV       DPTR,#touchLinkFreeGrpIdBegin
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3B           ADDC      A,R3
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine51_0
   \   000006                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
    299          
    300          /*********************************************************************
    301           * @fn      touchLink_IsValidSplitFreeRanges
    302           *
    303           * @brief   Checks to see if the resulting two ranges are not smaller
    304           *          than the threshold after division of a network address or
    305           *          group ID range. The Initiator splits its own free range
    306           *          in half and assigns the top half to the new device.
    307           *
    308           *          Note: A range (Nmin...Nmax) is split as follows:
    309           *
    310           *                N'min = (Nmax + Nmin + 1)/2
    311           *                N'max = Nmax
    312           *                Nmax = N'min - 1
    313           *
    314           * @param   totalGrpIDs - total number of group IDs needed
    315           *
    316           * @return  TRUE if split possible. FALSE, otherwise.
    317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    318          bool touchLink_IsValidSplitFreeRanges( uint8 totalGrpIDs )
   \                     touchLink_IsValidSplitFreeRanges:
    319          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   FC           MOV       R4,A
    320            if ( ( touchLinkFreeNwkAddrBegin != 0 ) && ( touchLinkFreeGrpIdBegin != 0 ) )
   \   000006   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000009   605F         JZ        ??touchLink_IsValidSplitFreeRanges_0
   \   00000B   90....       MOV       DPTR,#touchLinkFreeGrpIdBegin
   \   00000E   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000011   6057         JZ        ??touchLink_IsValidSplitFreeRanges_0
    321            {
    322                return ( ( ( ( touchLinkFreeNwkAddrEnd - touchLinkFreeNwkAddrBegin ) / 2 ) >= APL_FREE_ADDR_THRESHOLD ) &&
    323                         ( ( ( touchLinkFreeGrpIdEnd - ( touchLinkFreeGrpIdBegin + totalGrpIDs - 1 ) ) / 2 ) >= APL_FREE_GROUP_ID_THRESHOLD ) );
   \   000013   90....       MOV       DPTR,#touchLinkFreeNwkAddrBegin
   \   000016   12....       LCALL     ??Subroutine53_0 & 0xFFFF
    324          
    325            }
   \                     ??CrossCallReturnLabel_106:
   \   000019   7583..       MOV       DPH,#(touchLinkFreeNwkAddrEnd >> 8) & 0xff
   \   00001C   7582..       MOV       DPL,#touchLinkFreeNwkAddrEnd & 0xff
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   C3           CLR       C
   \   000021   98           SUBB      A,R0
   \   000022   F8           MOV       R0,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   99           SUBB      A,R1
   \   000026   C3           CLR       C
   \   000027   13           RRC       A
   \   000028   F9           MOV       R1,A
   \   000029   E8           MOV       A,R0
   \   00002A   13           RRC       A
   \   00002B   C3           CLR       C
   \   00002C   940A         SUBB      A,#0xa
   \   00002E   E9           MOV       A,R1
   \   00002F   9400         SUBB      A,#0x0
   \   000031   4037         JC        ??touchLink_IsValidSplitFreeRanges_0
   \   000033   90....       MOV       DPTR,#touchLinkFreeGrpIdBegin
   \   000036   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000039   7583..       MOV       DPH,#(touchLinkFreeGrpIdEnd >> 8) & 0xff
   \   00003C   7582..       MOV       DPL,#touchLinkFreeGrpIdEnd & 0xff
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   C3           CLR       C
   \   000041   98           SUBB      A,R0
   \   000042   F8           MOV       R0,A
   \   000043   A3           INC       DPTR
   \   000044   E0           MOVX      A,@DPTR
   \   000045   99           SUBB      A,R1
   \   000046   F9           MOV       R1,A
   \   000047   EC           MOV       A,R4
   \   000048   FA           MOV       R2,A
   \   000049   E8           MOV       A,R0
   \   00004A   C3           CLR       C
   \   00004B   9A           SUBB      A,R2
   \   00004C   F8           MOV       R0,A
   \   00004D   E9           MOV       A,R1
   \   00004E   9400         SUBB      A,#0x0
   \   000050   F9           MOV       R1,A
   \   000051   E8           MOV       A,R0
   \   000052   2401         ADD       A,#0x1
   \   000054   08           INC       R0
   \   000055   5001         JNC       ??touchLink_IsValidSplitFreeRanges_1
   \   000057   09           INC       R1
   \                     ??touchLink_IsValidSplitFreeRanges_1:
   \   000058   E9           MOV       A,R1
   \   000059   C3           CLR       C
   \   00005A   13           RRC       A
   \   00005B   F9           MOV       R1,A
   \   00005C   E8           MOV       A,R0
   \   00005D   13           RRC       A
   \   00005E   C3           CLR       C
   \   00005F   940A         SUBB      A,#0xa
   \   000061   E9           MOV       A,R1
   \   000062   9400         SUBB      A,#0x0
   \   000064   4004         JC        ??touchLink_IsValidSplitFreeRanges_0
   \   000066   7901         MOV       R1,#0x1
   \   000068   8002         SJMP      ??touchLink_IsValidSplitFreeRanges_2
    326          
    327            return ( FALSE );
   \                     ??touchLink_IsValidSplitFreeRanges_0:
   \   00006A   7900         MOV       R1,#0x0
   \                     ??touchLink_IsValidSplitFreeRanges_2:
   \   00006C   02....       LJMP      ??Subroutine46_0 & 0xFFFF
    328          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   90....       MOV       DPTR,#touchLinkFreeNwkAddrBegin
   \   000003                REQUIRE ??Subroutine43_0
   \   000003                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET
    329          
    330          /*********************************************************************
    331           * @fn      touchLink_SplitFreeRanges
    332           *
    333           * @brief   Split our own free network address and group ID ranges
    334           *          in half and assign the top half to the new device.
    335           *
    336           *          Note: A range (Nmin...Nmax) is split as follows:
    337           *
    338           *                N'min = (Nmax + Nmin + 1)/2
    339           *                N'max = Nmax
    340           *                Nmax = N'min - 1
    341           *
    342           * output parameters
    343           *
    344           * @param   pAddrBegin - new address range begin
    345           * @param   pAddrEnd - new address range end
    346           * @param   pGrpIdBegin - new group id range begin
    347           * @param   pGrpIdEnd - new group id range end
    348           *
    349           * @return  none
    350           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    351          void touchLink_SplitFreeRanges( uint16 *pAddrBegin, uint16 *pAddrEnd,
   \                     touchLink_SplitFreeRanges:
    352                                  uint16 *pGrpIdBegin, uint16 *pGrpIdEnd )
    353          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV       ?V8,R4
   \   000007   8D..         MOV       ?V9,R5
   \   000009   7412         MOV       A,#0x12
   \   00000B   12....       LCALL     ?XSTACK_DISP0_8
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   FC           MOV       R4,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   FD           MOV       R5,A
   \   000013   7414         MOV       A,#0x14
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   12....       LCALL     ?Subroutine24 & 0xFFFF
    354            if ( ( touchLinkFreeNwkAddrBegin != 0 ) && ( touchLinkFreeGrpIdBegin != 0 ) )
   \                     ??CrossCallReturnLabel_35:
   \   00001B   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   00001E   7003         JNZ       $+5
   \   000020   02....       LJMP      ??touchLink_SplitFreeRanges_0 & 0xFFFF
   \   000023   90....       MOV       DPTR,#touchLinkFreeGrpIdBegin
   \   000026   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000029   7003         JNZ       $+5
   \   00002B   02....       LJMP      ??touchLink_SplitFreeRanges_0 & 0xFFFF
    355            {
    356              *pAddrBegin = TOUCHLINK_NEW_MIN( touchLinkFreeNwkAddrBegin, touchLinkFreeNwkAddrEnd );
   \   00002E   90....       MOV       DPTR,#touchLinkFreeNwkAddrEnd
   \   000031   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000034   90....       MOV       DPTR,#touchLinkFreeNwkAddrBegin
   \   000037   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   00003A   E4           CLR       A
   \   00003B   F5..         MOV       ?V2,A
   \   00003D   F5..         MOV       ?V3,A
   \   00003F   78..         MOV       R0,#?V4
   \   000041   79..         MOV       R1,#?V0
   \   000043   12....       LCALL     ?L_ADD
   \   000046   90....       MOV       DPTR,#__Constant_1
   \   000049   78..         MOV       R0,#?V4
   \   00004B   12....       LCALL     ?L_ADD_X
   \   00004E   7401         MOV       A,#0x1
   \   000050   78..         MOV       R0,#?V4
   \   000052   12....       LCALL     ?UL_SHR
   \   000055   8A82         MOV       DPL,R2
   \   000057   8B83         MOV       DPH,R3
   \   000059   E5..         MOV       A,?V4
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   A3           INC       DPTR
   \   00005D   E5..         MOV       A,?V5
   \   00005F   F0           MOVX      @DPTR,A
    357              *pGrpIdBegin = TOUCHLINK_NEW_MIN( touchLinkFreeGrpIdBegin, touchLinkFreeGrpIdEnd );
   \   000060   90....       MOV       DPTR,#touchLinkFreeGrpIdEnd
   \   000063   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000066   90....       MOV       DPTR,#touchLinkFreeGrpIdBegin
   \   000069   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00006C   78..         MOV       R0,#?V4
   \   00006E   79..         MOV       R1,#?V0
   \   000070   12....       LCALL     ?L_ADD
   \   000073   90....       MOV       DPTR,#__Constant_1
   \   000076   78..         MOV       R0,#?V4
   \   000078   12....       LCALL     ?L_ADD_X
   \   00007B   7401         MOV       A,#0x1
   \   00007D   78..         MOV       R0,#?V4
   \   00007F   12....       LCALL     ?UL_SHR
   \   000082   8C82         MOV       DPL,R4
   \   000084   8D83         MOV       DPH,R5
   \   000086   E5..         MOV       A,?V4
   \   000088   F0           MOVX      @DPTR,A
   \   000089   A3           INC       DPTR
   \   00008A   E5..         MOV       A,?V5
   \   00008C   12....       LCALL     ?Subroutine14 & 0xFFFF
    358          
    359              *pAddrEnd = touchLinkFreeNwkAddrEnd;
   \                     ??CrossCallReturnLabel_18:
   \   00008F   85..82       MOV       DPL,?V8
   \   000092   85..83       MOV       DPH,?V9
   \   000095   12....       LCALL     ?Subroutine9 & 0xFFFF
    360              *pGrpIdEnd = touchLinkFreeGrpIdEnd;
   \                     ??CrossCallReturnLabel_7:
   \   000098   8E82         MOV       DPL,R6
   \   00009A   8F83         MOV       DPH,R7
   \   00009C   E8           MOV       A,R0
   \   00009D   F0           MOVX      @DPTR,A
   \   00009E   A3           INC       DPTR
   \   00009F   E9           MOV       A,R1
   \   0000A0   12....       LCALL     ??Subroutine49_0 & 0xFFFF
    361          
    362              // Update our max
    363              touchLinkFreeNwkAddrEnd = *pAddrBegin - 1;
   \                     ??CrossCallReturnLabel_96:
   \   0000A3   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000A6   90....       MOV       DPTR,#touchLinkFreeNwkAddrEnd
   \   0000A9   12....       LCALL     ??Subroutine51_0 & 0xFFFF
    364              touchLinkFreeGrpIdEnd = *pGrpIdBegin - 1;
   \                     ??CrossCallReturnLabel_100:
   \   0000AC   8C82         MOV       DPL,R4
   \   0000AE   8D83         MOV       DPH,R5
   \   0000B0   12....       LCALL     ?Subroutine21 & 0xFFFF
    365            }
   \                     ??CrossCallReturnLabel_28:
   \   0000B3   90....       MOV       DPTR,#touchLinkFreeGrpIdEnd
   \   0000B6   E8           MOV       A,R0
   \   0000B7   F0           MOVX      @DPTR,A
   \   0000B8   A3           INC       DPTR
   \   0000B9   E9           MOV       A,R1
   \   0000BA   8019         SJMP      ??touchLink_SplitFreeRanges_1
    366            else
    367            {
    368              *pAddrBegin = *pAddrEnd = 0;
   \                     ??touchLink_SplitFreeRanges_0:
   \   0000BC   85..82       MOV       DPL,?V8
   \   0000BF   85..83       MOV       DPH,?V9
   \   0000C2   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   0000C5   F0           MOVX      @DPTR,A
   \   0000C6   A3           INC       DPTR
   \   0000C7   F0           MOVX      @DPTR,A
    369              *pGrpIdBegin = *pGrpIdEnd = 0;
   \   0000C8   8E82         MOV       DPL,R6
   \   0000CA   8F83         MOV       DPH,R7
   \   0000CC   F0           MOVX      @DPTR,A
   \   0000CD   A3           INC       DPTR
   \   0000CE   F0           MOVX      @DPTR,A
   \   0000CF   8C82         MOV       DPL,R4
   \   0000D1   8D83         MOV       DPH,R5
   \   0000D3   F0           MOVX      @DPTR,A
   \   0000D4   A3           INC       DPTR
   \                     ??touchLink_SplitFreeRanges_1:
   \   0000D5   F0           MOVX      @DPTR,A
    370            }
    371          }
   \   0000D6                REQUIRE ?Subroutine2
   \   0000D6                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F0A         MOV       R7,#0xa
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   E4           CLR       A
   \   000008   F5..         MOV       ?V6,A
   \   00000A   F5..         MOV       ?V7,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   24FF         ADD       A,#-0x1
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   34FF         ADDC      A,#-0x1
   \   000008   F9           MOV       R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E4           CLR       A
   \   000001   F0           MOVX      @DPTR,A
   \   000002                REQUIRE ??Subroutine48_0
   \   000002                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine49_0
   \   000001                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET
    372          
    373          /*********************************************************************
    374           * @fn      touchLink_PopGrpIDRange
    375           *
    376           * @brief   Pop the requested number of group IDs out of the free group IDs range.
    377           *
    378           * input parameters
    379           *
    380           * @param   numGrpIDs - number of group IDs needed
    381           *
    382           * output parameters
    383           *
    384           * @param   pGrpIdBegin - new group id range begin, or 0 if unavaialable
    385           * @param   pGrpIdEnd - new group id range end, , or 0 if unavaialable
    386           *
    387           * @return  none
    388           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    389          void touchLink_PopGrpIDRange( uint8 numGrpIDs, uint16 *pGrpIDsBegin, uint16 *pGrpIDsEnd )
   \                     touchLink_PopGrpIDRange:
    390          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
    391            if ( ( touchLinkFreeGrpIdBegin != 0 )
    392                 && ( touchLinkFreeGrpIdBegin <= touchLinkFreeGrpIdEnd )
    393                 && ( ( touchLinkFreeGrpIdEnd - touchLinkFreeGrpIdBegin ) >= numGrpIDs ) )
   \   000007   90....       MOV       DPTR,#touchLinkFreeGrpIdBegin
   \   00000A   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00000D   604E         JZ        ??touchLink_PopGrpIDRange_0
   \   00000F   7583..       MOV       DPH,#(touchLinkFreeGrpIdEnd >> 8) & 0xff
   \   000012   7582..       MOV       DPL,#touchLinkFreeGrpIdEnd & 0xff
   \   000015   C3           CLR       C
   \   000016   E0           MOVX      A,@DPTR
   \   000017   98           SUBB      A,R0
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   99           SUBB      A,R1
   \   00001B   4040         JC        ??touchLink_PopGrpIDRange_0
   \   00001D   A8..         MOV       R0,?V0
   \   00001F   90....       MOV       DPTR,#touchLinkFreeGrpIdBegin
   \   000022   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000025   7583..       MOV       DPH,#(touchLinkFreeGrpIdEnd >> 8) & 0xff
   \   000028   7582..       MOV       DPL,#touchLinkFreeGrpIdEnd & 0xff
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   C3           CLR       C
   \   00002D   9E           SUBB      A,R6
   \   00002E   FE           MOV       R6,A
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   9F           SUBB      A,R7
   \   000032   FF           MOV       R7,A
   \   000033   C3           CLR       C
   \   000034   EE           MOV       A,R6
   \   000035   98           SUBB      A,R0
   \   000036   EF           MOV       A,R7
   \   000037   9400         SUBB      A,#0x0
   \   000039   4022         JC        ??touchLink_PopGrpIDRange_0
    394            {
    395              *pGrpIDsBegin = touchLinkFreeGrpIdBegin;
   \   00003B   90....       MOV       DPTR,#touchLinkFreeGrpIdBegin
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   8A82         MOV       DPL,R2
   \   000041   8B83         MOV       DPH,R3
   \   000043   12....       LCALL     ?Subroutine16 & 0xFFFF
    396          
    397              // Update min free group id
    398              touchLinkFreeGrpIdBegin += numGrpIDs;
   \                     ??CrossCallReturnLabel_22:
   \   000046   28           ADD       A,R0
   \   000047   F0           MOVX      @DPTR,A
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   3400         ADDC      A,#0x0
   \   00004C   F0           MOVX      @DPTR,A
    399          
    400              *pGrpIDsEnd = touchLinkFreeGrpIdBegin - 1;
   \   00004D   90....       MOV       DPTR,#touchLinkFreeGrpIdBegin
   \   000050   12....       LCALL     ?Subroutine21 & 0xFFFF
    401            }
   \                     ??CrossCallReturnLabel_29:
   \   000053   8C82         MOV       DPL,R4
   \   000055   8D83         MOV       DPH,R5
   \   000057   E8           MOV       A,R0
   \   000058   F0           MOVX      @DPTR,A
   \   000059   A3           INC       DPTR
   \   00005A   E9           MOV       A,R1
   \   00005B   8009         SJMP      ??touchLink_PopGrpIDRange_1
    402            else
    403            {
    404              *pGrpIDsBegin = *pGrpIDsEnd = 0;
   \                     ??touchLink_PopGrpIDRange_0:
   \   00005D   8C82         MOV       DPL,R4
   \   00005F   8D83         MOV       DPH,R5
   \   000061   12....       LCALL     ?Subroutine11 & 0xFFFF
    405            }
   \                     ??CrossCallReturnLabel_99:
   \   000064   F0           MOVX      @DPTR,A
   \   000065   A3           INC       DPTR
   \                     ??touchLink_PopGrpIDRange_1:
   \   000066   F0           MOVX      @DPTR,A
    406          }
   \   000067   02....       LJMP      ?Subroutine0 & 0xFFFF
    407          
    408          /*********************************************************************
    409           * @fn      touchLink_PopNwkAddress
    410           *
    411           * @brief   Pop an avaialble short address out of the free network addresses range.
    412           *
    413           * @param   none
    414           *
    415           * @return  free address if available. 0, otherwise.
    416           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    417          uint16 touchLink_PopNwkAddress( void )
   \                     touchLink_PopNwkAddress:
    418          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    419            if ( ( touchLinkFreeNwkAddrBegin == 0 ) || ( touchLinkFreeNwkAddrBegin > touchLinkFreeNwkAddrEnd ) )
   \   000004   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000007   600E         JZ        ??touchLink_PopNwkAddress_0
   \   000009   7583..       MOV       DPH,#(touchLinkFreeNwkAddrEnd >> 8) & 0xff
   \   00000C   7582..       MOV       DPL,#touchLinkFreeNwkAddrEnd & 0xff
   \   00000F   C3           CLR       C
   \   000010   E0           MOVX      A,@DPTR
   \   000011   98           SUBB      A,R0
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   99           SUBB      A,R1
   \   000015   5006         JNC       ??touchLink_PopNwkAddress_1
    420            {
    421              return ( 0 );
   \                     ??touchLink_PopNwkAddress_0:
   \   000017   7A00         MOV       R2,#0x0
   \   000019   7B00         MOV       R3,#0x0
   \   00001B   8013         SJMP      ??CrossCallReturnLabel_101
    422            }
    423          
    424            return ( touchLinkFreeNwkAddrBegin++ );
   \                     ??touchLink_PopNwkAddress_1:
   \   00001D   90....       MOV       DPTR,#touchLinkFreeNwkAddrBegin
   \   000020   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000023   E8           MOV       A,R0
   \   000024   2401         ADD       A,#0x1
   \   000026   08           INC       R0
   \   000027   E4           CLR       A
   \   000028   3B           ADDC      A,R3
   \   000029   F9           MOV       R1,A
   \   00002A   90....       MOV       DPTR,#touchLinkFreeNwkAddrBegin
   \   00002D   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000030   80..         SJMP      ??Subroutine46_0
    425          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET
    426          
    427          /*********************************************************************
    428           * @fn      touchLink_GetNumSubDevices
    429           *
    430           * @brief   Get the total number of sub-devices (endpoints) registered.
    431           *
    432           * @param   startIndex - starting index
    433           *
    434           * @return  number of sub-devices
    435           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    436          uint8 touchLink_GetNumSubDevices( uint8 startIndex )
   \                     touchLink_GetNumSubDevices:
    437          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
    438            uint8 numEPs = 0;
   \   000005   7900         MOV       R1,#0x0
    439          
    440            for ( uint8 i = startIndex; i < TOUCHLINK_NUM_DEVICE_INFO_ENTRIES; i++ )
   \   000007   F8           MOV       R0,A
   \   000008   800C         SJMP      ??touchLink_GetNumSubDevices_0
    441            {
    442              if ( touchLinkSubDevicesTbl[i] != NULL )
   \                     ??touchLink_GetNumSubDevices_1:
   \   00000A   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00000D   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000010   EA           MOV       A,R2
   \   000011   4B           ORL       A,R3
   \   000012   6001         JZ        ??touchLink_GetNumSubDevices_2
    443              numEPs++;
   \   000014   09           INC       R1
    444            }
   \                     ??touchLink_GetNumSubDevices_2:
   \   000015   08           INC       R0
   \                     ??touchLink_GetNumSubDevices_0:
   \   000016   E8           MOV       A,R0
   \   000017   C3           CLR       C
   \   000018   9405         SUBB      A,#0x5
   \   00001A   40EE         JC        ??touchLink_GetNumSubDevices_1
    445          
    446            return ( numEPs );
   \   00001C   80..         SJMP      ??Subroutine46_0
    447          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine44_0
   \   000002                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E8           MOV       A,R0
   \   000001   25E0         ADD       A,0xE0 /* A   */
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   33           RLC       A
   \   000006   FB           MOV       R3,A
   \   000007   74..         MOV       A,#touchLinkSubDevicesTbl & 0xff
   \   000009   2A           ADD       A,R2
   \   00000A   F582         MOV       DPL,A
   \   00000C   74..         MOV       A,#(touchLinkSubDevicesTbl >> 8) & 0xff
   \   00000E   3B           ADDC      A,R3
   \   00000F   22           RET
    448          
    449          /*********************************************************************
    450           * @fn      touchLink_GetNumGrpIDs
    451           *
    452           * @brief   Get the total number of group IDs required by this device.
    453           *
    454           * @param   none
    455           *
    456           * @return  number of group IDs
    457           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    458          uint8 touchLink_GetNumGrpIDs( void )
   \                     touchLink_GetNumGrpIDs:
    459          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    460            uint8 numGrpIDs = 0;
   \   000004   7900         MOV       R1,#0x0
    461          
    462            for ( uint8 i = 0; i < TOUCHLINK_NUM_DEVICE_INFO_ENTRIES; i++ )
   \   000006   7800         MOV       R0,#0x0
    463            {
    464              if ( touchLinkSubDevicesTbl[i] != NULL )
   \                     ??touchLink_GetNumGrpIDs_0:
   \   000008   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00000B   F583         MOV       DPH,A
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   FA           MOV       R2,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   8A82         MOV       DPL,R2
   \   000013   F583         MOV       DPH,A
   \   000015   E582         MOV       A,DPL
   \   000017   4583         ORL       A,DPH
   \   000019   6009         JZ        ??touchLink_GetNumGrpIDs_1
    465              {
    466                numGrpIDs += touchLinkSubDevicesTbl[i]->grpIdCnt;
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   29           ADD       A,R1
   \   000023   F9           MOV       R1,A
    467              }
    468            }
   \                     ??touchLink_GetNumGrpIDs_1:
   \   000024   08           INC       R0
   \   000025   E8           MOV       A,R0
   \   000026   C3           CLR       C
   \   000027   9405         SUBB      A,#0x5
   \   000029   40DD         JC        ??touchLink_GetNumGrpIDs_0
    469          
    470            return ( numGrpIDs );
   \   00002B   80..         SJMP      ??Subroutine46_0
    471          }
    472          
    473          /*********************************************************************
    474           * @fn      touchLink_GetSubDeviceInfo
    475           *
    476           * @brief   Get the sub-device information.
    477           *
    478           * input parameter
    479           *
    480           * @param   index - index of sub-device
    481           *
    482           * output parameter
    483           *
    484           * @param   pInfo - sub-device info (to be returned)
    485           *
    486           * @return  none
    487           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    488          void touchLink_GetSubDeviceInfo( uint8 index, bdbTLDeviceInfo_t *pInfo )
   \                     touchLink_GetSubDeviceInfo:
    489          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    490            if ( pInfo == NULL )
   \   000009   EA           MOV       A,R2
   \   00000A   4F           ORL       A,R7
   \   00000B   604F         JZ        ??touchLink_GetSubDeviceInfo_0
    491            {
    492              return;
    493            }
    494            if ( ( index < TOUCHLINK_NUM_DEVICE_INFO_ENTRIES ) &&
    495                 ( touchLinkSubDevicesTbl[index] != NULL ) )
   \   00000D   E9           MOV       A,R1
   \   00000E   C3           CLR       C
   \   00000F   9405         SUBB      A,#0x5
   \   000011   5040         JNC       ??touchLink_GetSubDeviceInfo_1
   \   000013   E9           MOV       A,R1
   \   000014   29           ADD       A,R1
   \   000015   F8           MOV       R0,A
   \   000016   E4           CLR       A
   \   000017   33           RLC       A
   \   000018   F9           MOV       R1,A
   \   000019   74..         MOV       A,#touchLinkSubDevicesTbl & 0xff
   \   00001B   28           ADD       A,R0
   \   00001C   F8           MOV       R0,A
   \   00001D   74..         MOV       A,#(touchLinkSubDevicesTbl >> 8) & 0xff
   \   00001F   39           ADDC      A,R1
   \   000020   88..         MOV       ?V0,R0
   \   000022   F5..         MOV       ?V1,A
   \   000024   8882         MOV       DPL,R0
   \   000026   F583         MOV       DPH,A
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F8           MOV       R0,A
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   8882         MOV       DPL,R0
   \   00002E   F583         MOV       DPH,A
   \   000030   E582         MOV       A,DPL
   \   000032   4583         ORL       A,DPH
   \   000034   601D         JZ        ??touchLink_GetSubDeviceInfo_1
    496            {
    497              endPointDesc_t *epDesc = afFindEndPointDesc( touchLinkSubDevicesTbl[index]->endpoint );
    498              if ( epDesc != NULL )
   \   000036                ; Setup parameters for call to function afFindEndPointDesc
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F9           MOV       R1,A
   \   000038   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00003B   EA           MOV       A,R2
   \   00003C   4B           ORL       A,R3
   \   00003D   601D         JZ        ??touchLink_GetSubDeviceInfo_0
    499              {
    500                // Copy sub-device info
    501                *pInfo = *(touchLinkSubDevicesTbl[index]);
   \   00003F   85..82       MOV       DPL,?V0
   \   000042   85..83       MOV       DPH,?V1
   \   000045   12....       LCALL     ?Subroutine30 & 0xFFFF
    502              }
    503            }
   \                     ??CrossCallReturnLabel_47:
   \   000048   EE           MOV       A,R6
   \   000049   FC           MOV       R4,A
   \   00004A   EF           MOV       A,R7
   \   00004B   FD           MOV       R5,A
   \   00004C   7407         MOV       A,#0x7
   \   00004E   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   000051   8009         SJMP      ??touchLink_GetSubDeviceInfo_0
    504            else
    505            {
    506              osal_memset( pInfo, 0, sizeof( bdbTLDeviceInfo_t ) );
   \                     ??touchLink_GetSubDeviceInfo_1:
   \   000053                ; Setup parameters for call to function osal_memset
   \   000053   7C07         MOV       R4,#0x7
   \   000055   7D00         MOV       R5,#0x0
   \   000057   7900         MOV       R1,#0x0
   \   000059   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    507            }
    508          }
   \                     ??touchLink_GetSubDeviceInfo_0:
   \   00005C                REQUIRE ?Subroutine3
   \   00005C                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET
    509          
    510          
    511          /*********************************************************************
    512           * @fn      touchLink_EncryptNwkKey
    513           *
    514           * @brief   Encrypt the current network key to be sent to a Target.
    515           *          In case of Factory New device generate new key.
    516           *
    517           * output parameter
    518           *
    519           * @param   pNwkKey - pointer to encrypted network key
    520           *
    521           * input parameters
    522           *
    523           * @param   keyIndex - key index
    524           * @param   transID - transaction id
    525           * @param   responseID - response id
    526           *
    527           * @return  none
    528           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    529          void touchLink_EncryptNwkKey( uint8 *pNwkKey, uint8 keyIndex, uint32 transID, uint32 responseID )
   \                     touchLink_EncryptNwkKey:
    530          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 69
   \   000005   74BB         MOV       A,#-0x45
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   89..         MOV       ?V3,R1
    531            uint8 aesKeyKey[SEC_KEY_LEN] = TOUCHLINK_DEFAULT_AES_KEY;
   \   000010   90....       MOV       DPTR,#`?<Constant {80, 104, 76, 105, 234, 156, 209, 5`
   \   000013   7410         MOV       A,#0x10
   \   000015   12....       LCALL     ?XSTACK_DISP102_8
   \   000018   7410         MOV       A,#0x10
   \   00001A   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    532            uint8 masterKey[SEC_KEY_LEN] = TOUCHLINK_ENC_KEY;
   \   00001D   90....       MOV       DPTR,#`?<Constant {192, 193, 194, 195, 196, 197, 198,`
   \   000020   7435         MOV       A,#0x35
   \   000022   12....       LCALL     ?XSTACK_DISP102_8
   \   000025   7410         MOV       A,#0x10
   \   000027   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    533            uint8 nwkKey[SEC_KEY_LEN];
    534          
    535            if ( bdbAttributes.bdbNodeIsOnANetwork == FALSE )
   \   00002A   90....       MOV       DPTR,#bdbAttributes + 14
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   700B         JNZ       ??touchLink_EncryptNwkKey_0
    536            {
    537              touchLink_GenerateRandNum( nwkKey, SEC_KEY_LEN );
   \   000030                ; Setup parameters for call to function touchLink_GenerateRandNum
   \   000030   7910         MOV       R1,#0x10
   \   000032   AA..         MOV       R2,?XSP + 0
   \   000034   AB..         MOV       R3,?XSP + 1
   \   000036   12....       LCALL     `??touchLink_GenerateRandNum::?relay`; Banked call to: touchLink_GenerateRandNum
   \   000039   802C         SJMP      ??touchLink_EncryptNwkKey_1
    538            }
    539            else
    540            {
    541              nwkActiveKeyItems keyItems;
    542              SSP_ReadNwkActiveKey( &keyItems );
   \                     ??touchLink_EncryptNwkKey_0:
   \   00003B                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00003B   7420         MOV       A,#0x20
   \   00003D   12....       LCALL     ?XSTACK_DISP101_8
   \   000040   12....       LCALL     `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
    543              osal_memcpy( nwkKey, keyItems.active.key , SEC_KEY_LEN);
   \   000043                ; Setup parameters for call to function osal_memcpy
   \   000043   7421         MOV       A,#0x21
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   A982         MOV       R1,DPL
   \   00004A   AA83         MOV       R2,DPH
   \   00004C   89..         MOV       ?V0,R1
   \   00004E   8A..         MOV       ?V1,R2
   \   000050   75..00       MOV       ?V2,#0x0
   \   000053   78..         MOV       R0,#?V0
   \   000055   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000058   7C10         MOV       R4,#0x10
   \   00005A   7D00         MOV       R5,#0x0
   \   00005C   7403         MOV       A,#0x3
   \   00005E   12....       LCALL     ?XSTACK_DISP101_8
   \   000061   12....       LCALL     ??Subroutine47_0 & 0xFFFF
    544            }
   \                     ??CrossCallReturnLabel_93:
   \   000064   12....       LCALL     ?DEALLOC_XSTACK8
    545          
    546            // Build the AES key
    547            touchLink_BuildAesKey( aesKeyKey, transID, responseID, keyIndex );
   \                     ??touchLink_EncryptNwkKey_1:
   \   000067                ; Setup parameters for call to function touchLink_BuildAesKey
   \   000067   7455         MOV       A,#0x55
   \   000069   12....       LCALL     ?XSTACK_DISP0_8
   \   00006C   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00006F   7455         MOV       A,#0x55
   \   000071   12....       LCALL     ?XSTACK_DISP0_8
   \   000074   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000077   A9..         MOV       R1,?V3
   \   000079   7418         MOV       A,#0x18
   \   00007B   12....       LCALL     ?XSTACK_DISP101_8
   \   00007E   12....       LCALL     `??touchLink_BuildAesKey::?relay`; Banked call to: touchLink_BuildAesKey
   \   000081   7408         MOV       A,#0x8
   \   000083   12....       LCALL     ?DEALLOC_XSTACK8
    548          
    549            if ( ( keyIndex == TOUCHLINK_KEY_INDEX_MASTER ) || ( keyIndex == TOUCHLINK_KEY_INDEX_CERT ) )
   \   000086   7404         MOV       A,#0x4
   \   000088   65..         XRL       A,?V3
   \   00008A   6006         JZ        ??touchLink_EncryptNwkKey_2
   \   00008C   740F         MOV       A,#0xf
   \   00008E   65..         XRL       A,?V3
   \   000090   700D         JNZ       ??touchLink_EncryptNwkKey_3
    550            {
    551              // Encypt with the master key
    552              sspAesEncrypt( masterKey, aesKeyKey );
   \                     ??touchLink_EncryptNwkKey_2:
   \   000092                ; Setup parameters for call to function sspAesEncrypt
   \   000092   7410         MOV       A,#0x10
   \   000094   12....       LCALL     ?XSTACK_DISP102_8
   \   000097   7435         MOV       A,#0x35
   \   000099   12....       LCALL     ?XSTACK_DISP101_8
   \   00009C   12....       LCALL     `??sspAesEncrypt::?relay`; Banked call to: sspAesEncrypt
    553            }
    554            // Encrypt the network key with the AES key
    555            sspAesEncrypt( aesKeyKey, nwkKey );
   \                     ??touchLink_EncryptNwkKey_3:
   \   00009F                ; Setup parameters for call to function sspAesEncrypt
   \   00009F   AC..         MOV       R4,?XSP + 0
   \   0000A1   AD..         MOV       R5,?XSP + 1
   \   0000A3   7410         MOV       A,#0x10
   \   0000A5   12....       LCALL     ?XSTACK_DISP101_8
   \   0000A8   12....       LCALL     `??sspAesEncrypt::?relay`; Banked call to: sspAesEncrypt
    556          
    557            // Copy in the encrypted network key
    558            osal_memcpy( pNwkKey, nwkKey, SEC_KEY_LEN );
   \   0000AB                ; Setup parameters for call to function osal_memcpy
   \   0000AB   A8..         MOV       R0,?XSP + 0
   \   0000AD   A9..         MOV       R1,?XSP + 1
   \   0000AF   88..         MOV       ?V0,R0
   \   0000B1   89..         MOV       ?V1,R1
   \   0000B3   75..00       MOV       ?V2,#0x0
   \   0000B6   78..         MOV       R0,#?V0
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000BB   7C10         MOV       R4,#0x10
   \   0000BD   7D00         MOV       R5,#0x0
   \   0000BF   EE           MOV       A,R6
   \   0000C0   FA           MOV       R2,A
   \   0000C1   EF           MOV       A,R7
   \   0000C2   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   0000C5   12....       LCALL     ?DEALLOC_XSTACK8
    559          }
   \   0000C8   7445         MOV       A,#0x45
   \   0000CA   02....       LJMP      ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine47_0
   \   000001                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine50_0
   \   000003                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    560          
    561          /*********************************************************************
    562           * @fn      touchLink_DecryptNwkKey
    563           *
    564           * @brief   Decrypt the received network key and update.
    565           *
    566           * @param   pNwkKey - pointer to the encrypted network key
    567           * @param   keyIndex - key index
    568           * @param   transID - transaction id
    569           * @param   responseID - response id
    570           *
    571           * @return  none
    572           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    573          void touchLink_DecryptNwkKey( uint8 *pNwkKey, uint8 keyIndex, uint32 transID, uint32 responseID )
   \                     touchLink_DecryptNwkKey:
    574          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 48
   \   000005   74D0         MOV       A,#-0x30
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    575            uint8 aesKeyKey[SEC_KEY_LEN] = TOUCHLINK_DEFAULT_AES_KEY;
   \   00000C   90....       MOV       DPTR,#`?<Constant {80, 104, 76, 105, 234, 156, 209, 5_1`
   \   00000F   7410         MOV       A,#0x10
   \   000011   12....       LCALL     ?XSTACK_DISP102_8
   \   000014   7410         MOV       A,#0x10
   \   000016   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    576          
    577            uint8 nwkKey[SEC_KEY_LEN];
    578          
    579            uint8 masterKey[SEC_KEY_LEN] = TOUCHLINK_ENC_KEY;
   \   000019   90....       MOV       DPTR,#`?<Constant {192, 193, 194, 195, 196, 197, 198,_1`
   \   00001C   7410         MOV       A,#0x10
   \   00001E   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    580          
    581            // Copy in the encrypted network key
    582            osal_memcpy( nwkKey, pNwkKey, SEC_KEY_LEN );
   \   000021                ; Setup parameters for call to function osal_memcpy
   \   000021   8A..         MOV       ?V0,R2
   \   000023   8B..         MOV       ?V1,R3
   \   000025   F5..         MOV       ?V2,A
   \   000027   78..         MOV       R0,#?V0
   \   000029   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00002C   7C10         MOV       R4,#0x10
   \   00002E   7D00         MOV       R5,#0x0
   \   000030   7403         MOV       A,#0x3
   \   000032   12....       LCALL     ?XSTACK_DISP101_8
   \   000035   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000038   12....       LCALL     ?DEALLOC_XSTACK8
    583          
    584            touchLink_BuildAesKey( aesKeyKey, transID, responseID, keyIndex );
   \   00003B                ; Setup parameters for call to function touchLink_BuildAesKey
   \   00003B   743F         MOV       A,#0x3f
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000043   743F         MOV       A,#0x3f
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00004B   EE           MOV       A,R6
   \   00004C   F9           MOV       R1,A
   \   00004D   7418         MOV       A,#0x18
   \   00004F   12....       LCALL     ?XSTACK_DISP101_8
   \   000052   12....       LCALL     `??touchLink_BuildAesKey::?relay`; Banked call to: touchLink_BuildAesKey
   \   000055   7408         MOV       A,#0x8
   \   000057   12....       LCALL     ?DEALLOC_XSTACK8
    585          
    586            if ( ( keyIndex == TOUCHLINK_KEY_INDEX_MASTER ) || ( keyIndex == TOUCHLINK_KEY_INDEX_CERT ) )
   \   00005A   7404         MOV       A,#0x4
   \   00005C   6E           XRL       A,R6
   \   00005D   6005         JZ        ??touchLink_DecryptNwkKey_0
   \   00005F   740F         MOV       A,#0xf
   \   000061   6E           XRL       A,R6
   \   000062   700D         JNZ       ??touchLink_DecryptNwkKey_1
    587            {
    588              //encypt with the master key
    589              sspAesEncrypt( masterKey, aesKeyKey );
   \                     ??touchLink_DecryptNwkKey_0:
   \   000064                ; Setup parameters for call to function sspAesEncrypt
   \   000064   7410         MOV       A,#0x10
   \   000066   12....       LCALL     ?XSTACK_DISP102_8
   \   000069   7420         MOV       A,#0x20
   \   00006B   12....       LCALL     ?XSTACK_DISP101_8
   \   00006E   12....       LCALL     `??sspAesEncrypt::?relay`; Banked call to: sspAesEncrypt
    590            }
    591            // Decrypt the network key with the AES key
    592            sspAesDecrypt( aesKeyKey, nwkKey );
   \                     ??touchLink_DecryptNwkKey_1:
   \   000071                ; Setup parameters for call to function sspAesDecrypt
   \   000071   AC..         MOV       R4,?XSP + 0
   \   000073   AD..         MOV       R5,?XSP + 1
   \   000075   7410         MOV       A,#0x10
   \   000077   12....       LCALL     ?XSTACK_DISP101_8
   \   00007A   12....       LCALL     `??sspAesDecrypt::?relay`; Banked call to: sspAesDecrypt
    593          
    594            touchLink_UpdateNwkKey( nwkKey, keyIndex );
   \   00007D                ; Setup parameters for call to function touchLink_UpdateNwkKey
   \   00007D   EE           MOV       A,R6
   \   00007E   F9           MOV       R1,A
   \   00007F   AA..         MOV       R2,?XSP + 0
   \   000081   AB..         MOV       R3,?XSP + 1
   \   000083   12....       LCALL     `??touchLink_UpdateNwkKey::?relay`; Banked call to: touchLink_UpdateNwkKey
    595          }
   \   000086   7430         MOV       A,#0x30
   \   000088   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008B   7F03         MOV       R7,#0x3
   \   00008D   02....       LJMP      ?BANKED_LEAVE_XDATA
    596          
    597          /*********************************************************************
    598           * @fn      touchLink_BuildAesKey
    599           *
    600           * @brief   Build an AES key using Transaction ID and Response ID.
    601           *
    602           * @param   pAesKey - pointer to AES to be built
    603           * @param   transID - transaction id
    604           * @param   responseID - response id
    605           *
    606           * @return  none
    607           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    608          static void touchLink_BuildAesKey( uint8 *pAesKey, uint32 transID, uint32 responseID, uint8 keyIndex )
   \                     touchLink_BuildAesKey:
    609          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000   74EB         MOV       A,#-0x15
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 21
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V12,R1
   \   000007   7419         MOV       A,#0x19
   \   000009   12....       LCALL     ?XSTACK_DISP0_8
   \   00000C   78..         MOV       R0,#?V0
   \   00000E   12....       LCALL     ?L_MOV_X
    610          
    611            if ( ( keyIndex == TOUCHLINK_KEY_INDEX_MASTER ) || ( keyIndex == TOUCHLINK_KEY_INDEX_CERT ) )
   \   000011   E5..         MOV       A,?V1
   \   000013   FF           MOV       R7,A
   \   000014   7415         MOV       A,#0x15
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   78..         MOV       R0,#?V4
   \   00001B   12....       LCALL     ?L_MOV_X
   \   00001E   E5..         MOV       A,?V5
   \   000020   FD           MOV       R5,A
   \   000021   85....       MOV       ?V8,?V0
   \   000024   8F..         MOV       ?V9,R7
   \   000026   85....       MOV       ?V10,?V2
   \   000029   85....       MOV       ?V11,?V3
   \   00002C   7410         MOV       A,#0x10
   \   00002E   78..         MOV       R0,#?V8
   \   000030   12....       LCALL     ?UL_SHR
   \   000033   E5..         MOV       A,?V8
   \   000035   FE           MOV       R6,A
   \   000036   85....       MOV       ?V8,?V0
   \   000039   8F..         MOV       ?V9,R7
   \   00003B   F5..         MOV       ?V10,A
   \   00003D   85....       MOV       ?V11,?V3
   \   000040   7418         MOV       A,#0x18
   \   000042   78..         MOV       R0,#?V8
   \   000044   12....       LCALL     ?UL_SHR
   \   000047   E5..         MOV       A,?V8
   \   000049   FC           MOV       R4,A
   \   00004A   85....       MOV       ?V8,?V4
   \   00004D   8D..         MOV       ?V9,R5
   \   00004F   85....       MOV       ?V10,?V6
   \   000052   85....       MOV       ?V11,?V7
   \   000055   7410         MOV       A,#0x10
   \   000057   78..         MOV       R0,#?V8
   \   000059   12....       LCALL     ?UL_SHR
   \   00005C   E5..         MOV       A,?V8
   \   00005E   F9           MOV       R1,A
   \   00005F   85....       MOV       ?V8,?V4
   \   000062   8D..         MOV       ?V9,R5
   \   000064   F5..         MOV       ?V10,A
   \   000066   85....       MOV       ?V11,?V7
   \   000069   7418         MOV       A,#0x18
   \   00006B   78..         MOV       R0,#?V8
   \   00006D   12....       LCALL     ?UL_SHR
   \   000070   E5..         MOV       A,?V8
   \   000072   F8           MOV       R0,A
   \   000073   7404         MOV       A,#0x4
   \   000075   65..         XRL       A,?V12
   \   000077   6006         JZ        ??touchLink_BuildAesKey_0
   \   000079   740F         MOV       A,#0xf
   \   00007B   65..         XRL       A,?V12
   \   00007D   7054         JNZ       ??touchLink_BuildAesKey_1
    612            {
    613              // Copy transaction identifier to 1st byte
    614              pAesKey[0] = BREAK_UINT32( transID, 3 );
   \                     ??touchLink_BuildAesKey_0:
   \   00007F   E8           MOV       A,R0
   \   000080   8A82         MOV       DPL,R2
   \   000082   8B83         MOV       DPH,R3
   \   000084   F0           MOVX      @DPTR,A
    615              pAesKey[1] = BREAK_UINT32( transID, 2 );
   \   000085   E9           MOV       A,R1
   \   000086   12....       LCALL     ?Subroutine18 & 0xFFFF
    616              pAesKey[2] = BREAK_UINT32( transID, 1 );
   \                     ??CrossCallReturnLabel_23:
   \   000089   F0           MOVX      @DPTR,A
    617              pAesKey[3] = BREAK_UINT32( transID, 0 );
   \   00008A   85....       MOV       ?V8,?V4
   \   00008D   8A82         MOV       DPL,R2
   \   00008F   8B83         MOV       DPH,R3
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   E5..         MOV       A,?V8
   \   000096   F0           MOVX      @DPTR,A
    618          
    619              // Copy response identifier 3rd bute
    620              pAesKey[8] = BREAK_UINT32( responseID, 3 );
   \   000097   EC           MOV       A,R4
   \   000098   8A82         MOV       DPL,R2
   \   00009A   8B83         MOV       DPH,R3
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   F0           MOVX      @DPTR,A
    621              pAesKey[9] = BREAK_UINT32( responseID, 2 );
   \   0000A5   EE           MOV       A,R6
   \   0000A6   8A82         MOV       DPL,R2
   \   0000A8   8B83         MOV       DPH,R3
   \   0000AA   A3           INC       DPTR
   \   0000AB   A3           INC       DPTR
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   A3           INC       DPTR
   \   0000AF   A3           INC       DPTR
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   A3           INC       DPTR
   \   0000B3   F0           MOVX      @DPTR,A
    622              pAesKey[10] = BREAK_UINT32( responseID, 1 );
   \   0000B4   EF           MOV       A,R7
   \   0000B5   8A82         MOV       DPL,R2
   \   0000B7   8B83         MOV       DPH,R3
   \   0000B9   A3           INC       DPTR
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   A3           INC       DPTR
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   A3           INC       DPTR
   \   0000C3   F0           MOVX      @DPTR,A
    623              pAesKey[11] = BREAK_UINT32( responseID, 0 );
   \   0000C4   85....       MOV       ?V8,?V0
   \   0000C7   EA           MOV       A,R2
   \   0000C8   240B         ADD       A,#0xb
   \   0000CA   F582         MOV       DPL,A
   \   0000CC   E4           CLR       A
   \   0000CD   3B           ADDC      A,R3
   \   0000CE   F583         MOV       DPH,A
   \   0000D0   E5..         MOV       A,?V8
   \   0000D2   F0           MOVX      @DPTR,A
    624            }
    625          
    626            // Copy in the transaction identifier
    627            pAesKey[4] = BREAK_UINT32( transID, 3 );
   \                     ??touchLink_BuildAesKey_1:
   \   0000D3   E8           MOV       A,R0
   \   0000D4   8A82         MOV       DPL,R2
   \   0000D6   8B83         MOV       DPH,R3
   \   0000D8   A3           INC       DPTR
   \   0000D9   A3           INC       DPTR
   \   0000DA   A3           INC       DPTR
   \   0000DB   A3           INC       DPTR
   \   0000DC   F0           MOVX      @DPTR,A
    628            pAesKey[5] = BREAK_UINT32( transID, 2 );
   \   0000DD   E9           MOV       A,R1
   \   0000DE   8A82         MOV       DPL,R2
   \   0000E0   8B83         MOV       DPH,R3
   \   0000E2   A3           INC       DPTR
   \   0000E3   A3           INC       DPTR
   \   0000E4   A3           INC       DPTR
   \   0000E5   A3           INC       DPTR
   \   0000E6   12....       LCALL     ?Subroutine18 & 0xFFFF
    629            pAesKey[6] = BREAK_UINT32( transID, 1 );
   \                     ??CrossCallReturnLabel_24:
   \   0000E9   A3           INC       DPTR
   \   0000EA   A3           INC       DPTR
   \   0000EB   A3           INC       DPTR
   \   0000EC   12....       LCALL     ??Subroutine48_0 & 0xFFFF
    630            pAesKey[7] = BREAK_UINT32( transID, 0 );
   \                     ??CrossCallReturnLabel_95:
   \   0000EF   A3           INC       DPTR
   \   0000F0   A3           INC       DPTR
   \   0000F1   A3           INC       DPTR
   \   0000F2   A3           INC       DPTR
   \   0000F3   A3           INC       DPTR
   \   0000F4   A3           INC       DPTR
   \   0000F5   A3           INC       DPTR
   \   0000F6   E5..         MOV       A,?V4
   \   0000F8   F0           MOVX      @DPTR,A
    631          
    632            // Copy in the response identifier
    633            pAesKey[12] = BREAK_UINT32( responseID, 3 );
   \   0000F9   EA           MOV       A,R2
   \   0000FA   240C         ADD       A,#0xc
   \   0000FC   F582         MOV       DPL,A
   \   0000FE   E4           CLR       A
   \   0000FF   3B           ADDC      A,R3
   \   000100   F583         MOV       DPH,A
   \   000102   EC           MOV       A,R4
   \   000103   F0           MOVX      @DPTR,A
    634            pAesKey[13] = BREAK_UINT32( responseID, 2 );
   \   000104   EA           MOV       A,R2
   \   000105   240D         ADD       A,#0xd
   \   000107   F582         MOV       DPL,A
   \   000109   E4           CLR       A
   \   00010A   3B           ADDC      A,R3
   \   00010B   F583         MOV       DPH,A
   \   00010D   EE           MOV       A,R6
   \   00010E   F0           MOVX      @DPTR,A
    635            pAesKey[14] = BREAK_UINT32( responseID, 1 );
   \   00010F   EA           MOV       A,R2
   \   000110   240E         ADD       A,#0xe
   \   000112   F582         MOV       DPL,A
   \   000114   E4           CLR       A
   \   000115   3B           ADDC      A,R3
   \   000116   F583         MOV       DPH,A
   \   000118   EF           MOV       A,R7
   \   000119   F0           MOVX      @DPTR,A
    636            pAesKey[15] = BREAK_UINT32( responseID, 0 );
   \   00011A   EA           MOV       A,R2
   \   00011B   240F         ADD       A,#0xf
   \   00011D   F582         MOV       DPL,A
   \   00011F   E4           CLR       A
   \   000120   3B           ADDC      A,R3
   \   000121   F583         MOV       DPH,A
   \   000123   E5..         MOV       A,?V0
   \   000125   F0           MOVX      @DPTR,A
    637          }
   \   000126   7F0D         MOV       R7,#0xd
   \   000128   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   A3           INC       DPTR
   \   000001   F0           MOVX      @DPTR,A
   \   000002   ED           MOV       A,R5
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET
    638          
    639          /*********************************************************************
    640           * @fn      touchLink_UpdateNwkKey
    641           *
    642           * @brief   Update the network key.
    643           *
    644           * @param   pNwkParams - pointer to new network key
    645           * @param   keyIndex - key index
    646           *
    647           * @return  none
    648           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    649          void touchLink_UpdateNwkKey( uint8 *pNwkKey, uint8 keyIndex )
   \                     touchLink_UpdateNwkKey:
    650          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    651            uint32 nwkFrameCounterTmp;
    652            (void)keyIndex;
    653          
    654            // To prevent Framecounter out of sync issues, store the lastkey
    655            nwkFrameCounterTmp = nwkFrameCounter;  // (Global in SSP).
   \   000005   90....       MOV       DPTR,#nwkFrameCounter
   \   000008   78..         MOV       R0,#?V0
   \   00000A   12....       LCALL     ?L_MOV_X
    656          
    657            // Update the network key
    658            SSP_UpdateNwkKey( pNwkKey, 0 );
   \   00000D                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   00000D   7900         MOV       R1,#0x0
   \   00000F   12....       LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
    659          
    660            SSP_SwitchNwkKey( 0 );
   \   000012                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   000012   7900         MOV       R1,#0x0
   \   000014   12....       LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
    661          
    662            nwkFrameCounter  = nwkFrameCounterTmp; // restore
   \   000017   90....       MOV       DPTR,#nwkFrameCounter
   \   00001A   78..         MOV       R0,#?V0
   \   00001C   12....       LCALL     ?L_MOV_TO_X
    663          
    664            // Save off the security
    665            ZDApp_SaveNwkKey();
   \   00001F                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   00001F   12....       LCALL     `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    666          }
   \   000022   80..         SJMP      ??Subroutine50_0
    667          
    668          /*********************************************************************
    669           * @fn      touchLink_GetNwkKeyBitmask
    670           *
    671           * @brief   Get the supported network key bitmask.
    672           *
    673           * @param   none
    674           *
    675           * @return  network key bitmask
    676           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    677          uint16 touchLink_GetNwkKeyBitmask( void )
   \                     touchLink_GetNwkKeyBitmask:
    678          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    679            return ( (uint16)1 << TOUCHLINK_KEY_INDEX );
   \   000000   7A00         MOV       R2,#0x0
   \   000002   7B80         MOV       R3,#-0x80
   \   000004   02....       LJMP      ?BRET
    680          }
    681          
    682          /*********************************************************************
    683           * @fn      touchLink_GenerateRandNum
    684           *
    685           * @brief   Fill buffer with random bytes.
    686           *
    687           * input parameter
    688           *
    689           * @param   numSize - size of buffer in bytes
    690           *
    691           * output parameter
    692           *
    693           * @param   pNum - pointer to buffer to be filled with random values
    694           *
    695           * @return  none
    696           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    697          void touchLink_GenerateRandNum( uint8 *pNum, uint8 numSize )
   \                     touchLink_GenerateRandNum:
    698          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V2,R1
    699            if ( pNum && numSize )
   \   00000B   EA           MOV       A,R2
   \   00000C   4F           ORL       A,R7
   \   00000D   6043         JZ        ??touchLink_GenerateRandNum_0
   \   00000F   E9           MOV       A,R1
   \   000010   6040         JZ        ??touchLink_GenerateRandNum_0
    700            {
    701              uint8 lastByte = ( numSize - 1 );
   \   000012   74FF         MOV       A,#-0x1
   \   000014   29           ADD       A,R1
   \   000015   F5..         MOV       ?V1,A
    702              for ( uint8 i = 0; i < lastByte; i += 2 )
   \   000017   75..00       MOV       ?V0,#0x0
   \   00001A   801A         SJMP      ??touchLink_GenerateRandNum_1
    703              {
    704                uint16 rand = osal_rand();
   \                     ??touchLink_GenerateRandNum_2:
   \   00001C                ; Setup parameters for call to function osal_rand
   \   00001C   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   00001F   8A..         MOV       ?V4,R2
    705                pNum[i]   = LO_UINT16( rand );
   \   000021   AA..         MOV       R2,?V0
   \   000023   EE           MOV       A,R6
   \   000024   2A           ADD       A,R2
   \   000025   F582         MOV       DPL,A
   \   000027   E4           CLR       A
   \   000028   3F           ADDC      A,R7
   \   000029   F583         MOV       DPH,A
   \   00002B   E5..         MOV       A,?V4
   \   00002D   F0           MOVX      @DPTR,A
    706                pNum[i+1] = HI_UINT16( rand );
   \   00002E   A3           INC       DPTR
   \   00002F   EB           MOV       A,R3
   \   000030   F0           MOVX      @DPTR,A
    707              }
   \   000031   7402         MOV       A,#0x2
   \   000033   2A           ADD       A,R2
   \   000034   F5..         MOV       ?V0,A
   \                     ??touchLink_GenerateRandNum_1:
   \   000036   E5..         MOV       A,?V0
   \   000038   C3           CLR       C
   \   000039   95..         SUBB      A,?V1
   \   00003B   40DF         JC        ??touchLink_GenerateRandNum_2
    708          
    709              // In case the number is odd
    710              if ( numSize % 2 )
   \   00003D   E5..         MOV       A,?V2
   \   00003F   A2E0         MOV       C,0xE0 /* A   */.0
   \   000041   500F         JNC       ??touchLink_GenerateRandNum_0
    711              {
    712                pNum[lastByte] = LO_UINT16( osal_rand() );
   \   000043                ; Setup parameters for call to function osal_rand
   \   000043   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000046   A8..         MOV       R0,?V1
   \   000048   EE           MOV       A,R6
   \   000049   28           ADD       A,R0
   \   00004A   F582         MOV       DPL,A
   \   00004C   E4           CLR       A
   \   00004D   3F           ADDC      A,R7
   \   00004E   F583         MOV       DPH,A
   \   000050   EA           MOV       A,R2
   \   000051   F0           MOVX      @DPTR,A
    713              }
    714            }
    715          }
   \                     ??touchLink_GenerateRandNum_0:
   \   000052   02....       LJMP      ?Subroutine3 & 0xFFFF
    716          
    717          /*********************************************************************
    718           * @fn      touchLink_GetRandPrimaryChannel
    719           *
    720           * @brief   Get randomly chosen TOUCHLINK primary channel.
    721           *
    722           * @return  channel
    723           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    724          uint8 touchLink_GetRandPrimaryChannel()
   \                     touchLink_GetRandPrimaryChannel:
    725          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    726            uint8 channel = osal_rand() & 0x1F;
   \   000004                ; Setup parameters for call to function osal_rand
   \   000004   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000007   EA           MOV       A,R2
   \   000008   541F         ANL       A,#0x1f
   \   00000A   F9           MOV       R1,A
    727            if ( channel <= TOUCHLINK_FIRST_CHANNEL )
   \   00000B   C3           CLR       C
   \   00000C   940C         SUBB      A,#0xc
   \   00000E   5004         JNC       ??touchLink_GetRandPrimaryChannel_0
    728            {
    729              channel = TOUCHLINK_FIRST_CHANNEL;
   \   000010   790B         MOV       R1,#0xb
   \   000012   8016         SJMP      ??touchLink_GetRandPrimaryChannel_1
    730            }
    731            else if ( channel <= TOUCHLINK_SECOND_CHANNEL )
   \                     ??touchLink_GetRandPrimaryChannel_0:
   \   000014   E9           MOV       A,R1
   \   000015   C3           CLR       C
   \   000016   9410         SUBB      A,#0x10
   \   000018   5004         JNC       ??touchLink_GetRandPrimaryChannel_2
    732            {
    733              channel = TOUCHLINK_SECOND_CHANNEL;
   \   00001A   790F         MOV       R1,#0xf
   \   00001C   800C         SJMP      ??touchLink_GetRandPrimaryChannel_1
    734            }
    735            else if ( channel <= TOUCHLINK_THIRD_CHANNEL )
   \                     ??touchLink_GetRandPrimaryChannel_2:
   \   00001E   E9           MOV       A,R1
   \   00001F   C3           CLR       C
   \   000020   9415         SUBB      A,#0x15
   \   000022   5004         JNC       ??touchLink_GetRandPrimaryChannel_3
    736            {
    737              channel = TOUCHLINK_THIRD_CHANNEL;
   \   000024   7914         MOV       R1,#0x14
   \   000026   8002         SJMP      ??touchLink_GetRandPrimaryChannel_1
    738            }
    739            else
    740            {
    741              channel = TOUCHLINK_FOURTH_CHANNEL;
   \                     ??touchLink_GetRandPrimaryChannel_3:
   \   000028   7919         MOV       R1,#0x19
    742            }
    743          #ifdef TOUCHLINK_DEV_SELECT_FIRST_CHANNEL
    744          #warning The device will always select the first primary channel
    745            channel = TOUCHLINK_FIRST_CHANNEL;
    746          #endif
    747            return channel;
   \                     ??touchLink_GetRandPrimaryChannel_1:
   \   00002A   02....       LJMP      ??Subroutine46_0 & 0xFFFF
    748          }
    749          
    750          /*********************************************************************
    751           * @fn      touchLink_SetNIB
    752           *
    753           * @brief   Copy new Network Parameters to the NIB.
    754           *
    755           * @param   nwkState - network state
    756           * @param   nwkAddr - short address
    757           * @param   pExtendedPANID - pointer to extended PAN ID
    758           * @param   logicalChannel - channel
    759           * @param   panId - PAN identifier
    760           * @param   nwkUpdateId - nwtwork update identifier
    761           *
    762           * @return      void
    763           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    764          void touchLink_SetNIB( nwk_states_t nwkState, uint16 nwkAddr, uint8 *pExtendedPANID,
   \                     touchLink_SetNIB:
    765                           uint8 logicalChannel, uint16 panId, uint8 nwkUpdateId )
    766          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EC           MOV       A,R4
   \   000008   FE           MOV       R6,A
   \   000009   ED           MOV       A,R5
   \   00000A   FF           MOV       R7,A
    767            // Copy the new network parameters to NIB
    768            _NIB.nwkState = nwkState;
   \   00000B   E9           MOV       A,R1
   \   00000C   90....       MOV       DPTR,#_NIB + 35
   \   00000F   F0           MOVX      @DPTR,A
    769            _NIB.nwkDevAddress = nwkAddr;
   \   000010   90....       MOV       DPTR,#_NIB + 20
   \   000013   EA           MOV       A,R2
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   EB           MOV       A,R3
   \   000017   F0           MOVX      @DPTR,A
   \   000018   7410         MOV       A,#0x10
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F8           MOV       R0,A
    770            _NIB.nwkLogicalChannel = logicalChannel;
   \   00001F   90....       MOV       DPTR,#_NIB + 22
   \   000022   F0           MOVX      @DPTR,A
    771            _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
   \   000023   A3           INC       DPTR
   \   000024   74FE         MOV       A,#-0x2
   \   000026   F0           MOVX      @DPTR,A
   \   000027   A3           INC       DPTR
   \   000028   04           INC       A
   \   000029   F0           MOVX      @DPTR,A
    772            _NIB.channelList = (uint32)1 << logicalChannel;
   \   00002A   75..01       MOV       ?V4,#0x1
   \   00002D   75..00       MOV       ?V5,#0x0
   \   000030   75..00       MOV       ?V6,#0x0
   \   000033   75..00       MOV       ?V7,#0x0
   \   000036   E8           MOV       A,R0
   \   000037   78..         MOV       R0,#?V4
   \   000039   12....       LCALL     ?L_SHL
   \   00003C   90....       MOV       DPTR,#_NIB + 36
   \   00003F   78..         MOV       R0,#?V4
   \   000041   12....       LCALL     ?L_MOV_TO_X
    773            _NIB.nwkPanId = panId;
   \   000044   7411         MOV       A,#0x11
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   00004C   90....       MOV       DPTR,#_NIB + 33
   \   00004F   12....       LCALL     ??Subroutine51_0 & 0xFFFF
    774            _NIB.nodeDepth = 1;
   \                     ??CrossCallReturnLabel_102:
   \   000052   90....       MOV       DPTR,#_NIB + 52
   \   000055   7401         MOV       A,#0x1
   \   000057   F0           MOVX      @DPTR,A
    775            _NIB.MaxRouters = (uint8)gNWK_MAX_DEVICE_LIST;
   \   000058   90....       MOV       DPTR,#gNWK_MAX_DEVICE_LIST
   \   00005B   E4           CLR       A
   \   00005C   93           MOVC      A,@A+DPTR
   \   00005D   90....       MOV       DPTR,#_NIB + 5
   \   000060   F0           MOVX      @DPTR,A
    776            _NIB.MaxChildren = (uint8)gNWK_MAX_DEVICE_LIST;
   \   000061   90....       MOV       DPTR,#gNWK_MAX_DEVICE_LIST
   \   000064   E4           CLR       A
   \   000065   93           MOVC      A,@A+DPTR
   \   000066   90....       MOV       DPTR,#_NIB + 3
   \   000069   F0           MOVX      @DPTR,A
    777            _NIB.allocatedRouterAddresses = 1;
   \   00006A   90....       MOV       DPTR,#_NIB + 44
   \   00006D   7401         MOV       A,#0x1
   \   00006F   12....       LCALL     ?Subroutine15 & 0xFFFF
    778            _NIB.allocatedEndDeviceAddresses = 1;
   \                     ??CrossCallReturnLabel_19:
   \   000072   A3           INC       DPTR
   \   000073   04           INC       A
   \   000074   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000077   7413         MOV       A,#0x13
   \   000079   12....       LCALL     ?XSTACK_DISP0_8
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   F9           MOV       R1,A
    779          
    780            if ( _NIB.nwkUpdateId != nwkUpdateId )
   \   00007E   90....       MOV       DPTR,#_NIB + 109
   \   000081   E0           MOVX      A,@DPTR
   \   000082   69           XRL       A,R1
   \   000083   6003         JZ        ??touchLink_SetNIB_0
    781            {
    782              NLME_SetUpdateID( nwkUpdateId );
   \   000085                ; Setup parameters for call to function NLME_SetUpdateID
   \   000085   12....       LCALL     `??NLME_SetUpdateID::?relay`; Banked call to: NLME_SetUpdateID
    783            }
    784          
    785            osal_cpyExtAddr( _NIB.extendedPANID, pExtendedPANID );
   \                     ??touchLink_SetNIB_0:
   \   000088                ; Setup parameters for call to function sAddrExtCpy
   \   000088   EE           MOV       A,R6
   \   000089   FC           MOV       R4,A
   \   00008A   EF           MOV       A,R7
   \   00008B   FD           MOV       R5,A
   \   00008C   7A..         MOV       R2,#(_NIB + 53) & 0xff
   \   00008E   7B..         MOV       R3,#((_NIB + 53) >> 8) & 0xff
   \   000090   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    786          
    787            // Save the NIB
    788            if ( ( nwkState == NWK_ROUTER ) || ( nwkState == NWK_ENDDEVICE ) )
   \   000093   7408         MOV       A,#0x8
   \   000095   65..         XRL       A,?V0
   \   000097   6006         JZ        ??touchLink_SetNIB_1
   \   000099   7404         MOV       A,#0x4
   \   00009B   65..         XRL       A,?V0
   \   00009D   7005         JNZ       ??touchLink_SetNIB_2
    789            {
    790              touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_NIB );
   \                     ??touchLink_SetNIB_1:
   \   00009F                ; Setup parameters for call to function touchLink_UpdateNV
   \   00009F   7901         MOV       R1,#0x1
   \   0000A1   12....       LCALL     `??touchLink_UpdateNV::?relay`; Banked call to: touchLink_UpdateNV
    791            }
    792            // else will be updated when ED joins its parent
    793          }
   \                     ??touchLink_SetNIB_2:
   \   0000A4   7F08         MOV       R7,#0x8
   \   0000A6   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E4           CLR       A
   \   000003   F0           MOVX      @DPTR,A
   \   000004   A3           INC       DPTR
   \   000005   F0           MOVX      @DPTR,A
   \   000006   A3           INC       DPTR
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET
    794          
    795          /*********************************************************************
    796           * @fn      touchLink_ProcessNwkUpdate
    797           *
    798           * @brief   Update our local network update id and logical channel.
    799           *
    800           * @param   nwkUpdateId - new network update id
    801           * @param   logicalChannel - new logical channel
    802           *
    803           * @return  void
    804           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    805          void touchLink_ProcessNwkUpdate( uint8 nwkUpdateId, uint8 logicalChannel )
   \                     touchLink_ProcessNwkUpdate:
    806          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
    807            // Update the network update id
    808            NLME_SetUpdateID( nwkUpdateId );
   \   000007                ; Setup parameters for call to function NLME_SetUpdateID
   \   000007   12....       LCALL     `??NLME_SetUpdateID::?relay`; Banked call to: NLME_SetUpdateID
    809          
    810            // Switch channel
    811            if ( _NIB.nwkLogicalChannel != logicalChannel )
   \   00000A   90....       MOV       DPTR,#_NIB + 22
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   6E           XRL       A,R6
   \   00000F   6006         JZ        ??touchLink_ProcessNwkUpdate_0
    812            {
    813              _NIB.nwkLogicalChannel = logicalChannel;
   \   000011   EE           MOV       A,R6
   \   000012   F0           MOVX      @DPTR,A
    814              touchLink_SetChannel( logicalChannel );
   \   000013                ; Setup parameters for call to function touchLink_SetChannel
   \   000013   F9           MOV       R1,A
   \   000014   12....       LCALL     `??touchLink_SetChannel::?relay`; Banked call to: touchLink_SetChannel
    815            }
    816          
    817            // Update channel list
    818            _NIB.channelList = (uint32)1 << logicalChannel;
   \                     ??touchLink_ProcessNwkUpdate_0:
   \   000017   75..01       MOV       ?V0,#0x1
   \   00001A   75..00       MOV       ?V1,#0x0
   \   00001D   75..00       MOV       ?V2,#0x0
   \   000020   75..00       MOV       ?V3,#0x0
   \   000023   EE           MOV       A,R6
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?L_SHL
   \   000029   90....       MOV       DPTR,#_NIB + 36
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?L_MOV_TO_X
    819          
    820            // Our Channel has been changed -- notify to save info into NV
    821            ZDApp_NwkStateUpdateCB();
   \   000031                ; Setup parameters for call to function ZDApp_NwkStateUpdateCB
   \   000031   12....       LCALL     `??ZDApp_NwkStateUpdateCB::?relay`; Banked call to: ZDApp_NwkStateUpdateCB
    822            touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_NIB );
   \   000034                ; Setup parameters for call to function touchLink_UpdateNV
   \   000034   7901         MOV       R1,#0x1
   \   000036   12....       LCALL     `??touchLink_UpdateNV::?relay`; Banked call to: touchLink_UpdateNV
    823          
    824            // Reset the total transmit count and the transmit failure counters
    825            _NIB.nwkTotalTransmissions = 0;
   \   000039   90....       MOV       DPTR,#_NIB + 107
   \   00003C   E4           CLR       A
   \   00003D   F0           MOVX      @DPTR,A
   \   00003E   A3           INC       DPTR
   \   00003F   F0           MOVX      @DPTR,A
    826            nwkTransmissionFailures( TRUE );
   \   000040                ; Setup parameters for call to function nwkTransmissionFailures
   \   000040   7901         MOV       R1,#0x1
   \   000042   12....       LCALL     `??nwkTransmissionFailures::?relay`; Banked call to: nwkTransmissionFailures
    827          }
   \   000045   02....       LJMP      ??Subroutine50_0 & 0xFFFF
    828          
    829          /*********************************************************************
    830           * @fn      touchLink_UpdateNV
    831           *
    832           * @brief   Updates NV with NIB and free ranges items
    833           *
    834           * @param   enables - specifies what to update
    835           *
    836           * @return  none
    837           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    838          void touchLink_UpdateNV( uint8 enables )
   \                     touchLink_UpdateNV:
    839          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    840          #if defined ( NV_RESTORE )
    841          
    842           #if defined ( NV_TURN_OFF_RADIO )
    843            // Turn off the radio's receiver during an NV update
    844            uint8 RxOnIdle;
    845            uint8 x = FALSE;
    846            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
    847            ZMacSetReq( ZMacRxOnIdle, &x );
    848           #endif
    849          
    850            if ( enables & TOUCHLINK_UPDATE_NV_NIB )
   \   000007   A2E0         MOV       C,0xE0 /* A   */.0
   \   000009   5029         JNC       ??touchLink_UpdateNV_0
    851            {
    852              // Update NIB in NV
    853              osal_nv_write( ZCD_NV_NIB, 0, sizeof( nwkIB_t ), &_NIB );
   \   00000B                ; Setup parameters for call to function osal_nv_write
   \   00000B   75....       MOV       ?V0,#_NIB & 0xff
   \   00000E   75....       MOV       ?V1,#(_NIB >> 8) & 0xff
   \   000011   78..         MOV       R0,#?V0
   \   000013   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000016   75..6E       MOV       ?V0,#0x6e
   \   000019   75..00       MOV       ?V1,#0x0
   \   00001C   78..         MOV       R0,#?V0
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000021   7C00         MOV       R4,#0x0
   \   000023   7D00         MOV       R5,#0x0
   \   000025   7A21         MOV       R2,#0x21
   \   000027   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00002A   12....       LCALL     ?DEALLOC_XSTACK8
    854          
    855              // Reset the NV startup option to resume from NV by clearing
    856              // the "New" join option.
    857              zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   00002D                ; Setup parameters for call to function zgWriteStartupOptions
   \   00002D   7A02         MOV       R2,#0x2
   \   00002F   7900         MOV       R1,#0x0
   \   000031   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    858            }
    859          
    860            if ( enables & TOUCHLINK_UPDATE_NV_RANGES )
   \                     ??touchLink_UpdateNV_0:
   \   000034   EE           MOV       A,R6
   \   000035   A2E1         MOV       C,0xE0 /* A   */.1
   \   000037   4003         JC        $+5
   \   000039   02....       LJMP      ??touchLink_UpdateNV_1 & 0xFFFF
    861            {
    862              // Store our free network address and group ID ranges
    863              osal_nv_write( ZCD_NV_MIN_FREE_NWK_ADDR, 0, sizeof( touchLinkFreeNwkAddrBegin ), &touchLinkFreeNwkAddrBegin );
   \   00003C                ; Setup parameters for call to function osal_nv_write
   \   00003C   75....       MOV       ?V0,#touchLinkFreeNwkAddrBegin & 0xff
   \   00003F   75....       MOV       ?V1,#(touchLinkFreeNwkAddrBegin >> 8) & 0xff
   \   000042   78..         MOV       R0,#?V0
   \   000044   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000047   75..02       MOV       ?V0,#0x2
   \   00004A   75..00       MOV       ?V1,#0x0
   \   00004D   78..         MOV       R0,#?V0
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000052   7C00         MOV       R4,#0x0
   \   000054   7D00         MOV       R5,#0x0
   \   000056   7A92         MOV       R2,#-0x6e
   \   000058   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00005B   12....       LCALL     ?DEALLOC_XSTACK8
    864              osal_nv_write( ZCD_NV_MAX_FREE_NWK_ADDR, 0, sizeof( touchLinkFreeNwkAddrEnd ), &touchLinkFreeNwkAddrEnd );
   \   00005E                ; Setup parameters for call to function osal_nv_write
   \   00005E   75....       MOV       ?V0,#touchLinkFreeNwkAddrEnd & 0xff
   \   000061   75....       MOV       ?V1,#(touchLinkFreeNwkAddrEnd >> 8) & 0xff
   \   000064   78..         MOV       R0,#?V0
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000069   75..02       MOV       ?V0,#0x2
   \   00006C   75..00       MOV       ?V1,#0x0
   \   00006F   78..         MOV       R0,#?V0
   \   000071   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000074   7C00         MOV       R4,#0x0
   \   000076   7D00         MOV       R5,#0x0
   \   000078   7A93         MOV       R2,#-0x6d
   \   00007A   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00007D   12....       LCALL     ?DEALLOC_XSTACK8
    865              osal_nv_write( ZCD_NV_MIN_FREE_GRP_ID, 0, sizeof( touchLinkFreeGrpIdBegin ), &touchLinkFreeGrpIdBegin );
   \   000080                ; Setup parameters for call to function osal_nv_write
   \   000080   75....       MOV       ?V0,#touchLinkFreeGrpIdBegin & 0xff
   \   000083   75....       MOV       ?V1,#(touchLinkFreeGrpIdBegin >> 8) & 0xff
   \   000086   78..         MOV       R0,#?V0
   \   000088   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008B   75..02       MOV       ?V0,#0x2
   \   00008E   75..00       MOV       ?V1,#0x0
   \   000091   78..         MOV       R0,#?V0
   \   000093   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000096   7C00         MOV       R4,#0x0
   \   000098   7D00         MOV       R5,#0x0
   \   00009A   7A94         MOV       R2,#-0x6c
   \   00009C   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00009F   12....       LCALL     ?DEALLOC_XSTACK8
    866              osal_nv_write( ZCD_NV_MAX_FREE_GRP_ID, 0, sizeof( touchLinkFreeGrpIdEnd ), &touchLinkFreeGrpIdEnd );
   \   0000A2                ; Setup parameters for call to function osal_nv_write
   \   0000A2   75....       MOV       ?V0,#touchLinkFreeGrpIdEnd & 0xff
   \   0000A5   75....       MOV       ?V1,#(touchLinkFreeGrpIdEnd >> 8) & 0xff
   \   0000A8   78..         MOV       R0,#?V0
   \   0000AA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AD   75..02       MOV       ?V0,#0x2
   \   0000B0   75..00       MOV       ?V1,#0x0
   \   0000B3   78..         MOV       R0,#?V0
   \   0000B5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B8   7C00         MOV       R4,#0x0
   \   0000BA   7D00         MOV       R5,#0x0
   \   0000BC   7A95         MOV       R2,#-0x6b
   \   0000BE   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   0000C1   12....       LCALL     ?DEALLOC_XSTACK8
    867          
    868              // Store our group ID range
    869              osal_nv_write( ZCD_NV_MIN_GRP_IDS, 0, sizeof( touchLinkGrpIDsBegin ), &touchLinkGrpIDsBegin );
   \   0000C4                ; Setup parameters for call to function osal_nv_write
   \   0000C4   75....       MOV       ?V0,#touchLinkGrpIDsBegin & 0xff
   \   0000C7   75....       MOV       ?V1,#(touchLinkGrpIDsBegin >> 8) & 0xff
   \   0000CA   78..         MOV       R0,#?V0
   \   0000CC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CF   75..02       MOV       ?V0,#0x2
   \   0000D2   75..00       MOV       ?V1,#0x0
   \   0000D5   78..         MOV       R0,#?V0
   \   0000D7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DA   7C00         MOV       R4,#0x0
   \   0000DC   7D00         MOV       R5,#0x0
   \   0000DE   7A96         MOV       R2,#-0x6a
   \   0000E0   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   0000E3   12....       LCALL     ?DEALLOC_XSTACK8
    870              osal_nv_write( ZCD_NV_MAX_GRP_IDS, 0, sizeof( touchLinkGrpIDsEnd ), &touchLinkGrpIDsEnd );
   \   0000E6                ; Setup parameters for call to function osal_nv_write
   \   0000E6   75....       MOV       ?V0,#touchLinkGrpIDsEnd & 0xff
   \   0000E9   75....       MOV       ?V1,#(touchLinkGrpIDsEnd >> 8) & 0xff
   \   0000EC   78..         MOV       R0,#?V0
   \   0000EE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F1   75..02       MOV       ?V0,#0x2
   \   0000F4   75..00       MOV       ?V1,#0x0
   \   0000F7   78..         MOV       R0,#?V0
   \   0000F9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FC   7C00         MOV       R4,#0x0
   \   0000FE   7D00         MOV       R5,#0x0
   \   000100   7A97         MOV       R2,#-0x69
   \   000102   12....       LCALL     ?Subroutine31 & 0xFFFF
    871            }
   \                     ??CrossCallReturnLabel_56:
   \   000105   12....       LCALL     ?DEALLOC_XSTACK8
    872          
    873           #if defined ( NV_TURN_OFF_RADIO )
    874            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    875           #endif
    876          
    877          #endif // NV_RESTORE
    878          }
   \                     ??touchLink_UpdateNV_1:
   \   000108                REQUIRE ?Subroutine0
   \   000108                ; // Fall through to label ?Subroutine0
    879          
    880          /*********************************************************************
    881           * @fn          touchLink_InitNV
    882           *
    883           * @brief       Initialize free range RAM variables from NV. If NV items
    884           *              don't exist, then the NV is initialize with what is in
    885           *              RAM variables.
    886           *
    887           * @param       none
    888           *
    889           * @return      none
    890           */
    891          static void touchLink_InitNV( void )
    892          {
    893            // Initialize our free network address and group ID ranges
    894            touchLink_ItemInit( ZCD_NV_MIN_FREE_NWK_ADDR, sizeof( touchLinkFreeNwkAddrBegin ), &touchLinkFreeNwkAddrBegin );
    895            touchLink_ItemInit( ZCD_NV_MAX_FREE_NWK_ADDR, sizeof( touchLinkFreeNwkAddrEnd ), &touchLinkFreeNwkAddrEnd );
    896            touchLink_ItemInit( ZCD_NV_MIN_FREE_GRP_ID, sizeof( touchLinkFreeGrpIdBegin ), &touchLinkFreeGrpIdBegin );
    897            touchLink_ItemInit( ZCD_NV_MAX_FREE_GRP_ID, sizeof( touchLinkFreeGrpIdEnd ), &touchLinkFreeGrpIdEnd );
    898          
    899            // Initialize our group ID range
    900            touchLink_ItemInit( ZCD_NV_MIN_GRP_IDS, sizeof( touchLinkGrpIDsBegin ), &touchLinkGrpIDsBegin );
    901            touchLink_ItemInit( ZCD_NV_MAX_GRP_IDS, sizeof( touchLinkGrpIDsEnd ), &touchLinkGrpIDsEnd );
    902          }
    903          
    904          /*********************************************************************
    905           * @fn      touchLink_ItemInit
    906           *
    907           * @brief   Initialize an NV item. If the item doesn't exist in NV memory,
    908           *          write the default (value passed in) into NV memory. But if
    909           *          it exists, set the item to the value stored in NV memory.
    910           *
    911           * @param   id - item id
    912           * @param   len - item len
    913           * @param   buf - pointer to the item
    914           *
    915           * @return  none
    916           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    917          void touchLink_ItemInit( uint16 id, uint16 len, void *pBuf )
   \                     touchLink_ItemInit:
    918          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   \   00000D   740C         MOV       A,#0xc
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   12....       LCALL     ?Subroutine27 & 0xFFFF
    919          #if defined ( NV_RESTORE )
    920            // If the item doesn't exist in NV memory, create and initialize
    921            // it with the value passed in.
    922            if ( osal_nv_item_init( id, len, pBuf ) == ZSuccess )
   \                     ??CrossCallReturnLabel_43:
   \   000015   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000018   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00001B   7402         MOV       A,#0x2
   \   00001D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000020   E9           MOV       A,R1
   \   000021   701A         JNZ       ??touchLink_ItemInit_0
    923            {
    924              // The item already exists in NV memory, read it from NV memory
    925              osal_nv_read( id, 0, len, pBuf );
   \   000023                ; Setup parameters for call to function osal_nv_read
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   78..         MOV       R0,#?V2
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   7C00         MOV       R4,#0x0
   \   00002F   7D00         MOV       R5,#0x0
   \   000031   EE           MOV       A,R6
   \   000032   FA           MOV       R2,A
   \   000033   EF           MOV       A,R7
   \   000034   FB           MOV       R3,A
   \   000035   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000038   7404         MOV       A,#0x4
   \   00003A   12....       LCALL     ?DEALLOC_XSTACK8
    926            }
    927          #endif // NV_RESTORE
    928          }
   \                     ??touchLink_ItemInit_0:
   \   00003D   02....       LJMP      ??Subroutine50_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000003                ; Setup parameters for call to function osal_nv_item_init
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET
    929          
    930          /*********************************************************************
    931           * @fn      touchLink_SetMacNwkParams
    932           *
    933           * @brief   Configure MAC with our Network Parameters.
    934           *
    935           * @param   nwkAddr - network address
    936           * @param   panId - PAN identifier
    937           * @param   channel
    938           *
    939           * @return  void
    940           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    941          void touchLink_SetMacNwkParams( uint16 nwkAddr, uint16 panId, uint8 channel )
   \                     touchLink_SetMacNwkParams:
    942          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   85..82       MOV       DPL,?XSP + 0
   \   000017   85..83       MOV       DPH,?XSP + 1
   \   00001A   EC           MOV       A,R4
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   A3           INC       DPTR
   \   00001D   ED           MOV       A,R5
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   E9           MOV       A,R1
   \   000020   FE           MOV       R6,A
    943            // Set our short address
    944            ZMacSetReq( ZMacShortAddress, (byte*)&nwkAddr );
   \   000021                ; Setup parameters for call to function ZMacSetReq
   \   000021   7402         MOV       A,#0x2
   \   000023   12....       LCALL     ?XSTACK_DISP101_8
   \   000026   7953         MOV       R1,#0x53
   \   000028   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    945          
    946            // Set our PAN ID
    947            ZMacSetReq( ZMacPanId, (byte*)&panId );
   \   00002B                ; Setup parameters for call to function ZMacSetReq
   \   00002B   AA..         MOV       R2,?XSP + 0
   \   00002D   AB..         MOV       R3,?XSP + 1
   \   00002F   7950         MOV       R1,#0x50
   \   000031   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    948          
    949            // Tune to the selected logical channel
    950            touchLink_SetChannel( channel );
   \   000034                ; Setup parameters for call to function touchLink_SetChannel
   \   000034   EE           MOV       A,R6
   \   000035   F9           MOV       R1,A
   \   000036   12....       LCALL     `??touchLink_SetChannel::?relay`; Banked call to: touchLink_SetChannel
    951          }
   \   000039   7404         MOV       A,#0x4
   \   00003B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003E   02....       LJMP      ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    952          
    953          /*********************************************************************
    954           * @fn      touchLink_SetChannel
    955           *
    956           * @brief   Set our channel.
    957           *
    958           * @param   channel - new channel to change to
    959           *
    960           * @return  void
    961           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    962          void touchLink_SetChannel( uint8 channel )
   \                     touchLink_SetChannel:
    963          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
    964            bdb_setChannel( (uint32) ( 1L << channel ) );
   \   000012                ; Setup parameters for call to function bdb_setChannel
   \   000012   75..01       MOV       ?V0,#0x1
   \   000015   75..00       MOV       ?V1,#0x0
   \   000018   75..00       MOV       ?V2,#0x0
   \   00001B   75..00       MOV       ?V3,#0x0
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?L_SHL
   \   000023   AA..         MOV       R2,?V0
   \   000025   AB..         MOV       R3,?V1
   \   000027   AC..         MOV       R4,?V2
   \   000029   AD..         MOV       R5,?V3
   \   00002B   12....       LCALL     `??bdb_setChannel::?relay`; Banked call to: bdb_setChannel
    965          
    966            // Set the new channel
    967            ZMacSetReq( ZMacChannel, &channel );
   \   00002E                ; Setup parameters for call to function ZMacSetReq
   \   00002E   AA..         MOV       R2,?XSP + 0
   \   000030   AB..         MOV       R3,?XSP + 1
   \   000032   79E1         MOV       R1,#-0x1f
   \   000034   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    968          }
   \   000037   7401         MOV       A,#0x1
   \   000039   02....       LJMP      ?Subroutine4 & 0xFFFF
    969          
    970          /*********************************************************************
    971           * @fn      touchLink_SendDeviceInfoRsp
    972           *
    973           * @brief   Send out a Device Information Response command.
    974           *
    975           * @param   srcEP - sender's endpoint
    976           * @param   dstAddr - destination address
    977           * @param   startIndex - start index
    978           * @param   transID - received transaction id
    979           * @param   seqNum - received sequence number
    980           *
    981           * @return  ZStatus_t
    982           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    983          uint8 touchLink_SendDeviceInfoRsp( uint8 srcEP, afAddrType_t *dstAddr, uint8 startIndex,
   \                     touchLink_SendDeviceInfoRsp:
    984                                       uint32 transID, uint8 seqNum )
    985          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000   74EF         MOV       A,#-0x11
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V4,R1
   \   000007   8A..         MOV       ?V6,R2
   \   000009   8B..         MOV       ?V7,R3
   \   00000B   8C..         MOV       ?V1,R4
   \   00000D   8D..         MOV       ?V5,R5
    986            bdbTLDeviceInfoRsp_t *pRsp;
    987            uint8 cnt;
    988            uint8 rspLen;
    989            uint8 status = ZSuccess;
    990          
    991            cnt = touchLink_GetNumSubDevices( startIndex );
   \   00000F                ; Setup parameters for call to function touchLink_GetNumSubDevices
   \   00000F   A9..         MOV       R1,?V1
   \   000011   12....       LCALL     `??touchLink_GetNumSubDevices::?relay`; Banked call to: touchLink_GetNumSubDevices
   \   000014   E9           MOV       A,R1
   \   000015   F5..         MOV       ?V0,A
    992            if ( cnt > TOUCHLINK_DEVICE_INFO_RSP_REC_COUNT_MAX )
   \   000017   C3           CLR       C
   \   000018   9406         SUBB      A,#0x6
   \   00001A   4003         JC        ??touchLink_SendDeviceInfoRsp_0
    993            {
    994              cnt = TOUCHLINK_DEVICE_INFO_RSP_REC_COUNT_MAX; // should be between 0x00-0x05
   \   00001C   75..05       MOV       ?V0,#0x5
    995            }
    996          
    997            rspLen = sizeof( bdbTLDeviceInfoRsp_t ) + ( cnt * sizeof( devInfoRec_t ) );
    998          
    999            pRsp = (bdbTLDeviceInfoRsp_t *)osal_mem_alloc( rspLen );
   \                     ??touchLink_SendDeviceInfoRsp_0:
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   E5..         MOV       A,?V0
   \   000021   C4           SWAP      A
   \   000022   54F0         ANL       A,#0xf0
   \   000024   2417         ADD       A,#0x17
   \   000026   FA           MOV       R2,A
   \   000027   7B00         MOV       R3,#0x0
   \   000029   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002C   8A..         MOV       ?V2,R2
   \   00002E   8B..         MOV       ?V3,R3
   \   000030   AE..         MOV       R6,?V2
   \   000032   AF..         MOV       R7,?V3
   1000            if ( pRsp )
   \   000034   EA           MOV       A,R2
   \   000035   4F           ORL       A,R7
   \   000036   7003         JNZ       $+5
   \   000038   02....       LJMP      ??touchLink_SendDeviceInfoRsp_1 & 0xFFFF
   1001            {
   1002              pRsp->transID = transID;
   \   00003B   7411         MOV       A,#0x11
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   12....       LCALL     ?XLOAD_R0123
   \   000043   8E82         MOV       DPL,R6
   \   000045   8F83         MOV       DPH,R7
   \   000047   12....       LCALL     ?XSTORE_R0123
   1003          
   1004              pRsp->numSubDevices = touchLink_GetNumSubDevices( 0 );
   \   00004A                ; Setup parameters for call to function touchLink_GetNumSubDevices
   \   00004A   7900         MOV       R1,#0x0
   \   00004C   12....       LCALL     `??touchLink_GetNumSubDevices::?relay`; Banked call to: touchLink_GetNumSubDevices
   \   00004F   E9           MOV       A,R1
   \   000050   8E82         MOV       DPL,R6
   \   000052   8F83         MOV       DPH,R7
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   12....       LCALL     ?Subroutine41 & 0xFFFF
   1005              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_76:
   \   00005B   E5..         MOV       A,?V1
   \   00005D   12....       LCALL     ?Subroutine12 & 0xFFFF
   1006              pRsp->cnt = cnt;
   \                     ??CrossCallReturnLabel_13:
   \   000060   E5..         MOV       A,?V0
   \   000062   F0           MOVX      @DPTR,A
   1007          
   1008              for ( uint8 i = 0; i < cnt; i++ )
   \   000063   75..00       MOV       ?V8,#0x0
   \   000066   804D         SJMP      ??touchLink_SendDeviceInfoRsp_2
   1009              {
   1010                devInfoRec_t *pRec = &(pRsp->devInfoRec[i]);
   \                     ??touchLink_SendDeviceInfoRsp_3:
   \   000068   E5..         MOV       A,?V8
   \   00006A   F5..         MOV       ?V2,A
   \   00006C   75..00       MOV       ?V3,#0x0
   \   00006F   7404         MOV       A,#0x4
   \   000071   78..         MOV       R0,#?V2
   \   000073   12....       LCALL     ?S_SHL
   \   000076   EE           MOV       A,R6
   \   000077   25..         ADD       A,?V2
   \   000079   F8           MOV       R0,A
   \   00007A   EF           MOV       A,R7
   \   00007B   35..         ADDC      A,?V3
   \   00007D   F9           MOV       R1,A
   \   00007E   E8           MOV       A,R0
   \   00007F   2407         ADD       A,#0x7
   \   000081   F5..         MOV       ?V2,A
   \   000083   E4           CLR       A
   \   000084   39           ADDC      A,R1
   \   000085   F5..         MOV       ?V3,A
   1011          
   1012                osal_cpyExtAddr( pRec->ieeeAddr, NLME_GetExtAddr() );
   \   000087                ; Setup parameters for call to function sAddrExtCpy
   \   000087                ; Setup parameters for call to function NLME_GetExtAddr
   \   000087   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00008A   EA           MOV       A,R2
   \   00008B   FC           MOV       R4,A
   \   00008C   EB           MOV       A,R3
   \   00008D   FD           MOV       R5,A
   \   00008E   AA..         MOV       R2,?V2
   \   000090   AB..         MOV       R3,?V3
   \   000092   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1013          
   1014                touchLink_GetSubDeviceInfo( startIndex + i, &(pRec->deviceInfo) );
   \   000095                ; Setup parameters for call to function touchLink_GetSubDeviceInfo
   \   000095   E5..         MOV       A,?V2
   \   000097   2408         ADD       A,#0x8
   \   000099   FA           MOV       R2,A
   \   00009A   E4           CLR       A
   \   00009B   35..         ADDC      A,?V3
   \   00009D   FB           MOV       R3,A
   \   00009E   E5..         MOV       A,?V1
   \   0000A0   25..         ADD       A,?V8
   \   0000A2   F9           MOV       R1,A
   \   0000A3   12....       LCALL     `??touchLink_GetSubDeviceInfo::?relay`; Banked call to: touchLink_GetSubDeviceInfo
   1015          
   1016                pRec->sort = 0;
   \   0000A6   E5..         MOV       A,?V2
   \   0000A8   240F         ADD       A,#0xf
   \   0000AA   F582         MOV       DPL,A
   \   0000AC   E4           CLR       A
   \   0000AD   35..         ADDC      A,?V3
   \   0000AF   F583         MOV       DPH,A
   \   0000B1   E4           CLR       A
   \   0000B2   F0           MOVX      @DPTR,A
   1017              }
   \   0000B3   05..         INC       ?V8
   \                     ??touchLink_SendDeviceInfoRsp_2:
   \   0000B5   E5..         MOV       A,?V8
   \   0000B7   C3           CLR       C
   \   0000B8   95..         SUBB      A,?V0
   \   0000BA   40AC         JC        ??touchLink_SendDeviceInfoRsp_3
   1018          
   1019              // Send a response back
   1020              status = bdbTL_Send_DeviceInfoRsp( srcEP, dstAddr, pRsp, seqNum );
   \   0000BC                ; Setup parameters for call to function bdbTL_Send_DeviceInfoRsp
   \   0000BC   E5..         MOV       A,?V5
   \   0000BE   F5..         MOV       ?V0,A
   \   0000C0   78..         MOV       R0,#?V0
   \   0000C2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C5   EE           MOV       A,R6
   \   0000C6   FC           MOV       R4,A
   \   0000C7   EF           MOV       A,R7
   \   0000C8   FD           MOV       R5,A
   \   0000C9   AA..         MOV       R2,?V6
   \   0000CB   AB..         MOV       R3,?V7
   \   0000CD   A9..         MOV       R1,?V4
   \   0000CF   12....       LCALL     `??bdbTL_Send_DeviceInfoRsp::?relay`; Banked call to: bdbTL_Send_DeviceInfoRsp
   \   0000D2   7401         MOV       A,#0x1
   \   0000D4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D7   E9           MOV       A,R1
   \   0000D8   F5..         MOV       ?V0,A
   1021          
   1022              osal_mem_free( pRsp );
   \   0000DA                ; Setup parameters for call to function osal_mem_free
   \   0000DA   EE           MOV       A,R6
   \   0000DB   FA           MOV       R2,A
   \   0000DC   EF           MOV       A,R7
   \   0000DD   FB           MOV       R3,A
   \   0000DE   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000E1   8003         SJMP      ??touchLink_SendDeviceInfoRsp_4
   1023            }
   1024            else
   1025            {
   1026              status = ZMemError;
   \                     ??touchLink_SendDeviceInfoRsp_1:
   \   0000E3   75..10       MOV       ?V0,#0x10
   1027            }
   1028          
   1029            return ( status );
   \                     ??touchLink_SendDeviceInfoRsp_4:
   \   0000E6   A9..         MOV       R1,?V0
   \   0000E8   7F09         MOV       R7,#0x9
   \   0000EA   02....       LJMP      ?BANKED_LEAVE_XDATA
   1030          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET
   1031          
   1032          /*********************************************************************
   1033           * @fn      touchLink_SendLeaveReq
   1034           *
   1035           * @brief   Send out a Leave Request command.
   1036           *
   1037           * @param   void
   1038           *
   1039           * @return  ZStatus_t
   1040           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1041          ZStatus_t touchLink_SendLeaveReq( void )
   \                     touchLink_SendLeaveReq:
   1042          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 5
   \   000004   74FB         MOV       A,#-0x5
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   1043            NLME_LeaveReq_t leaveReq;
   1044            
   1045            // Set every field to 0
   1046            osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   7C05         MOV       R4,#0x5
   \   00000B   7D00         MOV       R5,#0x0
   \   00000D   7900         MOV       R1,#0x0
   \   00000F   AA..         MOV       R2,?XSP + 0
   \   000011   AB..         MOV       R3,?XSP + 1
   \   000013   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1047            
   1048            // Send out our leave
   1049            return ( NLME_LeaveReq( &leaveReq ) );
   \   000016                ; Setup parameters for call to function NLME_LeaveReq
   \   000016   AA..         MOV       R2,?XSP + 0
   \   000018   AB..         MOV       R3,?XSP + 1
   \   00001A   12....       LCALL     `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   00001D   7405         MOV       A,#0x5
   \   00001F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000022   02....       LJMP      ??Subroutine46_0 & 0xFFFF
   1050          }
   1051          
   1052          /*********************************************************************
   1053           * @fn      touchLink_GetMsgRssi
   1054           *
   1055           * @brief   Get the RSSI of the message just received through a ZCL callback.
   1056           *
   1057           * @param   none
   1058           *
   1059           * @return  RSSI if AF message was received, TOUCHLINK_WORST_RSSI otherwise.
   1060           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1061          int8 touchLink_GetMsgRssi( void )
   \                     touchLink_GetMsgRssi:
   1062          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1063            afIncomingMSGPacket_t *pAF = zcl_getRawAFMsg();
   \   000005                ; Setup parameters for call to function zcl_getRawAFMsg
   \   000005   12....       LCALL     `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
   \   000008   8B..         MOV       ?V1,R3
   \   00000A   A9..         MOV       R1,?V1
   1064          
   1065            if ( pAF != NULL )
   \   00000C   EA           MOV       A,R2
   \   00000D   49           ORL       A,R1
   \   00000E   600D         JZ        ??touchLink_GetMsgRssi_0
   1066            {
   1067              return ( pAF->rssi );
   \   000010   EA           MOV       A,R2
   \   000011   2418         ADD       A,#0x18
   \   000013   F582         MOV       DPL,A
   \   000015   E4           CLR       A
   \   000016   39           ADDC      A,R1
   \   000017   F583         MOV       DPH,A
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F9           MOV       R1,A
   \   00001B   8002         SJMP      ??touchLink_GetMsgRssi_1
   1068            }
   1069          
   1070            return ( TOUCHLINK_WORST_RSSI );
   \                     ??touchLink_GetMsgRssi_0:
   \   00001D   79BA         MOV       R1,#-0x46
   \                     ??touchLink_GetMsgRssi_1:
   \   00001F   02....       LJMP      ?Subroutine0 & 0xFFFF
   1071          }
   1072          
   1073          /*********************************************************************
   1074           * @fn      touchLink_NewNwkUpdateId
   1075           *
   1076           * @brief   Determine the new network update id. The nwkUpdateId attribute
   1077           *          can take the value of 0x00 - 0xff and may wrap around so care
   1078           *          must be taken when comparing for newness.
   1079           *
   1080           * @param   ID1 - first nwk update id
   1081           * @param   ID2 - second nwk update id
   1082           *
   1083           * @return  new nwk update ID
   1084           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1085          uint8 touchLink_NewNwkUpdateId( uint8 ID1, uint8 ID2 )
   \                     touchLink_NewNwkUpdateId:
   1086          {
   \   000000   EE           MOV       A,R6
   \   000001   C0E0         PUSH      A
   \   000003                ; Saved register size: 1
   \   000003                ; Auto size: 0
   \   000003   E9           MOV       A,R1
   \   000004   FE           MOV       R6,A
   1087            if ( ( (ID1 >= ID2) && ((ID1 - ID2) > 200) )
   1088                || ( (ID1 < ID2) && ((ID2 - ID1) > 200) ) )
   \   000005   EA           MOV       A,R2
   \   000006   FC           MOV       R4,A
   \   000007   E9           MOV       A,R1
   \   000008   F8           MOV       R0,A
   \   000009   C3           CLR       C
   \   00000A   9A           SUBB      A,R2
   \   00000B   4012         JC        ??touchLink_NewNwkUpdateId_0
   \   00000D   E9           MOV       A,R1
   \   00000E   C3           CLR       C
   \   00000F   9C           SUBB      A,R4
   \   000010   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000013   5015         JNC       ??touchLink_NewNwkUpdateId_1
   \   000015   EE           MOV       A,R6
   \                     ??touchLink_NewNwkUpdateId_2:
   \   000016   FB           MOV       R3,A
   \   000017   EB           MOV       A,R3
   \                     ??touchLink_NewNwkUpdateId_3:
   \   000018   F9           MOV       R1,A
   \   000019   D0E0         POP       A
   \   00001B   FE           MOV       R6,A
   \   00001C   02....       LJMP      ?BRET
   \                     ??touchLink_NewNwkUpdateId_0:
   \   00001F   EA           MOV       A,R2
   \   000020   C3           CLR       C
   \   000021   98           SUBB      A,R0
   \   000022   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000025   4006         JC        ??touchLink_NewNwkUpdateId_4
   \   000027   EE           MOV       A,R6
   \   000028   80EE         SJMP      ??touchLink_NewNwkUpdateId_3
   \                     ??touchLink_NewNwkUpdateId_1:
   \   00002A   EA           MOV       A,R2
   \   00002B   80EB         SJMP      ??touchLink_NewNwkUpdateId_3
   \                     ??touchLink_NewNwkUpdateId_4:
   \   00002D   EA           MOV       A,R2
   \   00002E   80E6         SJMP      ??touchLink_NewNwkUpdateId_2
   1089            {
   1090              return ( MIN( ID1, ID2 ) );
   1091            }
   1092          
   1093            return ( MAX( ID1, ID2 ) );
   1094          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   F8           MOV       R0,A
   \   000001   95E0         SUBB      A,0xE0 /* A   */
   \   000003   F9           MOV       R1,A
   \   000004   C3           CLR       C
   \   000005   E8           MOV       A,R0
   \   000006   94C9         SUBB      A,#-0x37
   \   000008   E9           MOV       A,R1
   \   000009   9400         SUBB      A,#0x0
   \   00000B   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00000D   65D0         XRL       A,PSW
   \   00000F   33           RLC       A
   \   000010   22           RET
   1095          
   1096          /*********************************************************************
   1097           * @fn      touchLink_SetTouchLinkTaskId
   1098           *
   1099           * @brief   Register Target/Initiator taskID for commissioning events
   1100           *
   1101           * @param   taskID
   1102           *
   1103           * @return  none
   1104           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1105          void touchLink_SetTouchLinkTaskId( uint8 taskID )
   \                     touchLink_SetTouchLinkTaskId:
   1106          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   1107            touchLinkTaskId = taskID;
   \   000006   90....       MOV       DPTR,#touchLinkTaskId
   \   000009   F0           MOVX      @DPTR,A
   1108          
   1109            // register internal EP for TOUCHLINK messages
   1110            bdb_RegisterSimpleDescriptor( &touchLink_EP_SimpleDesc );
   \   00000A                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   00000A   7A..         MOV       R2,#touchLink_EP_SimpleDesc & 0xff
   \   00000C   7B..         MOV       R3,#(touchLink_EP_SimpleDesc >> 8) & 0xff
   \   00000E   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
   1111          
   1112          #if defined( INTER_PAN )
   1113            // Register with Stub APS
   1114            StubAPS_RegisterApp( &touchLink_EP );
   \   000011                ; Setup parameters for call to function StubAPS_RegisterApp
   \   000011   7A..         MOV       R2,#touchLink_EP & 0xff
   \   000013   7B..         MOV       R3,#(touchLink_EP >> 8) & 0xff
   \   000015   12....       LCALL     `??StubAPS_RegisterApp::?relay`; Banked call to: StubAPS_RegisterApp
   1115          #endif // INTER_PAN
   1116          }
   \   000018   02....       LJMP      ?Subroutine5 & 0xFFFF
   1117          
   1118          /*********************************************************************
   1119           * @fn      touchLink_PerformNetworkDisc
   1120           *
   1121           * @brief   Perform a Network Discovery scan.
   1122           *          Scan results will be stored locally to analyze.
   1123           *
   1124           * @param   scanChannelList - channels to perform discovery scan
   1125           *
   1126           * @return  void
   1127           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1128          void touchLink_PerformNetworkDisc( uint32 scanChannelList )
   \                     touchLink_PerformNetworkDisc:
   1129          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV       A,#-0x7
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   8C..         MOV       ?V2,R4
   \   000010   8D..         MOV       ?V3,R5
   1130            NLME_ScanFields_t scan;
   1131          
   1132            scan.channels = scanChannelList;
   \   000012   85..82       MOV       DPL,?XSP + 0
   \   000015   85..83       MOV       DPH,?XSP + 1
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?L_MOV_TO_X
   1133            scan.duration = BEACON_ORDER_240_MSEC;
   \   00001D   7404         MOV       A,#0x4
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   7404         MOV       A,#0x4
   \   000024   F0           MOVX      @DPTR,A
   1134            scan.scanType = ZMAC_ACTIVE_SCAN;
   \   000025   04           INC       A
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   7401         MOV       A,#0x1
   \   00002B   F0           MOVX      @DPTR,A
   1135            scan.scanApp  = NLME_DISC_SCAN;
   \   00002C   7406         MOV       A,#0x6
   \   00002E   12....       LCALL     ?XSTACK_DISP0_8
   \   000031   7401         MOV       A,#0x1
   \   000033   F0           MOVX      @DPTR,A
   1136          
   1137            if ( NLME_NwkDiscReq2( &scan ) == ZSuccess )
   \   000034                ; Setup parameters for call to function NLME_NwkDiscReq2
   \   000034   AA..         MOV       R2,?XSP + 0
   \   000036   AB..         MOV       R3,?XSP + 1
   \   000038   12....       LCALL     `??NLME_NwkDiscReq2::?relay`; Banked call to: NLME_NwkDiscReq2
   \   00003B   E9           MOV       A,R1
   \   00003C   7014         JNZ       ??touchLink_PerformNetworkDisc_0
   1138            {
   1139              // Register ZDO callback to handle the network discovery confirm and
   1140              // beacon notification confirm
   1141              ZDO_RegisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID, touchLink_NwkDiscoveryCnfCB );
   \   00003E                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   00003E   7A..         MOV       R2,#`??touchLink_NwkDiscoveryCnfCB::?relay` & 0xff
   \   000040   7B..         MOV       R3,#(`??touchLink_NwkDiscoveryCnfCB::?relay` >> 8) & 0xff
   \   000042   7902         MOV       R1,#0x2
   \   000044   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   1142              ZDO_RegisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID, touchLink_BeaconIndCB );
   \   000047                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000047   7A..         MOV       R2,#`??touchLink_BeaconIndCB::?relay` & 0xff
   \   000049   7B..         MOV       R3,#(`??touchLink_BeaconIndCB::?relay` >> 8) & 0xff
   \   00004B   7903         MOV       R1,#0x3
   \   00004D   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   \   000050   8003         SJMP      ??touchLink_PerformNetworkDisc_1
   1143            }
   1144            else
   1145            {
   1146              NLME_NwkDiscTerm();
   \                     ??touchLink_PerformNetworkDisc_0:
   \   000052                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000052   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1147            }
   1148          }
   \                     ??touchLink_PerformNetworkDisc_1:
   \   000055   7407         MOV       A,#0x7
   \   000057   02....       LJMP      ?Subroutine4 & 0xFFFF
   1149          
   1150          /*********************************************************************
   1151           * @fn      touchLink_BeaconIndCB
   1152           *
   1153           * @brief   Process the incoming beacon indication.
   1154           *
   1155           * @param   param -  pointer to a parameter and a structure of parameters
   1156           *
   1157           * @return  void
   1158           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1159          static void *touchLink_BeaconIndCB ( void *param )
   \                     touchLink_BeaconIndCB:
   1160          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   1161            NLME_beaconInd_t *pBeacon = param;
   1162            touchLinkDiscoveredNwkParam_t *pParam = pDiscoveredNwkParamList;
   \   000009   90....       MOV       DPTR,#pDiscoveredNwkParamList
   \   00000C   12....       LCALL     ?Subroutine24 & 0xFFFF
   1163            touchLinkDiscoveredNwkParam_t *pLastParam;
   1164            uint8 found = FALSE;
   \                     ??CrossCallReturnLabel_37:
   \   00000F   EA           MOV       A,R2
   \   000010   2404         ADD       A,#0x4
   \   000012   F5..         MOV       ?V4,A
   \   000014   E4           CLR       A
   \   000015   35..         ADDC      A,?V1
   \   000017   F5..         MOV       ?V5,A
   \   000019   EA           MOV       A,R2
   \   00001A   2402         ADD       A,#0x2
   \   00001C   F5..         MOV       ?V2,A
   \   00001E   E4           CLR       A
   \   00001F   35..         ADDC      A,?V1
   \   000021   F5..         MOV       ?V3,A
   \   000023   8037         SJMP      ??CrossCallReturnLabel_38
   1165          
   1166          
   1167            // Add the network parameter to the Network Parameter List
   1168            while ( pParam != NULL )
   1169            {
   1170              if ( ( pParam->PANID == pBeacon->panID ) &&
   1171                  ( pParam->logicalChannel == pBeacon->logicalChannel ) )
   \                     ??touchLink_BeaconIndCB_0:
   \   000025   8E82         MOV       DPL,R6
   \   000027   8F83         MOV       DPH,R7
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   00002E   85..82       MOV       DPL,?V2
   \   000031   85..83       MOV       DPH,?V3
   \   000034   E0           MOVX      A,@DPTR
   \   000035   68           XRL       A,R0
   \   000036   7003         JNZ       ??touchLink_BeaconIndCB_1
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   69           XRL       A,R1
   \                     ??touchLink_BeaconIndCB_1:
   \   00003B   7014         JNZ       ??touchLink_BeaconIndCB_2
   \   00003D   8E82         MOV       DPL,R6
   \   00003F   8F83         MOV       DPH,R7
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F8           MOV       R0,A
   \   000047   85..82       MOV       DPL,?V4
   \   00004A   85..83       MOV       DPH,?V5
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   68           XRL       A,R0
   \   00004F   605B         JZ        ??touchLink_BeaconIndCB_3
   1172              {
   1173                found = TRUE;
   1174                break;
   1175              }
   1176              
   1177              pLastParam = pParam;
   \                     ??touchLink_BeaconIndCB_2:
   \   000051   8E..         MOV       ?V6,R6
   \   000053   8F..         MOV       ?V7,R7
   1178              pParam = pParam->nextParam;
   \   000055   8E82         MOV       DPL,R6
   \   000057   8F83         MOV       DPH,R7
   \   000059   12....       LCALL     ?Subroutine24 & 0xFFFF
   1179            }
   \                     ??CrossCallReturnLabel_38:
   \   00005C   EE           MOV       A,R6
   \   00005D   4F           ORL       A,R7
   \   00005E   70C5         JNZ       ??touchLink_BeaconIndCB_0
   1180            
   1181            // If no existing parameter found, make a new one and add to the list
   1182            if ( found == FALSE )
   1183            {
   1184              pParam = osal_mem_alloc( sizeof( touchLinkDiscoveredNwkParam_t ) );
   \   000060                ; Setup parameters for call to function osal_mem_alloc
   \   000060   7A13         MOV       R2,#0x13
   \   000062   7B00         MOV       R3,#0x0
   \   000064   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000067   8A..         MOV       ?V8,R2
   \   000069   8B..         MOV       ?V9,R3
   \   00006B   AE..         MOV       R6,?V8
   \   00006D   AF..         MOV       R7,?V9
   1185              if ( pParam == NULL )
   \   00006F   EA           MOV       A,R2
   \   000070   4F           ORL       A,R7
   \   000071   7003         JNZ       $+5
   \   000073   02....       LJMP      ??touchLink_BeaconIndCB_4 & 0xFFFF
   1186              {
   1187                // Memory alloc failed, discard this beacon
   1188                return ( NULL );
   1189              }
   1190              
   1191              // Clear the network descriptor
   1192              osal_memset( pParam, 0, sizeof( touchLinkDiscoveredNwkParam_t )  );
   \   000076                ; Setup parameters for call to function osal_memset
   \   000076   7C13         MOV       R4,#0x13
   \   000078   7D00         MOV       R5,#0x0
   \   00007A   7900         MOV       R1,#0x0
   \   00007C   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1193              
   1194              // Initialize the descriptor
   1195              pParam->chosenRouter = INVALID_NODE_ADDR;
   \   00007F   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000082   74FE         MOV       A,#-0x2
   \   000084   F0           MOVX      @DPTR,A
   \   000085   A3           INC       DPTR
   \   000086   04           INC       A
   \   000087   F0           MOVX      @DPTR,A
   1196              pParam->chosenRouterDepth = 0xFF;
   \   000088   EE           MOV       A,R6
   \   000089   2410         ADD       A,#0x10
   \   00008B   F582         MOV       DPL,A
   \   00008D   E4           CLR       A
   \   00008E   3F           ADDC      A,R7
   \   00008F   F583         MOV       DPH,A
   \   000091   74FF         MOV       A,#-0x1
   \   000093   F0           MOVX      @DPTR,A
   1197              
   1198              // Save new entry into the descriptor list
   1199              if ( pDiscoveredNwkParamList == NULL )
   \   000094   90....       MOV       DPTR,#pDiscoveredNwkParamList
   \   000097   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00009A   7005         JNZ       ??touchLink_BeaconIndCB_5
   1200              {
   1201                // First element in the list
   1202                pDiscoveredNwkParamList = pParam;
   \   00009C   90....       MOV       DPTR,#pDiscoveredNwkParamList
   \   00009F   8006         SJMP      ??touchLink_BeaconIndCB_6
   1203              }
   1204              else
   1205              {
   1206                // Last element in the list
   1207                pLastParam->nextParam = pParam;
   \                     ??touchLink_BeaconIndCB_5:
   \   0000A1   85..82       MOV       DPL,?V6
   \   0000A4   85..83       MOV       DPH,?V7
   \                     ??touchLink_BeaconIndCB_6:
   \   0000A7   EE           MOV       A,R6
   \   0000A8   F0           MOVX      @DPTR,A
   \   0000A9   A3           INC       DPTR
   \   0000AA   EF           MOV       A,R7
   \   0000AB   F0           MOVX      @DPTR,A
   1208              }
   1209            }
   1210            
   1211            // Update the descriptor with the incoming beacon
   1212            pParam->logicalChannel = pBeacon->logicalChannel;
   \                     ??touchLink_BeaconIndCB_3:
   \   0000AC   85..82       MOV       DPL,?V4
   \   0000AF   85..83       MOV       DPH,?V5
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   8E82         MOV       DPL,R6
   \   0000B5   8F83         MOV       DPH,R7
   \   0000B7   A3           INC       DPTR
   \   0000B8   A3           INC       DPTR
   \   0000B9   A3           INC       DPTR
   \   0000BA   A3           INC       DPTR
   \   0000BB   12....       LCALL     ?Subroutine19 & 0xFFFF
   1213            pParam->PANID          = pBeacon->panID;
   \                     ??CrossCallReturnLabel_25:
   \   0000BE   F8           MOV       R0,A
   \   0000BF   A3           INC       DPTR
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   F9           MOV       R1,A
   \   0000C2   8E82         MOV       DPL,R6
   \   0000C4   8F83         MOV       DPH,R7
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   1214            
   1215            // Save the extended PAN ID from the beacon payload only if 1.1 version network
   1216            if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
   \                     ??CrossCallReturnLabel_103:
   \   0000CB   EE           MOV       A,R6
   \   0000CC   2405         ADD       A,#0x5
   \   0000CE   FA           MOV       R2,A
   \   0000CF   E4           CLR       A
   \   0000D0   3F           ADDC      A,R7
   \   0000D1   FB           MOV       R3,A
   \   0000D2   85..82       MOV       DPL,?V0
   \   0000D5   85..83       MOV       DPH,?V1
   \   0000D8   A3           INC       DPTR
   \   0000D9   A3           INC       DPTR
   \   0000DA   A3           INC       DPTR
   \   0000DB   A3           INC       DPTR
   \   0000DC   A3           INC       DPTR
   \   0000DD   A3           INC       DPTR
   \   0000DE   A3           INC       DPTR
   \   0000DF   A3           INC       DPTR
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   6401         XRL       A,#0x1
   \   0000E3   600E         JZ        ??touchLink_BeaconIndCB_7
   1217            {
   1218              osal_cpyExtAddr( pParam->extendedPANID, pBeacon->extendedPanID );
   \   0000E5                ; Setup parameters for call to function sAddrExtCpy
   \   0000E5   E5..         MOV       A,?V0
   \   0000E7   240D         ADD       A,#0xd
   \   0000E9   FC           MOV       R4,A
   \   0000EA   E4           CLR       A
   \   0000EB   35..         ADDC      A,?V1
   \   0000ED   FD           MOV       R5,A
   \   0000EE   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000F1   8009         SJMP      ??touchLink_BeaconIndCB_8
   1219            }
   1220            else
   1221            {
   1222              osal_memset( pParam->extendedPANID, 0xFF, Z_EXTADDR_LEN );
   \                     ??touchLink_BeaconIndCB_7:
   \   0000F3                ; Setup parameters for call to function osal_memset
   \   0000F3   7C08         MOV       R4,#0x8
   \   0000F5   7D00         MOV       R5,#0x0
   \   0000F7   79FF         MOV       R1,#-0x1
   \   0000F9   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1223            }
   1224            
   1225            // check if this device is a better choice to join...
   1226            // ...dont bother checking assocPermit flag is doing a rejoin
   1227            if ( pBeacon->LQI > gMIN_TREE_LQI )
   \                     ??touchLink_BeaconIndCB_8:
   \   0000FC   E5..         MOV       A,?V0
   \   0000FE   240A         ADD       A,#0xa
   \   000100   F8           MOV       R0,A
   \   000101   E4           CLR       A
   \   000102   35..         ADDC      A,?V1
   \   000104   F9           MOV       R1,A
   \   000105   8882         MOV       DPL,R0
   \   000107   F583         MOV       DPH,A
   \   000109   E0           MOVX      A,@DPTR
   \   00010A   FA           MOV       R2,A
   \   00010B   90....       MOV       DPTR,#gMIN_TREE_LQI
   \   00010E   E0           MOVX      A,@DPTR
   \   00010F   C3           CLR       C
   \   000110   9A           SUBB      A,R2
   \   000111   4003         JC        $+5
   \   000113   02....       LJMP      ??touchLink_BeaconIndCB_4 & 0xFFFF
   1228            {
   1229              uint8 selected = FALSE;
   1230              uint8 capacity = FALSE;
   1231              
   1232              if ( _NIB.spare3 == ZIGBEEPRO )
   \   000116   E5..         MOV       A,?V0
   \   000118   2406         ADD       A,#0x6
   \   00011A   FA           MOV       R2,A
   \   00011B   E4           CLR       A
   \   00011C   35..         ADDC      A,?V1
   \   00011E   FB           MOV       R3,A
   \   00011F   EE           MOV       A,R6
   \   000120   2410         ADD       A,#0x10
   \   000122   FC           MOV       R4,A
   \   000123   E4           CLR       A
   \   000124   3F           ADDC      A,R7
   \   000125   FD           MOV       R5,A
   \   000126   E5..         MOV       A,?V0
   \   000128   240B         ADD       A,#0xb
   \   00012A   F5..         MOV       ?V2,A
   \   00012C   E4           CLR       A
   \   00012D   35..         ADDC      A,?V1
   \   00012F   F5..         MOV       ?V3,A
   \   000131   EE           MOV       A,R6
   \   000132   240F         ADD       A,#0xf
   \   000134   F5..         MOV       ?V4,A
   \   000136   E4           CLR       A
   \   000137   3F           ADDC      A,R7
   \   000138   F5..         MOV       ?V5,A
   \   00013A   90....       MOV       DPTR,#_NIB + 96
   \   00013D   E0           MOVX      A,@DPTR
   \   00013E   6401         XRL       A,#0x1
   \   000140   7027         JNZ       ??touchLink_BeaconIndCB_9
   1233              {
   1234                if ( ((pBeacon->LQI   > pParam->chosenRouterLinkQuality) &&
   1235                      (pBeacon->depth < MAX_NODE_DEPTH)) ||
   1236                    ((pBeacon->LQI   == pParam->chosenRouterLinkQuality) &&
   1237                     (pBeacon->depth < pParam->chosenRouterDepth)) )
   \   000142   8882         MOV       DPL,R0
   \   000144   8983         MOV       DPH,R1
   \   000146   E0           MOVX      A,@DPTR
   \   000147   F5..         MOV       ?V7,A
   \   000149   85..82       MOV       DPL,?V4
   \   00014C   85..83       MOV       DPH,?V5
   \   00014F   E0           MOVX      A,@DPTR
   \   000150   F5..         MOV       ?V6,A
   \   000152   C3           CLR       C
   \   000153   95..         SUBB      A,?V7
   \   000155   500C         JNC       ??touchLink_BeaconIndCB_10
   \   000157   85..82       MOV       DPL,?V2
   \   00015A   85..83       MOV       DPH,?V3
   \   00015D   E0           MOVX      A,@DPTR
   \   00015E   C3           CLR       C
   \   00015F   9414         SUBB      A,#0x14
   \   000161   4019         JC        ??touchLink_BeaconIndCB_11
   \                     ??touchLink_BeaconIndCB_10:
   \   000163   E5..         MOV       A,?V6
   \   000165   65..         XRL       A,?V7
   \   000167   7044         JNZ       ??touchLink_BeaconIndCB_12
   1238                {
   1239                  selected = TRUE;
   1240                }
   1241              }
   1242              else
   1243              {
   1244                if ( pBeacon->depth < pParam->chosenRouterDepth )
   \                     ??touchLink_BeaconIndCB_9:
   \   000169   8C82         MOV       DPL,R4
   \   00016B   8D83         MOV       DPH,R5
   \   00016D   E0           MOVX      A,@DPTR
   \   00016E   F5..         MOV       ?V6,A
   \   000170   85..82       MOV       DPL,?V2
   \   000173   85..83       MOV       DPH,?V3
   \   000176   E0           MOVX      A,@DPTR
   \   000177   C3           CLR       C
   \   000178   95..         SUBB      A,?V6
   \   00017A   5031         JNC       ??touchLink_BeaconIndCB_12
   1245                {
   1246                  selected = TRUE;
   1247                }
   1248              }
   1249              
   1250              capacity = pBeacon->routerCapacity;
   1251              
   1252              if ( (capacity) && (selected) )
   \                     ??touchLink_BeaconIndCB_11:
   \   00017C   8A82         MOV       DPL,R2
   \   00017E   8B83         MOV       DPH,R3
   \   000180   E0           MOVX      A,@DPTR
   \   000181   602A         JZ        ??touchLink_BeaconIndCB_12
   1253              {
   1254                // this is the new chosen router for joining...
   1255                pParam->chosenRouter            = pBeacon->sourceAddr;
   \   000183   85..82       MOV       DPL,?V0
   \   000186   85..83       MOV       DPH,?V1
   \   000189   E0           MOVX      A,@DPTR
   \   00018A   F5..         MOV       ?V6,A
   \   00018C   A3           INC       DPTR
   \   00018D   E0           MOVX      A,@DPTR
   \   00018E   F5..         MOV       ?V7,A
   \   000190   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000193   E5..         MOV       A,?V6
   \   000195   F0           MOVX      @DPTR,A
   \   000196   A3           INC       DPTR
   \   000197   E5..         MOV       A,?V7
   \   000199   F0           MOVX      @DPTR,A
   1256                pParam->chosenRouterLinkQuality = pBeacon->LQI;
   \   00019A   8882         MOV       DPL,R0
   \   00019C   8983         MOV       DPH,R1
   \   00019E   E0           MOVX      A,@DPTR
   \   00019F   85..82       MOV       DPL,?V4
   \   0001A2   85..83       MOV       DPH,?V5
   \   0001A5   12....       LCALL     ?Subroutine19 & 0xFFFF
   1257                pParam->chosenRouterDepth       = pBeacon->depth;
   1258              }
   \                     ??CrossCallReturnLabel_26:
   \   0001A8   8C82         MOV       DPL,R4
   \   0001AA   8D83         MOV       DPH,R5
   \   0001AC   F0           MOVX      @DPTR,A
   1259              
   1260              if ( pBeacon->deviceCapacity )
   \                     ??touchLink_BeaconIndCB_12:
   \   0001AD   85..82       MOV       DPL,?V0
   \   0001B0   85..83       MOV       DPH,?V1
   \   0001B3   A3           INC       DPTR
   \   0001B4   A3           INC       DPTR
   \   0001B5   A3           INC       DPTR
   \   0001B6   A3           INC       DPTR
   \   0001B7   A3           INC       DPTR
   \   0001B8   A3           INC       DPTR
   \   0001B9   A3           INC       DPTR
   \   0001BA   E0           MOVX      A,@DPTR
   \   0001BB   600C         JZ        ??touchLink_BeaconIndCB_13
   1261                pParam->deviceCapacity = 1;
   \   0001BD   EE           MOV       A,R6
   \   0001BE   2412         ADD       A,#0x12
   \   0001C0   F582         MOV       DPL,A
   \   0001C2   E4           CLR       A
   \   0001C3   3F           ADDC      A,R7
   \   0001C4   F583         MOV       DPH,A
   \   0001C6   7401         MOV       A,#0x1
   \   0001C8   F0           MOVX      @DPTR,A
   1262              
   1263              if ( pBeacon->routerCapacity )
   \                     ??touchLink_BeaconIndCB_13:
   \   0001C9   8A82         MOV       DPL,R2
   \   0001CB   8B83         MOV       DPH,R3
   \   0001CD   E0           MOVX      A,@DPTR
   \   0001CE   600C         JZ        ??touchLink_BeaconIndCB_4
   1264                pParam->routerCapacity = 1;
   \   0001D0   EE           MOV       A,R6
   \   0001D1   2411         ADD       A,#0x11
   \   0001D3   F582         MOV       DPL,A
   \   0001D5   E4           CLR       A
   \   0001D6   3F           ADDC      A,R7
   \   0001D7   F583         MOV       DPH,A
   \   0001D9   7401         MOV       A,#0x1
   \   0001DB   F0           MOVX      @DPTR,A
   1265            }
   1266              
   1267            return ( NULL );
   \                     ??touchLink_BeaconIndCB_4:
   \   0001DC   7A00         MOV       R2,#0x0
   \   0001DE   7B00         MOV       R3,#0x0
   \   0001E0   02....       LJMP      ?Subroutine2 & 0xFFFF
   1268          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   EE           MOV       A,R6
   \   000001   240D         ADD       A,#0xd
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET
   1269          
   1270          /*********************************************************************
   1271           * @fn      touchLink_NwkDiscoveryCnfCB
   1272           *
   1273           * @brief   Send an event to inform the target the completion of
   1274           *          network discovery scan
   1275           *
   1276           * @param   param - pointer to a parameter and a structure of parameters
   1277           *
   1278           * @return  void
   1279           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1280          static void *touchLink_NwkDiscoveryCnfCB ( void *param )
   \                     touchLink_NwkDiscoveryCnfCB:
   1281          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1282          #if ( BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE )
   1283            // Scan completed. De-register the callbacks with ZDO
   1284            ZDO_DeregisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID );
   \   000004                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   000004   7902         MOV       R1,#0x2
   \   000006   12....       LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   1285            ZDO_DeregisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID );
   \   000009                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   000009   7903         MOV       R1,#0x3
   \   00000B   12....       LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   1286          
   1287            NLME_NwkDiscTerm();
   \   00000E                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   00000E   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1288          
   1289            if ( pDiscoveredNwkParamList != NULL )
   1290            {
   1291              // proceed to join the network, otherwise
   1292              // Notify our task
   1293              osal_set_event( touchLinkTaskId, TOUCHLINK_NWK_DISC_CNF_EVT );
   1294            }
   1295            else
   1296            {
   1297              // no suitable network in secondary channel list, then just wait for touchlink
   1298          #if ( ZSTACK_ROUTER_BUILD )
   1299              // Try to create a new distributed network
   1300              osal_set_event( touchLinkTaskId, TOUCHLINK_NWK_DISC_CNF_EVT );
   \   000011                ; Setup parameters for call to function osal_set_event
   \   000011   7A01         MOV       R2,#0x1
   \   000013   7B00         MOV       R3,#0x0
   \   000015   90....       MOV       DPTR,#touchLinkTaskId
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F9           MOV       R1,A
   \   00001A   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   1301          #elif ( ZSTACK_END_DEVICE_BUILD )
   1302              // Notify the BDB state machine 
   1303              bdbAttributes.bdbCommissioningStatus = BDB_COMMISSIONING_NO_NETWORK;
   1304              bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, FALSE );
   1305              // No parent to join in 
   1306              bdbCommissioningProcedureState.bdbCommissioningState = BDB_PARENT_LOST;
   1307              NLME_OrphanStateSet( );
   1308              bdb_ZedAttemptRecoverNwk( );
   1309          #endif
   1310            }
   1311          
   1312          #else
   1313            (void)touchLinkTaskId;
   1314            (void)param;
   1315          #endif
   1316            return ( NULL );
   \   00001D   7A00         MOV       R2,#0x0
   \   00001F   7B00         MOV       R3,#0x0
   \   000021   02....       LJMP      ??Subroutine46_0 & 0xFFFF
   1317          }
   1318          
   1319          /****************************************************************************
   1320           * @fn      touchLink_FreeNwkParamList
   1321           *
   1322           * @brief   This function frees any network discovery data.
   1323           *
   1324           * @param   none
   1325           *
   1326           * @return  none
   1327           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1328          void touchLink_FreeNwkParamList( void )
   \                     touchLink_FreeNwkParamList:
   1329          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1330            touchLinkDiscoveredNwkParam_t *pParam = pDiscoveredNwkParamList;
   \   000005   90....       MOV       DPTR,#pDiscoveredNwkParamList
   \   000008   E0           MOVX      A,@DPTR
   \   000009   FA           MOV       R2,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   800D         SJMP      ??touchLink_FreeNwkParamList_0
   1331            touchLinkDiscoveredNwkParam_t *pNextParam;
   1332          
   1333            // deallocate the pDiscoveredNwkParamList memory
   1334            while ( pParam != NULL )
   1335            {
   1336              pNextParam = pParam->nextParam;
   \                     ??touchLink_FreeNwkParamList_1:
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   12....       LCALL     ?Subroutine24 & 0xFFFF
   1337          
   1338              osal_mem_free( pParam );
   \                     ??CrossCallReturnLabel_39:
   \   000015                ; Setup parameters for call to function osal_mem_free
   \   000015   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1339          
   1340              pParam = pNextParam;
   \   000018   EE           MOV       A,R6
   \   000019   FA           MOV       R2,A
   \   00001A   EF           MOV       A,R7
   \                     ??touchLink_FreeNwkParamList_0:
   \   00001B   FB           MOV       R3,A
   1341            }
   \   00001C   EA           MOV       A,R2
   \   00001D   4B           ORL       A,R3
   \   00001E   70EE         JNZ       ??touchLink_FreeNwkParamList_1
   1342          
   1343            pDiscoveredNwkParamList = NULL;
   \   000020   90....       MOV       DPTR,#pDiscoveredNwkParamList
   \   000023   E4           CLR       A
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   F0           MOVX      @DPTR,A
   1344          }
   \   000027                REQUIRE ?Subroutine5
   \   000027                ; // Fall through to label ?Subroutine5
   1345          
   1346          /****************************************************************************
   1347           * @fn      touchLink_IsValidTransID
   1348           *
   1349           * @brief   Transaction ID Filter for Touch-Link received commands.
   1350           *
   1351           * @param   transID - received transaction ID
   1352           *
   1353           * @return  FALSE if not matching current or transaction expired
   1354           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1355          bool touchLink_IsValidTransID( uint32 transID )
   \                     touchLink_IsValidTransID:
   1356          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   1357            if ( ( touchLinkTransID == 0 ) || ( ( touchLinkTransID != transID ) && ( touchLinkLastAcceptedTransID != transID ) ) )
   \   00000D   90....       MOV       DPTR,#touchLinkTransID
   \   000010   12....       LCALL     ?XLOAD_R0123
   \   000013   E8           MOV       A,R0
   \   000014   49           ORL       A,R1
   \   000015   4A           ORL       A,R2
   \   000016   4B           ORL       A,R3
   \   000017   6014         JZ        ??touchLink_IsValidTransID_0
   \   000019   90....       MOV       DPTR,#touchLinkTransID
   \   00001C   78..         MOV       R0,#?V0
   \   00001E   12....       LCALL     ?L_EQ_X
   \   000021   600E         JZ        ??touchLink_IsValidTransID_1
   \   000023   90....       MOV       DPTR,#touchLinkLastAcceptedTransID
   \   000026   78..         MOV       R0,#?V0
   \   000028   12....       LCALL     ?L_EQ_X
   \   00002B   6004         JZ        ??touchLink_IsValidTransID_1
   1358            {
   1359              return ( FALSE );
   \                     ??touchLink_IsValidTransID_0:
   \   00002D   7900         MOV       R1,#0x0
   \   00002F   8002         SJMP      ??touchLink_IsValidTransID_2
   1360            }
   1361            return ( TRUE );
   \                     ??touchLink_IsValidTransID_1:
   \   000031   7901         MOV       R1,#0x1
   \                     ??touchLink_IsValidTransID_2:
   \   000033   02....       LJMP      ??Subroutine50_0 & 0xFFFF
   1362          }
   1363          
   1364          /*********************************************************************
   1365           * @fn      touchLink_RouterProcessZDOMsg
   1366           *
   1367           * @brief   Process incoming ZDO messages (for routers)
   1368           *
   1369           * @param   inMsg - message to process
   1370           *
   1371           * @return  none
   1372           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1373          void touchLink_RouterProcessZDOMsg( zdoIncomingMsg_t *inMsg )
   \                     touchLink_RouterProcessZDOMsg:
   1374          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1375            ZDO_DeviceAnnce_t devAnnce;
   1376          
   1377            switch ( inMsg->clusterID )
   \   00000E   EA           MOV       A,R2
   \   00000F   240C         ADD       A,#0xc
   \   000011   F582         MOV       DPL,A
   \   000013   E4           CLR       A
   \   000014   3F           ADDC      A,R7
   \   000015   F583         MOV       DPH,A
   \   000017   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00001A   12....       LCALL     ?US_SWITCH_SPARSE
   \                     `?<Jumptable for touchLink_RouterProcessZDOMsg>_0`:
   \   00001D   0000         DW        0
   \   00001F   0200         DW        2
   \   000021   1300         DW        19
   \   000023   ....         DW        ??touchLink_RouterProcessZDOMsg_0
   \   000025   3600         DW        54
   \   000027   ....         DW        ??touchLink_RouterProcessZDOMsg_1
   \   000029   ....         DW        ??touchLink_RouterProcessZDOMsg_2
   1378            {
   1379              case Device_annce:
   1380                {
   1381                  // all devices should send link status, including the one sending it
   1382                  ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
   \                     ??touchLink_RouterProcessZDOMsg_0:
   \   00002B                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   00002B   7401         MOV       A,#0x1
   \   00002D   12....       LCALL     ?XSTACK_DISP102_8
   \   000030   12....       LCALL     `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   1383          
   1384                  linkInfo_t *linkInfo;
   1385          
   1386                  // check if entry exists
   1387                  linkInfo = nwkNeighborGetLinkInfo( devAnnce.nwkAddr, _NIB.nwkPanId );
   1388          
   1389                  // if not, look for a vacant entry to add this node...
   1390                  if ( linkInfo == NULL )
   \   000033                ; Setup parameters for call to function nwkNeighborGetLinkInfo
   \   000033   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000036   12....       LCALL     ?XSTACK_DISP0_8
   \   000039   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00003C   EA           MOV       A,R2
   \   00003D   4B           ORL       A,R3
   \   00003E   6003         JZ        $+5
   \   000040   02....       LJMP      ??touchLink_RouterProcessZDOMsg_2 & 0xFFFF
   1391                  {
   1392                    nwkNeighborAdd( devAnnce.nwkAddr, _NIB.nwkPanId, DEF_LQI );
   \   000043                ; Setup parameters for call to function nwkNeighborAdd
   \   000043   79AA         MOV       R1,#-0x56
   \   000045   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00004E   12....       LCALL     `??nwkNeighborAdd::?relay`; Banked call to: nwkNeighborAdd
   1393                    linkInfo = nwkNeighborGetLinkInfo( devAnnce.nwkAddr, _NIB.nwkPanId );
   \   000051                ; Setup parameters for call to function nwkNeighborGetLinkInfo
   \   000051   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   12....       LCALL     ?Subroutine28 & 0xFFFF
   1394                    linkInfo->txCost = DEF_LINK_COST;
   \                     ??CrossCallReturnLabel_46:
   \   00005A   8A82         MOV       DPL,R2
   \   00005C   8B83         MOV       DPH,R3
   \   00005E   A3           INC       DPTR
   \   00005F   7401         MOV       A,#0x1
   \   000061   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   1395                    linkInfo->rxLqi = MIN_LQI_COST_1; 
   \                     ??CrossCallReturnLabel_97:
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   740C         MOV       A,#0xc
   \   000068   F0           MOVX      @DPTR,A
   1396            
   1397                    // if we have end device childs, send link status
   1398                    if ( AssocCount(CHILD_RFD, CHILD_RFD_RX_IDLE) > 0 )
   \   000069                ; Setup parameters for call to function AssocCount
   \   000069   7A02         MOV       R2,#0x2
   \   00006B   7901         MOV       R1,#0x1
   \   00006D   12....       LCALL     `??AssocCount::?relay`; Banked call to: AssocCount
   \   000070   EA           MOV       A,R2
   \   000071   4B           ORL       A,R3
   \   000072   6063         JZ        ??touchLink_RouterProcessZDOMsg_2
   1399                    {
   1400                      NLME_UpdateLinkStatus();
   \   000074                ; Setup parameters for call to function NLME_UpdateLinkStatus
   \   000074   12....       LCALL     `??NLME_UpdateLinkStatus::?relay`; Banked call to: NLME_UpdateLinkStatus
   \   000077   805E         SJMP      ??touchLink_RouterProcessZDOMsg_2
   1401                    }
   1402                  }
   1403                }
   1404                break;
   1405          
   1406              case Mgmt_Permit_Join_req:
   1407                {
   1408                  uint8 duration = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
   1409                  ZStatus_t stat = NLME_PermitJoiningRequest( duration );
   \                     ??touchLink_RouterProcessZDOMsg_1:
   \   000079                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000079   EA           MOV       A,R2
   \   00007A   2413         ADD       A,#0x13
   \   00007C   F582         MOV       DPL,A
   \   00007E   E4           CLR       A
   \   00007F   3F           ADDC      A,R7
   \   000080   F583         MOV       DPH,A
   \   000082   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000085   E0           MOVX      A,@DPTR
   \   000086   F9           MOV       R1,A
   \   000087   12....       LCALL     `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \   00008A   E9           MOV       A,R1
   \   00008B   85..82       MOV       DPL,?XSP + 0
   \   00008E   85..83       MOV       DPH,?XSP + 1
   \   000091   F0           MOVX      @DPTR,A
   1410                  // Send a response if unicast
   1411                  if ( !inMsg->wasBroadcast )
   \   000092   EE           MOV       A,R6
   \   000093   240B         ADD       A,#0xb
   \   000095   F582         MOV       DPL,A
   \   000097   E4           CLR       A
   \   000098   3F           ADDC      A,R7
   \   000099   F583         MOV       DPH,A
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   7039         JNZ       ??touchLink_RouterProcessZDOMsg_2
   1412                  {
   1413                    ZDP_MgmtPermitJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   00009E                ; Setup parameters for call to function ZDP_SendData
   \   00009E   75..00       MOV       ?V0,#0x0
   \   0000A1   78..         MOV       R0,#?V0
   \   0000A3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A6   7401         MOV       A,#0x1
   \   0000A8   12....       LCALL     ?XSTACK_DISP100_8
   \   0000AB   88..         MOV       ?V0,R0
   \   0000AD   89..         MOV       ?V1,R1
   \   0000AF   78..         MOV       R0,#?V0
   \   0000B1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B4   75..36       MOV       ?V0,#0x36
   \   0000B7   75..80       MOV       ?V1,#-0x80
   \   0000BA   78..         MOV       R0,#?V0
   \   0000BC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BF   7901         MOV       R1,#0x1
   \   0000C1   EE           MOV       A,R6
   \   0000C2   2402         ADD       A,#0x2
   \   0000C4   FC           MOV       R4,A
   \   0000C5   E4           CLR       A
   \   0000C6   3F           ADDC      A,R7
   \   0000C7   FD           MOV       R5,A
   \   0000C8   EE           MOV       A,R6
   \   0000C9   240F         ADD       A,#0xf
   \   0000CB   FA           MOV       R2,A
   \   0000CC   E4           CLR       A
   \   0000CD   3F           ADDC      A,R7
   \   0000CE   FB           MOV       R3,A
   \   0000CF   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000D2   7405         MOV       A,#0x5
   \   0000D4   12....       LCALL     ?DEALLOC_XSTACK8
   1414                  }
   1415                }
   1416                break;
   1417          
   1418              default:
   1419                break;
   1420            }
   1421          }
   \                     ??touchLink_RouterProcessZDOMsg_2:
   \   0000D7   740C         MOV       A,#0xc
   \   0000D9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DC   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   12....       LCALL     `??nwkNeighborGetLinkInfo::?relay`; Banked call to: nwkNeighborGetLinkInfo
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   90....       MOV       DPTR,#_NIB + 33
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FC           MOV       R4,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FD           MOV       R5,A
   \   000008   7401         MOV       A,#0x1
   \   00000A   22           RET
   1422          
   1423          /*********************************************************************
   1424           * @fn      touchLink_PermitJoin
   1425           *
   1426           * @brief   Set the router permit join flag, to allow or deny classical
   1427           *          commissioning by other ZigBee devices.
   1428           *
   1429           * @param   duration - enable up to aplcMaxPermitJoinDuration seconds,
   1430           *                     0 to disable
   1431           *
   1432           * @return  status
   1433           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1434          ZStatus_t touchLink_PermitJoin( uint8 duration )
   \                     touchLink_PermitJoin:
   1435          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   1436            if ( duration > APLC_MAX_PERMIT_JOIN_DURATION )
   \   000007   C3           CLR       C
   \   000008   943D         SUBB      A,#0x3d
   \   00000A   4002         JC        ??touchLink_PermitJoin_0
   1437            {
   1438              duration = APLC_MAX_PERMIT_JOIN_DURATION;
   \   00000C   7E3C         MOV       R6,#0x3c
   1439            }
   1440            return NLME_PermitJoiningRequest( duration );
   \                     ??touchLink_PermitJoin_0:
   \   00000E                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   00000E   EE           MOV       A,R6
   \   00000F   F9           MOV       R1,A
   \   000010   12....       LCALL     `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \   000013   02....       LJMP      ?Subroutine5 & 0xFFFF
   1441          }
   1442          
   1443          /*********************************************************************
   1444           * @fn      targetStartRtr
   1445           *
   1446           * @brief   Start operating on the new network.
   1447           *
   1448           * @param   pParams - pointer to received network parameters
   1449           * @param   transID - transaction id
   1450           *
   1451           * @return  none
   1452           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1453          void touchLinkStartRtr( bdbTLNwkParams_t *pParams, uint32 transID )
   \                     touchLinkStartRtr:
   1454          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1455            // Copy the new network parameters to
   1456            touchLink_SetNIB( NWK_ROUTER, pParams->nwkAddr, pParams->extendedPANID,
   1457                        pParams->logicalChannel, pParams->panId, _NIB.nwkUpdateId );
   \   000009                ; Setup parameters for call to function touchLink_SetNIB
   \   000009   90....       MOV       DPTR,#_NIB + 109
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F5..         MOV       ?V0,A
   \   00000F   78..         MOV       R0,#?V0
   \   000011   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000014   EA           MOV       A,R2
   \   000015   241A         ADD       A,#0x1a
   \   000017   F582         MOV       DPL,A
   \   000019   E4           CLR       A
   \   00001A   3F           ADDC      A,R7
   \   00001B   F583         MOV       DPH,A
   \   00001D   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000020   EA           MOV       A,R2
   \   000021   2419         ADD       A,#0x19
   \   000023   F582         MOV       DPL,A
   \   000025   E4           CLR       A
   \   000026   3F           ADDC      A,R7
   \   000027   F583         MOV       DPH,A
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F5..         MOV       ?V0,A
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000031   EA           MOV       A,R2
   \   000032   FC           MOV       R4,A
   \   000033   EB           MOV       A,R3
   \   000034   FD           MOV       R5,A
   \   000035   EA           MOV       A,R2
   \   000036   241C         ADD       A,#0x1c
   \   000038   F582         MOV       DPL,A
   \   00003A   E4           CLR       A
   \   00003B   3F           ADDC      A,R7
   \   00003C   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00003F   7908         MOV       R1,#0x8
   \   000041   12....       LCALL     `??touchLink_SetNIB::?relay`; Banked call to: touchLink_SetNIB
   \   000044   7404         MOV       A,#0x4
   \   000046   12....       LCALL     ?DEALLOC_XSTACK8
   1458          
   1459            // Apply the received network key
   1460            touchLink_DecryptNwkKey( pParams->nwkKey, pParams->keyIndex, transID, touchLinkResponseID );
   \   000049                ; Setup parameters for call to function touchLink_DecryptNwkKey
   \   000049   90....       MOV       DPTR,#touchLinkResponseID
   \   00004C   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00004F   740D         MOV       A,#0xd
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000057   8E82         MOV       DPL,R6
   \   000059   8F83         MOV       DPH,R7
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   E0           MOVX      A,@DPTR
   \   000064   F9           MOV       R1,A
   \   000065   EE           MOV       A,R6
   \   000066   2409         ADD       A,#0x9
   \   000068   FA           MOV       R2,A
   \   000069   E4           CLR       A
   \   00006A   3F           ADDC      A,R7
   \   00006B   FB           MOV       R3,A
   \   00006C   12....       LCALL     `??touchLink_DecryptNwkKey::?relay`; Banked call to: touchLink_DecryptNwkKey
   \   00006F   7408         MOV       A,#0x8
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
   1461          
   1462            // setting apsTrustCenterAddress to 0xffffffff
   1463            ZDSecMgrUpdateTCAddress( NULL );
   \   000074                ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
   \   000074   7A00         MOV       R2,#0x0
   \   000076   7B00         MOV       R3,#0x0
   \   000078   12....       LCALL     `??ZDSecMgrUpdateTCAddress::?relay`; Banked call to: ZDSecMgrUpdateTCAddress
   1464          
   1465            NLME_PermitJoiningRequest(0);
   \   00007B                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   00007B   7900         MOV       R1,#0x0
   \   00007D   12....       LCALL     `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   1466            
   1467            // Touchlink distributed network flag
   1468            touchlinkDistNwk = TRUE;
   \   000080   90....       MOV       DPTR,#touchlinkDistNwk
   \   000083   7401         MOV       A,#0x1
   \   000085   12....       LCALL     ?Subroutine7 & 0xFFFF
   1469          
   1470            // Use the new free ranges
   1471            //touchLink_UpdateFreeRanges( pParams );
   1472          
   1473            // Save free ranges
   1474            touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
   1475          
   1476            // In case we're here after a leave
   1477            touchLinkLeaveInitiated = FALSE;
   1478          
   1479            // Clear leave control logic
   1480            ZDApp_LeaveCtrlReset();
   1481          
   1482            // Start operating on the new network
   1483            ZDOInitDeviceEx( 0, 1 );
   \                     ??CrossCallReturnLabel_2:
   \   000088                ; Setup parameters for call to function ZDOInitDeviceEx
   \   000088   7901         MOV       R1,#0x1
   \   00008A   7A00         MOV       R2,#0x0
   \   00008C   7B00         MOV       R3,#0x0
   \   00008E   12....       LCALL     `??ZDOInitDeviceEx::?relay`; Banked call to: ZDOInitDeviceEx
   1484          }
   \   000091   02....       LJMP      ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function touchLink_UpdateNV
   \   000001                ; Setup parameters for call to function touchLink_UpdateNV
   \   000001   7902         MOV       R1,#0x2
   \   000003   12....       LCALL     `??touchLink_UpdateNV::?relay`; Banked call to: touchLink_UpdateNV
   \   000006   90....       MOV       DPTR,#touchLinkLeaveInitiated
   \   000009   E4           CLR       A
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B                ; Setup parameters for call to function ZDApp_LeaveCtrlReset
   \   00000B                ; Setup parameters for call to function ZDApp_LeaveCtrlReset
   \   00000B   12....       LCALL     `??ZDApp_LeaveCtrlReset::?relay`; Banked call to: ZDApp_LeaveCtrlReset
   \   00000E   22           RET
   1485          
   1486          /*********************************************************************
   1487           * @fn      touchLink_DevRejoin
   1488           *
   1489           * @brief   Perform a network rejoin
   1490           *
   1491           * @param   rejoinInf - pointer to received network parameters
   1492           *
   1493           * @return  none
   1494           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1495          void touchLink_DevRejoin( bdbTLNwkRejoin_t *rejoinInf )
   \                     touchLink_DevRejoin:
   1496          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1497              networkDesc_t *pNwkDesc = NULL;
   1498               
   1499              // Initialize the security for type of device
   1500              ZDApp_SecInit( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   \   000009                ; Setup parameters for call to function ZDApp_SecInit
   \   000009   7900         MOV       R1,#0x0
   \   00000B   12....       LCALL     `??ZDApp_SecInit::?relay`; Banked call to: ZDApp_SecInit
   1501              
   1502              pNwkDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
   \   00000E                ; Setup parameters for call to function osal_mem_alloc
   \   00000E   7A16         MOV       R2,#0x16
   \   000010   7B00         MOV       R3,#0x0
   \   000012   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000015   8A..         MOV       ?V0,R2
   \   000017   8B..         MOV       ?V1,R3
   1503              if( pNwkDesc == NULL )
   \   000019   EA           MOV       A,R2
   \   00001A   4B           ORL       A,R3
   \   00001B   7003         JNZ       $+5
   \   00001D   02....       LJMP      ??touchLink_DevRejoin_0 & 0xFFFF
   1504              {
   1505                return;
   1506              }
   1507                   
   1508              NwkDescList = pNwkDesc;
   \   000020   90....       MOV       DPTR,#NwkDescList
   \   000023   EA           MOV       A,R2
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   EB           MOV       A,R3
   \   000027   12....       LCALL     ?Subroutine12 & 0xFFFF
   1509              pNwkDesc->panId = rejoinInf->panId;
   \                     ??CrossCallReturnLabel_14:
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000031   8A82         MOV       DPL,R2
   \   000033   8B83         MOV       DPH,R3
   \   000035   12....       LCALL     ?Subroutine6 & 0xFFFF
   1510              pNwkDesc->logicalChannel = rejoinInf->logicalChannel;
   \                     ??CrossCallReturnLabel_0:
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   8A82         MOV       DPL,R2
   \   00003C   8B83         MOV       DPH,R3
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   F0           MOVX      @DPTR,A
   1511              osal_memcpy( pNwkDesc->extendedPANID, rejoinInf->extendedPANID, Z_EXTADDR_LEN);
   \   000041                ; Setup parameters for call to function osal_memcpy
   \   000041   8E..         MOV       ?V4,R6
   \   000043   8F..         MOV       ?V5,R7
   \   000045   75..00       MOV       ?V6,#0x0
   \   000048   78..         MOV       R0,#?V4
   \   00004A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00004D   7C08         MOV       R4,#0x8
   \   00004F   7D00         MOV       R5,#0x0
   \   000051   EA           MOV       A,R2
   \   000052   240B         ADD       A,#0xb
   \   000054   FA           MOV       R2,A
   \   000055   E4           CLR       A
   \   000056   35..         ADDC      A,?V1
   \   000058   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   00005B   12....       LCALL     ?DEALLOC_XSTACK8
   1512              pNwkDesc->chosenRouterDepth = 1;
   \   00005E   85..82       MOV       DPL,?V0
   \   000061   85..83       MOV       DPH,?V1
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   7401         MOV       A,#0x1
   \   000070   12....       LCALL     ?Subroutine42 & 0xFFFF
   1513              pNwkDesc->routerCapacity = 1;
   \                     ??CrossCallReturnLabel_78:
   \   000073   12....       LCALL     ?Subroutine13 & 0xFFFF
   1514              pNwkDesc->deviceCapacity = 1;
   \                     ??CrossCallReturnLabel_15:
   \   000076   12....       LCALL     ?Subroutine13 & 0xFFFF
   1515              pNwkDesc->version = 2;
   \                     ??CrossCallReturnLabel_16:
   \   000079   A3           INC       DPTR
   \   00007A   04           INC       A
   \   00007B   12....       LCALL     ?Subroutine8 & 0xFFFF
   1516              pNwkDesc->stackProfile = 2;
   \                     ??CrossCallReturnLabel_4:
   \   00007E   12....       LCALL     ?Subroutine8 & 0xFFFF
   1517              pNwkDesc->chosenRouterLinkQuality = DEF_LQI;
   \                     ??CrossCallReturnLabel_5:
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   74AA         MOV       A,#-0x56
   \   000086   F0           MOVX      @DPTR,A
   1518              pNwkDesc->chosenRouter = rejoinInf->nwkAddr;
   \   000087   EE           MOV       A,R6
   \   000088   240C         ADD       A,#0xc
   \   00008A   F582         MOV       DPL,A
   \   00008C   E4           CLR       A
   \   00008D   3F           ADDC      A,R7
   \   00008E   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000091   85..82       MOV       DPL,?V0
   \   000094   85..83       MOV       DPH,?V1
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   12....       LCALL     ?Subroutine6 & 0xFFFF
   1519              pNwkDesc->updateId = rejoinInf->nwkUpdateId;
   \                     ??CrossCallReturnLabel_1:
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   C0E0         PUSH      A
   \   0000A4   E5..         MOV       A,?V0
   \   0000A6   2413         ADD       A,#0x13
   \   0000A8   F582         MOV       DPL,A
   \   0000AA   E4           CLR       A
   \   0000AB   35..         ADDC      A,?V1
   \   0000AD   F583         MOV       DPH,A
   \   0000AF   D0E0         POP       A
   \   0000B1   F0           MOVX      @DPTR,A
   1520              pNwkDesc->nextDesc = NULL;
   \   0000B2   E5..         MOV       A,?V0
   \   0000B4   2414         ADD       A,#0x14
   \   0000B6   F582         MOV       DPL,A
   \   0000B8   E4           CLR       A
   \   0000B9   35..         ADDC      A,?V1
   \   0000BB   F583         MOV       DPH,A
   \   0000BD   E4           CLR       A
   \   0000BE   F0           MOVX      @DPTR,A
   \   0000BF   A3           INC       DPTR
   \   0000C0   12....       LCALL     ?Subroutine7 & 0xFFFF
   1521              
   1522              // Save free ranges
   1523              touchLink_UpdateNV( TOUCHLINK_UPDATE_NV_RANGES );
   1524          
   1525              // In case we're here after a leave
   1526              touchLinkLeaveInitiated = FALSE;
   1527          
   1528              // Clear leave control logic
   1529              ZDApp_LeaveCtrlReset();
   1530              
   1531              // Let's join the network started by the target
   1532              NLME_ReJoinRequest( rejoinInf->extendedPANID, _NIB.nwkLogicalChannel);
   \                     ??CrossCallReturnLabel_3:
   \   0000C3                ; Setup parameters for call to function NLME_ReJoinRequest
   \   0000C3   90....       MOV       DPTR,#_NIB + 22
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   F9           MOV       R1,A
   \   0000C8   EE           MOV       A,R6
   \   0000C9   FA           MOV       R2,A
   \   0000CA   EF           MOV       A,R7
   \   0000CB   FB           MOV       R3,A
   \   0000CC   12....       LCALL     `??NLME_ReJoinRequest::?relay`; Banked call to: NLME_ReJoinRequest
   1533          }
   \                     ??touchLink_DevRejoin_0:
   \   0000CF   7F07         MOV       R7,#0x7
   \   0000D1   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET
   1534          
   1535          /*********************************************************************
   1536           * @fn      touchLink_DeviceIsInitiator
   1537           *
   1538           * @brief   Set device initiator flag.
   1539           *
   1540           * @param   initiator - new flag value
   1541           *
   1542           * @return  none
   1543           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1544          void touchLink_DeviceIsInitiator( bool initiator )
   \                     touchLink_DeviceIsInitiator:
   1545          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1546            touchLinkIsInitiator = initiator;
   \   000004   E9           MOV       A,R1
   \   000005   90....       MOV       DPTR,#touchLinkIsInitiator
   \   000008   02....       LJMP      ??Subroutine45_0 & 0xFFFF
   1547          }
   1548          
   1549          /*********************************************************************
   1550           * @fn      touchLink_DeviceIsInitiator
   1551           *
   1552           * @brief   Get device initiator flag.
   1553           *
   1554           * @param   none
   1555           *
   1556           * @return  touchLinkIsInitiator - flag value
   1557           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1558          bool touchLink_GetDeviceInitiator( void )
   \                     touchLink_GetDeviceInitiator:
   1559          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1560            return touchLinkIsInitiator;
   \   000004   90....       MOV       DPTR,#touchLinkIsInitiator
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   02....       LJMP      ??Subroutine46_0 & 0xFFFF
   1561          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   12....       LCALL     `??touchLink_ItemInit::?relay`; Banked call to: touchLink_ItemInit
   \   000005   7402         MOV       A,#0x2
   \   000007   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for touchLink_EP_SimpleDesc>`:
   \   000000   0D           DB 13
   \   000001   5EC0         DW 49246
   \   000003   5EE1         DW 57694
   \   000005   02           DB 2
   \   000006   01           DB 1
   \   000007   ....         DW touchLink_EP_InClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW touchLink_EP_OutClusterList

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for touchLink_EP>`:
   \   000000   0D           DB 13
   \   000001   00           DB 0
   \   000002   ....         DW touchLinkTaskId
   \   000004   0000         DW 0H
   \   000006   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {80, 104, 76, 105, 234, 156, 209, 5`:
   \   000000   50           DB 80
   \   000001   68           DB 104
   \   000002   4C           DB 76
   \   000003   69           DB 105
   \   000004   EA           DB 234
   \   000005   9C           DB 156
   \   000006   D1           DB 209
   \   000007   38           DB 56
   \   000008   43           DB 67
   \   000009   4C           DB 76
   \   00000A   53           DB 83
   \   00000B   4E           DB 78
   \   00000C   8F           DB 143
   \   00000D   8D           DB 141
   \   00000E   BA           DB 186
   \   00000F   B4           DB 180

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {192, 193, 194, 195, 196, 197, 198,`:
   \   000000   C0           DB 192
   \   000001   C1           DB 193
   \   000002   C2           DB 194
   \   000003   C3           DB 195
   \   000004   C4           DB 196
   \   000005   C5           DB 197
   \   000006   C6           DB 198
   \   000007   C7           DB 199
   \   000008   C8           DB 200
   \   000009   C9           DB 201
   \   00000A   CA           DB 202
   \   00000B   CB           DB 203
   \   00000C   CC           DB 204
   \   00000D   CD           DB 205
   \   00000E   CE           DB 206
   \   00000F   CF           DB 207

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {80, 104, 76, 105, 234, 156, 209, 5_1`:
   \   000000   50           DB 80
   \   000001   68           DB 104
   \   000002   4C           DB 76
   \   000003   69           DB 105
   \   000004   EA           DB 234
   \   000005   9C           DB 156
   \   000006   D1           DB 209
   \   000007   38           DB 56
   \   000008   43           DB 67
   \   000009   4C           DB 76
   \   00000A   53           DB 83
   \   00000B   4E           DB 78
   \   00000C   8F           DB 143
   \   00000D   8D           DB 141
   \   00000E   BA           DB 186
   \   00000F   B4           DB 180

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {192, 193, 194, 195, 196, 197, 198,_1`:
   \   000000   C0           DB 192
   \   000001   C1           DB 193
   \   000002   C2           DB 194
   \   000003   C3           DB 195
   \   000004   C4           DB 196
   \   000005   C5           DB 197
   \   000006   C6           DB 198
   \   000007   C7           DB 199
   \   000008   C8           DB 200
   \   000009   C9           DB 201
   \   00000A   CA           DB 202
   \   00000B   CB           DB 203
   \   00000C   CC           DB 204
   \   00000D   CD           DB 205
   \   00000E   CE           DB 206
   \   00000F   CF           DB 207

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1
   1562          
   1563          #endif // BDB_TL_TARGET || BDB_TL_INITIATOR
   1564          
   1565          /*********************************************************************
   1566          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     21   touchLinkStartRtr
        0      9   -> NLME_PermitJoiningRequest
        0      9   -> ZDApp_LeaveCtrlReset
        0      9   -> ZDOInitDeviceEx
        0      9   -> ZDSecMgrUpdateTCAddress
        0     17   -> touchLink_DecryptNwkKey
        0     13   -> touchLink_SetNIB
        0      9   -> touchLink_UpdateNV
      1     18   touchLink_BeaconIndCB
        0     18   -> osal_mem_alloc
        0     18   -> osal_memset
        0     18   -> sAddrExtCpy
      1    110   touchLink_BuildAesKey
      0     84   touchLink_DecryptNwkKey
        0     62   -> osal_memcpy
        0     59   -> sspAesDecrypt
        0     59   -> sspAesEncrypt
        0     67   -> touchLink_BuildAesKey
        0     59   -> touchLink_UpdateNwkKey
      1     18   touchLink_DevRejoin
        0     15   -> NLME_ReJoinRequest
        0     15   -> ZDApp_LeaveCtrlReset
        0     15   -> ZDApp_SecInit
        0     15   -> osal_mem_alloc
        0     18   -> osal_memcpy
        0     15   -> touchLink_UpdateNV
      2      0   touchLink_DeviceIsInitiator
      0     97   touchLink_EncryptNwkKey
        0     81   -> SSP_ReadNwkActiveKey
        0     84   -> osal_memcpy
        0     81   -> sspAesEncrypt
        0     89   -> touchLink_BuildAesKey
        0     81   -> touchLink_GenerateRandNum
      0      9   touchLink_FreeNwkParamList
        0      9   -> osal_mem_free
      1     95   touchLink_GenerateRandNum
        0     14   -> osal_rand
      2      0   touchLink_GerFreeRanges
      2      0   touchLink_GetDeviceInitiator
      0     10   touchLink_GetMsgRssi
        0     10   -> zcl_getRawAFMsg
      2      0   touchLink_GetNumGrpIDs
      2     17   touchLink_GetNumSubDevices
      0      0   touchLink_GetNwkKeyBitmask
      2      0   touchLink_GetRandPrimaryChannel
        2      0   -> osal_rand
      0     31   touchLink_GetSubDeviceInfo
        0     14   -> afFindEndPointDesc
        0     14   -> osal_memset
      2     10   touchLink_InitFreeRanges
      0     14   touchLink_InitVariables
        0     10   -> NLME_SetBroadcastFilter
        0     10   -> osal_memset
        0     14   -> osal_nv_write
        0     10   -> touchLink_InitFreeRanges
        0     12   -> touchLink_ItemInit
      4      0   touchLink_IsValidSplitFreeRanges
      0     12   touchLink_IsValidTransID
      0     28   touchLink_ItemInit
        0     14   -> osal_nv_item_init
        0     16   -> osal_nv_read
      1      0   touchLink_NewNwkUpdateId
      2      0   touchLink_NwkDiscoveryCnfCB
        2      0   -> NLME_NwkDiscTerm
        2      0   -> ZDO_DeregisterForZdoCB
        2      0   -> osal_set_event
      0     19   touchLink_PerformNetworkDisc
        0     19   -> NLME_NwkDiscReq2
        0     19   -> NLME_NwkDiscTerm
        0     19   -> ZDO_RegisterForZdoCB
      0      9   touchLink_PermitJoin
        0      9   -> NLME_PermitJoiningRequest
      2     10   touchLink_PopGrpIDRange
      4      0   touchLink_PopNwkAddress
      0     12   touchLink_ProcessNwkUpdate
        0     12   -> NLME_SetUpdateID
        0     12   -> ZDApp_NwkStateUpdateCB
        0     12   -> nwkTransmissionFailures
        0     12   -> touchLink_SetChannel
        0     12   -> touchLink_UpdateNV
      1     27   touchLink_RouterProcessZDOMsg
        0     22   -> AssocCount
        0     22   -> NLME_PermitJoiningRequest
        0     22   -> NLME_UpdateLinkStatus
        0     22   -> ZDO_ParseDeviceAnnce
        0     27   -> ZDP_SendData
        0     22   -> nwkNeighborAdd
        0     22   -> nwkNeighborGetLinkInfo
      1     22   touchLink_SendDeviceInfoRsp
        0     17   -> NLME_GetExtAddr
        0     18   -> bdbTL_Send_DeviceInfoRsp
        0     17   -> osal_mem_alloc
        0     17   -> osal_mem_free
        0     17   -> sAddrExtCpy
        0     17   -> touchLink_GetNumSubDevices
        0     17   -> touchLink_GetSubDeviceInfo
      2      5   touchLink_SendLeaveReq
        2      5   -> NLME_LeaveReq
        2      5   -> osal_memset
      1     26   touchLink_SetChannel
        0     13   -> ZMacSetReq
        0     13   -> bdb_setChannel
      0     13   touchLink_SetMacNwkParams
        0     13   -> ZMacSetReq
        0     13   -> touchLink_SetChannel
      0     29   touchLink_SetNIB
        0     16   -> NLME_SetUpdateID
        0     16   -> sAddrExtCpy
        0     16   -> touchLink_UpdateNV
      0      9   touchLink_SetTouchLinkTaskId
        0      9   -> StubAPS_RegisterApp
        0      9   -> bdb_RegisterSimpleDescriptor
      0     22   touchLink_SplitFreeRanges
      2      0   touchLink_UpdateFreeRanges
      0     30   touchLink_UpdateNV
        0     14   -> osal_nv_write
        0     10   -> zgWriteStartupOptions
      0     71   touchLink_UpdateNwkKey
        0     12   -> SSP_SwitchNwkKey
        0     12   -> SSP_UpdateNwkKey
        0     12   -> ZDApp_SaveNwkKey


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant {192, 193, 194, 195, 196, 197, 198,
      16  ?<Constant {192, 193, 194, 195, 196, 197, 198,_1
      16  ?<Constant {80, 104, 76, 105, 234, 156, 209, 5
      16  ?<Constant {80, 104, 76, 105, 234, 156, 209, 5_1
       7  ?<Initializer for touchLink_EP>
      12  ?<Initializer for touchLink_EP_SimpleDesc>
       6  ??Subroutine43_0
       6  ??Subroutine44_0
       1  ??Subroutine45_0
       7  ??Subroutine46_0
       6  ??Subroutine47_0
       1  ??Subroutine48_0
       6  ??Subroutine49_0
       5  ??Subroutine50_0
       6  ??Subroutine51_0
       2  ??Subroutine52_0
       4  ??Subroutine53_0
       5  ?Subroutine0
       4  ?Subroutine1
       7  ?Subroutine10
       2  ?Subroutine11
       4  ?Subroutine12
       4  ?Subroutine13
       8  ?Subroutine14
       9  ?Subroutine15
       9  ?Subroutine16
       6  ?Subroutine17
      10  ?Subroutine18
       9  ?Subroutine19
       5  ?Subroutine2
       3  ?Subroutine20
      10  ?Subroutine21
      13  ?Subroutine22
      11  ?Subroutine23
       6  ?Subroutine24
       5  ?Subroutine25
       4  ?Subroutine26
       6  ?Subroutine27
       9  ?Subroutine28
       2  ?Subroutine29
       5  ?Subroutine3
       9  ?Subroutine30
       8  ?Subroutine31
      16  ?Subroutine32
       8  ?Subroutine33
       1  ?Subroutine34
      10  ?Subroutine35
      17  ?Subroutine36
       5  ?Subroutine37
       5  ?Subroutine38
       6  ?Subroutine39
       3  ?Subroutine4
       8  ?Subroutine40
      11  ?Subroutine41
      11  ?Subroutine42
       5  ?Subroutine5
      10  ?Subroutine6
      15  ?Subroutine7
       6  ?Subroutine8
      12  ?Subroutine9
       4  __Constant_1
       2  pDiscoveredNwkParamList
       2  touchLinkFreeGrpIdBegin
       2  touchLinkFreeGrpIdEnd
       2  touchLinkFreeNwkAddrBegin
       2  touchLinkFreeNwkAddrEnd
       2  touchLinkGrpIDsBegin
       2  touchLinkGrpIDsEnd
       1  touchLinkIsInitiator
       4  touchLinkLastAcceptedTransID
       1  touchLinkLeaveInitiated
       4  touchLinkResponseID
     148  touchLinkStartRtr
      10  touchLinkSubDevicesTbl
       1  touchLinkTaskId
       4  touchLinkTransID
     483  touchLink_BeaconIndCB
     299  touchLink_BuildAesKey
     144  touchLink_DecryptNwkKey
     212  touchLink_DevRejoin
      11  touchLink_DeviceIsInitiator
       7  touchLink_EP
       2  touchLink_EP_InClusterList
       2  touchLink_EP_OutClusterList
      12  touchLink_EP_SimpleDesc
     205  touchLink_EncryptNwkKey
      39  touchLink_FreeNwkParamList
      85  touchLink_GenerateRandNum
      88  touchLink_GerFreeRanges
      12  touchLink_GetDeviceInitiator
      34  touchLink_GetMsgRssi
      45  touchLink_GetNumGrpIDs
      30  touchLink_GetNumSubDevices
       7  touchLink_GetNwkKeyBitmask
      45  touchLink_GetRandPrimaryChannel
      92  touchLink_GetSubDeviceInfo
      85  touchLink_InitFreeRanges
     257  touchLink_InitVariables
     111  touchLink_IsValidSplitFreeRanges
      54  touchLink_IsValidTransID
      64  touchLink_ItemInit
      48  touchLink_NewNwkUpdateId
      36  touchLink_NwkDiscoveryCnfCB
      90  touchLink_PerformNetworkDisc
      22  touchLink_PermitJoin
     106  touchLink_PopGrpIDRange
      50  touchLink_PopNwkAddress
      72  touchLink_ProcessNwkUpdate
     223  touchLink_RouterProcessZDOMsg
     237  touchLink_SendDeviceInfoRsp
      37  touchLink_SendLeaveReq
      60  touchLink_SetChannel
      65  touchLink_SetMacNwkParams
     169  touchLink_SetNIB
      27  touchLink_SetTouchLinkTaskId
     214  touchLink_SplitFreeRanges
      71  touchLink_UpdateFreeRanges
     264  touchLink_UpdateNV
      36  touchLink_UpdateNwkKey
       1  touchlinkDistNwk
       1  touchlinkFNReset
     240  -- Other

 
 4 749 bytes in segment BANKED_CODE
   240 bytes in segment BANK_RELAYS
    19 bytes in segment XDATA_I
    19 bytes in segment XDATA_ID
    72 bytes in segment XDATA_ROM_C
    41 bytes in segment XDATA_Z
 
   259 bytes of CODE     memory
    68 bytes of CONST    memory (+ 4 bytes shared)
 4 749 bytes of HUGECODE memory
    60 bytes of XDATA    memory

Errors: none
Warnings: none
